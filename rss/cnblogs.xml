<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>PageRank之基于C和C#的基本实现 - FlashOliver</title>
<link>http://www.cnblogs.com/Oliva/p/8811314.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Oliva/p/8811314.html</guid>
<description>&lt;p data-mce-=&quot;&quot;&gt;&lt;strong&gt;重点不是说&lt;span lang=&quot;EN-US&quot;&gt;PageRank是什么，而是怎么用代码实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;span data-mce-=&quot;&quot;&gt;什么是&lt;span lang=&quot;EN-US&quot;&gt;PageRank？&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;PageRank，网页排名，又称网页级别、&lt;span lang=&quot;EN-US&quot;&gt;Google左侧排名或佩奇排名，是一种由&lt;sup&gt;&lt;span lang=&quot;EN-US&quot;&gt;[1]&lt;/span&gt;&lt;/sup&gt;&lt;span lang=&quot;EN-US&quot;&gt;  &lt;span lang=&quot;EN-US&quot;&gt;根据&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;网页&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;之间相互的&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;超链接&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;计算的技术，而作为网页排名的要素之一，以&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/Google&quot; target=&quot;_blank&quot;&gt;Google&lt;/a&gt;公司创办人&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%8B%89%E9%87%8C%C2%B7%E4%BD%A9%E5%A5%87&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;拉里·&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;佩奇&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;（&lt;span lang=&quot;EN-US&quot;&gt;Larry Page）之姓来命名。&lt;span lang=&quot;EN-US&quot;&gt;Google用它来体现网页的相关性和重要性，在&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;搜索引擎优化&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;操作中是经常被用来评估网页优化的成效因素之一。&lt;span lang=&quot;EN-US&quot;&gt;Google的创始人拉里&lt;span lang=&quot;EN-US&quot;&gt;·佩奇和&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E8%B0%A2%E5%B0%94%E7%9B%96%C2%B7%E5%B8%83%E6%9E%97&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;谢尔盖·&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;布林&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;于&lt;span lang=&quot;EN-US&quot;&gt;1998年在&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;斯坦福大学&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;发明了这项技术。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;PageRank的诞生背景&lt;span lang=&quot;EN-US&quot;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;早期的搜索引擎经历了&lt;span lang=&quot;EN-US&quot;&gt;“不评价&lt;span lang=&quot;EN-US&quot;&gt;” 和&lt;span lang=&quot;EN-US&quot;&gt;“基于检索词&lt;span lang=&quot;EN-US&quot;&gt;”的评价两个阶段。 &lt;span lang=&quot;EN-US&quot;&gt;“基于检索词&lt;span lang=&quot;EN-US&quot;&gt;”的评价算法很直观，但是容易受到&lt;span lang=&quot;EN-US&quot;&gt;“Term Spam”的攻击。其实从搜索引擎出现的那天起，&lt;span lang=&quot;EN-US&quot;&gt;spammer和搜索引擎反作弊的斗法就没有停止过。&lt;span lang=&quot;EN-US&quot;&gt;Spammer是这样一群人&lt;span lang=&quot;EN-US&quot;&gt;——试图通过搜索引擎算法的漏洞来提高目标页面（通常是一些广告页面或垃圾页面）的重要性，使目标页面在搜索结果中排名靠前。用户很容易被带入垃圾网页，用户体验极差。&lt;span lang=&quot;EN-US&quot;&gt;PageRank也应运而生。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;怎么实现&lt;span lang=&quot;EN-US&quot;&gt;PageRank?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;   简单的说&lt;span lang=&quot;EN-US&quot;&gt;PageRank让链接来&lt;span lang=&quot;EN-US&quot;&gt;&quot;投票&lt;span lang=&quot;EN-US&quot;&gt;&quot;，一个页面的&lt;span lang=&quot;EN-US&quot;&gt;“得票数&lt;span lang=&quot;EN-US&quot;&gt;”由所有链向它的页面的重要性来决定，到一个页面的超链接相当于对该页投一票。一个页面的&lt;span lang=&quot;EN-US&quot;&gt;PageRank是由所有链向它的页面（&lt;span lang=&quot;EN-US&quot;&gt;“链入页面&lt;span lang=&quot;EN-US&quot;&gt;”）的重要性经过递归算法得到的。一个有较多链入的页面会有较高的等级，相反如果一个页面没有任何链入页面，那么它没有等级。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;最简单&lt;span lang=&quot;EN-US&quot;&gt;pagerank模型&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;网页，可以抽象成的图当中的结点，网页与网页当中的链接关系可以模型化为数据结构中逻辑结构图再具体点是有向图（表示哪个网页链接哪个网页），我们可以把链接关系用作离散数学图论当中的可达矩阵形象具体的表示，下面我来给大家具体的说明，如下面这个例子&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412232117741-1764134283.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个例子中有四个网页，如果当前在&lt;span lang=&quot;EN-US&quot;&gt;A网页，那么上网者将会各有&lt;span lang=&quot;EN-US&quot;&gt;1/3的概率浏览到&lt;span lang=&quot;EN-US&quot;&gt;B、&lt;span lang=&quot;EN-US&quot;&gt;C、&lt;span lang=&quot;EN-US&quot;&gt;D网页，这里的&lt;span lang=&quot;EN-US&quot;&gt;3表示&lt;span lang=&quot;EN-US&quot;&gt;A有&lt;span lang=&quot;EN-US&quot;&gt;3条出链，如果一个网页有&lt;span lang=&quot;EN-US&quot;&gt;k条出链，那么跳转任意一个出链上的概率是&lt;span lang=&quot;EN-US&quot;&gt;1/k，同理&lt;span lang=&quot;EN-US&quot;&gt;D到&lt;span lang=&quot;EN-US&quot;&gt;B的概率&lt;span lang=&quot;EN-US&quot;&gt;1，而&lt;span lang=&quot;EN-US&quot;&gt;B到&lt;span lang=&quot;EN-US&quot;&gt;C的概率为&lt;span lang=&quot;EN-US&quot;&gt;1。一般用转移矩阵表示上网者的跳转概率，如果用&lt;span lang=&quot;EN-US&quot;&gt;n表示网页的数目，则转移矩阵&lt;span lang=&quot;EN-US&quot;&gt;M是一个&lt;span lang=&quot;EN-US&quot;&gt;n*n的方阵（可由可达矩阵转换成转移矩阵）；如果网页&lt;span lang=&quot;EN-US&quot;&gt;j有&lt;span lang=&quot;EN-US&quot;&gt;k个出链，那么对每一个出链指向的网页&lt;span lang=&quot;EN-US&quot;&gt;i，有&lt;span lang=&quot;EN-US&quot;&gt;M[i][j]=1/k，而其他网页的&lt;span lang=&quot;EN-US&quot;&gt;M[i][j]=0；上面示例图对应的可达矩阵如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt; &lt;br/&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;     A   B     C    D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;A      0   1     0   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;B      1   0     0   1 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C      1   1     0   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;D      1   0     1   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对应的转移矩阵为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;  &lt;span&gt;     A      B     C     D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;A      0      0.5   0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;B      0.33   0     0    1 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C      0.33   0.5   0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D      0,33   0     1    0  &lt;span lang=&quot;EN-US&quot;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;刚开始的时候，假设上网者在每一个网页的概率都是相等的（&lt;span&gt;这个假设确实存在，假设世界上只有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;n个网页，那么我只能开始的时候进入&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;n个网页当中的一个，就是&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1/n&lt;/span&gt;），即&lt;span lang=&quot;EN-US&quot;&gt;1/n，于是开始的时候的概率分布就是一个所有值都为&lt;span lang=&quot;EN-US&quot;&gt;1/n的&lt;span lang=&quot;EN-US&quot;&gt;n维列向量&lt;span lang=&quot;EN-US&quot;&gt;V0（&lt;span&gt;我们以概率分布向量的结果作为网页的质量结果，因为质量越高，被上网者浏览的概率越大，也称&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;pr值的大小&lt;/span&gt;），在转移矩阵&lt;span lang=&quot;EN-US&quot;&gt;M去右乘概率分布向量&lt;span lang=&quot;EN-US&quot;&gt;V0，就得到了第一步之后上网者的概率分布向量&lt;span lang=&quot;EN-US&quot;&gt;MV0,（&lt;span lang=&quot;EN-US&quot;&gt;nXn）&lt;span lang=&quot;EN-US&quot;&gt;*(nX1)依然得到一个&lt;span lang=&quot;EN-US&quot;&gt;nX1的矩阵。下面是&lt;span lang=&quot;EN-US&quot;&gt;V1的计算过程：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412232319484-1127583998.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意矩阵&lt;span lang=&quot;EN-US&quot;&gt;M中&lt;span lang=&quot;EN-US&quot;&gt;M[i][j]不为&lt;span lang=&quot;EN-US&quot;&gt;0表示用一个链接从&lt;span lang=&quot;EN-US&quot;&gt;j指向&lt;span lang=&quot;EN-US&quot;&gt;i，&lt;span lang=&quot;EN-US&quot;&gt;M的第一行乘以&lt;span lang=&quot;EN-US&quot;&gt;V0，表示累加所有网页到网页&lt;span lang=&quot;EN-US&quot;&gt;A的概率即得到&lt;span lang=&quot;EN-US&quot;&gt;0.125。得到了&lt;span lang=&quot;EN-US&quot;&gt;V1后，再用&lt;span lang=&quot;EN-US&quot;&gt;V1去右乘&lt;span lang=&quot;EN-US&quot;&gt;M得到&lt;span lang=&quot;EN-US&quot;&gt;V2，一直下去，最终&lt;span lang=&quot;EN-US&quot;&gt;V会收敛，即&lt;span lang=&quot;EN-US&quot;&gt;Vn=MV(n-1)，上面的图示例，不断的迭代，最终&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;V=[0.177,0.319,0.225，&lt;span lang=&quot;EN-US&quot;&gt;0.277]’&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;(算法的证明这里我们就不证明了，有兴趣的朋友可以百度一下&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;终止点问题&lt;/span&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;上述上网者的行为是一个马尔科夫过程的实例，要满足收敛性，需要具备一个条件：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图是强连通的，即从任意网页可以到达其他任意网页&lt;span lang=&quot;EN-US&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但是在浩瀚的互联网中，网页肯定是不满足强连通特性的，我们设计模型的时候想要达到强连通特性是很简单的，但是在互联网上有一些网页不指向任何网页，如果按照上面的计算，当浏览到这个没有指向的网页的时候那是不是就无法出去了呢？，导致前面累计得到的转移概率被清零，这样下去，最终的得到的概率分布向量所有元素几乎都为&lt;span lang=&quot;EN-US&quot;&gt;0。假设我们把上面图中&lt;span lang=&quot;EN-US&quot;&gt;B到&lt;span lang=&quot;EN-US&quot;&gt;A的链接丢掉，&lt;span lang=&quot;EN-US&quot;&gt;A变成了一个终止点，得到下面这个图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412232508816-1639483099.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;对应的转移矩阵为：&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;       A      B     C   D&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;A      0      0     0   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;B      0.33   0     0   1 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C      0.33   1     0   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;D            &lt;span lang=&quot;EN-US&quot;&gt;0.33 &lt;span lang=&quot;EN-US&quot;&gt;     0           1       0    &lt;span lang=&quot;EN-US&quot;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;连续迭代下去，最终所有元素都为&lt;span lang=&quot;EN-US&quot;&gt;0。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;陷阱问题&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;要是有投机取巧这想到用网页自己链接自己，让我们浏览这中了这个无线循环的陷阱怎么办呢？：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412232521039-274532656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上网者跑到&lt;span lang=&quot;EN-US&quot;&gt;D网页后，再也不能从&lt;span lang=&quot;EN-US&quot;&gt;D中出来，将最终导致概率分布值全部转移到&lt;span lang=&quot;EN-US&quot;&gt;D上来，这使得其他网页的概率分布值为&lt;span lang=&quot;EN-US&quot;&gt;0，从而整个网页排名就失去了意义。如果按照上面图对应的转移矩阵为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;        A     B     C    D&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;A       0     0.5   0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;B      0.33   0     0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C      0.33   0.5   0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D      0,33    0    1    1  &lt;span lang=&quot;EN-US&quot;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不断的迭代下去，的结果一定会是&lt;span lang=&quot;EN-US&quot;&gt;[0,0,0,1]的&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;span&gt;解决终止点问题和陷阱问题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;其实会出现这两个问题，是因为最开始构建模型的时候我们忽略了一个东西：上网者可以随时跳出他浏览的网页（浏览器上输入网址就行了），而不需要担心，要是浏览的网页没有链接那不就是不能出去了吗？（结果只需要输入网址就可以跳出去），那浏览的网页连接了自己浏览这不就一直在浏览这个了吗？（结果是浏览者发现这是陷阱都在重复浏览一个网页的时候，他可以轻松跳过去，只需要输入网址即可），当然正常情况他也是可以输入网址跳转任何他想去的网页，这个时候我们需要引入一个概念：阻尼系数（简单来说就是点击网页的概率-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;实际上就是用户感到无聊，停止点击，随机跳到新URL的概率&lt;/span&gt;&lt;span&gt;），这里我们取α = 0.8，当然也有很多的觉得0.85是好的，这个概念已经给出，数值看我们自己~（觉得能让你的结果符合预期就ok啦..）。 从而我们得到了更加完善的公式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412234451602-818542422.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;由于这些是数学上的计算，有了公式是比较容易推出结果来的，所以就不在举例啦~~&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span&gt;如何通过代码具体的实现?&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;   可以把每个网页所构成的复杂的关系模型化成数据结构的逻辑结构图(有向图)，每个网页就是一个结点，当一个网页(网页A)链接着另一个网页(网页B)的时候可以抽象的看出A-&amp;gt;B,即通过出度和入度来描述链接和被链接数，当你通过创建有向图的时候其实就相当于模拟了网页之间的关系(&lt;span&gt;当然浩瀚的互联网中网页数不胜数,我这里只是通过一个小的环境模拟这个算法的实现&lt;/span&gt;),通过PageRank算法加之迭代，使其每个网页的pr(衡量网页质量的参数)值都趋于稳定的时候,由pr值大小排序出来的网页的先后顺序可以相对准确的衡量网页质量。&lt;/p&gt;

&lt;p&gt;  &lt;span&gt;     &lt;strong&gt;我先是通过c语言模型化PageRank的算法 算出每个结点(网页)的pr值。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;需要构建有向图来模型化网页（c语言的结点是手动输入的，因为为了测试方便嘛~）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;math.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; OK 1
&lt;span&gt;#define&lt;/span&gt; ERROR -1
&lt;span&gt;#define&lt;/span&gt; FALSE 0
&lt;span&gt;#define&lt;/span&gt; TRUE 1
&lt;span&gt;#define&lt;/span&gt; MAXVER 20  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义最大顶点数&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; MAXQSIZE 100
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;#define OVERFLOW -2&lt;/span&gt;
&lt;span&gt;
typedef &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; verType;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;顶点类型&lt;/span&gt;
typedef &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Status;
typedef &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; Boolean;

typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt;
{
    verType verx[MAXVER];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; arcs[MAXVER][MAXVER];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;邻接矩阵&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; vernum, arcnum;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义最大顶点数 和 弧&lt;/span&gt;
&lt;span&gt;}MGraph;

Boolean visited[MAXVER];    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;顶点开始都没有被访问过&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; locate(MGraph G, verType ch);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找顶点在数组中的下标&lt;/span&gt;
Status CreateDG(MGraph *G,&lt;span&gt;int&lt;/span&gt; v);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建有向图&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; Create_Transfer_matrix(MGraph G, &lt;span&gt;double&lt;/span&gt; ***F);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建转移矩阵&lt;/span&gt;
&lt;span&gt;double&lt;/span&gt;** Mat_mul(&lt;span&gt;double&lt;/span&gt; **M1, &lt;span&gt;int&lt;/span&gt; num);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;矩阵相乘&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; GetNum(MGraph G, &lt;span&gt;int&lt;/span&gt; h, &lt;span&gt;int&lt;/span&gt; l);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到每一行非0项的个数&lt;/span&gt;
&lt;span&gt;double&lt;/span&gt; *Iteration(&lt;span&gt;double&lt;/span&gt; *M1, &lt;span&gt;double&lt;/span&gt; **M2, &lt;span&gt;double&lt;/span&gt; *M, &lt;span&gt;int&lt;/span&gt; num);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代法&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; **F =&lt;span&gt; NULL;
    MGraph G;
    CreateDG(&lt;/span&gt;&amp;amp;G, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    Create_Transfer_matrix(G, &lt;/span&gt;&amp;amp;&lt;span&gt;F);
    Mat_mul(F, G.vernum);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}


&lt;/span&gt;&lt;span&gt;double&lt;/span&gt; *Iteration(&lt;span&gt;double&lt;/span&gt; *M1, &lt;span&gt;double&lt;/span&gt; **M2, &lt;span&gt;double&lt;/span&gt; *M, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num)
{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代法&lt;/span&gt;
    &lt;span&gt;double&lt;/span&gt; *M3, temp = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, j;
    M3 &lt;/span&gt;= &lt;span&gt;malloc&lt;/span&gt;(num * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;));
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@ = %0.10lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, M[i]);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; num; j++&lt;span&gt;)
        {
            temp &lt;/span&gt;= M1[j] * M2[i][j] +&lt;span&gt; temp;
        }
        M3[i] &lt;/span&gt;= temp +&lt;span&gt; M[i];
        temp &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    putchar(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.10lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, M3[i]);
    }
    putchar(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; M3;
}

&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;** Mat_mul(&lt;span&gt;double&lt;/span&gt; **M1, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i,j;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; *M2, *M3, temp = &lt;span&gt;0&lt;/span&gt;, *&lt;span&gt;M;
    M3 &lt;/span&gt;= &lt;span&gt;malloc&lt;/span&gt;(num *&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;));
    M2 &lt;/span&gt;= &lt;span&gt;malloc&lt;/span&gt;(num * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化概率分布矩阵&lt;/span&gt;
&lt;span&gt;    {
        M2[i] &lt;/span&gt;= (&lt;span&gt;1.0&lt;/span&gt; / num * &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; num; j++&lt;span&gt;) 
        {
            temp &lt;/span&gt;= M1[i][j] * M2[j] +&lt;span&gt; temp;
        }
        M3[i] &lt;/span&gt;= temp + M2[i] * &lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;;
        temp &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.10lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, M3[i]);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; num; j++&lt;span&gt;) 
    {
        M2[j] &lt;/span&gt;= M2[j] * &lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;;
    }
    M &lt;/span&gt;= Iteration(M3, M1, M2, num);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用函数实现转移矩阵和概率向量的相乘&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; (fabs(M[&lt;span&gt;0&lt;/span&gt;] - M3[&lt;span&gt;0&lt;/span&gt;]) &amp;gt; &lt;span&gt;0.0000000001&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置迭代结束条件&lt;/span&gt;
&lt;span&gt;    {
        M3 &lt;/span&gt;=&lt;span&gt; M;
        M &lt;/span&gt;=&lt;span&gt; Iteration(M3, M1, M2, num);
        
    }    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        M[i] &lt;/span&gt;= M[i] * &lt;span&gt;0.8&lt;/span&gt; + &lt;span&gt;0.2&lt;/span&gt; /&lt;span&gt; num;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; - %.10lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, M3[i] - &lt;span&gt;0.0000000001&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; M1;
    
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; Create_Transfer_matrix(MGraph G, &lt;span&gt;double&lt;/span&gt; ***&lt;span&gt;F)
{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建转移矩阵&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, j;
    (&lt;/span&gt;*F) = &lt;span&gt;malloc&lt;/span&gt;(G.vernum * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt; *&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.vernum; i++&lt;span&gt;)
    {
        (&lt;/span&gt;*F)[i] = &lt;span&gt;malloc&lt;/span&gt;(G.vernum * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;));
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.vernum; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; G.vernum; j++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (GetNum(G, G.vernum, i) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                (&lt;/span&gt;*F)[j][i] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                (&lt;/span&gt;*F)[j][i] = &lt;span&gt;0.8&lt;/span&gt; * (G.arcs[j][i] / (GetNum(G, G.vernum, i) * &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;));
        }
    }
    putchar(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n转移矩阵为:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.vernum; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; G.vernum; j++&lt;span&gt;)
        {
            printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.10lf &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, (*&lt;span&gt;F)[i][j]);
        }
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; locate(MGraph G, verType ch)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.vernum &amp;amp;&amp;amp; ch != G.verx[i]; i++&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;

}

Status CreateDG(MGraph &lt;/span&gt;*G,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, j, k;
    verType ch1, ch2;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入有向图的顶点数和弧数,格式如(0 0): &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;G-&amp;gt;vernum, &amp;amp;G-&amp;gt;&lt;span&gt;arcnum);
    fflush(stdin);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;除缓存&lt;/span&gt;
    printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入顶点符号:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G-&amp;gt;vernum; i++&lt;span&gt;)
    {
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;G-&amp;gt;&lt;span&gt;verx[i]);
        fflush(stdin);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G-&amp;gt;vernum; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; G-&amp;gt;vernum; j++&lt;span&gt;)
        {
            G&lt;/span&gt;-&amp;gt;arcs[i][j] = &lt;span&gt;0&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;赋初值&lt;/span&gt;
&lt;span&gt;        }
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入有连接的点: 格式(A B)\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G-&amp;gt;arcnum; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入第%d对值\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c %c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;ch1, &amp;amp;ch2);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入顶点符号&lt;/span&gt;
&lt;span&gt;        fflush(stdin);
        k &lt;/span&gt;= locate(*G, ch1);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得顶点下标&lt;/span&gt;
        j = locate(*&lt;span&gt;G, ch2);
        G&lt;/span&gt;-&amp;gt;arcs[j][k] = &lt;span&gt;1&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为邻接矩阵赋值&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; OK;
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; GetNum(MGraph G, &lt;span&gt;int&lt;/span&gt; h, &lt;span&gt;int&lt;/span&gt; l)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到每一列非0的个数&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i, Num = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; h; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (G.arcs[i][l] &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            Num&lt;/span&gt;++&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Num;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;虽然实现了&lt;span lang=&quot;EN-US&quot;&gt;PageRank的算法但是仅仅是实现了而且，想要有趣一点的话可以简单模拟一下&lt;span lang=&quot;EN-US&quot;&gt;PageRank的应用背景&lt;span lang=&quot;EN-US&quot;&gt;:我在一个文件夹下面建立的多个&lt;span lang=&quot;EN-US&quot;&gt;HTML的网页&lt;span lang=&quot;EN-US&quot;&gt;(相互之间有链接&lt;span lang=&quot;EN-US&quot;&gt;),通过&lt;span lang=&quot;EN-US&quot;&gt;PageRank算法把每个网页的质量进行了排名，由程序给出排名顺序反馈给用户（通过&lt;span lang=&quot;EN-US&quot;&gt;C#实现的）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;这个是提前创好的简单的&lt;span lang=&quot;EN-US&quot;&gt;HTML网页&lt;span lang=&quot;EN-US&quot;&gt;(我的目的是模拟，所有网页只有一个标签，有的连标签都没有&lt;span lang=&quot;EN-US&quot;&gt;……)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233511465-35794659.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233536759-368198027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233548206-699365079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233609721-788776585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233619655-992355793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233629306-1214193111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233705604-244491702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家可以看出&lt;span lang=&quot;EN-US&quot;&gt;a是被链接最多的网页，其他的被链接的先后顺序相信大家也可以看出来，下面开始演示程序&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;1.首先输入网页所在的文件夹：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233946109-1759799781.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.通过配置计算环境及其其他的相关事宜&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233956058-1953208752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.获得网页质量&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412234018414-1973145470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过程序的排序已经将质量相当大小反馈给用户&lt;span lang=&quot;EN-US&quot;&gt;,用户可以选择性的浏览网页&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们用&lt;span lang=&quot;EN-US&quot;&gt;C语言的来验证每个网页的&lt;span lang=&quot;EN-US&quot;&gt;pr值是否真如此程序所言&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412234029775-969120786.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;(注意 &lt;span lang=&quot;EN-US&quot;&gt;– 是一个标志，表示最终迭代的结果&lt;span lang=&quot;EN-US&quot;&gt;…) 由上到下依次为&lt;span lang=&quot;EN-US&quot;&gt;A~F的&lt;span lang=&quot;EN-US&quot;&gt;pr值，正如&lt;span lang=&quot;EN-US&quot;&gt;C#的程序排序所言，证明这个是合理的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;------由于&lt;span lang=&quot;EN-US&quot;&gt;c#的代码不是一两张图片就可以解释的清楚的，所有有兴趣的朋友可以一起探讨和分享。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（这个程序是我才学习了&lt;span lang=&quot;EN-US&quot;&gt;C#写的，如果有什么不足或者错误之处请多多包涵）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;需要源码的朋友可以评论区或者私信我留下你们的邮件，我看到后会尽快发给你们源码滴，大家一起进步一起学习&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Apr 2018 15:48:00 +0000</pubDate>
<dc:creator>FlashOliver</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Oliva/p/8811314.html</dc:identifier>
</item>
<item>
<title>史上最全TensorFlow学习资源汇总 - aibbt_com</title>
<link>http://www.cnblogs.com/aibbtcom/p/8811203.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aibbtcom/p/8811203.html</guid>
<description>&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img src=&quot;http://img.aibbt.com/2018/04/8f801-20180412230651-41d41.jpeg&quot; alt=&quot;史上最全TensorFlow学习资源汇总&quot; width=&quot;100%&quot; data-backh=&quot;327&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5857558139534884&quot; data-s=&quot;300,640&quot; data-data-original=&quot;https://mmbiz.qpic.cn/mmbiz_png/7PuqRWWU6zN7pQS0JDPl2ChCibESOqYQFOLQSfDPWptawEwXfia7z8icgGmL4uoWYyrjdPy3sEfyicjbm2qs6WyvtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;688&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;来源 | 悦动智能（公众号ID：aibbtcom）&lt;/p&gt;
&lt;p&gt;本篇文章将为大家总结TensorFlow纯干货学习资源，非常适合新手学习，&lt;a title=&quot;查看与 建议 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E5%BB%BA%E8%AE%AE/&quot; target=&quot;_blank&quot;&gt;建议&lt;/a&gt;大家收藏。&lt;/p&gt;
&lt;h2 data-sgtrans-text=&quot;1-5&quot;&gt;&lt;strong&gt;▌&lt;/strong&gt;&lt;strong&gt;一 、TensorFlow教程资源&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1)适合初学者的TensorFlow教程和代码示例：&lt;/p&gt;
&lt;p&gt;https://github.com/aymericdamien/TensorFlow-Examples&lt;/p&gt;
&lt;p&gt;该教程不光提供了一些经典的&lt;a title=&quot;查看与 数据集 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E6%95%B0%E6%8D%AE%E9%9B%86/&quot; target=&quot;_blank&quot;&gt;数据集&lt;/a&gt;，更是从实现最简单的“Hello World”开始，到&lt;a title=&quot;查看与 机器学习 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/&quot; target=&quot;_blank&quot;&gt;机器学习&lt;/a&gt;的经典&lt;a title=&quot;查看与 算法 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E7%AE%97%E6%B3%95/&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;，再到神经网络的常用模型，一步步带你从入门到精通，是初学者学习TensorFlow的最佳教程。&lt;/p&gt;
&lt;p&gt;2)从TensorFlow基础知识到有趣的项目应用:&lt;/p&gt;
&lt;p&gt;https://github.com/pkmital/&lt;a title=&quot;查看与 tensorflow 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/tensorflow/&quot; target=&quot;_blank&quot;&gt;tensorflow&lt;/a&gt;_tutorials&lt;/p&gt;
&lt;p&gt;同样是适合新手的教程，从安装到项目实战，教你搭建一个属于自己的神经网络。&lt;/p&gt;
&lt;p&gt;3)使用Jupyter Notebook运行的TensorFlow教程：&lt;/p&gt;
&lt;p&gt;https://github.com/sjchoi86/Tensorflow-101&lt;/p&gt;
&lt;p&gt;4)TensorFlow中文&lt;a title=&quot;查看与 社区 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E7%A4%BE%E5%8C%BA/&quot; target=&quot;_blank&quot;&gt;社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;http://www.aibbt.com/a/&lt;a title=&quot;查看与 tensorflow 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/tensorflow/&quot; target=&quot;_blank&quot;&gt;tensorflow&lt;/a&gt;/&lt;/p&gt;
&lt;p&gt;本教程是基于Jupyter Notebook开发环境的TensorFlow教程，Jupyter Notebook是一款非常好用的交互式开发工具，不仅支持40多种编程语言，还可以实时运行代码、&lt;a title=&quot;查看与 共享 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E5%85%B1%E4%BA%AB/&quot; target=&quot;_blank&quot;&gt;共享&lt;/a&gt;文档、数据可视化、支持markdown等，适用于机器学习、统计建模数据处理、特征提取等多个领域。&lt;/p&gt;
&lt;p&gt;4)构建您的第一款TensorFlow &lt;a title=&quot;查看与 Android 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/android/&quot; target=&quot;_blank&quot;&gt;Android&lt;/a&gt;应用程序：&lt;/p&gt;
&lt;p&gt;https://omid.al/posts/2017-02-20-Tutorial-Build-Your-First-Tensorflow-Android-App.html&lt;/p&gt;
&lt;p&gt;本教程可帮助您从零开始将张量流模型引入到Android应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.aibbt.com/2018/04/6f20e-20180412230652-c5aca.png&quot; alt=&quot;史上最全TensorFlow学习资源汇总&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1954545454545455&quot; data-s=&quot;300,640&quot; data-data-original=&quot;https://mmbiz.qpic.cn/mmbiz_png/7PuqRWWU6zN7pQS0JDPl2ChCibESOqYQFO4sbGXPo13VviciboMjCwGDHeYn7pthNgwxRzAxOcfa7xKyh8ubAWmAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;220&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5)TensorFlow代码练习：&lt;/p&gt;
&lt;p&gt;https://github.com/terryum/TensorFlow_Exercises&lt;/p&gt;
&lt;p&gt;一个从易到难的TensorFlow代码练习手册。非常适合学习TensorFlow的小伙伴。&lt;/p&gt;
&lt;p&gt;接下来，再给大家推荐一些TensorFlow不错的视频教程：&lt;/p&gt;
&lt;h2 data-sgtrans-text=&quot;1-5&quot;&gt;&lt;strong&gt;▌&lt;/strong&gt;&lt;strong&gt;二、TensorFlow视频资源&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1)TF Girls 修炼指南：&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watchv=TrWqRMJZU8A&amp;amp;list=PLwY2GJhAPWRcZxxVFpNhhfivuW0kX15yG&amp;amp;index=2&lt;/p&gt;
&lt;p&gt;一个TensorFlow从零开始的公开视频课程，课程偏基础、入门，但知识点讲的非常详细。&lt;/p&gt;
&lt;p&gt;2)炼数成金TensorFlow公开课：&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watchv=eAtGqz8ytOI&amp;amp;list=PLjSwXXbVlK6IHzhLOMpwHHLjYmINRstrk&lt;/p&gt;
&lt;p&gt;非常不错的课程，推荐给大家。&lt;/p&gt;
&lt;p&gt;3)当然还有台湾国立大学李宏毅教程&lt;a title=&quot;查看与 深度学习 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/&quot; target=&quot;_blank&quot;&gt;深度学习&lt;/a&gt;的课程也值得推荐给大家：&lt;/p&gt;
&lt;p&gt;https://www.bilibili.com/video/av9770302/&lt;/p&gt;
&lt;p&gt;4)英文不错的小伙伴，也为大家推荐一些国外大牛的英文课程：&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=vq2nnJ4g6N0；&lt;/p&gt;
&lt;p&gt;http://bit.ly/1OX8s8Y；&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=GZB&lt;a title=&quot;查看与 IP 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/ip/&quot; target=&quot;_blank&quot;&gt;IP&lt;/a&gt;wdGtkk&amp;amp;t=125s&lt;/p&gt;
&lt;p&gt;5)介绍了这么多课程，怎么能少了&lt;a title=&quot;查看与 斯坦福大学 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6/&quot; target=&quot;_blank&quot;&gt;斯坦福大学&lt;/a&gt;TensorFlow系列的课程！！！&lt;/p&gt;
&lt;p&gt;话不多说，直接上链接：&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=g-EvyKpZjmQ&amp;amp;index=1&amp;amp;list=PLIDllPt3EQZoS8gCP3cw273Cq9puuPLTg&lt;/p&gt;
&lt;p&gt;课程主页：&lt;/p&gt;
&lt;p&gt;http://web.stanford.edu/class/cs20si/index.html&lt;/p&gt;
&lt;p&gt;课程所有的ppt和笔记notes下载地址：&lt;/p&gt;
&lt;p&gt;https://pan.baidu.com/s/1o8uOQpW&lt;/p&gt;
&lt;p&gt;课程相关实战的github地址：&lt;/p&gt;
&lt;p&gt;chiphuyen/tf-stanford-tutorials&lt;/p&gt;
&lt;p&gt;6)最后，怎么能忘了&lt;a title=&quot;查看与 谷歌 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E8%B0%B7%E6%AD%8C/&quot; target=&quot;_blank&quot;&gt;谷歌&lt;/a&gt;爸爸发布在TensorFlow官网上的视频教程，针对TensorFlow初级学习的小伙伴还是非常不错的一套课程，有助于大家快速入门：&lt;/p&gt;
&lt;p&gt;https://developers.google.cn/machine-learning/crash-course/&lt;/p&gt;
&lt;p&gt;好了，通过上边的资源文档和视频教程详细大家对TensorFlow已经有了扎实的基础，接下来是不是应该做一些逼格比较高的实战项目提升一下自己呢？所以接下来为大家推荐一些项目实战资源。&lt;/p&gt;
&lt;h2 data-sgtrans-text=&quot;1-5&quot;&gt;&lt;strong&gt;▌&lt;/strong&gt;&lt;strong&gt;三、TensorFlow项目资源&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1)一个实现实现Alex Graves论文的随机手写生成的案例：&lt;/p&gt;
&lt;p&gt;https://github.com/hardmaru/write-rnn-tensorflow&lt;/p&gt;
&lt;p&gt;2)基于TensorFlow的生成对抗文本到图像合成：&lt;/p&gt;
&lt;p&gt;https://github.com/zsdonghao/text-to-image&lt;/p&gt;
&lt;p&gt;如下图所示，该项目是基于TensorFlow的DC&lt;a title=&quot;查看与 GAN 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/gan/&quot; target=&quot;_blank&quot;&gt;GAN&lt;/a&gt;模型，教大家一步步从对抗生成文本到图像合成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.aibbt.com/2018/04/d9c75-20180412230652-3d028.jpeg&quot; alt=&quot;史上最全TensorFlow学习资源汇总&quot; width=&quot;100%&quot; data-backh=&quot;145&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.2592997811816193&quot; data-s=&quot;300,640&quot; data-data-original=&quot;https://mmbiz.qpic.cn/mmbiz_png/7PuqRWWU6zN7pQS0JDPl2ChCibESOqYQFFPZdBMrRBdRFkneC8gSAe4d4jLJeX09niaycRSXjBaQS1M7pnyYqOnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3)基于注意力的图像字幕生成器：&lt;/p&gt;
&lt;p&gt;https://github.com/yunjey/show-attend-and-tell&lt;/p&gt;
&lt;p&gt;该模型引入了基于注意力的图像标题生成器。可以将其注意力转移到图像的相关部分，同时生成每个单词。&lt;/p&gt;
&lt;p&gt;4)神经网络着色灰度图像：&lt;/p&gt;
&lt;p&gt;https://github.com/pavelgonchar/colornet&lt;/p&gt;
&lt;p&gt;一个非常有趣且应用场景非常广的一个项目，使用神经网络着色灰度图像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.aibbt.com/2018/04/61a12-20180412230652-81c44.jpeg&quot; alt=&quot;史上最全TensorFlow学习资源汇总&quot; width=&quot;100%&quot; data-backh=&quot;379&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6790633608815427&quot; data-s=&quot;300,640&quot; data-data-original=&quot;https://mmbiz.qpic.cn/mmbiz_png/7PuqRWWU6zN7pQS0JDPl2ChCibESOqYQFm0zxbV6nw8wFY84wRUUYPJhy3j3ibAxFsAjDen8ErMYUH6iawsHibj5fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5)基于&lt;a title=&quot;查看与 Facebook 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/facebook/&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;中FastText的简单嵌入式文本分类器：&lt;/p&gt;
&lt;p&gt;https://github.com/apcode/tensorflow_fasttext&lt;/p&gt;
&lt;p&gt;该项目是源于Facebook中的FastText的想法，并在TensorFlow中实施。FastText是一款快速的文本分类器，提供简单而高效的文本分类和表征学习的方法。&lt;/p&gt;
&lt;p&gt;6)用TensorFlow实现“基于句子分类的&lt;a title=&quot;查看与 卷积神经网络 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/&quot; target=&quot;_blank&quot;&gt;卷积神经网络&lt;/a&gt;”：&lt;/p&gt;
&lt;p&gt;https://github.com/dennybritz/cnn-text-classification-tf&lt;/p&gt;
&lt;p&gt;7)使用OpenStreetMap功能和&lt;a title=&quot;查看与 卫星 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E5%8D%AB%E6%98%9F/&quot; target=&quot;_blank&quot;&gt;卫星&lt;/a&gt;图像训练TensorFlow神经网络：&lt;/p&gt;
&lt;p&gt;https://github.com/jtoy/awesome-tensorflow&lt;/p&gt;
&lt;p&gt;该项目是通过使用OpenStreetMap（OSM）数据训练神经网络，进而对卫星图像中的特征进行分类。&lt;/p&gt;
&lt;p&gt;8)用Tenflow实现YOLO：“实时对象检测”，并支持实时在&lt;a title=&quot;查看与 移动设备 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/&quot; target=&quot;_blank&quot;&gt;移动设备&lt;/a&gt;上运行的一个小项目https://github.com/thtrieu/darkflow，&lt;a title=&quot;查看与 计算机视觉 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/&quot; target=&quot;_blank&quot;&gt;计算机视觉&lt;/a&gt;领域研究者的最佳福利。&lt;/p&gt;
</description>
<pubDate>Thu, 12 Apr 2018 15:24:00 +0000</pubDate>
<dc:creator>aibbt_com</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aibbtcom/p/8811203.html</dc:identifier>
</item>
<item>
<title>ConcurrentHashMap源码解析 - 浪人~</title>
<link>http://www.cnblogs.com/liqiangchn/p/8811095.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liqiangchn/p/8811095.html</guid>
<description>&lt;h3 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;一、ConcurrentHashMap源码注解&lt;/span&gt;&lt;/h3&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;span&gt;个人站点：&lt;a href=&quot;http://www.mycookies.cn/&quot; target=&quot;_blank&quot;&gt;www.mycookies.cn​&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**
 * A hash table supporting full concurrency of retrievals and
 * adjustable expected concurrency for updates. This class obeys the
 * same functional specification as {@link java.util.Hashtable}, and
 * includes versions of methods corresponding to each method of
 * &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hashtable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;. However, even though all operations are
 * thread-safe, retrieval operations do &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;not&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; entail locking,
 * and there is &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;not&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; any support for locking the entire table
 * in a way that prevents all access.  This class is fully
 * interoperable with &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hashtable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; in programs that rely on its
 * thread safety but not on its synchronization details.
 *
 * &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Retrieval operations (including &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;get&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;) generally do not
 * block, so may overlap with update operations (including
 * &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;put&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; and &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;remove&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;). Retrievals reflect the results
 * of the most recently &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;completed&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; update operations holding
 * upon their onset.  For aggregate operations such as &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;putAll&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
 * and &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;clear&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, concurrent retrievals may reflect insertion or
 * removal of only some entries.  Similarly, Iterators and
 * Enumerations return elements reflecting the state of the hash table
 * at some point at or since the creation of the iterator/enumeration.
 * They do &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;not&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; throw {@link ConcurrentModificationException}.
 * However, iterators are designed to be used by only one thread at a time.
 *
 * &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; The allowed concurrency among update operations is guided by
 * the optional &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;concurrencyLevel&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; constructor argument
 * (default &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;16&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;), which is used as a hint for internal sizing.  The
 * table is internally partitioned to try to permit the indicated
 * number of concurrent updates without contention. Because placement
 * in hash tables is essentially random, the actual concurrency will
 * vary.  Ideally, you should choose a value to accommodate as many
 * threads as will ever concurrently modify the table. Using a
 * significantly higher value than you need can waste space and time,
 * and a significantly lower value can lead to thread contention. But
 * overestimates and underestimates within an order of magnitude do
 * not usually have much noticeable impact. A value of one is
 * appropriate when it is known that only one thread will modify and
 * all others will only read. Also, resizing this or any other kind of
 * hash table is a relatively slow operation, so, when possible, it is
 * a good idea to provide estimates of expected table sizes in
 * constructors.
 */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;一个哈希表支持完全并发的检索和可更新的预期并发性。这个类服从与{@link java.util.Hashtable}相同的功能规范  包括对应于每种方法的版本  的HashTable的。但是，即使所有的操作都是 线程安全的检索操作不需要加锁，  并且没有任何对锁定整个表的支持， 阻止所有访问的方式。这这个类在依赖线程安全性但不同步细节，在程序中完全与Hashtable 互操作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;  检索操作（包括get ）通常不会阻塞，因此可能会与更新操作并发  (添加 和删除）。检索反映结果&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;  是最近完成更新操作持有在他们并发访问时时。对于像&lt;span class=&quot;md-tag&quot;&gt;&amp;lt;tt&amp;gt; &lt;span&gt;putAll &lt;span class=&quot;md-tag&quot;&gt;&amp;lt;/ tt&amp;gt;&lt;span&gt;这样的集合操作  和&lt;span class=&quot;md-tag&quot;&gt;&amp;lt;tt&amp;gt;&lt;span&gt;清除&lt;span class=&quot;md-tag&quot;&gt;&amp;lt;/ tt&amp;gt;&lt;span&gt;，并发检索可能反映插入或  只删除一些条目。同样，迭代器和  枚举返回反映散列表状态的元素&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;  在创建迭代器/枚举时或之后的某个时间点。  它们不会&lt;span class=&quot;md-tag&quot;&gt;&amp;lt;em&amp;gt;&lt;span&gt;抛出ConcurrentModificationException。  但是，迭代器被设计为一次只能由一个线程使用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;更新操作中允许的并发性由指导 可选的concurrencyLevel构造函数参数（默认16 ），用作内部大小调整的提示。该  表内部分区以尝试允许指示 没有争用的并发更新数量。因为安置 在散列表中基本上是随机的，实际的并发会 变化。理想情况下，您应该选择一个值来容纳尽可能多的值线程将永远同时修改表。用一个  明显高于你需要的价值会浪费空间和时间  而显着较低的值可能会导致线程争用。但  在一个数量级内过高估计和低估  通常不会有太明显的影响。值为1  当知道只有一个线程会修改时适用  所有其他人只会阅读。此外，调整这个或任何其他类型的  散列表是一个相对较慢的操作，所以，如果可能的话，在构造函数中提供预期表格大小的估计值的一个好主意。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;http://p34qzbztu.bkt.clouddn.com/201804010914_649.jpg?imageView1/JannLee/md/01&quot;&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201804010914_649.jpg?imageView1/JannLee/md/01&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;二、源码剖析&lt;/span&gt;&lt;/h3&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;重要的类&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;ConcurrentHashMap的内部类HashEntry&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用来存储键值对，与hashtable中不同的是 value设置为volatile&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash;
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; K key;
    &lt;/span&gt;&lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; V value;
    &lt;/span&gt;&lt;span&gt;volatile&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt; next;
​
    HashEntry(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hash, K key, V value, HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt; next) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hash =&lt;span&gt; hash;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.next =&lt;span&gt; next;
    }
​
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Sets next field with volatile write semantics.  (See above
     * about use of putOrderedObject.)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setNext(HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt; n) {
        UNSAFE.putOrderedObject(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, nextOffset, n);
    }
​
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Unsafe mechanics&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; sun.misc.Unsafe UNSAFE;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; nextOffset;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            UNSAFE &lt;/span&gt;=&lt;span&gt; sun.misc.Unsafe.getUnsafe();
            Class k &lt;/span&gt;= HashEntry.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;;
            nextOffset &lt;/span&gt;=&lt;span&gt; UNSAFE.objectFieldOffset
                (k.getDeclaredField(&lt;/span&gt;&quot;next&quot;&lt;span&gt;));
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Error(e);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;ConcurrentHashMap重要的方法---put&lt;/span&gt;&lt;/h3&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
    Segment&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; s;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value == &lt;span&gt;null&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;value不能为null&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hash = hash(key);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一次对key进行hash运算 &lt;/span&gt;
  &lt;span&gt;int&lt;/span&gt; j = (hash &amp;gt;&amp;gt;&amp;gt; segmentShift) &amp;amp; segmentMask;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;映射到hash表中的某个segment&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; ((s = (Segment&amp;lt;K,V&amp;gt;)UNSAFE.getObject          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; nonvolatile; recheck&lt;/span&gt;
         (segments, (j &amp;lt;&amp;lt; SSHIFT) + SBASE)) == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  in ensureSegment&lt;/span&gt;
        s = ensureSegment(j); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回给定索引的Segment，创建它并在Segment表中（通过CAS）记录（如果尚不存在）。&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; s.put(key, hash, value, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
}

 &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Segment&amp;lt;K,V&amp;gt; ensureSegment(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; k) {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Segment&amp;lt;K,V&amp;gt;[] ss = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.segments;
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; u = (k &amp;lt;&amp;lt; SSHIFT) + SBASE; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; raw offset&lt;/span&gt;
        Segment&amp;lt;K,V&amp;gt;&lt;span&gt; seg;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果当前索引对应segment不存在&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; ((seg = (Segment&amp;lt;K,V&amp;gt;)UNSAFE.getObjectVolatile(ss, u)) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            Segment&lt;/span&gt;&amp;lt;K,V&amp;gt; proto = ss[0]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use segment 0 as prototype&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; cap =&lt;span&gt; proto.table.length;
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; lf =&lt;span&gt; proto.loadFactor;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; threshold = (&lt;span&gt;int&lt;/span&gt;)(cap *&lt;span&gt; lf);
            HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt;[] tab = (HashEntry&amp;lt;K,V&amp;gt;[])&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashEntry[cap];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((seg = (Segment&amp;lt;K,V&amp;gt;&lt;span&gt;)UNSAFE.getObjectVolatile(ss, u))
                &lt;/span&gt;== &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; recheck
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Segment&lt;/span&gt;
                Segment&amp;lt;K,V&amp;gt; s = &lt;span&gt;new&lt;/span&gt; Segment&amp;lt;K,V&amp;gt;&lt;span&gt;(lf, threshold, tab);
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; ((seg = (Segment&amp;lt;K,V&amp;gt;&lt;span&gt;)UNSAFE.getObjectVolatile(ss, u))
                       &lt;/span&gt;== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (UNSAFE.compareAndSwapObject(ss, u, &lt;span&gt;null&lt;/span&gt;, seg =&lt;span&gt; s))
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; seg;
    }

    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; V put(K key, &lt;span&gt;int&lt;/span&gt; hash, V value, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; onlyIfAbsent) {
        HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; node = tryLock() ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; :
            scanAndLockForPut(key, hash, value);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试获取锁，当前线程独家占有，node赋值为null，否则一直获取锁，直到获取到锁然后创建一个键值对并返回&lt;/span&gt;
&lt;span&gt;        V oldValue;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt;[] tab =&lt;span&gt; table;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = (tab.length - 1) &amp;amp;&lt;span&gt; hash;
            HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; first =&lt;span&gt; entryAt(tab, index);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (HashEntry&amp;lt;K,V&amp;gt; e =&lt;span&gt; first;;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    K k;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((k = e.key) == key ||&lt;span&gt;
                        (e.hash &lt;/span&gt;== hash &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))) {
                        oldValue &lt;/span&gt;=&lt;span&gt; e.value;
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;onlyIfAbsent) {
                            e.value &lt;/span&gt;=&lt;span&gt; value;
                            &lt;/span&gt;++&lt;span&gt;modCount;
                        }
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    }
                    e &lt;/span&gt;=&lt;span&gt; e.next;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        node.setNext(first);
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        node &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt;(hash, key, value, first);
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c = count + 1&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c &amp;gt; threshold &amp;amp;&amp;amp; tab.length &amp;lt;&lt;span&gt; MAXIMUM_CAPACITY)
                        rehash(node);
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        setEntryAt(tab, index, node);
                    &lt;/span&gt;++&lt;span&gt;modCount;
                    count &lt;/span&gt;=&lt;span&gt; c;
                    oldValue &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            unlock();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放锁&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;如果当前线程是该锁的持有者，则保持计数递减。 如果保持计数现在为零，则锁定被释放。 如果当前线程不是该锁的持有者，则抛出{@link IllegalMonitorStateException}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Attempts to release this lock.
 *
 * &amp;lt;p&amp;gt;If the current thread is the holder of this lock then the hold
 * count is decremented.  If the hold count is now zero then the lock
 * is released.  If the current thread is not the holder of this
 * lock then {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; IllegalMonitorStateException} is thrown.
 *
 * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IllegalMonitorStateException if the current thread does not
 *         hold this lock
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; unlock() {
    sync.release(&lt;/span&gt;1&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;扫描包含给定key的节点 ，同时尝试获取锁，如果找不到则创建并返回一个。返回后，保证持有当前锁。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;br/&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* Scans for a node containing given key while trying to
* acquire lock, creating and returning one if not found. Upon
* return, guarantees that lock is held. UNlike in most
* methods, calls to method equals are not screened: Since
* traversal speed doesn't matter, we might as well help warm
* up the associated code and accesses as well.
*
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; a new node if key not found, else null
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt; scanAndLockForPut(K key, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash, V value) {      
       HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; first = entryForHash(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, hash);
        HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; e =&lt;span&gt; first;
        HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; node = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; retries = -1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; negative while locating node&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;tryLock()) {
            HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; f; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; to recheck first below&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (retries &amp;lt; 0&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; speculatively create node&lt;/span&gt;
                        node = &lt;span&gt;new&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt;(hash, key, value, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    retries &lt;/span&gt;= 0&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (key.equals(e.key))
                    retries &lt;/span&gt;= 0&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    e &lt;/span&gt;=&lt;span&gt; e.next;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (++retries &amp;gt;&lt;span&gt; MAX_SCAN_RETRIES) {
                lock();
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((retries &amp;amp; 1) == 0 &amp;amp;&amp;amp;&lt;span&gt;
                     (f &lt;/span&gt;= entryForHash(&lt;span&gt;this&lt;/span&gt;, hash)) !=&lt;span&gt; first) {
                e &lt;/span&gt;= first = f; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; re-traverse if entry changed&lt;/span&gt;
                retries = -1&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;只有在当时没有被另一个线程占用的情况下才会获取该锁&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;如果该锁没有被另一个线程和另一个线程占用，则获取该锁   立即返回值为true，将锁定保持计数设置为1。 即使此锁已设置为使用公平的顺序策略，对 tryLock()调用将立即获得该锁（如果该锁可用），无论其他线程当前是否正在等待锁。 这种强制 行为在某些情况下是有用的，即使它违背了公平。 如果您想遵守此锁的公平性设置，请使用 {@link #tryLock（long，TimeUnit）tryLock（0，TimeUnit.SECONDS）} 他们几乎相同（它也检测到中断）。 如果当前线程已经拥有这个锁，那么保持计数增加1，方法返回{true}。 如果该锁由另一个线程保存，则此方法将立即以* {false}的值返回*。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; tryLock() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sync.nonfairTryAcquire(1&lt;span&gt;);
}

    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; nonfairTryAcquire(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; acquires) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前线程&lt;/span&gt;
        &lt;span&gt;final&lt;/span&gt; Thread current =&lt;span&gt; Thread.currentThread();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c = getState();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回statue (state是voltile修饰的)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (c == 0) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果state==0，即当前锁空闲&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (compareAndSetState(0&lt;span&gt;, acquires)) {
                setExclusiveOwnerThread(current);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置当前线程拥有锁&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (current ==&lt;span&gt; getExclusiveOwnerThread()) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; nextc = c +&lt;span&gt; acquires;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nextc &amp;lt; 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow&lt;/span&gt;
                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error(&quot;Maximum lock count exceeded&quot;&lt;span&gt;);
            setState(nextc);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setExclusiveOwnerThread(Thread t) {
    exclusiveOwnerThread &lt;/span&gt;=&lt;span&gt; t;
}

​
 &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Thread getExclusiveOwnerThread() {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; exclusiveOwnerThread;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;Size方法&lt;/span&gt;&lt;/h5&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Try a few times to get accurate count. On failure due to
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; continuous async changes in table, resort to locking.&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Segment&amp;lt;K,V&amp;gt;[] segments = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.segments;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;
    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; overflow; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true if size overflows 32 bits&lt;/span&gt;
    &lt;span&gt;long&lt;/span&gt; sum;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; sum of modCounts&lt;/span&gt;
    &lt;span&gt;long&lt;/span&gt; last = 0L;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; previous sum&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; retries = -1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; first iteration isn't retry&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (;;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (retries++ ==&lt;span&gt; RETRIES_BEFORE_LOCK) {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; segments.length; ++&lt;span&gt;j)
                    ensureSegment(j).lock(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取所有segment的锁&lt;/span&gt;
&lt;span&gt;            }
            sum &lt;/span&gt;= 0L&lt;span&gt;;
            size &lt;/span&gt;= 0&lt;span&gt;;
            overflow &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; segments.length; ++&lt;span&gt;j) {
                Segment&lt;/span&gt;&amp;lt;K,V&amp;gt; seg =&lt;span&gt; segmentAt(segments, j);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (seg != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    sum &lt;/span&gt;+=&lt;span&gt; seg.modCount;
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c =&lt;span&gt; seg.count;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c &amp;lt; 0 || (size += c) &amp;lt; 0&lt;span&gt;)
                        overflow &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sum ==&lt;span&gt; last)
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            last &lt;/span&gt;=&lt;span&gt; sum;
        }
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (retries &amp;gt;&lt;span&gt; RETRIES_BEFORE_LOCK) {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; segments.length; ++j)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放所有segment的锁&lt;/span&gt;
&lt;span&gt;                segmentAt(segments, j).unlock();
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; overflow ?&lt;span&gt; Integer.MAX_VALUE : size;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;span&gt;：ConcurrentHashMap是线程安全的哈希表，它是通过“分段”来实现的。ConcurrentHashMap中包括了“Segment(分段)数组”，每个Segment就是一个哈希表，而且也是可重入的互斥锁。第一，Segment是哈希表表现在，Segment包含了“HashEntry数组”，而“HashEntry数组”中的每一个HashEntry元素是一个单向链表。即Segment是通过链式哈希表。第二，Segment是可重入的互斥锁表现在，Segment继承于ReentrantLock，而ReentrantLock就是可重入的互斥锁。&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;对于ConcurrentHashMap的添加，删除操作，在操作开始前，线程都会获取Segment的互斥锁；操作完毕之后，才会释放。而对于读取操作，它是通过volatile去实现的，HashEntry数组是volatile类型的，而volatile能保证“即对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入”，即我们总能读到其它线程写入HashEntry之后的值。 以上这些方式，就是ConcurrentHashMap线程安全的实现原理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;通过分段方式减小的锁的粒度，如果整个map使用一个锁，则就不能并行地操作键值对。而ConcurrentHashMap将HashMap分解成段，每个段有一把锁，锁的粒度就少了。但是与此同时，锁的数量增多了。当需要访问ConcurrentHashMap的全局属性时（比如ConcurrentHashMap的size()方法），需要 获得 所有的Segment的锁。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 个人站点：www.mycookies.cn&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;github:&lt;a href=&quot;https://github.com/liqianggh&quot; target=&quot;_blank&quot;&gt;https://github.com/liqianggh&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Apr 2018 14:59:00 +0000</pubDate>
<dc:creator>浪人~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liqiangchn/p/8811095.html</dc:identifier>
</item>
<item>
<title>基于 MySQL 的数据库实践（准备工作） - wander4096</title>
<link>http://www.cnblogs.com/wander4096/p/8810955.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wander4096/p/8810955.html</guid>
<description>&lt;p&gt;本学期在北京大学选修了《数据库概论》的实验班课程，由于 SQL 语法并不是特别理论的内容，因此课上暂时也没有特别展开。出于探索数据库领域的兴趣，使用国内普遍使用的数据库软件 MySQL 实践《数据库系统概念》中若干 SQL 语句主题；出于方便描述考虑，主要使用命令行界面操作。&lt;/p&gt;&lt;p&gt;在 Mac OS X 下使用 &lt;code&gt;brew install mysql&lt;/code&gt; 简单的安装 MySQL，其他的安装方式不作介绍。&lt;/p&gt;&lt;div readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;mysql.server&lt;/span&gt; start
&lt;span class=&quot;kw&quot;&gt;Starting&lt;/span&gt; MySQL
&lt;span class=&quot;kw&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SUCCESS&lt;/span&gt;! &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着使用命令 &lt;code&gt;mysqladmin -uroot create db-book&lt;/code&gt; 创建数据库 db-book 作为我们的试验场，这里 &lt;code&gt;-uroot&lt;/code&gt; 根据具体的 MySQL 账号密码可能有所区别，默认情况下如此。&lt;br/&gt;然后使用命令 &lt;code&gt;mysql -uroot&lt;/code&gt; 接入 MySQL 命令行界面，输入 &lt;code&gt;show databases;&lt;/code&gt; 看到输出的数据库列表中存在 db-book 确认数据库创建成功，输入 &lt;code&gt;use db-book&lt;/code&gt; 切换到 db-book 数据库。&lt;br/&gt;从 db-book.com 网站找到 MySQL 建表和插入小规模数据的 SQL 文件，输入下面命令执行。也可将末尾附录代码按照注释标记的文件名保存到当前目录的对应文件中。&lt;/p&gt;&lt;div readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; \. DDL-MySQL+drop.sql
mysql&amp;gt; \. smallRelationsInsertFile.sql&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show &lt;span class=&quot;kw&quot;&gt;tables&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;-------------------+&lt;/span&gt;
| Tables_in_db-book |
+&lt;span class=&quot;co&quot;&gt;-------------------+&lt;/span&gt;
| advisor           |
| classroom         |
| course            |
| department        |
| instructor        |
| prereq            |
| section           |
| student           |
| takes             |
| teaches           |
| time_slot         |
+&lt;span class=&quot;co&quot;&gt;-------------------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; advisor;
+&lt;span class=&quot;co&quot;&gt;-------+-------+&lt;/span&gt;
| s_ID  | i_ID  |
+&lt;span class=&quot;co&quot;&gt;-------+-------+&lt;/span&gt;
| &lt;span class=&quot;dv&quot;&gt;12345&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;10101&lt;/span&gt; |
| &lt;span class=&quot;dv&quot;&gt;44553&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;22222&lt;/span&gt; |
| &lt;span class=&quot;dv&quot;&gt;45678&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;22222&lt;/span&gt; |
| &lt;span class=&quot;dv&quot;&gt;00128&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;45565&lt;/span&gt; |
| &lt;span class=&quot;dv&quot;&gt;76543&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;45565&lt;/span&gt; |
| &lt;span class=&quot;dv&quot;&gt;23121&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;76543&lt;/span&gt; |
| &lt;span class=&quot;dv&quot;&gt;98988&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;76766&lt;/span&gt; |
| &lt;span class=&quot;dv&quot;&gt;76653&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;98345&lt;/span&gt; |
| &lt;span class=&quot;dv&quot;&gt;98765&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;98345&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;-------+-------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.01&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把下面文件保存为 DDL-MySQL+drop.sql，执行时可能会因为 &lt;code&gt;drop&lt;/code&gt; 命令报警告，这是因为新数据库没有表，不用太在意，忽略即可。&lt;/p&gt;&lt;div readability=&quot;110&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; prereq;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; time_slot;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; advisor;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; takes;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; student;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; teaches;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; section;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; instructor;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; course;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; department;
&lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; classroom;


&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; classroom
    (building       &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;),
     room_number        &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;),
     capacity       &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (building, room_number)
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; department
    (dept_name      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;), 
     building       &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;), 
     budget             &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (budget &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (dept_name)
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; course
    (course_id      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;), 
     title          &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;), 
     dept_name      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;),
     credits        &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (credits &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (course_id),
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (dept_name) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; department(dept_name)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; instructor
    (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;         &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;), 
     name           &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;, 
     dept_name      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;), 
     salary         &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (salary &amp;gt; &lt;span class=&quot;dv&quot;&gt;29000&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (dept_name) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; department(dept_name)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; section
    (course_id      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;), 
         sec_id         &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;),
     semester       &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (semester &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Winter'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Summer'&lt;/span&gt;)), 
     &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt; &amp;gt; &lt;span class=&quot;dv&quot;&gt;1701&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt; &amp;lt; &lt;span class=&quot;dv&quot;&gt;2100&lt;/span&gt;), 
     building       &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;),
     room_number        &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;),
     time_slot_id       &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (course_id, sec_id, semester, &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (course_id) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; course(course_id)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;cascade&lt;/span&gt;,
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (building, room_number) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; classroom(building, room_number)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; teaches
    (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;         &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;), 
     course_id      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;),
     sec_id         &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;), 
     semester       &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;),
     &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;, course_id, sec_id, semester, &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (course_id,sec_id, semester, &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; section(course_id,sec_id, semester, &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;cascade&lt;/span&gt;,
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; instructor(&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;cascade&lt;/span&gt;
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; student
    (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;         &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;), 
     name           &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;, 
     dept_name      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;), 
     tot_cred       &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (tot_cred &amp;gt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (dept_name) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; department(dept_name)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; takes
    (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;         &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;), 
     course_id      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;),
     sec_id         &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;), 
     semester       &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;),
     &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;),
     grade              &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;, course_id, sec_id, semester, &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (course_id,sec_id, semester, &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; section(course_id,sec_id, semester, &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;cascade&lt;/span&gt;,
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; student(&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;cascade&lt;/span&gt;
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; advisor
    (s_ID           &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;),
     i_ID           &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (s_ID),
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (i_ID) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; instructor (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (s_ID) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; student (&lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;cascade&lt;/span&gt;
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; time_slot
    (time_slot_id       &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;),
     &lt;span class=&quot;dt&quot;&gt;day&lt;/span&gt;            &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;),
     start_hr       &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (start_hr &amp;gt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; start_hr &amp;lt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;),
     start_min      &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (start_min &amp;gt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; start_min &amp;lt; &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;),
     end_hr         &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (end_hr &amp;gt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; end_hr &amp;lt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;),
     end_min        &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;check&lt;/span&gt; (end_min &amp;gt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; end_min &amp;lt; &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (time_slot_id, &lt;span class=&quot;dt&quot;&gt;day&lt;/span&gt;, start_hr, start_min)
    );
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; prereq
    (course_id      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;), 
     prereq_id      &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;),
     &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (course_id, prereq_id),
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (course_id) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; course(course_id)
        &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;cascade&lt;/span&gt;,
     &lt;span class=&quot;kw&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; (prereq_id) &lt;span class=&quot;kw&quot;&gt;references&lt;/span&gt; course(course_id)
    )&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;524&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; prereq;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; time_slot;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; advisor;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; takes;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; student;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; teaches;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; section;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; instructor;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; course;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; department;
&lt;span class=&quot;kw&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; classroom;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; classroom &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Packard'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'500'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; classroom &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Painter'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'514'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'10'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; classroom &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Taylor'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'70'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; classroom &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Watson'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'100'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'30'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; classroom &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Watson'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'120'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; department &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Biology'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Watson'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'90000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; department &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Taylor'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'100000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; department &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Elec. Eng.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Taylor'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'85000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; department &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Finance'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Painter'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'120000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; department &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'History'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Painter'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; department &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Music'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Packard'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'80000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; department &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'Physics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Watson'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'70000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'BIO-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Intro. to Biology'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Biology'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'4'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'BIO-301'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Genetics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Biology'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'4'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'BIO-399'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Computational Biology'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Biology'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Intro. to Computer Science'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'4'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-190'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Game Design'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'4'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-315'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Robotics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-319'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Image Processing'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-347'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Database System Concepts'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'EE-181'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Intro. to Digital Systems'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Elec. Eng.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'FIN-201'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Investment Banking'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Finance'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'HIS-351'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'World History'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'History'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'MU-199'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Music Video Production'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Music'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; course &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'PHY-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Physical Principles'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Physics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'4'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'10101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Srinivasan'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'65000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'12121'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Wu'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Finance'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'90000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'15151'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Mozart'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Music'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'40000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'22222'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Einstein'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Physics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'95000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'32343'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'El Said'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'History'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'60000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'33456'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Gold'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Physics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'87000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'45565'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Katz'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'75000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'58583'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Califieri'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'History'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'62000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76543'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Singh'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Finance'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'80000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76766'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Crick'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Biology'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'72000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'83821'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Brandt'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'92000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; instructor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98345'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Kim'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Elec. Eng.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'80000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'BIO-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Summer'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Painter'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'514'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'BIO-301'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Summer'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Painter'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'514'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Packard'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'H'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Packard'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-190'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Taylor'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'E'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-190'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Taylor'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-315'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Watson'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'120'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'D'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-319'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Watson'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'100'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-319'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Taylor'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'C'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-347'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Taylor'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'EE-181'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Taylor'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'C'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'FIN-201'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Packard'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'HIS-351'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Painter'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'514'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'C'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'MU-199'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Packard'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'D'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; section &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'PHY-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Watson'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'100'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'10101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'10101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-315'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'10101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-347'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'12121'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'FIN-201'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'15151'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'MU-199'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'22222'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'PHY-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'32343'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'HIS-351'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'45565'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'45565'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-319'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76766'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'BIO-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Summer'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76766'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'BIO-301'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Summer'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'83821'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-190'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'83821'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-190'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'83821'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-319'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; teaches &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98345'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'EE-181'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Zhang'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'102'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'12345'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Shankar'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'32'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'19991'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Brandt'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'History'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'80'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'23121'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Chavez'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Finance'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'110'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'44553'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Peltier'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Physics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'56'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'45678'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Levy'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Physics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'46'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'54321'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Williams'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'54'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'55739'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Sanchez'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Music'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'38'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'70557'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Snow'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Physics'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76543'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Brown'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Comp. Sci.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'58'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76653'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Aoi'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Elec. Eng.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'60'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98765'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Bourikas'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Elec. Eng.'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'98'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98988'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Tanaka'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Biology'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'120'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-347'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A-'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'12345'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'C'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'12345'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-190'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'12345'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-315'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'12345'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-347'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'19991'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'HIS-351'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'23121'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'FIN-201'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'C+'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'44553'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'PHY-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B-'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'45678'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'45678'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B+'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'45678'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-319'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'54321'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A-'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'54321'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-190'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B+'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'55739'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'MU-199'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A-'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76543'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76543'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-319'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76653'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'EE-181'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'C'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98765'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Fall'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'C-'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98765'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-315'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Spring'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98988'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'BIO-101'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Summer'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2009'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; takes &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98988'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'BIO-301'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'Summer'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2010'&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00128'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'45565'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'12345'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'10101'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'23121'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'76543'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'44553'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'22222'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'45678'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'22222'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76543'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'45565'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'76653'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'98345'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98765'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'98345'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; advisor &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'98988'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'76766'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'M'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'8'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'8'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'W'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'8'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'8'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'8'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'8'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'M'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'9'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'9'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'W'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'9'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'9'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'B'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'9'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'9'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'C'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'M'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'11'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'11'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'C'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'W'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'11'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'11'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'C'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'11'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'11'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'D'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'M'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'13'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'13'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'D'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'W'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'13'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'13'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'D'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'13'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'13'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'E'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'T'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'10'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'30'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'11'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'45 '&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'E'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'R'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'10'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'30'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'11'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'45 '&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'T'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'14'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'30'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'15'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'45 '&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'R'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'14'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'30'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'15'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'45 '&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'G'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'M'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'16'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'16'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'G'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'W'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'16'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'16'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'G'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'F'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'16'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'16'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'50'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; time_slot &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'H'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'W'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'10'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'12'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'30'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; prereq &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'BIO-301'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'BIO-101'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; prereq &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'BIO-399'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'BIO-101'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; prereq &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-190'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; prereq &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-315'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; prereq &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-319'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; prereq &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'CS-347'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'CS-101'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; prereq &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'EE-181'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'PHY-101'&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Thu, 12 Apr 2018 14:57:00 +0000</pubDate>
<dc:creator>wander4096</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wander4096/p/8810955.html</dc:identifier>
</item>
<item>
<title>C# 6.0中你不知道的新特性 - 码农阿宇</title>
<link>http://www.cnblogs.com/CoderAyu/p/8811027.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CoderAyu/p/8811027.html</guid>
<description>&lt;p&gt;今天去上班的公交上，有朋友在张队（张善友）的微信群里，发了一个介绍C# 6.0新特性的视频，视频7分钟，加上本人英语实在太low，整体看下来是一脸懵逼的。&lt;/p&gt;
&lt;p&gt;下班回到家里，打开这个视频，把视频中介绍的新特性用文档的形式记录下来，加深自己的印象，此处把我整理的文档分享出来，希望对大家能有所帮助！&lt;/p&gt;
&lt;p&gt;C#6.0已经发布快三年了，可能我们没有有太去关心新版本所加入的特性，有人说，发布新版本，无非就是添加一些“语法糖”罢了，不管是糖不是糖，既然加入了新功能，那么自然有新功能的好处，我们一起来看看，这块糖甜不甜。&lt;/p&gt;
&lt;p&gt;在C# 6.0中并没有加入什么需要费大力思考才能用上的新概念，相反，而是提供了一些小而实用的新功能，可以帮助我们清理代码、提供样板，让我们的目的更加清晰。&lt;/p&gt;

&lt;p&gt;之前自动属性必须具有set ,这将对不可变变量不利，因此C# 6.0中允许了只有get的自动属性，编译器将识别这种属性为只读属性，即使没有set是我们还是可以从构造函数中给属性赋值，这个赋值过程时没有set也是可以实现的，它是直接分配到支持的字段，以便对其进行初始化。如下代码所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; TheNewCSharp6._0
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Getter专属自动新特性&lt;/span&gt;
   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Point
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; X { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Y { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Point(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
        {
            X &lt;/span&gt;=&lt;span&gt; x;
            Y &lt;/span&gt;=&lt;span&gt; y;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Dist()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Math.Sqrt(X * X + Y *&lt;span&gt; Y);
        }

       
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C# 6.0中引入一种新的using子句，它是引用类型，而非命名空间，这样可以把该类型的静态成员直接放入作用域中，例如在上一个例子中我们要使用Sqrt函数，我们必须添加math前缀，才能调用Sqrt(平方根)方法，&lt;/p&gt;
&lt;p&gt;当我们加上&lt;/p&gt;
&lt;p&gt;using static System.Math;&lt;/p&gt;
&lt;p&gt;就可以无需加math前缀就可以直接使用Sqrt方法，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; System.Math;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; TheNewCSharp6._0
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用静态成员&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Point1
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; X { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Y { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Point1(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
        {
            X &lt;/span&gt;=&lt;span&gt; x;
            Y &lt;/span&gt;=&lt;span&gt; y;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Dist()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Sqrt(X * X + Y *&lt;span&gt; Y);
        }
&lt;/span&gt;&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们一直认为星期一绝对是一周中的某一天，而黄色也是颜色中的一种。如果在代码中每次都要说明方法的归宿，这其实并无太大意义，而这一新特性恰好克服了这一困难。&lt;/p&gt;

&lt;p&gt;String.Format是非常有用且功能强大的API,但是它很庞大，并且占位符、数字相关问题会让人感觉混淆不清，容易出错，扰乱我们的意图。如果要设置格式的值出现在适当的位置会更好，这就是此字符串内插语法的用途：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;({X},{Y})&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对String.Format的调用消失，添加一个美元符号，来表明这是一个内插的字符串。然后删除占位符数字，留出一定空位，把要设置格式的表达式放在相应的空位中，这样放在一起，看起来既清楚，又简洁。&lt;/p&gt;

&lt;p&gt;对于很多方法，其主题中只有一个简单的return语句，我们可以使用lambda表达式取代它（而不是语句体）。&lt;/p&gt;
&lt;p&gt;这也适用于其他类型的函数成员。对于加算计而言，它是具有单个return语句的get，与两个大括号相比，这样更简洁不少。&lt;/p&gt;
&lt;p&gt;学到在这里，我们可以这样编写整个代码，一个表达式和一个箭头，一个get关键字都没有，这样压缩代码使得代码更加紧凑。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; System.Math;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; TheNewCSharp6._0
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表达式体属性&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Point3
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; X { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Y { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Point3(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt; y){ X = x; Y =&lt;span&gt; y;}

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; Dist =&amp;gt; Sqrt(X * X + Y *&lt;span&gt; Y);

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ToString() =&amp;gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;({X},{Y})&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       //&lt;/span&gt;&lt;span&gt;before&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; JObject ToJsonOld()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JObject();
            result[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; X;
            result[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; Y;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一种把点对象转换成JSON对象的方法，通过上述方法可以初始化对象初始值设置项中的属性。&lt;/p&gt;
&lt;p&gt;有了C# 6.0后我们可以使用此处明显的方括号语法来分配到内部的索引。&lt;/p&gt;
&lt;p&gt;因此可以在一个表达式中对json对象进行初始化，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;After&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; JObject ToJsonNew() =&amp;gt; &lt;span&gt;new&lt;/span&gt; JObject() { [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = X, [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = Y };
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上面的例子中，我们可以在一行代码中完成对一个json对象的创建赋值，但是，在使用对象前，我们需要对对象进行检查，大多情况下，我们主要是检查对象是否为空，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;before&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Point FromJson(JObject json)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (json != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt;
                json[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt;
                json[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].Type == JTokenType.Integer &amp;amp;&amp;amp;&lt;span&gt;
                json[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt;
                json[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].Type ==&lt;span&gt; JTokenType.Integer)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Point((&lt;span&gt;int&lt;/span&gt;)json[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;],(&lt;span&gt;int&lt;/span&gt;)json[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们需要在使用前检查它的本身不为空，再保证其索引结果不为空，保证了能访问之后，再检查值类型。&lt;/p&gt;
&lt;p&gt;Null条件运算符主要用于此处处理整个null检查。&lt;/p&gt;
&lt;p&gt;下面是我们移除了显示null检查之后的结果。把null判断改为了问点（?.）运算符。工作原理如下，如果左边是null，那么返回null，如果不是null，那么我们可以执行.号右边的运算。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;After&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Point FromJson1(JObject json)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (json != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt;
                json[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]?.Type == JTokenType.Integer &amp;amp;&amp;amp;&lt;span&gt;
                json[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]?.Type ==&lt;span&gt; JTokenType.Integer)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Point((&lt;span&gt;int&lt;/span&gt;)json[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;], (&lt;span&gt;int&lt;/span&gt;)json[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果null 那么null&lt;/p&gt;
&lt;p&gt;如果不null 那么执行&lt;/p&gt;
&lt;p&gt;我们也可以连环地使用问点运算符 ，简化后如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Point FromJson2(JObject json)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (json?[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]?.Type == JTokenType.Integer &amp;amp;&amp;amp;&lt;span&gt;
                json&lt;/span&gt;?[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]?.Type ==&lt;span&gt; JTokenType.Integer)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Point((&lt;span&gt;int&lt;/span&gt;)json[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;], (&lt;span&gt;int&lt;/span&gt;)json[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，这个if条件就只表达你的核心意图，而不用花太多的代码再null判断上。&lt;/p&gt;
&lt;p&gt;Null条件运算符对触发时间非常有用，如&lt;/p&gt;
&lt;p&gt;OnChanged?.Invoke(this,arg)&lt;/p&gt;
&lt;p&gt;而不用在单独去判断委托是否为空，当委托不为空时，执行右边的Invoke()方法。&lt;/p&gt;

&lt;p&gt;很多情况下，我们需要以运算符的形式获取程序元素的名称，Nameof运算符然我们获取元素名称的字符串，知道元素到底指的是什么，是哪些元素，并确保它确实存在。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(Point point)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(point==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(point));
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;异常塞选器可以让catch在捕获异常之前对异常进行筛选，如果异常符合我们的要求，则进行捕获，异常筛选如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;           try&lt;/span&gt;&lt;span&gt;
            {
                ...
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ConfigurationException e)when (e.IsSevere)
            {
                ...
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;越来越多的api采用异步的方式，现在我们也总算可以在catch和finally中调用它们了。&lt;/p&gt;

&lt;p&gt;以上是我观看视频后整理的9条新特性，希望对大家有所帮助，请点击推荐，谢谢。&lt;/p&gt;
&lt;p&gt;github：&lt;/p&gt;
&lt;p&gt;https://github.com/liuzhenyulive/TheNewCSharp6.0&lt;/p&gt;
&lt;p&gt;原视频地址：&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;https://channel9.msdn.com/Series/Visual-Studio-2012-Premium-and-Ultimate-Overview-CHS/Whats-New-in-C-60-CHS#time=0s&quot; href=&quot;https://channel9.msdn.com/Series/Visual-Studio-2012-Premium-and-Ultimate-Overview-CHS/Whats-New-in-C-60-CHS#time=0s&quot;&gt;https://channel9.msdn.com/Series/Visual-Studio-2012-Premium-and-Ultimate-Overview-CHS/Whats-New-in-C-60-CHS#time=0s&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Apr 2018 14:53:00 +0000</pubDate>
<dc:creator>码农阿宇</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CoderAyu/p/8811027.html</dc:identifier>
</item>
<item>
<title>JDK1.8源码(七)——java.util.HashMap 类 - YSOcean</title>
<link>http://www.cnblogs.com/ysocean/p/8711071.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ysocean/p/8711071.html</guid>
<description>&lt;p&gt;　　本篇博客我们来介绍在 JDK1.8 中 HashMap 的源码实现，这也是最常用的一个集合。但是在介绍 HashMap 之前，我们先介绍什么是 Hash表。&lt;/p&gt;
&lt;h3&gt;1、哈希表&lt;/h3&gt;
&lt;p&gt;　　Hash表也称为散列表，也有直接译作哈希表，Hash表是一种根据关键字值（key - value）而直接进行访问的数据结构。也就是说它通过把关键码值映射到表中的一个位置来访问记录，以此来加快查找的速度。在链表、数组等数据结构中，查找某个关键字，通常要遍历整个数据结构，也就是O(N)的时间级，但是对于哈希表来说，只是O(1)的时间级。&lt;/p&gt;
&lt;p&gt;　　比如对于前面我们讲解的 &lt;a href=&quot;http://www.cnblogs.com/ysocean/p/8622264.html&quot; target=&quot;_blank&quot;&gt;ArrayList&lt;/a&gt; 集合和 &lt;a href=&quot;http://www.cnblogs.com/ysocean/p/8657850.html&quot; target=&quot;_blank&quot;&gt;LinkedList&lt;/a&gt; ，如果我们要查找这两个集合中的某个元素，通常是通过遍历整个集合，需要&lt;strong&gt;O(N)&lt;/strong&gt;的时间级。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201804/1120165-20180403234003772-1775417648.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　如果是哈希表，它是通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做&lt;strong&gt;散列函数&lt;/strong&gt;，存放记录的数组叫做&lt;strong&gt;散列表，&lt;/strong&gt;只需要&lt;strong&gt;O(1)&lt;/strong&gt;的时间级。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201804/1120165-20180403235818954-222956412.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　①、存放在哈希表中的数据是key-value 键值对，比如存放哈希表的数据为:&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;{Key1-Value1,Key2-Value2,Key3-Value3,Key4-Value4,Key5-Value5,Key6-Value6}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;如果我们想查找是否存在键值对 Key3-Value3，首先通过 Key3 经过散列函数，得到值 k3，然后通过 k3 和散列表对应的值找到是 Value3。&lt;/p&gt;
&lt;p&gt;　　②、当然也有可能存放哈希表的值只是 Value1,Value2,Value3这种类型：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;{Value1,Value2,Value3,Value4,Value5,Value6}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;这时候我们可以假设 Value1 是等于 Key1的，也就是{Value1-Value1,Value2-Value2,Value3-Value3,Value4-Value4,Value5-Value5,Value6-Value6}可以将 Value1经过散列函数转换成与散列表对应的值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
大家都用过汉语字典吧，汉语字典的优点是我们可以通过前面的拼音目录快速定位到所要查找的汉字。当给定我们某个汉字时，大脑会自动将汉字转换成拼音（如果我们认识，不认识可以通过偏旁部首），这个转换的过程我们可以看成是一个散列函数，之后在根据转换得到的拼音找到该字所在的页码，从而找到该汉字。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　汉语字典是哈希表的典型实现，但是我们仔细思考，会发现这样几个问题？&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;①、为什么要有散列函数？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;②、多个 key 通过散列函数会得到相同的值，这时候怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　对于第一个问题，散列函数的存在能够帮助我们更快的确定key和value的映射关系，试想一下，如果没有汉字和拼音的转换规则（或者汉字和偏旁部首的），给你一个汉字，你该如何从字典中找到该汉字？我想除了遍历整部字典，你没有什么更好的办法。&lt;/p&gt;
&lt;p&gt;　　对于第二个问题，多个 key 通过散列函数得到相同的值，这其实也是哈希表最大的问题——&lt;strong&gt;冲突&lt;/strong&gt;。比如同音字汉字，我们得到的拼音就会是相同的，那么我们该如何在字典中存放同音字汉字呢？有两种做法：&lt;/p&gt;
&lt;p&gt;　　第一种是&lt;strong&gt;开放地址法&lt;/strong&gt;，当我们遇到冲突了，这时候通过另一种函数再计算一遍，得到相应的映射关系。比如对于汉语字典，一个字 “余”，拼音是“yu”，我们将其放在页码为567(假设在该位置)，这时候又来了一个汉字“于”，拼音也是“yu”，那么这时候我们要是按照转换规则，也得将其放在页码为567的位置，但是我们发现这个页码已经被占用了，这时候怎么办？我们可以在通过另一种函数，得到的值加1。那么汉字&quot;于&quot;就会被放在576+1=577的位置。&lt;/p&gt;
&lt;p&gt;　　第二种是&lt;strong&gt;链地址法&lt;/strong&gt;，我们可以将字典的每一页都看成是一个子数组或者子链表，当遇到冲突了，直接往当前页码的子数组或者子链表里面填充即可。那么我们进行同音字查找的时候，可能需要遍历其子数组或者子链表。如下图所示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201804/1120165-20180404082228573-2042730199.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　对于开放地址法，可能会遇到二次冲突，三次冲突，所以需要良好的散列函数，分布的越均匀越好。对于链地址法，虽然不会造成二次冲突，但是如果一次冲突很多，那么会造成子数组或者子链表很长，那么我们查找所需遍历的时间也会很长。&lt;/p&gt;
&lt;p&gt;　　关于哈希表的详细介绍，请&lt;a href=&quot;http://www.cnblogs.com/ysocean/p/8032656.html&quot; target=&quot;_blank&quot;&gt;点击这里&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;2、什么是 HashMap？&lt;/h3&gt;
&lt;p&gt;　　听名字就知道，HashMap 是一个利用哈希表原理来存储元素的集合。遇到冲突时，HashMap 是采用的链地址法来解决，在 JDK1.7 中，HashMap 是由 数组+链表构成的。但是在 JDK1.8 中，HashMap 是由 数组+链表+红黑树构成，新增了红黑树作为底层数据结构，结构变得复杂了，但是效率也变的更高效。下面我们来具体介绍在 JDK1.8 中 HashMap 是如何实现的。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201804/1120165-20180404211600945-1711602320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3、HashMap定义&lt;/h3&gt;
&lt;p&gt;　　HashMap 是一个散列表，它存储的内容是键值对(key-value)映射，而且 key 和 value 都可以为 null。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HashMap&amp;lt;K,V&amp;gt; &lt;span&gt;extends&lt;/span&gt; AbstractMap&amp;lt;K,V&amp;gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;implements&lt;/span&gt; Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable {
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201804/1120165-20180403211343832-2129553780.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　首先该类实现了一个 Map 接口，该接口定义了一组键值对映射通用的操作。储存一组成对的键-值对象，提供key（键）到value（值）的映射，Map中的key不要求有序，不允许重复。value同样不要求有序，但可以重复。但是我们发现该接口方法有很多，我们设计某个键值对的集合有时候并不像实现那么多方法，那该怎么办？&lt;/p&gt;
&lt;p&gt;　　JDK 还为我们提供了一个抽象类 AbstractMap ，该抽象类继承 Map 接口，所以如果我们不想实现所有的 Map 接口方法，就可以选择继承抽象类 AbstractMap 。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;但是我们发现 HashMap 类即继承了 AbstractMap 接口，也实现了 Map 接口，这样做难道不是多此一举？后面我们会讲的 LinkedHashSet 集合也有这样的写法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;毕竟 JDK 经过这么多年的发展维护，博主起初也是认为这样是有具体的作用的，后来找了很多资料，发现这其实完全没有任何作用，&lt;a href=&quot;https://stackoverflow.com/questions/2165204/why-does-linkedhashsete-extend-hashsete-and-implement-sete&quot; target=&quot;_blank&quot;&gt;具体出处&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
据 java 集合框架的创始人Josh Bloch描述，这样的写法是一个失误。在java集合框架中，类似这样的写法很多，最开始写java集合框架的时候，他认为这样写，在某些地方可能是有价值的，直到他意识到错了。显然的，JDK的维护者，后来不认为这个小小的失误值得去修改，所以就这样存在下来了。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　HashMap 集合还实现了 Cloneable 接口以及 Serializable 接口，分别用来进行对象克隆以及将对象进行序列化。&lt;/p&gt;
&lt;h3&gt;4、字段属性&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;序列化和反序列化时，通过该字段进行版本一致性验证&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 362498820763181265L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认 HashMap 集合初始容量为16（必须是 2 的倍数）&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; aka 16
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;集合的最大容量，如果通过带参构造指定的最大容量超过此数，默认还是使用此数&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认的填充因子&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; DEFAULT_LOAD_FACTOR = 0.75f&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当桶(bucket)上的结点数大于这个值时会转成红黑树(JDK1.8新增)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TREEIFY_THRESHOLD = 8&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当桶(bucket)上的节点数小于这个值时会转成链表(JDK1.8新增)&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; UNTREEIFY_THRESHOLD = 6&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;(JDK1.8新增)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;     * 当集合中的容量大于这个值时，表中的桶才能进行树形化 ，否则桶内元素太多时会扩容，
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     * 而不是树形化 为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MIN_TREEIFY_CAPACITY = 64;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;注意：后面三个字段是 JDK1.8 新增的，主要是用来进行红黑树和链表的互相转换。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 初始化使用，长度总是 2的幂
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt;[] table;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     * 保存缓存的entrySet（）
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; Set&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;&lt;span&gt; entrySet;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * 此映射中包含的键值映射的数量。（集合存储键值对的数量）
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     * 跟前面ArrayList和LinkedList集合中的字段modCount一样，记录集合被修改的次数
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     * 主要用于迭代器中的快速失败
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; modCount;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;     * 调整大小的下一个大小值（容量*加载因子）。capacity * load factor
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; threshold;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;     * 散列表的加载因子。
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; loadFactor;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面我们重点介绍上面几个字段：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;①、Node&amp;lt;K,V&amp;gt;[] table&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　我们说 HashMap 是由数组+链表+红黑树组成，这里的数组就是 table 字段。后面对其进行初始化长度默认是 DEFAULT_INITIAL_CAPACITY= 16。而且 JDK 声明数组的长度总是 2的n次方(一定是合数)，为什么这里要求是合数，一般我们知道哈希算法为了避免冲突都要求长度是质数，这里要求是合数，下面在介绍 HashMap 的hashCode() 方法(散列函数)，我们再进行讲解。&lt;/p&gt;
&lt;p&gt;　　②&lt;strong&gt;、size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;集合中存放key-value 的实时对数。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;③、loadFactor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　装载因子，是用来衡量 HashMap 满的程度，计算HashMap的实时装载因子的方法为：size/capacity，而不是占用桶的数量去除以capacity。capacity 是桶的数量，也就是 table 的长度length。&lt;/p&gt;
&lt;p&gt;　　默认的负载因子0.75 是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子loadFactor 的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子 loadFactor 的值，这个值可以大于1。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;④、threshold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　计算公式：capacity * loadFactor。这个值是当前已占用数组长度的最大值。过这个数目就重新resize(扩容)，扩容后的 HashMap 容量是之前容量的两倍&lt;/p&gt;
&lt;h3&gt;5、构造函数&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;①、默认无参构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('946c8b70-b3a4-474b-b78a-a949abeb21ea')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_946c8b70-b3a4-474b-b78a-a949abeb21ea&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_946c8b70-b3a4-474b-b78a-a949abeb21ea&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('946c8b70-b3a4-474b-b78a-a949abeb21ea',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_946c8b70-b3a4-474b-b78a-a949abeb21ea&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 默认构造函数，初始化加载因子loadFactor = 0.75
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HashMap() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.loadFactor =&lt;span&gt; DEFAULT_LOAD_FACTOR; 
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　无参构造器，初始化散列表的加载因子为0.75&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;②、指定初始容量的构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6dd49339-7478-4580-af43-f258ee5aa495')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_6dd49339-7478-4580-af43-f258ee5aa495&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6dd49339-7478-4580-af43-f258ee5aa495&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6dd49339-7478-4580-af43-f258ee5aa495',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6dd49339-7478-4580-af43-f258ee5aa495&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; initialCapacity 指定初始化容量
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; loadFactor 加载因子 0.75
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; HashMap(&lt;span&gt;int&lt;/span&gt; initialCapacity, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; loadFactor) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化容量不能小于 0 ，否则抛出异常&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;lt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal initial capacity: &quot; +
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                                               initialCapacity);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果初始化容量大于2的30次方，则初始化容量都为2的30次方&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;gt;&lt;span&gt; MAXIMUM_CAPACITY)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             initialCapacity =&lt;span&gt; MAXIMUM_CAPACITY;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果加载因子小于0，或者加载因子是一个非数值，抛出异常&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (loadFactor &amp;lt;= 0 ||&lt;span&gt; Float.isNaN(loadFactor))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal load factor: &quot; +
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                                               loadFactor);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.loadFactor =&lt;span&gt; loadFactor;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.threshold =&lt;span&gt; tableSizeFor(initialCapacity);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回大于等于initialCapacity的最小的二次幂数值。
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;gt;&amp;gt;&amp;gt; 操作符表示无符号右移，高位取0。
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; | 按位或运算&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; tableSizeFor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; cap) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; n = cap - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         n |= n &amp;gt;&amp;gt;&amp;gt; 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         n |= n &amp;gt;&amp;gt;&amp;gt; 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         n |= n &amp;gt;&amp;gt;&amp;gt; 4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         n |= n &amp;gt;&amp;gt;&amp;gt; 8&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         n |= n &amp;gt;&amp;gt;&amp;gt; 16&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;6、确定哈希桶数组索引位置&lt;/h3&gt;
&lt;p&gt;　　前面我们讲解哈希表的时候，我们知道是用散列函数来确定索引的位置。散列函数设计的越好，使得元素分布的越均匀。HashMap 是数组+链表+红黑树的组合，我们希望在有限个数组位置时，尽量每个位置的元素只有一个，那么当我们用散列函数求得索引位置的时候，我们能马上知道对应位置的元素是不是我们想要的，而不是要进行链表的遍历或者红黑树的遍历，这会大大优化我们的查询效率。我们看 HashMap 中的哈希算法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash(Object key) {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; h;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16&lt;span&gt;);
    }
    
    i &lt;/span&gt;= (table.length - 1) &amp;amp; hash;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这一步是在后面添加元素putVal()方法中进行位置的确定&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　主要分为三步：&lt;/p&gt;
&lt;p&gt;　　①、取 hashCode 值： key.hashCode()&lt;/p&gt;
&lt;p&gt;　　②、高位参与运算：h&amp;gt;&amp;gt;&amp;gt;16&lt;/p&gt;
&lt;p&gt;　　③、取模运算：(n-1) &amp;amp; hash&lt;/p&gt;
&lt;p&gt;　　这里获取 hashCode() 方法的值是变量，但是我们知道，对于任意给定的对象，只要它的 hashCode() 返回值相同，那么程序调用 hash(Object key) 所计算得到的 hash码 值总是相同的。&lt;/p&gt;
&lt;p&gt;　　为了让数组元素分布均匀，我们首先想到的是把获得的 hash码对数组长度取模运算( hash%length)，但是计算机都是二进制进行操作，取模运算相对开销还是很大的，那该如何优化呢？&lt;/p&gt;
&lt;p&gt;　　HashMap 使用的方法很巧妙，它通过 hash &amp;amp; (table.length -1)来得到该对象的保存位，前面说过 HashMap 底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当 length 总是2的n次方时，hash &amp;amp; (length-1)运算等价于对 length 取模，也就是 hash%length，但是&amp;amp;比%具有更高的效率。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;这也解释了为什么要保证数组的长度总是2的n次方。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;再就是在 JDK1.8 中还有个高位参与运算，hashCode() 得到的是一个32位 int 类型的值，通过hashCode()的高16位 &lt;strong&gt;异或&lt;/strong&gt; 低16位实现的：(h = k.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。&lt;/p&gt;
&lt;p&gt;　　下面举例说明下，n为table的长度：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201804/1120165-20180405000930403-1215437085.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;7、添加元素&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bd72f193-d973-4dfc-a22a-9329c7832f13')&quot; readability=&quot;45&quot;&gt;&lt;img id=&quot;code_img_closed_bd72f193-d973-4dfc-a22a-9329c7832f13&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bd72f193-d973-4dfc-a22a-9329c7832f13&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bd72f193-d973-4dfc-a22a-9329c7832f13',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bd72f193-d973-4dfc-a22a-9329c7832f13&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hash(key)就是上面讲的hash方法，对其进行了第一步和第二步处理&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; putVal(hash(key), key, value, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; hash 索引的位置
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key  键
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value  值
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; onlyIfAbsent true 表示不要更改现有值
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; evict false表示table处于创建模式
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; V putVal(&lt;span&gt;int&lt;/span&gt; hash, K key, V value, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; onlyIfAbsent,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; evict) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;          Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n, i;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果table为null或者长度为0，则进行初始化
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;resize()方法本来是用于扩容，由于初始化没有实际分配空间，这里用该方法进行空间分配，后面会详细讲解该方法&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt; ((tab = table) == &lt;span&gt;null&lt;/span&gt; || (n = tab.length) == 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;              n = (tab =&lt;span&gt; resize()).length;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：这里用到了前面讲解获得key的hash码的第三步，取模运算，下面的if-else分别是 tab[i] 为null和不为null&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt; ((p = tab[i = (n - 1) &amp;amp; hash]) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;              tab[i] = newNode(hash, key, value, &lt;span&gt;null&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tab[i] 为null，直接将新的key-value插入到计算的索引i位置&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;          &lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tab[i] 不为null，表示该位置已经有值了&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;              Node&amp;lt;K,V&amp;gt;&lt;span&gt; e; K k;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;              &lt;span&gt;if&lt;/span&gt; (p.hash == hash &amp;amp;&amp;amp;
&lt;span&gt;27&lt;/span&gt;                  ((k = p.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                  e = p;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点key已经有值了，直接用新值覆盖
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;该链是红黑树&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;              &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (p &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeNode)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                  e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, tab, hash, key, value);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;该链是链表&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;              &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; binCount = 0; ; ++&lt;span&gt;binCount) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                      &lt;span&gt;if&lt;/span&gt; ((e = p.next) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                          p.next = newNode(hash, key, value, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;链表长度大于8，转换成红黑树&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                          &lt;span&gt;if&lt;/span&gt; (binCount &amp;gt;= TREEIFY_THRESHOLD - 1) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -1 for 1st&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                             treeifyBin(tab, hash);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                          &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                     }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;key已经存在直接覆盖value&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                      &lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;
&lt;span&gt;44&lt;/span&gt;                          ((k = e.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                          &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                      p =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                 }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;              &lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; existing mapping for key&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;                  V oldValue =&lt;span&gt; e.value;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                  &lt;span&gt;if&lt;/span&gt; (!onlyIfAbsent || oldValue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                      e.value =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                 afterNodeAccess(e);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;          ++modCount;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用作修改和新增快速失败&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt; (++size &amp;gt; threshold)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;超过最大容量，进行扩容&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;             resize();
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;         afterNodeInsertion(evict);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　①、判断键值对数组 table 是否为空或为null，否则执行resize()进行扩容；&lt;/p&gt;
&lt;p&gt;　　②、根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；&lt;/p&gt;
&lt;p&gt;　　③、判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；&lt;/p&gt;
&lt;p&gt;　　④、判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；&lt;/p&gt;
&lt;p&gt;　　⑤、遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；&lt;/p&gt;
&lt;p&gt;　　⑥、插入成功后，判断实际存在的键值对数量size是否超过了最大容量threshold，如果超过，进行扩容。&lt;/p&gt;
&lt;h3&gt;8、扩容机制&lt;/h3&gt;
&lt;p&gt;　　扩容（resize），我们知道集合是由数组+链表+红黑树构成，向 HashMap 中插入元素时，如果HashMap 集合的元素已经大于了最大承载容量threshold（capacity * loadFactor），这里的threshold不是数组的最大长度。那么必须扩大数组的长度，Java中数组是无法自动扩容的，我们采用的方法是用一个更大的数组代替这个小的数组，就好比以前是用小桶装水，现在小桶装不下了，我们使用一个更大的桶。&lt;/p&gt;
&lt;p&gt;　　JDK1.8融入了红黑树的机制，比较复杂，这里我们先介绍 JDK1.7的扩容源码，便于理解，然后在介绍JDK1.8的源码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6fcfcbb1-4f4a-419d-83b6-dce732a3a538')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_6fcfcbb1-4f4a-419d-83b6-dce732a3a538&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6fcfcbb1-4f4a-419d-83b6-dce732a3a538&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6fcfcbb1-4f4a-419d-83b6-dce732a3a538',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6fcfcbb1-4f4a-419d-83b6-dce732a3a538&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数 newCapacity 为新数组的大小&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; resize(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; newCapacity) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         Entry[] oldTable = table;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引用扩容前的 Entry 数组&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; oldCapacity =&lt;span&gt; oldTable.length;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (oldCapacity == MAXIMUM_CAPACITY) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;扩容前的数组大小如果已经达到最大(2^30)了&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             threshold = Integer.MAX_VALUE;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;/修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         Entry[] newTable = &lt;span&gt;new&lt;/span&gt; Entry[newCapacity];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化一个新的Entry数组&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         transfer(newTable, initHashSeedAsNeeded(newCapacity));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数组元素转移到新数组里面&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         table =&lt;span&gt; newTable;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         threshold = (&lt;span&gt;int&lt;/span&gt;)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改阈值&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; transfer(Entry[] newTable, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; rehash) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; newCapacity =&lt;span&gt; newTable.length;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (Entry&amp;lt;K,V&amp;gt; e : table) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历数组&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; e) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 Entry&amp;lt;K,V&amp;gt; next =&lt;span&gt; e.next;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (rehash) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     e.hash = &lt;span&gt;null&lt;/span&gt; == e.key ? 0&lt;span&gt; : hash(e.key);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; i = indexFor(e.hash, newCapacity);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新计算每个元素在数组中的索引位置&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                 e.next = newTable[i];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记下一个元素，添加是链表头添加&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                 newTable[i] = e;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将元素放在链上&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                 e = next;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问下一个 Entry 链上的元素&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　通过方法我们可以看到，JDK1.7中首先是创建一个新的大容量数组，然后依次重新计算原集合所有元素的索引，然后重新赋值。如果数组某个位置发生了hash冲突，使用的是单链表的头插入方法，同一位置的新元素总是放在链表的头部，这样与原集合链表对比，扩容之后的可能就是倒序的链表了。&lt;/p&gt;
&lt;p&gt;　　下面我们在看看JDK1.8的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d7ec947b-983e-4ce5-ae2e-3790089dd91b')&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_d7ec947b-983e-4ce5-ae2e-3790089dd91b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d7ec947b-983e-4ce5-ae2e-3790089dd91b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d7ec947b-983e-4ce5-ae2e-3790089dd91b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d7ec947b-983e-4ce5-ae2e-3790089dd91b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt;[] resize() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Node&amp;lt;K,V&amp;gt;[] oldTab =&lt;span&gt; table;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; oldCap = (oldTab == &lt;span&gt;null&lt;/span&gt;) ? 0 : oldTab.length;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原数组如果为null，则长度赋值0&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; oldThr =&lt;span&gt; threshold;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; newCap, newThr = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (oldCap &amp;gt; 0) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果原数组长度大于0&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (oldCap &amp;gt;= MAXIMUM_CAPACITY) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组大小如果已经大于等于最大值(2^30)&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;                 threshold = Integer.MAX_VALUE;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldTab;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原数组长度大于等于初始化长度16，并且原数组长度扩大1倍也小于2^30次方&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
&lt;span&gt;13&lt;/span&gt;                      oldCap &amp;gt;=&lt;span&gt; DEFAULT_INITIAL_CAPACITY)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 newThr = oldThr &amp;lt;&amp;lt; 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 阀值扩大1倍&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (oldThr &amp;gt; 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;旧阀值大于0，则将新容量直接等于就阀值 &lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             newCap =&lt;span&gt; oldThr;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;阀值等于0，oldCap也等于0（集合未进行初始化）&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             newCap = DEFAULT_INITIAL_CAPACITY;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组长度初始化为16&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             newThr = (&lt;span&gt;int&lt;/span&gt;)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;阀值等于16*0.75=12&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算新的阀值上限&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (newThr == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt; ft = (&lt;span&gt;float&lt;/span&gt;)newCap *&lt;span&gt; loadFactor;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (&lt;span&gt;float&lt;/span&gt;)MAXIMUM_CAPACITY ?
&lt;span&gt;26&lt;/span&gt;                       (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)ft : Integer.MAX_VALUE);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         threshold =&lt;span&gt; newThr;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node[newCap];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         table =&lt;span&gt; newTab;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (oldTab != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把每个bucket都移动到新的buckets中&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; oldCap; ++&lt;span&gt;j) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 Node&amp;lt;K,V&amp;gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; ((e = oldTab[j]) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                     oldTab[j] = &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;元数据j位置置为null，便于垃圾回收&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (e.next == &lt;span&gt;null&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组没有下一个引用（不是链表）&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                         newTab[e.hash &amp;amp; (newCap - 1)] =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt; TreeNode)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;红黑树&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                         ((TreeNode&amp;lt;K,V&amp;gt;)e).split(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, newTab, j, oldCap);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; preserve order&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                         Node&amp;lt;K,V&amp;gt; loHead = &lt;span&gt;null&lt;/span&gt;, loTail = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                         Node&amp;lt;K,V&amp;gt; hiHead = &lt;span&gt;null&lt;/span&gt;, hiTail = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                         Node&amp;lt;K,V&amp;gt;&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                         &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                             next =&lt;span&gt; e.next;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原索引&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; ((e.hash &amp;amp; oldCap) == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                                 &lt;span&gt;if&lt;/span&gt; (loTail == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                                     loHead =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;                                     loTail.next =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                                 loTail =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原索引+oldCap&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;                             &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                                 &lt;span&gt;if&lt;/span&gt; (hiTail == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                                     hiHead =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;                                     hiTail.next =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                                 hiTail =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                         } &lt;span&gt;while&lt;/span&gt; ((e = next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原索引放到bucket里&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (loTail != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                             loTail.next = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                             newTab[j] =&lt;span&gt; loHead;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原索引+oldCap放到bucket里&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (hiTail != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;                             hiTail.next = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;                             newTab[j + oldCap] =&lt;span&gt; hiHead;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; newTab;
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　该方法分为两部分，首先是计算新桶数组的容量 newCap 和新阀值 newThr，然后将原集合的元素重新映射到新集合中。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201804/1120165-20180408222123209-919665629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　相比于JDK1.7，1.8使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”。&lt;/p&gt;
&lt;h3&gt;9、删除元素&lt;/h3&gt;
&lt;p&gt;　　HashMap 删除元素首先是要找到 桶的位置，然后如果是链表，则进行链表遍历，找到需要删除的元素后，进行删除；如果是红黑树，也是进行树的遍历，找到元素删除后，进行平衡调节，注意，当红黑树的节点数小于 6 时，会转化成链表。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6b48eba5-c00d-4c75-ab15-5abcd9bec2b1')&quot; readability=&quot;42.5&quot;&gt;&lt;img id=&quot;code_img_closed_6b48eba5-c00d-4c75-ab15-5abcd9bec2b1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6b48eba5-c00d-4c75-ab15-5abcd9bec2b1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6b48eba5-c00d-4c75-ab15-5abcd9bec2b1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6b48eba5-c00d-4c75-ab15-5abcd9bec2b1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V remove(Object key) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Node&amp;lt;K,V&amp;gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (e = removeNode(hash(key), key, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;)) == &lt;span&gt;null&lt;/span&gt; ?
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : e.value;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt; removeNode(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash, Object key, Object value,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;boolean&lt;/span&gt; matchValue, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; movable) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n, index;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;(n - 1) &amp;amp; hash找到桶的位置&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((tab = table) != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;
&lt;span&gt;12&lt;/span&gt;         (p = tab[index = (n - 1) &amp;amp; hash]) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         Node&amp;lt;K,V&amp;gt; node = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;, e; K k; V v;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果键的值与链表第一个节点相等，则将 node 指向该节点&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (p.hash == hash &amp;amp;&amp;amp;
&lt;span&gt;16&lt;/span&gt;         ((k = p.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         node =&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果桶节点存在下一个节点&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((e = p.next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点为红黑树&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (p &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeNode)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;          node = ((TreeNode&amp;lt;K,V&amp;gt;)p).getTreeNode(hash, key);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到需要删除的红黑树节点&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;          &lt;span&gt;do&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历链表，找到待删除的节点&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;              &lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;
&lt;span&gt;26&lt;/span&gt;                  ((k = e.key) == key ||
&lt;span&gt;27&lt;/span&gt;                   (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k)))) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                  node =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                  &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;              p =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;          } &lt;span&gt;while&lt;/span&gt; ((e = e.next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除节点，并进行调节红黑树平衡&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (node != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (!matchValue || (v = node.value) == value ||
&lt;span&gt;37&lt;/span&gt;                       (value != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; value.equals(v)))) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (node &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeNode)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;          ((TreeNode&amp;lt;K,V&amp;gt;)node).removeTreeNode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, tab, movable);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (node ==&lt;span&gt; p)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;          tab[index] =&lt;span&gt; node.next;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;          p.next =&lt;span&gt; node.next;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         ++&lt;span&gt;modCount;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         --&lt;span&gt;size;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        afterNodeRemoval(node);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;10、查找元素&lt;/h3&gt;
&lt;p&gt;　　①、通过 key 查找 value&lt;/p&gt;
&lt;p&gt;　　首先通过 key 找到计算索引，找到桶位置，先检查第一个节点，如果是则返回，如果不是，则遍历其后面的链表或者红黑树。其余情况全部返回 null。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('64b01314-d126-4987-9f74-baeccd71da8b')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_64b01314-d126-4987-9f74-baeccd71da8b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_64b01314-d126-4987-9f74-baeccd71da8b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('64b01314-d126-4987-9f74-baeccd71da8b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_64b01314-d126-4987-9f74-baeccd71da8b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V get(Object key) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Node&amp;lt;K,V&amp;gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; (e = getNode(hash(key), key)) == &lt;span&gt;null&lt;/span&gt; ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : e.value;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt; getNode(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash, Object key) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first, e; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n; K k;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((tab = table) != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;
&lt;span&gt; 9&lt;/span&gt;             (first = tab[(n - 1) &amp;amp; hash]) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据key计算的索引检查第一个索引&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (first.hash == hash &amp;amp;&amp;amp; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; always check first node&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 ((k = first.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; first;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不是第一个节点&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((e = first.next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (first &lt;span&gt;instanceof&lt;/span&gt; TreeNode)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历树查找元素&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; ((TreeNode&amp;lt;K,V&amp;gt;&lt;span&gt;)first).getTreeNode(hash, key);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历链表查找元素&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;
&lt;span&gt;21&lt;/span&gt;                         ((k = e.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 } &lt;span&gt;while&lt;/span&gt; ((e = e.next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　②、判断是否存在给定的 key 或者 value&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3704da75-2b6d-4f39-b164-2f5c4696738a')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_3704da75-2b6d-4f39-b164-2f5c4696738a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3704da75-2b6d-4f39-b164-2f5c4696738a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3704da75-2b6d-4f39-b164-2f5c4696738a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3704da75-2b6d-4f39-b164-2f5c4696738a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; containsKey(Object key) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; getNode(hash(key), key) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; containsValue(Object value) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Node&amp;lt;K,V&amp;gt;&lt;span&gt;[] tab; V v;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((tab = table) != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; size &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历桶&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; tab.length; ++&lt;span&gt;i) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历桶中的每个节点元素&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (Node&amp;lt;K,V&amp;gt; e = tab[i]; e != &lt;span&gt;null&lt;/span&gt;; e =&lt;span&gt; e.next) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; ((v = e.value) == value ||
&lt;span&gt;12&lt;/span&gt;                         (value != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; value.equals(v)))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;11、遍历元素&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5ff70134-4b5c-4eff-9e34-ba7186594fd0')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_5ff70134-4b5c-4eff-9e34-ba7186594fd0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5ff70134-4b5c-4eff-9e34-ba7186594fd0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5ff70134-4b5c-4eff-9e34-ba7186594fd0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5ff70134-4b5c-4eff-9e34-ba7186594fd0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; map.put(&quot;1&quot;, &quot;A&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; map.put(&quot;2&quot;, &quot;B&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; map.put(&quot;3&quot;, &quot;C&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; map.put(&quot;4&quot;, &quot;D&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; map.put(&quot;5&quot;, &quot;E&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; map.put(&quot;6&quot;, &quot;F&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String str : map.keySet()){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     System.out.print(map.get(str)+&quot; &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(HashMap.Entry entry : map.entrySet()){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     System.out.print(entry.getKey()+&quot; &quot;+&lt;span&gt;entry.getValue());
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;参考文档：https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html#&lt;/p&gt;
&lt;p&gt;　　　　　http://www.importnew.com/20386.html&lt;/p&gt;
&lt;p&gt;　　　　　https://www.cnblogs.com/nullllun/p/8327664.html&lt;/p&gt;
</description>
<pubDate>Thu, 12 Apr 2018 14:49:00 +0000</pubDate>
<dc:creator>YSOcean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ysocean/p/8711071.html</dc:identifier>
</item>
<item>
<title>pandas（七）数据规整化：清理、转换、合并、重塑之合并数据集 - 左手十字</title>
<link>http://www.cnblogs.com/zuoshoushizi/p/8810876.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuoshoushizi/p/8810876.html</guid>
<description>&lt;p&gt;pandas对象中的数据可以通过一些内置的方式进行合并：&lt;/p&gt;
&lt;p&gt; pandas.merge　可根据一个或多个键将不同的DataFrame中的行连接起来。&lt;/p&gt;
&lt;p&gt;pandas.concat可以沿着一条轴将多个对象堆叠到一起&lt;/p&gt;
&lt;p&gt;实例的方法conbine_first 可以将重复的数据编接到一起，用一个对象中的值填充另一个对象的缺失值。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
In [51]: df1 = DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:range(7&lt;span&gt;)})
In [&lt;/span&gt;53]: df2 = DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:range(3&lt;span&gt;)})

In [&lt;/span&gt;54&lt;span&gt;]: df1
Out[&lt;/span&gt;54&lt;span&gt;]:
   data1 key
0      0   b
&lt;/span&gt;1      1&lt;span&gt;   b
&lt;/span&gt;2      2&lt;span&gt;   a
&lt;/span&gt;3      3&lt;span&gt;   c
&lt;/span&gt;4      4&lt;span&gt;   a
&lt;/span&gt;5      5&lt;span&gt;   a
&lt;/span&gt;6      6&lt;span&gt;   b

In [&lt;/span&gt;55&lt;span&gt;]: df2
Out[&lt;/span&gt;55&lt;span&gt;]:
   data2 key
0      0   a
&lt;/span&gt;1      1&lt;span&gt;   b
&lt;/span&gt;2      2&lt;span&gt;   d

In [&lt;/span&gt;56&lt;span&gt;]: pd.merge(df1,df2)
Out[&lt;/span&gt;56&lt;span&gt;]:
   data1 key  data2
0      0   b      &lt;/span&gt;1
1      1   b      1
2      6   b      1
3      2&lt;span&gt;   a      0
&lt;/span&gt;4      4&lt;span&gt;   a      0
&lt;/span&gt;5      5   a      0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;默认不显式指明用哪个键进行连接的时候，merge会将重叠列的列名当做键。不过，最好显式的指明：&lt;/p&gt;
&lt;p&gt;In [57]: pd.merge(df1,df2,on = 'key')&lt;/p&gt;
&lt;p&gt;如果两个列的列名不同，可以分别指定&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
In [58]: df4 = DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key-r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:range(3&lt;span&gt;)})

In [&lt;/span&gt;59]: df3 = DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key-l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:range(7&lt;span&gt;)})


In [&lt;/span&gt;63]: pd.merge(df3,df4,left_on = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;key-l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,right_on = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;key-r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;63&lt;span&gt;]:
   data1 key&lt;/span&gt;-l  data2 key-&lt;span&gt;r
0      0     b      &lt;/span&gt;1&lt;span&gt;     b
&lt;/span&gt;1      1     b      1&lt;span&gt;     b
&lt;/span&gt;2      6     b      1&lt;span&gt;     b
&lt;/span&gt;3      2&lt;span&gt;     a      0     a
&lt;/span&gt;4      4&lt;span&gt;     a      0     a
&lt;/span&gt;5      5     a      0     a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认情况下，merge做的是‘inner’连接，merge还有left、right和outer：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
In [64]: pd.merge(df1,df2,how=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Out[&lt;/span&gt;64&lt;span&gt;]:
   data1 key  data2
0    &lt;/span&gt;0.0   b    1.0
1    1.0   b    1.0
2    6.0   b    1.0
3    2.0   a    0.0
4    4.0   a    0.0
5    5.0   a    0.0
6    3.0&lt;span&gt;   c    NaN
&lt;/span&gt;7    NaN   d    2.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要根据多个键进行合并，传入一个由列名组成的列表即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
In [65]: left = DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lrow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[1,2,3&lt;span&gt;]})

In [&lt;/span&gt;66]: right = DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rrow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[4,5,6,7&lt;span&gt;]})

In [&lt;/span&gt;67]: pd.merge(left,right,on = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
Out[&lt;/span&gt;67&lt;span&gt;]:
  key1 key2  lrow  rrow
0    a  one     &lt;/span&gt;1     4
1    a  one     1     5
2    b  one     3     6
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果合并的列中存在重复的列，可以指定重复的列的后缀进行区分&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
In [68]: pd.merge(left,right,on = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
Out[&lt;/span&gt;68&lt;span&gt;]:
  key1 key2_x  lrow key2_y  rrow
0    a    one     &lt;/span&gt;1    one     4
1    a    one     1    one     5
2    a    two     2    one     4
3    a    two     2    one     5
4    b    one     3    one     6
5    b    one     3    two     7
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;指定列名&lt;/span&gt;
In [71]: pd.merge(left,right,on = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],suffixes=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_eft&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_right&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
Out[&lt;/span&gt;71&lt;span&gt;]:
  key1 key2_eft  lrow key2_right  rrow
0    a      one     &lt;/span&gt;1        one     4
1    a      one     1        one     5
2    a      two     2        one     4
3    a      two     2        one     5
4    b      one     3        one     6
5    b      one     3        two     7
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;有时候，DataFrame中的连接键位于其索引中，merge可以通过left_index = True 或 right_index =True 来讲索引应用于连接键。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
In [73]: left = DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:range(6&lt;span&gt;)})
In [&lt;/span&gt;75]: right = DataFrame({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;group_val&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[3.5,7]},index=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])

In [&lt;/span&gt;76]: pd.merge(left,right,left_on = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,right_index=&lt;span&gt; True)
Out[&lt;/span&gt;76&lt;span&gt;]:
  key  value  group_val
0   a      0        &lt;/span&gt;3.5
2   a      2        3.5
3   a      3        3.5
1   b      1        7.0
4   b      4        7.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于层次化的索引，需要对应的left_on = ['key1','key2'] , right_index = True&lt;/p&gt;

</description>
<pubDate>Thu, 12 Apr 2018 14:28:00 +0000</pubDate>
<dc:creator>左手十字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zuoshoushizi/p/8810876.html</dc:identifier>
</item>
<item>
<title>ROS系统MoveIt玩转双臂机器人系列（一） - Shawn0102</title>
<link>http://www.cnblogs.com/shawn0102/p/8654407.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shawn0102/p/8654407.html</guid>
<description>
&lt;p&gt;&lt;strong&gt;一、ROS系统的MoveIt模块简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　机器人操作系统ROS目前最受关注的两个模块是导航（Navigation）和机械臂控制（MoveIt!），其中，机械臂控制模块（后面简称MoveIt）可以让用户快速建立机械臂模型并实现机械臂的控制（包括建模、运动学求解、运动规划、避障等），后续我将分几篇博客分别介绍如何一步步使用MoveIt控制自己的机械臂，算是对以前的学习内容的记录和分享。&lt;/p&gt;
&lt;p&gt;　　关于MoveIt最全面的讲解可以&lt;a href=&quot;http://moveit.ros.org/&quot; target=&quot;_blank&quot;&gt;参考MoveIt官方网站&lt;/a&gt;，推荐大家多参考官方文档和例程，这里的博文系列权当简介和入门。&lt;/p&gt;
&lt;p&gt;　　如果用几个特点来概括MoveIt，主要有：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;它是属于ROS系统的一部分，用于控制多关节机械臂；&lt;/li&gt;
&lt;li&gt;提供了一系列成熟的插件和工具，可以实现机械臂控制的快速配置；&lt;/li&gt;
&lt;li&gt;封装了大量API，方便用户在MoveIt模块上进行二次开发，进而做出更多有意思的应用。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　这里借用官方经典图例做简单说明，如下如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182806/201804/1182806-20180408220105695-1564658316.png&quot; alt=&quot;&quot; width=&quot;395&quot; height=&quot;297&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MoveIt结构图&lt;/p&gt;
&lt;p&gt;　　上图可以看出：&lt;/p&gt;
&lt;p&gt;　　1.MoveIt 的核心节点（node）为move_group，外围的几个部分分别为：&lt;strong&gt;ROS Param Server&lt;/strong&gt;， &lt;strong&gt;Robot  Controllers&lt;/strong&gt;， &lt;strong&gt;Robot 3D Sensors&lt;/strong&gt;， &lt;strong&gt;User Interface&lt;/strong&gt;， &lt;strong&gt;Robot Sensors&lt;/strong&gt;，其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ROS Param Server&lt;/strong&gt;：这部分载入的是用户定义的模型文件（xacro或urdf）和一些配置文件。（重要）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robot  Controllers&lt;/strong&gt;：  这部分可以看做是和真正的机器人部分（硬件控制接口）打交道的部分，即运动规划的数据由此发给机器人驱动部分，后续会详细讲解。（重要）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robot 3D Sensors&lt;/strong&gt;：  这部分作用是载入RGB-D相机或激光雷达等获得的点云数据用于机械手的抓取或避障等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt;：         这部分是用户接口，MoveIt提供一系列的API供用户完成自定义的功能，这里主要。（重要）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robot Sensors&lt;/strong&gt;：        这部分是接收机械臂的传感器数据，然后预估出机器人的状态并发布。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;二、MoveIt的安装（Ubuntu14.04，Indigo）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　首先确保你的Linux上正确安装了ROS系统，安装步骤参考：&lt;a title=&quot;ROS Indigo的安装（Ubuntu）&quot; href=&quot;http://wiki.ros.org/indigo/Installation/Ubuntu&quot; target=&quot;_blank&quot;&gt;http://wiki.ros.org/indigo/Installation/Ubuntu&lt;/a&gt;。然后安装moveit，如果不想挑战源码编译，MoveIt可以用apt-get快速安装，只需要输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
$ sudo apt-get install ros-indigo-moveit-full
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;三、本系列博文所用双臂机器人简介&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　本系列博文将以一个双臂机器人为例，详细讲解基于MoveIt的使用方法，我为这个双臂机器人取名为：&lt;strong&gt;rob&lt;/strong&gt;，并在Solidworks中简单绘制了该机器人的三维模型，结构示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182806/201804/1182806-20180409220237941-1437739916.png&quot; alt=&quot;&quot; width=&quot;370&quot; height=&quot;321&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Rob结构示意图&lt;/p&gt;
&lt;p&gt;　　Rob包含两个手臂，左右对称布局，每个手臂包含5个自由度，关节情况如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182806/201804/1182806-20180411220246705-974543809.png&quot; alt=&quot;&quot; width=&quot;381&quot; height=&quot;351&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关节分布情况示意图&lt;/p&gt;
&lt;p&gt;　　这种关节分布是仿人形的双臂机器人常用的手臂设置形式，但这种结构并不能完全覆盖人手臂所有的自由度（人的手臂包含7个自由度），但用于说明 MoveIt 的使用已经足够了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、机器人的ROS模型建立&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　这个系列主要介绍机器人ROS模型的建立方法，ROS系统带来的好处之一就是：我们无需自己建立复杂的数学模型来描述自己的机器人几何尺寸、运动学和动力学等，只需要用它提供的模型描述方法即可实现快速建模。&lt;/p&gt;
&lt;p&gt;　　ROS系统的模型描述方法主要有两种格式: URDF 和 XACRO。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;URDF：用于描述一些简单的机器人模型，参考官网：&lt;a href=&quot;http://wiki.ros.org/urdf/XML&quot; target=&quot;_blank&quot;&gt;URDF官方介绍&lt;/a&gt;（初学者一定要精读这些文档）。&lt;/li&gt;
&lt;li&gt;XACRO： 应用更普遍的机器人模型描述文件，参考官网：&lt;a href=&quot;http://wiki.ros.org/xacro&quot; target=&quot;_blank&quot;&gt;xacro&lt;/a&gt;，它有如下几个特点：   &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　1. 语法简练。采用编程话的脚本语言格式，可以定义变量、常量、引入数学表达式等，极易上手。&lt;/p&gt;
&lt;p&gt;　　　　2. 方便复用。它可以进行一系列的宏定义，并且可以包含其他.xacro文件。&lt;/p&gt;
&lt;p&gt;　　下面，开始用xacro文件建立Rob的机器人模型，完整的源代码可以在：git上获取（&lt;span&gt;git建模源码&lt;/span&gt;），下文会截取一部分代码做简要说明。&lt;/p&gt;
&lt;p&gt;1. 第一部分是文件的头和一些宏定义，robot name我们可以自己随便定义，然后分别给出了几组颜色和常数的定义，最后给出了关节传动部分的宏定义。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;robot &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;rob_robot&quot;&lt;/span&gt;&lt;span&gt; xmlns:xacro&lt;/span&gt;&lt;span&gt;=&quot;http://ros.org/wiki/xacro&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Include materials &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;material &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Black&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;color &lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;=&quot;0.0 0.0 0.0 1.0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;material&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;material &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;color &lt;/span&gt;&lt;span&gt;rgba&lt;/span&gt;&lt;span&gt;=&quot;1.0 1.0 1.0 1.0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;material&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　常量的定义方法如下，在引用这里定义的常量的时候，用${XX}，例如在如果在下面的代码中想引用M_PI，只需要用：${M_PI} 即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- Constants --&amp;gt;&lt;br/&gt;&lt;span&gt;　　 &amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;deg_to_rad&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0.01745329251994329577&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;M_PI&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;3.14159&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　关节的传动参数宏定义方法如下，&lt;span&gt;xacro:macro name 定义了本宏的名称，这个名称由用户定义，后续引用该宏的时候就是根据名字来的，具体如何操作参考下文介绍或git上的源代码，注意，这里宏定义内部的一些具体数值仅为说明而存在，具体的机器人关节应该是不一样的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; transmission block macro definition &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xacro:macro &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;transmission_block&quot;&lt;/span&gt;&lt;span&gt; params&lt;/span&gt;&lt;span&gt;=&quot;joint_name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transmission &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;tran1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;transmission_interface/SimpleTransmission&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;joint &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;${joint_name}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hardwareInterface&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;PositionJointInterface&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hardwareInterface&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;joint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;actuator &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;motor1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hardwareInterface&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;PositionJointInterface&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hardwareInterface&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mechanicalReduction&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mechanicalReduction&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;actuator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;transmission&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;xacro:macro&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2，base_link的定义。&lt;/p&gt;
&lt;p&gt;　　base_link是所有的其他关节的基础，也就是基坐标系所在的link，这里他的几何图形我们直接引用他的dae文件，至于如何用Solidworks绘制模型然后制作成dae文件，后续找机会专门写一篇博客进行介绍，下面的gazebo句段是为了我们的模型在gazebo环境中仿真用的，注意，base_link 只是定义了“机械臂的基座” 它本身是不包含 joint 的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; BASE LINK AND &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;base_link&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;visual&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;origin xyz=&quot;-0.22 -0.15 0.00&quot; rpy=&quot;0 0 0&quot; /&amp;gt;  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;origin &lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;=&quot;0.1 -0.11 0.13&quot;&lt;/span&gt;&lt;span&gt; rpy&lt;/span&gt;&lt;span&gt;=&quot;0 0 1.570796&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; 
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mesh &lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;=&quot;package://rob_description/meshes/body_link_humanoid.dae&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;material &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;green&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;visual&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collision&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;origin &lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;=&quot;0.0 0.0 0.0&quot;&lt;/span&gt;&lt;span&gt; rpy&lt;/span&gt;&lt;span&gt;=&quot;0 0 0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;  &lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mesh &lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;=&quot;package://rob_description/meshes/body_link_humanoid.dae&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;collision&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;gazebo &lt;/span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;span&gt;=&quot;base_link&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;material&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Gazebo/green&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;material&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;gazebo&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.  其他关节的定义。&lt;/p&gt;
&lt;p&gt; 　　至于其他关节的定义，一个 Link 就对应一个 Joint ，示例如下，这里定义的是 l_shoulder_joint  和 l_shoulder_link。在Joint 的定义中，有一个limit 的程序段，这里规定的是关节的力限制、速度限制和关节运动范围限制，速度限制的单位是m/s（移动关节）或rad/s（转动关节），详细的说面看：&lt;a href=&quot;http://wiki.ros.org/urdf/XML/joint&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　代码中间: &amp;lt;xacro: ...../&amp;gt; 就是引用上文中我们定义的关于传动参数的宏定义。&lt;/p&gt;
&lt;p&gt; 　　如果在xacro 代码中想用数学表达式，使用的格式是：${ 数学表达式 } ，如下面代码中所示。&lt;/p&gt;
&lt;p&gt;　　其余关节的定义详见源代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; left shoulder link and joint &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;joint &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;l_shoulder_joint&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;revolute&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent &lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span&gt;=&quot;base_link&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;child &lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span&gt;=&quot;l_shoulder_link&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;origin &lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;=&quot;0 0.11 0.74&quot;&lt;/span&gt;&lt;span&gt; rpy&lt;/span&gt;&lt;span&gt;=&quot;0 0 3.14159&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;axis &lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;=&quot;0 1 0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;limit &lt;/span&gt;&lt;span&gt;effort&lt;/span&gt;&lt;span&gt;=&quot;300&quot;&lt;/span&gt;&lt;span&gt; velocity&lt;/span&gt;&lt;span&gt;=&quot;${0.2*0.6981}&quot;&lt;/span&gt;&lt;span&gt; lower&lt;/span&gt;&lt;span&gt;=&quot;-0.43633&quot;&lt;/span&gt;&lt;span&gt; upper&lt;/span&gt;&lt;span&gt;=&quot;3.0543&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; (-25  +175)=(-25 175) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; velocity: m/s for prismatic, rad/s for revolute &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dynamics &lt;/span&gt;&lt;span&gt;damping&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt; friction&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;joint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xacro:transmission_block &lt;/span&gt;&lt;span&gt;joint_name&lt;/span&gt;&lt;span&gt;=&quot;l_shoulder_joint&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt; &lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;l_shoulder_link&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;visual&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;origin &lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;=&quot;-0.04 0.02 0.04&quot;&lt;/span&gt;&lt;span&gt; rpy&lt;/span&gt;&lt;span&gt;=&quot;1.5708 1.5708 0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; 
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mesh &lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;=&quot;package://rob_description/meshes/l_shoulder_link.dae&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;material &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;green&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;visual&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collision&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;origin &lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;=&quot;-0.04 0.02 0.04&quot;&lt;/span&gt;&lt;span&gt; rpy&lt;/span&gt;&lt;span&gt;=&quot;1.5708 1.5708 0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mesh &lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;=&quot;package://rob_description/meshes/l_shoulder_link.dae&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;collision&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;xacro:inertial_matrix &lt;/span&gt;&lt;span&gt;mass&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;gazebo &lt;/span&gt;&lt;span&gt;reference&lt;/span&gt;&lt;span&gt;=&quot;l_shoulder_link&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;material&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Gazebo/green&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;material&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;gazebo&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4. 将 XACRO文件转换成 URDF 文件 并检查。&lt;/p&gt;
&lt;p&gt; 　　转换的方法很简单，ROS封装了实现方法，我们只需进入xacro 所在的文件夹，然后键入如下命令即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
rosrun xacro xacro.py rob.xacro &amp;gt; rob.urdf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　为了检验我们的模型的准确性，我们进行简单的检查，在同一个目录下输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
check_urdf rob.urdf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即可得到如下显示，可以看到双臂的关节链接情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182806/201804/1182806-20180412220219738-2036097751.png&quot; alt=&quot;&quot; width=&quot;334&quot; height=&quot;191&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　为了更直观的观看关节链接情况，我们在同一个目录下输入，就会得到 rob_robot.gv 和 &lt;em id=&quot;__mceDel&quot;&gt;file rob_robot.pdf  两个文件，打开后者如下图所示。&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
urdf_to_graphiz rob.urdf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182806/201804/1182806-20180412220727606-1108543686.png&quot; alt=&quot;&quot; width=&quot;670&quot; height=&quot;292&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 5. 在RViz中观看模型。&lt;/p&gt;
&lt;p&gt;　　编写 launch 文件，取名： description.launch ，内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;arg &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;model&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Parsing xacro and setting robot_description parameter &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;robot_description&quot;&lt;/span&gt;&lt;span&gt; command&lt;/span&gt;&lt;span&gt;=&quot;$(find xacro)/xacro.py $(find rob_description)/urdf/rob.xacro&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Setting gui parameter to true for display joint slider &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;use_gui&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Starting Joint state publisher node which will publish the joint values &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;node &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;joint_state_publisher&quot;&lt;/span&gt;&lt;span&gt; pkg&lt;/span&gt;&lt;span&gt;=&quot;joint_state_publisher&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;joint_state_publisher&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Starting robot state publish which will publish tf &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;node &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;robot_state_publisher&quot;&lt;/span&gt;&lt;span&gt; pkg&lt;/span&gt;&lt;span&gt;=&quot;robot_state_publisher&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;state_publisher&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Launch visualization in rviz &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;node &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;rviz&quot;&lt;/span&gt;&lt;span&gt; pkg&lt;/span&gt;&lt;span&gt;=&quot;rviz&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;rviz&quot;&lt;/span&gt;&lt;span&gt; args&lt;/span&gt;&lt;span&gt;=&quot;-d $(find rob_description)/urdf/urdf.rviz&quot;&lt;/span&gt;&lt;span&gt; required&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
roslaunch rob_description description.launch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182806/201804/1182806-20180412221129450-144239455.png&quot; alt=&quot;&quot; width=&quot;597&quot; height=&quot;269&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　转动每个关节，检查无误后，模型建立完成，下一篇经介绍如何使用 MoveIt 控制 Rob 机器人。&lt;/p&gt;

&lt;p&gt;　　&amp;lt;完&amp;gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Apr 2018 14:18:00 +0000</pubDate>
<dc:creator>Shawn0102</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shawn0102/p/8654407.html</dc:identifier>
</item>
<item>
<title>连载《一个程序猿的生命周期》-《发展篇》- 20.与一位博士生聊天，终归还是要面对现实 - 一个程序猿的生命周期</title>
<link>http://www.cnblogs.com/blog470130547/p/8810640.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blog470130547/p/8810640.html</guid>
<description>&lt;p&gt;&lt;span&gt;        春节之后上班，感觉时间过的飞快，有干不完的事。自从归到***研究院，从原来17下班，改成18点下班了，当然加班是难免的事。忙了一天的工作，晚上还要出差。匆匆赶到火车站，匆匆赶上车，匆匆打开电脑准备项目交流的材料。连路边的美景都无暇欣赏，不知道是工作的意义，还是生活的意义。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        当我把电脑关掉的时候，偶然间发现旁边一位男同志正在用电脑看着英文资料，貌似一堆算法。本人英文不好、算法也不好，判断仁兄必定是人才。好奇心促使我决定相互交流一下，得知仁兄是93年的，北大在读博士，信息科学专业，大致可以理解为应用数学范畴。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        本人虽然学识浅薄，但是对先进领域、技术等也比较关注。对AI算法以及百度无人驾驶领域进行了简单的交流。年纪虽小，但是很健谈，在交流的过程中，仁兄也发表了他的一些感受和观点，在此简单罗列一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;strong&gt; 1.他在金融公司实习，以前的&lt;/strong&gt;&lt;strong&gt;价值观崩溃了。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          评：一个博士生，社会的栋梁之才，大致可以认为是有理想、有抱负、有情怀的人。从技术层面，走进社会就是一个螺丝钉；价值观层面，走向社会就是向“前”看的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;strong&gt;2.国内除了几个顶尖的学府，其他的基本在生产学术垃圾。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;         评：相认大家不会否认，都是东拼西凑的八股文，没有什么心意。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;strong&gt; 3.将来毕业后，工作首选金融和BAT。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;         评：一毕业就30万、50万的，据说他的师兄，70万也只是平均水平。在工业领域或传统行业，相比之下惨不忍睹。国家倡导的智能制造2025、工业4.0，没有人才的注入，喊破嗓子也用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;strong&gt;4.国内顶尖的人才被国外牛X的公司挖走了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;         评：国内的普通企业站在BATJ的基础上发展，BATJ在国外的微软、苹果、谷歌等基础上发展，论创新，国外公司的吸附力更强。当然有观念、思维、体制等方面的差异。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;strong&gt;5.和女朋友一起赚钱，需要5年的时间才能凑够首付款买房。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;         评：我直接回答他：像你们还可以算计买房，很多人都不敢算。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     &lt;strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;  6.学到的知识尽快变现，10年后不一定怎么样了呢。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;         评：社会上广泛流传着读书无用论，这是“底层”社会麻痹自己的方式。不说这种实用主义是好是坏，拿知识变现是最直接、最快的方式。现在我们还不是一个成熟的社会，将来必定是一个知识的社会。  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       自己感觉不再年轻了，走在大厦里遇到熟人，都叫强哥了。但是也不要有不好的感觉，更应该关注年轻人，也许将来走的路更需要他们或他们也需要你，下车时我们留了联系方式。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;hr/&gt;&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div readability=&quot;6.241134751773&quot;&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个程序猿的生命周期 微信平台&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;口   号：职业交流，职业规划；面对现实，用心去交流、感悟。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;公众号：iterlifetime&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;strong&gt;百木-ITer职业交流奋斗 群：141588103&lt;/strong&gt;   &lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二维码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/691334/201606/691334-20160618075950167-974887453.jpg&quot; alt=&quot;&quot; width=&quot;120&quot; height=&quot;120&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 12 Apr 2018 13:47:00 +0000</pubDate>
<dc:creator>一个程序猿的生命周期</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blog470130547/p/8810640.html</dc:identifier>
</item>
<item>
<title>IIS进行URL重写——实现https重定向，文件访问重写，服务重写等等 - SpiritLing</title>
<link>http://www.cnblogs.com/spirit-ling/p/8809039.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/spirit-ling/p/8809039.html</guid>
<description>&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、Why？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、先来讲一讲为什么我们要使用url重写这个东西&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、因为我学习的后端是nodejs，然后我发现nodejs一个非常让人难受的事，就是它监听端口不是80和443时，你访问网页需要输入端口，这样很不友好，比如下面这样：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412170900477-1291948787.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、这样对用户很不友好，所以我才打算学一学url重写，url重写后就会变成这样：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412171027244-261782998.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、当然上面的url中的3001也可以修改成其他字母或者多层路径，这样就会变得好看多了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、前置条件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、首先你得有个IIs服务器  (￣▽￣)／&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、先去IIS官网下载&lt;a title=&quot;web平台安装工具&quot; href=&quot;https://www.iis.net/downloads/microsoft/web-platform-installer&quot; target=&quot;_blank&quot;&gt;web平台安装工具&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、当然是安装这个工具了٩(๑❛ᴗ❛๑)۶&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、打开这个工具&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412200431336-787173232.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、搜索Application Request Routing Cache，或者 应用程序请求路由 ，因为有可能是英文也有可能是中午，所以当一个搜索不到时，搜索另一个语言，一定要在产品全部中搜索&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412200848094-824241073.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、安装后可以一路点击接受安装即可&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7、接下来安装url重写工具，直接搜索url即可，，有可能出现 url 重写工具 或者 url rewrite &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8、和上面安装请求路由一样，也可以和请求路由一起添加进去，一起安装&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9、安装完成，我们前置工作也就成功了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、应用程序请求路由设置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、打开IIS工具，选择上面安装的请求路由&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412201157869-978989213.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、选择 Server Proxy Settings&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412201244421-675549952.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、在中间区域，选择勾选Enable proxy，不用修改内容，当然也可以根据需求自己修改&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412201358722-1759010199.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、点击应用即可，完成请求路由的设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412201437572-1668674268.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、url重写设置：这边讲解参数，后面有三个写好的例子使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、打开站点，选择需要url重写的站点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412201808214-1496956504.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、当安装完成url重写时，会出现url重写这个工具，选择工具，名字也有可能是英文&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412201916597-1448053593.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、打开工具，选在右侧栏第一行添加规则，打开对话框，选择空白规则&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412202043308-320482397.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、输入名称，随意，但是尽量能表示出重写目标的含义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412203113345-943932106.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、匹配url，请求的url(字面意思)：与模式匹配（推荐），与模式不匹配；使用(匹配使用的方式)：正则表达式（推荐），通配符，完全匹配；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412203336729-93686218.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、模式：比如说host代表主机域名，则在这里面写的就是host之后的正则匹配表达式，比如匹配在host/blog/，之下的都转到nodejs搭建的服务上，则这里填写^blog/(.*)；点击测试模式，我们填写下面图片内容进行测试，发现测试结果中有个{R:1}，我们需要将其导向至nodejs搭建的服务，也就是重写目标&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412203903048-2138965636.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7、忽略大小写，自然就是字面意思，不多叙述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8、下面便是条件，按照图片来进行填写，这里不具体细数条件类型和规则模式填写，后面有三个例子进行了基本讲述，其余的请查看官方文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412204422154-761160361.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9、服务器变量可以不写，操作类型可以因情况而定，http站点转向https时一般使用重定向，其余一般为重定向&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重写URL：比如博客是在nodejs搭建的服务上，并且监听本地3001端口时，填写http://127.0.0.1:3001/{R:1}，这个{R:1}就是上面模式匹配的字符串，其实访问www.example.com/blog/index.html，就是相当于访问http://127.0.0.1:3001/index.html，这样监听本地3001，不用开方公网3001，可以减少服务器危险&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;停止后续规则，自然就是字面意思，一旦勾选后，匹配处理结束，将不再处理下面的其他规则&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412204907092-626474199.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10、点击右侧栏应用即可，当应用显示灰色时，证明有必填项没有填写，所以无法应用，到这里也就重写完毕，下面是例子&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、例子&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、http重定向至https&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;填写内容 -&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;名称：随意&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模式：(.*) ；代表全部，任意，无论是否字符都匹配&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;条件：{HTTPS}；https，模式^OFF$，代表https关闭，也就是没有；；；{HTTP_HOST}：填写要匹配的域名，不能其他的域名访问到也重定向至这个https，逻辑分组全部匹配，任意匹配是满足一个条件即可进行下面处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;操作类型：重定向&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重定向URL：https://www.example.com/{R:1}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结果相当于 访问 http://www.example.com/....... 重定向至 https://www.example.com/.......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412211010360-882989896.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412211028498-2047820258.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、重写服务，一般使用为nodejs服务，这里不写条件，一般条件使用为上面的两种，这里为了截图方便，不予展示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模式：^blog/(.*)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;类型：重写&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目标URL：http://127.0.0.1:3001/{R:1}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结果：访问：http://www.example.com/blog/index.html  --&amp;gt;  http://127.0.0.1:3001/inde.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然这个127.0.0.1指的是服务器的本地，而不是访问者电脑本地，这样使用，可以防止开发太多端口，引起安全问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412211735793-608635894.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、重写服务-文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模式：(.*)phpf$：代表访问的文件以phpf结尾&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;类型：重写&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目标URL：http://www.example.com/{R:1}.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结果：访问：http://www.example.com/dir/loginphpf  --&amp;gt;  http://www.example.com/dir/login.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样当后端有其他语言或者不想在前端显示文件后缀时，可以使用这种方式来进行隐藏，phpf可以自己随意更改&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1076304/201804/1076304-20180412213005880-1123992935.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、尾记&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、本文记录目的只是为了防止遗忘&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、当然url重写不可能这么简单的使用，我只是需求多少，研究多少，这里只是基本使用，想要更复杂的，则自己可以去官方文档查看，研究&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、&lt;/span&gt;&lt;span&gt;本博客可以随意转载，但是请在博文顶部写上来源：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;作者：SpiritLing &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;地址：https://www.cnblogs.com/spirit-ling/p/8809039.html&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Apr 2018 13:46:00 +0000</pubDate>
<dc:creator>SpiritLing</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/spirit-ling/p/8809039.html</dc:identifier>
</item>
</channel>
</rss>