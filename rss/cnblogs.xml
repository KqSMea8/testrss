<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>虚拟机创建流程中neutron代码分析（二） - 金色旭光</title>
<link>http://www.cnblogs.com/goldsunshine/p/7966427.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/goldsunshine/p/7966427.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当nova服务发送了创建port的restful调用信息之后，在neutron服务中有相应的处理函数来处理调用。根据restful的工作原理，是按照&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;paste.ini文件中配置好的流程去处理该条调用。本节从neutron代码中的create_port()函数开始说起。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;简要流程：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是调用的流程图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171204172914154-1910892390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171204172934341-1142444693.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 详细代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上是简要流程图，下面是具体的代码分析。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; create_port()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;调用create_port_db()函数产生port数据。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;更新安全组&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;绑定port&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1060878/201712/1060878-20171203164115960-456401642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;_create_port_db()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;获取dhcp配置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;调用create_port_db()函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;转化port_db为字典数据形式&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060878/201712/1060878-20171203165238226-398216958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;create_port_db()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;nova传入的port信息&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;生成port的uuid&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;获取租户并判断是否合法&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;构造port数据字典&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;判断是否制定mac地址，指定了mac则用该mac创建port，没有则先生成再创建port&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;创建port数据结构&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;create_db_port_obj函数中生成mac地址&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; allocate_ips_for_port_and_store函数中生成ip地址填充port&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060878/201712/1060878-20171203165259179-796038951.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060878/201712/1060878-20171203165315429-656061870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;----------------------------------------------------------------------&lt;span&gt;mac地址创建分析开始&lt;/span&gt;---------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;&lt;span&gt;create_db_port_obj()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;判断mac地址是否为空&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;mac地址不为空，判断mac地址是否在使用当中&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;mac地址为空则调用generate_mac()函数生成mac&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060878/201712/1060878-20171203165339304-560272053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;generate_mac()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;返回get_random_mac()函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;get_random_mac()函数生成mac地址。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;mac地址生成分析：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先读取配置文件中的mac地址，前六位都是固定的。然后生成后六位，使用python的random函数生成随机数。最后将数据组装起来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;形成一个完成mac地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060878/201712/1060878-20171203165434319-1996800255.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; ----------------------------------------------------------------------&lt;span&gt;mac地址创建分析结束&lt;/span&gt;---------------------------------------------------------------&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; ----------------------------------------------------------------------&lt;span&gt;ip地址创建分析开始&lt;/span&gt;------------------------------------------------------------------&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;allocate_ips_for_port()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;调用函数allocate_ips_for_port函数分配ip&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;将所有分配的ip地址写入到neutron数据ipallocations表中。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1060878/201712/1060878-20171203165512444-1922194790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;allocate_ips_for_port()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;判断用户是否指定了ip地址&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果指定ip地址，调用-test_fixed_ips_for_port()函数验证其合法性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果没有指定，则调用ip地址管理驱动ipam_allocate_ips()函数分配ip地址&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171204171636779-731469085.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;关于ipam地址管理，里面有一些有意思的知识，看以查看这篇博文。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u013553406/article/details/51700198&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;http://blog.csdn.net/u013553406/article/details/51700198&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; ipam_allocate_ips()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;加载ipam框架，工厂方法等。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;调用ipam_driver的allocate（）函数产生ip地址&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171204171729701-522938716.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; allocate()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;调用generate_ip()函数生成ip地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171204171828497-842844666.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;generate_ip()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该函数是真正生成ip地址的函数。原理是从neutron数据库中的ip可用表中选择出多个ip地址，将ip地址添加到变量ip_allocations中，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后经过一些列的数据转化，从所有候选的ip地址中选择第一个ip地址做为最总生成的ip。，然后将ip地址返回。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171204171910060-1632374042.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  ----------------------------------------------------------------------&lt;span&gt;ip地址创建分析结束&lt;/span&gt;------------------------------------------------------------------&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图是neutron数据库中有关ip地址的数据表，其中分为neutron-server管理的ipallocaion*和ipam插件管理的ipamallocation*。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171205153134534-985227735.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 每创建一个网络，都会在neutron-server中生成一条相关ip数据表。如下的子网在数据库中分别记录。VM虚机是选择了哪一个子网，&lt;/span&gt;&lt;span&gt;在生成ip时就从该子网的数据库中分配ip地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171205152845722-1050261378.png&quot; alt=&quot;&quot; width=&quot;803&quot; height=&quot;491&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171205153111441-1032593697.png&quot; alt=&quot;&quot; width=&quot;804&quot; height=&quot;159&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1060878/201712/1060878-20171205153601675-106660401.png&quot; alt=&quot;&quot; width=&quot;805&quot; height=&quot;157&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上是分析了在neutron-server中创建port里生成mac和ip地址的过程，简单总结&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;mac地址是根据配置文件和随机数函数生成&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ip地址是根据数据库中的地址池分配&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 05 Dec 2017 07:46:00 +0000</pubDate>
<dc:creator>金色旭光</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/goldsunshine/p/7966427.html</dc:identifier>
</item>
<item>
<title>NodeJS网络爬虫 - Jeff.Zhong</title>
<link>http://www.cnblogs.com/edwardloveyou/p/7987165.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edwardloveyou/p/7987165.html</guid>
<description>&lt;p&gt;  原文地址：&lt;a href=&quot;http://jeffzhong.space/2017/12/01/netgrab/&quot;&gt;NodeJS网络爬虫&lt;/a&gt;&lt;br/&gt;  网上有很多其他语言平台版本的网络爬虫，比如Python，Java。那怎么能少得了我们无所不能的javascript呢😂？这个和之前给产品狗开发的批量图片下载配置工具，原理很相似，核心就是调用Node的http模块。&lt;/p&gt;
&lt;p&gt;网络爬虫基本就由如下部分组成：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;程序入口&lt;/li&gt;
&lt;li&gt;请求模块&lt;/li&gt;
&lt;li&gt;数据解释&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;  程序入口可以用web页面实现，还可以在网页上显示抓取的数据和分析结果；但是这个我只想把精力花在核心模块，页面和样式不想花太多精力去弄。所以呢，我就开发个node的命令行工具，这个比较成熟的就是commander了。&lt;/p&gt;
&lt;p&gt;  请求模块方面，我只想抓取百度的页面，还有知乎的页面，它们的请求都是https协议的，好在Node的https和http模块功能几乎是一样的，这里需要做的就是熟悉它的api就好了，也是easy。&lt;/p&gt;
&lt;p&gt;  数据解释模块，因为抓取出来的页面内容是字符串，所以可以用正则表达式去匹配，但是这样太麻烦了。有没有更好的方式？抓取回来可都是html内容，用jQuery以操作dom的方式去解析数据不是很方便嘛，恰好有个服务端的jquery库cheerio。&lt;/p&gt;
&lt;p&gt;  页面抓取完，数据也分析出来了，那就非常简单了，你可以选择存入数据库或者写入文件保存。接下来就开始实现上面的功能模块。&lt;/p&gt;
&lt;h2 id=&quot;程序入口&quot;&gt;程序入口&lt;/h2&gt;
&lt;p&gt;  开始配置和初始花commander，具体的使用方式参考官方的文档：&lt;em&gt;&lt;a href=&quot;https://www.npmjs.com/package/commander&quot; class=&quot;uri&quot;&gt;https://www.npmjs.com/package/commander&lt;/a&gt;&lt;/em&gt;，这里不再详细解释用法了,下面开始配置commander。&lt;br/&gt;  首先要在package.json添加如下节点，表示注册了一个命令行 &quot;grab&quot;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;  &lt;span class=&quot;st&quot;&gt;&quot;bin&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;grab&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;bin/grab.js&quot;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  接着在grab.js开始定义commander，最后我们就可以这样执行命令行：&quot;grab baidu &amp;lt;内容&amp;gt;&quot;，当然可以用bd简写代替baidu，知乎的定义和百度是一样，这里不再重复介绍了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    program
        &lt;span class=&quot;co&quot;&gt;// .allowUnknownOption()//不报错误&lt;/span&gt;
        .&lt;span class=&quot;at&quot;&gt;version&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'0.0.1'&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;usage&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'这是我的网络爬虫程序😎'&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;  grap [option]'&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;    bd baidu: baidu search'&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;    zh zhihu: zhihu search'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    program
        .&lt;span class=&quot;at&quot;&gt;command&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'baidu &amp;lt;cmd&amp;gt;'&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;alias&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'bd'&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;description&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'baidu search baidu'&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;option&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;-t, --tieba&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;baidu tieba&quot;&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;action&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(cmd&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; options)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'baidu search &quot;%s&quot;:'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; cmd)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;baiduSearch&lt;/span&gt;(cmd)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'--help'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'  Examples:'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'    grab bd    &amp;lt;cmd&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'    grab baidu &amp;lt;cmd&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;program&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;argv&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;请求模块&quot;&gt;请求模块&lt;/h2&gt;
&lt;p&gt;  https模块发起请求主要有两种方式，这里稍微封装了下：&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;3.5&quot;&gt;
&lt;p&gt;get方式，主要针对的是简单的请求，只需要传递url发起get请求。知乎的调用这个就可以了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;callback) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;https&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(response) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; body &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            body &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; data&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;(body)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;15.5&quot;&gt;
&lt;p&gt;requerst方式，不但可以发起get请求，也可以发起post请求，还可以修改端口，请求header。这个主要是针对限制比较多的百度爬虫。百度必须设置header，同时百度请求参数也比较复杂，需要专门配置，具体可参考网上的资料。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(options&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;callback)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// var postData = qs.stringify({});&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; body&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    req &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;https&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(options&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; (res) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'STATUS: '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;statusCode&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// console.log('HEADERS: ' + JSON.stringify(res.headers));&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setEncoding&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'utf8'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (chunk) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            body&lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt;chunk&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;(body)
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(e) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'problem with request: '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;message&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// write data to request body&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// req.write(postData);&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;end&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;baiduRequset&lt;/span&gt;(pageNo&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;pageSize&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;keyword)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; path&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'/s?'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;qs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;ie&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;rsv_bp&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;tn&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'baidu'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;rn&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;pageSize&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;pn&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;pageNo&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;pageSize&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;wd&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;keyword
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    options &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'www.baidu.com'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;'User-Agent'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(options&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(body)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;saveFile&lt;/span&gt;(pageNo&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;keyword&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;body)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;showBaiduResult&lt;/span&gt;(pageNo&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;body)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;数据解释&quot;&gt;数据解释&lt;/h2&gt;
&lt;p&gt;  抓取数据之后，我们需要做的就是调用cheerio，以jquery获取dom内容的方式获取结果，并显示出来，当然也可以保存文件或数据库。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;  &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * 显示结果&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;[type]} pageNo [description]&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;[type]} body   [description]&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; {[type]}        [description]&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;showBaiduResult&lt;/span&gt;(pageNo&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;body)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; title&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;summary&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;link&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        reg&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;[^&amp;lt;&amp;gt;]+&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;gt;/g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        $ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cheerio&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;load&lt;/span&gt;(body&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;decodeEntities&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'#content_left .result'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(i&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; $a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(item).&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'h3 a'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      link &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'href'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      summary&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(item).&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.c-abstract'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(title)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`第&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;pageNo&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;页 第&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;条`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`link: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;link&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;green&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// console.log(`title: ${title}`);&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'title: '&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;ouputColor&lt;/span&gt;(title)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(summary)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;// console.log(`summary: ${summary}`);&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'summary: '&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;at&quot;&gt;ouputColor&lt;/span&gt;(summary)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'------------------------------'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;// 知乎&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;exports&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;zhihuSearch&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(keyword&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;cb)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'https://www.zhihu.com/search?type=content&amp;amp;q='&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;keyword&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(content)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; title&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;summary&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; $ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cheerio&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;load&lt;/span&gt;(content&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;decodeEntities&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;saveFile&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;keyword&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;content)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.list .item'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(i&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        title&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(item).&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.js-title-link'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        summary&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(item).&lt;span class=&quot;at&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.summary'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(title)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;// title=(''+title).replace(/&amp;lt;[^&amp;lt;&amp;gt;]+&amp;gt;/g,'');&lt;/span&gt;
          &lt;span class=&quot;co&quot;&gt;// summary=(''+summary).replace(/&amp;lt;.+&amp;gt;/g,'');&lt;/span&gt;
          &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'title: '&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;at&quot;&gt;ouputColor&lt;/span&gt;(title)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(summary)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'summary: '&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;ouputColor&lt;/span&gt;(summary)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'------------------------------'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;执行爬虫&quot;&gt;执行爬虫&lt;/h2&gt;
&lt;p&gt;功能完成后，先试验一下抓取知乎的内容&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;grab&lt;/span&gt; zh webgl&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;抓取到的html文件保存在download文件夹，同时在命令行显示抓取结果。&lt;br/&gt;&lt;img src=&quot;http://oncse3u6r.bkt.clouddn.com/grab.jpg&quot; width=&quot;800&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果要执行百度的爬虫，运行如下命令行即可&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;grab&lt;/span&gt; bd webgl&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;  这里完成的是最基本的爬虫功能，代码请看&lt;em&gt;&lt;a href=&quot;https://github.com/edwardzhong/net_grab&quot;&gt;net_grab&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 05 Dec 2017 07:42:00 +0000</pubDate>
<dc:creator>Jeff.Zhong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edwardloveyou/p/7987165.html</dc:identifier>
</item>
<item>
<title>Nomad入门 - 杨老板</title>
<link>http://www.cnblogs.com/magic-chenyang/p/7986208.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/magic-chenyang/p/7986208.html</guid>
<description>&lt;p&gt;Nomad是一个管理机器集群并在集群上运行应用程序的工具。&lt;/p&gt;
&lt;p&gt;Nomad的特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持docker,Nomad的job可以使用docker驱动将应用部署到集群中。&lt;/li&gt;
&lt;li&gt;Nomad安装在linux中仅需单一的二进制文件，不需要其他服务协调，Nomad将资源管理器和调度程序的功能集成到一个系统中。&lt;/li&gt;
&lt;li&gt;多数据中心，可以跨数据中心调度。&lt;/li&gt;
&lt;li&gt;分布式高可用，支持多种驱动程序（Docker、VMS、Java）运行job，支持多种系统（Linux、Windows、BSD、OSX）。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;nomad安装&quot;&gt;Nomad安装&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;一般环境下，首先安装Vagrant，利用Vagrant连接本地的Virtualbox，创建本地测试环境。不过由于在学习过程中，本地win7环境缺失了一些组件，导致无法安装并使用Vagrant。&lt;br/&gt;所以直接使用Linux虚拟机来进行学习。本环境使用Ubuntu16.04，Docker version 17.09.0-ce。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol readability=&quot;3&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;下载Nomad二进制文件,选择适合你系统的安装包。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# wget https://releases.hashicorp.com/nomad/0.7.0/nomad_0.7.0_linux_amd64.zip?_ga=2.169483045.503594617.1512349197-1498904827.1511322624&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244041/201712/1244041-20171205110539925-1081843934.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;解压安装包，将Nomad文件放在/usr/local/bin下.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# unzip -o nomad_0.7.0_linux_amd64.zip -d /usr/local/bin/
# cd /usr/local/bin
# chmod +x nomad&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;终端输入nomad，可看到nomad 提示，即安装成功。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244041/201712/1244041-20171205111430972-50869017.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;开始nomad&quot;&gt;开始Nomad&lt;/h2&gt;
&lt;p&gt;为了简单运行，我们以开发模式运行Nomad agent。开发模式可以快速启动server端和client端，测试学习Nomad。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad agent -dev

==&amp;gt; Starting Nomad agent...
==&amp;gt; Nomad agent configuration:

                Client: true
             Log Level: DEBUG
                Region: global (DC: dc1)
                Server: true

==&amp;gt; Nomad agent started! Log data will stream in below:

    [INFO] serf: EventMemberJoin: nomad.global 127.0.0.1
    [INFO] nomad: starting 4 scheduling worker(s) for [service batch _core]
    [INFO] client: using alloc directory /tmp/NomadClient599911093
    [INFO] raft: Node at 127.0.0.1:4647 [Follower] entering Follower state
    [INFO] nomad: adding server nomad.global (Addr: 127.0.0.1:4647) (DC: dc1)
    [WARN] fingerprint.network: Ethtool not found, checking /sys/net speed file
    [WARN] raft: Heartbeat timeout reached, starting election
    [INFO] raft: Node at 127.0.0.1:4647 [Candidate] entering Candidate state
    [DEBUG] raft: Votes needed: 1
    [DEBUG] raft: Vote granted. Tally: 1
    [INFO] raft: Election won. Tally: 1
    [INFO] raft: Node at 127.0.0.1:4647 [Leader] entering Leader state
    [INFO] raft: Disabling EnableSingleNode (bootstrap)
    [DEBUG] raft: Node 127.0.0.1:4647 updated peer set (2): [127.0.0.1:4647]
    [INFO] nomad: cluster leadership acquired
    [DEBUG] client: applied fingerprints [arch cpu host memory storage network]
    [DEBUG] client: available drivers [docker exec java]
    [DEBUG] client: node registration complete
    [DEBUG] client: updated allocations at index 1 (0 allocs)
    [DEBUG] client: allocs: (added 0) (removed 0) (updated 0) (ignore 0)
    [DEBUG] client: state updated to ready&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在终端输出中看到，server和client都为true，表示同时开启了server和client。&lt;/p&gt;
&lt;h3 id=&quot;nomad集群节点&quot;&gt;Nomad集群节点&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# nomad node-status

ID             DC   Name           Class   Drain  Status
fb533fd8  dc1  yc-jumpbox  &amp;lt;none&amp;gt;  false  ready&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出显示了我们的节点ID，它是随机生成的UUID，其数据中心，节点名称，节点类别，漏斗模式和当前状态。我们可以看到我们的节点处于就绪状态。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad server-members

Name                      Address     Port  Status  Leader  Protocol  Build  Datacenter  Region
yc-jumpbox.global  10.30.0.52  4648  alive   true            2         0.7.0  dc1             global&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出显示了我们自己的server，运行的地址，运行状况，一些版本信息以及数据中心和区域。&lt;/p&gt;
&lt;h3 id=&quot;停止nomad-agent&quot;&gt;停止Nomad agent&lt;/h3&gt;
&lt;p&gt;你可以使用Ctrl-C中断agent。默认情况下，所有信号都会导致agent强制关闭。&lt;/p&gt;
&lt;h2 id=&quot;nomad-job&quot;&gt;Nomad Job&lt;/h2&gt;
&lt;p&gt;Job是我们在使用Nomad主要交互的内容。&lt;/p&gt;
&lt;h3 id=&quot;示例job&quot;&gt;示例Job&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;进入你的工作目录使用nomad init命令。它会在当前目录生成一个example.nomad,这是一个示例的nomad job配置文件。
# cd /tmp
# nomad init
Example job file written to example.nomad&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行这个job，我们使用nomad run命令。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad run example.nomad   
==&amp;gt; Monitoring evaluation &quot;13ebb66d&quot;
    Evaluation triggered by job &quot;example&quot;
    Allocation &quot;883269bf&quot; created: node &quot;e42d6f19&quot;, group &quot;cache&quot;
    Evaluation within deployment: &quot;b0a84e74&quot;
    Evaluation status changed: &quot;pending&quot; -&amp;gt; &quot;complete&quot;
==&amp;gt; Evaluation &quot;13ebb66d&quot; finished with status &quot;complete&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看job状态,我们使用nomad status 命令&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad status example
ID            = example
Name          = example
Submit Date   = 12/05/17 10:58:40 UTC
Type          = service
Priority      = 50
Datacenters   = dc1
Status        = running
Periodic      = false
Parameterized = false

Summary
Task Group  Queued  Starting  Running  Failed  Complete  Lost
cache       0       0         1        0       0         0

Latest Deployment
ID          = b0a84e74
Status      = successful
Description = Deployment completed successfully

Deployed
Task Group  Desired  Placed  Healthy  Unhealthy
cache       1        1       1        0

Allocations
ID        Node ID   Task Group  Version  Desired  Status   Created At
883269bf  e42d6f19  cache       0        run      running  12/05/17 10:58:40 UTC&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;检查job的分配情况，我们使用nomad alloc-status命令。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad alloc-status 883269bf
ID                  = 883269bf
Eval ID             = 13ebb66d
Name                = example.cache[0]
Node ID             = e42d6f19
Job ID              = example
Job Version         = 0
Client Status       = running
Client Description  = &amp;lt;none&amp;gt;
Desired Status      = run
Desired Description = &amp;lt;none&amp;gt;
Created At          = 12/05/17 10:58:49 UTC
Deployment ID       = b0a84e74
Deployment Health   = healthy

Task &quot;redis&quot; is &quot;running&quot;
Task Resources
CPU        Memory           Disk     IOPS  Addresses
8/500 MHz  6.3 MiB/256 MiB  300 MiB  0     db: 127.0.0.1:22672

Task Events:
Started At     = 12/05/17 10:58:49 UTC
Finished At    = N/A
Total Restarts = 0
Last Restart   = N/A

Recent Events:
Time                   Type        Description
10/31/17 22:58:49 UTC  Started     Task started by client
10/31/17 22:58:40 UTC  Driver      Downloading image redis:3.2
10/31/17 22:58:40 UTC  Task Setup  Building Task Directory
10/31/17 22:58:40 UTC  Received    Task received by client&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看job日志，我们使用nomad logs 命令。注意logs后面的参数为uuid和task名字。uuid可以通过nomad status example命令得到，task名字在example.nomad配置文件中定义。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad logs 883269bf redis
                 _._
            _.-``__ ''-._
       _.-``    `.  `_.  ''-._           Redis 3.2.1 (00000000/0) 64 bit
   .-`` .-```.  ```\/    _.,_ ''-._
  (    '      ,       .-`  | `,    )     Running in standalone mode
  |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
  |    `-._   `._    /     _.-'    |     PID: 1
   `-._    `-._  `-./  _.-'    _.-'
  |`-._`-._    `-.__.-'    _.-'_.-'|
  |    `-._`-._        _.-'_.-'    |           http://redis.io
   `-._    `-._`-.__.-'_.-'    _.-'
  |`-._`-._    `-.__.-'    _.-'_.-'|
  |    `-._`-._        _.-'_.-'    |
   `-._    `-._`-.__.-'_.-'    _.-'
       `-._    `-.__.-'    _.-'
           `-._        _.-'
               `-.__.-'
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改job&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# vim example.nomad
在文件中找到 count = 1，改为count = 3.
完成修改后，使用nomad plan example.nomad命令
# nomad plan example.nomad
+/- Job: &quot;example&quot;
+/- Task Group: &quot;cache&quot; (2 create, 1 in-place update)
  +/- Count: &quot;1&quot; =&amp;gt; &quot;3&quot; (forces create)
      Task: &quot;redis&quot;

Scheduler dry-run:
- All tasks successfully allocated.

Job Modify Index: 7
To submit the job with version verification run:

nomad run -check-index 7 example.nomad

When running the job with the check-index flag, the job will only be run if the
server side version matches the job modify index returned. If the index has
changed, another user has modified the job and the plan's results are
potentially invalid.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用给出的更新命令去更新job。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad run -check-index 7 example.nomad
==&amp;gt; Monitoring evaluation &quot;93d16471&quot;
    Evaluation triggered by job &quot;example&quot;
    Evaluation within deployment: &quot;0d06e1b6&quot;
    Allocation &quot;3249e320&quot; created: node &quot;e42d6f19&quot;, group &quot;cache&quot;
    Allocation &quot;453b210f&quot; created: node &quot;e42d6f19&quot;, group &quot;cache&quot;
    Allocation &quot;883269bf&quot; modified: node &quot;e42d6f19&quot;, group &quot;cache&quot;
    Evaluation status changed: &quot;pending&quot; -&amp;gt; &quot;complete&quot;
==&amp;gt; Evaluation &quot;93d16471&quot; finished with status &quot;complete&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;停止job，我们使用nomad stop命令。使用nomad status命令可以看到这个job的状态为dead（stopped）。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad stop example
==&amp;gt; Monitoring evaluation &quot;6d4cd6ca&quot;
    Evaluation triggered by job &quot;example&quot;
    Evaluation within deployment: &quot;f4047b3a&quot;
    Evaluation status changed: &quot;pending&quot; -&amp;gt; &quot;complete&quot;
==&amp;gt; Evaluation &quot;6d4cd6ca&quot; finished with status &quot;complete&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;建立简单的nomad集群&quot;&gt;建立简单的Nomad集群&lt;/h3&gt;
&lt;p&gt;Nomad集群分为两部分，server服务端和client客户端。每个区域至少有一台server，建议使用3或者5台server集群。Nomad客户端是一个非常轻量级的进程，它注册主机，执行心跳，并运行由服务器分配给它的任务。代理必须在集群中的每个节点上运行，以便服务器可以将工作分配给这些机器。&lt;/p&gt;
&lt;h4 id=&quot;启动服务器&quot;&gt;启动服务器&lt;/h4&gt;
&lt;p&gt;第一步是为服务器创建配置文件。无论是从下载的文件&lt;a href=&quot;https://github.com/hashicorp/nomad/tree/master/demo/vagrant&quot;&gt;github&lt;/a&gt;，或粘贴到一个名为server.hcl：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim server.hcl
# Increase log verbosity
log_level = &quot;DEBUG&quot;

#setup datacenter
datacenter= &quot;dc1&quot;

# Setup data dir
data_dir = &quot;/tmp/server1&quot;

# Enable the server
server {
enabled = true

# Self-elect, should be 3 or 5 for production
bootstrap_expect = 1}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是一个相当最小的服务器配置文件，但只能以仅服务器方式启动代理，并将其选为leader。应该对生产进行的主要变化是运行多台服务器，并更改相应的bootstrap_expect值。&lt;br/&gt;创建文件后，在新选项卡中启动代理：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ sudo nomad agent -config server.hcl
==&amp;gt; WARNING: Bootstrap mode enabled! Potentially unsafe operation.
==&amp;gt; Starting Nomad agent...
==&amp;gt; Nomad agent configuration:

Client: false
Log Level: DEBUG
Region: global (DC: dc1)
Server: true
Version: 0.6.0

==&amp;gt; Nomad agent started! Log data will stream in below:

[INFO] serf: EventMemberJoin: nomad.global 127.0.0.1
[INFO] nomad: starting 4 scheduling worker(s) for [service batch _core]
[INFO] raft: Node at 127.0.0.1:4647 [Follower] entering Follower state
[INFO] nomad: adding server nomad.global (Addr: 127.0.0.1:4647) (DC: dc1)
[WARN] raft: Heartbeat timeout reached, starting election
[INFO] raft: Node at 127.0.0.1:4647 [Candidate] entering Candidate state
[DEBUG] raft: Votes needed: 1
[DEBUG] raft: Vote granted. Tally: 1
[INFO] raft: Election won. Tally: 1
[INFO] raft: Node at 127.0.0.1:4647 [Leader] entering Leader state
[INFO] nomad: cluster leadership acquired
[INFO] raft: Disabling EnableSingleNode (bootstrap)
[DEBUG] raft: Node 127.0.0.1:4647 updated peer set (2): [127.0.0.1:4647]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以看到，客户端模式被禁用，我们只是作为服务器运行。这意味着该服务器将管理状态并进行调度决策，但不会执行任何任务。现在我们需要一些代理来运行任务！&lt;/p&gt;
&lt;h4 id=&quot;启动客户端&quot;&gt;启动客户端&lt;/h4&gt;
&lt;p&gt;与服务器类似，我们必须先配置客户端。请从&lt;a href=&quot;https://github.com/hashicorp/nomad/tree/master/demo/vagrant&quot;&gt;github&lt;/a&gt;下载client1和client2的配置 ，或将以下内容粘贴到client1.hcl：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Increase log verbosity
log_level = &quot;DEBUG&quot;

# Setup data dir
data_dir = &quot;/tmp/client1&quot;

# Enable the client
client {
enabled = true

# For demo assume we are talking to server1. For production,
# this should be like &quot;nomad.service.consul:4647&quot; and a system
# like Consul used for service discovery.
servers = [&quot;127.0.0.1:4647&quot;]
}

# Modify our port to avoid a collision with server1
ports {
http = 5656
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将该文件复制client2.hcl并更改data_dir为“/tmp/client2 ”并将端口更改为5657.一旦创建了这两个文件，client1.hcl并client2.hcl打开每个选项卡并启动代理程序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# sudo nomad agent -config client1.hcl
==&amp;gt; Starting Nomad agent...
==&amp;gt; Nomad agent configuration:

Client: true
Log Level: DEBUG
Region: global (DC: dc1)
Server: false
Version: 0.6.0

==&amp;gt; Nomad agent started! Log data will stream in below:

[DEBUG] client: applied fingerprints [host memory storage arch cpu]
[DEBUG] client: available drivers [docker exec]
[DEBUG] client: node registration complete
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在输出中，我们可以看到代理仅在客户端模式下运行。该代理将可用于运行任务，但不会参与管理集群或做出调度决策。&lt;br/&gt;使用&lt;a href=&quot;https://www.nomadproject.io/docs/commands/node-status.html/&quot;&gt;node-status&lt;/a&gt;命令 我们应该看到ready状态中的两个节点：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad node-status
ID Datacenter Name Class Drain Status
fca62612 dc1 nomad &amp;lt;none&amp;gt; false ready
c887deef dc1 nomad &amp;lt;none&amp;gt; false ready&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们现在有一个简单的三节点集群运行。演示和完整生产集群之间的唯一区别是，我们运行的是单个服务器，而不是三个或五个。&lt;/p&gt;
&lt;h3 id=&quot;提交工作&quot;&gt;提交工作&lt;/h3&gt;
&lt;p&gt;现在我们有一个简单的集群，我们可以用它来安排一个工作。我们还应该拥有example.nomad之前的作业文件，但是确认count仍然设置为3。&lt;br/&gt;然后，使用&lt;a href=&quot;https://www.nomadproject.io/docs/commands/run.html&quot;&gt;run&lt;/a&gt;命令提交作业：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad init
# nomad run example.nomad
==&amp;gt; Monitoring evaluation &quot;8e0a7cf9&quot;
Evaluation triggered by job &quot;example&quot;
Evaluation within deployment: &quot;0917b771&quot;
Allocation &quot;501154ac&quot; created: node &quot;c887deef&quot;, group &quot;cache&quot;
Allocation &quot;7e2b3900&quot; created: node &quot;fca62612&quot;, group &quot;cache&quot;
Allocation &quot;9c66fcaf&quot; created: node &quot;c887deef&quot;, group &quot;cache&quot;
Evaluation status changed: &quot;pending&quot; -&amp;gt; &quot;complete&quot;
==&amp;gt; Evaluation &quot;8e0a7cf9&quot; finished with status &quot;complete&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以在输出中看到调度程序为其中一个客户机节点分配了两个任务，剩下的任务分配给第二个客户端。&lt;br/&gt;我们可以再次使用&lt;a href=&quot;https://www.nomadproject.io/docs/commands/status.html&quot;&gt;status&lt;/a&gt;命令验证：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# nomad status example
ID = example
Name = example
Submit Date = 07/26/17 16:34:58 UTC
Type = service
Priority = 50
Datacenters = dc1
Status = running
Periodic = false
Parameterized = false

Summary
Task Group Queued Starting Running Failed Complete Lost
cache 0 0 3 0 0 0

Latest Deployment
ID = fc49bd6c
Status = running
Description = Deployment is running

Deployed
Task Group Desired Placed Healthy Unhealthy
cache 3 3 0 0

Allocations
ID Eval ID Node ID Task Group Desired Status Created At
501154ac 8e0a7cf9 c887deef cache run running 08/08/16 21:03:19 CDT
7e2b3900 8e0a7cf9 fca62612 cache run running 08/08/16 21:03:19 CDT
9c66fcaf 8e0a7cf9 c887deef cache run running 08/08/16 21:03:19 CDT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以看到我们的所有任务已经分配并正在运行。一旦我们对我们的工作感到满意，我们就可以把它删掉了&lt;code&gt;nomad stop&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;使用nomad-ui&quot;&gt;使用nomad UI&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;仁者见仁智者见智，我在使用途中，觉得第一种UI是挺好的，可以看到很多细节的内容，相比官方的UI还没有完善更多功能。&lt;br/&gt;目前Nomad0.7版本集成了UI，在0.7版本之前，UI一直没有很好的实现，所以我在github上找到一位大牛的UI作品https://github.com/jippi/hashi-ui。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244041/201712/1244041-20171204100926810-532294969.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244041/201712/1244041-20171204100935060-40270458.png&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;官方ui&quot;&gt;官方UI&lt;/h4&gt;
&lt;ol readability=&quot;-1.2383292383292&quot;&gt;&lt;li&gt;需要在github上下载nomad项目到本地，地址为：&lt;a href=&quot;https://github.com/hashicorp/nomad/tree/master/ui&quot; class=&quot;uri&quot;&gt;https://github.com/hashicorp/nomad/tree/master/ui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;认真阅读README，将Node.js、Yarn、Ember CLI、PhantomJS安装在本地环境中。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# cd ui/
# yarn&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;安装完成后，运行这条命令：ember serve --proxy &lt;a href=&quot;http://10.30.0.52:4646/&quot; class=&quot;uri&quot;&gt;http://10.30.0.52:4646&lt;/a&gt; （10.30.0.52换成你的外网IP，4646换成你自定义的端口），即可在浏览器中查看。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1244041/201712/1244041-20171204152446107-53466644.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;常见问题&quot;&gt;常见问题&lt;/h2&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;服务会运行在127.0.0.1网卡上，外部不能访问？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;建议在运行nomad agent时，命令行配置相应的网卡。例如：
# nomad agent -config server.hcl -bind=0.0.0.0
# nomad agent -config client1.hcl -network-interface=ens160&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;使用docker运行服务时，容器会映射随机端口在本地？&lt;br/&gt;根据研究官方文档，文档中提示了docker会随机映射端口，如果想使用静态端口，可以在job配置文件中定义。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;简单的job配置文件&quot;&gt;简单的job配置文件&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;hello world&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# cat hello.nomad
job &quot;hello1&quot; {
  datacenters = [&quot;dc1&quot;]  #定义数据中心

  group &quot;hello2&quot; {      #组名字
    task &quot;hello3&quot; {      #一般使用服务名字表示task名字
      driver = &quot;docker&quot;     #使用docker驱动

      config {
        image = &quot;hashicorp/http-echo&quot;    #服务镜像名字
        args = [                                        #容器运行时的命令参数
          &quot;-listen&quot;, &quot;:5678&quot;,
          &quot;-text&quot;, &quot;hello world&quot;,
        ]
      }

      resources {                                #配置服务的资源
        network {        
          mbits = 10                            #限制10MB带宽
          port &quot;http&quot; {
            static = &quot;5678&quot;                    #使用静态端口
          }
        }
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;搭建一个redmine，由于我还没弄明白nomad如何像docker-compose一样启动服务，所以mysql只好提前单独运行起来。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;# cat redmine-example.nomad 

job &quot;redmine&quot; {
 
  region = &quot;global&quot;        #设置地区
  datacenters = [&quot;dc1&quot;]    #设置数据中心
  type = &quot;service&quot;            #设置该job类型是服务，主要用于conusl的服务注册，不写这条，该job不会注册服务到consul

  update {
   
    max_parallel = 1                    #同时更新任务数量
    min_healthy_time = &quot;10s&quot;      #分配必须处于健康状态的最低时间，然后标记为正常状态。
    healthy_deadline = &quot;3m&quot;        #标记为健康的截止日期，之后分配自动转换为不健康状态
    auto_revert = false                 #指定job在部署失败时是否应自动恢复到上一个​​稳定job
    canary = 0                              #如果修改job以后导致更新失败，需要创建指定数量的替身，不会停止之前的旧版本，一旦确定替身健康，他们就会提升为正式服务，更新旧版本。
  }

  group &quot;redmine&quot; {
   
    count = 1                        # 启动服务数量
    restart {                
      attempts = 10                #时间间隔内重启次数
      interval = &quot;5m&quot;               #在服务开始运行的持续时间内，如果一直出现故障，则会由mode控制。mode是控制任务在一个时间间隔内失败多次的行为。
      delay = &quot;25s&quot;                 #重新启动任务之前要等待的时间
      mode = &quot;delay&quot;              #指示调度程序延迟下一次重启，直到下一次重启成功。
    }
    ephemeral_disk {             #临时磁盘 MB为单位
      size = 300
    }
   
   task &quot;redmine&quot; {
      
      driver = &quot;docker&quot;
      env {                #环境变量
        REDMINE_DB_MYSQL = &quot;10.30.0.52&quot;
        REDMINE_DB_POSTGRES = &quot;3306&quot;
        REDMINE_DB_PASSWORD = &quot;passwd&quot;
        REDMINE_DB_USER = &quot;root&quot;
        REDMINE_DB_NAME = &quot;redmine&quot;
      }
     
      config {
        image = &quot;redmine:yc&quot;
        port_map {           #指定映射的端口
          re = 3000
        }
      }
      logs {
        max_files     = 10       #日志文件最多数量
        max_file_size = 15    #单个日志文件大小 MB单位
      }     
      resources {
        cpu    = 500 # 500 MHz        #限制服务的cpu，内存，网络
        memory = 256 # 256MB
        network {
          mbits = 10
          port &quot;re&quot; {}          #使用上面配置的映射端口
        }
      }      
      service {
        name = &quot;global-redmine-check&quot;        #健康检查
        tags = [&quot;global&quot;, &quot;redmine&quot;]                
        port = &quot;re&quot;
        check {
          name     = &quot;alive&quot;
          type     = &quot;tcp&quot;
          interval = &quot;10s&quot;
          timeout  = &quot;2s&quot;
        }
      }
  }
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 05 Dec 2017 06:46:00 +0000</pubDate>
<dc:creator>杨老板</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/magic-chenyang/p/7986208.html</dc:identifier>
</item>
<item>
<title>python 抓取金融数据，pandas进行数据分析并可视化 (前言) - BuddyQuan</title>
<link>http://www.cnblogs.com/buddyquan/p/7986225.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buddyquan/p/7986225.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　感觉要总结总结了，希望这次能写个系列文章分享分享心得，和大神们交流交流，提升提升。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因为半桶子水的水平，一直在想&lt;strong&gt;写什么&lt;/strong&gt;，&lt;strong&gt;为什么写&lt;/strong&gt;，&lt;strong&gt;怎么写&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　直到现在找到了一种好的办法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1.写什么 自己手上掌握的，工作中经常用到的，从数据源 到 最后可视化 所有一套流程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　2.为什么写 因为很长一段时间没有进行总结和梳理了，总感觉很多东西很零散，另一方面，写写笔记也是对那些东西的一次巩固。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　3.怎么写 这个问题其实想了很久，后来想通了，就是怎么把工具都放在手上，结合着用起来，按流程走。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　接下来都会这么写：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;1.梳理思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;2.找数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;3.连数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;4.pandas xjb一顿操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;5.可视化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;6.总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;找数据：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　理由：本人之前从事过金融贷款行业的工作，而且现在国家互联网金融行业盛行，找些投资借款数据用来练手还是可行的。&lt;/p&gt;
&lt;p&gt;　　备注：仅是部分样本数据，目的只有一个：练手。&lt;/p&gt;
&lt;p&gt;　　可以这么理解：如果你想练刀工，重点不在于你是切鸡肉还是鸭肉，在于你手上的刀玩得溜不溜，不管是鸡肉，鸭肉还是鹅肉，切好他们的同时让你刀工更加进步。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;连数据：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我用的是 python + pymysql 方式，还有用pandas读取excel，csv，txt文件都是ok的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　python连接数据库有很多人用的是MySQL-python,mysqlclient,peewee或者SQLAlchemy库,也是ok的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　顺便说一下各个库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;MySQL-python&lt;/strong&gt;：又叫 MySQLdb,是用的比较多的一种驱动，基于C开发的库，可是它只支持python2.X，而且在windows平台经常抽风。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;mysqlclient&lt;/strong&gt;：这个据说是django ORM的依赖工具，之后可视化部分我应该也会用到django。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;pymysql&lt;/strong&gt;：这个是纯Python实现的，最大的优点就是安装so easy ，我刚接触python+mysql时，选择了这个，所以就一直用这个库来操作mysql了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;peewee&lt;/strong&gt;：ORM框架，如果对Django的ORM操作很熟悉的话，这个就so_easy了，但是我觉得很麻烦，哈哈哈。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;SQLachemy&lt;/strong&gt; ：这个不错，既支持原生SQL，也支持ORM，pandas操作中会涉及这个。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;pandas xjb一顿操作：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;这也是为什么我要写文章巩固梳理的地方，数据操作重点就在这里。&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;可视化操作：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;可视化（excel，python可视化库，在线制图，以及非常牛逼的highcharts,echarts web交互)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　表比文字好，图比表好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　人要穿衣服，但是衣服也有漂亮和丑之分，如果目的仅仅是穿衣服，那么随便穿，只要掩体就行，可视化也是一个道理，图表有装逼和不装逼之分，关键看你只是达到目的，还是为了更美观。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;excel&lt;/strong&gt;：这个如果是默认的图表确实不够炫酷，但是可以调得非常美观，比如这个还看得过去吧。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1088274/201712/1088274-20171205123016238-1920070655.png&quot; alt=&quot;&quot; width=&quot;267&quot; height=&quot;196&quot;/&gt;&lt;/div&gt;


&lt;span&gt;　　&lt;strong&gt;python可视化库：&lt;/strong&gt;bokeh，matplotlib等等等，都不错，也是得靠手工调才能显逼格的。&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;在线制图：&lt;/strong&gt;我平时用到的，只是为了偷懒，比如用pandas把数据整出来了，要做个云词图，直接百度一个在线云词图工具，数据甩进去就好了，怎么快怎么搞，而且更美观。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1088274/201712/1088274-20171205124223597-1743466137.png&quot; alt=&quot;&quot; width=&quot;302&quot; height=&quot;175&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;highcharts,echarts&lt;/strong&gt;：只能说很牛逼，这个。如果搞web的话，直接用js接入这两个的其中一个就行了，交互式图表，更加符合现代互联网企业的发展。这两个相比较，我更倾向于echarts，但是手上的报表系统是highcharts的，所以highcharts的参数我更熟悉一点，如果真要美观,装逼,高大上的话，还是入手echarts吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://www.hcharts.cn/docs/basic-title&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://echarts.baidu.com/tutorial.html&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1088274/201712/1088274-20171205124608972-825429828.png&quot; alt=&quot;&quot; width=&quot;563&quot; height=&quot;293&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1088274/201712/1088274-20171205124512738-732046946.png&quot; alt=&quot;&quot; width=&quot;571&quot; height=&quot;297&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　介绍了基本情况，下面进入半桶子水时刻，qq1749061919 (欢迎交流，共同进步)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;


</description>
<pubDate>Tue, 05 Dec 2017 04:49:00 +0000</pubDate>
<dc:creator>BuddyQuan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/buddyquan/p/7986225.html</dc:identifier>
</item>
<item>
<title>java二进制相关基础 - 匠心零度</title>
<link>http://www.cnblogs.com/lirenzuo/p/7986239.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lirenzuo/p/7986239.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;转载请注明原创出处，谢谢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;说在前面&quot;&gt;说在前面&lt;/h2&gt;
&lt;blockquote readability=&quot;6.6265060240964&quot;&gt;
&lt;p&gt;之前在&lt;a href=&quot;http://mp.weixin.qq.com/s/KhJea3--4tBAvZtbC6eANQ&quot;&gt;JVM菜鸟进阶高手之路十（基础知识开场白）&lt;/a&gt;的时候简单提到了二进制相关问题，最近在看RocketMQ的源码的时候，发现涉及二进制的内容蛮多，jdk源码里面也是有很多涉及到二进制相关的操作，今天这篇文章仅仅是扫盲篇，后续会介绍灵活运用篇。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;说明&quot;&gt;说明&lt;/h2&gt;
&lt;p&gt;任何东西都有规范，提到JAVA就会提到2个规范，JAVA语言规范、JVM规范。JAVA语言规范主要定义JAVA的语法、变量、类型、文法等等，JVM规范主要定义Class文件类型、运行时数据、帧栈、虚拟机的启动、虚拟机的指令集等等。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JAVA语言规范主要定义什么是JAVA语言。&lt;/li&gt;
&lt;li&gt;JVM规范主要定义JVM内部实现，二进制class文件和JVM指令集等。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;规范中数字的内部表示和存储&quot;&gt;规范中数字的内部表示和存储&lt;/h2&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;JAVA八种基本数据类型：&lt;br/&gt;整形：byte,short,int,long&lt;br/&gt;浮点型：float,double&lt;br/&gt;布尔型：boolean&lt;br/&gt;字符型：char&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;32bit&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;64bit&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;8bit&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;32bit&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;64bit&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;1bit&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;备注：&lt;/strong&gt;1字节=8位(1 byte = 8bit)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-d50d01482f34c309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-ed74fc661754f829.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;整数的表示&quot;&gt;整数的表示&lt;/h2&gt;
&lt;h2 id=&quot;浮点数表示&quot;&gt;浮点数表示&lt;/h2&gt;
&lt;p&gt;在上图中，我们了解到Float与Double都是&lt;strong&gt;支持IEEE 754&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们以float来说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-c2a25545d6c91e96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IEEE754单精度浮点格式共32位，包含三个构成字段：23位小数f，8位偏置指数e，1位符号s。将这些字段连续存放在一个32位字里，并对其进行编码。其中0:22位包含23位的小数f； 23:30位包含8位指数e；第31位包含符号s。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-295ee56c6a5b2718.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一个实数V在IEEE 754标准中可以用V＝(－1)s×M×2E 的形式表示，说明如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;符号s(sign)决定实数是正数(s＝0)还是负数(s＝1)，对数值0的符号位特殊处理。&lt;/li&gt;
&lt;li&gt;有效数字M（significand）是二进制小数，M的取值范围在1≤M＜2或0≤M＜1。&lt;/li&gt;
&lt;li&gt;指数E（exponent）是2的幂，它的作用是对浮点数加权。&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;1位&lt;/td&gt;
&lt;td&gt;8位&lt;/td&gt;
&lt;td&gt;23位&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;例如根据IEEE754，计算11000001000100000000000000000000的单精度浮点的值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解题：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;符号位&lt;/td&gt;
&lt;td&gt;指数&lt;/td&gt;
&lt;td&gt;尾数由于指数不是全部为0 所以小数位附加1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10000010&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1.&lt;/strong&gt;00100000000000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;2^(130-127)&lt;/td&gt;
&lt;td&gt;(2^0 + 2^-3)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt;&lt;br/&gt;-1 * (2^0 + 2^-3) * 2^(130-127) =-9&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同样，你也可以验证一下十进制浮点数0.1的二进制形式是否正确，你会发现，0.1不能表示为有限个二进制位，因此在内存中的表示是舍入(rounding)以后的结果，即 0x3dcccccd, 十进制为0.100000001， 误差0.000000001由此产生了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说到这里&lt;a href=&quot;http://mp.weixin.qq.com/s/KhJea3--4tBAvZtbC6eANQ&quot;&gt;JVM菜鸟进阶高手之路十（基础知识开场白）&lt;/a&gt;的有些问题其实都解答了，所以涉及到钱的小数类型必须使用BigDecimal，禁止使用float和double。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;进制的概念&quot;&gt;进制的概念&lt;/h2&gt;
&lt;p&gt;我们常用的进制有二进制、八进制、十进制和十六进制，十进制是最主要的表达形式。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;二进制是0和1；八进制是0-7；十进制是0-9；十六进制是0-9+A-F（大小写均可）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;位运算符&quot;&gt;位运算符&lt;/h2&gt;
&lt;h3 id=&quot;按位与&quot;&gt;按位与（&amp;amp;）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;两位全为1，结果才为1：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&amp;amp;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;； 
&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&amp;amp;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;； 
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&amp;amp;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;；   
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&amp;amp;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;； &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;用法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;清零：如果想要一个单位清零，那么使其全部二进制为0，只要与一个各位都为零的数值想与，结果为零。&lt;/li&gt;
&lt;li&gt;取一个数中指定位：找一个数，对应X要取的位，该数的对应位为1，其余位为零，此数与X进行“与运算”可以得到X中的指定位。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：设X=1010 1110，取X的低4位，用X &amp;amp; 0000 1111 = 0000 1110 就可以得到。&lt;/p&gt;
&lt;h3 id=&quot;按位或&quot;&gt;按位或（|）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;只要有一个为1，结果就为1：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;|&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;；  
&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;|&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;； 
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;|&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;； 
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;|&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;；&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;用法：&lt;/strong&gt;常用来对一个数据的某些位置1；找到一个数，对应X要置1的位，该数的对应位为1，其余位为零。此数与X相或可使X中的某些位置1。&lt;/p&gt;
&lt;p&gt;例如：将X=1010 0000 的低四位置1，用X | 0000 1111 =1010 1111 就可以得到。&lt;/p&gt;
&lt;h3 id=&quot;异或运算&quot;&gt;异或运算（^）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;两个相应位为“异”（值不同），则该位结果为1，否则为0:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;；
&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;；
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;；
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;；&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;用法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使特定位翻转：找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或就可以得到；&lt;br/&gt;例如：X=1010 1110,使X低4位翻转，用X ^ 0000 1111 = 1010 0001就可以得到&lt;/li&gt;
&lt;li&gt;与0相异或，保留原值&lt;br/&gt;例如：X ^ 0000 0000 = 1010 1110&lt;/li&gt;
&lt;li&gt;两个变量交换值的方法：&lt;br/&gt;1、借助第三个变量来实现： C=A; A=B; B=C;&lt;br/&gt;2、 利用加减法实现两个变量的交换：A=A+B; B=A-B;A=A-B;&lt;br/&gt;3、用位异或运算来实现：利用一个数异或本身等于0和异或运算符合交换律&lt;br/&gt;例如：A = A ^ B; B = A ^ B; A = A ^ B;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;取反运算&quot;&gt;取反运算（~）&lt;/h3&gt;
&lt;p&gt;对于一个二进制数按位取反，即将0变1，1变0： ~1=0; ~0=1;&lt;/p&gt;
&lt;h3 id=&quot;左移运算&quot;&gt;左移运算（&amp;lt;&amp;lt;）&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;将一个运算对象的各二进制位全部左移若干位（左边的二进制丢弃，右边补零）&lt;br/&gt;2&amp;lt;&amp;lt;1 = 4 : 10 &amp;lt;&amp;lt;1 =100=4&lt;/li&gt;
&lt;li&gt;若左移时舍弃的高位不包括1，则每左移一位，相当于该数乘以2。&lt;br/&gt;-14（二进制：1111 0010）&amp;lt;&amp;lt; 2= (1100 1000) （高位包括1，不符合规则）&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;右移运算&quot;&gt;右移运算（&amp;gt;&amp;gt;）&lt;/h3&gt;
&lt;p&gt;将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。操作数每右移一位，相当于该数除以2.&lt;/p&gt;
&lt;p&gt;左补0 or 补1 得看被移数是正还是负。&lt;br/&gt;例：4 &amp;gt;&amp;gt; 2 = 1&lt;br/&gt;例：-14(1111 0010) &amp;gt;&amp;gt; 2 = -4 (1111 1100 )&lt;/p&gt;
&lt;h3 id=&quot;无符号右移运算&quot;&gt;无符号右移运算（&amp;gt;&amp;gt;&amp;gt;）&lt;/h3&gt;
&lt;p&gt;各个位向右移指定的位数。右移后左边突出的位用零来填充。移出右边的位被丢弃&lt;br/&gt;各个位向右移指定的位数。右移后左边突出的位用零来填充。移出右边的位被丢弃&lt;br/&gt;例如： -14&amp;gt;&amp;gt;&amp;gt;2&lt;br/&gt;即-14（1111 1111 1111 1111 1111 1111 1111 0010）&amp;gt;&amp;gt;&amp;gt; 2&lt;br/&gt;=（0011 1111 1111 1111 1111 1111 1111 1100）&lt;br/&gt;= 1073741820&lt;/p&gt;
&lt;h2 id=&quot;java打印整数的二进制表示&quot;&gt;Java打印整数的二进制表示&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;dv&quot;&gt;1120429670&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;; i++) {
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; t = (a &amp;amp; &lt;span class=&quot;bn&quot;&gt;0x80000000&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; i) &amp;gt;&amp;gt;&amp;gt; (&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt; - i);
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;(t);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;0x80000000是数的十六进制表示，转成二进制表示为10000000000000000000000000000000&lt;/li&gt;
&lt;li&gt;运算的优先级，移位运算高于逻辑运算，&amp;gt;&amp;gt;&amp;gt;高于&amp;amp;&lt;/li&gt;
&lt;li&gt;位逻辑与运算 1&amp;amp;1 = 1 ，0&amp;amp;1 = 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;无符号右移，移出部分舍弃，左边位补0；&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;欢迎积极留言讨论关于你在实际运用中了解到二进制的一些优秀实践期待你的留言&quot;&gt;欢迎积极留言讨论关于你在实际运用中了解到二进制的一些优秀实践，期待你的留言！！！&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果读完觉得有收获的话，欢迎点赞、关注、加公众号【匠心零度】。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;个人公众号，欢迎关注，查阅更多精彩历史！！！&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-5f48f1430e958383.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;匠心零度公众号&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 05 Dec 2017 04:13:00 +0000</pubDate>
<dc:creator>匠心零度</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lirenzuo/p/7986239.html</dc:identifier>
</item>
<item>
<title>微信朋友圈：应对春节千亿访问量背后的故事 - 腾讯云社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/7986069.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/7986069.html</guid>
<description>[unable to retrieve full-text content]微信朋友圈包括图片和视频两套业务架构组成，朋友圈图片的特点是请求量大、消耗计算资源较多，视频则主要消耗带宽。朋友圈的数据是永远存储的，而且随着业务的快速发展，存储容量、带宽和设备的消耗大量增加，而重大节日带来的使用量增长，更加剧了消耗，也给运维人员的保障带来了巨大压力。</description>
<pubDate>Tue, 05 Dec 2017 03:34:00 +0000</pubDate>
<dc:creator>腾讯云社区</dc:creator>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/7986069.html</dc:identifier>
</item>
<item>
<title>关于博客园首页发布规则的若干猜测 - DOM哥</title>
<link>http://www.cnblogs.com/iovec/p/7919508.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iovec/p/7919508.html</guid>
<description>[unable to retrieve full-text content]最近经历了一次博文被移出首页事件，一天内连续被怼下来两次，还有谁比我惨，这也让我开始反思自己写作博文方面需要注意的点。</description>
<pubDate>Tue, 05 Dec 2017 03:17:00 +0000</pubDate>
<dc:creator>DOM哥</dc:creator>
<dc:identifier>http://www.cnblogs.com/iovec/p/7919508.html</dc:identifier>
</item>
<item>
<title>[C#]使用Join与GroupJoin将两个集合进行关联与分组 - cnc</title>
<link>http://www.cnblogs.com/cncc/p/7985843.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cncc/p/7985843.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;本文为原创文章、源代码为原创代码，如转载/复制，请在网页/代码处明显位置标明原文名称、作者及网址，谢谢！&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本文使用的开发环境是VS2017及dotNet4.0，写此随笔的目的是给自己及新开发人员作为参考，&lt;/p&gt;

&lt;p&gt;对于Join的用法说明如下：&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public static IEnumerable&amp;lt;TResult&amp;gt; Join&amp;lt;TOuter, TInner, TKey, TResult&amp;gt;(
    this IEnumerable&amp;lt;TOuter&amp;gt; outer,
    IEnumerable&amp;lt;TInner&amp;gt; inner,
    Func&amp;lt;TOuter, TKey&amp;gt; outerKeySelector,
    Func&amp;lt;TInner, TKey&amp;gt; innerKeySelector,
    Func&amp;lt;TOuter, TInner, TResult&amp;gt; resultSelector
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;outer
Type: System.Collections.Generic.IEnumerable&lt;/span&gt;&lt;span&gt;&amp;lt;TOuter&amp;gt;&lt;/span&gt;&lt;span&gt;
要联接的第一个序列。
inner
&lt;/span&gt;Type: System.Collections.Generic.IEnumerabl&lt;span&gt;e&amp;lt;TInner&amp;gt;&lt;/span&gt;
要与第一个序列联接的序列。
outerKeySelector
Type: System.Func&lt;span&gt;&amp;lt;TOuter, TKey&amp;gt;&lt;/span&gt;
用于从第一个序列的每个元素提取联接键的函数。
innerKeySelector
Type: System.Func&lt;span&gt;&amp;lt;TInner, TKey&amp;gt;&lt;/span&gt;
用于从第二个序列的每个元素提取联接键的函数。
resultSelector
Type: System.Func&lt;span&gt;&amp;lt;TOuter, TInner, TResult&amp;gt;&lt;/span&gt;
用于从两个匹配元素创建结果元素的函数。
返回值
Type: System.Collections.Generic.IEnumerabl&lt;span&gt;e&amp;lt;TResult&amp;gt;&lt;/span&gt;
IEnumerable&lt;span&gt;&amp;lt;T&amp;gt;&lt;/span&gt; ，其类型的元素 TResult 通过对两个序列执行内部联接获得的。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数类型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;TOuter
第一个序列中的元素的类型。
TInner
第二个序列中的元素的类型。
TKey
键选择器函数返回的键的类型。
TResult
结果元素的类型。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考链接如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https://msdn.microsoft.com/zh-cn/library/bb534675.aspx
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.enumerable.join?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DZH-CN%26k%3Dk(System.Linq.Enumerable.Join%60%604);k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.0);k(DevLang-csharp)%26rd%3Dtrue&lt;span&gt;&amp;amp;view=n&lt;/span&gt;etframework-4.7.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApp33
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            GroupJoinEx();
        }

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; GroupJoinEx()
        {
            Person p1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;18&lt;/span&gt;&lt;span&gt; };
            Person p2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EFG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;19&lt;/span&gt;&lt;span&gt; };
            Person p3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LMN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;20&lt;/span&gt;&lt;span&gt; };
            Person p4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XYZ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;21&lt;/span&gt;&lt;span&gt; };

            List&lt;/span&gt;&amp;lt;Person&amp;gt; pList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Person&amp;gt;&lt;span&gt; { p1, p2, p3, p4 };

            Department d1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p1 };
            Department d2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p2 };
            Department d3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p1 };
            Department d4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p3 };
            Department d5 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p4 };
            Department d6 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p4 };

            List&lt;/span&gt;&amp;lt;Department&amp;gt; dList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Department&amp;gt;&lt;span&gt; { d1, d2, d3, d4, d5, d6 };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; pList.Join(dList,
                person &lt;/span&gt;=&amp;gt;&lt;span&gt; person,
                department &lt;/span&gt;=&amp;gt;&lt;span&gt; department.Employee,
                (person, &lt;span&gt;&lt;span&gt;department&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;=&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt;
                {
                    Person &lt;/span&gt;=&lt;span&gt; person,
                    &lt;span&gt;&lt;span&gt;Department &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; department&lt;/span&gt;&lt;/span&gt;
                });

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; item1 &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result)
            {
                &lt;strong&gt;&lt;em&gt;Console.Write($&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name:{item1.Person} &amp;amp; Department:{item1.Department} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;);&lt;/em&gt;&lt;/strong&gt;
                Console.WriteLine();
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Name},{Age}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Department
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Person Employee { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/580518/201712/580518-20171205114656519-19437122.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;对于GroupJoin的用法说明如下：&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public static IEnumerable&amp;lt;TResult&amp;gt; GroupJoin&amp;lt;TOuter, TInner, TKey, TResult&amp;gt;(
    this IEnumerable&amp;lt;TOuter&amp;gt; outer,
    IEnumerable&amp;lt;TInner&amp;gt; inner,
    Func&amp;lt;TOuter, TKey&amp;gt; outerKeySelector,
    Func&amp;lt;TInner, TKey&amp;gt; innerKeySelector,
    Func&amp;lt;TOuter, IEnumerable&amp;lt;TInner&amp;gt;, TResult&amp;gt; resultSelector
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;outer
Type: System.Collections.Generic.IEnumerable&lt;/span&gt;&lt;span&gt;&amp;lt;TOuter&amp;gt;&lt;/span&gt;&lt;span&gt;
要联接的第一个序列。
inner
Type: System.Collections.Generic.IEnumerable&lt;/span&gt;&lt;span&gt;&amp;lt;TInner&amp;gt;&lt;/span&gt;&lt;span&gt;
要与第一个序列联接的序列。
outerKeySelector
Type: System.Func&lt;/span&gt;&lt;span&gt;&amp;lt;TOuter, TKey&amp;gt;&lt;/span&gt;&lt;span&gt;
用于从第一个序列的每个元素提取联接键的函数。
innerKeySelector
Type: System.Func&lt;/span&gt;&lt;span&gt;&amp;lt;TInner, TKey&amp;gt;&lt;/span&gt;&lt;span&gt;
用于从第二个序列的每个元素提取联接键的函数。
resultSelector
Type: System.Func&lt;/span&gt;&lt;span&gt;&amp;lt;TOuter, IEnumerable&amp;lt;TInner&amp;gt;&lt;/span&gt;&lt;span&gt;, TResult&amp;gt;
用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。
返回值
Type: System.Collections.Generic.IEnumerable&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TResult&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
IEnumerabl&lt;/span&gt;e&lt;span&gt;&amp;lt;T&amp;gt; &lt;/span&gt;，其中包含类型的元素 TResult 通过对两个序列执行分组的联接获得的。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数类型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;TOuter
第一个序列中的元素的类型。
TInner
第二个序列中的元素的类型。
TKey
键选择器函数返回的键的类型。
TResult
结果元素的类型。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考链接如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https://msdn.microsoft.com/zh-cn/library/bb534297.aspx
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.enumerable.groupjoin?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DZH-CN%26k%3Dk(System.Linq.Enumerable.GroupJoin%60%604);k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.0);k(DevLang-csharp)%26rd%3Dtru&lt;span&gt;e&amp;amp;view=net&lt;/span&gt;framework-4.7.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApp33
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            GroupJoinEx();
        }

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; GroupJoinEx()
        {
            Person p1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;18&lt;/span&gt;&lt;span&gt; };
            Person p2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EFG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;19&lt;/span&gt;&lt;span&gt; };
            Person p3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LMN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;20&lt;/span&gt;&lt;span&gt; };
            Person p4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Person() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XYZ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Age = &lt;span&gt;21&lt;/span&gt;&lt;span&gt; };

            List&lt;/span&gt;&amp;lt;Person&amp;gt; pList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Person&amp;gt;&lt;span&gt; { p1, p2, p3, p4 };

            Department d1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p1 };
            Department d2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p2 };
            Department d3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p1 };
            Department d4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p3 };
            Department d5 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p4 };
            Department d6 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Department() { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Employee =&lt;span&gt; p4 };

            List&lt;/span&gt;&amp;lt;Department&amp;gt; dList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Department&amp;gt;&lt;span&gt; { d1, d2, d3, d4, d5, d6 };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; pList.GroupJoin(dList,
                person &lt;/span&gt;=&amp;gt;&lt;span&gt; person,
                department &lt;/span&gt;=&amp;gt;&lt;span&gt; department.Employee,
                (person, &lt;span&gt;departments&lt;/span&gt;) &lt;/span&gt;=&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt;
                {
                    Person &lt;/span&gt;=&lt;span&gt; person,
                    &lt;span&gt;Department &lt;/span&gt;&lt;/span&gt;&lt;span&gt;= departments.Select(d =&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; d)&lt;/span&gt;
                });

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; item1 &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result)
            {
                &lt;strong&gt;&lt;em&gt;Console.Write($&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name:{item1.Person} &amp;amp; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; item2 &lt;span&gt;in&lt;/span&gt;&lt;span&gt; item1.Department)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(item1.Department.First() ==&lt;span&gt; item2)
                        Console.Write($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Department:{item2} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        Console.Write($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{item2} &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;);
                }&lt;/em&gt;&lt;/strong&gt;
                Console.WriteLine();
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Name},{Age}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Department
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Person Employee { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{Name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/580518/201712/580518-20171205105436159-122996324.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上代码仅在Join与GroupJoin最后一个参数有区别，可以参见红色字体部分，&lt;/p&gt;
&lt;p&gt;并从以上结果来看，Join与GroupJoin的区别一个在于：Join仅仅是将两个结合进行关联，而GroupJoin则会进行分组。&lt;/p&gt;

</description>
<pubDate>Tue, 05 Dec 2017 02:56:00 +0000</pubDate>
<dc:creator>cnc</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cncc/p/7985843.html</dc:identifier>
</item>
<item>
<title>基础技能树-28 接口 - 李永京</title>
<link>http://www.cnblogs.com/lyj/p/foundation_28_interface.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyj/p/foundation_28_interface.html</guid>
<description>[unable to retrieve full-text content]本节内容 - 什么是接口 - 什么是Duck Type - 接口实现方式，方法集与接口 和 接口内部结构 - 接口调用与直接调用的性能差异 - 总结</description>
<pubDate>Tue, 05 Dec 2017 02:46:00 +0000</pubDate>
<dc:creator>李永京</dc:creator>
<dc:identifier>http://www.cnblogs.com/lyj/p/foundation_28_interface.html</dc:identifier>
</item>
<item>
<title>Dubbo源码学习--服务发布（ServiceBean、ServiceConfig） - YGingko</title>
<link>http://www.cnblogs.com/hthuang/p/7985768.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hthuang/p/7985768.html</guid>
<description>[unable to retrieve full-text content]前面讲过 &quot;Dubbo SPI拓展机制&quot; ，通过ExtensionLoader实现可插拔加载拓展，本节将接着分析Dubbo的服务发布过程。 以源码中dubbo demo模块作为切入口一步步走进Dubbo源码。在 模块下配置文件 中定义了服务提供方、注册中心、协议及端口、服务接口等信息，如下： 本人搭</description>
<pubDate>Tue, 05 Dec 2017 02:44:00 +0000</pubDate>
<dc:creator>YGingko</dc:creator>
<dc:identifier>http://www.cnblogs.com/hthuang/p/7985768.html</dc:identifier>
</item>
</channel>
</rss>