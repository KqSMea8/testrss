<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>SpringBoot入门之基于Druid配置Mybatis多数据源 - 社会主义接班人</title>
<link>http://www.cnblogs.com/5ishare/p/9352046.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/5ishare/p/9352046.html</guid>
<description>&lt;p&gt;上一篇了解了Druid进行配置连接池的监控和慢sql处理，这篇了解下使用基于基于Druid配置Mybatis多数据源。SpringBoot默认配置数据库连接信息时只需设置url等属性信息就可以了，SpringBoot就会基于约定根据配置信息实例化对象，但是一般大型的项目都是有多个子系统或者多个数据源组成，那怎么使用SpringBoot进行Mybatis多数据源配置呢？&lt;/p&gt;
&lt;p&gt;一、数据库准备&lt;/p&gt;
&lt;p&gt;我们这里准备使用主从两个数据库来进行演示多数据源配置。一个主库用来写write，一个从库用来读read.至于两个数据库的数据同步问题这里暂时不考虑。两个数据库只是数据库名不一样，主库为mybatis1，从库为mybatis,表结构是一样的。&lt;/p&gt;
&lt;p&gt;主库(write):&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;DATABASE&lt;/span&gt; `mybatis1` &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!40100 DEFAULT CHARACTER SET utf8 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; `&lt;span&gt;user&lt;/span&gt;&lt;span&gt;` (
  `id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `name` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `age` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`id`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从库(read):&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;DATABASE&lt;/span&gt; `mybatis` &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;!40100 DEFAULT CHARACTER SET utf8 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; `&lt;span&gt;user&lt;/span&gt;&lt;span&gt;` (
  `id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `name` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `age` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`id`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二、引入依赖&lt;/p&gt;
&lt;p&gt;这里主要引入mysql数据库、mybatis架构、Druid相关的SpringBoot依赖。下面的是由于要使用jsp显示内容所以也假如了jsp相关的依赖。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_265a4562-575d-490b-b4b9-e332fc3a5a84&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_265a4562-575d-490b-b4b9-e332fc3a5a84&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_265a4562-575d-490b-b4b9-e332fc3a5a84&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;demo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;



        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5 
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.thymeleaf&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;thymeleaf-spring5&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.0.9.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
         &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.tomcat.embed&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;tomcat-embed-jasper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; https://mvnrepository.com/artifact/mysql/mysql-connector-java &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;8.0.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;druid-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.1.10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-configuration-processor&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;三、创建Mapper&lt;/p&gt;
&lt;p&gt;从这里开始就比较坑了，为了写这篇博客昨天搞到夜里两点中，Druid官方介绍的比较少，demo也不是与mybatis相结合，就倒置怎么把mapper与数据源配置对照上也是问题，因为默认单数据源的话，配置下数据源信息以及Mapper就好，但是如果是多数据源那就要手动指定数据源在哪里，怎么和Mapper对照上。&lt;/p&gt;
&lt;p&gt;这里先创建两个Mappe，一个是写的一个是读的。这里要注意的地方是要加上@Mapper注解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733213/201807/733213-20180722231431747-492893700.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ReadUserMapper:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_f3429428-d63f-4a7e-9b4a-c1b98a0acd3f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f3429428-d63f-4a7e-9b4a-c1b98a0acd3f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f3429428-d63f-4a7e-9b4a-c1b98a0acd3f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.read.mapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.model.User;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Delete;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Insert;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Mapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Result;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Results;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Select;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Update;

@Mapper
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt;  ReadUserMapper {

    @Select(&lt;/span&gt;&quot;SELECT name FROM user&quot;&lt;span&gt;)

    @Results({

        @Result(property &lt;/span&gt;= &quot;Name&quot;, column = &quot;name&quot;&lt;span&gt;)

    })

    List&lt;/span&gt;&amp;lt;User&amp;gt;&lt;span&gt; getAll();

    

    @Select(&lt;/span&gt;&quot;SELECT name FROM user WHERE id = #{id}&quot;&lt;span&gt;)

    @Results({

        @Result(property &lt;/span&gt;= &quot;Name&quot;, column = &quot;name&quot;&lt;span&gt;)

    })

    User getOne(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);



    @Insert(&lt;/span&gt;&quot;INSERT INTO user(name,age) VALUES(#{name}, #{age})&quot;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; insert(User user);

    @Update(&lt;/span&gt;&quot;UPDATE user SET name=#{name},age=#{age} WHERE id =#{id}&quot;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; update(User user);

    @Delete(&lt;/span&gt;&quot;DELETE FROM user WHERE id =#{id}&quot;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; delete(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;WriteUserMapper：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_98147c2e-094d-4723-9df4-13bf91e8105f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_98147c2e-094d-4723-9df4-13bf91e8105f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_98147c2e-094d-4723-9df4-13bf91e8105f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.write.mapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Delete;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Insert;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Mapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Result;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Results;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Select;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Update;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; com.example.model.*&lt;span&gt;;

@Mapper
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt;  WriteUserMapper {

    @Select(&lt;/span&gt;&quot;SELECT name FROM user&quot;&lt;span&gt;)

    @Results({

        @Result(property &lt;/span&gt;= &quot;Name&quot;, column = &quot;name&quot;&lt;span&gt;)

    })

    List&lt;/span&gt;&amp;lt;User&amp;gt;&lt;span&gt; getAll();

    @Select(&lt;/span&gt;&quot;SELECT name FROM user WHERE id = #{id}&quot;&lt;span&gt;)

    @Results({

        @Result(property &lt;/span&gt;= &quot;Name&quot;, column = &quot;name&quot;&lt;span&gt;)

    })

    User getOne(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);

    @Insert(&lt;/span&gt;&quot;INSERT INTO user(name,age) VALUES(#{name}, #{age})&quot;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; insert(User user);


    @Update(&lt;/span&gt;&quot;UPDATE user SET name=#{name},age=#{age} WHERE id =#{id}&quot;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; update(User user);


    @Delete(&lt;/span&gt;&quot;DELETE FROM user WHERE id =#{id}&quot;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; delete(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;四、配置数据源&lt;/p&gt;
&lt;p&gt;如果使用SpringBoot默认配置类,可以直接在application.properties中配置就好了,它会自动扫描mapper类与数据源进行关联，但是如果是多个数据源的话，那就需要进行手动配置。这里分别创建了读DataSourceReadConfig、写DataSourceWriteConfig数据源配置类。&lt;/p&gt;
&lt;p&gt;DataSourceWriteConfig:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_7f4cb50a-6aba-42ad-87d8-8c22698a2646&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7f4cb50a-6aba-42ad-87d8-8c22698a2646&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7f4cb50a-6aba-42ad-87d8-8c22698a2646&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.config;



&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.sql.DataSource;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.SqlSessionFactoryBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.SqlSessionTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.annotation.MapperScan;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Qualifier;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.ConfigurationProperties;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Primary;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.jdbc.datasource.DataSourceTransactionManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;

@Configuration
@MapperScan(basePackages &lt;/span&gt;= &quot;com.example.write.mapper&quot;, sqlSessionTemplateRef  = &quot;writeSqlSessionTemplate&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataSourceWriteConfig {
    @Bean(name &lt;/span&gt;= &quot;writeDataSource&quot;&lt;span&gt;)
    @ConfigurationProperties(prefix &lt;/span&gt;= &quot;spring.datasource.druid.write&quot;&lt;span&gt;)
    @Qualifier(&lt;/span&gt;&quot;writeDataSource&quot;&lt;span&gt;)
    @Primary
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DataSource writeDataSource() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DruidDataSourceBuilder.create().build();
    }

    @Bean(name &lt;/span&gt;= &quot;writeSqlSessionFactory&quot;&lt;span&gt;)
    @Primary
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionFactory writeSqlSessionFactory(@Qualifier(&quot;writeDataSource&quot;) DataSource dataSource) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        SqlSessionFactoryBean bean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBean();
        bean.setDataSource(dataSource);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean.getObject();
    }

    @Bean(name &lt;/span&gt;= &quot;writeTransactionManager&quot;&lt;span&gt;)
    @Primary
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DataSourceTransactionManager writeTransactionManager(@Qualifier(&quot;writeDataSource&quot;&lt;span&gt;) DataSource dataSource) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataSourceTransactionManager(dataSource);
    }

    @Bean(name &lt;/span&gt;= &quot;writeSqlSessionTemplate&quot;&lt;span&gt;)
    @Primary
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionTemplate writeSqlSessionTemplate(@Qualifier(&quot;writeSqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionTemplate(sqlSessionFactory);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;DataSourceReadConfig:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_ffe7ea71-6814-4910-923e-7d396325477a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ffe7ea71-6814-4910-923e-7d396325477a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ffe7ea71-6814-4910-923e-7d396325477a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.config;



&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.sql.DataSource;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.session.SqlSessionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.SqlSessionFactoryBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.SqlSessionTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.mybatis.spring.annotation.MapperScan;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Qualifier;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.ConfigurationProperties;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.jdbc.datasource.DataSourceTransactionManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;

@Configuration
@MapperScan(basePackages &lt;/span&gt;= &quot;com.example.read.mapper&quot;, sqlSessionTemplateRef  = &quot;readSqlSessionTemplate&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataSourceReadConfig {
    @Bean(name &lt;/span&gt;= &quot;readDataSource&quot;&lt;span&gt;)
    @ConfigurationProperties(prefix &lt;/span&gt;= &quot;spring.datasource.druid.read&quot;&lt;span&gt;)
    @Qualifier(&lt;/span&gt;&quot;readDataSource&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DataSource readDataSource() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DruidDataSourceBuilder.create().build();
    }
 
    @Bean(name &lt;/span&gt;= &quot;readSqlSessionFactory&quot;&lt;span&gt;)
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionFactory readSqlSessionFactory(@Qualifier(&quot;readDataSource&quot;) DataSource dataSource) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        SqlSessionFactoryBean bean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBean();
        bean.setDataSource((javax.sql.DataSource) dataSource);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean.getObject();
    }

    @Bean(name &lt;/span&gt;= &quot;readTransactionManager&quot;&lt;span&gt;)
   
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DataSourceTransactionManager readTransactionManager(@Qualifier(&quot;readDataSource&quot;&lt;span&gt;) DataSource dataSource) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataSourceTransactionManager(dataSource);
    }

    @Bean(name &lt;/span&gt;= &quot;readSqlSessionTemplate&quot;&lt;span&gt;)
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionTemplate readSqlSessionTemplate(@Qualifier(&quot;readSqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionTemplate(sqlSessionFactory);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 这部分是遇到坑最多的地方，由于Druid官方github上并没有具体参考的demo,看其他的博客又与gitgub介绍的有出入，比如获取配置类中获取DataSource方法中，其他我看使用的是DataSourceBuilder，但Druid GitHub上的是DruidDataSourceBuilder,不知道是不是版本的问题，如果使用DataSourceBuilder，配置多数据库时不起作用。github上也有这句话:Spring Boot 2.X 版本不再支持配置继承，多数据源的话每个数据源的所有配置都需要单独配置，否则配置不会生效。还有就是DataSource引入的包名，我开始引入的并不是import javax.sql.DataSource;这个也是一个坑。&lt;/p&gt;
&lt;p&gt;五、Druid多数据源配置&lt;/p&gt;
&lt;p&gt;这里也遇到了坑，由于在配置数据源类中并未使用DruidDataSourceBuilder，而是使用的DataSourceBuilder，这就导致下面配置的没用，而且在设置数据库url还报错，需要使用jdbc-url.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_8edc8fca-5724-4e3a-b5f5-d8494c88c1ce&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8edc8fca-5724-4e3a-b5f5-d8494c88c1ce&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8edc8fca-5724-4e3a-b5f5-d8494c88c1ce&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring.mvc.view.prefix=/view/

spring.mvc.view.suffix=.jsp
mybatis.type-aliases-package=com.example.model
#mybatis.config-location=classpath:mybatis/mybatis-config.xml
#mybatis.mapper-locations=classpath:mybatis/mapper/*.xml


spring.datasource.druid.read.web-stat-filter.enabled=true
spring.datasource.druid.read.web-stat-filter.url-pattern=/*
spring.datasource.druid.read.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
spring.datasource.druid.read.web-stat-filter.session-stat-enable=true
spring.datasource.druid.read.web-stat-filter.session-stat-max-count=1000
spring.datasource.druid.read.stat-view-servlet.enabled= true
spring.datasource.druid.read.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.read.stat-view-servlet.reset-enable=true
spring.datasource.druid.read.stat-view-servlet.login-username=druid
spring.datasource.druid.read.stat-view-servlet.login-password=123456
spring.datasource.druid.read.stat-view-servlet.allow=127.0.0.1
spring.datasource.druid.read.stat-view-servlet.deny=192.168.0.19
spring.datasource.druid.read.aop-patterns=com.example.read.mapper.*

spring.datasource.druid.read.url =jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true&lt;/span&gt;&lt;span&gt;&amp;amp;characterEncoding&lt;/span&gt;=UTF-8&lt;span&gt;&amp;amp;serverTimezone&lt;/span&gt;&lt;span&gt;=UTC
spring.datasource.druid.read.username = root
spring.datasource.druid.read.password = 123456
spring.datasource.druid.read.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.read.type=com.alibaba.druid.pool.DruidDataSource


spring.datasource.druid.write.max-active=20
spring.datasource.druid.write.initial-size=1
spring.datasource.druid.write.max-wait=60000
spring.datasource.druid.write.pool-prepared-statements=true
spring.datasource.druid.write.max-pool-prepared-statement-per-connection-size=20
spring.datasource.druid.write.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
spring.datasource.druid.write.min-idle=1
spring.datasource.druid.write.time-between-eviction-runs-millis=60000
spring.datasource.druid.write.min-evictable-idle-time-millis=300000
spring.datasource.druid.write.validation-query=select 1 from dual
spring.datasource.druid.write.test-while-idle=true
spring.datasource.druid.write.test-on-borrow=true
spring.datasource.druid.write.test-on-return=true

spring.datasource.druid.write.web-stat-filter.enabled=true
spring.datasource.druid.write.web-stat-filter.url-pattern=/*
spring.datasource.druid.write.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
spring.datasource.druid.write.web-stat-filter.session-stat-enable=true
spring.datasource.druid.write.web-stat-filter.session-stat-max-count=1000
spring.datasource.druid.write.stat-view-servlet.enabled= true
spring.datasource.druid.write.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.write.stat-view-servlet.reset-enable=true
spring.datasource.druid.write.stat-view-servlet.login-username=druid
spring.datasource.druid.write.stat-view-servlet.login-password=123456
spring.datasource.druid.write.stat-view-servlet.allow=127.0.0.1
spring.datasource.druid.write.stat-view-servlet.deny=192.168.0.19
spring.datasource.druid.write.url =jdbc:mysql://127.0.0.1:3306/mybatis1?useUnicode=true&lt;/span&gt;&lt;span&gt;&amp;amp;characterEncoding&lt;/span&gt;=UTF-8&lt;span&gt;&amp;amp;serverTimezone&lt;/span&gt;&lt;span&gt;=UTC
spring.datasource.druid.write.aop-patterns=com.example.write.mapper.*
spring.datasource.druid.write.username = root
spring.datasource.druid.write.password = 123456
spring.datasource.druid.write.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.write.type=com.alibaba.druid.pool.DruidDataSource&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;六、多数据源的使用&lt;/p&gt;
&lt;p&gt;这里并未设置Service层，而是直接在Controller中使用。在Controller中会装配一个写的mapper一个读的mapper,分别进行查询和新增操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_2afce6c8-a315-4726-b460-037e6b3d578b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2afce6c8-a315-4726-b460-037e6b3d578b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2afce6c8-a315-4726-b460-037e6b3d578b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.ui.Model;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMethod;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.model.User;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.read.mapper.ReadUserMapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.write.mapper.WriteUserMapper;

@Controller
@RequestMapping(&lt;/span&gt;&quot;/user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; WriteUserMapper userMapperWrite;
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ReadUserMapper userMapperRead;
    
    @RequestMapping(value &lt;/span&gt;= &quot;/alluser.do&quot;,method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getallusers(Model model) {
       List&lt;/span&gt;&amp;lt;User&amp;gt; users=&lt;span&gt;userMapperRead.getAll();
       model.addAttribute(&lt;/span&gt;&quot;users&quot;&lt;span&gt;, users);
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;userlist&quot;&lt;span&gt;;
    }
    @RequestMapping(value &lt;/span&gt;= &quot;/insert.do&quot;,method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String adduser(Model model) {
       User user&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
       user.setName(&lt;/span&gt;&quot;cuiyw&quot;&lt;span&gt;);
       user.setAge(&lt;/span&gt;27&lt;span&gt;);    
       userMapperWrite.insert(user);
       List&lt;/span&gt;&amp;lt;User&amp;gt; users=&lt;span&gt;userMapperWrite.getAll();
       model.addAttribute(&lt;/span&gt;&quot;users&quot;&lt;span&gt;, users);
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;userlist&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;七、指定数据源配置文件位置&lt;/p&gt;
&lt;p&gt;上面基本把配置信息都配置好了，但是如果这样运行还是会报错误,它还是不能找到这个mapper,此时需要在main方法文件增加注解@ComponentScan(basePackages={&quot;com.example.config&quot;,&quot;com.example.demo&quot;})，让它扫描配置文件的包，然后在配置文件的包里面有配置@MapperScan来查找到mapper。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_d15f8eda-cc30-4e18-bd44-e248adf7a046&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d15f8eda-cc30-4e18-bd44-e248adf7a046&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d15f8eda-cc30-4e18-bd44-e248adf7a046&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.ComponentScan;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@EnableAutoConfiguration(exclude= {DataSourceAutoConfiguration.class})&lt;/span&gt;
&lt;span&gt;
@ComponentScan(basePackages&lt;/span&gt;={&quot;com.example.config&quot;,&quot;com.example.demo&quot;&lt;span&gt;})
@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DemoApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(DemoApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Description:

Field userMapperWrite in com.example.demo.UserController required a bean of type 'com.example.write.mapper.WriteUserMapper' that could not be found.

Action:
Consider defining a bean of type 'com.example.write.mapper.WriteUserMapper' in your configuration.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;八、其他问题&lt;/p&gt;
&lt;p&gt;1.这里还遇到404找不到路径的错误，这里还需要在@ComponentScan注解加上Controller对应的包，所以上面代码有@ComponentScan(basePackages={&quot;com.example.config&quot;,&quot;com.example.demo&quot;})。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
This application has no explicit mapping for /error, so you are seeing this as a fallback.
Sun Jul 22 23:58:27 CST 2018
There was an unexpected error (type=Not Found, status=404).
No message available
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.设置手动配置问题&lt;/p&gt;
&lt;p&gt;由于开始使用的是DataSourceBuilder，但在application.properties还是使用spring.datasource.druid.read这种方法进行配置，并没spring.datasource.url这样配置，导致报下面的错误。因为使用的是DataSourceBuilder所以SpringBoot还是认为用的默认配置，所以就找spring.datasource.url，此时可以使用@EnableAutoConfiguration(exclude= {DataSourceAutoConfiguration.class})注解来设置手动注解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733213/201807/733213-20180723000441062-650016270.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;九、测试&lt;/p&gt;
&lt;p&gt;这里还是分别输入http://localhost:8080/user/alluser.do，http://localhost:8080/user/insert.do，然后查看两个数据库user表的数据是否有没有改变，读数据库数据未变，写数据库数据增加。Druid的数据源监测也是有两条数据源信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733213/201807/733213-20180723001528662-218104908.jpg&quot; alt=&quot;&quot; width=&quot;564&quot; height=&quot;242&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733213/201807/733213-20180723001548326-1754285358.jpg&quot; alt=&quot;&quot; width=&quot;558&quot; height=&quot;240&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 22 Jul 2018 16:16:00 +0000</pubDate>
<dc:creator>社会主义接班人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/5ishare/p/9352046.html</dc:identifier>
</item>
<item>
<title>Faster RCNN 关键点总结 - nowgood</title>
<link>http://www.cnblogs.com/nowgood/p/FasterRCNN.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nowgood/p/FasterRCNN.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233341528-564648507.jpg&quot; alt=&quot;-w379&quot;/&gt;￼&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;RoI&lt;/td&gt;
&lt;td&gt;Region of Interest&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;RPN&lt;/td&gt;
&lt;td&gt;Region Proposal Network&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;FRCN&lt;/td&gt;
&lt;td&gt;Fast RCNN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Faster R-CNN，由两个模块组成:&lt;/p&gt;
&lt;p&gt;第一个模块是深度全卷积网络 RPN，用于 region proposal;&lt;br/&gt;第二个模块是 Fast R-CNN 检测器，它使用了RPN产生的region proposal进行检测。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Faster R-CNN的推导过程如下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.图片经过 RPN 产生anchor boxes&lt;br/&gt;2.anchor boxes 通过 bounding box regressor 调整位置&lt;br/&gt;3.使用 objectness classification 分类器的打分进行 NMS, 减少数量&lt;br/&gt;4.将 region proposal 交给 fast rcnn 检测.&lt;/p&gt;
&lt;h2 id=&quot;frcn&quot;&gt;FRCN&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233347517-739950480.jpg&quot; alt=&quot;-w421&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络输入&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;整张图片&lt;/li&gt;
&lt;li&gt;object proposals(提出矩形图片坐标)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;网络输出&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;N + 1 (N 类物体 + 背景) 类概率分布&lt;/li&gt;
&lt;li&gt;N 个 bounding box 坐标 (category-specific bounding-box regressors)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;目标检测的两大困难&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;有大量的框需要处理,&lt;/li&gt;
&lt;li&gt;而且这些框是不准确的, 需要去微调&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;主要贡献: 简化了 RCNN 训练步骤;&lt;br/&gt;性能: VOC2007/2010, mAP 约为 66.7%;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前向传播&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络首先使用卷积层和最大池化层处理整个图像生成 feature map。 然后，对于每个 object proposal，RoI池化层从 feature map 中提取固定长度的特征向量。每个特征向量被馈送到全连接层，最终输入到两个输出层, 为 (N类+背景类)分类器和 Bounding Box 回归器.&lt;/p&gt;
&lt;h3 id=&quot;roi-pooling-layer&quot;&gt;RoI pooling layer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;RoI定义&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;可以说是最后一个卷积 feature map 上的一个矩形区域, 每个 RoI 由四元组（r，c，h，w）定义，为其左上角(r，c) 及其高度和宽度(h，w);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么 RoI 是如何产生的呢 ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们先来看看 Region Proposal 是什么? 即输入图片上的一个矩形区域, 二者的映射关系, 大约为卷积网络所有的 downsampling strirde 相乘, 将 Region Proposal 映射到最后一个卷积 feature map 上的一个矩形区域上.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么我们获得 RoI 之后, 怎么处理它呢?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就说要这一节的主角啦, RoI 池化层(RoI pooling layer 或 RoI max pooling), 它的作用是将高宽为 h×w RoI 窗口划分为包含 H×W 个大小约 &lt;span class=&quot;math inline&quot;&gt;\(\frac{h}{H}×\frac{w}{W}\)&lt;/span&gt; 的子窗口的网格，然后将每个子窗口中的最大值汇集到相应的输出网格单元中来, 其中 H 和 W 是超参数, 独立于任何特定的 RoI。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;损失函数设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233341212-2132631030.png&quot; alt=&quot;屏幕快照 2018-07-22 下午9.45.13-w413&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233341382-172253537.png&quot; alt=&quot;屏幕快照 2018-07-22 下午9.44.21-w474&quot;/&gt;￼&lt;/p&gt;
&lt;h3 id=&quot;truncated-svd&quot;&gt;Truncated SVD&lt;/h3&gt;
&lt;p&gt;对于图像分类来说，与卷积层相比，计算全连接层所花费的时间很少。而对于检测问题来说，由于要处理的 RoI 的数量很大，并且有近一半的正向传播时间用于计算全连接层。 通过截断的 SVD 压缩, 可以很容易地加速大的全连接层的计算速度。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[W ≈ UΣ_t V^T\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233343337-1441955149.png&quot; alt=&quot;屏幕快照 2018-07-22 下午9.48.34-w413&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scale invariance: to brute force or finesse ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233343174-810612823.png&quot; alt=&quot;屏幕快照 2018-07-22 下午9.51.30-w506&quot;/&gt;￼&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;卷积神经网络的第一层是通用的,任务无关的,所以检测微调时, 不需要考虑第一层, FRCN 从 conv_3 层开始微调&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;rpn-介绍&quot;&gt;RPN 介绍&lt;/h2&gt;
&lt;p&gt;RPN 的提出, 将 region proposal 融入 CNN 网络中, 整个系统是一个单一的，统一的对象检测网络。 具体为使用 RPN 的技术代替之前 Selection Search, 完成 region proposal, 那么 RPN 需要完成两个任务:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;判断 anchors 中是否包含将要检测的 K 类物体(是或者否), 这里只是判断是否包含物体, 而没有判断到底是什么物体, 即 objectness proposal&lt;/li&gt;
&lt;li&gt;提出 anchor 对应的 bounding box 的坐标, 即 region proposal&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;RPN 提出的是在图片上的坐标, 然后通过 RoI 映射投影到最后一层卷积 feature map 上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们说说是训练 RPN 的事, 首先看看 RPN 是什么?&lt;/p&gt;
&lt;h3 id=&quot;rpn-是什么&quot;&gt;RPN 是什么?&lt;/h3&gt;
&lt;p&gt;RPN 输入输出就如下,&lt;/p&gt;
&lt;p&gt;输入: 整张图片&lt;br/&gt;输出: objectness classification + bounding box regression&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(\color{red}{\bf来说说 RPN 中关键概念 \space anchor}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;anchor 其实就是预训练网络卷积层的最后一层 feature map 上的一个像素，以该 anchor 为中心(更确切的说是以 feature map 的尺寸 SxS 分割输入图像为 SxS 个 cell, 将 anchor 对应于相应cell的中心, 然后通过尺寸和宽高比在图像上形成 anchor boxes)，可以生成 k 种 anchor boxes(理解为 region proposal 就好了); 每个 anchor box 对应有一组缩放比例( scale)和宽高比(aspect). 论文中共使用 3 种 scale(128, 256, 512), 3 种 aspect(1:2, 1:1, 2:1), 所以每个 anchor 位置产生 9 个 anchor boxs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233343436-561986825.jpg&quot; alt=&quot;-w938&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为何要提出 anchor呢?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;来说说 anchor 的优点: 它只依赖与单个 scale 的 images 和 feature map, 滑动窗口也只使用一个尺寸的 filter. 不过却能解决 multiple scales and sizes的问题.&lt;/p&gt;
&lt;p&gt;为何选择 128 ,256, 512? 论文中用到的网络如 ZFNet 在最后一层卷积层的 feature map 上的一个像素的感受野就有 171(&lt;a href=&quot;http://www.cnblogs.com/nowgood/p/receptionfield.html&quot;&gt;如何计算感受野看这里&lt;/a&gt;), filter size 3x3, 3x171=513. 而且论文中提到: 我们的算法允许比底层接受域更大的预测。 这样的预测并非不可能 - 如果只有对象的中间部分是可见的，那么仍然可以大致推断出对象的范围。&lt;/p&gt;
&lt;p&gt;在预训练网络卷积层的最后一层 feature map 上进行 3x3 的卷积, anchor 就位于卷积核的中心位置.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;记住这里 anchor boxes 坐标对应的就是在图片上的坐标, 而不是在最后一层卷积层 feature map 上的坐标.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;anchor box 这么简单粗暴, 为什么有效?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;列举了这么多, 相当于穷举了吧, 比如论文中所说,由于最后一层的全局 stride 为16, 那么100x600 的图片就能生成大约 60x40x9≈20000个 anchor boxes). 当然列举了这么多 anchor boxes, 这region proposal 也太粗糙啊, 总不能就这样把这么多的质量层次不齐 anchor boxes 都送给 Fast R-CNN来检测吧. 那该怎么剔除质量不好的呢? 这就是后面 RPN 的 bounding box regression 和 objectness classification 要解决的事情:)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有必要先说说 RPN 的 objectness classification 和 bounding box regression 有什么用?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一句话就是 &quot;少生优育&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;bounding box regression: 调整输入的 anchor boxer 的坐标, 使它更接近真实值, 就是一个 bbox regression, 输出称为 RPN proposal, 或者 RoIs. 提高 anchor boxer 的质量&lt;/p&gt;
&lt;p&gt;objectness classification: 一些 RPN proposal(anchor boxer经过)可能相互重叠度很高, 为了减少冗余, 通过objectness classification的输出的分数score 对这些RPN proposal做 NMS(non-maximum suppression), 论文中设置threshold 为 0.7, 只保留 threshold &amp;lt; 0.7 的RPN proposal, 减少 anchor boxes 的数量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RPN 的任务是什么?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;训练 RPN 网络来选择那些比较好的 anchor boxes.&lt;/p&gt;
&lt;p&gt;因为现在我们要训练 RPN, 我们只提出了 anchor boxer, 却不知道这些 anchor boxes是不是包含物体, 就是没有标签啊! 那么问题来了? objectness classification 分类时没有标签啊. 怎么办?&lt;/p&gt;
&lt;p&gt;办法就是使用 image 检测用 gt-bbox(ground-truth bounding box), 注意这里我们只是检测图片中有没有物体, 而不判断是哪一类物体.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;positive anchors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与任意 gt-box 的 IoU &amp;gt; 0.7, 或者具有最大 IoU, 即标记为1, 就是包含物体, 当然该 gt-box 就是 anchor boxes bounding box regression任务对应的标签&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;negative anchors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与任意 gt-box 的 IoU &amp;lt; 0.3, 即标记为 negative anchor, 标记为0, 就是不包含物体, 是背景, 从后面的损失函数知道, 背景不参与回归损失函数.&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;IoU 位于 positive anchors, negative anchors 之间 anchor boxer 背景和物体掺杂, 的对于训练目标没有贡献, 不使用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;bounding-box-regression-objectness-classification&quot;&gt;bounding box regression &amp;amp;&amp;amp; objectness classification&lt;/h3&gt;
&lt;p&gt;注意一点, 每个 regressor 只负责一个 &amp;lt;scale, aspect&amp;gt;, 不与它 regressor共享权重, 所以需要训练 k 个 regressor.&lt;/p&gt;
&lt;p&gt;其他不多说, 只贴贴公式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233341354-987416119.png&quot; alt=&quot;屏幕快照 2018-04-03 上午11.34.03-w437&quot;/&gt;￼&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233341203-1841149878.png&quot; alt=&quot;屏幕快照 2018-04-03 上午11.37.49-w361&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233341419-498286274.png&quot; alt=&quot;屏幕快照 2018-04-03 上午11.34.13-w446&quot;/&gt;￼&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(p^*_i\)&lt;/span&gt; 为一个 batch 中的第 i 个 anchor box 的真实标签, &lt;span class=&quot;math inline&quot;&gt;\(p_i\)&lt;/span&gt; 为分类器预测概率, 如果是positive anchor, &lt;span class=&quot;math inline&quot;&gt;\(P_i^*\)&lt;/span&gt;为1, 否则为0.&lt;/li&gt;
&lt;li&gt;$L_{reg}(t_i, t_i^&lt;em&gt;) = smooth_{L1}(t_i-t_i^&lt;/em&gt;), $&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(p^*_iL_{reg}\)&lt;/span&gt; 表示regression loss 只会被 positive anchor 激活.&lt;/li&gt;
&lt;li&gt;anchor boxes 的坐标表示为 (x, y, w ,h), (x, y) 为 box 的中心坐标.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;math inline&quot;&gt;\(x,\space x_a, \space x^*\)&lt;/span&gt; 分别代表 bbox regressor 的预测坐标, anchor box 的坐标, 和 anchor box 对应的 gt-box 坐标.&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;训练&quot;&gt;训练&lt;/h3&gt;
&lt;p&gt;交替训练: 在这个解决方案中，我们首先训练 RPN，并使用这些 proposal 来训练 Fast R-CNN。 由 Fast R-CNN 调节的网络然后用于初始化 RPN，并且该过程被重复。&lt;br/&gt;细节:&lt;/p&gt;
&lt;p&gt;re-size image 最短边为 600 像素&lt;br/&gt;total stride for ZFNet, VGGNet 16 pixels&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨图像边缘的 anchor boxes 处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;跨越图像边界的 anchor boxes 需要小心处理。 在训练期间，忽略了所有的跨界 anchor boxes，所以他们不会影响损失函数。 对于典型的1000×600图像，总共将有大约20000个（≈60×40×9）anchor boxes。 在忽略跨界锚点的情况下，每个图像有大约 6000 个 anchor boxes 用于训练。 如果跨界异常值在训练中不被忽略，它们会引入大的难以纠正误差项的，并且训练不会收敛。 然而，在测试过程中，我们仍然将完全卷积RPN应用于整个图像。 这可能会生成跨边界anchor boxes，我们将其剪切到图像边界(即将坐标限制在图片坐标内)。&lt;/p&gt;
&lt;h3 id=&quot;一些实验总结&quot;&gt;一些实验总结&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233343627-899709592.png&quot; alt=&quot;屏幕快照 2018-04-03 下午2.45.17-w867&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;RPN+FRCN( ZFNet), mAP=59.9&lt;br/&gt;RPN+FRCN( VGGNet), mAP=69.9&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Faster RCNN 使用 RPN 代替 SS 进行 region proposal, 极大的加快了检测速度, RPN 提出region proposal 的时间相比较 SS 来说,(1.5s -&amp;gt; 0.01s). 而且性能还要更好&lt;/li&gt;
&lt;li&gt;NMS 不会降低检测性能. 通过 NMS 得到 300 个 proposal的测试mAP为 55.1%, 使用top-ranked 6000个 proposal的mAP为 55.2%, 从而说明经过NMS之后的 top ranked proposal都是很精确的.&lt;/li&gt;
&lt;li&gt;移除 RPN 的 classification(cls) 的话(自然没法做 NMS, NMS 就是依据cls 来做的), 当 proposal 很少时, 精确率下降很大, N = 100时, mAP 为44.6%, 这说明了cls 越高的 proposal 的准确性越高.&lt;/li&gt;
&lt;li&gt;移除 RPN 的 bbox regression(reg)的话, mAP 下降到 52.1% 说明了多 scale, 多 aspect 的 anchor boxes 并不足以应对精确检测, regressed box bounds 可以产生高质量的 proposals&lt;/li&gt;
&lt;li&gt;对于超参 scale, aspect 敏感性如下&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1182370/201807/1182370-20180722233342438-1220116453.png&quot; alt=&quot;屏幕快照 2018-04-03 下午2.54.06-w420&quot;/&gt;￼&lt;/p&gt;
</description>
<pubDate>Sun, 22 Jul 2018 16:12:00 +0000</pubDate>
<dc:creator>nowgood</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nowgood/p/FasterRCNN.html</dc:identifier>
</item>
<item>
<title>JAVAEE——宜立方商城04：图片服务器FastDFS、富文本编辑器KindEditor、商品添加功能完成 - kent鹏</title>
<link>http://www.cnblogs.com/xieyupeng/p/9352164.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyupeng/p/9352164.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1、图片上传&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;a) &lt;span&gt;图片服务器&lt;/span&gt;FastDFS&lt;/p&gt;
&lt;p&gt;b) 图片上传功能实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、&lt;span&gt;富文本编辑器的使用&lt;/span&gt;KindEditor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、商品添加功能完成&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;1、存储空间可扩展。&lt;/p&gt;
&lt;p&gt;2、提供一个统一的访问方式。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;FastDFS&lt;span&gt;，分布式文件系统。存储空间可以横向扩展，可以实现服务器的高可用。支持每个节点有备份机。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2.1. &lt;span&gt;什么是&lt;/span&gt;FastDFS&lt;span&gt;？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;FastDFS&lt;span&gt;是用&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;语言编写的一款开源的分布式文件系统。&lt;/span&gt;&lt;span&gt;FastDFS&lt;/span&gt;&lt;span&gt;为互联网量身定制，&lt;/span&gt;&lt;span&gt;充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标&lt;/span&gt;&lt;span&gt;，使用&lt;/span&gt;FastDFS&lt;span&gt;很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2.2. FastDFS&lt;span&gt;架构&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;FastDFS&lt;span&gt;架构包括&lt;/span&gt; &lt;span&gt;Tracker server&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;Storage server&lt;/span&gt;&lt;span&gt;。客户端请求&lt;/span&gt;&lt;span&gt;Tracker server&lt;/span&gt;&lt;span&gt;进行文件上传、下载，通过&lt;/span&gt;&lt;span&gt;Tracker server&lt;/span&gt;&lt;span&gt;调度最终由&lt;/span&gt;&lt;span&gt;Storage server&lt;/span&gt;&lt;span&gt;完成文件上传和下载。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Tracker server&lt;span&gt;作用是负载均衡和调度，通过&lt;/span&gt;&lt;span&gt;Tracker server&lt;/span&gt;&lt;span&gt;在文件上传时可以根据一些策略找到&lt;/span&gt;&lt;span&gt;Storage server&lt;/span&gt;&lt;span&gt;提供文件上传服务。可以将&lt;/span&gt;&lt;span&gt;tracker&lt;/span&gt;&lt;span&gt;称为追踪服务器或调度服务器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Storage server&lt;span&gt;作用是文件存储，客户端上传的文件最终存储在&lt;/span&gt;&lt;span&gt;Storage&lt;/span&gt;&lt;span&gt;服务器上，&lt;/span&gt;&lt;span&gt;Storage server&lt;/span&gt;&lt;span&gt;没有实现自己的文件系统而是利用操作系统 的文件系统来管理文件。可以将&lt;/span&gt;&lt;span&gt;storage&lt;/span&gt;&lt;span&gt;称为存储服务器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235123178-1146413187.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;服务端两个角色：&lt;/p&gt;
&lt;p&gt;Tracker&lt;span&gt;：管理集群，&lt;/span&gt;&lt;span&gt;tracker&lt;/span&gt;&lt;span&gt;也可以实现集群。每个&lt;/span&gt;&lt;span&gt;tracker&lt;/span&gt;&lt;span&gt;节点地位平等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;收集&lt;/span&gt;Storage&lt;span&gt;集群的状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Storage&lt;span&gt;：实际保存文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Storage&lt;span&gt;分为多个组，每个组之间保存的文件是不同的。每个组内部可以有多个成员，组成员内部保存的内容是一样的，组成员的地位是一致的，没有主从的概念。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2.3. 文件上传的流程&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235151032-193750668.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;客户端上传文件后&lt;/span&gt;&lt;span&gt;存储服务器&lt;/span&gt;&lt;span&gt;将&lt;/span&gt;&lt;span&gt;文件&lt;/span&gt;ID&lt;span&gt;返回给客户端，此文件&lt;/span&gt;ID&lt;span&gt;用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235155907-138171977.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p class=&quot;16&quot;&gt;n &lt;span&gt;组名：文件上传后所在的&lt;/span&gt;storage&lt;span&gt;组名称，在文件上传成功后有&lt;/span&gt;storage&lt;span&gt;服务器返回，需要客户端自行保存。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n &lt;span&gt;虚拟磁盘路径：&lt;/span&gt;storage&lt;span&gt;配置的虚拟路径，与磁盘选项&lt;/span&gt;store_path*&lt;span&gt;对应。如果配置了&lt;/span&gt;&lt;span&gt;store_path0&lt;/span&gt;&lt;span&gt;则是&lt;/span&gt;&lt;span&gt;M00&lt;/span&gt;&lt;span&gt;，如果配置了&lt;/span&gt;&lt;span&gt;store_path1&lt;/span&gt;&lt;span&gt;则是&lt;/span&gt;&lt;span&gt;M01&lt;/span&gt;&lt;span&gt;，以此类推。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 数据两级目录：storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n &lt;span&gt;文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器&lt;/span&gt;IP&lt;span&gt;地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2.4. 文件下载&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235200844-948990028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;2.5. &lt;span&gt;最简单的&lt;/span&gt;FastDFS&lt;span&gt;架构&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235206038-1551833378.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;3.1. 安装步骤&lt;/h2&gt;
&lt;p&gt;第一步：把图片服务器解压缩。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235211686-2019782575.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;第二步：把图片服务器添加到&lt;/span&gt;Vmware&lt;span&gt;中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三步：&lt;/span&gt;Vmware&lt;span&gt;的网络配置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235215876-904293325.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;第四步：开机&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235220660-1612980138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;移动：网络配置不发生变化。要使用图片服务器，需要保证网络配置不变。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;复制：重新生成一块网卡&lt;/span&gt;mac&lt;span&gt;地址是新地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Ip&lt;span&gt;地址：&lt;/span&gt;&lt;span&gt;192.168.25.133&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用户名&lt;/span&gt;root&lt;span&gt;、&lt;/span&gt;&lt;span&gt;itcast&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;密码：&lt;/span&gt;itcast&lt;/p&gt;

&lt;h2&gt;4.1. Java&lt;span&gt;客户端：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235227443-1272522055.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Maven&lt;span&gt;环境：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235238368-1976497229.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4.2. 上传图片&lt;/h2&gt;
&lt;h3&gt;4.2.1. 上传步骤&lt;/h3&gt;
&lt;p&gt;1、&lt;span&gt;加载配置文件，配置文件中的内容就是&lt;/span&gt;tracker&lt;span&gt;服务的地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置文件内容：&lt;/span&gt;tracker_server=192.168.25.133:22122&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;创建一个&lt;/span&gt;TrackerClient&lt;span&gt;对象。直接&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;一个。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;使用&lt;/span&gt;TrackerClient&lt;span&gt;对象创建连接，获得一个&lt;/span&gt;&lt;span&gt;TrackerServer&lt;/span&gt;&lt;span&gt;对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;span&gt;创建一个&lt;/span&gt;StorageServer&lt;span&gt;的引用，值为&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;span&gt;创建一个&lt;/span&gt;StorageClient&lt;span&gt;对象，需要两个参数&lt;/span&gt;&lt;span&gt;TrackerServer&lt;/span&gt;&lt;span&gt;对象、&lt;/span&gt;&lt;span&gt;StorageServer&lt;/span&gt;&lt;span&gt;的引用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;span&gt;使用&lt;/span&gt;StorageClient&lt;span&gt;对象上传图片。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;7、返回数组。包含组名和图片的路径。&lt;/p&gt;

&lt;h3&gt;4.2.2. 代码&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FastDFSTest {

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFileUpload() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、加载配置文件，配置文件中的内容就是tracker服务的地址。&lt;/span&gt;
        ClientGlobal.init(&quot;D:/workspaces-itcast/e3-manager-web/src/main/resources/resource/client.conf&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、创建一个TrackerClient对象。直接new一个。&lt;/span&gt;
        TrackerClient trackerClient = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TrackerClient();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、使用TrackerClient对象创建连接，获得一个TrackerServer对象。&lt;/span&gt;
        TrackerServer trackerServer =&lt;span&gt; trackerClient.getConnection();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、创建一个StorageServer的引用，值为null&lt;/span&gt;
        StorageServer storageServer = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、创建一个StorageClient对象，需要两个参数TrackerServer对象、StorageServer的引用&lt;/span&gt;
        StorageClient storageClient = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StorageClient(trackerServer, storageServer);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、使用StorageClient对象上传图片。
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;扩展名不带“.”&lt;/span&gt;
        String[] strings = storageClient.upload_file(&quot;D:/Documents/Pictures/images/200811281555127886.jpg&quot;, &quot;jpg&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 7、返回数组。包含组名和图片的路径。&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String string : strings) {
            System.out.println(string);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.3. 使用工具类上传&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;因为全路径包含了扩展名所以可以不指定，但是如果传字节数组就要指定扩展名。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testFastDfsClient() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        FastDFSClient fastDFSClient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FastDFSClient(&quot;D:/workspaces-itcast/e3-manager-web/src/main/resources/resource/client.conf&quot;&lt;span&gt;);
        String file &lt;/span&gt;= fastDFSClient.uploadFile(&quot;D:/Documents/Pictures/images/2f2eb938943d.jpg&quot;&lt;span&gt;);
        System.out.println(file);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;5. &lt;/span&gt;&lt;strong&gt;图片上传功能&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;5.1. 功能分析&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235324027-1719466536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235330321-1783013237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235333332-1110854632.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235337145-58359331.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;使用的是&lt;/span&gt;KindEditor&lt;span&gt;的多图片上传插件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;KindEditor 4.x &lt;span&gt;文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kindeditor.net/doc.php&quot;&gt;&lt;span&gt;http://kindeditor.net/doc.php&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/pic/upload&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数：&lt;/span&gt;MultiPartFile uploadFile&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235349143-60668114.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;可以创建一个&lt;/span&gt;pojo&lt;span&gt;对应返回值。可以使用&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1&lt;span&gt;、接收页面传递的图片信息&lt;/span&gt;&lt;span&gt;uploadFile&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2&lt;span&gt;、把图片上传到图片服务器。使用封装的工具类实现。需要取文件的内容和扩展名。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3&lt;span&gt;、图片服务器返回图片的&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4&lt;span&gt;、将图片的&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;补充完整，返回一个完整的&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5&lt;span&gt;、把返回结果封装到一个&lt;/span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;span&gt;对象中返回。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;1、&lt;span&gt;需要把&lt;/span&gt;commons-io&lt;span&gt;、&lt;/span&gt;&lt;span&gt;fileupload&lt;/span&gt; &lt;span&gt;的&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;span&gt;包添加到工程中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、配置多媒体解析器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 定义文件上传解析器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;multipartResolver&quot;&lt;/span&gt;&lt;span&gt;
        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设定默认编码 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultEncoding&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设定文件上传的最大值5MB，5*1024*1024 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxUploadSize&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;5242880&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;5.2. Controller&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PictureController {
    
    @Value(&lt;/span&gt;&quot;${IMAGE_SERVER_URL}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String IMAGE_SERVER_URL;

    @RequestMapping(&lt;/span&gt;&quot;/pic/upload&quot;&lt;span&gt;)
    @ResponseBody
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Map fileUpload(MultipartFile uploadFile) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、取文件的扩展名&lt;/span&gt;
            String originalFilename =&lt;span&gt; uploadFile.getOriginalFilename();
            String extName &lt;/span&gt;= originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;) + 1&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、创建一个FastDFS的客户端&lt;/span&gt;
            FastDFSClient fastDFSClient = &lt;span&gt;new&lt;/span&gt; FastDFSClient(&quot;classpath:resource/client.conf&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、执行上传处理&lt;/span&gt;
            String path =&lt;span&gt; fastDFSClient.uploadFile(uploadFile.getBytes(), extName);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、拼接返回的url和ip地址，拼装成完整的url&lt;/span&gt;
            String url = IMAGE_SERVER_URL +&lt;span&gt; path;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、返回map&lt;/span&gt;
            Map result = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            result.put(&lt;/span&gt;&quot;error&quot;, 0&lt;span&gt;);
            result.put(&lt;/span&gt;&quot;url&quot;&lt;span&gt;, url);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、返回map&lt;/span&gt;
            Map result = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            result.put(&lt;/span&gt;&quot;error&quot;, 1&lt;span&gt;);
            result.put(&lt;/span&gt;&quot;message&quot;, &quot;图片上传失败&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;5.3. 解决浏览器兼容性的问题&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;KindEditor&lt;span&gt;的图片上传插件，对浏览器兼容性不好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;@ResponseBody&lt;span&gt;注解返回&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;对象，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Content-Type:application/json;charset=UTF-8&lt;/p&gt;

&lt;p&gt;返回字符串时：&lt;/p&gt;
&lt;p&gt;Content-Type:text/plan;charset=UTF-8&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235448391-135760998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;指定响应结果的&lt;/span&gt;content-type&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235452149-395820995.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;KindEditor&lt;span&gt;的多图片上传插件最后响应的&lt;/span&gt;&lt;span&gt;content-type&lt;/span&gt;&lt;span&gt;是&lt;/span&gt;&lt;span&gt;text/plan&lt;/span&gt;&lt;span&gt;格式的&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;字符串。兼容性是最好的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235455618-1859496904.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;6.1. 富文本编辑器介绍&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201807/1135185-20180722235501661-1495357170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;KindEditor&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kindeditor.net/&quot;&gt;&lt;strong&gt;&lt;span&gt;http://kindeditor.net/&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UEditor&lt;span&gt;：百度编辑器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ueditor.baidu.com/website/&quot;&gt;&lt;span&gt;http://ueditor.baidu.com/website/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CKEditor&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ckeditor.com/&quot;&gt;&lt;span&gt;http://ckeditor.com/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;纯&lt;/span&gt;js&lt;span&gt;开发，跟后台语言没有关系。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;6.2. 使用方法&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;第一步：在&lt;/span&gt;jsp&lt;span&gt;中引入&lt;/span&gt;&lt;span&gt;KindEditor&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;css&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;span&gt;代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二步：在表单中添加一个&lt;/span&gt;textarea&lt;span&gt;控件。是一个富文本编辑器的载体。类似数据源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第三步：初始化富文本编辑器。使用官方提供的方法初始化。&lt;/p&gt;
&lt;p&gt;第四步：取富文本编辑器的内容。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;表单提交之前，把富文本编辑器的内容同步到&lt;/span&gt;textarea&lt;span&gt;控件中。&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;7.1. 功能分析&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/item/save&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数：表单的数据。可以使用&lt;/span&gt;pojo&lt;span&gt;接收表单的数据，要求&lt;/span&gt;&lt;span&gt;pojo&lt;/span&gt;&lt;span&gt;的属性和&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;属性要一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;TbItem&lt;span&gt;对象接收表单的数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;TbItem item,String desc&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;Json&lt;span&gt;数据。应该包含一个&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;的属性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以使用E3Result&lt;span&gt;，放到&lt;/span&gt;e3-common&lt;span&gt;中。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;生成商品&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;实现方案：&lt;/p&gt;
&lt;p&gt;a) Uuid&lt;span&gt;，字符串，不推荐使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;b) &lt;span&gt;数值类型，不重复。日期&lt;/span&gt;+&lt;span&gt;时间&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;随机数&lt;/span&gt;&lt;span&gt;20160402151333123123&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;c) &lt;span&gt;可以直接去毫秒值&lt;/span&gt;+&lt;span&gt;随机数。可以使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;d) &lt;span&gt;使用&lt;/span&gt;redis&lt;span&gt;。&lt;/span&gt;&lt;span&gt;Incr&lt;/span&gt;&lt;span&gt;。推荐使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;IDUtils&lt;span&gt;生成商品&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;补全&lt;/span&gt;TbItem&lt;span&gt;对象的属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、向商品表插入数据&lt;/p&gt;
&lt;p&gt;4、&lt;span&gt;创建一个&lt;/span&gt;TbItemDesc&lt;span&gt;对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;span&gt;补全&lt;/span&gt;TbItemDesc&lt;span&gt;的属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;6、向商品描述表插入数据&lt;/p&gt;
&lt;p&gt;7、E3Result.ok()&lt;/p&gt;

&lt;h2&gt;7.2. Dao&lt;span&gt;层&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;向&lt;/span&gt;tb_item, tb_item_desc&lt;span&gt;表中插入数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以使用逆向工程&lt;/p&gt;

&lt;h2&gt;7.3. Service&lt;span&gt;层&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;参数：&lt;/span&gt;TbItem item,String desc&lt;/p&gt;
&lt;p&gt;业务逻辑：略，参加上面&lt;/p&gt;
&lt;p&gt;返回值：E3Result&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; E3Result addItem(TbItem item, String desc) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、生成商品id&lt;/span&gt;
        &lt;span&gt;long&lt;/span&gt; itemId =&lt;span&gt; IDUtils.genItemId();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、补全TbItem对象的属性&lt;/span&gt;
&lt;span&gt;        item.setId(itemId);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;商品状态，1-正常，2-下架，3-删除&lt;/span&gt;
        item.setStatus((&lt;span&gt;byte&lt;/span&gt;) 1&lt;span&gt;);
        Date date &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
        item.setCreated(date);
        item.setUpdated(date);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、向商品表插入数据&lt;/span&gt;
&lt;span&gt;        itemMapper.insert(item);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、创建一个TbItemDesc对象&lt;/span&gt;
        TbItemDesc itemDesc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TbItemDesc();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、补全TbItemDesc的属性&lt;/span&gt;
&lt;span&gt;        itemDesc.setItemId(itemId);
        itemDesc.setItemDesc(desc);
        itemDesc.setCreated(date);
        itemDesc.setUpdated(date);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、向商品描述表插入数据&lt;/span&gt;
&lt;span&gt;        itemDescMapper.insert(itemDesc);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 7、E3Result.ok()&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; E3Result.ok();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;发布服务 &lt;/p&gt;

&lt;h2&gt;7.4. 表现层&lt;/h2&gt;
&lt;p&gt;引用服务&lt;/p&gt;

&lt;h3&gt;7.4.1. Controller&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/item/save&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数：&lt;/span&gt;TbItem item,String desc&lt;/p&gt;
&lt;p&gt;返回值：E3Result&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
@RequestMapping(value = &quot;/save&quot;,method =&lt;span&gt; RequestMethod.POST)
    @ResponseBody
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; E3Result saveItem(TbItem item, String desc) {
        E3Result result &lt;/span&gt;=&lt;span&gt; itemService.addItem(item, desc);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;7.5. 作业&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;商品修改、商品删除、上架下架。&lt;/p&gt;

</description>
<pubDate>Sun, 22 Jul 2018 15:56:00 +0000</pubDate>
<dc:creator>kent鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyupeng/p/9352164.html</dc:identifier>
</item>
<item>
<title>go 利用orm简单实现接口分布式锁 - 熔遁丶螺旋手里剑</title>
<link>http://www.cnblogs.com/baiyb/p/9352018.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baiyb/p/9352018.html</guid>
<description>&lt;p&gt;&lt;span&gt;在开发中有些敏感接口，例如用户余额提现接口，需要考虑在并发情况下接口是否会发生问题。如果用户将自己的多条提现请求同时发送到服务器，代码能否扛得住呢？一旦没做锁，那么就真的会给用户多次提现，给公司带来损失。我来简单介绍一下在这种接口开发过程中，我的做法。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;第一阶段:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们使用的orm为xorm，提现表对应的结构体如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
type Participating struct {
        ID      uint          `xorm:&quot;autoincr id&quot; json:&quot;id,omitempty&quot;`
        Openid  string        `xorm:&quot;openid&quot; json:&quot;openid&quot;`
        Hit     uint          `xorm:&quot;hit&quot; json:&quot;hit&quot;`
        Orderid string        `xorm:&quot;order_id&quot; json:&quot;order_id&quot;`
        Redpack uint          `xorm:&quot;redpack&quot; json:&quot;redpack&quot;`
        Status  uint          `xorm:&quot;status&quot; json:&quot;status&quot;`
        Ctime   tool.JsonTime `xorm:&quot;ctime&quot; json:&quot;ctime,omitempty&quot;`
        Utime   tool.JsonTime `xorm:&quot;utime&quot; json:&quot;utime,omitempty&quot;`
        PayTime tool.JsonTime `xorm:&quot;pay_time&quot; json:&quot;pay_time,omitempty&quot;`
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在Participating表中，是以Openid去重的，当一个Openid对应的Hit为1时，可以按照Redpack的数额提现，成功后将Status改为1，简单来说这就是提现接口的业务逻辑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;起初我并没有太在意并发的问题，我在MySQL的提现表中设置一个字段status来记录提现状态，我只是在提现时将状态修改为2(体现中)，提现完成后将status修改为1(已提现)。然后事实证明，我太天真了，用ab做了测试1s发送了1000个请求到服务器，结果。。。成功提现了6次。部分代码如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
p_info := &amp;amp;Participating{}&lt;br/&gt;// 查找具体提现数额
has, _ := db.Dalmore.Where(&quot;openid = ? and hit = 1 and status = 0&quot;, openid).Get(p_info)
if !has {
        resp.Error(errcode.NO_REDPACK_FOUND, nil, nil)
        return
}

// 改status为提现中
p_info.Status = 2
db.Dalmore.Cols(&quot;status&quot;).Where(&quot;openid = ? and hit = 1 and status = 0&quot;, openid).Update(p_info)

// 提现p_info.Redpack
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二阶段：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;既然出现了并发问题，那第一反应肯定的加锁啊，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
type Set struct {
        m map[string]bool
        sync.RWMutex
}

func New() *Set {
        return &amp;amp;Set{
                m: map[string]bool{},
        }
}

var nodelock = set.New()

// 加锁
nodelock.Lock()

p_info := &amp;amp;Participating{}
// 查找具体提现数额
has, _ := db.Dalmore.Where(&quot;openid = ? and hit = 1 and status = 0&quot;, openid).Get(p_info)
if !has {
        resp.Error(errcode.NO_REDPACK_FOUND, nil, nil)
        return
}

// 改status为提现中
p_info.Status = 2
db.Dalmore.Cols(&quot;status&quot;).Where(&quot;openid = ? and hit = 1 and status = 0&quot;, openid).Update(p_info)

// 释放锁
nodelock.Unlock()

// 提现p_info.Redpack
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;加了锁以后。。。emem，允许多次提现的问题解决了，但是这个锁限制的范围太多了，直接让这段加锁代码变成串行，这大大降低了接口性能。而且，一旦部署多个服务端，这个锁又会出现多次提现的问题，因为他只能拦住这一个服务的并发。看来得搞一个不影响性能的分布式才是王道啊。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;第三阶段：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;利用redis，设置一个key为openid的分布式锁，并设置一个过期时间可以解决当前的这个问题。但是难道就没别的办法了吗？当然是有的，golang的xorm中Update函数其实是有返回值的：num,err，我就是利用num做了个分布式锁。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:go;gutter:true;&quot;&gt;
//记录update修改条数
num, err := db.Dalmore.Cols(&quot;status&quot;).Where(&quot;openid = ? and status = 0 and hit = 1&quot;, openid).Update(p_update)
if err != nil {
        logger.Runtime().Debug(map[string]interface{}{&quot;error&quot;: err.Error()}, &quot;error while updating&quot;)
        resp.Error(errcode.INTERNAL_ERROR, nil, nil)
        return
}

// 查看update操作到底修改了多少条数据，起到了分布式锁的作用
if num != 1 {
        resp.Error(errcode.NO_REDPACK_FOUND, nil, nil)
        return
}

p_info := &amp;amp;Participating{}
_, err := db.Dalmore.Where(&quot;openid = ? and status = 2&quot;, openid).Get(p_info)
if err != nil {
        logger.Runtime().Debug(map[string]interface{}{&quot;error&quot;: err.Error()}, &quot;error while selecting&quot;)
        resp.Error(errcode.INTERNAL_ERROR, nil, nil)
        return
}

// 提现p_info.Redpack
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;其实有点投机取巧的意思，利用xorm的Update函数，我们将核对并发处理请求下数据准确性的问题抛给了MySQL，毕竟MySQL是经过千锤百炼的。再用ab测试，嗯，锁成功了只有，只提现了一次，大功告成～&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;希望对大家有所帮助，祝大家每天开心～&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 22 Jul 2018 15:22:00 +0000</pubDate>
<dc:creator>熔遁丶螺旋手里剑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baiyb/p/9352018.html</dc:identifier>
</item>
<item>
<title>golang 重构博客统计服务 - haifeiWu</title>
<link>http://www.cnblogs.com/haifeiWu/p/9351976.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haifeiWu/p/9351976.html</guid>
<description>&lt;p&gt;欢迎关注楼主与他的小伙伴们的小站，每周分享一些技术文章，让我们在技术上一起成长------&amp;gt; &lt;a href=&quot;http://www.hchstudio.cn/&quot; title=&quot;戳这里，欢迎光临小站 -_-&quot;&gt;戳这里，欢迎光临小站 -_-&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作为一个后端开发，在docker，etcd，k8s等新技术不断涌现的今天，其背后的功臣golang在语言排行榜上持续走高，因此楼主也就开了这次使用golang自己开发的基础功能的二次装逼之旅。&lt;br/&gt;&lt;/p&gt;
&lt;h2 id=&quot;源于spring-boot&quot;&gt;源于Spring Boot&lt;/h2&gt;
&lt;p&gt;感兴趣的小伙伴可以看看楼主的上一篇，基于Spring Boot实现的功能，请移步&lt;a href=&quot;http://www.hchstudio.cn/article/2018/6f25/&quot; title=&quot;使用Spring Boot实现博客统计服务&quot;&gt;使用Spring Boot实现博客统计服务&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现redis存储逻辑&quot;&gt;实现redis存储逻辑&lt;/h2&gt;
&lt;p&gt;选择redis而没选择数据库的原因是redis提供了丰富的数据结构与数据持久化策略，另外redis是基于内存的，相对于数据库来说，快了不止一个数量级。而统计阅读次数的场景对接口处理的速度还是有一定的要求的，因此楼主选择了redis作为阅读次数统计的db。&lt;br/&gt;下面就是redis操作的基础代码，比较简单楼主贴一下代码，不做进一步的阐述。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;redigo依赖下载&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;go get github.com/gomodule/redigo/redis&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;redis操作的工具类&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;func initRedisPool() {
    // 建立连接池
    RedisClient = &amp;amp;redis.Pool{
        // 从配置文件获取maxidle以及maxactive，取不到则用后面的默认值
        MaxIdle:     1,
        MaxActive:   10,
        IdleTimeout: 180 * time.Second,
        Dial: func() (redis.Conn, error) {
            c, err := redis.Dial(&quot;tcp&quot;, RedisAddress)
            if err != nil {
                return nil, err
            }
            // 选择db
            c.Do(&quot;SELECT&quot;, RedisDb)
            return c, nil
        },
    }
}

/**
 * 设置redis的对应key的value
 */
func redisSet(key string, value string) {
    c, err := RedisClient.Dial()
    if err != nil {
        fmt.Println(&quot;Connect to redis error&quot;, err)
        return
    }
    _, err = c.Do(&quot;SET&quot;, key, value)
    if err != nil {
        fmt.Println(&quot;redis set failed:&quot;, err)
    }
}

/**
 * 获取redis的对应key的value
 */
func redisGet(key string) (value string) {
    c, err := RedisClient.Dial()
    if err != nil {
        fmt.Println(&quot;Connect to redis error&quot;, err)
        return
    }
    val, err := redis.String(c.Do(&quot;GET&quot;, key))
    if err != nil {
        fmt.Println(&quot;redis get failed:&quot;, err)
        return &quot;&quot;
    } else {
        fmt.Printf(&quot;Got value is %v \n&quot;, val)
        return val
    }
}

/**
 * redis使得对应的key的值自增
 */
func redisIncr(key string) (value string) {
    c, err := RedisClient.Dial()
    _, err = c.Do(&quot;INCR&quot;, key)
    if err != nil {
        fmt.Println(&quot;incr error&quot;, err.Error())
    }

    incr, err := redis.String(c.Do(&quot;GET&quot;, key))
    if err == nil {
        fmt.Println(&quot;redis key after incr is : &quot;, incr)
    }
    return incr
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;博客阅读次数统计接口实现&quot;&gt;博客阅读次数统计接口实现&lt;/h2&gt;
&lt;p&gt;博客阅读次数统计的基本业务逻辑就是，对应每篇博客的blogId作为redis的key，而访问次数就是这个key所对应的value，每访问一次该接口就要将对应的blogId自增一次，并返回对应的value。这里楼主选择的redis的数据结构是redis的Stirng，下面是楼主实现该逻辑的主要代码：&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;
package main

import (
    &quot;encoding/json&quot;
    &quot;fmt&quot;
    &quot;github.com/garyburd/redigo/redis&quot;
    &quot;log&quot;
    &quot;net/http&quot;
    &quot;time&quot;
    &quot;strings&quot;
)

const RedisAddress = &quot;127.0.0.1:6379&quot;
const RedisDb = 0

const AllowRequestUrlH = &quot;*&quot;
const  AllowRequestUrlW = &quot;*&quot;
const  IllegalCharacters = &quot;?&quot;
const  DefaultReadCount = &quot;1&quot;

var (
    // 定义常量
    RedisClient *redis.Pool
)

func main() {
    // 初始化redis连接池
    initRedisPool()

    // 启动web服务监听
    http.HandleFunc(&quot;/*-*/*/&quot;, blogReadCountIncr)       //设置访问的路由
    err := http.ListenAndServe(&quot;:9401&quot;, nil) //设置监听的端口
    if err != nil {
        log.Fatal(&quot;ListenAndServe: &quot;, err)
    }
}

func blogReadCountIncr(responseWriter http.ResponseWriter, request *http.Request) {

    // 解析参数，默认不解析
    request.ParseForm()

    blogId := request.Form.Get(&quot;blogId&quot;)

    log.Println(&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; method blogReadCountIncr exec , request params is : &quot;,blogId)

    // 判断请求参数是否为空
    if &quot;&quot; == blogId {
        result := ResultCode{
            Code: 200,
            Msg:  &quot;success&quot;,
        }

        ret, _ := json.Marshal(result)
        fmt.Fprintf(responseWriter, string(ret)) //这个写入到w的是输出到客户端的
    }
    
    readCount := redisGet(blogId)
    if &quot;&quot; == readCount {
        // 不符合规则，直接返回
        flag := strings.Index(blogId, AllowRequestUrlH) != 0 ||strings.Index(blogId, AllowRequestUrlW) != 0||strings.Contains(blogId, IllegalCharacters)
        if  !flag {
            result := ResultCode{
                Code: 200,
                Msg:  &quot;success&quot;,
            }

            ret, _ := json.Marshal(result)
            fmt.Fprintf(responseWriter, string(ret)) //这个写入到w的是输出到客户端的
        }

        redisSet(blogId, DefaultReadCount)
        readCount = DefaultReadCount
    } else {
        readCount = redisIncr(blogId)
    }
    log.Println(&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; readCount is : &quot;,readCount)
    result := ResultCode{
        Code: 200,
        Msg:  &quot;success&quot;,
        Data: readCount,
    }
    ret, _ := json.Marshal(result)
    fmt.Fprintf(responseWriter, string(ret)) //这个写入到w的是输出到客户端的
}
// 结构体定义返回值
type ResultCode struct {
    Msg  string `json:&quot;msg&quot;`
    Code int    `json:&quot;code&quot;`
    Data string `json:&quot;data&quot;`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;实现过程中遇到的坑&quot;&gt;实现过程中遇到的坑&lt;/h2&gt;
&lt;h3 id=&quot;出现的问题&quot;&gt;出现的问题&lt;/h3&gt;
&lt;p&gt;使用golang原生的json工具序列化时，出现序列化失败的问题，如下所示的结构体定义，乍一看是没啥问题的，然而使用&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;ret, _ := json.Marshal(result)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;序列化时，出现无法序列化成json串的问题，另外还不报错，这让楼主很是头疼。&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;type ResultCode struct {
    msg  string `json:&quot;msg&quot;`
    code int    `json:&quot;code&quot;`
    data string `json:&quot;data&quot;`
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;问题解决&quot;&gt;问题解决&lt;/h3&gt;
&lt;p&gt;最终楼主通过各种姿势的排查，发现是结构体定义有问题，当定义结构体时首字母必须大写才能序列化成功，这个特点在golang里面很是明显，在函数调用时首字母小写的函数在其他文件里面是调不到的。下面给出正确的结构体定义&lt;/p&gt;
&lt;pre class=&quot;go&quot;&gt;
&lt;code&gt;type ResultCode struct {
    Msg  string `json:&quot;msg&quot;`
    Code int    `json:&quot;code&quot;`
    Data string `json:&quot;data&quot;`
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;目前很多大佬都写过关于golang web的教程，如有雷同，请略过不看，本文通过自己的亲身实战以及楼主自己踩到的坑完成的，另外本文是基于go内置的&lt;strong&gt;net/http&lt;/strong&gt;库实现的web服务。&lt;/p&gt;
&lt;h2 id=&quot;号外&quot;&gt;号外&lt;/h2&gt;
&lt;p&gt;楼主造了一个轮子，LIGHTCONF 是一个基于Netty实现的一个配置管理平台，其核心设计目标是“为业务提供统一的配置管理服务”，可以做到开箱即用。感兴趣的给个star支持一下。&lt;/p&gt;
</description>
<pubDate>Sun, 22 Jul 2018 15:14:00 +0000</pubDate>
<dc:creator>haifeiWu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haifeiWu/p/9351976.html</dc:identifier>
</item>
<item>
<title>Hystrix降级逻辑中如何获取触发的异常 - 程序猿DD</title>
<link>http://www.cnblogs.com/didispace/p/9351981.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/didispace/p/9351981.html</guid>
<description>&lt;p&gt;通过之前Spring Cloud系列教程中的&lt;a href=&quot;http://blog.didispace.com/spring-cloud-starter-dalston-4-1/&quot;&gt;《Spring Cloud构建微服务架构：服务容错保护（Hystrix服务降级）》&lt;/a&gt;一文，我们已经知道如何通过Hystrix来保护自己的服务不被外部依赖方拖垮的情况。但是实际使用过程中经常碰到开发反应“莫名”触发了降级逻辑的情况。为了更精准的定位触发原因，或是在降级逻辑中需要根据不同的异常做不同的处理时，在降级方法中，我们希望可以获取到主逻辑中抛出的异常信息。接下来就来介绍一下Hystrix两种不同实现方式中如何在降级逻辑中获取异常信息的方法。&lt;/p&gt;
&lt;h3 id=&quot;注解方式&quot;&gt;注解方式&lt;/h3&gt;
&lt;p&gt;先介绍一下用注解方式定义的Hystrix命令是如何在降级逻辑中获取异常的，实现非常简单，先看下面的例子：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@HystrixCommand(fallbackMethod = &quot;fallback&quot;)
User getUserById(String id) {
    throw new RuntimeException(&quot;getUserById command failed&quot;);
}

User fallback(String id, Throwable throwable) {
    return new User(&quot;def&quot;, &quot;def&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里定义了一个主逻辑函数&lt;code&gt;getUserById&lt;/code&gt;，主逻辑中会主动抛出一个异常，从而触发该主逻辑的降级函数&lt;code&gt;fallback&lt;/code&gt;。重点看&lt;code&gt;fallback&lt;/code&gt;函数中的最后一个传参&lt;code&gt;Throwable throwable&lt;/code&gt;。通过这样的简单定义，开发人员就可以很方便的获取触发降级逻辑的异常信息，用作日志记录或者其它复杂的业务逻辑了。&lt;/p&gt;
&lt;h3 id=&quot;继承方式&quot;&gt;继承方式&lt;/h3&gt;
&lt;p&gt;在继承方式中要获取触发异常也非常简单，具体如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static class UserCommand extends HystrixCommand&amp;lt;User&amp;gt; {

    protected UserCommand() {
        super(HystrixCommandGroupKey.Factory.asKey(&quot;UserCommand&quot;));
    }

    @Override
    protected User run() throws Exception {
        throw new RuntimeException(&quot;getUserById command failed&quot;);
    }

    @Override
    protected User getFallback() {
        System.out.println(getFailedExecutionException().getMessage());
        return new User(&quot;def&quot;, &quot;def&quot;);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的实现同上一节注解方式的实现一样，在使用继承方式的时候通过&lt;code&gt;getFailedExecutionException&lt;/code&gt;方法就可以获取到触发降级的异常信息了。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;我们在实际使用Hystrix的时候，有时候一些业务异常或者内部RPC由服务提供方抛出的异常在消费方没能考虑周到，会触发一些意料之外的降级。所以在降级逻辑中，建议每一段都加入触发异常的日志记录，以方便定位问题原因。&lt;/p&gt;
&lt;h4 id=&quot;以下专题教程也许您会有兴趣&quot;&gt;以下专题教程也许您会有兴趣&lt;/h4&gt;
</description>
<pubDate>Sun, 22 Jul 2018 15:14:00 +0000</pubDate>
<dc:creator>程序猿DD</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/didispace/p/9351981.html</dc:identifier>
</item>
<item>
<title>【原创】一个安卓程序媛的人生经验 - 孤独烟</title>
<link>http://www.cnblogs.com/rjzheng/p/9351626.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rjzheng/p/9351626.html</guid>
<description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;博主有一个差不多认识了9年的程序媛朋友，从09年读大一开始认识的，现在已经毕业五年，所以相识是九年。目前她就职于网龙、是一个做安卓组件开发的程序媛，&lt;strong&gt;已婚&lt;/strong&gt;。本文基本上反应了她的心酸血泪史，经其同意，整理成文。为了方便描述，下面的第一人称&quot;我&quot;指的就是该妹纸本人。&lt;/p&gt;
&lt;h2 id=&quot;糊里糊涂的大学生涯&quot;&gt;糊里糊涂的大学生涯&lt;/h2&gt;
&lt;p&gt;高考毕业后，也不知道自己的兴趣是啥，稀里糊涂的报了一个专业，最后阴差阳错的来了一个电子类专业。来了这个专业后，发现了一个现象。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;大部分就读工科专业的妹纸，都是瞎选的，要么就是调剂。基本上，对本专业都缺乏一个了解。而且大部分抱着一个混学历的心态来读，都不知道自己将来要做什么&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(博主ps：博主明白强迫自己学一个自己不敢兴趣的科目是件多无聊的事情。所以针对这个现象，并不是很排斥，毕竟有些人的家境，并不需要太努力的奋斗。)&lt;/p&gt;
&lt;p&gt;大一上，无外乎就是一些公共课什么的，计算机一级考的是一些关于word、excel等操作，和编程没有什么关系。所以严格算起来，第一次接触到编程，是在大一下学期的C语言课程。非常有意思的是，没接触过编程的我，最后计算机二级考试居然考了满分。当时，我就明白，我在编程方面有着一种天赋，起码不会排斥。&lt;br/&gt;俗话说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;兴趣是最好的老师&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对编程有兴趣的我，本来应该在这个领域继续深造。然而在大二和大三并没有接触到其他语言，因此水平一直停滞不前。或许你会说，你可以去自学啊。这里要说一下，我在大学期间的性格是属于一种&lt;strong&gt;需要外界给予一定压力和指导，才会去学习。&lt;/strong&gt; 换句话说，如果当初大一下的C语言不需要参加计算机二级考试，我就不会那么努力学习，不会发现自己在编程方面的天赋。因此大二和大三，仅仅满足于上课所传授的知识，沉溺于奖学金的优越感之中。&lt;br/&gt;转眼间到了大四，那会是12年。记得11年的时候，NOKIA的塞班机基本上已经退出市场，android那会的火热程度就和现在的微服务一样，于是当时就想着毕业从事一个和android开发相关的工作。由于自己性格的原因，选了一个android的项目作为自己的毕业设计。前面也说了，我需要一定压力来逼迫自己，才会有动力去做。所以在自己没有任何JAVA基础的情况下，选android项目作为自己的毕业设计，也是希望逼迫自己学有所成。这里有一点需要注意，&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;自学过程中最大的敌人，就是寂寞&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坦白说，在学习过程中，不止一次怕来不及，怕做不出来毕设，怕毕不了业，不止一次动过要去某宝买一个的念头。而且一个人默默的学习，遇到不会的，容易浮躁。当时只有一个信念,我一定能做出来。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;当一个人的心中有着更高的山峰想去攀登时,他就不会在意脚下的泥沼,他才可能用最平静的方式去面对一般人难以承受的痛苦&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后的结果就是，我做出来了，是一个支持各种格式的手机端阅读器。有意思的是，这个项目当时拿到了优秀毕业设计。也因为这个项目找到了工作。(大家想想，面试的时候，直接掏出手机晒自己的项目，比简历上写一堆经验有意义的多了。)&lt;/p&gt;
&lt;h2 id=&quot;懵懵懂懂的工作生涯&quot;&gt;懵懵懂懂的工作生涯&lt;/h2&gt;
&lt;p&gt;工作时第一家公司，是一家创业小公司，做的是影城里头的那种，订票的APP。这里有几条经验其实需要和大家进行分享。&lt;br/&gt;千万不要有如下想法&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;因为我是女生，所以我编程水平不好也很正常。&lt;br/&gt;我是安卓端的，不懂后端知识也没关系&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坦白说，我很讨厌女生有这种想法。人一旦有了这种想法，就给自己套上了一层枷锁，无法发挥出自己的潜力。我们必须承认一点，人都是有惰性的。而且经常会给自己的懒惰，找寻各种各样的合理的理由。比如，把这个电视剧看完，再开始学习，等等。总之，你只要给自己找了一个这样的理由，每次你偷懒的时候，都会以这种理由给自己洗脑。从此，技术水平止步不前，它会成为你不思进取的借口。&lt;br/&gt;或许正是因为，自己没有给自己套上这层枷锁，在毕业后的一年内努力学习，于是跳槽进入了网龙。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;女程序员在工作过程中，受到优待。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网上有一个图很出名，如下所示&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1248587/o_nvchengxuyuan.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个情况在工作中，确实还是存在的。其实可能是因为开发行业，男生比较多的原因，女生会受到优待一些。基本上女程序员遇到问题，一些男程序员会加班给你调BUG，当然加班程度取决于颜值。至于男程序员们遇到问题，那就真的只能靠自己了。但是，大家要注意&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;一些能百度到的问题，就不要去咨询同事&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里就不得不说了，有些同事，特别是女同事吧。反正总爱问一些，比如环境怎么搭建这种问题。坦白说，这些问题，你问出去了，只会耽误老员工的时间。人家脾气好，跟你说。遇到一些脾气差的，索性就直接不理你了。总之，予人方便就是予己方便。像一些业务上的知识就是可以去问老员工，千万不要去问一些什么语法啊、环境搭建的问题。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;做好自己的职业规划&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;男生和女生还是存在着很大的体力差距的，这个不得不承认。包括在很多长辈眼里，都是觉得:&quot;女生嘛，找一个轻松的工作，将来嫁人就好了。&quot;&lt;br/&gt;这里我想说的是在当程序员的时候，还是要保持一种学习的热情。就我来说，目前还是这种学习的热情还是没有褪去。如果一旦发现自己的学习热情褪去，就可以思考一下自己是否能在开发的路上走的更远，是不是做管理会更合适呢？不过，不可否认，肯定会有一些直男癌患者，跟你说:&quot;你们女生体力不行啊，什么什么的，就应该去切切图，做做产品啊，什么什么的。&quot;对于这一切质疑，我们要要走自己的路。&lt;br/&gt;有一句话叫做&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;行亦禅,坐亦禅,语默动静体安然。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大致意思就是，不论你在做什么事,心中感到自在安然，这就是禅。人生有很多痛苦都是因为别人的&quot;中伤&quot;，我们都避免不了心中会有疑虑，只要拥有一颗安详的心，别人就不可能在此作怪。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意护发&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当程序员后，一定要注意自己的发际线。女生也不例外，大家要注意保养。&lt;/p&gt;
</description>
<pubDate>Sun, 22 Jul 2018 14:52:00 +0000</pubDate>
<dc:creator>孤独烟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rjzheng/p/9351626.html</dc:identifier>
</item>
<item>
<title>PostgreSQL&gt;窗口函数的用法 - funnyZpC</title>
<link>http://www.cnblogs.com/funnyzpc/p/9311281.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/funnyzpc/p/9311281.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;PostgreSQL之窗口函数的用法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;转载请注明出处:&lt;span&gt;&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: PostgreSQL==&amp;amp;gt;窗口函数的用法&quot; href=&quot;https://www.cnblogs.com/funnyzpc/p/9311281.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.cnblogs.com/funnyzpc/p/9311281.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;PostgreSQL的高级特性本准备三篇的(&lt;strong&gt;递归、窗口函数、JSON&lt;/strong&gt;)，结果中间一直一直加班 和遗忘 拖到现在才写到中篇，欸，加班真不是一件好事情。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　谈谈我对加班的看法吧=&amp;gt; 如果加班能控制在一个小时内，这样会比较好(当然如果不加班的话更好)，偶尔适当的加班能提高工作进度，对创业公司来说尤为重要；但，糟糕的地方也不少，加班时间长了容易造成思维缓慢，这对脑子本来就不快的人来说伤害尤其的大(我就是个例子)，也容易造成&lt;span&gt;颈椎病、高血压、过劳。。。&lt;/span&gt;等等可怕的疾病，尤其还是做IT的一定要注意到这个问题，以上这些话可能有童鞋不会在意，那我就在这里说说我见过的真实的例子，我上一家公司的CTO有比较严重的脊椎病，(他说)坐的时间久了背部尤其的难受，上一家公司总监也经常加班，可能再加上本身体质的原因，心脏现在已经装上了起搏器，同样是上一家公司，我的一同事，也就比我大三岁左右，头发已经有相当部分白了哎，每见到这样的事儿都很难受，人一辈子，&lt;span&gt;如果没有足够的时间去关注生活，关注健康，我们生活内容还剩下什么？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这次我就简单的讲讲PostgreSQL的高级特性&amp;gt;&lt;strong&gt;&lt;span&gt;窗口函数&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我先用表格列出PostgreSQL里面的窗口函数，(源文档在这里&amp;gt;&lt;a href=&quot;http://www.postgres.cn/docs/9.3/functions-window.html&quot; target=&quot;_blank&quot;&gt;http://www.postgres.cn/docs/9.3/functions-window.html&lt;/a&gt;，推荐去postgre的中文社区看看)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722215233411-946735430.png&quot; alt=&quot;&quot; width=&quot;1130&quot; height=&quot;362&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　讲第一个问题之前我先扔出一个需求&amp;gt;&lt;span&gt;如何给查询出来的数据添加一列序号，用最简单的方式实现？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;span&gt;Oracle&amp;gt;使用&lt;code&gt;rownum快速生成&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　MySql&amp;gt;使用变量定义:(@i:=@i+1)  as row&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　SqlServer&amp;gt;通过定义存储过程的方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　PostgreSQL&amp;gt;通过函数generate_series(start_value,end_value)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;额，以上方式我大概都用过，对于Oracle的方式虽然语句简单，但是涉及到排序的时候可就乱了，mysql的方式也还算可以，但是这样并没有通用性，子查询的时候会相当麻烦,同时个人觉得这更像是存储过程和sql的结合体，也破坏了Sql本该有的形式，PostgreSQL的方式虽然不错，但是总要指定起始和终止值，这个在生成测试数据的时候还好用，具体业务开发用起来可就麻烦多了；这里，当然有更好的实现方式&amp;gt;窗口函数，这个属性在主流的数据库系统中都有实现(以前用oracle的时候竟然没发现这么好用的东西，好遗憾)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　这里我先放出表结构语句&lt;/span&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;107&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&quot;.&quot;products&quot;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&quot;.&quot;products&quot; (
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &quot;id&quot; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) COLLATE &quot;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &quot;name&quot; &lt;span&gt;text&lt;/span&gt; COLLATE &quot;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    &quot;price&quot; numeric,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &quot;uid&quot; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;14&lt;/span&gt;) COLLATE &quot;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &quot;type&quot; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) COLLATE &quot;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;WITH&lt;/span&gt; (OIDS&lt;span&gt;=&lt;/span&gt;&lt;span&gt;FALSE);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;BEGIN&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0006&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;iPhone X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9600&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;电器&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0012&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;电视&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3299&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;电器&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0004&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;辣条&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;5.6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;零食&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0007&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;薯条&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;7.5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;零食&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0009&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;方便面&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3.5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;零食&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0005&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;铅笔&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;文具&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0014&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;作业本&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;文具&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鞋子&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;衣物&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0002&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;外套&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;110.9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;衣物&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0013&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;围巾&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;93&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;衣物&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0008&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;香皂&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;17.5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;日用品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0010&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;水杯&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;日用品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0015&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;洗发露&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;日用品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0011&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;毛巾&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;日用品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0003&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;手表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1237.55&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;电器&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0016&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;绘图笔&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;文具&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; &quot;&lt;span&gt;public&lt;/span&gt;&quot;.&quot;products&quot; &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0017&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;汽水&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3.5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;零食&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;COMMIT&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这我先用第一个函数&lt;strong&gt;&lt;span&gt;row_number()&lt;/span&gt;&lt;/strong&gt; ,一句即可实现&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  &lt;span&gt;select&lt;/span&gt; type,name,price,&lt;span&gt;row_number() over(order by price asc)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; idx &lt;span&gt;from&lt;/span&gt; products ;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722200836747-1526044110.png&quot; alt=&quot;&quot; width=&quot;681&quot; height=&quot;572&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用窗口函数的好处不仅仅可实现序号列，还可以在&lt;span&gt;over()内按指定的列排序&lt;/span&gt;,上图是按照price列升序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里，对于以上提到的一个问题，根据上面的数据 我再做个扩充&amp;gt;&lt;span&gt;如果需要在类别(type)内按照价格(price) 升序排列(就是在类别内做排序)，该怎么做呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当然也很简单，只需要在窗口(over())中声明分隔方式 &lt;span&gt;Partition&lt;/span&gt; .&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　分类排序序号，&lt;span&gt;&lt;strong&gt;row_number()&lt;/strong&gt;&lt;/span&gt; 实现&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;select&lt;/span&gt; type,name,price,&lt;span&gt;&lt;strong&gt;row_number&lt;/strong&gt;() over(&lt;strong&gt;PARTITION by type&lt;/strong&gt; order by price asc)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; idx &lt;span&gt;from&lt;/span&gt; products ;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　查询结果&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722201834884-294564251.png&quot; alt=&quot;&quot; width=&quot;689&quot; height=&quot;580&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　上面的问题这里需求完美实现，额，这里其实还可以做个扩充，你可以注意到零食类别内的 方便面和汽水价格是一样的，如何将零食和汽水并列第一呢？答案是：用窗口函数&amp;gt;rank()&lt;/p&gt;
&lt;p&gt;　　 分类排序序号并列, &lt;span&gt;&lt;strong&gt;rank()&lt;/strong&gt;&lt;/span&gt; 实现&amp;gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;SELECT&lt;/span&gt; type,name,price,&lt;span&gt;&lt;strong&gt;rank&lt;/strong&gt;() over(partition by type order by price asc)&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　SQL输出&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722202449769-927619589.png&quot; alt=&quot;&quot; width=&quot;681&quot; height=&quot;570&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　需求又完美的实现了，但，注意到没，零食类别中的第三个 辣条 排到第三了，如果这里需要在类别里面能保持序号不重不少(将辣条排名至第二)，如何实现呢？答案&amp;gt;使用窗口函数 dense_rank()&lt;/p&gt;
&lt;p&gt;　　分类排序序号并列顺序，&lt;span&gt;&lt;strong&gt;dense_rank()&lt;/strong&gt;&lt;/span&gt; 实现&amp;gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;SELECT&lt;/span&gt; type,name,price,&lt;span&gt;&lt;strong&gt;dense_rank&lt;/strong&gt;() over(partition by type order by price asc)&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　SQL输出&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722202948595-702088249.png&quot; alt=&quot;&quot; width=&quot;729&quot; height=&quot;611&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　OK,以上的几个窗口函数已经能实现大多数业务需求了，如果有兴趣可以看看一些特殊业务可能用到的功能，&lt;span&gt;比如说如何限制序号在0到1之间排序呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　限制序号在0~1之间(0作为第一个序),窗口函数 &lt;span&gt;&lt;strong&gt;percernt_rank&lt;/strong&gt;()&lt;/span&gt; &amp;gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;SELECT&lt;/span&gt; type,name,price,&lt;span&gt;&lt;strong&gt;percent_rank&lt;/strong&gt;() over(partition by type order by price asc)&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　 SQL语句输出&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722203531042-741263884.png&quot; alt=&quot;&quot; width=&quot;672&quot; height=&quot;544&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意:上面的percernt_rank()函数默认是从0开始排序的，如果需要使用相对0~1之间的排名，需要这样：&lt;/p&gt;
&lt;p&gt;　　限制序号在0~1之间相对排名，窗口函数 &lt;strong&gt;&lt;span&gt;cume_dist()&lt;/span&gt;&lt;/strong&gt; 实现&amp;gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; type,name,price,&lt;span&gt;&lt;strong&gt;cume_dist&lt;/strong&gt;() over(partition by type order by price asc)&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　SQL语句输出&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722204113279-1476362126.png&quot; alt=&quot;&quot; width=&quot;666&quot; height=&quot;563&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意:上面的序号是相对于0开始排序的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于排序序号还可以限制最大序号，这样做：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　限制最大序号为&lt;span&gt;指定数字序号&lt;/span&gt; &lt;span&gt;&lt;strong&gt;ntile(val1)&lt;/strong&gt;&lt;/span&gt; 实现 &amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; type,name,price,&lt;span&gt;&lt;strong&gt;ntile&lt;/strong&gt;(&lt;span&gt;2&lt;/span&gt;) over(partition by type order by price asc)&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　SQL语句输出 &amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722204551406-1005087275.png&quot; alt=&quot;&quot; width=&quot;549&quot; height=&quot;551&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;窗口函数还可以实现在子分类排序的情况下取偏移值，这样实现&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　获取到排序数据的每一项的偏移值(&lt;span&gt;向下偏移&lt;/span&gt;) , &lt;span&gt;l&lt;strong&gt;ag(val1,val2,val3)&lt;/strong&gt;&lt;/span&gt; 函数实现&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; id,type,name,price,&lt;span&gt;&lt;strong&gt;lag&lt;/strong&gt;(id,&lt;span&gt;1&lt;/span&gt;,'') over(partition by type order by price asc)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; topid &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　SQL语句输出 &amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722205114874-1710627913.png&quot; alt=&quot;&quot; width=&quot;734&quot; height=&quot;542&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意:&lt;span&gt;函数lag(val1,val2,val3) 中的三个参数分别为-&amp;gt;(&lt;strong&gt;输出的上一条记录的字段,偏移值,无偏移值的默认值&lt;/strong&gt;)；以上这里的偏移值为1，偏移字段为id，无偏移默认值为空('')&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　若获取数据项偏移值(向上偏移) , &lt;strong&gt;&lt;span&gt;lead(val1,val2,val3)&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
SELECT id,type,name,price,&lt;span&gt;&lt;strong&gt;lead&lt;/strong&gt;(id,&lt;span&gt;1&lt;/span&gt;,'') over(partition by type order by price asc)&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; downid &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 　 SQL 语句输出 &amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722205847916-280176052.png&quot; alt=&quot;&quot; width=&quot;769&quot; height=&quot;546&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;当然，窗口函数还可以实现每个子类排序中的第一项的某个字段的值，可以这样实现:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　获取分类子项排序中的第一条记录的某个字段的值， &lt;strong&gt;&lt;span&gt;first_value(val1)&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;SELECT&lt;/span&gt; id,type,name,price,&lt;span&gt;&lt;strong&gt;first_value&lt;/strong&gt;(name) over(partition by type order by price asc)&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　SQL语句输出&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722210214318-552576761.png&quot; alt=&quot;&quot; width=&quot;756&quot; height=&quot;524&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意:以上函数取的是排序子类记录中的第一条记录的name字段。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当然也可以向下取分类排序中的最后一条记录的某个字段, &lt;strong&gt;&lt;span&gt;last_value(val1)&lt;/span&gt;&lt;/strong&gt;实现&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;SELECT&lt;/span&gt; id,type,name,price,&lt;span&gt;&lt;strong&gt;last_value&lt;/strong&gt;(name) over(partition by type order by price&lt;strong&gt; range between unbounded preceding and unbounded following&lt;/strong&gt;)&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; products; &lt;span&gt;--&lt;/span&gt;&lt;span&gt; order by type asc ;-- ,price asc;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　SQL 语句输出 &amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722210553875-961375241.png&quot; alt=&quot;&quot; width=&quot;759&quot; height=&quot;511&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;额，这里需要说明的是，当取分类在最后一条记录的时候 自然排序下不可以在over() 使用排序字段，不然取得的值为相对于当前记录的值，故这里按价格(price) 升序的时候指定 排序字段 -&amp;gt; &lt;strong&gt;&lt;span&gt;range&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;&lt;strong&gt;between unbounded preceding and unbounded following&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　窗口函数还能在分类排序下取得指定序号记录的某个字段，这样：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　取得排序字段项目中指定序号记录的某个字段值, &lt;strong&gt;&lt;span&gt;nth_value(val1,val2)&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; id,type,name,price,&lt;span&gt;&lt;strong&gt;nth_value&lt;/strong&gt;(name,&lt;span&gt;2&lt;/span&gt;) OVER(partition by type order by price range between unbounded preceding and unbounded following )&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; products;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　SQL语句输出 &amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722211440839-1766737939.png&quot; alt=&quot;&quot; width=&quot;768&quot; height=&quot;552&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　额，窗口函数在单独使用的时候能省略很多不必要的查询 ，比如子查询、聚合查询，当然窗口函数能做得更多(配合聚合函数使用的时候) ,额，这里我给出一个示例 &amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　SQL查询语句 ，&lt;strong&gt;&lt;span&gt;窗口函数+聚合函数&lt;/span&gt;&lt;/strong&gt; 实现 &amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt; (partition &lt;span&gt;by&lt;/span&gt;&lt;span&gt; type) 类别金额合计,
(&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt; (&lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; type))&lt;span&gt;/&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt;&lt;span&gt;() 类别总额占所有品类商品百分比,
&lt;/span&gt;&lt;span&gt;round&lt;/span&gt;(price&lt;span&gt;/&lt;/span&gt;(&lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt; (partition &lt;span&gt;by&lt;/span&gt; type rows &lt;span&gt;between&lt;/span&gt; unbounded preceding &lt;span&gt;and&lt;/span&gt; unbounded following)),&lt;span&gt;3&lt;/span&gt;&lt;span&gt;) 子除类别百分比,
rank() &lt;/span&gt;&lt;span&gt;over&lt;/span&gt; (partition &lt;span&gt;by&lt;/span&gt; type &lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; price &lt;span&gt;desc&lt;/span&gt;&lt;span&gt;) 排名,
&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt;&lt;span&gt;() 金额总计
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; products &lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; type,price &lt;span&gt;asc&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　SQL 语句输出&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1161789/201807/1161789-20180722212031908-1570182872.png&quot; alt=&quot;&quot; width=&quot;1630&quot; height=&quot;556&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;上面的语句看起来会有点儿晕，查询语句子项就像是在输出参数项里面直接写子查询的感觉，事实上为使语句有更好的可读性，&lt;span&gt;窗口条件可以放在from后面&lt;/span&gt; ,这样子&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; 
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    id,type,name,price,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt;&lt;span&gt; w1 类别金额合计,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     (&lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt; (&lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; type))&lt;span&gt;/&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt;&lt;span&gt;() 类别总额占所有品类商品百分比,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;round&lt;/span&gt;(price&lt;span&gt;/&lt;/span&gt;(&lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt; w2),&lt;span&gt;3&lt;/span&gt;&lt;span&gt;) 子除类别百分比,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     rank() &lt;span&gt;over&lt;/span&gt;&lt;span&gt; w3 排名,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;sum&lt;/span&gt;(price) &lt;span&gt;over&lt;/span&gt;&lt;span&gt;() 金额总计
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    products 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;WINDOW 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;w1 as (partition by type),
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;w2 as (partition by type rows between unbounded preceding and unbounded following),
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;w3 as (partition by type order by price desc)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     type,price &lt;span&gt;asc&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;现在是 2018-07-22 21:59:31 ，各位晚安~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 22 Jul 2018 14:20:00 +0000</pubDate>
<dc:creator>funnyZpC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/funnyzpc/p/9311281.html</dc:identifier>
</item>
<item>
<title>java,让debug出色 - 等你归去来</title>
<link>http://www.cnblogs.com/yougewe/p/9351309.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yougewe/p/9351309.html</guid>
<description>&lt;p&gt;虽然我们不喜欢bug，但是bug永远都存在。&lt;br/&gt;虽然我们牛逼，但是仍然有不知道的东西，解决不了的问题。&lt;br/&gt;so，还得借助工具，让咱效率提起来扛扛的。&lt;br/&gt;解决的问题如是：由于某种原因，其他系统发送的mq，我这边说没收到，他那边说发了。然后，一愁不展，咋办呢？好吧，肯定是抓包确认问题咯。嘿，这不是本文的重点，请自行脑补抓包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/830731/201807/830731-20180722210229869-1521275185.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从对方系统的mq记录里，取出消息体，放到mq后台，直接发送到消费服务器。模拟发送情况，然后就遇到报错了，苦思不得结果后，只能使用终级绝招，就用本机来代替debug吧。&lt;br/&gt;本地服务起来之后，同样，mq后台发送消息。不出意外地，和测试服务器上报了不一样的错。这就尴尬了。和测试环境不一样，咋整呢？&lt;br/&gt;不怕，咱一步步来。按照堆栈指示的代码行，很快定位了有问题的代码。原因为某个jar包中的值报了空指针异常。咋整呢，咱们的本机环境不像测试环境呢。&lt;/p&gt;
&lt;p&gt;解决办法1：将本机模拟成测试环境一样的情况，太难，至少linux和windows环境就是不一样的。&lt;/p&gt;
&lt;p&gt;方法2：想办法让这个变量的变得和测试环境一样。也许可行。&lt;/p&gt;
&lt;p&gt;方法3：想办法跳过报错的代码，使其继续后面的程序，存在2个问题，1是程序做不到跳过不执行功能，2是跳过执行后后续可能使用这里的值，会导致其他错误。故此，只有改变变量值一法了。&lt;/p&gt;
&lt;p&gt;案例1：改变一个基本类型变量的值&lt;br/&gt;直接setvalue即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        String var1 &lt;/span&gt;= &quot;var1&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = 1&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;var1:&quot; + var1);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出 var1:changed&lt;/span&gt;
&lt;span&gt;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/830731/201807/830731-20180722214937763-2021117425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/830731/201807/830731-20180722215357757-1835365830.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;案例2：改变一个hashmap变量的值&lt;/p&gt;
&lt;p&gt;hashmap是个复杂类型，不能直接设置值。需要使用 add to watches功能。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = 2&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;map:&quot; + map);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出 map:{name:hello}&lt;/span&gt;
&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/830731/201807/830731-20180722220148271-1859015659.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/830731/201807/830731-20180722220642140-184343290.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/830731/201807/830731-20180722220533304-902067253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;案例3：改变一个实体对象值&lt;br/&gt;可以使用set value 方式直接改变值，也可以使用add to watches操作代码来设置 。 总之你想要都能给你变出来。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        UserInfo info &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = 3&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;info:&quot; +  info);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出info:UserInfo{id='123', name='null', sex='null', age=null, address='golden street'}&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/830731/201807/830731-20180722221100206-132897583.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/830731/201807/830731-20180722221444844-1505399465.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;报的错是找不到某个处理方法，但是实际上我自认为已经写了某个方法。那么到底怎么回事呢。&lt;br/&gt;第一次跟踪，到某一行后，退出了程序。debug往下调整。进入方法再进行单步调试。再次发现某一次代码退出。最后定位到反射调用的这一行。原因是之时的入参类型，与现有入参类型不一致。再往前分析，是因为在调用转换器的时候，并没有进行相应的转换，而是以原来的二进制格式返回了。分析程序，知道里面某参数需要包含某值，转换器才会起作用。对症下药，给他这个参数，果然进入到了转换流程。然而，进入后又转换成另一个不可预料的参数了，没办法，getmapper方法不好模拟出来，还是算了，直接模拟转换结果吧，add to watch，改变值。这下，终于进入方法了，代码不再报错。测试通过了。&lt;br/&gt;弄清原理之后，解决就简单了！如果对方没有设置某属性值，让其设置就ok了。如果一定要以某结构参数进行接收处理，那变写一个对应的处理方法即可。小case。&lt;/p&gt;
&lt;p&gt;debug，单步调试，进入，退出，计算变量值，推测执行是debug基础，必备。&lt;/p&gt;
&lt;p&gt;debug， 让问题变得简单！&lt;/p&gt;
</description>
<pubDate>Sun, 22 Jul 2018 14:19:00 +0000</pubDate>
<dc:creator>等你归去来</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yougewe/p/9351309.html</dc:identifier>
</item>
<item>
<title>javaScript设计模式之面向对象编程（object-oriented programming，OOP）(二） - saucxs</title>
<link>http://www.cnblogs.com/chengxs/p/9311331.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chengxs/p/9311331.html</guid>
<description>&lt;p&gt;接上一篇&lt;/p&gt;
&lt;p&gt;面向对象编程的理解？&lt;/p&gt;
&lt;p&gt;答：面向对象编程，就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性）与动作（方法）。这个对象我们称之为类。面向对象编程思想其中一个特点就是封装，就是把你需要的功能放在一个对象里。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一、封装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1创建一个类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在javascript中创建一个类，很容易，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;首先，声明一个函数保存在变量里，然后，在这个函数内部通过this（函数内部自带的一个变量，用于指向当前这个对象）变量添加属性或者方法，来实现对类的添加属性或方法。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Book = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(id,bookname,price){
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.bookname =&lt;span&gt; bookname;
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;      
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法二：可以通过类的原型添加属性或方法，有两种方法，不要混用&lt;/p&gt;
&lt;p&gt;(1)为原型对象属性赋值的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Book.prototype.display = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;展示这本书&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(2)将对象赋值给类的原型对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Book.prototype =&lt;span&gt; {
    display:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){}
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们需要的方法和属性都封装在我们抽象的Book类里，当使用功能方法时，我们不能直接使用这个Book类，需要用关键字new来实例化新的对象。使用实例化对象的属性或者方法时，可以通过&lt;strong&gt;点语法&lt;/strong&gt;来访问&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; book = &lt;span&gt;new&lt;/span&gt; Book(10,'javascript课本'，50&lt;span&gt;)；
console.log(book.bookname);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的，通过此特性即可创建类的私有变量以及私有方法。然而在函数内部通过this创建的属性和方法，在类创建对象时时，每一个对象自身都拥有一份并且可以外部访问的。因此通过this创建，不但可以访问这些对象的共有属性与共有方法，而且还可以访问到类或者对象自身的私有属性和私有方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//私有属性，私有方法；特权方法，对象公有属性，对象公有方法；构造器&lt;br/&gt;var&lt;/span&gt; Book = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(id,name,price){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;私有属性&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; num = 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;私有方法&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkId(){};
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;特权方法&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.getName = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.getPrice = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setName = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setPrice = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象公有属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象公有方法&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.copy = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){};

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造器&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setName(name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setPrice(price);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用原生的prototype对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;静态类公有属性（对象不能访问）&lt;/span&gt;
Book.isChinese = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类静态公有方法（对象不能访问）&lt;/span&gt;
Book.resetTime = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    console.log(&lt;/span&gt;'new time'&lt;span&gt;);
};

Book.prototype &lt;/span&gt;=&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;公有属性&lt;/span&gt;
    isJSBook:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;公有方法&lt;/span&gt;
    display:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){}
}        &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过new关键字创建的对象时对新对象this的不断赋值，并将prototype指向类的prototype所指向的对象，而类的构造函数外面通过&lt;strong&gt;点语法&lt;/strong&gt;定义的属性方法是不会添加到新创建的对象上去的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; Book(11,'JavaScript设计'，50&lt;span&gt;);
console.log(b.num);  //undefined
console.log(b.isJSBook);  //false
console.log(b.id);   //11
console.log(b.isChinese);    //undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类的&lt;strong&gt;私有属性&lt;/strong&gt;num，以及&lt;strong&gt;静态公有属性&lt;/strong&gt;isChinese在新创建的b对象里访问不到。而类的&lt;strong&gt;公有属性&lt;/strong&gt;isJSBook在b对象中却可以通过点语法访问到。&lt;/p&gt;
&lt;p&gt;但是类的&lt;strong&gt;静态公有属性&lt;/strong&gt;isChinese可以通过类的自身访问。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
console.log(Book.isChinese);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
Book.resetTime();    &lt;span&gt;//&lt;/span&gt;new time
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1.2闭包实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你对闭包的理解？&lt;/p&gt;
&lt;p&gt;答：&lt;strong&gt;闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数&lt;/strong&gt;。我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例化对象的函数，即可访问到类函数作用域的变量，这个变量叫静态私有变量，静态私有方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总结类： 发现每一个类都有3个部分：&lt;/p&gt;
&lt;p&gt;1、第一部分是&lt;strong&gt;构造函数内的，&lt;/strong&gt;供实例化对象复制用的；&lt;/p&gt;
&lt;p&gt;2、第二部分是&lt;strong&gt;构造函数外的&lt;/strong&gt;，直接通过点语法添加的，这是供类使用的，实例化对象时访问不到的；&lt;/p&gt;
&lt;p&gt;3、第三部分是&lt;strong&gt;类的原型中的&lt;/strong&gt;，实例化对象可以通过其原型链间接的访问到，也是为供所有的实例化对象所共有的。&lt;/p&gt;
&lt;p&gt;JavaScript中没有继承这一个现有的机制，该如何实现呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（一）子类的原型对象--类式继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如：常见的类式继承&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类式继承&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;声明父类&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; SuperClass(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.superValue = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为父类添加共有方法&lt;/span&gt;
SuperClass.prototype.getSuperValue = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.superValue;
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明子类&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; SubClass(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.subValue = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承父类&lt;/span&gt;
SubClass.prototype = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SuperClass();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为子类添加共有方法&lt;/span&gt;
SubClass.prototype.getSubValue = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.subValue;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刚才封装，对比，继承里面声明了2个类，而且第二个类的原型prototype被赋予第一个类的实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类式继承需要将第一个类的实例赋值给第二个类的原型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继承原理：&lt;strong&gt;新创建的对象不仅仅可以访问父类原型上的属性和方法，同样可以访问从父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型，那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SubClass();
console.log(instance.getSuperValue());   //true
console.log(instance.getSubValue());     //false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在js中，有一个关键字instanceof 来判断某一个对象是否为某一个类的实例，或者说某一个对象是否继承了某个类，这样可以&lt;strong&gt;判断对象和类之间的关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;instanceof如何知道对象和类之间的继承关系呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答;instanceof是通过判断对象的prototype链来确定这个对象是否是某一个类的实例，而不关心对象与类的自身结构。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
console.log(instance &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; SuperClass);   //true
console.log(instance &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; SubClass);　　　//true
console.log(SubClass &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt; SuperClass);　　//false
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为啥最后是false，SubClass继承SuperClass，为啥还是false；记住：&lt;strong&gt;instanceof是判断前面的对象是否是后边类（对象）的实例，它并不是表示两者的继承。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
console.log(SubClass.prototype &lt;span&gt;instanceof&lt;/span&gt; SuperClass); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;类式继承的一个&lt;strong&gt;特点&lt;/strong&gt;：你所创建的所有的对象都是谁的实例？&lt;/p&gt;
&lt;p&gt;Object，正式JavaScript为我们提供的原生对象Object。&lt;strong&gt;创建的所有的对象都是Object的实例。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
console.log(instance &lt;span&gt;instanceof&lt;/span&gt; Object); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类式继承有两个缺点：&lt;/p&gt;
&lt;p&gt;1、由于子类是通过其原型prototype对父类实例化，继承了父类。所以说父类中共有属性要是引用类型，就会在子类中被所有实例共用，因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其他子类。&lt;/p&gt;
&lt;p&gt;2、由于子类实现的继承是靠原型的prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的，因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（二）创造即继承--构造函数继承&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;除了类式继承以外还有构造函数继承&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数式继承&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;声明父类&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; SuperClass(id){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引用类型共有属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.books = ['JavaScript','html','css'&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;值类型共有属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父类声明原型的方法&lt;/span&gt;
SuperClass.prototype.showBooks = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.books);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明子类&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; SubClass(id){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承父类    &lt;/span&gt;
    SuperClass.call(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,id);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建第一个子类的实例&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; instance1 = &lt;span&gt;new&lt;/span&gt; SubClass(10&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建第二个子类的实例&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; instance2 = &lt;span&gt;new&lt;/span&gt; SubClass(11&lt;span&gt;);

instance1.books.push(&lt;/span&gt;'设计模式'&lt;span&gt;); 
console.log(instance1.books);  //[&quot;JavaScript&quot;, &quot;html&quot;, &quot;css&quot;, &quot;设计模式&quot;]
console.log(instance1.id);　　　//10
console.log(instance2.books);　　//[&quot;JavaScript&quot;, &quot;html&quot;, &quot;css&quot;]
console.log(instance2.id);　　　　//11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：SuperClass.call(this.id);这个语句是构造函数式继承的精华，&lt;strong&gt;由于call这个方法可以更改函数的作用域&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;由于这种类型的继承没有涉及到原型prototype，所以父类的原型方法自然就不会被子类继承，而如果想被子类继承就必须放在构造函数中，这样创造出来的每一个实例都会拥有一份而不能共用，这样就违背了代码复用的原则。&lt;/p&gt;
&lt;p&gt;综上这两种模式优点，后来就有了组合式的继承&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（三）集合优点--组合继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总结一下：&lt;/p&gt;
&lt;p&gt;（1）类式继承，通过子类的原型prototype对父类实例化来实现的&lt;/p&gt;
&lt;p&gt;（2）构造函数继承，通过子类的构造函数作用环境执行一下父类的构造函数来实现的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;组合式的继承&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;声明父类&lt;/span&gt;
&lt;span&gt;function SuperClass(name){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;值类型共有属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引用类型共有属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.books = ['html','css','JavaScript'&lt;span&gt;];
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父类原型共有方法&lt;/span&gt;
SuperClass.prototype.getName = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明子类&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; SubClass(name,time){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;构造函数式继承&lt;/strong&gt;&lt;/span&gt;父类name属性&lt;/span&gt;
    SuperClass.call(&lt;span&gt;this,&lt;/span&gt;&lt;span&gt;name);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;子类中新增共有属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.time =&lt;span&gt; time;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;类式继承&lt;/strong&gt;&lt;/span&gt; 子类原型继承父类&lt;/span&gt;
SubClass.prototype = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SuperClass();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;子类原型方法&lt;/span&gt;
SubClass.prototype.getTime = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.time);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;组合模式：在子类构造函数中执行父类构造函数，在子类原型上实例化父类。&lt;/p&gt;
&lt;p&gt;这样就融合了类式继承和构造函数继承的优点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; instance1 = &lt;span&gt;new&lt;/span&gt; SubClass('js book',2014&lt;span&gt;);
instance1.books.push(&lt;/span&gt;'设计模式'&lt;span&gt;);
console.log(instance1.books); //[&quot;html&quot;, &quot;css&quot;, &quot;JavaScript&quot;, &quot;设计模式&quot;]
instance1.getName();  //js book
instance1.getTime();   //2014

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance2 = &lt;span&gt;new&lt;/span&gt; SubClass('css book',2013&lt;span&gt;);
console.log(instance2.books);  //[&quot;html&quot;, &quot;css&quot;, &quot;JavaScript&quot;]
instance2.getName();   //css book
instance2.getTime();   //2013&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子类的实例中更改父类继承下来的引用类型属性如books，根本就不会影响到其他实例。&lt;/p&gt;
&lt;p&gt;但是我们在使用构造函数继承时执行了一遍父类的构造函数，而在实现子类原型的类式继承时又调用了一遍父类的构造器。&lt;strong&gt;因此父类构造函数调用了两遍&lt;/strong&gt;，还不是最完美的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（四）洁净的继承者--原型式继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;借助原型的prototype可以根据已有的对象创建一个新对象，同时不必创建新的自定义对象类型。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;&lt;span&gt; inheritObject(item){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个过渡函数对象&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; F(){};
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;过渡对象的原型继承父对象&lt;/span&gt;
    F.prototype =&lt;span&gt; item;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回过渡对象的一个实例，该实例的原型继承了父对象&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; F();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他是对类式继承的一个封装，其实其中的过渡对象就相当于类式继承中的子类，只不过在原型式中作为一个过渡对象出现，目的是为了创建要返回新的实例化对象。&lt;/p&gt;
&lt;p&gt;当然如果你感觉有必要可以将F过渡缓存起来，不必每次都创建一个新过渡类F，随后就出现了Object.create()的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; book =&lt;span&gt; {
    name: &lt;/span&gt;'js book'&lt;span&gt;,
    alikeBook: [&lt;/span&gt;'css book','html book'&lt;span&gt;],
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newBook =&lt;span&gt; inheritObject(book);
newBook.name &lt;/span&gt;= 'ajax book'&lt;span&gt;;
newBook.alikeBook.push(&lt;/span&gt;'xml book'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; otherBook =&lt;span&gt; inheritObject(book);
otherBook.name &lt;/span&gt;= 'flash book'&lt;span&gt;;
otherBook.alikeBook.push(&lt;/span&gt;'as book'&lt;span&gt;);

console.log(newBook.name);   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ajax book&lt;/span&gt;
console.log(newBook.alikeBook);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;['css book','html book','xml book','as book']&lt;/span&gt;
&lt;span&gt;
console.log(otherBook.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;flash book&lt;/span&gt;
console.log(otherBook.alikeBook);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;['css book','html book','xml book','as book']&lt;/span&gt;
&lt;span&gt;
console.log(book.name);   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;js book&lt;/span&gt;
console.log(book.alikebook); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;['css book','html book','xml book','as book']  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跟类式继承一样，父类对象book中的值类型的属性被复制，引用类型的属性被共用。&lt;/p&gt;

</description>
<pubDate>Sun, 22 Jul 2018 13:50:00 +0000</pubDate>
<dc:creator>saucxs</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chengxs/p/9311331.html</dc:identifier>
</item>
</channel>
</rss>