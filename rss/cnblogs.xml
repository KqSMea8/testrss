<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>漫话JavaScript与异步·第三话——Generator：化异步为同步 - 大唐西域都护</title>
<link>http://www.cnblogs.com/leegent/p/8207246.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leegent/p/8207246.html</guid>
<description>&lt;h2&gt;一、Promise并非完美&lt;/h2&gt;
&lt;p&gt;我在&lt;a href=&quot;http://www.cnblogs.com/leegent/p/6846664.html&quot; target=&quot;_blank&quot;&gt;上一话&lt;/a&gt;中介绍了&lt;strong&gt;Promise&lt;/strong&gt;，这种模式增强了事件订阅机制，很好地解决了控制反转带来的信任问题、硬编码回调执行顺序造成的“回调金字塔”问题，无疑大大提高了前端开发体验。但有了Promise就能完美地解决异步问题了吗？并没有。&lt;/p&gt;
&lt;p&gt;首先，Promise仍然需要通过then方法注册回调，虽然只有一层，但沿着Promise链一长串写下来，还是有些让人头晕。&lt;/p&gt;
&lt;p&gt;更大的问题在于Promise的&lt;strong&gt;错误处理&lt;/strong&gt;比较麻烦，因为Promise链中抛出的错误会一直传到链尾，但在链尾捕获的错误却不一定清楚来源。而且，链中抛出的错误会fail掉后面的整个Promise链，如果要在链中及时捕获并处理错误，就需要给每个Promise注册一个错误处理回调。噢，又是一堆回调！&lt;/p&gt;
&lt;p&gt;那么最理想的异步写法是怎样的呢？像同步语句那样直观地按顺序执行，却又不会阻塞主线程，最好还能用try-catch直接捕捉抛出的错误。也就是说，“化异步为同步”！&lt;/p&gt;
&lt;p&gt;痴心妄想？&lt;/p&gt;
&lt;p&gt;我在&lt;a href=&quot;http://www.cnblogs.com/leegent/p/6016403.html&quot; target=&quot;_blank&quot;&gt;第一话&lt;/a&gt;里提到，异步和同步之间的鸿沟在于：同步语句的执行时机是“&lt;strong&gt;现在&lt;/strong&gt;”，而异步语句的执行时机在“&lt;strong&gt;未来&lt;/strong&gt;”。为了填平鸿沟，如果一个异步操作要写成同步的形式，那么同步代码就必须有“&lt;strong&gt;等待&lt;/strong&gt;”的能力，等到“未来”变成“现在”的那一刻，再继续执行后面的语句。&lt;/p&gt;
&lt;p&gt;在不阻塞主线程的前提下，这可能吗？&lt;/p&gt;
&lt;p&gt;听起来不太可能。幸好，Generator（生成器）为JS带来了这种超能力！&lt;/p&gt;

&lt;h2&gt;二、“暂停/继续”魔法&lt;/h2&gt;
&lt;p&gt;ES6引入的新特性中，Generator可能是其中最强大也最难理解的之一，即使看了&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/generator&quot; target=&quot;_blank&quot;&gt;阮一峰老师列举的大量示例代码&lt;/a&gt;，知道了它的全部API，也仍是不得要领，这是因为Generator的行为方式突破了我们所熟知的JS运行规则。可一旦掌握了它，它就能赋予我们巨大的能量，极大地提升代码质量、开发效率，以及FEer的幸福指数。&lt;/p&gt;
&lt;p&gt;我们先来简单回顾一下，ES6之前的JS运行规则是怎样的呢？&lt;/p&gt;
&lt;p&gt;1. JS是单线程执行，只有一个主线程&lt;/p&gt;
&lt;p&gt;2. 宿主环境提供了一个事件队列，随着事件被触发，相应的回调函数被放入队列，排队等待执行 &lt;/p&gt;
&lt;p&gt;3. 函数内的代码从上到下顺序执行；如果遇到函数调用，就先进入被调用的函数执行，待其返回后，用返回值替代函数调用语句，然后继续顺序执行&lt;/p&gt;
&lt;p&gt;对于一个FEer来说，日常开发中理解到这个程度已经够用了，直到他尝试使用Generator……&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; gen() {
    &lt;span&gt;let&lt;/span&gt; count &lt;/span&gt;= 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
        &lt;span&gt;let&lt;/span&gt; msg &lt;/span&gt;= &lt;span&gt;yield&lt;/span&gt; ++&lt;span&gt;count;
        console.log(msg);
    }
}

&lt;span&gt;let&lt;/span&gt; iter &lt;/span&gt;=&lt;span&gt; gen();
console.log(iter.next().value);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
console.log(iter.next('magic'&lt;span&gt;).value);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'magic'&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等等，gen明明是个function，执行它时却不执行里面的代码，而是返回一个Iterator对象？代码执行到yield处竟然可以暂停？暂停以后，竟然可以恢复继续执行？说好的单线程呢？另外，暂停/恢复执行时，还可以传出/传入数据？怎么肥四？难道ES6对JS做了什么魔改？&lt;/p&gt;
&lt;p&gt;其实Generator并没有改变JS运行的基本规则，不过套用上面的naive JS观已经不足以解释其实现逻辑了，是时候掏出长年在书架上吃灰的计算机基础，重温那些考完试就忘掉的知识。&lt;/p&gt;

&lt;h2&gt;三、法力的秘密——栈与堆&lt;/h2&gt;
&lt;p&gt;（注：这个部分包含了大量的个人理解，未必准确，欢迎指教）&lt;/p&gt;
&lt;p&gt;理解Generator的关键点在于理解&lt;strong&gt;函数执行时，内存里发生了什么&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个JS程序的内存分为代码区、栈区、堆区和队列区，从&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop&quot; target=&quot;_blank&quot;&gt;MDN&lt;/a&gt;借图一张以说明（图中没有画出代码区）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/900937/201801/900937-20180107212418581-1346513923.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;队列（Queue）就是FEer所熟知的事件循环队列。&lt;/p&gt;
&lt;p&gt;代码区保存着全部JS源代码被引擎编译成的机器码（以V8为例）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈（stack）&lt;/strong&gt;保存着每个函数执行所需的上下文，一个栈元素被称为一个&lt;strong&gt;栈帧&lt;/strong&gt;，一个栈帧对应一个函数。&lt;/p&gt;
&lt;p&gt;对于引用类型的数据，在栈帧里只保存引用，而真正的数据存放在&lt;strong&gt;堆（Heap）&lt;/strong&gt;里。堆与栈不同的是，栈内存由JS引擎自动管理，入栈时分配空间，出栈时回收，非常清楚明了；而堆是程序员通过new操作符手动向操作系统申请的内存空间（当然，用字面量语法创建对象也算），何时该回收没那么明晰，所以需要一套垃圾收集（GC）算法来专门做这件事。&lt;/p&gt;
&lt;p&gt;扯了一堆预备知识，终于可以回到Generator的正题了：&lt;/p&gt;
&lt;p&gt;普通函数在被调用时，JS引擎会创建一个栈帧，在里面准备好&lt;strong&gt;局部变量&lt;/strong&gt;、&lt;strong&gt;函数参数&lt;/strong&gt;、&lt;strong&gt;临时值&lt;/strong&gt;、&lt;strong&gt;代码执行的位置&lt;/strong&gt;（也就是说这个函数的第一行对应到代码区里的第几行机器码），在当前栈帧里设置好返回位置，然后将新帧压入栈顶。待函数执行结束后，这个栈帧将被弹出栈然后销毁，返回值会被传给上一个栈帧。&lt;/p&gt;
&lt;p&gt;当执行到yield语句时，Generator的栈帧同样会被弹出栈外，但Generator在这里耍了个花招——&lt;strong&gt;它在堆里保存了栈帧的引用（或拷贝）&lt;/strong&gt;！这样当iter.next方法被调用时，JS引擎便不会重新创建一个栈帧，而是把堆里的栈帧直接入栈。因为栈帧里保存了函数执行所需的全部上下文以及当前执行的位置，所以当这一切都被恢复如初之时，就好像程序从原本暂停的地方继续向前执行了。&lt;/p&gt;
&lt;p&gt;而因为&lt;strong&gt;每次yield和iter.next都对应一次出栈和入栈&lt;/strong&gt;，所以可以直接利用已有的栈机制，实现&lt;strong&gt;值的传出和传入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这就是Generator魔法背后的秘密！&lt;/p&gt;

&lt;h2&gt;四、终极方案：Promise+Generator&lt;/h2&gt;
&lt;p&gt;Generator的这种特性对于异步来说，意味着什么呢？&lt;/p&gt;
&lt;p&gt;意味着，我们终于获得了一种在不阻塞主线程的前提下实现“同步等待”的方法！&lt;/p&gt;
&lt;p&gt;为便于说明，先上一段直接使用回调的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;let&lt;/span&gt; it =&lt;span&gt; gen();  &lt;span&gt;// 获得迭代器

&lt;/span&gt;&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; request() {
    ajax({
        url: &lt;/span&gt;'www.someurl.com'&lt;span&gt;,
        onSuccess(res){
            it.next(res);  &lt;span&gt;// 恢复Generator运行，同时向其中塞入异步返回的结果&lt;/span&gt;
        }
    });
}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; gen() {
    &lt;span&gt;let&lt;/span&gt; response &lt;/span&gt;=&lt;span&gt;&lt;span&gt; yield&lt;/span&gt; request();
    console.log(response.text);
}

it.next();  &lt;/span&gt;&lt;span&gt;// &lt;/span&gt;&lt;span&gt;启动Generator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意let response = yield request()这行代码，是不是很有同步的感觉？就是这个Feel！&lt;/p&gt;
&lt;p&gt;我们来仔细分析下这段代码是如何运行的。首先，最后一行it.next()使得Generator内部的代码从头开始执行，执行到yield语句时，暂停，此时可以把yield想象成return，Generator的栈帧需要被弹出，会先计算yield右边的表达式，即执行request函数调用，以获得用于返回给上一级栈帧的值。当然request函数没有返回值，但它发送了一个异步ajax请求，并注册了一个onSuccess回调，表示在请求返回结果时，恢复Generator的栈帧并继续运行代码，并把结果作为参数塞给Generator，准确地说是塞到yield所在的地方，这样response变量就获得了ajax的返回值。&lt;/p&gt;
&lt;p&gt;可以看出，这里yield的功能设计得非常巧妙，好像它可以“赋值”给response。&lt;/p&gt;
&lt;p&gt;更妙的是，迭代器不但可以.next，还可以.throw，即&lt;strong&gt;把错误也抛入Generator&lt;/strong&gt;，让后者来处理。也就是说，&lt;strong&gt;在Generator里使用try-catch语句捕获异步错误，不再是梦！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先别急着激动，上面的代码还是too young too simple，要真正发挥Generator处理异步的威力，还得结合他的好兄弟——Promise一起上阵。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; request() {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处的request返回的是一个Promise&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
        ajax({
            url: &lt;/span&gt;'www.someurl.com'&lt;span&gt;,
            onSuccess(res) {
                resolve(res);
            },
            onFail(err) {
                reject(err);
            }
         });
    });
}

&lt;span&gt;let&lt;/span&gt; it &lt;/span&gt;=&lt;span&gt; gen();
&lt;span&gt;let&lt;/span&gt; p &lt;/span&gt;= it.next().value;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; p是yield返回的Promise&lt;/span&gt;
p.then(res =&amp;gt;&lt;span&gt; it.next(res),
    err &lt;/span&gt;=&amp;gt; it.&lt;span&gt;throw&lt;/span&gt;(err)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发生错误时，将错误抛入生成器&lt;/span&gt;
&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; gen() {
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        &lt;span&gt;let&lt;/span&gt; response &lt;/span&gt;=&lt;span&gt;&lt;span&gt; yield&lt;/span&gt; request();
        console.log(response.text);
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (error) {
        console.log(&lt;/span&gt;'Ooops, ', error.message);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以捕获Promise抛进来的错误！&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种写法完美结合了Promise和Generator的优点，可以说是FEer们梦寐以求的超级武器。&lt;/p&gt;
&lt;p&gt;但聪明的你一定看得出来，这种写法套路非常固定，当Promise对象一多时，就需要写许多类似于p.then(res =&amp;gt; ...., err =&amp;gt; ...)这样的重复语句，所以人们为了偷懒，就把这种套路给提炼成了一个更加精简的语法，那就是传说中的&lt;strong&gt;async/await&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;async&lt;/span&gt; funtion fetch() {
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        &lt;span&gt;let&lt;/span&gt; response &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt; request();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; request定义同上一端段示例代码&lt;/span&gt;
&lt;span&gt;        console.log(response.text);
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (error) {
        console.log(&lt;/span&gt;'Ooops, '&lt;span&gt;, error.message);
    }
}&lt;p&gt;fetch();&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这这这。。。就靠拢同步风格的程度而言，我觉得async/await已经到了&lt;strong&gt;登峰造极&lt;/strong&gt;的地步~&lt;/p&gt;
&lt;p&gt;顺便说一句，著名Node.js框架Koa2正是要求中间件使用这种写法，足见其强大和可爱。&lt;/p&gt;
&lt;p&gt;前端们，擦亮手中的新锐武器，准备迎接来自异步的高难度挑战吧！&lt;/p&gt;

&lt;h2&gt;写在最后&lt;/h2&gt;
&lt;p&gt;距离发表&lt;a title=&quot;第二话（Promise）&quot; href=&quot;http://www.cnblogs.com/leegent/p/6846664.html&quot; target=&quot;_blank&quot;&gt;第二话（Promise）&lt;/a&gt;已经过去大半年了，原本设想的终章——第三话（Generator），却迟迟未能动笔，因为笔者一直没能弄懂Generator这个行为怪异的家伙究竟是如何存在于JS世界的，又如何成为“回调地狱”的终极解决方案？直到回头弥补了一些计算机基础知识，才最终突破了理解上的障碍，把Generator的来龙去脉想清楚，从而敢应用到实际工作中。所以说，基础是很重要的，这是永不过时的真理。前端发展非常迅速，框架、工具日新月异，只有基础扎实，才能从容应对，任他风起云涌，我自稳坐钓鱼台。&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 16:53:00 +0000</pubDate>
<dc:creator>大唐西域都护</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leegent/p/8207246.html</dc:identifier>
</item>
<item>
<title>Nginx 反向代理获取真实IP问题 - 简玄冰</title>
<link>http://www.cnblogs.com/jianxuanbing/p/8254284.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jianxuanbing/p/8254284.html</guid>
<description>&lt;p&gt;前文 &lt;a href=&quot;http://www.cnblogs.com/jianxuanbing/p/8252252.html&quot;&gt;Nginx 解决WebApi跨域二次请求以及Vue单页面问题&lt;/a&gt; 当中虽然解决了跨域问题带来的二次请求，但也产生了一个新的问题，就是如果需要获取用户IP的时候，获取的IP地址总是本机地址。&lt;/p&gt;

&lt;p&gt;由于&lt;code&gt;Nginx&lt;/code&gt;反向代理后，在应用中取得的&lt;code&gt;IP&lt;/code&gt;都是反向代理服务器的&lt;code&gt;IP&lt;/code&gt;，取得的域名也是反向代理配置的Url的域名。&lt;/p&gt;

&lt;p&gt;解决该问题，需要在&lt;code&gt;Nginx&lt;/code&gt;反向代理配置中添加一些配置信息，目的将客户端的真实IP和域名传递到应用程序中。同时，也要修改获取IP地址的方法。&lt;br/&gt;但是需要注意的是，通过&lt;code&gt;Nginx&lt;/code&gt;反向代理后，如果访问IP通过了几层代理，可能取得的IP地址是这种格式：&lt;code&gt;clientIP,proxy1,proxy2&lt;/code&gt;。&lt;br/&gt;如果需要将IP地址插入到数据库的话，需要做防止注入。因此要对上述的IP地址的格式进行截取。&lt;/p&gt;
&lt;h2 id=&quot;nginx-配置如下&quot;&gt;3.1 Nginx 配置如下&lt;/h2&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;    server {
        listen       9461; # 监听端口号
        server_name  localhost 192.168.88.22; # 访问地址
        location / {
            root   项目路径; # 例如：E:/Publish/xxx/;
            index  index.html;
            
            # 此处用于处理 Vue、Angular、React 使用H5 的 History时 重写的问题
            if (!-e $request_filename) {
                rewrite ^(.*) /index.html last;
                break;
            }
        }
        
        # 代理服务端接口
        location /api {
            proxy_pass http://localhost:9460/api;# 代理接口地址
            # Host配置以及域名传递
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;c代码获取真实ip方法&quot;&gt;3.2 C#代码获取真实IP方法&lt;/h2&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;#region Ip(客户端IP地址)

/// &amp;lt;summary&amp;gt;
/// 客户端IP地址
/// &amp;lt;/summary&amp;gt;
public static string Ip
{
    get
    {
        var result = string.Empty;
        if (HttpContext.Current != null)
        {
            result = GetWebClientIp();
        }
        if (string.IsNullOrWhiteSpace(result))
        {
            result = GetLanIp();
        }
        return result;
    }
}

/// &amp;lt;summary&amp;gt;
/// 获取Web客户端的IP
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
private static string GetWebClientIp()
{
    var ip = GetWebProxyRealIp() ?? GetWebRemoteIp();
    foreach (var hostAddress in Dns.GetHostAddresses(ip))
    {
        if (hostAddress.AddressFamily == AddressFamily.InterNetwork)
        {
            return hostAddress.ToString();
        }
    }
    return string.Empty;
}

/// &amp;lt;summary&amp;gt;
/// 获取Web远程IP
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
private static string GetWebRemoteIp()
{
    try
    {
        return HttpContext.Current.Request.ServerVariables[&quot;HTTP_X_FORWARDED_FOR&quot;] ??
               HttpContext.Current.Request.ServerVariables[&quot;REMOTE_ADDR&quot;] ?? &quot;&quot;;
    }
    catch (Exception e)
    {
        return string.Empty;
    }
}

/// &amp;lt;summary&amp;gt;
/// 获取Web代理真实IP
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
private static string GetWebProxyRealIp()
{
    var request = HttpContext.Current.Request;
    string ip = request.Headers.Get(&quot;x-forwarded-for&quot;);

    if (string.IsNullOrEmpty(ip) || string.Equals(&quot;unknown&quot;, ip, StringComparison.OrdinalIgnoreCase))
    {
        ip = request.Headers.Get(&quot;Proxy-Client-IP&quot;);
    }

    if (string.IsNullOrEmpty(ip) || string.Equals(&quot;unknown&quot;, ip, StringComparison.OrdinalIgnoreCase))
    {
        ip = request.Headers.Get(&quot;WL-Proxy-Client-IP&quot;);
    }

    if (string.IsNullOrEmpty(ip) || string.Equals(&quot;unknown&quot;, ip, StringComparison.OrdinalIgnoreCase))
    {
        ip = request.UserHostAddress;
    }

    if (string.IsNullOrEmpty(ip))
    {
        return string.Empty;
    }
    // 可能存在如下格式：X-Forwarded-For: client, proxy1, proxy2
    if (ip.Contains(&quot;, &quot;))
    {
        // 如果存在多个反向代理，获得的IP是一个用逗号分隔的IP集合，取第一个
        // X-Forwarded-For: client  第一个
        string[] ips = ip.Split(new string[1] {&quot;, &quot;}, StringSplitOptions.RemoveEmptyEntries);
        var i = 0;
        for (i = 0; i &amp;lt; ips.Length; i++)
        {
            if (ips[i] != &quot;&quot;)
            {
                // 判断是否为内网IP
                if (false == IsInnerIp(ips[i]))
                {
                    IPAddress realIp;
                    if (IPAddress.TryParse(ips[i], out realIp) &amp;amp;&amp;amp; ips[i].Split('.').Length == 4)
                    {
                        //合法IP
                        return ips[i];
                    }

                    return &quot;&quot;;
                }
            }
        }

        ip = ips[0];// 默认获取第一个IP地址
    }

    return ip;

}

/// &amp;lt;summary&amp;gt;
/// 判断IP地址是否为内网IP地址
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;ip&quot;&amp;gt;IP地址&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
private static bool IsInnerIp(string ip)
{
    bool isInnerIp = false;
    ulong ipNum = Ip2Ulong(ip);

    /**
     * 私有IP
     * A类：10.0.0.0-10.255.255.255
     * B类：172.16.0.0-172.31.255.255
     * C类：192.168.0.0-192.168.255.255
     * 当然，还有127这个网段是环回地址
     */

    ulong aBegin = Ip2Ulong(&quot;10.0.0.0&quot;);
    ulong aEnd = Ip2Ulong(&quot;10.255.255.255&quot;);
    ulong bBegin = Ip2Ulong(&quot;172.16.0.0&quot;);
    ulong bEnd = Ip2Ulong(&quot;10.31.255.255&quot;);
    ulong cBegin = Ip2Ulong(&quot;192.168.0.0&quot;);
    ulong cEnd = Ip2Ulong(&quot;192.168.255.255&quot;);

    isInnerIp = IsInner(ipNum, aBegin, aEnd) || IsInner(ipNum, bBegin, bEnd) || IsInner(ipNum, cBegin, cEnd) ||
                ip.Equals(&quot;127.0.0.1&quot;);
    return isInnerIp;
}

/// &amp;lt;summary&amp;gt;
/// 将IP地址转换为Long型数字
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;ip&quot;&amp;gt;IP地址&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
private static ulong Ip2Ulong(string ip)
{
    byte[] bytes = IPAddress.Parse(ip).GetAddressBytes();
    ulong ret = 0;
    foreach (var b in bytes)
    {
        ret &amp;lt;&amp;lt;= 8;
        ret |= b;
    }

    return ret;
}

/// &amp;lt;summary&amp;gt;
/// 判断用户IP地址转换为Long型后是否在内网IP地址所在范围
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;userIp&quot;&amp;gt;用户IP&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;begin&quot;&amp;gt;开始范围&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;end&quot;&amp;gt;结束范围&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
private static bool IsInner(ulong userIp, ulong begin, ulong end)
{
    return (userIp &amp;gt;= begin) &amp;amp;&amp;amp; (userIp &amp;lt;= end);
}

/// &amp;lt;summary&amp;gt;
/// 获取局域网IP
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
private static string GetLanIp()
{
    foreach (var hostAddress in Dns.GetHostAddresses(Dns.GetHostName()))
    {
        if (hostAddress.AddressFamily == AddressFamily.InterNetwork)
        {
            return hostAddress.ToString();
        }
    }
    return string.Empty;
}
#endregion&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 09 Jan 2018 16:18:00 +0000</pubDate>
<dc:creator>简玄冰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jianxuanbing/p/8254284.html</dc:identifier>
</item>
<item>
<title>机器学习笔记3-Tensorflow简介 - 无上@诀</title>
<link>http://www.cnblogs.com/wushangjue/p/8254232.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wushangjue/p/8254232.html</guid>
<description>&lt;p&gt;前面两篇主要写了一些机器学习的基础概念，从本篇开始我们来了解下深度学习。深度学习是机器学习的一个子集，是一种特殊的数学模型。同样是从输入到输出，深度学习在这两者之间会有很多层称为“隐层”（&lt;code&gt;Hidden Layers&lt;/code&gt;）的层，每一层将会将输入内容进行计算并自我调节，最终得到合理模型，这种数学模型非常像人类目前对大脑工作原理的认知，所以也称之为“人工神经网络”。&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/simple_neural_network.jpg&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/simple_neural_network.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在市面上有数十种深度学习框架：&lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_deep_learning_software&quot; target=&quot;_blank&quot;&gt;Wiki传送门&lt;/a&gt;。一个个学过来肯定精力不够，那我们就学综合评分最高的那个：&lt;code&gt;Tensorflow&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tensorflow&lt;/code&gt;是由Google团队在2015年11月9日以&lt;code&gt;Apache 2.0开源许可证&lt;/code&gt;开源的，但刚发布的版本有诸多缺陷：bug比较多、性能比较差、使用难度比较高。在2017年2月16日，Google宣布&lt;code&gt;Tensorflow 1.0&lt;/code&gt;正式发布，该版本适用于工业生产场景。所以在该版本发布之后，对深度学习领域产生了极大的影响，其大大简化了编写深度学习的代码难度，并且在Google这面大旗下，被各种专业人员以及机器学习爱好者所推崇（截止2018年1月9日，&lt;code&gt;Tensorflow&lt;/code&gt;在&lt;a href=&quot;https://github.com/tensorflow/tensorflow&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;上已经有7193个Watch，85038个Star和41555个Fork）。&lt;br/&gt;&lt;code&gt;Tensorflow&lt;/code&gt;在短短发布后的一年不到的时间里，已经跃居为综合排名第一的深度学习框架。为什么会如此火爆呢？我个人猜测理由如下：&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;深度学习目前是大趋势（所以得抓紧学习，抓住机遇）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Google的技术实力太强大，开源过很多项目都非常成功（比如&lt;code&gt;Android&lt;/code&gt;），所以跟着Google走可能不会让我们失望&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接口丰富易用且支持多种语言（底层是C++实现的，这里指的是客户端调用底层API的语言），如Python、C++、Java、Go&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;易于部署，包括分布式部署&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你的电脑性能还不错，可以考虑直接在本机安装&lt;code&gt;Tensorflow&lt;/code&gt;（&lt;a href=&quot;https://www.tensorflow.org/install/index&quot; target=&quot;_blank&quot;&gt;官方安装文档传送门&lt;/a&gt;），优先考虑使用&lt;code&gt;Anaconda&lt;/code&gt;来安装，按照官方教程一步步执行即可。&lt;/p&gt;
&lt;p&gt;安装之后，需要在&lt;code&gt;Pycharm&lt;/code&gt;中执行&lt;code&gt;Tensorflow&lt;/code&gt;的代码，我们这里先用简单的输出常量的代码为例（此代码也是后文中&lt;code&gt;demo1.py&lt;/code&gt;中的代码）：&lt;/p&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;import tensorflow as tf

node1 = tf.constant(3.0, dtype=tf.float32)
node2 = tf.constant(4.0) # also tf.float32 implicitly
print(node1, node2)

sess = tf.Session()
print(sess.run([node1, node2]))&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;常见错误汇总&quot;&gt;常见错误汇总&lt;/h2&gt;
&lt;p&gt;执行代码的时候，你可能会遇到很多错误，我这里整理了一份我在此过程中遇到的错误以及对应的解决方案供大家参考：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;9.0529411764706&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.1475409836066&quot;&gt;&lt;td&gt;Anaconda installation is not found&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://stackoverflow.com/questions/47624777/pycharm-anaconda-installation-is-not-found&quot; class=&quot;uri&quot;&gt;https://stackoverflow.com/questions/47624777/pycharm-anaconda-installation-is-not-found&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6.3&quot;&gt;&lt;td&gt;ImportError: Could not find 'cudart64_80.dll'. TensorFlow requires that this DLL be installed in a directory that is named in your %PATH% environment variable.&lt;/td&gt;
&lt;td&gt;由于目前Tensorflow是建立在CUDA 8.0之上的，而NVIDIA官网上默认是下载CUDA最新版本的（比如目前是9.0），所以需要打开如下页面： &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot; class=&quot;uri&quot;&gt;https://developer.nvidia.com/cuda-downloads&lt;/a&gt; 在页面的最下面找到Lagacy Releases并下载CUDA 8.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;9.4654088050314&quot;&gt;&lt;td&gt;ImportError: Could not find 'cudnn64_6.dll'. TensorFlow requires that this DLL be installed in a directory that is named in your %PATH% environment variable. Note that installing cuDNN is a separate step from installing CUDA, and this DLL is often found in a different directory from the CUDA DLLs. You may install the necessary DLL by downloading cuDNN 6 from this URL: &lt;a href=&quot;https://developer.nvidia.com/cudnn&quot; class=&quot;uri&quot;&gt;https://developer.nvidia.com/cudnn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;注册一个NVEDIA的开发者账号，然后下载cudnn64 for cuda8 on windows。 下载下来的文件解压之后，放到cuda目录下对应的地方（cuda比如是在C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0）&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;解决了所有问题之后，如果看到以下输出内容，就表示能正常运行&lt;code&gt;Tensorflow&lt;/code&gt;了：&lt;/p&gt;
&lt;pre class=&quot;python3&quot;&gt;
&lt;code&gt;Tensor(&quot;Const:0&quot;, shape=(), dtype=float32) Tensor(&quot;Const_1:0&quot;, shape=(), dtype=float32)
2018-01-09 16:48:59.940050: I C:\tf_jenkins\home\workspace\rel-win\M\windows\PY\36\tensorflow\core\platform\cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2
[3.0, 4.0]

Process finished with exit code 0&lt;/code&gt;
&lt;/pre&gt;



&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;因为机器学习的过程非常耗性能，如果在一个比较大的数据集上进行学习，本机CPU使用就会达到99%，而且要持续很久，这个时候就无法干点别的事了。很幸运，阿里云提供了机器学习平台&lt;code&gt;PAI&lt;/code&gt;（Platform for Artificial Intelligence），里面集成了很多主流的算法以及Tensorflow的不同版本（目前是1.0、1.1、1.2），而且目前公测阶段也可以开启2个GPU来加快执行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PAI&lt;/code&gt;的优势有：&lt;/p&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不需要本地繁琐的安装和解决各种安装坑&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;可以调用云服务器资源，比起本地性能更好&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;不影响、阻塞本机其他程序的使用，开始执行之后等着执行完毕即可&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;算法、组件都是现成的，而且可以用拖拽的方式编排算法，非常方便、傻瓜化，我们唯一要做的就是提供数据和编写核心执行脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;现成的机器学习案例以及相关文档，可以快速从别人的经验中来帮助自己理解机器学习&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;将实验直接共享到社区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公测阶段免费&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;操作概览&quot;&gt;操作概览&lt;/h2&gt;
&lt;p&gt;开通PAI的过程并不复杂，大致步骤如下：&lt;/p&gt;
&lt;ul readability=&quot;3.0071301247772&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;首先你要有一个阿里云账号&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在阿里云后台进入&lt;code&gt;大数据（数加）&lt;/code&gt;-&amp;gt;&lt;code&gt;机器学习&lt;/code&gt;菜单&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;创建一个项目，如： &lt;code&gt;my_project_name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在项目管理页面，勾选&lt;code&gt;my_project_name&lt;/code&gt;的&lt;code&gt;开启GPU&lt;/code&gt;选项&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.5485714285714&quot;&gt;
&lt;p&gt;为了方便上传本地资源到PAI，建议安装&lt;code&gt;OSS-Browser&lt;/code&gt;工具，下载地址： &lt;a href=&quot;https://help.aliyun.com/document_detail/61872.html?spm=5176.doc31886.2.5.qwodVb&quot; class=&quot;uri&quot;&gt;https://help.aliyun.com/document_detail/61872.html?spm=5176.doc31886.2.5.qwodVb&lt;/a&gt; （以阿里云后台最新下载地址为准），如果是少量文件上传的话，使用web版OSS文件管理系统来管理文件也可以（本例中我们直接使用web版）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;PS:&lt;code&gt;开启GPU&lt;/code&gt;选项示意图：&lt;/em&gt;&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/turn_on_gpu.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/turn_on_gpu.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;目前公测阶段虽然&lt;code&gt;PAI&lt;/code&gt;本身是免费的，但是OSS是收费的，好在费用很低，仅作学习用的话，一天最多几分钱。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;详细实验步骤&quot;&gt;详细实验步骤&lt;/h2&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在OSS中创建测试目录&lt;code&gt;tensorflowtest&lt;/code&gt;：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/oss1.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/oss1.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;进入&lt;code&gt;tensorflowtest&lt;/code&gt;目录并上传脚本文件&lt;code&gt;demo1.py&lt;/code&gt;（内容详见“本机安装Tensorflow”一节）：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/oss2.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/oss2.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;进入&lt;code&gt;PAI&lt;/code&gt;后台首页，创建空白实验&lt;code&gt;tensorflowdemo&lt;/code&gt;：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/create_tensorflow.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/create_tensorflow.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/create_tensorflow_2.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/create_tensorflow_2.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在空白实验中加入&lt;code&gt;读OSS Bucket&lt;/code&gt;组件和&lt;code&gt;TensorFlow(V1.2)&lt;/code&gt;组件，并选中Tensorflow节点，在右侧的参数设置中，将&lt;code&gt;Python代码&lt;/code&gt;参数选为我们在步骤1、2中上传的&lt;code&gt;demo1.py&lt;/code&gt;文件：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/execute.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/execute.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;点击屏幕最下方的&lt;code&gt;运行&lt;/code&gt;按钮执行实验：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/execute2.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/execute2.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;em&gt;本例中&lt;code&gt;读OSS Bucket&lt;/code&gt;组件并没有什么用，由于PAI实验中必须要数据源节点，因此添加空的&lt;code&gt;读OSS Bucket&lt;/code&gt;组件作为数据源，因此在执行实验的时候，阿里云将检测并提示当前实验室作业实验，将会在24小时内删除。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;查看执行结果&quot;&gt;查看执行结果&lt;/h2&gt;
&lt;ol readability=&quot;3.3121645796064&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在实验运行后，每个节点右侧出现一个绿色的勾，表示已正确执行完毕，此时右键该节点，选择&lt;code&gt;查看日志&lt;/code&gt;选项：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/view_log_1.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/view_log_1.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在“查看日志”弹出框中，滚动到中间的位置，找到 &lt;a href=&quot;http://logview.odps.aliyun.com&quot; class=&quot;uri&quot;&gt;http://logview.odps.aliyun.com&lt;/a&gt; 的链接，如图位置：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/logview_1.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/logview_1.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;鼠标左键点击进入之后，点击下图中红色框中的&lt;code&gt;detail&lt;/code&gt;图标：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/log_detail_1.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/log_detail_1.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在弹出的Log Detail页面上，按下图中的1、2、3顺序依次点击：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/log_detail_2.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/log_detail_2.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在弹出的&lt;code&gt;Logview[Stdout]&lt;/code&gt;页面上，可以最终看到脚本的实际输出内容，与在本地IDE中的输出一致：&lt;br/&gt;&lt;a href=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/log_view_3.png&quot;&gt;&lt;img src=&quot;https://www.fujiabin.com/wp-content/uploads/2018/01/log_view_3.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我已经用两种不同的方式，执行了第一个基于&lt;code&gt;Tensorflow&lt;/code&gt;的demo，这个demo目前跟深度学习还完全搭不上边，只是能成功运行&lt;code&gt;Tensorflow&lt;/code&gt;而已，后续的博文中，我将进一步深入研究。&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;本文在&lt;a href=&quot;http://www.cnblogs.com/wushangjue/&quot; target=&quot;_blank&quot;&gt;我的博客园&lt;/a&gt;和&lt;a href=&quot;https://www.fujiabin.com&quot; target=&quot;_blank&quot;&gt;我的个人博客&lt;/a&gt;上同步发布，作者保留版权，转载请注明来源。&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 16:03:00 +0000</pubDate>
<dc:creator>无上@诀</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wushangjue/p/8254232.html</dc:identifier>
</item>
<item>
<title>使用ui-route实现多层嵌套路由 - 孟丽媛</title>
<link>http://www.cnblogs.com/Anita-meng/p/8254163.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Anita-meng/p/8254163.html</guid>
<description>&lt;p&gt;一、预期实现效果：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://liyuan-meng.github.io/uiRouter-app/index.html&quot; rel=&quot;nofollow&quot;&gt;https://liyuan-meng.github.io/uiRouter-app/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;（项目地址：https://github.com/liyuan-meng/uiRouter-app）&lt;/p&gt;
&lt;p&gt;二、分析题目要求，给出依赖关系，构建项目&lt;/p&gt;
&lt;p&gt;1. service:&lt;/p&gt;
&lt;p&gt;（1）根据条件查询people数据checkPeople.service，不给出条件则查询所有。&lt;/p&gt;
&lt;p&gt;（2）得到路由信息getStateParams.service。&lt;/p&gt;
&lt;p&gt;2. components:&lt;/p&gt;
&lt;p&gt;（1）hello模块：点击button按钮更改内容。&lt;/p&gt;
&lt;p&gt;（2）peolpleList模块：显示people列表，点击people显示people详情。依赖于checkPeople.service模块。&lt;/p&gt;
&lt;p&gt;（3）peopleDetail模块：显示people详情，依赖于checkPeople.service模块和getStateParams.service模块。&lt;/p&gt;
&lt;p&gt;3. 构建项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/967867/201801/967867-20180109223325644-749286516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如图所示：component目录用来保存所有服务模块和业务模块，lib目录保存外部引用（我是用的是angular.js1.5.8和ui-route0.2.18），app.config.js文件用来配置路由，index.html则作为入口文件。&lt;/p&gt;
&lt;p&gt;三、实现这个例子&lt;/p&gt;
&lt;p&gt;1. 首页index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./lib/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./lib/angular-ui-route.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./app.config.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/core/people/checkPeople.service.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/core/people/getStateParams.service.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/hello/hello.component.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/people-list/people-list.component.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/people-detail/people-detail.component.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;helloSolarSystem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;ui-sref&lt;/span&gt;&lt;span&gt;=&quot;helloState&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;ui-sref&lt;/span&gt;&lt;span&gt;=&quot;aboutState&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;About&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;ui-sref&lt;/span&gt;&lt;span&gt;=&quot;peopleState&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;People&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）导入lib中的文件以及所有用到的service和component服务的文件。&lt;/p&gt;
&lt;p&gt;（2）ng-app=&quot;helloSolarSystem&quot;指明了从helloSolarSystem模块开始解析。&lt;/p&gt;
&lt;p&gt;（3）定义视图&amp;lt;ui-view&amp;gt;&amp;lt;/ui-view&amp;gt;&lt;/p&gt;
&lt;p&gt;2. 配置路由app.config.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;helloSolarSystem&quot;, ['peopleList', 'peopleDetail', 'hello','ui.router'&lt;span&gt;]).

    config([&lt;/span&gt;'$stateProvider', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($stateProvider) {

        $stateProvider.state(&lt;/span&gt;'helloState'&lt;span&gt;, {
            url: &lt;/span&gt;'/helloState'&lt;span&gt;,
            template:&lt;/span&gt;'&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;'&lt;span&gt;

        }).state(&lt;/span&gt;'aboutState'&lt;span&gt;, {
            url: &lt;/span&gt;'/about'&lt;span&gt;,
            template: &lt;/span&gt;'&amp;lt;h4&amp;gt;Its the UI-Router Hello Solar System app!&amp;lt;/h4&amp;gt;'&lt;span&gt;

        }).state(&lt;/span&gt;'peopleState'&lt;span&gt;, {
            url: &lt;/span&gt;'/peopleList'&lt;span&gt;,
            template:&lt;/span&gt;'&amp;lt;people-list&amp;gt;&amp;lt;/people-list&amp;gt;'&lt;span&gt;

        }).state(&lt;/span&gt;'peopleState.details'&lt;span&gt;, {
            url:&lt;/span&gt;'/detail/:id'&lt;span&gt;,
            template: &lt;/span&gt;'&amp;lt;people-detail&amp;gt;&amp;lt;/people-detail&amp;gt;'&lt;span&gt;
        })
    }
]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）模块名字：helloSolarSystem；&lt;/p&gt;
&lt;p&gt;（2）注入'peopleList', 'peopleDetail', 'hello','ui.router'模块。&lt;/p&gt;
&lt;p&gt;（3）配置stateProvider服务的视图控制，例如第一个名为helloState的视图控制器：当ui-sref == &quot;helloState&quot;的时候，路由更新为url的值#/helloState，并且&amp;lt;ui-view&amp;gt;&amp;lt;/ui-view&amp;gt;中显示的内容为&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;组件解析出的内容。&lt;/p&gt;
&lt;p&gt;（4）嵌套路由的实现：名为peopleState的视图控制器是父路由。名为peopleState.details的视图控制器是子路由。这是一种相对路由方式，父路由将匹配.../index.html#/peopleState/，子路由将匹配.../index.html#/peopleState/detail/x（x是/detail/:id中的id的值）。如果改成绝对路由的形式，只需要写成url:'^/detail/:id',这时子路由将匹配.../index.html#/detail/x（x是/detail/:id中的id的值）。&lt;/p&gt;
&lt;p&gt;4. 实现checkPeople.service（根据条件查找people）&lt;/p&gt;
&lt;p&gt;checkPeople.sercice.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据条件（参数）查找信息。&lt;/span&gt;
angular.module('people.checkPeople', ['ui.router'&lt;span&gt;]).
    factory(&lt;/span&gt;'CheckPeople', ['$http', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($http) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
            getData: getData
        };
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getData(filed) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; people;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; promise =&lt;span&gt;  $http({
                method: &lt;/span&gt;'GET'&lt;span&gt;,
                url: &lt;/span&gt;'./data/people.json'&lt;span&gt;
            }).then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (response) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (filed) {
                    people &lt;/span&gt;= response.data.filter(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Number(value.id) ===&lt;span&gt; Number(filed)) {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
                        }
                    })
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    people &lt;/span&gt;=&lt;span&gt; response.data;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; people;
            });
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; promise;
        }
    }]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）在getData这个函数中，我们想要返回一个保存people信息的数组，但是由于使用$http().then()服务的时候，这是一个异步请求，我们并不知道请求什么时候结束，所以世界返回people数组是有问题的。我们注意到，$http().then()是一个Promise对象，所以我们可以想到直接将这个对象返回，这样在就可以使用&quot;函数的结果.then(function(data))&quot;来得到异步请求拿来的数据data。&lt;/p&gt;
&lt;p&gt;3. 实现getStateParams.service（获取路由信息）&lt;/p&gt;
&lt;p&gt;getStatePatams.service.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&quot;use strict&quot;&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;getStateParams&quot;, ['ui.router'&lt;span&gt;]).
    factory(&lt;/span&gt;&quot;GetStateParams&quot;, [&quot;$location&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($location) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
            getParams: getParams
        };
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getParams() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; partUrlArr = $location.url().split(&quot;/&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; partUrlArr[partUrlArr.length-1&lt;span&gt;];
        }
}]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）这里的getParams函数返回的是路由信息的最后一个数据，也就是people的id，这个service有些特殊，不够通用，可能还需要优化一下会更加合理。不过并不影响我们的需求。&lt;/p&gt;
&lt;p&gt;4. 实现hello模块&lt;/p&gt;
&lt;p&gt;hello.template.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-hide&lt;/span&gt;&lt;span&gt;=&quot;hideFirstContent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hello solar sytem!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-hide&lt;/span&gt;&lt;span&gt;=&quot;!hideFirstContent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;whats up solar sytem!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;ng-click&lt;/span&gt;&lt;span&gt;=&quot;ctlButton()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;click&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hello.component.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;hello&quot;&lt;span&gt;, [])
    .component(&lt;/span&gt;'hello'&lt;span&gt;, {
        templateUrl: &lt;/span&gt;'./components/hello/hello.template.html'&lt;span&gt;,
        controller: [&lt;/span&gt;&quot;$scope&quot;&lt;span&gt;, 
            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; HelloController($scope) {
                $scope.hideFirstContent &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                $scope.ctlButton &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hideFirstContent = !&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.hideFirstContent;
                };
            }
        ]
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5. 实现peolpeList模块：&lt;/p&gt;
&lt;p&gt;peopleList.template.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;ng-repeat&lt;/span&gt;&lt;span&gt;=&quot;item in people&quot;&lt;/span&gt;&lt;span&gt; ui-sref&lt;/span&gt;&lt;span&gt;=&quot;peopleState.details({id:item.id})&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）这里的&amp;lt;ui-view&amp;gt;&amp;lt;/ui-view&amp;gt;用来显示peopleList的子组件pepleDetail&lt;/p&gt;
&lt;p&gt;peopleList.component.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;peopleList&quot;, ['people.checkPeople'&lt;span&gt;])
    .component(&lt;/span&gt;'peopleList'&lt;span&gt;, {
        templateUrl: &lt;/span&gt;'./components/people-list/people-list.template.html'&lt;span&gt;,
        controller: [&lt;/span&gt;'CheckPeople','$scope'&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; PeopleListController(CheckPeople, $scope) {
                $scope.people &lt;/span&gt;=&lt;span&gt; [];
                CheckPeople.getData().then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                    $scope.people &lt;/span&gt;=&lt;span&gt; data;
                });
            }
        ]
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6. 实现peopleDetail模块&lt;/p&gt;
&lt;p&gt;peopleDetail.template.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;ng-repeat&lt;/span&gt;&lt;span&gt;=&quot;item in peopleDetails track by $index&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;名字： {{item.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;介绍： {{item.intro}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;peopleDetail.component.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;peopleDetail&quot;, ['people.checkPeople', 'getStateParams'&lt;span&gt;])
    .component(&lt;/span&gt;'peopleDetail'&lt;span&gt;, {
        templateUrl: &lt;/span&gt;'./components/people-detail/people-detail.template.html'&lt;span&gt;,
        controller: [&lt;/span&gt;'CheckPeople', 'GetStateParams', '$scope'&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; peopleDetailController(CheckPeople, GetStateParams, $scope) {
                $scope.peopleDetails &lt;/span&gt;=&lt;span&gt; [];
                CheckPeople.getData(GetStateParams.getParams()).then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                    $scope.peopleDetails &lt;/span&gt;=&lt;span&gt; data;
                });
            }
        ]
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.源码：&lt;/p&gt;
&lt;p&gt;https://github.com/liyuan-meng/uiRouter-app&lt;/p&gt;

</description>
<pubDate>Tue, 09 Jan 2018 15:31:00 +0000</pubDate>
<dc:creator>孟丽媛</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Anita-meng/p/8254163.html</dc:identifier>
</item>
<item>
<title>[UWP]如何使用Fluent Design System (上) - dino.c</title>
<link>http://www.cnblogs.com/dino623/p/FluentDesignSystem.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dino623/p/FluentDesignSystem.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;1. 前言&lt;/h2&gt;
&lt;p&gt;微软在&lt;a href=&quot;https://news.microsoft.com/build2017/&quot;&gt;Build 2017&lt;/a&gt;中公布了新的设计语言Fluent Design System（以下简称FDS），不过&lt;a href=&quot;https://fluent.microsoft.com/&quot;&gt;官网&lt;/a&gt;只是堆砌了各种华丽的词语以及一堆动画。至于在UWP中要做成怎么样，怎么做，可以参考这个视频：&lt;br/&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Build/2017/B8034&quot;&gt;Build Amazing Apps with Fluent Design - Build 2017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频中使用&lt;a href=&quot;https://github.com/Microsoft/BuildCast&quot;&gt;BuildCast&lt;/a&gt;这个示例应用详细展示了Fall Creators Update(16299)中如何实现FDS以及其它FCU的新API，极具参考价值。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230136831-1614533023.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;或者参考&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/fluent-design-system/index&quot;&gt;开发人员官网&lt;/a&gt;，这里详细介绍了FDS的五大核心主题（Material（材质）、Light（光照）、Depth（深度）、Motion（动态）和 Scale（伸缩性））相关功能及使用规范。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;好像没见到专门提供给设计人员的FDS指南？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;fall-creators-update中的fluent-design-system&quot;&gt;2. Fall Creators Update中的Fluent Design System&lt;/h2&gt;
&lt;p&gt;本文主要介绍微软在Fall Creators Update中主打的各种FDS特效、控件。&lt;/p&gt;
&lt;h3 id=&quot;material&quot;&gt;2.1 Material&lt;/h3&gt;
&lt;p&gt;材质是FDS最好玩的主题，以往主推的Metro强调去材质化，现在又重新提把材质捡回来。不过目前FDS中材质的应用场景有明确规定，并不是和以前材质化泛滥时一样连所有按钮都材质化。从材质的回归可以看出UWP的承载主体已经从屏幕延伸到MR。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/style/acrylic&quot;&gt;Acrylic&lt;/a&gt;是目前FDS主打的材质。在Fall Creators Update之前计算器等几个应用已经用上了这个特效，效果看起来还不错。Acrylic除了负责展现材质化的效果，还负责营造有深度的UI。简单来说Acrylic只是一个Brush，UWP提供了一组Acrylic Brush给开发者使用，通过ThemeResource找到资源名字中包含“Acrylic”的Brush即可轻松在应用中使用Acrylic，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Grid&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource SystemControlAcrylicElementBrush}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Acrylic包含两种。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Background acrylic&lt;/strong&gt; 透视整个应用UI，可以看到应用窗体后的其它应用或桌面（在ThemeResource中名称包含 -AcrylicWindow-）。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230328237-1735800495.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;In-app acrylic&lt;/strong&gt; 只透视套用了acrylic brush的元素（在ThemeResource中名称包含 -AcrylicElement-）。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230332346-1903584429.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;light&quot;&gt;2.2 Light&lt;/h3&gt;
&lt;p&gt;UWP使用&lt;a href=&quot;https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Composition.CompositionLight&quot;&gt;CompositionLight&lt;/a&gt;可以制造很多很有趣的光照效果，FDS主打的光照特效是&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/style/reveal&quot;&gt;Reveal&lt;/a&gt;，在FCU中大部分Items Control（ListView、GridView等）都默认启用了Reveal特效，一些Button控件也可以通过套用Style启用这个特效。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Button Content&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{StaticResource ButtonRevealStyle}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230427003-1368146291.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Reveal最大的特点是鼠标靠近时控件的边框会被照亮，这对于无边框按钮或ListViewItem可以在不破坏其简约设计的前提下提示其可操作区域。（或许在MR中Reveal有更多的应用场景。）&lt;/p&gt;
&lt;h3 id=&quot;depth&quot;&gt;2.3 Depth&lt;/h3&gt;
&lt;p&gt;即使在强调扁平化的时代，深度仍是设计师关心的一个主题。FCU中除了使用Acrylic营造有深度的UI，还新增了&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/motion/parallax&quot;&gt;ParallaxView&lt;/a&gt;控件，可以制作简单的视差滚动效果。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ParallaxView&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;parallaxView&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;              Source=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{Binding ElementName=listView}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;              VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Top&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;              HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Left&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;              VerticalShift=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;50&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Source=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ms-appx:///Assets/cliff.jpg&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ParallaxView&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ListView&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;listView&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;          HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Stretch&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;          VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Top&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;          Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#80000000&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;Item 1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;Item 2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;Item 3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ListView.ItemTemplate&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;DataTemplate&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextBlock&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{Binding}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                       Foreground=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;White&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DataTemplate&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ListView.ItemTemplate&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ListView&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230745206-275023596.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;motion&quot;&gt;2.4 Motion&lt;/h3&gt;
&lt;p&gt;UWP控件自带的动画已经不少，&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/motion/connected-animation&quot;&gt;Connected animations&lt;/a&gt;则更进一步。Connected animations通常用于在导航中引导视觉，定位操作对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180109162315113-162034370.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比起默认的写法，我更喜欢UWP Community Toolkit封装好的 &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwpcommunitytoolkit/animations/ConnectedAnimations&quot;&gt;Connected Animations 附加属性&lt;/a&gt;。只需在源页面和目标页面的操作对象使用相同的Connected.Key即可轻松实现Connected animations。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MotionPage.xaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Border&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource SystemControlForegroundAccentBrush}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        animations:Connected.Key=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Tapped=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Border_Tapped&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;MotionPage.xaml.cs&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;navigationService.&lt;span class=&quot;fu&quot;&gt;NavigateToPage&lt;/span&gt;&amp;lt;ConnectedAnimations2ndPage&amp;gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;ConnectedAnimations2ndPage.xaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Border&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;HeroElement&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;300&quot;&lt;/span&gt; 
&lt;span class=&quot;ot&quot;&gt;        Width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;300&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource SystemControlForegroundAccentBrush}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        animations:Connected.Key=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106231004878-1148575734.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;scale&quot;&gt;2.5 Scale&lt;/h3&gt;
&lt;p&gt;在FDS中，伸缩性这个主题比较特殊。它没有主打的控件或API，简单地理解成适应各种屏幕尺寸的响应式设计也可以，但我更愿意将它的主旨理解成设计可以在0D到3D的形式中延伸，即可以适应从语言到鼠标、键盘、触摸、MR等各种形式的输入和输出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106231211924-1745685927.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对设计师和开发人员来说这个主题可能不太有趣，毕竟它看起来只是繁琐，一点都不华丽。但我觉得重申这个主题十分重要，UWP诞生的目的就是为了打造能在各种设备上运行的通用应用，伸缩性对UWP至关重要。即使只针对桌面设备，能有各种输入方式对可用性都有很大提高。可惜随着最近移动系统的流行，设计师越来越习惯设计只针对触摸的UI，连带影响到桌面应用，快捷键越来越少，有些设计师甚至拒绝提供按钮的PointerOver效果。希望随着设计规范及控件的完善这个问题能有所改善吧。&lt;/p&gt;
&lt;h2 id=&quot;在fall-creators-update中升级应用&quot;&gt;3. 在Fall Creators Update中升级应用&lt;/h2&gt;
&lt;p&gt;在Fall Creators Update中只需要修改导航及标题栏，应用的UI即可有大幅提升。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106231601987-1690497169.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用navigationview更新导航菜单&quot;&gt;3.1 使用NavigationView更新导航菜单&lt;/h3&gt;
&lt;p&gt;以前很多教程都专门讲解了怎么制作汉堡包菜单，现在UWP终于提供了默认方案。&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/navigationview&quot;&gt;NavigationView&lt;/a&gt;是Fall Creators Update提供的新导航菜单，它应用了FDS最常用的两个特效：Acrylic和Reveal，可以折叠及最小化，使用简单：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationView&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; IsSettingsVisible=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;True&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;NavigationView&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                AlwaysShowHeader=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;False&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                ItemInvoked=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;NavigationView_ItemInvoked&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                x:FieldModifier=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Public&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationView.MenuItems&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Material&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                            IsSelected=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Light&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Motion&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Depth&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Scale&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationView.MenuItems&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Frame&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;RootFrame&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Navigated=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;RootFrame_Navigated&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Frame&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationView&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;将内容扩展到标题栏&quot;&gt;3.2 将内容扩展到标题栏&lt;/h3&gt;
&lt;p&gt;在程序启动或每次更改主题颜色时调用&lt;code&gt;SetupTitlebar()&lt;/code&gt;这个函数，注意要根据当前主题颜色改变TitleBar上按钮的颜色（因为官方文档上没有，所以很多人会忘了处理按钮的颜色）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SetupTitlebar&lt;/span&gt;()
{
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ApiInformation.&lt;span class=&quot;fu&quot;&gt;IsTypePresent&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Windows.UI.ViewManagement.ApplicationView&quot;&lt;/span&gt;))
    {
        &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; titleBar = ApplicationView.&lt;span class=&quot;fu&quot;&gt;GetForCurrentView&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;TitleBar&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (titleBar != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
        {
            titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonBackgroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Transparent&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;TrueTheme&lt;/span&gt;() == ElementTheme.&lt;span class=&quot;fu&quot;&gt;Dark&lt;/span&gt;)
            {
                titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;White&lt;/span&gt;;
                titleBar.&lt;span class=&quot;fu&quot;&gt;ForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;White&lt;/span&gt;;
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
            {
                titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Black&lt;/span&gt;;
                titleBar.&lt;span class=&quot;fu&quot;&gt;ForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Black&lt;/span&gt;;
            }

            titleBar.&lt;span class=&quot;fu&quot;&gt;BackgroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Black&lt;/span&gt;;

            titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonInactiveBackgroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Transparent&lt;/span&gt;;
            titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonInactiveForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;LightGray&lt;/span&gt;;

            CoreApplicationViewTitleBar coreTitleBar = TitleBarHelper.&lt;span class=&quot;fu&quot;&gt;Instance&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;TitleBar&lt;/span&gt;;

            coreTitleBar.&lt;span class=&quot;fu&quot;&gt;ExtendViewIntoTitleBar&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        }
    }
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; ElementTheme &lt;span class=&quot;fu&quot;&gt;TrueTheme&lt;/span&gt;()
{
    &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; frameworkElement = Window.&lt;span class=&quot;fu&quot;&gt;Current&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; FrameworkElement;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; frameworkElement.&lt;span class=&quot;fu&quot;&gt;ActualTheme&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主页中使用TextBlock代替应用标题：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;TextBlock&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;WindowTitle&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource CaptionTextBlockStyle}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Visibility=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{x:Bind TitleHelper.TitleVisibility, Mode=OneWay}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Margin=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{x:Bind TitleHelper.TitlePosition, Mode=OneWay}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Top&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{x:Bind appmodel:Package.Current.DisplayName}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我自己的&lt;a href=&quot;https://github.com/DinoChan/Colorful-Box&quot;&gt;ColorfulBox&lt;/a&gt;应用在使用上述方案升级后外观有了不少改善（请忽略标题没有垂直居中这个小错误）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106234840143-283547442.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（待续...）&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 15:22:00 +0000</pubDate>
<dc:creator>dino.c</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dino623/p/FluentDesignSystem.html</dc:identifier>
</item>
<item>
<title>【软件】关于Notepad++（32位） - Cherry_波克比</title>
<link>http://www.cnblogs.com/cherry611557/p/8254102.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cherry611557/p/8254102.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.Notepad++安装包&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简介：NotePad++是一个轻量级的代码编辑器，占用内存少，运行速度快。&lt;/p&gt;
&lt;p&gt;官网网址：&lt;a title=&quot;Notepad++_download&quot; href=&quot;https://notepad-plus-plus.org/download/v7.5.4.html&quot; target=&quot;_blank&quot;&gt;https://notepad-plus-plus.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;百度网盘：&lt;a title=&quot;Notepad++_download_baidupan&quot; href=&quot;https://pan.baidu.com/s/1gg7M6eJ&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1gg7M6eJ&lt;/a&gt;（密码：dnud）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1065837/201801/1065837-20180109214638207-1459812585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.Notepad++插件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）NppAStyle.dll&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简介：Notepad++本来是没有自动缩进（格式化）的功能的，NppAStyle可以让代码风格看起来更美观。&lt;/p&gt;
&lt;p&gt;官网网址：&lt;a title=&quot;NppAStyle.dll_download&quot; href=&quot;https://sourceforge.net/projects/nppastyle/files/&quot; target=&quot;_blank&quot;&gt;https://sourceforge.net/projects/nppastyle/files/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1065837/201801/1065837-20180109214525097-543517789.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;百度网盘：&lt;a title=&quot;NppAStyle.dll_download_baidupan&quot; href=&quot;https://pan.baidu.com/s/1sm2c2Vr&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1sm2c2Vr&lt;/a&gt;（密码：h3z1）&lt;/p&gt;
&lt;p&gt;备注：官网和百度网盘下载下来的压缩文件内均包含两个文件夹ansi和unicode，ansi是标准编码，支持语言少；unicode是通用编码，支持较多语言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1065837/201801/1065837-20180109220623957-721114169.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装方法：只需将NppAStyle.dll文件解压到Notepad++所在的安装文件的Plugins文件下即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1065837/201801/1065837-20180109230205472-750249322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Note：&lt;/p&gt;

</description>
<pubDate>Tue, 09 Jan 2018 15:07:00 +0000</pubDate>
<dc:creator>Cherry_波克比</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cherry611557/p/8254102.html</dc:identifier>
</item>
<item>
<title>QuickStart系列：docker部署之Elasticsearch - yusina</title>
<link>http://www.cnblogs.com/wtujvk/p/8254101.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wtujvk/p/8254101.html</guid>
<description>&lt;p&gt;&lt;span&gt;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。---选自&lt;a title=&quot;elasticsearch&quot; href=&quot;https://baike.so.com/doc/6990701-7213557.html&quot; target=&quot;_blank&quot;&gt;百度百科&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;官方文档：&lt;a title=&quot;官网elasticsearch&quot; href=&quot;https://www.elastic.co/cn/&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/cn/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当前版本 6.1.0（2018.1.9）这里使用的是 开发环境 是为了快速部署 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;环境: VM虚拟机12上 CentOS7 ,Docker 是ce版本，分配内存4G &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;或者 将目录挂载在宿主机上：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;docker run -p 9200:9200 -p 9300:9300 -v /opt/data/elasticsearch/esdata  /usr/share/elasticsearch/data -e &quot;discovery.type=single-node&quot; elasticsearch&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 -v 表示挂载docker容器里目录到宿主机的命令 /opt/data/elasticsearch/esdata是宿主机的目录  /usr/share/elasticsearch/data是容器里面的目录&lt;/p&gt;
&lt;p&gt;elasticsearch是镜像名，默认是latest版本 也可以加上版本号 例如 elasticsearch:5.6.1&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Docker安装Elasticsearch： &lt;a title=&quot;Docker安装elasticsearch&quot; href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 15:06:00 +0000</pubDate>
<dc:creator>yusina</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wtujvk/p/8254101.html</dc:identifier>
</item>
<item>
<title>【读书笔记与思考】《python数据分析与挖掘实战》-张良均 - .....?</title>
<link>http://www.cnblogs.com/fanling999/p/8254010.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fanling999/p/8254010.html</guid>
<description>&lt;p&gt;最近看一些机器学习相关书籍，主要是为了拓宽视野。在阅读这本书前最吸引我的地方是实战篇，我通读全书后给我印象最深的还是实战篇。基础篇我也看了，但发现有不少理论还是讲得不够透彻，个人还是比较倾向于 《Machine Learning》--Tom M.Mitchell，Andrew 的 machine learning 课程，或周华志的《机器学习》，Jiawei Han 的 《data mining》。相对于本书的基础篇，这些侧重于理论基础的课程和书籍对基础模型的理解和阐释要更系统化。另外，值得注意的是本书基础篇有多处错误，比如高斯分布的公式，阅读时应当留意。&lt;/p&gt;
&lt;p&gt;机器学习的工程实践过程大致可分为如下几个步骤：问题抽象、确定目标、采集数据、数据预处理（探索、清洗和变换）、模型选择与构建、模型评价和模型应用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;其中问题的抽象和目标确定很关键，只有充分的理解“我们想要什么”才能更好的去思考“如何做”。&lt;/li&gt;
&lt;li&gt;数据采集的手段多种多样，常见的有传感器、互联网数据库、爬虫等，采集的手段往往和业务背景密切联系。&lt;/li&gt;
&lt;li&gt;数据预处理，这个环节往往要耗费大量时间并且需要灵活的思考，为了保证数据的质量这一步骤尤为关键。我们需要调研一些领域知识，基于领域知识和统计特征对数据进行前期的探索，在进一步清洗的基础上进行数据变换，即特征提取。&lt;strong&gt;特征工程&lt;/strong&gt;往往是模型成败的关键，这里需要多加思考、联合领域知识并反复尝试评估。&lt;/li&gt;
&lt;li&gt;模型选择与构建，机器学习和数据挖掘发展至今已经有很多成熟的模型可供使用。很多时候我们需要基于业务的场景以及任务目标对比不同的模型进行选择。我们需要深入理解模型的原理、应用场景和优缺点。&lt;/li&gt;
&lt;li&gt;模型的评价，机器学习的最终目的是降低&lt;strong&gt;泛化误差&lt;/strong&gt;，然而我们只能通过有限的数据（训练数据）对其进行近似计算。如何根据不同的任务，选择合适的指标对模型进行评估很关键。比如回归问题的 RMSE。分类问题的 accuracy, precision, recall, f1-scall 等。充分利用图表，比如 ROC等。&lt;/li&gt;
&lt;li&gt;模型的应用，对资源、模型的实时性等方面进行综合考虑。我们需要定期的更新我们的模型以适应环境的变化。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本书涉及的主要内容包括&lt;strong&gt;时间序列分析&lt;/strong&gt;，&lt;strong&gt;分类&lt;/strong&gt;，&lt;strong&gt;回归预测&lt;/strong&gt;，&lt;strong&gt;关联关系挖掘&lt;/strong&gt;，&lt;strong&gt;推荐系统&lt;/strong&gt;。以下是我读过的一些书籍整理，可以作为进一步的扩展。这里还想到了本科时学的《数学建模》，实际上和数据挖掘的流程很相似。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;时间序列分析可以进一步参考《时间序列分析及应用》——Jonathan D.Cryer，《Time Series Analysis and Its Applications with R examples》-- Robert H. Shumway。相对于 Python，其实 R 在时间序列分析上的支持更为完善。&lt;/li&gt;
&lt;li&gt;统计机器学习（分类，回归预测）：sklearn 官方的 tutorial 我觉得很好，理论的话，《Machine Learning》--Tom M.Mitchell，Andrew 的 machine learning 课程，或周华志的《机器学习》。&lt;/li&gt;
&lt;li&gt;数据挖掘：最为经典的Jiawei Han 的 《data mining》，其中涉及了数据挖掘的基本流程和方法、数据处理、数据仓库、分类、预测、异常检测、关联关系挖掘等内容。“Data Mining”--Charu C.Aggarwal，其特点是加入了时序数据处理的内容，可作为进阶内容。&lt;/li&gt;
&lt;li&gt;推荐系统：《推荐系统实践》——项亮，很好的入门书籍。&lt;/li&gt;
&lt;li&gt;关于工具，我觉得官网的 tutorial 是很好的入门资料。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我没有动手实操，阅读旨在拓宽自己的视野，也是出于对各个行业如何应用机器学习的好奇。如果时间有余的读者不妨过一遍书本的例子，应该会有更深的认识。此外通过 kaggle 等比赛平台去进行实践也是不错的。&lt;/p&gt;
&lt;p&gt;总的来说，对于 data driven 的工程实践还是应该做足调研，几乎不可能有一个全新的方向和全新的难题。因此学会在巨人的肩膀上去拓展很重要，尤其是在数据科学这一交叉领域，注意团队合作。平时注重积累，处理问题发散思考很重要，很多特征的设计都很巧妙且有意思。&lt;/p&gt;


&lt;p&gt;作者：张良均、王路、谭立云、苏剑林&lt;br/&gt;注意：这本书有多处地方有误，尤其是公式推导部分。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基础篇&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#01&quot;&gt;01. 数据挖掘基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#02&quot;&gt;02. Python 数据分析简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#03&quot;&gt;03. 数据探索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#04&quot;&gt;04. 数据预处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#05&quot;&gt;05. 数据建模&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实战篇&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#06&quot;&gt;06. 电力窃漏电用户自动识别：&lt;/a&gt;基于 5 年所有窃电用户的有关数据（用户基本信息，各种用电功率等）对窃电用户进行识别。基于目标对数据进行清洗，缺失值填充。基于领域知识构建了 3 个指标：电量趋势下降指标-用电量趋势，线损指标-线损增长率，告警类指标-与窃漏电相关的终端告警数。基于 3 个指标利用 Keras 构建 LM 神经网络模型，准确率为 94%；Scikit-Learn CART 决策树的准确率为 94%。使用 ROC 曲线对模型进行评估。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#07&quot;&gt;07. 航空公司客户价值分析：&lt;/a&gt;借助航空公司客户数据对客户进行分类，在此基础上对不同类客户进行对比分析发现有价值的模式。基于分析结果提供个性化服务，制定相应的营销策略。基于领域知识了解到 LRFMC模型，由此可计算 5 个关键指标作为特征，分别为客户关系长度 L, 消费时间间隔 R, 消费频率 F, 飞行里程 M 和折扣系数的平均 C。采用 k-means 聚类划分用户群，采用图表的形式分析不同用户群的特点并制定营销策略。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#08&quot;&gt;08. 中医证型关联规则挖掘：&lt;/a&gt;借助三阴乳腺癌患者的病理信息，挖掘患者的症状与中医证型之间的关联关系。对截断治疗提供依据，挖掘潜在性证素。由于医疗数据的缺乏，通过问卷调查的形式获取数据。问卷调查仅针对患病者并且具有一定中以诊断学基础，能清除的描述病情。根据领域知识得到 6 种证型得分作为后期模型分析的基础。采用Apriori 算法进行关联关系挖掘，注意选择合适的最小支持度、最小置信度。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#09&quot;&gt;09. 基于水色图像的水质评价：&lt;/a&gt;有经验的从事渔业生产的从业者可通过观察水色变化调控水质，以维持养殖水体生态系统中浮游植物、微生物、浮游动物等合理的动态平衡。我们期望通过机器学习的方法将这一过程自动化。通过拍摄照片获取不同水质的图片。这里我们还需要通过专家对数据打 label，这个过程很是费时费力，并且质量奖影响整体模型的效果。使用直接提取的方式对图片进行切割，在此基础上计算 一阶颜色矩，二阶颜色矩，三阶颜色矩 3 个特征。将特征向量输入到 svm 分类器中，这里有个需要注意的细节，征的范围都在 0～1 之间，如果直接输入 SVM，彼此之间区分度会比较小，&lt;strong&gt;因此不妨将所有特征统一乘以一个适当的常数 k&lt;/strong&gt;，经过反复测试最佳的 k=30。&lt;br/&gt;实际上对于图片的处理，现在大多都直接采用 DNN，尤其是 CNN 在图像处理中表现出非常好的效果。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#10&quot;&gt;10. 家用电器用户行为分析与事件识别：&lt;/a&gt;对热水器使用中的用水事件进行识别。分析过程涉及到领域知识和基于数据观察的手工特征，并没有涉及太多的模型，几乎都是基于阈值进行数据的处理。最后使用 BP 神经网络进行分类识别，准确率 85.5%。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#11&quot;&gt;11. 应用系统负载分析与磁盘容量预测：&lt;/a&gt;这是时间序列预测的一个典型案例，主要涉及到 ARIMA 模型应用的细节。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#12&quot;&gt;12. 电子商务网站用户行为分析及服务推荐：&lt;/a&gt;这是推荐系统的一个应用实例。爬虫获取数据，数据的探索分类，这一过程占了不少工作量。基于物品和基于用户的协同过滤推荐之间的权衡。为用户和物品之间建立关系，使得用户更容易发现潜在有价值的物品，同时使得长尾物品更容易被发掘出来。基本步骤为（1）计算物品之间的相似度；（2）根据物品的相似度和用户的历史行为给用户生成推荐列表。对于推荐系统的评价应该考虑 3 个方面：用户、物品提供者和提供推荐系统的网站。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#13&quot;&gt;13. 财政收入影响因素分析及预测模型：&lt;/a&gt;通过 Adative-Lasso 模型进行特征选择。灰色预测与神经网路组合模型进行预测。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#14&quot;&gt;14. 基于基站定位数据的商圈分析：&lt;/a&gt;计算 4 个指标，工作日上班时间人均停留时间、凌晨人均停留时间、周末人均停留时间、日均人流量。基于以上 4 个指标进行层次聚类，根据谱系聚类图可以聚成 3 类。通过图表观察每个簇的特征。“轨迹挖掘”是一个新兴的研究主题，尤其是面向拼车推荐应用是轨迹挖掘。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#15&quot;&gt;15. 电商产品评论数据情感分析：&lt;/a&gt; 主要是主题模型的应用。“八爪鱼”爬虫工具爬取评论数据，并进行文本去重、机械压缩去词和短句删除等数据预处理操作。（1）构建情感倾向性模型对评论进行分类，即分为正面、负面和中性 3 类评论。这里有两个关键点，一个是文本的表示，训练栈式自编码网络；另一方面是类别标注，人工标注费时。本案例使用 ROST 系统完成情感倾向性分析的任务。（2）基于语义网络的评论分析，抽取正面、负面两组，以进行语意网络的构建与分析。由于中性评论过于复杂本案例没有进一步分析。（3）基于 LDA 模型的主题分析，针对正面和负面的文本分别使用 LDA 发现潜在的主题。基于前 3 个分析结果给出改进建议。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Tue, 09 Jan 2018 14:34:00 +0000</pubDate>
<dc:creator>.....?</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fanling999/p/8254010.html</dc:identifier>
</item>
<item>
<title>dubbo源码—service reference - lacker</title>
<link>http://www.cnblogs.com/sunshine-2015/p/8253974.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-2015/p/8253974.html</guid>
<description>&lt;h2 id=&quot;service-reference&quot;&gt;service reference&lt;/h2&gt;
&lt;p&gt;在编写好服务之后，dubbo会将服务export出去，这个时候就可以编写consumer来调用这个服务了。dubbo作为一个rpc框架，使用者使用远程服务和使用本地服务是类似的，不用关心远程服务在哪里，怎么引用的，因为dubbo包含了自动发现和引用服务的功能。&lt;/p&gt;
&lt;p&gt;dubbo引用服务主要工作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建proxy和Invoker（DubboInvoker里面会启动NettyClient）&lt;/li&gt;
&lt;li&gt;将consumer注册到注册中心&lt;/li&gt;
&lt;li&gt;订阅configurators、providers、routers&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;通过java代码引用&quot;&gt;通过Java代码引用&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;ReferenceConfig&amp;lt;TestDubboService&amp;gt; reference = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ReferenceConfig&lt;/span&gt;();
reference.&lt;span class=&quot;fu&quot;&gt;setApplication&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ApplicationConfig&lt;/span&gt;(appName));
reference.&lt;span class=&quot;fu&quot;&gt;setRegistry&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RegistryConfig&lt;/span&gt;(dubboRegistry));
reference.&lt;span class=&quot;fu&quot;&gt;setInterface&lt;/span&gt;(TestDubboService.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
reference.&lt;span class=&quot;fu&quot;&gt;setTimeout&lt;/span&gt;(timeout);
TestDubboService service = (TestDubboService)reference.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用Java代码配置很明显，直接使用ReferenceConfig.get获取一个proxy&lt;/p&gt;
&lt;h3 id=&quot;通过spring配置引用&quot;&gt;通过spring配置引用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;dubbo:reference interface=&quot;com.test.service.TestDubboService&quot; id=&quot;testDubboService&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;spring解析该dubbo自定义标签的时候（请提前学习spring如何解析自定义标签），会初始化ReferenceBean，该bean是一个factoryBean并且继承自ReferenceConfig，在getBean方法中调用了ReferenceConfig.get，接下来的方式就和上面“使用Java代码引用”一致了。所以dubbo引用服务的工作就主要在于如何创建proxy。&lt;/p&gt;
&lt;h3 id=&quot;referenceconfig初始化&quot;&gt;ReferenceConfig初始化&lt;/h3&gt;
&lt;p&gt;ReferenceConfig的主要作用是配置并引用远程服务，创建远程服务的本地代理。ReferenceBean继承自ReferenceConfig，ReferenceConfig是一个FactoryBean ，实现了getObject方法，在spring容器初始化完成的时候会初始化配置为非lazyInit的bean，也就会调用ReferenceBean.getObject方法，里面会调用ReferenceConfig.get方法，从而触发ServiceConfig的初始化方法ServiceConfig.init。&lt;/p&gt;
&lt;p&gt;inti方法的主要逻辑是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;判断是否已经初始化，get方法是同步方法，所以只需直接判断标志位initialized即可&lt;/li&gt;
&lt;li&gt;判断配置的interface是否正确&lt;/li&gt;
&lt;li&gt;判断-D参数配置或者配置文件是否配置是直连提供者&lt;/li&gt;
&lt;li&gt;配置application、module、registries、monitor等&lt;/li&gt;
&lt;li&gt;检查stub和mock配置（类似provider端的检查）&lt;/li&gt;
&lt;li&gt;搜集需要配置到URL中的参数，先将参数收集到map中，URL参数在refer的过程中极其重要，dubbo中的所有配置几乎都是靠URL传递，从URL中获取或者设置到URL中&lt;/li&gt;
&lt;li&gt;创建远程服务的本地代理，createProxy&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;如何创建proxy&quot;&gt;如何创建proxy&lt;/h2&gt;
&lt;p&gt;由于是远程服务，consumer需要有一个代理来处理consumer发起的远程过程调用。dubbo通过远程调用的可执行体Invoker的代理来实现。接下来主要就是先创建Invoker，然后创建Invoker的proxy。&lt;/p&gt;
&lt;p&gt;创建Invoker调用堆栈如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/846961/201801/846961-20180109221941972-969374916.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;createProxy的主要功能：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;判断ReferenceConfig中是否配置了url，如果配置了url，则不从registry中获取，直接使用配置的url。&lt;/li&gt;
&lt;li&gt;没有配置url，从registry配置拼装url&lt;/li&gt;
&lt;li&gt;根据上面配置好的URL来refer对应的服务，创建远程服务的可执行体Invoker&lt;/li&gt;
&lt;li&gt;将所有的invokers聚合成一个可执行实体MockClusterInvoker&lt;/li&gt;
&lt;li&gt;给MockClusterInvoker创建一个代理类，这个代理类就是我们在consumer端使用的远程服务代理，该代理实现了对应的service接口，对应的InvocationHandler就是作为代理类构造方法入参的MockClusterInvoker，在后面一节分析中会说明consumer怎么发起调用&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面主要说说Invoker的创建过程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;和provider一样，会调用ProtocolFilterWrapper#refer和ProtocolListenerWrapper#refer，分别构造filter链和调用对应的listener.referred&lt;/li&gt;
&lt;li&gt;RegistryProtocol#refer会判断是否配置了group&lt;/li&gt;
&lt;li&gt;根据上面的调用堆栈会调用ZookeeperRegistry#doSubscribe，该方法中会订阅providers、configurators等，并通过notify方法来调用到AbstractRegistry#notify，里面会针对每一个category调用对应listener.notify，consumer端的listener是RegistryDirectory，所以这里会调用RegistryDirectory#notify&lt;/li&gt;
&lt;li&gt;RegistryDirectory#notify，这个方法也是registry对应节点变化后监听的listener，会对每一种监听的节点类型做处理，这里先只看provider的处理，调用refreshInvoker方法&lt;/li&gt;
&lt;li&gt;refreshInvoker方法就是将配置好的url转换为Invoker，如果转化后的invoker至少有一个，并且少于原来的invoker（缓存的invoker），则会把废弃的invoker销毁掉（destroy）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里具体说明一下consumer订阅，ZookeeperRegistry#doSubscribe中会将url中配置的category取出来拼接成registry的目录节点形式，然后订阅这些节点&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// RegistryProtocol类&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;doRefer&lt;/span&gt;(Cluster cluster, Registry registry, Class&amp;lt;T&amp;gt; type, URL url) {
  &lt;span class=&quot;co&quot;&gt;// ... 省略中间代码&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 这里调用的是RegistryDirectory.subscribe方法&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 在这里将consumer端想要订阅的category添加到url，包括providers,configurators,routers&lt;/span&gt;
  directory.&lt;span class=&quot;fu&quot;&gt;subscribe&lt;/span&gt;(subscribeUrl.&lt;span class=&quot;fu&quot;&gt;addParameter&lt;/span&gt;(Constants.&lt;span class=&quot;fu&quot;&gt;CATEGORY_KEY&lt;/span&gt;, 
                                                Constants.&lt;span class=&quot;fu&quot;&gt;PROVIDERS_CATEGORY&lt;/span&gt; 
                                                + &lt;span class=&quot;st&quot;&gt;&quot;,&quot;&lt;/span&gt; + Constants.&lt;span class=&quot;fu&quot;&gt;CONFIGURATORS_CATEGORY&lt;/span&gt; 
                                                + &lt;span class=&quot;st&quot;&gt;&quot;,&quot;&lt;/span&gt; + Constants.&lt;span class=&quot;fu&quot;&gt;ROUTERS_CATEGORY&lt;/span&gt;));
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cluster.&lt;span class=&quot;fu&quot;&gt;join&lt;/span&gt;(directory);
}

&lt;span class=&quot;co&quot;&gt;// ZookeeperRegistry在doSubscribe调用自己的下面这个方法，将URL中的category转化为registry中的目录对应的url&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String[] &lt;span class=&quot;fu&quot;&gt;toCategoriesPath&lt;/span&gt;(URL url) {
  String[] categroies;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Constants.&lt;span class=&quot;fu&quot;&gt;ANY_VALUE&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(url.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(Constants.&lt;span class=&quot;fu&quot;&gt;CATEGORY_KEY&lt;/span&gt;))) {
    &lt;span class=&quot;co&quot;&gt;// 如果配置的category是*，则取所有的category：providers,consumer,routers,configurators&lt;/span&gt;
    categroies = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[] {Constants.&lt;span class=&quot;fu&quot;&gt;PROVIDERS_CATEGORY&lt;/span&gt;, Constants.&lt;span class=&quot;fu&quot;&gt;CONSUMERS_CATEGORY&lt;/span&gt;, 
                               Constants.&lt;span class=&quot;fu&quot;&gt;ROUTERS_CATEGORY&lt;/span&gt;, Constants.&lt;span class=&quot;fu&quot;&gt;CONFIGURATORS_CATEGORY&lt;/span&gt;};
  } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
    categroies = url.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(Constants.&lt;span class=&quot;fu&quot;&gt;CATEGORY_KEY&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[] {Constants.&lt;span class=&quot;fu&quot;&gt;DEFAULT_CATEGORY&lt;/span&gt;});
  }
  String[] paths = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[categroies.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;];
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; categroies.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;; i ++) {
    &lt;span class=&quot;co&quot;&gt;// 将category拼接成registry中的目录形式，类似：/dubbo/com.test.service.TestDubboService/providers&lt;/span&gt;
    paths[i] = &lt;span class=&quot;fu&quot;&gt;toServicePath&lt;/span&gt;(url) + Constants.&lt;span class=&quot;fu&quot;&gt;PATH_SEPARATOR&lt;/span&gt; + categroies[i];
  }
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; paths;
}


&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doSubscribe&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; URL url, &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; NotifyListener listener) {
  &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Constants.&lt;span class=&quot;fu&quot;&gt;ANY_VALUE&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(url.&lt;span class=&quot;fu&quot;&gt;getServiceInterface&lt;/span&gt;())) {
        &lt;span class=&quot;co&quot;&gt;// ... 省略中间代码&lt;/span&gt;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
      List&amp;lt;URL&amp;gt; urls = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;URL&amp;gt;();
      &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String path : &lt;span class=&quot;fu&quot;&gt;toCategoriesPath&lt;/span&gt;(url)) {
        ConcurrentMap&amp;lt;NotifyListener, ChildListener&amp;gt; listeners = zkListeners.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(url);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (listeners == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
          &lt;span class=&quot;co&quot;&gt;// 如果之前该路径没有添加过listener，则创建一个map来放置listener&lt;/span&gt;
          zkListeners.&lt;span class=&quot;fu&quot;&gt;putIfAbsent&lt;/span&gt;(url, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;NotifyListener, ChildListener&amp;gt;());
          listeners = zkListeners.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(url);
        }
        ChildListener zkListener = listeners.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(listener);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (zkListener == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
          &lt;span class=&quot;co&quot;&gt;// 如果没有添加过对于子节点的listener，则创建&lt;/span&gt;
          listeners.&lt;span class=&quot;fu&quot;&gt;putIfAbsent&lt;/span&gt;(listener, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ChildListener&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;childChanged&lt;/span&gt;(String parentPath, List&amp;lt;String&amp;gt; currentChilds) {
              ZookeeperRegistry.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;notify&lt;/span&gt;(url, listener, &lt;span class=&quot;fu&quot;&gt;toUrlsWithEmpty&lt;/span&gt;(url, parentPath, currentChilds));
            }
          });
          zkListener = listeners.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(listener);
        }
        zkClient.&lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(path, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 添加listener到该目录及其子节点&lt;/span&gt;
        List&amp;lt;String&amp;gt; children = zkClient.&lt;span class=&quot;fu&quot;&gt;addChildListener&lt;/span&gt;(path, zkListener);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (children != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
          urls.&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;toUrlsWithEmpty&lt;/span&gt;(url, path, children));
        }
      }
      &lt;span class=&quot;co&quot;&gt;// 这个方法本身会导致监听的目录及其子节点变化，直接调用notify&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;notify&lt;/span&gt;(url, listener, urls);
    }
  } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable e) {
    &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RpcException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Failed to subscribe &quot;&lt;/span&gt; + url + &lt;span class=&quot;st&quot;&gt;&quot; to zookeeper &quot;&lt;/span&gt; + &lt;span class=&quot;fu&quot;&gt;getUrl&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, cause: &quot;&lt;/span&gt; + e.&lt;span class=&quot;fu&quot;&gt;getMessage&lt;/span&gt;(), e);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面是consumer的订阅部分的源码，在consumer订阅的时候会调用FailbackRegistry#notify，接下来就是将url转换为Invoker，接下来的调用链路可以参考上面方法调用堆栈的图，转化的主要代码为：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;registry&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;integration&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;RegistryDirectory&lt;/span&gt;#refreshInvoker
com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;registry&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;integration&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;RegistryDirectory&lt;/span&gt;#toInvokers&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个方法中的源代码注释较为详细了就不再赘述了。&lt;/p&gt;
&lt;p&gt;在toInvokers方法中会调用DubboProtocol#refer，在该方法中启动NettyClient。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;provider提供服务后，consumer端就可以找到并引用该服务，接下来就可以像使用本地服务一样使用该服务了，发起远程该过程调用。&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 14:20:00 +0000</pubDate>
<dc:creator>lacker</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-2015/p/8253974.html</dc:identifier>
</item>
<item>
<title>MySQL 行锁 表锁机制 - ITDragon龙</title>
<link>http://www.cnblogs.com/itdragon/p/8194622.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itdragon/p/8194622.html</guid>
<description>&lt;p&gt;行锁变表锁，是福还是坑？如果你不清楚MySQL加锁的原理，你会被它整的很惨！不知坑在何方？没事，我来给你们标记几个坑。遇到了可别乱踩。通过本章内容，带你学习MySQL的行锁，表锁，两种锁的优缺点，行锁变表锁的原因，以及开发中需要注意的事项。还在等啥？经验等你来拿！&lt;/p&gt;
&lt;p&gt;MySQL的存储引擎是从MyISAM到InnoDB，锁从表锁到行锁。后者的出现从某种程度上是弥补前者的不足。比如：MyISAM不支持事务，InnoDB支持事务。表锁虽然开销小，锁表快，但高并发下性能低。行锁虽然开销大，锁表慢，但高并发下相比之下性能更高。事务和行锁都是在确保数据准确的基础上提高并发的处理能力。本章重点介绍InnoDB的行锁。&lt;/p&gt;
&lt;h2 id=&quot;案例分析&quot;&gt;案例分析&lt;/h2&gt;
&lt;p&gt;目前，MySQL常用的存储引擎是InnoDB，相对于MyISAM而言。InnoDB更适合高并发场景，同时也支持事务处理。我们通过下面这个案例(坑)，来了解行锁和表锁。&lt;br/&gt;业务：因为订单重复导入，需要用脚本将订单状态为&quot;待客服确认&quot;且平台是&quot;xxx&quot;的数据批量修改为&quot;已关闭&quot;。&lt;br/&gt;说明：避免直接修改订单表造成数据异常。这里用innodb_lock 表演示InnoDB的行锁。表中有三个字段：id，k(key值)，v(value值)。&lt;br/&gt;步骤：&lt;br/&gt;第一步：连接数据库，这里为了方便区分命名为Transaction-A，设置autocommit为零，表示需手动提交事务。&lt;br/&gt;第二步：Transaction-A，执行update修改id为1的命令。&lt;br/&gt;第三步：新增一个连接，命名为Transaction-B，能正常修改id为2的数据。再执行修改id为1的数据命令时，却发现该命令一直处理阻塞等待中。&lt;br/&gt;第四步：Transaction-A，执行commit命令。Transaction-B，修改id为1的命令自动执行，等待37.51秒。&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;多个事务操作同一行数据时，后来的事务处于阻塞等待状态。这样可以避免了脏读等数据一致性的问题。后来的事务可以操作其他行数据，解决了表锁高并发性能低的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;commit&lt;/span&gt;;

# Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'2001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.37&lt;/span&gt; sec)
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;37.51&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了上面的模拟操作，结果和理论又惊奇的一致，似乎可以放心大胆的实战。。。。。。但现实真的很残酷。&lt;br/&gt;现实：当执行批量修改数据脚本的时候，行锁升级为表锁。其他对订单的操作都处于等待中，，，&lt;br/&gt;原因：InnoDB只有在通过索引条件检索数据时使用行级锁，否则使用表锁！而模拟操作正是通过id去作为检索条件，而id又是MySQL自动创建的唯一索引，所以才忽略了行锁变表锁的情况。&lt;br/&gt;步骤：&lt;br/&gt;第一步：还原问题，Transaction-A，通过k=1更新v。Transaction-B，通过k=2更新v，命令处于阻塞等待状态。&lt;br/&gt;第二步：处理问题，给需要作为查询条件的字段添加索引。用完后可以删掉。&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;InnoDB的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁&lt;/strong&gt;。索引失效的原因在上一章节中已经介绍：&lt;a href=&quot;http://www.cnblogs.com/itdragon/p/8146439.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/itdragon/p/8146439.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;commit&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; idx_k &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; innodb_lock(k);

Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'2002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;19.82&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的案例看出，行锁变表锁似乎是一个坑，可MySQL没有这么无聊给你挖坑。这是因为MySQL有自己的执行计划。&lt;br/&gt;当你需要更新一张较大表的大部分甚至全表的数据时。而你又傻乎乎地用索引作为检索条件。一不小心开启了行锁(没毛病啊！保证数据的一致性！)。可MySQL却认为大量对一张表使用行锁，会导致事务执行效率低，从而可能造成其他事务长时间锁等待和更多的锁冲突问题，性能严重下降。所以MySQL会将行锁升级为表锁，即实际上并没有使用索引。&lt;br/&gt;我们仔细想想也能理解，既然整张表的大部分数据都要更新数据，一行一行地加锁效率则更低。其实我们可以通过explain命令查看MySQL的执行计划，你会发现key为null。表明MySQL实际上并没有使用索引，行锁升级为表锁也和上面的结论一致。&lt;br/&gt;本章重点介绍InnoDB的行锁及其相关的事务知识。如果想了解MySQL的执行计划，请看&lt;a href=&quot;http://www.cnblogs.com/itdragon/p/8146439.html&quot;&gt;上一章节&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;行锁&quot;&gt;行锁&lt;/h2&gt;
&lt;p&gt;行锁的劣势：开销大；加锁慢；会出现死锁&lt;br/&gt;行锁的优势：锁的粒度小，发生锁冲突的概率低；处理并发的能力强&lt;br/&gt;加锁的方式：自动加锁。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁；对于普通SELECT语句，InnoDB不会加任何锁；当然我们也可以显示的加锁：&lt;br/&gt;共享锁：select * from tableName where ... + lock in share more&lt;br/&gt;排他锁：select * from tableName where ... + for update&lt;br/&gt;InnoDB和MyISAM的最大不同点有两个：一，InnoDB支持事务(transaction)；二，默认采用行级锁。加锁可以保证事务的一致性，可谓是有人(锁)的地方，就有江湖(事务)；我们先简单了解一下事务知识。&lt;/p&gt;
&lt;h3 id=&quot;mysql-事务属性&quot;&gt;MySQL 事务属性&lt;/h3&gt;
&lt;p&gt;事务是由一组SQL语句组成的逻辑处理单元，事务具有ACID属性。&lt;br/&gt;&lt;strong&gt;原子性&lt;/strong&gt;（Atomicity）：事务是一个原子操作单元。在当时原子是不可分割的最小元素，其对数据的修改，要么全部成功，要么全部都不成功。&lt;br/&gt;&lt;strong&gt;一致性&lt;/strong&gt;（Consistent）：事务开始到结束的时间段内，数据都必须保持一致状态。&lt;br/&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的&quot;独立&quot;环境执行。&lt;br/&gt;&lt;strong&gt;持久性&lt;/strong&gt;（Durable）：事务完成后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。&lt;/p&gt;
&lt;h3 id=&quot;事务常见问题&quot;&gt;事务常见问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;更新丢失&lt;/strong&gt;（Lost Update）&lt;br/&gt;原因：当多个事务选择同一行操作，并且都是基于最初选定的值，由于每个事务都不知道其他事务的存在，就会发生更新覆盖的问题。类比github提交冲突。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脏读&lt;/strong&gt;（Dirty Reads）&lt;br/&gt;原因：事务A读取了事务B已经修改但尚未提交的数据。若事务B回滚数据，事务A的数据存在不一致性的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;（Non-Repeatable Reads）&lt;br/&gt;原因：事务A第一次读取最初数据，第二次读取事务B已经提交的修改或删除数据。导致两次读取数据不一致。不符合事务的隔离性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;幻读&lt;/strong&gt;（Phantom Reads）&lt;br/&gt;原因：事务A根据相同条件第二次查询到事务B提交的新增数据，两次数据结果集不一致。不符合事务的隔离性。&lt;/p&gt;
&lt;p&gt;幻读和脏读有点类似&lt;br/&gt;脏读是事务B里面修改了数据，&lt;br/&gt;幻读是事务B里面新增了数据。&lt;/p&gt;
&lt;h3 id=&quot;事务的隔离级别&quot;&gt;事务的隔离级别&lt;/h3&gt;
&lt;p&gt;数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大。这是因为事务隔离实质上是将事务在一定程度上&quot;串行&quot;进行，这显然与&quot;并发&quot;是矛盾的。根据自己的业务逻辑，权衡能接受的最大副作用。从而平衡了&quot;隔离&quot; 和 &quot;并发&quot;的问题。MySQL默认隔离级别是可重复读。&lt;br/&gt;脏读，不可重复读，幻读，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 隔离级别                      | 读数据一致性         | 脏读         | 不可重复 读   | 幻读         |
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 未提交读(&lt;span class=&quot;kw&quot;&gt;Read&lt;/span&gt; uncommitted)    | 最低级别            | 是            | 是           | 是           | 
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 已提交读(&lt;span class=&quot;kw&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;committed&lt;/span&gt;)      | 语句级              | 否           | 是           | 是           |
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 可重复读(Repeatable &lt;span class=&quot;kw&quot;&gt;read&lt;/span&gt;)     | 事务级              | 否           | 否           | 是           |
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 可序列化(&lt;span class=&quot;kw&quot;&gt;Serializable&lt;/span&gt;)        | 最高级别，事务级     | 否           | 否           | 否           |
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看当前数据库的事务隔离级别：show variables like 'tx_isolation';&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show variables &lt;span class=&quot;kw&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'tx_isolation'&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;---------------+-----------------+&lt;/span&gt;
| Variable_name | &lt;span class=&quot;fu&quot;&gt;Value&lt;/span&gt;           |
+&lt;span class=&quot;co&quot;&gt;---------------+-----------------+&lt;/span&gt;
| tx_isolation  | REPEATABLE-READ |
+&lt;span class=&quot;co&quot;&gt;---------------+-----------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;间隙锁&quot;&gt;间隙锁&lt;/h3&gt;
&lt;p&gt;当我们用范围条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做&quot;间隙(GAP)&quot;。InnoDB也会对这个&quot;间隙&quot;加锁，这种锁机制就是所谓的间隙锁(Next-Key锁)。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; k=&lt;span class=&quot;dv&quot;&gt;66&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &amp;gt;=&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.63&lt;/span&gt; sec)
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;commit&lt;/span&gt;;

Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; innodb_lock (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;,k,v) &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'7'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'7000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;18.99&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;危害(坑)：&lt;strong&gt;若执行的条件是范围过大，则InnoDB会将整个范围内所有的索引键值全部锁定，很容易对性能造成影响&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;排他锁&quot;&gt;排他锁&lt;/h3&gt;
&lt;p&gt;排他锁，也称写锁，独占锁，当前写操作没有完成前，它会阻断其他写锁和读锁。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180108223455238-1630428254.png&quot; alt=&quot;排他锁&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction_A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | k    | v    |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    | &lt;span class=&quot;dv&quot;&gt;4000&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'4001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)
&lt;span class=&quot;kw&quot;&gt;Rows&lt;/span&gt; matched: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  Changed: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  Warnings: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;commit&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.04&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction_B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | k    | v    |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    | &lt;span class=&quot;dv&quot;&gt;4001&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;9.53&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;共享锁&quot;&gt;共享锁&lt;/h3&gt;
&lt;p&gt;共享锁，也称读锁，多用于判断数据是否存在，多个读操作可以同时进行而不会互相影响。当如果事务对读锁进行修改操作，很可能会造成死锁。如下图所示。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180108222644301-1772818432.png&quot; alt=&quot;共享锁&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction_A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mode&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | k    | v    |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    | &lt;span class=&quot;dv&quot;&gt;4001&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'4002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;31.29&lt;/span&gt; sec)
&lt;span class=&quot;kw&quot;&gt;Rows&lt;/span&gt; matched: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  Changed: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  Warnings: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction_B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mode&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | k    | v    |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    | &lt;span class=&quot;dv&quot;&gt;4001&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'4002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
ERROR &lt;span class=&quot;dv&quot;&gt;1213&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;40001&lt;/span&gt;): Deadlock found &lt;span class=&quot;kw&quot;&gt;when&lt;/span&gt; trying &lt;span class=&quot;kw&quot;&gt;to&lt;/span&gt; get &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt;; try restarting &lt;span class=&quot;kw&quot;&gt;transaction&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;分析行锁定&quot;&gt;分析行锁定&lt;/h3&gt;
&lt;p&gt;通过检查InnoDB_row_lock 状态变量分析系统上的行锁的争夺情况 show status like 'innodb_row_lock%'&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show status &lt;span class=&quot;kw&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'innodb_row_lock%'&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;-------------------------------+-------+&lt;/span&gt;
| Variable_name                 | &lt;span class=&quot;fu&quot;&gt;Value&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;-------------------------------+-------+&lt;/span&gt;
| Innodb_row_lock_current_waits | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
| Innodb_row_lock_time          | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
| Innodb_row_lock_time_avg      | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
| Innodb_row_lock_time_max      | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
| Innodb_row_lock_waits         | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
+&lt;span class=&quot;co&quot;&gt;-------------------------------+-------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;innodb_row_lock_current_waits: 当前正在等待锁定的数量&lt;br/&gt;innodb_row_lock_time: 从系统启动到现在锁定总时间长度；非常重要的参数，&lt;br/&gt;innodb_row_lock_time_avg: 每次等待所花平均时间；非常重要的参数，&lt;br/&gt;innodb_row_lock_time_max: 从系统启动到现在等待最常的一次所花的时间；&lt;br/&gt;innodb_row_lock_waits: 系统启动后到现在总共等待的次数；非常重要的参数。直接决定优化的方向和策略。&lt;/p&gt;
&lt;h3 id=&quot;行锁优化&quot;&gt;行锁优化&lt;/h3&gt;
&lt;p&gt;1 尽可能让所有数据检索都通过索引来完成，避免无索引行或索引失效导致行锁升级为表锁。&lt;br/&gt;2 尽可能避免间隙锁带来的性能下降，减少或使用合理的检索范围。&lt;br/&gt;3 尽可能减少事务的粒度，比如控制事务大小，而从减少锁定资源量和时间长度，从而减少锁的竞争等，提供性能。&lt;br/&gt;4 尽可能低级别事务隔离，隔离级别越高，并发的处理能力越低。&lt;/p&gt;
&lt;h2 id=&quot;表锁&quot;&gt;表锁&lt;/h2&gt;
&lt;p&gt;表锁的优势：开销小；加锁快；无死锁&lt;br/&gt;表锁的劣势：锁粒度大，发生锁冲突的概率高，并发处理能力低&lt;br/&gt;加锁的方式：自动加锁。查询操作（SELECT），会自动给涉及的所有表加读锁，更新操作（UPDATE、DELETE、INSERT），会自动给涉及的表加写锁。也可以显示加锁：&lt;br/&gt;共享读锁：lock table tableName read;&lt;br/&gt;独占写锁：lock table tableName write;&lt;br/&gt;批量解锁：unlock tables;&lt;/p&gt;
&lt;h3 id=&quot;共享读锁&quot;&gt;共享读锁&lt;/h3&gt;
&lt;p&gt;对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读操作，但会阻塞对同一表的写操作。只有当读锁释放后，才能执行其他进程的写操作。在锁释放前不能取其他表。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180109110055769-1244049794.png&quot; alt=&quot;读锁&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;read&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; myisam_lock;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock;
ERROR &lt;span class=&quot;dv&quot;&gt;1100&lt;/span&gt; (HY000): &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'innodb_lock'&lt;/span&gt; was &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLES&lt;/span&gt;

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;;
ERROR &lt;span class=&quot;dv&quot;&gt;1099&lt;/span&gt; (HY000): &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'myisam_lock'&lt;/span&gt; was &lt;span class=&quot;kw&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;READ&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; can&lt;span class=&quot;st&quot;&gt;'t be updated&lt;/span&gt;

&lt;span class=&quot;st&quot;&gt;mysql&amp;gt; unlock tables;&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;Query OK, 0 rows affected (0.00 sec)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; myisam_lock;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock;
&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.01&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;18.67&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;独占写锁&quot;&gt;独占写锁&lt;/h3&gt;
&lt;p&gt;对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其他进程的读写操作。在锁释放前不能写其他表。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180109111140472-1348610312.png&quot; alt=&quot;写锁&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.05&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.03&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'2001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; myisam_lock;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;;
ERROR &lt;span class=&quot;dv&quot;&gt;1100&lt;/span&gt; (HY000): &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'innodb_lock'&lt;/span&gt; was &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLES&lt;/span&gt;

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;tables&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; myisam_lock;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;42.83&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结：&lt;strong&gt;表锁，读锁会阻塞写，不会阻塞读。而写锁则会把读写都阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;查看加锁情况&quot;&gt;查看加锁情况&lt;/h3&gt;
&lt;p&gt;show open tables; 1表示加锁，0表示未加锁。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show &lt;span class=&quot;kw&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; in_use &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----------+-------------+--------+-------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;Database&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt;       | In_use | Name_locked |
+&lt;span class=&quot;co&quot;&gt;----------+-------------+--------+-------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt;     | myisam_lock |      &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; |           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----------+-------------+--------+-------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;分析表锁定&quot;&gt;分析表锁定&lt;/h3&gt;
&lt;p&gt;可以通过检查table_locks_waited 和 table_locks_immediate 状态变量分析系统上的表锁定：show status like 'table_locks%'&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show status &lt;span class=&quot;kw&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'table_locks%'&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----------------------------+-------+&lt;/span&gt;
| Variable_name              | &lt;span class=&quot;fu&quot;&gt;Value&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----------------------------+-------+&lt;/span&gt;
| Table_locks_immediate      | &lt;span class=&quot;dv&quot;&gt;104&lt;/span&gt;   |
| Table_locks_waited         | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
+&lt;span class=&quot;co&quot;&gt;----------------------------+-------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;table_locks_immediate: 表示立即释放表锁数。&lt;br/&gt;table_locks_waited: 表示需要等待的表锁数。此值越高则说明存在着越严重的表级锁争用情况。&lt;/p&gt;
&lt;p&gt;此外，MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主表的存储引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永久阻塞。&lt;/p&gt;
&lt;h2 id=&quot;什么场景下用表锁&quot;&gt;什么场景下用表锁&lt;/h2&gt;
&lt;p&gt;InnoDB默认采用行锁，在未使用索引字段查询时升级为表锁。MySQL这样设计并不是给你挖坑。它有自己的设计目的。&lt;br/&gt;即便你在条件中使用了索引字段，MySQL会根据自身的执行计划，考虑是否使用索引(所以explain命令中会有possible_key 和 key)。如果MySQL认为全表扫描效率更高，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。因此，在分析锁冲突时，别忘了检查SQL的执行计划，以确认是否真正使用了索引。&lt;/p&gt;
&lt;p&gt;第一种情况：&lt;strong&gt;全表更新&lt;/strong&gt;。事务需要更新大部分或全部数据，且表又比较大。若使用行锁，会导致事务执行效率低，从而可能造成其他事务长时间锁等待和更多的锁冲突。&lt;/p&gt;
&lt;p&gt;第二种情况：&lt;strong&gt;多表查询&lt;/strong&gt;。事务涉及多个表，比较复杂的关联查询，很可能引起死锁，造成大量事务回滚。这种情况若能一次性锁定事务涉及的表，从而可以避免死锁、减少数据库因事务回滚带来的开销。&lt;/p&gt;
&lt;h2 id=&quot;页锁&quot;&gt;页锁&lt;/h2&gt;
&lt;p&gt;开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发处理能力一般。只需了解一下。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;1 InnoDB 支持表锁和行锁，使用索引作为检索条件修改数据时采用行锁，否则采用表锁。&lt;br/&gt;2 InnoDB 自动给修改操作加锁，给查询操作不自动加锁&lt;br/&gt;3 行锁可能因为未使用索引而升级为表锁，所以除了检查索引是否创建的同时，也需要通过explain执行计划查询索引是否被实际使用。&lt;br/&gt;4 行锁相对于表锁来说，优势在于高并发场景下表现更突出，毕竟锁的粒度小。&lt;br/&gt;5 当表的大部分数据需要被修改，或者是多表复杂关联查询时，建议使用表锁优于行锁。&lt;br/&gt;6 为了保证数据的一致完整性，任何一个数据库都存在锁定机制。锁定机制的优劣直接影响到一个数据库的并发处理能力和性能。&lt;/p&gt;
&lt;p&gt;到这里，Mysql的表锁和行锁机制就介绍完了，若你不清楚InnoDB的行锁会升级为表锁，那以后会吃大亏的。若有打什么不对的地方请指正。若觉得文章不错，麻烦点个赞！来都来了，留下你的痕迹吧！&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 13:42:00 +0000</pubDate>
<dc:creator>ITDragon龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itdragon/p/8194622.html</dc:identifier>
</item>
</channel>
</rss>