<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Jumpserver coco 使用登录用户进行SSH连接，跳过系统用户小改造 - 卑鄙的wo</title>
<link>http://www.cnblogs.com/wowoo1121/p/9309398.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wowoo1121/p/9309398.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;　　Jumpserver 作为国内流行的开源堡垒机，很多公司都在尝试使用，同时 Jumpserver 为了契合众多公司的用户认证，也提供了 LDAP 的用户认证方式，作为 Jumpserver 的用户，大家可能知道了 Jumpserver 的 LDAP 认证方式，仅是作为 登录Jumpserver Web UI、登录 Jumpserver 终端(COCO) 的用户认证，进入 Jumpserver 终端（COCO）后，再而跳到目标主机，却需要使用Jumpserver 创建的系统用户，也就是 登录Jumpserver 和 Jumpserver登录目标主机 是需要两个完全没有关系的用户，对于很多基于LDAP用户登录主机的场景，Jumpserver 这种双用户认证概念显得有点鸡肋，既然接入了 LDAP, 我们希望做到 登录Jumpserver 和 Jumpserver跳转主机都使用 LDAP 完成认证登录，带着这一想法，便开始了对 Jumpserver 终端核心 COCO 进行了部分修改。&lt;/p&gt;

&lt;h2&gt;COCO前后对比&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/900109/201807/900109-20180714142513264-952731262.png&quot; alt=&quot;&quot; width=&quot;738&quot; height=&quot;914&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：LDAP 用户登录Jumpserver coco、选择登录主机后，直接使用登录coco 的用户进行登录主机，取消了选择系统用户的步骤。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;详细流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/900109/201807/900109-20180714142458437-205636784.png&quot; alt=&quot;&quot; width=&quot;570&quot; height=&quot;780&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注1：用户名密码登录 Jumpserver 时，COCO 处理线程存储用户名密码，用于SSH 连接目标主机；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注2：公钥登录 Jumpserver 时，COCO 处理线程存储用户名和空密码，SSH 连接目标主机时，根据用户名从COCO本地查找密码，有则使用，无则提示输出密码；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注3：SSH 连接认证失败可尝试输入密码尝试三次，认证成功则向本地存储最近一次连接成功的加密密码。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;修改 coco/models.py，添加 password 参数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Request:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, addr):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         self.type =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         self.meta = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 80, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 24&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         self.user =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;strong&gt;self.password = &lt;span&gt;''&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt; 7&lt;/span&gt;         self.addr =&lt;span&gt; addr
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         self.remote_ip =&lt;span&gt; self.addr[0]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         self.change_size_event =&lt;span&gt; threading.Event()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         self.date_start =&lt;span&gt; datetime.datetime.now()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, chan, request):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         self.chan =&lt;span&gt; chan
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         self.request =&lt;span&gt; request
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         self.user =&lt;span&gt; request.user
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;strong&gt;self.password = request.password    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;19&lt;/span&gt;         self.addr = request.addr
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改 coco/interface.py， 赋值 request.password &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SSHInterface(paramiko.ServerInterface):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; validate_auth(self, username, password=&lt;span&gt;&quot;&quot;&lt;/span&gt;, public_key=&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         info =&lt;span&gt; app_service.authenticate(
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             username, password=password, public_key=&lt;span&gt;public_key,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             remote_addr=&lt;span&gt;self.request.remote_ip
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         user = info.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, None)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; user:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             self.request.user =&lt;span&gt; user
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;strong&gt;self.request.password = password   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; request password 赋值 @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;11&lt;/span&gt;             self.info =&lt;span&gt; info
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         seed = info.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;seed&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, None)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         token = info.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, None)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; seed &lt;span&gt;and&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; token:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             self.otp_auth =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; user
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改 coco/interactive.py &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InteractiveServer:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; display_search_result(self):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         sort_by = current_app.config[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ASSET_LIST_SORT_BY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         self.search_result =&lt;span&gt; sort_assets(self.search_result, sort_by)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         fake_data = [_(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), _(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hostname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), _(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), _(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LoginAs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         id_length = max(len(str(len(self.search_result))), 4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         hostname_length = item_max_length(self.search_result, 15&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                                           key=&lt;span&gt;lambda&lt;/span&gt;&lt;span&gt; x: x.hostname)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         sysuser_length =&lt;span&gt; item_max_length(self.search_result,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                                          key=&lt;span&gt;lambda&lt;/span&gt;&lt;span&gt; x: x.system_users_name_list)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         size_list = [id_length, hostname_length, 16&lt;span&gt;, sysuser_length]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         header_without_comment = format_with_zh(size_list, *&lt;span&gt;fake_data)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         comment_length =&lt;span&gt; max(
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             self.request.meta[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] -
&lt;span&gt;15&lt;/span&gt;             size_of_str_with_zh(header_without_comment) - 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             2
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        size_list.append(comment_length)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         fake_data.append(_(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Comment&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         self.client.send(wr(title(format_with_zh(size_list, *&lt;span&gt;fake_data))))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; index, asset &lt;span&gt;in&lt;/span&gt; enumerate(self.search_result, 1&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; data = [                                      # 注释主机显示列表  @ 周旺&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     index, asset.hostname, asset.ip,&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     asset.system_users_name_list, asset.comment&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ]&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;             data = [                                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 主机显示列表 @ 周旺&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                index, asset.hostname, asset.ip,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                self.client.user.username, asset.comment
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            ]
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;             self.client.send(wr(format_with_zh(size_list, *&lt;span&gt;data)))
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         self.client.send(wr(_(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;总共: {} 匹配: {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).format(
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             len(self.assets), len(self.search_result)), before=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; proxy(self, asset):
&lt;/span&gt;&lt;strong&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; system_user = self.choose_system_user(asset.system_users_granted)   # 注释 @ 周旺&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if system_user is None:&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     self.client.send(_(&quot;没有系统用户&quot;))&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     return&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         system_user = self.client.user      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 修改系统用户为登录用户 @ 周旺   注： 仍保持system_user 变量名，后面所有 system_user 皆是登录用户&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         password = self.client.password     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 密码 @ 周旺   --&amp;gt; by client -&amp;gt; by request&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;44&lt;/span&gt;         forwarder =&lt;span&gt; ProxyServer(self.client)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         forwarder.proxy(asset, system_user, &lt;strong&gt;password&lt;/strong&gt;)  &lt;strong&gt;&lt;span&gt;# password @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改 coco/proxy.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;87&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProxyServer:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; proxy(self, asset, system_user,&lt;strong&gt; password=&lt;span&gt;''&lt;/span&gt;&lt;/strong&gt;):  &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加 password 参数 @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;self.get_system_user_auth(system_user)        # 注释 @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;strong&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; password:                                &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加46-74行 @ 周旺&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/opt/pwd/%s.pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % system_user.username, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ab+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) as pwd:    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查找本地缓存密码&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                pwd.seek(0)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     password =&lt;span&gt; base64.b64decode(pwd.read().strip()).decode().strip()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; password = pwd.read().strip()&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     password = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; password:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 prompt = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}@{} password: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(system_user.username, asset.ip)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 password = net_input(self.client, prompt=prompt, sensitive=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; n &lt;span&gt;in&lt;/span&gt; range(4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             self.connecting =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            self.send_connecting_message(asset, system_user)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             self.server =&lt;span&gt; self.get_server_conn(asset, system_user, password)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; self.server:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/opt/pwd/%s.pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % system_user.username, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) as pwd:    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存最后一次的正确密码&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                     pwd.write(base64.b64encode(password.encode(encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;pwd.write(password)&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; n &amp;lt; 3&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 prompt = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}@{} password({}/3): &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(system_user.username, asset.ip, n+1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 password = net_input(self.client, prompt=prompt, sensitive=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; self.send_connecting_message(asset, system_user)                  # 注释 @ 周旺&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; self.server = self.get_server_conn(asset, system_user, password)&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;         command_recorder =&lt;span&gt; current_app.new_command_recorder()
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         replay_recorder =&lt;span&gt; current_app.new_replay_recorder()
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         session =&lt;span&gt; Session(
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            self.client, self.server,
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             command_recorder=&lt;span&gt;command_recorder,
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             replay_recorder=&lt;span&gt;replay_recorder,
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        current_app.add_session(session)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        self.watch_win_size_change_async()
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        session.bridge()
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        self.stop_event.set()
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        self.end_watch_win_size_change()
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        current_app.remove_session(session)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_server_conn(self, asset, system_user,&lt;strong&gt; password=&lt;span&gt;''&lt;/span&gt;&lt;/strong&gt;):  &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加 password 参数 @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;53&lt;/span&gt;         logger.info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connect to {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(asset.hostname))
&lt;/span&gt;&lt;strong&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if not self.validate_permission(asset, system_user):    # 注释 @ 周旺&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     self.client.send(warning('No permission'))&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     return None&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if True:&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     server = self.get_ssh_server_conn(asset, system_user)&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; else:&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     server = self.get_ssh_server_conn(asset, system_user)&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;/strong&gt;
&lt;span&gt;62&lt;/span&gt;         server =&lt;span&gt; self.get_ssh_server_conn(asset, system_user, &lt;strong&gt;password&lt;/strong&gt;) &lt;strong&gt;&lt;span&gt;# password @ 周旺
&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; server
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_ssh_server_conn(self, asset, system_user, &lt;strong&gt;password=&lt;span&gt;''&lt;/span&gt;&lt;/strong&gt;): &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加 password 参数 @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;66&lt;/span&gt;         request =&lt;span&gt; self.client.request
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         term = request.meta.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;term&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xterm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         width = request.meta.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 80&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;         height = request.meta.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 24&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         ssh =&lt;span&gt; SSHConnection()
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;         chan, sock, msg =&lt;span&gt; ssh.get_channel(
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             asset, system_user, term=term, width=width, height=height,&lt;strong&gt; password=password&lt;/strong&gt;)   &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; password @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; chan:
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;             self.client.send(warning(wr(msg, before=1, after=&lt;span&gt;0)))
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;             server =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;             server =&lt;span&gt; Server(chan, sock, asset, system_user)
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;         self.connecting =&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         self.client.send(b&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; server
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; send_connecting_message(self, asset, system_user):
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func():
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;             delay = 0.0
&lt;span&gt;85&lt;/span&gt;             self.client.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Connecting to {}@{} {:.1f}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;                 &lt;strong&gt;system_user.username, asset.ip,&lt;/strong&gt; delay)          &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 修改为 用户名，ip地址 @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;87&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; self.connecting &lt;span&gt;and&lt;/span&gt; delay &amp;lt;&lt;span&gt; TIMEOUT:
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;                 self.client.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\x08\x08\x08{:.1f}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(delay).encode())
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;                 time.sleep(0.1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt;                 delay += 0.1
&lt;span&gt;92&lt;/span&gt;         thread = threading.Thread(target=&lt;span&gt;func)
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt;         thread.start()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt; 修改 coco/connection.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SSHConnection:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_ssh_client(self, asset, system_user,&lt;strong&gt; password=&lt;span&gt;''&lt;/span&gt;&lt;/strong&gt;):  &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加 password 参数 @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt; 3&lt;/span&gt;         ssh =&lt;span&gt; paramiko.SSHClient()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         sock =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;strong&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if not system_user.password and not system_user.private_key:    # 注释 @ 周旺&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     self.get_system_user_auth(system_user)&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; asset.domain:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             sock =&lt;span&gt; self.get_proxy_sock_v2(asset)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            ssh.connect(
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 asset.ip, port=asset.port, username=&lt;span&gt;system_user.username,
&lt;/span&gt;&lt;strong&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;password=system_user.password, pkey=system_user.private_key,  # 注释 @ 周旺&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                 password=password,                                             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; password @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;17&lt;/span&gt;                 timeout=TIMEOUT, compress=True, auth_timeout=&lt;span&gt;TIMEOUT,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 look_for_keys=False, sock=&lt;span&gt;sock
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; (paramiko.AuthenticationException,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                paramiko.BadAuthenticationType,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                SSHException) as e:
&lt;/span&gt;&lt;strong&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; password_short = &quot;None&quot;                                       # 注释 @ 周旺  注：感觉没啥用&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; key_fingerprint = &quot;None&quot;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if system_user.password:&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     password_short = system_user.password[:5] + \&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;                      (len(system_user.password) - 5) * '*'&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if system_user.private_key:&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     key_fingerprint = get_private_key_fingerprint(&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;         system_user.private_key&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     )&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; logger.error(&quot;Connect {}@{}:{} auth failed, password: \&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;                      {}, key: {}&quot;.format(&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     system_user.username, asset.ip, asset.port,&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     password_short, key_fingerprint,&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ))&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None, None, str(e)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; (socket.error, TimeoutError) as e:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None, None, str(e)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ssh, sock, None
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; get_channel(self, asset, system_user, term=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xterm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, width=80, height=24, &lt;strong&gt;password=&lt;span&gt;''&lt;/span&gt;&lt;/strong&gt;):  &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; password 参数 @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;44&lt;/span&gt;         ssh, sock, msg = self.get_ssh_client(asset, system_user, &lt;strong&gt;password&lt;/strong&gt;) &lt;strong&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; password @ 周旺&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; ssh:
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             chan = ssh.invoke_shell(term, width=width, height=&lt;span&gt;height)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; chan, sock, None
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; None, sock, msg
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;效果展示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/900109/201807/900109-20180714152505320-1935383347.png&quot; alt=&quot;&quot; width=&quot;879&quot; height=&quot;434&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 后记&lt;/h2&gt;
&lt;p&gt;　　以上仅适用 jumpserver 终端命令行，没有涉及对jumpserver web 终端及SFTP的修改。&lt;/p&gt;
&lt;p&gt;      谢 jumpserver 团队：&lt;a href=&quot;http://www.jumpserver.org/&quot; target=&quot;_blank&quot;&gt;http://www.jumpserver.org/&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 14 Jul 2018 07:35:00 +0000</pubDate>
<dc:creator>卑鄙的wo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wowoo1121/p/9309398.html</dc:identifier>
</item>
<item>
<title>MySQL中间件之ProxySQL(8)：SQL语句的重写规则 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/9309760.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/9309760.html</guid>
<description>&lt;p&gt;ProxySQL在收到前端发送来的SQL语句后，可以根据已定制的规则去匹配它，匹配到了还可以去重写这个语句，然后再路由到后端去。&lt;/p&gt;
&lt;p&gt;什么时候需要重写SQL语句？&lt;/p&gt;
&lt;p&gt;对于下面这种简单的读、写分离，当然用不上重写SQL语句。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201807/733013-20180714000303833-1222496720.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样的读写分离，实现起来非常简单。如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysql_replication_hostgroups: 
+------------------+------------------+----------+
| writer_hostgroup | reader_hostgroup | comment  |
+------------------+------------------+----------+
| 10               | 20               | cluster1 |
+------------------+------------------+----------+

mysql_servers: 
+--------------+----------+------+--------+--------+
| hostgroup_id | hostname | port | status | weight |
+--------------+----------+------+--------+--------+
| 10           | master   | 3306 | ONLINE | 1      |
| 20           | slave1   | 3306 | ONLINE | 1      |
| 20           | slave2   | 3306 | ONLINE | 1      |
+--------------+----------+------+--------+--------+

mysql_query_rules: 
+---------+-----------------------+----------------------+
| rule_id | destination_hostgroup | match_digest         |
+---------+-----------------------+----------------------+
| 1       | 10                    | ^SELECT.*FOR UPDATE$ |
| 2       | 20                    | ^SELECT              |
+---------+-----------------------+----------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，复杂一点的，例如ProxySQL实现sharding功能。对db1库的select_1语句路由给hg=10的组，将db2库的select_2语句路由给hg=20的组，将db3库的select_3语句路由给hg=30的组。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201807/733013-20180714000331906-509007422.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在ProxySQL实现sharding时，基本上都需要将SQL语句进行重写。这里用一个简单的例子来说明分库是如何进行的。&lt;/p&gt;
&lt;p&gt;假如，计算机学院it_db占用一个数据库，里面有一张学生表stu，stu表中有代表专业的字段zhuanye(例子只是随便举的，请无视合理性)。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;it_db库: stu表
+---------+----------+---------+
| stu_id  | stu_name | zhuanye |
+---------+----------+---------+
| 1-99    | ...      | Linux   |
+---------+----------+---------+
| 100-150 | ...      | MySQL   |
+---------+----------+---------+
| 151-250 | ...      | JAVA    |
+---------+----------+---------+
| 251-550 | ...      | Python  |
+---------+----------+---------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;分库时，可以为各个专业创建库。于是，创建4个库，每个库中仍保留stu表，但只保留和库名对应的学生数据：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Linux库：stu表
+---------+----------+---------+
| stu_id  | stu_name | zhuanye |
+---------+----------+---------+
| 1-99    | ...      | Linux   |
+---------+----------+---------+

MySQL库：stu表
+---------+----------+---------+
| stu_id  | stu_name | zhuanye |
+---------+----------+---------+
| 100-150 | ...      | MySQL   |
+---------+----------+---------+

JAVA库：stu表
+---------+----------+---------+
| stu_id  | stu_name | zhuanye |
+---------+----------+---------+
| 151-250 | ...      | JAVA    |
+---------+----------+---------+

Python库：stu表
+---------+----------+---------+
| stu_id  | stu_name | zhuanye |
+---------+----------+---------+
| 251-550 | ...      | Python  |
+---------+----------+---------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;于是，原来查询MySQL专业学生的SQL语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from it_db.stu where zhuanye='MySQL' and xxx;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;分库后，该SQL语句需要重写为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from MySQL.stu where 1=1 and xxx;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至于如何达到上述目标，本文结尾给出了一个参考规则。&lt;/p&gt;
&lt;p&gt;sharding而重写只是一种情况，在很多使用复杂ProxySQL路由规则时可能都需要重写SQL语句。下面将简单介绍ProxySQL的语句重写，为后文做个铺垫，在之后介绍ProxySQL + sharding的文章中有更多具体的用法。&lt;/p&gt;


&lt;p&gt;在mysql_query_rules表中有match_pattern字段和replace_pattern字段，前者是匹配SQL语句的正则表达式，后者是匹配成功后(命中规则)，将原SQL语句改写，改写后再路由给后端。&lt;/p&gt;
&lt;p&gt;需要注意几点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;如果不设置replace_pattern字段，则不会重写。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;要重写SQL语句，&lt;strong&gt;必须使用match_pattern的方式做正则匹配，不能使用match_digest&lt;/strong&gt;。因为match_digest是对参数化后的语句进行匹配。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;ProxySQL支持两种正则引擎：RE2和PCRE，默认使用的引擎是PCRE。这两个引擎默认都设置了caseless修饰符(re_modifiers字段)，表示匹配时忽略大小写。还可以设置其它修饰符，如global修饰符，global修饰符主要用于SQL语句重写，表示全局替换，而非首次替换。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;因为SQL语句千变万化，&lt;strong&gt;在写正则语句的时候，一定要注意&quot;贪婪匹配&quot;和&quot;非贪婪匹配&quot;的问题&lt;/strong&gt;。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;stats_mysql_query_digest表中的digest_text字段显示了替换后的语句。也就是真正路由出去的语句。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;本文的替换规则出于入门的目的，很简单，只需掌握最基本的正则知识即可。但想要灵活运用，需要掌握PCRE的正则，如果您已有正则的基础，可参考我的一篇总结性文章：&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7684762.html&quot;&gt;pcre和正则表达式的误点&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例如，将下面的语句1重写为语句2。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select * from test1.t1;
select * from test1.t2;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;插入如下规则：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delete from mysql_query_rules;
select * from stats_mysql_query_digest_reset where 1=0;

insert into mysql_query_rules(rule_id,active,match_pattern,replace_pattern,destination_hostgroup,apply) 
values (1,1,&quot;^(select.*from )test1.t1(.*)&quot;,&quot;\1test1.t2\2&quot;,20,1);

load mysql query rules to runtime;
save mysql query rules to disk;

select rule_id,destination_hostgroup,match_pattern,replace_pattern from mysql_query_rules;
+---------+-----------------------+------------------------------+-----------------+
| rule_id | destination_hostgroup | match_pattern                | replace_pattern |
+---------+-----------------------+------------------------------+-----------------+
| 1       | 20                    | ^(select.*from )test1.t1(.*) | \1test1.t2\2    |
+---------+-----------------------+------------------------------+-----------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后执行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ proc=&quot;mysql -uroot -pP@ssword1! -h127.0.0.1 -P6033 -e&quot;
$ $proc &quot;select * from test1.t1;&quot;
+------------------+
| name             |
+------------------+
| test1_t2_malong1 |
| test1_t2_malong2 |
| test1_t2_malong3 |
+------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见语句成功重写。&lt;/p&gt;
&lt;p&gt;再看看规则的状态。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Admin&amp;gt; select rule_id,hits from stats_mysql_query_rules; 
+---------+------+
| rule_id | hits |
+---------+------+
| 1       | 1    |
| 2       | 0    |
+---------+------+

Admin&amp;gt; select hostgroup,count_star,digest_text from stats_mysql_query_digest;
+-----------+------------+------------------------+
| hostgroup | count_star | digest_text            |
+-----------+------------+------------------------+
| 20        | 1          | select * from test1.t2 |  &amp;lt;--已替换
+-----------+------------+------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;更简单的，还可以直接替换单词。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delete from mysql_query_rules;
select * from stats_mysql_query_digest_reset where 1=0;

insert into mysql_query_rules(rule_id,active,match_pattern,replace_pattern,destination_hostgroup,apply) 
values (1,1,&quot;test1.t1&quot;,&quot;test1.t2&quot;,20,1);

load mysql query rules to runtime;
save mysql query rules to disk;

select rule_id,destination_hostgroup,match_pattern,replace_pattern from mysql_query_rules;
+---------+-----------------------+---------------+-----------------+
| rule_id | destination_hostgroup | match_pattern | replace_pattern |
+---------+-----------------------+---------------+-----------------+
| 1       | 20                    | test1.t1      | test1.t2        |
+---------+-----------------------+---------------+-----------------+&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;以本文前面sharding示例中的语句为例，简单演示下sharding时的分库语句怎么改写。更完整的sharding实现方法，见后面的文章。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#原来查询MySQL专业学生的SQL语句：
select * from it_db.stu where zhuanye='MySQL' and xxx;
             |
             |
             |
            \|/
#改写为查询分库MySQL的SQL语句：
select * from MySQL.stu where 1=1 and xxx;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是完整语句：关于这个规则中的正则部分，稍后会解释。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delete from mysql_query_rules;
select * from stats_mysql_query_digest_reset where 1=0;

insert into mysql_query_rules(rule_id,active,apply,destination_hostgroup,match_pattern,replace_pattern) 
values (1,1,1,20,&quot;^(select.*?from) it_db\.(.*?) where zhuanye=['&quot;&quot;](.*?)['&quot;&quot;] (.*)$&quot;,&quot;\1 \3.\2 where 1=1 \4&quot;);

load mysql query rules to runtime;
save mysql query rules to disk;

select rule_id,destination_hostgroup dest_hg,match_pattern,replace_pattern from mysql_query_rules;
+---------+---------+-----------------------------------------------------------------+-----------------------+
| rule_id | dest_hg | match_pattern                                                   | replace_pattern       |
+---------+---------+-----------------------------------------------------------------+-----------------------+
| 1       | 20      | ^(select.*?from) it_db\.(.*?) where zhuanye=['&quot;](.*?)['&quot;] (.*)$ | \1 \3.\2 where 1=1 \4 |
+---------+---------+-----------------------------------------------------------------+-----------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后执行分库查询语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;proc=&quot;mysql -uroot -pP@ssword1! -h127.0.0.1 -P6033 -e&quot;
$proc &quot;select * from it_db.stu where zhuanye='MySQL' and 1=1;&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看看是否命中规则，并成功改写SQL语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Admin&amp;gt; select rule_id,hits from stats_mysql_query_rules; 
+---------+------+
| rule_id | hits |
+---------+------+
| 1       | 1    |
+---------+------+

Admin&amp;gt; select hostgroup,count_star,digest_text from stats_mysql_query_digest;
+-----------+------------+-------------------------------------------+
| hostgroup | count_star | digest_text                               |
+-----------+------------+-------------------------------------------+
| 20        | 1          | select * from MySQL.stu where ?=? and ?=? |
| 10        | 1          | select @@version_comment limit ?          |
+-----------+------------+-------------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解释下前面的规则：&lt;/p&gt;
&lt;p&gt;match_pattern:&lt;br/&gt;- &lt;code&gt;&quot;^(select.*?from) it_db\.(.*?) where zhuanye=['&quot;&quot;](.*?)['&quot;&quot;] (.*)$&quot;&lt;/code&gt;&lt;br/&gt;replace_pattern:&lt;br/&gt;- &lt;code&gt;&quot;\1 \3.\2 where 1=1 \4&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^(select.*?from)&lt;/code&gt;：表示不贪婪匹配到from字符。之所以不贪婪匹配，是为了避免子查询或join子句出现多个from的情况。&lt;br/&gt;&lt;code&gt;it_db\.(.*?)&lt;/code&gt;：这里的it_db是稍后要替换掉为&quot;MySQL&quot;字符的部分，而it_db后面的表稍后要附加在&quot;MySQL&quot;字符后，所以对其分组捕获。&lt;br/&gt;&lt;code&gt;zhuanye=['&quot;&quot;](.*?)['&quot;&quot;]&lt;/code&gt;：&lt;br/&gt;- 这里的zhuanye字段稍后是要删除的，但后面的字段值&quot;MySQL&quot;需要保留作为稍后的分库，因此对字段值分组捕获。同时，字段值前后的引号可能是单引号、双引号，所以两种情况都要考虑到。&lt;br/&gt;- &lt;code&gt;['&quot;&quot;]&lt;/code&gt;：要把引号保留下来，需要对额外的引号进行转义：双引号转义后成单个双引号。所以，真正插入到表中的结果是&lt;code&gt;['&quot;]&lt;/code&gt;。&lt;br/&gt;- 这里的语句并不健壮，因为如果是&lt;code&gt;zhuanye='MySQL&quot;&lt;/code&gt;这样单双引号混用也能被匹配。如果要避免这种问题，需要使用PCRE的反向引用。例如，改写为：&lt;code&gt;zhuanye=(['&quot;&quot;])(.*?)\g[N]&lt;/code&gt;，这里的&lt;code&gt;[N]&lt;/code&gt;要替换为&lt;code&gt;(['&quot;&quot;])&lt;/code&gt;对应的分组号码，例如&lt;code&gt;\g3&lt;/code&gt;。&lt;br/&gt;&lt;code&gt;(.*)$&lt;/code&gt;：匹配到结束。因为这里的测试语句简单，没有join和子查询什么的，所以直接匹配。&lt;br/&gt;&lt;code&gt;&quot;\1 \3.\2 where 1=1 \4&quot;&lt;/code&gt;：这里加了&lt;code&gt;1=1&lt;/code&gt;，是为了防止出现and/or等运算符时前面缺少表达式。例如&lt;code&gt;(.*)$&lt;/code&gt;捕获到的内容为&lt;code&gt;and xxx=1&lt;/code&gt;，不加上1=1的话，将替换为&lt;code&gt;where and xxx=1&lt;/code&gt;，这是错误的语句，所以1=1是个占位表达式。&lt;/p&gt;
&lt;p&gt;可见，要想实现一些复杂的匹配目标，正则表达式是非常繁琐的。所以，很有必要去掌握PCRE正则表达式。&lt;/p&gt;
</description>
<pubDate>Sat, 14 Jul 2018 07:23:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/9309760.html</dc:identifier>
</item>
<item>
<title>.NET Core开发日志——从ASP.NET Core Module到KestrelServer - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9309264.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9309264.html</guid>
<description>&lt;p&gt;ASP.NET Core程序现在变得如同控制台(Console)程序一般，同样通过Main方法启动整个应用。而Main方法要做的事情很简单，创建一个WebHostBuilder类，调用其Build方法生成一个WebHost类，最后启动之。&lt;/p&gt;
&lt;p&gt;实现代码一目了然：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class Program
{
    public static void Main(string[] args)
    {
        CreateWebHostBuilder(args).Build().Run();
    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&amp;gt;
        WebHost.CreateDefaultBuilder(args)
            .UseStartup&amp;lt;Startup&amp;gt;();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要想探寻其内部究竟做了哪些操作，则需要调查下WebHost类中CreateDefaultBuilder静态方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static IWebHostBuilder CreateDefaultBuilder(string[] args)
{
    var builder = new WebHostBuilder();

    if (string.IsNullOrEmpty(builder.GetSetting(WebHostDefaults.ContentRootKey)))
    {
        builder.UseContentRoot(Directory.GetCurrentDirectory());
    }
    if (args != null)
    {
        builder.UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build());
    }

    builder.UseKestrel((builderContext, options) =&amp;gt;
        {
            options.Configure(builderContext.Configuration.GetSection(&quot;Kestrel&quot;));
        })
        .ConfigureAppConfiguration((hostingContext, config) =&amp;gt;
        {
            var env = hostingContext.HostingEnvironment;

            config.AddJsonFile(&quot;appsettings.json&quot;, optional: true, reloadOnChange: true)
                  .AddJsonFile($&quot;appsettings.{env.EnvironmentName}.json&quot;, optional: true, reloadOnChange: true);

            if (env.IsDevelopment())
            {
                var appAssembly = Assembly.Load(new AssemblyName(env.ApplicationName));
                if (appAssembly != null)
                {
                    config.AddUserSecrets(appAssembly, optional: true);
                }
            }

            config.AddEnvironmentVariables();

            if (args != null)
            {
                config.AddCommandLine(args);
            }
        })
        .ConfigureLogging((hostingContext, logging) =&amp;gt;
        {
            logging.AddConfiguration(hostingContext.Configuration.GetSection(&quot;Logging&quot;));
            logging.AddConsole();
            logging.AddDebug();
        })
        .ConfigureServices((hostingContext, services) =&amp;gt;
        {
            // Fallback
            services.PostConfigure&amp;lt;HostFilteringOptions&amp;gt;(options =&amp;gt;
            {
                if (options.AllowedHosts == null || options.AllowedHosts.Count == 0)
                {
                    // &quot;AllowedHosts&quot;: &quot;localhost;127.0.0.1;[::1]&quot;
                    var hosts = hostingContext.Configuration[&quot;AllowedHosts&quot;]?.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                    // Fall back to &quot;*&quot; to disable.
                    options.AllowedHosts = (hosts?.Length &amp;gt; 0 ? hosts : new[] { &quot;*&quot; });
                }
            });
            // Change notification
            services.AddSingleton&amp;lt;IOptionsChangeTokenSource&amp;lt;HostFilteringOptions&amp;gt;&amp;gt;(
                new ConfigurationChangeTokenSource&amp;lt;HostFilteringOptions&amp;gt;(hostingContext.Configuration));

            services.AddTransient&amp;lt;IStartupFilter, HostFilteringStartupFilter&amp;gt;();
        })
        .UseIISIntegration()
        .UseDefaultServiceProvider((context, options) =&amp;gt;
        {
            options.ValidateScopes = context.HostingEnvironment.IsDevelopment();
        });

    return builder;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码稍微有点多，但这里只关心WebHostBuilder类的创建，以及该builder使用了UseKestrel方法。&lt;/p&gt;
&lt;p&gt;UseKestrel方法内部通过IoC的方式注入了KestrelServer类：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static IWebHostBuilder UseKestrel(this IWebHostBuilder hostBuilder)
{
    return hostBuilder.ConfigureServices(services =&amp;gt;
    {
        // Don't override an already-configured transport
        services.TryAddSingleton&amp;lt;ITransportFactory, SocketTransportFactory&amp;gt;();

        services.AddTransient&amp;lt;IConfigureOptions&amp;lt;KestrelServerOptions&amp;gt;, KestrelServerOptionsSetup&amp;gt;();
        services.AddSingleton&amp;lt;IServer, KestrelServer&amp;gt;();
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由此可以知道当一个ASP.NET Core应用程序运行起来时，其内部会有KestrelServer。&lt;/p&gt;
&lt;p&gt;那么为什么会需要这个KestrelServer？因为它可以做为一个反向代理服务器，帮助ASP.NET Core实现跨平台的需要。&lt;/p&gt;
&lt;p&gt;以传统Windows系统上的IIS为例，如下图所示，ASP.NET Core应用程序中的代码已经不再直接依赖于IIS容器，而是通过KestrelServer这个代理将HTTP请求转换为HttpContext对象，再对此对象进行处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180714121350030-1262936026.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图中的ASP.NET Core Module也是由ASP.NET Core的诞生而引入的新的IIS模块。它的主要功能是将Web请求重定向至ASP.NET Core应用程序。并且由于ASP.NET Core应用程序独立运行于IIS工作进程之外的进程，它还负责对进程的管理。&lt;/p&gt;
&lt;p&gt;ASP.NET Core Module的源码由C++编写，入口是main文件中的RegisterModule函数。&lt;/p&gt;
&lt;p&gt;其函数内部实例化了CProxyModuleFactory工厂类。&lt;/p&gt;
&lt;pre class=&quot;c++&quot;&gt;
&lt;code&gt;pFactory = new CProxyModuleFactory;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而由这个工厂类创建的CProxyModule实例中有一个关键的CProxyModule::OnExecuteRequestHandler方法。它会创建FORWARDING_HANDLER实例，并调用其OnExecuteRequestHandler方法。&lt;/p&gt;
&lt;pre class=&quot;c++&quot;&gt;
&lt;code&gt;__override
REQUEST_NOTIFICATION_STATUS
CProxyModule::OnExecuteRequestHandler(
    IHttpContext *          pHttpContext,
    IHttpEventProvider *
)
{
    m_pHandler = new FORWARDING_HANDLER(pHttpContext);
    if (m_pHandler == NULL)
    {
        pHttpContext-&amp;gt;GetResponse()-&amp;gt;SetStatus(500, &quot;Internal Server Error&quot;, 0, E_OUTOFMEMORY);
        return RQ_NOTIFICATION_FINISH_REQUEST;
    }

    return m_pHandler-&amp;gt;OnExecuteRequestHandler();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在此方法里就有那些核心的处理HTTP请求的操作。&lt;/p&gt;
&lt;pre class=&quot;c++&quot;&gt;
&lt;code&gt;// 实例化应用程序管理器
pApplicationManager = APPLICATION_MANAGER::GetInstance();

// 取得应用程序实例
hr = pApplicationManager-&amp;gt;GetApplication(m_pW3Context, &amp;amp;m_pApplication);

// 取得该应用程序的进程
hr = m_pApplication-&amp;gt;GetProcess(m_pW3Context, pAspNetCoreConfig, &amp;amp;pServerProcess);

// 创建HTTP请求
hr = CreateWinHttpRequest(pRequest,
        pProtocol,
        hConnect,
        &amp;amp;struEscapedUrl,
        pAspNetCoreConfig,
        pServerProcess);

//  发送HTTP请求
if (!WinHttpSendRequest(m_hRequest,
    m_pszHeaders,
    m_cchHeaders,
    NULL,
    0,
    cbContentLength,
    reinterpret_cast&amp;lt;DWORD_PTR&amp;gt;(static_cast&amp;lt;PVOID&amp;gt;(this))))
{
    hr = HRESULT_FROM_WIN32(GetLastError());
    DebugPrintf(ASPNETCORE_DEBUG_FLAG_INFO,
        &quot;FORWARDING_HANDLER::OnExecuteRequestHandler, Send request failed&quot;);
    goto Failure;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在ASP.NET Core应用程序这端，&lt;code&gt;CreateWebHostBuilder(args).Build().Run();&lt;/code&gt;代码执行之后，会调用其对应的异步方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private static async Task RunAsync(this IWebHost host, CancellationToken token, string shutdownMessage)
{
    using (host)
    {
        await host.StartAsync(token);

        var hostingEnvironment = host.Services.GetService&amp;lt;IHostingEnvironment&amp;gt;();
        var options = host.Services.GetRequiredService&amp;lt;WebHostOptions&amp;gt;();

        if (!options.SuppressStatusMessages)
        {
            Console.WriteLine($&quot;Hosting environment: {hostingEnvironment.EnvironmentName}&quot;);
            Console.WriteLine($&quot;Content root path: {hostingEnvironment.ContentRootPath}&quot;);


            var serverAddresses = host.ServerFeatures.Get&amp;lt;IServerAddressesFeature&amp;gt;()?.Addresses;
            if (serverAddresses != null)
            {
                foreach (var address in serverAddresses)
                {
                    Console.WriteLine($&quot;Now listening on: {address}&quot;);
                }
            }

            if (!string.IsNullOrEmpty(shutdownMessage))
            {
                Console.WriteLine(shutdownMessage);
            }
        }

        await host.WaitForTokenShutdownAsync(token);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该方法中又调用了WebHost的StartAsync方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public virtual async Task StartAsync(CancellationToken cancellationToken = default)
{
    HostingEventSource.Log.HostStart();
    _logger = _applicationServices.GetRequiredService&amp;lt;ILogger&amp;lt;WebHost&amp;gt;&amp;gt;();
    _logger.Starting();

    var application = BuildApplication();

    _applicationLifetime = _applicationServices.GetRequiredService&amp;lt;IApplicationLifetime&amp;gt;() as ApplicationLifetime;
    _hostedServiceExecutor = _applicationServices.GetRequiredService&amp;lt;HostedServiceExecutor&amp;gt;();
    var diagnosticSource = _applicationServices.GetRequiredService&amp;lt;DiagnosticListener&amp;gt;();
    var httpContextFactory = _applicationServices.GetRequiredService&amp;lt;IHttpContextFactory&amp;gt;();
    var hostingApp = new HostingApplication(application, _logger, diagnosticSource, httpContextFactory);
    await Server.StartAsync(hostingApp, cancellationToken).ConfigureAwait(false);

    // Fire IApplicationLifetime.Started
    _applicationLifetime?.NotifyStarted();

    // Fire IHostedService.Start
    await _hostedServiceExecutor.StartAsync(cancellationToken).ConfigureAwait(false);

    _logger.Started();

    // Log the fact that we did load hosting startup assemblies.
    if (_logger.IsEnabled(LogLevel.Debug))
    {
        foreach (var assembly in _options.GetFinalHostingStartupAssemblies())
        {
            _logger.LogDebug(&quot;Loaded hosting startup assembly {assemblyName}&quot;, assembly);
        }
    }

    if (_hostingStartupErrors != null)
    {
        foreach (var exception in _hostingStartupErrors.InnerExceptions)
        {
            _logger.HostingStartupAssemblyError(exception);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BuildApplication方法内部从IoC容器取出KestrelServer的实例：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private void EnsureServer()
{
    if (Server == null)
    {
        Server = _applicationServices.GetRequiredService&amp;lt;IServer&amp;gt;();

        var serverAddressesFeature = Server.Features?.Get&amp;lt;IServerAddressesFeature&amp;gt;();
        var addresses = serverAddressesFeature?.Addresses;
        if (addresses != null &amp;amp;&amp;amp; !addresses.IsReadOnly &amp;amp;&amp;amp; addresses.Count == 0)
        {
            var urls = _config[WebHostDefaults.ServerUrlsKey] ?? _config[DeprecatedServerUrlsKey];
            if (!string.IsNullOrEmpty(urls))
            {
                serverAddressesFeature.PreferHostingUrls = WebHostUtilities.ParseBool(_config, WebHostDefaults.PreferHostingUrlsKey);

                foreach (var value in urls.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    addresses.Add(value);
                }
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后调用KestrelServer的StartAsync方法:&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public async Task StartAsync&amp;lt;TContext&amp;gt;(IHttpApplication&amp;lt;TContext&amp;gt; application, CancellationToken cancellationToken)
{
    try
    {
        if (!BitConverter.IsLittleEndian)
        {
            throw new PlatformNotSupportedException(CoreStrings.BigEndianNotSupported);
        }

        ValidateOptions();

        if (_hasStarted)
        {
            // The server has already started and/or has not been cleaned up yet
            throw new InvalidOperationException(CoreStrings.ServerAlreadyStarted);
        }
        _hasStarted = true;
        _heartbeat.Start();

        async Task OnBind(ListenOptions endpoint)
        {
            // Add the HTTP middleware as the terminal connection middleware
            endpoint.UseHttpServer(endpoint.ConnectionAdapters, ServiceContext, application, endpoint.Protocols);

            var connectionDelegate = endpoint.Build();

            // Add the connection limit middleware
            if (Options.Limits.MaxConcurrentConnections.HasValue)
            {
                connectionDelegate = new ConnectionLimitMiddleware(connectionDelegate, Options.Limits.MaxConcurrentConnections.Value, Trace).OnConnectionAsync;
            }

            var connectionDispatcher = new ConnectionDispatcher(ServiceContext, connectionDelegate);
            var transport = _transportFactory.Create(endpoint, connectionDispatcher);
            _transports.Add(transport);

            await transport.BindAsync().ConfigureAwait(false);
        }

        await AddressBinder.BindAsync(_serverAddresses, Options, Trace, OnBind).ConfigureAwait(false);
    }
    catch (Exception ex)
    {
        Trace.LogCritical(0, ex, &quot;Unable to start Kestrel.&quot;);
        Dispose();
        throw;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;到了这一步，KestrelServer终于可以监听来自ASP.NET Core Module发出的HTTP请求，而ASP.NET Core应用程序也可以开始其自身的任务处理了。&lt;/p&gt;
</description>
<pubDate>Sat, 14 Jul 2018 05:56:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9309264.html</dc:identifier>
</item>
<item>
<title>吴恩达《深度学习》第二门课（3）超参数调试、Batch正则化和程序框架 - ysyouaremyall</title>
<link>http://www.cnblogs.com/ys99/p/9308804.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ys99/p/9308804.html</guid>
<description>&lt;h2&gt;3.1调试处理&lt;/h2&gt;
&lt;p&gt;（1）不同超参数调试的优先级是不一样的，如下图中的一些超参数，首先最重要的应该是学习率α（红色圈出），然后是Momentum算法的β、隐藏层单元数、mini-batch size（黄色圈出）、再之后是Layer、learning rate decay（紫色圈出）、最后是Adam算法中的β&lt;sub&gt;1&lt;/sub&gt;、β&lt;sub&gt;2&lt;/sub&gt;、ε。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714094933493-531830857.png&quot; alt=&quot;&quot; width=&quot;271&quot; height=&quot;261&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）用随机取值代替网格点取值。下图左边是网格点取值，如果二维参数中，一个参数调试的影响特别小，那么虽然取了25个点，其实只相当于取了5个不同的点；而右图中随机取值取了多少个点就代表有多少不同值的点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714095248458-1699170655.png&quot; alt=&quot;&quot; width=&quot;529&quot; height=&quot;203&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）由粗糙到精细的取值，先粗糙取值，然后发现最好的点，再在这个点附近进行精细的取值。如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714095451719-1400896131.png&quot; alt=&quot;&quot; width=&quot;351&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2为超参数选择合适的范围&lt;/h2&gt;
&lt;p&gt;（1）随机取值并不是在取值范围内随机均匀取值，而是要选择合适的标尺来随机取值。&lt;/p&gt;
&lt;p&gt;（2）案例1：在选择网络层数时，其范围是[2,4]，那么直接均匀取值2，3，4都是合理的。&lt;/p&gt;
&lt;p&gt;（3）案例2：如果在给学习率取值时，其范围是[0.0001,1],如果均匀取值，将会有90%的点落在0.1到1之间，这时不合理的；此时应该用对数坐标0.0001=10&lt;sup&gt;-4&lt;/sup&gt;,1=10&lt;sup&gt;0&lt;/sup&gt;,所以应该是在[-4,0]上随机均匀取值作为r,然后10&lt;sup&gt;r&lt;/sup&gt;作为学习率α。如下图所示&lt;sub&gt;&lt;br/&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714100846027-321705381.png&quot; alt=&quot;&quot; width=&quot;588&quot; height=&quot;188&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）指数加权平均的超参数β取值范围是[0.9,0.999],其方法是：1-β=[0.1,0.001],然后再根据学习率提到的用对数坐标来随机取值。&lt;/p&gt;
&lt;p&gt;（5）在取值微小变化会带来巨大结果不同的地方（β在0.9990到0.9995敏感度就比0.9到0.9005高）即灵敏度高，需要去更多更密集的值，这就是为什么要选择合适的标尺。&lt;/p&gt;
&lt;h2&gt;3.3超参数训练的实践&lt;/h2&gt;
&lt;p&gt;（1）当计算资源少的时候，只能一个模型慢慢调参，悉心照顾，当计算资源丰富时，可以模型同时选择不同参数进行训练，然后找出最优的。如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714102839843-1745688226.png&quot; alt=&quot;&quot; width=&quot;541&quot; height=&quot;304&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.4归一化网络的激活函数&lt;/h2&gt;
&lt;p&gt;（1）计算过程如下图所示（总共包括四个式子）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714104019657-1487983032.png&quot; alt=&quot;&quot; width=&quot;611&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）特征输入归一化之后均值为0，方差为1，但是对隐藏层的归一化而言，她的均值和方差是空调的，即通过γ、β两个超参数调整。之所以不希望都是均值为0，方差为1，因为那样的话可能都集中再激活函数的线性区域，导致可能没法得到任意想要的值。如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714104439303-866717995.png&quot; alt=&quot;&quot; width=&quot;177&quot; height=&quot;165&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）一般情况下都是对z（即激活函数之前）进行归一化的。&lt;/p&gt;
&lt;h2&gt;3.5将Batch Norm拟合进神经网络&lt;/h2&gt;
&lt;p&gt;（1）使用以下公式来进行更新参数，其中原来的b已经可以去掉，因为不管是多少都会在归一化中被消除，然后用新的参数β替代（此处的β是归一化时的参数，不是优化算法中的β）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714121008541-933315710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714121032703-1017894243.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714121100658-508930223.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;除了以上的这种更新方式之外，也可以用其他优化算法进行更新。&lt;/p&gt;
&lt;h2&gt;3.6Batch Norm为什么奏效&lt;/h2&gt;
&lt;p&gt;（1）浅层的理解可以按照之前提到的，把输入特征归一化之后，可以加快训练的思路来理解每一层归一化的作用。&lt;/p&gt;
&lt;p&gt;（2）深层原因：当已经学的x到y的映射，然后当x的分布发生变化是，该映射将需要重新学习，这里的x可以理解成中间的某一隐藏层，x的分布是受到它前面层参数的影响的，为了时x的分布尽量不受到影响（这样x到y的映射可以尽量少做调整），所以加入了归一化，这样x的均值可以始终固定为β，方差固定为α。这样即使x值会发生变化，但是其分布是不变的（或者说变得更少），这样一来减弱了前层参数对后层参数的影响，互相之间相对较独立，更有利于各层之间学习自己的映射，这样有助于加速网络的训练。如下图中框选出来的中间层它的值受前面参数影响，同时又是后层的输入，归一化保证了该层的分布不变性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714122944628-1230162659.png&quot; alt=&quot;&quot; width=&quot;576&quot; height=&quot;271&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.7测试时的Batch Norm&lt;/h2&gt;
&lt;p&gt;（1）训练时mini-batch有样本来计算均值和方差，如下式子（式子中的m是mini-batch size）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714123904769-1842600262.png&quot; alt=&quot;&quot; width=&quot;284&quot; height=&quot;294&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）但是在测试集时，是一个一个进行测试的，一个样本求均值和方差是没有意义的。所以使用的到方法就是：在训练是每一个批次获得对应的均值和方差，然后用之前提到的指数加权平均来实时获得最新的均值和方差给测试时来用（当然还有其他估算均值和方差的方法）。有了均值和方差之后，测试数据就可以按照上面的式子进行归一化了，使用的β、γ是训练出来的。&lt;/p&gt;
&lt;h2&gt;3.8Softmax回归&lt;/h2&gt;
&lt;p&gt;（1）softmax激活函数常用于多分类问题的最后一层作为激活函数，它将最后一层算出来的&lt;sup&gt;z[L]&lt;/sup&gt;取幂函数，然后求和，最后再把每个单元取幂函数之后都分别除以求和，得到各自的概率输出。如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714125633410-708820628.png&quot; alt=&quot;&quot; width=&quot;573&quot; height=&quot;299&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.9训练一个Softmax分类器&lt;/h2&gt;
&lt;p&gt;（1）分类器的损失函数（一个样本）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714130821668-1091130636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如四分类器中样本标签（左边）和预测值（右边）如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714130914862-1326773395.png&quot; alt=&quot;&quot;/&gt;，&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714130927971-514026809.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以损失函数简化为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714131011022-906770784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）代价函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714131038296-1254097189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.10深度学习框架&lt;/h2&gt;
&lt;p&gt;（1）一些常见的深度学习框架&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714131449084-970977965.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;291&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.11TensorFlow&lt;/h2&gt;
&lt;p&gt;（1）给一个TensorFlow的简单使用案例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1326691/201807/1326691-20180714132843364-1030277452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 14 Jul 2018 05:30:00 +0000</pubDate>
<dc:creator>ysyouaremyall</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ys99/p/9308804.html</dc:identifier>
</item>
<item>
<title>机器学习基础——模型参数评估与选择 - NeilZhang</title>
<link>http://www.cnblogs.com/NeilZhang/p/9308870.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeilZhang/p/9308870.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;当看过一些简单的机器学习算法或者模型后，对于具体问题该如何评估不同模型对具体问题的效果选择最优模型呢。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1. 经验误差、泛化误差&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;假如m个样本中有a个样本分类错误&lt;/p&gt;
&lt;p&gt;错误率：E = a / m;&lt;/p&gt;
&lt;p&gt;精度：  1 - E&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;训练误差：&lt;/strong&gt; 又叫经验误差，是指算法/模型在训练样本上的误差&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;泛化误差：&lt;/strong&gt;算法/模型在新样本上的误差&lt;/p&gt;
&lt;p&gt;显然我们希望得到泛化误差小的机器学习算法。&lt;/p&gt;

&lt;h3&gt;2.欠拟合、 过拟合&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;欠拟合：&lt;/strong&gt;欠拟合是指讯息能力低下，本来一些有的特征没有学习到。&lt;/p&gt;
&lt;p&gt;解决方法：欠拟合一般比较容易克服，例如在决策树学习中扩展分支在神经网络学习中增加学习轮数就可以。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;过拟合：&lt;/strong&gt;模型把训练样本学的“太好”，很可能把训练样本自身的一些特点当做了所有潜在样本都会具有的一般性质，这样就会导致泛化能力下降。&lt;/p&gt;
&lt;p&gt;解决方法： 很难克服或者彻底避免。&lt;/p&gt;

&lt;p&gt;下面这张图对欠拟合/过拟合解析的十分到位：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/918077/201807/918077-20180714110234345-1715967064.png&quot;&gt;&lt;img title=&quot;过拟合&quot; src=&quot;https://images2018.cnblogs.com/blog/918077/201807/918077-20180714110235133-1908138991.png&quot; alt=&quot;过拟合&quot; width=&quot;504&quot; height=&quot;281&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;3. 评估方法——留出法&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;     &lt;span&gt;直接将数据集D划分成两个互斥的集合，其中一个作为训练集S，另一个作为测试集T 即： D = S ∪ T , S ∩ T = ∅ . 在S上训练出模型后用T来评估其测试误差，作为泛化误差的评估。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      需要注意的训练/测试集的划分要尽可能的保持数据分布的一致性，避免因数据划分过程引入额外的偏差而对最终结果产生影响。 如果从采样的角度看数据集划分过程，则保留类别比例的采样方式通常称为&lt;strong&gt;&lt;span&gt;分层采样&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;      单层留出法得到的评估结果往往不够稳定可靠，在使用留出法时，一般采用若干次随机划分、重复进行试验评估后取平均值为留出法结果。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;缺点：&lt;/strong&gt; 若训练集S包含绝大多数样本则训练出的模型可能更接近与用D训练处的模型，但由于T比较小，评估结果可能不够稳定准确。 若令测试机包含多一些样本，则训练集S与D差别更大，被评估的模型与用D训练出的模型相比可能有较大差别，从而降低了评估结果的保真性。   &lt;span&gt;常见的做法是将 2/3 ~ 4/5 的样本用于训练，剩余样本用于测试。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;4. 评估方法—交叉验证法&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/918077/201807/918077-20180714110235533-219896903.png&quot;&gt;&lt;img title=&quot;交叉验证法&quot; src=&quot;https://images2018.cnblogs.com/blog/918077/201807/918077-20180714110235957-278121232.png&quot; alt=&quot;交叉验证法&quot; width=&quot;574&quot; height=&quot;532&quot;/&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;5 . 评估方法——查准率、查全率&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;对于二分类问题进行如下统计：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/918077/201807/918077-20180714110236287-1069664948.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/918077/201807/918077-20180714110236590-1965806514.png&quot; alt=&quot;image&quot; width=&quot;503&quot; height=&quot;136&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查准率：&lt;/p&gt;
&lt;p&gt;        P  =  TP / (TP + FP)&lt;/p&gt;
&lt;p&gt;查全率：&lt;/p&gt;
&lt;p&gt;        R = TP / (TP + FN)&lt;/p&gt;
&lt;p&gt;以预测癌症为例，正例为癌症，反例不是癌症。  查准率表示预测为癌症实际发生癌症的概率，而查全率是指预测为癌症的覆盖率（部分预测为反例但实际情况确实正例）。&lt;/p&gt;

&lt;p&gt;其它机器学习算法：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/NeilZhang/p/8454890.html&quot;&gt;监督学习——随机梯度下降算法（sgd）和批梯度下降算法（bgd）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/NeilZhang/p/8504921.html&quot;&gt;监督学习——决策树理论与实践（上）：分类决策树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/NeilZhang/p/9216354.html&quot;&gt;监督学习——决策树理论与实践（下）：回归决策树（CART）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/NeilZhang/p/9059529.html&quot;&gt;监督学习——K邻近算法及数字识别实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/NeilZhang/p/8637026.html&quot;&gt;监督学习——朴素贝叶斯分类理论与实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/NeilZhang/p/9069461.html&quot;&gt;监督学习——logistic进行二分类（python）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/NeilZhang/p/9192171.html&quot;&gt;监督学习——AdaBoost元算法提高分类性能&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/NeilZhang/p/9221420.html&quot;&gt;无监督学习——K-均值聚类算法对未标注数据分组&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;周志华 《机器学习》&lt;/p&gt;
&lt;p&gt;《推荐系统实战》&lt;/p&gt;
</description>
<pubDate>Sat, 14 Jul 2018 03:06:00 +0000</pubDate>
<dc:creator>NeilZhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeilZhang/p/9308870.html</dc:identifier>
</item>
<item>
<title>Java数据结构和算法 - 递归 - fireway</title>
<link>http://www.cnblogs.com/fireway/p/9308662.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fireway/p/9308662.html</guid>
<description>&lt;h2&gt;Q: 什么是三角数学?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;据说一群在毕达哥拉斯领导下工作的古希腊的数学家，发现了在数学序列1,3,6,10,15,21,……中有一种奇特的联系。这个数列中的第N项是由第N-1项加N得到的。 &lt;br/&gt;由此，第二项是由第一项（1）加上2，得3。第三项是由第二项（3）加上3得到6，依次类推。 &lt;br/&gt;这个序列中的数字被称为三角数学，因为它们可以被形象化地表示成对象的一个三角形排列。 &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101236077-1096804551.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Q: 如何使用循环求第N项?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/01TriangleNumber&quot;&gt;TriangleNumber.java&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Q: 如何使用递归求第N项?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;导致递归的方法直接返回而没有再一次进行递归调用，此时我们称为基值情况（base case）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;每一个递归方法都有一个基值(中止)条件，以防止无限地递归下来，避免由此引发的程序崩溃，这一点至关重要。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/02TriangleNumber&quot;&gt;TriangleNumber.java&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Q: 到底发生了什么？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;通过插入一些输出语句来跟踪观察参数和返回值，示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/03TriangleNumber&quot;&gt;TriangleNumber.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
Enter a number = 5


Entering n = 5
Entering n = 4
Entering n = 3
Entering n = 2
Entering n = 1
Returning 1
Returning 3
Returning 6
Returning 10
Returning 15


Triangle = 15
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;calcN()方法调用自身时，它的形参从5开始，每次减1。这个方法反复地调用自身，直到方法的形参减少到1，于是方法返回。 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101305715-461080484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;这会引发一系列的返回序列，每当返回时，这方法把调用它的形参N与其调用下一层方法的返回值相加。直到结果返回给main()。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;返回值概括了三角数学序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;注意，在最内层返回1之前，实际上同一时刻有5个不同的calcN()方法实例存在。最外层传入的参数是5；最内层传入的参数是1。&lt;/p&gt;
&lt;h2&gt;Q: 递归方法的特性?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;递归算法的关键特征：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;调用自身&lt;/li&gt;
&lt;li&gt;当它调用自身的时候，它这样做是为了解决更小的问题&lt;/li&gt;
&lt;li&gt;存在某个足够简单的问题的层次，在这一层算法不需要调用自己就可以直接解答，且返回结果。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Q: 递归方法是否是高效率的？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;调用一个方法会有一定的额外开销。控制必须从这个调用的位置转移到这个方法的开始处。除此之外，传给这个方法的参数和这个方法的返回的地址都要被压入到一个内部的栈，为的是这个方法可以访问参数值和知道返回到哪里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;就calcN()这个方法来讲，因为有上述开销，可能while循环方法执行的速度比递归要快，在此示例中递归的代价也许不断太高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;另外一个低效率反映在系统内存空间存储所有的中间参数以及返回值，如果有大量的数据需要存储，这就会引起栈溢出的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;人们常常采用递归，是因为它从概念上简化了问题，而不是因为它本质上更有效率。&lt;/p&gt;
&lt;h2&gt;Q: 求两个正整数的最大公约数？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;12与16的最大公约数是4，一般记为(12,16)=4。 &lt;br/&gt;12、15、18的最大公约数是3，记为(12,15,18)=3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;在求解最大公约数的几种方法中，&lt;a href=&quot;https://baike.baidu.com/item/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/4625352?fr=aladdin&quot;&gt;辗转相除法&lt;/a&gt;最为出名，也叫欧几里德算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;&lt;a href=&quot;http://blog.jobbole.com/106315/&quot;&gt;漫画算法：辗转相除法是什么鬼？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/04Gcd&quot;&gt;Gcd.java&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Q: 变位词(anagrams)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;假设想要列出一个指定单词的所有变位字，也就是列出该词的全排列。我们称这个工作是变位一个单词。比如，全排列abc，会产生&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre&gt;
abc
acb
bac
bca
cba
cab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;排列的数量是单词字母数的阶乘。所以算法至少时间O(n!)的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;实际上，全排列算法对大型的数据是无法处理的，而一般情况下也不会要求我们去遍历一个大型数据的全排列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;n 个元素的全排列问题可转化为求n - 1个元素的全排列问题（递归设计）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;全排列的递归算法:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;集合X中元素的全排列记为perm(X)&lt;/li&gt;
&lt;li&gt;(ri)perm(X) 表示在全排列 perm(X)的每一个排列前加上前缀得到的排列。&lt;/li&gt;
&lt;li&gt;R的全排列可归纳定义如下： &lt;br/&gt;1) 当 n = 1 时，perm(R) = (r)，其中 r 是集合 R 中唯一的元素； &lt;br/&gt;2) 当 n &amp;gt; 1 时，perm(R) 由 (r1)perm(R1)，(r2)perm(R2)，…，(rn)perm(Rn)构成。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/05Anagram/test/test&quot;&gt;AnagramTestCase.java&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101416108-1537098858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;请参阅： &lt;br/&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%85%A8%E6%8E%92%E5%88%97/4022220?fr=aladdin#6&quot;&gt;全排列&lt;/a&gt; &lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/mika_sleeping/article/details/17534721&quot;&gt;算法之分治法小结&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Q: 递归的二分查找？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;在前面第2章&quot;数组&quot;中讨论过的&lt;a href=&quot;https://www.cnblogs.com/fireway/p/8544857.html#item6&quot;&gt;二分查找&lt;/a&gt;，当时使用的是基于循环的方法来实现，现在可以改为使用递归的方法来实现。&lt;/p&gt;
&lt;p&gt;示例： &lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/06RecFind&quot;&gt;AscOrderArray.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;在递归的方法中，不用改变left或者right，而用left或者right的新值作为参数反复调用recFind()方法，它每一次调用自己都比上一次的范围更小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;当最内层的方法找到了指定的数据项，方法返回这个数据项所在数组的下标。于是这个值依次从每一层recFind()中返回，最后，find()返回值给类用户。可以把示例中的DEBUG开关打开仔细观察，如下图。 &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101522123-1526175198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;递归的方法和循环的方法有同样的大O效率：O(logN)。递归的二分查找在代码量上更为简洁，但是它的速度可能会慢一些。&lt;/p&gt;
&lt;h2&gt;Q: 什么是分治算法？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;凡治众如治寡，分数是也。 —《孙子兵法》 &lt;br/&gt;大概意思就是：治理大军团就象治理小部队一样有效，是依靠合理的组织、结构、编制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;将一个难以直接解决的大问题，合理分割成一些规模较小的相同问题，以便各个击破，这个策略就叫分而治之（分治法）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;递归的二分查找是分治算法的一个例子。把一个大问题分成两个相对来说更小的问题，并且分别解决每一个小问题。对每一个小问题的解决方法是一样的：把每个小问题分成两个更小的问题，并且解决它们。这个过程一直持续下去直到易于求解的基值情况，就不用再继续分了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;分治算法通常要回到递归。&lt;/p&gt;
&lt;h2&gt;Q: 汉诺（Hanoi）塔问题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;用子树的概念进行递归是解决汉诺塔难题的方法。假设想要把所有的盘子从源塔座上(from)移动到目标塔座上(to)，有一个可以使用的中介塔座(inter)。假定在from上有n个盘子，算法如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;从from移动上面n-1个盘子的子树到inter上；&lt;/li&gt;
&lt;li&gt;从from移动剩余的盘子（即最大的盘子）到塔座to上;&lt;/li&gt;
&lt;li&gt;从inter移动子树到to&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;当开始的时候，原塔座是A，中介塔座是B，目标塔座是C，如下图显示了这种情况的三个步骤。如下图， &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101608061-65871199.png&quot; alt=&quot;&quot;/&gt; &lt;br/&gt;当然这个方法并没有解决如何把包括盘子1、2和3的子树移动到塔座B上，要想解决这个问题，我们就得使用递归的思路，按照上面的三个步骤来套：从塔座A上移动最上面的两个盘子的子树到中介塔座C上，接着从A移动盘子3到塔座B上，然后把子树从塔座C移回到塔座B上。&lt;/p&gt;
&lt;p&gt;接下来就是如何把两个盘子的子树从塔座A上移动到塔座C上呢？从塔座A上移动只有一个盘子（盘子1）的子树到塔座B上，这就是基值条件：当移动一个盘子的时候，只要移动它就可以了，没有其他的事情要做。然后从塔座A移动更大的盘子（盘子2）到塔座C，并且把这颗子树（盘子1）重新放置在这个更大的盘子上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/07Tower&quot;&gt;Tower.java&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Q: 归并两个有序数组?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;在介绍归并排序算法之前，我们先看如何归并两个有序数组A和B。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;将两个有序表合并成一个有序表，称为二路归并。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;假设有两个有序数组，不要求有相同的大小。设数组A有4个元素，数组B有6个元素，它们要被归并到数组C。如下图： &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101629708-616348536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/08IntArrays&quot;&gt;IntArrays.java&lt;/a&gt; &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101644395-2059350695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Q: 归并排序?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/09MergeSort&quot;&gt;MergeSort.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;归并排序的思想是把一个数组分为两半，排序每一半，然后用merge()方法把数组的两半归并成一个有序的数组。如何来为每一部分排序呢？递归。反复地分割数组，直到得到的子数组只含有一个数据项，这就是基值条件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;当初始的数组大小是2的n次幂的时候，最容易理解，&lt;span id=&quot;Merging_larger_and_larger_arrys&quot;&gt;如下图， &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101717817-171445430.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;当数组的大小不是2的n次幂的时候，必须要归并不同size的数组，如下图，数组的size是12的情况，这里是一个size为2的数组要和一个size为1的数组归并为一个size为3的数组。 &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101738794-1263552921.png&quot; alt=&quot;&quot;/&gt; &lt;br/&gt;&lt;strong&gt;A: &lt;/strong&gt;如果把DEBUG开关打开，就可以打印如下的日志：&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
Entering 0 ~ 3
    Will sort left half of 0 ~ 1
    Entering 0 ~ 1
        Will sort left half of 0 ~ 0
        Entering 0 ~ 0
            Base-Case Return 0 ~ 0
        Will sort right half of 1 ~ 1
        Entering 1 ~ 1
            Base-Case Return 1 ~ 1
        Will merge halves into 0 ~ 1
    Return 0 ~ 1
    Will sort right half of 2 ~ 3
    Entering 2 ~ 3
        Will sort left half of 2 ~ 2
        Entering 2 ~ 2
            Base-Case Return 2 ~ 2
        Will sort right half of 3 ~ 3
        Entering 3 ~ 3
            Base-Case Return 3 ~ 3
        Will merge halves into 2 ~ 3
    Return 2 ~ 3
    Will merge halves into 0 ~ 3
Return 0 ~ 3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与上面的图所展示的情况几乎吻合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;有人可能会问，所有的这些子数组都存放在什么地方？在这个算法中，创建了一个和初始数组一样大小的工作空间数组，这些子数组就存储在这个空间数组里面，也就是说原始数组的子数组被复制到工作空间数组的相应空间上，在每一次归并之后，工作数组的内容被复制回原来的数组。&lt;/p&gt;
&lt;h2&gt;Q: 归并排序的效率?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;冒泡排序、插入排序和选择排序要用O(N2)时间，而归并排序只要O(&lt;code&gt;N*logN&lt;/code&gt;)。如果N是10000，那么N2就是100000000，而N*logN只是40000。如果为这么多数据项排序用归并排序的话，需要40秒，那么插入排序则会需要将近28个小时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;如何知道这个O(&lt;code&gt;N*logN&lt;/code&gt;)时间呢？假设归并排序中复制和比较时最费时的操作，递归的调用和返回不增加额外的开销。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;复制的次数 &lt;br/&gt;考虑图(&lt;a href=&quot;http://127.0.0.1:51004/view/28#Merging_larger_and_larger_arrys&quot;&gt;Merging larger and larger arrys&lt;/a&gt;)中，首行下面的每一个单元都代表从数组复制到工作空间中的一个数据项。7个标数字的步骤显示了需要有24次复制。对于有8个数据项的情况，复制的次数和O(&lt;code&gt;N*logN&lt;/code&gt;)成正比。&lt;/p&gt;
&lt;p&gt;实际上，这些数据项不仅被复制到数组workspace中，而且也会被复制回原数组中，这会使得复制的次数增加了一倍。&lt;span id=&quot;chapter06_number_of_Operations_When_N_Is_a_Power_of_2&quot;&gt;下表初略地表达了这个信息。 &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101801726-2073148067.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;另一种用来看计算复制次数的方法是，排序8个数据项需要有3层，每一层包含8次复制，一层意味着所有元素都复制到相同大小的子数组中。所以就有3*8=24次复制了。&lt;/p&gt;
&lt;p&gt;当N不是2的倍数时，比较的次数会落在2的乘方以内。对于12个数据项，总共有8次复制，并且对于100个数据项，总共有1344次复制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;比较的次数 &lt;br/&gt;在归并排序算法中，比较的次数总是比复制的次数稍微少一些。那么少多少呢？ &lt;br/&gt;假设数据项的个数是2的乘方，对于每一个独立的归并操作，比较的最大次数总是比正在被归并的数据项个数少1，并且比较的最少次数是正在被归并的数据项数目的一半。 &lt;br/&gt;下图表明了试图归并各有4个数据项的两个数组时的两种场景，最差情况和最好情况。 &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101822643-1314957454.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;重新来看图(&lt;a href=&quot;http://127.0.0.1:51004/view/28#Merging_larger_and_larger_arrys&quot;&gt;Merging larger and larger arrys&lt;/a&gt;)，可以看到为8个数据项进行排序，需要有7次归并操作，正在被归并的数据项个数以及相应的比较次数如下表所示， &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101838217-1354762493.png&quot; alt=&quot;&quot;/&gt; &lt;br/&gt;对于每一次归并，最大的比较次数比数据项的个数少一，我们把所有归并的比较次数加在一起得到总数17，最小的比较次数总是被归并的数据项个数的一半，总数为12。相似的算术运算得到如表（&lt;a href=&quot;http://127.0.0.1:51004/view/28#chapter06_number_of_Operations_When_N_Is_a_Power_of_2&quot;&gt;Number of Operations When N Is a Power Of 2&lt;/a&gt;）中最后一栏“比较次数栏”里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;排序一个指定数组的实际比较次数依赖于数据是如何排列的，但是这个数字一定会在最大比较次数和最小比较次数之间。&lt;/p&gt;
&lt;h2&gt;Q: 递归和栈?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;递归和栈之间有一个紧密的联系。 &lt;br/&gt;事实上，大部分编译器都是使用栈来实现递归的。 &lt;br/&gt;当调用一个方法时，编译器会把这个方法的所有参数及其返回地址都压入栈中，然后把控制权交给这个方法。当这个方法返回时，这些值退栈，参数消失了，并且控制权重新回到返回地址处。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;任意一个递归方法都可以转换为基于栈的方法来模拟，一个方法的内部实现大致经历如下几步：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当一个方法被调用时，它的形参以及返回地址被压入一个栈中;&lt;/li&gt;
&lt;li&gt;这个方法可以通过获取栈顶元素的值来访问它的参数;&lt;/li&gt;
&lt;li&gt;当这个方法要返回时，它查看栈以获得返回地址，然后这个地址以及方法的所有形参退栈，并且销毁。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;我们以三角数学的递归转化为基于栈的方法来说明，示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/10TriangleNumber&quot;&gt;TriangleNumber.java&lt;/a&gt;，如下图： &lt;br/&gt;函数的执行可根据6个指令地址来执行每一个细微的逻辑： &lt;br/&gt;1) 初次调用会执行0x01地址的指令，把用户输入的值以及函数返回值地址0x06压入栈；&lt;/p&gt;
&lt;p&gt;2) 在函数的入口0x02，会检查它的参数是否为1（通过栈顶元素获取），如果参数是1，这就是基值条件，则将控制权交给0x05(即函数出口)执行。 &lt;br/&gt;如果参数不是1，则将递归地调用自身（0x03）,这个递归的调用由参数n-1和返回值地址0x04入栈，以及控制权交给0x02执行。&lt;/p&gt;
&lt;p&gt;3) 从递归调用返回的过程中，0x04执行了函数返回值加上它的参数n，然后这个方法退出0x05。&lt;/p&gt;
&lt;p&gt;4) 当函数退出时，最后的Param对象退栈，这个信息不再需要。因此会执行0x06结束while死循环。 &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101854319-1191628940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Q: 求一个数的乘方？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;比如2^8,我们可以会求表达式&lt;code&gt;2*2*2*2*2*2*2*2&lt;/code&gt;的值，但是如果y的值很大，这个会显得表达式很冗长。那么由没有更快一点方法呢？一个解决的方法是重新组织这个问题，只要可能就拿2的方次相乘，而不是乘以2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;这个方案以数学等式xy=(x2)y/2为基础。可以使用递归的思路来解决这个问题，基值条件就是当y=1的时候就返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;如下图，是以318为例的递归过程，其中要注意递归在返回的过程中，只要y是一个奇数，就得额外地乘以一个x。 &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101910824-233177127.png&quot; alt=&quot;&quot;/&gt; &lt;br/&gt;&lt;strong&gt;A: &lt;/strong&gt;示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/11Math&quot;&gt;Math.java&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Q: 背包问题(The Knapsack Problem)？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;背包问题是计算机科学中的经典问题，在最简单的形式中，包括试图将不同重量的数据项放到背包中，以使背包最后达到了指定的总重量。不需要把所有的选项都放入背包中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;假设想要让背包精确地承重20磅，并且有 5 个可以放入的数据项，它们的重量分别是11 磅，8 磅，7 磅，6 磅，5 磅。这个问题可能对于人类来说很简单，我们大概就可以计算出8磅+7磅 + 5磅=20磅。但是如果让计算机来解决这个问题，就需要给计算机设定详细的指令了。 &lt;br/&gt;算法如下： &lt;br/&gt;1) 如果在这个过程的任何时刻，选择的数据项的总和符合目标重量，那么工作便完成了。 &lt;br/&gt;2) 从选择的第一个数据项开始，剩余的数据项的加和必须符合背包的目标重量减去第一个数据项的重量，这是一个新的目标重量。 &lt;br/&gt;3) 逐个的试每种剩余数据项组合的可能性，但是注意不要去试所有的组合，因为只要数据项的和大于目标重量的时候，就停止添加数据。 &lt;br/&gt;4) 如果没有合适的组合，放弃第一个数据项，并且从第二个数据项开始再重复一遍整个过程。 &lt;br/&gt;5) 继续从第三个数据项开始，如此下去直到你已经试验了所有的组合，这时才知道有没有解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/12Knapsack&quot;&gt;Knapsack.java&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Q: 组合：选择一支队伍？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;在数学中，组合是对事物的一种选择，而不考虑他们的顺序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;比如有5个登山队员，名称为 A,B,C,D和E。想要从这五个队员中选择三个队员去登峰，这时候如何列出所有的队员组合。（不考虑顺序） &lt;br/&gt;如何来写这样一个程序打印所有的组合呢？ABC, ABD, ABE, ACD, ACE, ADE, BCD, BCE, BDE, CDE&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;使用递归的解决方案，它包括把这些组合分成两个部分：由A开始的组合和不是由A开始的组合。假设把从5个人中选出3个人的组合简写为(5,3)。规定n是这群人的大小，并且K是组队的大小。那么根据法则可以得到：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;(n, k)=(n-1, k-1)+(n-1, k)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;可以把这个问题看成是一棵树，在第一行是(5,3)，在第二行是(4,3)和(4,2)，依次类推，这个树中的节点对应于递归方法的调用，下图显示了例子(5,3)的样子。 &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1012374/201807/1012374-20180714101921762-1365469487.png&quot; alt=&quot;&quot;/&gt; &lt;br/&gt;基值条件是指没有意义的组合：某个数字是0以及队员数大于人群数的情况。组合(1,1)是合法的，但是继续分解它就没有必要了。在这个图中，虚线表示了基值条件，这时需要返回，而不是继续分解了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: &lt;/strong&gt;当沿着树往下走时，需要记住访问过的节点序列。这如何做到呢？ 示例：&lt;a href=&quot;https://gitee.com/firewaycoding/ds_in_java/tree/master/chapter06/13Combination&quot;&gt;Combination.java&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;一个递归的方法每次用不同的参数值反复调用自身&lt;/li&gt;
&lt;li&gt;某种参数值使递归的方法返回，而不再调用自身，这种称为基值条件&lt;/li&gt;
&lt;li&gt;当递归方法返回时，递归过程通过逐渐完成各层方法实例的未执行部分，而从最内层返回到最外层的原始调用处&lt;/li&gt;
&lt;li&gt;一个单词的全排列可以通过反复地轮换它的字母以及全排列它最右边的n-1个字母来递归得到&lt;/li&gt;
&lt;li&gt;任何可以用递归完成的操作都可以用一个栈来实现&lt;/li&gt;
&lt;li&gt;递归的方法可能效率低，如果是这样的话，有时可以用一个简单的循环或者一个基于栈的方法来替代它&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;参考&lt;/h2&gt;
&lt;div&gt;
&lt;ol&gt;&lt;li&gt;《Java数据结构和算法》Robert Lafore 著，第6章 - 递归&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 14 Jul 2018 02:10:00 +0000</pubDate>
<dc:creator>fireway</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fireway/p/9308662.html</dc:identifier>
</item>
<item>
<title>使用 Moq 测试.NET Core 应用 -- Mock 行为 - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/9306728.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/9306728.html</guid>
<description>
&lt;p&gt;第一篇文章, 关于Mock的概念介绍: &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9294431.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/9294431.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第二篇文章, 关于方法Mock的介绍: &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9300356.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/9300356.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第三篇文章, 关于属性Mock的介绍: &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9304567.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/9304567.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文介绍使用Moq进行行为测试.&lt;/p&gt;
&lt;p&gt;使用的代码: &lt;a href=&quot;https://github.com/solenovex/Moq4-Tutorial-Code&quot; target=&quot;_blank&quot;&gt;https://github.com/solenovex/Moq4-Tutorial-Code&lt;/a&gt; 里面的 04 Before 部分.&lt;/p&gt;


&lt;p&gt;前两篇介绍的内容都是&lt;strong&gt;基于状态的测试&lt;/strong&gt;, 也就是代码执行后, 我们坚持被测试系统的状态是否和我们期待的一致.&lt;/p&gt;
&lt;p&gt;而本文介绍的是&lt;strong&gt;行为测试&lt;/strong&gt;, 也就是说我们要确认某些方法会被执行或者某些属性被访问了.&lt;/p&gt;


&lt;p&gt;创建一个新的测试方法:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714091319921-65460217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;与状态测试不同, 这里我不使用Assert, 我是用的是mock.&lt;span&gt;&lt;strong&gt;Verify()&lt;/strong&gt;&lt;/span&gt; 来判定其参数里的方法会被执行. 在这里也可以使用It类进行参数匹配.&lt;/p&gt;
&lt;p&gt;该测试会通过, 表示IsHealthy确实被执行了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714091515830-678770425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果我改变一下Verify里IsHealthy()方法的参数范围:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714091629936-1244532633.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么针对此例, 测试就会失败:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714091706364-533159480.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是因为IsHealthy()方法被调用时的参数与我所期待的参数不一致.&lt;/p&gt;

&lt;h2&gt;自定义错误信息&lt;/h2&gt;
&lt;p&gt;这时, 我们可以使用另一个重载版本的Verify()方法, 它可以添加一个错误信息的参数:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714091942196-349996431.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时测试失败的信息如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714092022040-1876519106.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;此外通过重载方法, 还可以判断方法被调用的次数&lt;/p&gt;

&lt;h2&gt;方法被调用次数&lt;/h2&gt;
&lt;p&gt;还是用到了Verify的重载方法和&lt;span&gt;&lt;strong&gt;Times&lt;/strong&gt;&lt;/span&gt;这个struct.&lt;/p&gt;
&lt;p&gt;1. 没被调用:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714092537558-442294217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 被调用1次:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714092651311-2083226489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 被调用特定次数:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714092728419-1500115131.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Times&lt;/strong&gt;&lt;/span&gt;这个struct里面还有很多选项, 请自行摸索.&lt;/p&gt;


&lt;p&gt;首先是Get.&lt;/p&gt;
&lt;p&gt;与之前调用的Verify()不同, 针对属性, 需要使用&lt;span&gt;&lt;strong&gt;VerifyGet()&lt;/strong&gt;&lt;/span&gt;方法来确保属性被访问了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714093251609-1698558230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个测试会通过, 因为这个属性确实被访问了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714093325601-2117403134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;检查另一个没有被访问的属性:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714093356427-562526952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么结果就会失败:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714093429932-1463780742.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面是Set.&lt;/p&gt;
&lt;p&gt;很简单, 使用&lt;span&gt;&lt;strong&gt;VerifySet()&lt;/strong&gt;&lt;/span&gt;方法即可. 再创建一个测试方法:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714093715562-1705433243.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在VerifySet方法里需要设定被Set的属性以及被Set的值.&lt;/p&gt;
&lt;p&gt;针对此例, 这个测试会通过:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714093843649-2118913925.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是如果Set的值不正确, 测试就会失败:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714093911441-184979613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180714094001045-159696653.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本文先到这....未完待续....&lt;/p&gt;
&lt;p&gt;代码: &lt;a href=&quot;https://github.com/solenovex/Moq4-Tutorial-Code&quot; target=&quot;_blank&quot;&gt;https://github.com/solenovex/Moq4-Tutorial-Code&lt;/a&gt; 04 After.&lt;/p&gt;

</description>
<pubDate>Sat, 14 Jul 2018 01:42:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/9306728.html</dc:identifier>
</item>
<item>
<title>何以解我那心中对长连接的惧？ - 等你归去来</title>
<link>http://www.cnblogs.com/yougewe/p/9308464.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yougewe/p/9308464.html</guid>
<description>&lt;p&gt;      与高人沟通，是最好的成长，解我那心中对长连接的惧！&lt;/p&gt;
&lt;p&gt;       一直以来，我对长连接都是怀着深深地恐惧。因为在我的印象中，如果每个用户都保持长连接，那么，假设有稀稀松松有几个用户来到你的服务面前，那么你的并发瞬间就飚高了，那么你的服务能力一下就下去了。所以，我害怕，害怕啥事没干，服务就被干垮了！&lt;/p&gt;
&lt;p&gt;      长连接与短连接的概念：前者是整个通讯过程，客户端和服务端只用一个Socket对象，长期保持Socket的连接；后者是每次请求，都新建一个Socket,处理完一个请求就直接关闭掉Socket。所以，其实区分长短连接就是：整个客户和服务端的通讯过程是利用一个Socket还是多个Socket进行的。&lt;/p&gt;
&lt;p&gt;       长连接的好处：最大的好处就是让服务器知道客户端在哪里（个人感觉），可以随时向客户端发送消息。最大二好处是，省去了每次建立连接时的性能破费，c/s互发消息，直接复用原来建立的连接即可，无需再进行三次握手啥的。坏处自然也明显，也就是我一直以来担心的，能力下降得厉害，（当然还得看业务场景）。因为我做的业务都是，请求应答型的业务，所以，针对这种场景，并发数取决于实时请求的人数。此时，如果使用长连接，就会导致很多无用的客户端也被当作了并发的来源了，所以服务能力一下子就下来了。最终的结果就是，没几个业务就把自己干死了，所以我是真虚啊。&lt;/p&gt;
&lt;p&gt;       短连接就比较方便了，需要我就请求，不需要就关闭，用完就走。缺点就是，每次请求时，需要耗费力气去重新建立连接，然后才能与服务端通信。所以，短连接的单个操作性能是很差的。（遇到连续n个请求发出时，负担就比较可观了，当然还是有其他解决办法的，如设置较短的超时关闭时间）&lt;/p&gt;
&lt;p&gt;      那么，回到我的担心：如果都用长连接，后备服务器得准备多少啊？比如，我有100w的uv。往最坏了打算，有多少uv就保持多少连接，咱们来算算。为了保持100w的连接，咱们单机自然是做不了，所以就要测算单机的最大连接数能保持多少，假设单机服务能力为最大保持2000连接（这个值不大，也不小），那么，为了保持100w的能力，咱们就必须至少要有500台服务器存在，这是在完全没有任何灾备，满打满算得到的，否则的话就得更多了。服务器台数嘛说多也不多，还行吧，咱们先说到这里。&lt;/p&gt;
&lt;p&gt;      咱们再来假设一个不合宜的场景，咱们100w的uv，买了那么多的服务器，假设咱们的pv是200w，也就是每个客户端就访问了2次服务端。200w/24h/3600s=2.314814814814815。即咱们的平均并发数为2.32，看到了吧，这是什么概念，我们同时就2-3个人访问了有用的东西，为此我们却付出了惨重的代价。当然，这也是我以前的算盘，这导致了我对长连接的恐惧。&lt;/p&gt;
&lt;p&gt;       然而，算盘是不该这么打的。如果真这么干的话，老板绝对第一个把你干掉。当然，你还有有个挽回的办法，就是去把你的用户都激活了，求求你们，一直操作吧，这样我们的服务器就不会浪费了。嘿嘿，想得美。&lt;/p&gt;
&lt;p&gt;       所谓的长连接，其实也只是相对的，即你有活动时，保持真正的长连接，如果很长时间你都没有真实操作了，那么，仍然把你的连接给你断掉，这样压力不就下来了嘛。再回头看一下刚才那个场景，每个ip就访问了2次有效数据，那么过一会我就把你连接给你断掉，到最后，都把连接关完了，咱们又满血复活了，100w的能力回来了。&lt;/p&gt;
&lt;p&gt;      我靠，不会吧，这么牛逼的招数，你想过后果没？后续你服务端怎么给客户端发消息？是的，这是个难题。但是，解决方案总是有的。那就是找个替代者嘛你的连接断开了，就另外去找一个保持了连接的点嘛，让他来代替你找到客户端，把消息发过去就ok了。看起来很完美！那么问题来了，怎么样去找到这样的一个点呢？这个，确实有点难，各个设备的找寻方式是不一样的，比如苹果手机，那么这个点就是苹果的总服务器，如果是华为手机，那么就变成了华为的总服务器了，而pc呢，这个我也不知道了，求你告诉我，哈哈！当客户端收到这个消息后，再次主动建立一个通道连接，然后又开始愉快的沟通生活了，如此反复。&lt;/p&gt;
&lt;p&gt;      那么，通过以上方式，咱们就解决了长连接带来的问题，是不是很happy啊。&lt;/p&gt;
&lt;p&gt;      在业务量很大的时候，其实咱们就不应该考虑成本问题了，比如你想做及时通讯，却又不愿付长连接一字带来的成本，那就麻烦了（当然了，有厂商愿意给你做，只要你有钱）。再比如你的业务量很大，但是你却不愿意付出很多的存储服务器来存放用户的各种行为数据，或者其他流水数据，老是想着怎样省这一毛两毛的存储费用。这活咱就别干了，越到后面，数据就越是宝贵的资源，所以，有用的数据你就存吧，别整那些没用的。宽带不够，咱们用户量够大，咱们就加吧，这种好事咱别求！&lt;/p&gt;
</description>
<pubDate>Sat, 14 Jul 2018 01:05:00 +0000</pubDate>
<dc:creator>等你归去来</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yougewe/p/9308464.html</dc:identifier>
</item>
<item>
<title>第四节：SignalR灵魂所在Hub模型及再探聊天室样例 - Yaopengfei</title>
<link>http://www.cnblogs.com/yaopengfei/p/9304308.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaopengfei/p/9304308.html</guid>
<description>&lt;p&gt;&lt;span&gt;一. 整体介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本节：开始介绍SignalR另外一种通讯模型Hub(中心模型)，它是一种RPC模式，允许客户端和服务器端各自自定义方法并且相互调用，对开发者来说相当友好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　该节包括的内容有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　①：从零搭建&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　②：Hub模型和URL匹配，默认模式和指定路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　③：服务器端代码介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　④：客户端的两种模式，代理和非代理，各自的写法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　⑤：服务器端和客户端包含的方法和各自如何自定义方法并且相互调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　⑥：第三方调用的问题，比如：如何在控制器中调用客户端的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　⑦：再探聊天室样例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二. 从零搭建&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 1. 新建MVC5项目，通过Nuget安装程序集：Microsoft.AspNet.SignalR，安装成功后如下图。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713181935388-1575822994.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. 新建一个中心模型Hub类（MySpecHub1），该类继承了Hub类，并且几个必要方法可以&lt;/strong&gt;override&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713182154978-210478956.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3. 新建一个OWIN Startup Class(Startup)，并在Configuration方法中指定使用的通讯模型的URl，  这里采用默认的方式：如： app.MapSignalR(); 【后续展开介绍如何指定URL及其中的问题】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　&lt;strong&gt;PS： 程序启动时候首先会找到该类,然后运行里面的Configuration方法，从而url和通讯模型的匹配将生效。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713182357586-1822661960.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 引入必要的JS文件，进行前端代码的编写，如下图。&lt;strong&gt;【后续详细介绍】&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713182554799-804912011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三. 模型和URL匹配&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　我们都知道，在OWIN Startup Class(即&lt;strong&gt;Startup&lt;/strong&gt;类)中&lt;strong&gt;Configuration&lt;/strong&gt;方法中进行模型URL的指定，并且在很多例子中，看到都是这么写：&lt;strong&gt;app.MapSignalR();&lt;/strong&gt; 貌似并没有配置URL，但事实上并不是这样的，我们通过反编译代码可以看到，它会默认指定一个路径  &lt;strong&gt;&quot;/signalr&quot;&lt;/strong&gt;  ,如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713183353430-515960553.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;特别注意：&lt;/strong&gt;这里的&quot;/signalr&quot;，与js端的自动生成代理类的代码：&amp;lt;script src=&quot;~/signalr/hubs&quot;&amp;gt;&amp;lt;/script&amp;gt;没有任何毛线关系，这两个根本不是一个东西！！！！！，只是路径相似而已罢了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;strong&gt;&lt;span&gt;那么如何指定路径：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　通过 代码：&lt;strong&gt;app.MapSignalR(&quot;/myhub1&quot;, new HubConfiguration());&lt;/strong&gt; 可以将路径指定为：&lt;strong&gt;&quot;/myhub1&quot;&lt;/strong&gt;，至于前端页面怎么与之匹配，在下面介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;PS：这里还可以配置其它参数，如下图：&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713183952922-1912293437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;四. 服务器端代码介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　前端页面的JS代码有两种模式，代理模式和非代理模式（下面介绍），但无论JS使用哪种模式，服务器端的代码都是唯一不变。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. MySpecHub1类继承成Hub类，所以可以Override三个方法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(1). OnConnected：连接成功时调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(2). OnDisconnected：连接断开时调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(3). OnReconnected：重连时调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 自定义方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;服务器端可以自定义方法供客户端调用，比如：  public void AddUser(string userName, string userId){....}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　  &lt;span&gt;&lt;strong&gt; 特别特别注意：前端【代理模式&lt;/strong&gt;】的情况下&lt;/span&gt;调用的服务器端方法或者与代理文件建立连接时，有一个非常坑爹的规则，首字母必须小写，比如服务器端定义方法为：“AddUserMsg”，前端【代理模式】情况下调用必须写成：“addUserMsg”；再比如这里的Hub类为 &quot;MySpecHub1&quot;，前端调用的时候必须写成&quot;mySpecHub1&quot;；对此我表示很无语，当年这一点坑了我很久！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;　　PS：上述指定是【代理模式】，【非代理模式】不存在这个问题。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;虽然我们已经知道这个规则了，但经常写着写着就忘了，那么如何解决上面这个问题呢？：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;这里有两个特性分别是：[HubName()] 和  [HubMethodName()]，可以自行指定Hub类和自定义方法的名称，指定为什么，前端调用就用什么，这样【代理模式】下，坑爹的首字母小写规则，就不存在了。为了后续不麻烦，所以我通常在每个方法上面都加： [HubMethodName(nameof(方法名))]，这样就不会存在问题了，如下图：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713190139877-923575132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 3. 上下文对象（this.Context）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(1). 当前用户的标记: this.Context.ConnectionId （Guid生成，不会重复）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(2). 其它信息：RequestCookies、Headers、QueryString、User、Request&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 如何调用客户端方法 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　使用Clients对象进行调用，Clients对象下的属性和方法有：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　① 向所有人发送(包括自己)：All { get; }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　② 向所有人发送(排除一些人)：AllExcept(params string[] excludeConnectionIds);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　③ 向指定人发送，一对一：Client(string connectionId);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　④ 向一些人发送,一对多：Clients(IList&amp;lt;string&amp;gt; connectionIds);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　⑤ 向某个组发送(排除一些人)：Group(string groupName, params string[] excludeConnectionIds);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　⑥ 向多个组发送(排除一些人)：Groups(IList&amp;lt;string&amp;gt; groupNames, params string[] excludeConnectionIds);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　⑦ 由Id标识的特定用户：Users(IList&amp;lt;string&amp;gt; userIds);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　⑧ 由Id标识的特定多用户：User(string userId);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;调用形式比如：Clients.All.客户端方法名称&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5. 组的概念（Groups对象）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　① 将连接添加到指定组：Task Add(string connectionId, string groupName);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　② 从指定组中删除连接：Task Remove(string connectionId, string groupName);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;调用如：this.Groups.Add(&quot;&quot;, &quot;&quot;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;截图几段代码：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713202519321-1902199334.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713202627469-1184251549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;五. 客户端(js)代码介绍-代理模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 1. 必备JS文件的引入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;前端Html页面使用SignalR，必须引入两个文件：JQuery和SignalR，必须JQuery在上，且最低版本为1.6.4，不能再低了。如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713203414958-538657602.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 代理JS代码的生成&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　代理JS代码用户帮助客户端调用服务器端自定义方法，注意这里的引入路径只能是： &lt;strong&gt;&amp;lt;script src=&quot;/signalr/js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/strong&gt; 或者  &lt;strong&gt;&amp;lt;script src=&quot;/signalr/hubs&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/strong&gt;，至于为什么路径非要这么写？这个地方不纠结了，我们姑且就这么使用（有兴趣探讨一下内部原理吧）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　引入该代码后，进入页面F12，会发现多了JS代码，没错，这就是自动生成的代理代码，在前端代码的编写中，需要依赖该文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713204014721-1830813581.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;可能会用人问，我把自动生成的这个JS代码拷贝出来，单独放到一个JS文件里，然后在页面引入，并去掉生成代理代码的这句话 &amp;lt;script src=&quot;/signalr/js&quot;&amp;gt;&amp;lt;/script&amp;gt;，行不行呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;答案是：肯定行。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　   &lt;span&gt;但这种拷贝出来的方式有点Low，服务器端代码只要一改，我就需要重新拷贝一遍，那么有没有别的方便的方法呢？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　   显然有，大约有两种方法。&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　①：借助Microsoft.AspNet.SignalR.Utils程序集和指令。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　②：借助Microsoft.AspNet.SignalR.Utils程序集和VS开发工具的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　在这一节里，暂时不介绍这两种方式，后面章节详细介绍。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 如何与服务器Hub模型路径相配？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;在上面的代码中介绍过，服务器Hub模型默认的URL为&quot;/signalr&quot;，那么客户端的代码怎么写呢？&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;  //1. 与服务器路径进行匹配
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;  var conn = $.connection.hub;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;  //2. 与生成的代理类建立连接
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;   var proxy = $.connection.mySpecHub1;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;乍一看，丝毫没有看到与&quot;/signalR&quot;相关的代码，不要急，这时去看一下自动生成代理类中的代码，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;/span&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713205347225-124577842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;我们再看一下SignalR的JS代码中关于hubConnection方法的声明，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713205740265-562915022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180713211529169-2144324546.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　配合第二个截图简单分析一下这块源代码，首先if判断&quot; 一真或为真&quot;，只要！url 和 useDefaultPath有一个是真的就进入方法体内部，然后在拼接 url+“/signalr”，如果不进入if方法体，那么你输入的url是什么，这里用的就是什么。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前面的代码为： signalR.hub = $.hubConnection(&quot;/signalr&quot;, { useDefaultPath: false }); ||两边都为false，进入不了if方法体内部，所以URL就是默认输入的“/signalr”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 坑爹的调用规范&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在代理模式中,客户端调用服务器端方法或者与代理建立连接的时候，比如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①：服务器端的Hub名称为MySpecHub1，客户端调用的时候必须为首字母小写：$.connection.mySpecHub1;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②：服务器端自定义的方法为SendSingleMsg，客户端调用的时候必须为首字母小写：proxy.server.sendSingleMsg;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;注：非代理模式中则不存在这个问题！！！！&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;解决： 引入两个特性[HubName(&quot;&quot;)] 和 [HubMethodName(&quot;&quot;)]  ，放在服务器端代码上面，就解决了。 （详见服务器端代码）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 客户端方法的声明和调用服务器端方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①. 声明客户端方法： proxy.client.xxx = function (x1, x2) {}       xxx代表客户端方法名称&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②. 调用服务器端方法： proxy.server.xxx(x1,x2);                          xxx代表服务器端方法名称&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;注：这里的proxy，是 &lt;/span&gt;$.connection.mySpecHub1; 与自动生成的代理类建立连接。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714074420634-618701178.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714074451109-1285178659.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. 服务器端指定模型URL后，前端如何匹配？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如服务器端代码为：app.MapSignalR(&quot;/myhub1&quot;, new HubConfiguration());&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①. 当使用自动生成代理类js文件时候，与&amp;lt;script src=&quot;/signalr/hubs&quot;&amp;gt;&amp;lt;/script&amp;gt;冲突，暂时未解决 （欢迎下方留言讨论）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②. 手动引入代理类时候可以使用，只需添加 conn.url = &quot;/myhub1&quot;; 即可以将路径改为 &quot;/myhub1&quot;。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714074840640-1292533853.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过Fiddler检测一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714075212084-12082658.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;7. 其它方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;同PersistentConnection模式中相同，比如开启和检测断线。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714075513529-596114094.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714075525304-1939369431.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;六. 客户端(js)代码介绍-非代理模式 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;有了前面代理模式的铺垫，非代理模式就很容易了，下面介绍一下在使用上的一些区别：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 基本使用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　不需要需要引入 &amp;lt;script src=&quot;/signalr/js&quot;&amp;gt;&amp;lt;/script&amp;gt; 或者 &amp;lt;script src=&quot;/signalr/hubs&quot;&amp;gt;&amp;lt;/script&amp;gt;，也不需要引入手动添加的代理类 &amp;lt;script src=&quot;~/Scripts/AutoProxy.js&quot;&amp;gt;&amp;lt;/script&amp;gt;，但在代码上要这么写，比如创建代理类： $.hubConnection().reateHubProxy(&quot;MySpecHub1&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;详细代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1. 与服务器路径进行匹配&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; conn =&lt;span&gt; $.hubConnection();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2. 手动创建代理类&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;  &lt;span&gt;var&lt;/span&gt; proxy = conn.createHubProxy(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MySpecHub1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 在非代理模式中，服务器端的Hub名称和服务器端自定义的方法不必首字母小写(PS:小写也能用)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①：服务器端的Hub名称为MySpecHub1，客户端调用的时候 conn.createHubProxy(&quot;MySpecHub1&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②：服务器端自定义的方法为SendSingleMsg，客户端调用的时候必须为首字母小写： proxy.invoke(&quot;SendSingleMsg&quot;, $(&quot;#j_receiveId&quot;).val(), $(&quot;#j_content&quot;).val());&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;注：服务器端的两个特性[HubName(&quot;&quot;)] 和 [HubMethodName(&quot;&quot;)]仍然好用！！！&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 声明客户端方法和调用服务器端方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①. 声明客户端方法： proxy.on(&quot;方法名&quot;,function(x1,x2,x3){});&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②. 调用服务器端方法： proxy.invoke(&quot;方法名&quot;, &quot;参数1&quot;,&quot;参数2&quot;,&quot;参数3&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714080559431-161861239.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714080612528-1831388710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4 默认路径匹配&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在不使用代理的情况下,$.hubConnection()与服务器路径进行匹配的时候，通过Fiddler可以发现，默认是&quot;/signalr&quot;路径&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5. 服务器端指定路径模型路径：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如服务器端代码为：app.MapSignalR(&quot;/myhub1&quot;, new HubConfiguration());&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　客户端对应的代码为：$.hubConnection(&quot;/myhub1&quot;, { useDefaultPath: false });&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;注：通过Fidder或者调试源代码，可以看到路径已经改为&quot;/myhub1&quot;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;特别补充：如果客户端代码var conn = $.hubConnection(&quot;/myhub1&quot;)这么写，useDefaultPath这个属性默认为true，则最后的路径为：&quot;/myhub1/signalr&quot;，原因借助前面的分析很容易理解了。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714080423485-2133270835.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;七. 第三方调用 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上面介绍的所有代码都是直接基于 Hub模型这个类来通信的，但在很多情况下，  发送信息之前需要进行很多其他业务的处理，这个时候所有的代码都写在Hub类中就不太合适了，  这时候需要借助控制器里的Action来通信，那么问题来了，如何通过调用控制器里的方法来实现发送信息的功能呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其实非常简单，我们只需要通过 &lt;strong&gt;GlobalHost.ConnectionManager.GetHubContext&amp;lt;MySpecHub1&amp;gt;();&lt;/strong&gt; 获取到这个Hub即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;代码如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 向所有人发送消息
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;myConnectionId&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;当前用户的登录标记&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;发送的信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MySendAll(&lt;span&gt;string&lt;/span&gt; myConnectionId ,&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hub模式&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; hub = GlobalHost.ConnectionManager.GetHubContext&amp;lt;MySpecHub1&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             hub.Clients.AllExcept(myConnectionId).receiveMsg($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户【{myConnectionId}】发来消息：{msg}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         } 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;八. 聊天室样例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;在本系列的第一节，基于WebSocket写了一个聊天室样例，还吐槽了一番，写法很麻烦，这里基于Signalr的Hub模型，再写一次聊天室，并补充几个新功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　效果图如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201807/1031302-20180714145756157-685193376.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;包括的功能有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①：连接成功后通知所有人包括自己登录成功。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②：离线后，通知除了自己以外的所有人已经离开。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　③：通过输入接收人的SessionId，实现一对一发送信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　④： 通过点击群发按钮，向除了自己以外的所有人发送信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　⑤：可以进入room1或room2房间，然后实现向指定房间内的所有人发送信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　⑥：调用控制器中中的方法进行通讯&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面分享代码，包括（Hub模型代码，控制器代码，前端代码（代理和非代理两套））&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Hub模型代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('32b6ef9a-cfc8-4aab-9257-61b71c9b0887')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_32b6ef9a-cfc8-4aab-9257-61b71c9b0887&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_32b6ef9a-cfc8-4aab-9257-61b71c9b0887&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('32b6ef9a-cfc8-4aab-9257-61b71c9b0887',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_32b6ef9a-cfc8-4aab-9257-61b71c9b0887&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNet.SignalR;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNet.SignalR.Hubs;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; HubDemo
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;   
&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;[HubName(&quot;MySpecHub1&quot;)]&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MySpecHub1 : Hub
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*************************************下面是Override的方法************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 01-连接成功的时候调用
&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 连接成功的时候调用
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Task OnConnected()
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用客户端的方法通知所有人包括自己&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;             Clients.All.LoginSuccessNotice($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户【{this.Context.ConnectionId}】登录成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Context.ConnectionId);
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;回传给客户端自己的CId&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;             Clients.Client(&lt;span&gt;this&lt;/span&gt;.Context.ConnectionId).ReceiveOwnCid(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Context.ConnectionId);
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnConnected();
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 02-连接断开的时候调用
&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 连接断开的时候调用
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;stopCalled&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; Task OnDisconnected(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; stopCalled)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;除去自己以外的消息&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             Clients.AllExcept(&lt;span&gt;this&lt;/span&gt;.Context.ConnectionId).receiveMsg($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户【{this.Context.ConnectionId}】已经离开&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnDisconnected(stopCalled);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 03-重新连接的时候调用
&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 重新连接的时候调用
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Task OnReconnected()
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnReconnected();
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*************************************下面是自定义的服务器端方法************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 01-点对点发送消息
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 点对点发送消息
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;receiveId&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendSingleMsg(&lt;span&gt;string&lt;/span&gt; receiveId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;             Clients.Client(receiveId).receiveMsg($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户【{this.Context.ConnectionId}】发来消息：{msg}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 02-群发消息
&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 群发消息
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        [HubMethodName(nameof(SendAllMsg))]
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendAllMsg(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;除去自己以外的消息（不需要自己存储ConnectionId）&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;             Clients.AllExcept(&lt;span&gt;this&lt;/span&gt;.Context.ConnectionId).receiveMsg($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户【{this.Context.ConnectionId}】发来消息：{msg}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 03-进入指定组
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 进入指定组
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;roomName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;组的名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        [HubMethodName(nameof(EnterRoom))]
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; EnterRoom(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; roomName)
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;进入组&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;             Groups.Add(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Context.ConnectionId, roomName);
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;告诉自己进入成功&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;             Clients.Client(&lt;span&gt;this&lt;/span&gt;.Context.ConnectionId).receiveMsg($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户【{this.Context.ConnectionId}】成功进入组：【{roomName}】&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 04-向指定组发送消息
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 向指定组发送消息
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;roomName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;组名&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;        [HubMethodName(nameof(SendRoomNameMsg))]
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendRoomNameMsg(&lt;span&gt;string&lt;/span&gt; roomName, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向指定组发送消息，如果这个组包含自己，将自己除外&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;             Clients.Group(roomName, &lt;span&gt;this&lt;/span&gt;.Context.ConnectionId).receiveMsg($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户【{this.Context.ConnectionId}】发来消息：{msg}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt; 
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;控制器代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('762bb98a-547b-4ca2-bcf2-d9e4889516d5')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_762bb98a-547b-4ca2-bcf2-d9e4889516d5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_762bb98a-547b-4ca2-bcf2-d9e4889516d5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('762bb98a-547b-4ca2-bcf2-d9e4889516d5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_762bb98a-547b-4ca2-bcf2-d9e4889516d5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNet.SignalR;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; HubDemo.Controllers
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Hub模型(中心模型)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HubController : Controller
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 01-代理模式页面
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 代理模式页面
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 02-非代理模式页面
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 非代理模式页面
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult NoProxyIndex()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************************************************下面是第三方调用方法***************************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 01-向所有人发送消息
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 向所有人发送消息
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;myConnectionId&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;当前用户的登录标记&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;msg&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;发送的信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MySendAll(&lt;span&gt;string&lt;/span&gt; myConnectionId ,&lt;span&gt;string&lt;/span&gt;&lt;span&gt; msg)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hub模式&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; hub = GlobalHost.ConnectionManager.GetHubContext&amp;lt;MySpecHub1&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             hub.Clients.AllExcept(myConnectionId).receiveMsg($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户【{myConnectionId}】发来消息：{msg}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        } 
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;代理&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1a84c09c-3901-4e35-9600-4d361264bce2')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_1a84c09c-3901-4e35-9600-4d361264bce2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1a84c09c-3901-4e35-9600-4d361264bce2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1a84c09c-3901-4e35-9600-4d361264bce2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1a84c09c-3901-4e35-9600-4d361264bce2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt;     Layout = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt;  8&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt;  9&lt;/span&gt;    
&lt;span&gt; 10&lt;/span&gt;     &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 11&lt;/span&gt;     &amp;lt;title&amp;gt;Index&amp;lt;/title&amp;gt;
&lt;span&gt; 12&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/jquery-3.3.1.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 13&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/jquery.signalR-2.3.0.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 14&lt;/span&gt;     &amp;lt;!--自动生成代理类 --&amp;gt;
&lt;span&gt; 15&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/signalr/hubs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 16&lt;/span&gt;     &amp;lt;!--手动引入代理类 --&amp;gt;
&lt;span&gt; 17&lt;/span&gt;     @*&amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/AutoProxy.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;*&lt;span&gt;@
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;        $(function () {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一. 初始化信息
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认路径
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1. 与服务器路径进行匹配&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; conn =&lt;span&gt; $.connection.hub;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2. 与生成的代理类建立连接&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; proxy =&lt;span&gt; $.connection.mySpecHub1;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.当服务器端指定路径的时候，需要有下面的代码进行匹配（仅使用手动代理）
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;conn.url = &quot;/myhub1&quot;;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;二. 定义客户端的方法
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1 接受用户登录成功后的提示&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;             proxy.client.LoginSuccessNotice =&lt;span&gt; function (data, connectionId) {
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;                 $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_Msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + data + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;                
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2 接收点对点用户发送来的消息&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;             proxy.client.receiveMsg =&lt;span&gt; function (data) {
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;                 $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_Msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + data + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3. 接收自己的connectionId&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;             proxy.client.ReceiveOwnCid =&lt;span&gt; function (connectionId) {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把用户ConnectionID存起来&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;                 $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_connectionId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val(connectionId);
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;三. 主动事件
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.建立连接&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_connect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;                conn.start().done(function () {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;                }).fail(function () {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                     console.log(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Could not connect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.断开连接&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_close&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;                conn.stop();
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.点对点发送消息&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_send&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; state =&lt;span&gt; conn.state;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用服务器端方法&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;                     proxy.server.sendSingleMsg($(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_receiveId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).val(), $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在连接中，请稍等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在重连，请稍等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;4&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;掉线了，请重新连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.群发消息&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_sendAll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; state =&lt;span&gt; conn.state;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用服务器端方法&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;                     proxy.server.SendAllMsg($(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在连接中，请稍等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在重连，请稍等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;4&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;掉线了，请重新连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;5.进入room1&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_room1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用服务器端方法&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;                 proxy.server.EnterRoom(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;6.进入room2&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_room2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用服务器端方法&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                 proxy.server.EnterRoom(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;7. 给room1中的用户发送消息&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_sendRoom1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                 proxy.server.SendRoomNameMsg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#j_content2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;8. 给room2中的用户发送消息&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_sendRoom2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                 proxy.server.SendRoomNameMsg(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#j_content2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;9. 调用控制器中的方法发送信息&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; myConnectionId = $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_connectionId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val();
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; msg = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#j_content3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val();
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;                console.log(myConnectionId);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                 $.post(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Hub/MySendAll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, { myConnectionId: myConnectionId, msg: msg }, function (data) {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;                         alert(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发送成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; 
&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt; 
&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;四. 监控事件
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1. 连接断开的方法&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;            conn.disconnected(function () {
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;                 $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中断&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt; 
&lt;span&gt;133&lt;/span&gt; 
&lt;span&gt;134&lt;/span&gt; 
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;     &amp;lt;/script&amp;gt;
&lt;span&gt;137&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;138&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;139&lt;/span&gt;     &amp;lt;div&amp;gt;
&lt;span&gt;140&lt;/span&gt;         &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;提示：&amp;lt;/span&amp;gt;&amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;141&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;142&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_connect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;建立连接&amp;lt;/button&amp;gt;
&lt;span&gt;143&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_close&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;关闭连接&amp;lt;/button&amp;gt;
&lt;span&gt;144&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;145&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;146&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入接收人的标记&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_receiveId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;147&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入发送内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;148&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_send&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;单发&amp;lt;/button&amp;gt;
&lt;span&gt;149&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_sendAll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;群发&amp;lt;/button&amp;gt;
&lt;span&gt;150&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;151&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;152&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_room1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;进入room1&amp;lt;/button&amp;gt;
&lt;span&gt;153&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_room2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;进入room2&amp;lt;/button&amp;gt;
&lt;span&gt;154&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;155&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;156&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入发送内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_content2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;157&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_sendRoom1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;给room1发送消息&amp;lt;/button&amp;gt;
&lt;span&gt;158&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_sendRoom2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;给room2发送消息&amp;lt;/button&amp;gt;
&lt;span&gt;159&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;160&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;161&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入发送内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_content3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;162&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;调用控制器中的方法&amp;lt;/button&amp;gt;
&lt;span&gt;163&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;164&lt;/span&gt;         &amp;lt;div&amp;gt;
&lt;span&gt;165&lt;/span&gt;             &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_Msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/ul&amp;gt;
&lt;span&gt;166&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;167&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;168&lt;/span&gt;     &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_connectionId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;169&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;170&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;非代理&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1d24c912-5bbc-4965-9c47-d14f848f3df6')&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_1d24c912-5bbc-4965-9c47-d14f848f3df6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1d24c912-5bbc-4965-9c47-d14f848f3df6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1d24c912-5bbc-4965-9c47-d14f848f3df6',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1d24c912-5bbc-4965-9c47-d14f848f3df6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt;     Layout = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt;  8&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt;  9&lt;/span&gt;    
&lt;span&gt; 10&lt;/span&gt;     &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt; 11&lt;/span&gt;     &amp;lt;title&amp;gt;Index&amp;lt;/title&amp;gt;
&lt;span&gt; 12&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/jquery-3.3.1.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 13&lt;/span&gt;     &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Scripts/jquery.signalR-2.3.0.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 14&lt;/span&gt;     &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;        $(function () {
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一. 初始化信息
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认路径
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1. 与服务器路径进行匹配&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; conn =&lt;span&gt; $.hubConnection();
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2. 手动创建代理类&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; proxy = conn.createHubProxy(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MySpecHub1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定路径&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;             &lt;span&gt;///&lt;/span&gt;&lt;span&gt;/1. 与服务器路径进行匹配&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;var conn = $.hubConnection(&quot;/myhub1&quot;, { useDefaultPath: false }); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应的路径为&quot;/myhub1&quot;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;//////&lt;/span&gt;&lt;span&gt;var conn = $.hubConnection(&quot;/myhub1&quot;);   //对应的路径为&quot;/myhub1/signalr&quot;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;///&lt;/span&gt;&lt;span&gt;/2. 手动创建代理类&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;var proxy = conn.createHubProxy(&quot;MySpecHub1&quot;);
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;二. 定义客户端的方法
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1 接受用户登录成功后的提示&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;             proxy.on(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LoginSuccessNotice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, function (data, connectionId) {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;                 $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_Msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + data + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2 接收点对点用户发送来的消息&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;             proxy.on(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;receiveMsg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, function (data) {
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;                 $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_Msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + data + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3. 接收自己的connectionId&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;             proxy.on(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReceiveOwnCid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, function (connectionId) {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把用户ConnectionID存起来&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;                 $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_connectionId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val(connectionId);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt; 
&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;三. 主动事件
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.建立连接&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_connect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;                conn.start().done(function () {
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;                }).fail(function () {
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                     console.log(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Could not connect&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.断开连接&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_close&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;                conn.stop();
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; 
&lt;span&gt; 65&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.点对点发送消息&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_send&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; state =&lt;span&gt; conn.state;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用服务器端方法&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;                     proxy.invoke(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendSingleMsg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_receiveId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).val(), $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在连接中，请稍等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在重连，请稍等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;4&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;掉线了，请重新连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.群发消息&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_sendAll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; state =&lt;span&gt; conn.state;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用服务器端方法&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;                     proxy.invoke(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendAllMsg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在连接中，请稍等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在重连，请稍等&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (state == &lt;span&gt;4&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                     $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;掉线了，请重新连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; 
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;5.进入room1&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_room1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用服务器端方法&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                 proxy.invoke(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EnterRoom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;6.进入room2&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_room2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用服务器端方法&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;                 proxy.invoke(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EnterRoom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;7. 给room1中的用户发送消息&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_sendRoom1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;                 proxy.invoke(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendRoomNameMsg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#j_content2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;8. 给room2中的用户发送消息&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_sendRoom2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                 proxy.invoke(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendRoomNameMsg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#j_content2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; 
&lt;span&gt;115&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;9. 调用控制器中的方法发送信息&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;             $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; myConnectionId = $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_connectionId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val();
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; msg = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#j_content3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val();
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;                console.log(myConnectionId);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                 $.post(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Hub/MySendAll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, { myConnectionId: myConnectionId, msg: msg }, function (data) {
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                         alert(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发送成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt; 
&lt;span&gt;131&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;四. 监控事件
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1. 连接断开的方法&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;            conn.disconnected(function () {
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                 $(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).html(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接中断&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt; 
&lt;span&gt;138&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;五. 其它事件&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;      
&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;     &amp;lt;/script&amp;gt;
&lt;span&gt;143&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;144&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;145&lt;/span&gt;     &amp;lt;div&amp;gt;
&lt;span&gt;146&lt;/span&gt;         &amp;lt;div&amp;gt;&amp;lt;span&amp;gt;提示：&amp;lt;/span&amp;gt;&amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_notice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;147&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;148&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_connect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;建立连接&amp;lt;/button&amp;gt;
&lt;span&gt;149&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_close&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;关闭连接&amp;lt;/button&amp;gt;
&lt;span&gt;150&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;151&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;152&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入接收人的标记&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_receiveId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;153&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入发送内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;154&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_send&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;单发&amp;lt;/button&amp;gt;
&lt;span&gt;155&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_sendAll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;群发&amp;lt;/button&amp;gt;
&lt;span&gt;156&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;157&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;158&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_room1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;进入room1&amp;lt;/button&amp;gt;
&lt;span&gt;159&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_room2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;进入room2&amp;lt;/button&amp;gt;
&lt;span&gt;160&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;161&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;162&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入发送内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_content2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;163&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_sendRoom1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;给room1发送消息&amp;lt;/button&amp;gt;
&lt;span&gt;164&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_sendRoom2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;给room2发送消息&amp;lt;/button&amp;gt;
&lt;span&gt;165&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;166&lt;/span&gt;         &amp;lt;div style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin-top:20px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;167&lt;/span&gt;             &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入发送内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_content3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;168&lt;/span&gt;             &amp;lt;button id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;调用控制器中的方法&amp;lt;/button&amp;gt;
&lt;span&gt;169&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;170&lt;/span&gt;         &amp;lt;div&amp;gt;
&lt;span&gt;171&lt;/span&gt;             &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_Msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/ul&amp;gt;
&lt;span&gt;172&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;173&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;174&lt;/span&gt;     &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j_connectionId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;175&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;176&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　PS：SignalR 与WebSocket原生代码编写的相比较，最大的改进之处有：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①：单发和群发可以对应不同的服务器端方法，不再需要自行约定规则来识别了，同样客户端接收也很灵活了，可以指定方法接收。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②：不需要自己创建登录标记，默认会生成一个SessionID。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　③：ConnectionId会自动记录，不需要单独声明一个集合来存储。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　④：写起来太爽了（^_^）。&lt;/span&gt;&lt;/p&gt;





&lt;div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;作       者 : &lt;span&gt;Yaopengfei(姚鹏飞)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;博客地址 : &lt;a href=&quot;http://www.cnblogs.com/yaopengfei/&quot;&gt;&lt;span&gt;http://www.cnblogs.com/yaopengfei/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;声     明1 : 本人才疏学浅，用郭德纲的话说“我是一个小学生”，如有错误，欢迎讨论，请勿谩骂^_^。&lt;/li&gt;
&lt;li&gt;声     明2 : 原创博客请在转载时保留原文链接或在文章开头加上本人博客地址，如需代码请在评论处留下你的邮箱&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;

</description>
<pubDate>Sat, 14 Jul 2018 00:27:00 +0000</pubDate>
<dc:creator>Yaopengfei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaopengfei/p/9304308.html</dc:identifier>
</item>
<item>
<title>redis集群搭建 - 单曲荨环</title>
<link>http://www.cnblogs.com/zhoujie/p/redis3.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhoujie/p/redis3.html</guid>
<description>&lt;p&gt;　　Redis 是一个开源的 key-value 存储系统，由于出众的性能，大部分互联网企业都用来做服务器端缓存。Redis 在3.0版本前只支持单实例模式，虽然支持主从模式、哨兵模式部署来解决单点故障，但是现在互联网企业动辄大几百G的数据，可完全是没法满足业务的需求，所以，Redis 在 3.0 版本以后就推出了集群模式。&lt;/p&gt;&lt;p&gt;Redis 集群采用了P2P的模式，完全去中心化。Redis 把所有的 Key 分成了 16384 个 slot，每个 Redis 实例负责其中一部分 slot 。集群中的所有信息（节点、端口、slot等），都通过节点之间定期的数据交换而更新。&lt;br/&gt;Redis 客户端可以在任意一个 Redis 实例发出请求，如果所需数据不在该实例中，通过重定向命令引导客户端访问所需的实例。&lt;/p&gt;&lt;div readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wget&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;download.redis.io/releases/redis-4.0.10.tar.gz&lt;/span&gt;
&lt;span&gt;tar&lt;/span&gt; zxvf redis-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; redis-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt; /usr/local/redis/
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是离线安装，则需要从&lt;a target=&quot;_blank&quot;&gt;官网下载指定版本&lt;/a&gt;，然后上传到生产环境。这里安装的是最新版redis，指定安装路径 /usr/local/redis/&lt;/p&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd /usr/local/&lt;span&gt;redis
&lt;/span&gt;&lt;span&gt;make&lt;/span&gt;
&lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成，这时候会在/usr/local/bin/目录下看到redis-server、redis-cli等可执行脚本，进入看一下，如果没有，就要去解压目录复制进去了。&lt;/p&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ vim /usr/local/redis/redis.conf
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd /usr/local/bin/&lt;span&gt;
redis&lt;/span&gt;-server /usr/local/redis/redis.conf
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;151&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
netstat -anp | &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;6379&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令行连接：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
➜  redis redis-&lt;span&gt;cli
&lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt; keys *
&lt;span&gt;1&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;city&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;usage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;idc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;) &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;region&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt; set name jzhou
OK
&lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt; get name
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jzhou&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;关闭服务&lt;/h3&gt;
&lt;p&gt;可以通过杀进程的方式暴力关闭服务，也可以通过命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
redis-cli shutdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 netstat 可以看出来端口已经是TIME_WAIT状态了&lt;/p&gt;
&lt;p&gt;以上是centos7单机部署redis的过程，下面集群搭建和上述类似，不过在目录结构和配置文件不同，当然，遇到的坑也多，主要配置集群依赖一些外部包，但说实话光搭建个集群是没有啥技术含量但。。&lt;/p&gt;

&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;redis-cluster架构设计&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201807/476931-20180713230056969-596404674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;架构细节:&lt;/p&gt;
&lt;p&gt;(1)所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽.&lt;/p&gt;
&lt;p&gt;(2)节点的fail是通过集群中超过半数的节点检测失效时才生效.&lt;/p&gt;
&lt;p&gt;(3)客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可&lt;/p&gt;
&lt;p&gt;(4)redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster 负责维护node&amp;lt;-&amp;gt;slot&amp;lt;-&amp;gt;key&lt;/p&gt;
&lt;p&gt;(5)Redis集群预分好16384个桶，当需要在 Redis 集群中放置一个 key-value 时，根据 CRC16(key) mod 16384的值，决定将一个key放到哪个桶中。&lt;/p&gt;
&lt;h3&gt;环境准备&lt;/h3&gt;
&lt;p&gt; 　　Redis集群中要求奇数节点，所以至少要有三个节点，并且每个节点至少有一备份节点，所以至少需要6个redis服务实例。&lt;/p&gt;
&lt;p&gt;这里演示的是我搭的生产环境redis集群，3台服务器，每台起3个服务，共9个节点，生产环境搭建的很顺利，但测试环境一台服务器开6个端口遇到了很多问题，各种依赖包问题，后续会说明。&lt;/p&gt;
&lt;h4&gt;三台服务器&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;
&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;&lt;span&gt;
（每台服务器redis三个端口号 &lt;/span&gt;&lt;span&gt;7000&lt;/span&gt;～&lt;span&gt;7002&lt;/span&gt;）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 按照上面搭建单台redis服务的方式在三台服务器分别安装redis，从配置文件开始会有所不同。下面会说明搭建过程。&lt;/p&gt;
&lt;h4&gt;依赖包安装&lt;/h4&gt;
&lt;p&gt;注意，下述均安装最新版本，否则会和redis版本不匹配&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;lib
zlib
ruby
rubugems&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;撸起袖子集群搭建&lt;/h3&gt;
&lt;h4&gt;1. 准备目录结构&lt;/h4&gt;
&lt;p&gt;三台机器一样，建立如下目录结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;mkdir&lt;/span&gt; -p /usr/local/redis/redis-cluster/{&lt;span&gt;7000&lt;/span&gt;,&lt;span&gt;7001&lt;/span&gt;,&lt;span&gt;7002&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分别进入每个端口目录创建配置文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd  /usr/local/redis/redis-cluster/&lt;span&gt;7000&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;touch&lt;/span&gt; redis.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.redis.conf内容及解释&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
port &lt;span&gt;7000&lt;/span&gt;   # 端口7000,&lt;span&gt;7001&lt;/span&gt;,&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;，与目录对应
bind &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt; #默认ip为127.&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;，需要改为其他节点机器可访问的ip，否则创建集群时无法访问对应的端口，无法创建集群
daemonize yes   #redis后台运行
cluster&lt;/span&gt;-&lt;span&gt;enabled yes  #开启集群
cluster&lt;/span&gt;-config-&lt;span&gt;file&lt;/span&gt; nodes_7000.conf  #集群的配置，配置文件首次启动自动生成 &lt;span&gt;7000&lt;/span&gt;，&lt;span&gt;7001&lt;/span&gt;，&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;  
cluster&lt;/span&gt;-node-timeout &lt;span&gt;8000&lt;/span&gt;&lt;span&gt;   #请求超时，默认15秒，可自行设置
appendonly yes  #开启aof持久化模式，每次写操作请求都追加到appendonly.aof文件中
appendfsync always  #每次有写操作的时候都同步
logfile &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/data/redis/logs/redis.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; #redis服务日志
pidfile &lt;/span&gt;/var/run/redis_7000.pid  #pidfile文件对应7000，&lt;span&gt;7001&lt;/span&gt;，&lt;span&gt;7002&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，上述有些配置项要对应服务和目录，三个目录按照上述配置好后，启动服务&lt;/p&gt;
&lt;h4&gt;3.启动/关闭集群服务&lt;/h4&gt;
&lt;p&gt;可以在每个服务器上写一个启动脚本start-redis.sh：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;((i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;3&lt;/span&gt;;i++&lt;span&gt;)); 
&lt;/span&gt;&lt;span&gt;do&lt;/span&gt; /usr/local/bin/redis-server /usr/local/redis/redis-cluster/&lt;span&gt;700&lt;/span&gt;$i/&lt;span&gt;redis.conf; 
&lt;/span&gt;&lt;span&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关闭服务类似：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;((i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;=&lt;span&gt;2&lt;/span&gt;;i++&lt;span&gt;));
 &lt;/span&gt;&lt;span&gt;do&lt;/span&gt; /usr/local/bin/redis-cli -c -h $IP -p &lt;span&gt;700&lt;/span&gt;&lt;span&gt;$i shutdown; 
&lt;/span&gt;&lt;span&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$IP分别为三台服务器IP。&lt;/p&gt;
&lt;p&gt;这时只是启动了9个单独的redis服务，它们还不是一个集群，下面就说明创建集群&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;4.创建集群&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;：在任意一台上运行&lt;/strong&gt; 不要在每台机器上都运行，一台就够了&lt;/p&gt;
&lt;p&gt;Redis 官方提供了 &lt;code&gt;redis-trib.rb&lt;/code&gt; 这个工具，就在解压目录的 src 目录中&lt;/p&gt;
&lt;p&gt;在其中一台执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
$ cd /root/redis-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;/&lt;span&gt;src
$ .&lt;/span&gt;/redis-trib.rb create --replicas &lt;span&gt;1&lt;/span&gt; &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; &lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt; &lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; &lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;敲完这个命令后会提示是否按照默认的推荐方式配置集群主从，一般选yes就行了&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://note.youdao.com/src/2869FFBF24E540A18B3CDE12A5BC94CC&quot; alt=&quot;&quot; data-media-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201807/476931-20180713233924580-663020690.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;截图中看出，推荐了4个masters，5个从节点&lt;/p&gt;
&lt;div readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Creating cluster
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Performing hash slots allocation on &lt;span&gt;9&lt;/span&gt;&lt;span&gt; nodes...
Using &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; masters:
&lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; to &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; to &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; to &lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt; to &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
Adding replica &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt; to &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面这个显示了集群和slot分配结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201807/476931-20180713234127772-494436765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;5.集群验证&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;参数 -C 可连接到集群，因为 redis.conf 将 bind 改为了ip地址，所以 -h 参数不可以省略，-p 参数为端口号&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;70.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@&lt;span&gt;172&lt;/span&gt;-&lt;span&gt;28&lt;/span&gt;-&lt;span&gt;37&lt;/span&gt;-&lt;span&gt;29&lt;/span&gt; src]# redis-cli -c -p &lt;span&gt;7000&lt;/span&gt; -h &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt;&lt;span&gt; set name zhoujie
&lt;/span&gt;-&amp;gt; Redirected to slot [&lt;span&gt;5798&lt;/span&gt;] located at &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
OK
&lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt;&lt;span&gt; get name
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zhoujie&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到在29的7000上设置了name，重定向到了30的7000节点。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;到此为止集群搭建成功！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;友情提示：&lt;/p&gt;
&lt;p&gt;当出现集群无法启动时，删除集群配置文件，再次重新启动每一个redis服务，然后重新构件集群环境。&lt;/p&gt;
&lt;p&gt;--------------------------------------------华丽的分割线----------------------------------------------------&lt;/p&gt;
&lt;h3&gt;redis-trib.rb命令常见用法&lt;/h3&gt;
&lt;p&gt;1）列出集群节点-cluster nodes&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@&lt;span&gt;172&lt;/span&gt;-&lt;span&gt;28&lt;/span&gt;-&lt;span&gt;37&lt;/span&gt;-&lt;span&gt;30&lt;/span&gt; src]# &lt;strong&gt;redis-cli -h &lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;  -c -p &lt;span&gt;7000&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt;&lt;span&gt; cluster nodes
0d260c47f10ecbbfd9c3c1707da82a3dd7951313 &lt;/span&gt;&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;@&lt;span&gt;17001&lt;/span&gt; slave f85a9a80aca5e4c4a1437c7b58abd5895ee66855 &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497002061&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;&lt;span&gt; connected
6d3db545319a8d41f4ad0666885856257fc2ab5f &lt;/span&gt;&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;@&lt;span&gt;17002&lt;/span&gt; slave 0cdeba26690238582ad7705abac6de71d1817c9e &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497002062&lt;/span&gt; &lt;span&gt;9&lt;/span&gt;&lt;span&gt; connected
3f6c1449e60fe0d868e0bdc655165419ed7cd193 &lt;/span&gt;&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;38.219&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;@&lt;span&gt;17000&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497003000&lt;/span&gt; &lt;span&gt;7&lt;/span&gt; connected &lt;span&gt;8192&lt;/span&gt;-&lt;span&gt;12287&lt;/span&gt;&lt;span&gt;
4004ad507da2e7cbae465d7f01864d53972f595c &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;@&lt;span&gt;17002&lt;/span&gt; slave 3f6c1449e60fe0d868e0bdc655165419ed7cd193 &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497003062&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;span&gt; connected
f85a9a80aca5e4c4a1437c7b58abd5895ee66855 &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;@&lt;span&gt;17000&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497004064&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; connected &lt;span&gt;0&lt;/span&gt;-&lt;span&gt;4095&lt;/span&gt;&lt;span&gt;
7fc5072406e47cd58822f17f5e1ce3b15328352e &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;@&lt;span&gt;17000&lt;/span&gt; myself,master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497002000&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; connected &lt;span&gt;4096&lt;/span&gt;-&lt;span&gt;8191&lt;/span&gt;&lt;span&gt;
fb4554a4fa2bd4af1c213b90ec32d3f7fb12e87b &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;@&lt;span&gt;17001&lt;/span&gt; slave f85a9a80aca5e4c4a1437c7b58abd5895ee66855 &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497005066&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt; connected
967243e807a1c0c32ad56db47007c54a2d1d6e2e &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;@&lt;span&gt;17002&lt;/span&gt; slave 7fc5072406e47cd58822f17f5e1ce3b15328352e &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497004064&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt; connected
0cdeba26690238582ad7705abac6de71d1817c9e &lt;/span&gt;&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.29&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;@&lt;span&gt;17001&lt;/span&gt; master - &lt;span&gt;0&lt;/span&gt; &lt;span&gt;1531497004064&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; connected &lt;span&gt;12288&lt;/span&gt;-&lt;span&gt;16383&lt;/span&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2）查看集群信息- &lt;code class=&quot;sh&quot;&gt;cluster info&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt; cluster &lt;span&gt;info&lt;/span&gt;&lt;span&gt;
cluster_state:ok
cluster_slots_assigned:&lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;&lt;span&gt;
cluster_slots_ok:&lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;&lt;span&gt;
cluster_slots_pfail:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
cluster_slots_fail:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
cluster_known_nodes:&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;
cluster_size:&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
cluster_current_epoch:&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;
cluster_my_epoch:&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_ping_sent:&lt;/span&gt;&lt;span&gt;2243335&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_pong_sent:&lt;/span&gt;&lt;span&gt;2220197&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_meet_sent:&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_sent:&lt;/span&gt;&lt;span&gt;4463536&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_ping_received:&lt;/span&gt;&lt;span&gt;2220192&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_pong_received:&lt;/span&gt;&lt;span&gt;2243339&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_meet_received:&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
cluster_stats_messages_received:&lt;/span&gt;&lt;span&gt;4463536&lt;/span&gt;
&lt;span&gt;172.28&lt;/span&gt;.&lt;span&gt;37.30&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3）检查集群状态-check&lt;/p&gt;
&lt;p&gt;下面内容是测试环境搭建的，一台服务器6个节点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@&lt;span&gt;192&lt;/span&gt;-&lt;span&gt;168&lt;/span&gt;-&lt;span&gt;151&lt;/span&gt;-&lt;span&gt;110&lt;/span&gt; redis]# /root/redis-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;/src/redis-trib.rb check &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;151.110&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;151.110&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;)
M: 7bf58adaafbfee1643785ea7b5da723d6595bbaf &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;151.110&lt;/span&gt;:&lt;span&gt;7000&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;5460&lt;/span&gt; (&lt;span&gt;5461&lt;/span&gt;&lt;span&gt; slots) master
   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; additional replica(s)
S: 90072487e6227544c079b2d8214ef5fd050575b5 &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;151.110&lt;/span&gt;:&lt;span&gt;7004&lt;/span&gt;&lt;span&gt;
   slots: (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; slots) slave
   replicates f7374d1b48562c9e54523948915c99bb00a12ba7
M: c6cf17370fc94aabc88e862fa72229ebd9b94166 &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;151.110&lt;/span&gt;:&lt;span&gt;7002&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;10923&lt;/span&gt;-&lt;span&gt;16383&lt;/span&gt; (&lt;span&gt;5461&lt;/span&gt;&lt;span&gt; slots) master
   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; additional replica(s)
S: 59d25294cbfb63f2d4d75410e66ce58899c65469 &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;151.110&lt;/span&gt;:&lt;span&gt;7003&lt;/span&gt;&lt;span&gt;
   slots: (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; slots) slave
   replicates 7bf58adaafbfee1643785ea7b5da723d6595bbaf
S: 6256051389337640691e4b44d7de2b7b8c8fa25f &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;151.110&lt;/span&gt;:&lt;span&gt;7005&lt;/span&gt;&lt;span&gt;
   slots: (&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; slots) slave
   replicates c6cf17370fc94aabc88e862fa72229ebd9b94166
M: f7374d1b48562c9e54523948915c99bb00a12ba7 &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;151.110&lt;/span&gt;:&lt;span&gt;7001&lt;/span&gt;&lt;span&gt;
   slots:&lt;/span&gt;&lt;span&gt;5461&lt;/span&gt;-&lt;span&gt;10922&lt;/span&gt; (&lt;span&gt;5462&lt;/span&gt;&lt;span&gt; slots) master
   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; additional replica(s)
[OK] All nodes agree about slots configuration.
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Check &lt;span&gt;for&lt;/span&gt;&lt;span&gt; open slots...
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Check slots coverage...
[OK] All &lt;/span&gt;&lt;span&gt;16384&lt;/span&gt;&lt;span&gt; slots covered.
[root@&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;-&lt;span&gt;168&lt;/span&gt;-&lt;span&gt;151&lt;/span&gt;-&lt;span&gt;110&lt;/span&gt; redis]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4）其它常用命令&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;create：创建一个集群环境host1:port1 ... hostN:portN（集群中的主从节点比例）&lt;/li&gt;
&lt;li&gt;call：可以执行redis命令&lt;/li&gt;
&lt;li&gt;add-node：将一个节点添加到集群里，第一个参数为新节点的ip:port，第二个参数为集群中任意一个已经存在的节点的ip:port&lt;/li&gt;
&lt;li&gt;del-node：移除一个节点&lt;/li&gt;
&lt;li&gt;reshard：重新分片&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;集群操作&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;集群(cluster)&lt;/span&gt;
&lt;span&gt;
CLUSTER INFO 打印集群的信息

CLUSTER NODES 列出集群当前已知的所有节点（node），以及这些节点的相关信息。

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点(node)&lt;/span&gt;
&lt;span&gt;
CLUSTER MEET &lt;/span&gt;&amp;lt;ip&amp;gt; &amp;lt;port&amp;gt;&lt;span&gt; 将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。

CLUSTER FORGET &lt;/span&gt;&amp;lt;node_id&amp;gt;&lt;span&gt; 从集群中移除 node_id 指定的节点。

CLUSTER REPLICATE &lt;/span&gt;&amp;lt;node_id&amp;gt;&lt;span&gt; 将当前节点设置为 node_id 指定的节点的从节点。

CLUSTER SAVECONFIG 将节点的配置文件保存到硬盘里面。

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;槽(slot)&lt;/span&gt;
&lt;span&gt;
CLUSTER ADDSLOTS &lt;/span&gt;&amp;lt;slot&amp;gt;&lt;span&gt; [slot ...] 将一个或多个槽（slot）指派（assign）给当前节点。

CLUSTER DELSLOTS &lt;/span&gt;&amp;lt;slot&amp;gt;&lt;span&gt; [slot ...] 移除一个或多个槽对当前节点的指派。

CLUSTER FLUSHSLOTS 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。

CLUSTER SETSLOT &lt;/span&gt;&amp;lt;slot&amp;gt; NODE &amp;lt;node_id&amp;gt; 将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽&amp;gt;&lt;span&gt;，然后再进行指派。

CLUSTER SETSLOT &lt;/span&gt;&amp;lt;slot&amp;gt; MIGRATING &amp;lt;node_id&amp;gt;&lt;span&gt; 将本节点的槽 slot 迁移到 node_id 指定的节点中。

CLUSTER SETSLOT &lt;/span&gt;&amp;lt;slot&amp;gt; IMPORTING &amp;lt;node_id&amp;gt;&lt;span&gt; 从 node_id 指定的节点中导入槽 slot 到本节点。

CLUSTER SETSLOT &lt;/span&gt;&amp;lt;slot&amp;gt;&lt;span&gt; STABLE 取消对槽 slot 的导入（import）或者迁移（migrate）。

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;键 (key)&lt;/span&gt;
&lt;span&gt;
CLUSTER KEYSLOT &lt;/span&gt;&amp;lt;key&amp;gt;&lt;span&gt; 计算键 key 应该被放置在哪个槽上。

CLUSTER COUNTKEYSINSLOT &lt;/span&gt;&amp;lt;slot&amp;gt;&lt;span&gt; 返回槽 slot 目前包含的键值对数量。

CLUSTER GETKEYSINSLOT &lt;/span&gt;&amp;lt;slot&amp;gt; &amp;lt;count&amp;gt; 返回 count 个 slot 槽中的键。
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;向集群中添加节点或删除节点&lt;/h3&gt;
&lt;p&gt;我们新建两个服务，按照之前搭建的集群方式新增俩个节点：（一主一从 master、slave）。&lt;/p&gt;
&lt;p&gt;  Mater：7007 slave:7008&lt;/p&gt;
&lt;p&gt;创建7007/7008文件夹。拷贝redis.conf文件到对于的7007,7008目录下 ，再进行修改配置文件。&lt;/p&gt;
&lt;p&gt;启动7007和7008俩个服务并查看服务状态。&lt;/p&gt;
&lt;h4&gt;1. 集群中添加一个主节点&lt;/h4&gt;
&lt;p&gt;步骤一：使用&lt;strong&gt;&lt;span&gt;add-node&lt;/span&gt;&lt;/strong&gt;命令：绿色为新增节点，红色为已知存在节点&lt;/p&gt;
&lt;p&gt;[root@wlan124 local]# /usr/local/redis/src/&lt;strong&gt;redis-trib.rb add-node&lt;/strong&gt; &lt;span&gt;192.168.151.110:7007  &lt;/span&gt; &lt;span&gt;192.168.151.110:7001&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;注意&lt;/span&gt;：当添加节点成功以后，新增的节点不会有任何数据，因为他没有分配任何slot。需要为新节点手动分配slot。&lt;/p&gt;

&lt;p&gt;步骤二：reshard命令，分配slot：&lt;/p&gt;
&lt;p&gt;[root@wlan124 local]# /usr/local/redis-3.0.0/src&lt;strong&gt;/redis-trib.rb reshard&lt;/strong&gt;  &lt;span&gt;192.168.151.110:7007&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（提示一）&lt;/p&gt;
&lt;p&gt;How many slots do you want to move (from 1 to 16384)? &lt;span&gt;2000&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（提示二）&lt;/p&gt;
&lt;p&gt;What is the receiving node ID? &lt;span&gt;382634a4025778c040b7213453fd42a709f79e28&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Please enter all the source node IDs.&lt;/p&gt;
&lt;p&gt;  Type 'all' to use all the nodes as source nodes for the hash slots.&lt;/p&gt;
&lt;p&gt;  Type 'done' once you entered all the source nodes IDs.&lt;/p&gt;
&lt;p&gt;Source node #1:&lt;span&gt;all&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（提示三）&lt;/p&gt;
&lt;p&gt;Do you want to proceed with the proposed reshard plan (yes/no)?&lt;span&gt; yes&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;提示一：是希望你需要多少个槽移动到新的节点上，可以自己设置，比如200个槽。&lt;/li&gt;
&lt;li&gt;提示二：是你需要把这200个slot槽移动到那个节点上去（需要指定节点id），并且下个提示是输入all为从所有主节点（7001 7002 7003）中分别抽取相应的槽数（一共为200个槽到指定的新节点中！，并且会打印执行分片的计划。）&lt;/li&gt;
&lt;li&gt;提示三：输入yes确认开始执行分片任务&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;2. 集群中添加一个从节点&lt;/h4&gt;
&lt;div readability=&quot;92&quot;&gt;
&lt;p&gt;步骤一：使用add-node命令：绿色为新增节点，红色为已知存在节点&lt;/p&gt;
&lt;p&gt;[root@wlan124 local]# /usr/local/redis/src/&lt;strong&gt;redis-trib.rb add-node&lt;/strong&gt; &lt;span&gt;192.168.151.110:7008 &lt;/span&gt; &lt;span&gt;192.168.151.110:7001&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;步骤二：首先需要登录到7008节点的客户端，然后使用集群命令，执行replicate命令来指定当前节点的主节点id为哪一个。把当前的7008（slave）节点指定到一个主节点下（这里使用之前创建的7007主节点，绿色表示节点id）。&lt;/p&gt;
&lt;p&gt;[root@wlan124 ~]# /usr/local/redis/bin/redis-cli -c -h 192.168.151.110 -p &lt;span&gt;7008&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;192.168.1.124:7008&amp;gt;&lt;strong&gt; cluster replicate&lt;/strong&gt; &lt;span&gt;4d4cb840519eef342a5730168b6c7e14dd811542&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（7007的id）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;OK&lt;/p&gt;
&lt;h4&gt;3.集群中删除一个主节点&lt;/h4&gt;
&lt;p&gt; 如果主节点有从节点，将从节点转移到其他主节点。如果主节点有slot，先将主节点里的slot分配到其他可用节点中，然后再删除节点才行，否则会有数据的丢失。&lt;/p&gt;

&lt;p&gt;步骤一：删除7007（master）节点之前，我们需要先把其全部的数据（slot槽）移动到其他节点上去（目前只能把master的数据迁移到一个节点上，暂时做不了平均分配功能）。&lt;/p&gt;
&lt;p&gt;[root@wlan124 ~]# /usr/local/redis/src/&lt;strong&gt;redis-trib.rb reshard&lt;/strong&gt; &lt;span&gt;192.168.151.110:7007&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;How many slots do you want to move (from 1 to 16384)? &lt;span&gt;1999&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（注释：这里不会是正好200个槽）&lt;/p&gt;
&lt;p&gt;What is the receiving node ID?&lt;span&gt; 614d0def75663f2620b6402a017014b57c912dad&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（注释：这里是需要把数据移动到哪？7001的主节点id）&lt;/p&gt;
&lt;p&gt;Please enter all the source node IDs.&lt;/p&gt;
&lt;p&gt;  Type 'all' to use all the nodes as source nodes for the hash slots.&lt;/p&gt;
&lt;p&gt;  Type 'done' once you entered all the source nodes IDs.&lt;/p&gt;
&lt;p&gt;Source node #1:&lt;span&gt;4d4cb840519eef342a5730168b6c7e14dd811542&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（注释：这里是需要数据源，也就是我们的7007节点id）&lt;/p&gt;
&lt;p&gt;Source node #2:&lt;span&gt;done&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（注释：这里直接输入done 开始生成迁移计划）&lt;/p&gt;
&lt;p&gt;Do you want to proceed with the proposed reshard plan (yes/no)? yes&lt;/p&gt;
&lt;p&gt;（注释：这里输入yes开始迁移）&lt;/p&gt;

&lt;p&gt;步骤二：最后我们直接使用del-node命令删除7007主节点即可（蓝色表示7007的节点id）。&lt;/p&gt;
&lt;p&gt;[root@wlan124 ~]# /usr/local/redis-3.0.0/src/&lt;strong&gt;redis-trib.rb del-node&lt;/strong&gt; &lt;span&gt;192.168.151.110:7007 4d4cb840519eef342a5730168b6c7e14dd811542&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;4.集群中删除一个从节点&lt;/h4&gt;
&lt;p&gt;步骤一：删除从节点7008，输入del-node命令，指定删除节点ip和端口，以及节点id（蓝色为7008节点id），移除了7008 slave节点，前节点的服务进程也会随之销毁。&lt;/p&gt;

&lt;p&gt;[root@wlan124 ~]# /usr/local/redis-3.0.0/src/&lt;strong&gt;redis-trib.rb del-node&lt;/strong&gt; &lt;span&gt;192.168.151.110:7008 a78c8a41f6430b51a7eca1fdb50092c463a8f1ac&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;目前用得最多的 Node.js Redis 库是 node redis，不过这个库基本已经不再维护了，存在很多 bug（在生产环境中碰到过），也缺失了很多功能（如 pipeling 和脚本优化）。而 ioredis 不仅支持了 Cluster 和 Sentinel，还在 API 层面和 node redis 保持了兼容。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
const Redis = require('ioredis'&lt;span&gt;);
let redis_members &lt;/span&gt;=&lt;span&gt; [{
  port: &lt;/span&gt;7000&lt;span&gt;,
  host: &lt;/span&gt;'172.28.37.29'&lt;span&gt;
}, {
  port: &lt;/span&gt;7001&lt;span&gt;,
  host: &lt;/span&gt;'172.28.37.29'&lt;span&gt;
}, {
  port: &lt;/span&gt;7002&lt;span&gt;,
  host: &lt;/span&gt;'172.28.37.29'&lt;span&gt;
}, {
  port: &lt;/span&gt;7000&lt;span&gt;,
  host: &lt;/span&gt;'172.28.37.30'&lt;span&gt;
}, {
  port: &lt;/span&gt;7001&lt;span&gt;,
  host: &lt;/span&gt;'172.28.37.30'&lt;span&gt;
}, {
  port: &lt;/span&gt;7002&lt;span&gt;,
  host: &lt;/span&gt;'172.28.37.30'&lt;span&gt;
}, {
  port: &lt;/span&gt;7000&lt;span&gt;,
  host: &lt;/span&gt;'172.18.38.219'&lt;span&gt;
}, {
  port: &lt;/span&gt;7001&lt;span&gt;,
  host: &lt;/span&gt;'172.18.38.219'&lt;span&gt;
}, {
  port: &lt;/span&gt;7002&lt;span&gt;,
  host: &lt;/span&gt;'172.18.38.219'&lt;span&gt;
}]
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cluster = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Redis.Cluster(redis_members);
 
cluster.set(&lt;/span&gt;'foo', 'bar'&lt;span&gt;);
cluster.get(&lt;/span&gt;'foo', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err, res) {
  console.log(&lt;/span&gt;'=====',res) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;===== bar&lt;/span&gt;
});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;-------------------------------------------------华丽的分割线------------------------------------------------&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你以为结束了？其实还没有！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;集群搭建过程的各种奇葩错误这里汇总，当然下面错误不是一定会遇到，但不保证一定不会不遇到。生产环境我搭的挺顺利，但是测试环境几乎所有能遇到的问题全都遇到了，最后都解决了，特此记录！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;未完待续～&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 13 Jul 2018 16:37:00 +0000</pubDate>
<dc:creator>单曲荨环</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhoujie/p/redis3.html</dc:identifier>
</item>
</channel>
</rss>