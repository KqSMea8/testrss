<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>二叉搜索树的实现源码（源码较长，请慎入） - IDreamo</title>
<link>http://www.cnblogs.com/idreamo/p/8383414.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/idreamo/p/8383414.html</guid>
<description>&lt;p&gt;我们以&lt;strong&gt;BisTree这个名称来代表二叉搜索树这种数据结构&lt;/strong&gt;。&lt;strong&gt;通过typedef方式将BisTree(二叉搜索树)实现为BiTree（二叉树）的别名&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;采用typedef方法使得二叉搜索树具有了某种程度的多态能力，如同栈和队列一样。这意味着除了专属于二叉搜索树的操作外，还可以在其上执行属于二叉树的操作。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;data是存储在结点中的数据；hidden用来标识结点是否已经移除；factor则代表该结点的平衡因子&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们使用标识符来标识平衡因子可能的值：&lt;strong&gt;AVL_LEFT_HEAVY定义为1，AVL_BALANCED定义为0，AVL_RGT_HEAVY定义为-1&lt;/strong&gt;。&lt;/p&gt;&lt;div readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;bistree.h&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#ifndef BISTREE_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; BISTREE_H&lt;span&gt;

#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bitree.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;定义平衡因子的标识符&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; AVL_LFT_HEAVY 1
&lt;span&gt;#define&lt;/span&gt; AVL_BALANCED  0
&lt;span&gt;#define&lt;/span&gt; AVL_RGT_HEAVY -1

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;定义AVL树中节点的数据结构&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; AvlNode_
{
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;data;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; hidden;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; factor;
}AvlNode;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;通过typedef方式将BisTree(二叉搜索树)实现为BiTree（二叉树）&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
typedef BiTree BisTree;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;公用接口部分&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; bistree_init(BisTree *tree,&lt;span&gt;int&lt;/span&gt; (*compare)(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *key1,&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *key2),&lt;span&gt;void&lt;/span&gt;(*destroy)(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;data));&lt;br/&gt;&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; bistree_destroy(BisTree *&lt;span&gt;tree);&lt;br/&gt;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;  bistree_insert(BisTree *tree,&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;data);
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;  bistree_remove(BisTree *tree,&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;data);
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;  bistree_lookup(BisTree *tree,&lt;span&gt;void&lt;/span&gt; **&lt;span&gt;data);
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; bistree_size(tree)((tree)-&amp;gt;size)

&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; BISTREE_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该操作用来初始化一棵二叉树。由于二叉搜索树实际上也是一棵二叉树，因此调用bitree_init来完成初始化工作。这里需要显示地将compare成员设置为指定的比较函数，该成员在二叉树中并没有使用到。&lt;/p&gt;&lt;p&gt;该操作用来销毁一棵二叉树。为了实现该操作，引入两个额外的辅助函数destroy_left和destroy_right。这两个函数按照递归的方式销毁某个结点下方的左右子树。针对二叉搜索树，需要单独的析构函数来销毁AvlNode中数据成员所引用的空间以及AvlNode结构体本身所占用的资源。&lt;/p&gt;&lt;p&gt;bistree_destroy的时间复杂度同bitree_destroy一样，都是O(n)，这里的n代表树中的结点个数。&lt;/p&gt;&lt;p&gt;该操作将一个结点插入二叉搜索树中。该操作按照递归的方式调用bitree_insert来找到结点应该插入的位置。一旦插入结点，就需要更新相关结点的平衡因子，更新操作在递归的回归过程中完成。如果在处理的过程中有任何结点的平衡因子绝对值为2，都需要执行一次旋转。&lt;/p&gt;&lt;p&gt;从检查是否将结点插入空树开始，如果是这种情况，简单的将结点设为根结点，并设它的平衡因子为AVL_BALANCED。&lt;/p&gt;&lt;p&gt;否则，将待插入结点的数据与当前结点的数据相比较，以此来判断需要往哪个方向移动（左子树还是右子树）。当要插入的结点数据小于当前结点的数据时，递归调用该函数使我们移动到左边。当待插入结点的数据大于当前结点的数据时，递归调用该函数将使我们移动到右边。一旦找到了插入的位置，就动态分配一个AvlNode结构体，并将其插入树中，作为当前结点的子结点。&lt;/p&gt;&lt;p&gt;如果待插入结点的数据恰好与某个隐藏的结点的数据一致（由于执行了移除操作，使结点成为隐藏的，但并未真正移除），就销毁当前结点中的数据，将新的数据插入到原来的位置上，并标识该结点不再为隐藏的。在这种情况下不需要再平衡树。&lt;/p&gt;&lt;p&gt;除此之外，替换了之前是隐藏的结点后，下一步需要评估树的平衡性受到的影响，这样如果有必要的话可以对其修复。不论结点插入左边还是右边，都用balanced来表示插入操作是否破坏了树的平衡性。调整当前结点的平衡因子反过来可能会导致该结点上层的平衡因子被打乱。因此，每次调用insert操作时，如果balanced为0，就遍历树当前这一层的所有结点，并更新结点的平衡因子。一旦发现没有结点需要更新了，就将balanced设置为1，以此表示之前的操作已经完成。&lt;/p&gt;&lt;p&gt;switch语句决定如何更新平衡因子，也决定何时应该执行旋转操作。实际用来执行旋转操作的函数要么是rotate_left要么是rotate_right，它们决定旋转的类型：如果调用rotate_left则是LL或者LR；如果调用rotate_right则是RL或RR。由于旋转操作会改变结点的平衡因子，因此每个旋转函数也会修正平衡因子。&lt;/p&gt;&lt;p&gt;和插入一颗完全平衡的二叉树中一样，它们的时间复杂度都是O(lgn)。&lt;/p&gt;&lt;p&gt;该操作将一个节点从二叉搜索树中移除。但它只是将结点隐藏起来而不是真正的移除，我们称之为“惰性移除”。&lt;/p&gt;&lt;p&gt;要隐藏一个结点，将AvlNode结构中的hidden成员设置为1。如果稍后插入同样的数据，只需简单的将hidden成员再次设置为0。&lt;/p&gt;&lt;p&gt;如果移除的结点数目很大，可能就需要考虑将结点真正的移除并重新调整树的结构。&lt;/p&gt;&lt;p&gt;要定位隐藏的结点，以递归的方式调用hide，直到找到目标为止。一旦将结点隐藏了，就没有必要重新平衡树了，因为并没有对树的结构做任何修改。因此，直接将balanced值设置为1。&lt;/p&gt;&lt;p&gt;从AVL树中移除结点的过程分析同插入结点一样，因此bistree_remove的时间复杂度为O(lg n)。&lt;/p&gt;&lt;p&gt; 从AVL移除结点的过程分析同插入结点一样，因此，bistree_remove的时间复杂度为O(lgn)。&lt;/p&gt;&lt;p&gt;该操作用来在二叉搜索树中查找结点。返回一个指向AvlNode结构体中数据域成员的指针。该操作通过递归的方式调用lookup，从根结点开始，逐层降低遍历树的结点，直到找到目标结点为止。在每个层级上，我们首先检查是否到达了分支的边缘。如果我们处于分支的边缘就说明我们要找的结点不存在。否则，我们要么移动到左子结点，要么移动到右子结点，移动方式同前面介绍过的bistree_insert一样。当我们遇到目标结点时，递归终结，此时返回0。&lt;/p&gt;&lt;p&gt;查找Avl树中结点的分析过程同插入结点一样，因此bistree_lookup的时间复杂度为O(lg n)。&lt;/p&gt;&lt;p&gt;这是一个宏，用来计算二叉搜索树中结点的个数。直接访问BisTree结构体中的size成员即可。&lt;/p&gt;&lt;div readability=&quot;379&quot;&gt;
&lt;pre readability=&quot;9.5&quot;&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;bistree.c&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bistree.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;bistree.h中包含bitree.h&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; destroy_right(BisTree *tree,BiTreeNode *&lt;span&gt;node);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; rotate_left 执行LL或LR旋转&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; rotate_left(BiTreeNode **&lt;span&gt;node)
{
    BiTreeNode &lt;/span&gt;*left, *&lt;span&gt;grandchild;
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;设left为A的左子树&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    left &lt;/span&gt;= bitree_left(*&lt;span&gt;node);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;left结点的平衡因子为1，说明新插入的结点位于A的左子树的左子树上&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(((AvlNode *)bitree_data(left))-&amp;gt;factor ==&lt;span&gt; AVL_LFT_HEAVY)
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;perform an LL rotation. 执行LL旋转&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_left(&lt;/span&gt;*node) = bitree_right(left);                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;A的左指针指向left的右子结点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_right(left) &lt;/span&gt;= *node;                              &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;left的右指针指向A&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        ((AvlNode &lt;/span&gt;*)bitree_data(*node))-&amp;gt;factor = AVL_BALANCED;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;旋转后，将A的平衡因子改为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        ((AvlNode &lt;/span&gt;*)bitree_date(left))-factor = AVL_BALANCED;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;旋转后，将left的平衡因子改为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        *node = left;                                            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将原来指向A的指针指向left&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;left结点的平衡因子不为1，说明插入的结点位于A的左子树的右子树上&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;perform an LR rotation. 执行LR旋转&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        grandchild &lt;/span&gt;= bitree_right(left);              &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;设grandchild为left的右子结点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_right(left) &lt;/span&gt;= bitree_left(grandchild); &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将left的右子结点指向grch的左子结点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_left(grandchild) &lt;/span&gt;= left;               &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将grch的左子结点指向left&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_left(&lt;/span&gt;*node) = bitree_right(grandchild);&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将A的左子结点指向grch的右子结点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_right(grandchild) &lt;/span&gt;= *node;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;grch的右子结点指向A&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;执行LR旋转后，调整结点的平衡因子取决于旋转前grch结点的原平衡因子值&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;switch&lt;/span&gt;(((AvlNode *)bitree_data(grandchild))-&amp;gt;&lt;span&gt;factor)
        {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AVL_LFT_HEAVY: &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;如grch原平衡因子值为1，就将A的平衡因子设为-1，left的设为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            ((AvlNOde &lt;/span&gt;*)bitree_data(*node))-&amp;gt;factor =&lt;span&gt; AVL_RGT_HEAVY;
            ((AvlNode &lt;/span&gt;*)bitree_data(left))-&amp;gt;factor =&lt;span&gt; AVL_BALANCED;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AVL_BALANCED: &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;如grch原平衡因子值为0，就将A的平衡因子设为0，left的设为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            ((AvlNode &lt;/span&gt;*)bitree_data(*node))-&amp;gt;factor =&lt;span&gt; AVL_BALANCED;
            ((AvlNode &lt;/span&gt;*)bitree_data(left))-&amp;gt;factor =&lt;span&gt; AVL_BALANCED;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AVL_RGT_HEAVY: &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;如grch原平衡因子值为-1，就将A的平衡因子设为0，left的设为1&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            ((AvlNode &lt;/span&gt;*)bitree_data(*node))-&amp;gt;factor =&lt;span&gt; AVL_BALANCED;
            ((AvlNode &lt;/span&gt;*)bitree_data(left))-&amp;gt;factor =&lt;span&gt; AVL_LFT_HEAVY;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;在所有情况下，grch的新平衡因子都为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        ((AvlNode &lt;/span&gt;*)bitree_data(grandchild))-&amp;gt;factor =&lt;span&gt; AVL_BALANCED;
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将原来指向A的指针指向grch.&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        *node =&lt;span&gt; grandchild;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;rotate_right 执行LR旋转&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; rotate_right(BiTreeNode **&lt;span&gt;node)
{
    BiTreeNode &lt;/span&gt;*right, *&lt;span&gt;grandchild;
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;设right为A的右子树&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    right&lt;/span&gt;=bitree_right(*&lt;span&gt;node);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;判断right的平衡因子，-1代表新节点位于A的右子树的右子树上&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(((AvlNode *)bitree_data(right))-&amp;gt;factor ==&lt;span&gt; AVL_RGT_HEAVY)
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;perform an RR rotation. 执行RR旋转&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_right(&lt;/span&gt;*node)=bitree_left(right);                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将A的右子结点指向right的左子结点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_right(right)&lt;/span&gt;=*node;                              &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将right的左子结点指向A&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        ((AvlNode &lt;/span&gt;*)bitree_data(*node))-&amp;gt;factor = AVL_BALANCED; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将A的平衡因子设为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        ((AvlNode &lt;/span&gt;*)bitree_data(right))-&amp;gt;factor = AVL_BALANCED; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将right的平衡因子设为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        *node = right;                                          &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;原来指向A的指针指向right&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;perform an RL rotation. 执行RL旋转&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        grandchild &lt;/span&gt;= bitree_left(right);                &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;设grch为right的左孩子&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_left(right) &lt;/span&gt;= bitree_right(grandchild);  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将right的左子结点指向grch的右子结点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_right(grandchild) &lt;/span&gt;= right;               &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将grch的右子结点指向right&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_right(&lt;/span&gt;*node)=bitree_left(grandchild);    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将A的右子结点指向grch的左子结点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        bitree_left(grandchild) &lt;/span&gt;= *node;                &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将grch的左子结点指向A&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;执行RL旋转后，调整结点的平衡因子取决于旋转前grch的原平衡因子&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;switch&lt;/span&gt;(((AvlNode *)bitree_data(grandchild))-&amp;gt;&lt;span&gt;factor)
        {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AVL_LFT_HEAVY:&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;如grch原平衡因子值为1，就将A的平衡因子设为0，right的设为-1&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            ((AvlNode &lt;/span&gt;*)bitree_data(*node))-&amp;gt;factor =&lt;span&gt; AVL_BALANCED;
            ((AvlNode &lt;/span&gt;*)bitree_data(*right))-&amp;gt;factor =&lt;span&gt; AVL_RGT_HEAVY;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AVL_BALANCED:&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;如grch原平衡因子值为0，就将A的平衡因子设为0，right的设为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            ((AvlNode &lt;/span&gt;*)bitree_data(*node))-&amp;gt;facotr =&lt;span&gt; AVL_BALANCED;
            ((AvlNode &lt;/span&gt;*)bitree_data(right))-&amp;gt;factor =&lt;span&gt; AVL_BALANCED;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; AVL_RGT_HEAVY:&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;如grch原平衡因子值为-1，就将A的平衡因子设为1，right的设为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            ((AvlNode &lt;/span&gt;*)bitree_data(*node))-&amp;gt;facotr =&lt;span&gt; AVL_LFT_BALANCED;
            ((AvlNode &lt;/span&gt;*)bitree_data(right))-&amp;gt;facotr =&lt;span&gt; AVL_BALANCED;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;在所有情况下，grch的新平衡因子都为0&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        ((AvlNode &lt;/span&gt;*)bitree_data(grandchild))-&amp;gt;factor =&lt;span&gt; AVL_BALANCED;
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将原来指向A的指针指向grch&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        *node =&lt;span&gt; grandchild;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span readability=&quot;13&quot;&gt;;
}&lt;br/&gt;/*destroy_left 销毁左子树*/&lt;br/&gt;static void destroy_left(BisTree *tree,BiTreeNode *node)&lt;br/&gt;{&lt;br/&gt;BiTreeNode **position;&lt;p&gt;/*如果树为空，直接返回*/&lt;br/&gt;if(bitree_size(tree)==0)&lt;br/&gt;return;&lt;br/&gt;/*决定从何处销毁子树*/&lt;br/&gt;if(node==NULL) /*node未指定，销毁整棵树*/&lt;br/&gt;position = &amp;amp;tree-&amp;gt;root;&lt;br/&gt;else           /*否则销毁指定结点的左子树*/&lt;br/&gt;position = &amp;amp;node-&amp;gt;left;&lt;br/&gt;/*销毁子树*/&lt;br/&gt;if(*position != NULL)&lt;br/&gt;{&lt;br/&gt;destroy_left(tree,*position);  /*递归调用*/&lt;br/&gt;destroy_right(tree,*position);&lt;/p&gt;&lt;p&gt;if(tree-&amp;gt;destroy != NULL)&lt;br/&gt;{&lt;br/&gt;/*调用用户定义函数来释放动态分配的数据*/&lt;br/&gt;tree-&amp;gt;destroy(((AvlNode *)(*position)-&amp;gt;data)-&amp;gt;data);&lt;br/&gt;}&lt;br/&gt;/*释放AVL数据节点，并释放node结点本身*/&lt;br/&gt;free((*position)-&amp;gt;data);&lt;br/&gt;free(*position);&lt;br/&gt;*position = NULL;&lt;/p&gt;&lt;p&gt;/*调整树的大小*/&lt;br/&gt;tree-&amp;gt;size--;&lt;br/&gt;}&lt;br/&gt;return;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;/*destroy_right 销毁右子树*/&lt;br/&gt;static void destroy_right(BisTree *tree,BiTreeNode *node)&lt;br/&gt;{&lt;br/&gt;     BiTreeNode **position;&lt;br/&gt;     /*如果树为空，直接返回*/&lt;br/&gt;     if(bitree_size(tree)==0)&lt;br/&gt;         return;&lt;/p&gt;&lt;p&gt;     /*决定从何处销毁树*/&lt;br/&gt;     if(node==NULL) /*node未被指定时销毁整颗树*/&lt;br/&gt;         position=&amp;amp;tree-&amp;gt;root;&lt;br/&gt;     else /*否则销毁指定结点的右子树*/&lt;br/&gt;         position=&amp;amp;node-&amp;gt;right;&lt;/p&gt;&lt;p&gt;     /*销毁子树*/&lt;br/&gt;     if(*position != NULL)&lt;br/&gt;     {&lt;br/&gt;         destroy_left(tree,*position);&lt;br/&gt;         destroy_right(tree,*position); /*递归调用*/&lt;/p&gt;&lt;p&gt;         if(tree-&amp;gt;destroy != NULL)&lt;br/&gt;         {&lt;br/&gt;             /*调用用户定义函数来释放动态分配的数据*/&lt;br/&gt;             tree-&amp;gt;destroy(((AvlNode *)(*position)-&amp;gt;data)-&amp;gt;data);&lt;br/&gt;         }&lt;/p&gt;&lt;p&gt;         /*释放AVL数据节点，并释放node结点本身*/&lt;br/&gt;         free((*position)-&amp;gt;data);&lt;br/&gt;         free(*position);&lt;/p&gt;
&lt;p&gt;         /*重置*position*/&lt;br/&gt;         *position = NULL;&lt;/p&gt;&lt;p&gt;         /*调整树的大小*/&lt;br/&gt;         tree-&amp;gt;size--;&lt;br/&gt;     }&lt;br/&gt;     return;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;/*insert 插入操作*/&lt;/p&gt;
&lt;p&gt;static int insert(BisTree *tree,BiTreeNode **node,const void *data,int *balanced)&lt;br/&gt;{&lt;br/&gt;    AvlNode *avl_data;&lt;br/&gt;    int cmpval,retval;&lt;/p&gt;&lt;p&gt;    /*将数据插入到树中*/&lt;/p&gt;
&lt;p&gt;    /*如果*node是分支的结束,即*node=NULL*/&lt;br/&gt;    if(bitree_is_eob(*node))&lt;br/&gt;    {&lt;br/&gt;        /*操作插入到空树中，设置结点的AVL属性值*/&lt;br/&gt;        if((avl_data = (AvlNode *)malloc(sizeof(AvlNode)))==NULL)&lt;br/&gt;            return -1;&lt;br/&gt;       &lt;br/&gt;        avl_data-&amp;gt;factor = AVL_BALANCED;&lt;br/&gt;        avl_data-&amp;gt;hidden = 0;&lt;br/&gt;        avl_data-&amp;gt;data = (void *)data;&lt;br/&gt;        /*将数据插入为根结点*/&lt;br/&gt;        return bitree_ins_left(tree,*node,avl_data);&lt;br/&gt;    }&lt;/p&gt;
&lt;p&gt;    else&lt;/p&gt;
&lt;p&gt;    {&lt;/p&gt;
&lt;p&gt;        /*控制插入到非空树中 将待插入数据与当前结点的数据相比较*/&lt;/p&gt;
&lt;p&gt;        cmpval = tree-&amp;gt;compare(data,((AvlNode *)bitree_data(*node))-&amp;gt;data);&lt;/p&gt;
&lt;p&gt;        /*待插入结点的数据小于当前结点的数据*/&lt;/p&gt;
&lt;p&gt;        if(cmpval &amp;lt; 0)&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            /*向当前结点的左子树移动*/&lt;/p&gt;
&lt;p&gt;            /*如果当前结点的左子树不存在*/&lt;/p&gt;
&lt;p&gt;            if(bitree_is_eob(bitree_left(*node)))&lt;/p&gt;
&lt;p&gt;            {&lt;/p&gt;
&lt;p&gt;                if((avl_data = (AvlNode *)malloc(sizeof(AvlNode)))==NULL）&lt;/p&gt;
&lt;p&gt;                    return -1;&lt;/p&gt;
&lt;p&gt;                /*将待插入结点插入到当前结点左侧，并设置AVL属性值*/&lt;/p&gt;
&lt;p&gt;                avl_data-&amp;gt;factor=AVL_BALANCED;&lt;/p&gt;
&lt;p&gt;                avl_data-&amp;gt;hidden=0;&lt;/p&gt;
&lt;p&gt;                avl_data-&amp;gt;data=(void *)data;&lt;/p&gt;
&lt;p&gt;                if(bitree_ins_left(tree,*node,avl_data)!=0)&lt;/p&gt;
&lt;p&gt;                return -1;&lt;/p&gt;
&lt;p&gt;                *balanced=0;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;
&lt;p&gt;            /*如果当前结点的左子树不为空，递归调用insert向下插入*/&lt;/p&gt;
&lt;p&gt;            else&lt;/p&gt;
&lt;p&gt;            {&lt;/p&gt;
&lt;p&gt;                if((retval = insert(tree,&amp;amp;bitree_left(*node),data,balanced))!=0)&lt;/p&gt;
&lt;p&gt;                retrun retval;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        /*确保树仍保持平衡*/&lt;/p&gt;
&lt;p&gt;        if(!(*balanced))&lt;/p&gt;
&lt;p&gt;        {   &lt;/p&gt;
&lt;p&gt;            switch(((AvlNode *)bitree_data(*node))-&amp;gt;factor)&lt;/p&gt;
&lt;p&gt;            {&lt;/p&gt;
&lt;p&gt;                case AVL_LFT_HEAVY:&lt;/p&gt;
&lt;p&gt;                rotate_left(node);&lt;/p&gt;
&lt;p&gt;                *balanced = 1;&lt;/p&gt;
&lt;p&gt;                break;&lt;/p&gt;
&lt;p&gt;                case AVL_BALANCED:&lt;/p&gt;
&lt;p&gt;                ((AvlNode *)bitree_data(*node))-&amp;gt;factor = AVL_LFT_HEAVY;&lt;/p&gt;
&lt;p&gt;                break;&lt;/p&gt;
&lt;p&gt;                case AVL_RGT_HEAVY:&lt;/p&gt;
&lt;p&gt;                ((AvlNode *)bitree_data(*node))-&amp;gt;factor = AVL_BALANCED;&lt;/p&gt;
&lt;p&gt;                *balanced = 1;&lt;/p&gt;
&lt;p&gt;                break;&lt;/p&gt;
&lt;p&gt;            }  &lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        \*如果待插入结点的值大于当前结点的值*\&lt;/p&gt;
&lt;p&gt;        else if (cmpval&amp;gt;0)&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            /*向当前结点的右子树移动*/&lt;/p&gt;
&lt;p&gt;            /*如果当前结点的右子树不存在*/&lt;/p&gt;
&lt;p&gt;            if(bitree_is_eob(bitree_right(*node)))&lt;/p&gt;
&lt;p&gt;            {&lt;/p&gt;
&lt;p&gt;                if((avl_data = (AvlNode *)malloc(sizeof(AvlNode)))==NULL)&lt;/p&gt;
&lt;p&gt;                    return -1;&lt;/p&gt;
&lt;p&gt;                /*将待插入结点插入到当前结点右侧，并设置AVL属性值*/&lt;/p&gt;
&lt;p&gt;                avl_data-&amp;gt;factor = AVL_BALANCED;&lt;/p&gt;
&lt;p&gt;                avl_data-&amp;gt;hidden = 0;&lt;/p&gt;
&lt;p&gt;                avl_data-&amp;gt;data = (void *)data;&lt;/p&gt;
&lt;p&gt;                if(bitree_ins_right(tree,*node,avl_data)!=0)&lt;/p&gt;
&lt;p&gt;                    return -1;&lt;/p&gt;
&lt;p&gt;                *balanced = 0;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;
&lt;p&gt;            /*如果当前结点的右子树不为空，递归调用insert向下插入*/&lt;/p&gt;
&lt;p&gt;            else&lt;/p&gt;
&lt;p&gt;            {&lt;/p&gt;
&lt;p&gt;                if(((retval = insert(tree,&amp;amp;bitree_right(*node),data,balanced))!=0)&lt;/p&gt;
&lt;p&gt;                    return retval;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        /*确定树仍然是保持平衡的*/&lt;/p&gt;
&lt;p&gt;        if(!(*balanced))&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            switch (((AvlNode *)bitree_data(*node))-&amp;gt;factor)&lt;/p&gt;
&lt;p&gt;            {&lt;/p&gt;
&lt;p&gt;                case AVL_LFT_HEAVY:&lt;/p&gt;
&lt;p&gt;                ((AvlNode *)bitree_data(*node))-&amp;gt;factor = AVL_BALANCED;&lt;/p&gt;
&lt;p&gt;                *balanced = 1;&lt;/p&gt;
&lt;p&gt;                break;&lt;/p&gt;
&lt;p&gt;                case AVL_BALANCED:&lt;/p&gt;
&lt;p&gt;                ((AvlNode*)bitree_data(*node))-&amp;gt;factor = AVL_RGT_HEAVY;&lt;/p&gt;
&lt;p&gt;                break;&lt;/p&gt;
&lt;p&gt;                case AVL_RGT_HEAVY:&lt;/p&gt;
&lt;p&gt;                rotate_right(node);&lt;/p&gt;
&lt;p&gt;                *balanced=1;&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    /*待插入结点与当前结点(惰性隐藏)相等*/&lt;/p&gt;
&lt;p&gt;    else&lt;/p&gt;
&lt;p&gt;    {&lt;/p&gt;
&lt;p&gt;        if(!(AvlNode *)bitree_data(*node))-&amp;gt;hidden)&lt;/p&gt;
&lt;p&gt;    {&lt;/p&gt;
&lt;p&gt;        return -1;&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    else &lt;/p&gt;
&lt;p&gt;    {&lt;/p&gt;
&lt;p&gt;        /*销毁当前结点中的数据*/&lt;/p&gt;
&lt;p&gt;        if(tree_destroy!=NULL)&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            tree-&amp;gt;destroy(((AvlNode *)bitree_data(*node))-&amp;gt;data);&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        /*将新数据插入到原来结点的位置上*/&lt;/p&gt;
&lt;p&gt;        ((AvlNode *)bitree_data(*node))-&amp;gt;data = (void *)data;&lt;/p&gt;
&lt;p&gt;        /*标识该结点不再为隐藏*/&lt;/p&gt;
&lt;p&gt;        ((AvlNode *)bitree_data(*node))-&amp;gt;hidden = 0;&lt;/p&gt;
&lt;p&gt;        /*这种情况下不需要再平衡树*/&lt;/p&gt;
&lt;p&gt;        *balanced = 1;&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    return 0;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;/*hide 惰性移除*/&lt;/p&gt;
&lt;p&gt;static int hide(BisTree *tree,BiTreeNode *node,const void *data)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;        int cmpval,retval;&lt;/p&gt;
&lt;p&gt;        if(bitree_is_eob(node))&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            /*数据没有被找到*/&lt;/p&gt;
&lt;p&gt;            return -1;&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        /*将待移除数据与当前结点数据相比较*/&lt;/p&gt;
&lt;p&gt;        cmpval = tree-&amp;gt;compare(data,((AvlNode*)bitree_data(node))-&amp;gt;data);&lt;/p&gt;
&lt;p&gt;        if(cmpval &amp;lt; 0)&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            /*向左移动*/&lt;/p&gt;
&lt;p&gt;            retval = hide(tree,bitree_left(node),data);&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        else if(cmpval &amp;gt; 0)&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            /*向右移动*/&lt;/p&gt;
&lt;p&gt;            retval = hide(tree,bitree_right(node),data);&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        else&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            /*两个数据相等，将结点隐藏*/&lt;/p&gt;
&lt;p&gt;            ((AvlNode *)bitree_data(node))-&amp;gt;hidden = 1;&lt;/p&gt;
&lt;p&gt;            retval = 0;&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        return retval;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;/*lookup 查找二叉树中的结点*/&lt;/p&gt;
&lt;p&gt;static int lookup(BisTree *tree,BiTreeNode *node,void **data)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    int cmpval,retval;&lt;/p&gt;
&lt;p&gt;    if(bitree_is_eob(node))&lt;/p&gt;
&lt;p&gt;    {&lt;/p&gt;
&lt;p&gt;        /*数据结点没有找到*/&lt;/p&gt;
&lt;p&gt;        return -1;&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    cmpval = tree-&amp;gt;compare(*data,((AvlNode *)bitree_data(node))-&amp;gt;data);&lt;/p&gt;
&lt;p&gt;    if(cmpval &amp;lt; 0)&lt;/p&gt;
&lt;p&gt;    {&lt;/p&gt;
&lt;p&gt;        /*向左移动,递归查询*/&lt;/p&gt;
&lt;p&gt;        retval = lookup(tree,bitree_left(node),data);&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    else if(cmpval &amp;gt; 0)&lt;/p&gt;
&lt;p&gt;    {&lt;/p&gt;
&lt;p&gt;        /*向右移动，递归查询*/&lt;/p&gt;
&lt;p&gt;        retval = lookup(tree,bitree_right(node),data);&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;    else&lt;/p&gt;
&lt;p&gt;    {&lt;/p&gt;
&lt;p&gt;        if(!(AvlNode *)bitree_data(node))-&amp;gt;hidden)&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            /*找到结点且未被隐藏，从树中返回该结点数据*/&lt;/p&gt;
&lt;p&gt;            *data = ((AvlNode *)bitree_data(node))-&amp;gt;data);&lt;/p&gt;
&lt;p&gt;            return 0;&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;        else&lt;/p&gt;
&lt;p&gt;        {&lt;/p&gt;
&lt;p&gt;            /*如已隐藏，返回数据未被找到*/&lt;/p&gt;
&lt;p&gt;            return -1;&lt;/p&gt;
&lt;p&gt;        }&lt;/p&gt;
&lt;p&gt;    }&lt;/p&gt;
&lt;p&gt;  return retval;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/*bistree_init 初始化二叉搜索树*/&lt;br/&gt;void bistree_init(BisTree *tree,int(*compare)(const void *key1,const void *key2),void (*destroy)(void *data))&lt;br/&gt;{&lt;br/&gt;    bitree_init(tree,destroy);&lt;br/&gt;    tree-&amp;gt;compare=compare;&lt;/p&gt;&lt;p&gt;    return;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;/*bistree_destroy 销毁二叉搜索树*/&lt;/p&gt;
&lt;p&gt;void bistree_destroy(BisTree *tree)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    /*Destroy all nodes in the tree.*/&lt;/p&gt;
&lt;p&gt;    destroy_left(tree,NULL);&lt;/p&gt;
&lt;p&gt;    /*No operations are allowed now,but clear the structure as a precaution.*/&lt;/p&gt;
&lt;p&gt;    memset(tree,0,sizeof(BisTree));&lt;/p&gt;
&lt;p&gt;    return;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/*bistree_insert 向二叉树中插入结点*/&lt;/p&gt;
&lt;p&gt;int bistree_insert(BisTree *tree,const void *data)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    int balanced=0;&lt;/p&gt;
&lt;p&gt;    return insert{tree,&amp;amp;bitree_root(tree),data,&amp;amp;balanced);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;/*bistree_remove 惰性移除*/&lt;/p&gt;
&lt;p&gt;int bistree_remove(BisTree *tree,const void *data)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;    return hide(tree,bitree_root(tree),data);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 10 Mar 2018 22:43:00 +0000</pubDate>
<dc:creator>IDreamo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/idreamo/p/8383414.html</dc:identifier>
</item>
<item>
<title>Apache Ignite剖析 - 哥不是小萝莉</title>
<link>http://www.cnblogs.com/smartloli/p/8542960.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smartloli/p/8542960.html</guid>
<description>&lt;p&gt;　　Apache Ignite和Apache Arrow很类似，属于大数据范畴中的内存分布式管理系统。在《&lt;a id=&quot;homepage1_HomePageDays_ctl00_DayList_TitleUrl_12&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/smartloli/p/6367719.html&quot;&gt;Apache Arrow 内存数据&lt;/a&gt;》中介绍了Arrow的相关内容，它统一了大数据领域各个生态系统的数据格式，避免了序列化和反序列化所带来的资源开销（能够节省80%左右的CPU资源）。今天来给大家剖析下Apache Ignite的相关内容。&lt;/p&gt;

&lt;p&gt;　　Apache Ignite是一个以内存为中心的数据平台，具有强一致性、高可用、强大的SQL、K/V以及其所对应的应用接口（API）。结构分布图如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/666745/201803/666745-20180311013513700-1477099661.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在整个Ignite集群中的多个节点中，Ignite内存中的数据模式有三种，分别是LOCAL、REPLICATED和PARTITIONED。这样增加了Ignite的扩展性，Ignite可以自动化的控制数据如何分区，使用者也可以插入自定义的方法，或是为了提供效率将部分数据并存在一起。&lt;/p&gt;
&lt;p&gt;　　Ignite和其他关系型数据库具有相似的行为，但是在处理约束和索引方面略有不同。Ignite支持一级和二级索引，但是只有一级索引支持唯一性。在持久化方面，Ignite固化内存在内存和磁盘中都能良好的工作，但是持久化到磁盘是可以禁用的，一般将Ignite作为一个内存数据库来使用。&lt;/p&gt;
&lt;p&gt;　　由于Ignite是一个全功能的数据网格，它既可以用于纯内存模式，也可以带有Ignite的原生持久化。同时，它还可以与任何第三方的数据库集成，包含RDBMS和NoSQL。比如，在和Hadoop的HDFS、Kafka等，开发基于大数据平台下的SQL引擎，来操作HDFS、Kafka这类的大数据存储介质。&lt;/p&gt;
&lt;h2&gt;2.1 内存和磁盘&lt;/h2&gt;
&lt;p&gt;　　Apache Ignite是基于固化内存架构的，当Ignite持久化存储特性开启时，它可以在内存和磁盘中存储和处理数据和索引。在固化内存和Ignite持久化存储同时开启时，具有以下优势：&lt;/p&gt;
&lt;h3&gt;2.1.1 内存优势&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;对外内存&lt;/li&gt;
&lt;li&gt;避免显著的GC暂停现象&lt;/li&gt;
&lt;li&gt;自动化碎片清理&lt;/li&gt;
&lt;li&gt;可预估的内存消耗&lt;/li&gt;
&lt;li&gt;高SQL性能&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2.1.2 磁盘优势&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;可选的持久化&lt;/li&gt;
&lt;li&gt;支持SSD介质&lt;/li&gt;
&lt;li&gt;分布式存储&lt;/li&gt;
&lt;li&gt;支持事物&lt;/li&gt;
&lt;li&gt;集群瞬时启动&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.2 持久化过程&lt;/h2&gt;
&lt;p&gt;　　Ignite的持久化存储时一个分布式的、支持ACID、兼容SQL的磁盘存储。它作为一个可选的磁盘层，可以将数据和索引存储到SSD这类磁盘介质，并且可以透明的与Ignite固化内存进行集成。Ignite的持久化存储具有以下优势：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可以在数据中执行SQL操作，不管数据在内存还是在磁盘中，这意味着Ignite可以作为一个经过内存优化的分布式SQL数据库&lt;/li&gt;
&lt;li&gt;可以不用讲所有的数据和索引保持在内存中，持久化存储可以在磁盘上存储数据的大数据集合，然后只在内存中保持访问频繁的数据子集&lt;/li&gt;
&lt;li&gt;集群是瞬时启动，如果整个集群宕机，不需要通过预加载数据来对内存进行数据“预热”，只需要将所有集群的节点都连接到一起，整个集群即可正常工作&lt;/li&gt;
&lt;li&gt;数据和索引在内存和磁盘中以相似的格式进行存储，避免复杂的格式转化，数据集只是在内存和磁盘之间进行移动&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　持久化流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/666745/201803/666745-20180311021205868-616481219.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.3 分布式SQL内存数据库&lt;/h2&gt;
&lt;p&gt;　　在Apache Ignite中提供了分布式SQL数据库功能，这个内存数据库可以水平扩展、容错且兼容标准的SQL语法，它支持所有的SQL及DML命令，包含SELECT、INSERT、DELETE等SQL命令。依赖于固化内存架构，数据集和索引可以同时在内存和磁盘中进行存储，这样可以跨越不同的存储层执行分布式SQL操作，来获得可以固化到磁盘的内存级性能。可以使用Java、Python、C++等原生的API来操作SQL与Ignite进行数据交互，也可以使用Ignite的JDBC或者ODBC驱动，这样就具有了真正意义上的跨平台连接性。具体架构体系，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/666745/201803/666745-20180311022809789-1303523472.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　了解Apache的作用后，下面我们可以通过模拟编写一个大数据SQL引擎，来实现对Kafka的Topic的查询。首先需要实现一个KafkaSqlFactory的类，具体实现代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
/**
 * TODO
 * 
 * @author smartloli.
 *
 *         Created by Mar 9, 2018
 */
public class KafkaSqlFactory {

        private static final Logger LOG = LoggerFactory.getLogger(KafkaSqlFactory.class);

        private static Ignite ignite = null;

        private static void getInstance() {
                if (ignite == null) {
                        ignite = Ignition.start();
                }
        }

        private static IgniteCache&amp;lt;Long, TopicX&amp;gt; processor(List&amp;lt;TopicX&amp;gt; collectors) {
                getInstance();
                CacheConfiguration&amp;lt;Long, TopicX&amp;gt; topicDataCacheCfg = new CacheConfiguration&amp;lt;Long, TopicX&amp;gt;();
                topicDataCacheCfg.setName(TopicCache.NAME);
                topicDataCacheCfg.setCacheMode(CacheMode.PARTITIONED);
                topicDataCacheCfg.setIndexedTypes(Long.class, TopicX.class);
                IgniteCache&amp;lt;Long, TopicX&amp;gt; topicDataCache = ignite.getOrCreateCache(topicDataCacheCfg);
                for (TopicX topic : collectors) {
                        topicDataCache.put(topic.getOffsets(), topic);
                }
                return topicDataCache;
        }

        public static String sql(String sql, List&amp;lt;TopicX&amp;gt; collectors) {
                try {
                        IgniteCache&amp;lt;Long, TopicX&amp;gt; topicDataCache = processor(collectors);
                        SqlFieldsQuery qry = new SqlFieldsQuery(sql);
                        QueryCursor&amp;lt;List&amp;lt;?&amp;gt;&amp;gt; cursor = topicDataCache.query(qry);
                        for (List&amp;lt;?&amp;gt; row : cursor) {
                                System.out.println(row.toString());
                        }
                } catch (Exception ex) {
                        LOG.error(&quot;Query kafka topic has error, msg is &quot; + ex.getMessage());
                } finally {
                        close();
                }
                return &quot;&quot;;
        }

        private static void close() {
                try {
                        if (ignite != null) {
                                ignite.close();
                        }
                } catch (Exception ex) {
                        LOG.error(&quot;Close Ignite has error, msg is &quot; + ex.getMessage());
                } finally {
                        if (ignite != null) {
                                ignite.close();
                        }
                }
        }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后，模拟编写一个生产者来生产数据，并查询数据集，实现代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public static void ignite(){
                List&amp;lt;TopicX&amp;gt; collectors = new ArrayList&amp;lt;&amp;gt;();
                int count = 0;
                for (int i = 0; i &amp;lt; 10; i++) {
                        TopicX td = new TopicX();
                        if (count &amp;gt; 3) {
                                count = 0;
                        }
                        td.setPartitionId(count);
                        td.setOffsets(i);
                        td.setMessage(&quot;hello_&quot; + i);
                        td.setTopicName(&quot;test&quot;);
                        collectors.add(td);
                        count++;
                }

                String sql = &quot;select offsets,message from TopicX where offsets&amp;gt;6 and partitionId in (0,1) limit 1&quot;;
                long stime = System.currentTimeMillis();
                KafkaSqlFactory.sql(sql, collectors);
                System.out.println(&quot;Cost time [&quot; + (System.currentTimeMillis() - stime) / 1000.0 + &quot;]ms&quot;);
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　执行结果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/666745/201803/666745-20180311023430786-408865390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　Apache Ignite整体来说，它基本把现在分布式的一些概念都集成了，包含分布式存储、分布式计算、分布式服务、流式计算等等。而且，它对Java语言的支持，与JDK能够很好的整合，能够很友好的兼容JDK的现有API，当你开启一个线程池，你不需要关系是本地线程池还是分布式线程池，只管提交任务就行。Apache Ignite在与RDBMS、Hadoop、Spark、Kafka等传统关系型数据库和主流大数据套件的集成，提供了非常灵活好用的组件API。&lt;/p&gt;

&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot; readability=&quot;59&quot;&gt;
&lt;p&gt;　　这篇博客就和大家分享到这里，如果大家在研究学习的过程当中有什么问题，可以加群进行讨论或发送邮件给我，我会尽我所能为您解答，与君共勉！&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 10 Mar 2018 18:42:00 +0000</pubDate>
<dc:creator>哥不是小萝莉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smartloli/p/8542960.html</dc:identifier>
</item>
<item>
<title>求小于n的素数个数 - morethink</title>
<link>http://www.cnblogs.com/morethink/p/8542899.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/morethink/p/8542899.html</guid>
<description>&lt;p&gt;本文是对 LeetCode &lt;a href=&quot;https://leetcode.com/problems/count-primes/description/&quot;&gt;Count Primes&lt;/a&gt; 解法的探讨。&lt;/p&gt;
&lt;p&gt;题目：&lt;br/&gt;Count the number of prime numbers less than a non-negative number, n.&lt;/p&gt;
&lt;p&gt;尽管题目并没有要我们写一个最优的算法，但是身为一个程序员，优化应该是一种习惯，在编程的过程中，随着思考进行优化。只要求我们满足给定的时间和空间即可。&lt;/p&gt;
&lt;p&gt;如果你只能想出一个最简单的方法，难道你会有什么竞争力吗？&lt;/p&gt;

&lt;p&gt;最开始我用的就是这个方法，可以说这是最简单的一种方法了，而且最开始，我就是想的这种方法，说明：我没有对这个问题进行思考，没有去优化它，而作为一个程序员，如何提高效率是拿到一个问题首先要思考的事情。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;countPrimes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n) {
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;; i &amp;lt; n; i++) {
        &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; flag = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;; j &amp;lt; i - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; j++)
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i % j == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
                flag = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flag) {
            num++;
        }
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; num;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
    &lt;span class=&quot;co&quot;&gt;//获取开始时&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; startTime = System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;();
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;The num is &quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;L_204_Count_Primes&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;countPrimes&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2000000&lt;/span&gt;));
    &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; endTime = System.&lt;span class=&quot;fu&quot;&gt;currentTimeMillis&lt;/span&gt;();
    &lt;span class=&quot;co&quot;&gt;//获取结束时间&lt;/span&gt;
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;程序运行时间： &quot;&lt;/span&gt; + (endTime - startTime) + &lt;span class=&quot;st&quot;&gt;&quot;ms&quot;&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;时间太长，已经不能计算。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;思考后发现&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;素数一定是奇数&lt;/li&gt;
&lt;li&gt;若 n=ab 是个合数（其中 a 与 b ≠ 1）, 则其中一个约数 a 或 b 必定至大为 &lt;span class=&quot;math inline&quot;&gt;\(\sqrt{n}\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;countPrimes2&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n) {
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;; i &amp;lt; n; i += &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) {
        &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; flag = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;; j &amp;lt;= (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) Math.&lt;span class=&quot;fu&quot;&gt;sqrt&lt;/span&gt;(i); j++)
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i % j == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
                flag = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flag) {
            num++;
        }
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; num;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;The num is 148933&lt;br/&gt;程序运行时间： 1124ms&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查阅 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86&quot;&gt;算术基本定理&lt;/a&gt;可知：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;算术基本定理&lt;/strong&gt; :&lt;br/&gt;每个大于1的整数均可写成一个以上的素数之乘积，且除了质约数的排序不同外是唯一的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说我们可以每个数来除以得到的素数，这样可大大减少运行次数。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;countPrimes3&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (n &amp;lt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }
    &lt;span class=&quot;co&quot;&gt;//0 1 不算做素数,2一定是素数&lt;/span&gt;
    List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    list.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; flag;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;; i &amp;lt; n; i += &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) {
        flag = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; j &amp;lt; list.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() &amp;amp;&amp;amp; list.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(j) &amp;lt;= (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) Math.&lt;span class=&quot;fu&quot;&gt;sqrt&lt;/span&gt;(n); j++) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i % list.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(j) == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
                flag = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (flag) {
            list.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(i);
        }
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; list.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;The num is 148933&lt;br/&gt;程序运行时间： 383ms&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;埃拉托斯特尼筛法，简称埃氏筛，也有人称素数筛。这是一种简单且历史悠久的筛法，用来找出一定范围内所有的素数。&lt;/p&gt;
&lt;p&gt;所使用的原理是从2开始，将每个素数的各个倍数，标记成合数。一个素数的各个倍数，是一个差为此素数本身的等差数列。此为这个筛法和试除法不同的关键之处，后者是以素数来测试每个待测数能否被整除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;筛选法的策略是将素数的倍数全部筛掉，剩下的就是素数了，下图很生动的体现了筛选的过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.morethink.cn/dcp5x843_338cbm3tmg7_b.gif&quot; title=&quot;筛选法&quot;/&gt;&lt;/p&gt;
&lt;p&gt;筛选的过程是先筛掉非素数，针对本文的题目，每筛掉一个，素数数量-1即可，上面说过素数的一个特点，除了2，其它的素数都是奇数，所以我们只需在奇数范围内筛选就可以了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;countPrimes4&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (n &amp;lt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }
    &lt;span class=&quot;co&quot;&gt;//false代表素数，true代表非素数&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt;[] flags = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt;[n];
    &lt;span class=&quot;co&quot;&gt;//0不是素数&lt;/span&gt;
    flags[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;//1不是素数&lt;/span&gt;
    flags[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; num = n - &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;; i &amp;lt;= (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) Math.&lt;span class=&quot;fu&quot;&gt;sqrt&lt;/span&gt;(n); i++) {
        &lt;span class=&quot;co&quot;&gt;//当i为素数时，i的所有倍数都不是素数&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!flags[i]) {
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; * i; j &amp;lt; n; j += i) {
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!flags[j]) {
                    flags[j] = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
                    num--;
                }
            }

        }
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; num;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;The num is 148933&lt;br/&gt;程序运行时间： 43ms&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全部代码放在：&lt;br/&gt;&lt;a href=&quot;https://github.com/morethink/algorithm/blob/master/src/algorithm/leetcode/L_204_Count_Primes.java&quot; class=&quot;uri&quot;&gt;https://github.com/morethink/algorithm/blob/master/src/algorithm/leetcode/L_204_Count_Primes.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文档&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://program-think.blogspot.com/2011/12/prime-algorithm-1.html&quot;&gt;求质数算法的N种境界[1] - 试除法和初级筛法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ghsau/article/details/78768157&quot;&gt;求素数个数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95&quot;&gt;埃拉托斯特尼筛法&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 10 Mar 2018 16:46:00 +0000</pubDate>
<dc:creator>morethink</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/morethink/p/8542899.html</dc:identifier>
</item>
<item>
<title>springboot入门的一点基础 - appleYang</title>
<link>http://www.cnblogs.com/zhikou/p/8542567.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhikou/p/8542567.html</guid>
<description>&lt;p&gt;　　java问世20年以来，发展到现在从技术角度来说已经很成熟，开发过程中我们总是在想如何去提高团队开发规范性、减少重复配置、避免低效开发、部署发布时流程的复杂度以及第三方技术继承难度大。&lt;/p&gt;
&lt;p&gt;　　在这样的背景下，SpringBoot就横空出世了，它使用了“习惯由于配置（本来项目中存在很多配置，此外还内置一个习惯配置，让你可以手动配置@configuration注解）”的理念让项目快速运行起来。&lt;/p&gt;
&lt;p&gt;　　在地址中：https://spring.io/docs&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180310230304052-694484295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　进入了一个项目可选的，建议选择1.5.10左右的版本，很多企业都在用，在这里创建之后解压，用STS、idea、eclipse等工具导入Maven项目就可以了。&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180310230620584-311066192.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180310231508697-598133598.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;SpringBoot 的核心功能&lt;/h2&gt;
&lt;p&gt;　　1.独立运行的Spring项目&lt;/p&gt;
&lt;p&gt;　　　　SpringBoot可以以jar包的方式独立运行，没错不需要部署到外部tomcat下面了，因为内嵌有Tomcat，运行一个SpringBoot项目只需通过java -jar xx.jar,刚上面说的省去了部署时间了。&lt;/p&gt;
&lt;p&gt;　　2.内嵌Servlet容器&lt;/p&gt;
&lt;p&gt;　　　　SpringBoot可以选择内嵌Tomcat、Jetty或者Undertow、这样我们无需以war包的方式部署项目了。&lt;/p&gt;
&lt;p&gt;　　3.Spring提供一系列的start pom 来简化Maven的依赖加载，例如 下图自动加入的包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1137026/201803/1137026-20180310232751724-1482471713.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4.自动配置Spring Boot 会自动在jar包，类，为jar包里的类自动配置bean，会极大的减少我们使用的配置，当然，springboot只是考虑了大多数开发场景使用，如实际开发中我们需要自己配合bean也可以办到。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.demo.data.service.conf;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.ComponentScan;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.EnableAspectJAutoProxy;

@Configuration
@EnableAspectJAutoProxy
@ComponentScan(&lt;/span&gt;&quot;com.demo.data.service.*&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AopConfig {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5.准生产的应用监控&lt;/p&gt;
&lt;p&gt;　　Spring Boot提供基于http相关对运行时项目的监控&lt;/p&gt;
&lt;p&gt;　　6.无代码生成和xml配置&lt;/p&gt;
&lt;p&gt;　　SpringBoot巧妙了避开了大量代码生成，而是采用了注解的方式，这也是采用Spring4提供的新特性，提议java配置和注解组合，不需要xml文件就可以实现Spring的所有配置&lt;/p&gt;
&lt;h2&gt;常用注解&lt;/h2&gt;
&lt;p&gt;　　1.@Enable*注解开启功能非常实用&lt;/p&gt;
&lt;p&gt;　　　　@EnableAspectAutoProxy  开启对AspectJ 自动代理的支持&lt;/p&gt;
&lt;p&gt;　　　　@EnableAsync 开启异步方法支持 &lt;/p&gt;
&lt;p&gt;　　　　@EnableScheduling  计划任务的支持&lt;/p&gt;
&lt;p&gt;　　　　@EnableWebMvc  WebMvc配置的支持&lt;/p&gt;
&lt;p&gt;　　　　@EnableConfigurationProperties  对@ConfigurationProperties注解配置Bean的支持&lt;/p&gt;
&lt;p&gt;　　　　@EnableJpaRepositories 对Spring Date  Jpa Repository &lt;/p&gt;
&lt;p&gt;　　　　@EnableTransactionManagement 注解式事务的支持开启&lt;/p&gt;
&lt;p&gt;　　　　@EnableCaching  注解是缓存开启&lt;/p&gt;
&lt;p&gt;　　2.SpringMvc常用注解&lt;/p&gt;
&lt;p&gt;　　　　@Controller 不解释了&lt;/p&gt;
&lt;p&gt;　　　　@RequestMapping 不解释了&lt;/p&gt;
&lt;p&gt;　　　　@RequestBody不解释了&lt;/p&gt;
&lt;p&gt;　　　　@PathVariable 用来接受路径参数&lt;/p&gt;
&lt;p&gt;　　　　@ReatContoller 很常见，他是@Controller和ResponseBody结合&lt;/p&gt;
&lt;p&gt;　　3.核心注解条件&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnBean  容器指定Bean的条件下&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnClass  类路径下有指定类的条件下&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnExpression  基于SqEL表达是作为判断条件&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnJava  基于JVM表达是作为判断条件&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnJndi  基于JDNI存在的条件下查找指定的位置&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnMissingBean  容器里没有指定Bean的条件下&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnProperty  指定的属性是否有指定的值&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnResource  类路径是否有指定的值&lt;/p&gt;
&lt;p&gt;　　　　@ConfigurationOnWebApplication  当前项目是Web项目的条件下&lt;/p&gt;
&lt;p&gt;我的建议是尽快掌握注解式编程，不然看代码和写代码都是两眼一抹黑，上面很多是我个人意见，如有问题，欢迎给我留言，我会及时回复的......&lt;/p&gt;

</description>
<pubDate>Sat, 10 Mar 2018 16:11:00 +0000</pubDate>
<dc:creator>appleYang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhikou/p/8542567.html</dc:identifier>
</item>
<item>
<title>table问题汇总 - 長风</title>
<link>http://www.cnblogs.com/Kuro-P/p/8542855.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Kuro-P/p/8542855.html</guid>
<description>&lt;p&gt;　　平时要使用 table 的次数说多不多，说少不少，但每次使用必定会被几个问题“坑”一下，所以这篇博客用来记录下table那些“小坑”。但 table 也会有很多好用的特性，比如内容自动垂直居中，正是因为这一点，垂直居中可以用 display: table-cell 和 vertical-align 实现，同时没有兼容性问题。看来 table 也&quot;还不错&quot;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、table自带特性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;（一）当 table 宽度设置为定值时，td 的宽度会自动撑开，按内容长度分配各自宽度（高度同理）&lt;/strong&gt;。即使给某个 td 设置了一定宽度，其它单元格依旧会自动分配宽度。（这一点跟flex很像）。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        .container&lt;/span&gt;{&lt;span&gt;
            width&lt;/span&gt;:&lt;span&gt; 500px&lt;/span&gt;;&lt;span&gt;
            height&lt;/span&gt;:&lt;span&gt; 120px&lt;/span&gt;;
        }&lt;span&gt;
        &lt;span&gt;.container&lt;/span&gt; table&lt;/span&gt;{&lt;span&gt; 
            width&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;; 
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310225342363-494388378.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        .container&lt;/span&gt;{&lt;span&gt;
            width&lt;/span&gt;:&lt;span&gt; 500px&lt;/span&gt;;&lt;span&gt;
            height&lt;/span&gt;:&lt;span&gt; 120px&lt;/span&gt;;
        }&lt;span&gt;
        .container table&lt;/span&gt;{&lt;span&gt; 
            width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;; 
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310225521541-703249854.png&quot; alt=&quot;&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（二）td 内的内容，不论文字、inline元素、还是block元素都会“垂直居中”。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;小红&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;女&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;block&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;table .block&lt;/span&gt;{&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; block&lt;/span&gt;;&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;&lt;span&gt;
    background&lt;/span&gt;:&lt;span&gt; green&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310230309841-2076546025.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　想控制 td 内元素垂直方向上的居中方式，用 vertical-align 属性。但要注意一点是，vertical-align 是用来设置子元素相对于父元素的居中方式的，所以该属性要设置在父元素上，即 td 本身。（table 内的 td 默认 vertical-align：middle;）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;table tr th,td&lt;/span&gt;{&lt;span&gt;
    vertical-align&lt;/span&gt;:&lt;span&gt; top&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310230927944-1375395759.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（三）th 标签内的内容会自动垂直水平居中，并且字体加粗。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　一般 th 是 thead 内的单元格，即表头信息。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（四）table 元素是块级元素，居中原理与块级元素相同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　不过要注意一点是，用 display：table-cell 方法对其他元素内的内容实现垂直居中时，元素不可以被 display：flex 的元素包裹，否则 vertical-align 会失效。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、table 的边框问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　table 有个CSS属性 border-collapse，这个属性有两个基本值：separate（默认值）--边框分离，collapse -- 边框合一。这两个属性稍后会提到，暂且先看看给table 中 的各个元素分别添加 border 是什么样。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;table&lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 1px solid black&lt;/span&gt;;
}&lt;span&gt;
table tr&lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 1px solid red&lt;/span&gt;;
}&lt;span&gt;
table tr th,td&lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 1px solid green&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;1)&lt;/strong&gt; 边框分离 border-collapse: separate; 时&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;table&lt;/span&gt;{&lt;span&gt;
    border-collapse&lt;/span&gt;:&lt;span&gt; separate&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310232816263-182451465.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310232833505-1143937994.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310232909295-1779471457.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　直接给 td 加 border，会让表格看起来有“双层边框”，是因为每个单元格之间有 cellspacing 和 border-spacing。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2)&lt;/strong&gt; 边框合一 border-collapse: collapse; 时&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;table&lt;/span&gt;{&lt;span&gt;
    border-collapse&lt;/span&gt;:&lt;span&gt; collapse&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310233557743-1956287796.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310233625461-831688478.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310233656990-172135484.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　很明显，最后一种就是我们最需要的那种，但是在“边框分离”状态下，也可以实现类似的效果，就是边框“粗了点”。如需要，请参照第三种方法。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;3)&lt;/strong&gt; “边框分离”模式下模拟的“边框合一”&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;table&lt;/span&gt;{&lt;span&gt;
    border-collapse&lt;/span&gt;:&lt;span&gt; separate&lt;/span&gt;;&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 1px solid black&lt;/span&gt;;&lt;span&gt;
    border-spacing&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;; &lt;span&gt;/*设置相邻单元格的边框间的距离（仅用于“边框分离”模式）*/&lt;br/&gt;　　/*empty-cells:hide; /*不在空单元格周围绘制边框*/&lt;br/&gt;&lt;/span&gt;
}&lt;span&gt;
table td&lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 1px solid green&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200842/201803/1200842-20180310235246363-1351448321.png&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　这个原理就是让 td 的边框与 table 的边框之间的间距变为0，两个 border 挨在一起，看起来像一条 border 罢了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、table 的那些坑&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;table高宽是靠内容撑开的 对margin不敏感 可用padding代替&lt;/li&gt;
&lt;li&gt;table自定义 width 失效时 对table使用 table-layout:fixed;&lt;/li&gt;
&lt;li&gt;table宽度不够，想要单元格内换行效果时，可在单元格内使用div/p标签包一层，给div/p标签设置定宽，或者div/p标签宽度100%后设置 word-break:break-all;&lt;/li&gt;
&lt;li&gt;table内的某一行单元格宽度和其他行不同时，可以在 tr 内嵌套 table实现&lt;/li&gt;
&lt;li&gt;table 中的单元格跨行、跨列（合并单元格）可以用 td 标签自带的属性：rowspan 和 colspan&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Sat, 10 Mar 2018 16:11:00 +0000</pubDate>
<dc:creator>長风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Kuro-P/p/8542855.html</dc:identifier>
</item>
<item>
<title>WPF自学入门（四）WPF路由事件之自定义路由事件 - 黄昏前黎明后</title>
<link>http://www.cnblogs.com/fly-bird/p/8542761.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fly-bird/p/8542761.html</guid>
<description>&lt;p&gt;       在上一篇博文中写到了内置路由事件，其实除了内置的路由事件，我们也可以进行自定义路由事件。接下来我们一起来看一下WPF中的自定义路由事件怎么进行创建吧。&lt;/p&gt;
&lt;p&gt;创建自定义路由事件分为3个步骤：&lt;/p&gt;
&lt;p&gt;1、声明并注册路由事件。&lt;/p&gt;
&lt;p&gt;2、利用CLR事件包装路由事件(封装路由事件)。&lt;/p&gt;
&lt;p&gt;3、创建可以激发路由事件的方法。&lt;/p&gt;
&lt;p&gt;      现在我们一起创建一个能够报告当前时间和当前位置信息的路由事件，一起去控件里面游览一番。现在开始创建自定义路由事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 一、声明自定义路由事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       创建继承RoutedEventArgs类的派生类ReportCurrentLocationEventArgs用来携带时间和位置消息，ClickTime属性是用来存储时间，CurrentLocation属性是用来存放位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310233058508-1706595287.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、定义注册路由事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       我们用EventManager.RegisterRoutedEvent方法来注册的参数有4个。代码如下：&lt;/p&gt;
&lt;p&gt; public static readonly RoutedEvent ReportCurrentLocationEvent =EventManager.RegisterRoutedEvent&lt;/p&gt;
&lt;p&gt;                (&quot;ReportCurrentLocation&quot;, RoutingStrategy.Bubble, typeof(EventHandler&amp;lt;ReportCurrentLocationEventArgs&lt;/p&gt;
&lt;p&gt;     &amp;gt;), typeof(ButtonReportCurrentLocation));&lt;/p&gt;
&lt;p&gt;      第一个参数是路由事件的名称Name。&lt;/p&gt;
&lt;p&gt;      第二个参数是路由事件的传递方式，有三种方式：&lt;/p&gt;
&lt;p&gt;            第一种是Bubble是冒泡模式，这种模式是从触发点向上传递，知道最外层。&lt;/p&gt;
&lt;p&gt;             第二种是Direct就是传统的事件一样的，不会通过元素树。&lt;/p&gt;
&lt;p&gt;            第三种是Tunnel是预览模式（隧道模式），这和冒泡的相反，向下传递。&lt;/p&gt;
&lt;p&gt;     第三个参数是路由事件处理器类型，传递的参数是自定义类。&lt;/p&gt;
&lt;p&gt;     第四个参数是拥有这个路由事件的类型。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、封装路由事件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      CLR事件的封装器，不同于依赖属性的GetValue和SetValue，这里是利用Add和Remove两个函数来给路由事件分配事件处理器。&lt;/p&gt;
&lt;p&gt; public event RoutedEventHandler ReportCurrentLocation&lt;/p&gt;
&lt;p&gt;            {&lt;/p&gt;
&lt;p&gt;                add { this.AddHandler(ReportCurrentLocationEvent, value); }&lt;/p&gt;
&lt;p&gt;                remove { this.RemoveHandler(ReportCurrentLocationEvent, value); }&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、创建可以激发路由事件的方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;     重写OnClick方法触发设定路由事件，这是使用RaiseEvent（）方法来触发&lt;/p&gt;
&lt;p&gt; protected override void OnClick()&lt;/p&gt;
&lt;p&gt;            {&lt;/p&gt;
&lt;p&gt;                base.OnClick();&lt;/p&gt;
&lt;p&gt;                ReportCurrentLocationEventArgs args = new ReportCurrentLocationEventArgs(ReportCurrentLocationEvent, this);&lt;/p&gt;
&lt;p&gt;                args.ClickTime = DateTime.Now;&lt;/p&gt;
&lt;p&gt;                this.RaiseEvent(args);&lt;/p&gt;
&lt;p&gt;            }&lt;/p&gt;

&lt;p&gt;完整代码如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310233123746-1120877920.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在界面XAML中，设计如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310233131499-916034621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;那么最后看一下事件处理器是怎样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310233137728-1912053953.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/662342/201803/662342-20180310233144206-1042291354.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 10 Mar 2018 15:37:00 +0000</pubDate>
<dc:creator>黄昏前黎明后</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fly-bird/p/8542761.html</dc:identifier>
</item>
<item>
<title>python基础 - 健林</title>
<link>http://www.cnblogs.com/jianlin/p/8542700.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jianlin/p/8542700.html</guid>
<description>&lt;p&gt;python是具有请打和丰富的库、他被称为胶水语言,能够把用其他语言制作的各种模块、很轻松的连接在一起、常见的一种应用场景是、使用Python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中[3] 有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，性能要求特别高，就可以用C/C++重写，而后封装为Python可以调用的扩展类库。需要注意的是在您使用扩展类库时可能需要考虑平台问题，某些可能不提供跨平台的实现。&lt;/p&gt;
&lt;h2&gt;python是一种什么语言呢？&lt;/h2&gt;
&lt;p&gt;严格的意思来说、python是一种脚本语言、编程语言有多重多样、但是开有开源和闭源之分、python就是一个开发核心源代码的编程语言、他开发代码的效率非常的高、代码编写后非常容易读、非常适合多人参与项目,他支持面向对象编程方式、同样也可以面向过程编程、非常的灵活,他不单免费、还可以任意的copy分发、python是由荷兰人Guido van Rossum在90年开发出来的、当初只是未了自己娱乐尝试编写一种替代ABC这些编程语言的脚本语言、没想到受到大家的喜爱、一直发展至今、后来引入了对多品台的支持。&lt;br/&gt;python语言的源代码的底层是用C语言进行编写的、他最强大之处就在于他丰富的第三方库、使得编写程序得速度非常快。python程序得扩展名是(.py),首先会将.py文件中的源代码编译程python的字节码、然后在由python虚拟机来执行这些编译好的字节码、在这一点上与JAVA等程序语言比起来比较相似、通常我们导入或者调用另一个程序、他的.py文件会生成一个.pyc文件、他是编译好的字节码文件、这样的程序运行起来速度更快。&lt;/p&gt;
&lt;h3&gt;一、编程与编程语言&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;为什么编程?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;编程是为了用机器取代手工操作,编程的目的就是为了把人的思想传递给机器,让机器能够像人脑一样自动执行人们手工的操作。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;什么是编程语言?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;语言就是计算机能够识别的表达方式,编程语言就是人与计算机的交流介质。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;什么是编程?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;编程就是人将自己思想或者行为通过某种编程语言编写下来，他的产出就是一堆字符串文件。字符的执行结果就是编程所执行的结果。&lt;/p&gt;
&lt;h3&gt; 二、编程语言的分类&lt;/h3&gt;
&lt;p&gt;1. 机器语言&lt;br/&gt;机器语言就是站在机器的角度、机器能够直接识别的语言、也就是二进制数。&lt;br/&gt;2. 汇编语言&lt;br/&gt;汇编语言就是站机器的角度、用简单的英文标识取代二进制去编写程序。&lt;br/&gt;3. 高级语言&lt;br/&gt;高级语言就是站在人的角度、通过人能够识别的语言去编写程序、然后在让机器去执行。&lt;br/&gt;4. 编译型语言与解释型语言&lt;br/&gt;编译型语言就是需要编译、需要将所有的代码编译完成之后再执行。&lt;br/&gt;解释型语言是一边解释一边执行。&lt;br/&gt;5. 对比各种语言的优缺点&lt;br/&gt;机器语言==&amp;gt;执行速度最快==&amp;gt;开发效率最低&lt;br/&gt;汇编语言==&amp;gt;执行速度最快 ==&amp;gt;开发效率最低&lt;br/&gt;解释语言==&amp;gt;执行速度慢==&amp;gt;开发效率高、可跨平台&lt;/p&gt;
&lt;h3&gt; 三、python解释器&lt;/h3&gt;
&lt;p&gt;当python程序的安装包下载下来之后、安装到系统后会有一个解释器和Python的自带标准库程序。可以在解释器中编写执行Python源代码，也可以在Linux的终端模拟器中执行其它编辑器编写的代码，Windows系统可以在Dos中切换路径来，直接执行Python程序。&lt;/p&gt;
&lt;h3&gt; 四、第一个python程序&lt;/h3&gt;
&lt;p&gt;python的IDE安装过程很简单、需要你到python的官网(https://www.python.org/downloads/)下载python的程序、然后安装即可。&lt;br/&gt;我们以python2.7为例、安装完成之后的目录结构如下：&lt;br/&gt;![](https://scjianlin.github.io/shier/image/python_ide.png)&lt;br/&gt;然后我们打开这个IDE、在IDE中输入代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_dbb6dfd0-2a49-401b-8483-d19246a6654d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dbb6dfd0-2a49-401b-8483-d19246a6654d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dbb6dfd0-2a49-401b-8483-d19246a6654d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; print (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello,Word! My name is shier!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1194757/201803/1194757-20180310230750989-779365079.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;当然python的IDE的开发效率有限、后期建议大家使用pycharm来编写代码。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;python脚本&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;我们在python的IDE中写代码的时候是不需要加python的标识符、但是我们在写python脚本的时候就需要python的标识符。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_8358b183-b34a-44f2-8cc3-e5ae53361b1c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8358b183-b34a-44f2-8cc3-e5ae53361b1c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8358b183-b34a-44f2-8cc3-e5ae53361b1c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #！/usr/bin/&lt;span&gt;python env #指定系统python的解释器 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; print (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello,Word! My name is shier!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_84fbd10c-58ec-4b21-b6ed-66fed1f61958&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_84fbd10c-58ec-4b21-b6ed-66fed1f61958&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_84fbd10c-58ec-4b21-b6ed-66fed1f61958&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; G:\&amp;gt;&lt;span&gt;python3 test.py
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; Hello,word! My name &lt;span&gt;is&lt;/span&gt; shier!
&lt;span&gt;3&lt;/span&gt; G:\&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;脚本运行方式&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt; py脚本的执行过程&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;启动py解释器&lt;/li&gt;
&lt;li&gt;将py脚本内容读取到内存&lt;/li&gt;
&lt;li&gt;解释器解释文件内容并执行&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;五、变量&lt;/h3&gt;
&lt;p&gt;1.什么是变量?&lt;br/&gt;变量字面意思就是变化的量、量指的是反映某种状态。变量是用来存放一中变化的状态,变是程序执行的直接体现。&lt;br/&gt;2.如何定义变量?&lt;br/&gt;变量的定义方式是由:变量名、赋值号、变量值组成。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
name = 'shier'
sex = 'male'
age = '17'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.变量名的定义规范&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
1、变量名只能是数字、字面、数字或者下划线组成。
2、变量名的第一个字符不能是数字
3、Python中的关键字不能作为变量名
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.变量的定义方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
1、驼峰式
AgeShier=17
2、下划线
age_shier=17
注意:
1、变量名称最好不要用中文
2、变量名称过长
3、变量名称词不达意
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5.常量&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
常量不变化的量、常见的常量又数字、定义常量一般都是大写。
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;每个变量都有id、type、value三要素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
但是需要注意的是:
1、id相同、意味着这个变量的type和value必定相同
2、value相同但是id可能不同
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_c30a0571-6e41-48e9-b0e2-6545d64a88de&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c30a0571-6e41-48e9-b0e2-6545d64a88de&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c30a0571-6e41-48e9-b0e2-6545d64a88de&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; x = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name shier&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; y = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name shier&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; id(x)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 54359208
&lt;span&gt;5&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; id(y)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 54359328
&lt;span&gt;7&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;6.变量的回收机制&lt;br/&gt;当一个python解释器将一个值赋值给某一个变量的时候、此时这个变量名的引用计数会自动加1。如果变量名的引用计数为0、此时该变量就像没娘的孩子会被内存空间会被回收。&lt;/p&gt;
&lt;p&gt;7.变量的解压&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
l1 = ['Hello','word','ni','hao']
a,b,*_ = l1
print(a,b)
Hello word
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解压就是使用站位符的形式代替列表中的元素。&lt;/p&gt;
&lt;h3&gt;六、数据类型&lt;/h3&gt;
&lt;h4&gt;数字&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
1、int整型
在python中数字一般用int表示、常用于标识一个人的年龄、等级、身份证号、qq号等等。 
age = 10
2、float浮点型
在python中浮点型一般用于表示小数、常用于标识工资、身高等等。
salary = 20000.10
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;字符串&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
在py中加了引号的字符就是字符串类型、py没有字符类型。字符串一般用于标识姓名、国籍等等。
name = 'shier'
需要解释一下在py中单引号、双引号、多引号的区别?
其实在python中单引号和双引号没有太大区别、但是需要注意不同情况下的使用。多引号可以打印换行。
print(&quot;Hello,word! I'm 17 years old!&quot;)
info = '''
相信别人就是
相信自己
'''
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;列表&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
列表是python中主要的数据类型之一、他可以被修改、可以增长和缩短、也可以嵌套。列表可以完成大多数集合类的数据结构实现、它支持,数字、字符、字符串甚至可以包含列表。列表数据类型是可变的数据类型。在py中列表类型是在[]内用逗号进行分割、可以存放n多个任意类型的值。列表常用于标识人的爱好等等。
student = ['张三','李四']
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;字典&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
字典是python中的另一种有序的可变的数据结构、且可以存储任意类型对象。
字典是一种键值对的数据容器,每个键值(key:value)对冒号(:)分割、每个对之间用逗号(,)分割、整个字典包括在花括号&quot;{}&quot;中。 
字典中的键必须是唯一的同时是不可变的、值没有限制。
info = {'name':'shier','age':'17'}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;布尔&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
在计算机中True就表示成立、False就标识不成立。
布尔类型的值有True和False两种。 
如果bool() #未传入参数则返回false
如果bool() #传入空字符串也返回false
如果bool() #传入数字0也返回false
如果bool() #传入对象只要是空返回都是false
&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 2
&amp;gt;&amp;gt;&amp;gt; a &amp;lt; b
True
&amp;gt;&amp;gt;&amp;gt; a &amp;gt; b
False
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;可变与不可变类型&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
1.可变类型：在id不变的情况下，value可以变，则称为可变类型，如列表，字典
2. 不可变类型：value一旦改变，id也改变，则称为不可变类型（id变，意味着创建了新的内存空间） 
3. 在py中除了列表和字典是可变其他都不可变。
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;七、格式化输出&lt;/h3&gt;
&lt;p&gt;在py中常会用到将输出信息打印成固定的格式。此时就涉及到字符串的格式化输出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_70b399b8-f473-436d-9e38-970fa8a685ab&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_70b399b8-f473-436d-9e38-970fa8a685ab&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_70b399b8-f473-436d-9e38-970fa8a685ab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;一 占位符
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;shier&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; age = 17
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;My name is %s ,my age is %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;(name,age))
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; My name &lt;span&gt;is&lt;/span&gt; shier ,my age &lt;span&gt;is&lt;/span&gt; 17
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;shier&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; age = 17
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;My name is %s ,my age is %d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;(name,age))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; My name &lt;span&gt;is&lt;/span&gt; shier ,my age &lt;span&gt;is&lt;/span&gt; 17
&lt;span&gt;11&lt;/span&gt; 以上方式是采用的站位符的方式打印的格式化输出、但是需要注意的是%s只能接受str、%d只能接收int、如果%&lt;span&gt;d接收str则会报错。
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;二 format格式化
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;shier&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; age = 17
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;My name is {} ,My age is {}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(name,age))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; ====================
&lt;span&gt;17&lt;/span&gt; name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;shier&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; age = 17
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;My name is {name} ,My age is {age}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(name=name,age=&lt;span&gt;age))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 他们俩的执行结果是一样的。
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;八、基本运算&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
一、算术运算
在python中运算和正常的算术一样。
&amp;gt;&amp;gt;&amp;gt; a=2
&amp;gt;&amp;gt;&amp;gt; b=10
&amp;gt;&amp;gt;&amp;gt; a+b
12
&amp;gt;&amp;gt;&amp;gt; a-b
-8
&amp;gt;&amp;gt;&amp;gt; a*b
20
&amp;gt;&amp;gt;&amp;gt; b**a
100
&amp;gt;&amp;gt;&amp;gt; b/a
5.0
&amp;gt;&amp;gt;&amp;gt; b%a
0
&amp;gt;&amp;gt;&amp;gt; b//a
5
&amp;gt;&amp;gt;&amp;gt;
二、比较运算
&amp;gt;&amp;gt;&amp;gt; a &amp;gt; b
False
&amp;gt;&amp;gt;&amp;gt; a &amp;lt; b
True
&amp;gt;&amp;gt;&amp;gt; a !=b
True
&amp;gt;&amp;gt;&amp;gt; a == b
True
&amp;gt;&amp;gt;&amp;gt;
三、赋值运算
&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 2
&amp;gt;&amp;gt;&amp;gt; a+=b
&amp;gt;&amp;gt;&amp;gt; a
3
&amp;gt;&amp;gt;&amp;gt; a-=b
&amp;gt;&amp;gt;&amp;gt; a
1
&amp;gt;&amp;gt;&amp;gt; a*=b
&amp;gt;&amp;gt;&amp;gt; a
2
&amp;gt;&amp;gt;&amp;gt; a/=b
&amp;gt;&amp;gt;&amp;gt; a
1.0
&amp;gt;&amp;gt;&amp;gt; a%=b
&amp;gt;&amp;gt;&amp;gt; a
1.0
&amp;gt;&amp;gt;&amp;gt; a**=b
&amp;gt;&amp;gt;&amp;gt; a
1.0
&amp;gt;&amp;gt;&amp;gt; a//=b
&amp;gt;&amp;gt;&amp;gt; a
0.0
&amp;gt;&amp;gt;&amp;gt;
四、逻辑运算
常见的逻辑运算又and、not、or
&amp;gt;&amp;gt;&amp;gt; True or False and False
True
&amp;gt;&amp;gt;&amp;gt; (True or False) and False
False
&amp;gt;&amp;gt;&amp;gt;

身份运算(is)
&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 2
&amp;gt;&amp;gt;&amp;gt; a is b
False
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;九、流程控制&lt;/h3&gt;
&lt;p&gt;流程控制就是根据不同的条件的变化而执行不同的代码、例如：登陆网站如果登陆未成功则不能进入到用户中心。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
一、if条件语句
没有分支判断、只有一种结果、如果不满足条件则退出。
age_of_shier=17
if age_of_shier == 17:
print('帅哥好！')
#单分支、如果不满足条件、则执行与条件相反的部分。
age_of_shier=16
if age_of_shier == 17:
print('帅哥好！')
else:
print('你好!')
#
age = 18
height = 180
wegiht = 60
is_pertty = True

if age &amp;lt; 20 and height &amp;gt; 175 and wegiht &amp;lt; 70 and is_pertty == True:
print('完美男人')
else:
print('继续深造吧!')
#嵌套if就是在if内部在加一层if判断。
age = 18
height = 180
wegiht = 60
is_pertty = True
sess = False

if age &amp;lt; 20 and height &amp;gt; 175 and wegiht &amp;lt; 70 and is_pertty == True:
if sess:
print('完美男人')
else:
print('好好锻炼吧！')
else:
print('继续深造吧!')
#小练习
info = input('&amp;gt;&amp;gt; ')
info = int(info)
if info &amp;gt;= 90:
print('优秀')
elif info &amp;gt;= 80:
print('良好')
elif info &amp;gt;= 70:
print('普通')
else:
print('很差')

#while 循环
while 条件: 
# 循环体
# 如果条件为真，那么循环体则执行，执行完毕后再次循环，重新判断条件。。。
# 如果条件为假，那么循环体不执行,循环终止

#改版的猜年龄
age_of_shier = 18
while True:
guess = input('&amp;gt;&amp;gt; ')
if not guess:continue
guess = int(guess)
if guess &amp;gt; age_of_shier:
print('没那么老！')
elif guess &amp;lt; age_of_shier:
print('太年轻了!')
else:
print('恭喜你、猜对了!')

#死循环
while True:
print('heheheh')

#打印10以内除了7的数字。
count = 0
while count&amp;lt;10:
count += 1
if count ==7:
continue
print(count)

#计算1-2+3-4……99的和
count = 1
Sum = 0
while count&amp;lt;100:
if count % 2 ==1:
Sum+=count
else:
Sum-=count
print(count)
count+=1
print('====')
print(Sum)

#嵌套循环
count=1
tag =True
while tag:
if count &amp;gt; 3:break
name = input('name: ')
passwd = input('password: ')
if name == 'shier' and passwd =='123123':
print('login sessfull')
while tag:
mes = input('&amp;gt;&amp;gt; ')
if mes == 'q':
tag = False
print(mes)
else:
print('log error')
count+=1

#while之break
number = 0
while number &amp;lt; 10:
if number &amp;gt;5:
break
print(number)
number+=1
break的作用是跳出本层循环。

#countinue
number = 0
while number &amp;lt; 10:
if number == 5:
continue
print(number)
number+=1
counitnue的作用是跳出本次循环继续执行下一次循环。
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 10 Mar 2018 15:17:00 +0000</pubDate>
<dc:creator>健林</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jianlin/p/8542700.html</dc:identifier>
</item>
<item>
<title>RobotFramework自动化测试框架-DatabaseLibrary库的使用(对数据库的操作) - 老清</title>
<link>http://www.cnblogs.com/laoqing/p/8542487.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laoqing/p/8542487.html</guid>
<description>&lt;p&gt;在自动化过程中，我们经常需要连接不同的数据库，并且对数据库进行很多不同的操作，RobotFramework中，提供了DatabaseLibrary这个库来操作数据库，我们可以按照官网中的说明来安装DatabaseLibrary库，在浏览器中访问&lt;a href=&quot;http://franz-see.github.io/Robotframework-Database-Library/&quot;&gt;http://franz-see.github.io/Robotframework-Database-Library/&lt;/a&gt; 页面，即可以看到该库的相关安装说明和API介绍。&lt;/p&gt;
&lt;p&gt;在使用DatabaseLibrary库时，需要在测试套件中，预先导入该库，才可以在用例中使用DatabaseLibrary库中的关键字，这里以Mysql数据库为例，讲述Databaselibrary库的使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310222332835-388450790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;
要链接到&lt;span lang=&quot;EN-US&quot;&gt;mysql，除了要导入&lt;span lang=&quot;EN-US&quot;&gt;DatabaseLibrary库外，还需要安装&lt;span lang=&quot;EN-US&quot;&gt;pure-Python MySQL client library，可以通过&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://github.com/PyMySQL/PyMySQL&quot;&gt;https://github.com/PyMySQL/PyMySQL&lt;/a&gt; 下载该库，并且进行安装，或者直接通过&lt;span lang=&quot;EN-US&quot;&gt;cmd命令行&lt;span lang=&quot;EN-US&quot;&gt;pip install PyMySQL来进行安装&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310222513989-692936646.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h3 align=&quot;left&quot;&gt;1.1.1        如何连接数据库&lt;/h3&gt;
&lt;p&gt;1、可以通过DatabaseLibrary库中的Connect To Database关键字来链接一个mysql数据库，此处以链接本机mysql库为例&lt;/p&gt;
&lt;p&gt;数据库用户名：root&lt;/p&gt;
&lt;p&gt;数据库密码：root&lt;/p&gt;
&lt;p&gt;Mysql数据库端口：3306&lt;/p&gt;
&lt;p&gt;数据库名：world&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Connect To Database&lt;/strong&gt;   pymysql    world  root   root   localhost  3306&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310222616106-1245782740.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310222647931-1780823698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、还可以通过Connect To Database Using Custom Params关键字来连接mysql数据库&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Connect To Database&lt;/strong&gt; &lt;strong&gt;Using Custom Params&lt;/strong&gt;    pymysql    database='world', user='root', password='root', host='localhost', port=3306&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310222727602-782415329.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310222815611-1986760597.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3 align=&quot;left&quot;&gt;1.1.2        如何断开数据库&lt;/h3&gt;
&lt;p&gt;可以通过关键字Disconnect From Database断开数据库连接，我们在操作数据库时，一定不要忘记在操作完成后，要断开数据库的连接&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Connect To Database&lt;/strong&gt;   pymysql    world  root   root   localhost  3306&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disconnect From Database      &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310222915418-2079754933.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310222957072-1857499790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3 align=&quot;left&quot;&gt;2.1.3        如何对数据库的表进行查询&lt;/h3&gt;
&lt;p&gt;通过Query关键字可以对数据库中的表进行查询，此处以查询mysql数据库中某张表的数据为例，我们在world数据库中执行SELECT * FROM city LIMIT 5; 这条sql.&lt;/p&gt;
&lt;p&gt;我们先看下，我们在sql窗口中查询出来的结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223049212-1612605766.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们再使用Query关键字来进行查询&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Connect To Database Using Custom Params&lt;/strong&gt;  pymysql  database='world', user='root', password='root', host='localhost', port=3306&lt;/p&gt;
&lt;p&gt;@{result}       &lt;strong&gt;Query&lt;/strong&gt;      SELECT * FROM city LIMIT 5;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Log Many&lt;/strong&gt; @{result}    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disconnect From Database               &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223125081-2018276218.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223157484-161324399.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.1.4        如何插入和删除数据&lt;/h3&gt;
&lt;p&gt;可以通过Execute Sql String关键字来执行数据库的插入操作和删除操作&lt;/p&gt;
&lt;p&gt;1、首先我们来看下如何向数据库中插入数据，此处以向表city中插入一条记录为例，通过&lt;strong&gt;Execute Sql Strin&lt;/strong&gt;g关键字来执行INSERT INTO city(NAME,countrycode,district,population) VALUES('beijing' ,'ZH','China',217100)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Connect To Database Using Custom Params   &lt;/strong&gt; pymysql  database='world', user='root', password='root', host='localhost', port=3306&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Execute Sql String&lt;/strong&gt;  INSERT INTO city(NAME,countrycode,district,population) VALUES('beijing' ,'ZH','China',217100)    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disconnect From Database     &lt;/strong&gt;        &lt;/p&gt;
&lt;pre&gt;
&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223258599-695521872.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223336172-1215602069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在sql窗口，查询一下，刚刚执行的inset语句是否执行成功。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223416793-779945737.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到已经成功插入了数据。&lt;/p&gt;
&lt;p&gt;2、然后我们再来看一下怎么删除表中的数据，我们将上面插入的'beijing' ,'ZH','China',217100 这条数据从数据库中删除掉&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Connect To Database Using Custom Params &lt;/strong&gt; pymysql  database='world', user='root', password='root', host='localhost', port=3306&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Execute Sql String&lt;/strong&gt;  delete from city where NAME='beijing'      &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disconnect From Database               &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223505823-304107352.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;执行结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223539151-668782754.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在sql窗口，查询一下，有没有将数据成功删除掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223610882-1806201734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;从查询的结果看，我们看到数据已经成功的被删除掉了&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.1.5        如何执行数据库脚本文件&lt;/h3&gt;
&lt;p&gt;在做自动化测试时，我们经常需要构造数据或者对库中的数据进行初始化，但是如果我们每次都是将要执行的数据库脚本按条写在用例中，将非常不好维护，因此我们需要直接执行数据库脚本文件，在Databaselibrary库中，可以通过Execute Sql Script关键字来执行数据库脚本文件。&lt;/p&gt;
&lt;p&gt;此处以执行本地F磁盘中的script.sql 为例，在script.sql 脚本中，放入需要执行的语句&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223708008-842085478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect To Database Using Custom Params&lt;/strong&gt;    pymysql  database='world',user='root', password='root', host='localhost', port=3306&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Execute Sql Script&lt;/strong&gt;       f:/script.sql  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disconnect From Database         &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223742938-365579273.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223819526-1440148644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;执行成功后，对数据库进行查询，会发现，脚本已经执行成功，数据已经成功插入&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200756/201803/1200756-20180310223852538-2116419286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3 align=&quot;left&quot;&gt;2.1.6        数据库其他操作关键字&lt;/h3&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;19&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;使用描述&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Check If Exists In Database&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;检查数据库查询是否有返回结果，如果有返回结果，则用例执行成功，否则执行失败，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Check If Exists In Database&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;267&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT * FROM city WHERE NAME='beijing' OR NAME='shanghai'&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Check If Not Exists In Database&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;检查数据库查询是否有返回结果，如果有返回结果，则用例执行失败，否则执行成功，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Check If Not Exists In Database&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;267&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT * FROM city WHERE NAME='beijing' and NAME='shanghai'&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Delete All Rows From Table&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;删除数据库中某张表中的全部数据，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;270&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Delete All Rows From Table&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;132&quot;&gt;
&lt;p&gt;World&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;描述数据库的查询结果，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;@{result}&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT * FROM city WHERE NAME='beijing' or NAME='shanghai'&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;&lt;strong&gt;Log Many&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;@{result}      &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;统计sql查询返回的记录数，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;${rowCount}&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT * FROM city WHERE NAME='beijing' or NAME='shanghai'&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;&lt;strong&gt;Log&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;${rowCount}&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count Is 0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;检查sql查询返回的记录数是否为0，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count Is 0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;269&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT * FROM city WHERE NAME='beijing' or NAME='shanghai'&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count Is Equal To X&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;检查sql查询返回的记录数是否等于某个值，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count Is Equal To X&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT * FROM city WHERE NAME='beijing' or NAME='shanghai'&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count Is Greater Than X&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;检查sql查询返回的记录数是否大于某个值，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count Is Greater Than X&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT * FROM city WHERE NAME='beijing' or NAME='shanghai'&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count Is Less Than X&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;检查sql查询返回的记录数是否小于某个值，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;&lt;strong&gt;Row Count Is Less Than X&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT * FROM city WHERE NAME='beijing' or NAME='shanghai'&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;&lt;strong&gt;Table Must Exist&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;判断数据库中表是否存在，示例：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;134&quot;&gt;
&lt;p&gt;&lt;strong&gt;Table Must Exist&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;269&quot;&gt;
&lt;p&gt;city&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;【原文归作者所有，欢迎转载，但是保留版权,并且转载时，需要注明出处&lt;/strong&gt;】&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 10 Mar 2018 14:41:00 +0000</pubDate>
<dc:creator>老清</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laoqing/p/8542487.html</dc:identifier>
</item>
<item>
<title>Entity Framework 乐观并发处理 - SolidMango</title>
<link>http://www.cnblogs.com/pugang/p/8542393.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pugang/p/8542393.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;Entity Framework 乐观并发处理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      有一段时间没有更新博客了，今天终于有一些时间，和大家讨论一个Entity Framework 乐观并发处理的问题。首先需要说明的是，这里提到的 “并发” 并不是指的多线程处理，也就是笔者这里要讨论的是另外一个问题场景，这个场景描述如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. 系统用户A从数据库中取得一条记录Record-1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. 系统用户B从数据库中取得同一条记录Record-1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. 系统用户B修改记录Record-1，并保存到数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4. 系统用户A修改记录Record-1，并保存到数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个场景里面的问题是系统用户B对数据路记录Record-1的修改被A的修改冲掉了，这种行为在某些业务场景中是正确的，但是在某些场景中可能会有问题，因为这样的场景中A可能希望感知Record-1的变化，并做出相应的代码策略处理。针对这种场景Entity Framework 专门有一种解决方案，Timestamp或者叫Rowersion，具体实现代码如下， 在需要支持乐观并发的model上增加Timestamp字段，字段的名字叫RowVersion，当然对应的数据库表上也要加上这个字段RowVersion，类型是timestamp, 这样在以上描述的场景发生时，系统就会捕获到相应的异常，从而有机会对这种场景进行相应的业务处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果不喜欢Data Annotation，也可以使用 Fluent api 进行标记，具体代码如下，&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
modelBuilder.Entity&amp;lt;Department&amp;gt;().Property(p =&amp;gt; p.RowVersion).IsRowVersion();
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ContosoUniversity.Models
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Department
    {&lt;br/&gt;[ConcurrencyCheck]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DepartmentID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [StringLength(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;, MinimumLength = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [DataType(DataType.Currency)]
        [Column(TypeName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;decimal&lt;/span&gt; Budget { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0:yyyy-MM-dd}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ApplyFormatInEditMode = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
        [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Start Date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime StartDate { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;? InstructorID { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        [Timestamp]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] RowVersion { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; Instructor Administrator { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; ICollection&amp;lt;Course&amp;gt; Courses { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;   try&lt;br/&gt;&lt;/span&gt;&lt;span&gt;   {
          db.Entry(departmentToUpdate).OriginalValues[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RowVersion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; rowVersion;
          &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; db.SaveChangesAsync();
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; RedirectToAction(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
   }
   &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (DbUpdateConcurrencyException ex)
   {
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; entry =&lt;span&gt; ex.Entries.Single();
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; clientValues =&lt;span&gt; (Department)entry.Entity;
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; databaseEntry =&lt;span&gt; entry.GetDatabaseValues();
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (databaseEntry == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
          {
              ModelState.AddModelError(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unable to save changes. The department was deleted by another user.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
          }
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
          {
              &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; databaseValues =&lt;span&gt; (Department)databaseEntry.ToObject();

              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (databaseValues.Name !=&lt;span&gt; clientValues.Name)
              ModelState.AddModelError(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Current value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
               +&lt;span&gt; databaseValues.Name);
               &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (databaseValues.Budget !=&lt;span&gt; clientValues.Budget)
               ModelState.AddModelError(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Budget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Current value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
               + String.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0:c}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, databaseValues.Budget));
               &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (databaseValues.StartDate !=&lt;span&gt; clientValues.StartDate)
                ModelState.AddModelError(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StartDate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Current value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
               + String.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0:d}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, databaseValues.StartDate));
               &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (databaseValues.InstructorID !=&lt;span&gt; clientValues.InstructorID)
               ModelState.AddModelError(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;InstructorID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Current value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                +&lt;span&gt; db.Instructors.Find(databaseValues.InstructorID).FullName);
               ModelState.AddModelError(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;.Empty, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The record you attempted to edit &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                            + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;was modified by another user after you got the original value. The &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                            + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;edit operation was canceled and the current values in the database &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                            + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;have been displayed. If you still want to edit this record, click &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                            + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;the Save button again. Otherwise click the Back to List hyperlink.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
               departmentToUpdate.RowVersion &lt;/span&gt;=&lt;span&gt; databaseValues.RowVersion;
              }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;当然Timestamp字段不是必须单独添加的，也可以使用model上的已有字段，假设这个字段是DepartmentID，我们可以使用ConcurrencyCheck注解进行标记，当然也可是使用Fluent api 进行标记，具体代码如下，&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
modelBuilder.Entity&amp;lt;Person&amp;gt;().Property(p =&amp;gt; p.DepartmentID).IsConcurrencyToken();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文详细描述了一种Entity Framework 乐观并发处理的解决方案，并且通过Data Annotation和Fluent api 两种方式进行了详细的说明，希望对大家有所帮助。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 10 Mar 2018 14:25:00 +0000</pubDate>
<dc:creator>SolidMango</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pugang/p/8542393.html</dc:identifier>
</item>
<item>
<title>你需要了解的高可用方案之使用keepalived搭建双机热备一览 - 一线码农</title>
<link>http://www.cnblogs.com/huangxincheng/p/8542323.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangxincheng/p/8542323.html</guid>
<description>
&lt;p&gt;             在之前一篇使用nginx搭建高可用的解决方案的时候，很多同学会问，如果nginx挂掉怎么办，比如下面这张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/214741/201803/214741-20180310191155674-1355771140.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;            你可以清楚的看到，如果192.168.2.100这台机器挂掉了，那么整个集群就下线了，这个问题该怎么解决呢？？？ 简单的想想确实不大好处理，因为你&lt;/p&gt;
&lt;p&gt;的webBrowser总得要访问一个ip地址，对吧。。这个问题怎么破呢？&lt;/p&gt;

&lt;p&gt;&lt;span&gt;一：问题分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　如果你有一些网络底子的话，就会明白，你给一个不在本网段的机器发送请求的话，这个请求会先经过你的网关IP，然后通过网关IP传给对方的网关IP，然&lt;/p&gt;
&lt;p&gt;后网关IP会将请求转给它所在局域网的主机，当然我的网关IP和对方的网关IP之间可能有很多跳的路由地址，大概的流程就是下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/214741/201803/214741-20180310192540253-1908734773.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果你不信的话，可以用tracert 看看你到www.ctrip.com的路由总过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/214741/201803/214741-20180310193202094-1940070007.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图中可以看到，从我当前主机到ctrip.com一共有20跳，第一条是192.168.2.1，这个就是我的路由器IP，也就是我的网关IP。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二：虚拟路由冗余协议&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　好了，说了这么多有什么用呢？其实大家仔细观察这张图，你会想我能不能在网关IP上做一些手脚呢？ 可喜的是如今的路由器基本上都支持一个叫做&lt;/p&gt;
&lt;p&gt;VRRP（虚拟路由冗余协议），这一协议的作用你可以理解成把网关IP虚拟化成一个网关IP集群，就好像兽族剑圣的镜像技能，这里面有master，也有slave，&lt;/p&gt;
&lt;p&gt;然后局域网内的主机设置的都是虚拟的masterIP（VIP），刚好keepealived就是一个实现VRRP的一款应用程序，你需要，我专业，大家就这样走到一块了。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;三：keepalived搭建一览&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 下载：从官网上找到当前最新的版本1.4.2。http://www.keepalived.org/software/keepalived-1.4.2.tar.gz。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     配置机器： 192.168.23.156 【centos】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　          192.168.23.157 【centos】&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [root@localhost app]# wget http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.keepalived.org/software/keepalived-1.4.2.tar.gz&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; --&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;03&lt;/span&gt;-&lt;span&gt;10&lt;/span&gt; &lt;span&gt;04&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;:&lt;span&gt;06&lt;/span&gt;--  http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.keepalived.org/software/keepalived-1.4.2.tar.gz&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; Resolving www.keepalived.org (www.keepalived.org)... &lt;span&gt;37.59&lt;/span&gt;.&lt;span&gt;63.157&lt;/span&gt;, &lt;span&gt;2001&lt;/span&gt;:41d0:&lt;span&gt;8&lt;/span&gt;:7a9d::&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; Connecting to www.keepalived.org (www.keepalived.org)|&lt;span&gt;37.59&lt;/span&gt;.&lt;span&gt;63.157&lt;/span&gt;|:&lt;span&gt;80&lt;/span&gt;&lt;span&gt;... connected.
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; HTTP request sent, awaiting response... &lt;span&gt;200&lt;/span&gt;&lt;span&gt; OK
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; Length: &lt;span&gt;738096&lt;/span&gt; (721K) [application/x-&lt;span&gt;gzip]
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; Saving to: ‘keepalived-&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.tar.gz’
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;%[==================================================================&amp;gt;] &lt;span&gt;738&lt;/span&gt;,&lt;span&gt;096&lt;/span&gt;     &lt;span&gt;5&lt;/span&gt;.24KB/s   &lt;span&gt;in&lt;/span&gt; 4m 44s 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;2. 然后把相关依赖装起来：yum install -y openssl openssl-devel。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; [root@localhost app]# yum install -y openssl openssl-&lt;span&gt;devel
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;Loaded plugins: fastestmirror, langpacks
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; Could not retrieve mirrorlist http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrorlist.centos.org/?release=7&amp;amp;arch=x86_64&amp;amp;repo=os&amp;amp;infra=stock error was&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;: curl#&lt;span&gt;52&lt;/span&gt; - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Empty reply from server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;                                                                                 | &lt;span&gt;3.6&lt;/span&gt; kB  &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt; epel/x86_64/metalink                                                                 | &lt;span&gt;7.8&lt;/span&gt; kB  &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt; Could not retrieve mirrorlist http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrorlist.centos.org/?release=7&amp;amp;arch=x86_64&amp;amp;repo=extras&amp;amp;infra=stock error was&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;: curl#&lt;span&gt;52&lt;/span&gt; - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Empty reply from server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; extras                                                                               | &lt;span&gt;3.4&lt;/span&gt; kB  &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt; updates                                                                              | &lt;span&gt;3.4&lt;/span&gt; kB  &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;     
&lt;span&gt;11&lt;/span&gt; updates/&lt;span&gt;7&lt;/span&gt;/x86_64/primary_db                                                          | &lt;span&gt;6.9&lt;/span&gt; MB  &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt;:&lt;span&gt;10&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;3. 接下来继续解压，最后安装三板斧： ./configure --prefix=/usr/app/keepalived &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
[root@localhost app]# tar -zxvf keepalived-&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.tar.gz
[root@localhost app]# ls
keepalived&lt;/span&gt;-&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;  keepalived-&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.tar.gz
[root@localhost app]# cd keepalived&lt;/span&gt;-&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
[root@localhost keepalived&lt;/span&gt;-&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]# ls
aclocal.m4  bin_install  configure     COPYING  genhash     keepalived          Makefile.am  README.md
ar&lt;/span&gt;-lib      ChangeLog    configure.ac  depcomp  INSTALL     keepalived.spec.&lt;span&gt;in&lt;/span&gt;  Makefile.&lt;span&gt;in&lt;/span&gt;&lt;span&gt;  snap
AUTHOR      compile      CONTRIBUTORS  doc      install&lt;/span&gt;-&lt;span&gt;sh  lib                 missing      TODO
[root@localhost keepalived&lt;/span&gt;-&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;]#
&lt;/pre&gt;
&lt;p&gt;[root@localhost keepalived-1.4.2]# ./configure --prefix=/usr/app/keepalived &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;安装好了之后，你就会看到如下的内容，那就恭喜你，安装成功了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Keepalived configuration
&lt;/span&gt;------------------------&lt;span&gt;
Keepalived version       : &lt;/span&gt;&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
Compiler                 : gcc
Preprocessor flags       : 
Compiler flags           : &lt;/span&gt;-Wall -Wunused -Wstrict-prototypes -Wextra -g -O2 -fPIE -&lt;span&gt;D_GNU_SOURCE
Linker flags             : &lt;/span&gt;-&lt;span&gt;pie
Extra Lib                :  &lt;/span&gt;-lcrypto  -&lt;span&gt;lssl 
Use IPVS Framework       : Yes
IPVS use libnl           : No
IPVS syncd attributes    : No
IPVS &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;&lt;span&gt; bit stats        : No
fwmark socket support    : Yes
Use VRRP Framework       : Yes
Use VRRP VMAC            : Yes
Use VRRP authentication  : Yes
With ip rules&lt;/span&gt;/&lt;span&gt;routes     : Yes
SNMP vrrp support        : No
SNMP checker support     : No
SNMP RFCv2 support       : No
SNMP RFCv3 support       : No
DBUS support             : No
SHA1 support             : No
Use Debug flags          : No
smtp&lt;/span&gt;-&lt;span&gt;alert debugging     : No
Use Json output          : No
Stacktrace support       : No
Memory alloc check       : No
libnl version            : None
Use IPv4 devconf         : No
Use libiptc              : No
Use libipset             : No
init type                : systemd
Build genhash            : Yes
Build documentation      : No&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;4. 安装好了之后，在/usr/app/keepalived/etc/keepalived目录下有一个keepalived.conf文件，现在你要做的事情&lt;/span&gt;&lt;span&gt;就是&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    将它copy到/etc/keepalived文件夹下&lt;/span&gt;&lt;span&gt;就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;[root@localhost keepalived]# ls
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;keepalived.conf  samples
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;[root@localhost keepalived]# pwd
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; /usr/app/keepalived/etc/&lt;span&gt;keepalived
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; [root@localhost keepalived]# mkdir -p /etc/&lt;span&gt;keepalived
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; [root@localhost keepalived]# cp ./keepalived.conf /etc/keepalived/keepalived.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;5. 接下来我们改一下配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   在192.168.23.156机器中的配置文件，修改如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【原来】&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;&lt;span&gt;
   smtp_connect_timeout &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
   router_id LVS_DEVEL
   vrrp_skip_check_adv_addr
   vrrp_strict
   vrrp_garp_interval &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
   vrrp_gna_interval &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
}

vrrp_instance VI_1 {
    state MASTER
    &lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; eth0
    virtual_router_id &lt;/span&gt;&lt;span&gt;51&lt;/span&gt;&lt;span&gt;
    priority &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
    advert_int &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    authentication {
        auth_type PASS
        auth_pass &lt;/span&gt;&lt;span&gt;1111&lt;/span&gt;&lt;span&gt;
    }
    virtual_ipaddress {
        &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.16&lt;/span&gt;
        &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.17&lt;/span&gt;
        &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.18&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;【修改】&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;&lt;span&gt;
   smtp_connect_timeout &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
   router_id NodeA
   vrrp_skip_check_adv_addr
   vrrp_strict
   vrrp_garp_interval &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
   vrrp_gna_interval &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
}

vrrp_instance VI_1 {
    state MASTER
    &lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;&lt;span&gt; ens33&lt;/span&gt;
    virtual_router_id &lt;/span&gt;&lt;span&gt;51&lt;/span&gt;&lt;span&gt;
    priority 150&lt;/span&gt;&lt;span&gt;
    advert_int &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    authentication {
        auth_type PASS
        auth_pass &lt;/span&gt;&lt;span&gt;1111&lt;/span&gt;&lt;span&gt;
    }
   &lt;span&gt; virtual_ipaddress {
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;192.168.2.200&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    }&lt;/span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中要注意的就是：&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　《1》priority 150&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　 节点的优先级，master要比slave高。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　《2》interface ens33&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　 ens33大家可以通过ipconfig查看一下自己的网卡。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
[root@localhost ~&lt;span&gt;]# ifconfig
br&lt;/span&gt;-11757db6abf5: flags=&lt;span&gt;4099&lt;/span&gt;&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;172.22&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;  broadcast &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:c2:e0:&lt;span&gt;52&lt;/span&gt;:&lt;span&gt;10&lt;/span&gt;  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

br&lt;/span&gt;-875e3c64ec79: flags=&lt;span&gt;4099&lt;/span&gt;&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;172.23&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;  broadcast &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:4e:&lt;span&gt;43&lt;/span&gt;:5b:a0  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

br&lt;/span&gt;-904f2c62861e: flags=&lt;span&gt;4099&lt;/span&gt;&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;172.19&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;  broadcast &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:6d:&lt;span&gt;80&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt;:&lt;span&gt;58&lt;/span&gt;  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

br&lt;/span&gt;-b0028a425959: flags=&lt;span&gt;4099&lt;/span&gt;&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;172.21&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;  broadcast &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;68&lt;/span&gt;:&lt;span&gt;51&lt;/span&gt;:&lt;span&gt;95&lt;/span&gt;:&lt;span&gt;99&lt;/span&gt;  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  bytes &lt;span&gt;1458&lt;/span&gt; (&lt;span&gt;1.4&lt;/span&gt;&lt;span&gt; KiB)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;41&lt;/span&gt;  bytes &lt;span&gt;3920&lt;/span&gt; (&lt;span&gt;3.8&lt;/span&gt;&lt;span&gt; KiB)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

br&lt;/span&gt;-c4a09a75fc67: flags=&lt;span&gt;4099&lt;/span&gt;&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;172.18&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;  broadcast &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;92&lt;/span&gt;:f9:2d:&lt;span&gt;65&lt;/span&gt;  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  bytes &lt;span&gt;340&lt;/span&gt; (&lt;span&gt;340.0&lt;/span&gt;&lt;span&gt; B)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  bytes &lt;span&gt;340&lt;/span&gt; (&lt;span&gt;340.0&lt;/span&gt;&lt;span&gt; B)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

br&lt;/span&gt;-f0fb207788a0: flags=&lt;span&gt;4163&lt;/span&gt;&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;172.20&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;  broadcast &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        inet6 fe80::&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;:86ff:fe1e:c970  prefixlen &lt;span&gt;64&lt;/span&gt;  scopeid &lt;span&gt;0x20&lt;/span&gt;&amp;lt;link&amp;gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:&lt;span&gt;86&lt;/span&gt;:1e:c9:&lt;span&gt;70&lt;/span&gt;  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

docker0: flags&lt;/span&gt;=&lt;span&gt;4099&lt;/span&gt;&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;  broadcast &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;42&lt;/span&gt;:8f:8c:a9:a7  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;&lt;span&gt;

ens33:&lt;/span&gt; flags&lt;/span&gt;=&lt;span&gt;4163&lt;/span&gt;&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;23.157&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;255.0&lt;/span&gt;  broadcast &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;23.255&lt;/span&gt;&lt;span&gt;
        inet6 fe80::20c:29ff:fe54:4f5a  prefixlen &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;  scopeid &lt;span&gt;0x20&lt;/span&gt;&amp;lt;link&amp;gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;00&lt;/span&gt;:0c:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt;:4f:5a  txqueuelen &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;10899&lt;/span&gt;  bytes &lt;span&gt;11349012&lt;/span&gt; (&lt;span&gt;10.8&lt;/span&gt;&lt;span&gt; MiB)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;5575&lt;/span&gt;  bytes &lt;span&gt;599717&lt;/span&gt; (&lt;span&gt;585.6&lt;/span&gt;&lt;span&gt; KiB)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

lo: flags&lt;/span&gt;=&lt;span&gt;73&lt;/span&gt;&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu &lt;span&gt;65536&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;  netmask &lt;span&gt;255.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        inet6 ::&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;  prefixlen &lt;span&gt;128&lt;/span&gt;  scopeid &lt;span&gt;0x10&lt;/span&gt;&amp;lt;host&amp;gt;&lt;span&gt;
        loop  txqueuelen &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Local Loopback)
        RX packets &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  bytes &lt;span&gt;340&lt;/span&gt; (&lt;span&gt;340.0&lt;/span&gt;&lt;span&gt; B)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  bytes &lt;span&gt;340&lt;/span&gt; (&lt;span&gt;340.0&lt;/span&gt;&lt;span&gt; B)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

veth4d72ad4: flags&lt;/span&gt;=&lt;span&gt;4163&lt;/span&gt;&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet6 fe80::d4fb:fcff:feeb:cd7c  prefixlen &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;  scopeid &lt;span&gt;0x20&lt;/span&gt;&amp;lt;link&amp;gt;&lt;span&gt;
        ether d6:fb:fc:eb:cd:7c  txqueuelen &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  bytes &lt;span&gt;1248&lt;/span&gt; (&lt;span&gt;1.2&lt;/span&gt;&lt;span&gt; KiB)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;43&lt;/span&gt;  bytes &lt;span&gt;4130&lt;/span&gt; (&lt;span&gt;4.0&lt;/span&gt;&lt;span&gt; KiB)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

vethe634b1c: flags&lt;/span&gt;=&lt;span&gt;4163&lt;/span&gt;&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet6 fe80::e0c6:88ff:fe1c:f4a1  prefixlen &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;  scopeid &lt;span&gt;0x20&lt;/span&gt;&amp;lt;link&amp;gt;&lt;span&gt;
        ether e2:c6:&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;:1c:f4:a1  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  bytes &lt;span&gt;1458&lt;/span&gt; (&lt;span&gt;1.4&lt;/span&gt;&lt;span&gt; KiB)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;41&lt;/span&gt;  bytes &lt;span&gt;3920&lt;/span&gt; (&lt;span&gt;3.8&lt;/span&gt;&lt;span&gt; KiB)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

virbr0: flags&lt;/span&gt;=&lt;span&gt;4099&lt;/span&gt;&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu &lt;span&gt;1500&lt;/span&gt;&lt;span&gt;
        inet &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;122.1&lt;/span&gt;  netmask &lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;255.0&lt;/span&gt;  broadcast &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;122.255&lt;/span&gt;&lt;span&gt;
        ether &lt;/span&gt;&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;  txqueuelen &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  (Ethernet)
        RX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        RX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt;  overruns &lt;span&gt;0&lt;/span&gt;  frame &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
        TX packets &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  bytes &lt;span&gt;0&lt;/span&gt; (&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt; B)
        TX errors &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  dropped &lt;span&gt;0&lt;/span&gt; overruns &lt;span&gt;0&lt;/span&gt;  carrier &lt;span&gt;0&lt;/span&gt;  collisions &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

[root@localhost &lt;/span&gt;~]# 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;    &lt;span&gt;《3》virtual_ipaddress 192.168.23.200&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;            设置好虚拟IP（VIP）为：192.168.23.200&lt;/p&gt;
&lt;p&gt;同样的道理，在192.168.23.157设置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   } 
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;200.1&lt;/span&gt;&lt;span&gt;
   smtp_connect_timeout &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;&lt;span&gt;
   router_id NodeB&lt;/span&gt;
   vrrp_skip_check_adv_addr
   vrrp_strict
   vrrp_garp_interval &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
   vrrp_gna_interval &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
}  

vrrp_instance VI_1 {
    &lt;span&gt;state BACKUP
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;&lt;span&gt; ens33&lt;/span&gt;
    virtual_router_id &lt;/span&gt;&lt;span&gt;51&lt;/span&gt;&lt;span&gt;
    priority &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
    advert_int &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    authentication {
        auth_type PASS
        auth_pass &lt;/span&gt;&lt;span&gt;1111&lt;/span&gt;&lt;span&gt;
    }   
&lt;span&gt;    virtual_ipaddress {
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;192.168.23.200&lt;/span&gt;&lt;span&gt;&lt;span&gt;
    }  &lt;/span&gt; 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;7. 接下来就可以启动keepalived了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@localhost sbin]# ./keepalived -&lt;span&gt;D
[root@localhost sbin]# ps &lt;/span&gt;-ef |&lt;span&gt; grep keepalived
root       &lt;/span&gt;&lt;span&gt;4661&lt;/span&gt;      &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;05&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt; ?        &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; ./keepalived -&lt;span&gt;D
root       &lt;/span&gt;&lt;span&gt;4662&lt;/span&gt;   &lt;span&gt;4661&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;05&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt; ?        &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; ./keepalived -&lt;span&gt;D
root       &lt;/span&gt;&lt;span&gt;4663&lt;/span&gt;   &lt;span&gt;4661&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;05&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt; ?        &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; ./keepalived -&lt;span&gt;D
root       &lt;/span&gt;&lt;span&gt;4673&lt;/span&gt;   &lt;span&gt;4300&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;05&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt; pts/&lt;span&gt;0&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; grep --color=auto keepalived
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;五：检测&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 通过ip a  看看当前ens33网卡上是否绑定了192.168.23.200虚拟IP。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/214741/201803/214741-20180310214557677-1853406483.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2. 然后通过arp -a 查看当前的vip映射到的物理(mac)地址，可以看到当前的vip映射到的是192.168.23.156上面。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
C:\Users\hxc&amp;gt;arp -&lt;span&gt;a

接口: &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;23.1&lt;/span&gt; --- &lt;span&gt;0x6&lt;/span&gt;&lt;span&gt;
  Internet 地址         物理地址              类型
  &lt;/span&gt;&lt;span&gt;192.168.23.156        00-0c-29-75-7e-20     动态
  &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;23.157&lt;/span&gt;        &lt;span&gt;00&lt;/span&gt;-0c-&lt;span&gt;29&lt;/span&gt;-&lt;span&gt;54&lt;/span&gt;-4f-&lt;span&gt;5a     动态
  &lt;/span&gt;&lt;span&gt;192.168.23.200        00-0c-29-75-7e-20     动态
  &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;23.255&lt;/span&gt;        ff-ff-ff-ff-ff-&lt;span&gt;ff     静态
  &lt;/span&gt;&lt;span&gt;224.0&lt;/span&gt;.&lt;span&gt;0.22&lt;/span&gt;            &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-5e-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;16&lt;/span&gt;&lt;span&gt;     静态
  &lt;/span&gt;&lt;span&gt;224.0&lt;/span&gt;.&lt;span&gt;0.251&lt;/span&gt;           &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-5e-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;fb     静态
  &lt;/span&gt;&lt;span&gt;224.0&lt;/span&gt;.&lt;span&gt;0.252&lt;/span&gt;           &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-5e-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;fc     静态
  &lt;/span&gt;&lt;span&gt;239.11&lt;/span&gt;.&lt;span&gt;20.1&lt;/span&gt;           &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-5e-0b-&lt;span&gt;14&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt;&lt;span&gt;     静态
  &lt;/span&gt;&lt;span&gt;239.255&lt;/span&gt;.&lt;span&gt;255.250&lt;/span&gt;       &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;5e-7f&lt;/span&gt;-ff-&lt;span&gt;fa     静态
  &lt;/span&gt;&lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;255.255&lt;/span&gt;       ff-ff-ff-ff-ff-ff     静态
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;  3. 然后我们把156这台机器关闭了，可以看到当前的vip已经漂移到了157这台机器上了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
C:\Users\hxc&amp;gt;arp -&lt;span&gt;a

接口: &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;23.1&lt;/span&gt; --- &lt;span&gt;0x6&lt;/span&gt;&lt;span&gt;
  Internet 地址         物理地址              类型
  &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;23.156&lt;/span&gt;        &lt;span&gt;00&lt;/span&gt;-0c-&lt;span&gt;29&lt;/span&gt;-&lt;span&gt;75&lt;/span&gt;-7e-&lt;span&gt;20&lt;/span&gt;&lt;span&gt;     动态
  &lt;/span&gt;&lt;span&gt;192.168.23.157        00-0c-29-54-4f-5a     动态
  192.168.23.200        00-0c-29-54-4f-5a     动态
  &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;23.255&lt;/span&gt;        ff-ff-ff-ff-ff-&lt;span&gt;ff     静态
  &lt;/span&gt;&lt;span&gt;224.0&lt;/span&gt;.&lt;span&gt;0.22&lt;/span&gt;            &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-5e-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;16&lt;/span&gt;&lt;span&gt;     静态
  &lt;/span&gt;&lt;span&gt;224.0&lt;/span&gt;.&lt;span&gt;0.251&lt;/span&gt;           &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-5e-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;fb     静态
  &lt;/span&gt;&lt;span&gt;224.0&lt;/span&gt;.&lt;span&gt;0.252&lt;/span&gt;           &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-5e-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;fc     静态
  &lt;/span&gt;&lt;span&gt;239.11&lt;/span&gt;.&lt;span&gt;20.1&lt;/span&gt;           &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-5e-0b-&lt;span&gt;14&lt;/span&gt;-&lt;span&gt;01&lt;/span&gt;&lt;span&gt;     静态
  &lt;/span&gt;&lt;span&gt;239.255&lt;/span&gt;.&lt;span&gt;255.250&lt;/span&gt;       &lt;span&gt;01&lt;/span&gt;-&lt;span&gt;00&lt;/span&gt;-&lt;span&gt;5e-7f&lt;/span&gt;-ff-&lt;span&gt;fa     静态
  &lt;/span&gt;&lt;span&gt;255.255&lt;/span&gt;.&lt;span&gt;255.255&lt;/span&gt;       ff-ff-ff-ff-ff-ff     静态
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;      好了，这个就是本篇所说的所有内容，希望对您有帮助。&lt;/p&gt;

</description>
<pubDate>Sat, 10 Mar 2018 14:04:00 +0000</pubDate>
<dc:creator>一线码农</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangxincheng/p/8542323.html</dc:identifier>
</item>
</channel>
</rss>