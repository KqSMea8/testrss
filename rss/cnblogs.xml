<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>小试牛刀之Django - 菜鸟小于</title>
<link>http://www.cnblogs.com/Young111/p/9719150.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Young111/p/9719150.html</guid>
<description>&lt;p&gt;Python的WEB框架有Django、Tornado、Flask 等多种，Django相较与其他WEB框架其优势为：大而全，框架本身集成了ORM、模型绑定、模板引擎、缓存、Session等诸多功能。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;基本配置&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、创建django程序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;终端命令：django-admin startproject sitename&lt;/li&gt;
&lt;li&gt;IDE创建Django程序时，本质上都是自动执行上述命令&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其他常用的命令:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;python manage.py runserver 8080  启动&lt;/li&gt;
&lt;li&gt;python manage.py startapp appname  创建app&lt;/li&gt;
&lt;li&gt;python manage.py syncbd&lt;/li&gt;
&lt;li&gt;python manage.py makemigrations 创建表格&lt;/li&gt;
&lt;li&gt;python manage.py migrate&lt;/li&gt;
&lt;li&gt;python manage.py create superuser 创建后台管理员&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、程序目录&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1408728/201809/1408728-20180928152536844-781200598.png&quot; alt=&quot;&quot; width=&quot;217&quot; height=&quot;246&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、配置文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;settings.py中&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1.数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
DATABASES =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENGINE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.db.backends.mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dbname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;USER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PASSWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;HOST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PORT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_363894b1-7f46-4aae-93c6-49efea0e76cf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_363894b1-7f46-4aae-93c6-49efea0e76cf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_363894b1-7f46-4aae-93c6-49efea0e76cf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 由于Django内部连接MySQL时使用的是MySQLdb模块，而python3中还无此模块，所以需要使用pymysql来代替&lt;/span&gt;
  
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如下设置放置的与project同名的配置的 __init__.py文件中&lt;/span&gt;
  
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
pymysql.install_as_MySQLdb()　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2.模版&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
TEMPLATE_DIRS =&lt;span&gt; (
        os.path.join(BASE_DIR,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;templates&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.静态文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
STATICFILES_DIRS =&lt;span&gt; (
        os.path.join(BASE_DIR,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;路由系统&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1.单一路由对应&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^index$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.index),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.基于正则的路由&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^index/(\d*)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, views.index),
url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^manage/(?P&amp;lt;name&amp;gt;\w*)/(?P&amp;lt;id&amp;gt;\d*)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.manage),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.添加额外的参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^manage/(?P&amp;lt;name&amp;gt;\w*)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.manage,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:333}),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.为路由映射设置名称&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.home, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^index/(\d*)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.index, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置名称之后，可以在不同的地方调用，如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;模板中使用生成URL     {% url 'h2' 2012 %}&lt;/li&gt;
&lt;li&gt;函数中使用生成URL     reverse('h2', args=(2012,))      路径:django.urls.reverse&lt;/li&gt;
&lt;li&gt;Model中使用获取URL  自定义get_absolute_url() 方法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_8918a119-f73a-4633-b463-4054b860e28a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8918a119-f73a-4633-b463-4054b860e28a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8918a119-f73a-4633-b463-4054b860e28a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; NewType(models.Model):
    caption &lt;/span&gt;= models.CharField(max_length=16&lt;span&gt;)


    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_absolute_url(self):
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
        为每个对象生成一个URL
        应用：在对象列表中生成查看详细的URL，使用此方法即可！！！
        :return:
        &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return '/%s/%s' % (self._meta.db_table, self.id)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 或&lt;/span&gt;
        &lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; reverse
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; reverse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NewType.Detail&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, kwargs={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: self.id})
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;获取请求匹配成功的URL信息：request.resolver_match&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;5.根据app对路由规则进行分类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^web/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;web.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.命名空间&lt;/p&gt;
&lt;p&gt;a. project.urls.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url,include
 
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^a/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app01.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, namespace=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;author-polls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^b/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app01.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, namespace=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;publisher-polls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b. app01.urls.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.conf.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; url
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; app01 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views
 
app_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;app01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    url(r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^(?P&amp;lt;pk&amp;gt;\d+)/$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, views.detail, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;detail&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;c. app01.views.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; detail(request, pk):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(request.resolver_match)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(pk)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上定义带命名空间的url之后，使用name生成URL时候，应该如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;v = reverse('app01:detail', kwargs={'pk':11})&lt;/li&gt;
&lt;li&gt;{% url 'app01:detail' pk=12 pp=99 %}&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;django中的路由系统和其他语言的框架有所不同，在django中每一个请求的url都要有一条路由映射，这样才能将请求交给对一个的view中的函数去处理。其他大部分的Web框架则是对一类的url请求做一条路由映射，从而是路由系统变得简洁。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;路由系统&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、模版的执行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;模版的创建过程，对于模版，其实就是读取模版（其中嵌套着模版标签），然后将 Model 中获取的数据插入到模版中，最后将信息返回给用户。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_17ebbb88-63c2-4864-9426-b1f2b9498ff5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_17ebbb88-63c2-4864-9426-b1f2b9498ff5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_17ebbb88-63c2-4864-9426-b1f2b9498ff5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; current_datetime(request):
    now &lt;/span&gt;=&lt;span&gt; datetime.datetime.now()
    html &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;It is now %s.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; now
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_6585b291-2295-4c4a-8ce5-7d0ea397c5c5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6585b291-2295-4c4a-8ce5-7d0ea397c5c5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6585b291-2295-4c4a-8ce5-7d0ea397c5c5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; template
t &lt;/span&gt;= template.Template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;My name is {{ name }}.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
c &lt;/span&gt;= template.Context({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Adrian&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(t.render(c))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_c4fedce9-7b84-4c98-ab80-bd60508d881c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c4fedce9-7b84-4c98-ab80-bd60508d881c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c4fedce9-7b84-4c98-ab80-bd60508d881c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; template
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; DjangoDemo.settings
 
now &lt;/span&gt;=&lt;span&gt; datetime.datetime.now()
fp &lt;/span&gt;= open(settings.BASE_DIR+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/templates/Home/Index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
t &lt;/span&gt;=&lt;span&gt; template.Template(fp.read())
fp.close()
html &lt;/span&gt;= t.render(template.Context({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: now}))
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3228dcfb-fd7a-425a-95f7-d5145c8dc5cf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3228dcfb-fd7a-425a-95f7-d5145c8dc5cf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3228dcfb-fd7a-425a-95f7-d5145c8dc5cf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.template.loader &lt;span&gt;import&lt;/span&gt;&lt;span&gt; get_template
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.template &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Context
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HttpResponse
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
 
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; current_datetime(request):
    now &lt;/span&gt;=&lt;span&gt; datetime.datetime.now()
    t &lt;/span&gt;= get_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_datetime.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    html &lt;/span&gt;= t.render(Context({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: now}))
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_2bac9c7e-a675-45bd-a4c1-6e5b434863ce&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2bac9c7e-a675-45bd-a4c1-6e5b434863ce&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2bac9c7e-a675-45bd-a4c1-6e5b434863ce&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt; render_to_response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Account/Login.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,data,context_instance=RequestContext(request))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;2、模版的语言&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;模板中也有自己的语言，该语言可以实现数据展示&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;{{ item }}&lt;/li&gt;
&lt;li&gt;{% for item in item_list %}  &amp;lt;a&amp;gt;{{ item }}&amp;lt;/a&amp;gt;  {% endfor %}&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　forloop.counter&lt;br/&gt;　　forloop.first&lt;br/&gt;　　forloop.last &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;{% if ordered_warranty %}  {% else %} {% endif %}&lt;/li&gt;
&lt;li&gt;母板：{% block title %}{% endblock %}&lt;/li&gt;
&lt;li&gt;子板：{% extends &quot;base.html&quot; %}&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　{% block title %}{% endblock %}&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;帮助方法：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;{{ item.event_start|date:&quot;Y-m-d H:i:s&quot;}}&lt;br/&gt;{{ bio|truncatewords:&quot;30&quot; }}&lt;br/&gt;{{ my_list|first|upper }}&lt;br/&gt;{{ name|lower }}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、自定义simple_tag&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;a、在app中创建templatetags模块&lt;/p&gt;
&lt;p&gt;b、创建任意 .py 文件，如：xx.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_7e93b2ae-4e45-45ee-99f8-98cf25fc84ce&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7e93b2ae-4e45-45ee-99f8-98cf25fc84ce&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7e93b2ae-4e45-45ee-99f8-98cf25fc84ce&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;coding:utf-8&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; template
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.utils.safestring &lt;span&gt;import&lt;/span&gt;&lt;span&gt; mark_safe
   
register &lt;/span&gt;=&lt;span&gt; template.Library()
   
@register.simple_tag
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; my_simple_time(v1,v2,v3):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;  v1 + v2 +&lt;span&gt; v3
   
@register.simple_tag
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; my_input(id,arg):
    result &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;input type='text' id='%s' class='%s' /&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(id,arg,)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; mark_safe(result)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;c、在使用自定义simple_tag的html文件中导入之前创建的 xx.py 文件名&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
{% load xx %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;d、使用simple_tag&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{% my_simple_time 1 2 3%&lt;span&gt;}
{&lt;/span&gt;% my_input &lt;span&gt;'&lt;/span&gt;&lt;span&gt;id_username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hide&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e、在settings中配置当前app，不然django无法找到自定义的simple_tag&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
INSTALLED_APPS =&lt;span&gt; (
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.contenttypes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.sessions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.messages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.staticfiles&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;中间件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;django 中的中间件（middleware），在django中，中间件其实就是一个类，在请求到来和结束后，django会根据自己的规则在合适的时机执行中间件中相应的方法。&lt;/p&gt;
&lt;p&gt;在django项目的settings模块中，有一个 MIDDLEWARE_CLASSES 变量，其中每一个元素就是一个中间件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
MIDDLEWARE_CLASSES =&lt;span&gt; (
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.sessions.middleware.SessionMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.middleware.common.CommonMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.middleware.csrf.CsrfViewMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth.middleware.SessionAuthenticationMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.messages.middleware.MessageMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.middleware.clickjacking.XFrameOptionsMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.middleware.security.SecurityMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;中间件中可以定义四个方法，分别是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;process_request(self,request)&lt;/li&gt;
&lt;li&gt;process_view(self, request, callback, callback_args, callback_kwargs)&lt;/li&gt;
&lt;li&gt;process_template_response(self,request,response)&lt;/li&gt;
&lt;li&gt;process_exception(self, request, exception)&lt;/li&gt;
&lt;li&gt;process_response(self, request, response)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上方法的返回值可以是None和HttpResonse对象，如果是None，则继续按照django定义的规则向下执行，如果是HttpResonse对象，则直接将该对象返回给用户。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;django amdin是django提供的一个后台管理页面，改管理页面提供完善的html和css，使得你在通过Model创建完数据库表之后，就可以对数据进行增删改查，而使用django admin 则需要以下步骤：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建后台管理员&lt;/li&gt;
&lt;li&gt;配置url&lt;/li&gt;
&lt;li&gt;注册和配置django admin后台管理页面&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;1、创建后台管理员&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
python manage.py createsuperuser
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、配置后台管理url&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
url(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^admin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, admin.site.urls),
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3、注册和配置django admin 后台管理页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;a、在admin中执行如下配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_6f1ad718-915c-452d-8747-00fbfa28dc7c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6f1ad718-915c-452d-8747-00fbfa28dc7c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6f1ad718-915c-452d-8747-00fbfa28dc7c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin
  
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; app01 &lt;span&gt;import&lt;/span&gt;&lt;span&gt;  models
  
admin.site.register(models.UserType)
admin.site.register(models.UserInfo)
admin.site.register(models.UserGroup)
admin.site.register(models.Asset)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;b、设置数据表名称&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_cc9171e5-0e38-4f22-bed6-f5361ca76e18&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cc9171e5-0e38-4f22-bed6-f5361ca76e18&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cc9171e5-0e38-4f22-bed6-f5361ca76e18&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserType(models.Model):
    name &lt;/span&gt;= models.CharField(max_length=50&lt;span&gt;)
  
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户类型&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户类型&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;c、打开表之后，设定默认显示，需要在model中作如下配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_24dae214-9cd6-4d9e-90ad-f6e3ba5096db&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_24dae214-9cd6-4d9e-90ad-f6e3ba5096db&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_24dae214-9cd6-4d9e-90ad-f6e3ba5096db&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserType(models.Model):
    name &lt;/span&gt;= models.CharField(max_length=50&lt;span&gt;)
  
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.name
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_69fd4d8f-c202-4a6b-810d-e56c2eb7ffe9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_69fd4d8f-c202-4a6b-810d-e56c2eb7ffe9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_69fd4d8f-c202-4a6b-810d-e56c2eb7ffe9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin
  
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; app01 &lt;span&gt;import&lt;/span&gt;&lt;span&gt;  models
  
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfoAdmin(admin.ModelAdmin):
    list_display &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  
  
admin.site.register(models.UserType)
admin.site.register(models.UserInfo,UserInfoAdmin)
admin.site.register(models.UserGroup)
admin.site.register(models.Asset)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;d、为数据表添加搜索功能&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_5d4e5efe-9a1c-4fe2-9f4c-8ddf1273489d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5d4e5efe-9a1c-4fe2-9f4c-8ddf1273489d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5d4e5efe-9a1c-4fe2-9f4c-8ddf1273489d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin
  
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; app01 &lt;span&gt;import&lt;/span&gt;&lt;span&gt;  models
  
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfoAdmin(admin.ModelAdmin):
    list_display &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    search_fields &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  
admin.site.register(models.UserType)
admin.site.register(models.UserInfo,UserInfoAdmin)
admin.site.register(models.UserGroup)
admin.site.register(models.Asset)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;e、添加快速过滤&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_380278be-21d7-4a94-a5eb-4fd37653cf69&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_380278be-21d7-4a94-a5eb-4fd37653cf69&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_380278be-21d7-4a94-a5eb-4fd37653cf69&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin
  
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; app01 &lt;span&gt;import&lt;/span&gt;&lt;span&gt;  models
  
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfoAdmin(admin.ModelAdmin):
    list_display &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    search_fields &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    list_filter &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
      
  
  
admin.site.register(models.UserType)
admin.site.register(models.UserInfo,UserInfoAdmin)
admin.site.register(models.UserGroup)
admin.site.register(models.Asset)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 28 Sep 2018 07:56:00 +0000</pubDate>
<dc:creator>菜鸟小于</dc:creator>
<og:description>Python的WEB框架有Django、Tornado、Flask 等多种，Django相较与其他WEB框架其优势为：大而全，框架本身集成了ORM、模型绑定、模板引擎、缓存、Session等诸多功能。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Young111/p/9719150.html</dc:identifier>
</item>
<item>
<title>自然数到底可以表示到多大? - 窗户</title>
<link>http://www.cnblogs.com/Colin-Cai/p/9683271.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Colin-Cai/p/9683271.html</guid>
<description>&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
　　版权申明：本文为博主窗户(Colin Cai)原创，欢迎转帖。如要转贴，必须注明原文网址

　　http://www.cnblogs.com/Colin-Cai/p/9683271.html 

　　作者：窗户

　　QQ/微信：6679072

　　E-mail：6679072@qq.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从很小我们 就知道，自然数有无限多个。&lt;/p&gt;
&lt;p&gt;　　小朋友都对巨大的数有一种天然的憧憬，以至于很多人都会想过这么一个问题，我们可以表示出多大的数？&lt;/p&gt;
&lt;p&gt;　　小的时候，我就幻想着，我拿着一支笔，然后不断的写9，然后所写的这个数就可以非常非常大了。长大一点才知道，这个根本不算什么，随便一个乘方就把它秒杀了。&lt;/p&gt;
&lt;p&gt;　　以下我们来看看递归的神奇。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;Ackermann函数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　我想几乎每个正统学习计算机的同学都见过Ackermann函数，&lt;/p&gt;
&lt;p&gt;　　Ackermann函数带两个参数，两个参数都是非负整数。&lt;/p&gt;
&lt;p&gt;　　其定义如下：&lt;/p&gt;
&lt;p&gt;　　对于Ackermann(m,n)，&lt;/p&gt;
&lt;p&gt;　　(1) 如果m=0，则函数值为n+1&lt;/p&gt;
&lt;p&gt;　　(2) 如果m&amp;gt;0且n=0,则函数值同Ackermann(m-1,1)&lt;/p&gt;
&lt;p&gt;　　(3) 如果函数m&amp;gt;0且n&amp;gt;0，则函数值同Ackermann(m-1, Ackermann(m, n-1))&lt;/p&gt;
&lt;p&gt;　　这个函数很恐怖，Ackermann(4,0)=13，Ackermann(4,1)=65533, Ackermann(4,2)有 &lt;strong&gt;&lt;span&gt;19729 &lt;/span&gt;&lt;/strong&gt;位，Ackermann(4,3)天知道……&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1151747/201809/1151747-20180928155104640-2092702375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;运算符号的演化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　我们最先学会的运算符号是加法，很快我就学会了相同的数连加。&lt;/p&gt;
&lt;p&gt;　　8个2相加，写起来如下&lt;/p&gt;
&lt;p&gt;　　2+2+2+2+2+2+2+2&lt;/p&gt;

&lt;p&gt;　　显然，连加的写法过于累赘，于是我们又学习了乘法，上述的式子可以写成&lt;/p&gt;
&lt;p&gt;　　2×8&lt;/p&gt;
&lt;p&gt;　　于是顿时简洁了很多。&lt;/p&gt;
&lt;p&gt;　　注：根据不同理解，也有表示为8×2&lt;/p&gt;

&lt;p&gt;　　自然而然，我们想到了连乘，它可以表达挺大的数了。&lt;/p&gt;
&lt;p&gt;　　8个2相乘，写起来如下&lt;/p&gt;
&lt;p&gt;　　2×2×2×2×2×2×2×2&lt;/p&gt;
&lt;p&gt;　　于是有了乘方来简化，上述表示为2&lt;sup&gt;8&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;　　有了乘方，终于有了第一个大杀器。我们可以连着写乘方，以乘方的结果作为后面乘方的指数，如同连加、连乘那样，比如&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1151747/201809/1151747-20180928135743030-1636852971.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　它运算的结合是从上往下结合，这个数是很夸张的大，这个宇宙不够存储它的十进制下每一位。&lt;/p&gt;


&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;高德纳箭头&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　提起高德纳Knuth，应该计算机界的人都知道吧，我也不用多介绍了。&lt;/p&gt;
&lt;p&gt;　　他以连加、连乘、连乘方为思路基础，提出了高德纳箭头这样的&lt;strong&gt;&lt;span&gt;运算符&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;　　a↑b = a&lt;sup&gt;b&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;　　a↑↑b = a↑a...↑a 　　(一共有b个a)&lt;/p&gt;
&lt;p&gt;　　a↑↑↑b = a↑↑a...↑↑a　　(一共有b个a)&lt;/p&gt;
&lt;p&gt; 　　...&lt;/p&gt;
&lt;p&gt;　　a ↑&lt;sup&gt;n &lt;/sup&gt;b = a ↑&lt;sup&gt;n-1 &lt;/sup&gt;a ... ↑&lt;sup&gt;n-1 &lt;/sup&gt;a　　(一共b个a)&lt;/p&gt;
&lt;p&gt;　　↑&lt;sup&gt;n &lt;/sup&gt;我这里表示为n个箭头。&lt;sup&gt;&lt;br/&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;　　之前提到的&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1151747/201809/1151747-20180928135743030-1636852971.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　用高德纳箭头表示应该是2↑↑6&lt;/p&gt;
&lt;p&gt;　　这个数箭头只有2个，前后数字都很小，但是已经非常可怕的大了。&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;葛立恒数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　这是曾经出现在数学证明中最大的自然数，不过后面被另外一个数学证明中的TREE(3)刷新纪录。这两个数都与图的染色有关，此处不深入。&lt;/p&gt;

&lt;p&gt;　　葛立恒数是如下表示的：&lt;/p&gt;
&lt;p&gt;　　g(0) = 4&lt;/p&gt;
&lt;p&gt;　　g(1) =  3 ↑&lt;sup&gt;g(0) &lt;/sup&gt;3&lt;/p&gt;
&lt;p&gt;　　g(2) =  3 ↑&lt;sup&gt;g(1) &lt;/sup&gt;3&lt;/p&gt;
&lt;p&gt;　　...&lt;/p&gt;
&lt;p&gt;　　g(64) = 3 ↑&lt;sup&gt;g(63) &lt;/sup&gt;3&lt;/p&gt;
&lt;p&gt;　　g(64)就是葛立恒数，这个数是夸张的大，别说数本身，就连它的箭头的个数g(63)，人们也无法理解它的大小。&lt;/p&gt;
&lt;p&gt;　　其实就连g(1)，人们已经无法理解其大小，甚至理解不了g(1)的大小的大小的大小的......大小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1151747/201809/1151747-20180928153812684-612036637.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;Scheme来表示高德纳箭头&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　因为高德纳箭头的高阶箭头有个很简单的往低阶箭头上展开的关系，所以用Scheme很容易表示，毕竟Lisp是很容易表示递归的。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;(define (knuth n m cnt_arrow)
 (define (knuth&lt;/span&gt;-&lt;span&gt;list lst cnt_arrow)
  (cond
   ((&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;?&lt;span&gt; (cdr lst)) (car lst))
   ((&lt;/span&gt;= &lt;span&gt;1&lt;/span&gt; cnt_arrow) (knuth-list (cons (expt (cadr lst) (car lst)) (cddr lst)) &lt;span&gt;1&lt;/span&gt;&lt;span&gt;))
   (&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; (knuth-list (cons (knuth-list (make-list (car lst) (cadr lst)) (- cnt_arrow &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)) (cddr lst)) cnt_arrow))
  )
 )
 (knuth&lt;/span&gt;-&lt;span&gt;list (list m n) cnt_arrow)
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　当然，上面只是表示出了其递归关系，在现有宇宙下计算不出来^_^比如之前那6个2我们肯定就算不出来，但是5个2也就是2↑↑5我们还是有希望的。&lt;/p&gt;
&lt;p&gt;　　(knuth 2 5 2)计算结果就不贴了，是一个 &lt;strong&gt;&lt;span&gt;19729 &lt;/span&gt;&lt;/strong&gt;位的数，其实等于Ackermann(4,3)+3。&lt;/p&gt;

&lt;p&gt;　　而之前葛立恒数虽然根本算不出来，但用Scheme表示还是很容易的。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;(define Graham-Number
 (define (g n)
  (&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (zero? n) &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
   (knuth &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; (g (- n &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)))
  )
 )
 (g &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;&lt;span&gt;)
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;康威链式箭头&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　Conway，著名的生命游戏的提出者，英国数学家。&lt;/p&gt;
&lt;p&gt;　　他发明的康威链式箭头是个比高德纳箭头还恐怖的东西。&lt;/p&gt;
&lt;p&gt;　　所谓链式箭头，是一串用箭头串在一起的&lt;strong&gt;&lt;span&gt;正整数&lt;/span&gt;&lt;/strong&gt;，比如&lt;/p&gt;
&lt;p&gt;　　3-&amp;gt;5&lt;/p&gt;
&lt;p&gt;　　2-&amp;gt;3-&amp;gt;2&lt;/p&gt;
&lt;p&gt;　　3-&amp;gt;4-&amp;gt;5-&amp;gt;6&lt;/p&gt;
&lt;p&gt;　　当然，只有一个数也算，那么值就是数本身。链长至少为1。&lt;/p&gt;
&lt;p&gt;　　另外，康威链式箭头和高德纳箭头不一样，高德纳箭头是运算符，康威链式箭头只是用来连接一个序列。&lt;/p&gt;

&lt;p&gt;　　康威链式箭头怎么计算呢？&lt;/p&gt;
&lt;p&gt;　　它一共有5条规则，&lt;/p&gt;
&lt;p&gt;　　(1) 如果链里面只有一个数a，那么值就是a本身&lt;/p&gt;
&lt;p&gt;　　(2) 如果链里面有两个数，a-&amp;gt;b，那么值为a&lt;sup&gt;b&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;　　(3) 如果链长超过2，链形如X-&amp;gt;a-&amp;gt;1，其中X是一条链，那么原链就等于X-&amp;gt;a，也就是链长减1&lt;/p&gt;
&lt;p&gt;　　(4) 如果链长超过2，链形如X-&amp;gt;1-&amp;gt;(a+1)，其中X是一条链，a是正整数（也就是最后一个数大于1，其实等于1也满足，只是同时满足两条规则），原链值同链X&lt;/p&gt;
&lt;p&gt;　　(5) 如果链长超过2，链形如X-&amp;gt;(a+1)-&amp;gt;(b+1)，其中X是一条链，a、b是正整数（也就是链尾的两个数都大于1），原链值同X-&amp;gt;(X-&amp;gt;a-&amp;gt;(b+1))-&amp;gt;a&lt;/p&gt;

&lt;p&gt;　　以上5条规则构造出了比高德纳箭头更疯狂的东西。&lt;/p&gt;
&lt;p&gt;　　疯狂在哪里呢？之前的葛立恒数g(64)已经很大了，可是以下不等式成立&lt;/p&gt;
&lt;p&gt;　　3-&amp;gt;3-&amp;gt;64-&amp;gt;2 &amp;lt; g(64) &amp;lt; 3-&amp;gt;3-&amp;gt;65-&amp;gt;2&lt;/p&gt;
&lt;p&gt;　　3-&amp;gt;3-&amp;gt;65-&amp;gt;2 &amp;lt; 3-&amp;gt;3-&amp;gt;3-&amp;gt;3&lt;/p&gt;
&lt;p&gt;　　简单的4个3，&lt;strong&gt;&lt;span&gt;秒天秒地&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　以上递归很明显，很工整，用Scheme一样表示，链式箭头的序列就用Scheme里的list直接就可以表示了：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;(define (conway lst)
 (define (conway_rev lst)
  (cond
   ((&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;?&lt;span&gt; (cdr lst)) (car lst)) ;规则1
   ((&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;?&lt;span&gt; (cddr lst)) (expt (cadr lst) (car lst))) ;规则2
   ((&lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt; (car lst)) (conway_rev (cdr lst))) ；规则3
   ((&lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt; (cadr lst)) (conway_rev (cddr lst))) ;规则4
   (&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; (conway_rev (cons (- (car lst) &lt;span&gt;1&lt;/span&gt;) (cons (conway (cons (car lst) (cons (- (cadr lst) &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) (cddr lst)))) (cddr lst))))) ;规则5
  )
 )
 (conway_rev (reverse lst))
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　于是，刚才秒天秒地的3-&amp;gt;3-&amp;gt;3-&amp;gt;3就是(conway '(3 3 3 3))&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1151747/201809/1151747-20180928153836193-1232534002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 28 Sep 2018 07:55:00 +0000</pubDate>
<dc:creator>窗户</dc:creator>
<og:description>从很小我们 就知道，自然数有无限多个。 小朋友都对巨大的数有一种天然的憧憬，以至于很多人都会想过这么一个问题，我们可以表示出多大的数？ 小的时候，我就幻想着，我拿着一支笔，然后不断的写9，然后所写的这</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Colin-Cai/p/9683271.html</dc:identifier>
</item>
<item>
<title>【重磅】微软开源自动机器学习工具 - NNI - UniversalAIPlatform</title>
<link>http://www.cnblogs.com/ms-uap/p/9719071.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ms-uap/p/9719071.html</guid>
<description>&lt;p&gt;在机器学习建模时，除了准备数据，最耗时耗力的就是尝试各种超参组合，找到模型最佳效果的过程了。即使是对于有经验的算法工程师和数据科学家，有时候也很难把握其中的规律，只能多次尝试，找到较好的超参组合。而对于初学者来说，要花更多的时间和精力。&lt;/p&gt;
&lt;p&gt;自动机器学习这两年成为了热门领域，着力解决超参调试过程的挑战，通过超参选择算法和强大的算力来加速超参搜索的过程。&lt;/p&gt;
&lt;p&gt;NNI (&lt;a href=&quot;https://github.com/microsoft/nni&quot;&gt;Neurol Network Intelligence&lt;/a&gt;) 是微软开源的自动机器学习工具。与当前的各种自动机器学习服务或工具相比，有非常独特的价值。本文先介绍一下 NNI 的特点，然后再后续的安装、使用章节详细介绍如何上手。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/700062/201809/700062-20180928154352611-1215188939.png&quot; alt=&quot;流程&quot;/&gt;&lt;/p&gt;
&lt;ol readability=&quot;10.97954303932&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;支持私有部署。云服务中的自动机器学习直接提供了自动机器学习的服务，不仅包含了自动机器学习的功能，也包含了算力。如果团队或个人已经有了很强的算力资源，就需要支持私有部署的自动学习工具了。&lt;/p&gt;
&lt;p&gt;NNI 支持私有部署。整个部署也很简单，使用 pip 即可完成安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;分布式调度。NNI 可以在单机上完成试验，也支持以下两种分布式调度方案：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GPU 远程服务器。通过 SSH 控制多台 GPU 服务器协同完成试验，并能够计划每个试验所需要的 GPU 的数量。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/pai&quot;&gt;OpenPAI&lt;/a&gt;。通过 OpenPAI，NNI 的试验可以在独立的 Docker 中运行，支持多样的实验环境。在计算资源规划上，不仅能指定 GPU 资源，还能制定 CPU，内存资源。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;超参搜索的直接支持。当前，大部分自动机器学习服务与工具都是在某个任务上使用，比如图片分类。这样的好处是，普通用户只要有标记数据，就能训练出一个高质量的平台，不需要任何模型训练方面的知识。但这需要对每个训练任务进行定制，将模型训练的复杂性包装起来。&lt;/p&gt;
&lt;p&gt;与大部分现有的自动机器学习服务与工具不同，NNI 需要用户提供训练代码，并指定超参的搜索范围。这样的好处在于，NNI 几乎是通用的工具，任何训练任务都可以使用 NNI 来进行超参搜索。但另一方面，NNI 的通用性，也带来了一定的使用门槛。使用 NNI 需要有基本的模型训练的经验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/700062/201809/700062-20180928154421806-913878661.jpg&quot; alt=&quot;步骤&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;兼容已有代码。NNI 使用时，可以通过注释的方法来进行无侵入式的改动。不会影响代码原先的用途。通过注释方式支持 NNI 后，代码还可以单独运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;易于扩展。NNI 的设计上有很强的可扩展性。通过下面这些扩展性，能将系统与算法相隔离，把系统复杂性都包装起来。&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Tuner 接口，可以轻松实现新的超参调试算法。研究人员可以使用 NNI 来试验新的超参搜索方法，比如在强化学习时，在 Tuner 中支持 off-policy 来探索比较好的超参组合，在 Trial 里进行 on-policy 的实际验证。也可以使用 Tuner 和训练代码相配合，支持复杂的超参搜索方法。如，实现 ENAS ，将 Tuner 作为 Control，在多个 Trial 中并行试验。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Accessor 接口，可以加速参数搜索，将表现不好的超参组合提前结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;NNI 还提供了可扩展的集群接口，可以定制对接的计算集群。方便连接已经部署的计算集群。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;可视化界面。在启动一次超参搜索试验后，就可以通过可视化界面来查看试验进展，并帮助超参结果，洞察更多信息。&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;首页，可以看到当前试验的进展情况，搜索参数和效果最好的一些超参组合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/700062/201809/700062-20180928154446837-268759177.png&quot; alt=&quot;首页&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;优化进度页面可以看到按时序排列的精度或损失值（此图为精度）。可以看到，时间越靠后（右侧），精度高的越多。这说明选择的超参探索算法随着时间能找到一些好的超参空间继续探索。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/700062/201809/700062-20180928154511892-1635932216.png&quot; alt=&quot;优化&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;通过超参的分布图来直观地看到哪些超参值会明显比较好，或者看出它们之间的关联。通过下面的颜色图就能直观地看到红色（即精度较高的超参组合）线条所表达的丰富信息。如：
&lt;ul&gt;&lt;li&gt;卷积核大一些会表现较好。&lt;/li&gt;
&lt;li&gt;全连接层大了不一定太好。也许是所需要的训练时间增加了，训练速度太慢造成的。&lt;/li&gt;
&lt;li&gt;而学习率小一些（小于0.03），表现基本都不错。&lt;/li&gt;
&lt;li&gt;ReLU 比 tanh 等其它激活函数也好不少。&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/700062/201809/700062-20180928154538341-1858872303.png&quot; alt=&quot;超参&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过试验状态页面，能看到每个试验的时间长度以及具体的超参组合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/700062/201809/700062-20180928154236630-2072069267.png&quot; alt=&quot;试验&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过控制页面还可以实时的增加试验的超参组合，或者调整超参的范围。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/700062/201809/700062-20180928154604931-1057605483.png&quot; alt=&quot;控制&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;最后，再贴一次地址：&lt;a href=&quot;https://github.com/microsoft/nni&quot; class=&quot;uri&quot;&gt;https://github.com/microsoft/nni&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用方法和更多详情，可参考 GitHub 的官网，有问题或 bug 可以直接提 Issue。&lt;/p&gt;
</description>
<pubDate>Fri, 28 Sep 2018 07:53:00 +0000</pubDate>
<dc:creator>UniversalAIPlatform</dc:creator>
<og:description>【重磅】微软开源自动机器学习工具 NNI 在机器学习建模时，除了准备数据，最耗时耗力的就是尝试各种超参组合，找到模型最佳效果的过程了。即使是对于有经验的算法工程师和数据科学家，有时候也很难把握其中的规</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ms-uap/p/9719071.html</dc:identifier>
</item>
<item>
<title>myReactorServer: 基于事件驱动的C++高性能服务器 - ChyauAng</title>
<link>http://www.cnblogs.com/ChyauAng/p/9717507.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ChyauAng/p/9717507.html</guid>
<description>&lt;hr/&gt;&lt;h2 id=&quot;项目地址&quot;&gt;项目地址&lt;/h2&gt;
&lt;hr/&gt;&lt;h2 id=&quot;性能评估结果&quot;&gt;性能评估结果&lt;/h2&gt;
&lt;p&gt;  身为一个Web Server，最重要的当然还是性能表现。所以不废话，先上性能评估结果。&lt;br/&gt;  由于这个项目借鉴了&lt;a href=&quot;https://github.com/chenshuo/muduo&quot;&gt;muduo&lt;/a&gt;项目的架构，所以性能对比的对象主要就是muduo。&lt;/p&gt;
&lt;h3 id=&quot;测试环境&quot;&gt;测试环境&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;OS: Ubuntu 14.04&lt;/li&gt;
&lt;li&gt;内存: 8G&lt;/li&gt;
&lt;li&gt;CPU: I7-4930K&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;评估工具&quot;&gt;评估工具&lt;/h3&gt;
&lt;h3 id=&quot;评估方法&quot;&gt;&lt;a href=&quot;https://github.com/linyacool/WebServer/blob/master/%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%94%B9%E8%BF%9B.md&quot;&gt;评估方法&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;评估结果&quot;&gt;评估结果&lt;/h3&gt;
&lt;p&gt;  测试截图放在后面。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;| 服务器 | 短连接QPS | 长连接QPS |
| myReactorServer | 66117 | 13802326 |
| muduo | 44529 | 1623832 |&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;评估结果截图&quot;&gt;评估结果截图&lt;/h3&gt;
&lt;p&gt;myReactorServer短连接&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1497790/201809/1497790-20180926101028592-758631549.png&quot; alt=&quot;myReactorServer短连接&quot;/&gt;&lt;/p&gt;
&lt;p&gt;muduo短连接&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1497790/201809/1497790-20180926100903027-306755714.png&quot; alt=&quot;muduo短连接&quot;/&gt;&lt;/p&gt;
&lt;p&gt;myReactorServer长连接&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1497790/201809/1497790-20180926101104515-2002645882.png&quot; alt=&quot;myRaectorServer长连接&quot;/&gt;&lt;/p&gt;
&lt;p&gt;muduo长连接&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1497790/201809/1497790-20180926100939317-214429367.png&quot; alt=&quot;muduo长连接&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;myreactorserver特性介绍&quot;&gt;myReactorServer特性介绍&lt;/h2&gt;
</description>
<pubDate>Fri, 28 Sep 2018 07:20:00 +0000</pubDate>
<dc:creator>ChyauAng</dc:creator>
<og:description>myReactorServer: A High Performance C++ Web Server 项目地址</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ChyauAng/p/9717507.html</dc:identifier>
</item>
<item>
<title>使用 dotTrace 分析 .NET Core 代码问题 - myzony</title>
<link>http://www.cnblogs.com/myzony/p/9718776.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/myzony/p/9718776.html</guid>
<description>&lt;h2 id=&quot;背景&quot;&gt;0.背景&lt;/h2&gt;
&lt;p&gt;在项目开发之中，前期可能主要以保证任务完成为主，对于性能优化主要在于开发完成之后再来进行。可能在测试的时候发现部分接口的代码执行时间过长，但是又毫无头绪，这个时候你就需要性能分析工具来协助你排查问题了。&lt;/p&gt;
&lt;p&gt;常规性能分析借助于 Visual Studio 强大的性能测试工具就可以进行分析，但是这些功能只包含在企业版当中。这个时候我们就可以使用 JetBrains 的 .NET 分析全家桶来进行这个操作了，其包含内存分析(dotMemory)与性能分析(dotTrace)，其实他的 dotCover(单元测试) 也是挺好用的。&lt;/p&gt;
&lt;h2 id=&quot;安装与下载&quot;&gt;1.安装与下载&lt;/h2&gt;
&lt;h3 id=&quot;下载&quot;&gt;1.1 下载&lt;/h3&gt;
&lt;p&gt;安装步骤较为简单，前往 Jetbrains 官网，找到 dotTrace ，点击下载即可。&lt;/p&gt;
&lt;p&gt;其地址为 &lt;a href=&quot;https://www.jetbrains.com/profiler/download/&quot; class=&quot;uri&quot;&gt;https://www.jetbrains.com/profiler/download/&lt;/a&gt; ，选择自己需要的安装包形式，一般选择 WebInstaller 进行安装，当然这里推荐选择 Standalone (独立版)，直接下载运行就 OK 。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;1.2 安装&lt;/h3&gt;
&lt;p&gt;每个用户可以免费评估使用 10 天，当然你要使用某些补丁或者激活工具也是可以的，这里不再详述过程，只是注意一下（WebInstaller）在安装的时候选择自己需要的安装就可以了，不需要的直接选为 Skip 跳过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151320861-1333819929.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你也可以在安装的时候选择 &quot;Visual Studio Integration&quot;，这样就会与 VS 集成，在分析代码的时候可以快速跳转到相应的代码行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151400463-728447180.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用与分析&quot;&gt;2.使用与分析&lt;/h2&gt;
&lt;p&gt;dotTrace 使用比较方便，本身支持 .NET Core 分析，分析时只是会有四种不同的分析模式，这里大概讲解一下各种分析模式的区别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151427882-1205421313.png&quot;/&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Sampling&lt;/td&gt;
&lt;td&gt;通过获取 CLR 内部一个方法开始执行和结束执行的时间差来计算的分析时间。&lt;br/&gt;这是最快的方法，它用于精确测量程序运行时间，但可能会丢失一些数据。&lt;br/&gt;使用此配置类型可使你快速获取应用程序的的总体性能。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Tracing&lt;/td&gt;
&lt;td&gt;慢于 Sampling 的方法，但是可以准确地测量特定方法被调用的准确次数。&lt;br/&gt;它是通过获取 CLR 内部一个方法开始执行和结束执行的时间差来计算的分&lt;br/&gt;析时间。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Line-by-line&lt;/td&gt;
&lt;td&gt;通过收集代码执行的每条语句的时间来进行比较，它计算出的时间更加精确。&lt;br/&gt;该方法适用于你已经知道性能问题大概在哪里出现，并要找到具体某一个出&lt;br/&gt;现性能问题的时候。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Timeline&lt;/td&gt;
&lt;td&gt;采取抽样的方式，每隔一段时间 (10 ms)，会暂停所有线程，并抓取堆栈里的&lt;br/&gt;信息，然后才计算出代码执行时间差。使用这个方式可能会导致一些执行时间&lt;br/&gt;少于 10 ms 的方法无法被抓取到。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;一般来说我们使用的是 &lt;code&gt;Tracing&lt;/code&gt; 来进行代码的性能分析，因为一般都是需要查看每个方法具体的调用时间。下面我就将以一个接口的实例来作为示范，看如何来排查调用缓慢的问题。&lt;/p&gt;
&lt;h3 id=&quot;获取快照信息&quot;&gt;2.1 获取快照信息&lt;/h3&gt;
&lt;p&gt;首先运行 dotTrace 之后，选择 .NET Core Application，之后右侧的 Profiler Options 则选择 Tracing。最后一步则是选择需要进行检测的 dll 文件，这里我选择的是一个基于 Abp 框架开发的 ASP.NET Core 项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151500503-662026822.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，你也可以勾选上 Advanced ，配置诸如启动参数之类的东西，之后点击 Run 则开始进行分析了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151519835-1919934968.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里右下角的 &lt;code&gt;Get Snapshot and Wait&lt;/code&gt; 点击之后呢，就会获取到快照文件了，当然现在先不慌，我们先来测试一下我们要测试的接口。&lt;/p&gt;
&lt;p&gt;比如说我这里有一个 TestMethod 方法，其代码如下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class TestApplicationService : ApplicationService
{
    private readonly IRepository&amp;lt;SysSystem&amp;gt; _tempRep;

    public TestApplicationService(IRepository&amp;lt;SysSystem&amp;gt; tempRep)
    {
        _tempRep = tempRep;
    }

    public async Task&amp;lt;string&amp;gt; TestMethod()
    {
        var systems = _tempRep.GetAll().ToList();

        foreach (var system in systems)
        {
            system.Status = 10;
            await _tempRep.UpdateAsync(system);
        }

        int i = 0;
        for (int j = 0; j &amp;lt; 10000; j++)
        {
            i += j;
        }

        return systems[0].SystemCode;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在我们通过 SwaggerUI 调用这个接口，看需要多长时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151549537-1091060504.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到平均时常都需要 300ms ，现在我们点击 GetSnapshot and Wait 按钮，会弹出分析窗口，并且我们随时可以通过再次点击 Start 按钮，继续分析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151612745-397791435.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;分析代码&quot;&gt;2.2 分析代码&lt;/h3&gt;
&lt;h4 id=&quot;概览信息&quot;&gt;2.2.1 概览信息&lt;/h4&gt;
&lt;p&gt;Tracing 分析的界面比较简单，一个 All Calls 页签与 Overview (概览) 的页签，首先我们大致看一下概览窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151632279-1554872241.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到他给我们标识了用户代码执行周期最长的一些地方，其次也用柱状图很直观地体现了耗时最长的代码分类。&lt;/p&gt;
&lt;p&gt;右侧则提列了一些快照的信息与运行时的环境信息，以便用户作为参考。&lt;/p&gt;
&lt;h4 id=&quot;threads-tree-线程信息&quot;&gt;2.2.2 Threads Tree (线程信息)&lt;/h4&gt;
&lt;p&gt;本窗口主要的作用是分析应用程序里面发生的所有的线程活动，主线程有一个 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151701938-1545849055.png&quot;/&gt; 图标，而终结器线程则是拥有一个 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151730808-1988597668.png&quot;/&gt; 图标，剩下的都是线程池内部的工作线程。&lt;/p&gt;
&lt;p&gt;在这里我们以主线程为例，分析一下其具体内容所表达的意思。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151800490-754228801.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Main：代表不带命名空间的方法简称。&lt;/li&gt;
&lt;li&gt;99 . 99 %：代表该方法针对于整个线程运行时间所占的百分比，这里的意思就是 Main 方法占用了整个主线程运行时间的 99.99 %。&lt;/li&gt;
&lt;li&gt;523,732 ms：代表该方法与子方法执行的总时间。&lt;/li&gt;
&lt;li&gt;1 call：方法在堆栈上所被调用的次数。&lt;/li&gt;
&lt;li&gt;XXX.Web.Host.Startup.Program.Main(string[] )：被调用方法的全称，&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;call-tree-调用树&quot;&gt;2.2.3 Call Tree (调用树)&lt;/h4&gt;
&lt;p&gt;一般我们使用本页面的时候会多一点，这个页面会显示在所有线程中的所有被调用的方法。其每一个根节点代表的是每一个线程所执行的一个根函数，而下面每一个节点则代表其根函数内部调用的子函数的相关性能分析信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151817020-1477661857.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么我们如何快速定位我们刚才测试的接口呢？&lt;/p&gt;
&lt;p&gt;按下 Ctrl+F ，会弹出搜索框，在里面输入我们所编写的接口方法名字，按下回车就会快速定位了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151834253-729335370.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后我们会看到如下内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151847224-332021895.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过展开节点我们可以知道最耗费时间的方法，即为 GetAll 方法，当点击节点的时候，右侧也会定位到相应的代码位置。&lt;/p&gt;
&lt;p&gt;这里可以看到整个 GetAll 方法使用了 1015ms 的时间，这是为什么呢？你可以看到在其右侧有一个 8 calls ，这个时间是 8 次调用总共所花费的时间。&lt;/p&gt;
&lt;p&gt;右键节点，你可以通过 Properties 可以看到该方法的平均执行时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151905782-1370219768.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到其自身只花费了 8.3 μs，说明真正执行缓慢的还在其更深层，这里就不再往里面跟了，如果需要更加详细的性能报告，可以不使用 Tracing 模式，而使用 Line-by-line 模式来进行分析。&lt;/p&gt;
&lt;h4 id=&quot;plain-list-简单列表&quot;&gt;2.2.4 Plain List (简单列表)&lt;/h4&gt;
&lt;p&gt;以平铺的方式展示所有被调用过的方法列表，让你分析具体代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203160/201809/1203160-20180928151921338-1174121709.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;hot-spots-热点跟踪&quot;&gt;2.2.5 Hot Spots (热点跟踪)&lt;/h4&gt;
&lt;p&gt;该视图会列举出所有耗时最长的方法。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;3.参考资料&lt;/h2&gt;
&lt;p&gt;CSDN：&lt;a href=&quot;https://blog.csdn.net/weixin_38208401/article/details/75645021&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/weixin_38208401/article/details/75645021&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 28 Sep 2018 07:20:00 +0000</pubDate>
<dc:creator>myzony</dc:creator>
<og:description>0.背景 在项目开发之中，前期可能主要以保证任务完成为主，对于性能优化主要在于开发完成之后再来进行。可能在测试的时候发现部分接口的代码执行时间过长，但是又毫无头绪，这个时候你就需要性能分析工具来协助你</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/myzony/p/9718776.html</dc:identifier>
</item>
<item>
<title>AES，DES加密JS源文件及其使用方法 - 迪迪滴滴</title>
<link>http://www.cnblogs.com/dididi/p/9718714.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dididi/p/9718714.html</guid>
<description>&lt;p&gt;源文件地址：https://github.com/dididi1234/crypto&lt;/p&gt;
&lt;p&gt;进入之后直接下载&lt;a id=&quot;5933cac564ee6daa307bd69f6496e7fa-3685078444a73052bba11d2477b548e71262f82f&quot; class=&quot;js-navigation-open&quot; title=&quot;CryptoJS.js&quot; href=&quot;https://github.com/dididi1234/crypto/blob/master/CryptoJS.js&quot;&gt;CryptoJS.js&lt;/a&gt;，js中直接引用，小程序也一样可以使用&lt;/p&gt;
&lt;p&gt;具体使用方法和vue中的&lt;a id=&quot;5933cac564ee6daa307bd69f6496e7fa-3685078444a73052bba11d2477b548e71262f82f&quot; class=&quot;js-navigation-open&quot; title=&quot;CryptoJS.js&quot; href=&quot;https://github.com/dididi1234/crypto/blob/master/CryptoJS.js&quot;&gt;CryptoJS.js&lt;/a&gt;一样&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;div readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import CryptoJS from 'CryptoJS.js'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;aes加密&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; aseKey ='你的key'
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Encrypt(message) {
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; encrypt =&lt;span&gt; CryptoJS.AES.encrypt(message, CryptoJS.enc.Utf8.parse(aseKey), {
mode: CryptoJS.mode.ECB,
padding: CryptoJS.pad.Pkcs7
}).toString();
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; encrypt
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;aes解密&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; aesDecypt(encrypt){
console.log(CryptoJS)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; decrypt =&lt;span&gt; CryptoJS.AES.decrypt(encrypt, CryptoJS.enc.Utf8.parse(aseKey), {
mode: CryptoJS.mode.ECB,
padding: CryptoJS.pad.Pkcs7
}).toString(CryptoJS.enc.Utf8);
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; decrypt
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;DES加密解密只需把AES改为DES就行了，CBC等模式直接把mode改为：CryptoJS.mode.CBC就行了&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;MD5加密只要用 
&lt;p&gt;CryptoJS.MD5()函数就行了&lt;/p&gt;
&lt;p&gt;同时还有很多加密方式，可以打印CryptoJS看下&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 28 Sep 2018 07:12:00 +0000</pubDate>
<dc:creator>迪迪滴滴</dc:creator>
<og:description>源文件地址：https://github.com/dididi1234/crypto 进入之后直接下载CryptoJS.js，js中直接引用，小程序也一样可以使用 具体使用方法和vue中的Crypto</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dididi/p/9718714.html</dc:identifier>
</item>
<item>
<title>腾讯云图，让数据说话 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9718688.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9718688.html</guid>
<description>&lt;p&gt;&lt;strong&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer/?fromSource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;1.4516129032258&quot;&gt;
&lt;p&gt;本文由&lt;a href=&quot;https://cloud.tencent.com/developer/user/1002332?fromSource=waitui&quot;&gt;腾讯云数据库 TencentDB&lt;/a&gt;发表于&lt;a href=&quot;https://cloud.tencent.com/developer/column/1551?fromSource=waitui&quot;&gt;云+社区专栏&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一、腾讯云图 数据之美&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/ru3bxn0les.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;了解腾讯云图之前，我们先来看看数据可视化？&lt;/p&gt;
&lt;p&gt;这是星云图，他表示的是QQ同时在线人数，看到这个图大家脑袋里面想到什么？QQ，蓝钻、绿钻、太阳、月亮、上学的时候跟同学聊天，认识默认网友，你会是这众多闪亮星星中的哪一个呢，进一步分析可以看到沿海地区相对闪亮，结合现实情况，沿海地区设备网络相对发达，年轻化程度高，用户活跃等等。这就是数据可视化的魅力，给特定角色在特定场景讲述特定的故事。数据可视化的目的是让数据说话，让复杂抽象的数据以视觉的形式更准确快速的传达&lt;/p&gt;
&lt;p&gt;腾讯云图正是一站式数据可视化平台，支持多种数据源，覆盖多个领域模板，拖拽式自由布局，零门槛快速打造专业大屏。说人话，就是说即使我不是专业工程师，也可以使用腾讯云图，把一堆抽象枯燥无味的数据通过屌炸天的方式展示出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/z614ldifyh.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;腾讯云图已经接入的客户案例包括：永辉超级物种，艺龙网全国IDC网络出口流量监控，格灵深瞳人脸特征大数据分析等。&lt;/p&gt;
&lt;p&gt;永辉超级物种深圳创投店的大屏，是两块竖的大屏，呈现商圈客流热力，分时客流，门店最受欢迎饮品，最受欢迎水果单品等。某日统计到周边商圈客流量超过30万人，最受欢迎的饮品是农夫山泉和可口可乐，最爱的水果是火焰红葡萄。&lt;/p&gt;
&lt;p&gt;门店可以直观的观察到周围客流量，以及购物意向，指导门店备货等。&lt;/p&gt;
&lt;p&gt;顾客进店也可以立即看到最受欢迎商品，购买到自己满意的东西。&lt;/p&gt;
&lt;p&gt;同时可以进一步根据周边环境，顾客消费情况，分析用户画像，深挖更多有价值的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/r7kvjgjlsu.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;腾讯云图把以上专业的有价值的内容模板化，提供出智慧零售行业模板，其他类似场景的用户可以直接使用该模板，快速搭建自己的可视化大屏。&lt;/p&gt;
&lt;p&gt;腾讯云图不仅在智慧零售领域，在其他多个领域，也提供了许多行业模板，比如监控领域、政府工作等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/mxudqx2wcd.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户也可以根据模板自己根据特定场景定制自己的大屏，腾讯云图提供丰富的组件，有表示对比关系的柱状图、条形图、折线图等，表示构成的饼图、面积图等，表示分布的散点图、直方图等，还有跟地理位置有关的多种地图。这些组件腾讯云图大部分自主研发，也接入echarts等第三方开源组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/22j085logg.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大屏设计页面，主要分为工具栏、图层、画布、配置面板（属性、数据）。工具栏、图层、配置面板可以自由收放，让画布区域更大化，让用户能更精确的拖动组件进行沉浸式操作。&lt;/p&gt;
&lt;p&gt;跟《三体》里面描述未来世界如出一辙。它这样描述：这个世界到处都是简洁空荡的，几乎见不到任何设施，只有在需要时，设施才会出现，而且是在任何需要的位置出现。世界在被技术复杂化后，正在重新变得简洁起来，技术被深深地隐藏在现实的后面。&lt;/p&gt;
&lt;p&gt;二、腾讯云图 方案设计&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/8oarxng9hb.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如此酷炫，能让数据说话的腾讯云图具体怎么实现的呢？腾讯云图的主要模块包括：组件库、大屏设计、属性管理、数据管理。 组件库包括基础组件\地图组件\图表组件\装饰组件\文本组件\媒体组件\小部件等，每个组件都有自己的属性定义，通过bundle-loader异步加载。 大屏设计包括工具栏、画布、图层、属性、数据等。 属性管理包括基础组件（比如文本输入框、数字输入框、开关按钮等），复合组件（比如标题组件、位置组件等）、数据映射配置。&lt;/p&gt;
&lt;p&gt;数据源包括：静态数据、csv文件、API、腾讯云/公网数据库、腾讯云监控。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/5q370wdn01.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体实现过程：画布中一个组件面积图，它由数据、代码、属性组成，通过控制面板调整任何属性或者数据，都可以改变该面积图。使用react redux经典三部曲action，store，reducer实现。当用户改变属性或者数据，会发起 action ，store 会调用 dispatch 方法向某个特定的 reducer 传递该 action，reducer 收到 action 之后执行对应的更新逻辑然后返回一个新的 state，state 的更新最终会传递到根reducer处，返回一个全新的完整的 state，然后传递给组件进行更新。&lt;/p&gt;
&lt;p&gt;三、腾讯云图 组件实战&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/c427c6mnxg.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一个生活中随处可见的进度条的具体实现过程。组件实现过程一般包括需求分析、属性分析、模型建立、开发实现、测试交付。一个简单的进度条的属性包括进度条样式（边框样式、填充样式、开始颜色、结束颜色、密度），文本样式（字体字号、文本颜色、间距、精度等）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/lsa9p40b6j.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;组件建模：进度条由气泡和进度条组成，气泡由一个边框和文本组成，进度条则由外框、遮罩层、剪切层、渐变层组成。 接下来是实现的具体代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1002332/fio7ys1c2f.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;组件实现完成，如何接入腾讯云图。每个组件都需要定义自己的属性。包括组件名称、版本、属性等。平台根据这个属性会生成对应的控制面板，以及默认属性值。这样组件就可以接入腾讯云图，进行自由的拖拽布局。&lt;/p&gt;
&lt;p&gt;腾讯云图，一站式数据可视化展示平台，零门槛打造出专业大屏数据展示！&lt;/p&gt;
&lt;blockquote readability=&quot;0.47840531561462&quot;&gt;
&lt;p&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/143200?fromSource=waitui&quot;&gt;数据可视化在生活的哪里可以应用？&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1006263?fromSource=waitui&quot;&gt;遇见大数据可视化 ： 【云图】让数据可见&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1334590?fromSource=waitui&quot;&gt;Redis勒索事件爆发，如何避免从删库到跑路?&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1183681?fromSource=waitui&quot;&gt;Redis云端架构深入浅出&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/edu/course-1128?fromSource=waitui&quot;&gt;【每日课程推荐】机器学习实战！快速入门在线广告业务及CTR相应知识&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，更多原文请&lt;a href=&quot;https://cloud.tencent.com/developer/article/1347861?fromSource=waitui&quot;&gt;点击&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搜索关注公众号「云加社区」，第一时间获取技术干货，关注后回复1024 送你一份技术课程大礼包！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;海量技术实践经验，尽在&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot;&gt;云加社区&lt;/a&gt;！&lt;/p&gt;
</description>
<pubDate>Fri, 28 Sep 2018 07:09:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<og:description>欢迎大家前往</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9718688.html</dc:identifier>
</item>
<item>
<title>Spark2.3.1中用各种模式来跑官方Demo - 大嗯呐丶</title>
<link>http://www.cnblogs.com/puppey/p/9718592.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/puppey/p/9718592.html</guid>
<description>&lt;p&gt;          local模式也就是本地模式，也就是在本地机器上单机执行程序。&lt;strong&gt;使用这个模式的话，并不需要启动&lt;/strong&gt;&lt;strong&gt;Hadoop&lt;/strong&gt;&lt;strong&gt;集群，也不需要启动&lt;/strong&gt;&lt;strong&gt;Spark&lt;/strong&gt;&lt;strong&gt;集群，只要有一台机器上安装了&lt;/strong&gt;&lt;strong&gt;JDK&lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;Scala&lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;Spark&lt;/strong&gt;&lt;strong&gt;即可运行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        进入到Spark2.1.1的安装目录，命令是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
cd  /opt/spark/spark-2.1.1-bin-hadoop2.7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 执行命令，用单机模式运行计算圆周率的Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
./bin/spark-submit  --class   org.apache.spark.examples.SparkPi  --master   local  examples/jars/spark-examples_2.11-2.1.1.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1495009/201809/1495009-20180928145334742-6812644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;            这种模式也就是&lt;strong&gt;Standalone模式，&lt;/strong&gt;使用独立的Spark集群模式提交任务，需要先启动Spark集群，但是不需要启动Hadoop集群&lt;strong&gt;。启动Spark集群的方法是进入$SPARK_HOME/sbin目录下，执行start-all.sh脚本&lt;/strong&gt;，启动成功后，可以访问下面的地址看是否成功：&lt;/p&gt;
&lt;p&gt;        &lt;a href=&quot;http://xn--sparkmarsterip-rk3yp28q4kycja:8080/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://Spark的Marster机器的IP:8080/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1495009/201809/1495009-20180928145419249-107196422.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 执行命令，用Standalone模式运行计算圆周率的Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
./bin/spark-submit   --class   org.apache.spark.examples.SparkPi   --master   spark://192.168.27.143:7077   examples/jars/spark-examples_2.11-2.1.1.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1495009/201809/1495009-20180928145526161-1381973363.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3 用yarn-client模式执行计算程序&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
cd   /opt/spark/spark-2.1.1-bin-hadoop2.7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 执行命令，用yarn-client模式运行计算圆周率的Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
 ./bin/spark-submit   --class  org.apache.spark.examples.SparkPi  --master  yarn-client    examples/jars/spark-examples_2.11-2.1.1.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我这里出现了报错, 如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1495009/201809/1495009-20180928153323101-1076081907.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;解决方法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo&lt;/span&gt; -e &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;export HADOOP_CONF_DIR=/usr/local/hadoop-2.7.3/etc/hadoop&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/&lt;span&gt;profile
source &lt;/span&gt;/etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着运行...&lt;/p&gt;
&lt;p&gt;又出现了如下报错....&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1495009/201809/1495009-20180928151806170-1941722065.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;经一番gooole, 由于VMware设置了4g内存,本地虚机启动了太多程序导致内存不够引起.&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;修改yarn-site.xml，添加下列property&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.nodemanager.pmem-check-enabled&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;&lt;span&gt;false&lt;/span&gt;&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.nodemanager.vmem-check-enabled&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;&lt;span&gt;false&lt;/span&gt;&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1495009/201809/1495009-20180928152341754-1580661451.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4 用yarn-cluster模式执行计算程序&lt;/h2&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
cd   /opt/spark/spark-2.1.1-bin-hadoop2.7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　执行命令，用yarn-cluster模式运行计算圆周率的Demo：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
./bin/spark-submit  --class  org.apache.spark.examples.SparkPi  --master  yarn-cluster   examples/jars/spark-examples_2.11-2.1.1.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意，使用yarn-cluster模式计算，结果没有输出在控制台，结果写在了Hadoop集群的日志中，如何查看计算结果？注意到刚才的输出中有地址：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1495009/201809/1495009-20180928152954311-326936795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img id=&quot;uploading_image_21297&quot; src=&quot;https://common.cnblogs.com/images/loading.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 28 Sep 2018 06:57:00 +0000</pubDate>
<dc:creator>大嗯呐丶</dc:creator>
<og:description>1 使用单机local模式提交任务 local模式也就是本地模式，也就是在本地机器上单机执行程序。使用这个模式的话，并不需要启动Hadoop集群，也不需要启动Spark集群，只要有一台机器上安装了JD</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/puppey/p/9718592.html</dc:identifier>
</item>
<item>
<title>beeshell —— 开源的 React Native 组件库 - 美团技术团队</title>
<link>http://www.cnblogs.com/meituantech/p/9718541.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/meituantech/p/9718541.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/logo.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;beeshell 是一个 React Native 应用的基础组件库，基于 0.53.3 版本，提供一整套开箱即用的高质量组件，包含 JavaScript（以下简称 JS）组件和复合组件（包含 Native 代码），涉及前端（FE）、iOS、Android 三端技术，兼顾通用性和定制化，支持自定义主题，用于开发和服务企业级移动应用。现在已经在 GitHub 上开源，地址：&lt;a href=&quot;https://github.com/meituan/beeshell&quot;&gt;https://github.com/meituan/beeshell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截止目前，beeshell 中的组件已经在美团外卖移动端应用蜜蜂 App 中广泛应用，而且已经持续了一年多时间，通过了各种业务场景、操作系统、机型的实战考验，具备很好的稳定性、安全性和易用性，所以我们将其开源，以期发挥出更大的应用价值。&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;特性&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;UI 样式的一致性和定制化。&lt;/li&gt;
&lt;li&gt;通用性。主要使用 JS 来实现，保证跨平台通用性。&lt;/li&gt;
&lt;li&gt;定制化。我们在比较细的粒度上对组件进行拆分，通过继承的方式层层依赖，功能渐进式增强，为在任意层级上的继承扩展、个性化定制提供了可能。&lt;/li&gt;
&lt;li&gt;原生功能支持。组件库中的复合组件包含 Native 代码，支持图片选择、定位等原生功能。&lt;/li&gt;
&lt;li&gt;功能丰富。不仅仅提供组件，还提供了基础工具、动画以及 UI 规范。&lt;/li&gt;
&lt;li&gt;完善的文档和使用示例。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;-&quot;&gt;对比&lt;/h3&gt;
&lt;p&gt;在开源之前，我们对业界已经开源的组件库进行了调研，这里主要对比了 beeshell 与其他组件库的优势与劣势，为大家选择组件库提供参考意见。目前，业界开源的组件库比较多，我们在这里仅选取 Github Star 数 5000 以上的组件库，并从组件数量、通用性、定制化、是否包含原生功能、文档完善程度五个维度来进行对比分析&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;组件库&lt;/th&gt;
&lt;th&gt;组件数量&lt;/th&gt;
&lt;th&gt;通用性&lt;/th&gt;
&lt;th&gt;定制化&lt;/th&gt;
&lt;th&gt;是否包含原生功能&lt;/th&gt;
&lt;th&gt;文档完善程度&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;react-native-elements&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;强，提供一套风格一致的 UI 控件&lt;/td&gt;
&lt;td&gt;弱，若要定制化可能需要重写&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;NativeBase&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;强，提供一套风格一致的 UI 控件&lt;/td&gt;
&lt;td&gt;中，支持主题变量&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;ant-design-mobile&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;强，提供一套风格一致的 UI 控件&lt;/td&gt;
&lt;td&gt;中，部分可以支持定制化需求&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;beeshell&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;强，提供一套风格一致的 UI 控件&lt;/td&gt;
&lt;td&gt;强，不仅支持主题变量，还支持使用继承的方式进行定制化扩展&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;通过对比可以看出，beeshell 只在组件数量上稍有劣势，在其他方面都一致或者优于其他项目。因为 beeshell 具备了良好的系统架构，所以丰富组件数量只时间问题，而且我们团队也已经有了详细的规划来完善数量上的不足。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;系统设计&lt;/h2&gt;
&lt;p&gt;系统设计是将一个实际问题转换成相应解决方案的主动过程，是解决办法的描述。在通用的软件工程模型中，需求分析完成后的第一步就是系统设计。一个项目最终的稳定性、易用性在很大程度上也取决于系统设计这一步。&lt;/p&gt;
&lt;p&gt;beeshell 组件库是为了更加快速的搭建移动端应用，为业务开发提供基础技术支持，大幅提升开发人效。然而，面对不同的业务方、不同的功能需求、不同的 UI 规范与交互方式，如何有效的兼顾所有的需求？这对系统设计提出了更高的要求，下面以抽象层次逐层降低的方式来详细介绍 beeshell 的系统设计。&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;框架设计&lt;/h3&gt;
&lt;p&gt;这些年，React Native 的出现为移动端开发提供了一种新的选择。React Native 相比原生开发有着更高的开发效率，同时比 HTML5、Hybrid 的性能更好，所以能够脱颖而出，这也使得越来越多的开发者开始学习和使用 React Native。&lt;/p&gt;
&lt;p&gt;beeshell 组件库基于 React Native，向下通过 React Native 与 iOS、Android 平台进行系统层面的交互，向上提供开发者友好的统一接口，抹平平台差异，为用户开发业务功能提供服务支持。beeshell 扮演了一个中间者的角色，从而保证了移动端应用基础功能的稳定性、易用性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/1.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;框架设计确定了 beeshell 的系统边界，指明了包含的功能与不包含的功能之间的界限。明确了系统边界，我们才能继续进行下面的分析、设计等工作。&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;设计原则&lt;/h3&gt;
&lt;p&gt;在进行组件库的详细设计之前，我们提出了几个设计原则：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JS 实现优先。使用 JS 来实现功能有几个好处：跨平台通用性、更高的开发效率、更低的学习和使用成本。&lt;/li&gt;
&lt;li&gt;继承与组合灵活运用。继承和组合都是实现功能复用、代码复用的有效的设计技巧，都是设计模式中的基础结构。继承允许子类覆盖重写父类的实现细节，父类的实现对于子类是可见的，一般称之为“白盒复用”，这对组件的定制化扩展很有效，beeshell 强大的定制化扩展的能力就是基于继承实现；组合是 React 推荐的方式，React 组件具有强大的组合模型，整体类和部分类之间不会去关心各自的实现细节，它们之间的实现细节是不可见的，一般称之为“黑盒复用”。beeshell 也广泛使用了组合，基于通用型的组件组合出更加丰富、强大、个性化的功能，在一定程度上提高了 beeshell 的定制化的能力。&lt;/li&gt;
&lt;li&gt;低耦合、高内聚。一个 beeshell 组件本质上就是一个 React 组件，React 组件之间主要通过 Props 通信，这属于数据耦合，相比于内容耦合、控制耦合等其他耦合方式，数据耦合是耦合程度最低的一种，受益于 React 的实现，beeshell 组件低耦合是自然而然的；而要做的高内聚，则对组件的编码实现方式有一定的要求，我们推行内聚方式中内聚程度比较高的交互内聚和顺序内聚。使用单一数据源，使各个元素操作相同的数据结构，实现交互内聚。使用不可变数据更新的方式，上一个环节的输出是下一个环节的输入，像流水线一样处理逻辑，这便是顺序内聚。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;-&quot;&gt;方案设计&lt;/h3&gt;
&lt;p&gt;整体上使用 JS 作为统一入口，多层封装隐藏实现细节，抹平 JS 与 Native、iOS 平台与 Android 平台的差异，开箱即用，降低了用户的学习和使用成本。局部上基于 React Native 的技术特点，分成 JS 组件部分和复合组件部分，两部分推行“松耦合”的开发模式，使得 Native 部分拥有替换变更的能力，提升组件库的灵活性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/2.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;复合组件部分可以直接暴露 JS 接口，如果有需要，也可以在 JS 组件部分进行定制化封装。我们尽量保证 Native 部分功能的原子性、简洁性，有任何定制化需求都使用 JS 来统一实现，遵循 JS 实现优先的设计原则，保证跨平台通用的特性。下面分别介绍 JS 组件部分和复合组件部分的设计。&lt;/p&gt;
&lt;h4 id=&quot;js-&quot;&gt;JS 组件部分设计&lt;/h4&gt;
&lt;p&gt;一个软件的设计分为三个设计层次：体系结构、代码设计和可执行设计。我们使用自上而下的方法，从体系结构开始进行 JS 组件部分的设计。&lt;/p&gt;
&lt;p&gt;软件的体系结构的风格通常有 7 种：管道和过滤器，面向对象，隐式请求，层次化，知识库，解释程序和过程控制。&lt;/p&gt;
&lt;p&gt;JS 组件部分使用了层次化的体系结构风格，整体分成三层：基础工具、通用组件、扩展组件，从上到下通用性逐渐减弱、定制化逐渐增强，功能渐进式增强，通过分层设计，各层各司其职，兼顾通用性和定制化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/3.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基础工具（common）：最基础的、通用的部分，包含 JS Utils、动画定义、UI 规范等。&lt;/li&gt;
&lt;li&gt;通用组件（components）：把功能相似的组件进行归类，整理成一个个系列，每个系列内部使用继承的方式实现，层层依赖，功能渐进式增强，该部分专注通用性，不考虑定制化需求，保证代码的简洁性。同时，在比较细的粒度对组件进行拆分，提供了良好的可扩展性。&lt;/li&gt;
&lt;li&gt;扩展组件（modules）：是对通用组件的继承扩展、组合应用，该部分专注定制化，在最大程度上满足业务上的需求，通用性较低。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们扩展组件部分会提供大量的定制化组件，如果仍然不能满足需求，用户就可以借鉴扩展组件的实现，根据自己业务需求，在某一继承层级上继承通用组件，自行进行定制化扩展，这点充分体现了 beeshell 定制化的能力。&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;复合组件部分设计&lt;/h4&gt;
&lt;p&gt;既然是 React Native 组件库当然少不了 Native 部分，复合组件包含 Native 的功能。beeshell 组件库已经完成了 Native 部分的集成方案与规范，有良好的开发与使用体验，可以不断的集成原生功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/composite.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;复合组件部分通过 JS 封装接口，保证了跨平台。Native 部分主要分成 Native Bridge 和纯 Native 两大部分，Bridge 是针对 React Native 的封装，必须在组件库中实现；而纯 Native 部分则可以通过 Pods/Gradle 依赖三方实现，有效的吸收利用原生开发的技术积累。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;组件库实现&lt;/h2&gt;
&lt;h3 id=&quot;-&quot;&gt;跨平台通用性保障&lt;/h3&gt;
&lt;p&gt;React Native 提供了一些内置组件，我们能使用 JS 来实现功能都是基于这些内置组件，这些内置的组件一些是跨平台通用的组件，如：View、Text、TextInput；而另一些是两个平台分别实现的，如 DatePickerIOS 和 DatePickerAndroid、AlertIOS 和 ToastAndroid。跨平台组件当然没有什么问题，我们可以专注业务功能的开发，问题是这些非跨平台的组件，给我们的业务功能开发带来极大困扰，下面举例说明。&lt;/p&gt;
&lt;p&gt;iOS 平台的 DatePickerIOS 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/DatePickerIOS.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Android 平台的 DatePickerAndroid 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/DatePickerAndroid.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不仅功能交互完全不同，而且类名、调用方式各异，这不仅满足不了业务需求，而且也有很高的学习和使用成本。这样类似的组件还有很多，如何抹平平台的差异，实现跨平台？我们提出的方案是优先使用 JS 来实现功能，这也是我们组件库的设计原则。&lt;/p&gt;
&lt;p&gt;针对上面的问题我们开发了基于 ScrollView 的 Datepicker 组件，统一类名与调用方式，保证了跨平台通用性。&lt;/p&gt;
&lt;p&gt;iOS 平台的 Datepicker 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/iOSDatepicker.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Android 平台的 Datepicker 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/AndroidDatepicker.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Datepicker 是使用 JS 完全实现了一个完整功能，但是有的情况不需要实现完整的功能，我们可以通过 React Native 提供的 &lt;code&gt;Platform&lt;/code&gt; 来进行局部的跨平台处理，例如 TextInput 组件。&lt;/p&gt;
&lt;p&gt;iOS 平台的 TextInput 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/InputIOS.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Android 平台的 TextInput 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/InputAndroid.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，在 Andriod 平台并没有清空图标，为了抹平平台的差异，提供更好的通用性，我们开发了 Input 组件，对 TextInput 进行封装与优化，利用 &lt;code&gt;Platform&lt;/code&gt; 定位 Android 平台提供清空功能，&lt;/p&gt;
&lt;p&gt;Input 组件在 Android 平台的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/InputAndroid2.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总之，beeshell 对跨平台通用性做了进一步的优化，遵循 JS 实现优先的原则，配合 &lt;code&gt;Platform&lt;/code&gt; 平台定位 API 为组件的易用性、通用性提供了更好的保障。&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;定制化支持&lt;/h3&gt;
&lt;p&gt;随着移动互联网的快速发展，各类移动端产品涌现并且不断发展，这也让软件知识不断被普及，业务方对产品功能的定位逐渐从厂商主导转变为用户主导。产品功能更加精准，个性化、细化、深化是必然趋势，通过定制化服务来满足产品发展的要求也应运而生。不同行业、不同类型的产品，功能、特点各不相同，用某一种既定的软件产品来满足不同类型的需求，其适用性可想而知。定制化有良好的技术架构和技术优势，可定制、可扩展、可集成、跨平台，在个性化需求的处理方面，有着很好的优势，所以我们需要定制化。&lt;/p&gt;
&lt;p&gt;综上所述，beeshell 把定制化作为核心特性，力求满足不同产品的定制化需求，下文将从组件的样式定制化和功能定制化两方面来进行阐述。&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;样式定制化&lt;/h4&gt;
&lt;p&gt;beeshell 的设计规范支持一定程度的样式定制，以满足业务和品牌上多样化的视觉需求，包括但不限于品牌色、圆角、边框等的视觉定制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/theme.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在组件库设计之初，就已经统一好了 UI 规范。我们根据 UI 规范，统一定义样式变量并放置在基础工具层中，即 &lt;code&gt;beeshell/common/styles/varibles.js&lt;/code&gt; 文件中，在 React Native 应用中，样式变量其实就是普通的 JS 变量，可以很方便的进行复用与重写操作。React Native 提供了 &lt;code&gt;StyleSheet&lt;/code&gt; 通过创建一个样式表，使用 ID 来引用样式，减少频繁创建新的样式对象，在组件库的样式变量应用中灵活使用 &lt;code&gt;StyleSheet.create&lt;/code&gt; 和 &lt;code&gt;StyleSheet.flatten&lt;/code&gt; 来获取样式 ID 和样式对象。&lt;/p&gt;
&lt;p&gt;在每个组的实现中，会事先引入基础工具层中的样式变量，使用统一的变量对象而不是在组件中自行定义，这样就保证了 UI 样式的一致性。同时，beeshell 提供了重置样式变量的 API，可以实现一键换肤。我们推荐 beeshell 的用户在开发移动应用时，事先定义好样式变量。一方面使用自己的样式变量重置 beeshell 的样式变量；另一方面在业务功能开发时，使用自己定义好的样式变量，从而保证整体 UI 的一致性。&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;功能定制化&lt;/h4&gt;
&lt;p&gt;样式定制化可以从宏观和整体的角度来实现，而功能的定制化则需要具体问题具体分析，从微观和局部的角度来分析和实现。下文将以 Modal 系列的实现为例，来详细介绍功能定制化。&lt;/p&gt;
&lt;p&gt;在移动端的弹窗交互，与 PC 端相比一般会比较简单，我们把模态框、下拉菜单、信息提示等交互类似的组件统一归类为 Modal 系列，使用继承的方式实现。有人可能会问为什么使用继承而不用使用组合？前文已经讲过，组合的主要目的是代码复用，而继承的主要目的是扩展。考虑到弹窗交互有很多定制化的可能性，为了满足更好的扩展性，我们选择了继承。&lt;/p&gt;
&lt;p&gt;首先我们看下几个组件的实现效果图，对 Modal 系列先有一个直观的认识。&lt;/p&gt;
&lt;p&gt;Modal 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/Modal.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;提供了遮罩、弹出容器以及淡入淡出（Fade）动画效果，弹出内容部分完全由用户自定义。这个组件通用性极强，没有任何定制化的功能。这里需要说明下，动画部分独立实现，提供了 FadeAnimated 和 SlideAnimated 两个子类，使用了策略模式与 Modal 系列集成，Modal 组件默认集成 FadeAnimated。&lt;/p&gt;
&lt;p&gt;ConfirmModal 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/ConfirmModal.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;继承 Modal 组件，对弹出内容做了一定程度的定制化扩展，支持标题、确认按钮、取消按钮以及自定义 body 部分的功能，通用性减弱，定制化增强。&lt;/p&gt;
&lt;p&gt;SlideModal 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/SlideModal.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;继承 Modal 组件，对动画、弹出容器做了重写，在初始化时实例化 SlideAnimated 类型对象，完成上拉、下拉动画，同时支持了自定义弹出位置的功能。&lt;/p&gt;
&lt;p&gt;PageModal 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/PageModal.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;继承 SlideModal 组件，对弹出内容做了定制化扩展，支持标题、确认按钮、取消按钮以及自定义 body 功能，通用性减弱，定制化增强。&lt;/p&gt;
&lt;p&gt;CheckboxModal 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/CheckboxModal.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;CheckboxModal 组件由 PageModal 和 Checkbox 两个组件使用组合的方式实现，基于通用型组件组合出了更加强大功能，遵循继承与组合灵活运用的设计原则。&lt;/p&gt;
&lt;p&gt;通过以上部分，我们已经对 Modal 系列已经有了直观的认识，然后我们来看下 Modal 系列的类图以及分层：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/classDiagram.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;动画部分在基础工具（common）中实现；在通用组件（components）中 Modal 组件聚合 FadeAnimated 动画，同时因为 SlideModal、ConfirmModal 比较通用，也在该部分实现；CheckboxModal 则定制化比较强，归类到扩展组件（modules）中。通过这种方式的分层，三层各司其职，使得组件库的层次结构更加清晰，不仅实现了定制化，还保证了通用部分的简洁性和可维护性。&lt;/p&gt;
&lt;h3 id=&quot;-case-&quot;&gt;复杂 Case 处理&lt;/h3&gt;
&lt;h4 id=&quot;-&quot;&gt;相互递归处理异步渲染&lt;/h4&gt;
&lt;p&gt;React Native 应用的 JS 线程和 UI 线程是两个线程，与浏览器中共用一个线程的实现不同，所以我们可以看到 React Native 提供的操作 UI 元素的 API，都是通过回调函数的方式进行调用。&lt;/p&gt;
&lt;p&gt;受益于 React，我们一般不需要直接操作 UI 元素，但是有的组件确实需要复杂的 UI 操作，例如完全由 JS 实现的 Scrollerpicker 组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/Scrollerpicker.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们需要精确的计算容器以及每一项元素的高度，才能正确得到当前选中的项在数据模型（数组）中的索引。现在面临的问题是：在组件渲染完成后的生命周期 &lt;code&gt;componentDidMount&lt;/code&gt; 并不能拿到正确容器的高度为，而使用 &lt;code&gt;setTimeout&lt;/code&gt; 也会有延迟时长设置为多少的问题。我们选择使用递归来解决，一次 &lt;code&gt;setTimeout&lt;/code&gt; 不行就执行多次。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/recursive.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里使用了交互递归，反复执行，直到得到有效的元素尺寸。&lt;/p&gt;
&lt;h4 id=&quot;ui-&quot;&gt;UI 尺寸容错机制&lt;/h4&gt;
&lt;p&gt;React Native 为用户提供了 style 属性来控制元素的样式，我们可以手动设置相关 UI 元素的尺寸。但是，在一些 Android 机器上，我们设置的元素尺寸与 &lt;code&gt;measure&lt;/code&gt; 方法获取的尺寸信息不一致，经过大量 Android 机器的实际的测试，我们得到的结论是：有零点几像素的误差。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/sizeError.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们把通过 &lt;code&gt;measure&lt;/code&gt; 方法得到尺寸信息进行向上与向下取整，得到一个阈值范围，手动设置的尺寸信息只要在这个阈值范围内，就认为是有效尺寸，这种容错机制有效的兼容了极端情况，提高了组件的稳定性。&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;精细化布局控制&lt;/h4&gt;
&lt;p&gt;在使用 Form 组件时，最常见的需求就是校验功能，通常组件库的 Form 组件都会内置校验功能。然而，因为校验方式有同步与异步两种，校验结果展示的样式、位置五花八门，这就导致了校验功能的复杂度变得很高。&lt;/p&gt;
&lt;p&gt;绝对定位：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/formAbsolute.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Static 定位：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/formStatic.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;自定义位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/formTop.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如何有效的兼顾不同的需求？我们提出了校验独立实现的方式，在使用 Form 组件的父组件中，使用 CVD 来定义、配置校验规则，校验结果输出到统一的数据结构（单一数据源），基于这个数据结构，我们就能在任意时机、任意位置、使用任意样式来展示校验信息。&lt;/p&gt;
&lt;p&gt;下面我们先介绍下 CVD：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/CVD.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;CVD 是一个针对复杂表单录入场景的分层解决方案，轻量级、跨平台、易扩展，内置在 beeshell 组件库中，可以直接使用。&lt;/p&gt;
&lt;p&gt;CVD 把表单某个控件的录入的流程分成三层：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Connector 连接器，把用户输入的信息转化成所需的数据格式。&lt;/li&gt;
&lt;li&gt;Validator 校验器，对格式化的数据进行校验。&lt;/li&gt;
&lt;li&gt;Dependency 依赖处理器，处理当前控件与其他控件的依赖关系。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;每一层都对单一数据源 Store 进行不可变数据更新，符合交互内聚和顺序内聚，内聚程度高。&lt;/p&gt;
&lt;p&gt;每一层使用函数式组合的方式，定义 key（表单控件的唯一标志）与 key 对应的回调函数，避免了批量 &lt;code&gt;if else&lt;/code&gt;，可以有效降低程序的圆环复杂度。&lt;/p&gt;
&lt;p&gt;下面以 Input 组件录入姓名为例，来具体说明，代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/codeCVD.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;onChange&lt;/code&gt; 中获取用户输入，调用 &lt;code&gt;cvd.flow&lt;/code&gt; 然后就可以通过 &lt;code&gt;cvd.getStore&lt;/code&gt; 获取到结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/codeCVDRet.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过校验功能独立实现，把校验信息输出到 Store 中，在需要的时候从 Store 中获取校验信息，可以更加精细化的控制元素的样式、位置与布局，兼容各种定制化需求。很多时候，只有我们想不到，没有做不到。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;代码的终极目标有两个，第一个是实现需求，第二个是提高代码质量和可维护性。测试是为了提高代码质量和可维护性，是实现代码的第二个目标的一种方法。&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;单元测试&lt;/h3&gt;
&lt;p&gt;单元测试（Unit Testing），是指对软件中的最小可测试单元进行检查和验证。在结构化编程的时代，单元测试中单元指的就是函数。beeshell 组件库全面使用单元测试，由组件的开发者完成。研究成果表明，无论什么时候作出修改都需要进行完整的回归测试，对于提供基础功能的组件来说更是如此，在生命周期中尽早地对软件产品进行测试将使效率和质量都得到最好的保证。Bug 发现的越晚，修改它所需的成本就越高，单元测试是一个在早期抓住 Bug 的机会。&lt;/p&gt;
&lt;p&gt;单元测试的优点有以下几点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;是一种验证行为。程序的每一项功能是测试来验证正确性，为后期的增加功能、代码重构提供了保障。&lt;/li&gt;
&lt;li&gt;是一种设计行为。单元测试使得我们从调用者的角度观察、思考，迫使开发者把程序设计成易于调用和可测试的，在一定程度上降低耦合性。&lt;/li&gt;
&lt;li&gt;是一种编写文档的行为。是展示函数、类使用的最佳文档。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;beeshell 组件库使用 Jest 做为单元测试的工具，自带断言、测试覆盖率工具，实现开箱即用。&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;测试用例设计&lt;/h4&gt;
&lt;p&gt;测试用例的核心是输入数据，我们会选择具有代表性的数据作为输入数据，主要有三种：正常输入，边界输入，非法输入，下面以组件库中提供的 &lt;code&gt;isLeapYear&lt;/code&gt; 工具函数来举例说明，代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/codeTest.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Jest 使用 &lt;code&gt;test&lt;/code&gt; 函数来描述一个测试用例，其中的 &lt;code&gt;toBe&lt;/code&gt; 边是一句断言。&lt;/p&gt;
&lt;p&gt;函数使用了外部数据，正常输入肯定会有，这里的 &lt;code&gt;2000&lt;/code&gt; 和 &lt;code&gt;'2000'&lt;/code&gt; 都是正常输入；边界输入和非法输入并不是所有的函数都有，这里为了说明使用了有这两种输入的例子，边界输入是有效输入的极限值，这里 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;Infinity&lt;/code&gt; 是边界输入；非法输入是正常取值范围以外的数据， &lt;code&gt;'xx'&lt;/code&gt; 和 &lt;code&gt;false&lt;/code&gt; 则是非法输入。一般情况下，考虑以上三种输入可以找出函数的基本功能点，单元测试与代码编写是“一体两面”的关系，编码时对上述三种输入都是应该考虑的，否则代码的健壮性就会出现问题。&lt;/p&gt;
&lt;p&gt;上文所说的测试是针对程序的功能来设计的，就是所谓的“黑盒测试”。单元测试还需要从另一个角度来设计测试数据，即针对程序的逻辑结构来设计测试用例，就是所谓的“白盒测试”。&lt;/p&gt;
&lt;p&gt;还是以 &lt;code&gt;isLeapYear&lt;/code&gt; 函数来进行说明，其代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/codeIsLeapYear.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里有一个 &lt;code&gt;if else&lt;/code&gt; 语句，如果我们只提供一个 &lt;code&gt;2000&lt;/code&gt; 的输入，只会测试到 &lt;code&gt;if&lt;/code&gt; 语句，而不会测试 &lt;code&gt;else&lt;/code&gt; 语句。虽然，在黑盒测试足够充分的情况下，白盒测试没有必要，可惜“足够充分”只是一种理想状态，难于衡量测试的完整性是黑盒测试的主要缺陷。而白盒测试恰恰具有易于衡量测试完整性的优点，两者之间具有极好的互补性，例如：完成功能测试后统计语句覆盖率，如果语句覆盖未完成，很可能是未覆盖的语句所对应的功能点未测试。&lt;/p&gt;
&lt;p&gt;白盒测试也是比较常见的需求，Jest 内置了测试覆盖率工具，可以直接在命令中添加 &lt;code&gt;--coverage&lt;/code&gt; 参数便可以输出单元测试覆盖率的报告，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/coverage.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到代码的每一行都覆盖到了 Coverage 为 100%，在很大程度上保证了功能的稳定性。&lt;/p&gt;
&lt;h4 id=&quot;ui-&quot;&gt;UI 自动化测试&lt;/h4&gt;
&lt;p&gt;想要确保组件库的 UI 不会意外被更改，快照测试（Snapshot Testing）是非常有用的工具。一个典型的移动 App 快照测试案例过程是，先渲染 UI 组件，然后截图，最后和独立于测试存储的参考图像进行比较。使用 Jest 进行在快照测试，在 beeshell 中第一次对某个组件进行测试时，会在测试目录下创建一个 snapshots 文件夹，并将快照结果存放在该文件夹中。快照结果文件以 &amp;lt;组件名&amp;gt;.js.snap 命名，其内容为某个状态下的 UI 组件树。&lt;/p&gt;
&lt;p&gt;下面以 Button 组件快照测试为例来说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/codeButtonTest.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行命令后得到快照结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/codeButtonSnapshot.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;静态分析&lt;/h3&gt;
&lt;p&gt;经常与单元测试联系起来的开发活动还有静态分析（Static analysis）。静态分析就是对软件的源代码进行研读，查找错误或收集一些度量数据，并不需要对代码进行编译和执行。&lt;/p&gt;
&lt;p&gt;静态分析效果较好而且快速，可以发现 30%~70% 的代码问题，可以在几分钟内检查一遍，成本低、收益高。beeshell 使用 SonarQube 进行静态代码检查。&lt;/p&gt;
&lt;p&gt;SonarQube 是一个开源的代码质量管理系统，支持 25+ 种语言，可以通过使用插件机制与 Eclipse、VSCode 等工具集成，实现对代码的质量的全面自动化分析和管理。&lt;/p&gt;
&lt;p&gt;SonarQube 通过对 Reliability（可靠性）、Security（安全性）、Maintainability（可维护性）、Coverage（测试覆盖率）、Duplications（重复）几个维度，对代码进行全方位的分析，通过设置 Quality Gates 保证代码质量。&lt;/p&gt;
&lt;p&gt;beeshell 组件库的分析结果概况如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/SonarQube.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可靠性达到 A 级别，是最高等级，表示无 Bug：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/SonarQubeR.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安全性达到 A 级别，是最高等级，表示无漏洞：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/SonarQubeS.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;测试覆盖率平均达到 70% 以上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/SonarQubeC.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;开发与使用一致性&lt;/h2&gt;
&lt;p&gt;beeshell 组件库使用 npm 包的形式下载使用，下载成功后会放置在项目根目录的 node_modules 目录，然后在项目中通过引入模块的方式，引入 beeshell 的组件来使用。&lt;/p&gt;
&lt;p&gt;那我们如何开发组件库？如何保证组件库的开发与使用的体验一致性？&lt;/p&gt;
&lt;p&gt;首先，我们需要一个 demo 项目，这个项目是 beeshell 组件库的开发环境，是一个 React Native 应用。然后，我们把 beeshell 做为 demo 项目的依赖，在 demo 项目中下载安装。&lt;/p&gt;
&lt;p&gt;现在，我们的问题就变成了 node_modules 目录中的 beeshell 如何和本地的 beeshell 源码进行同步。&lt;/p&gt;
&lt;h3 id=&quot;npm-link&quot;&gt;npm link&lt;/h3&gt;
&lt;p&gt;我们知道可以使用 npm link 来开发 npm 包，原理如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/npmLink.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本质是就是使用 Symbol link，但是我们建立好软链接后，运行打包命令却报错了，错误信息为 &lt;code&gt;Expected path '/xxx/xxx/index.js' to be relative to one of project roots&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们前端开发通常会用 Webpack 做为打包工具，而 React Native 应用使用的是 Metro，我们需要分析 Metro 来定位问题。&lt;/p&gt;
&lt;h3 id=&quot;webpack-vs-metro&quot;&gt;Webpack vs Metro&lt;/h3&gt;
&lt;p&gt;经过 Metro 的源码分析，我们发现 Metro 的打包方案与 Webpack 有较大差异，Webpack 是根据入口文件，即配置中的 entry 属性，递归解析依赖，构建依赖关系图而 Metro 是爬取特定路径下的所有文件来构建依赖关系图。&lt;/p&gt;
&lt;p&gt;分析发现 Metro 的特定路径默认是运行打包命里的路径，以及 node_modules 下第一层目录，这样我们就定位到了问题的所在：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/MetroCrawl.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Metro 在爬取文件的时候，通过软链接找到了全局的 beeshell 但是并没有继续判断全局的 beeshell 是否有软链接，所以无法爬取 beeshell 源码部分。&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;直接使用软链接&lt;/h3&gt;
&lt;p&gt;通过 ln -s 命令，直接建立 demo 项目 node_modules 下 beeshell 包 与 beeshell 源码的软链接：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/waimai-beeshell/popularizeassets/ln.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这种方式同时支持 Native 部分 iOS、Android 的源码开发，注意 Android 部分的需要在 setting.gradle 中调用 getCanonicalPath 方法获取建立软链接后的路径。&lt;/p&gt;
&lt;p&gt;通过试验、发现问题、分析源码、定位问题、解决问题、方案完善这几个步骤，完整的实现了 beeshell 组件库的开发与使用的体验一致性，同时提升了组件库的开发效率。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;未来展望&lt;/h2&gt;
&lt;p&gt;我们的目标是把 beeshell 建设成为一个大而全的组件库，不仅会不断丰富 JS 组件，而且会不断加强复合组件去支持更多的底层功能。因为我们支持全部引入和按需引入两种方式，用户不需要担心会引入过多无用组件而使得包体积过大，影响开发和使用效率。&lt;/p&gt;
&lt;p&gt;beeshell 目前提供了 20+ 组件以及基础工具，基于良好的架构设计、开发体验，为我们不断地丰富组件库提供了良好的基础。同时在开发 React Native 应用的几年时间中，我们已经积累了 50+ 基础以及业务组件，我们后续会把积累的组件进行梳理与调整，全部迁移到 beeshell 中。因为我们的组件主要来源于我们的业务需求，但是业务场景有限，可能会使得 beeshell 的发展受到限制，所以我们将其开源。希望借助社区的力量不断丰富组件库的功能，尽最大努力覆盖到移动应用方方面面的功能，欢迎大家献计献策，多多支持。&lt;/p&gt;
&lt;p&gt;我们为组件库发展规划了三个阶段：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一阶段，即我们现在所处的阶段，开源 20+ 组件，主要提供基础功能。&lt;/li&gt;
&lt;li&gt;第二阶段，对我们在开发 React Native 应用几年时间积累的组件进行整理，开源 50+ 组件。&lt;/li&gt;
&lt;li&gt;第三阶段，调研移动端 App 常用的功能，分析与整理，然后在 beeshell 中实现，开源 100+ 组件。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;-&quot;&gt;开源相关&lt;/h2&gt;
&lt;h3 id=&quot;git-&quot;&gt;Git 地址&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/meituan/beeshell&quot;&gt;beeshell&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;核心贡献者&lt;/h3&gt;
&lt;p&gt;前端：&lt;a href=&quot;https://github.com/wxlworkhard&quot;&gt;小龙&lt;/a&gt;，&lt;a href=&quot;https://github.com/mactive&quot;&gt;孟谦&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Native：&lt;a href=&quot;https://github.com/yuanboGeng&quot;&gt;渊博&lt;/a&gt;，&lt;a href=&quot;https://github.com/yeatse&quot;&gt;杨超&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;hidden-mobile&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;发现文章有错误、对内容有疑问，都可以关注美团技术团队微信公众号（meituantech），在后台给我们留言。我们每周会挑选出一位热心小伙伴，送上一份精美的小礼品。快来扫码关注我们吧！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;article__footer__img&quot;&gt;&lt;img src=&quot;https://tech.meituan.com/img/meituanjishutuandui.png&quot; alt=&quot;公众号二维码&quot; width=&quot;455&quot; align=&quot;center&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 28 Sep 2018 06:50:00 +0000</pubDate>
<dc:creator>美团技术团队</dc:creator>
<og:description>beeshell 是一个 React Native 应用的基础组件库，基于 0.53.3 版本，提供一整套开箱即用的高质量组件，包含 JavaScript（以下简称 JS）组件和复合组件（包含 Nat</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/meituantech/p/9718541.html</dc:identifier>
</item>
<item>
<title>小程序swiper 滑块视图容器 - xiaoleilei</title>
<link>http://www.cnblogs.com/xiaoleidiv/p/9718513.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoleidiv/p/9718513.html</guid>
<description>&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;最低版本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;11.616919393456&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;indicator-dots&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;是否显示面板指示点&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;indicator-color&lt;/td&gt;
&lt;td&gt;Color&lt;/td&gt;
&lt;td&gt;rgba(0, 0, 0, .3)&lt;/td&gt;
&lt;td&gt;指示点颜色&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.1.0 开始支持，低版本需做兼容处理。&quot;&gt;1.1.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.8630136986301&quot;&gt;&lt;td&gt;indicator-active-color&lt;/td&gt;
&lt;td&gt;Color&lt;/td&gt;
&lt;td&gt;#000000&lt;/td&gt;
&lt;td&gt;当前选中的指示点颜色&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.1.0 开始支持，低版本需做兼容处理。&quot;&gt;1.1.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;autoplay&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;是否自动切换&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;current&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;当前所在滑块的 index&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.8979591836735&quot;&gt;&lt;td&gt;current-item-id&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&quot;&quot;&lt;/td&gt;
&lt;td&gt;当前所在滑块的 item-id ，不能与 current 被同时指定&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.9.0 开始支持，低版本需做兼容处理。&quot;&gt;1.9.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;interval&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;自动切换时间间隔&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;duration&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;滑动动画时长&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;circular&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;是否采用衔接滑动&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;vertical&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;滑动方向是否为纵向&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.9090909090909&quot;&gt;&lt;td&gt;previous-margin&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&quot;0px&quot;&lt;/td&gt;
&lt;td&gt;前边距，可用于露出前一项的一小部分，接受 px 和 rpx 值&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.9.0 开始支持，低版本需做兼容处理。&quot;&gt;1.9.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.9056603773585&quot;&gt;&lt;td&gt;next-margin&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&quot;0px&quot;&lt;/td&gt;
&lt;td&gt;后边距，可用于露出后一项的一小部分，接受 px 和 rpx 值&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.9.0 开始支持，低版本需做兼容处理。&quot;&gt;1.9.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.8461538461538&quot;&gt;&lt;td&gt;display-multiple-items&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;同时显示的滑块数量&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.9.0 开始支持，低版本需做兼容处理。&quot;&gt;1.9.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.9175824175824&quot;&gt;&lt;td&gt;skip-hidden-item-layout&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;是否跳过未显示的滑块布局，设为 true 可优化复杂情况下的滑动性能，但会丢失隐藏状态滑块的布局信息&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.9.0 开始支持，低版本需做兼容处理。&quot;&gt;1.9.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;bindchange&lt;/td&gt;
&lt;td&gt;EventHandle&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;current 改变时会触发 change 事件，event.detail = {current: current, source: source}&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.9065420560748&quot;&gt;&lt;td&gt;bindanimationfinish&lt;/td&gt;
&lt;td&gt;EventHandle&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;动画结束时会触发 animationfinish 事件，event.detail 同上&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.9.0 开始支持，低版本需做兼容处理。&quot;&gt;1.9.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从 &lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.4.0 开始支持，低版本需做兼容处理。&quot;&gt;1.4.0&lt;/a&gt; 开始，&lt;code&gt;change&lt;/code&gt;事件返回&lt;code&gt;detail&lt;/code&gt;中包含一个&lt;code&gt;source&lt;/code&gt;字段，表示导致变更的原因，可能值如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;autoplay&lt;/code&gt; 自动播放导致swiper变化；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touch&lt;/code&gt; 用户划动引起swiper变化；&lt;/li&gt;
&lt;li&gt;其他原因将用空字符串表示。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;注意&lt;/span&gt;：其中只可放置&lt;code&gt;&amp;lt;swiper-item/&amp;gt;&lt;/code&gt;组件，否则会导致未定义的行为。&lt;/p&gt;
&lt;h4&gt;swiper-item&lt;/h4&gt;
&lt;p&gt;仅可放置在&lt;code&gt;&amp;lt;swiper/&amp;gt;&lt;/code&gt;组件中，宽高自动设置为100%。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;最低版本&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;0.90384615384615&quot;&gt;&lt;tr readability=&quot;1.8076923076923&quot;&gt;&lt;td&gt;item-id&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&quot;&quot;&lt;/td&gt;
&lt;td&gt;该 swiper-item 的标识符&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot; title=&quot;基础库 1.9.0 开始支持，低版本需做兼容处理。&quot;&gt;1.9.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;示例代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pasting&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt; &lt;span&gt;autoplay:是否自动切换&lt;/span&gt; &lt;span&gt;current:当前所在滑块的index&lt;/span&gt; &lt;span&gt;circular:是否采用衔接滑动&lt;/span&gt; &lt;span&gt;indicator-dots:是否显示面板指示点&lt;/span&gt; &lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;24&quot;&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;swiper&lt;/span&gt; &lt;span&gt;indicator-dots&lt;/span&gt;=&lt;span&gt;&quot;{{banner.length&amp;gt;0}}&quot;&lt;/span&gt; &lt;span&gt;autoplay&lt;/span&gt;=&lt;span&gt;&quot;true&quot;&lt;/span&gt; &lt;span&gt;current&lt;/span&gt;=&lt;span&gt;&quot;{{currentSwiper}}&quot;&lt;/span&gt; &lt;span&gt;circular&lt;/span&gt;=&lt;span&gt;&quot;true&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;zwt_swiper&quot;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;block&lt;/span&gt; &lt;span&gt;wx:for&lt;/span&gt;=&lt;span&gt;&quot;{{banner}}&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;swiper-item&lt;/span&gt; &lt;span&gt;bindtap&lt;/span&gt;=&lt;span&gt;&quot;webfn&quot;&lt;/span&gt; &lt;span&gt;data-url&lt;/span&gt;=&lt;span&gt;&quot;{{item.link}}&quot;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;=&lt;span&gt;&quot;{{item.pic}}&quot;&lt;/span&gt; &lt;span&gt;mode&lt;/span&gt;=&lt;span&gt;&quot;aspectFit&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;'slide-image'&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;swiper-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;swiper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;


&lt;div readability=&quot;25&quot;&gt;
&lt;p&gt;&lt;span&gt;let&lt;/span&gt; app = getApp();&lt;/p&gt;
&lt;p&gt;Page({&lt;/p&gt;
&lt;p&gt;data: {&lt;/p&gt;
&lt;p&gt;currentSwiper: &lt;span&gt;0&lt;/span&gt;,&lt;/p&gt;
&lt;p&gt;banner: [{&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;pic&quot;&lt;/span&gt;: &lt;span&gt;&quot;http://src.leju.com/imp/imp/deal/d9/d4/e/80fa4f5075848ec36393afc0fdd_p46_mk48.jpeg&quot;&lt;/span&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;link&quot;&lt;/span&gt;: &lt;span&gt;&quot;https://m.leju.com/news-bj-6450614724957876758.html&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;},&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;pic&quot;&lt;/span&gt;: &lt;span&gt;&quot;http://src.leju.com/imp/imp/deal/26/4b/1/5a319403d781e609820990a7237_p46_mk48.jpeg&quot;&lt;/span&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;link&quot;&lt;/span&gt;: &lt;span&gt;&quot;https://m.leju.com/news-bj-6448801379690787539.html&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;},&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;pic&quot;&lt;/span&gt;: &lt;span&gt;&quot;http://src.leju.com/imp/imp/deal/8e/51/2/d7b2358a9a424edbb3c1acbad6a_p46_mk48.jpeg&quot;&lt;/span&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;link&quot;&lt;/span&gt;: &lt;span&gt;&quot;https://m.leju.com/news-bj-6448446556718019431.html&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;]&lt;/p&gt;
&lt;p&gt;},&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// H5跳转&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;webfn: &lt;span&gt;function&lt;/span&gt; (e) {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;var&lt;/span&gt; url = e.currentTarget.dataset.url;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt; (url) {&lt;/p&gt;
&lt;p&gt;wx.navigateTo({&lt;/p&gt;
&lt;p&gt;url: &lt;span&gt;'/pages/webhtml/webhtml?url='&lt;/span&gt; + encodeURIComponent(url),&lt;/p&gt;
&lt;p&gt;})&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;})&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 28 Sep 2018 06:47:00 +0000</pubDate>
<dc:creator>xiaoleilei</dc:creator>
<og:description>从 1.4.0 开始，change事件返回detail中包含一个source字段，表示导致变更的原因，可能值如下： autoplay 自动播放导致swiper变化；tou</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoleidiv/p/9718513.html</dc:identifier>
</item>
</channel>
</rss>