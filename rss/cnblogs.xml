<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>.NET Core微服务之基于Steeltoe使用Eureka实现服务注册与发现 - Edison Chou</title>
<link>http://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_eureka.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_eureka.html</guid>
<description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Tip:&lt;/strong&gt; &lt;/em&gt;此篇已加入&lt;a title=&quot;find more ?&quot; href=&quot;https://www.cnblogs.com/edisonchou/p/dotnetcore_microservice_foundation_blogs_index.html&quot; target=&quot;_blank&quot;&gt;.NET Core微服务基础系列文章索引&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180919235133518-2073525781.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Steeltoe的官方地址：&lt;a href=&quot;http://steeltoe.io/&quot; target=&quot;_blank&quot;&gt;http://steeltoe.io/&lt;/a&gt;，其官方介绍如下：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Steeltoe is an open source project that enables .NET developers to implement industry standard best practices when building resilient microservices for the cloud. The Steeltoe client libraries enable .NET Core and .NET Framework apps to easily leverage Netflix Eureka, Hystrix, Spring Cloud Config Server, and Cloud Foundry services.　　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　我们主要关注的就是这句话：&lt;em&gt;enable .NET Core and .NET Framework apps to easily leverage Netflix Eureka, Hystrix, Spring Cloud Config Server, and Cloud Foundry services  &lt;strong&gt;=&amp;gt;&lt;/strong&gt;&lt;/em&gt; 可以使我们的.NET/.NET Core应用程序轻松地使用Spring Cloud的一些核心组件如Eureka、Hystrix、Config Server以及云平台服务（例如PCF）。这里也可以看出，目前Steeltoe的客户端也仅仅支持轻松使用这几个组件而已。&lt;/p&gt;
&lt;p&gt;　　Spring Cloud是一个基于Java的成熟的微服务全家桶架构，它为配置管理、服务发现、熔断器、智能路由、微代理、控制总线、分布式会话和集群状态管理等操作提供了一种简单的开发方式，已经在国内众多大中小型的公司有实际应用案例。许多公司的业务线全部拥抱Spring Cloud，部分公司选择部分拥抱Spring Cloud。有关Spring Cloud的更多内容，有兴趣的可以浏览我的这一篇《&lt;a href=&quot;https://www.cnblogs.com/edisonchou/p/java_spring_cloud_foundation_sample_list.html&quot; target=&quot;_blank&quot;&gt;Spring Cloud微服务架构学习笔记与基础示例&lt;/a&gt;》，这里不是本文重点，不再赘述。&lt;/p&gt;

&lt;p&gt;　　（1）使用IDE （我使用的是IntelljIdea）新建一个Spring Boot应用程序&lt;/p&gt;
&lt;p&gt;　　（2）pom.xml中增加Spring Cloud的依赖和Eureka的starter&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- eureka server --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka-server&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;!-- spring cloud dependencies --&amp;gt;
    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;Edgware.SR3&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（3）在启动类上添加EnableEurekaServer注解&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
@EnableEurekaServer
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EurekaServiceApplication {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(EurekaServiceApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　（4）必要的Eureka配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  application:
    name: eureka&lt;/span&gt;-&lt;span&gt;server

server:
  port: &lt;/span&gt;8761&lt;span&gt;

eureka:
  server:
    enable&lt;/span&gt;-self-preservation: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;          # 本地调试环境下关闭自我保护机制
    eviction&lt;/span&gt;-interval-timer-in-ms: 5000&lt;span&gt;      # 清理间隔时间，单位为毫秒
  instance:
    hostname: localhost
    #prefer&lt;/span&gt;-ip-address: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  client:
    register&lt;/span&gt;-with-eureka: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
    fetch&lt;/span&gt;-registry: &lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;em&gt;&lt;strong&gt;PS&lt;/strong&gt;&lt;/em&gt;：这里关闭了Eureka的自我保护机制，是因为可以让我们方便地看到服务被移除的效果。至于Eureka的自我保护机制，这是因为Eureka考虑到生产环境中可能存在的网络分区故障，会导致微服务与Eureka Server之间无法正常通信。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。关于自我保护机制，更多内容可以参考：《&lt;a href=&quot;https://blog.csdn.net/zhxdick/article/details/79153106&quot; target=&quot;_blank&quot;&gt;Spring Cloud Eureka全解之自我保护机制&lt;/a&gt;》　&lt;/p&gt;
&lt;p&gt;　　（5）启动项目，效果如下图所示：暂时无任何服务注册到该Eureka Server中&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180920165957961-1856538053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.1 快速准备几个ASP.NET Core WebAPI&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180920171014967-2136781473.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2 安装Steeltoe服务发现客户端并启用&lt;/h2&gt;
&lt;p&gt;　　分别对三个WebAPI通过Nuget安装服务发现.NET Core客户端（目前最新版本是2.1.0）：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PM&amp;gt; Install-Package Pivotal.Discovery.ClientCore　　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　按照惯例，需要在启动类中启用该客户端：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Steeltoe Discovery Client service&lt;/span&gt;
&lt;span&gt;&lt;strong&gt;        services.AddDiscoveryClient(Configuration);&lt;/strong&gt;
        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseMvc();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Steeltoe Discovery Client service&lt;/span&gt;
&lt;span&gt;&lt;strong&gt;        app.UseDiscoveryClient();&lt;/strong&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.3 Eureka Client必要配置&lt;/h2&gt;
&lt;p&gt;　　分别对三个WebAPI进行如下配置（appSettings.json），下面以agent-service为例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spring&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;agent-service&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  },
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;eureka&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;serviceUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:8761/eureka/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shouldFetchRegistry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;validateCertificates&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;instance&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;8010&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;preferIpAddress&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;instanceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;agent-service-container:8010&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;em&gt;&lt;strong&gt;PS&lt;/strong&gt;&lt;/em&gt;：更多配置属性的说明，请参考：&lt;a href=&quot;http://steeltoe.io/docs/steeltoe-discovery/&quot; target=&quot;_blank&quot;&gt;http://steeltoe.io/docs/steeltoe-discovery/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　此外，如果想启用Steeltoe的日志，看到更多调试信息，可以加上以下配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IncludeScopes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogLevel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Pivotal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Steeltoe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.4 加入服务消费示例代码&lt;/h2&gt;
&lt;p&gt;　　这里假设其中的一个premium-service需要调用client-service的一个API接口，于是编写了一个clientservice去消费API。这里借助一个加入了DiscoveryHttpClientHandler的HttpClient来进行目标地址的解析和请求，具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ClientService : IClientService
    {
        DiscoveryHttpClientHandler _handler;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; API_GET_CLIENT_NAME_URL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://client-service/api/values&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ILogger&amp;lt;ClientService&amp;gt;&lt;span&gt; _logger;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ClientService(IDiscoveryClient client, ILoggerFactory logFactory = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            _handler &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DiscoveryHttpClientHandler(client);
            _logger &lt;/span&gt;= logFactory?.CreateLogger&amp;lt;ClientService&amp;gt;&lt;span&gt;();
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; HttpClient GetClient()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt; HttpClient(_handler, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; client;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; GetClientName(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; clientId)
        {
            _logger&lt;/span&gt;?.LogInformation(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetClientName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client =&lt;span&gt; GetClient();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt; client.GetStringAsync($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{API_GET_CLIENT_NAME_URL}/{clientId}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在实际请求中，会先从Eureka取得client-service所对应的IP和端口，然后解析为一个真实的访问URL再得到最终的消费结果。而这里这个GetClientName实际的返回结果很简单，就返回一个字符串：“Edison Zhou”。&lt;/p&gt;

&lt;h2&gt;4.1 启动三个WebAPI，查看服务是否注册到Eureka&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180920173123942-2143310225.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，三个服务均已成功注册到Eureka Server。&lt;/p&gt;
&lt;h2&gt;4.2 关闭Agent-Service，查看Eureka Server是否移除该服务&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180920173500102-1866283330.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，Agent-Service已被Eureka移除。&lt;/p&gt;
&lt;h2&gt;4.3 启动多个Client-Service实例，查看Eureka Server服务列表&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180920173942686-1977951070.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，Client-Service的两个实例都已注册。&lt;/p&gt;
&lt;h2&gt;4.4 从Premium-Service消费Client-Service，验证是否能成功消费&lt;/h2&gt;
&lt;p&gt;　　第一次调用：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180920175919356-1438729391.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　第二或第三次调用：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/381412/201809/381412-20180920175925718-2075146923.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，客户端每次（不一定是每次）解析得到的都是服务集群中的不同实例节点，因此也就实现了类似于Ribbon的客户端的负载均衡效果。&lt;/p&gt;

&lt;p&gt;　　本文简单地介绍了一下Steeltoe与Spring Cloud，然后演示了一下基于Steeltoe使得ASP.NET Core应用程序与Spring Cloud Eureka进行集成以实现服务注册与发现的效果。更多内容，请参考Steeltoe&lt;a href=&quot;http://steeltoe.io/docs/&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;或&lt;a href=&quot;https://github.com/SteeltoeOSS/Samples&quot; target=&quot;_blank&quot;&gt;示例项目&lt;/a&gt;。对于已有Spring Cloud微服务架构环境的项目，如果想要ASP.NET Core微服务与Java Spring Boot微服务一起共享Spring Cloud Eureka来提供服务，基于Steeltoe是一个选择（虽然觉得不是最优，毕竟是寄居）。&lt;/p&gt;

&lt;p&gt;　　点击这里 =&amp;gt; &lt;a href=&quot;https://github.com/EdisonChou/Microservice.PoC.Steeltoe&quot; target=&quot;_blank&quot;&gt;https://github.com/EdisonChou/Microservice.PoC.Steeltoe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Steeltoe官方文档：《&lt;a href=&quot;http://steeltoe.io/docs/&quot; target=&quot;_blank&quot;&gt;Steeltoe Doc&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;Steeltoe官方示例：&lt;a href=&quot;https://github.com/SteeltoeOSS/Samples&quot; target=&quot;_blank&quot;&gt;https://github.com/SteeltoeOSS/Samples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;蟋蟀，《&lt;a href=&quot;https://www.cnblogs.com/xishuai/p/steeltoe-and-spring-cloud-eureka-config-hystrix.html&quot; target=&quot;_blank&quot;&gt;.NET Core 微服务架构 Steeltoe的使用&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;nerocloud，《&lt;a href=&quot;https://www.cnblogs.com/wangyunjie/p/9168304.html&quot; target=&quot;_blank&quot;&gt;Spring Cloud 和 .NET Core 实现微服务架构&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;龙应辉，《&lt;a href=&quot;http://www.cnblogs.com/longxianghui/p/7561259.html&quot; target=&quot;_blank&quot;&gt;Spring Cloud + .NET Core 搭建微服务架构&lt;/a&gt;》&lt;/p&gt;

&lt;div id=&quot;Copyright&quot; readability=&quot;8.2242990654206&quot;&gt;
&lt;p&gt;作者：&lt;a title=&quot;author&quot; href=&quot;http://www.edisonchou.cn&quot; target=&quot;_blank&quot;&gt;周旭龙&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;出处：&lt;a title=&quot;from&quot; href=&quot;http://edisonchou.cnblogs.com&quot; target=&quot;_blank&quot;&gt;http://edisonchou.cnblogs.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 16:23:00 +0000</pubDate>
<dc:creator>Edison Chou</dc:creator>
<og:description>Tip: 此篇已加入.NET Core微服务基础系列文章索引 一、关于Steeltoe与Spring Cloud Steeltoe的官方地址：http://steeltoe.io/，其官方介</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edisonchou/p/dotnet_core_microservice_integrate_with_springcloud_eureka.html</dc:identifier>
</item>
<item>
<title>职场篇:失败之后 - 范存威</title>
<link>http://www.cnblogs.com/fancunwei/p/9684039.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fancunwei/p/9684039.html</guid>
<description>&lt;p&gt;&lt;span&gt;当我写下这个题目之后，我想到了一首歌词&quot;长大以后，我只能奔跑，我多害怕 黑暗中跌倒 &quot;，我不由得哼起这首歌，一种心痛孜然而生。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我也想到了一本小说《飞升之后》，讲述主人公飞升后，见证了太古人族苦难奋斗史，&quot;一念轮回君千殇&quot;，多少悲歌如泣史诗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;各种各样的压力让我们每天都面临着抉择，面临着不断失败。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;编程问题&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;为了追求所谓的进步，我们不断的尝试各种新技术，踩了各种各样的坑，耗费了大量时间。组件依赖，版本地狱，令人防不胜防。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就比如今天的一个例子:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我用restsharp请求了一个webapi，提示未识别的类型。我用postman又能测试通过。这大概猜测是restsharp哪里设置不对。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是用我的Csharpfandemo之前建好的webapi调试，正好我之前写过一篇.netcore webapi接收原始参数正文。调试发现contenttype是text/xml，我重新看了下restsharp的AddBody方法，介绍说默认是xml类型，这就坑了。于是使用了AddJsonBody后功能正常。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就这么简单的一个问题，耽搁了我两个小时，真是浪费时间，不过最终也解决了。最让我觉得坑的是header里加了json，调用addbody还会覆盖掉type，也真是厉害了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;沟通问题&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;当我拿这个分享给同事时，他说这很明显啊，type是服务端决定的，客户端有addjsonbody肯定用这个啊。哎，我分享的心情瞬间没有了，好像我犯了个很愚蠢的错误一样，就没有继续聊了。调用addbody，却自动覆盖掉header信息，这合理么？也许是不熟造成的误解吧！我本来还打算整理一番，写一篇博文出来，经此沟通，我取消了计划。换个方法就搞定的事，真的需要再浪费一堆时间去整理么？&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;曾经的找工作问题&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;每个人都会找工作，也总会面试好多家。失败的那些家，也许给你造成了忧伤，造成了打击。不过还好，知道补充所短，再下一家继续面试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以前面试中听过几个有意思的话语:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一，做销售，是销售自己。产品都是一样的，只有你表现的好，让客户信任你，产品就成功了一半。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二，平台的重要性。有的人全能的制造了一把步枪，有的合伙制作了手榴弹，有的人基于平台制作了导弹。也许他们耗的时间相同，但导弹的威力更大。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;失败的面试也能获取一堆段子手。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当我们未达成预定目标失败了，情绪必然低落。这时候不要心灰意冷，换个方向，你可能重焕新春，不信你瞧！&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;韬光养晦&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;失败了有可能是积累或见识不足，调整思绪，继续充实，韬光养晦，以期未来再度杨帆。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;探索经验&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;失败了有可能是你在探索新的方向，旺盛的精力，不知疲倦。这时候可以稍微停下脚步，总结下经验，做适度调整，再以饱满的热情出发。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;及时止损&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;有些失败可能已经消耗了你大量的时间与金钱以及社会人脉，又不见任何收益，未来也看不到希望。这时候需要考虑止损了，防止拖下泥潭。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;求其上得其中&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;目标是远大的，现实是残酷的，能完成目标的一大半，有时也是一个良好的结果。不要妄自菲薄。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我已经错过写这篇文章的最佳时刻，文为心声，时机是非常非常重要！可惜被各种事情耽误，现在才来补写，达不到我顺畅的感觉，有点为赋新词强说愁的感觉。我个人十分不满意！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本篇到此结束，感谢观看。&lt;/span&gt;&lt;/p&gt;
&lt;br/&gt;</description>
<pubDate>Thu, 20 Sep 2018 15:40:00 +0000</pubDate>
<dc:creator>范存威</dc:creator>
<og:description>前言 当我写下这个题目之后，我想到了一首歌词&quot;长大以后，我只能奔跑，我多害怕 黑暗中跌倒 &quot;，我不由得哼起这首歌，一种心痛孜然而生。 我也想到了一本小说《飞升之后》，讲述主人公飞升</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fancunwei/p/9684039.html</dc:identifier>
</item>
<item>
<title>高并发第八弹:J.U.C起航(java.util.concurrent) - 爱呼吸的鱼</title>
<link>http://www.cnblogs.com/aihuxi/p/9683805.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aihuxi/p/9683805.html</guid>
<description>&lt;p&gt;&lt;span&gt;java.util.concurrent是JDK自带的一个并发的包主要分为&lt;/span&gt;以下5部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;并发工具类(tools)&lt;/li&gt;
&lt;li&gt;显示锁(locks)&lt;/li&gt;
&lt;li&gt;原子变量类(aotmic)&lt;/li&gt;
&lt;li&gt;并发集合(collections)&lt;/li&gt;
&lt;li&gt;Executor线程执行器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们今天就说说 &lt;span&gt;并发集合,&lt;span&gt;除开 Queue,放在线程池的时候讲&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20170511224224443?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGFuZ3hpbWluZzEyMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;379&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先介绍以下 CopyOnWrite:&lt;/p&gt;
&lt;p&gt;Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到 .&lt;/p&gt;
&lt;p&gt;CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CopyOnWriteArrayList&amp;lt;E&amp;gt;
    &lt;span&gt;implements&lt;/span&gt; List&amp;lt;E&amp;gt;&lt;span&gt;, RandomAccess, Cloneable, java.io.Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 8673264195747942595L&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; The lock protecting all mutators &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; ReentrantLock lock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ReentrantLock();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; The array, accessed only via getArray/setArray. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; Object[] array;

............................&lt;br/&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; add(E e) {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; ReentrantLock lock = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.lock;
        lock.lock();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Object[] elements &lt;/span&gt;=&lt;span&gt; getArray();//获取当前数组数据
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; elements.length;
            Object[] newElements &lt;/span&gt;= Arrays.copyOf(elements, len + 1&lt;span&gt;); //复制当前数组并且扩容+1
            newElements[len] &lt;/span&gt;=&lt;span&gt; e;
            setArray(newElements);//将原来的数组指向新的数组
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            lock.unlock();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面这篇文章验证了CopyOnWriteArrayList和同步容器的性能：&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://blog.csdn.net/wind5shy/article/details/5396887&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/wind5shy/article/details/5396887&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　下面这篇文章简单描述了CopyOnWriteArrayList的使用：&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://blog.csdn.net/imzoer/article/details/9751591&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/imzoer/article/details/9751591&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因为 网友总结的优缺点是:&lt;/p&gt;
&lt;div&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;缺点： &lt;br/&gt;1.写操作时复制消耗内存，如果元素比较多时候，容易导致young gc 和full gc。 &lt;br/&gt;2.不能用于实时读的场景.由于复制和add操作等需要时间，故读取时可能读到旧值。 &lt;br/&gt;能做到最终一致性，但无法满足实时性的要求，更适合读多写少的场景。 &lt;br/&gt;如果无法知道数组有多大，或者add,set操作有多少，慎用此类,在大量的复制副本的过程中很容易出错。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;设计思想： &lt;br/&gt;1.读写分离 &lt;br/&gt;2.最终一致性 &lt;br/&gt;3.使用时另外开辟空间，防止并发冲突&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;这个还真是主要是针对 读多的条件.毕竟写一个就要开辟一个空间.太耗资源了.其实还是建议用手动的方式来控制集合的并发.&lt;/p&gt;
&lt;h4&gt;1. ArrayList –&amp;gt; CopyOnWriteArrayList&lt;/h4&gt;
&lt;p&gt;它相当于线程安全的&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3308556.html&quot;&gt;ArrayList&lt;/a&gt;。和ArrayList一样，它是个可变数组；但是和ArrayList不同的时，它具有以下特性：&lt;br/&gt;1. 它最适合于具有以下特征的应用程序：List 大小通常保持很小，只读操作远多于可变操作，需要在遍历期间防止线程间的冲突。&lt;br/&gt;2. 它是线程安全的。&lt;br/&gt;3. 因为通常需要复制整个基础数组，所以可变操作（add()、set() 和 remove() 等等）的开销很大。&lt;br/&gt;4. 迭代器支持hasNext(), next()等不可变操作，但不支持可变 remove()等操作。&lt;br/&gt;5. 使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。&lt;/p&gt;
&lt;h4&gt; 2. HashSet –&amp;gt; CopyOnWriteArraySet&lt;/h4&gt;
&lt;p&gt;它是线程安全的无序的集合，可以将它理解成线程安全的&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3311252.html&quot;&gt;HashSet&lt;/a&gt;。有意思的是，CopyOnWriteArraySet和HashSet虽然都继承于共同的父类AbstractSet；但是，HashSet是通过&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3310835.html&quot;&gt;“散列表&lt;/a&gt;(HashMap)”实现的，而CopyOnWriteArraySet则是通过“&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3498483.html&quot;&gt;动态数组(CopyOnWriteArrayList)&lt;/a&gt;”实现的，并不是散列表。&lt;br/&gt;和CopyOnWriteArrayList类似，CopyOnWriteArraySet具有以下特性：&lt;br/&gt;1. 它最适合于具有以下特征的应用程序：Set 大小通常保持很小，只读操作远多于可变操作，需要在遍历期间防止线程间的冲突。&lt;br/&gt;2. 它是线程安全的。&lt;br/&gt;3. 因为通常需要复制整个基础数组，所以可变操作（add()、set() 和 remove() 等等）的开销很大。&lt;br/&gt;4. 迭代器支持hasNext(), next()等不可变操作，但不支持可变 remove()等 操作。&lt;br/&gt;5. 使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。&lt;/p&gt;

&lt;h3&gt;SkipList 跳表:先介绍这个吧&lt;/h3&gt;
&lt;p&gt;介绍的很详细 &lt;a href=&quot;https://blog.csdn.net/sunxianghuang/article/details/52221913&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/sunxianghuang/article/details/52221913&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更优秀的 :&lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3498556.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/skywang12345/p/3498556.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;总结起来就是:&lt;/p&gt;
&lt;p&gt;　　传统意义的单链表是一个线性结构，向有序的链表中插入一个节点需要O(n)的时间，查找操作需要O(n)的时间&lt;/p&gt;
&lt;p&gt;　　跳表查找的复杂度为O(n/2)。跳跃表其实也是一种通过“空间来换取时间”的一个算法，通过在每个节点中增加了向前的指针，从而提升查找的效率。&lt;/p&gt;

&lt;p&gt;先以数据“7,14,21,32,37,71,85”序列为例，来对跳表进行简单说明。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;121&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跳表分为许多层(level)，每一层都可以看作是数据的索引，这些索引的意义就是加快跳表查找数据速度。每一层的数据都是有序的，上一层数据是下一层数据的子集，并且第一层(level 1)包含了全部的数据；层次越高，跳跃性越大，包含的数据越少。&lt;br/&gt;跳表包含一个表头，它查找数据时，是从上往下，从左往右进行查找。现在“需要找出值为32的节点”为例，来对比说明跳表和普遍的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况1：链表中查找“32”节点&lt;/strong&gt;&lt;br/&gt;路径如下图1-02所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222059-f01604b1b24d429e940f7a002947c143.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222059-f01604b1b24d429e940f7a002947c143.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;24&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要4步(红色部分表示路径)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情况2：跳表中查找“32”节点&lt;/strong&gt;&lt;br/&gt;路径如下图1-03所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;121&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;忽略索引垂直线路上路径的情况下，只需要2步(红色部分表示路径)。&lt;/p&gt;
&lt;p&gt;先以数据“7,14,21,32,37,71,85”序列为例，来对跳表进行简单说明。&lt;/p&gt;
&lt;p&gt;跳表分为许多层(level)，每一层都可以看作是数据的索引，这些索引的意义就是加快跳表查找数据速度。每一层的数据都是有序的，上一层数据是下一层数据的子集，并且第一层(level 1)包含了全部的数据；层次越高，跳跃性越大，包含的数据越少。&lt;br/&gt;跳表包含一个表头，它查找数据时，是从上往下，从左往右进行查找。现在“需要找出值为32的节点”为例，来对比说明跳表和普遍的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况1：链表中查找“32”节点&lt;/strong&gt;&lt;br/&gt;路径如下图1-02所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222059-f01604b1b24d429e940f7a002947c143.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222059-f01604b1b24d429e940f7a002947c143.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;24&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要4步(红色部分表示路径)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情况2：跳表中查找“32”节点&lt;/strong&gt;&lt;br/&gt;路径如下图1-03所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot;&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog/497634/201312/30222128-045c88b7e992443395a540ba2eb740f3.jpg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;121&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;忽略索引垂直线路上路径的情况下，只需要2步(红色部分表示路径)。&lt;/p&gt;
&lt;h4&gt;3. TreeMap –&amp;gt; ConcurrentSkipListMap&lt;/h4&gt;
&lt;p&gt;下面说说Java中ConcurrentSkipListMap的数据结构。&lt;br/&gt;(01) ConcurrentSkipListMap继承于AbstractMap类，也就意味着它是一个哈希表。&lt;br/&gt;(02) Index是ConcurrentSkipListMap的内部类，它与“跳表中的索引相对应”。HeadIndex继承于Index，ConcurrentSkipListMap中含有一个HeadIndex的对象head，head是“跳表的表头”。&lt;br/&gt;(03) Index是跳表中的索引，它包含“右索引的指针(right)”，“下索引的指针(down)”和“哈希表节点node”。node是Node的对象，Node也是ConcurrentSkipListMap中的内部类。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Special value used to identify base-level header
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object BASE_HEADER = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 跳表的最顶层索引
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; HeadIndex&amp;lt;K,V&amp;gt;&lt;span&gt; head;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 
      * 比较器用于维护此映射中的顺序，或者如果使用自然排序，则为空。（非私有的，以
      * 简化嵌套类中的访问）。
     * 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Comparator&amp;lt;? &lt;span&gt;super&lt;/span&gt; K&amp;gt;&lt;span&gt; comparator;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Lazily initialized key set &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;懒惰初始化密钥集&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; KeySet&amp;lt;K&amp;gt;&lt;span&gt; keySet;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Lazily initialized entry set &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; EntrySet&amp;lt;K,V&amp;gt;&lt;span&gt; entrySet;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Lazily initialized values collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Values&amp;lt;V&amp;gt;&lt;span&gt; values;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt; Lazily initialized descending key set &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码我也没精力去详勘了.就总结一下&lt;/p&gt;

&lt;h4&gt;4. TreeSet –&amp;gt; ConcurrentSkipListSet&lt;/h4&gt;
&lt;p&gt;(01) ConcurrentSkipListSet继承于AbstractSet。因此，它本质上是一个集合。&lt;br/&gt;(02) ConcurrentSkipListSet实现了NavigableSet接口。因此，ConcurrentSkipListSet是一个有序的集合。&lt;br/&gt;(03) ConcurrentSkipListSet是通过ConcurrentSkipListMap实现的。它包含一个ConcurrentNavigableMap对象m，而m对象实际上是ConcurrentNavigableMap的实现类ConcurrentSkipListMap的实例。ConcurrentSkipListMap中的元素是key-value键值对；而ConcurrentSkipListSet是集合，它只用到了ConcurrentSkipListMap中的key！&lt;/p&gt;
&lt;p&gt;(4)同其他set集合，是基于map集合的（基于ConcurrentSkipListMap），在多线程环境下，里面的contains、add、remove操作都是线程安全的。&lt;/p&gt;
&lt;p&gt; (5)多个线程可以安全的并发的执行插入、移除、和访问操作。但是对于批量操作addAll、removeAll、retainAll和containsAll并不能保证以原子方式执行，原因是addAll、removeAll、retainAll底层调用的还是　 contains、add、remove方法，只能保证每一次的执行是原子性的，代表在单一执行操纵时不会被打断，但是不能保证每一次批量操作都不会被打断。在使用批量操作时，还是需要手动加上同步操作的。&lt;/p&gt;
&lt;p&gt;(6)不允许使用null元素的，它无法可靠的将参数及返回值与不存在的元素区分开来。&lt;/p&gt;

&lt;h4&gt;5.  HashMap –&amp;gt; ConcurrentHashMap&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;不允许空值，在实际的应用中除了少数的插入操作和删除操作外，绝大多数我们使用map都是读取操作。而且读操作大多数都是成功的。基于这个前提，它针对读操作做了大量的优化。因此这个类在高并发环境下有特别好的表现。&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap作为Concurrent一族，其有着高效地并发操作，相比Hashtable的笨重，ConcurrentHashMap则更胜一筹了。&lt;/li&gt;
&lt;li&gt;在1.8版本以前，ConcurrentHashMap采用分段锁的概念，使锁更加细化，但是1.8已经改变了这种思路，而是利用CAS+Synchronized来保证并发更新的安全，当然底层采用数组+链表+红黑树的存储结构。&lt;/li&gt;
&lt;li&gt;源码分析：推荐参考chenssy的博文：&lt;a href=&quot;https://blog.csdn.net/chenssy/article/details/73521950&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;J.U.C之Java并发容器：ConcurrentHashMap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;安全共享对象策略&quot;&gt;安全共享对象策略&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;线程限制：一个被线程限制的对象，由线程独占，并且只能被占有它的线程修改&lt;/li&gt;
&lt;li&gt;共享只读：一个共享只读的U帝乡，在没有额外同步的情况下，可以被多个线程并发访问，但是任何线程都不能修改它&lt;/li&gt;
&lt;li&gt;线程安全对象：一个线程安全的对象或者容器，在内部通过同步机制来保障线程安全，多以其他线程无需额外的同步就可以通过公共接口随意访问他&lt;/li&gt;
&lt;li&gt;被守护对象：被守护对象只能通过获取特定的锁来访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不好意思 虎头蛇尾了.实在扛不住了&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:33:00 +0000</pubDate>
<dc:creator>爱呼吸的鱼</dc:creator>
<og:description>java.util.concurrent是JDK自带的一个并发的包主要分为以下5部分： 并发工具类(tools) 显示锁(locks) 原子变量类(aotmic) 并发集合(collections)</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aihuxi/p/9683805.html</dc:identifier>
</item>
<item>
<title>java之常量折叠 - 养码青年</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9683990.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9683990.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;为什么会写着篇博客，因为昨天看了关于final关键字的解析。但是有个问题始终没有得到解决，于是请教了我qq上之前添加的知乎大神。他给我回复的第一条消息：&lt;strong&gt;常量折叠&lt;/strong&gt;。身为渣渣猿的我立马查询了这个概念。这是第一次知道这个概念。知乎大神还给我讲了好多。让我终于明白了这个常量折叠的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实例解析&quot;&gt;实例解析&lt;/h3&gt;
&lt;p&gt;昨天，让我迷惑的代码是下面这段代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {

        String a = &quot;hello2&quot;;
        final String b = &quot;hello&quot;;
        String d = &quot;hello&quot;;
        String c = b + 2;
        String e = d + 2;
        System.out.println((a == c));
        System.out.println((a == e));

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段的执行结果是&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;true
false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我就是不明白为什么第一个返回&lt;code&gt;true&lt;/code&gt;呢？&lt;/p&gt;
&lt;p&gt;留着这个疑问，我们先了解下常量折叠的概念。来更好的理解上面的代码&lt;/p&gt;
&lt;h3 id=&quot;常量折叠&quot;&gt;常量折叠&lt;/h3&gt;
&lt;h4 id=&quot;常量折叠的概念&quot;&gt;常量折叠的概念&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;常量折叠是一种&lt;code&gt;编译器优化&lt;/code&gt;技术。&lt;/li&gt;
&lt;li&gt;常量折叠主要指的是&lt;code&gt;编译期常量&lt;/code&gt;加减乘除的运算过程会被折叠&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于 String s1 = &quot;1&quot; + &quot;2&quot;;&lt;br/&gt;编译器会给你优化成 String s1 = &quot;12&quot;;&lt;br/&gt;在生成的字节码中，根本看不到 &quot;1&quot; &quot;2&quot; 这两个东西。&lt;/p&gt;
&lt;p&gt;我们通过idea进行验证下&lt;/p&gt;
&lt;p&gt;1、源码文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String s1 = &quot;1&quot;+&quot;2&quot;;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、运行后，idea有个out文件夹，找到上面文件的class文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String s1 = &quot;12&quot;;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;确实如上面所说，编译器会给你进行优化&lt;/p&gt;
&lt;h4 id=&quot;常量折叠发生的条件&quot;&gt;常量折叠发生的条件&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;必须是&lt;strong&gt;编译期常量之间&lt;/strong&gt;进行运算才会进行常量折叠。&lt;/li&gt;
&lt;li&gt;编译期常量就是&lt;strong&gt;“编译的时候就可以确定其值的常量”&lt;/strong&gt;，
&lt;ul&gt;&lt;li&gt;首先：字面量是&lt;code&gt;编译期常量&lt;/code&gt;。（数字字面量，字符串字面量等）&lt;/li&gt;
&lt;li&gt;其次：编译期常量进行&lt;code&gt;简单运算的结果&lt;/code&gt;也是&lt;code&gt;编译期常量&lt;/code&gt;，如1+2，&quot;a&quot;+&quot;b&quot;。&lt;/li&gt;
&lt;li&gt;最后：被编译器常量&lt;code&gt;赋值的 final 的基本类型和字符串变量&lt;/code&gt;也是编译期常量。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;举个栗子&quot;&gt;举个栗子&lt;/h4&gt;
&lt;p&gt;1.第一个栗子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String s1=&quot;a&quot;+&quot;bc&quot;;
        String s2=&quot;ab&quot;+&quot;c&quot;;
        System.out.println(s1 == s2);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相信大家都知道了，输出为&lt;code&gt;true&lt;/code&gt;&lt;br/&gt;并且只创建了一个 &quot;abc&quot; 字符串对象，且位于字符串常量池中。&lt;/p&gt;
&lt;p&gt;2、第二个栗子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String a = &quot;a&quot;;
        String bc = &quot;bc&quot;;
        String s1 = &quot;a&quot; + &quot;bc&quot;;
        String s2 = a + bc;
        System.out.println(s1 == s2);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个结果呢？&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;s1 是字符串字面量相加，但是 s2 却是两个非 final 的变量相加，所以不会进行常量折叠。&lt;/p&gt;
&lt;p&gt;而是根据 String 类特有的 + 运算符重载，变成类似这样的代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;String s2 = new StringBuffer(a).append(b).toString(); &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里toString()会生成新的String变量，显然用 == 运算符比较是会返回 false。&lt;/p&gt;
&lt;p&gt;3、第三个栗子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        final String a = &quot;a&quot;;
        final String bc = &quot;bc&quot;;
        String s1 = &quot;a&quot; + &quot;bc&quot;;
        String s2 = a + bc;
        System.out.println(s1 == s2);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的结果就是&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为 &lt;strong&gt;被编译器常量赋值的 final 的基本类型和字符串变量也是编译期常量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、第四个栗子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public static void main(String[] args) {
        String x =&quot;a&quot;;
        final String a = x;
        final String bc = &quot;bc&quot;;
        String s1 = &quot;a&quot; + &quot;bc&quot;;
        String s2 = a + bc;
        System.out.println(s1 == s2);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的结果是&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意的是：final的变量，不是被编译期常量初始化的也不是编译器常量&lt;/p&gt;
&lt;p&gt;这里的a 就不是编译器常量&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;现在看完，是不是对上面打印的结果为什么是true 知道了呢？&lt;br/&gt;所以。只要牢记&lt;strong&gt;常量折叠主要指的是&lt;code&gt;编译期常量&lt;/code&gt;加减乘除的运算过程会被折叠&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:23:00 +0000</pubDate>
<dc:creator>养码青年</dc:creator>
<og:description>为什么会写着篇博客，因为昨天看了关于final关键字的解析。但是有个问题始终没有得到解决，于是请教了我qq上之前添加的知乎大神。他给我回复的第一条消息： 常量折叠 。身为渣渣猿的我立马查询了这个概念。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9683990.html</dc:identifier>
</item>
<item>
<title>如何打造亚秒级加载的网页1——前端性能 - .智子</title>
<link>http://www.cnblogs.com/mlw1814011067/p/9683919.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mlw1814011067/p/9683919.html</guid>
<description>&lt;p&gt;对于我们前端来说，页面的加载速度是直接影响到用户的体验度&lt;/p&gt;
&lt;p&gt;用户体验度是能直接决定最终的销售额的&lt;/p&gt;
&lt;p&gt;每增加延迟一秒，页面访问量降低11%，转化率降低7%&lt;/p&gt;
&lt;p&gt;如何提高页面的加载速度是前端工程师们必然要懂的&lt;/p&gt;
&lt;p&gt;那么我就来讲解一下可以从哪些方面来提高页面&lt;span&gt;的加载速&lt;/span&gt;度：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;页面加载速度影响因素——前端性能&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;前端性能关键呈现路径所涉及的步骤：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　1 .  DOM：浏览器在解析HTML时，会以递增的方式为HTML标记生成一种名为文档对象模型（DOM）的树状模型，&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　　　　该模型描述了网页中包含的内容&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　2 . CSSOM：浏览器收到所有CSS后，会对其中包含的标记和类生成一种名为CSS对象模型的树状模型，并将样式信息附加在节点上。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　　　　这个树描述了网页中所包含内容需要应用的样式&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　3 . 呈现树（Render Tree）：通过将DOM与CSSOM结合在一起，浏览器可以构造出呈现树，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　　　　其中包含了页面内容以及所要应用的样式信息&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　4 . 布局（Layout）：布局这一步中需要计算网页内容在屏幕上的实际位置和大小&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　5 . 绘制（Paint）：最后一步将使用布局信息在屏幕上绘制像素&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;当然对此我们也是有办法应付的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面列出了各个方面处理性能的方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（1）网页内容 ——  减少HTTP请求次数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 减少DNS查询次数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 避免页面跳转&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 缓冲ajax&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 延迟加载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 提前加载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 减少DOM元素数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 根据域名划分内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 减少iframe数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　 避免404&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2）服务器 —— 使用CDN&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　添加Expires 或 Cache-Control 报文头&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　Gzip 压缩传输文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　配置ETags&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　尽早flush输出&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　使用GET Ajax请求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　避免空的图片src&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　Cookie&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　减少cookie大小&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　页面内容使用无cookie域名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（3） CSS —— 将样式表置顶&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 避免CSS表达式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 用&amp;lt;link&amp;gt;代替@import&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 避免使用Filters&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（4） JavaScript —— 将脚本置底&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　使用外部Javascript 和 Css文件&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　精简Javescript和Css&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　去除重复脚本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　减少DOM访问&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　使用智能事件处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（5） 图片 —— 优化图片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 优化CSS Sprite&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 不要在HTML中缩放图片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 使用小且可缓存的favicon.ico&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 移动客户端&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 保持单个内容小于25KB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　 打包组建成符合文档&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;这就是从前端方面来提高页面的加载速度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然  影响页面加载速度的并不只有前端性能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还会有网络性能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下次更新再来写网络性能了&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 15:06:00 +0000</pubDate>
<dc:creator>.智子</dc:creator>
<og:description>对于我们前端来说，页面的加载速度是直接影响到用户的体验度 用户体验度是能直接决定最终的销售额的 每增加延迟一秒，页面访问量降低11%，转化率降低7% 如何提高页面的加载速度是前端工程师们必然要懂的 那</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mlw1814011067/p/9683919.html</dc:identifier>
</item>
<item>
<title>CSS 小结笔记之伸缩布局（flex） - Assist</title>
<link>http://www.cnblogs.com/Assist/p/9682076.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Assist/p/9682076.html</guid>
<description>&lt;p&gt;之前块级元素布局在同一行，可以通过display或position或float来实现，而本篇介绍一个新的方法——flex（弹性布局）。&lt;/p&gt;
&lt;p&gt;flex 为和模型布局提供了极大地灵活性，所谓弹性布局即可根据大小判定自动伸缩。&lt;/p&gt;
&lt;p&gt;flex相关的各个属性如下：&lt;/p&gt;
&lt;p&gt;1、&lt;em&gt;&lt;strong&gt;display：flex；&lt;/strong&gt;&lt;/em&gt;在父盒子定义flex，子盒子才能使用flex属性&lt;/p&gt;
&lt;p&gt;2、&lt;em&gt;&lt;strong&gt;flex：none |&lt;a&gt;flex-grow &lt;/a&gt; &lt;a&gt;flex-shrink&lt;/a&gt;  &lt;a&gt;flex-basis&lt;/a&gt; &lt;/strong&gt;&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;设置子盒子的缩放比例，可以一起指定也可以单独指定。（均不可为负数）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;（1）none 相当于 flex： 0 0 auto；&lt;/p&gt;
&lt;p&gt;　　（2）flex-grow 用来规定盒子的扩展比率，即盒子相对于其他盒子能够分配到的空间的比值，没有指定flex的不参与分配。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_c8b3b016-7820-4b57-96f6-f80f1ada1405&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c8b3b016-7820-4b57-96f6-f80f1ada1405&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c8b3b016-7820-4b57-96f6-f80f1ada1405&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 800px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-grow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-grow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son4 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-grow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920110548851-582996588.png&quot; alt=&quot;&quot; width=&quot;270&quot; height=&quot;148&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　上面图中子盒子所占大小的计算方法为：&lt;/p&gt;
&lt;p&gt;　　　　a、.son1 没有指定flex 因此不参与分配大小为固定的200px；&lt;/p&gt;
&lt;p&gt;　　　　b、剩下的空间需要减去盒子固有的宽度来继续分配，即可分配空间为&lt;/p&gt;
&lt;p&gt;　　　　　　600-50-30-80=440px&lt;/p&gt;
&lt;p&gt;　　　　c、指定分配的比率为1:2:3 所以各自能分配到的大小为440*（1/6），440*（2/6），440*（3/6）&lt;/p&gt;
&lt;p&gt;　　　　d、最后可得出各个盒子的大小&lt;/p&gt;
&lt;p&gt;　　　　　　.son2: 440*（1/6）+50=123.3px&lt;/p&gt;
&lt;p&gt;　　　　　　.son3: 440*（2/6）+30=176.7px&lt;/p&gt;
&lt;p&gt;　　　　　　.son4: 440*（3/6）+80=300px&lt;/p&gt;
&lt;p&gt;　　（3）、flex-shrink 规定盒子收缩率，一般是在子盒子总体大小超过父盒子情况下，确定各个盒子的缩小比例。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_fd75be54-297f-4275-9b81-5159b7371309&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd75be54-297f-4275-9b81-5159b7371309&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd75be54-297f-4275-9b81-5159b7371309&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-shrink&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-shrink&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-shrink&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920112137446-50730071.png&quot; alt=&quot;&quot; width=&quot;299&quot; height=&quot;179&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　上面图中子盒子所占大小的计算方法为：&lt;/p&gt;
&lt;p&gt;　　　　a、子盒子总体宽度大小为：100+200+300=600px&lt;/p&gt;
&lt;p&gt;　　　　b、超过父盒子 600-400=200px&lt;/p&gt;
&lt;p&gt;　　　　c、收缩比率为：1:2:3 ，则对收缩大小进行加权求值,求出收缩大小&lt;/p&gt;
&lt;p&gt;　　　　　　.son1:  200*[100*1/（1*100+2*200+3*300）]=14px&lt;/p&gt;
&lt;p&gt;　　　　　　.son2:  200*[200*2/（1*100+2*200+3*300）]=57px&lt;/p&gt;
&lt;p&gt;　　　　　 　.son1:  200*[300*3/（1*100+2*200+3*300）]=129px&lt;/p&gt;
&lt;p&gt;　　　　d、最终各个盒子大小为&lt;/p&gt;
&lt;p&gt;　　　　　　.son1: 100-14=86px；&lt;/p&gt;
&lt;p&gt;　　　　　　.son2: 200-57=143px；&lt;/p&gt;
&lt;p&gt;　　　　　　.son3: 300-129=171px；&lt;/p&gt;
&lt;p&gt;　　（4）、flex-basis：长度 |百分比&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_650ef780-ab1b-45f0-8fc3-bde25ff00953&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_650ef780-ab1b-45f0-8fc3-bde25ff00953&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_650ef780-ab1b-45f0-8fc3-bde25ff00953&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 超过按照比例划分 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-basis&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 35%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-basis&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-basis&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920113547357-1537211384.png&quot; alt=&quot;&quot; width=&quot;137&quot; height=&quot;138&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　一般设置不超过盒子大小或者不超过100%，超过100%则按比例分配空间。&lt;/p&gt;
&lt;p&gt;　　　　如上图按7:6:10 来分配，设置为auto，则以自身大小来分配。&lt;/p&gt;
&lt;p&gt;　　（5）、常用复合属性&lt;/p&gt;
&lt;p&gt;　　　　　　flex：1相当于 flex：1 1 0%；&lt;/p&gt;
&lt;p&gt;　　　　　　flex：auto 相当于 flex：1 1 auto；&lt;/p&gt;
&lt;p&gt; 　　　　　　flex：none 相当于 flex：0 0 auto；&lt;/p&gt;
&lt;p&gt;　　　　　　 flex：0 none 或flex：initial  相当于 flex：0 1 auto；&lt;/p&gt;
&lt;p&gt;3、&lt;em&gt;&lt;strong&gt;flex-direction：row | row-reverse | column | column-reverse&lt;/strong&gt; &lt;/em&gt;调整株洲方向，即合适是水平分布还是垂直分布的，默认是水平方向。&lt;/p&gt;
&lt;p&gt;　　上面四个值分别是，水平| 水平反向| 垂直| 垂直反向 &lt;/p&gt;
&lt;p&gt;　　反向的意思是，盒子顺序是相反的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_bd315268-d193-4da2-bcbd-c0d508e3a7fa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bd315268-d193-4da2-bcbd-c0d508e3a7fa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bd315268-d193-4da2-bcbd-c0d508e3a7fa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-direction&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; column-reverse&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son2 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son3 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920114849375-1871635353.png&quot; alt=&quot;&quot; width=&quot;211&quot; height=&quot;211&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;em&gt;&lt;strong&gt;justify-content: flex-start | flex-end | center | space-between | space-around &lt;/strong&gt;&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;子盒子在父盒子中的水平对齐方式。　　　&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;　　flex-start ：默认值，项目向容器起始位置对齐（靠左对齐）&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_b80a2ac4-4c1d-4a69-8402-0fbd797f2a3f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b80a2ac4-4c1d-4a69-8402-0fbd797f2a3f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b80a2ac4-4c1d-4a69-8402-0fbd797f2a3f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            justify-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex-start&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 0 20%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　接下来只将justify-content 值改变，就不重复写代码了，只给出结果图&lt;/p&gt;
　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154557235-1702762149.png&quot; alt=&quot;&quot; width=&quot;208&quot; height=&quot;108&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;　　flex-end：项目向容器结束位置对齐。（靠右对齐）&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154636877-1122512237.png&quot; alt=&quot;&quot; width=&quot;201&quot; height=&quot;117&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;39.5&quot;&gt;
&lt;p&gt;　　center：项目位于容器的中间。（水平居中）　　&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154723047-1251922394.png&quot; alt=&quot;&quot; width=&quot;202&quot; height=&quot;117&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;　　space-between：各个项目中间有空隙，但是开头和结尾紧贴容器（父盒子）&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154816301-1030694346.png&quot; alt=&quot;&quot; width=&quot;206&quot; height=&quot;118&quot;/&gt;&lt;/div&gt;
&lt;p&gt;space-around：各个项目中间有空隙，且空隙距离相同（相当于每个盒子左右给了一个相同的margin值）&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920154913554-1770659470.png&quot; alt=&quot;&quot; width=&quot;213&quot; height=&quot;118&quot;/&gt;&lt;/div&gt;
&lt;p&gt;5、&lt;em&gt;&lt;strong&gt;align-items：flex-start | flex-end | center | baseline | stretch &lt;/strong&gt;&lt;/em&gt; 子盒子在父盒子中的垂直对齐方式&lt;/p&gt;

&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_eeccb13d-a9c0-4b37-baa7-9c9ed5f9a93c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_eeccb13d-a9c0-4b37-baa7-9c9ed5f9a93c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_eeccb13d-a9c0-4b37-baa7-9c9ed5f9a93c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; stretch&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            flex&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 0 20%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162328762-650384822.png&quot; alt=&quot;&quot; width=&quot;144&quot; height=&quot;137&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　同样接下来几种只给出效果图&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　flex-start：上对齐&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162454545-264395622.png&quot; alt=&quot;&quot; width=&quot;185&quot; height=&quot;158&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　flex-end ：下对齐&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162548516-1324242970.png&quot; alt=&quot;&quot; width=&quot;160&quot; height=&quot;140&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　center：垂直居中对齐&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162828357-1199846396.png&quot; alt=&quot;&quot; width=&quot;157&quot; height=&quot;125&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　baseline：与项目的第一行文字的基线对齐，因此当基线在同一条线上时，与flex-start一致&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920162941952-1228370258.png&quot; alt=&quot;&quot; width=&quot;199&quot; height=&quot;197&quot;/&gt;&lt;/div&gt;
&lt;p&gt;6、&lt;strong&gt;flex-wrap：nowrap | wrap | wrap-reverse&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt; 当子盒子大小超过父盒子是是否换行&lt;/p&gt;
&lt;p&gt;　　nowrap：默认值，不换行。强行在一行显示，因此每个盒子的大小都会减少。&lt;/p&gt;
&lt;div readability=&quot;33&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_13c24c9d-321e-452c-8281-e9ce9fad3cd2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_13c24c9d-321e-452c-8281-e9ce9fad3cd2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_13c24c9d-321e-452c-8281-e9ce9fad3cd2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            align-items&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; baseline&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-wrap&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; nowrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(4) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(5) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; greenyellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920163852701-1065269145.png&quot; alt=&quot;&quot; width=&quot;136&quot; height=&quot;135&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　wrap：换行显示。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920164117427-1358510395.png&quot; alt=&quot;&quot; width=&quot;139&quot; height=&quot;127&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　wrap-reverse：换行且倒着显示&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920164201586-2095506863.png&quot; alt=&quot;&quot; width=&quot;121&quot; height=&quot;123&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;strong&gt;&lt;em&gt;flex-flow: flex-direction  flex-wrap; &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;  &lt;/em&gt;flex-flow 是flex-direction 和 flex-wrap 的简写，默认值是flex-flow： row wrap&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;align-content：flex-start | flex-end | center | space-between | space-around | stretch  &lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_70f27434-c9b6-4e67-a282-e15e5f9497f7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_70f27434-c9b6-4e67-a282-e15e5f9497f7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_70f27434-c9b6-4e67-a282-e15e5f9497f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-wrap&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; wrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            align-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; stretch&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; width: 50px; &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(4) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(5) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; greenyellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920165532048-531428214.png&quot; alt=&quot;&quot; width=&quot;116&quot; height=&quot;116&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　flex-start：上对齐&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920165705490-491690849.png&quot; alt=&quot;&quot; width=&quot;150&quot; height=&quot;133&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　flex-end：下对齐&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920165756308-1400276262.png&quot; alt=&quot;&quot; width=&quot;131&quot; height=&quot;119&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　center：居中对齐&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920170105613-970952327.png&quot; alt=&quot;&quot; width=&quot;139&quot; height=&quot;132&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　space-between ：与justify-content中的 space-between类似 最上一行 顶对齐，最下一行 底对齐&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920170342621-1855498015.png&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;118&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　space-around：与justify-content中的 space-around类似 各个行上下有空隙，且空隙距离相同（相当于每行上下给了一个相同的margin值）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920170744294-72114019.png&quot; alt=&quot;&quot; width=&quot;136&quot; height=&quot;133&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9、&lt;em&gt;&lt;strong&gt;order&lt;/strong&gt;&lt;/em&gt;：设置子盒子显示顺序。值取整数，可以为负数，数值越小的排列方向越靠前。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_7742b815-bfa9-4bbf-b985-88505a384627&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7742b815-bfa9-4bbf-b985-88505a384627&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7742b815-bfa9-4bbf-b985-88505a384627&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        .fa &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; flex&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            flex-wrap&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; wrap&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            align-content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; space-between&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; width: 50px; &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; aqua&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(2) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            order&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(3) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deeppink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(4) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            order&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        .son:nth-child(5) &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            order&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; greenyellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;son&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/589641/201809/589641-20180920171148784-951732357.png&quot; alt=&quot;&quot; width=&quot;122&quot; height=&quot;134&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上述的9个属性，其中1、3、4、5、6、7、8是放在容器（父盒子）的属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而2、9是项目(子盒子)的属性&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;





</description>
<pubDate>Thu, 20 Sep 2018 14:19:00 +0000</pubDate>
<dc:creator>Assist</dc:creator>
<og:description>之前块级元素布局在同一行，可以通过display或position或float来实现，而本篇介绍一个新的方法——flex（弹性布局）。 flex 为和模型布局提供了极大地灵活性，所谓弹性布局即可根据大</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Assist/p/9682076.html</dc:identifier>
</item>
<item>
<title>复习面向对象 -- 继承 - 热爱前端的17号诶</title>
<link>http://www.cnblogs.com/sqh17/p/9664882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sqh17/p/9664882.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;本文是面向对象第三部分--继承，相对于前两个，篇幅过长，理解稍微难点，不过多思考多敲敲，会一下子茅塞顿开，就懂了，不太懂面向对象-创建对象的，可以看这篇文章，&lt;a href=&quot;https://www.cnblogs.com/sqh17/p/9664858.html&quot; target=&quot;_blank&quot;&gt;传送门&lt;/a&gt;，不太懂面向对象-原型与原型链的，可以看这篇文章，&lt;a href=&quot;https://www.cnblogs.com/sqh17/p/9664878.html&quot; target=&quot;_blank&quot;&gt;传送门&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;面向对象继承&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;许多语言都支持两种继承方式：&lt;strong&gt;接口继承&lt;/strong&gt;和&lt;strong&gt;实现继承&lt;/strong&gt;。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;接口继承只继承方法签名&lt;/strong&gt;（方法签名由方法名称和一个参数列表（方法的参数的顺序和类型）组成，java所属）。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　而js中的函数没有签名，所以无法实现接口继承，只能实现实现继承，而&lt;strong&gt;实现继承主要依靠原型以及原型链实现的&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　高程中写到：&lt;strong&gt;假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条&lt;/strong&gt;。这就是所谓原型链的基本概念&lt;/p&gt;
&lt;p&gt;　　js的继承是依据原型以及原型链来实现的，回顾前几节的知识，可以得知，&lt;span&gt;一个构造函数创建出来的实例，都可以访问到该构造函数的的属性，方法，还有构造函数的原型的属性以及方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先 先了解构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。&lt;/span&gt;&lt;span&gt;通俗的说：&lt;strong&gt;实例通过内部指针可以访问到原型对象，原型对象通过constructor指针，找到其构造函数。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;那么js中的继承的基本思路就是&lt;/span&gt;&lt;span&gt;&lt;span&gt;利用原型以及原型链的特性，改变内部指针的指向，进而实现继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　&lt;span&gt;原型链继承：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;js所有继承都基于原型链继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'animal'&lt;span&gt;;
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}  
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom','blue'&lt;span&gt;);
console.log(tom.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'tom'&lt;/span&gt;
console.log(tom.color); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'blue'&lt;/span&gt;
console.log(tom.type);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'animal'&lt;/span&gt;
tom.feature()    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'animal'    &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个例子中有创建了两个构造函数，Animal构造函数有一个type属性和feature方法。Cat构造函数有两个属性：name和color。实例化了一个Animal对象，并且挂载到了Cat函数的原型上，相当于重写了Cat的原型，所以Cat函数拥有Animal函数的所有属性和方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　然后又Cat函数new出一个tom对象，tom对象拥有Cat函数的属性和方法，因此也拥有Animal的属性和方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　通过上面的例子，可以总结：&lt;strong&gt;通过改变构造函数的原型，进而实现继承。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　ps:&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　1 如果在继承原型对象之前，产生的实例，其内部指针还是只想最初的原型对象。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'animal'&lt;span&gt;;
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}
Cat.prototype.type &lt;/span&gt;= 'cat'&lt;span&gt;;
Cat.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}    
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom','blue'&lt;span&gt;);
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Animal();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 先实例化对象，再重写原型,结果指针还是指向最初的原型&lt;/span&gt;
console.log(tom.name);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'tom'&lt;/span&gt;
console.log(tom.color); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'blue'&lt;/span&gt;
console.log(tom.type);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'cat'  ----- 是最初的type&lt;/span&gt;
tom.feature()    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'cat'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　从打印结果来看：new出来的tom对象，在Cat.prototype重写原型之后，依然还是指向没重写的原型上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2 在通过原型链实现继承时，不能使用对象字面量创建原型方法。因为这样做就会重写原型链。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'animal'&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = 'small'&lt;span&gt;
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}  
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用字面量添加新方法，会导致上一行代码无效&lt;/span&gt;
Cat.prototype =&lt;span&gt; {
    type:&lt;/span&gt;'cat'&lt;span&gt;,
    feature:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type)
    }
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom','blue'&lt;span&gt;);
console.log(tom.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'tom'&lt;/span&gt;
console.log(tom.color); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'blue'&lt;/span&gt;
console.log(tom.type);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'cat'&lt;/span&gt;
tom.feature()    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'cat'  &lt;/span&gt;
console.log(tom.size)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined   ----- tom拿不到size属性&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由打印结果可知：tom这个对象拿不到将继承的size属性，所以用字面量添加属性或方法，会切断将继承的与实例之间的联系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　原型链继承并不是完美的，用原型链实现继承，&lt;strong&gt;有一定的问题存在&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1 首先 值类型与引用类型在参数传递时，方式是不一样的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　值类型 将值本身拷贝一份赋值给其他变量，若该值发生变化，也不会影响到其他变量。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　引用类型 将指针（内存中的地址）拷贝一份 赋值给其他变量；若内存中的地址内容发生改变，其他变量内的内容也会发生变化。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; a = 11&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; a;

console.log(a,b) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11 11&lt;/span&gt;
b = 22&lt;span&gt;;
console.log(a,b) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11 22&lt;/span&gt;


&lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt;{
    name:&lt;/span&gt;'peter'&lt;span&gt;,
    age:&lt;/span&gt;18&lt;span&gt;
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; m =&lt;span&gt; obj;
console.log(m) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;peter&quot;, age: 18}&lt;/span&gt;
m.name = 'tom'&lt;span&gt;;
m.age &lt;/span&gt;= 22&lt;span&gt;;
console.log(obj) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;tom&quot;, age: 22}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　同样的道理，&lt;strong&gt;在原型链继承中，包含引用类型值的原型属性会被所有实例共享&lt;/strong&gt;，如果某一个实例更改了属性或方法，会影响到原型属性，进而影响所有的实例。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type = 'animal'&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = ['large','small'&lt;span&gt;];
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}  
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom','blue'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; peter = &lt;span&gt;new&lt;/span&gt; Cat('peter','yellow'&lt;span&gt;)
console.log(tom.size);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;]&lt;/span&gt;
tom.size.push('middle'&lt;span&gt;);
console.log(tom.size);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;, &quot;middle&quot;]&lt;/span&gt;
console.log(tom.size);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;, &quot;middle&quot;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　通过打印结果可知，在一个实例添加一个颜色时，同时也影响了其他实例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2 在高程上说还有个问题，在创建子类型（Cat）的实例时，不能向超类型（Animal）的构造函数中传递参数。意思就是&lt;strong&gt;没有办法在不影响所有对象实例的情况下，给超类型（Animal）的构造函数传递参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(type){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.type =&lt;span&gt; type;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = ['large','small'&lt;span&gt;];
}
Animal.prototype.feature &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.type);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(type,name,color){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.color =&lt;span&gt; color;
}  
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('animal','tom','blue'&lt;span&gt;);
console.log(tom.type); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　当给被继承的构造函数传参数时，发现为undefined，所以原型链继承无法传参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因此原型链继承有这两个问题，所以在实践中很少使用原型链继承。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　借用构造函数继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　借用构造函数继承的基本思想：就是在子类型构造函数的内部使用 apply() 和 call() 方法调用超类型构造函数里的属性或方法。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;ps：函数只不过是在特定环境中执行代码的对象&lt;/span&gt;&lt;span&gt;，因此通过使用 apply() 和 call() 方法也可以在（将来）新创建的对象上执行构造函数。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = [&quot;large&quot;, &quot;small&quot;&lt;span&gt;];
}
Animal.prototype.say &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,age){
    Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;

}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom',18&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; peter = &lt;span&gt;new&lt;/span&gt; Cat('peter',22&lt;span&gt;);
console.log(tom); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;tom&quot;, size: Array[2], age: 18};&lt;/span&gt;
console.log(peter); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;peter&quot;, size: Array[2], age: 22};&lt;/span&gt;
&lt;span&gt;
tom.size.push(&lt;/span&gt;'middle'&lt;span&gt;);
console.log(tom.size);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;, &quot;middle&quot;]&lt;/span&gt;
console.log(peter.size); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;]&lt;/span&gt;
&lt;span&gt;
tom.say();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Uncaught TypeError: tom.say is not a function&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由上述打印的结果，我们可以得出以下结论：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;strong&gt;1&lt;/strong&gt; 可以往超类型（Animal）传参数，Animal可以接受一个参数，将参数赋值给一个属性，所以在Cat构造函数内部调用Animal时，就是给Cat的实例设置该属性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;ps：为了确保Animal 构造函数不会重写Cat的属性，可以在调用超类型构造函数后，再添加应该在子类型中。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,age){
    Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = 'jerry'; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果该属性写在Animal.call(this,name);之前的话，没有作用，还是被调用的给覆盖了&lt;/span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;2&lt;/strong&gt; 因为是子类型调用超类型，所以每个子类型调用的都是超类型的初始化的属性或内部方法。每个实例都互不影响。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;3&lt;/strong&gt; 超类型的原型上的方法对子类型不可见，不可被调用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　借用构造函数继承最主要的就是子类型利用call或apply调用超类型的方式去使用该方法或属性。&lt;span&gt;但是很显然也有缺点：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　1 由于每个子类型声明自己属性或方法，而且别人不能使用，所以不能复用。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　2 无法调用超类型的原型上的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　组合继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　组合继承是采用了原型链继承和借用构造函数继承的方式。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　其基本思想就是：&lt;strong&gt;原型链继承实现对原型属性和方法的继承，借用构造函数继承实现对实例属性的继承。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = [&quot;large&quot;, &quot;small&quot;&lt;span&gt;];
}
Animal.prototype.say &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,age){
    Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;,name); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用Animal的属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;

}
Cat.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Animal(name); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用Ainaml的原型上的方法。&lt;/span&gt;
Cat.prototype.constructor = Cat;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保证Cat的原型上的构造器对象还是指向Cat。&lt;/span&gt;
Cat.prototype.skill = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;'running'&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom',18&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; peter = &lt;span&gt;new&lt;/span&gt; Cat('peter',22&lt;span&gt;);
console.log(tom); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;tom&quot;, size: Array[2], age: 18};&lt;/span&gt;
console.log(peter); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {name: &quot;peter&quot;, size: Array[2], age: 22};&lt;/span&gt;
&lt;span&gt;
tom.size.push(&lt;/span&gt;'middle'&lt;span&gt;);
console.log(tom.size);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;, &quot;middle&quot;]&lt;/span&gt;
console.log(peter.size); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [&quot;large&quot;, &quot;small&quot;]&lt;/span&gt;
&lt;span&gt;
tom.say(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;
peter.say(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; peter&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　上面的例子：在Cat构造函数里使用call调用Animal里属性，并且在Cat的原型上实例化Animal，进而调用Animal原型上的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　ps:子类型扩展方法时要放在原型链继承之后，因为原型链继承后，重写了其constructor属性，导致没继承前的属性或方法失效。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Cat.prototype = &lt;span&gt;new&lt;/span&gt; Animal(name); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用Ainaml的原型上的方法。&lt;/span&gt;
Cat.prototype.constructor = Cat;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保证Cat的原型上的构造器对象还是指向Cat。&lt;/span&gt;
Cat.prototype.skill = &lt;span&gt;function&lt;/span&gt;(){   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该一步要放在调用Animal原型方法之后，如果放在前面，会导致其skill方法失效。&lt;/span&gt;
    alert('running'&lt;span&gt;);
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;这样融合两者的优点，摒弃了缺点。成为最常用的继承方式。&lt;/span&gt;&lt;span&gt;但是也有&lt;strong&gt;一个不足&lt;/strong&gt;：无论什么情况下都会调用两次超类型构造函数：1 在创建子类型原型的时候，2 在子类型构造函数内部。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　原型式继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　原型式继承是道格拉斯.克罗克福德提出的继承方式，其基本思想是：&lt;strong&gt;借助原型可以基于已有的对象创建新对象，同时不必因此创建自定义类型&lt;/strong&gt;。主要函数如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; object(o){
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; F(){};
    F.prototype &lt;/span&gt;=&lt;span&gt; o;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; F();
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个函数主要是在内部创建了一个构造函数，该构造函数的原型就是传来的对象（继承），并且返回这个构造函数的实例。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　这种方式的&lt;strong&gt;要求&lt;/strong&gt;是必须有一个对象，作为另一个对象的基础，通过对象的浅拷贝的方式，创建这个对象的副本作为新对象使用，在该基础上进行修改。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; peter =&lt;span&gt; {
    name:&lt;/span&gt;'peter'&lt;span&gt;,
    age:&lt;/span&gt;18&lt;span&gt;,
    say:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
    }
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom =&lt;span&gt; object(peter);
console.log(tom);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; F {}&lt;/span&gt;
tom.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; peter&lt;/span&gt;
&lt;span&gt;
tom.name &lt;/span&gt;= 'tom'&lt;span&gt;;
tom.age &lt;/span&gt;= 22&lt;span&gt;;
console.log(tom);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; F {name: &quot;tom&quot;, age: 22}&lt;/span&gt;
tom.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由上述结果可知，新创建的对象，返回的是对象，但是打印tom.say()，出现的是peter，说明新对象调用了原型上的属性和方法。随后在修改后新对象的属性时，会返回新的属性和方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　但是显然易见：此模式就是新对象是利用原要继承的对象挂载到原型上的原理，去使用原型上的属性和方法，然后修改其属性和方法。同样如果不修改属性值，会被所有实例共享。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;主要适用于：在没必要兴师动众的创建构造函数，而只想让一个对象与另一个对象保持类似的情况下，可以使用原型式继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在es5出来一个新方法，可以替代克罗克福德创建的函数: &lt;span&gt;Object.create()&lt;/span&gt;，前提条件只传一个参数情况下。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; tom =&lt;span&gt; Object.create(peter);
console.log(tom);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; F {}&lt;/span&gt;
tom.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; peter&lt;/span&gt;
&lt;span&gt;
tom.name &lt;/span&gt;= 'tom'&lt;span&gt;;
tom.age &lt;/span&gt;= 22&lt;span&gt;;
console.log(tom);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; F {name: &quot;tom&quot;, age: 22}&lt;/span&gt;
tom.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;tip:&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Object.create()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　接受两个参数：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　1.必需。 要用作原型的对象。可以为 null。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　2.可选。 包含一个或多个属性描述符的 JavaScript 对象。“数据属性”是可获取且可设置值的属性。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　数据属性描述符包含 value 特性，以及 writable、enumerable 和 configurable 特性。如果未指定最后三个特性，则它们默认为 false。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　返回值：一个具有指定的内部原型且包含指定的属性（如果有的话）的新对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄生式继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　寄生式继承也是克罗克福德提出的，并在原型式继承上进行推广的。其基本思想就是：&lt;strong&gt;即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后返回这个对象。&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　该继承方式最大的特点就是&lt;strong&gt;封装成一个函数，在内部扩展对象的属性或方法&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; inherit(o){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; clone = Object.create(o);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过调用函数创建一个对象&lt;/span&gt;
    clone.type = 'people';    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 扩展对象属性或方法&lt;/span&gt;
    clone.say=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; clone;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; peter =&lt;span&gt; {
    name:&lt;/span&gt;'peter'&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; perterSon =&lt;span&gt; inherit(peter);
console.log(perterSon.type);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; people&lt;/span&gt;
perterSon.say();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; peter&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　inherit函数中返回一个新创建的对象，这个对象有扩展的方法和属性，另一个对象在调用这个方法时会继承扩展属性和方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　由此可见，扩展方法已经写死了，所以不能不复用，进而降低效率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;使用情况：在主要考虑对象而不是自定义类型和构造函数的情况下，可以采用寄生式继承。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　寄生组合式继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在组合继承的方式中，有一个不足，就是多次调用超类型构造函数，为了避免这个情况，寄生组合式继承就出现了。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　其基本思路是：通过借用构造函数来继承属性，用原型链的混成形式来继承方法。不必为了指定子类型的原型而调用超类型的构造函数。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　最简单的说法：&lt;strong&gt;使用寄生式继承来继承超类型的原型，然后将结果指定给子类型的原型。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; inheritPrototype(sub,supers){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; clone =&lt;span&gt; Object.create(supers.prototype);
    clone.constructor &lt;/span&gt;=&lt;span&gt; sub;
    sub.prototype &lt;/span&gt;=&lt;span&gt; clone;
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个函数实现了三个步骤：（先传两个参数，一个子类型构造函数sub，一个超类型构造函数super。）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　1 创建超类型原型的一个副本。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　2 为创建的副本添加constructor属性，从而弥补重写原型而失去的默认的constructor属性。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　3 将新创建的对象（副本）赋值给子类型的原型。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Animal(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.size = [&quot;large&quot;, &quot;small&quot;&lt;span&gt;];
}
Animal.prototype.say &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Cat(name,age){
    Animal.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name); 
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;

}
inheritPrototype(Cat,Animal);
Cat.prototype.skill &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    alert(&lt;/span&gt;'running'&lt;span&gt;)
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tom = &lt;span&gt;new&lt;/span&gt; Cat('tom',18&lt;span&gt;);
console.log(tom); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Cat {name: &quot;tom&quot;, size: Array(2), age: 18}&lt;/span&gt;
tom.say();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;
tom.skill();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; running&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由上述可以得知：也能实现组合继承所实现的方案，只不过只调用了一次超类型构造函数，提高了效率，同时原型链也能保持不变，能够使用instanceof和isPrototypeOf()方法,组合继承也是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;console.log(tom &lt;span&gt;instanceof&lt;/span&gt; Cat) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true;&lt;/span&gt;
console.log(tom &lt;span&gt;instanceof&lt;/span&gt; Animal) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　tip：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　&lt;strong&gt;1 instanceof&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　该运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。返回值是一个bool。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;obj &lt;span&gt;instanceof&lt;/span&gt; Object &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例obj在不在Object构造函数中&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　　意思就是：检测Object.prototype是否存在于参数obj的原型链上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;2 isPrototypeOf()&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　该函数用于指示对象是否存在于另一个对象的原型链中。如果存在，返回true，否则返回false。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　该方法属于Object对象，由于所有的对象都&quot;继承&quot;了Object的对象实例，因此几乎所有的实例对象都可以使用该方法。&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;10.312087912088&quot;&gt;
&lt;p&gt;后记：&lt;/p&gt;

&lt;p&gt;　　文章有不对或者不理解的地方，请私信或者评论，一起讨论进步。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;　　javascript高级程序设计（第三版）&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Thu, 20 Sep 2018 14:09:00 +0000</pubDate>
<dc:creator>热爱前端的17号诶</dc:creator>
<og:description>本文是面向对象第三部分--继承，相对于前两个，篇幅过长，理解稍微难点，不过多思考多敲敲，会一下子茅塞顿开，就懂了，不太懂面向对象-创建对象的，可以看这篇文章，传送门，不太懂面向对象-原型与原型链的，可</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sqh17/p/9664882.html</dc:identifier>
</item>
<item>
<title>给信息安全爱好者的一封信 - Angel_Kitty</title>
<link>http://www.cnblogs.com/ECJTUACM-873284962/p/9683458.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ECJTUACM-873284962/p/9683458.html</guid>
<description>&lt;h2 id=&quot;学习信息安全的心路历程&quot;&gt;学习信息安全的心路历程&lt;/h2&gt;
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;我从华为回来以后，陆续收到了很多封来信，其中提到最多的就是该如何学习信息安全这一领域的东西。我相信很多朋友无非就是对电影里面的黑客几行代码入侵政府网站的场景十分的敬佩与仰慕，当然我也不例外。作为一个正义的白帽子，我多啰嗦几句，我们必须贯彻落实网络安全基本法，学技术并不是为了去犯罪，我希望从此文章中受益的朋友们能够热爱开源，有无私奉献的精神，能够在不久的将来为国家网络安全事业尽自己的一点绵薄之力。作为一个过来人，我结合自己坎坷的学习历程谈谈我学习信息安全这一领域的心路历程吧。&lt;/p&gt;
&lt;h3 id=&quot;认清方位&quot;&gt;认清方位&lt;/h3&gt;
&lt;p&gt;有些朋友曾经和我畅谈心扉，初高中的厌学，让他早早地对学习丧失了兴趣，高考没考上本科，顺应家里人的要求，选择了一个专科院校，我曾实地勘测过专科院校，有些学校占地面积还没我曾经高中上的学校大，一个学校学生总共几百人，学费可能要好几万，倘若家庭条件不太好，这无疑就是给家里带来了很大的经济负担，再者还有一群这样的人，他们平常成绩还不错，但高考那一会儿，由于某种缘故考试失利了，这对很多人来讲无疑是痛苦的，挫败感油然而生。这一类的同学有部分同学回去复读了，更多的人可能连复读的机会都没有，直接选择一所差一点的学校学着自己不感兴趣的专业。&lt;/p&gt;
&lt;p&gt;永远记住，高考的失利绝不影响你未来的发展，一切都取决于你对生活的态度。虽然你起点比人家低，但只要不自甘堕落，在大学里面完全可以重新开始，一切还来得及。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命运给你一个比别人低的起点，是想告诉你，让你用你的一生去奋斗出一个绝地反击的故事。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;把握机遇&quot;&gt;把握机遇&lt;/h3&gt;
&lt;p&gt;在大学里面，有很多东西值得你去学习，有很多东西值得你去做。在我看来，大学是一个开放、包容的大集体，又不乏是一个小社会。我曾出席过我爸的同学聚会，感悟很深刻。当年明明都是同一个大学毕业的学生，短短二十年之久，你会发现，人与人之间的差距竟会如此之大。有些同学家里几套别墅，开着豪车，而有些同学却只能每月领着微薄的工资，过着十分平淡的生活。&lt;/p&gt;
&lt;p&gt;大学以前，你可能会因为成绩不好，遭到老师和同学们的排挤，上了大学以后，你大可不必担心这个问题。大学是一个展现自我的舞台。在这里，你可以尽情地发挥自己的才能，积极地去参加各种竞赛和活动就好了。因为在这里，大家都是在同一起跑线上。&lt;/p&gt;
&lt;p&gt;我不是个擅长交往的人，所以我更加不希望我一直都是这样子，不知道是从哪里寻来的这股子儿劲，参加了各种活动和竞赛，参加学生会，唱歌，跳舞，弹吉他，写新闻稿，做主持人，做后期影楼剪辑，乒乓球，网球，排球，羽毛球，篮球，双截棍，ACM，机器学习，数据挖掘，人工智能，前端，后端，信息安全等等，后来我还当了一个公益社团的副社长，只要有机会，我就去尝试，去学习。虽然这一切过的并不是那么顺利，我也遇到了许多前所未有的问题，各种的无奈与辛酸，但是回想起那些日子的点点滴滴，你会发现，你做的这一切都是值得的，即便是你不喜欢的，至少你曾经经历过，你通过这样不断地尝试与探索以后，你会更加地清楚，你真正想要的是什么。这个世界不缺少展现自我的舞台，就看你愿不愿意去抓住这个机会了。&lt;/p&gt;
&lt;p&gt;学生会是个真正锻炼你综合技能的地方，虽然学长学姐们会跟你们说，学生会里面有多么多么黑暗，我不否认，因为我曾经也是学生会的一份子，为了争夺学生会主席，部长之类的，可能会闹出很大的动静，但你不能因为里面黑暗就去远离它，这样只会让里面的风气变得越来越糟糕。你觉得不好，你可以试图去改变，去提出你的观点，不要总是一味的去逃避责任，既然你是其中的一员，你就有义务站出来。站出来是一种勇气，可以树立你的威信。假使你无法改变环境，但是我们可以改变自己。我们不是来适应这个社会的，我们是来改变社会的。你不努力坚持到最后，你永远不知道是不是能改变什么。&lt;/p&gt;
&lt;h3 id=&quot;志存高远心无旁骛&quot;&gt;志存高远，心无旁骛&lt;/h3&gt;
&lt;p&gt;从大一开始到现在，我也陆续收到了不少于十份的企业内推，有推荐我做前端的，也有做后端开发的，有做.net的，也有做量化投资的，甚至还有目前非常热门的大数据，人工智能的，企业有小到前两年刚创办成立的，也有大到作为一线码农向往的BAT企业。别人总是这么问我，你有这么好的机会为啥不现在就去呢，其实我想说的是，有些东西是虚浮的，它会干扰你的正常作息，不要因为BAT现在向你投橄榄枝，你就已经达到了它们企业的要求了，也许人家只是认为你有潜力，希望你再接再厉，把自己的能力历练到极致而已，将来有机会为企业为国家献出自己的一份力量而已。所以我经常是笑而不语，也许这才是作为一个读书人应该要有的心态。&lt;/p&gt;
&lt;p&gt;我也坚持写博客已经一年零七个月了，想想今年2月份写年终总结的时候，当时我才263个粉丝，短短五个月，我粉丝增加了700多个，这一切离不开我对开源的热爱，我会继续坚持创作，也希望有一天我能成为博客园的推荐博客。&lt;/p&gt;
&lt;p&gt;无论是在职场还是在学校，作为一个白帽子，我们应该始终秉承着无私奉献的精神，你做的一切总有一天一定会有人看到。&lt;/p&gt;
&lt;p&gt;我们要把目标定的长远一些，不要为了眼前的蝇头小利，而放弃了本该属于你的东西。要相信，你的人生不能止步于此，有大好的未来在等待着你去探索，去追寻。&lt;/p&gt;
&lt;h3 id=&quot;没有环境就创造环境&quot;&gt;没有环境就创造环境&lt;/h3&gt;
&lt;p&gt;作为一个过来人，我总是以浅显易懂的方式讲述着我所学到的一切知识，我曾经是吃过这样的亏。&lt;/p&gt;
&lt;p&gt;我学信息安全这块的时候，最开始接触到的是CTF，我在i春秋上也看了入门的教程，并且把它总结成了&lt;a href=&quot;https://www.cnblogs.com/ECJTUACM-873284962/p/6691817.html&quot;&gt;文章&lt;/a&gt;。可能你看到这里的时候会有点懵，要学这么多东西嘛？我目前是学web方向的，二进制方面略懂，在web方向这块，我最开始也是很懵逼，但是没办法，我就照着这种想法学呗，国内对信息安全这块的资源实在是太少了，所以想自学入门这块真的很难很难(亲身经历)，然后我在短短地半年时间自学了十几门语言，刷了一堆水题(很大一部分都是看题解学套路)，基本上没什么提高，可能仅仅只是知道有这个套路。当时我的想法就是读研的时候学信息安全方向就好了。努力的孩子运气不会太差，后来我有幸参加南开大学的夏令营，在那里遇到了一群志同道合的伙伴，每天我们在激烈的学习和讨论中度过，那段时间真的很快乐。得益于那短短地十天学习生涯，我对学信息安全这块不能说学的很好，至少不会变的很迷茫，至少知道自己要做什么。&lt;/p&gt;
&lt;p&gt;在大学里，很多时候你在学校可能很难找到一群志同道合的人，或是在学校里可能没有很浓烈的学习氛围，你可以考虑建立一个兴趣小组，多去闲逛你想学的那个方向的论坛或者博客，在网上结交一些和你有着相同兴趣爱好的小白一起努力。你需要明确你想学哪个方向，目前主流的是二进制、 &lt;code&gt;Web&lt;/code&gt; 和密码学。Web对知识面的要求是很广的，常用的语言比如Python，Java，PHP以及他们涉及到的一些框架，如Flask，Spring，ThinkPHP，还有常见的服务器及数据库等等我们都必须非常的熟悉，所以自古有句话，懂开发才能懂安全。所以我的建议是先去好好做开发，做五年开发以后再回来学安全，你会更加的得心应手。我不建议没有开发经验的小伙伴们学安全，这样学下去会走很多弯路。&lt;/p&gt;
&lt;p&gt;我贴一张学习路线图，仅供参考：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1100338/201809/1100338-20180920212749440-1160227265.png&quot; alt=&quot;CTF-Learning&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;向比你优秀的人学习&quot;&gt;向比你优秀的人学习&lt;/h3&gt;
&lt;p&gt;向比你优秀的人看齐，站在比你优秀的人一边，自然而然你也会变得更加优秀。&lt;/p&gt;
&lt;p&gt;我在南开大学学习的那些日子，我真正意义上体会到了这句话的含义：比你优秀的人比你还努力。成功来之不易，即使是天才都需要不断地学习去充实自我。&lt;/p&gt;
&lt;h3 id=&quot;贵在坚持永不言弃&quot;&gt;贵在坚持，永不言弃&lt;/h3&gt;
&lt;p&gt;我相信大家坚持到现在做过最久的一件事就是读书，其实你想想看，读书应该是最难的一件事，你从3岁就开始上幼儿园，一直念到本科毕业，硕士毕业，甚至博士毕业，这么长的时间你都能坚持下来，你还有什么事情做不到呢？&lt;/p&gt;
&lt;p&gt;坚持是一种态度，源自内心的驱动力，兴趣才是最好的导师，选一个你感兴趣的方向坚持下来，不久的将来你一定会取得属于你的一番事业。&lt;/p&gt;
&lt;h3 id=&quot;靠别人不如靠自己&quot;&gt;靠别人不如靠自己&lt;/h3&gt;
&lt;p&gt;不要总想着把希望给予在别人身上，你能够依赖的只有你自己。别人的时间也是时间，别人也没有义务帮你做任何事情，帮人是情分，不帮是本分。况且现在的互联网发展太迅猛了，你想找的知识几乎都能通过Google找到，所以自己多花一点时间找一下，这样也可以节约大家的时间。&lt;/p&gt;
&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;
&lt;p&gt;说了这么多，无非就是几个方面：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;认清自己的方位&lt;/li&gt;
&lt;li&gt;把握机遇&lt;/li&gt;
&lt;li&gt;做最适合自己的选择&lt;/li&gt;
&lt;li&gt;向优秀的人靠齐&lt;/li&gt;
&lt;li&gt;多一些坚持，少一些惰性&lt;/li&gt;
&lt;li&gt;多去承担一些责任&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上这些都是结合我这些年的经历，我希望写了这么多，能够真心的帮助到看完此文的所有小伙伴们。&lt;/p&gt;
&lt;p&gt;作为一个还在为学业奔波的学生，我也希望你们能关注支持推荐下博主，博主因为有你们的支持，才能创作出更多优秀的作品，对于每一个支持我的粉丝们，我也在这里对你们说一声由衷的感谢。&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 13:31:00 +0000</pubDate>
<dc:creator>Angel_Kitty</dc:creator>
<og:description>学习信息安全的心路历程 前言 我从华为回来以后，陆续收到了很多封来信，其中提到最多的就是该如何学习信息安全这一领域的东西。我相信很多朋友无非就是对电影里面的黑客几行代码入侵政府网站的场景十分的敬佩与仰</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ECJTUACM-873284962/p/9683458.html</dc:identifier>
</item>
<item>
<title>音频识别算法思考与阶段性小结 - cpuimage</title>
<link>http://www.cnblogs.com/cpuimage/p/9683296.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cpuimage/p/9683296.html</guid>
<description>&lt;p&gt;这篇文章酝酿了很久，一直没抽时间写。&lt;/p&gt;
&lt;p&gt;在中秋，国庆来临之时，落笔。&lt;/p&gt;
&lt;p&gt;写之前，先交代几件事情，&lt;/p&gt;
&lt;p&gt;主要是 回复 给我发邮件以及QQ上询问的朋友们的一些疑问和需求，这里稍作回复一下。&lt;/p&gt;
&lt;p&gt;1.关于 票据ocr预处理算法 &lt;/p&gt;
&lt;p&gt;相关算法细节已经开源。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/OcrPreprocessing&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/OcrPreprocessing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各位可以根据CPUImageLocalColorFilter算法思路，对应项目需求进行算法改写定制算法实现。&lt;/p&gt;
&lt;p&gt;主要是基于颜色过滤的思路，只要确认具体需求，&lt;/p&gt;
&lt;p&gt;提供的算法，可以解决绝大多数关于颜色叠加，干扰移除的问题。&lt;/p&gt;
&lt;p&gt;由于思路比较简单，这里就不展开，&lt;/p&gt;
&lt;p&gt;需要的阅读相关代码，理解一下。&lt;/p&gt;

&lt;p&gt;2.关于音频指纹算法实现，已经开源。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;/p&gt;
&lt;p&gt;基础:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/shazam&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/shazam&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进阶:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/AudioFingerprinter&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/AudioFingerprinter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;音频指纹最重要的是时序信息，改进的思路和方向有很多，&lt;/p&gt;
&lt;p&gt;例如提取更加鲁棒性的特征或者增加特征维度等。&lt;/p&gt;
&lt;p&gt;对音频指纹，哼唱搜歌感兴趣的，可以参阅实现。&lt;/p&gt;

&lt;p&gt;3.关于音频采样算法&lt;/p&gt;
&lt;p&gt;相关项目:&lt;/p&gt;
&lt;p&gt;简易实现，便携可采用:&lt;/p&gt;
&lt;p&gt;目前有两种简单插值实现，平时基本够用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/resampler&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/resampler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如有更高要求的，可以采用：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/speex_resampler&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/speex_resampler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/WebRTC_Resampler&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/WebRTC_Resampler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果不考虑性能问题，有特殊嗜好的，可以采用傅里叶变换的实现：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/fftResample&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/fftResample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/stb_fft&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/stb_fft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.关于音频降噪算法&lt;/p&gt;
&lt;p&gt;降噪算法可参阅项目：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/AudioDenoise&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/AudioDenoise&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/WebRTC_NS&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/WebRTC_NS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/rnnoise&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/rnnoise&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于有很多人询问rnnoise的训练方法和数据集。&lt;/p&gt;
&lt;p&gt;算法实现细节见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://people.xiph.org/~jm/demo/rnnoise/&quot; target=&quot;_blank&quot;&gt;https://people.xiph.org/~jm/demo/rnnoise/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于数据集问题，原作者已经开放下载了。&lt;/p&gt;
&lt;p&gt;下载地址:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://people.xiph.org/~jm/demo/rnnoise/rnnoise_contributions.tar.gz&quot; target=&quot;_blank&quot;&gt;https://people.xiph.org/~jm/demo/rnnoise/rnnoise_contributions.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于rnnoise采样率适配和训练问题:&lt;/p&gt;
&lt;p&gt;参阅项目:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GregorR/rnnoise-nu&quot; target=&quot;_blank&quot;&gt;https://github.com/GregorR/rnnoise-nu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GregorR/rnnoise-models&quot; target=&quot;_blank&quot;&gt;https://github.com/GregorR/rnnoise-models&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GregorR已经做了很多工作了，所以大多数问题，大家可以考虑联系他。&lt;/p&gt;

&lt;p&gt;5.便携fft实现stb_fft开源，单头文件实现。&lt;/p&gt;
&lt;p&gt;这个开源项目只是方便一些思路的验证和平时的测试使用。&lt;/p&gt;
&lt;p&gt;不是性能最优实现，最优实现版本暂不开源。&lt;/p&gt;
&lt;p&gt;项目地址:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpuimage/stb_fft&quot; target=&quot;_blank&quot;&gt;https://github.com/cpuimage/stb_fft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;差不多就这么多，&lt;/p&gt;
&lt;p&gt;以上，若是有不理解的地方，可以给我发邮件或QQ联系。&lt;/p&gt;

&lt;p&gt;回到主题上，本人最近一直在研究音频识别的一个小分支——性别判断。&lt;/p&gt;
&lt;p&gt;简而言之就是通过声音分析，判断 说话者的性别。&lt;/p&gt;
&lt;p&gt;听起来好像很简单，但是做起来，才知道，路上好多坑。&lt;/p&gt;
&lt;p&gt;总的来说，想要精准识别声音的性别，如果没有干扰是很简单的事情，&lt;/p&gt;
&lt;p&gt;但是，有了干扰之后的问题就复杂多了。&lt;/p&gt;
&lt;p&gt;我们先考虑一下，声音信息可能受到什么因素的干扰。&lt;/p&gt;
&lt;p&gt;1.外界干扰，主要是噪声&lt;/p&gt;
&lt;p&gt;例如：多人交谈(等非主体的声音)，软硬设备(网络，电压等抖动)，背景环境(室内室外)&lt;/p&gt;
&lt;p&gt;2.说话者生物干扰音素&lt;/p&gt;
&lt;p&gt;例如: 语速，音量，音高，当然还有生物问题 既发声器官的状态(年龄，感冒发炎等)&lt;/p&gt;
&lt;p&gt;3.文化因素，发音风格，饮食环境下的声喉状态&lt;/p&gt;
&lt;p&gt;4. 以上1+2+3 等多重情况叠加下的混合干扰&lt;/p&gt;

&lt;p&gt;从以上提及的各个音素来看，理想很丰满，现实很骨感。&lt;/p&gt;
&lt;p&gt;不管是asr识别还是声纹识别，还是其他音频方向的算法处理，毫无疑问，困难重重。&lt;/p&gt;
&lt;p&gt;花了近6个月，踩了无数个小坑之后，在不处理噪声的干扰情况下，&lt;/p&gt;
&lt;p&gt;对中国人的普通话，音频性别识别终于达到85%的准确率。&lt;/p&gt;
&lt;p&gt;由于是先验算法，纯c不采用任何第三方库的干净算法实现，&lt;/p&gt;
&lt;p&gt;可以随时调参优化算法，适配不同的情况。&lt;/p&gt;

&lt;p&gt;没有采用深度学习的方案去做特征工程。&lt;/p&gt;
&lt;p&gt;这里要说一下，为什么不用深度学习的方法，&lt;/p&gt;
&lt;p&gt;以及使用深度学习方法的一些思考。&lt;/p&gt;
&lt;p&gt;首先，深度学习的数据集处理，就是一项体力活，&lt;/p&gt;
&lt;p&gt;然后数据清洗，神经网络选型设计等等。&lt;/p&gt;
&lt;p&gt;像我这样的懒人，真的不爱做体力活，我更喜欢思考。&lt;/p&gt;
&lt;p&gt;在我看来，深度学习基于数据的特征工程，&lt;/p&gt;
&lt;p&gt;最终会落到一个共同的话题，文化大一统。&lt;/p&gt;
&lt;p&gt;也就是说，最后训练产出的有效特征，&lt;/p&gt;
&lt;p&gt;也许更多的是基于数据的文化规律。&lt;/p&gt;
&lt;p&gt;为什么这么说呢？&lt;/p&gt;
&lt;p&gt;其实只要思考一个问题就可以了。&lt;/p&gt;
&lt;p&gt;人的性别跟人说的话的内容多少长短，有没有直接关联。&lt;/p&gt;
&lt;p&gt;我个人认为，并没有。&lt;/p&gt;
&lt;p&gt;而深度学习大多数根据人说的话的内容(数据集)，进行数据特征工程，&lt;/p&gt;
&lt;p&gt;假设它有效，那它最终提取的有效特征是什么？&lt;/p&gt;
&lt;p&gt;有可能是在一定数据长度下的文化特征。&lt;/p&gt;
&lt;p&gt;通俗地讲，就是一个地区的一些人的文化风格或生活方式。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;卧槽  -&amp;gt; 屌丝&lt;/p&gt;
&lt;p&gt;靓女 -&amp;gt; 广东人&lt;/p&gt;
&lt;p&gt;老司机 -&amp;gt; 你懂的&lt;/p&gt;

&lt;p&gt;只是举个例子。&lt;/p&gt;
&lt;p&gt;也就是说，如果采用深度学习去做声纹识别，&lt;/p&gt;
&lt;p&gt;其实更像是定义 男士说话的内容风格 或 女士说话的内容风格。&lt;/p&gt;
&lt;p&gt;当然这里只是通过性别识别这个维度去思考这个问题。&lt;/p&gt;
&lt;p&gt;若把这个问题扩展到 asr 或者 声纹识别，也会有一定的关联。&lt;/p&gt;
&lt;p&gt;在我看来，asr 通过语音转为文字，是的的确确在做信号转译。&lt;/p&gt;
&lt;p&gt;但是 声纹识别就不应该是这个理。&lt;/p&gt;
&lt;p&gt;当然音频指纹，哼唱搜索是另一个问题。&lt;/p&gt;
&lt;p&gt;如果说 asr可以根据说话的内容来进行预测评估，自然是没问题的，&lt;/p&gt;
&lt;p&gt;但是性别或者说声纹，就不能了。&lt;/p&gt;
&lt;p&gt;你不能根据某个人说的某句话很像某个人的风格就说，他是某人吧。&lt;/p&gt;
&lt;p&gt;这种问题，放到图像领域一样存在，&lt;/p&gt;
&lt;p&gt;例如人脸识别，没有严格的生物信息，&lt;/p&gt;
&lt;p&gt;怎么区分双胞胎或者其实目标的是活体非录像。&lt;/p&gt;
&lt;p&gt;或者说根据某个人的声音来判断真伪，也可能是录音呢？&lt;/p&gt;
&lt;p&gt;从逻辑上来说，这是不科学的，也是不合理的。&lt;/p&gt;
&lt;p&gt;在我看来，深度学习用来做一些带有长度大小信息的数据的特征工程是可以的，&lt;/p&gt;
&lt;p&gt;但是如果做一些文化规律的工程或者工作，就差强人意了。&lt;/p&gt;
&lt;p&gt;说到这里，只能说，在一定的角度上作为辅助参考是可以的，&lt;/p&gt;
&lt;p&gt;但是完全替代人类去做一些事情，为时过早。&lt;/p&gt;
&lt;p&gt;除非，生物信息大跃进，更多生物信息数据维度参与进来。&lt;/p&gt;
&lt;p&gt;一句话总结就是，能回答像不像，但不能确认是不是。&lt;/p&gt;
&lt;p&gt;根据这个思考，&lt;/p&gt;
&lt;p&gt;很多项目或者说工程化逻辑，&lt;/p&gt;
&lt;p&gt;并不需要确认是不是，而只需要关注什么条件下触发异常反馈，&lt;/p&gt;
&lt;p&gt;而后人工跟进，例如质检，自(fu)动(zhu)驾驶等。&lt;/p&gt;

&lt;p&gt;由于音频性别识别目前还不能达到我自己预设的理想状态，暂时也没有开源计划。&lt;/p&gt;
&lt;p&gt;个人目前的下一个研究方向，有可能是音频降噪这种叫人头大，扰人清梦的东西。&lt;/p&gt;
&lt;p&gt;但有挑战，才有进步。&lt;/p&gt;
&lt;p&gt;图像领域，两年前做完一键修图之后，就没有花心思继续研究了。&lt;/p&gt;
&lt;p&gt;这个一键修图算法，也一直没抽时间去整理，&lt;/p&gt;
&lt;p&gt;等哪天有时间再整理出来，释放demo给大家玩玩。&lt;/p&gt;
&lt;p&gt;近期也看到不少人在研究诸如去雾，水下增强，去模糊之类的。&lt;/p&gt;
&lt;p&gt;颇有感慨，不过图像方面，除非有灵感上脑，否则，暂时不去深入了。&lt;/p&gt;
&lt;p&gt;当然，我会慢慢把之前做的一些图像算法，整理开源。&lt;/p&gt;
&lt;p&gt;独乐乐不如众乐乐。&lt;/p&gt;
&lt;p&gt;好基友 &lt;a href=&quot;http://www.cnblogs.com/Imageshop/&quot; target=&quot;_blank&quot;&gt;imageshop&lt;/a&gt; 已经做了很多工作了，&lt;/p&gt;
&lt;p&gt;图像方面的算法，移步他的博客，你会有收获的。&lt;/p&gt;
&lt;p&gt;回头得找个时间聚聚。&lt;/p&gt;
&lt;p&gt;也许，在未来的一小段时间里，&lt;/p&gt;
&lt;p&gt;俺还会在音频，视频，图像以及其他算法延伸方向做一些研究或者具有挑战性的工作。&lt;/p&gt;
&lt;p&gt;国内的技术创新，确实比较落后，&lt;/p&gt;
&lt;p&gt;特别是音频 自然语言 方向，需要一些有志之士一起努力。&lt;/p&gt;

&lt;p&gt;最后为新人做点科普工作。&lt;/p&gt;

&lt;p&gt;之于图像，必须要啃下：&lt;/p&gt;
&lt;p&gt;模糊，卷积，颜色空间&lt;/p&gt;

&lt;p&gt;之于音频，必须要啃下：&lt;/p&gt;
&lt;p&gt;傅里叶变换，插值采样&lt;/p&gt;

&lt;p&gt;算法性能优化可参阅：&lt;/p&gt;
&lt;p&gt;计算机体系机构&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ituring.com.cn/book/888&quot; target=&quot;_blank&quot;&gt;http://www.ituring.com.cn/book/888&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数值计算指南 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E57201_01/html/E57330/index.html&quot; target=&quot;_blank&quot;&gt;https://docs.oracle.com/cd/E57201_01/html/E57330/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ARM-software/CMSIS_5&quot; target=&quot;_blank&quot;&gt;https://github.com/ARM-software/CMSIS_5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cpu指令集优化&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.agner.org/optimize/&quot; target=&quot;_blank&quot;&gt;https://www.agner.org/optimize/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后面若有精力再做一些与算法编码优化相关的分享。&lt;/p&gt;

&lt;p&gt;最后简单做个本人简介：&lt;/p&gt;
&lt;p&gt;前金山员工，前金山毒霸研发。&lt;/p&gt;
&lt;p&gt;前百度员工，前百度杀毒研发。&lt;/p&gt;
&lt;p&gt;89年生人，大专商务英语专业。&lt;/p&gt;

&lt;p&gt;很多事情，在于你想不想做，其他的都是借口。&lt;/p&gt;
&lt;p&gt;想到就去做，与之共勉。&lt;/p&gt;

&lt;p&gt;若有其他相关问题或者需求也可以邮件联系俺探讨。&lt;/p&gt;
&lt;p&gt;邮箱地址是: &lt;br/&gt;gaozhihan@vip.qq.com&lt;/p&gt;
</description>
<pubDate>Thu, 20 Sep 2018 12:59:00 +0000</pubDate>
<dc:creator>cpuimage</dc:creator>
<og:description>这篇文章酝酿了很久，一直没抽时间写。 在中秋，国庆来临之时，落笔。 写之前，先交代几件事情， 主要是 回复 给我发邮件以及QQ上询问的朋友们的一些疑问和需求，这里稍作回复一下。 1.关于 票据ocr预</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cpuimage/p/9683296.html</dc:identifier>
</item>
<item>
<title>Flask - 用心改变人生</title>
<link>http://www.cnblogs.com/ccmldl/p/9651663.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ccmldl/p/9651663.html</guid>
<description>&lt;p&gt;　　首先，学习flask之前，先了解一下Django和Flask中是怎么渲染字符串的。在Django中使用mark_safe()；在Flask中使用Markup()；还可以在HTML中使用管道符{{ add | safe }}。简单介绍一下Flask，它是轻量型的，第三方组件非常丰富，可扩展性比较强，用法和Django差不多。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、介绍Flask、Django、Tornado框架&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Django：&lt;/strong&gt;重武器，内部包含了非常多的组件(ORM、Form、ModelForm、缓存、Session、中间件、信号等)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flask：&lt;/strong&gt;短小精悍，内部没有太多的组件，第三方组件非常丰富。路由比较特殊，基于装饰器来实现，但是究其本质还是通过add_url_rule来实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tornado：&lt;/strong&gt;异步非阻塞框架(node.js)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bottle：&lt;/strong&gt;第三方库比较少&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;web.py：&lt;/strong&gt;比较老&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Flask入门&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　pip3  install  flask&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;WSGI&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4a0637af-75a0-4452-9c15-3c7e84e7b43b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4a0637af-75a0-4452-9c15-3c7e84e7b43b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4a0637af-75a0-4452-9c15-3c7e84e7b43b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;from&lt;/span&gt; werkzeug.wrappers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Request, Response
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;@Request.application
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello(request):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; Response(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;from&lt;/span&gt; werkzeug.serving &lt;span&gt;import&lt;/span&gt;&lt;span&gt; run_simple
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     run_simple(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 4000, hello)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 看到run_simple要知道socket就来了&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;werkzeug示例(flask)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_b02bfe72-6f18-41f6-bea8-43a6bcd1f3b9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b02bfe72-6f18-41f6-bea8-43a6bcd1f3b9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b02bfe72-6f18-41f6-bea8-43a6bcd1f3b9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;from&lt;/span&gt; wsgiref.simple_server &lt;span&gt;import&lt;/span&gt;&lt;span&gt; make_server

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; runserver(environ, start_response):
    start_response(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;200 OK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)])
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; [bytes(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;h1&amp;gt;Hello, web!&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;), ]
            
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; obj = WSGIHandler()&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; httpd = make_server('', 8000, obj)&lt;/span&gt;
    httpd = make_server(&lt;span&gt;''&lt;/span&gt;, 8000&lt;span&gt;, runserver)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Serving HTTP on port 8000...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    httpd.serve_forever()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;wsgiref示例(wsgi)&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_ff0bb6dc-a31f-43cd-8191-3d90edad231d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ff0bb6dc-a31f-43cd-8191-3d90edad231d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ff0bb6dc-a31f-43cd-8191-3d90edad231d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;import&lt;/span&gt;&lt;span&gt; socket
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; handle_request(client):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     buf = client.recv(1024&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     client.send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HTTP/1.1 200 OK\r\n\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     client.send(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello, Seven&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;               
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     sock =&lt;span&gt; socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     sock.bind((&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,8000&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     sock.listen(5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;               
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         connection, address =&lt;span&gt; sock.accept()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        handle_request(connection)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        connection.close()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;               
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     main()        
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;本质的本质&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;flask&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_ede304e7-21bb-4ed2-9797-5a88b436f0bb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ede304e7-21bb-4ed2-9797-5a88b436f0bb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ede304e7-21bb-4ed2-9797-5a88b436f0bb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 实例化Flask对象&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         
&lt;span&gt; 6&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  --&amp;gt;1.v = app.route('/')  2.v(hello_world)&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello_world():
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     app.run()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、配置文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_bd7d2b7f-2c23-435f-844f-995fed62d87b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bd7d2b7f-2c23-435f-844f-995fed62d87b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bd7d2b7f-2c23-435f-844f-995fed62d87b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config(object):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     DEBUG =&lt;span&gt; False
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     TESTING =&lt;span&gt; False
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     DATABASE_URI = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sqlite://:memory:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProductionConfig(Config):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     DATABASE_URI = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql://user@localhost/foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DevelopmentConfig(Config):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     DEBUG =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestingConfig(Config):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     TESTING =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在create_app函数中写上下面这句话，就可以使用配置了&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; app.config.from_object(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;settings.py.DevelopmentConfig&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;settings.py&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、路由系统 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;设置URL路由使用route()装饰器，route()装饰哪个函数，那么route()中的参数就映射到哪个函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;路由路径支持变量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;span&gt;形式：&amp;lt;converter:variable_name&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　converter支持的类型：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468653/201809/1468653-20180918204559015-464751424.png&quot; alt=&quot;&quot;/&gt;　&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;　　&lt;img id=&quot;code_img_closed_7b0ca3e0-6317-4d0f-ba9d-f35737650115&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7b0ca3e0-6317-4d0f-ba9d-f35737650115&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7b0ca3e0-6317-4d0f-ba9d-f35737650115&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/user/&amp;lt;username&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/post/&amp;lt;int:post_id&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/post/&amp;lt;float:post_id&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/post/&amp;lt;path:path&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;@app.route和@app.add_url_rule参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_296a4524-a237-4130-bf85-3dd77e757e0f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_296a4524-a237-4130-bf85-3dd77e757e0f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_296a4524-a237-4130-bf85-3dd77e757e0f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;rule                                      　　 URL规则 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;view_func                             　　 视图函数名称
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; defaults=None                     　　  默认值，当URL中无参数，函数需要参数时，使用defaults={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}为函数提供参数
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; endpoint=None,                    　　 名称，用于反向生成URL，即： url_for(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;名称&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; methods=None,                       　  允许的请求方式，如：[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; strict_slashes=False/True              对URL最后的 /&lt;span&gt; 符号是否严格要求
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 注意：如果设置为True，URL后面没有加&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;，访问的时候一定不能加&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; redirect_to=&lt;span&gt;None                          重定向到指定地址
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; subdomain=None                          子域名访问
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、模板语言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Flask使用的是jinja2模板，所以其语法和Django无差别&lt;/p&gt;
&lt;p&gt;Flask中自定义模板方法的方式和Bottle相似，创建一个函数并通过参数的形式传入render_template&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;六、请求&amp;amp;响应相关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7a747283-1397-443c-9428-2f4c52785289&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7a747283-1397-443c-9428-2f4c52785289&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7a747283-1397-443c-9428-2f4c52785289&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;request.method
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;request.args
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;request.form
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;request.values
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;request.cookies
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;request.headers
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;request.path
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;request.full_path
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;request.script_root
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;request.url
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;request.base_url
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;request.url_root
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;request.host_url
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;request.host
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;request.files
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; obj = request.files[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;the_file_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; obj.save(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/var/www/uploads/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + secure_filename(f.filename))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;请求相关信息&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_98f810c1-0c3b-4dfe-b615-2072d20b506a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_98f810c1-0c3b-4dfe-b615-2072d20b506a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_98f810c1-0c3b-4dfe-b615-2072d20b506a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;字符串&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;html模板路径&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,**&lt;span&gt;{})
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; response = make_response(render_template(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; response是flask.wrappers.Response类型&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; response.delete_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; response.set_cookie(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; response.headers[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;X-Something&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A value&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; response
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;响应相关信息&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;七、Session&amp;amp;Cookie&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　除请求对象之外，还有一个 session 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名要使用会话，你需要设置一个密钥。&lt;/p&gt;
&lt;p&gt;　　设置：session['username'] ＝ 'xxx'&lt;/p&gt;
&lt;p&gt;　　删除：session.pop('username', None)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;八、闪现(基于session实现的)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用：&lt;/strong&gt;对临时数据操作，如显示错误信息&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_e8628e6e-20ad-4385-9fe8-b707df71a34b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e8628e6e-20ad-4385-9fe8-b707df71a34b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e8628e6e-20ad-4385-9fe8-b707df71a34b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, flash, get_flashed_messages
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; app.secret_key = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdfasdf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get():
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从某个地方获取设置过得所有值，并清除&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     data =&lt;span&gt; get_flashed_messages()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(data)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; set():
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 向某个地方设置一个值&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     flash(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;阿斯蒂芬&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     app.run()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;九、蓝图(blueprint)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;目标：构造程序目录&lt;/p&gt;
&lt;p&gt;优点：可以批量URL&lt;/p&gt;
&lt;p&gt;　　　指定模板路径/静态文件路径&lt;/p&gt;
&lt;p&gt;　　　请求扩展(针对pp或者针对某个蓝图)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：&lt;/span&gt;蓝图对象名称和函数名称不能重复&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十、请求扩展(Django中间件)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;基于before_request做用户登录认证&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_318e07b3-ee25-446d-85f6-a299c7ece656&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_318e07b3-ee25-446d-85f6-a299c7ece656&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_318e07b3-ee25-446d-85f6-a299c7ece656&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@app.before_request
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; process_request(*args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; request.path == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     user = session.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; user:
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; redirect(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)        
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;执行顺序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_f7e4c4d9-d0b1-456f-8d0a-5b2b98cd3edc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f7e4c4d9-d0b1-456f-8d0a-5b2b98cd3edc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f7e4c4d9-d0b1-456f-8d0a-5b2b98cd3edc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, render_template, request, redirect, session, url_for
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; app.secret_key = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdfasdf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;@app.before_request
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; process_request1(*args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;process_request1进来了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;@app.before_request
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; process_request2(*args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;process_request2进来了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;@app.after_request
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_response1(response):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;process_response1走了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; response
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;@app.after_request
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_response2(response):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;process_response2走了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; response
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index函数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    app.run()
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;运行结果：
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    process_request1进来了
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    process_request2进来了
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    index函数
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    process_response2走了
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     process_response1走了
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求拦截后，response所有都执行，函数不再执行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_81ed0256-5b2f-42f6-b28a-e2a938eb7d12&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_81ed0256-5b2f-42f6-b28a-e2a938eb7d12&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_81ed0256-5b2f-42f6-b28a-e2a938eb7d12&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, render_template, request, redirect, session, url_for
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; app.secret_key = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdfasdf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;@app.before_request
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; process_request1(*args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;process_request1进来了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;拦截&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;@app.before_request
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; process_request2(*args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;process_request2进来了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;@app.after_request
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_response1(response):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;process_response1走了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; response
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;@app.after_request
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_response2(response):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;process_response2走了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; response
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, methods=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index函数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     app.run()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;定制错误信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_5ad5f3f2-f8ac-465d-b91f-9e932ca79199&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5ad5f3f2-f8ac-465d-b91f-9e932ca79199&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5ad5f3f2-f8ac-465d-b91f-9e932ca79199&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; @app.errorhandler(404&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; error_404(arg):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;404错误了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;模板中定义方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_0eed0bab-1dd3-4d38-8885-5cb6bb56f67b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0eed0bab-1dd3-4d38-8885-5cb6bb56f67b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0eed0bab-1dd3-4d38-8885-5cb6bb56f67b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@app.template_global()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; sb(a1, a2):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; a1 +&lt;span&gt; a2
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在HTNL中使用：{{sb(1,2)}}&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;@app.template_filter()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; db(a1, a2, a3):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; a1 + a2 +&lt;span&gt; a3
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在HTNL中使用：{{ 1|db(2,3)}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一次进来要执行的操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_4f0f4db1-5d48-436d-8e2d-404128290bc4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4f0f4db1-5d48-436d-8e2d-404128290bc4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4f0f4db1-5d48-436d-8e2d-404128290bc4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@app.before_first_request
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; first(*args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十一、中间件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_496a9bea-48ab-41a2-9cca-673a11ef0365&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_496a9bea-48ab-41a2-9cca-673a11ef0365&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_496a9bea-48ab-41a2-9cca-673a11ef0365&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, request
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Md(object):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, old_wsgi_app):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         self.old_wsgi_app =&lt;span&gt; old_wsgi_app
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;(self, environ, start_response):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;开始之前&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         ret =&lt;span&gt; self.old_wsgi_app(environ, start_response)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;结束之后&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     app.wsgi_app =&lt;span&gt; Md(app.wsgi_app)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     app.run()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十二、上下文管理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求上下文&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;threading.local对象，用于为每个线程开辟一块空间来保存它独有的值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_47ad7937-50e6-4879-83d6-dcd6938d35e4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_47ad7937-50e6-4879-83d6-dcd6938d35e4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_47ad7937-50e6-4879-83d6-dcd6938d35e4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; local_values =&lt;span&gt; threading.local()
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo(object):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         self.name =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; local_values =&lt;span&gt; Foo()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func(num):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      local_values.name =&lt;span&gt; num
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;      time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;      &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(local_values.name, threading.current_thread().name)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(20&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     th = threading.Thread(target=func, args=(i,), name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;线程%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; i)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     th.start()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;源码(request)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　情况一：单进程单线程，基于全局变量做&lt;/p&gt;
&lt;p&gt;　　情况二：单进程多进程，基于threading.local对象做&lt;/p&gt;
&lt;p&gt;　　情况三：单进程单线程(多个协程)，threading.local对象做不到&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;决定&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　以后不支持协程：threading.local对象&lt;/p&gt;
&lt;p&gt;　　支持：自定义threading.local对象(支持协程)&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;　　&lt;img id=&quot;code_img_closed_23b97b99-31d2-4187-b872-06c1e249b1ff&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_23b97b99-31d2-4187-b872-06c1e249b1ff&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_23b97b99-31d2-4187-b872-06c1e249b1ff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;from&lt;/span&gt; greenlet &lt;span&gt;import&lt;/span&gt; getcurrent as get_ident  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 协程&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;except&lt;/span&gt;&lt;span&gt; ImportError:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;from&lt;/span&gt; thread &lt;span&gt;import&lt;/span&gt;&lt;span&gt; get_ident
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; ImportError:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;          &lt;span&gt;from&lt;/span&gt; _thread &lt;span&gt;import&lt;/span&gt; get_ident  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 线程&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; local(object):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         self.storage =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         self.get_ident =&lt;span&gt; get_ident
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; set(self, k, v):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;          ident =&lt;span&gt; self.get_ident()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;          origin =&lt;span&gt; self.storage.get(ident)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; origin:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             origin =&lt;span&gt; {k:v}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;          &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             origin[k] =&lt;span&gt; v
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;           self.storage[ident] =&lt;span&gt; origin
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;      
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(self, k):
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;            ident =&lt;span&gt; self.get_ident()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;            origin =&lt;span&gt; self.storage.get(ident)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; origin:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; None
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; origin.get(k, None)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; local_values =&lt;span&gt; local()
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; task(num):
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     local_values.set(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, num)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;   &lt;span&gt;print&lt;/span&gt;(local_values.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),threading.current_thread().name)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(20&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     th = threading.Thread(target=task, args=(i,), name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;线程%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; i)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     th.start()    
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;自定义类似threading.local对象&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　一、self.storage={}&lt;/p&gt;
&lt;p&gt;　　　　object.__setattr__(self, 'storage', {})  使用此方法时，对象.xx不会调用__setattr__()方法&lt;/p&gt;
&lt;p&gt;　　二、对象.xx&lt;/p&gt;
&lt;p&gt;　　　　触发：&lt;/p&gt;
&lt;p&gt;　　　　　　def __setattr__(self, key, value):&lt;/p&gt;
&lt;p&gt;　　　　　　　　print(key, value)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;flask上下文管理机制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　1.&lt;/strong&gt;threading.local对每个线程保留它自己的值，但是flask为了支持协程，它自己定义了一个Local对象，其中创建了一个字典{greenlet做唯一标识：存数据}，保证数据隔离，在Local对象中保存它的值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;2.&lt;/strong&gt;&lt;strong&gt;三个流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　a.请求到来时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　&lt;/strong&gt;ctx=封装RequestContext(request, session)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　ctx放到local中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　请求刚进来封装了一个RequestContext对象，ctx=封装RequestContext(request,session)，ctx通过push()加到local对象中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　具体用到的是_local.stack把信息加到local对象中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;b.执行视图时&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　&lt;/strong&gt;导入request&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　print(request)        --&amp;gt; LocalProxy对象的__str__方法&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　request.method    --&amp;gt; LocalProxy对象的__getattr__方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　request + 1           --&amp;gt; LocalProxy对象的__add__方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　都会调用_lookup_req_object函数：去local中将requestContext获取到，再去requestContext中获取request或session&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;c.请求结束&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　&lt;/strong&gt;ctx.auto_pop()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　ctx从local中移除&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　拿到之后在执行_request_ctx_stack.pop()，去local里面把原来请求相关的requestContext对象删除掉，这次请求终止&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;3.与Django相比是两种不同的实现方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　Django/tornado是通过传参数形式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　flask是通过上下文管理，两种方式都可以实现，只不过实现方式不一样&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用上下文&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;请求流程：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;22&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;_request_ctx_stack.local = { }
&lt;p&gt;        _app_ctx_stack.local = { }&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;1.请求到来，有人来访问&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;27&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;　　　　&lt;img id=&quot;code_img_closed_7d5951b0-fcbb-4022-9d97-7f303ad282a2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7d5951b0-fcbb-4022-9d97-7f303ad282a2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7d5951b0-fcbb-4022-9d97-7f303ad282a2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ctx = RequestContext对象&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将请求相关的数据environ封装到了RequestContext对象中&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 再将对象封装到Local中(每个线程/协程独立空间存储)&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ctx.app(当前app的名称)&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ctx.request(封装请求相关的东西)&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ctx.session 空&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; _request_ctx_stack.local =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    唯一标识:{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;stack&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[ctx,]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    唯一标识:{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;          &lt;span&gt;'&lt;/span&gt;&lt;span&gt;stack&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[ctx,]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app_ctx = AppContext对象&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app_ctx.app&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app_ctx.g&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; _app_ctx_stack.local =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    唯一标识:{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;stack&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[app_ctx,]
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    唯一标识:{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;          &lt;span&gt;'&lt;/span&gt;&lt;span&gt;stack&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[app_ctx,]
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;2.使用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;　　　　&lt;img id=&quot;code_img_closed_1f5cd40f-3498-46a5-b451-043e4129c7ec&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1f5cd40f-3498-46a5-b451-043e4129c7ec&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1f5cd40f-3498-46a5-b451-043e4129c7ec&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; request, session, g, current_app
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(request, session, g, current_app)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;都会执行相应LocalProxy对象的__str__
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; request = LocalProxy(partial(_lookup_req_object, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; session = LocalProxy(partial(_lookup_req_object, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;session&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; current_app =&lt;span&gt; LocalProxy(_find_app)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; g = LocalProxy(partial(_lookup_app_object, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;3.终止，ctx、app_ctx全部pop&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题1：多线程是如何实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;不管几个线程进来都是两个local对象，只不过是每个线程的唯一标识不同，而所有线程的唯一标识都放在对应的Local对象中，使用时取自己对应的不会出错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题2：flask的local中保存数据时，使用列表创建出来的是栈&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;如果写web程序，web运行环境：栈中永远保存1条数据(可以不用栈)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;写脚本获取app信息时，可能存在app上下文嵌套关系(要使用栈)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;　　　　&lt;img id=&quot;code_img_closed_9420b73a-8b8d-449b-91be-eced99aa6a13&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9420b73a-8b8d-449b-91be-eced99aa6a13&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9420b73a-8b8d-449b-91be-eced99aa6a13&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, current_app, globals, _app_ctx_stack
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; app1 = Flask(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; app1.debug =&lt;span&gt; True  
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; app2 = Flask(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; app2.debug =&lt;span&gt; False
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;with app1.app_context():
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(current_app.name)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(_app_ctx_stack._local.&lt;span&gt;__storage__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;with app2.app_context():
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(current_app.name)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(_app_ctx_stack._local.&lt;span&gt;__storage__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(current_app.name)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;多app应用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_be56cef1-e6b2-4d04-8dfa-b5fabacf7188&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_be56cef1-e6b2-4d04-8dfa-b5fabacf7188&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_be56cef1-e6b2-4d04-8dfa-b5fabacf7188&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; werkzeug.wsgi &lt;span&gt;import&lt;/span&gt;&lt;span&gt; DispatcherMiddleware
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; werkzeug.serving &lt;span&gt;import&lt;/span&gt;&lt;span&gt; run_simple
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, current_app
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; app1 = Flask(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; app2 = Flask(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; @app1.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(current_app)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app01&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; @app2.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/index2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index2():
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(current_app)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app02&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; http://www.oldboyedu.com/index&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; http://www.oldboyedu.com/sec/index2&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过URL分发&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; dm =&lt;span&gt; DispatcherMiddleware(app1, {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/sec&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: app2,
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app2.__call__&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     run_simple(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 5000, dm) 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;问题3：web访问多app应用时，上下文管理是如何实现？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;每个app都会调用自己的__call__方法，而且都有自己的唯一标识，并且添加到相应的local对象中，只是对应的app是不一样的，执行过程和多线程实现过程类似&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充：当用脚本写flask时，有可能会出现堆栈&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_ae1fc66b-c0c5-412b-8ede-a1a4ff9aa14d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ae1fc66b-c0c5-412b-8ede-a1a4ff9aa14d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ae1fc66b-c0c5-412b-8ede-a1a4ff9aa14d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, current_app, globals, _app_ctx_stack
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; app1 = Flask(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; app1.debug = True   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用户名/密码/邮箱&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; app2 = Flask(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; app2.debug =&lt;span&gt; False  
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; with AppContext(self):   # 执行__enter__方法&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app_ctx = AppContext(self)&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app_ctx.app&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app_ctx.g&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; with app1.app_context():&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行__enter__方法 -&amp;gt; push -&amp;gt; app_ctx添加到_app_ctx_stack.local&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; {&amp;lt;greenlet.greenlet object at 0x00000184FEEBCCC0&amp;gt;: {'stack': [&amp;lt;flask.ctx.AppContext object at 0x00000184FEFC5748&amp;gt;]}}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(current_app.name)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app01&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(current_app.config['DEBUG'])&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(_app_ctx_stack._local.&lt;span&gt;__storage__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;with app2.app_context():
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; {&amp;lt;greenlet.greenlet object at 0x00000184FEEBCCC0&amp;gt;: {'stack': [&amp;lt;flask.ctx.AppContext object at 0x00000184FEFC5748&amp;gt;, &amp;lt;flask.ctx.AppContext object at 0x00000184FEFC5860&amp;gt;]}}&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(current_app.name)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app02&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(current_app.config['DEBUG'])&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(_app_ctx_stack._local.&lt;span&gt;__storage__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(current_app.name)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; app01&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十三、偏函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_9580299e-7dfe-464b-ae0e-5805486c15a0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9580299e-7dfe-464b-ae0e-5805486c15a0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9580299e-7dfe-464b-ae0e-5805486c15a0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; functools
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func(a1, a2):
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a1, a2)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; new_func = functools.partial(func, 666&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; new_func(999)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十四、面向对象&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;当把面向对象中的所有__函数__实现时，对象做任何操作时，都会执行其中对应的方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_431e8fcf-adb4-41df-b46e-84e22c09340d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_431e8fcf-adb4-41df-b46e-84e22c09340d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_431e8fcf-adb4-41df-b46e-84e22c09340d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo(object):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, num):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         self.num =&lt;span&gt; num
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__add__&lt;/span&gt;&lt;span&gt;(self, other):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         data = self.num +&lt;span&gt; other.num
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Foo(data)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; obj1 = Foo(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; obj2 = Foo(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; v = obj1 + obj2
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;面向对象私有&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_051ca438-19ac-476c-8682-6f0558888b36&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_051ca438-19ac-476c-8682-6f0558888b36&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_051ca438-19ac-476c-8682-6f0558888b36&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo(object):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         self.name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         self.&lt;span&gt;__age&lt;/span&gt; = 18
&lt;span&gt; 5&lt;/span&gt;     
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_age(self):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;          &lt;span&gt;return&lt;/span&gt; self.&lt;span&gt;__age&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; obj =&lt;span&gt; Foo()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj.name)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 强制获取私有字段&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(obj._Foo__age)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(obj.get_age())
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;十五、拼接列表中的值&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;9.8937381404175&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_56a17ee3-5a80-430d-a7f2-e8e44036d95f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_56a17ee3-5a80-430d-a7f2-e8e44036d95f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_56a17ee3-5a80-430d-a7f2-e8e44036d95f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; itertools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; chain
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; v1 = [11, 22, 33&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; v2 = [44, 55, 66&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; new =&lt;span&gt; chain(v1, v2)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; new:
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(item)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;实例一&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_86cb425d-2b9c-4d6c-82ee-54d010b60244&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_86cb425d-2b9c-4d6c-82ee-54d010b60244&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_86cb425d-2b9c-4d6c-82ee-54d010b60244&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; itertools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; chain
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f1(x):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; x + 1
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; func1_list = [f1, &lt;span&gt;lambda&lt;/span&gt; x:x-1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f2(x):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; x + 10
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; new_fun_list =&lt;span&gt; chain([f2], func1_list)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; func &lt;span&gt;in&lt;/span&gt;&lt;span&gt; new_fun_list:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(func)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;实例二&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十六、数据库连接池(基于threading.local实现)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;友情链接：&lt;/strong&gt;&lt;a href=&quot;https://www.cnblogs.com/wupeiqi/articles/8184686.html&quot;&gt;https://www.cnblogs.com/wupeiqi/articles/8184686.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Django和Flask使用数据库分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　Django：ORM(pymysql/MySQLdb)&lt;/p&gt;
&lt;p&gt;　　Flask：原生SQL&lt;/p&gt;
&lt;p&gt;　　　　　 　　pymysql(2/3)&lt;/p&gt;
&lt;p&gt;　　　　　　　 MySQLdb(2)&lt;/p&gt;
&lt;p&gt;　　　　　 SQLAlchemy(ORM)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;原生SQL&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;16&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_c9134abb-fae0-4a9d-97d2-69dac90726b2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c9134abb-fae0-4a9d-97d2-69dac90726b2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c9134abb-fae0-4a9d-97d2-69dac90726b2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; CONN = pymysql.connect(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                                        port=3306&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                                        user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                                        password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                                        database=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pooldb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                                        charset=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; cursor =&lt;span&gt; CONN.cursor()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; cursor.execute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select * from tb1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; result =&lt;span&gt; cursor.fetchall()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;cursor.close()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(result)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;1.来一个用户连接一次数据库(把连接数据库的操作放到全局变量中)&lt;/p&gt;
&lt;p&gt;　　2.并发运行时，拿到的数据有可能是错的&lt;/p&gt;
&lt;p&gt;　　3.加锁可以解决信息错误的问题，但是没有并发运行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;不能为每个用户创建一个连接&lt;/p&gt;
&lt;p&gt;　　创建一定数量的连接池，如果有人来使用时有空的就拿去用，用完再还回来，没有时就等待&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用DBUtils模块&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　安装：如果安装到虚拟环境，需要先切换到虚拟环境&lt;/p&gt;
&lt;p&gt;　　使用：&lt;/p&gt;
&lt;p&gt;　　　　模式一：为每个线程创建一个连接&lt;/p&gt;
&lt;p&gt;　　　　模式二：创建n个连接，多线程来时，去获取&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;　　&lt;img id=&quot;code_img_closed_9f98933d-78e0-4e08-86a5-f54f74d45685&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9f98933d-78e0-4e08-86a5-f54f74d45685&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9f98933d-78e0-4e08-86a5-f54f74d45685&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pymysql
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; DBUtils.PooledDB &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PooledDB
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; POOL =&lt;span&gt; PooledDB(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     creator=pymysql,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用链接数据库的模块&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     maxconnections=6,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 连接池允许的最大连接数，0和None表示不限制连接数&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     mincached=2,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化时，链接池中至少创建的空闲的链接，0表示不创建&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     maxcached=5,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 链接池中最多闲置的链接，0和None不限制&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     maxshared=3,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     blocking=True,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     maxusage=None,  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个链接最多被重复使用的次数，None表示无限制&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     setsession=[],  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     ping=&lt;span&gt;0,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     port=3306&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     user=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     database=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pooldb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     charset=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SQLHelper(object):
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;@staticmethod
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; fetch_one(sql, args):
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     conn =&lt;span&gt; POOL.connection()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     cursor =&lt;span&gt; conn.cursor()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    cursor.execute(sql, args)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     result =&lt;span&gt; cursor.fetchone()
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    conn.close()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;@staticmethod
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; fetch_all(sql, args):
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     conn =&lt;span&gt; POOL.connection()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     cursor =&lt;span&gt; conn.cursor()
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    cursor.execute(sql, args)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     result =&lt;span&gt; cursor.fetchall()
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    conn.close()
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; result = SQLHelper.fetch_one(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select * from tb1 where id &amp;gt; %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [1&lt;span&gt;,])
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(result)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十七、信号(只能执行不能终止)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Django：要有请求、有信号、信号中注册函数&lt;/p&gt;
&lt;p&gt;Flask：&lt;/p&gt;
&lt;p&gt;　　before_first_request&lt;/p&gt;
&lt;p&gt;　　触发request_started信号&lt;/p&gt;
&lt;p&gt;　　before_request&lt;/p&gt;
&lt;p&gt;　　模板渲染&lt;/p&gt;
&lt;div readability=&quot;79&quot;&gt;
&lt;p&gt;　　　　渲染前的信号：before_render_template.send(app, template=template, context=context)&lt;/p&gt;
&lt;p&gt;　　　　　　rv = template.render(context)  # 模板渲染&lt;/p&gt;
&lt;p&gt;　　　　渲染后的信号：template_rendered.send(app, template=template, context=context)&lt;/p&gt;
&lt;p&gt;　　after_request&lt;/p&gt;
&lt;p&gt;　　session.save_session()&lt;/p&gt;
&lt;p&gt;　　触发request_finished信号&lt;/p&gt;
&lt;p&gt;　　如果上述过程出错：&lt;/p&gt;
&lt;p&gt;　　　　触发错误处理信号：got_request_exception.send(self, exception=e)&lt;/p&gt;
&lt;p&gt;　　触发信号：request_tearing_down&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十八、MetaClass&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;作用：用来指定当前类是由谁来创建(默认type创建)&lt;/p&gt;
&lt;p&gt;类由type创建：class Foo(metaclass=type)&lt;/p&gt;
&lt;p&gt;继承type：class Foo(type)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;十九、Flask-session&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;97&quot;&gt;
&lt;p&gt;Flask中的session处理机制(内置：将session保存在加密的cookie中实现)&lt;/p&gt;
&lt;p&gt;　　请求刚进来：获取随机字符串，存在则去&quot;数据库&quot;中获取原来的个人数据，否则创建一个空容器。--&amp;gt; 内存：对象(随机字符串，{放置数据的容器})&lt;/p&gt;
&lt;p&gt;　　　　# 到底是什么对象？&lt;/p&gt;
&lt;p&gt;              # 1.obj = 创建SecureCookieSessionInterface()&lt;/p&gt;
&lt;p&gt;              # 2.obj = open_session(self.app, self.request) = SecureCookieSession()&lt;/p&gt;
&lt;p&gt;              # self.session = SecureCookieSession()对象&lt;/p&gt;
&lt;p&gt;              # 为session创建一个特殊的字典&lt;/p&gt;
&lt;p&gt;              self.session = session_interface.open_session(self.app, self.request)&lt;/p&gt;
&lt;p&gt;　　视图：操作内存中对象(随机字符串，{放置数据的容器})&lt;/p&gt;
&lt;p&gt;　　　　响应：内存对象(随机字符串，{放置数据的容器})&lt;/p&gt;
&lt;p&gt;　　　　　　将数据保存到数据库&lt;/p&gt;
&lt;p&gt;　　　　　　把随机字符串写在用户cookie中            &lt;/p&gt;
&lt;p&gt;　　自定义&lt;/p&gt;
&lt;p&gt;　　　　请求刚进来：&lt;/p&gt;
&lt;p&gt;　　　　　　# 创建特殊的字典，并添加到Local中&lt;/p&gt;
&lt;p&gt;                　  # 调用关系：&lt;/p&gt;
&lt;p&gt;                     #     self.session_interface.open_session(self, request)&lt;/p&gt;
&lt;p&gt;                     #     由于默认app中的session_interface = SecureCookieSessionInterface()&lt;/p&gt;
&lt;p&gt;                     #         SecureCookieSessionInterface().open_session(self, request)&lt;/p&gt;
&lt;p&gt;                     #   由于默认app中的session_interface = MySessionInterFace()&lt;/p&gt;
&lt;p&gt;                     #         MySessionInterFace().open_session(self, request)&lt;/p&gt;
&lt;p&gt;                     self.session = session_interface.open_session(self.app, self.request)&lt;/p&gt;
&lt;p&gt;　　　　调用：&lt;/p&gt;
&lt;p&gt;　　　　　　session --&amp;gt; LocalProxy --&amp;gt; 偏函数 --&amp;gt; LocalStack --&amp;gt; Local&lt;/p&gt;
&lt;p&gt;　　　　请求终止：&lt;/p&gt;
&lt;p&gt;　　　　　　#     由于默认app中的session_interface = SecureCookieSessionInterface()&lt;/p&gt;
&lt;p&gt;                     #         SecureCookieSessionInterface().save_session(self, app, session, response)&lt;/p&gt;
&lt;p&gt;                     #   由于默认app中的session_interface = MySessionInterFace()&lt;/p&gt;
&lt;p&gt;                     #         MySessionInterFace().save_session(self, app, session, response)&lt;/p&gt;
&lt;p&gt;　　flask-session组件&lt;/p&gt;
&lt;p&gt;　　　　随机生成一个ID&lt;/p&gt;
&lt;p&gt;　　　　　　&amp;gt;&amp;gt;&amp;gt; from uuid import uuid4&lt;/p&gt;
&lt;p&gt;                     &amp;gt;&amp;gt;&amp;gt; uuid4()&lt;/p&gt;
&lt;p&gt;                　 UUID('81a3ae5a-991f-4eb9-9e1d-76c11d248887')&lt;/p&gt;
&lt;p&gt;　　　　使用：  &lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;　　　　　　&lt;img id=&quot;code_img_closed_b709b75c-a65c-4dac-a03b-e55d9ae5ca7c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b709b75c-a65c-4dac-a03b-e55d9ae5ca7c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b709b75c-a65c-4dac-a03b-e55d9ae5ca7c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, session
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask_session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; RedisSessionInterface
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; app = Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; app.secret_key = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdfasdf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式一&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Redis
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; conn =&lt;span&gt; Redis()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; app.session_interface = RedisSessionInterface(conn, key_prefix=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, use_signer=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 方式二&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; redis &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Redis
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; flask_session &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Session
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; app.config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSION_TYPE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; app.config[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSION_REDIS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = Redis(host=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,port=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6379&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;Session(app)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; @app.route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     session[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 123
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     app.run()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;代码示例&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　　　问题：设置cookie时，如何设定关闭浏览器则cookie失效&lt;/p&gt;
&lt;p&gt;　　　　　　request.set_cookie('k', 'v', exipre=None)   &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二十、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.哪里还用到过threading.local&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;DBUtils&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.上下文管理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;请求：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　request：封装请求相关信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　session：保存用户回话相关信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　应用：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　app：当前应用相关信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　g：每个请求周期都会创建一个用于在请求周期中传递值的一个容器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.多app应用&amp;amp;蓝图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;都是分发URL，多app应用是在app前面分发，蓝图是在app后面分发&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.为什么用栈？&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;存在app上下文嵌套关系时，会将信息堆栈，但是不用担心取值的问题，因为当前app每次取值都是取的最后一个，用完之后就清除了，而不会影响其他app的使用，相当于一个先进后出的队列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.面向对象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;封装&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;　　　　&lt;img id=&quot;code_img_closed_590d5023-5ba1-499d-a8f3-7a22b87aca5d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_590d5023-5ba1-499d-a8f3-7a22b87aca5d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_590d5023-5ba1-499d-a8f3-7a22b87aca5d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;        self.age = 23
&lt;span&gt; 4&lt;/span&gt;        self.name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xiaoming&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Bar:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         self.xx = 123
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把类再封装到一个对象里面&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Base:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         self.f =&lt;span&gt; Foo()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         self.x = Bar()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　某个值 + 括号&lt;/p&gt;
&lt;p&gt;　　　　函数/方法：看谁调用，判断函数或方法&lt;/p&gt;
&lt;p&gt;　　　　类和对象&lt;/p&gt;
&lt;p&gt;　　特殊的双下划线方法，flask中的LocalProxy里面都使用过&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;　　　　&lt;img id=&quot;code_img_closed_99d0053c-585e-4fec-8d31-ed7fd030d330&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_99d0053c-585e-4fec-8d31-ed7fd030d330&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_99d0053c-585e-4fec-8d31-ed7fd030d330&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;__new__&lt;/span&gt;
&lt;span&gt;__init__&lt;/span&gt;
&lt;span&gt;__call__&lt;/span&gt;
&lt;span&gt;__str__&lt;/span&gt;
&lt;span&gt;__setattr__&lt;/span&gt;
&lt;span&gt;__getattr__&lt;/span&gt;
&lt;span&gt;__setitem__&lt;/span&gt;
&lt;span&gt;__enter__&lt;/span&gt;
&lt;span&gt;__exit__&lt;/span&gt;
&lt;span&gt;__add__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　强制调用私有字段，只能在自己这个类中调用&lt;/p&gt;
&lt;p&gt;　　　　子类和派生类中都不能调用基类私有字段&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 20 Sep 2018 12:32:00 +0000</pubDate>
<dc:creator>用心改变人生</dc:creator>
<og:description>首先，学习flask之前，先了解一下Django和Flask中是怎么渲染字符串的。在Django中使用mark_safe()；在Flask中使用Markup()；还可以在HTML中使用管道符{{ ad</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ccmldl/p/9651663.html</dc:identifier>
</item>
</channel>
</rss>