<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Dockerfile 中的 COPY 与 ADD 命令 - sparkdev</title>
<link>http://www.cnblogs.com/sparkdev/p/9573248.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sparkdev/p/9573248.html</guid>
<description>&lt;p&gt;&lt;span&gt;Dockerfile 中提供了两个非常相似的命令 COPY 和 ADD，本文尝试解释这两个命令的基本功能，以及其异同点，然后总结其各自适合的应用场景。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在使用 docker build 命令通过 Dockerfile 创建镜像时，会产生一个 build 上下文(context)。所谓的 build 上下文就是 docker build 命令的 PATH 或 URL 指定的路径中的文件的集合。在镜像 build 过程中可以引用上下文中的任何文件，比如我们要介绍的 COPY 和 ADD 命令，就可以引用上下文中的文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;默认情况下 docker build -t testx . 命令中的 . 表示 build 上下文为当前目录。当然我们可以指定一个目录作为上下文，比如下面的命令：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$ docker build -t testx /home/nick/hc&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我们指定 /home/nick/hc 目录为 build 上下文，默认情况下 docker 会使用在上下文的根目录下找到的 Dockerfile 文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;COPY 和 ADD 命令不能拷贝上下文之外的本地文件&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;对于 COPY 和 ADD 命令来说，如果要把本地的文件拷贝到镜像中，那么本地的文件必须是在上下文目录中的文件。其实这一点很好解释，因为在执行 build 命令时，&lt;strong&gt;docker 客户端会把上下文中的所有文件发送给 docker daemon&lt;/strong&gt;。考虑 docker 客户端和 docker daemon 不在同一台机器上的情况，build 命令只能从上下文中获取文件。如果我们在 Dockerfile 的 COPY 和 ADD 命令中引用了上下文中没有的文件，就会收到类似下面的错误：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/952033/201809/952033-20180902112643849-2136562601.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;与 WORKDIR 协同工作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;WORKDIR 命令为后续的 RUN、CMD、COPY、ADD 等命令配置工作目录。在设置了 WORKDIR 命令后，接下来的 COPY 和 ADD 命令中的相对路径就是相对于 WORKDIR 指定的路径。比如我们在 Dockerfile 中添加下面的命令：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
WORKDIR /&lt;span&gt;app
COPY checkredis.py .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后构建名称为 testx 的容器镜像，并运行一个容器查看文件路径：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/952033/201809/952033-20180902112722203-1526799966.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;checkredis.py 文件就是被复制到了 WORKDIR /app 目录下。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果仅仅是把本地的文件拷贝到容器镜像中，COPY 命令是最合适不过的。其命令的格式为：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;COPY &amp;lt;src&amp;gt; &amp;lt;dest&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了指定完整的文件名外，COPY 命令还支持 Go 风格的通配符，比如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
COPY check* /testdir/&lt;span&gt;           # 拷贝所有 check 开头的文件
COPY check&lt;/span&gt;?.log /testdir/       # ? 是单个字符的占位符，比如匹配文件 check1.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对于目录而言，COPY 和 ADD 命令具有相同的特点：&lt;strong&gt;只复制目录中的内容而不包含目录自身。&lt;/strong&gt;比如我们在 Dockerfile 中添加下面的命令：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
WORKDIR /&lt;span&gt;app
COPY nickdir .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中 nickdir 目录的结构如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/952033/201809/952033-20180902112846680-1834197851.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;重新构建镜像 testx，运行一个容器并查看 /app 目录下的内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/952033/201809/952033-20180902112918940-105209772.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里只有 file1 和 file2，少了一层目录 nickdir。如果想让 file1 和 file2 还保存在 nickdir 目录中，需要在目标路径中指定这个目录的名称，比如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
WORKDIR /&lt;span&gt;app
COPY nickdir &lt;strong&gt;.&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;/nickdir&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;COPY 命令区别于 ADD 命令的一个用法是在 multistage 场景下。&lt;/strong&gt;关于 multistage 的介绍和用法请参考笔者的《&lt;a href=&quot;https://www.cnblogs.com/sparkdev/p/8508435.html&quot; target=&quot;_blank&quot;&gt;Dockerfile 中的 multi-stage&lt;/a&gt;》一文。在 multistage 的用法中，可以使用 COPY 命令把前一阶段构建的产物拷贝到另一个镜像中，比如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
FROM golang:&lt;span&gt;1.7&lt;/span&gt;.&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
WORKDIR &lt;/span&gt;/go/src/github.com/sparkdevo/href-counter/&lt;span&gt;
RUN go get &lt;/span&gt;-d -v golang.org/x/net/&lt;span&gt;html
COPY app.go    .
RUN CGO_ENABLED&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt; GOOS=linux go build -a -installsuffix cgo -&lt;span&gt;o app .

FROM alpine:latest
RUN apk &lt;/span&gt;--no-cache add ca-&lt;span&gt;certificates
WORKDIR &lt;/span&gt;/root/&lt;span&gt;&lt;strong&gt;
COPY --from=0 /go/src/github.com/sparkdevo/href-counter/&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;app .&lt;/strong&gt;&lt;/span&gt;
CMD [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这段代码引用自《&lt;a href=&quot;https://www.cnblogs.com/sparkdev/p/8508435.html&quot; target=&quot;_blank&quot;&gt;Dockerfile 中的 multi-stage&lt;/a&gt;》一文，其中的 COPY 命令通过指定 --from=0 参数，把前一阶段构建的产物拷贝到了当前的镜像中。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;ADD 命令的格式和 COPY 命令相同，也是：&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;ADD &amp;lt;src&amp;gt; &amp;lt;dest&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了不能用在 multistage 的场景下，ADD 命令可以完成 COPY 命令的所有功能，并且还可以完成两类超酷的功能：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;解压压缩文件并把它们添加到镜像中&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;从 url 拷贝文件到镜像中&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当然，这些功能也让 ADD 命令用起来复杂一些，不如 COPY 命令那么直观。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;解压压缩文件并把它们添加到镜像中&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;如果我们有一个压缩文件包，并且需要把这个压缩包中的文件添加到镜像中。需不需要先解开压缩包然后执行 COPY 命令呢？当然不需要！我们可以通过 ADD 命令一次搞定：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
WORKDIR /&lt;span&gt;app
ADD nickdir.&lt;/span&gt;&lt;span&gt;tar&lt;/span&gt;.gz .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这应该是 ADD 命令的最佳使用场景了！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;从 url 拷贝文件到镜像中&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;这是一个更加酷炫的用法！但是在 docker &lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy&quot; target=&quot;_blank&quot;&gt;官方文档的最佳实践&lt;/a&gt;中却强烈建议不要这么用！！docker 官方建议我们当需要从远程复制文件时，最好使用 curl 或 wget 命令来代替 ADD 命令。原因是，当使用 ADD 命令时，会创建更多的镜像层，当然镜像的 size 也会更大(下面的两段代码来自 docker 官方文档)：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ADD http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;example.com/big.tar.xz /usr/src/things/&lt;/span&gt;
RUN &lt;span&gt;tar&lt;/span&gt; -xJf /usr/src/things/big.&lt;span&gt;tar&lt;/span&gt;.xz -C /usr/src/&lt;span&gt;things
RUN &lt;/span&gt;&lt;span&gt;make&lt;/span&gt; -C /usr/src/things all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果使用下面的命令，不仅镜像的层数减少，而且镜像中也不包含 big.tar.xz 文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
RUN &lt;span&gt;mkdir&lt;/span&gt; -p /usr/src/&lt;span&gt;things \
    &lt;/span&gt;&amp;amp;&amp;amp; curl -SL http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;example.com/big.tar.xz \&lt;/span&gt;
    | &lt;span&gt;tar&lt;/span&gt; -xJC /usr/src/&lt;span&gt;things \
    &lt;/span&gt;&amp;amp;&amp;amp; &lt;span&gt;make&lt;/span&gt; -C /usr/src/things all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;好吧，看起来只有在解压压缩文件并把它们添加到镜像中时才需要 ADD 命令！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在使用 COPY 和 ADD 命令时，我们可以通过一些技巧来加速镜像的 build 过程。比如把那些最不容易发生变化的文件的拷贝操作放在较低的镜像层中，这样在重新 build 镜像时就会使用前面 build 产生的缓存。比如笔者构建镜像时需要用到下面几个文件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/952033/201809/952033-20180902113213968-1339201444.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中 myhc.py 文件不经常变化，而 checkmongo.py、checkmysql.py 和 checkredis.py 这三个文件则经常变化，那么我们可这样来设计 Dockerfile 文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
WORKDIR /&lt;span&gt;app
COPY myhc.py .
COPY check&lt;/span&gt;* ./
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;让 COPY myhc.py . 单独占据一个镜像层，当 build 过一次后，每次因 checkmongo.py、checkmysql.py 和 checkredis.py 这三个文件变化而导致的重新 build 都不会重新 build COPY myhc.py . 镜像层：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/952033/201809/952033-20180902113252087-548106505.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如上图所示，第二步和第三步都没有重新 build 镜像层，而是使用了之前的缓存，从第四步才开始重新 build 了镜像层。当文件 size 比较大且文件的数量又比较多，尤其是需要执行安装等操作时，这样的设计对于 build 速度的提升还是很明显的。所以我们应该尽量选择能够使用缓存的 Dockerfile 写法。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当第一次看到 COPY 和 ADD 命令时不免让人感到疑惑。但分析之后大家会发现 COPY 命令是为最基本的用法设计的，概念清晰，操作简单。而 ADD 命令基本上是 COPY 命令的超集(除了 multistage 场景)，可以实现一些方便、酷炫的拷贝操作。ADD 命令在增加了功能的同时也增加了使用它的复杂度，比如从 url 拷贝压缩文件时弊大于利。希望本文能够解去大家对 Dockerfile 中 COPY 和 ADD 命令的疑惑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://medium.com/the-code-review/docker-copy-dockerfile-best-practices-503704bee69f&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Docker COPY: Dockerfile best practices&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Best practices for writing Dockerfiles&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#copy&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Dockerfile COPY&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#add&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Dockerfile ADD&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 02 Sep 2018 23:14:00 +0000</pubDate>
<dc:creator>sparkdev</dc:creator>
<og:description>Dockerfile 中提供了两个非常相似的命令 COPY 和 ADD，本文尝试解释这两个命令的基本功能，以及其异同点，然后总结其各自适合的应用场景。 Build 上下文的概念 在使用 docker</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sparkdev/p/9573248.html</dc:identifier>
</item>
<item>
<title>webpack4.0各个击破（8）—— tapable篇 - 大史不说话</title>
<link>http://www.cnblogs.com/dashnowords/p/9572750.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dashnowords/p/9572750.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;作为前端最火的构建工具，是前端自动化工具链&lt;strong&gt;最重要的部分&lt;/strong&gt;，使用门槛较高。本系列是笔者自己的学习记录，比较基础，希望通过&lt;strong&gt;问题 + 解决方式&lt;/strong&gt;的模式，以前端构建中遇到的具体需求为出发点，学习&lt;code&gt;webpack&lt;/code&gt;工具中相应的处理办法。（本篇中的参数配置及使用方式均基于&lt;code&gt;webpack4.0版本&lt;/code&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.51cto.com/images/blog/201808/30/a2530d142d21371d725bf61272810815.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://i2.51cto.com/images/blog/201808/30/12e6eba325b03d59c9c45a5d3110d530.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一.-tapable概述&quot;&gt;一. tapable概述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tapable&lt;/code&gt;地址：&lt;a href=&quot;https://github.com/webpack/tapable/tree/tapable-0.2&quot;&gt;【tapable-0.2】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tapable&lt;/code&gt;是&lt;code&gt;webpack&lt;/code&gt;的核心框架（4.0以上版本的API已经发生了变化），是一个基于事件流的框架，或者叫做发布订阅模式，或观察者模式，&lt;code&gt;webpack&lt;/code&gt;的整个生命周期及其开放的自定义插件系统都离不开&lt;code&gt;tapable&lt;/code&gt;的支持，研究其运行原理是阅读&lt;code&gt;webpack&lt;/code&gt;源代码的第一步。官方仓库&lt;code&gt;master&lt;/code&gt;分支的代码是经过ES6重构的，模块化拆分非常细，且加入了很多非核心逻辑，阅读难度较大。建议先从官方仓库中0.2版本的分支开始学习，整个源码只有400行，相对容易理解。&lt;/p&gt;
&lt;h2 id=&quot;二.-tapable-0.2源码解析&quot;&gt;二. tapable-0.2源码解析&lt;/h2&gt;
&lt;h3 id=&quot;代码结构&quot;&gt;2.1 代码结构&lt;/h3&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;//类定义
function Tapable() {
    this._plugins = {};
}
//模块导出
module.exports = Tapable;
//定义了许多内部方法和原型方法
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Tapable&lt;/code&gt;实际上就是一个类定义的模块。&lt;/p&gt;
&lt;h3 id=&quot;事件监听方法&quot;&gt;2.2 事件监听方法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tapable&lt;/code&gt;通过原型方法&lt;code&gt;Tapable.prototype.plugin&lt;/code&gt;来注册事件监听。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.51cto.com/images/blog/201808/30/1067ee179a8b6ff170733401ea0cbd39.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这段代码并不复杂，调用&lt;code&gt;plugin&lt;/code&gt;方法来注册一个事件，参考浏览器环境中的&lt;code&gt;addEventListener()&lt;/code&gt;方法就很容易理解了。其逻辑就是将回调函数按照事件名称进行归类存储，在&lt;code&gt;tapable&lt;/code&gt;实例中统一调度管理。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;//__plugin属性上挂载了各个注册事件的回调函数
tapable.__plugins = {
   'click':[fn1, fn2, fn3],
   'mousedown':[fn21,fn22,fn23]
    ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;事件触发方法&quot;&gt;2.3 事件触发方法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tapable&lt;/code&gt;提供了许多事件触发的方式，其基本功能可以参考浏览器环境中的&lt;code&gt;dispatchEvent( )&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tapable&lt;/code&gt;中的事件触发方式可以按命名分为如下几个大组：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;waterfall&lt;/em&gt;方法会将上一个监听的执行结果传给下一个&lt;/li&gt;
&lt;li&gt;&lt;em&gt;bailResult&lt;/em&gt;方法只会执行到第一个返回结果不是undefined的监听器&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Series&lt;/em&gt;方法会线性执行异步监听器，上一个结束后下一个才会开始&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Parallel&lt;/em&gt;方法会并行执行所有异步监听&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;tapable&lt;/code&gt;中的典型方法如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Tapable.prototype.applyPlugins( )&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i2.51cto.com/images/blog/201808/30/70aac0f56f8df00e4a409c90117f7cf6.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同步方法，该方法接受任意参数，以第一个参数为事件名查找监听器数组，依次执行监听器的&lt;code&gt;apply( )&lt;/code&gt;方法，触发时将调用时除名称以外的其他参数传入&lt;code&gt;apply( )&lt;/code&gt;方法。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Tapable.prototype.applyPluginsWaterfall( )&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i2.51cto.com/images/blog/201808/30/1385cfa0dfb20c61468b539cb7854b1e.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同步方法，该方法接受任意参数，如果指定事件没有注册监听器，则返回第二个参数(init)，否则依次执行监听器的&lt;code&gt;apply( )&lt;/code&gt;方法，传入的args是前一个执行前一个监听器&lt;code&gt;apply( )&lt;/code&gt;方法的返回值。瀑布流这个方法名很形象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Tapable.prototype.applyPluginsBailResult( )&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i2.51cto.com/images/blog/201808/30/f1380d97c9f2af9b8e5e133717d287f8.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同步方法，该方法接受任意参数，依次执行监听器的&lt;code&gt;apply( )&lt;/code&gt;方法并取得返回值，直到某个&lt;code&gt;apply( )&lt;/code&gt;返回一个不为&lt;code&gt;undefined&lt;/code&gt;的结果，则停止执行并将这个结果返回。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Tapable.prototype.applyPluginsAsync( )&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i2.51cto.com/images/blog/201808/30/188cd3ee4dde131e8c41a6b33d260d3a.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&quot;/&gt;&lt;/p&gt;
&lt;p&gt;异步执行监听回调的方法。这个方法是顺序执行，等到第一个插件执行结束后才会执行下一个插件，实现的方式就是将下一个插件当做回调函数传入第一个插件，在第一个插件的&lt;code&gt;apply( )&lt;/code&gt;方法的方法体最后（或是异步方法最后）来调用下一个监听插件的执行。这里利用闭包实现了一个迭代器，变量记录在&lt;code&gt;applyPluginsAsync( )&lt;/code&gt;方法中（就是变量&lt;code&gt;i&lt;/code&gt;）,并在回调中函数&lt;code&gt;next( )&lt;/code&gt;中保持了对&lt;code&gt;i&lt;/code&gt;的引用。&lt;/p&gt;
&lt;p&gt;例如需要用&lt;code&gt;applyPluginsAsync( )&lt;/code&gt;方法执行的插件需要在&lt;code&gt;apply&lt;/code&gt;方法中显式执行回调函数：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;class Plugin1{
  apply(info){
        var callback = Array.prototype.pop.call(arguments[1]);
        //这里取到的callback,实际上就是源码中的具名函数next()
        callback();
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其他的异步方法大同小异，不再赘述。&lt;/p&gt;
&lt;p&gt;源码的异步方法定义中使用&lt;code&gt;copyProperties( )&lt;/code&gt;来处理两个函数，笔者尝试了很多情况这个方法都并未执行，实际情况就是将next函数加入了参数数组并继续执行，希望对此有研究的读者能够点明一下。&lt;/p&gt;
&lt;h3 id=&quot;三.-tapable1.0概述&quot;&gt;三. tapable1.0概述&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tapable&lt;/code&gt;地址：&lt;a href=&quot;https://github.com/webpack/tapable&quot;&gt;【tapable-1.0】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tapable&lt;/code&gt;在1.0版本做了很大改进，使用&lt;code&gt;ES6&lt;/code&gt;语法重写了整个框架，除了更换了API外，在插件定义方面进行了明显升级，原来只通过&lt;code&gt;plugin( )&lt;/code&gt;方法来定义插件，不阅读源码很难知道插件的规范格式，新版本的&lt;code&gt;tapable&lt;/code&gt;提供了基本样例，细分的事件钩子(&lt;strong&gt;*Hook&lt;/strong&gt;)，新的触发事件的方法(&lt;code&gt;tap&lt;/code&gt;,&lt;code&gt;tapAsync&lt;/code&gt;,&lt;code&gt;tapPromise&lt;/code&gt;)等等，但实现的基本需求是一致的，感兴趣的读者可以自行学习。&lt;/p&gt;
</description>
<pubDate>Sun, 02 Sep 2018 22:57:00 +0000</pubDate>
<dc:creator>大史不说话</dc:creator>
<og:description>作为前端最火的构建工具，是前端自动化工具链 最重要的部分 ，使用门槛较高。本系列是笔者自己的学习记录，比较基础，希望通过 问题 + 解决方式 的模式，以前端构建中遇到的具体需求为出发点，学习 工具中相</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dashnowords/p/9572750.html</dc:identifier>
</item>
<item>
<title>JDK源码分析 – HashMap - 仍是少年</title>
<link>http://www.cnblogs.com/ashleyboy/p/9576614.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ashleyboy/p/9576614.html</guid>
<description>&lt;h2&gt;HashMap类的申明&lt;/h2&gt;
&lt;p&gt;HashMap的定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HashMap&amp;lt;K,V&amp;gt; &lt;span&gt;extends&lt;/span&gt; AbstractMap&amp;lt;K,V&amp;gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;implements&lt;/span&gt; Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable {}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HashMap是一个散列表，用于存储key-value形式的键值对。&lt;/p&gt;
&lt;p&gt;从源码的定义中可以看到HashMap继承了AbstractMap抽象类而且也实现了Map&amp;lt;K，V&amp;gt;接口，AbstractMap类本身也继承了Map&amp;lt;K，V&amp;gt;接口，Map接口定义了一些map数据结构的基本操作， AbstractMap提供了Map接口的一些默认实现。&lt;/p&gt;
&lt;p&gt;HashMap实现了Cloneable接口和Serializable接口，这两个接口本身并没有定义方法，属于申明式接口，允许hashmap进行克隆和序列化。&lt;/p&gt;
&lt;p&gt;另外，HashMap不是线程安全的，如果需要使用线程安全的HashMap，可以使用Collections类中的synchronizedMap方法来获得线程安全的HashMap：&lt;/p&gt;
&lt;p&gt;Map map = Collections.synchronizedMap(new HashMap());&lt;/p&gt;
&lt;h2&gt;HashMap主要字段属性说明&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hashmap的初始容量：16&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; aka 16
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hashmap的最大容量，hashmap的容量必须是2的指数值&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认填充因子&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; DEFAULT_LOAD_FACTOR = 0.75f&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;链表转换为树的阀值：如果一个桶中的元素个数超过 TREEIFY_THRESHOLD=8 ，就使用红黑树来替换链表，从而提高速度&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TREEIFY_THRESHOLD = 8&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;树还原为链表的阈值：扩容时桶中元素小于UNTREEIFY_THRESHOLD = 6，则把树形的桶元素还原为链表结构&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; UNTREEIFY_THRESHOLD = 6&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;哈希表的最小树形化容量：当哈希表中的容量大于这个值MIN_TREEIFY_CAPACITY = 64时，哈希表中的桶才能进行树形化，否则桶中元素过多时只会扩容，并不会进行树形化， 为了避免扩容和树形化选择的冲突，这个值不能小于4* TREEIFY_THRESHOLD = 32&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MIN_TREEIFY_CAPACITY = 64&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hashmap用于存储数据的Node数组，长度是2的指数值&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt;[] table;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存entrySet返回的结果&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; Set&amp;lt;Map.Entry&amp;lt;K,V&amp;gt;&amp;gt;&lt;span&gt; entrySet;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hashmap中键值对个数&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hashmap对象修改计数器&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; modCount;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; threshold=容量*装载因子，代表目前占用数组长度的最大值，用于判断是否需要扩容&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; threshold;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;装载因子,用来衡量hashmap装载数据程度，默认值为EFAULT_LOAD_FACTOR = 0.75f，装载因子计算方法size/capacity&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; loadFactor;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查阅资料发现在JDK1.8之前hashmap的通过数组+链表的数据结构实现的，这样在hash值大量冲突时hashmap是通过一个长长的链表来存储的，JDK1.8开始，hashmap采用数组+链表+红黑树组合数据结构来实现，链表和红黑树将会按一定策略互相转换，JDK1.8开始，hashmap的存储结构大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/577318/201809/577318-20180903025459464-1074151731.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;回顾一下关于红黑树的定义：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      1. 每个结点或是红色的，或是黑色的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      2. 根节点是黑色的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      3. 每个叶结点（NIL）是黑色的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      4. 如果一个节点是红色的，则它的两个儿子都是黑色的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      5. 对于每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑色结点&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;HashMap部分方法析&lt;/h2&gt;
&lt;h3&gt;构造函数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;无参数构造函数：设置装载因子初始值0.75&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HashMap() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.loadFactor = DEFAULT_LOAD_FACTOR; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; all other fields defaulted&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;HashMap(int initialCapacity)  ：指定初始容量&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; HashMap(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; initialCapacity) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(initialCapacity, DEFAULT_LOAD_FACTOR);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;HashMap(int initialCapacity)  ：指定初始容量和装载因子&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; HashMap(&lt;span&gt;int&lt;/span&gt; initialCapacity, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; loadFactor) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始容量校验&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;lt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal initial capacity: &quot; +
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                                           initialCapacity);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验初始容量不能超过hashmap最大容量：2的30次方&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;gt;&lt;span&gt; MAXIMUM_CAPACITY)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         initialCapacity = MAXIMUM_CAPACITY; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化为最大容量
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验装载因子&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (loadFactor &amp;lt;= 0 ||&lt;span&gt; Float.isNaN(loadFactor))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal load factor: &quot; +
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                                           loadFactor);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.loadFactor =&lt;span&gt; loadFactor;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.threshold =&lt;span&gt; tableSizeFor(initialCapacity);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据根据初始化参数initialCapacity 返回大于等于该值得最小 2的指数值 作为初始容量&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; tableSizeFor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; cap) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; n = cap - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     n |= n &amp;gt;&amp;gt;&amp;gt; 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     n |= n &amp;gt;&amp;gt;&amp;gt; 2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     n |= n &amp;gt;&amp;gt;&amp;gt; 4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     n |= n &amp;gt;&amp;gt;&amp;gt; 8&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     n |= n &amp;gt;&amp;gt;&amp;gt; 16&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个构造函数可以发现初始化hashmap的容量并不是随意指定多少就初始化多少，内部根据传入的容量值做了转换，严格的将hashmap的初始容量转换成的2的指数值，比如我们初始化一个new HashMap(25)，实际初始化处来的容量是32，相当于new HashMap(32)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HashMap(Map&amp;lt;? extends K, ? extends V&amp;gt; m):初始化一个hashmap，使用默认加载因子0.75,并将hashmap参数值复制到新创建的hashmap对象中。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; HashMap(Map&amp;lt;? &lt;span&gt;extends&lt;/span&gt; K, ? &lt;span&gt;extends&lt;/span&gt; V&amp;gt;&lt;span&gt; m) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.loadFactor =&lt;span&gt; DEFAULT_LOAD_FACTOR;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     putMapEntries(m, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;put(K key, V value)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;向hashmap中添加健值对&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; putVal(hash(key), key, value, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hash：hashkey
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;key value :键值对
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;onlyIfAbsent:为true则不修改已存在的value
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;evict:返回被修改的value&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; V putVal(&lt;span&gt;int&lt;/span&gt; hash, K key, V value, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; onlyIfAbsent,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; evict) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     Node&amp;lt;K,V&amp;gt;&lt;span&gt;[] tab; 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt; p; 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n, i;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果table为null或者空，则进行resize扩容&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((tab = table) == &lt;span&gt;null&lt;/span&gt; || (n = tab.length) == 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行resize扩容，内部将初始化table和threshold&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         n = (tab =&lt;span&gt; resize()).length;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果对应索引处没有Node，则新建Node并放到table里面&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((p = tab[i = (n - 1) &amp;amp; hash]) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         tab[i] = newNode(hash, key, value, &lt;span&gt;null&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;tab[i]==null的情况，直接新创建节点并赋值给tab[i]&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;else的情况表示tab[i]不为null&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         Node&amp;lt;K,V&amp;gt;&lt;span&gt; e; 
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 　　　　 &lt;span&gt;K k;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1：hash值与tab[i]的hash值相等且key也相等，那么覆盖该节点的value域&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (p.hash == hash &amp;amp;&amp;amp;
&lt;span&gt;28&lt;/span&gt;             ((k = p.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             e = p;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;暂存tab[i]的节点p到临时变量e
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 　　   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2：判断tab[i]是否是红黑树&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (p &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeNode)     
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;        e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(&lt;span&gt;this&lt;/span&gt;, tab, hash, key, value);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到树形结构中&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3：不是红黑树 且不是第1中情况，即：hash值一致,但是key不一致，那么需要将新的key-value添加到链表末尾&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; binCount = 0; ; ++&lt;span&gt;binCount) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; ((e = p.next) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 　　　　　　　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到链表末尾&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                     p.next = newNode(hash, key, value, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 　　　　　　　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果该节点的链表长度大于8，则需要将链表转换为红黑树&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (binCount &amp;gt;= TREEIFY_THRESHOLD - 1) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -1 for 1st&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                        treeifyBin(tab, hash);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果key已经存在该链表中，直接break,执行后续更新逻辑&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;
&lt;span&gt;46&lt;/span&gt;                     ((k = e.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 p =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; existing mapping for key&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;             V oldValue =&lt;span&gt; e.value;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 　　　　　　&lt;span&gt;/&lt;/span&gt;&lt;span&gt;hash值和key相等的情况下，更新value&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!onlyIfAbsent || oldValue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 e.value =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            afterNodeAccess(e);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回旧的value值&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改次数自增&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;     ++&lt;span&gt;modCount;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否需要再次扩容&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (++size &amp;gt;&lt;span&gt; threshold)
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        resize();
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    afterNodeInsertion(evict);
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码即便加了注释，看上不也不是很清晰，csdn有篇文章分析了hash的这个方法，并给出了一个流程图，逻辑很清晰：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/577318/201809/577318-20180903025906592-893485058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 图片来源：https://blog.csdn.net/lianhuazy167/article/details/66967698&lt;/p&gt;
&lt;p&gt;上面put方法的实现中用到了一个很重要的方法resize(),这个方法的作用是当hashmap集合中的元素已经超过最大承载容量时，则对hashmap进行容量扩充。最大装载容量threshold=capacity*loadFactor,这个值一般小于数组的长度，下面看一下这个方法的实现过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//初始化或者是扩展table的容量，table的容量时按照2的指数增长的，当扩大table容量时，元素的hash值以及位置可能发生改变&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt;&lt;span&gt;[] resize() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; Node&amp;lt;K,V&amp;gt;[] oldTab =&lt;span&gt; table;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算当前哈希表 table数组长度&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; oldCap = (oldTab == &lt;span&gt;null&lt;/span&gt;) ? 0&lt;span&gt; : oldTab.length;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前阈值（装载容量=数组长度*装载因子）&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; oldThr =&lt;span&gt; threshold;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; newCap, newThr = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果table数组长度大于0&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (oldCap &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;table数组长度大于等于hashmap默认的最大值： 2的30次方&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; (oldCap &amp;gt;=&lt;span&gt; MAXIMUM_CAPACITY) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;扩充为为int型最大值&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             threshold =&lt;span&gt; Integer.MAX_VALUE;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldTab;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果table数据长度&amp;gt;=初始化长度（16） 而且 扩展1倍也小于默认最大长度：2的30次方&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
&lt;span&gt;21&lt;/span&gt;                  oldCap &amp;gt;=&lt;span&gt; DEFAULT_INITIAL_CAPACITY)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt; threshold 阈值扩大一倍&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             newThr = oldThr &amp;lt;&amp;lt; 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; double threshold&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果原先的装载容量&amp;gt;0,直接将新容量赋值为 原先的装载容量oldThr-&amp;gt;oldThreshold&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (oldThr &amp;gt; 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; initial capacity was placed in threshold&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         newCap =&lt;span&gt; oldThr;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; {               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; zero initial threshold signifies using defaults
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原先的阈值oldThr&amp;lt; =0 而且table长度也=0，这说明hashmap还未初始化，执行初始化&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         newCap = DEFAULT_INITIAL_CAPACITY;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组长度赋值16&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         newThr = (&lt;span&gt;int&lt;/span&gt;)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算新的阈值上限&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (newThr == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;float&lt;/span&gt; ft = (&lt;span&gt;float&lt;/span&gt;)newCap *&lt;span&gt; loadFactor;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (&lt;span&gt;float&lt;/span&gt;)MAXIMUM_CAPACITY ?
&lt;span&gt;37&lt;/span&gt;                   (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)ft : Integer.MAX_VALUE);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新为新的阈值&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     threshold =&lt;span&gt; newThr;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新分配table容量&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node[newCap];
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     table =&lt;span&gt; newTab;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把原先table中的复制到新的table中&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (oldTab != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; oldCap; ++&lt;span&gt;j) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             Node&amp;lt;K,V&amp;gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; ((e = oldTab[j]) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 oldTab[j] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (e.next == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                     newTab[e.hash &amp;amp; (newCap - 1)] =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeNode)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                     ((TreeNode&amp;lt;K,V&amp;gt;)e).split(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, newTab, j, oldCap);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; preserve order&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;                     Node&amp;lt;K,V&amp;gt; loHead = &lt;span&gt;null&lt;/span&gt;, loTail = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                     Node&amp;lt;K,V&amp;gt; hiHead = &lt;span&gt;null&lt;/span&gt;, hiTail = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                     Node&amp;lt;K,V&amp;gt;&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                     &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                         next =&lt;span&gt; e.next;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; ((e.hash &amp;amp; oldCap) == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (loTail == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                                 loHead =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;                                 loTail.next =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                             loTail =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (hiTail == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                                 hiHead =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt;                                 hiTail.next =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;                             hiTail =&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;                     } &lt;span&gt;while&lt;/span&gt; ((e = next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (loTail != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;                         loTail.next = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;                         newTab[j] =&lt;span&gt; loHead;
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (hiTail != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;                         hiTail.next = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;                         newTab[j + oldCap] =&lt;span&gt; hiHead;
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; newTab;
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hashmap的扩容机制主要实现步骤：&lt;/p&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果当前数组为空，则初始化当前数组（长度16，装载因子0.75）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果当前数组不为空，则将当前数组容量扩大一倍，同时将阈值（threshold）也扩大一倍，然后将之前table素组中值全部复制到新的table中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;get(Object key)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;通过key获取对应的value，实现逻辑：根据key计算hash值，通过hash值和key从hashmap中检索出唯一的结果并返回。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; V get(Object key) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     Node&amp;lt;K,V&amp;gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (e = getNode(hash(key), key)) == &lt;span&gt;null&lt;/span&gt; ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; : e.value;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hash:key对应的hash值
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;key:键值对的key&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt; getNode(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash, Object key) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first, e; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n; K k;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((tab = table) != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (n = tab.length) &amp;gt; 0 &amp;amp;&amp;amp;
&lt;span&gt;11&lt;/span&gt;         (first = tab[(n - 1) &amp;amp; hash]) != &lt;span&gt;null&lt;/span&gt;) {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tab[(n - 1) &amp;amp; hash]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据hash值计算出table中的位置,如果该位置第一个节点 key 和 hash值都和传递进来的参数相等，则返回该Node&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (first.hash == hash &amp;amp;&amp;amp; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; always check first node&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             ((k = first.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; first;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该键值对在hash表(n - 1) &amp;amp; hash索引处，但是不是第一个节点，多以遍历该链表（也可能是红黑树），不管是链表还是树，顺藤摸瓜就对了&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((e = first.next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 　　　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是红黑树，则遍历树型结构&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (first &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeNode)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; ((TreeNode&amp;lt;K,V&amp;gt;&lt;span&gt;)first).getTreeNode(hash, key);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不是树，遍历链表&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;
&lt;span&gt;24&lt;/span&gt;                     ((k = e.key) == key || (key != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))))
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; e;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             } &lt;span&gt;while&lt;/span&gt; ((e = e.next) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算hash值&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash(Object key) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; h;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;get方法逻辑并没有什么难懂得地方，但是过程中有两个地方需要额外注意一下：&lt;/p&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;tab[(n - 1) &amp;amp; hash])： 根据hash值计算元素位置，其中n为hashmap中table数组长度，这里使用(n-1)&amp;amp;hash的方式计算索引位置，简单解释一下这个含义，hashmap中数组的大小总是2的指数值，这种特殊的情况之下(n-1)&amp;amp;hash等同于hash%n取模运算结果，并且使用(n-1)&amp;amp;hash位运算的方式效率上也高于取模运算。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;hash(key)：计算hash值，这个函数并不是直接通过hashCode()获取hash值，而是做了一步位运算(h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16)，即将hashcode的高16为与低16位异或运算，为什么这么做呢？因为hashcode()返回的是一个32位的int类型数值，将该数值的高16位与低16位做异或运算主要是想让高位数据参与运算，增加hash值得随机性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
<pubDate>Sun, 02 Sep 2018 19:04:00 +0000</pubDate>
<dc:creator>仍是少年</dc:creator>
<og:description>HashMap类的申明 HashMap的定义如下： HashMap是一个散列表，用于存储key-value形式的键值对。 从源码的定义中可以看到HashMap继承了AbstractMap抽象类而且也实</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ashleyboy/p/9576614.html</dc:identifier>
</item>
<item>
<title>教你如何在React及Redux项目中进行服务端渲染 - -渔人码头-</title>
<link>http://www.cnblogs.com/imwtr/p/9576546.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imwtr/p/9576546.html</guid>
<description>&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;服务端渲染（SSR: Server Side Rendering）在React项目中有着广泛的应用场景&lt;/p&gt;
&lt;p&gt;基于React虚拟DOM的特性，在浏览器端和服务端我们可以实现同构（可以使用同一份代码来实现多端的功能）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务端渲染的优点主要由三点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 利于SEO&lt;/p&gt;
&lt;p&gt;2. 提高首屏渲染速度&lt;/p&gt;
&lt;p&gt;3. 同构直出，使用同一份（JS）代码实现，便于开发和维护&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今儿做了个Demo，看看如何在实际的项目中实现服务端渲染&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/imwtr/react-redux-ssr&quot; target=&quot;_blank&quot;&gt;项目地址&lt;/a&gt; ，欢迎围观！&lt;/p&gt;
&lt;p&gt;有纯粹的 &lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot;&gt;React&lt;/a&gt;，也有 &lt;a href=&quot;https://redux.js.org/&quot; target=&quot;_blank&quot;&gt;Redux&lt;/a&gt; 作为状态管理&lt;/p&gt;
&lt;p&gt;使用 &lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt; 监听编译文件，&lt;a href=&quot;https://github.com/remy/nodemon&quot; target=&quot;_blank&quot;&gt;nodemon&lt;/a&gt; 监听服务器文件变动&lt;/p&gt;
&lt;p&gt;使用 &lt;a href=&quot;https://github.com/redux-saga/redux-saga&quot; target=&quot;_blank&quot;&gt;redux-saga&lt;/a&gt; 处理异步action，使用 &lt;a href=&quot;https://github.com/expressjs/express&quot; target=&quot;_blank&quot;&gt;express&lt;/a&gt; 处理页面渲染&lt;/p&gt;
&lt;p&gt;本项目包含四个页面，四种组合，满满的干货，文字可能说不清楚，就去看代码吧！&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/imwtr/p/9576546.html#s1&quot; target=&quot;_parent&quot;&gt;&lt;span&gt;React&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/imwtr/p/9576546.html#s2&quot; target=&quot;_parent&quot;&gt;&lt;span&gt;React + SSR&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/imwtr/p/9576546.html#s3&quot; target=&quot;_parent&quot;&gt;&lt;span&gt;React + Redux&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/imwtr/p/9576546.html#s4&quot; target=&quot;_parent&quot;&gt;&lt;span&gt;React + Redux + SSR&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;span&gt;一、React&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;实现一个最基本的React组件，就能搞掂第一个页面了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 消息列表
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
class Message extends Component {
    constructor(props) {
        super(props);

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
            msgs: []
        };
    }

    componentDidMount() {
        setTimeout(() &lt;/span&gt;=&amp;gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
                msgs: [{
                    id: &lt;/span&gt;'1'&lt;span&gt;,
                    content: &lt;/span&gt;'我是消息我是消息我是消息'&lt;span&gt;,
                    time: &lt;/span&gt;'2018-11-23 12:33:44'&lt;span&gt;,
                    userName: &lt;/span&gt;'王羲之'&lt;span&gt;
                }, {
                    id: &lt;/span&gt;'2'&lt;span&gt;,
                    content: &lt;/span&gt;'我是消息我是消息我是消息2'&lt;span&gt;,
                    time: &lt;/span&gt;'2018-11-23 12:33:45'&lt;span&gt;,
                    userName: &lt;/span&gt;'王博之'&lt;span&gt;
                }, {
                    id: &lt;/span&gt;'3'&lt;span&gt;,
                    content: &lt;/span&gt;'我是消息我是消息我是消息3'&lt;span&gt;,
                    time: &lt;/span&gt;'2018-11-23 12:33:44'&lt;span&gt;,
                    userName: &lt;/span&gt;'王安石'&lt;span&gt;
                }, {
                    id: &lt;/span&gt;'4'&lt;span&gt;,
                    content: &lt;/span&gt;'我是消息我是消息我是消息45'&lt;span&gt;,
                    time: &lt;/span&gt;'2018-11-23 12:33:45'&lt;span&gt;,
                    userName: &lt;/span&gt;'王明'&lt;span&gt;
                }]
            });
        }, &lt;/span&gt;1000&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 消息已阅&lt;/span&gt;
&lt;span&gt;    msgRead(id, e) {
        let msgs &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state.msgs;
        let itemIndex &lt;/span&gt;= msgs.findIndex(item =&amp;gt; item.id ===&lt;span&gt; id);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (itemIndex !== -1&lt;span&gt;) {
            msgs.splice(itemIndex, &lt;/span&gt;1&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
                msgs
            });
        }
    }

    render() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;div&amp;gt;
                &amp;lt;h4&amp;gt;消息列表&amp;lt;/h4&amp;gt;
                &amp;lt;div className=&quot;msg-items&quot;&amp;gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state.msgs.map(item =&amp;gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
                            &lt;/span&gt;&amp;lt;div key={item.id} className=&quot;msg-item&quot;&amp;gt;
                                &amp;lt;p className=&quot;msg-item__header&quot;&amp;gt;{item.userName} - {item.time}&amp;lt;/p&amp;gt;
                                &amp;lt;p className=&quot;msg-item__content&quot;&amp;gt;{item.content}&amp;lt;/p&amp;gt;
                                &amp;lt;a href=&quot;javascript:;&quot; className=&quot;msg-item__read&quot; onClick={&lt;span&gt;this&lt;/span&gt;.msgRead.bind(&lt;span&gt;this&lt;/span&gt;, item.id)}&amp;gt;&amp;amp;times;&amp;lt;/a&amp;gt;
                            &amp;lt;/div&amp;gt;
&lt;span&gt;                        )
                    })
                }
                &lt;/span&gt;&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;span&gt;        )
    }
}

render(&lt;/span&gt;&amp;lt;Message /&amp;gt;, document.getElementById('content'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是不是很简单，代码比较简单就不说了&lt;/p&gt;
&lt;p&gt;来看看页面效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688270/201809/688270-20180902221916829-1766582646.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到页面白屏时间比较长&lt;/p&gt;
&lt;p&gt;这里有两个白屏&lt;/p&gt;
&lt;p&gt;1. 加载完JS后才初始化标题&lt;/p&gt;
&lt;p&gt;2. 进行异步请求数据，再将消息列表渲染&lt;/p&gt;
&lt;p&gt;看起来是停顿地比较久的，那么使用服务端渲染有什么效果呢？&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;二. React + SSR&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在讲如何实现之前，先看看最终效果&lt;/p&gt;
&lt;p&gt;可以看到页面是直出的，没有停顿&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688270/201809/688270-20180902222259665-750754612.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在React 15中，实现服务端渲染主要靠的是 ReactDOMServer 的 renderToString 和 renderToStaticMarkup方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let ReactDOMServer = require('react-dom/server'&lt;span&gt;);

ReactDOMServer.renderToString(&lt;/span&gt;&amp;lt;Message preloadState={preloadState} /&amp;gt;)
&lt;span&gt;
ReactDOMServer.renderToStaticMarkup(&lt;/span&gt;&amp;lt;Message preloadState={preloadState} /&amp;gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将组件直接在服务端处理为字符串，我们根据传入的初始状态值，在服务端进行组件的初始化&lt;/p&gt;
&lt;p&gt;然后在Node环境中返回，比如在Express框架中，返回渲染一个模板文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
　　　　  res.render('messageClient/message.html'&lt;span&gt;, {
            appHtml: appHtml,
            preloadState: JSON.stringify(preloadState).replace(&lt;/span&gt;/&amp;lt;/g, '\\u003c'&lt;span&gt;)
        });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里设置了两个变量传递给模板文件&lt;/p&gt;
&lt;p&gt;appHtml 即为处理之后的组件字符串&lt;/p&gt;
&lt;p&gt;preloadState 为服务器中的初始状态，浏览器的后续工作要基于这个初始状态，所以需要将此变量传递给浏览器初始化&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;|- &lt;/span&gt;&lt;span&gt;appHtml |&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;preload-state&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; PRELOAD_STATE &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;lt;|-&lt;/span&gt;&lt;span&gt; preloadState &lt;/span&gt;&lt;span&gt;|&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;express框架返回之后即为在浏览器中看到的初始页面&lt;/p&gt;
&lt;p&gt;需要注意的是这里的ejs模板进行了自定义分隔符，因为webpack在进行编译时，HtmlWebpackPlugin 插件中自带的ejs处理器可能会和这个模板中的ejs变量冲突&lt;/p&gt;
&lt;p&gt;在express中自定义即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义ejs模板&lt;/span&gt;
app.engine('html'&lt;span&gt;, ejs.__express);
app.set(&lt;/span&gt;'view engine', 'html'&lt;span&gt;);
ejs.delimiter &lt;/span&gt;= '|';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，在浏览器环境的组件中（以下这个文件为公共文件，浏览器端和服务器端共用），我们要按照 &lt;span&gt;PRELOAD_STATE &lt;/span&gt;这个初始状态来初始化组件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class Message extends Component {
    constructor(props) {
        super(props);

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
            msg: []
        };

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据服务器返回的初始状态来初始化&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; PRELOAD_STATE !== 'undefined'&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state.msgs =&lt;span&gt; PRELOAD_STATE;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清除&lt;/span&gt;
            PRELOAD_STATE = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            document.getElementById(&lt;/span&gt;'preload-state'&lt;span&gt;).remove();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此文件为公共文件，服务端调用此组件时会传入初始的状态preloadState&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state.msgs = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.preloadState;
        }

        console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.state);
    }

    componentDidMount() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处无需再发请求，由服务器处理&lt;/span&gt;
&lt;span&gt;    }
...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;核心就是这些了，这就完了么？&lt;/p&gt;
&lt;p&gt;哪有那么快，还得知道如何编译文件（JSX并不是原生支持的），服务端如何处理，浏览器端如何处理&lt;/p&gt;
&lt;p&gt;接下来看看项目的文件结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688270/201809/688270-20180902224609814-2113514554.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/688270/201809/688270-20180902224703795-729783498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;把注意力集中到红框中&lt;/p&gt;
&lt;p&gt;直接由webpack.config.js同时编译浏览器端和服务端的JS模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
module.exports =&lt;span&gt; [
    clientConfig,
    serverConfig
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器端的配置使用 src 下的 client目录，编译到 dist 目录中&lt;/p&gt;
&lt;p&gt;服务端的配置使用 src 下的 server 目录，编译到 distSSR 目录中。在服务端的配置中就不需要进行css文件提取等无关的处理的，关注编译代码初始化组件状态即可&lt;/p&gt;
&lt;p&gt;client和server只是入口，它们的公共部分在 common 目录中&lt;/p&gt;
&lt;p&gt;在client中，直接渲染导入的组件  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
import React, {Component} from 'react'&lt;span&gt;;
import {render, hydrate, findDOMNode} from &lt;/span&gt;'react-dom'&lt;span&gt;;
import Message from &lt;/span&gt;'../common/message'&lt;span&gt;;

hydrate(&lt;/span&gt;&amp;lt;Message /&amp;gt;, document.getElementById('content'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有个 render和hydrate的区别&lt;/p&gt;
&lt;p&gt;在进行了服务端渲染之后，浏览器端使用render的话会按照状态重新初始化一遍组件，可能会有抖动的情况；使用 hydrate则只进行组件事件的初始化，组件不会从头初始化状态&lt;/p&gt;
&lt;p&gt;建议使用hydrate方法，在React17中 使用了服务端渲染之后，render将不再支持&lt;/p&gt;
&lt;p&gt;在 server中，导出这个组件给 express框架调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
import Message from '../common/message'&lt;span&gt;;

let ReactDOMServer &lt;/span&gt;= require('react-dom/server'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 提供给Node环境调用，传入初始状态
 * @param  {[type]} preloadState [description]
 * @return {[type]}              [description]
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init(preloadState) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ReactDOMServer.renderToString(&amp;lt;Message preloadState={preloadState} /&amp;gt;);
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是，这里不能直接使用 module.exports = ... 因为webpack不支持ES6的 import 和这个混用&lt;/p&gt;
&lt;p&gt;在 common中，处理一些浏览器端和服务器端的差异，再导出&lt;/p&gt;
&lt;p&gt;这里的差异主要是变量的使用问题，在Node中没有window document navigator 等对象，直接使用会报错。且Node中的严格模式直接访问未定义的变量也会报错&lt;/p&gt;
&lt;p&gt;所以需要用typeof 进行变量检测，项目中引用的第三方插件组件有使用到了这些浏览器环境对象的，要注意做好兼容，最简便的方法是在 componentDidMount 中再引入这些插件组件&lt;/p&gt;
&lt;p&gt;另外，webpack的style-loader也依赖了这些对象，在服务器配置文件中需要将其移除&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; {
            test: &lt;/span&gt;/\.css$/&lt;span&gt;,
            loaders: [
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'style-loader',&lt;/span&gt;
                'happypack/loader?id=css'&lt;span&gt;
            ]
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Express的服务器框架中，messageSSR 路由 渲染页面之前做一些异步操作获取数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译后的文件路径&lt;/span&gt;
let distPath = '../../public/static/distSSR/js'&lt;span&gt;;

module.exports &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req, res, next) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果需要id&lt;/span&gt;
    let id = 'req.params.id'&lt;span&gt;;

    console.log(id);

    getDefaultData(id);

    async &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getDefaultData(id) {
        let appHtml &lt;/span&gt;= ''&lt;span&gt;;
        let preloadState &lt;/span&gt;=&lt;span&gt; await getData(id);

        console.log(&lt;/span&gt;'preloadState'&lt;span&gt;, preloadState);

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取组件的值（字符串）&lt;/span&gt;
            appHtml = require(`${distPath}/message`).init(preloadState);
        } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e) {
            console.log(e);
            console.trace();
        }

        res.render(&lt;/span&gt;'messageClient/message.html'&lt;span&gt;, {
            appHtml: appHtml,
            preloadState: JSON.stringify(preloadState).replace(&lt;/span&gt;/&amp;lt;/g, '\\u003c'&lt;span&gt;)
        });
    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用到Node来开启服务，每次改了服务器文件之后就得重启比较麻烦&lt;/p&gt;
&lt;p&gt;使用 nodemon工具来监听文件修改自动更新服务器，添加配置文件 nodemon.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&quot;restartable&quot;: &quot;rs&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;ignore&quot;&lt;span&gt;: [
        &lt;/span&gt;&quot;.git&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;node_modules/**/node_modules&quot;&lt;span&gt;
    ],
    &lt;/span&gt;&quot;verbose&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;execMap&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;js&quot;: &quot;node --harmony&quot;&lt;span&gt;
    },
    &lt;/span&gt;&quot;watch&quot;&lt;span&gt;: [
        &lt;/span&gt;&quot;server/&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;public/static/distSSR&quot;&lt;span&gt;
    ],
    &lt;/span&gt;&quot;env&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;NODE_ENV&quot;: &quot;development&quot;&lt;span&gt;
    },
    &lt;/span&gt;&quot;ext&quot;: &quot;js,json&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，对于Node环境不支持JSX这个问题，除了使用webpack进行编译之外，&lt;/p&gt;
&lt;p&gt;还可以在Node中执行 babel-node 来即时地编译文件，不过这种方式会导致每次编译非常久（至少比webpack久）&lt;/p&gt;

&lt;p&gt;在React16 中，ReactDOMServer 除了拥有 renderToString 和 renderToStaticMarkup这两个方法之外，&lt;/p&gt;
&lt;p&gt;还有 renderToNodeStream  和 renderToStaticNodeStream 两个流的方法&lt;/p&gt;
&lt;p&gt;它们不是返回一个字符串，而是返回一个可读流，一个用于发送字节流的对象的Node Stream类&lt;/p&gt;
&lt;p&gt;渲染到流可以减少你的内容的第一个字节（TTFB）的时间，在文档的下一部分生成之前，将文档的开头至结尾发送到浏览器。 当内容从服务器流式传输时，浏览器将开始解析HTML文档&lt;/p&gt;
&lt;p&gt;以下是使用实例，本文不展开&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; using Express&lt;/span&gt;
import { renderToNodeStream } from &quot;react-dom/server&quot;&lt;span&gt;
import MyPage from &lt;/span&gt;&quot;./MyPage&quot;&lt;span&gt;
app.get(&lt;/span&gt;&quot;/&quot;, (req, res) =&amp;gt;&lt;span&gt; {
  res.write(&lt;/span&gt;&quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;My Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&quot;&lt;span&gt;);
  res.write(&lt;/span&gt;&quot;&amp;lt;div id='content'&amp;gt;&quot;&lt;span&gt;); 
  const stream &lt;/span&gt;= renderToNodeStream(&amp;lt;MyPage/&amp;gt;);
  stream.pipe(res, { end: &lt;span&gt;false&lt;/span&gt;&lt;span&gt; });
  stream.on(&lt;/span&gt;'end', () =&amp;gt;&lt;span&gt; {
    res.write(&lt;/span&gt;&quot;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;span&gt;);
    res.end();
  });
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这便是在React中进行服务端渲染的流程了，说得有点泛泛，还是自己去看 &lt;a href=&quot;https://github.com/imwtr/react-redux-ssr&quot; target=&quot;_blank&quot;&gt;项目代码&lt;/a&gt; 吧&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;三、React + Redux&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;React的中的数据是单向流动的，即父组件状态改变之后，可以通过props将属性传递给子组件，但子组件并不能直接修改父级的组件。&lt;/p&gt;
&lt;p&gt;一般需要通过调用父组件传来的回调函数来间接地修改父级状态，或者使用 Context ，使用 事件发布订阅机制等。&lt;/p&gt;
&lt;p&gt;引入了Redux进行状态管理之后，就方便一些了。不过会增加代码复杂度，另外要注意的是，React 16的新的Context特性貌似给Redux带来了不少冲击&lt;/p&gt;

&lt;p&gt;在React项目中使用Redux，当某个处理有比较多逻辑时，遵循胖action瘦reducer，比较通用的建议时将主要逻辑放在action中，在reducer中只进行更新state的等简单的操作&lt;/p&gt;
&lt;p&gt;一般还需要中间件来处理异步的动作（action），比较常见的有四种 redux-thunk  redux-saga  redux-promise  redux-observable ，&lt;a href=&quot;https://juejin.im/post/59e6cd68f265da43163c2821&quot; target=&quot;_blank&quot;&gt;它们的对比&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里选用了 redux-saga，它比较优雅，管理异步也很有优势&lt;/p&gt;

&lt;p&gt;来看看项目结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688270/201809/688270-20180902233033004-631140247.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们将 home组件拆分出几个子组件便于维护，也便于和Redux进行关联&lt;/p&gt;
&lt;p&gt;home.js 为入口文件&lt;/p&gt;
&lt;p&gt;使用 Provider 包装组件，传入store状态渲染组件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
import React, {Component} from 'react'&lt;span&gt;;
import {render, findDOMNode} from &lt;/span&gt;'react-dom'&lt;span&gt;;
import {Provider} from &lt;/span&gt;'react-redux'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 组件入口&lt;/span&gt;
import Home from './homeComponent/Home.jsx'&lt;span&gt;;
import store from &lt;/span&gt;'./store'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 组装Redux应用
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
class App extends Component {
    render() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;Provider store={store}&amp;gt;
                &amp;lt;Home /&amp;gt;
            &amp;lt;/Provider&amp;gt;
&lt;span&gt;        )
    }
}

render(&lt;/span&gt;&amp;lt;App /&amp;gt;, document.getElementById('content'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;store/index.js 中为状态创建的过程&lt;/p&gt;
&lt;p&gt;这里为了方便，就把服务端渲染的部分也放在一起了，实际上它们的区别不是很大，仅仅是 defaultState初始状态的不同而已&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import {createStore, applyMiddleware, compose} from 'redux'&lt;span&gt;;
import createSagaMiddleware from &lt;/span&gt;'redux-saga'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; import {thunk} from 'redux-thunk';&lt;/span&gt;
&lt;span&gt;
import reducers from &lt;/span&gt;'./reducers'&lt;span&gt;;
import wordListSaga from &lt;/span&gt;'./workListSaga'&lt;span&gt;;
import state from &lt;/span&gt;'./state'&lt;span&gt;;

const sagaMiddleware &lt;/span&gt;=&lt;span&gt; createSagaMiddleware();

const composeEnhancers &lt;/span&gt;= window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ||&lt;span&gt; compose;

let defaultState &lt;/span&gt;=&lt;span&gt; state;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于SSR&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 根据服务器返回的初始状态来初始化&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; PRELOAD_STATE !== 'undefined'&lt;span&gt;) {
    defaultState &lt;/span&gt;=&lt;span&gt; Object.assign({}, defaultState, PRELOAD_STATE);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清除&lt;/span&gt;
    PRELOAD_STATE = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    document.getElementById(&lt;/span&gt;'preload-state'&lt;span&gt;).remove();
}

let store &lt;/span&gt;=&lt;span&gt; createStore(
    reducers,
    defaultState,
    composeEnhancers(
        applyMiddleware(sagaMiddleware)
    ));

sagaMiddleware.run(wordListSaga);

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; store;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们将一部分action（基本是异步的）交给saga处理&lt;/p&gt;
&lt;p&gt;在workListSaga.js中，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d6cdf5b7-31ea-4e06-91c5-1e7aea74e454')&quot; readability=&quot;44&quot;&gt;&lt;img id=&quot;code_img_closed_d6cdf5b7-31ea-4e06-91c5-1e7aea74e454&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d6cdf5b7-31ea-4e06-91c5-1e7aea74e454&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d6cdf5b7-31ea-4e06-91c5-1e7aea74e454',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d6cdf5b7-31ea-4e06-91c5-1e7aea74e454&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;83&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import {delay} from 'redux-saga'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; import {put, fork, takeEvery, takeLatest, call, all, select} from 'redux-saga/effects'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; import * as actionTypes from './types'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * 获取用户信息
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @yield {[type]} [description]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;*&lt;span&gt; getUserInfoHandle() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     let state =&lt;span&gt; yield select();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; yield &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         setTimeout(() =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            resolve({
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 sex: 'male'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 age: 18&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 name: '王羲之'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 avatar: '/public/static/imgs/avatar.png'
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         }, 500&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt; * 获取工作列表
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt; * @yield {[type]} [description]
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;*&lt;span&gt; getWorkListHandle() {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     let state =&lt;span&gt; yield select();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; yield &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         setTimeout(() =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            resolve({
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                todo: [{
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                     id: '1'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                     content: '跑步'
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                }, {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                     id: '2'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     content: '游泳'
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                }],
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                done: [{
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     id: '13'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     content: '看书'
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                }, {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                     id: '24'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                     content: '写代码'
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                }]
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         }, 1000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt; * 获取页面数据，action.payload中如果为回调，可以处理一些异步数据初始化之后的操作
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt; * @param {[type]} action        [description]
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt; * @yield {[type]} [description]
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;*&lt;span&gt; getPageInfoAsync(action) {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    console.log(action);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;     let userInfo =&lt;span&gt; yield call(getUserInfoHandle);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    yield put({
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        type: actionTypes.INIT_USER_INFO,
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        payload: userInfo
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; 
&lt;span&gt;70&lt;/span&gt;     let workList =&lt;span&gt; yield call(getWorkListHandle);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    yield put({
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;        type: actionTypes.INIT_WORK_LIST,
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;        payload: workList
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; 
&lt;span&gt;77&lt;/span&gt;     console.log('saga done'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; 
&lt;span&gt;79&lt;/span&gt;     &lt;span&gt;typeof&lt;/span&gt; action.payload === 'function' &amp;amp;&amp;amp;&lt;span&gt; action.payload();
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt; * 获取页面数据
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt; * @yield {[type]} [description]
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;86&lt;/span&gt; export &lt;span&gt;default&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;*&lt;span&gt; getPageInfo() {
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;    yield takeLatest(actionTypes.INIT_PAGE, getPageInfoAsync);
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;监听页面的初始化action actionTypes.INIT_PAGE ，获取数据之后再触发一个action ,转交给reducer即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
let userInfo =&lt;span&gt; yield call(getUserInfoHandle);

    yield put({
        type: actionTypes.INIT_USER_INFO,
        payload: userInfo
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reducer中做的事主要是更新状态，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
import * as actionTypes from './types'&lt;span&gt;;
import defaultState from &lt;/span&gt;'./state'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 工作列表处理
 * @param  {[type]} state  [description]
 * @param  {[type]} action [description]
 * @return {[type]}        [description]
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; workListReducer(state =&lt;span&gt; defaultState, action) {
    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (action.type) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化用户信息&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt;&lt;span&gt; actionTypes.INIT_USER_INFO:
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回新的状态&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Object.assign({}, state, {
                userInfo: action.payload
            });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化工作列表&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt;&lt;span&gt; actionTypes.INIT_WORK_LIST:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Object.assign({}, state, {
                todo: action.payload.todo,
                done: action.payload.done
            });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加任务&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt;&lt;span&gt; actionTypes.ADD_WORK_TODO:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Object.assign({}, state, {
                todo: action.payload
            });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置任务完成&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt;&lt;span&gt; actionTypes.SET_WORK_DONE:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Object.assign({}, state, {
                todo: action.payload.todo,
                done: action.payload.done
            });

        &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; state
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 action.js中可以定义一些常规的action，比如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;function&lt;/span&gt;&lt;span&gt; addWorkTodo(todoList, content) {
    let id &lt;/span&gt;=&lt;span&gt; Math.random();

    let todo &lt;/span&gt;=&lt;span&gt; [...todoList, {
        id,
        content
    }];

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        type: actionTypes.ADD_WORK_TODO,
        payload: todo
    }
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 初始化页面信息
 * 此action为redux-saga所监听，将传入saga中执行
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; initPage(cb) {
    console.log(&lt;/span&gt;122&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        type: actionTypes.INIT_PAGE,
        payload: cb
    };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回到刚才的 home.js入口文件，在其引入的主模块 home.jsx中，我们需要将redux的东西和这个 home.jsx绑定起来&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
import {connect} from 'react-redux'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 子组件&lt;/span&gt;
import User from './user'&lt;span&gt;;
import WorkList from &lt;/span&gt;'./workList'&lt;span&gt;;

import  {getUrlParam} from &lt;/span&gt;'../util/util'&lt;span&gt;
import &lt;/span&gt;'../../scss/home.scss'&lt;span&gt;;

import {
    initPage
} from &lt;/span&gt;'../store/actions.js'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 将redux中的state通过props传给react组件
 * @param  {[type]} state [description]
 * @return {[type]}       [description]
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; mapStateToProps(state) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        userInfo: state.userInfo,
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 假如父组件Home也需要知悉子组件WorkList的这两个状态，则可以传入这两个属性&lt;/span&gt;
&lt;span&gt;        todo: state.todo,
        done: state.done
    };
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 将redux中的dispatch方法通过props传给react组件
 * @param  {[type]} state [description]
 * @return {[type]}       [description]
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; mapDispatchToProps(dispatch, ownProps) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过props传入initPage这个dispatch方法&lt;/span&gt;
        initPage: (cb) =&amp;gt;&lt;span readability=&quot;5&quot;&gt; {
            dispatch(initPage(cb));
        }
    };
}&lt;p&gt;...&lt;/p&gt;&lt;p&gt;class Home extends Component {&lt;br/&gt;...&lt;/p&gt;&lt;p&gt;export default connect(mapStateToProps, mapDispatchToProps)(Home);&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，并不是只能给store绑定一个组件&lt;/p&gt;
&lt;p&gt;如果某个组件的状态可以被其他组件共享，或者这个组件需要访问store，按根组件一层一层通过props传入很麻烦的话，也可以直接给这个组件绑定store&lt;/p&gt;
&lt;p&gt;比如这里的 workList.jsx 也进行了绑定，user.jsx这种只需要展示数据的组件，或者其他一些自治（状态在内部管理，和外部无关）的组件，则不需要引入redux的store，也挺麻烦的&lt;/p&gt;

&lt;p&gt;绑定之后，我们需要在 Home组件中调用action，开始获取数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　 /*&lt;/span&gt;&lt;span&gt;*
     * 初始获取数据之后的某些操作
     * @return {[type]} [description]
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    afterInit() {
        console.log(&lt;/span&gt;'afterInit'&lt;span&gt;);
    }

    componentDidMount() {
        console.log(&lt;/span&gt;'componentDidMount'&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化发出 INIT_PAGE 操作&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.props.initPage(() =&amp;gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.afterInit();
        });
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有个小技巧，如果在获取异步数据之后要接着进行其他操作，可以传入 callback ，我们在action的payload中置入了这个 callback，方便调用&lt;/p&gt;
&lt;p&gt;然后Home组件中的已经没有多少state了，已经交由store管理，通过mapStateToProps传入&lt;/p&gt;
&lt;p&gt;所以可以根据props拿到这些属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;User {...&lt;span&gt;this&lt;/span&gt;.props.userInfo} /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者调用传入的 reducer ，间接地派发一些action&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　//&lt;/span&gt;&lt;span&gt; 执行 ADD_WORK_TODO&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.props.addWorkTodo(&lt;span&gt;this&lt;/span&gt;.props.todo, content.trim());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;页面呈现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688270/201809/688270-20180902235601582-49659689.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;四、React + Redux + SSR&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;可以看到上图是有一些闪动的，因为数据不是一开始就存在&lt;/p&gt;
&lt;p&gt;考虑加入SSR，先来看看最终页面效果，功能差不多，但直接出来了，看起来很美好呀~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688270/201809/688270-20180902235753224-1574935939.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Redux中加入SSR, 其实跟纯粹的React组件是类似的。&lt;/p&gt;
&lt;p&gt;官方给了一个&lt;a href=&quot;https://redux.js.org/recipes/serverrendering&quot; target=&quot;_blank&quot;&gt;简单的例子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;都是在服务器端获取初始状态后处理组件为字符串，区别主要是React直接使用state, Redux直接使用store&lt;/p&gt;
&lt;p&gt;浏览器中我们可以为多个页面使用同一个store,但在服务器端不行，我们需要为每一个请求创建一个store&lt;/p&gt;

&lt;p&gt;再来看项目结构，Redux的SSR使用到了红框中的文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688270/201809/688270-20180903000406333-423610738.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;服务端路由homeSSR与messageSSR类似，都是返回数据&lt;/p&gt;
&lt;p&gt;服务端入口文件 server中的home.js 则是创建一个新的 store, 然后传入ReactDOMServer进行处理返回&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
import {createStore} from 'redux'&lt;span&gt;;
import reducers from &lt;/span&gt;'../store/reducers'&lt;span&gt;;
import App from &lt;/span&gt;'../common/home'&lt;span&gt;;
import defaultState from &lt;/span&gt;'../store/state'&lt;span&gt;;

let ReactDOMServer &lt;/span&gt;= require('react-dom/server'&lt;span&gt;);

export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; init(preloadState) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; console.log(preloadState);&lt;/span&gt;
&lt;span&gt;
    let defaultState &lt;/span&gt;=&lt;span&gt; Object.assign({}, defaultState, preloadState);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 服务器需要为每个请求创建一份store，并将状态初始化为preloadState&lt;/span&gt;
    let store =&lt;span&gt; createStore(
        reducers,
        defaultState
    );

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ReactDOMServer.renderToString(&amp;lt;App store={store} /&amp;gt;);
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的，我们需要在common文件中处理 Node环境与浏览器环境的一些差异&lt;/p&gt;
&lt;p&gt;比如在 home.jsx 中，加入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 公共部分，在Node环境中无window document navigator 等对象&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; window === 'undefined'&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置win变量方便在其他地方判断环境&lt;/span&gt;
    global.win = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    global.window &lt;/span&gt;=&lt;span&gt; {};
    global.document &lt;/span&gt;=&lt;span&gt; {};
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外组件加载之后也不需要发请求获取数据了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 初始获取数据之后的某些操作
     * @return {[type]} [description]
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    afterInit() {
        console.log(&lt;/span&gt;'afterInit'&lt;span&gt;);
    }

    componentDidMount() {
        console.log(&lt;/span&gt;'componentDidMount'&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化发出 INIT_PAGE 操作；&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 已交由服务器渲染&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; this.props.initPage(() =&amp;gt; {&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.afterInit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; });&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;common中的home.js入口文件用于给组件管理store, 与未用SSR的文件不同（js目录下面的home.js入口）&lt;/p&gt;
&lt;p&gt;它需要同时为浏览器端和服务器端服务，所以增加一些判断，然后导出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (module.hot) {
    module.hot.accept();
}

import React, {Component} from &lt;/span&gt;'react'&lt;span&gt;;
import {render, findDOMNode} from &lt;/span&gt;'react-dom'&lt;span&gt;;
import Home from &lt;/span&gt;'./homeComponent/home.jsx'&lt;span&gt;;
import {Provider} from &lt;/span&gt;'react-redux'&lt;span&gt;;
import store from &lt;/span&gt;'../store'&lt;span&gt;;

class App extends Component {
    render() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果为Node环境，则取由服务器返回的store值，否则使用 ../store中返回的值&lt;/span&gt;
        let st = global.win === &lt;span&gt;false&lt;/span&gt; ? &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.store : store;

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
            &lt;/span&gt;&amp;lt;Provider store={st}&amp;gt;
                &amp;lt;Home /&amp;gt;
            &amp;lt;/Provider&amp;gt;
&lt;span&gt;        )
    }
}

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; App;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;浏览器端的入口文件 home.js 直接引用渲染即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
import React, {Component} from 'react'&lt;span&gt;;
import {render, hydrate, findDOMNode} from &lt;/span&gt;'react-dom'&lt;span&gt;;
import App from &lt;/span&gt;'../common/home'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; render(&amp;lt;App /&amp;gt;, document.getElementById('content'));&lt;/span&gt;
hydrate(&amp;lt;App /&amp;gt;, document.getElementById('content'));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这便是Redux 加上 SSR之后的流程了&lt;/p&gt;

&lt;p&gt;其实还漏了一个Express的server.js服务文件，也就一点点代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('029a8473-3ff2-4962-91e2-f6d7a7bbfbc4')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_029a8473-3ff2-4962-91e2-f6d7a7bbfbc4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_029a8473-3ff2-4962-91e2-f6d7a7bbfbc4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('029a8473-3ff2-4962-91e2-f6d7a7bbfbc4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_029a8473-3ff2-4962-91e2-f6d7a7bbfbc4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; const express = require('express'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; const path = require('path'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; const app =&lt;span&gt; express();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; const ejs = require('ejs'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 常规路由页面&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; let home = require('./routes/home'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; let message = require('./routes/message'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于SSR服务端渲染的页面&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; let homeSSR = require('./routes/homeSSR'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; let messageSSR = require('./routes/messageSSR'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; app.use(express.static(path.join(__dirname, '../'&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义ejs模板&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; app.engine('html'&lt;span&gt;, ejs.__express);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; app.set('view engine', 'html'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; ejs.delimiter = '|'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; app.set('views', path.join(__dirname, '../views/'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; app.get('/home'&lt;span&gt;, home);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; app.get('/message'&lt;span&gt;, message);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; app.get('/ssr/home'&lt;span&gt;, homeSSR);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; app.get('/ssr/message'&lt;span&gt;, messageSSR);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; let port = 12345&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; app.listen(port, &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    console.log(`Server listening on ${port}`);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;文章说得错错乱乱的，可能没那么好理解，还是去看 &lt;a href=&quot;https://github.com/imwtr/react-redux-ssr&quot; target=&quot;_blank&quot;&gt;项目文件&lt;/a&gt; 自己琢磨吧，自己弄下来编译运行看看&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;五、其他&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;如果项目使用了其他服务器语言的，比如PHP Yii框架 Smarty ，把服务端渲染整起来可能没那么容易&lt;/p&gt;
&lt;p&gt;其一是 smarty的模板语法和ejs的不太搞得来&lt;/p&gt;
&lt;p&gt;其二是Yii框架的路由和Express的长得不太一样&lt;/p&gt;

&lt;p&gt;在Nginx中配置Node的反向代理，配置一个 upstream ，然后在server中匹配 location ，进行代理配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;upstream connect_node {
    server localhost:&lt;/span&gt;54321&lt;span&gt;;
    keepalive &lt;/span&gt;64&lt;span&gt;;
}

...

server
{
    listen &lt;/span&gt;80&lt;span&gt;;
        ...

    location &lt;/span&gt;/&lt;span&gt; {
        index index.php index.html index.htm;
    }

        location &lt;/span&gt;~ (home|message)\/\d+$ {
            proxy_pass http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;connect_node;&lt;/span&gt;
&lt;span&gt;        }

    ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/xianggao/blog/669497&quot; target=&quot;_blank&quot;&gt;更多配置&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;想得头大，干脆就不想了，有用过Node进行中转代理实现SSR的朋友，欢迎评论区分享哈~&lt;/p&gt;

</description>
<pubDate>Sun, 02 Sep 2018 16:33:00 +0000</pubDate>
<dc:creator>-渔人码头-</dc:creator>
<og:description>服务端渲染（SSR: Server Side Rendering）在React项目中有着广泛的应用场景 基于React虚拟DOM的特性，在浏览器端和服务端我们可以实现同构（可以使用同一份代码来实现多端</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imwtr/p/9576546.html</dc:identifier>
</item>
<item>
<title>Zookeeper系列一：Zookeeper介绍、Zookeeper安装配置、ZK Shell的使用 - 小不点啊</title>
<link>http://www.cnblogs.com/leeSmall/p/9563547.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leeSmall/p/9563547.html</guid>
<description>&lt;h2&gt;1. 介绍Zookeeper之前先来介绍一下分布式&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;1.1 分布式主要是下面两个方面：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;1) 任务拆分&lt;/p&gt;
&lt;p&gt;　　任务拆分指的是把传统的单节点服务拆分成多个节点服务部署到不同的机器上对外提供服务。比如一个传统服务有订单+支付+物流等3个模块，拆分成订单系统、支付系统、物流系统3个服务。&lt;br/&gt;2) 节点分工&lt;/p&gt;
&lt;p&gt;　　如上面的服务拆分后，订单系统、支付系统、物流系统各司其职&lt;br/&gt;&lt;span&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;分布式解决高可用，高并发的。&lt;/p&gt;
&lt;p&gt;集群解决的是高可用。&lt;/p&gt;
&lt;p&gt;集群从物理上来定义，分布式一种工作方式。&lt;br/&gt;例如：一个工作任务需要10个小时（单节点）&lt;br/&gt;分布式：10台机器，任务只需要1个小时就能够完成&lt;br/&gt;集群：10台机器，任务还是10个小时。&lt;/p&gt;
&lt;h3&gt;1.2 分布式协作中的难点：&lt;/h3&gt;
&lt;p&gt;如果让你设计一个分布式系统，你预见到什么问题？&lt;br/&gt;1) 保证节点高可用（节点故障）&lt;br/&gt;2) 数据的一致性&lt;br/&gt;3) 通讯异常&lt;br/&gt;4) 网络分区&lt;br/&gt;.......&lt;/p&gt;
&lt;h2&gt;2.  Zookeeper简介&lt;/h2&gt;
&lt;p&gt;Zookeeper就是用来解决分布式协作中的难点的&lt;/p&gt;
&lt;p&gt;zookeeper是google的chubby项目开源实现。最早是hadoop的子项目&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Zookeeper的使用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小米米聊、淘宝Taokeeper其实是类zookeeper。&lt;/p&gt;
&lt;p&gt;Kafka使用zookeeper。消息发布订阅，其中zk就是用于检测节点崩溃。实现主题的发现，并且保持主题的生产和消费状态。&lt;/p&gt;
&lt;p&gt;Hbase三段查找，Root-Region=》Meta Region=》Region（Table）。hbase的元数据信息放在HBase。HMaster挂掉，马上要节点恢复。&lt;br/&gt;Hadoop。NameNode（SecondaryNameNode），HA Hadoop。一般情况下一个简单的hadoop集群，只有一个NameNode，如果NameNode挂掉，hadoop集群不可用。HA Haoop里面就要用到zk。&lt;/p&gt;
&lt;h2&gt;3. Zookeeper解决哪些问题&lt;/h2&gt;
&lt;h3&gt;3.1 Master节点管理&lt;/h3&gt;
&lt;p&gt;　　解决的问题：Master高可用（挂掉以后，谁来负责工作），保证唯一。&lt;/p&gt;
&lt;h3&gt;3.2 配置文件管理&lt;/h3&gt;
&lt;p&gt;　　解决的问题：统一把配置文件存放zk，由ZK统一分发修改的内容到各台机器。&lt;/p&gt;
&lt;h3&gt;3.3 发布与订阅&lt;/h3&gt;
&lt;p&gt;　　发布者(producer)将数据发布到zk节点上，供订阅者(consumer)动态获取&lt;/p&gt;
&lt;h3&gt;3.4 分布式锁&lt;/h3&gt;
&lt;p&gt;　　分布式环境访问同一个资源，由第三方配锁实现。&lt;br/&gt;　　解决的问题：由zk统一进行协调，保证数据的一致性。&lt;/p&gt;
&lt;h3&gt;3.5 集群的管理&lt;/h3&gt;
&lt;p&gt;　　Worker集群监控。保证主数据和备份数据的一致&lt;/p&gt;

&lt;p&gt;环境准备：&lt;/p&gt;
&lt;p&gt;一台安装有jdk的虚拟机：192.168.152.130&lt;/p&gt;
&lt;h2&gt;1. 安装&lt;/h2&gt;
&lt;h3&gt;1.1.下载&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd /software
 wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.2.解压&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tar -zxvf zookeeper-3.4.6.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2. 配置&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;说明：这里配置的是伪分布式的zookeeper&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;配置之前一定要在/etc/hosts里面配置主机映射,否则会报错误：&lt;/p&gt;
&lt;p&gt;ERROR [master:3890:QuorumCnxManager$Listener@517] - Exception while listening&lt;br/&gt;java.net.SocketException: Unresolved address&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
vim /etc/hosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201808/1227483-20180831204603462-2003914940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.1 先建立zookeeper的三个数据目录&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir -p /zookeeper/zk1
mkdir -p /zookeeper/zk2
mkdir -p /zookeeper/zk3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201808/1227483-20180831003630433-964736593.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.2 查看zookeeper的配置文件（已删掉多余的配置和注释）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
vim zoo_sample.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tickTime=2000   #session的会话时间 以ms为单位
initLimit=10      #服务器启动以后，master和slave通讯的时间
syncLimit=5       #master和slave之间的心跳检测时间，检测slave是否存活
dataDir=/tmp/zookeeper  #保存zk的快照和数据
clientPort=2181      #客户端访问zk的端口&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.3 复制zoo_sample.cfg为zoo1.cfg添加如下配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cp zoo_sample.cfg zoo1.cfg&lt;br/&gt;vim zoo1.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#session的会话时间 以ms为单位
tickTime=2000

#服务器启动以后，master和slave通讯的时间
initLimit=10

#master和slave之间的心跳检测时间，检测slave是否存活
syncLimit=5

#(这个目录可以自行指定)
dataDir=&lt;strong&gt;&lt;span&gt;/zookeeper/zk1&lt;/span&gt;&lt;/strong&gt;

#客户端访问zk的端口
clientPort=&lt;strong&gt;&lt;span&gt;2181&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;#master对应于前面在hosts里面配置的主机映射 2888是数据同步和消息传递端口，3888是选举端口
server.1=master:2888:3888 

#&lt;/strong&gt;&lt;strong&gt;master对应于前面在hosts里面配置的主机映射 &lt;/strong&gt;&lt;strong&gt;2889是数据同步和消息传递端口，3889是选举端口 &lt;br/&gt;server.2=master:2889:3889 &lt;p&gt;#&lt;/p&gt;&lt;/strong&gt;&lt;strong&gt;master对应于前面在hosts里面配置的主机映射 &lt;/strong&gt;&lt;strong&gt;2890是数据同步和消息传递端口，3890是选举端口 &lt;br/&gt;&lt;/strong&gt;&lt;strong&gt;server.3=master:2890:3890&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4 复制zoo1.cfg为zoo2.cfg添加如下配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cp zoo1.cfg zoo2.cfg
vim zoo2.cfg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#session的会话时间 以ms为单位
tickTime=2000

#服务器启动以后，master和slave通讯的时间
initLimit=10

#master和slave之间的心跳检测时间，检测slave是否存活
syncLimit=5

#(这个目录可以自行指定)
dataDir=&lt;span&gt;&lt;strong&gt;/zookeeper/zk2&lt;/strong&gt;&lt;/span&gt;

#客户端访问zk的端口
clientPort=&lt;strong&gt;&lt;span&gt;2182&lt;/span&gt;&lt;/strong&gt;

&lt;strong&gt;&lt;span&gt;#master对应于前面在hosts里面配置的主机映射 2888是数据同步和消息传递端口，3888是选举端口
server.1=master:2888:3888 

#&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;master对应于前面在hosts里面配置的主机映射 &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2889是数据同步和消息传递端口，3889是选举端口 &lt;br/&gt;server.2=master:2889:3889 &lt;p&gt;#&lt;/p&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;master对应于前面在hosts里面配置的主机映射 &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2890是数据同步和消息传递端口，3890是选举端口 &lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;server.3=master:2890:3890&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 2.5 复制zoo1.cfg为zoo3.cfg添加如下配置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cp zoo1.cfg zoo3.cfg
vim zoo3.cfg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#session的会话时间 以ms为单位
tickTime=2000

#服务器启动以后，master和slave通讯的时间
initLimit=10

#master和slave之间的心跳检测时间，检测slave是否存活
syncLimit=5

#(这个目录可以自行指定)
dataDir=&lt;strong&gt;&lt;span&gt;/zookeeper/zk3&lt;/span&gt;&lt;/strong&gt;

#客户端访问zk的端口
clientPort=&lt;strong&gt;&lt;span&gt;2183&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;#master对应于前面在hosts里面配置的主机映射 2888是数据同步和消息传递端口，3888是选举端口
server.1=master:2888:3888 

#&lt;/strong&gt;&lt;strong&gt;master对应于前面在hosts里面配置的主机映射 &lt;/strong&gt;&lt;strong&gt;2889是数据同步和消息传递端口，3889是选举端口 &lt;br/&gt;server.2=master:2889:3889 &lt;p&gt;#&lt;/p&gt;&lt;/strong&gt;&lt;strong&gt;master对应于前面在hosts里面配置的主机映射 &lt;/strong&gt;&lt;strong&gt;2890是数据同步和消息传递端口，3890是选举端口 &lt;br/&gt;&lt;/strong&gt;&lt;strong&gt;server.3=master:2890:3890&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.6 手动建立myid文件且指定在zk数据目录，也就是dataDir指定的路径（不管真分布还是伪分布都需要指定） &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;echo 1 &amp;gt;&amp;gt; /zookeeper/zk1/myid
echo 2 &amp;gt;&amp;gt; /zookeeper/zk2/myid
echo 3 &amp;gt;&amp;gt; /zookeeper/zk3/myid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 说明：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;myid文件内容分别为1,2,3对应于zk配置文件的server.1,server.2,server.3&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;2.7 测试zookeeper分布式是否搭建成功&lt;/h3&gt;
&lt;p&gt;分别启动三个zookeeper&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd /software/zookeeper-3.4.6/bin/
./zkServer.sh start /software/zookeeper-3.4.6/conf/zoo1.cfg
./zkServer.sh start /software/zookeeper-3.4.6/conf/zoo2.cfg
./zkServer.sh start /software/zookeeper-3.4.6/conf/zoo3.cfg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201808/1227483-20180831010659701-368489660.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看3个zookeeper的状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cd /software/zookeeper-3.4.6/bin/
/zkServer.sh status /software/zookeeper-3.4.6/conf/zoo1.cfg
/zkServer.sh status /software/zookeeper-3.4.6/conf/zoo2.cfg
/zkServer.sh status /software/zookeeper-3.4.6/conf/zoo3.cfg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201808/1227483-20180831204759111-1838405861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到第2个zookeeper是leader，第1个和第3个为follower，&lt;strong&gt;&lt;span&gt;到此zookeeper分布式搭建完成！！！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;2.8 Zookeeper常用命令 &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;启动：
./zkServer.sh start /software/zookeeper-3.4.6/conf/zoo1.cfg
./zkServer.sh start /software/zookeeper-3.4.6/conf/zoo2.cfg
./zkServer.sh start /software/zookeeper-3.4.6/conf/zoo3.cfg

停止：
./zkServer.sh stop /software/zookeeper-3.4.6/conf/zoo1.cfg
./zkServer.sh stop /software/zookeeper-3.4.6/conf/zoo2.cfg
./zkServer.sh stop /software/zookeeper-3.4.6/conf/zoo3.cfg

查看状态：
/zkServer.sh status /software/zookeeper-3.4.6/conf/zoo1.cfg
/zkServer.sh status /software/zookeeper-3.4.6/conf/zoo2.cfg
/zkServer.sh status /software/zookeeper-3.4.6/conf/zoo3.cfg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.9 Zookeeper真分布式部署在master、slave1、slave2 三台不同的服务器上&lt;/h3&gt;
&lt;p&gt; server1..../conf/zoo.cfg&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tickTime=2000
initLimit=10
syncLimit=5
dataDir=/zookeeper/zk
clientPort=2181

server.1=master:2888:3888
server.2=slave1:2888:3888
server.3=slave2:2888:3888&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; server2..../conf/zoo.cfg&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tickTime=2000
initLimit=10
syncLimit=5
dataDir=/zookeeper/zk
clientPort=2181

server.1=master:2888:3888
server.2=slave1:2888:3888
server.3=slave2:2888:3888&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;server3..../conf/zoo.cfg&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tickTime=2000
initLimit=10
syncLimit=5
dataDir=/zookeeper/zk
clientPort=2181

server.1=master:2888:3888
server.2=slave1:2888:3888
server.3=slave2:2888:3888&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;真分布必须是奇数台，因为必须满足n/2+1=m,m必须大于部署zk机器数的一半(n/2)可用才认为集群可用，而且奇数台更节省资源&lt;br/&gt;2/2+1=2 一台不能坏&lt;br/&gt;3/2+1=2 可以坏掉一台&lt;/p&gt;
&lt;p&gt;4/2+1=3 只能坏一台&lt;br/&gt;5/2+1=3 可以坏2台&lt;/p&gt;

&lt;h2&gt;1. 连接zk&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
zkCli.sh [-server ip:port]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;连接到master（127.0.0.1 master）这台机器上2181的zookeeper&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./zkCli.sh -server master 2181
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901121611600-1825758968.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2. 列出zk中的节点&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt; 示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901121725424-1441930958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3. 创建节点&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
create [-s] [-e] path data acl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;zk的节点分为两种：临时节点（随着zk session消亡而自动删除）、持久节点（一直存在）&lt;/p&gt;
&lt;p&gt;-s: 顺序节点&lt;/p&gt;
&lt;p&gt;-e: 临时节点&lt;/p&gt;
&lt;p&gt;acl：访问权限控制&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;3.1 创建一个zk-test的节点，数据是123 不带-s 、-e默认是持久节点&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
create /zk-test &quot;123&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901122233887-1356377352.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.2 创建顺序节点&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
create  -s   /zk-test  “test123”
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901122414502-87274781.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 多次执行创建顺序节点的命令，可以看到zookeeper的内部会对顺序节点的名称进行自增控制&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901122536973-1714530808.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.3 创建临时节点&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
create -e /zk-test123 &quot;test1234&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901122904582-118341002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;临时节点依赖于顺序节点，临时节点下不能再创建临时节点，顺序节点下才可以创建临时节点&lt;/p&gt;
&lt;h3&gt;3.4 创建子节点test&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create  /zk-test &quot;&quot;
create  /zk-test/test &quot;1&quot;
ls /zk-test/test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901124651262-1830355488.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4. 删除节点命令&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;删除节点zk-test，如果zk-test下面还有子节点得先删除子节点，才能删除zk-test&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;delete /zk-test/test
delete /zk-test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 递归删除一个znode&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;删除zk-test及其下面的子节点&lt;/p&gt;
&lt;p&gt;rmr  /zk-test&lt;/p&gt;
&lt;h2&gt;5. 获取节点信息&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt; 示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create /zk-123  “abc”
get /zk-123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901125326134-2070425505.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结果说明：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;结果
cZxid = #创建节点时zk内部自己分配的id
Ctime = #创建节点的时间
mZxid = #修改的id
mtime = 修改的时间
pZxid = 子节点最后一次被修改的id
cVersion = 0  #拥有的子节点被改的话，该值随着改变
dataVersion = 0 #数据版本
aclVersion = 0 # 访问控制权限的版本
ephemeralOwner = 0X0 #临时节点还是持久节点 临时节点值不为0（值为当前会话id），持久节点值永远为0
dataLength = 3 #数据长度
numChildren = 0 #子节点个数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6. 更新节点数据&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
set  /zk-123 “d”
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901125516178-1384187109.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;7. 连接到指定节点&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
connect host:port
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;连接到2181
connect master:2181

连接到2182
connect master:2182

连接到2183
connect master:2183&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;这个命令是在已经连接到zookeeper之后，在里面切换到其他zookeeper时使用 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901130152433-1066596844.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;8. 设置配额&lt;/h2&gt;
&lt;p&gt;配额：给某个目录指定多少存储空间或者允许创建多少个节点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
setquota -n|-b val path
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;n 指定可以设置多少个子节点&lt;/p&gt;
&lt;p&gt;b 指定可以设置多大空间（byte）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;setquota -n 5 /zk-123
create  /zk-123/1 1
create  /zk-123/2 2
create  /zk-123/3 3
create  /zk-123/4 4 
create  /zk-123/5 5 
create  /zk-123/6 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对于配额不是硬性的提示，超过配额还是可以继续创建，只不过在日志里面有提示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;配额的用途：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;限制子节点的创建个数和分配空间的大小，如指定某个session有多少空间可以用&lt;/p&gt;
&lt;h2&gt;9. 查看配额&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
listquota path
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;10. 查看节点的状态&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看节点zk-123的状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
stat  /zk-123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180901130714370-224810372.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 02 Sep 2018 16:31:00 +0000</pubDate>
<dc:creator>小不点啊</dc:creator>
<og:description>一、Zookeeper介绍 1. 介绍Zookeeper之前先来介绍一下分布式 1.1 分布式主要是下面两个方面： 1) 任务拆分 任务拆分指的是把传统的单节点服务拆分成多个节点服务部署到不同的机器上</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leeSmall/p/9563547.html</dc:identifier>
</item>
<item>
<title>Java基础-一文搞懂位运算 - lingjiango</title>
<link>http://www.cnblogs.com/iou123lg/p/9576468.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iou123lg/p/9576468.html</guid>
<description>&lt;p&gt;　　在日常的Java开发中，位运算使用的不多，使用的更多的是算数运算（+、-、*、/、%）、关系运算（&amp;lt;、&amp;gt;、&amp;lt;=、&amp;gt;=、==、!=）和逻辑运算（&amp;amp;&amp;amp;、||、!），所以相对来说对位运算不是那么熟悉，本文将以Java的位运算来详细介绍下位运算及其应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt; &lt;strong&gt;位运算起源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　位运算起源于C语言的低级操作，Java的设计初衷是嵌入到电视机顶盒内，所以这种低级操作方式被保留下来。所谓的低级操作，是因为位运算的操作对象是二进制位，但是这种低级操作对计算机而言是非常简单直接，友好高效的。在简单的低成本处理器上，通常位运算比除法快得多，比乘法快几倍，有时比加法快得多。虽然由于较长的指令流水线和其他架构设计选择，现代处理器通常执行加法和乘法的速度与位运算一样快，但由于资源使用减少，位运算通常会使用较少的功率，所以在一些Java底层算法中，巧妙的使用位运算可以大量减少运行开销。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt; &lt;strong&gt;位运算详解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Java位运算细化划分可以分为按位运算和移位运算，见下表。&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;138&quot;&gt;
&lt;p&gt;细化&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;50&quot;&gt;
&lt;p&gt;符号&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;47&quot;&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;317&quot;&gt;
&lt;p&gt;运算规则&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td rowspan=&quot;4&quot; valign=&quot;top&quot; width=&quot;138&quot;&gt;
&lt;p&gt;按位运算&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;50&quot;&gt;
&lt;p&gt;&amp;amp;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;47&quot;&gt;
&lt;p&gt;与&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;317&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;两位都为1，那么结果为1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;50&quot;&gt;
&lt;p&gt;|&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;47&quot;&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;317&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;有一位为1，那么结果为1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;50&quot;&gt;
&lt;p&gt;~&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;47&quot;&gt;
&lt;p&gt;非&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;317&quot;&gt;
&lt;p&gt;~0 = 1,~1 = 0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;50&quot;&gt;
&lt;p&gt;^&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;47&quot;&gt;
&lt;p&gt;异或&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;317&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;两位不相同，结果为1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td rowspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;138&quot;&gt;
&lt;p&gt;移位运算&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;50&quot;&gt;
&lt;p&gt;&amp;lt;&amp;lt; &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;47&quot;&gt;
&lt;p&gt;左移&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;317&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;各二进制位全部左移N位，高位丢弃，低位补0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;50&quot;&gt;
&lt;p&gt;&amp;gt;&amp;gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;47&quot;&gt;
&lt;p&gt;右移&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;317&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;各二进制位全部右移N位，若值为正，则在高位插入 0，若值为负，则在高位插入 1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;50&quot;&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;47&quot;&gt;
&lt;p&gt;无符号右移&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;317&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;各二进制位全部右移N位，无论正负，都在高位插入0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　在进行位运算详解之前，先来普及下计算机中数字的表示方法。对于计算机而言，万物皆0、1，所有的数字最终都会转换成0、1的表示，有3种体现形式，分别是：&lt;strong&gt;原码、反码和补码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　原码：原码表示法在数字前面增加了一位符号位，即最高位为符号位，正数位该位为0，负数位该位为1.比如十进制的5如果用8个二进制位来表示就是00000101，-5就是10000101。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　反码：正数的反码是其本身，负数的反码在其原码的基础上，符号位不变，其余各个位取反。5的反码就是00000101，而-5的则为11111010。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　补码：正数的补码是其本身，负数的补码在其原码的基础上，符号位不变，其余各位取反，最后+1。即在反码的基础上+1。5的反码就是00000101，而-5的则为11111011。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　了解了这几个概念后，我们现在先记住一个结论，&lt;strong&gt;那就是在计算机系统中，数字一律用补码来表示、运算和存储，具体的原因可以看&lt;a href=&quot;https://www.zhihu.com/question/20159860&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;的讨论，这里不做更多讨论，因为不是本文的重点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 与运算（&amp;amp;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　规则：转为二进制后，两位为1，则结果为1，否则结果为0。&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（正数原码、反码、补码一致）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000001010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;&amp;amp;12&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&amp;amp;00000000000000000000000000001100&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000001000&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;10000000000000000000000000000110&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;&amp;amp;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&amp;amp;10000000000000000000000000000010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111001&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;&amp;amp;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&amp;amp;11111111111111111111111111111101&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;&amp;amp;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&amp;amp;11111111111111111111111111111110&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　最后的计算结果11111111111111111111111111111010还是补码的形式，要看其十进制，还需要先转成二进制原码。&lt;/p&gt;
&lt;p&gt;　　先转反码：11111111111111111111111111111010-1=11111111111111111111111111111001，得反码11111111111111111111111111111001。&lt;/p&gt;
&lt;p&gt;　　再转原码：在反码的基础上转原码，符号位不变，其他各位取反，得10000000000000000000000000000110。第一位1代表负数，后面0110转成十进制是6，得-6。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 或运算（|）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　规则：转为二进制后，有一位为1，则结果为1，否则结果为0。&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（正数原码、反码、补码一致）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000001010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;|12&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;|00000000000000000000000000001100&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000001110&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;10000000000000000000000000000110&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;|-2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;|10000000000000000000000000000010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111001&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;|-2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;|11111111111111111111111111111101&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;|-2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;|11111111111111111111111111111110&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111110&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;2.3 非运算（~）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　规则：转为二进制后，~0 = 1,~1 = 0。&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（正数原码、反码、补码一致）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;~7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;~00000000000000000000000000000111&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-8&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111000（补码需转换为原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　11111111111111111111111111111000-1得反码，可以把1000看成是0112，得反码11111111111111111111111111110111。根据反码得原码10000000000000000000000000001000。&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;~（-6）&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;~10000000000000000000000000000110&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;~（-6）&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;~11111111111111111111111111111001&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;二进制（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;~（-6）&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;~11111111111111111111111111111010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000000101（正数原码、反码、补码一致）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4 异或运算（^）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　规则：转为二进制后，两位不相同，结果为1，否则为0。&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（正数原码、反码、补码一致）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;15^2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;00000000000000000000000000001111&lt;/p&gt;
&lt;p&gt;^00000000000000000000000000000010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000001101&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.5 左移运算（&amp;lt;&amp;lt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　规则：转为二进制后，各二进制位全部左移N位，高位丢弃，低位补0。&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（正数原码、反码、补码一致）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;2&amp;lt;&amp;lt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000000010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;00&lt;/span&gt;000000000000000000000000000010&lt;strong&gt;00&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000001000&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（先取补码 再对补码操作位移）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-2&amp;lt;&amp;lt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;10000000000000000000000000000010（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111101（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111110（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;11&lt;/span&gt;111111111111111111111111111110&lt;strong&gt;00&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111000（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111110111（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-8&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;10000000000000000000000000001000（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.6 右移运算（&amp;gt;&amp;gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　规则：转为二进制后，各二进制位全部右移N位，若值为正，则在高位插入 0，若值为负，则在高位插入 1。&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（正数原码、反码、补码一致）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;2&amp;gt;&amp;gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000000010&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;00&lt;/strong&gt;000000000000000000000000000000&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;00000000000000000000000000000000&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（先取补码 再对补码操作位移）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-6&amp;gt;&amp;gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;10000000000000000000000000000110（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111001（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111010（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;11&lt;/strong&gt;111111111111111111111111111110&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111110（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111101（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;10000000000000000000000000000010（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.7 无符号右移运算（&amp;gt;&amp;gt;&amp;gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　规则：转为二进制后，各二进制位全部右移N位，无论正负，都在高位插入0。&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;十进制&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;二进制（先取补码 再对补码操作位移）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;
&lt;p&gt;-1&amp;gt;&amp;gt;&amp;gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;10000000000000000000000000000001（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111110（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;11111111111111111111111111111111（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;1111111111111111111111111111111&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;1111111111111111111111111111111（补码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;01111111111111111111111111111110（反码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;溢出，只能表示到int的最大值2147483647&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;10000000000000000000000000000001（原码）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt; &lt;strong&gt;应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 不用额外的变量实现两个数字互换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　见参考资料中的BitOperationTest，方法reverse通过三次异或操作完成了两个变量值的替换。&lt;/p&gt;
&lt;p&gt;　　证明很简单，我们只需要明白异或运算满足下面规律（实际不止如下规律）：&lt;/p&gt;
&lt;p&gt;　　0^a = a，a^a = 0；&lt;/p&gt;
&lt;p&gt;　　a ^ b = b ^ a；&lt;/p&gt;
&lt;p&gt;　　a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c；&lt;/p&gt;
&lt;p&gt;　　a ^ b ^ a = b；&lt;/p&gt;
&lt;p&gt;　　假设a,b两个变量，经过如下步骤完成值交换：a=a^b,b=b^a,a=a^b。&lt;/p&gt;
&lt;p&gt;　　证明如下：&lt;/p&gt;
&lt;p&gt;　　因为a ^ b = b ^ a，又a=a^b,b=b^a。故b=b^a= b^ (a^b)=a。&lt;/p&gt;
&lt;p&gt;　　继续a=a^b，a=（a^b) ^ b^ (a^b)，故a=b。完成值交换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 不用判断语句实现求绝对值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　公式如下：(a^(a&amp;gt;&amp;gt;31))-(a&amp;gt;&amp;gt;31)&lt;/p&gt;
&lt;p&gt;　　先整理一下使用位运算取绝对值的思路：若a为正数，则不变，需要用异或0保持的特点；若a为负数，则其补码为原码翻转每一位后+1，先求其原码，补码-1后再翻转每一位，此时需要使用异或1具有翻转的特点。&lt;/p&gt;
&lt;p&gt;　　任何正数右移31后只剩符号位0，最终结果为0，任何负数右移31后也只剩符号位1，溢出的31位截断，空出的31位补符号位1，最终结果为-1.右移31操作可以取得任何整数的符号位。&lt;/p&gt;
&lt;p&gt;　　那么综合上面的步骤，可得到公式。a&amp;gt;&amp;gt;31取得a的符号，若a为正数，a&amp;gt;&amp;gt;31等于0，a^0=a，不变；若a为负数,a&amp;gt;&amp;gt;31等于-1 ，a^-1翻转每一位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3 判断一个数的奇偶性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　通过与运算判断奇偶数，伪代码如下：&lt;/p&gt;
&lt;p&gt;　　n&amp;amp;1 == 1?”奇数”:”偶数”&lt;/p&gt;
&lt;p&gt;　　奇数最低位肯定是1，而1的二进制最低位也是1，其他位都是0，所以所有奇数和1与运算结果肯定是1。&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;参考资料:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/lingjiango/ConcurrentProgramPractice&quot;&gt;https://github.com/lingjiango/ConcurrentProgramPractice&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitwise_operation&quot;&gt;https://en.wikipedia.org/wiki/Bitwise_operation&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.zhihu.com/question/20159860&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/20159860&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 02 Sep 2018 16:01:00 +0000</pubDate>
<dc:creator>lingjiango</dc:creator>
<og:description>在日常的Java开发中，位运算使用的不多，使用的更多的是算数运算（+、-、*、/、%）、关系运算（&lt;、&gt;、&lt;=、&gt;=、==、!=）和逻辑运算（&amp;&amp;、||、!），</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iou123lg/p/9576468.html</dc:identifier>
</item>
<item>
<title>【Java入门提高篇】Day31 Java容器类详解（十三）TreeSet详解 - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/9576444.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/9576444.html</guid>
<description>&lt;p&gt;　　上一篇很水的介绍完了TreeMap，这一篇来看看更水的TreeSet。&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902203917068-1419799206.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　本文将从以下几个角度进行展开：&lt;/p&gt;
&lt;p&gt;　　1、TreeSet简介和使用栗子&lt;/p&gt;
&lt;p&gt;　　2、TreeSet源码分析&lt;/p&gt;
&lt;p&gt;　　本篇大约需食用10分钟，各位看官请随意享用。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、TreeSet简介&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　TreeSet是Set家族中的又一名懒将，跟其他两位一样，与对应的Map关系密不可分&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902203945764-1290111478.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　我们先来回顾一下其他两个Set类，HashSet借助于HashMap拥有快速元素插入和查找的特性，LinkedHashSet借助于LinkedHashMap拥有快速插入查找以及使元素保持插入顺序的特性，TreeSet则是借助于TreeMap拥有使内部元素保持有序的特性，当然，所有的Set集合类都有元素去重的特性。当然，要区别一下的是，TreeSet中的有序是指可以按照内部比较器或者外部比较器的顺序对插入的元素进行排序，也就是每次插入后都会调整顺序以保持内部元素整体有序，而LinkedHashSet只能保持元素的插入顺序。&lt;/p&gt;
&lt;p&gt;　　Talk is cheap，show me your code. 嗯，还是来看代码吧：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        TreeSet&lt;/span&gt;&amp;lt;String&amp;gt; treeSet = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;&lt;span&gt;();
        treeSet.add(&lt;/span&gt;&quot;Frank&quot;&lt;span&gt;);
        treeSet.add(&lt;/span&gt;&quot;Alice&quot;&lt;span&gt;);
        treeSet.add(&lt;/span&gt;&quot;Bob&quot;&lt;span&gt;);
        treeSet.add(&lt;/span&gt;&quot;Allen&quot;&lt;span&gt;);
        treeSet.add(&lt;/span&gt;&quot;Ada&quot;&lt;span&gt;);
        treeSet.add(&lt;/span&gt;&quot;Adora&quot;&lt;span&gt;);
        System.out.println(treeSet);

        LinkedHashSet&lt;/span&gt;&amp;lt;String&amp;gt; linkedHashSet = &lt;span&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;&amp;gt;&lt;span&gt;();
        linkedHashSet.add(&lt;/span&gt;&quot;Frank&quot;&lt;span&gt;);
        linkedHashSet.add(&lt;/span&gt;&quot;Alice&quot;&lt;span&gt;);
        linkedHashSet.add(&lt;/span&gt;&quot;Bob&quot;&lt;span&gt;);
        linkedHashSet.add(&lt;/span&gt;&quot;Allen&quot;&lt;span&gt;);
        linkedHashSet.add(&lt;/span&gt;&quot;Ada&quot;&lt;span&gt;);
        linkedHashSet.add(&lt;/span&gt;&quot;Adora&quot;&lt;span&gt;);
        System.out.println(linkedHashSet);

    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Ada, Adora, Alice, Allen, Bob, Frank]
[Frank, Alice, Bob, Allen, Ada, Adora]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到TreeSet给插入的元素自动排序了。那么可不可以放入我们自定义的类元素呢？当然是可以的，不然要它何用&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902212411939-1823215167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        List&lt;/span&gt;&amp;lt;Goods&amp;gt; goods = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone4S&quot;,500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone5&quot;,800.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone6S&quot;,2500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone7S&quot;,4500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone8&quot;,6500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;IphoneX&quot;,8500.00&lt;span&gt;));
        System.out.println(goods);

        TreeSet&lt;/span&gt;&amp;lt;Goods&amp;gt; treeSet = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;&lt;span&gt;();
        treeSet.addAll(goods);
        System.out.println(treeSet);

        LinkedHashSet&lt;/span&gt;&amp;lt;Goods&amp;gt; linkedHashSet = &lt;span&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;&amp;gt;&lt;span&gt;();
        linkedHashSet.addAll(goods);
        System.out.println(linkedHashSet);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Double price;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Goods(String name, Double price) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Double getPrice() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPrice(Double price) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Goods{&quot; +
                    &quot;name='&quot; + name + '\'' +
                    &quot;, price=&quot; + price +
                    '}'&lt;span&gt;;
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
Exception in thread &quot;main&quot;&lt;span&gt; java.lang.ClassCastException: com.frank.chapter22.TreeSetTest$Goods cannot be cast to java.lang.Comparable
[Goods{name&lt;/span&gt;='Iphone4S', price=500.0}, Goods{name='Iphone5', price=800.0}, Goods{name='Iphone6S', price=2500.0}, Goods{name='Iphone7S', price=4500.0}, Goods{name='Iphone8', price=6500.0}, Goods{name='IphoneX', price=8500.0&lt;span&gt;}]
    at java.util.TreeMap.compare(TreeMap.java:&lt;/span&gt;1294&lt;span&gt;)
    at java.util.TreeMap.put(TreeMap.java:&lt;/span&gt;538&lt;span&gt;)
    at java.util.TreeSet.add(TreeSet.java:&lt;/span&gt;255&lt;span&gt;)
    at java.util.AbstractCollection.addAll(AbstractCollection.java:&lt;/span&gt;344&lt;span&gt;)
    at java.util.TreeSet.addAll(TreeSet.java:&lt;/span&gt;312&lt;span&gt;)
    at com.frank.chapter22.TreeSetTest.main(TreeSetTest.java:&lt;/span&gt;25)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　欢迎来到大型翻车现场。。。&lt;/p&gt;
&lt;p&gt;　　别慌别慌，问题不大。TreeSet与TreeMap一样，是需要元素实现Comparable接口或者传入一个外部比较器的。为什么String可以不用？看看String的实现吧，人家可是实现了Comparable接口的。&lt;/p&gt;
&lt;p&gt;　　所以有两种方式解决，一种是让Goods类实现Comparable接口，另一种是传入一个外部比较器，我们先来看第一种：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        List&lt;/span&gt;&amp;lt;Goods&amp;gt; goods = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone7S&quot;,4500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone4S&quot;,500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone5&quot;,800.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;IphoneX&quot;,8500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone6S&quot;,2500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone8&quot;,6500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone8&quot;,6500.00&lt;span&gt;));
        System.out.println(goods);

        TreeSet&lt;/span&gt;&amp;lt;Goods&amp;gt; treeSet = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;&lt;span&gt;();
        treeSet.addAll(goods);
        System.out.println(treeSet);

        LinkedHashSet&lt;/span&gt;&amp;lt;Goods&amp;gt; linkedHashSet = &lt;span&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;&amp;gt;&lt;span&gt;();
        linkedHashSet.addAll(goods);
        System.out.println(linkedHashSet);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Goods &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Comparable{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Double price;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Goods(String name, Double price) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Double getPrice() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPrice(Double price) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Goods{&quot; +
                    &quot;name='&quot; + name + '\'' +
                    &quot;, price=&quot; + price +
                    '}'&lt;span&gt;;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compareTo(Object o) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(o &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Goods)){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
            }
            Goods goods &lt;/span&gt;=&lt;span&gt; (Goods) o;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.price.compareTo(goods.getPrice());
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　为了看出效果，把几个商品的顺序调整了一下，输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
[Goods{name='Iphone7S', price=4500.0}, Goods{name='Iphone4S', price=500.0}, Goods{name='Iphone5', price=800.0}, Goods{name='IphoneX', price=8500.0}, Goods{name='Iphone6S', price=2500.0}, Goods{name='Iphone8', price=6500.0}, Goods{name='Iphone8', price=6500.0&lt;span&gt;}]
[Goods{name&lt;/span&gt;='Iphone4S', price=500.0}, Goods{name='Iphone5', price=800.0}, Goods{name='Iphone6S', price=2500.0}, Goods{name='Iphone7S', price=4500.0}, Goods{name='Iphone8', price=6500.0}, Goods{name='IphoneX', price=8500.0&lt;span&gt;}]
[Goods{name&lt;/span&gt;='Iphone7S', price=4500.0}, Goods{name='Iphone4S', price=500.0}, Goods{name='Iphone5', price=800.0}, Goods{name='IphoneX', price=8500.0}, Goods{name='Iphone6S', price=2500.0}, Goods{name='Iphone8', price=6500.0}, Goods{name='Iphone8', price=6500.0}]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里我们按价格进行了升序排列，接下来使用外部比较器的方式进行价格的倒序排列：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TreeSetTest {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        List&lt;/span&gt;&amp;lt;Goods&amp;gt; goods = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone7S&quot;,4500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone4S&quot;,500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone5&quot;,800.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;IphoneX&quot;,8500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone6S&quot;,2500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone8&quot;,6500.00&lt;span&gt;));
        goods.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Goods(&quot;Iphone8&quot;,6500.00&lt;span&gt;));
        System.out.println(goods);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、使用Lamada表达式
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;TreeSet&amp;lt;Goods&amp;gt; treeSet = new TreeSet&amp;lt;&amp;gt;((g1,g2) -&amp;gt; g2.getPrice().compareTo(g1.getPrice()));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、使用匿名内部类&lt;/span&gt;
        TreeSet&amp;lt;Goods&amp;gt; treeSet = &lt;span&gt;new&lt;/span&gt; TreeSet&amp;lt;&amp;gt;(&lt;span&gt;new&lt;/span&gt; Comparator&amp;lt;Goods&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; compare(Goods o1, Goods o2) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; o2.getPrice().compareTo(o1.getPrice());
            }
        });
        
        
        treeSet.addAll(goods);
        System.out.println(treeSet);

        LinkedHashSet&lt;/span&gt;&amp;lt;Goods&amp;gt; linkedHashSet = &lt;span&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;&amp;gt;&lt;span&gt;();
        linkedHashSet.addAll(goods);
        System.out.println(linkedHashSet);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Double price;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Goods(String name, Double price) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Double getPrice() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPrice(Double price) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.price =&lt;span&gt; price;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Goods{&quot; +
                    &quot;name='&quot; + name + '\'' +
                    &quot;, price=&quot; + price +
                    '}'&lt;span&gt;;
        }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在传入外部比较器的时候，也有很多种姿势，这里还是选了匿名内部类的方式进行传入，因为这里只需要使用一次，Lamada表达式还没有做介绍，这里就先不讲了，欣赏一下就好，先领略一下它的强大。&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902231059348-1090220125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
[Goods{name='Iphone7S', price=4500.0}, Goods{name='Iphone4S', price=500.0}, Goods{name='Iphone5', price=800.0}, Goods{name='IphoneX', price=8500.0}, Goods{name='Iphone6S', price=2500.0}, Goods{name='Iphone8', price=6500.0}, Goods{name='Iphone8', price=6500.0&lt;span&gt;}]
[Goods{name&lt;/span&gt;='IphoneX', price=8500.0}, Goods{name='Iphone8', price=6500.0}, Goods{name='Iphone7S', price=4500.0}, Goods{name='Iphone6S', price=2500.0}, Goods{name='Iphone5', price=800.0}, Goods{name='Iphone4S', price=500.0&lt;span&gt;}]
[Goods{name&lt;/span&gt;='Iphone7S', price=4500.0}, Goods{name='Iphone4S', price=500.0}, Goods{name='Iphone5', price=800.0}, Goods{name='IphoneX', price=8500.0}, Goods{name='Iphone6S', price=2500.0}, Goods{name='Iphone8', price=6500.0}, Goods{name='Iphone8', price=6500.0}]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样，就完成了倒序排列了，很简单吧。&lt;/p&gt;
&lt;h2&gt;二、TreeSet源码分析&lt;/h2&gt;
&lt;p&gt;　　先来看看TreeSet的继承关系图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902231629881-1741929348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　跟TreeMap的继承机构差不多，NavigableSet接口中存在大量的导航方法，可以帮助更快定位想要查找的元素，AbstractSet提供Set的部分默认实现，这样只需要实现其它方法即可。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902232154892-1723839384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，TreeSet中的方法并不是很多，除了导航方法之外，就是几个最常用的方法了，如add，addAll，remove，contains。接下来让我们一起看看这几个方法是如何实现的：&lt;/p&gt;
&lt;p&gt;　　先来看看内部成员和构造函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 内部默默无闻工作的Map
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; NavigableMap&amp;lt;E,Object&amp;gt;&lt;span&gt; m;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; map中共用的一个value&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object PRESENT = &lt;span&gt;new&lt;/span&gt; Object();
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认构造方法，根据其元素的自然顺序进行排序&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TreeSet() {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; TreeMap&amp;lt;E,Object&amp;gt;&lt;span&gt;());
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造一个包含指定 collection 元素的新 TreeSet，它按照其元素的自然顺序进行排序。&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; TreeSet(Comparator&amp;lt;? &lt;span&gt;super&lt;/span&gt; E&amp;gt;&lt;span&gt; comparator) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; TreeMap&amp;lt;&amp;gt;&lt;span&gt;(comparator));
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造一个新的空 TreeSet，它根据指定比较器进行排序。&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; TreeSet(Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt;&lt;span&gt; c) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;();
            addAll(c);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造一个与指定有序 set 具有相同映射关系和相同排序的新 TreeSet。&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; TreeSet(SortedSet&amp;lt;E&amp;gt;&lt;span&gt; s) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(s.comparator());
            addAll(s);
        }

        TreeSet(NavigableMap&lt;/span&gt;&amp;lt;E,Object&amp;gt;&lt;span&gt; m) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.m =&lt;span&gt; m;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　add方法，嗯，够简明扼要。&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902232829121-1773740446.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; add(E e) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; m.put(e, PRESENT)==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　addAll：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;  &lt;span&gt;boolean&lt;/span&gt; addAll(Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt;&lt;span&gt; c) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 先检测集合是否继承了SortedSet接口，内部map是否为TreeMap
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 并且检测使用的比较器是否与内部Map的比较器一致
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果一致的话则使用TreeMap的addAllForTreeSet方法进行批量插入
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; addAllForTreeSet方法可以在常量时间对有序元素进行插入 &lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (m.size()==0 &amp;amp;&amp;amp; c.size() &amp;gt; 0 &amp;amp;&amp;amp;&lt;span&gt;
            c &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt; SortedSet &amp;amp;&amp;amp;&lt;span&gt;
            m &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TreeMap) {
            SortedSet&lt;/span&gt;&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt; set = (SortedSet&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt;&lt;span&gt;) c;
            TreeMap&lt;/span&gt;&amp;lt;E,Object&amp;gt; map = (TreeMap&amp;lt;E, Object&amp;gt;&lt;span&gt;) m;
            Comparator&lt;/span&gt;&amp;lt;?&amp;gt; cc =&lt;span&gt; set.comparator();
            Comparator&lt;/span&gt;&amp;lt;? &lt;span&gt;super&lt;/span&gt; E&amp;gt; mc =&lt;span&gt; map.comparator();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cc==mc || (cc != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; cc.equals(mc))) {
                map.addAllForTreeSet(set, PRESENT);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不满足条件，则使用父类的addAll方法进行添加&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;&lt;span&gt;.addAll(c);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　嗯，这里会先激进优化，不行再用笨办法一个个添加，因为如果是将大量元素插入TreeMap中相对而言还是比较耗时耗力的，每次插入一个元素都可能导致整体结构的调整，而如果插入的元素刚好是有序的，那么就可以对这个过程进行一次很不错的优化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; remove(Object o) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; m.remove(o)==&lt;span&gt;PRESENT;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; contains(Object o) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; m.containsKey(o);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　remove和contains方法也很简单。而且还带一点粗暴&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902234831546-1777184576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　到此，本篇就结束了，其实也没太多内容，因为TreeSet本身也没有太多东西。当然，了解它的内部结构目的是为了更好的使用它。在遇到问题时，每个知识点就是你手中的一张牌，能不能打好这手牌，先要看你这牌好不好，牌不好的话，再聪明也难翻盘。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201809/1043143-20180902235740124-1669491267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;





&lt;p&gt;&lt;span&gt;.　　&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 02 Sep 2018 15:59:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<og:description>上一篇很水的介绍完了TreeMap，这一篇来看看更水的TreeSet。 本文将从以下几个角度进行展开： 1、TreeSet简介和使用栗子 2、TreeSet源码分析 本篇大约需食用10分钟，各位看官请</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/9576444.html</dc:identifier>
</item>
<item>
<title>轻量级ORM框架 Bankinate - 7tiny</title>
<link>http://www.cnblogs.com/7tiny/p/9575230.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/7tiny/p/9575230.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt; * CopyRight: 7TINY CODE BUILDER. 
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt; * Version: 5.0.0
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt; * Author: 7tiny
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt; * Address: Earth
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt; * Create: 2018-04-19 21:34:01
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt; * Modify: 2018-04-19 21:34:01
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt; * E-mail: dong@7tiny.com | sevenTiny@foxmail.com 
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt; * GitHub: &lt;/span&gt;&lt;span&gt;https://github.com/sevenTiny&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt; * Personal web site: &lt;/span&gt;&lt;span&gt;http://www.7tiny.com&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt; * Technical WebSit: &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/7tiny/&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt; * Description: 
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt; * Thx , Best Regards ~
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt; ********************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; MySql.Data.MySqlClient;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Data;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Data.Common;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Data.SqlClient;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.Bankinate
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; DataBaseType
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        SqlServer,
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        MySql,
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        Oracle,
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;        MongoDB
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DbHelper
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ConnString 链接字符串声明
&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 连接字符串 ConnString_Default 默认，且赋值时会直接覆盖掉读写
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _connString;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ConnString_Default
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _connString; }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;set&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                 _connString =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                 ConnString_RW =&lt;span&gt; _connString;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 ConnString_R =&lt;span&gt; _connString;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 连接字符串 ConnString_RW 读写数据库使用
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConnString_RW { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } =&lt;span&gt; _connString;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 连接字符串 ConnString_R 读数据库使用
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConnString_R { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } =&lt;span&gt; _connString;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; DataBaseType Select default:mysql
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; DataBaseType DbType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } =&lt;span&gt; DataBaseType.MySql;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ExcuteNonQuery 执行sql语句或者存储过程,返回影响的行数---ExcuteNonQuery
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ExecuteNonQuery(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType =&lt;span&gt; CommandType.Text)
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_RW))
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteNonQuery();
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ExecuteNonQuery(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary)
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_RW))
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                     PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType, dictionary);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数增加了commandType 可以自己编辑执行方式&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteNonQuery();
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BatchExecuteNonQuery(IEnumerable&amp;lt;BatchExecuteModel&amp;gt;&lt;span&gt; batchExecuteModels)
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_RW))
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;                     &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; batchExecuteModels)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;                        PreparCommand(conn.DbConnection, cmd.DbCommand, item.CommandTextOrSpName, item.CommandType, item.ParamsDic);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;                        cmd.DbCommand.ExecuteNonQuery();
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; ExecuteNonQueryAsync(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType =&lt;span&gt; CommandType.Text)
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_RW))
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteNonQueryAsync();
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; ExecuteNonQueryAsync(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary)
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_RW))
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                     PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType, dictionary);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数增加了commandType 可以自己编辑执行方式&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteNonQueryAsync();
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; BatchExecuteNonQueryAsync(IEnumerable&amp;lt;BatchExecuteModel&amp;gt;&lt;span&gt; batchExecuteModels)
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_RW))
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                     &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; batchExecuteModels)
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;                        PreparCommand(conn.DbConnection, cmd.DbCommand, item.CommandTextOrSpName, item.CommandType, item.ParamsDic);
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;                        cmd.DbCommand.ExecuteNonQueryAsync();
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt; 
&lt;span&gt;144&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ExecuteScalar 执行sql语句或者存储过程,执行单条语句，返回单个结果---ScalarExecuteScalar
&lt;span&gt;145&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; ExecuteScalar(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType =&lt;span&gt; CommandType.Text)
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW))
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType);
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteScalar();
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; ExecuteScalar(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary)
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW))
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType, dictionary);
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteScalar();
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; 
&lt;span&gt;166&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt; ExecuteScalarAsync(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType =&lt;span&gt; CommandType.Text)
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW))
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType);
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteScalarAsync();
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Task&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt; ExecuteScalarAsync(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary)
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW))
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType, dictionary);
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteScalarAsync();
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt; 
&lt;span&gt;189&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt; 
&lt;span&gt;193&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ExecuteReader 执行sql语句或者存储过程,返回DataReader---DataReader
&lt;span&gt;194&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; DbDataReader ExecuteReader(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType =&lt;span&gt; CommandType.Text)
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;sqlDataReader不能用using 会关闭conn 导致不能获取到返回值。注意：DataReader获取值时必须保持连接状态&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt;             SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW);
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;             DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType);
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;            PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType);
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteReader(CommandBehavior.CloseConnection);
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; DbDataReader ExecuteReader(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary)
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;sqlDataReader不能用using 会关闭conn 导致不能获取到返回值。注意：DataReader获取值时必须保持连接状态&lt;/span&gt;
&lt;span&gt;205&lt;/span&gt;             SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW);
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt;             DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType);
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; &lt;span&gt;            PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType, dictionary);
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd.DbCommand.ExecuteReader(CommandBehavior.CloseConnection);
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;211&lt;/span&gt; 
&lt;span&gt;212&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ExecuteDataTable 执行sql语句或者存储过程,返回一个DataTable---DataTable
&lt;span&gt;213&lt;/span&gt; 
&lt;span&gt;214&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; &lt;span&gt;         * Update At 2017-3-2 14:58:45
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;         * Add the ExecuteDataTable Method into Sql_Helper_DG  
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;         *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;218&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; DataTable ExecuteDataTable(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType =&lt;span&gt; CommandType.Text)
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW))
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType);
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt;                     &lt;span&gt;using&lt;/span&gt; (DbDataAdapterCommon da = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbDataAdapterCommon(DbType, cmd.DbCommand))
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;                         DataSet ds = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataSet();
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; &lt;span&gt;                        da.Fill(ds);
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (ds.Tables.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt; ds.Tables[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(DataTable);
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; DataTable ExecuteDataTable(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary)
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW))
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType, dictionary);
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;                     &lt;span&gt;using&lt;/span&gt; (DbDataAdapterCommon da = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbDataAdapterCommon(DbType, cmd.DbCommand))
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;                         DataSet ds = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataSet();
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; &lt;span&gt;                        da.Fill(ds);
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (ds.Tables.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt; ds.Tables[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(DataTable);
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;259&lt;/span&gt; 
&lt;span&gt;260&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ExecuteDataSet 执行sql语句或者存储过程,返回一个DataSet---DataSet
&lt;span&gt;261&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; DataSet ExecuteDataSet(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType =&lt;span&gt; CommandType.Text)
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW))
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType);
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;                     &lt;span&gt;using&lt;/span&gt; (DbDataAdapterCommon da = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbDataAdapterCommon(DbType, cmd.DbCommand))
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;                         DataSet ds = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataSet();
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt; &lt;span&gt;                        da.Fill(ds);
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ds;
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;277&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; DataSet ExecuteDataSet(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary)
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (SqlConnection_RW conn = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection_RW(DbType, ConnString_R, ConnString_RW))
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt;                 &lt;span&gt;using&lt;/span&gt; (DbCommandCommon cmd = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbCommandCommon(DbType))
&lt;/span&gt;&lt;span&gt;282&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt; &lt;span&gt;                    PreparCommand(conn.DbConnection, cmd.DbCommand, commandTextOrSpName, commandType, dictionary);
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt;                     &lt;span&gt;using&lt;/span&gt; (DbDataAdapterCommon da = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DbDataAdapterCommon(DbType, cmd.DbCommand))
&lt;/span&gt;&lt;span&gt;285&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt;                         DataSet ds = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataSet();
&lt;/span&gt;&lt;span&gt;287&lt;/span&gt; &lt;span&gt;                        da.Fill(ds);
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ds;
&lt;/span&gt;&lt;span&gt;289&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;290&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;292&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;294&lt;/span&gt; 
&lt;span&gt;295&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ExecuteList Entity 执行sql语句或者存储过程，返回一个List&amp;lt;T&amp;gt;---List&amp;lt;T&amp;gt;
&lt;span&gt;296&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;Entity&amp;gt; ExecuteList&amp;lt;Entity&amp;gt;(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType = CommandType.Text) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;297&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; GetListFromDataSetV2&amp;lt;Entity&amp;gt;&lt;span&gt;(ExecuteDataSet(commandTextOrSpName, commandType));
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;Entity&amp;gt; ExecuteList&amp;lt;Entity&amp;gt;(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; dictionary) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;301&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; GetListFromDataSetV2&amp;lt;Entity&amp;gt;&lt;span&gt;(ExecuteDataSet(commandTextOrSpName, commandType, dictionary));
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;304&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;305&lt;/span&gt; 
&lt;span&gt;306&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ExecuteEntity 执行sql语句或者存储过程，返回一个Entity---Entity
&lt;span&gt;307&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Entity ExecuteEntity&amp;lt;Entity&amp;gt;(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType = CommandType.Text) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;308&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;309&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; GetEntityFromDataSetV2&amp;lt;Entity&amp;gt;&lt;span&gt;(ExecuteDataSet(commandTextOrSpName, commandType));
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Entity ExecuteEntity&amp;lt;Entity&amp;gt;(&lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; dictionary) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;312&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;313&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; GetEntityFromDataSetV2&amp;lt;Entity&amp;gt;&lt;span&gt;(ExecuteDataSet(commandTextOrSpName, commandType, dictionary));
&lt;/span&gt;&lt;span&gt;314&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;316&lt;/span&gt; 
&lt;span&gt;317&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; ---PreparCommand 构建一个通用的command对象供内部方法进行调用---
&lt;span&gt;318&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; PreparCommand(DbConnection conn, DbCommand cmd, &lt;span&gt;string&lt;/span&gt; commandTextOrSpName, CommandType commandType, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; dictionary = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;320&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开连接&lt;/span&gt;
&lt;span&gt;321&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (conn.State !=&lt;span&gt; ConnectionState.Open)
&lt;/span&gt;&lt;span&gt;322&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;323&lt;/span&gt; &lt;span&gt;                conn.Open();
&lt;/span&gt;&lt;span&gt;324&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;325&lt;/span&gt; 
&lt;span&gt;326&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置SqlCommand对象的属性值&lt;/span&gt;
&lt;span&gt;327&lt;/span&gt;             cmd.Connection =&lt;span&gt; conn;
&lt;/span&gt;&lt;span&gt;328&lt;/span&gt;             cmd.CommandType =&lt;span&gt; commandType;
&lt;/span&gt;&lt;span&gt;329&lt;/span&gt;             cmd.CommandText =&lt;span&gt; commandTextOrSpName;
&lt;/span&gt;&lt;span&gt;330&lt;/span&gt;             cmd.CommandTimeout = &lt;span&gt;60&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;331&lt;/span&gt; 
&lt;span&gt;332&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (dictionary != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;333&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt; &lt;span&gt;                cmd.Parameters.Clear();
&lt;/span&gt;&lt;span&gt;335&lt;/span&gt; &lt;span&gt;                DbParameter[] parameters;
&lt;/span&gt;&lt;span&gt;336&lt;/span&gt;                 &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (conn)
&lt;/span&gt;&lt;span&gt;337&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;338&lt;/span&gt;                     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; SqlConnection s:
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt;                         parameters = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlParameter[dictionary.Count];
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;341&lt;/span&gt;                     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; MySqlConnection m:
&lt;/span&gt;&lt;span&gt;342&lt;/span&gt;                         parameters = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MySqlParameter[dictionary.Count];
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;344&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case OracleConnection o:
&lt;/span&gt;&lt;span&gt;345&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;parameters = new OracleParameter[dictionary.Count];
&lt;/span&gt;&lt;span&gt;346&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;break;&lt;/span&gt;
&lt;span&gt;347&lt;/span&gt;                     &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;348&lt;/span&gt;                         parameters = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlParameter[dictionary.Count];
&lt;/span&gt;&lt;span&gt;349&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;350&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;351&lt;/span&gt; 
&lt;span&gt;352&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt;[] keyArray =&lt;span&gt; dictionary.Keys.ToArray();
&lt;/span&gt;&lt;span&gt;353&lt;/span&gt;                 &lt;span&gt;object&lt;/span&gt;[] valueArray =&lt;span&gt; dictionary.Values.ToArray();
&lt;/span&gt;&lt;span&gt;354&lt;/span&gt; 
&lt;span&gt;355&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; parameters.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;356&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;357&lt;/span&gt;                     &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (conn)
&lt;/span&gt;&lt;span&gt;358&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;359&lt;/span&gt;                         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; SqlConnection s:
&lt;/span&gt;&lt;span&gt;360&lt;/span&gt;                             parameters[i] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlParameter(keyArray[i], valueArray[i]);
&lt;/span&gt;&lt;span&gt;361&lt;/span&gt;                             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;362&lt;/span&gt;                         &lt;span&gt;case&lt;/span&gt;&lt;span&gt; MySqlConnection m:
&lt;/span&gt;&lt;span&gt;363&lt;/span&gt;                             parameters[i] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MySqlParameter(keyArray[i], valueArray[i]);
&lt;/span&gt;&lt;span&gt;364&lt;/span&gt;                             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;365&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;case OracleConnection o:
&lt;/span&gt;&lt;span&gt;366&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; parameters[i] = new OracleParameter(keyArray[i], valueArray[i]);
&lt;/span&gt;&lt;span&gt;367&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; break;&lt;/span&gt;
&lt;span&gt;368&lt;/span&gt;                         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;369&lt;/span&gt;                             parameters[i] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlParameter(keyArray[i], valueArray[i]);
&lt;/span&gt;&lt;span&gt;370&lt;/span&gt;                             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;371&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;372&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;373&lt;/span&gt; &lt;span&gt;                cmd.Parameters.AddRange(parameters);
&lt;/span&gt;&lt;span&gt;374&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;375&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;376&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;377&lt;/span&gt; 
&lt;span&gt;378&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 通过Model反射返回结果集 Model为 Entity 泛型变量的真实类型---反射返回结果集
&lt;span&gt;379&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;Entity&amp;gt; GetListFromDataSet&amp;lt;Entity&amp;gt;(DataSet ds) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;380&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;381&lt;/span&gt;             List&amp;lt;Entity&amp;gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Entity&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化一个list对象&lt;/span&gt;
&lt;span&gt;382&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;(Entity).GetProperties();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取T对象的所有公共属性&lt;/span&gt;
&lt;span&gt;383&lt;/span&gt; 
&lt;span&gt;384&lt;/span&gt;             DataTable dt = ds.Tables[&lt;span&gt;0&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取到ds的dt&lt;/span&gt;
&lt;span&gt;385&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (dt.Rows.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;386&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;387&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断读取的行是否&amp;gt;0 即数据库数据已被读取&lt;/span&gt;
&lt;span&gt;388&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (DataRow row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dt.Rows)
&lt;/span&gt;&lt;span&gt;389&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;390&lt;/span&gt;                     Entity model1 = System.Activator.CreateInstance&amp;lt;Entity&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化一个对象，便于往list里填充数据&lt;/span&gt;
&lt;span&gt;391&lt;/span&gt;                     &lt;span&gt;foreach&lt;/span&gt; (PropertyInfo propertyInfo &lt;span&gt;in&lt;/span&gt;&lt;span&gt; propertyInfos)
&lt;/span&gt;&lt;span&gt;392&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;393&lt;/span&gt;                         &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;394&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;395&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历模型里所有的字段&lt;/span&gt;
&lt;span&gt;396&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (row[propertyInfo.Name] !=&lt;span&gt; System.DBNull.Value)
&lt;/span&gt;&lt;span&gt;397&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt;398&lt;/span&gt;                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断值是否为空，如果空赋值为null见else&lt;/span&gt;
&lt;span&gt;399&lt;/span&gt;                                 &lt;span&gt;if&lt;/span&gt; (propertyInfo.PropertyType.IsGenericType &amp;amp;&amp;amp; propertyInfo.PropertyType.GetGenericTypeDefinition().Equals(&lt;span&gt;typeof&lt;/span&gt;(Nullable&amp;lt;&amp;gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;400&lt;/span&gt; &lt;span&gt;                                {
&lt;/span&gt;&lt;span&gt;401&lt;/span&gt;                                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果convertsionType为nullable类，声明一个NullableConverter类，该类提供从Nullable类到基础基元类型的转换&lt;/span&gt;
&lt;span&gt;402&lt;/span&gt;                                     NullableConverter nullableConverter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullableConverter(propertyInfo.PropertyType);
&lt;/span&gt;&lt;span&gt;403&lt;/span&gt;                                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将convertsionType转换为nullable对的基础基元类型&lt;/span&gt;
&lt;span&gt;404&lt;/span&gt;                                     propertyInfo.SetValue(model1, Convert.ChangeType(row[propertyInfo.Name], nullableConverter.UnderlyingType), &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;405&lt;/span&gt; &lt;span&gt;                                }
&lt;/span&gt;&lt;span&gt;406&lt;/span&gt;                                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;407&lt;/span&gt; &lt;span&gt;                                {
&lt;/span&gt;&lt;span&gt;408&lt;/span&gt;                                     propertyInfo.SetValue(model1, Convert.ChangeType(row[propertyInfo.Name], propertyInfo.PropertyType), &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;409&lt;/span&gt; &lt;span&gt;                                }
&lt;/span&gt;&lt;span&gt;410&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;411&lt;/span&gt;                             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;412&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt;413&lt;/span&gt;                                 propertyInfo.SetValue(model1, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果数据库的值为空，则赋值为null&lt;/span&gt;
&lt;span&gt;414&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;415&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;416&lt;/span&gt;                         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
&lt;/span&gt;&lt;span&gt;417&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;418&lt;/span&gt;                             propertyInfo.SetValue(model1, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果数据库的值为空，则赋值为null&lt;/span&gt;
&lt;span&gt;419&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;420&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;421&lt;/span&gt;                     list.Add(model1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将对象填充到list中&lt;/span&gt;
&lt;span&gt;422&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;423&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;424&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;425&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;426&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;Entity&amp;gt; GetListFromDataSetV2&amp;lt;Entity&amp;gt;(DataSet ds) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;427&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;428&lt;/span&gt;             List&amp;lt;Entity&amp;gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Entity&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;429&lt;/span&gt;             DataTable dt = ds.Tables[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;430&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (dt.Rows.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;431&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;432&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (DataRow row &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dt.Rows)
&lt;/span&gt;&lt;span&gt;433&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;434&lt;/span&gt;                     Entity entity = FillAdapter&amp;lt;Entity&amp;gt;&lt;span&gt;.AutoFill(row);
&lt;/span&gt;&lt;span&gt;435&lt;/span&gt; &lt;span&gt;                    list.Add(entity);
&lt;/span&gt;&lt;span&gt;436&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;437&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;438&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;439&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;440&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Entity GetEntityFromDataReader&amp;lt;Entity&amp;gt;(DbDataReader reader) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;441&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;442&lt;/span&gt;             Entity model = System.Activator.CreateInstance&amp;lt;Entity&amp;gt;();           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化一个T类型对象&lt;/span&gt;
&lt;span&gt;443&lt;/span&gt;             PropertyInfo[] propertyInfos = model.GetType().GetProperties();     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取T对象的所有公共属性&lt;/span&gt;
&lt;span&gt;444&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt;&lt;span&gt; (reader)
&lt;/span&gt;&lt;span&gt;445&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;446&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (reader.Read())
&lt;/span&gt;&lt;span&gt;447&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;448&lt;/span&gt;                     &lt;span&gt;foreach&lt;/span&gt; (PropertyInfo propertyInfo &lt;span&gt;in&lt;/span&gt;&lt;span&gt; propertyInfos)
&lt;/span&gt;&lt;span&gt;449&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;450&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历模型里所有的字段&lt;/span&gt;
&lt;span&gt;451&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (reader[propertyInfo.Name] !=&lt;span&gt; System.DBNull.Value)
&lt;/span&gt;&lt;span&gt;452&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;453&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断值是否为空，如果空赋值为null见else&lt;/span&gt;
&lt;span&gt;454&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (propertyInfo.PropertyType.IsGenericType &amp;amp;&amp;amp; propertyInfo.PropertyType.GetGenericTypeDefinition().Equals(&lt;span&gt;typeof&lt;/span&gt;(Nullable&amp;lt;&amp;gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;455&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt;456&lt;/span&gt;                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果convertsionType为nullable类，声明一个NullableConverter类，该类提供从Nullable类到基础基元类型的转换&lt;/span&gt;
&lt;span&gt;457&lt;/span&gt;                                 NullableConverter nullableConverter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullableConverter(propertyInfo.PropertyType);
&lt;/span&gt;&lt;span&gt;458&lt;/span&gt;                                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将convertsionType转换为nullable对的基础基元类型&lt;/span&gt;
&lt;span&gt;459&lt;/span&gt;                                 propertyInfo.SetValue(model, Convert.ChangeType(reader[propertyInfo.Name], nullableConverter.UnderlyingType), &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;460&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;461&lt;/span&gt;                             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;462&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt;463&lt;/span&gt;                                 propertyInfo.SetValue(model, Convert.ChangeType(reader[propertyInfo.Name], propertyInfo.PropertyType), &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;464&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;465&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;466&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;467&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;468&lt;/span&gt;                             propertyInfo.SetValue(model, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果数据库的值为空，则赋值为null&lt;/span&gt;
&lt;span&gt;469&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;470&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;471&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; model;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回T类型的赋值后的对象 model&lt;/span&gt;
&lt;span&gt;472&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;473&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;474&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;default&lt;/span&gt;(Entity);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回引用类型和值类型的默认值0或null&lt;/span&gt;
&lt;span&gt;475&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;476&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Entity GetEntityFromDataSet&amp;lt;Entity&amp;gt;(DataSet ds) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;477&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;478&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; GetListFromDataSet&amp;lt;Entity&amp;gt;&lt;span&gt;(ds).FirstOrDefault();
&lt;/span&gt;&lt;span&gt;479&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;480&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Entity GetEntityFromDataSetV2&amp;lt;Entity&amp;gt;(DataSet ds) &lt;span&gt;where&lt;/span&gt; Entity : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;481&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;482&lt;/span&gt;             DataTable dt = ds.Tables[&lt;span&gt;0&lt;/span&gt;];&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取到ds的dt&lt;/span&gt;
&lt;span&gt;483&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (dt.Rows.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;484&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;485&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; FillAdapter&amp;lt;Entity&amp;gt;.AutoFill(dt.Rows[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;486&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;487&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(Entity);
&lt;/span&gt;&lt;span&gt;488&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;489&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;490&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;491&lt;/span&gt; 
&lt;span&gt;492&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;493&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Auto Fill Adapter
&lt;/span&gt;&lt;span&gt;494&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;495&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;Entity&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;496&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FillAdapter&amp;lt;Entity&amp;gt;
&lt;span&gt;497&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;498&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;DataRow, Entity&amp;gt; funcCache =&lt;span&gt; GetFactory();
&lt;/span&gt;&lt;span&gt;499&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Entity AutoFill(DataRow row)
&lt;/span&gt;&lt;span&gt;500&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;501&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; funcCache(row);
&lt;/span&gt;&lt;span&gt;502&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;503&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;DataRow, Entity&amp;gt;&lt;span&gt; GetFactory()
&lt;/span&gt;&lt;span&gt;504&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;505&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; type = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Entity);
&lt;/span&gt;&lt;span&gt;506&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; rowType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DataRow);
&lt;/span&gt;&lt;span&gt;507&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; rowDeclare = Expression.Parameter(rowType, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;508&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; instanceDeclare = Expression.Parameter(type, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;509&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;new Student()&lt;/span&gt;
&lt;span&gt;510&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; newExpression =&lt;span&gt; Expression.New(type);
&lt;/span&gt;&lt;span&gt;511&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;(t = new Student())&lt;/span&gt;
&lt;span&gt;512&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; instanceExpression =&lt;span&gt; Expression.Assign(instanceDeclare, newExpression);
&lt;/span&gt;&lt;span&gt;513&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row == null&lt;/span&gt;
&lt;span&gt;514&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; nullEqualExpression = Expression.NotEqual(rowDeclare, Expression.Constant(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;515&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; containsMethod = &lt;span&gt;typeof&lt;/span&gt;(DataColumnCollection).GetMethod(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Contains&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;516&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; indexerMethod = rowType.GetMethod(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get_Item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, BindingFlags.Instance | BindingFlags.Public, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) }, &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;new&lt;/span&gt; ParameterModifier(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) });
&lt;/span&gt;&lt;span&gt;517&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; properties = type.GetProperties(BindingFlags.Instance |&lt;span&gt; BindingFlags.Public);
&lt;/span&gt;&lt;span&gt;518&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; setExpressions = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Expression&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;519&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row.Table.Columns&lt;/span&gt;
&lt;span&gt;520&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; columns = Expression.Property(Expression.Property(rowDeclare, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Table&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Columns&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;521&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; propertyInfo &lt;span&gt;in&lt;/span&gt;&lt;span&gt; properties)
&lt;/span&gt;&lt;span&gt;522&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;523&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (propertyInfo.CanWrite)
&lt;/span&gt;&lt;span&gt;524&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;525&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Id,Id is a property of Entity&lt;/span&gt;
&lt;span&gt;526&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; propertyName = Expression.Constant(propertyInfo.Name, &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;527&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row.Table.Columns.Contains(&quot;Id&quot;)&lt;/span&gt;
&lt;span&gt;528&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; checkIfContainsColumn =&lt;span&gt; Expression.Call(columns, containsMethod, propertyName);
&lt;/span&gt;&lt;span&gt;529&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;t.Id&lt;/span&gt;
&lt;span&gt;530&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; propertyExpression =&lt;span&gt; Expression.Property(instanceDeclare, propertyInfo);
&lt;/span&gt;&lt;span&gt;531&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;row.get_Item(&quot;Id&quot;)&lt;/span&gt;
&lt;span&gt;532&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; value =&lt;span&gt; Expression.Call(rowDeclare, indexerMethod, propertyName);
&lt;/span&gt;&lt;span&gt;533&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;t.Id = Convert(row.get_Item(&quot;Id&quot;), Int32)&lt;/span&gt;
&lt;span&gt;534&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; propertyAssign =&lt;span&gt; Expression.Assign(propertyExpression, Expression.Convert(value, propertyInfo.PropertyType));
&lt;/span&gt;&lt;span&gt;535&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;t.Id = default(Int32)&lt;/span&gt;
&lt;span&gt;536&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; propertyAssignDefault =&lt;span&gt; Expression.Assign(propertyExpression, Expression.Default(propertyInfo.PropertyType));
&lt;/span&gt;&lt;span&gt;537&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;if(row.Table.Columns.Contains(&quot;Id&quot;)&amp;amp;&amp;amp;!value.Equals(DBNull.Value&amp;lt;&amp;gt;)) {t.Id = Convert(row.get_Item(&quot;Id&quot;), Int32)}else{t.Id = default(Int32)}&lt;/span&gt;
&lt;span&gt;538&lt;/span&gt;                     &lt;span&gt;var&lt;/span&gt; checkRowNull =&lt;span&gt; Expression.IfThenElse(Expression.AndAlso(checkIfContainsColumn, Expression.NotEqual(value, Expression.Constant(System.DBNull.Value))), propertyAssign, propertyAssignDefault);
&lt;/span&gt;&lt;span&gt;539&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;var checkContains = Expression.IfThen(checkIfContainsColumn, propertyAssign);&lt;/span&gt;
&lt;span&gt;540&lt;/span&gt; &lt;span&gt;                    setExpressions.Add(checkRowNull);
&lt;/span&gt;&lt;span&gt;541&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;542&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;543&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; checkIfRowIsNull =&lt;span&gt; Expression.IfThen(nullEqualExpression, Expression.Block(setExpressions));
&lt;/span&gt;&lt;span&gt;544&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; body = Expression.Block(&lt;span&gt;new&lt;/span&gt;&lt;span&gt;[] { instanceDeclare }, instanceExpression, checkIfRowIsNull, instanceDeclare);
&lt;/span&gt;&lt;span&gt;545&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Expression.Lambda&amp;lt;Func&amp;lt;DataRow, Entity&amp;gt;&amp;gt;&lt;span&gt;(body, rowDeclare).Compile();
&lt;/span&gt;&lt;span&gt;546&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;547&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;548&lt;/span&gt; 
&lt;span&gt;549&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;550&lt;/span&gt; &lt;span&gt;    * author:qixiao
&lt;/span&gt;&lt;span&gt;551&lt;/span&gt; &lt;span&gt;    * time:2017-9-18 18:02:23
&lt;/span&gt;&lt;span&gt;552&lt;/span&gt; &lt;span&gt;    * description:safe create sqlconnection support
&lt;/span&gt;&lt;span&gt;553&lt;/span&gt; &lt;span&gt;    * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;554&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SqlConnection_RW : IDisposable
&lt;/span&gt;&lt;span&gt;555&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;556&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;557&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; SqlConnection
&lt;/span&gt;&lt;span&gt;558&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;559&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbConnection DbConnection { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;560&lt;/span&gt; 
&lt;span&gt;561&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; SqlConnection_RW(DataBaseType dataBaseType, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ConnString_RW)
&lt;/span&gt;&lt;span&gt;562&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;563&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.DbConnection =&lt;span&gt; GetDbConnection(dataBaseType, ConnString_RW);
&lt;/span&gt;&lt;span&gt;564&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;565&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;566&lt;/span&gt; &lt;span&gt;         * if read db disabled,switchover to read write db immediately
&lt;/span&gt;&lt;span&gt;567&lt;/span&gt; &lt;span&gt;         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;568&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; SqlConnection_RW(DataBaseType dataBaseType, &lt;span&gt;string&lt;/span&gt; ConnString_R, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ConnString_RW)
&lt;/span&gt;&lt;span&gt;569&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;570&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;571&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;572&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.DbConnection =&lt;span&gt; GetDbConnection(dataBaseType, ConnString_R);
&lt;/span&gt;&lt;span&gt;573&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;574&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
&lt;/span&gt;&lt;span&gt;575&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;576&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.DbConnection =&lt;span&gt; GetDbConnection(dataBaseType, ConnString_RW);
&lt;/span&gt;&lt;span&gt;577&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;578&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;579&lt;/span&gt; 
&lt;span&gt;580&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;581&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; GetDataBase ConnectionString by database type and connection string -- private use
&lt;/span&gt;&lt;span&gt;582&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;583&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;dataBaseType&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;584&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ConnString&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;585&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;586&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; DbConnection GetDbConnection(DataBaseType dataBaseType, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ConnString)
&lt;/span&gt;&lt;span&gt;587&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;588&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (dataBaseType)
&lt;/span&gt;&lt;span&gt;589&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;590&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.SqlServer:
&lt;/span&gt;&lt;span&gt;591&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection(ConnString);
&lt;/span&gt;&lt;span&gt;592&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.MySql:
&lt;/span&gt;&lt;span&gt;593&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MySqlConnection(ConnString);
&lt;/span&gt;&lt;span&gt;594&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.Oracle:
&lt;/span&gt;&lt;span&gt;595&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return new OracleConnection(ConnString);&lt;/span&gt;
&lt;span&gt;596&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;597&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlConnection(ConnString);
&lt;/span&gt;&lt;span&gt;598&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;599&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;600&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;601&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Must Close Connection after use
&lt;/span&gt;&lt;span&gt;602&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;603&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
&lt;/span&gt;&lt;span&gt;604&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;605&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.DbConnection != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;606&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;607&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.DbConnection.Dispose();
&lt;/span&gt;&lt;span&gt;608&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;609&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;610&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;611&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;612&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Common sqlcommand
&lt;/span&gt;&lt;span&gt;613&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;614&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DbCommandCommon : IDisposable
&lt;/span&gt;&lt;span&gt;615&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;616&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;617&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; common dbcommand
&lt;/span&gt;&lt;span&gt;618&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;619&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbCommand DbCommand { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;620&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; DbCommandCommon(DataBaseType dataBaseType)
&lt;/span&gt;&lt;span&gt;621&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;622&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.DbCommand =&lt;span&gt; GetDbCommand(dataBaseType);
&lt;/span&gt;&lt;span&gt;623&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;624&lt;/span&gt; 
&lt;span&gt;625&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;626&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Get DbCommand select database type
&lt;/span&gt;&lt;span&gt;627&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;628&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;dataBaseType&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;629&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;630&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DbCommand GetDbCommand(DataBaseType dataBaseType)
&lt;/span&gt;&lt;span&gt;631&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;632&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (dataBaseType)
&lt;/span&gt;&lt;span&gt;633&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;634&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.SqlServer:
&lt;/span&gt;&lt;span&gt;635&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlCommand();
&lt;/span&gt;&lt;span&gt;636&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.MySql:
&lt;/span&gt;&lt;span&gt;637&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MySqlCommand();
&lt;/span&gt;&lt;span&gt;638&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.Oracle:
&lt;/span&gt;&lt;span&gt;639&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return new OracleCommand();&lt;/span&gt;
&lt;span&gt;640&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;641&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlCommand();
&lt;/span&gt;&lt;span&gt;642&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;643&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;644&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;645&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; must dispose after use
&lt;/span&gt;&lt;span&gt;646&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;647&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
&lt;/span&gt;&lt;span&gt;648&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;649&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.DbCommand != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;650&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;651&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.DbCommand.Dispose();
&lt;/span&gt;&lt;span&gt;652&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;653&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;654&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;655&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;656&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; DbDataAdapterCommon
&lt;/span&gt;&lt;span&gt;657&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;658&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DbDataAdapterCommon : DbDataAdapter, IDisposable
&lt;/span&gt;&lt;span&gt;659&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;660&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DbDataAdapter DbDataAdapter { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;661&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; DbDataAdapterCommon(DataBaseType dataBaseType, DbCommand dbCommand)
&lt;/span&gt;&lt;span&gt;662&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;663&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;get dbAdapter&lt;/span&gt;
&lt;span&gt;664&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.DbDataAdapter =&lt;span&gt; GetDbAdapter(dataBaseType, dbCommand);
&lt;/span&gt;&lt;span&gt;665&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;provid select command&lt;/span&gt;
&lt;span&gt;666&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.SelectCommand =&lt;span&gt; dbCommand;
&lt;/span&gt;&lt;span&gt;667&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;668&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DbDataAdapter GetDbAdapter(DataBaseType dataBaseType, DbCommand dbCommand)
&lt;/span&gt;&lt;span&gt;669&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;670&lt;/span&gt;             &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (dataBaseType)
&lt;/span&gt;&lt;span&gt;671&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;672&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.SqlServer:
&lt;/span&gt;&lt;span&gt;673&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlDataAdapter();
&lt;/span&gt;&lt;span&gt;674&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.MySql:
&lt;/span&gt;&lt;span&gt;675&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MySqlDataAdapter();
&lt;/span&gt;&lt;span&gt;676&lt;/span&gt;                 &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DataBaseType.Oracle:
&lt;/span&gt;&lt;span&gt;677&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return new OracleDataAdapter();&lt;/span&gt;
&lt;span&gt;678&lt;/span&gt;                 &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;679&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlDataAdapter();
&lt;/span&gt;&lt;span&gt;680&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;681&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;682&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;683&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; must dispose after use
&lt;/span&gt;&lt;span&gt;684&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;685&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
&lt;/span&gt;&lt;span&gt;686&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;687&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.DbDataAdapter != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;688&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;689&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.DbDataAdapter.Dispose();
&lt;/span&gt;&lt;span&gt;690&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;691&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;692&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;693&lt;/span&gt; 
&lt;span&gt;694&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;695&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用于批量操作的批量操作实体
&lt;/span&gt;&lt;span&gt;696&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;697&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BatchExecuteModel
&lt;/span&gt;&lt;span&gt;698&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;699&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;700&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行的语句或者存储过程名称
&lt;/span&gt;&lt;span&gt;701&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;702&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CommandTextOrSpName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;703&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;704&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行类别，默认执行sql语句
&lt;/span&gt;&lt;span&gt;705&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;706&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; CommandType CommandType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } =&lt;span&gt; CommandType.Text;
&lt;/span&gt;&lt;span&gt;707&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;708&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行语句的参数字典
&lt;/span&gt;&lt;span&gt;709&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;710&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; ParamsDic { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;711&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;712&lt;/span&gt; }
&lt;/pre&gt;</description>
<pubDate>Sun, 02 Sep 2018 15:57:00 +0000</pubDate>
<dc:creator>7tiny</dc:creator>
<og:description>【前言】 前面讲过ORM的前世今生，对ORM框架不了解的朋友可以参考博文：https://www.cnblogs.com/7tiny/p/9551754.html 今天，我们主要通过设计一款轻量级的O</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/7tiny/p/9575230.html</dc:identifier>
</item>
<item>
<title>Python中list的复制及深拷贝与浅拷贝探究 - Bil369</title>
<link>http://www.cnblogs.com/Bil369/p/9575659.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Bil369/p/9575659.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;&lt;span&gt;　　在Python中，经常要对一个list进行复制。对于复制，自然的就有深拷贝与浅拷贝问题。深拷贝与浅拷贝的区别在于，当从原本的list复制出新的list之后，修改其中的任意一个是否会对另一个造成影响，即这两个list在内存中是否储存在同一个区域，这也是区分深拷贝与浅拷贝的重要依据。接下来我们就针对Python中list复制的几种方法，来探究一下其是属于深拷贝还是浅拷贝。弄清楚这个问题，有助于我们在编程中规避错误，减少不必要的调试时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、非拷贝方法——直接赋值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果用=直接赋值，是非拷贝方法。这两个列表是等价的，修改其中任何一个列表都会影响到另一个列表。这也是Python作为动态语言与C这类静态语言在思想上的不同之处。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python3&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; old = [1, [1, 2, 3], 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; new =&lt;span&gt; old
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Before:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(new)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; new[0] = 3
&lt;span&gt;10&lt;/span&gt; new[1][0] = 3
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;After:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(new)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381257/201809/1381257-20180902234219071-756643199.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、浅拷贝的几种方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.copy()&lt;/strong&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们来看以下代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python3&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; old = [1, [1, 2, 3], 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; new =&lt;span&gt; old.copy()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Before:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(new)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; new[0] = 3
&lt;span&gt;10&lt;/span&gt; new[1][0] = 3
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;After:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(new)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381257/201809/1381257-20180902234030211-558030062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于list的第一层，是实现了深拷贝，但对于嵌套的list，仍然是浅拷贝。这其实很好理解，内层的list保存的是地址，复制过去的时候是把地址复制过去了。嵌套的list在内存中指向的还是同一个。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1381257/201809/1381257-20180902234921971-424870131.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;strong&gt;使用列表生成式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　使用列表生成式产生新列表也是一个浅拷贝方法，只对第一层实现深拷贝。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python3&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; old = [1, [1, 2, 3], 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; new = [i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; old]
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Before:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(new)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; new[0] = 3
&lt;span&gt;10&lt;/span&gt; new[1][0] = 3
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;After:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(new)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381257/201809/1381257-20180902234254847-1589282996.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;strong&gt;用for循环遍历&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　通过for循环遍历，将元素一个个添加到新列表中。这也是一个浅拷贝方法，只对第一层实现深拷贝。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python3&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; old = [1, [1, 2, 3], 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; new =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(old)):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    new.append(old[i])
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Before:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(new)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; new[0] = 3
&lt;span&gt;12&lt;/span&gt; new[1][0] = 3
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;After:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(new)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381257/201809/1381257-20180902234400731-642774504.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;strong&gt;使用切片&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　通过使用[:]切片，可以浅拷贝整个列表。同样的，只对第一层实现深拷贝。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python3&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; old = [1, [1, 2, 3], 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; new =&lt;span&gt; old[:]
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Before:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(new)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; new[0] = 3
&lt;span&gt;10&lt;/span&gt; new[1][0] = 3
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;After:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(new)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381257/201809/1381257-20180902234443757-575140754.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、深拷贝的实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果用deepcopy()方法，则无论多少层，无论怎样的形式，得到的新列表都是和原来无关的，这是最安全最清爽最有效的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　使用时，要导入copy。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python3&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; copy
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; old = [1, [1, 2, 3], 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; new =&lt;span&gt; copy.deepcopy(old)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Before:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(new)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; new[0] = 3
&lt;span&gt;12&lt;/span&gt; new[1][0] = 3
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;After:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(old)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(new)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 运行结果：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1381257/201809/1381257-20180902234600631-425310802.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;以上，就是对list的复制及深拷贝与浅拷贝探究。鉴于本人水平有限，文中有不妥之处，还请在评论中指出。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 02 Sep 2018 15:47:00 +0000</pubDate>
<dc:creator>Bil369</dc:creator>
<og:description>在Python中，经常要对一个list进行复制。对于复制，自然的就有深拷贝与浅拷贝问题。深拷贝与浅拷贝的区别在于，当从原本的list复制出新的list之后，修改其中的任意一个是否会对另一个造成影响，即</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Bil369/p/9575659.html</dc:identifier>
</item>
<item>
<title>安全的web服务器——使用mysqldump和mysqlbinlog实现MySQL全量与增量备份 - 初心不负丶</title>
<link>http://www.cnblogs.com/chuxinbufu/p/9576446.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chuxinbufu/p/9576446.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.环境&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;系统是Deepin15.6，数据库的版本号是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Server version: &lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt; (Debian)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据库引擎是：InnoDB。如何查看数据库版本和数据库引擎呢？&lt;/p&gt;
&lt;p&gt;终端登录MySQL数据库命令行的时候，就可以看见数据库版本。&lt;/p&gt;
&lt;p&gt;登录数据库后，使用如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
show engines;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它会显示很多数据库引擎，其中，显示YES的指本数据库支持的引擎，显示default的是本数据库默认的引擎。&lt;/p&gt;
&lt;p&gt;也可以用如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
show variables like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%storage_engine%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来显示数据库引擎。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.全量备份&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;全量备份很简单，备份的命令是：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;
&lt;div readability=&quot;18&quot;&gt;
&lt;p&gt;#--databases,指定数据库&lt;/p&gt;
&lt;p&gt;#--flush-logs，产生新的日志文件，binlog文件，这个在后面的增量备份有讲到过&lt;/p&gt;
&lt;p&gt;#--delete-master-logs，删掉原来的日志文件，binlog文件&lt;/p&gt;
&lt;p&gt;#DumpFile是要备份的目标文件&lt;/p&gt;
&lt;p&gt;mysqldump -uroot -p123456 --databases wordpressdb --flush-logs --delete-master-logs --single-transaction &amp;gt; $DumpFile&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;恢复的命令是在MySQL命令行中执行的，要先手动创建一个数据库，然后再use这个数据库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; source $DumpFile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;3.增量备份&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个操作需要MySQL本身的日志文件支持，登陆mysql，检查log-bin是否开启：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
show variables like 'log_bin';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; show variables like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;log_bin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| log_bin       | OFF   |
+---------------+-------+
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示OFF的话，那就是没有开始日志服务。那么找到MySQL的配置文件，更改配置，这个地方看了网上的很多教程，但是都没有用。大概他们讲的都是centos上的配置步骤吧，而我用的是基于debian的deepin15.6（Ubuntu应该也是适用的）。配置文件的目录是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
/etc/mysql/mysql.conf.d/mysqld.cnf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在其中加入这么几项：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1432102/201808/1432102-20180803220258751-2000085721.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，在终端中输入：sudo service mysql restart 重启MySQL服务，再登陆上MySQL，执行命令&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;show variables like 'log_bin';看到如下结果，证明binlog配置成功。&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
+---------------------------------+--------------------------------+
| Variable_name                   | Value                          |
+---------------------------------+--------------------------------+
| log_bin                         | ON                             |
| log_bin_basename                | /var/log/mysql/mysql-bin       |
| log_bin_index                   | /var/log/mysql/mysql-bin.index |
| log_bin_trust_function_creators | OFF                            |
| log_bin_use_v1_row_events       | OFF                            |
+---------------------------------+--------------------------------+
&lt;span&gt;5&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于binlog日志的详细配置用法：&lt;a href=&quot;https://www.ilanni.com/?p=7816&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;binlog_format 此参数配置binlog的日志格式，默认为mixed。

max_binlog_size此参数配置binlog的日志最大值，最大和默认值是1GB。

max_binlog_cache_size此参数表示binlog使用最大内存的数。

binlog&lt;/span&gt;-&lt;span&gt;do&lt;/span&gt;-db=&lt;span&gt;db_name 此参数表示只记录指定数据库的二进制日志。

binlog&lt;/span&gt;-ignore-db=&lt;span&gt;db_name此参数表示不记录指定的数据库的二进制日志。

expire_logs_days 此参数表示binlog日志保留的时间，默认单位是天。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于binlog日志的操作命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.查看所有binlog日志列表
　　mysql&lt;/span&gt;&amp;gt;&lt;span&gt; show master logs;

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.查看master状态，即最后(最新)一个binlog日志的编号名称，及其最后一个操作事件pos结束点(Position)值，这个文件就是当前MySQL在使用的binlog文件。
　　mysql&lt;/span&gt;&amp;gt;&lt;span&gt; show master status;

&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.刷新log日志，自此刻开始产生一个新编号的binlog日志文件
　　mysql&lt;/span&gt;&amp;gt;&lt;span&gt; flush logs;
　　注：每当mysqld服务重启时，会自动执行此命令，刷新binlog日志；在mysqldump备份数据时加 &lt;/span&gt;-&lt;span&gt;F 选项也会刷新binlog日志；

&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.重置(清空)所有binlog日志
　　mysql&lt;/span&gt;&amp;gt; reset master;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想查看binlog日志的具体内容，登录MySQL命令行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; show binlog events [IN &lt;span&gt;'&lt;/span&gt;&lt;span&gt;log_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;] [FROM pos] [LIMIT [offset,] row_count];
选项解析：
IN &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;   指定要查询的binlog文件名(不指定就是第一个binlog文件)
FROM pos        指定从哪个pos起始点开始查起(不指定就是从整个文件首个pos点开始算)
LIMIT [offset,] 偏移量(不指定就是0)
row_count       查询总条数(不指定就是所有行)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如做一下查询，在mysql-bin.000002文件中查询pos在219之后的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; show binlog events &lt;span&gt;in&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql-bin.000002&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; from &lt;span&gt;219&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;+------------------+-----+------------+-----------+-------------+----------------------------------------+
| Log_name         | Pos | Event_type | Server_id | End_log_pos | Info                                   |
+------------------+-----+------------+-----------+-------------+----------------------------------------+
| mysql-bin.&lt;span&gt;000002&lt;/span&gt; | &lt;span&gt;219&lt;/span&gt; | Query      |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;298&lt;/span&gt; | BEGIN                                  |
| mysql-bin.&lt;span&gt;000002&lt;/span&gt; | &lt;span&gt;298&lt;/span&gt; | Table_map  |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;366&lt;/span&gt; | table_id: &lt;span&gt;241&lt;/span&gt; (wordpressdb.wp_options) |
| mysql-bin.&lt;span&gt;000002&lt;/span&gt; | &lt;span&gt;366&lt;/span&gt; | Write_rows |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;447&lt;/span&gt; | table_id: &lt;span&gt;241&lt;/span&gt; flags: STMT_END_F        |
| mysql-bin.&lt;span&gt;000002&lt;/span&gt; | &lt;span&gt;447&lt;/span&gt; | Xid        |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;478&lt;/span&gt; | COMMIT &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; xid=53 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                    |
+------------------+-----+------------+-----------+-------------+----------------------------------------+
&lt;span&gt;4&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，我们的binlog日志功能算是做好了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;4.恢复数据实战&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，建立一个数据库，并且插入一些数据：在MySQL程序中输入以下命令：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; create database AAA;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; use AAA;
Database changed
mysql&lt;/span&gt;&amp;gt; create table BBB(&lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;);
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.04&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt; insert into BBB (&lt;span&gt;id&lt;/span&gt;) values (&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt; insert into BBB (&lt;span&gt;id&lt;/span&gt;) values (&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.01&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt; insert into BBB (&lt;span&gt;id&lt;/span&gt;) values (&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.01&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时，数据库AAA中的数据库表BBB中的内容如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select&lt;/span&gt; *&lt;span&gt; from BBB;
&lt;/span&gt;+------+
| &lt;span&gt;id&lt;/span&gt;   |
+------+
|    &lt;span&gt;1&lt;/span&gt; |
|    &lt;span&gt;2&lt;/span&gt; |
|    &lt;span&gt;3&lt;/span&gt; |
+------+
&lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，使用MySQL的全量备份，备份整个AAA数据库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mysqldump -uroot -p123456 --databases AAA --flush-logs --single-transaction &amp;gt; /home/xu/AAA.sql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，我们再对数据库AAA中的数据库表BBB做一些操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; insert into BBB (&lt;span&gt;id&lt;/span&gt;) values (&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.01&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt; update BBB set &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;5&lt;/span&gt; where &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
Rows matched: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;  Changed: &lt;span&gt;1&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时，数据库AAA中的数据库表BBB的内容如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select&lt;/span&gt; *&lt;span&gt; from BBB;
&lt;/span&gt;+------+
| &lt;span&gt;id&lt;/span&gt;   |
+------+
|    &lt;span&gt;1&lt;/span&gt; |
|    &lt;span&gt;2&lt;/span&gt; |
|    &lt;span&gt;5&lt;/span&gt; |
|    &lt;span&gt;4&lt;/span&gt; |
+------+
&lt;span&gt;4&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着，不小心删掉了数据库AAA：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; drop database AAA;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.03&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时，迅速的查看当前使用的binlog文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; show master status;
&lt;/span&gt;+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; |      &lt;span&gt;818&lt;/span&gt; |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里，查看这个binlog文件的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; show binlog events &lt;span&gt;in&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql-bin.000003&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;+------------------+-----+----------------+-----------+-------------+-----------------------------------------+
| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                    |
+------------------+-----+----------------+-----------+-------------+-----------------------------------------+
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; |   &lt;span&gt;4&lt;/span&gt; | Format_desc    |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;123&lt;/span&gt; | Server ver: &lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;18&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;-log, Binlog ver: &lt;span&gt;4&lt;/span&gt; |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;123&lt;/span&gt; | Previous_gtids |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;154&lt;/span&gt; |                                         |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;154&lt;/span&gt; | Anonymous_Gtid |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;219&lt;/span&gt; | SET @@SESSION.GTID_NEXT= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANONYMOUS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;219&lt;/span&gt; | Query          |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;290&lt;/span&gt; | BEGIN                                   |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;290&lt;/span&gt; | Table_map      |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;335&lt;/span&gt; | table_id: &lt;span&gt;254&lt;/span&gt; (AAA.BBB)                 |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;335&lt;/span&gt; | Write_rows     |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;375&lt;/span&gt; | table_id: &lt;span&gt;254&lt;/span&gt; flags: STMT_END_F         |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;375&lt;/span&gt; | Xid            |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;406&lt;/span&gt; | COMMIT &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; xid=1777 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                   |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;406&lt;/span&gt; | Anonymous_Gtid |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;471&lt;/span&gt; | SET @@SESSION.GTID_NEXT= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANONYMOUS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;471&lt;/span&gt; | Query          |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;542&lt;/span&gt; | BEGIN                                   |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;542&lt;/span&gt; | Table_map      |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;587&lt;/span&gt; | table_id: &lt;span&gt;254&lt;/span&gt; (AAA.BBB)                 |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;587&lt;/span&gt; | Update_rows    |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;633&lt;/span&gt; | table_id: &lt;span&gt;254&lt;/span&gt; flags: STMT_END_F         |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;633&lt;/span&gt; | Xid            |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;664&lt;/span&gt; | COMMIT &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; xid=1778 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;                   |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;664&lt;/span&gt; | Anonymous_Gtid |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;729&lt;/span&gt; | SET @@SESSION.GTID_NEXT= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ANONYMOUS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    |
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; | &lt;span&gt;729&lt;/span&gt; | Query          |         &lt;span&gt;1&lt;/span&gt; |         &lt;span&gt;818&lt;/span&gt; | drop database AAA                       |
+------------------+-----+----------------+-----------+-------------+-----------------------------------------+
&lt;span&gt;14&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从中，我们可以看见，最后一个命令正式删除数据的操作。&lt;/p&gt;
&lt;p&gt;所以，先恢复全量备份的数据库文件AAA.sql, 在从增量备份文件mysql-bin.000003,恢复文件。因为恢复文件过程中，依然要在binlog中记录，所以首先要刷新binlog文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; flush logs;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.02&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; show master status;
&lt;/span&gt;+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.&lt;span&gt;000004&lt;/span&gt; |      &lt;span&gt;154&lt;/span&gt; |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，恢复过程中的记录就不会再记录到mysql-bin.000003中，造成死循环了。并且，在恢复过程中，一定要关闭对数据库AAA的操作。&lt;/p&gt;
&lt;p&gt;首先，手动创建数据库AAA，然后使用恢复全量文件AAA.sql:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; create database AAA;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; use AAA;
Database changed
mysql&lt;/span&gt;&amp;gt; source /home/xu/&lt;span&gt;AAA.sql
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
(…………………………………………………………………………………………)
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时，查询数据库，有如下结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select&lt;/span&gt; *&lt;span&gt; from BBB;
&lt;/span&gt;+------+
| &lt;span&gt;id&lt;/span&gt;   |
+------+
|    &lt;span&gt;1&lt;/span&gt; |
|    &lt;span&gt;2&lt;/span&gt; |
|    &lt;span&gt;3&lt;/span&gt; |
+------+
&lt;span&gt;3&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着，从增量文件mysql-bin.000003中恢复BBB数据库中的其他数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;      恢复语法格式：
      # mysqlbinlog mysql&lt;/span&gt;-bin.0000xx | mysql -u用户名 -&lt;span&gt;p密码 数据库名

        常用选项：
          &lt;/span&gt;--start-position=&lt;span&gt;953&lt;/span&gt;&lt;span&gt;                   起始pos点
          &lt;/span&gt;--stop-position=&lt;span&gt;1437&lt;/span&gt;&lt;span&gt;                   结束pos点
          &lt;/span&gt;--start-datetime=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2013-11-29 13:18:54&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 起始时间点
          &lt;/span&gt;--stop-datetime=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2013-11-29 13:21:53&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  结束时间点
          &lt;/span&gt;--database=&lt;span&gt;zyyshop                     指定只恢复zyyshop数据库(一台主机上往往有多个数据库，只限本地log日志)
            
        不常用选项：    
          &lt;/span&gt;-u --user=&lt;span&gt;name              Connect to the remote server as username.连接到远程主机的用户名
          &lt;/span&gt;-p --password[=&lt;span&gt;name]        Password to connect to remote server.连接到远程主机的密码
          &lt;/span&gt;-h --host=&lt;span&gt;name              Get the binlog from server.从远程主机上获取binlog日志
          &lt;/span&gt;--read-from-remote-server   Read binary logs from a MySQL server.从某个MySQL服务器上读取binlog日志
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，这里恢复命令是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
root@DESKTOP-M1SSCB1:/var/log/mysql# mysqlbinlog --stop-position=&lt;span&gt;729&lt;/span&gt; --database=AAA /var/log/mysql/mysql-bin.&lt;span&gt;000003&lt;/span&gt; | mysql -uroot -p123456 -v AAA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，在恢复的时候，一定要注意--stop-position这个命令，不然，很可能会使得drop命令还被执行。&lt;/p&gt;
&lt;p&gt;再观察数据库，可以看到数据库恢复成功：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select&lt;/span&gt; *&lt;span&gt; from BBB;
&lt;/span&gt;+------+
| &lt;span&gt;id&lt;/span&gt;   |
+------+
|    &lt;span&gt;1&lt;/span&gt; |
|    &lt;span&gt;2&lt;/span&gt; |
|    &lt;span&gt;5&lt;/span&gt; |
|    &lt;span&gt;4&lt;/span&gt; |
+------+
&lt;span&gt;4&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; set (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;5.通过脚本实现定时的备份&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;全量备份的脚本如下：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#!/bin/&lt;span&gt;bash
export LANG&lt;/span&gt;=en_US.UTF-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
BakDir&lt;/span&gt;=/home/xu/mysql/&lt;span&gt;backup
LogFile&lt;/span&gt;=/home/xu/mysql/backup/&lt;span&gt;bak.log
Date&lt;/span&gt;=`&lt;span&gt;date&lt;/span&gt; +%Y%m%d%H%M%&lt;span&gt;S`
Begin&lt;/span&gt;=`&lt;span&gt;date&lt;/span&gt; +&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y年%m月%d日 %H:%M:%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`
cd $BakDir
DumpFile&lt;/span&gt;=&lt;span&gt;$Date.sql
GZDumpFile&lt;/span&gt;=&lt;span&gt;$Date.sql.tgz
#&lt;/span&gt;--&lt;span&gt;databases,指定数据库,所有表格的表结构及其数据
#&lt;/span&gt;--flush-&lt;span&gt;logs，产生新的日志文件，binlog文件，这个在后面的增量备份有讲到过
#&lt;/span&gt;--delete-master-&lt;span&gt;logs，删掉原来的日志文件，binlog文件
#DumpFile是要备份的目标文件
mysqldump &lt;/span&gt;-uroot -p123456 --databases wordpressdb --flush-logs --single-transaction &amp;gt;&lt;span&gt; $DumpFile
#&lt;/span&gt;&lt;span&gt;tar&lt;/span&gt; -&lt;span&gt;czvf $GZDumpFile $DumpFile
#&lt;/span&gt;&lt;span&gt;rm&lt;/span&gt;&lt;span&gt; $DumpFile

#只保留过去四周的数据库内容
count&lt;/span&gt;=$(&lt;span&gt;ls&lt;/span&gt; -l *.sql |&lt;span&gt;wc&lt;/span&gt; -&lt;span&gt;l)
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ $count -ge &lt;span&gt;5&lt;/span&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;
&lt;span&gt;file&lt;/span&gt;=$(&lt;span&gt;ls&lt;/span&gt; -l *.sql |&lt;span&gt;awk&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{print $9}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;|&lt;span&gt;awk&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NR==1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;rm&lt;/span&gt; -f $&lt;span&gt;file&lt;/span&gt;
&lt;span&gt;fi&lt;/span&gt;&lt;span&gt;

 
Last&lt;/span&gt;=`&lt;span&gt;date&lt;/span&gt; +&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y年%m月%d日 %H:%M:%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; 开始:$Begin 结束:$Last $GZDumpFile succ &amp;gt;&amp;gt;&lt;span&gt; $LogFile

#恢复命令：在MySQL命令行里面使用source命令  mysql&lt;/span&gt;&amp;gt; source /home/xu/mysql/backup/&lt;span&gt;20180804104810&lt;/span&gt;.sql
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后，通过crontab来设置定时运行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;vi&lt;/span&gt; /etc/&lt;span&gt;crontab

#每个星期日凌晨3:00执行完全备份脚本
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; * * &lt;span&gt;0&lt;/span&gt; /......../databak.&lt;span&gt;sh&lt;/span&gt; &amp;gt;/dev/&lt;span&gt;null&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使上述定时任务生效：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
crontab /etc/crontab
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Sun, 02 Sep 2018 15:43:00 +0000</pubDate>
<dc:creator>初心不负丶</dc:creator>
<og:description>1.环境 系统是Deepin15.6，数据库的版本号是： 数据库引擎是：InnoDB。如何查看数据库版本和数据库引擎呢？ 终端登录MySQL数据库命令行的时候，就可以看见数据库版本。 登录数据库后，使</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chuxinbufu/p/9576446.html</dc:identifier>
</item>
</channel>
</rss>