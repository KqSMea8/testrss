<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>tornado（一） - roseli</title>
<link>http://www.cnblogs.com/lihao-like/p/tornado.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lihao-like/p/tornado.html</guid>
<description>&lt;p&gt;第一个tornado程序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tornado.web
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tornado.ioloop
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndexHandler(tornado.web.RequestHandler):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;br/&gt;&lt;span&gt; 7&lt;/span&gt; 　　&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;这个是视图函数类&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt; 8&lt;/span&gt; 　　&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(self):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 　　　　&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;和django类似，通过函数名标识请求方式&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 　　　　self.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;''
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; 　　app = tornado.web.Application([(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,IndexHandler)])
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 　　app.listen(9000&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 　　tornado.ioloop.IOLoop.current().start()&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;1-tornadoweb&quot;&gt;1. tornado.web&lt;/h4&gt;
&lt;p&gt;　　tornado的基础web框架模块&lt;/p&gt;
&lt;p&gt;　　RequestHandler&lt;/p&gt;
&lt;p&gt;　　　　封装了请求和响应。&lt;/p&gt;
&lt;p&gt;　　Application&lt;/p&gt;
&lt;p&gt;　　　　核心应用类，类似于flask的app，是和服务器对接的接口，保存了路由信息，&lt;/p&gt;
&lt;p&gt;　　　　listen方法绑定端口创建http服务器实例，但并未监听，与socket的listen不同，&lt;/p&gt;
&lt;h4 id=&quot;2-tornadoioloop&quot;&gt;2. tornado.ioloop&lt;/h4&gt;
&lt;p&gt;　　tornado的核心io循环模块，封装了Linux的epoll和BSD的kqueue，tornado高性能的基石。 以Linux的epoll为例，其原理如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1455744/201808/1455744-20180806154226888-1564537465.png&quot; alt=&quot;&quot; width=&quot;882&quot; height=&quot;563&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　IOLoop.current()&lt;/p&gt;
&lt;p&gt;　　　　返回当前线程的IOLoop实例&lt;/p&gt;
&lt;p&gt;　　 IOLoop.start()&lt;/p&gt;
&lt;p&gt;　　　　启动IOLoop实例的IO循环，同时服务器监听打开&lt;/p&gt;
&lt;h2 id=&quot;总结tornado-web程序编写思路&quot;&gt;总结Tornado Web程序编写思路&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;创建web应用实例对象，第一个初始化参数为路由映射列表。&lt;/li&gt;
&lt;li&gt;定义实现路由映射列表中的handler类。&lt;/li&gt;
&lt;li&gt;创建服务器实例，绑定服务器端口。&lt;/li&gt;
&lt;li&gt;启动当前线程的IOLoop。&lt;/li&gt;
&lt;/ol&gt;
</description>
<pubDate>Mon, 06 Aug 2018 07:47:00 +0000</pubDate>
<dc:creator>roseli</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lihao-like/p/tornado.html</dc:identifier>
</item>
<item>
<title>一次Java解析数独的经历 - soinve</title>
<link>http://www.cnblogs.com/soinve/p/9430606.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/soinve/p/9430606.html</guid>
<description>&lt;p&gt;&lt;span&gt; 三行与三列相交之处有九格，每一单元称为小九宫（Box、Block），简称宫，如图四所示&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 生成随机数独&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　在解开一个数独之前，首先要知道数独是怎么生成的，接下来先随机生成一个9*9的数独。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　生成思路：使用嵌套for循环，给每个格子填数，这个格子中的数必是1-9中的某一个数字，在填第n个格子时，要排除行、列、宫中已经存在的数字，在剩下的数字中随机选一个，如果排除掉行、列、宫中的数字后，已经没有可选数字了，说明这个数独生成错了，while循环重新开始生成，直到生成一个可用的数独。这个地方用到了Set集合及集合中的方法，以下是生成数独的代码。&lt;/span&gt;&lt;/p&gt;&lt;div readability=&quot;113&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.woasis.demo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 数独
 *       1  3  3  4  5  6  7  8  9
 *   1. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *   2. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *   3. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *   4. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *   5. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *   6. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *   7. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *   8. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *   9. [1, 2, 3, 4, 5, 6, 7, 8, 9]
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sudoku {


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (flag) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                start();
                flag &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ArithmeticException e) {
                System.out.println(e);
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 开始生成数独
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; start(){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[][] source = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[9][9&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第i行&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第i行中的第j个数字&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=0; j&amp;lt;9; j++&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第i行目前的数组&lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt;[] row =&lt;span&gt; Arrays.copyOf(source[i], j);
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] column = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[i];
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k=0; k&amp;lt;i; k++&lt;span&gt;){
                    column[k] &lt;/span&gt;=&lt;span&gt; source[k][j];
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所在宫&lt;/span&gt;
                List&amp;lt;Integer&amp;gt; palaceList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取整,获取宫所在数据&lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt; palaceRow = i/3&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; palaceColumn = j/3&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m=0; m&amp;lt;3; m++&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; n=0; n&amp;lt;3; n++&lt;span&gt;){
                        palaceList.add(source[palaceRow&lt;/span&gt;*3+m][palaceColumn*3+&lt;span&gt;n]);
                    }
                }
                source[i][j] &lt;/span&gt;=&lt;span&gt; getNumber(row, column, palaceList.stream().mapToInt(Integer::intValue).toArray());;
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印随机生成的数独数组&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;source.length; i++&lt;span&gt;){
            System.out.println(Arrays.toString(source[i]));
        }
    }


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 从即没有在行也没有在列中，选出一个随机数
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; row
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; column
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getNumber(&lt;span&gt;int&lt;/span&gt;[] row, &lt;span&gt;int&lt;/span&gt;[] column, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] palace ){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组合并，并去重，使用Set集合&lt;/span&gt;
        Set&amp;lt;Integer&amp;gt; mergeSet = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;row.length; i++&lt;span&gt;){
            mergeSet.add(row[i]);
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=0; j&amp;lt;column.length; j++&lt;span&gt;){
            mergeSet.add(column[j]);
        }

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k=0; k&amp;lt;palace.length; k++&lt;span&gt;){
            mergeSet.add(palace[k]);
        }
        Set&lt;/span&gt;&amp;lt;Integer&amp;gt; source  = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m=1; m&amp;lt;10; m++&lt;span&gt;){
            source.add(m);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取差集&lt;/span&gt;
&lt;span&gt;        source.removeAll(mergeSet);
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] merge =&lt;span&gt; source.stream().mapToInt(Integer::intValue).toArray();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;随机返回一个下标&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; merge[getRandomCursor(merge.length)];
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取一个随机下标
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; length
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getRandomCursor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Math.abs(&lt;span&gt;new&lt;/span&gt; Random().nextInt())%&lt;span&gt;length;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;如下图是代码执行后生成的随机数独，行、列、宫中都是1-9个数字，没有重复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 数独的解析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　数独已经可以生成了，现在就对数独进行解析，首先声明一下，接下来的方法可能对一些数独是解不开的，解开数独不是唯一目的，而是在解析数独中对一些Java知识进行回顾和学习。采用的是隐形唯一候选数法，什么是唯一候选数法呢，就是某个数字在某一行列宫格的候选数中只出现一次，就是这个格子只有一个数可选了，那这个格子里就只能填这个数，这就是唯一候选数法，其实也是排除法。参照的这篇文章进行的一次数独解析，&lt;a href=&quot;https://www.cnblogs.com/quanweiru/archive/2012/11/28/2793156.html&quot; target=&quot;_blank&quot;&gt;数独解题方法大全&lt;/a&gt;，可以参考学习一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　3. 排除一次完成后，看剩下的隐形数组中有没有剩下的单个数，如果有则剩下的这个候选数字就是该位置所要填的数字，有的话需要递归一次2步骤；查看行中有没有唯一的单数，如果有递归一次2步骤；查看列中有没有唯一的单数，如果有递归一次2步骤。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　4. 排除以部门隐形数字之后，有一些数字是不好排除的，就是一些对数，对数就是在一个宫两个格子，候选数字都是AB，要么这个格子是A要么另一个格子是B。到这个地方之后不好排除，只能用试探法，假如一个格子是A，那么另一个格子是B，这样去试探，如果试探一次后发现试探的对的，那么就确认这种试探是可行的，如果不对，则数值对换。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　&lt;span&gt;5. 步骤4试探对之后，再从步骤2进行递归，直到获得最终解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;　　其中demo中解析的数独就是&lt;a href=&quot;https://www.cnblogs.com/quanweiru/archive/2012/11/28/2793156.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;数独解题方法大全&lt;/span&gt;中&lt;/a&gt;隐形唯一候选数法中的一个例子。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div readability=&quot;225&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.woasis.demo;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SudokuCrack {
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成候选数字表,9行9列，每个格子有9个数字&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[][][] candi = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[9][9][9&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化候选数字表&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=0; j&amp;lt;9; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;                 candi[i][j] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[]{1,2,3,4,5,6,7,8,9&lt;span&gt;};;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[][] sudo =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;                 {0,0,9,6,0,0,0,3,0&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;                 {0,0,1,7,0,0,0,4,0&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;                 {7,0,0,0,9,0,0,8,0&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;                 {0,7,0,0,8,0,5,0,0&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;                 {1,0,0,0,4,0,0,2,0&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;                 {0,2,0,0,1,0,9,0,0&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;                 {5,0,0,0,0,9,0,0,0&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;                 {6,0,0,0,0,3,0,0,2&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;                 {4,0,0,0,0,0,0,0,1&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isOkSudo(candi, sudo)){
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             System.out.println(&quot;校验是不是一个合法数独：是&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             System.out.println(&quot;校验是不是一个合法数独：不是&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;        crack(candi, sudo);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取隐形数组中两个相等的数&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;         List&amp;lt;CandiInfo&amp;gt; equalCandi =&lt;span&gt; getEqualCandi(candi,sudo);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; 
&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取其中一个进行试探。&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (CandiInfo info : equalCandi){
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取坐标&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;             String[] location = info.location.split(&quot;\\|&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             String[] ALocation = location[0].split(&quot;-&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; aRow = Integer.parseInt(ALocation[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; aColumn = Integer.parseInt(ALocation[1&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             String[] BLocation = location[1].split(&quot;-&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; bRow = Integer.parseInt(BLocation[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; bColumn = Integer.parseInt(BLocation[1&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取数据&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] data =&lt;span&gt; info.nums.stream().mapToInt(Integer::intValue).toArray();
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;             System.out.println(&quot;开始进行试探：data=&quot;+data[0]+&quot;, &quot;+data[1]+&quot; 位置：&quot;+aRow+&quot;-&quot;+aColumn+&quot;, &quot;+bRow+&quot;-&quot;+&lt;span&gt;bColumn);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(isRight(candi, sudo,aRow, aColumn, bRow, bColumn, data[0], data[1&lt;span&gt;])){
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;                 modifySudoAndCandi(candi, sudo, aRow, aColumn, data[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                 modifySudoAndCandi(candi, sudo, bRow, bColumn, data[1&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;                 modifySudoAndCandi(candi, sudo, aRow, aColumn, data[1&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;                 modifySudoAndCandi(candi, sudo, bRow, bColumn, data[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;            crack(candi, sudo);
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; 
&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt;         System.out.println(&quot;解析完成：&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;            System.out.println(Arrays.toString(sudo[i]));
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; 
&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;     * 试探这样的组合是否正确
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; candi
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sudo
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; aRow
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; aColumn
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; bRow
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; bColumn
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; data0
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; data1
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isRight(&lt;span&gt;int&lt;/span&gt;[][][] candi, &lt;span&gt;int&lt;/span&gt;[][] sudo, &lt;span&gt;int&lt;/span&gt; aRow, &lt;span&gt;int&lt;/span&gt; aColumn, &lt;span&gt;int&lt;/span&gt; bRow, &lt;span&gt;int&lt;/span&gt; bColumn, &lt;span&gt;int&lt;/span&gt; data0, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; data1){
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[][][] deepCandiCopy = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[9][9][9&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             deepCandiCopy[i] =&lt;span&gt; candi[i].clone();
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[][] deepSudoCopy = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[9][9&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             deepSudoCopy[i]=&lt;span&gt; sudo[i].clone();
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        modifySudoAndCandi(deepCandiCopy, deepSudoCopy, aRow, aColumn, data0);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;        modifySudoAndCandi(deepCandiCopy, deepSudoCopy, bRow, bColumn, data1);
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        crack(deepCandiCopy, deepSudoCopy);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; isOkSudo(deepCandiCopy,deepSudoCopy);
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;     * 隐藏数法解析数独
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; candi 隐藏数数组
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sudo 要解的数独
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; crack(&lt;span&gt;int&lt;/span&gt;[][][] candi, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[][] sudo){
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;        eliminateCandidateNumbers(candi, sudo);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一轮结束后，查看隐形数组里有没有单个的，如果有继续递归一次&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k=0; k&amp;lt;9; k++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; q=0; q&amp;lt;9; q++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; f =&lt;span&gt; sudo[k][q];
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (f == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt;[] tmp =&lt;span&gt; candi[k][q];
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;                     Set&amp;lt;Integer&amp;gt; s = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; t=0; t&amp;lt;tmp.length; t++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (tmp[t]&amp;gt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;                            s.add(tmp[t]);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明有单一成数据可以用的&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (s.size() == 1&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                         flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;                         modifySudoAndCandi(candi, sudo, k, q, s.stream().mapToInt(Integer::intValue).toArray()[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有确定的单个数，进行递归一次&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag){
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;            crack(candi, sudo);
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查看行有没有唯一数字，有就递归一次&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;         flag =&lt;span&gt; checkRow(candi, sudo);
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag){
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;            crack(candi, sudo);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查看列有没有唯一数字，有就递归一次&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;         flag =&lt;span&gt; checkColumn(candi, sudo);
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag){
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;            crack(candi, sudo);
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; 
&lt;span&gt;147&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;     * 剔除数组中的候选数字,剔除行、列、宫
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; candi
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sudo
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; eliminateCandidateNumbers(&lt;span&gt;int&lt;/span&gt;[][][] candi, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[][] sudo){
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=0; j&amp;lt;9; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; num =&lt;span&gt; sudo[i][j];
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;剔除备选区数字&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (num&amp;gt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;                     candi[i][j] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[]{0,0,0,0,0,0,0,0,0&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m=0; m&amp;lt;9; m++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;                         &lt;span&gt;int&lt;/span&gt;[] r =&lt;span&gt; candi[i][m];
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;                         r[num-1] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;                         &lt;span&gt;int&lt;/span&gt;[] c =&lt;span&gt; candi[m][j];
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;                         c[num-1] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;摒除宫里的唯一性
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取整,获取宫所在数据&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; palaceRow = i/3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; palaceColumn = j/3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m=0; m&amp;lt;3; m++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;                         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; n=0; n&amp;lt;3; n++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;                             &lt;span&gt;int&lt;/span&gt;[] p = candi[palaceRow*3+m][palaceColumn*3+&lt;span&gt;n];
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;                             p[num-1] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; 
&lt;span&gt;180&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;181&lt;/span&gt; &lt;span&gt;     * 修改数独的值并剔除隐形数字
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; candi
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sudo
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; row
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; column
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; v
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;188&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; modifySudoAndCandi(&lt;span&gt;int&lt;/span&gt;[][][] candi, &lt;span&gt;int&lt;/span&gt;[][] sudo, &lt;span&gt;int&lt;/span&gt; row, &lt;span&gt;int&lt;/span&gt; column, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; v){
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改数独的值&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt;         sudo[row][column] =&lt;span&gt; v;
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; 
&lt;span&gt;192&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;剔除备选区数字&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt;         candi[row][column] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[]{0,0,0,0,0,0,0,0,0&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m=0; m&amp;lt;9; m++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] r =&lt;span&gt; candi[row][m];
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;             r[v-1] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] c =&lt;span&gt; candi[m][column];
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;             c[v-1] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;摒除宫里的唯一性
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取整,获取宫所在数据&lt;/span&gt;
&lt;span&gt;202&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; palaceRow = row/3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; palaceColumn = column/3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m=0; m&amp;lt;3; m++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; n=0; n&amp;lt;3; n++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt;[] p = candi[palaceRow*3+m][palaceColumn*3+&lt;span&gt;n];
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt;                 p[v-1] = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; 
&lt;span&gt;212&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;213&lt;/span&gt; &lt;span&gt;     * 查看行中的隐形数组有没有唯一存在的候选值
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; candi
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sudo
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;217&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;218&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; checkRow(&lt;span&gt;int&lt;/span&gt;[][][] candi, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[][] sudo){
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt;             Map&amp;lt;String ,Set&amp;lt;Integer&amp;gt;&amp;gt; candiMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;[] row =&lt;span&gt; sudo[i];
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=0; j&amp;lt;9; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (row[j]==0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt;[] tmp =&lt;span&gt; candi[i][j];
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt;                     Set&amp;lt;Integer&amp;gt; set = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k=0; k&amp;lt;tmp.length; k++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (tmp[k]&amp;gt;0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt; &lt;span&gt;                            set.add(tmp[k]);
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt;                     candiMap.put(String.valueOf(i)+&quot;-&quot;+&lt;span&gt;String.valueOf(j), set);
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (candiMap.size()&amp;gt;0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;                 Set&amp;lt;String&amp;gt; keys =&lt;span&gt; candiMap.keySet();
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt;                 Iterator iterator =&lt;span&gt; keys.iterator();
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()){
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;                     String tKey =&lt;span&gt; (String) iterator.next();
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;要查看的集合&lt;/span&gt;
&lt;span&gt;241&lt;/span&gt;                     Set&amp;lt;Integer&amp;gt; set =&lt;span&gt; deepCopySet(candiMap.get(tKey));
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;深复制&lt;/span&gt;
&lt;span&gt;243&lt;/span&gt;                     Set&amp;lt;String&amp;gt; tmpKeys =&lt;span&gt; candiMap.keySet();
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;                     Iterator tmpKeyIterator =&lt;span&gt;tmpKeys.iterator();
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;                     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (tmpKeyIterator.hasNext()){
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;                         String tmpKey =&lt;span&gt; (String) tmpKeyIterator.next();
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取交集&lt;/span&gt;
&lt;span&gt;248&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;tKey.equals(tmpKey)) {
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt; &lt;span&gt;                            set.removeAll(candiMap.get(tmpKey));
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;交集取完，集合空了,看下一个结合有没有&lt;/span&gt;
&lt;span&gt;253&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (set.size() == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;                         &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;还剩一个唯一值&lt;/span&gt;
&lt;span&gt;257&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (set.size() == 1&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;                             String[] ks = tKey.split(&quot;-&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt;                             flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt;                             modifySudoAndCandi(candi, sudo, Integer.parseInt(ks[0]),Integer.parseInt(ks[1]), set.stream().mapToInt(Integer::intValue).toArray()[0&lt;span&gt;] );
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt; 
&lt;span&gt;269&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;270&lt;/span&gt; &lt;span&gt;     * 查看列中的隐形数组有没有唯一存在的候选值
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; candi
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sudo
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;274&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;275&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; checkColumn(&lt;span&gt;int&lt;/span&gt;[][][] candi, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[][] sudo){
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;277&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt;             Map&amp;lt;String ,Set&amp;lt;Integer&amp;gt;&amp;gt; candiMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;279&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=0; j&amp;lt;9; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (sudo[j][i]==0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt;[] tmp =&lt;span&gt; candi[j][i];
&lt;/span&gt;&lt;span&gt;282&lt;/span&gt;                     Set&amp;lt;Integer&amp;gt; set = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k=0; k&amp;lt;tmp.length; k++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (tmp[k]&amp;gt;0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;285&lt;/span&gt; &lt;span&gt;                            set.add(tmp[k]);
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;287&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt;                     candiMap.put(String.valueOf(i)+&quot;-&quot;+&lt;span&gt;String.valueOf(j), set);
&lt;/span&gt;&lt;span&gt;289&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;290&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (candiMap.size()&amp;gt;0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;292&lt;/span&gt;                 Set&amp;lt;String&amp;gt; keys =&lt;span&gt; candiMap.keySet();
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt;                 Iterator iterator =&lt;span&gt; keys.iterator();
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()){
&lt;/span&gt;&lt;span&gt;295&lt;/span&gt;                     String tKey =&lt;span&gt; (String) iterator.next();
&lt;/span&gt;&lt;span&gt;296&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;要查看的集合&lt;/span&gt;
&lt;span&gt;297&lt;/span&gt;                     Set&amp;lt;Integer&amp;gt; set =&lt;span&gt; deepCopySet(candiMap.get(tKey));
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;深复制&lt;/span&gt;
&lt;span&gt;299&lt;/span&gt;                     Set&amp;lt;String&amp;gt; tmpKeys =&lt;span&gt; candiMap.keySet();
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;                     Iterator tmpKeyIterator =&lt;span&gt;tmpKeys.iterator();
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt;                     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (tmpKeyIterator.hasNext()){
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt;                         String tmpKey =&lt;span&gt; (String) tmpKeyIterator.next();
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取交集&lt;/span&gt;
&lt;span&gt;304&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;tKey.equals(tmpKey)) {
&lt;/span&gt;&lt;span&gt;305&lt;/span&gt; &lt;span&gt;                            set.removeAll(candiMap.get(tmpKey));
&lt;/span&gt;&lt;span&gt;306&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;交集取完，集合空了,看下一个结合有没有&lt;/span&gt;
&lt;span&gt;309&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (set.size() == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt;                         &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;312&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;还剩一个唯一值&lt;/span&gt;
&lt;span&gt;313&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (set.size() == 1&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;314&lt;/span&gt;                             String[] ks = tKey.split(&quot;-&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt;                             flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;316&lt;/span&gt;                             modifySudoAndCandi(candi,sudo, Integer.parseInt(ks[1]),Integer.parseInt(ks[0]),set.stream().mapToInt(Integer::intValue).toArray()[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;318&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;320&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;321&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;322&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;323&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;324&lt;/span&gt; 
&lt;span&gt;325&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;326&lt;/span&gt; &lt;span&gt;     * 获取隐形数字中宫中两个相等的数字
&lt;/span&gt;&lt;span&gt;327&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;328&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;329&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;  List&amp;lt;CandiInfo&amp;gt; getEqualCandi(&lt;span&gt;int&lt;/span&gt;[][][] candi, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[][] sudo){
&lt;/span&gt;&lt;span&gt;330&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到两个相等数字
&lt;/span&gt;&lt;span&gt;331&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历宫&lt;/span&gt;
&lt;span&gt;332&lt;/span&gt;         List&amp;lt;CandiInfo&amp;gt; maps = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;333&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m=0; m&amp;lt;3; m++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; n=0; n&amp;lt;3; n++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;335&lt;/span&gt;                 Map&amp;lt;String, Set&amp;lt;Integer&amp;gt;&amp;gt; palaceMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;336&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;3; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;337&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=0; j&amp;lt;3; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;338&lt;/span&gt;                         &lt;span&gt;int&lt;/span&gt; sudoRow = m*3 +&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt;                         &lt;span&gt;int&lt;/span&gt; sudoColumn = n*3 +&lt;span&gt;j;
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (sudo[sudoRow][sudoColumn] == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;341&lt;/span&gt;                             &lt;span&gt;int&lt;/span&gt;[] tmpX =&lt;span&gt; candi[sudoRow][sudoColumn];
&lt;/span&gt;&lt;span&gt;342&lt;/span&gt;                             Set&amp;lt;Integer&amp;gt; set = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt;                             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k=0; k&amp;lt;tmpX.length; k++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;344&lt;/span&gt;                                 &lt;span&gt;if&lt;/span&gt; (tmpX[k]&amp;gt;0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;345&lt;/span&gt; &lt;span&gt;                                    set.add(tmpX[k]);
&lt;/span&gt;&lt;span&gt;346&lt;/span&gt; &lt;span&gt;                                }
&lt;/span&gt;&lt;span&gt;347&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;348&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (set.size() == 2&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;349&lt;/span&gt;                                 palaceMap.put(String.valueOf(sudoRow) + &quot;-&quot; +&lt;span&gt; String.valueOf(sudoColumn), set);
&lt;/span&gt;&lt;span&gt;350&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;351&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;352&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;353&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;354&lt;/span&gt; 
&lt;span&gt;355&lt;/span&gt;                 Set&amp;lt;String&amp;gt; pSet =&lt;span&gt; palaceMap.keySet();
&lt;/span&gt;&lt;span&gt;356&lt;/span&gt;                 Iterator pIterator =&lt;span&gt; pSet.iterator();
&lt;/span&gt;&lt;span&gt;357&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (pIterator.hasNext()){
&lt;/span&gt;&lt;span&gt;358&lt;/span&gt;                     String key =&lt;span&gt; (String) pIterator.next();
&lt;/span&gt;&lt;span&gt;359&lt;/span&gt;                     Iterator tmpIterator =&lt;span&gt; pSet.iterator();
&lt;/span&gt;&lt;span&gt;360&lt;/span&gt;                     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (tmpIterator.hasNext()){
&lt;/span&gt;&lt;span&gt;361&lt;/span&gt;                         String tmpKey =&lt;span&gt; (String) tmpIterator.next();
&lt;/span&gt;&lt;span&gt;362&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;key.equals(tmpKey)){
&lt;/span&gt;&lt;span&gt;363&lt;/span&gt;                             Set&amp;lt;Integer&amp;gt; tmpIntSet =&lt;span&gt; palaceMap.get(tmpKey);
&lt;/span&gt;&lt;span&gt;364&lt;/span&gt;                             Set&amp;lt;Integer&amp;gt; palaceIntSet =&lt;span&gt; deepCopySet(palaceMap.get(key));
&lt;/span&gt;&lt;span&gt;365&lt;/span&gt; &lt;span&gt;                            palaceIntSet.removeAll(tmpIntSet);
&lt;/span&gt;&lt;span&gt;366&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明两个集合相等&lt;/span&gt;
&lt;span&gt;367&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (palaceIntSet.size() == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;368&lt;/span&gt;                                 CandiInfo candiInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CandiInfo();
&lt;/span&gt;&lt;span&gt;369&lt;/span&gt;                                 candiInfo.location = key+&quot;|&quot;+&lt;span&gt;tmpKey;
&lt;/span&gt;&lt;span&gt;370&lt;/span&gt;                                 candiInfo.nums =&lt;span&gt; palaceMap.get(key);
&lt;/span&gt;&lt;span&gt;371&lt;/span&gt; &lt;span&gt;                                maps.add(candiInfo);
&lt;/span&gt;&lt;span&gt;372&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;373&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;374&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;375&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;376&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;377&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;378&lt;/span&gt;         List&amp;lt;CandiInfo&amp;gt; infos = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;379&lt;/span&gt;         CandiInfo candiInfo = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;380&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (CandiInfo info : maps){
&lt;/span&gt;&lt;span&gt;381&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (candiInfo == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;382&lt;/span&gt;                 candiInfo =&lt;span&gt; info;
&lt;/span&gt;&lt;span&gt;383&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;384&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (candiInfo.nums.equals(info.nums)) {
&lt;/span&gt;&lt;span&gt;385&lt;/span&gt; &lt;span&gt;                    infos.add(info);
&lt;/span&gt;&lt;span&gt;386&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;387&lt;/span&gt;                 candiInfo =&lt;span&gt; info;
&lt;/span&gt;&lt;span&gt;388&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;389&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;390&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; infos;
&lt;/span&gt;&lt;span&gt;391&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;392&lt;/span&gt; 
&lt;span&gt;393&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;394&lt;/span&gt; &lt;span&gt;     * 校验这个数独是不是还满足数独的特点
&lt;/span&gt;&lt;span&gt;395&lt;/span&gt; &lt;span&gt;     * 思路：
&lt;/span&gt;&lt;span&gt;396&lt;/span&gt; &lt;span&gt;     * 1. 校验行和列有没有重复的数字
&lt;/span&gt;&lt;span&gt;397&lt;/span&gt; &lt;span&gt;     * 2. 校验数独是0的格子，对应的隐形数组还有没有值，如果没有候选值，肯定是某一个地方填错了
&lt;/span&gt;&lt;span&gt;398&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; candi  隐形数组
&lt;/span&gt;&lt;span&gt;399&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sudo  数独二维数组
&lt;/span&gt;&lt;span&gt;400&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;401&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;402&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isOkSudo(&lt;span&gt;int&lt;/span&gt;[][][] candi, &lt;span&gt;int&lt;/span&gt;&lt;span&gt;[][] sudo){
&lt;/span&gt;&lt;span&gt;403&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;404&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;9; i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;405&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验行&lt;/span&gt;
&lt;span&gt;406&lt;/span&gt;             Set&amp;lt;Integer&amp;gt; rowSet = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;407&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验列&lt;/span&gt;
&lt;span&gt;408&lt;/span&gt;             Set&amp;lt;Integer&amp;gt; clumnSet = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;409&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j=0; j&amp;lt;9; j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;410&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; rowV =&lt;span&gt; sudo[i][j];
&lt;/span&gt;&lt;span&gt;411&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; cloumV =&lt;span&gt; sudo[j][i];
&lt;/span&gt;&lt;span&gt;412&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (rowV&amp;gt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;413&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;rowSet.add(rowV)) {
&lt;/span&gt;&lt;span&gt;414&lt;/span&gt;                         flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;415&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;416&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;417&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;418&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (cloumV&amp;gt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;419&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;clumnSet.add(cloumV)) {
&lt;/span&gt;&lt;span&gt;420&lt;/span&gt;                         flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;421&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;422&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;423&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;424&lt;/span&gt; 
&lt;span&gt;425&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;426&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;flag){
&lt;/span&gt;&lt;span&gt;427&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;428&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;429&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;430&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验隐形数字是否为空&lt;/span&gt;
&lt;span&gt;431&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; m=0; m&amp;lt;9; m++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;432&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; n=0; n&amp;lt;9; n++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;433&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (sudo[m][n] == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;434&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt;[] s =&lt;span&gt; candi[m][n];
&lt;/span&gt;&lt;span&gt;435&lt;/span&gt;                     Set&amp;lt;Integer&amp;gt; set = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;436&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; p=0; p&amp;lt;s.length; p++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;437&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (s[p]&amp;gt;0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;438&lt;/span&gt; &lt;span&gt;                            set.add(s[p]);
&lt;/span&gt;&lt;span&gt;439&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;440&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;441&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (set.size() == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;442&lt;/span&gt;                         flag =  &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;443&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;444&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;445&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;446&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;447&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;448&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  flag;
&lt;/span&gt;&lt;span&gt;449&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;450&lt;/span&gt; 
&lt;span&gt;451&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;452&lt;/span&gt; &lt;span&gt;     * 深度复制set集合
&lt;/span&gt;&lt;span&gt;453&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; source
&lt;/span&gt;&lt;span&gt;454&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;455&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;456&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Set&amp;lt;Integer&amp;gt; deepCopySet(Set&amp;lt;Integer&amp;gt;&lt;span&gt; source){
&lt;/span&gt;&lt;span&gt;457&lt;/span&gt;         Set&amp;lt;Integer&amp;gt; deepCopy = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;458&lt;/span&gt;         Iterator iterator =&lt;span&gt; source.iterator();
&lt;/span&gt;&lt;span&gt;459&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (iterator.hasNext()){
&lt;/span&gt;&lt;span&gt;460&lt;/span&gt; &lt;span&gt;            deepCopy.add((Integer) iterator.next());
&lt;/span&gt;&lt;span&gt;461&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;462&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; deepCopy;
&lt;/span&gt;&lt;span&gt;463&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;464&lt;/span&gt; 
&lt;span&gt;465&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CandiInfo{
&lt;/span&gt;&lt;span&gt;466&lt;/span&gt; &lt;span&gt;        String location;
&lt;/span&gt;&lt;span&gt;467&lt;/span&gt;         Set&amp;lt;Integer&amp;gt;&lt;span&gt; nums;
&lt;/span&gt;&lt;span&gt;468&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;469&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 5. 经验总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　从有解析数独这个想法，到代码实现，大约经历了3天左右，在这个过程中会想一下怎么去构造解析，以及代码的逻辑，和解题的思路。对其中的收获就是Set集合的用法，数组的深浅复制，值传递引用传递等，以及怎么去构建一个数据结构来表示想要表达的东西。有些东西确实是了解，但是真正用的时候可能觉得自己知道的还不够，知识需要去积累学习，希望通过一个数独的解题思路，来温故一些基础知识。感谢阅读！&lt;/span&gt;&lt;/p&gt;</description>
<pubDate>Mon, 06 Aug 2018 07:45:00 +0000</pubDate>
<dc:creator>soinve</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/soinve/p/9430606.html</dc:identifier>
</item>
<item>
<title>RSA公钥文件解密密文的原理分析 - Angel_Kitty</title>
<link>http://www.cnblogs.com/ECJTUACM-873284962/p/9430579.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ECJTUACM-873284962/p/9430579.html</guid>
<description>&lt;p&gt;　　最近在学习RSA加解密过程中遇到一个这样的难题：假设已知publickey公钥文件和加密后的密文flag，如何对其密文进行解密，转换成明文~~&lt;/p&gt;

&lt;p&gt;　　对于rsa算法的公钥与私钥的产生，我们可以了解到以下产生原理：&lt;/p&gt;
&lt;h2&gt;公钥与私钥的产生&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;随机选择两个不同大质数 $p$ 和 $q$，计算 $N = p \times q$&lt;/li&gt;
&lt;li&gt;根据欧拉函数，求得 $r=\varphi (N)=\varphi (p)\varphi (q)=(p-1)(q-1)$&lt;/li&gt;
&lt;li&gt;选择一个小于 $r$ 的整数 $e$，使 $e$ 和 $r$ 互质。并求得 $e$ 关于 $r$ 的模反元素，命名为 $d$，有 $ed\equiv 1 \pmod r$&lt;/li&gt;
&lt;li&gt;将 $p$ 和 $q$ 的记录销毁&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;此时，$(N,e)$ 是公钥，$(N,d)$ 是私钥。&lt;/p&gt;
&lt;h2&gt;消息加密&lt;/h2&gt;
&lt;p&gt;首先需要将消息 $m$ 以一个双方约定好的格式转化为一个小于 $N$，且与 $N$ 互质的整数 $n$。如果消息太长，可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：&lt;/p&gt;
&lt;p&gt;$$ n^{e}\equiv c\pmod N $$&lt;/p&gt;
&lt;h2&gt;消息解密&lt;/h2&gt;
&lt;p&gt;利用密钥 $d$ 进行解密。&lt;/p&gt;
&lt;p&gt;$$ c^{d}\equiv n\pmod N $$&lt;/p&gt;
&lt;p&gt;我们可以知道，RSA公钥主要有两个信息:模数(modulus)和指数(exponent)，也就是我们所说的N和e。只要有了这两个信息,我们便可以生成公钥，然后使用rsa库对数据进行加密~&lt;/p&gt;
&lt;p&gt;脚本实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; rsa

key &lt;/span&gt;=&lt;span&gt; rsa.PublicKey(modulus, exponent)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时候我们有如下的publickey.pem文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
-----BEGIN PUBLIC KEY-----&lt;span&gt;
MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ&lt;/span&gt;/+5erCQKPGqxsC/&lt;span&gt;bNPXDr
yigb&lt;/span&gt;/+l/vjDdAgMBAAE=
-----END PUBLIC KEY-----
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们需要做的就是从这段字符串中提出模数和指数。&lt;/p&gt;
&lt;p&gt;首先我们得知道pem文件是什么？&lt;/p&gt;
&lt;p&gt;简单来讲，&lt;strong&gt;pem文件这种格式就是用于ASCII(Base64)编码的各种X.509 v3 证书。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件开始由一行&quot;-----BEGIN PUBLIC KEY-----“开始，由&quot;-----END PUBLIC KEY-----&quot;结束&lt;/p&gt;
&lt;p&gt;pem类型的数据除去begin和end之外的内容，要根据base64编码解码后，得到的数据需要进行增加或裁剪特殊字符-、\n、\r、begin信息、end信息等。&lt;/p&gt;
&lt;p&gt;这里有张图片很清楚的解释了这个问题~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201808/1100338-20180806131502065-588726357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;既然我们现在已经知道了pem这种文件格式，并且也知道其中的数据内容，我们该如何对这种文件内容进行解密呢？&lt;/p&gt;
&lt;p&gt;我们可以做以下尝试Base64解码尝试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; base64

pubkey &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr&lt;/span&gt;
yigb/+l/vjDdAgMBAAE=&lt;span&gt;&quot;
&lt;/span&gt;b64_str =&lt;span&gt; base64.b64decode(pubkey)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt; b64_str
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; len(b64_str)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解码以后如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201808/1100338-20180806141948117-2022644143.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很明显，我们解出来一段乱码，我们尝试把这串乱码转换成16进制，这里我们用的是python自带的binascii库进行解码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201808/1100338-20180806142010249-1951902154.png&quot; alt=&quot;&quot; width=&quot;453&quot; height=&quot;81&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现结尾是&quot;\x01\x00\x01&quot;,10001,看多了rsa的公钥,就知道这个数,多半是exponent了。&lt;/p&gt;
&lt;p&gt;再看看解码后的长度为162,我们找到偏移表,发现模数的偏移位置是159，长度是3,加起来正好162~&lt;/p&gt;
&lt;p&gt;那么说明这段字符串就是指数和模数加密过后的结果,甚至比一般的pem文件中的信息还要简单~&lt;/p&gt;
&lt;p&gt;按照这个思路,对照偏移表我们找出指数e和模数N：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; /usr/bin/python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; base64

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; str2key(s):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对字符串解码&lt;/span&gt;
    b_str =&lt;span&gt; base64.b64decode(s)

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; len(b_str) &amp;lt; 162&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False

    hex_str &lt;/span&gt;= &lt;span&gt;''&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 按位转换成16进制&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; b_str:
        h &lt;/span&gt;= hex(ord(x))[2&lt;span&gt;:]
        h &lt;/span&gt;= h.rjust(2, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        hex_str &lt;/span&gt;+=&lt;span&gt; h

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 找到模数和指数的开头结束位置&lt;/span&gt;
    m_start = 29 * 2&lt;span&gt;
    e_start &lt;/span&gt;= 159 * 2&lt;span&gt;
    m_len &lt;/span&gt;= 128 * 2&lt;span&gt;
    e_len &lt;/span&gt;= 3 * 2&lt;span&gt;

    modulus &lt;/span&gt;= hex_str[m_start:m_start +&lt;span&gt; m_len]
    exponent &lt;/span&gt;= hex_str[e_start:e_start +&lt;span&gt; e_len]

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; modulus,exponent

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:

    pubkey &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr&lt;/span&gt;
yigb/+l/vjDdAgMBAAE=&lt;span&gt;&quot;
&lt;/span&gt;    key =&lt;span&gt; str2key(pubkey)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;010001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个即为我们求出来模数N和指数e。&lt;/p&gt;
&lt;p&gt;当然我们也可以用一些比较方便的工具，Kali Linux里面自带了openssl，其他版本的Linux官方也提供了源码安装：&lt;a href=&quot;https://github.com/openssl/openssl&quot; target=&quot;_blank&quot;&gt;https://github.com/openssl/openssl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而在Windows下安装大家可以参考这篇文章：&lt;a href=&quot;https://bbs.csdn.net/topics/392193545?page=1&quot; target=&quot;_blank&quot;&gt;https://bbs.csdn.net/topics/392193545?page=1&lt;/a&gt;，当然我还是不建议大家在Windows下进行操作，安装过程相对麻烦，而且可能安装过程中会出现各种状况~~~&lt;/p&gt;
&lt;p&gt;我们使用如下命令对pubkey.pem找出指数e和模数N：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
openssl rsa -pubin -text -modulus -&lt;span&gt;in&lt;/span&gt; warmup -&lt;span&gt;in&lt;/span&gt; pubkey.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201808/1100338-20180806145441661-1631574705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以得到如下参数：&lt;/p&gt;
&lt;p&gt;e=65537 (0x10001)&lt;/p&gt;
&lt;p&gt;Modulus即为N=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD&lt;/p&gt;
&lt;p&gt;然后我们可以使用yafu对n进行因数分解，得到p、q&lt;/p&gt;
&lt;p&gt;p=275127860351348928173285174381581152299&lt;/p&gt;
&lt;p&gt;q=319576316814478949870590164193048041239&lt;/p&gt;
&lt;p&gt;解码网站在这里：&lt;a href=&quot;https://factordb.com/&quot; target=&quot;_blank&quot;&gt;https://factordb.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201808/1100338-20180806145800603-1913923785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，各个参数已经求得如下，可以编写代码获得私钥，再用私钥解密密文，得到明文信息~&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;p = 275127860351348928173285174381581152299&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;q = 319576316814478949870590164193048041239&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;N = 87924348264132406875276140514499937145050893665602592992418171647042491658461&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;e = 65537&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们可以开始用python写脚本了~&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; gmpy2
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; rsa

p &lt;/span&gt;= 275127860351348928173285174381581152299&lt;span&gt;
q &lt;/span&gt;= 319576316814478949870590164193048041239&lt;span&gt;
N &lt;/span&gt;= 87924348264132406875276140514499937145050893665602592992418171647042491658461&lt;span&gt;
e &lt;/span&gt;= 65537&lt;span&gt;
d &lt;/span&gt;= int(gmpy2.invert((e,p - 1) * (q - 1&lt;span&gt;)))
privatekey &lt;/span&gt;=&lt;span&gt; rsa.PrivateKey(N,e,d,p,q)
s &lt;/span&gt;= open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flag.enc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; rsa.decrypt(s.read().privatekey).decode()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201808/1100338-20180806152543257-1180092424.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然了，我们也可以用之前的公钥对一段信息进行加密操作，具体实现过程如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; rsa
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; base64

message &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Angel_Kitty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
key &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;010001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
modulus &lt;/span&gt;= int(key[0], 16&lt;span&gt;)
exponent &lt;/span&gt;= int(key[1], 16&lt;span&gt;)
rsa_pubkey &lt;/span&gt;=&lt;span&gt; rsa.PublicKey(modulus, exponent)
crypto &lt;/span&gt;=&lt;span&gt; rsa.encrypt(message, rsa_pubkey)
b64str &lt;/span&gt;=&lt;span&gt; base64.b64encode(crypto)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; b64str
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加密结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1100338/201808/1100338-20180806153536454-962833688.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样子我们就得到一个rsa加密,base64编码过的字符串了，我们这个过程主要就是在一串字符串中,对照一个偏移表,提取需要的位置上的数字~~&lt;/p&gt;
&lt;p&gt;本文用到的文件我已经上传到本地，点击下载即可：&lt;a href=&quot;https://files.cnblogs.com/files/ECJTUACM-873284962/RSA%E5%85%AC%E9%92%A5%E6%96%87%E4%BB%B6%E8%A7%A3%E5%AF%86%E5%AF%86%E6%96%87%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%AE%9E%E4%BE%8B.rar&quot; target=&quot;_blank&quot;&gt;https://files.cnblogs.com/files/ECJTUACM-873284962/RSA公钥文件解密密文的原理分析实例.rar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file:///C:/Users/87328/Documents/My%20Knowledge/temp/14c036ea-9dec-4d2d-aac4-81b156269b64/128/index_files/0.3527000912689717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file:///C:/Users/87328/Documents/My%20Knowledge/temp/14c036ea-9dec-4d2d-aac4-81b156269b64/128/index_files/0.3527000912689717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 06 Aug 2018 07:41:00 +0000</pubDate>
<dc:creator>Angel_Kitty</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ECJTUACM-873284962/p/9430579.html</dc:identifier>
</item>
<item>
<title>如何在CentOS上创建Kubernetes集群 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9430536.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9430536.html</guid>
<description>&lt;p&gt;&lt;strong&gt;欢迎大家前往腾讯云+社区，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;2.0212765957447&quot;&gt;
&lt;p&gt;本文由&lt;a href=&quot;https://cloud.tencent.com/developer/user/1221480?fromSource=waitui&quot;&gt;编程男孩&lt;/a&gt; 发表于&lt;a href=&quot;https://cloud.tencent.com/developer/column/1417?fromSource=waitui&quot;&gt;云+社区专栏&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;（常简称为&lt;strong&gt;K8s&lt;/strong&gt;）是用于自动部署、扩展和管理容器化(containerized)应用程序的开源系统。Google设计并捐赠给Linux基金会来使用的。它旨在提供“跨主机集群的自动部署、扩展以及运行应用程序容器的平台”。它支持一系列容器工具, 包括Docker等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/&quot;&gt;Kubeadm&lt;/a&gt;是 Kubernetes 官方推出的部署工具 ，例如API服务器，Controller Manager和Kube DNS，该工具实作类似Docker swarm 一样的部署方式，透过初始化Master 节点来提供给Node快速加入。但是，它的缺点也很明显，它不会创建用户或处理操作系统级依赖关系及其配置的安装。对于这些步骤，可以使用&lt;strong&gt;Ansible&lt;/strong&gt;或&lt;strong&gt;SaltStack&lt;/strong&gt;等配置管理工具。使用这些工具可以更轻松地更改其他集群或重新创建现有集群。&lt;/p&gt;
&lt;p&gt;在本教程中，您将使用Ansible和Kubeadm从头开始设置Kubernetes集群，然后给它部署一个容器化的Nginx程序。&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;strong&gt;目标&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;您的群集将包含以下物理资源：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;一个主节点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;主节点（Kubernetes中的&lt;strong&gt;节点&lt;/strong&gt;指的是服务器）负责管理集群的状态。我们将用它运行&lt;a href=&quot;https://github.com/coreos/etcd&quot;&gt;Etcd&lt;/a&gt;，该服务器目的是将工作负载调度到工作节点的组件之间存储集群数据。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;两个工作节点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;工作节点是运行工作负载（即容器化应用程序和服务）的服务器。一旦工作节点分配了工作负载，工作节点将继续运行您的工作负载，即使计划在调度完成后停止工作也是如此。通过添加工作节点可以增加群集的容量。&lt;/p&gt;
&lt;p&gt;完成本教程后，您将拥有一个可以运行容器化应用程序的集群，前提是集群中的服务器具有足够的CPU和RAM资源供应用程序使用。几乎任何传统的Unix应用程序（包括Web应用程序，数据库，守护程序和命令行工具）都可以进行容器化，并在集群上运行。群集本身将在每个节点上消耗大约300-500MB的内存和10％的CPU。&lt;/p&gt;
&lt;p&gt;设置群集后，您将部署Web服务器Nginx以确保它正确运行。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;strong&gt;准备&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;本地Linux / macOS /BSD计算机上的SSH密钥对。如果您之前没有使用过SSH密钥，同时使用的是腾讯云的服务器的话，请参考&lt;a href=&quot;https://cloud.tencent.com/document/product/213/16691&quot;&gt;创建 SSH 密钥&lt;/a&gt;文档。如果您使用的不是腾讯云的服务器，请自行搜索，本文暂不涉及。本教程的本地计算机是Linux操作系统，请勿使用Windows进行试验。&lt;/li&gt;
&lt;li&gt;运行CentOS 7的三台服务器，内存至少为1GB。没有服务器的同学可以在&lt;a href=&quot;https://cloud.tencent.com/product/cvm&quot;&gt;这里购买&lt;/a&gt;，不过我个人更推荐您使用&lt;strong&gt;免费&lt;/strong&gt;的腾讯云&lt;a href=&quot;https://cloud.tencent.com/developer/labs&quot;&gt;开发者实验室&lt;/a&gt;进行试验，学会安装后在&lt;a href=&quot;https://cloud.tencent.com/product/cvm&quot;&gt;购买服务器&lt;/a&gt;。您应该能够以SSH密钥对的root用户身份SSH到每个服务器。请务必将您的公钥添加到主节点上的centos用户帐户。如果您需要有关向特定用户帐户添加SSH密钥的指导，请参阅&lt;a href=&quot;https://cloud.tencent.com/document/product/213/16691&quot;&gt;密钥绑定/解绑服务器&lt;/a&gt;文档。&lt;/li&gt;
&lt;li&gt;Ansible需要安装在您的本地计算机上。有关安装说明，请按照&lt;a href=&quot;https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-the-control-machine&quot;&gt;Ansible官方安装文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;了解如何从Docker镜像启动容器。如果需要复习，请参阅&lt;a href=&quot;https://cloud.tencent.com/developer/article/1167995&quot;&gt;如何安装使用Docker&lt;/a&gt;的“&lt;strong&gt;第5步 - 运行Docker容器&lt;/strong&gt;” 。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;第1步---设置工作区目录和ansible配置&quot;&gt;&lt;strong&gt;第1步 - 设置工作区目录和Ansible配置&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在本节中，您将在&lt;strong&gt;本地计算机上&lt;/strong&gt;创建一个用作工作区的目录。您还将在本地配置Ansible，以便它可以与远程服务器上的命令进行通信。为此，您将创建一个&lt;code&gt;hosts&lt;/code&gt;文件包，其包含例如服务器的IP地址和每个服务器所属的组等信息。&lt;/p&gt;
&lt;p&gt;在三台服务器中，一台服务器将作为主服务器&lt;code&gt;master_ip&lt;/code&gt;。另外两台服务器则是是工作节点，并拥有IP&lt;code&gt;worker_1_ip&lt;/code&gt;和&lt;code&gt;worker_2_ip&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在本地计算机的主目录中创建一个名为&lt;code&gt;~/kube-cluster/hosts&lt;/code&gt;的目录并进入其中：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mkdir ~/kube-cluster
cd ~/kube-cluster&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该目录将是本教程的工作区，包含所有&lt;code&gt;Ansible&lt;/code&gt;设置。它也将是您运行所有本地命令的目录。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;vi&lt;/code&gt;命令创建一个名为&lt;code&gt;~/kube-cluster/hosts&lt;/code&gt;的文件或用您最喜欢的文本编辑器：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vi ~/kube-cluster/hosts&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;按&lt;code&gt;i&lt;/code&gt;将以下文本插入到文件中，该文件将指定有关群集逻辑结构的信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[masters]
master ansible_host=master_ip ansible_user=root

[workers]
worker1 ansible_host=worker_1_ip ansible_user=root
worker2 ansible_host=worker_2_ip ansible_user=root&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完成后，按，ESC然后输入&lt;code&gt;:wq&lt;/code&gt;将更改写入文件并退出。&lt;/p&gt;
&lt;p&gt;您可能还记得在Ansible中用于指定服务器信息的库存文件，例如IP地址，远程用户和服务器分组，以作为执行命令的单个单元进行目标。&lt;code&gt;~/kube-cluster/hosts&lt;/code&gt;将是您的库存文件，并且您已向其添加了两个Ansible组（&lt;strong&gt;主服务器&lt;/strong&gt;和&lt;strong&gt;工作服务器&lt;/strong&gt;），用于指定集群的逻辑结构。&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;主&lt;/strong&gt;服务器组中，有一个名为“master”的服务器，其中列出了主节点的IP（&lt;code&gt;master_ip&lt;/code&gt;），并指定Ansible应以根用户身份运行远程命令。&lt;/p&gt;
&lt;p&gt;同样，在&lt;strong&gt;workers&lt;/strong&gt;组中，有两个工作服务器（&lt;code&gt;worker_1_ip&lt;/code&gt;和&lt;code&gt;worker_2_ip&lt;/code&gt;），它们也需要指定&lt;code&gt;ansible_user&lt;/code&gt;为root用户。&lt;/p&gt;
&lt;p&gt;在设置服务器清单之后，让我们继续安装操作系统级依赖关系并创建配置设置。&lt;/p&gt;
&lt;h2 id=&quot;第2步---安装kubernetes的依赖项&quot;&gt;&lt;strong&gt;第2步 - 安装Kubernetes的依赖项&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在本节中，您将使用CentOS的yum软件包管理器安装Kubernetes所需的软件包。这些包是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Docker - 容器运行时。这是运行容器的组件。Kubernetes正在积极开发对rkt等其他运行容器服务的支持。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubeadm&lt;/code&gt; - CLI工具，以标准方式安装和配置群集的各个组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubelet&lt;/code&gt; - 在所有节点上运行并处理节点级操作的系统服务/程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;- 通过其API服务器向集群发出命令的CLI工具。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;创建工作空间中指定的文件&lt;code&gt;vi ~/kube-cluster/kube-dependencies.yml&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vi ~/kube-cluster/kube-dependencies.yml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将下面的内容插到文件内：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- hosts: all
  become: yes
  tasks:
   - name: install Docker
     yum:
       name: docker
       state: present
       update_cache: true

   - name: start Docker
     service:
       name: docker
       state: started

   - name: disable SELinux
     command: setenforce 0

   - name: disable SELinux on reboot
     selinux:
       state: disabled

   - name: ensure net.bridge.bridge-nf-call-ip6tables is set to 1
     sysctl:
      name: net.bridge.bridge-nf-call-ip6tables
      value: 1
      state: present

   - name: ensure net.bridge.bridge-nf-call-iptables is set to 1
     sysctl:
      name: net.bridge.bridge-nf-call-iptables
      value: 1
      state: present

   - name: add Kubernetes' YUM repository
     yum_repository:
      name: Kubernetes
      description: Kubernetes YUM repository
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      gpgcheck: yes

   - name: install kubelet
     yum:
        name: kubelet
        state: present
        update_cache: true

   - name: install kubeadm
     yum:
        name: kubeadm
        state: present

   - name: start kubelet
     service:
       name: kubelet
       enabled: yes
       state: started

- hosts: master
  become: yes
  tasks:
   - name: install kubectl
     yum:
        name: kubectl
        state: present&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文件中的的第一部分内容如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;容器运行时，安装Docker。&lt;/li&gt;
&lt;li&gt;启动Docker服务。&lt;/li&gt;
&lt;li&gt;请禁用SELinux，因为Kubernetes尚未完全支持它。&lt;/li&gt;
&lt;li&gt;设置网络所需的一些与netfilter相关的&lt;code&gt;sysctl&lt;/code&gt;值。这将允许Kubernetes设置iptables规则，以便在节点上接收桥接的IPv4和IPv6网络流量。&lt;/li&gt;
&lt;li&gt;将Kubernetes YUM存储库添加到远程服务器的存储库列表中。&lt;/li&gt;
&lt;li&gt;安装&lt;code&gt;kubelet&lt;/code&gt;和&lt;code&gt;kubeadm&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第二部分意思是在主节点上设置一下&lt;code&gt;kubectl&lt;/code&gt;的任务。&lt;/p&gt;
&lt;p&gt;完成后保存并关闭文件。&lt;/p&gt;
&lt;p&gt;接下来，执行&lt;code&gt;playbook&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ansible-playbook -i hosts ~/kube-cluster/kube-dependencies.yml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完成后，您将看到类似于以下内容的输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;PLAY [all] ****

TASK [Gathering Facts] ****
ok: [worker1]
ok: [worker2]
ok: [master]

TASK [install Docker] ****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [disable SELinux] ****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [disable SELinux on reboot] ****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [ensure net.bridge.bridge-nf-call-ip6tables is set to 1] ****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [ensure net.bridge.bridge-nf-call-iptables is set to 1] ****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [start Docker] ****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [add Kubernetes' YUM repository] *****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [install kubelet] *****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [install kubeadm] *****
changed: [master]
changed: [worker1]
changed: [worker2]

TASK [start kubelet] ****
changed: [master]
changed: [worker1]
changed: [worker2]

PLAY [master] *****

TASK [Gathering Facts] *****
ok: [master]

TASK [install kubectl] ******
ok: [master]

PLAY RECAP ****
master                     : ok=9    changed=5    unreachable=0    failed=0   
worker1                    : ok=7    changed=5    unreachable=0    failed=0  
worker2                    : ok=7    changed=5    unreachable=0    failed=0  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行后，Docker，&lt;code&gt;kubeadm&lt;/code&gt;和&lt;code&gt;kubelet&lt;/code&gt;将安装在所有远程服务。&lt;code&gt;kubectl&lt;/code&gt;不是必需组件，仅用于执行集群命令。但是我们建议您还是安装它，因为您将仅从主节点运行&lt;code&gt;kubectl&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;现在安装了所有系统依赖项。让我们设置主节点并初始化集群。&lt;/p&gt;
&lt;h2 id=&quot;第3步---设置主节点&quot;&gt;&lt;strong&gt;第3步 - 设置主节点&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在本节中，您将设置主节点。然而在创建配置之前，我们需要熟悉几个概念，如&lt;strong&gt;Pods&lt;/strong&gt;和&lt;strong&gt;Pod 网络插件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Kubernetes的基本调度单元称为“&lt;strong&gt;pods&lt;/strong&gt;”。它可以把更高级别的抽象内容增加到容器化组件。一个pod一般包含一个或多个容器，这样可以保证它们一直位于主机上，并且可以共享资源。Kubernetes中的每个pod都被分配一个唯一的（在集群内的）IP地址这样就可以允许应用程序使用端口，而不会有冲突的风险。Pod可以定义一个卷，例如本地磁盘目录或网络磁盘，并将其暴露在pod中的一个容器之中。pod可以通过Kubernetes API手动管理，也可以委托给控制器来管理。&lt;/p&gt;
&lt;p&gt;每个pod都有自己的IP地址，一个节点上的pod应该能够使用pod的IP访问另一个节点上的pod。单个节点上的容器可以通过本地接口轻松进行通信。然而，pod之间的通信更复杂，并且需要单独的网络组件，该组件可以透明地将流量从一个节点上的pod传送到另一个节点上的pod。此功能由pod网络插件提供。对于这个群集，建议您将使用&lt;strong&gt;Flannel选项&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在本地计算机上创建一个命名为&lt;code&gt;master.yml&lt;/code&gt;的Ansible playbook ：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vi ~/kube-cluster/master.yml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将以下内容添加到文件中以初始化集群并安装Flannel：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- hosts: master
  become: yes
  tasks:
    - name: initialize the cluster
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 &amp;gt;&amp;gt; cluster_initialized.txt
      args:
        chdir: $HOME
        creates: cluster_initialized.txt

    - name: create .kube directory
      become: yes
      become_user: centos
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/centos/.kube/config
        remote_src: yes
        owner: centos

    - name: install Pod network
      become: yes
      become_user: centos
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml &amp;gt;&amp;gt; pod_network_setup.txt
      args:
        chdir: $HOME
        creates: pod_network_setup.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是上面内容的详解：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一个任务通过运行&lt;code&gt;kubeadm init&lt;/code&gt;初始化集群。传递&lt;code&gt;--pod-network-cidr=10.244.0.0/16&lt;/code&gt;参数指定将从中分配pod IP的私有子网。Flannel默认使用上述子网，我们告诉&lt;code&gt;kubeadm&lt;/code&gt;使用相同的子网。&lt;/li&gt;
&lt;li&gt;第二个任务创建一个&lt;code&gt;.kube&lt;/code&gt;目录在&lt;code&gt;/home/centos&lt;/code&gt;。此目录将保存配置信息，例如连接到群集所需的管理密钥文件以及群集的API地址。&lt;/li&gt;
&lt;li&gt;第三个任务将&lt;code&gt;/etc/kubernetes/admin.conf&lt;/code&gt;生成的文件复制&lt;code&gt;kubeadm init&lt;/code&gt;到&lt;strong&gt;centos&lt;/strong&gt;用户的主目录。这将允许您用&lt;code&gt;kubectl&lt;/code&gt;访问新创建的群集。&lt;/li&gt;
&lt;li&gt;最后一个任务运行&lt;code&gt;kubectl apply&lt;/code&gt;安装&lt;code&gt;Flannel&lt;/code&gt;。&lt;code&gt;kubectl apply -f descriptor.[yml|json]&lt;/code&gt;是告诉&lt;code&gt;kubectl&lt;/code&gt;创建&lt;code&gt;descriptor.[yml|json]&lt;/code&gt;文件中描述的对象的语法。&lt;code&gt;kube-flannel.yml&lt;/code&gt;文件包含&lt;code&gt;Flannel&lt;/code&gt;在群集中设置所需的对象的说明。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;完成后保存并关闭文件。执行配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ansible-playbook -i hosts ~/kube-cluster/master.yml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完成后，您将看到类似于以下内容的输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;PLAY [master] ****

TASK [Gathering Facts] ****
ok: [master]

TASK [initialize the cluster] ****
changed: [master]

TASK [create .kube directory] ****
changed: [master]

TASK [copy admin.conf to user's kube config] *****
changed: [master]

TASK [install Pod network] *****
changed: [master]

PLAY RECAP ****
master                     : ok=5    changed=4    unreachable=0    failed=0  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要检查主节点的状态，请使用以下命令通过SSH连接到该节点：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ssh centos@master_ip&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;进入主节点后，执行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl get nodes&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;您现在将看到以下输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;NAME      STATUS    ROLES     AGE       VERSION
master    Ready     master    1d        v1.10.1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出表明&lt;code&gt;master&lt;/code&gt;节点已完成所有初始化任务，并且处于&lt;code&gt;Ready&lt;/code&gt;可以开始接受工作节点并执行发送到API服务器的任务的状态。您现在可以从本地计算机添加工作程序。&lt;/p&gt;
&lt;h2 id=&quot;第4步---设置工作节点&quot;&gt;&lt;strong&gt;第4步 - 设置工作节点&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;将工作程序添加到集群涉及在每个集群上执行单个命令。此命令包括必要的群集信息，例如主服务器API服务器的IP地址和端口以及安全令牌。只有传入安全令牌的节点才能加入群集。&lt;/p&gt;
&lt;p&gt;f反回您的工作区并创建一个名为workers.yml的配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vi ~/kube-cluster/workers.yml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将以下文本添加到文件中：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- hosts: master
  become: yes
  gather_facts: false
  tasks:
    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: set join command
      set_fact:
        join_command: &quot;{{ join_command_raw.stdout_lines[0] }}&quot;


- hosts: workers
  become: yes
  tasks:
    - name: join cluster
      shell: &quot;{{ hostvars['master'].join_command }} &amp;gt;&amp;gt; node_joined.txt&quot;
      args:
        chdir: $HOME
        creates: node_joined.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是配置的作用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一个配置获取join命令，以便在worker节点上运行。该命令将采用以下格式：&lt;code&gt;kubeadm join --token &amp;lt;token&amp;gt; &amp;lt;master-ip&amp;gt;:&amp;lt;master-port&amp;gt; --discovery-token-ca-cert-hash sha256:&amp;lt;hash&amp;gt;&lt;/code&gt;一旦它获得具有的&lt;strong&gt;令牌&lt;/strong&gt;和&lt;strong&gt;哈希&lt;/strong&gt;值的命令，该任务就将其设置为可用，以便下一个配置能够访问该信息。&lt;/li&gt;
&lt;li&gt;第二个配置有一个任务，它在所有工作节点上运行join命令。完成此任务后，两个工作节点将成为群集的一部分。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;完成后保存并关闭文件。执行配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ansible-playbook -i hosts ~/kube-cluster/workers.yml&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完成后，您将看到类似于以下内容的输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;PLAY [master] ****

TASK [get join command] ****
changed: [master]

TASK [set join command] *****
ok: [master]

PLAY [workers] *****

TASK [Gathering Facts] *****
ok: [worker1]
ok: [worker2]

TASK [join cluster] *****
changed: [worker1]
changed: [worker2]

PLAY RECAP *****
master                     : ok=2    changed=1    unreachable=0    failed=0   
worker1                    : ok=2    changed=1    unreachable=0    failed=0  
worker2                    : ok=2    changed=1    unreachable=0    failed=0  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过添加工作节点，您的群集现在已完全设置并正常运行，工作节点可以随时运行工作负载。让我们验证群集是否按预期工作。&lt;/p&gt;
&lt;h2 id=&quot;第5步---验证群集&quot;&gt;&lt;strong&gt;第5步 - 验证群集&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;集群有时可能在安装过程中失败，因为节点已关闭或主服务器与工作服务器之间的网络连接无法正常工作。让我们验证集群并确保节点正常运行。&lt;/p&gt;
&lt;p&gt;您需要从主节点检查群集的当前状态，以确保节点已准备就绪。如果从主节点断开连接，则可以使用以下命令通过SSH将其重新连接到主节点：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ssh centos@master_ip&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后执行以下命令以获取集群的状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl get nodes&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;您将看到类似于以下内容的输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;NAME      STATUS    ROLES     AGE       VERSION
master    Ready     master    1d        v1.10.1
worker1   Ready     &amp;lt;none&amp;gt;    1d        v1.10.1 
worker2   Ready     &amp;lt;none&amp;gt;    1d        v1.10.1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果所有的节点都具有&lt;code&gt;Ready&lt;/code&gt;的&lt;code&gt;STATUS&lt;/code&gt;（状态），这意味着它们是集群的一部分，并准备运行工作负载。&lt;/p&gt;
&lt;p&gt;但是，如果几个节点拥有&lt;code&gt;NotReady&lt;/code&gt;的&lt;code&gt;STATUS&lt;/code&gt;(状态），它可能意味着工作节点还没有完成自己的设置。等待大约五到十分钟再重新运行&lt;code&gt;kubectl get node&lt;/code&gt;并检查新输出。如果一些节点仍具有&lt;code&gt;NotReady&lt;/code&gt;状态，则需要验证并重新运行前面步骤中的命令。&lt;/p&gt;
&lt;p&gt;现在您的集群已成功验证，让我们在集群上部署一个示例Nginx应用程序。&lt;/p&gt;
&lt;h2 id=&quot;第6步---在群集上运行应用程序&quot;&gt;&lt;strong&gt;第6步 - 在群集上运行应用程序&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;您现在可以将任何容器化应用程序部署到您的群集。让我们使用部署和服务部署Nginx，以了解如何将此应用程序部署到集群。如果更改Docker镜像名称和任何相关标志（例如&lt;code&gt;ports&lt;/code&gt;和&lt;code&gt;volumes&lt;/code&gt;），您也可以使用以下命令用于其他容器化应用程序。&lt;/p&gt;
&lt;p&gt;在主节点内，执行以下命令以创建名为nginx的部署：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl run nginx --image=nginx --port 80&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;部署是一种Kubernetes对象，可确保始终根据已定义的模板运行指定数量的pod，即使pod在群集生命周期内崩溃也是如此。上面的部署将使用Docker镜像库的&lt;em&gt;Nginx Docker Image&lt;/em&gt;创建一个包含一个容器的pod 。&lt;/p&gt;
&lt;p&gt;接下来，运行以下命令以创建名为&lt;code&gt;nginx&lt;/code&gt;将公开公共应用程序的服务。它将通过&lt;em&gt;NodePort实现&lt;/em&gt;，该方案将通过在群集的每个节点上打开的任意端口访问pod：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl expose deploy nginx --port 80 --target-port 80 --type NodePort&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;服务是另一种类型的Kubernetes对象，它向内部和外部客户端公开集群内部服务。它们还能够对多个pod进行负载均衡请求，并且是Kubernetes中不可或缺的组件，经常与其他组件交互。&lt;/p&gt;
&lt;p&gt;运行以下命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl get services&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这将输出类似于以下内容的文本：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;NAME         TYPE        CLUSTER-IP       EXTERNAL-IP           PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1        &amp;lt;none&amp;gt;                443/TCP        1d
nginx        NodePort    10.109.228.209   &amp;lt;none&amp;gt;                80:nginx_port/TCP   40m&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面输出的第三行，您可以检索运行Nginx的端口。Kubernetes将分配一个大于&lt;code&gt;30000&lt;/code&gt;自动的随机端口，同时确保该端口尚未受到其他服务的约束。&lt;/p&gt;
&lt;p&gt;要测试一切正常，请访问或通过本地计算机上的浏览器。您将看到Nginx熟悉的欢迎页面。&lt;code&gt;http://worker_1_ip:nginx_port&lt;/code&gt;或者&lt;code&gt;http://worker_2_ip:nginx_port&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果要删除Nginx应用程序，请先nginx从主节点删除该服务：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl delete service nginx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行以下命令以确保已删除该服务：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl get services&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;您将看到以下输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;NAME         TYPE        CLUSTER-IP       EXTERNAL-IP           PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1        &amp;lt;none&amp;gt;                443/TCP        1d&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后删除部署：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl delete deployment nginx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行以下命令以确认这是否有效：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl get deployments&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;No resources found.
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在本教程中，您已使用Kubeadm和Ansible成功在CentOS 7上设置Kubernetes集群以实现自动化。&lt;/p&gt;
&lt;p&gt;如果您想知道要在集群设置的情况下如何处理集群，那么下一步就是将自己的应用程序和服务部署到集群上。这是一个链接列表，其中包含可以指导您完成此过程的更多信息：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/examples/&quot;&gt;Dockerizing应用程序&lt;/a&gt; - 列出了详细说明如何使用Docker对应用程序进行容器化的示例。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/&quot;&gt;Pod概述&lt;/a&gt; - 详细描述了&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/&quot;&gt;Pod&lt;/a&gt;如何工作以及它们与其他Kubernetes对象的关系。Pods在Kubernetes中无处不在，因此了解它们将有助于您的工作。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&quot;&gt;部署概述&lt;/a&gt; - 这提供了部署的概述。了解部署之类的控制器如何有效地工作，因为它们经常在无状态应用程序中用于扩展和不健康应用程序的自动修复。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;服务概述&lt;/a&gt; - 这包括服务，Kubernetes集群中另一个常用对象。了解服务类型及其选项对于运行无状态和有状态应用程序至关重要。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其他重要概念是&lt;a href=&quot;https://kubernetes.io/docs/concepts/storage/volumes/&quot;&gt;Volumes&lt;/a&gt;，&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot;&gt;Ingresses&lt;/a&gt;和&lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot;&gt;Secrets&lt;/a&gt;，所有这些在部署生产应用程序时都派上用场。Kubernetes提供了许多功能和特性。&lt;a href=&quot;https://kubernetes.io/docs/&quot;&gt;Kubernetes官方文档&lt;/a&gt;是了解概念，查找特定于任务的教程以及查找各种对象的API参考的最佳位置。更多Linux教程请前往&lt;a href=&quot;https://cloud.tencent.com/developer&quot;&gt;腾讯云+社区&lt;/a&gt;学习更多知识。&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;参考文献： 《How To Create a Kubernetes 1.10 Cluster Using Kubeadm on CentOS 7》 《只要用 kubeadm 小朋友都能部署 Kubernetes》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;0.99606299212598&quot;&gt;
&lt;h2 id=&quot;问答&quot;&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/121741?fromSource=waitui&quot;&gt;如何使用Kubernetes？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关阅读&quot;&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1159623?fromSource=waitui&quot;&gt;安全报告 | 2018上半年互联网恶意爬虫分析：从全景视角看爬虫与反爬虫&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1158594?fromSource=waitui&quot;&gt;安全报告 | SSH 暴力破解趋势：从云平台向物联网设备迁移&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1163768?fromSource=waitui&quot;&gt;给你的CVM安装一个面板吧！&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，原文链接：https://cloud.tencent.com/developer/article/1177930?fromSource=waitui&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家前往腾讯云+社区或关注云加社区微信公众号（QcloudCommunity），第一时间获取更多海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;海量技术实践经验，尽在&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot;&gt;云加社区&lt;/a&gt;！&lt;/p&gt;
</description>
<pubDate>Mon, 06 Aug 2018 07:35:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9430536.html</dc:identifier>
</item>
<item>
<title>ldap落地实战：jenkins集成openldap认证 - 运维咖啡吧</title>
<link>http://www.cnblogs.com/37Y37/p/9430272.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/37Y37/p/9430272.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;前几篇分文章分别介绍了openldap的部署管理和维护以及svn、git的接入，今天我们再下一城接入jenkins。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;LDAP系列文章：&lt;/p&gt;

&lt;h2 id=&quot;安装ldap插件&quot;&gt;1. 安装LDAP插件&lt;/h2&gt;
&lt;p&gt;使用ldap认证需要安装LDAP插件，安装插件有两种方法：&lt;/p&gt;
&lt;h3 id=&quot;方法一后台插件管理里直接安装&quot;&gt;方法一：后台插件管理里直接安装&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;优点：简单方便，不需要考虑插件依赖问题&lt;/li&gt;
&lt;li&gt;缺点：因为网络等各种问题安装不成功&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;安装方法：登录Jenkins --&amp;gt; 系统管理 --&amp;gt; 插件管理 --&amp;gt; 可选插件 --&amp;gt; 搜索ldap --&amp;gt; 选中 --&amp;gt; 直接安装 --&amp;gt; 安装完成重启&lt;br/&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap.jenkins.setting06.png&quot; alt=&quot;搜索LDAP插件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因我们已经安装过了LDAP插件，所有这里搜索不到LDAP插件，只有LDAP Email插件&lt;/p&gt;
&lt;p&gt;如果安装失败，网上也有说在插件管理 --&amp;gt; 高级 --&amp;gt; 升级站点里替换URL为&lt;code&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/code&gt;的，但是我替换了之后依然没有成功，最后还是使用方法二安装成功的&lt;/p&gt;
&lt;h3 id=&quot;方法二官网下载安装文件后台上传&quot;&gt;方法二：官网下载安装文件后台上传&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;优点：一定可以安装成功的&lt;/li&gt;
&lt;li&gt;缺点：麻烦，要去官网找插件并解决依赖&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;插件下载地址：&lt;a href=&quot;https://updates.jenkins-ci.org/download/plugins/&quot; class=&quot;uri&quot;&gt;https://updates.jenkins-ci.org/download/plugins/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装方法：官网下载插件 --&amp;gt; 登录Jenkins --&amp;gt; 系统管理 --&amp;gt; 插件管理 --&amp;gt; 高级 --&amp;gt; 上传插件 --&amp;gt; 选择文件 --&amp;gt; 上传 --&amp;gt; 安装完成后重启&lt;br/&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap.jenkins.setting07.png&quot; alt=&quot;后台上传插件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上传插件安装可能会失败，大部分都是提示你当前插件依赖某些插件，只需要下载全部依赖插件，按照顺序上传安装即可，LDAP插件安装完成后，所有依赖的插件如下：&lt;br/&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap.jenkins.setting08.png&quot; alt=&quot;LDAP依赖插件列表&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置ldap认证&quot;&gt;2. 配置LDAP认证&lt;/h2&gt;
&lt;p&gt;登录Jenkins --&amp;gt; 系统管理 --&amp;gt; 全局安全配置&lt;br/&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap.jenkins.setting01.png&quot; alt=&quot;配置LDAP-1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问控制选择“LDAP”，Server输入ldap服务器地址，有其他配置可以点击“Advanced Server Configuration...”&lt;br/&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap.jenkins.setting02.png&quot; alt=&quot;配置LDAP-2&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt;：服务器地址，可以直接填写LDAP服务器的主机名或IP，例如&lt;code&gt;ldap.domain.com&lt;/code&gt;（默认端口389），或者&lt;code&gt;ldap.domain.com:1389&lt;/code&gt;，如果用了SSL，可以填写&lt;code&gt;ldaps://ldap.domain.com&lt;/code&gt;（默认端口636），或者&lt;code&gt;ldaps://ldap.domain.com:1636&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap.jenkins.setting03.png&quot; alt=&quot;配置LDAP-3&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;root DN&lt;/strong&gt;：这里的root DN只是指搜索的根，并非LDAP服务器的root dn。由于LDAP数据库的数据组织结构类似一颗大树，而搜索是递归执行的，理论上，我们如果从子节点（而不是根节点）开始搜索，因为缩小了搜索范围那么就可以获得更高的性能。这里的root DN指的就是这个子节点的DN，当然也可以不填，表示从LDAP的根节点开始搜索&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User search base&lt;/strong&gt;：这个配置也是为了缩小LDAP搜索的范围，例如Jenkins系统只允许ou为Admin下的用户才能登陆，那么你这里可以填写&lt;code&gt;ou=Admin&lt;/code&gt;，这是一个相对的值，相对于上边的root DN，例如你上边的root DN填写的是&lt;code&gt;dc=domain,dc=com&lt;/code&gt;，那么user search base这里填写了&lt;code&gt;ou=Admin&lt;/code&gt;，那么登陆用户去LDAP搜索时就只会搜索&lt;code&gt;ou=Admin,dc=domain,dc=com&lt;/code&gt;下的用户了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User search filter&lt;/strong&gt;：这个配置定义登陆的“用户名”对应LDAP中的哪个字段，如果你想用LDAP中的uid作为用户名来登录，那么这里可以配置为&lt;code&gt;uid={0}&lt;/code&gt;（{0}会自动的替换为用户提交的用户名），如果你想用LDAP中的mail作为用户名来登录，那么这里就需要改为&lt;code&gt;mail={0}&lt;/code&gt;。在测试的时候如果提示你&lt;code&gt;user xxx does not exist&lt;/code&gt;，而你确定密码输入正确时，就要考虑下输入的用户名是不是这里定义的这个值了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group search base&lt;/strong&gt;：参考上边&lt;code&gt;User search base&lt;/code&gt;解释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group search filter&lt;/strong&gt;：这个配置允许你将过滤器限制为所需的objectClass来提高搜索性能，也就是说可以只搜索用户属性中包含某个objectClass的用户，这就要求你对你的LDAP足够了解，一般我们也不配置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group membership&lt;/strong&gt;：没配置，没有详细研究&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager DN&lt;/strong&gt;：这个配置在你的LDAP服务器不允许匿名访问的情况下用来做认证（详细的认证过程参考文章&lt;a href=&quot;https://mp.weixin.qq.com/s/CaPmz-hSev4xaO5F40c27Q&quot;&gt;ldap落地实战：subversion集成ldap认证&lt;/a&gt;中关于LDAP服务器认证过程的讲解），通常DN为&lt;code&gt;cn=admin,dc=domain,dc=com&lt;/code&gt;这样&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager Password&lt;/strong&gt;：上边配置dn的密码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Name LDAP attribute&lt;/strong&gt;：配置用户的显示名称，一般为显示名称就配置为uid，如果你想显示其他字段属性也可以这里配置，例如mail&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email Address LDAP attribute&lt;/strong&gt;：配置用户Email对应的字段属性，一般没有修改过的话都是mail，除非你用其他的字段属性来标识用户邮箱，这里可以配置&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下边还有一些配置如：环境变量Environment Properties、servlet容器代理等，很少用就不多解释了。有一个配置&lt;code&gt;Enable cache&lt;/code&gt;可能会用得到，当你的LDAP数据量很大或者LDAP服务器性能较差时，可以开启缓存，配置缓存条数和过期时间，那么在过期时间内新请求优先查找本地缓存认证，认证通过则不会去LDAP服务器请求，以减轻LDAP服务器的压力&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap.jenkins.setting04.png&quot; alt=&quot;配置LDAP-4&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;配置完成后可以点击下方的“Test LDAP sttings”来测试配置的准确性&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap.jenkins.setting05.png&quot; alt=&quot;配置LDAP-5&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这里输入的用户名就是你上边配置的&lt;code&gt;User search filter&lt;/code&gt;里定义的LDAP中的属性，密码就是LDAP的密码&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;登录&quot;&gt;3. 登录&lt;/h2&gt;
&lt;p&gt;配置完成并测试通过后就可以用LDAP直接登录了，注意：启用了LDAP登录后将无法再用之前的登录方式（例如本地认证）登录&lt;br/&gt;&lt;img src=&quot;http://blz.nos.netease.com/sre/20180806/ldap_jenkins_login.png&quot; alt=&quot;LDAP账号登录jenkins&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/8/6/1650dfc4a28a8e56?w=430&amp;amp;h=476&amp;amp;f=jpeg&amp;amp;s=68454&quot; alt=&quot;扫码关注公众号查看更多原创文章&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 06 Aug 2018 07:04:00 +0000</pubDate>
<dc:creator>运维咖啡吧</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/37Y37/p/9430272.html</dc:identifier>
</item>
<item>
<title>MongoDB安装与配置并实现数据库搭建 - 小周sri的码农</title>
<link>http://www.cnblogs.com/zhoulifeng/p/9429597.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhoulifeng/p/9429597.html</guid>
<description>&lt;h2&gt; &lt;/h2&gt;
&lt;p&gt;&lt;span&gt;数据是每一前端人员必定接触的一样，所有的数据都是后端来编写，如果自己想练习项目，却没有数据，而是写一些假数据，去编写，或者通过json-server搭建一个数据，今天我们就通过MongoDB来搭建一个真正的数据库，从安装到配置到编写，一步到位，也是小编安装配置过程中，所遇到的问题，安装下面的步骤，一步一步的来，相信你一定会成功的&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;什么是MongoDB ?&lt;/h2&gt;
&lt;p&gt;MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。&lt;/p&gt;
&lt;p&gt;在高负载的情况下，添加更多的节点，可以保证服务器性能。&lt;/p&gt;
&lt;p&gt;MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/p&gt;
&lt;p&gt;MongoDB 将数据存储为一个文档，数据结构由键值(key=&amp;gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，&lt;/p&gt;
&lt;p&gt;接下来小编带着大家一步一步的完成安装和配置&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.安装MongoDB&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下载安装包之后直接打开运行，安装包放在自己想放的位置，本次安装包是放在G盘&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806122852952-2136845298.png&quot; alt=&quot;&quot;/&gt;&lt;/h2&gt;
&lt;p&gt;一直执行Next下一步，当进入这个界面的时候，下面的√一定要去掉，不然会安装的特别的慢，如果不去掉，可能要等几个小时以上，小编亲身已经试验过了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806122920948-448583267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 当所有的步骤值完成的时候，找到你的安装的目录，会有以下结果，（小编打马赛克的那个，不用管，不会受影响，只是小编把安装包也放在这了）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806123135591-251489116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.环境变量配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当MongoDB安装完后，需要配置环境变量，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;鼠标右键选择“计算机”“属性”，会弹出一个框，点击 “高级系统设置”，会弹出一个系统属性，找到环境变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806124146256-1472670465.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在找到系统变量里面的path这个，点击编辑 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806124338054-2014042946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;找到自己安装的目录，一定要进入bin这个目录里面，把这个目录拷贝到变量值里面，后面要加一个“；”,然后点击确定，这样环境变量就已经配置好了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806124520577-1800494900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.创建数据库文件的存放位置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在你data的目录下，创建一个db文件   G:\mongodb\data\db&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.启动MongoDB服务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.打开cmd命令行护着用Windows+R键打开，输入cmd&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.进入G盘，也就是你安装的目录，g:\mongodb\bin;(一定要先进入G盘，让cd到你的目录 cd mongodb, 然后在cd bin这个目录下)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 3.输入如下命令启动MongoDB，monogd   --dbpath g:\mongodb\data\db, 这个是你安装的目录  ，然后回车&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806125227166-1752920163.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;即是在第三步创建的数据库存放文件路径下启动。当你点击回车的时候，出现一下界面，说明已经成功了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806125755814-540049192.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.在浏览器输入http://localhost:27017，如果在浏览器中出现下面一段英文说明成功了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806125916984-657763669.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、配置本地windows mongodb 服务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 这样可设置为 开机自启动，可直接手动启动关闭，可通过命令行net start MongoDB 启动。该配置会大大方便。也不要在进入bin的目录下启动了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.先在data文件下创建一个新文件夹log（用来存放日志文件）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806130259852-197888422.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.在mongodb新建配置文件mongo.config,这个是和bin目录同级的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806130411849-1722530819.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.用记事本打开mongo.config  ，并输入下面两个命令，然后保存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;dbpath=G:\mongodb\data\db&lt;/p&gt;
&lt;p&gt;&lt;span&gt;logpath=G:\mongodb\data\log\mongo.log   mongo.log这个会自动生成&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4.用管理员身份打开cmd，左上角会出现管理员三个字，然后一次进入你的bin的目录下G：\mongodb\bin，这个一定要有管理员的身份去打开，否则执行下面命令会一直报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806130918624-783955705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入： mongod -dbpath &quot;g:\mongodb\data\db&quot; -logpath &quot;g:\mongodb\data\log\mongo.log&quot; -install -serviceName &quot;MongoDB&quot;，    MongoDB就是启动的名字&lt;/p&gt;
&lt;p&gt;如果输入次命令出现错误的话，先删除服务sc delete MongoDB，再次输入上个命令就好了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806140800141-395463212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样的话，mongodb服务Windows已经配置好了，我们可以不用进入bin的目录下启动MongoDB了，&lt;/p&gt;
&lt;p&gt;当我们通过输入net start MongoDB启动的时候给我报这个错误，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806141250550-1171452155.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在mongodn&amp;gt;data&amp;gt;db找到这个目录，删除mongodb.lock这个文件，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806141609771-936764530.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;删除这个文件之后，再次运行  net start MongoDB这个命令，服务已经能启动了，说明MongoDB已经配置好了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806141843245-2035587892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以通过在命令窗口输入services.msc这个命令，弹出一个服务窗口，可以看到MongoDB服务启动中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806142350066-627736979.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;六常用命令&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;net start MongoDB   开启服务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;net start MongoDB  关闭服务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;七建立一个数据库表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;完成以上的配置我们就可以自己搭建一个数据库了，只要按照上面的步骤一步一步的来，就会成功，小编也是踩了很多的坑，总结出来的，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;建立数据库的常用命令，这几个命令一定要记住&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在bin的目录下，输入mongo启动，开始写入数据内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;show dbs  显示当前所有的数据，可以看到，当前没有数据内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806143215039-883980295.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;use students  创建数据库名字，  students就是数据库名字&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806143243606-911650070.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;db  显示当前数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806143302270-642129916.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;show collections 显示数据库中所有的集合&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;db.&amp;lt;collection&amp;gt;.insert(doc) 往数据库插入文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;db.students.insert({id:&quot;001&quot;,name:&quot;JIM&quot;,age:&quot;18&quot;});这个就是我们插入的数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806143436135-688441811.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;db.students.find()通过数据这个命令，往students这个数据库查询当前集合中所有的文档，也可以条件查询&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1188378/201808/1188378-20180806143613568-840223395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;以上都是今天所有的内容，从此自己也可以搭建数据，进行一些操作，如果喜欢，可以关注一下，在安装过程中如遇到问题，可以留言，方便与你回答&lt;/p&gt;

</description>
<pubDate>Mon, 06 Aug 2018 06:51:00 +0000</pubDate>
<dc:creator>小周sri的码农</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhoulifeng/p/9429597.html</dc:identifier>
</item>
<item>
<title>编写高质量代码:改善Java程序的151个建议 --[36~51] - 西北野狼</title>
<link>http://www.cnblogs.com/androidsuperman/p/9430044.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/androidsuperman/p/9430044.html</guid>
<description>&lt;h4 id=&quot;编写高质量代码改善java程序的151个建议---3651&quot;&gt;编写高质量代码:改善Java程序的151个建议 --[36~51]&lt;/h4&gt;
&lt;h5 id=&quot;工具类不可实例化&quot;&gt;工具类不可实例化&lt;/h5&gt;
&lt;p&gt;工具类的方法和属性都是静态的，不需要生成实例即可访 问，而且JDK也做了很好的处理，由于不希望被初始化，于是就设置了构造函数private的访问权限，表示出了类本身之外，谁都不能产生一个实例：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class UtilsClazz{
    public UtilsClazz(){
        throw new Error(&quot;Don't instantiate &quot;+getClass());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;避免对象的浅拷贝&quot;&gt;避免对象的浅拷贝&lt;/h5&gt;
&lt;p&gt;super.clone()的拷贝规则：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;基本类型：如果变量是基本类型，则拷贝其值。比如int、float等&lt;/li&gt;
&lt;li&gt;对 象：如果变量是一个实例对象，则拷贝其地址引用，也就是说此时拷贝出的对象与原有对象共享该实例变量，不受访问权限的控制，这在Java中是很疯狂的，因 为它突破了访问权限的定义：一个private修饰的变量，竟然可以被两个不同的实例对象访问，这让java的访问权限体系情何以堪。&lt;/li&gt;
&lt;li&gt;String字符串：这个比较特殊，拷贝的也是一个地址，是个引用，但是在修改时，它会从字符串池(String pool)中重新生成新的字符串，原有的字符串对象保持不变，在此处我们可以认为String是一个基本类型。&lt;/li&gt;
&lt;/ol&gt;&lt;h5 id=&quot;使用序列化对象的拷贝&quot;&gt;使用序列化对象的拷贝&lt;/h5&gt;
&lt;p&gt;要求要拷贝的对象必须实现了Serializable接口。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public final class CloneUtils {
    private CloneUtils() {
        throw new Error(CloneUtils.class + &quot; cannot instance &quot;);
    }

    // 拷贝一个对象
    public static &amp;lt;T extends Serializable&amp;gt; T clone(T obj) {
        // 拷贝产生的对象
        T cloneObj = null;
        try {
            // 读取对象字节数据
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(cloneObj);
            oos.close();
            // 分配内存空间，写入原始对象，生成新对象
            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            // 返回新对象， 并做类型转换
            cloneObj = (T) ois.readObject();
            ois.close();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return cloneObj;

    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过CloneUtils工具进行对象的深拷贝了，用词方法进行对象拷贝时需要注意两点：&lt;/p&gt;
&lt;p&gt;对象的内部属性都是可序列化的：如果有内部属性不可序列化，则会抛出序列化异常，这会让调试者很纳闷，生成一个对象怎么回出现序列化异常呢？从这一点考虑，也需要把CloneUtils工具的异常进行细化处理。&lt;br/&gt;注 意方法和属性的特殊修饰符：比如final，static变量的序列化问题会被引入对象的拷贝中，这点需要特别注意，同时 transient变量（瞬态变量，不进行序列化的变量）也会影响到拷贝的效果。当然，采用序列化拷贝时还有一个更简单的方法，即使用Apache下的 commons工具包中SerializationUtils类，直接使用更加简洁.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package org.apache.commons.lang3;

 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.ObjectStreamClass;
 import java.io.OutputStream;
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;

 public class SerializationUtils
 {
   public SerializationUtils() {}

   //克隆一个序列化对象
   public static &amp;lt;T extends Serializable&amp;gt; T clone(T object)
   {

   }
   //执行串行往返也就是执行序列化或者反序列化
   public static &amp;lt;T extends Serializable&amp;gt; T roundtrip(T msg)
   {
     return (Serializable)deserialize(serialize(msg));
   }
   //讲一个对象序列化并且输出到输出流中
   public static void serialize(Serializable obj, OutputStream outputStream)
   {
     Validate.isTrue(outputStream != null, &quot;The OutputStream must not be null&quot;, new Object[0]);
     try { ObjectOutputStream out = new ObjectOutputStream(outputStream);Throwable localThrowable2 = null;
       try { out.writeObject(obj);
       }
       catch (Throwable localThrowable1)
       {
         localThrowable2 = localThrowable1;throw localThrowable1;
       } finally {
         if (out != null) if (localThrowable2 != null) try { out.close(); } catch (Throwable x2) { localThrowable2.addSuppressed(x2); } else out.close();
       } } catch (IOException ex) { throw new SerializationException(ex);
     }
   }
   //将一个对象序列化并返回字节数组
   public static byte[] serialize(Serializable obj)
   {
     ByteArrayOutputStream baos = new ByteArrayOutputStream(512);
     serialize(obj, baos);
     return baos.toByteArray();
   }
   //讲一个输入流反序列化成一个对象
   public static &amp;lt;T&amp;gt; T deserialize(InputStream inputStream)
   {
   }
   //将一个字节数组反序列化成一个对象
   public static &amp;lt;T&amp;gt; T deserialize(byte[] objectData)
   {
     Validate.isTrue(objectData != null, &quot;The byte[] must not be null&quot;, new Object[0]);
     return deserialize(new ByteArrayInputStream(objectData));
   }
   static class ClassLoaderAwareObjectInputStream
     extends ObjectInputStream
   {
     private static final Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; primitiveTypes = new HashMap();
     private final ClassLoader classLoader;

     static {
       primitiveTypes.put(&quot;byte&quot;, Byte.TYPE);
       primitiveTypes.put(&quot;short&quot;, Short.TYPE);
       primitiveTypes.put(&quot;int&quot;, Integer.TYPE);
       primitiveTypes.put(&quot;long&quot;, Long.TYPE);
       primitiveTypes.put(&quot;float&quot;, Float.TYPE);
       primitiveTypes.put(&quot;double&quot;, Double.TYPE);
       primitiveTypes.put(&quot;boolean&quot;, Boolean.TYPE);
       primitiveTypes.put(&quot;char&quot;, Character.TYPE);
       primitiveTypes.put(&quot;void&quot;, Void.TYPE);
     }

     ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader)
       throws IOException
     {
       super();
       this.classLoader = classLoader;
     }

     protected Class&amp;lt;?&amp;gt; resolveClass(ObjectStreamClass desc)
       throws IOException, ClassNotFoundException
     {
       String name = desc.getName();
       try {
         return Class.forName(name, false, this.classLoader);
       } catch (ClassNotFoundException ex) {
         try {
           return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
         } catch (ClassNotFoundException cnfe) {
           Class&amp;lt;?&amp;gt; cls = (Class)primitiveTypes.get(name);
           if (cls != null) {
             return cls;
           }
           throw cnfe;
         }
       }
     }
   }
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;覆写equals方法必须覆写hashcode方法&quot;&gt;覆写equals方法必须覆写hashCode方法&lt;/h5&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class Person{

   @Override
    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }   

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中HashCodeBuilder是org.apache.commons.lang.builder包下的一个哈希码生成工具;&lt;br/&gt;org.apache.commons.lang.builder包下相关资料参考学习：&lt;br/&gt;http://www.blogjava.net/19851985lili/articles/95448.html&lt;/p&gt;
&lt;h5 id=&quot;推荐覆写tostring方法tostringbuilder或者自己重写tostring&quot;&gt;推荐覆写toString方法(ToStringBuilder或者自己重写toString())&lt;/h5&gt;
&lt;h5 id=&quot;使用package-info类为包服务&quot;&gt;使用package-info类为包服务&lt;/h5&gt;
&lt;ol&gt;&lt;li&gt;声明友好类和包内访问常量：这个比较简单，而且很实用，比如一个包中有很多内部访问的类或常量，就可以统一放到package-info类中，这样很方便，便于集中管理，可以减少友好类到处游走的情况;&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class PkgClazz {
        public void test() {
        }
    }
    
    class PkgConstant {
        static final String PACKAGE_CONST = &quot;ABC&quot;;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;为在包上提供注解提供便利：比如我们要写一个注解(Annotation)，查看一下包下的对象，只要把注解标注到package-info文件中即可，而且在很多开源项目中也采用了此方法，比如struts2的@namespace、hibernate的@FilterDef等。&lt;/li&gt;
&lt;li&gt;提供包的整体注释说明：如果是分包开发，也就是说一个包实现了一个业务逻辑或功能点或模块或组件，则该包需要一个很好的说明文档，说明这个包是做什么用的，版本变迁历史，与其他包的逻辑关系等，package-info文件的作用在此就发挥出来了，这些都可以直接定义到此文件中，通过javadoc生成文档时，会吧这些说明作为包文档的首页，让读者更容易对该包有一个整体的认识。当然在这点上它与package.html的作用是相同的，不过package-info可以在代码中维护文档的完整性，并且可以实现代码与文档的同步更新。&lt;/li&gt;
&lt;/ol&gt;&lt;h5 id=&quot;不要主动进行垃圾回收&quot;&gt;不要主动进行垃圾回收&lt;/h5&gt;
</description>
<pubDate>Mon, 06 Aug 2018 06:29:00 +0000</pubDate>
<dc:creator>西北野狼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/androidsuperman/p/9430044.html</dc:identifier>
</item>
<item>
<title>SpringBoot + SwaggerUI - 曾将</title>
<link>http://www.cnblogs.com/GH0522/p/9430033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GH0522/p/9430033.html</guid>
<description>&lt;p&gt;后台写接口，由于要提供接口文档给前台使用，所有研究了一下swagger,看到网上有篇文章写得不错，就直接拿过来了。&lt;/p&gt;
&lt;p&gt;swagger用于定义API文档。&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;前后端分离开发&lt;/li&gt;
&lt;li&gt;API文档非常明确&lt;/li&gt;
&lt;li&gt;测试的时候不需要再使用URL输入浏览器的方式来访问Controller&lt;/li&gt;
&lt;li&gt;传统的输入URL的测试方式对于post请求的传参比较麻烦（当然，可以使用postman这样的浏览器插件）&lt;/li&gt;
&lt;li&gt;spring-boot与swagger的集比较成简单&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;1、项目结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和上一节一样，没有改变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、pom.xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;引入了两个jar。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_889353&quot; class=&quot;syntaxhighlighter java&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;code class=&quot;java value&quot;&gt;2.2&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;.&lt;/code&gt;&lt;code class=&quot;java value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;/version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;code class=&quot;java value&quot;&gt;2.2&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;.&lt;/code&gt;&lt;code class=&quot;java value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;/version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java plain&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、Application.java&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_131150&quot; class=&quot;syntaxhighlighter java&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;24&quot;&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;package&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;com.xxx.firstboot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;org.springframework.boot.SpringApplication;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;springfox.documentation.swagger2.annotations.EnableSwagger2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java color1&quot;&gt;@SpringBootApplication&lt;/code&gt;        &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java color1&quot;&gt;@EnableSwagger2&lt;/code&gt;             &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;public&lt;/code&gt; &lt;code class=&quot;java keyword&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;Application {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java keyword&quot;&gt;public&lt;/code&gt; &lt;code class=&quot;java keyword&quot;&gt;static&lt;/code&gt; &lt;code class=&quot;java keyword&quot;&gt;void&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;main(String[] args) {&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;SpringApplication.run(Application.&lt;/code&gt;&lt;code class=&quot;java keyword&quot;&gt;class&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;, args);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;引入了一个注解&lt;span&gt;@EnableSwagger2&lt;span&gt;4、UserController.java&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_719090&quot; class=&quot;syntaxhighlighter java&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;12.5&quot;&gt;&lt;tr readability=&quot;25&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;p&gt;22&lt;/p&gt;
&lt;p&gt;23&lt;/p&gt;
&lt;p&gt;24&lt;/p&gt;
&lt;p&gt;25&lt;/p&gt;
&lt;p&gt;26&lt;/p&gt;
&lt;p&gt;27&lt;/p&gt;
&lt;p&gt;28&lt;/p&gt;
&lt;p&gt;29&lt;/p&gt;
&lt;p&gt;30&lt;/p&gt;
&lt;p&gt;31&lt;/p&gt;
&lt;p&gt;32&lt;/p&gt;
&lt;p&gt;33&lt;/p&gt;
&lt;p&gt;34&lt;/p&gt;
&lt;p&gt;35&lt;/p&gt;
&lt;p&gt;36&lt;/p&gt;
&lt;p&gt;37&lt;/p&gt;
&lt;p&gt;38&lt;/p&gt;
&lt;p&gt;39&lt;/p&gt;
&lt;p&gt;40&lt;/p&gt;
&lt;p&gt;41&lt;/p&gt;
&lt;p&gt;42&lt;/p&gt;
&lt;p&gt;43&lt;/p&gt;
&lt;p&gt;44&lt;/p&gt;
&lt;p&gt;45&lt;/p&gt;
&lt;p&gt;46&lt;/p&gt;
&lt;p&gt;47&lt;/p&gt;
&lt;p&gt;48&lt;/p&gt;
&lt;p&gt;49&lt;/p&gt;
&lt;p&gt;50&lt;/p&gt;
&lt;p&gt;51&lt;/p&gt;
&lt;p&gt;52&lt;/p&gt;
&lt;p&gt;53&lt;/p&gt;
&lt;p&gt;54&lt;/p&gt;
&lt;p&gt;55&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;40&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;79&quot;&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;package&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;com.xxx.firstboot.web;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;org.springframework.beans.factory.annotation.Autowired;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;org.springframework.web.bind.annotation.RequestHeader;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;org.springframework.web.bind.annotation.RequestMapping;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;org.springframework.web.bind.annotation.RequestMethod;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;org.springframework.web.bind.annotation.RequestParam;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;org.springframework.web.bind.annotation.RestController;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;com.xxx.firstboot.domain.User;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;com.xxx.firstboot.service.UserService;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;io.swagger.annotations.Api;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;io.swagger.annotations.ApiImplicitParam;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;io.swagger.annotations.ApiImplicitParams;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;io.swagger.annotations.ApiOperation;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;io.swagger.annotations.ApiResponse;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;io.swagger.annotations.ApiResponses;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java color1&quot;&gt;@RestController&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java color1&quot;&gt;@RequestMapping&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;/user&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java color1&quot;&gt;@Api&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;userController相关api&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java keyword&quot;&gt;public&lt;/code&gt; &lt;code class=&quot;java keyword&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;UserController {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@Autowired&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java keyword&quot;&gt;private&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;UserService userService;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt; &lt;/p&gt;



&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@ApiOperation&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;获取用户信息&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@ApiImplicitParams&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;({&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@ApiImplicitParam&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(paramType=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;header&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,name=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;username&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,dataType=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;String&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,required=&lt;/code&gt;&lt;code class=&quot;java keyword&quot;&gt;true&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,value=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;用户的姓名&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,defaultValue=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;zhaojigang&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@ApiImplicitParam&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(paramType=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;query&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,name=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;password&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,dataType=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;String&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,required=&lt;/code&gt;&lt;code class=&quot;java keyword&quot;&gt;true&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,value=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;用户的密码&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,defaultValue=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;wangna&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@ApiResponses&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;({&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@ApiResponse&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(code=&lt;/code&gt;&lt;code class=&quot;java value&quot;&gt;400&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,message=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;请求参数没填好&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@ApiResponse&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(code=&lt;/code&gt;&lt;code class=&quot;java value&quot;&gt;404&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,message=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;请求路径没有或页面跳转路径不对&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@RequestMapping&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(value=&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;/getUser&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;,method=RequestMethod.GET)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java keyword&quot;&gt;public&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;User getUser(&lt;/code&gt;&lt;code class=&quot;java color1&quot;&gt;@RequestHeader&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;username&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;) String username,&lt;/code&gt; &lt;code class=&quot;java color1&quot;&gt;@RequestParam&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;java string&quot;&gt;&quot;password&quot;&lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;) String password) {&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;java keyword&quot;&gt;return&lt;/code&gt; &lt;code class=&quot;java plain&quot;&gt;userService.getUser(username,password);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;java plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt; &lt;/p&gt;









&lt;p&gt;&lt;code class=&quot;java spaces&quot;&gt;    &lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;java plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;@Api：用在类上，说明该类的作用&lt;/li&gt;
&lt;li&gt;@ApiOperation：用在方法上，说明方法的作用&lt;/li&gt;
&lt;li&gt;@ApiImplicitParams：用在方法上包含一组参数说明&lt;/li&gt;
&lt;li&gt;@ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面
&lt;ul&gt;&lt;li&gt;paramType：参数放在哪个地方
&lt;ul&gt;&lt;li&gt;header--&amp;gt;请求参数的获取：@RequestHeader&lt;/li&gt;
&lt;li&gt;query--&amp;gt;请求参数的获取：@RequestParam&lt;/li&gt;
&lt;li&gt;path（用于restful接口）--&amp;gt;请求参数的获取：@PathVariable&lt;/li&gt;
&lt;li&gt;body（不常用）&lt;/li&gt;
&lt;li&gt;form（不常用）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;name：参数名&lt;/li&gt;
&lt;li&gt;dataType：参数类型&lt;/li&gt;
&lt;li&gt;required：参数是否必须传&lt;/li&gt;
&lt;li&gt;value：参数的意思&lt;/li&gt;
&lt;li&gt;defaultValue：参数的默认值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;@ApiResponses：用于表示一组响应&lt;/li&gt;
&lt;li&gt;@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息
&lt;ul&gt;&lt;li&gt;code：数字，例如400&lt;/li&gt;
&lt;li&gt;message：信息，例如&quot;请求参数没填好&quot;&lt;/li&gt;
&lt;li&gt;response：抛出异常的类&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;@ApiModel：描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候）
&lt;ul&gt;&lt;li&gt;@ApiModelProperty：描述一个model的属性&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上这些就是最常用的几个注解了。&lt;/p&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ApiImplicitParam这个注解不只是注解，还会影响运行期的程序，例子如下：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2015.cnblogs.com/blog/866881/201604/866881-20160405160238047-1725111637.png&quot; alt=&quot;&quot; width=&quot;671&quot; height=&quot;160&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果ApiImplicitParam中的phone的paramType是query的话，是无法注入到rest路径中的，而且如果是path的话，是不需要配置ApiImplicitParam的，即使配置了，其中的value=&quot;手机号&quot;也不会在swagger-ui展示出来。&lt;/p&gt;

&lt;p&gt;具体其他的注解，查看：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-core/wiki/Annotations#apimodel&quot; target=&quot;_blank&quot;&gt;https://github.com/swagger-api/swagger-core/wiki/Annotations#apimodel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;启动服务，浏览器输入&quot;http://localhost:8080/swagger-ui.html&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/866881/201604/866881-20160402194015223-1123677403.png&quot; alt=&quot;&quot; width=&quot;744&quot; height=&quot;705&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最上边一个红框：@Api&lt;/p&gt;
&lt;p&gt;GET红框：method=RequestMethod.&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;右边红框：@ApiOperation&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;parameter红框：@ApiImplicitParams系列注解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;response messages红框：@ApiResponses系列注解&lt;/p&gt;
&lt;p&gt;输入参数后，点击&quot;try it out!&quot;，查看响应内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/866881/201604/866881-20160402194351629-832756751.png&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;
&lt;p&gt;转载----https://www.cnblogs.com/gavin-liu/p/6491545.html&lt;/p&gt;
</description>
<pubDate>Mon, 06 Aug 2018 06:28:00 +0000</pubDate>
<dc:creator>曾将</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GH0522/p/9430033.html</dc:identifier>
</item>
<item>
<title>.NET Core TDD 前传: 编写易于测试的代码 -- 单一职责 - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/9429557.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/9429557.html</guid>
<description>&lt;p&gt;第1篇: 讲述了&lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9365955.html&quot; target=&quot;_blank&quot;&gt;如何创造&quot;缝&quot;&lt;/a&gt;.  &quot;缝&quot;(seam)是需要知道的概念.&lt;/p&gt;
&lt;p&gt;第2篇, &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9375655.html&quot; target=&quot;_blank&quot;&gt;避免在构建对象时写出不易测试的代码&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;第3篇, &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9389176.html&quot; target=&quot;_blank&quot;&gt;依赖项和迪米特法则&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;第4篇, &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9399563.html&quot; target=&quot;_blank&quot;&gt;全局状态引起的问题&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本文是第5篇, 也是最后一篇, 介绍的是单一职责&lt;/p&gt;


&lt;p&gt;例子, 某软件公司, 原有项目开发, 测试, 售前, 售后, 财务等员工. 后来由于公司没钱, 裁掉了测试, 让开发兼职; 过了段时间, 又裁掉了需求和售后, 还是由你这个开发来兼职; 再过了段时间, 又裁掉了财务和售前, 还是由你来兼职.&lt;/p&gt;
&lt;p&gt;某天上班之后, 你刚想写代码, 就接到了客户来电, 说键盘不好用, 让你去给调试一下. 花了1个小时从客户那里调试回来又刚想写点代码, 某客户说发票没给, 你又去快递发票. 回来之后又想写代码, 又有客户来电话咨询你公司的XXX管理系统, 经过半个小时的讲解, 客户没兴趣. 这时已经到了中午, 你却发现你的本职工作一点都做.&lt;/p&gt;
&lt;p&gt;在现实世界中, 给某个员工赋与很多冲突的角色或职责是很不明智的.&lt;/p&gt;
&lt;p&gt;在软件开发里也是这样的, 在为一个类赋予太多的职责会引出很多维护和测试的问题.&lt;/p&gt;
&lt;h2&gt;单一职责&lt;/h2&gt;
&lt;p&gt;单一职责是面向对象软件设计的准则之一, 它说的是: &quot;&lt;span&gt;&lt;strong&gt;一个类只能因为一个原因去改变&lt;/strong&gt;&lt;/span&gt;&quot;.&lt;/p&gt;
&lt;p&gt;这就是说我们应该增加 因为相同原因而做出改变的东西 的内聚性, 而降低 由于不同原因而做出改变的东西 的耦合性.&lt;/p&gt;
&lt;p&gt;这句话通常被描述为: &quot;&lt;strong&gt;一个类或一个方法只应该做一件事情, 并且要把它做好&lt;/strong&gt;&quot;.&lt;/p&gt;

&lt;p&gt;如果一个类有了太多的职责, 那么职责间的交互就会埋藏于类里, 这样做就很难一次修改一个职责. 对于测试来说, 这些交互之间也没有明显的&quot;缝隙&quot;.&lt;/p&gt;
&lt;p&gt;依赖项的构建工作并不是目标类本身的职责, 这项工作应该和类本身的职责分开. 所以我们会使用依赖注入配置好的对象. 我们应该对类进行抽取, 让其成为单一职责的类.&lt;/p&gt;


&lt;p&gt;如果一个类有多个职责, 那么在测试上它会有以下问题:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果一个类/方法有太多的功能, 那么针对它的测试就会特别多, 很容易让人难于理解也很难维护.&lt;/li&gt;
&lt;li&gt;测试的设置也会更加的麻烦. &lt;/li&gt;
&lt;li&gt;由于有多个原因去修改该类, 那么它的测试类/方法就会修改的更加频繁.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;什么样的类/方法会违反单一职责呢?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果你在描述该类功能的时候用到了&quot;和&quot;, &quot;或&quot;, &quot;还&quot;, &quot;并且&quot;等词.&lt;/li&gt;
&lt;li&gt;类或者方法的代码很多.&lt;/li&gt;
&lt;li&gt;注入了太多的依赖项.&lt;/li&gt;
&lt;li&gt;一个类改变的太频繁了也可能意味着这个类的职责可能不止一个.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果一个类有很多职责, 那么可以这样做:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;识别出类里面各个独立的职责.&lt;/li&gt;
&lt;li&gt;给每个职责贴上标签.&lt;/li&gt;
&lt;li&gt;解耦, 把其它功能抽取到单独的类, 最后保证每个类都是单一职责.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举一个很简单的典型例子:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201808/986268-20180806135034618-496499835.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这个类, 有4个依赖项, 不算特别多, 但是也不少. 它的名字在这里就是它的描述, 里面包含了&quot;或&quot;的意思. 在它的方法参数里, 有一个标识, 像这样会改变方法的高级行为的标识, 通常就意味着该方法会有不止一个职责. 而方法体里面, 我们可以看到它确实有两个职责, 分别是发送邮件和打电话给客户.&lt;/p&gt;

&lt;h2&gt;优化后&lt;/h2&gt;
&lt;p&gt;经过识别, 抽取后, 该类应该分成下面两个类:&lt;/p&gt;
&lt;p&gt;EmailCommand:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201808/986268-20180806135104922-889209428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;CallCommand:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201808/986268-20180806135148087-1407339726.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这个系列的帖子就到这了.&lt;/p&gt;
&lt;p&gt;下面开始介绍TDD.&lt;/p&gt;

</description>
<pubDate>Mon, 06 Aug 2018 06:03:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/9429557.html</dc:identifier>
</item>
<item>
<title>nginx代理天地图做缓存解决跨域问题 - zhang90030</title>
<link>http://www.cnblogs.com/zhang90030/p/9429649.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhang90030/p/9429649.html</guid>
<description>&lt;p&gt;作为一个GISer开发者，天地图是经常在项目中以底图的形式出现，其加载地址如：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;天地图矢量：http://t{0-6}.tianditu.com/DataServer?T=vec_w&amp;amp;x={x}&amp;amp;y={y}&amp;amp;l={z}&lt;/li&gt;
&lt;li&gt;天地图影像：http://t{0-6}.tianditu.com/DataServer?T=img_w&amp;amp;x={x}&amp;amp;y={y}&amp;amp;l={z}&lt;/li&gt;
&lt;li&gt;天地图地形：http://t{0-6}.tianditu.com/DataServer?T=ter_w&amp;amp;x={x}&amp;amp;y={y}&amp;amp;l={z}&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其中t{0-6}是天地图提供的7个服务器名称t0,t1,t2....&lt;/p&gt;
&lt;p&gt;下面是我以openlayers加载天地图过程中遇到跨域问题&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
// 采用openlayers加载天地图
&lt;span&gt;var&lt;/span&gt; layer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ol.layer.Tile({
    source: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ol.source.XYZ({
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; crossOrigin: 'Anonymous', // 是否请求跨域操作&lt;/span&gt;
        url: url &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 天地图地址&lt;/span&gt;
&lt;span&gt;    })
});                &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;如果没有用到crossOrigin属性就不会产生跨域问题，一般这个参数也不会设置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个参数使用场景如下官网所述：&lt;/p&gt;
&lt;p&gt;The crossOrigin attribute for loaded images. Note that you must provide a crossOrigin value if you are using the WebGL renderer or if you want to access pixel data with the Canvas renderer. See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.&lt;/p&gt;
&lt;p&gt;查阅MDN文档（https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_settings_attributes），可以发现crossOrigin有两个取值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/379004/201808/379004-20180806125515187-165851872.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在开发过程中，往往需要本地运行开发版，服务器运行生产版。当两个版本在同一个浏览器中访问时，设置了crossOrigin就会出现跨域问题，如下图所示的错误，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/379004/201808/379004-20180806125913820-1142177817.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注：只有天地图设置了crossOrigin之后会出现这个问题，谷歌底图是不会出现的，原因是：&lt;/p&gt;
&lt;p&gt;天地图在返回的request header的Origin属性设置成当前访问的IP，而google底图Origin属性设置的是*，意味着不同IP的系统在浏览器缓存了google瓦片之后依然能访问google底图。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;2.1  简单暴力的方法&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;简单暴力的解决方法就是清除浏览器的缓存图片，在同一时刻，只查看一个其中的一个系统，如果要查看另一个系统，必须事先清除浏览器图片缓存&lt;/p&gt;
&lt;h2&gt;2.2  删除CrossOrigin属性&lt;/h2&gt;
&lt;p&gt;重新审视一遍地图需求，判断是否真的需要crossOrigin属性，如果不需要，就根本不会出现这个问题&lt;/p&gt;
&lt;h2&gt;2.3  nginx代理解决&lt;/h2&gt;
&lt;p&gt;如果前面的方法都感觉不合适，那就用nginx来代理解决吧，它可以解决跨域问题，也可以将瓦片缓存至本地，加快访问速度。&lt;/p&gt;
&lt;p&gt;直接上配置文件哈。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#user  nobody;
worker_processes  &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;;

#error_log  logs&lt;/span&gt;/&lt;span&gt;error.log;
#error_log  logs&lt;/span&gt;/&lt;span&gt;error.log  notice;
#error_log  logs&lt;/span&gt;/error.log  &lt;span&gt;info&lt;/span&gt;&lt;span&gt;;

#pid        logs&lt;/span&gt;/&lt;span&gt;nginx.pid;


events {
    worker_connections  &lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;;
}

http {
    include       mime.types;
    default_type  application&lt;/span&gt;/octet-&lt;span&gt;stream;

    #log_format  main  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    #                  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$status $body_bytes_sent &quot;$http_referer&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    #                  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;

    #access_log  logs&lt;/span&gt;/&lt;span&gt;access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    keepalive_timeout  &lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;;

    #&lt;/span&gt;&lt;span&gt;gzip&lt;/span&gt;&lt;span&gt;  on;
    
    client_max_body_size 20M;
    &lt;br/&gt;　　 &lt;span&gt;# 关键代码块1&lt;/span&gt;
    proxy_temp_path ..&lt;/span&gt;/proxy_cache/&lt;span&gt;tianditu_temp;
    proxy_cache_path ..&lt;/span&gt;/proxy_cache/tianditu levels=&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt; keys_zone=cache_one:200m inactive=1d max_size=&lt;span&gt;30g;
    upstream tianditu_server {
        server t0.tianditu.com weight&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt; max_fails=&lt;span&gt;2&lt;/span&gt; fail_timeout=&lt;span&gt;30s;
        server t1.tianditu.com weight&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt; max_fails=&lt;span&gt;2&lt;/span&gt; fail_timeout=&lt;span&gt;30s;
        server t2.tianditu.com weight&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt; max_fails=&lt;span&gt;2&lt;/span&gt; fail_timeout=&lt;span&gt;30s;
        server t3.tianditu.com weight&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt; max_fails=&lt;span&gt;2&lt;/span&gt; fail_timeout=&lt;span&gt;30s;
        server t4.tianditu.com weight&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt; max_fails=&lt;span&gt;2&lt;/span&gt; fail_timeout=&lt;span&gt;30s;
        server t5.tianditu.com weight&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt; max_fails=&lt;span&gt;2&lt;/span&gt; fail_timeout=&lt;span&gt;30s;
        server t6.tianditu.com weight&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt; max_fails=&lt;span&gt;2&lt;/span&gt; fail_timeout=&lt;span&gt;30s;
    }
    
    server {
        listen       &lt;/span&gt;&lt;span&gt;8088&lt;/span&gt;&lt;span&gt;;
        server_name  localhost;

        #charset koi8&lt;/span&gt;-&lt;span&gt;r;

        #access_log  logs&lt;/span&gt;/&lt;span&gt;host.access.log  main;&lt;/span&gt;&lt;span&gt;
&lt;br/&gt;　　　　 &lt;span&gt;# 关键代码块2&lt;/span&gt;
        location &lt;/span&gt;/&lt;span&gt;DataServer {
            more_set_headers &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Access-Control-Allow-Origin: *&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            add_header Access&lt;/span&gt;-Control-Allow-Headers X-Requested-&lt;span&gt;With;
            add_header Access&lt;/span&gt;-Control-Allow-&lt;span&gt;Methods GET,POST,OPTIONS;
            
            proxy_cache cache_one;
            proxy_cache_key $uri$is_args$args;
            proxy_pass http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tianditu_server/DataServer;&lt;/span&gt;
&lt;span&gt;        }
    }&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面解释一下配置文件：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关键代码块1：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、采用nginx upstream 配置一组服务地址，做负载均衡用，其效果优于openlayers顺序遍历t0至t6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、设置了代理缓存临时地址和缓存地址，这里可以采用相对路径&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关键代码块2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;匹配到DataServer之后，需要&lt;/p&gt;
&lt;p&gt;1、设置跨域header，这里用了一个新的nginx模块——headers-more，需要在编译nginx时加入，如果是windows下用nginx，可以用这个网站的安装包：https://openresty.org，它预编译了很多nginx实用模块&lt;/p&gt;
&lt;p&gt;2、用proxy_pass将地址代理到 http://tianditu_server/DataServer 地址上，其中tianditu_server就是上面配置负载均衡的服务组名称。&lt;/p&gt;

</description>
<pubDate>Mon, 06 Aug 2018 05:31:00 +0000</pubDate>
<dc:creator>zhang90030</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhang90030/p/9429649.html</dc:identifier>
</item>
</channel>
</rss>