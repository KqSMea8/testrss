<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>JS高级. 05 词法作用域、变量名提升、作用域链、闭包 - 明明明明明明明明</title>
<link>http://www.cnblogs.com/mingm/p/7707451.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mingm/p/7707451.html</guid>
<description>&lt;h2 id=&quot;作用域&quot;&gt;作用域&lt;/h2&gt;
&lt;p&gt;域，表示的是一个范围，作用域，就是作用范围。&lt;/p&gt;
&lt;p&gt;作用域说明的是一个变量可以在什么地方被使用，什么地方不能被使用。&lt;/p&gt;
&lt;h3 id=&quot;块级作用域&quot;&gt;块级作用域&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;JavaScript中没有块级作用域&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;123;
    {
        &lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num );
    }
}
&lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num );
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面这段代码在JavaScript中是不会报错的，但是在其他的编程语言中（C#、C、JAVA）会报错。&lt;/p&gt;
&lt;p&gt;这是因为，在JavaScript中没有块级作用域，使用&lt;code&gt;{}&lt;/code&gt;标记出来的代码块中声明的变量&lt;code&gt;num&lt;/code&gt;，是可以被&lt;code&gt;{}&lt;/code&gt;外面访问到的。&lt;/p&gt;
&lt;p&gt;但是在其他的编程语言中，有块级作用域，那么&lt;code&gt;{}&lt;/code&gt;中声明的变量&lt;code&gt;num&lt;/code&gt;，是不能在代码块外部访问的，所以报错。&lt;/p&gt;
&lt;h3 id=&quot;词法作用域&quot;&gt;词法作用域&lt;/h3&gt;
&lt;p&gt;什么是词法作用域？&lt;/p&gt;
&lt;p&gt;词法( 代码 )作用域, 就是代码在编写过程中体现出来的作用范围. 代码一旦写好, 不用执行, 作用范围就已经确定好了. 这个就是所谓词法作用域.&lt;/p&gt;
&lt;p&gt;在 js 中词法作用域规则:&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;函数允许访问函数外的数据.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;整个代码结构中只有函数可以限定作用域.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;作用域规则首先使用提升规则分析&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果当前作用规则中有名字了, 就不考虑外面的名字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;例子1：&quot;&gt;例子1：&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;123;

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo(&lt;span class=&quot;hljs-params&quot;&gt;) {

    &lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num );

}

foo();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;例子2：&quot;&gt;例子2：&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if ( &lt;span class=&quot;hljs-literal&quot;&gt;false ) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;123;
}
&lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num ); &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;例子3：&quot;&gt;例子3：&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;123;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;456;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func(&lt;span class=&quot;hljs-params&quot;&gt;) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num );
    }

    func();
}

foo();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;练习：&quot;&gt;练习：&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var num1 = &lt;span class=&quot;hljs-number&quot;&gt;123;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo1(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num1 = &lt;span class=&quot;hljs-number&quot;&gt;456;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo2(&lt;span class=&quot;hljs-params&quot;&gt;) {
        num1 = &lt;span class=&quot;hljs-number&quot;&gt;789;
        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo3 (&lt;span class=&quot;hljs-params&quot;&gt;) {
            &lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num1 );
        }
        foo3();
    }
    foo2();
}
foo1();
&lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num1 );
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;面试题&quot;&gt;面试题&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;123;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func1(&lt;span class=&quot;hljs-params&quot;&gt;){
    &lt;span class=&quot;hljs-built_in&quot;&gt;console.log(num);
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func2(&lt;span class=&quot;hljs-params&quot;&gt;){
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;456;
    func1();
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript是解释型的语言，但是他并不是真的在运行的时候逐句的往下解析执行。&lt;/p&gt;
&lt;p&gt;我们来看下面这个例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;func();

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func(&lt;span class=&quot;hljs-params&quot;&gt;){
     alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Funciton has been called&quot;);
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面这段代码中，函数func的调用是在其声明之前，如果说JavaScript代码真的是逐句的解析执行，那么在第一句调用的时候就会出错，然而事实并非如此，上面的代码可以正常执行，并且alert出来&lt;code&gt;Function has been called&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所以，可以得出结论，JavaScript并非仅在运行时简简单单的逐句解析执行！&lt;/p&gt;
&lt;h2 id=&quot;javascript-预解析&quot;&gt;JavaScript 预解析&lt;/h2&gt;
&lt;p&gt;JavaScript引擎在对JavaScript代码进行解释执行之前，会对JavaScript代码进行预解析，在预解析阶段，会将以关键字&lt;code&gt;var&lt;/code&gt;和&lt;code&gt;function&lt;/code&gt;开头的语句块提前进行处理。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;关键问题是怎么处理呢？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到作用域的开头。&lt;/p&gt;
&lt;p&gt;重新来看上面的那段代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;func();
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func(&lt;span class=&quot;hljs-params&quot;&gt;){
     alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Funciton has been called&quot;);
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于JavaScript的预解析机制，上面的代码就等效于：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func(&lt;span class=&quot;hljs-params&quot;&gt;){
    alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Funciton has been called&quot;);
}
func();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看完函数声明的提升，再来看一个变量声明提升的例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;alert(a);
&lt;span class=&quot;hljs-keyword&quot;&gt;var a = &lt;span class=&quot;hljs-number&quot;&gt;1;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于JavaScript的预解析机制，上面这段代码，alert出来的值是&lt;code&gt;undefined&lt;/code&gt;，如果没有预解析，代码应该会直接报错&lt;code&gt;a is not defined&lt;/code&gt;，而不是输出值。&lt;/p&gt;
&lt;p&gt;Wait a minute, 不是说要提前的吗？那不是应该alert出来1，为什么是&lt;code&gt;undefined&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;那么在这里有必要说一下&lt;code&gt;声明&lt;/code&gt;、&lt;code&gt;定义&lt;/code&gt;、&lt;code&gt;初始化&lt;/code&gt;的区别。其实这几个概念是C系语言的人应该都比较了解的。&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;行为&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;声明&lt;/td&gt;
&lt;td&gt;告诉编译器/解析器有这个变量存在,这个行为是不分配内存空间的,在JavaScript中，声明一个变量的操作为：&lt;code&gt;var a;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;定义&lt;/td&gt;
&lt;td&gt;为变量分配内存空间，在C语言中，一般声明就包含了定义，比如：&lt;code&gt;int a;&lt;/code&gt;,但是在JavaScript中，&lt;code&gt;var a;&lt;/code&gt;这种形式就只是声明了。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;初始化&lt;/td&gt;
&lt;td&gt;在定义变量之后，系统为变量分配的空间内存储的值是不确定的，所以需要对这个空间进行初始化，以确保程序的安全性和确定性&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;赋值&lt;/td&gt;
&lt;td&gt;赋值就是变量在分配空间之后的某个时间里，对变量的值进行的刷新操作（修改存储空间内的数据)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;所以我们说的提升，是声明的提升。&lt;/p&gt;
&lt;p&gt;那么再回过头看，上面的代码就等效于：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var a; &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;复杂点的情况分析&quot;&gt;复杂点的情况分析&lt;/h2&gt;
&lt;p&gt;通过上一小节的内容，我们对变量、函数声明提升已经有了一个最基本的理解。那么接下来，我们就来分析一些略复杂的情况。&lt;/p&gt;
&lt;h3 id=&quot;函数同名&quot;&gt;函数同名&lt;/h3&gt;
&lt;p&gt;观察下面这段代码:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;func1();
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func1(&lt;span class=&quot;hljs-params&quot;&gt;){
     &lt;span class=&quot;hljs-built_in&quot;&gt;console.log(&lt;span class=&quot;hljs-string&quot;&gt;'This is func1');
}

func1();
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func1(&lt;span class=&quot;hljs-params&quot;&gt;){
     &lt;span class=&quot;hljs-built_in&quot;&gt;console.log(&lt;span class=&quot;hljs-string&quot;&gt;'This is last func1');
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-text&quot;&gt;This is last func1
This is last func1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;原因分析：由于预解析机制，&lt;code&gt;func1&lt;/code&gt;的声明会被提升，提升之后的代码为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func1(&lt;span class=&quot;hljs-params&quot;&gt;){
     &lt;span class=&quot;hljs-built_in&quot;&gt;console.log(&lt;span class=&quot;hljs-string&quot;&gt;'This is func1');
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func1(&lt;span class=&quot;hljs-params&quot;&gt;){
     &lt;span class=&quot;hljs-built_in&quot;&gt;console.log(&lt;span class=&quot;hljs-string&quot;&gt;'This is last func1');
}

func1();
func1();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同名的函数，后面的会覆盖前面的，所以两次输出结果都是&lt;code&gt;This is last func1&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;变量和函数同名&quot;&gt;变量和函数同名&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;alert(foo);
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo(&lt;span class=&quot;hljs-params&quot;&gt;){}
&lt;span class=&quot;hljs-keyword&quot;&gt;var foo = &lt;span class=&quot;hljs-number&quot;&gt;2;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。所以上面的代码的输出结果为&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo(&lt;span class=&quot;hljs-params&quot;&gt;){}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们还是来吧预解析之后的代码展现出来:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo(&lt;span class=&quot;hljs-params&quot;&gt;){};
alert(foo);
foo = &lt;span class=&quot;hljs-number&quot;&gt;2;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再来看一种&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;1;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;num (&lt;span class=&quot;hljs-params&quot;&gt;) {
     alert( num );
}
num();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码执行结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Uncaught TypeError: num is not a function
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;直接上预解析后的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;num(&lt;span class=&quot;hljs-params&quot;&gt;){
     alert(num);
}

num = &lt;span class=&quot;hljs-number&quot;&gt;1;
num();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;预解析是分作用域的&quot;&gt;预解析是分作用域的&lt;/h2&gt;
&lt;p&gt;声明提升并不是将所有的声明都提升到window对象下面，提升原则是提升到变量运行的环境(作用域)中去。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;showMsg(&lt;span class=&quot;hljs-params&quot;&gt;)
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var msg = &lt;span class=&quot;hljs-string&quot;&gt;'This is message';
}
alert(msg); &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还是直接把预解析之后的代码写出来：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;showMsg(&lt;span class=&quot;hljs-params&quot;&gt;)
{
    &lt;span class=&quot;hljs-keyword&quot;&gt;var msg;
    msg = &lt;span class=&quot;hljs-string&quot;&gt;'This is message';
}
alert(msg); &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;预解析是分段的&quot;&gt;预解析是分段的&lt;/h2&gt;
&lt;p&gt;分段，其实就分script标签的&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&amp;gt;&lt;span class=&quot;javascript&quot;&gt;
func(); &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面代码中，第一个script标签中的两个&lt;code&gt;func&lt;/code&gt;进行了提升，第二个&lt;code&gt;func&lt;/code&gt;覆盖了第一个&lt;code&gt;func&lt;/code&gt;，但是第二个script标签中的&lt;code&gt;func&lt;/code&gt;并没有覆盖上面的第二个&lt;code&gt;func&lt;/code&gt;。所以说预解析是分段的。&lt;/p&gt;
&lt;p&gt;tip:但是要注意，分段只是单纯的针对函数，变量并不会分段预解析。&lt;/p&gt;
&lt;h2 id=&quot;函数表达式并不会被提升&quot;&gt;函数表达式并不会被提升&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;func();
&lt;span class=&quot;hljs-keyword&quot;&gt;var func = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function(&lt;span class=&quot;hljs-params&quot;&gt;){
    alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我被提升了&quot;);
};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里会直接报错，&lt;code&gt;func is not a function&lt;/code&gt;，原因就是函数表达式，并不会被提升。只是简单地当做变量声明进行了处理，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var func;
func();
func = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function(&lt;span class=&quot;hljs-params&quot;&gt;){
    alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我被提升了&quot;);
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;条件式函数声明&quot;&gt;条件式函数声明&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;console.log(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof func);
&lt;span class=&quot;hljs-keyword&quot;&gt;if(&lt;span class=&quot;hljs-literal&quot;&gt;true){
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function(&lt;span class=&quot;hljs-params&quot;&gt;){
        &lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-number&quot;&gt;1;
    }
}
&lt;span class=&quot;hljs-built_in&quot;&gt;console.log(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof func);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面这段代码，就是所谓的条件式函数声明，这段代码在Gecko引擎中打印&lt;code&gt;&quot;undefined&quot;&lt;/code&gt;、&lt;code&gt;&quot;function&quot;&lt;/code&gt;；而在其他浏览器中则打印&lt;code&gt;&quot;function&quot;&lt;/code&gt;、&lt;code&gt;&quot;function&quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;原因在于Gecko加入了ECMAScript以外的一个feature：条件式函数声明。&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;Conditionally created functions Functions can be conditionally declared, that is, a function declaration can be nested within an if statement.&lt;/p&gt;
&lt;p&gt;Note: Although this kind of function looks like a function declaration, it is actually an expression (or statement), since it is nested within another statement. See differences between function declarations and function expressions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note中的文字说明，条件式函数声明的处理和函数表达式的处理方式一样，所以条件式函数声明没有声明提升的特性。&lt;/p&gt;
&lt;h2 id=&quot;作用域链&quot;&gt;作用域链&lt;/h2&gt;
&lt;h3 id=&quot;什么是作用域链&quot;&gt;什么是作用域链&lt;/h3&gt;
&lt;p&gt;只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。&lt;/p&gt;
&lt;p&gt;凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。&lt;/p&gt;
&lt;p&gt;将这样的所有的作用域列出来，可以有一个结构: 函数内指向函数外的链式结构。就称作作用域链。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;f1(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;f2(&lt;span class=&quot;hljs-params&quot;&gt;) {
    }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;456;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;f3(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;f4(&lt;span class=&quot;hljs-params&quot;&gt;) {    
    }
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105033/201710/1105033-20171022002155990-1797135148.png&quot; alt=&quot;&quot; width=&quot;473&quot; height=&quot;180&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;绘制作用域链的步骤&quot;&gt;绘制作用域链的步骤:&lt;/h3&gt;
&lt;ol readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;看整个全局是一条链, 即顶级链, 记为 0 级链&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;看全局作用域中, 有什么成员声明, 就以方格的形式绘制到 0 级练上&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;再找函数, 只有函数可以限制作用域, 因此从函数中引入新链, 标记为 1 级链&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;然后在每一个 1 级链中再次往复刚才的行为&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;变量的访问规则&quot;&gt;变量的访问规则&lt;/h3&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;首先看变量在第几条链上, 在该链上看是否有变量的定义与赋值, 如果有直接使用&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;如果没有到上一级链上找( n - 1 级链 ), 如果有直接用, 停止继续查找.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果还没有再次往上刚找... 直到全局链( 0 级 ), 还没有就是 is not defined&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;注意,同级的链不可混合查找&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;练习：绘制作用域链&quot;&gt;练习：绘制作用域链&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;f1(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;123;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;f2(&lt;span class=&quot;hljs-params&quot;&gt;) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num );
    }
    f2();
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;456;
f1();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;lang-js&quot;&gt; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105033/201710/1105033-20171022002251943-684084901.png&quot; alt=&quot;&quot; width=&quot;488&quot; height=&quot;195&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;如何分析代码&quot;&gt;如何分析代码&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;在分析代码的时候切记从代码的运行进度上来分析, 如果代码给变量赋值了, 一定要标记到图中&lt;/li&gt;
&lt;li&gt;如果代码比较复杂, 可以在图中描述代码的内容, 有事甚至需要将原型图与作用域图合并分析&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;练习&quot;&gt;练习&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;123;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;f1(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console.log( num );
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;f2(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;456;
    f1();
}
f2();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;lang-js&quot;&gt; &lt;/code&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1105033/201710/1105033-20171022002633865-388565997.png&quot; alt=&quot;&quot; width=&quot;552&quot; height=&quot;199&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;补充&quot;&gt;补充&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;声明变量使用`var`, 如果不使用`var`声明的变量就是全局变量( 禁用 )&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因为在任何代码结构中都可以使用该语法. 那么再代码维护的时候会有问题. 所以除非特殊原因不要这么用.&lt;/p&gt;
&lt;p&gt;下面的代码的错误&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo (&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var i1 = &lt;span class=&quot;hljs-number&quot;&gt;1 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时注意&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var arr = [];
&lt;span class=&quot;hljs-keyword&quot;&gt;for ( &lt;span class=&quot;hljs-keyword&quot;&gt;var i = &lt;span class=&quot;hljs-number&quot;&gt;0; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10; i++ ) {
    arr.push( i );
}

&lt;span class=&quot;hljs-keyword&quot;&gt;for ( &lt;span class=&quot;hljs-keyword&quot;&gt;var i = &lt;span class=&quot;hljs-number&quot;&gt;0; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10; i++ ) {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console.log( arr[ i ] );
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;body-inner&quot;&gt;
&lt;div class=&quot;page-wrapper&quot; readability=&quot;59&quot;&gt;
&lt;div class=&quot;page-inner&quot; readability=&quot;88&quot;&gt;
&lt;h2 id=&quot;闭包&quot;&gt;闭包&lt;/h2&gt;
&lt;h3 id=&quot;闭包的概念&quot;&gt;闭包的概念&lt;/h3&gt;
&lt;p&gt;闭包从字面意思理解就是闭合, 包起来.&lt;/p&gt;
&lt;p&gt;简单的来说闭包就是,&lt;em&gt;一个具有封闭的对外不公开的, 包裹结构, 或空间.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在JavaScript中函数可以构成闭包. 一般函数是一个代码结构的封闭结构, 即包裹的特性, 同时根据作用域规则, 只允许函数访问外部的数据, 外部无法访问函数内部的数据, 即封闭的对外不公开的特性. 因此说函数可以构成闭包.&lt;/p&gt;
&lt;h3 id=&quot;闭包要解决什么问题？&quot;&gt;闭包要解决什么问题？&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;闭包内的数据不允许外界访问&lt;/li&gt;
&lt;li&gt;要解决的问题就是间接访问该数据&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;函数就可以构成闭包, 要解决的问题就是访问到函数内部的数据&lt;/p&gt;
&lt;p&gt;我们观察下面的函数&lt;code&gt;foo&lt;/code&gt;，在&lt;code&gt;foo&lt;/code&gt;内部有一个变量&lt;code&gt;num&lt;/code&gt;，能否在函数外部访问到这个变量&lt;code&gt;num&lt;/code&gt;呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo (&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-number&quot;&gt;123;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return num;
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var res = foo();
&lt;span class=&quot;hljs-built_in&quot;&gt;console.log( res ); &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;分析：&lt;/p&gt;
&lt;p&gt;在上面的代码中，确实可以访问到&lt;code&gt;num&lt;/code&gt;这个函数内部的变量。但是能不能多次访问呢？&lt;/p&gt;
&lt;p&gt;不能，因为每次访问都得重新调用一次&lt;code&gt;foo&lt;/code&gt;函数，每次调用都会重新创建一个&lt;code&gt;num = 123&lt;/code&gt;，然后返回。&lt;/p&gt;
&lt;h4 id=&quot;解决思路&quot;&gt;解决思路&lt;/h4&gt;
&lt;p&gt;函数内的数据不能直接在函数外被访问，是因为作用域的关系，上级作用域不能直接访问下级作用域中的数据。&lt;/p&gt;
&lt;p&gt;但是如果反过来，下级作用域可以直接访问上级作用域中的数据。那么如果在函数&lt;code&gt;foo&lt;/code&gt;内定义一个函数，那么在这个内部函数中是可以直接访问&lt;code&gt;foo&lt;/code&gt;中的&lt;code&gt;num&lt;/code&gt;的。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-built_in&quot;&gt;Math.random();    
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;func(&lt;span class=&quot;hljs-params&quot;&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return num;    
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;return func;
}


&lt;span class=&quot;hljs-keyword&quot;&gt;var f = foo();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;如何获得超过一个数据&quot;&gt;如何获得超过一个数据&lt;/h3&gt;
&lt;p&gt;函数的返回值只能有一个，那按照上面的方法，我们只能对函数内部的一个数据进行操作。怎么操作函数内的多个数据呢？&lt;/p&gt;
&lt;p&gt;可以使用对象，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo (&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num1 = &lt;span class=&quot;hljs-built_in&quot;&gt;Math.random();
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num2 = &lt;span class=&quot;hljs-built_in&quot;&gt;Math.random();
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;如何完成读取一个数据和修改这个数据&quot;&gt;如何完成读取一个数据和修改这个数据&lt;/h3&gt;
&lt;p&gt;前面讲的都是如何去获取函数内部的数据，接下来我们考虑如何修改函数内部的数据。&lt;/p&gt;
&lt;p&gt;同样，也是使用内部的函数进行操作。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function &lt;span class=&quot;hljs-title&quot;&gt;foo(&lt;span class=&quot;hljs-params&quot;&gt;) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;var num = &lt;span class=&quot;hljs-built_in&quot;&gt;Math.random();
    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;闭包的基本结构&quot;&gt;闭包的基本结构&lt;/h3&gt;
&lt;p&gt;一般闭包要解决的的问题就是要想办法间接的获得函数内数据的使用权. 那么我们的可以总结出一个基本的使用模型.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;写一个函数, 函数内定义一个新函数, 返回新函数, 用新函数获得函数内的数据&lt;/li&gt;
&lt;li&gt;写一个函数, 函数内定义一个对象, 对象中绑定多个函数( 方法 ), 返回对象, 利用对象的方法访问函数内的数据&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Sat, 21 Oct 2017 16:39:00 +0000</pubDate>
<dc:creator>明明明明明明明明</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mingm/p/7707451.html</dc:identifier>
</item>
<item>
<title>【网络爬虫入门05】分布式文件存储数据库MongoDB的基本操作与爬虫应用 - 小蜜蜂老师</title>
<link>http://www.cnblogs.com/ALittleBee/p/7707509.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ALittleBee/p/7707509.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;【网络爬虫入门05】分布式文件存储数据库MongoDB的基本操作与爬虫应用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;广东职业技术学院  欧浩源&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、引言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    网络爬虫往往需要将大量的数据存储到数据库中，常用的有&lt;span&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/span&gt;、&lt;span&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/span&gt;和&lt;span&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/span&gt;等。对于爬取返回为JSON格式的数据，选择&lt;span&gt;&lt;strong&gt;NoSQL非关系型数据库&lt;/strong&gt;&lt;/span&gt;的&lt;span&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/span&gt;来存储会容易很多。在本文中，首先介绍MongoDB数据库的安装与启动，然后讲述该数据库的基本操作，接着用Python语句操作该数据库，最后将“豆瓣电影TOP250”爬虫搜集的数据存到到该数据库中，&lt;strong&gt;由浅入深，从理论到实践，全面掌握MongoDB数据库的基本应用。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、什么是MongoDB数据库？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/span&gt;是一款由&lt;span&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/span&gt;语言编写，基于&lt;span&gt;&lt;strong&gt;分布式文件存储&lt;/strong&gt;&lt;/span&gt;的NoSQL数据库，具有免费、操作简单、面向文档存储、自动分片、可扩展性高、查询功能强大等特点，旨在为Web应用提供可扩展的高性能数据存储解决方案。&lt;span&gt;&lt;strong&gt;MongoDB将数据存储为一个&lt;span&gt;文档&lt;/span&gt;，数据结构由&lt;span&gt;键值对&lt;/span&gt;（key--value）组成。&lt;/strong&gt;&lt;/span&gt;MongoDB的文档类似于JSON对象，如果你不懂JSON对象的话，也可以理解为&lt;span&gt;&lt;strong&gt;Python中的字典&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3、MongoDB的下载与安装&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【1】进入官方网站&lt;span&gt;&lt;strong&gt;：www.mongodb.com&lt;/strong&gt;&lt;/span&gt;，进入download页面，选择“community sever”标签，下载windows的msi版本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021234245521-195719778.png&quot; alt=&quot;&quot; width=&quot;933&quot; height=&quot;440&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【2】双击下载后的安装程序，选择“Complete”安装完整版本。这个过程非常简单，除了“下一步”就是最后的“完成”。完成后，程序默认安装在“C:\Program Files\MongoDB中”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021234335756-893011924.png&quot; alt=&quot;&quot; width=&quot;403&quot; height=&quot;315&quot;/&gt;   &lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021234349974-555550236.png&quot; alt=&quot;&quot; width=&quot;412&quot; height=&quot;320&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【3】在C盘创建两个文件夹，分别为：&quot;C:\MongoDBData\db&quot;和&quot;C:\MongoDBData\log&quot;，作为&lt;span&gt;&lt;strong&gt;数据&lt;/strong&gt;&lt;/span&gt;和&lt;span&gt;&lt;strong&gt;日志&lt;/strong&gt;&lt;/span&gt;的文件夹。db文件夹存放&lt;span&gt;&lt;strong&gt;MongoDB的数据库&lt;/strong&gt;&lt;/span&gt;，log文件夹存放&lt;span&gt;&lt;strong&gt;数据库的操作记&lt;/strong&gt;&lt;/span&gt;录。在log文件夹中创建一个日志文件mongodb.log。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021234441349-732407712.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;【4】创建MongoDB的数据库文件。以管理员身份打开cmd控制台，将当前路径切换到&lt;span&gt;&lt;strong&gt;MongoDB的安装目录的&lt;span&gt;bin目录&lt;/span&gt;下&lt;/strong&gt;&lt;/span&gt;，即“&lt;strong&gt;&lt;span&gt;C:\Program Files\MongoDB\Server\3.4\bin&lt;/span&gt;&lt;/strong&gt;”。在路径下输入“&lt;span&gt;&lt;strong&gt;mongod.exe --dbpath c:\MongoDBData\db&lt;/strong&gt;&lt;/span&gt;”。该命令将MongoDB的数据库文件创建到已经建好的db文件夹中。如果创建成功，可以看到具体的信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021234601568-1196283225.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;【5】&lt;/span&gt;&lt;span&gt;MongoDB主要的启动方式有两种：以&lt;span&gt;&lt;strong&gt;程序的方式&lt;/strong&gt;&lt;/span&gt;打开和以&lt;span&gt;&lt;strong&gt;Windows服务的方式&lt;/strong&gt;&lt;/span&gt;打开。在实际使用中，用Windows服务的方式打开会比较方便。首先以管理员的身份运行cmd控制台，并且把当前目录切换到&lt;span&gt;&lt;strong&gt;MongoDB安装目录的&lt;span&gt;bin目录&lt;/span&gt;下&lt;/strong&gt;&lt;/span&gt;，然后输入：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;mongod.exe --logpath &quot;C:\MongoDBData\log\mongodb.log&quot; --logappend --dbpath &quot;c:\MongoDBData\db&quot; --serviceName &quot;MongoDB&quot; --install&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;通过这个指令安装Windows服务运行模式，其中“MongoDB”为服务器名称。然后通过输入“&lt;span&gt;&lt;strong&gt;net start MongoDB&lt;/strong&gt;&lt;/span&gt;”指令，启动MongoDB。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021234659146-510099117.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    如果看到上述的信息，则表示MongoDB已经成功启动了。如果你打开计算机管理系统的服务模块，能清楚看到MongoDB已经启动了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021234805396-398411504.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;438&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    到这里，关于MongoDB的下载、安装、配置、启动已经全部完成，接下来就可以自由的使用了。在下一次打开电脑的时候，并不需要再次输入配置和启动命令，直接进入MongoDB安装目录下的bin文件夹，双击“&lt;span&gt;&lt;strong&gt;Mongo.exe&lt;/strong&gt;&lt;/span&gt;”即可打开数据库的交互窗口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021234948693-1390837859.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    为了测试MongoDB是否打开成功，可在提示符下输入“&lt;span&gt;&lt;strong&gt;show dbs&lt;/strong&gt;&lt;/span&gt;”查看所有的数据库。如果成功的话，你能看到以下的返回信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235016037-1450935236.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5、MongoDB的基本操作&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【1】查看当前数据库名称：&lt;/span&gt;&lt;span&gt;db&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【2】查看所有数据库名称：&lt;/span&gt;&lt;span&gt;show dbs&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【3】切换数据库：&lt;/span&gt;&lt;span&gt;use &lt;span&gt;数据库名称&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;    如果数据不存在，则则指向数据库，但不创建，直到插入数据或创建集合时，数据库才被创建。默认的数据库为test。如果你没有创建新的数据库，集合将存放在test数据库中。&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【4】删除当前数据库：&lt;/span&gt;&lt;span&gt;db.dropDatabase()&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;    删除当前指向的数据库，如果数据库不存在，则什么也不做。&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【5】创建集合：&lt;/span&gt;&lt;span&gt;db.createCollection(&lt;span&gt;name&lt;/span&gt; ,&lt;span&gt;option&lt;/span&gt;)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;    不限制集合大小，如：&lt;span&gt;&lt;strong&gt;db.createCollection(&lt;span&gt;&quot;student&quot;&lt;/span&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    限制集合大小，如：&lt;span&gt;&lt;strong&gt;db.createCollection(&lt;span&gt;&quot;student&quot;&lt;/span&gt;,&lt;span&gt;{capped:true,size:10}&lt;/span&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【6】查看当前数据库的集合：&lt;/span&gt;&lt;span&gt;show collections&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【7】删除集合：&lt;/span&gt;&lt;span&gt;db.&lt;span&gt;集合名称&lt;/span&gt;.drop()&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;例1：&lt;/span&gt;查看当前的数据库，并切换到“spider01”数据，然后在该数据库中创建集合“student”，最后查看当前数据库中的集合。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235138037-1324037221.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【8】插入数据：&lt;/span&gt;&lt;span&gt;db.&lt;span&gt;集合名称&lt;/span&gt;.insert(&lt;span&gt;document&lt;/span&gt;)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;    如：db.stu.insert({name:&quot;Marry&quot;, age:21})&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【9】保存数据：&lt;/span&gt;&lt;span&gt;db.&lt;span&gt;集合名称&lt;/span&gt;.save(&lt;span&gt;document&lt;/span&gt;)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【10】全文档数据更新：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;db.&lt;span&gt;集合名称&lt;/span&gt;.update(&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;        &lt;span&gt;&amp;lt;query&amp;gt;&lt;/span&gt;,&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;        &lt;span&gt;&amp;lt;update&amp;gt;&lt;/span&gt;,&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;        &lt;span&gt;{multi : &amp;lt;boolean&amp;gt;}&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    第1个参数：查询条件，即要修改那些数据。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    第2个参数：更新内容，即改为什么数据。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    第3个参数：可选，是否多行更新，默认为false，更新一行。&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【11】指定属性更新：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;    语法如上，通过&lt;span&gt;&lt;strong&gt;操作符&lt;span&gt;$set&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;，指定更新的属性。&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【12】删除数据：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;  &lt;strong&gt;  &lt;span&gt;db.&lt;span&gt;集合名称&lt;/span&gt;.update(&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;        &lt;span&gt;&amp;lt;query&amp;gt;&lt;/span&gt;,&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;        &lt;span&gt;{justone : &amp;lt;boolean&amp;gt;}&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;    )&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    第1个参数：查询条件，要删除的数据。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    第2个参数：默认为false，删除多条数据。&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【13】简单查询：&lt;/span&gt;&lt;span&gt;db.&lt;span&gt;集合名称&lt;/span&gt;.find(&lt;span&gt;{条件文档}&lt;/span&gt;)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【14】返回第一个查询结果：&lt;/span&gt;&lt;span&gt;db.&lt;span&gt;集合名称&lt;/span&gt;.findOne(&lt;span&gt;{条件文档}&lt;/span&gt;)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;【15】将结果格式化输出：&lt;/span&gt;&lt;span&gt;db.&lt;span&gt;集合名称&lt;/span&gt;.find(&lt;span&gt;{条件文档}&lt;/span&gt;).pretty()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;【16】查询集合的记录总数：&lt;/span&gt;&lt;span&gt;db&lt;span&gt;.集合名称&lt;/span&gt;.find().count()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;例2：&lt;/span&gt;向“student”集合中插入三条数据，通过简单查询显示该集合的数据。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235237474-1177689420.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例3：&lt;span&gt;将“&lt;strong&gt;name&lt;/strong&gt;”为“Peter”的文档删除，将&lt;strong&gt;“&lt;/strong&gt;name&lt;/span&gt;”&lt;/span&gt;为“Marry”的“age”改为65，通过查询，将查询结果格式化输出，最后将所有文档删除，在通过简单查询确认。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235324568-596743583.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【17】退出MongoDB数据库：&lt;span&gt;quit()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6、PyMongo库的安装与引入&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    按装PyMongo库就可以使用Python语言操作MongoDB数据库了。其安装方式非常简单：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;pip install &lt;span&gt;pymongo&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    安装完成后，从pymongo中引入MongoClient：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;from &lt;span&gt;pymongo&lt;/span&gt; import &lt;span&gt;MongoClient&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    然后，就可以使用Python对MongoDB数据进行各种操作了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7、PyMongo库的基本操作&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    操作MongoDB数据库之前，首先需要连接MongoDB客户端，然后连接数据库，如果该数据库不存在，就会创建一个数据库；接着选择数据集合，如果该集合不存在，也会创建一个；然后才能进行数据操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例4：&lt;/span&gt;连接MongoDB客户端，然后连接数据库“spider01”，选择数据集合&quot;student&quot;。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235712177-990208273.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【1】插入单条记录：&lt;span&gt;insert_one()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例5：&lt;span&gt;向&quot;student&quot;集合中插入一条学生记录。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235741943-634356071.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【2】插入多条记录：&lt;span&gt;insert_many()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;    在该方法中，要插入的记录以&lt;strong&gt;&lt;span&gt;列表&lt;/span&gt;&lt;/strong&gt;的形式进行传递。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例6：向&quot;student&quot;集合中插入三条学生记录。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235813631-778076967.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【3】查找单条记录：&lt;span&gt;find_one()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例7：&lt;span&gt;查询&quot;student&quot;集合中，age为28的记录中的第一条。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235950334-491736834.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【4】查找多条记录：&lt;span&gt;find_many()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例8：&lt;span&gt;查询&quot;student&quot;集合中，age为28的所有记录。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000027396-900587828.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【5】查询所有记录&lt;span&gt;：&lt;span&gt;find()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例9：&lt;span&gt;查询&quot;student&quot;集合的所有记录。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171021235843099-2091518870.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【6】更新单条记录&lt;span&gt;：update_one()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例10：&lt;span&gt;将&quot;student&quot;集合中，name为“李四”的记录的“scorce”的值修改为66.6。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000110802-1027455427.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【7】更新多条记录：&lt;span&gt;update_many()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例11：&lt;span&gt;将&quot;student&quot;集合中，age为28的记录的“scorce”的值修改为88.8。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000215084-322373142.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【8】删除单条记录：&lt;span&gt;delete_one()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例12：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;将&quot;student&quot;集合中，name为&quot;李四&quot;的记录删除。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000243709-504079462.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;【9】删除多条记录：&lt;span&gt;delete_many()&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;例13：&lt;span&gt;将&quot;student&quot;集合的所有记录删除。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000309552-490703410.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    熟练掌握了数据库的增、删、查、改的基本操作之后，再去学习和提升就不会存在太大的障碍了。实际上使用pymongo库来操作数据库是非常简单的，将来碰到更加复杂的需求，在网络上查一下官方文档或者技术博客，应该都能很快的顺利解决。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7、MongoDB的爬虫应用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    在&lt;span&gt;&lt;strong&gt;【网络爬虫入门01】&lt;/strong&gt;&lt;/span&gt;中，应用Requests和BeautifulSoup技术实现了从“豆瓣电影TOP250”中将&lt;span&gt;&lt;strong&gt;电影名称&lt;/strong&gt;&lt;/span&gt;、&lt;span&gt;&lt;strong&gt;豆瓣评分&lt;/strong&gt;&lt;/span&gt;和&lt;span&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/span&gt;爬取下来，并保存到文本文件中的网络爬虫。在这里我们对其进行升级一下，把爬取下来的目标数据存储到MongoDB数据库中，其实现的思路很简单：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &amp;lt;1&amp;gt; 引入pymogo库。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &amp;lt;2&amp;gt;连接服务器和数据库。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &amp;lt;3&amp;gt;选择数据集合进行增、删、查、改操作。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    从实现代码来看，把爬取到的数据存储到数据库只需要一行代码。这个网络爬虫跟MongoDB数据库相关的代码，也就下面几句：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000439209-446355052.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    整个网络爬虫的实现代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000529459-512556711.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    到底爬虫获取的数据有没有存储到数据库中指定的集合中呢？我们可以打开mongo.exe的交互终端进行查看。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000556474-1781016282.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    如果你觉得上面通过交互终端进行数据查询很不方便，你也可以利用Python语句编写代码，查询集合中“评分”为“9.5分”的记录。其实现代码也相当的简洁：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000621724-1879973854.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    如果要将上述代码放到爬虫里面，在程序将数据向数据库存储完毕之后，再读出其中“评分”为“9.5分”的记录作为验证。整个代码可以这样实现：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1172284/201710/1172284-20171022000658974-1829263714.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;8、小结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    在大数据处理时代中，MongoDB的地位将会非常突出，关键它学起来也不难，如果结合Python语句进行开发应用，其效率是非常高的。在网络爬虫的应用中，对于关联度很低、结构很松散的数据，特别是一些JSON格式的数据，使用MongoDB来存储数据那是再完美不过了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;9、附件：源码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; bs4 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; BeautifulSoup
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; pymongo &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MongoClient
db &lt;/span&gt;=&lt;span&gt; client.spider01
collection &lt;/span&gt;=&lt;span&gt; db.movie250
user_agent &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
headers &lt;/span&gt;= {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:user_agent}
url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://movie.douban.com/top250?start=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(0,10&lt;span&gt;):
    fullurl &lt;/span&gt;= url + str(i * 25&lt;span&gt;)
    res &lt;/span&gt;= requests.get(fullurl, headers =&lt;span&gt; headers)
    soup &lt;/span&gt;= BeautifulSoup(res.text, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    mlist &lt;/span&gt;= soup.find_all(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; m &lt;span&gt;in&lt;/span&gt;&lt;span&gt; mlist:
        title &lt;/span&gt;= m.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).text
        score &lt;/span&gt;= m.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,class_=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;star&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,class_=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rating_num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;分&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        link &lt;/span&gt;= m.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
        dat &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;电影&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:title,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;评分&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:score,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;链接&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:link}
        collection.insert_one(dat)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;====豆瓣电影TOP250数据爬取分析保存完毕====&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
cursor &lt;/span&gt;= collection.find({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;评分&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9.5分&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; doc &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cursor:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(doc)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*** 广东职业技术学院-欧浩源-2017年10月 ***&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 21 Oct 2017 16:34:00 +0000</pubDate>
<dc:creator>小蜜蜂老师</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ALittleBee/p/7707509.html</dc:identifier>
</item>
<item>
<title>使用Hexo+Github一步步搭建属于自己的博客（基础） - Z皓</title>
<link>http://www.cnblogs.com/fengxiongZz/p/7707219.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fengxiongZz/p/7707219.html</guid>
<description>&lt;p&gt;前言：电脑系统为window 10专业版，64位&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021222335756-1508643846.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置&lt;strong&gt;鼠标右键&lt;/strong&gt;能够出现如下两个选择&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021222542474-1351750125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223101193-1524328031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223639881-1998790649.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223928802-1978574025.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021224442443-1196707159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;输入npm install hexo -g，开始安装Hexo&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021224910568-2096615217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;输入hexo -v，检查hexo是否安装成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021225015224-1426206003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;输入hexo init，初始化该文件夹（有点漫长的等待。。。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021230203912-509196411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021230241646-1660449756.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到后面的“Start blogging with Hexo！”，激动有木有！！！！！&lt;/p&gt;

&lt;p&gt;输入npm install，安装所需要的组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231521646-1099473727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;输入hexo g，首次体验Hexo&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231705474-1404994153.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 输入hexo s，开启服务器，访问该网址，正式体验Hexo&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231833912-663774637.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021232311912-1198771378.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么出现如下图就成功了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021232413224-1288183746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233157224-1386748377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱&lt;/p&gt;

&lt;p&gt;输入cd ~/.ssh，检查是否由.ssh的文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233543052-76995831.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;输入ls，列出该文件下的内容。下图说明存在&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233630568-279882178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 输入ssh-keygen -t rsa -C “929762930@qq.com”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:&lt;span class=&quot;hljs-command&quot;&gt;\Users&lt;span class=&quot;hljs-command&quot;&gt;\Administrator&lt;span class=&quot;hljs-command&quot;&gt;\.ssh）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234107209-1205335399.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 输入eval &quot;$(ssh-agent -s)&quot;，添加密钥到ssh-agent&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234314146-695835137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234528552-610835964.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 登录Github，点击头像下的settings，添加ssh&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234636834-426105098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;新建一个new ssh key，将id_rsa.pub文件里的内容复制上去&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234906724-1938556332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235116271-1521882533.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/span&gt;假如ssh-key配置失败，那么只要以下步骤就能完全解决&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;首先，清除所有的key-pair&lt;br/&gt;ssh-add -D&lt;br/&gt;rm -r ~/.ssh&lt;br/&gt;删除你在github中的public-key&lt;/p&gt;
&lt;p&gt;重新生成ssh密钥对&lt;br/&gt;ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;&lt;/p&gt;
&lt;p&gt;接下来正常操作&lt;br/&gt;在github上添加公钥public-key:&lt;br/&gt;1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板&lt;br/&gt;2、在github上添加公钥时，直接复制即可&lt;br/&gt;3、保存&lt;/p&gt;
测试：&lt;br/&gt;在终端 ssh -T git@github.com&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235812974-84318377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;repo值是你在github项目里的ssh（右下角）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235722365-818312042.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;7、新建一篇博客，在cmd执行命令：hexo new post “博客名”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022000227834-1991784353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 这时候在文件夹_posts目录下将会看到已经创建的文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022000508865-46787156.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在生成以及部署文章之前，需要安装一个扩展：npm install hexo&lt;span class=&quot;hljs-attribute&quot;&gt;-deployer&lt;span class=&quot;hljs-attribute&quot;&gt;-git &lt;span class=&quot;hljs-subst&quot;&gt;--save&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001237943-657272339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001410662-1611125904.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001738037-1195721153.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 好了，到此为止，最基本的也是最全面的hexo+github搭建博客完结。接下来是进阶的操作&lt;/p&gt;

</description>
<pubDate>Sat, 21 Oct 2017 16:25:00 +0000</pubDate>
<dc:creator>Z皓</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fengxiongZz/p/7707219.html</dc:identifier>
</item>
<item>
<title>基于Eclipse IDE的Ardupilot飞控源码阅读环境搭建 - 前端人生</title>
<link>http://www.cnblogs.com/BlogsOfLei/p/7707485.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BlogsOfLei/p/7707485.html</guid>
<description>&lt;h3 class=&quot;md-end-block md-heading md-focus&quot;&gt;基于Eclipse IDE的Ardupilot飞控源码阅读环境搭建&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;em&gt;作者：Awesome&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;em&gt;日期：2017-10-21&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;需准备的软件工具&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;1、Ardupilot飞控源码下载&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;下载链接 &lt;span&gt;&lt;a href=&quot;https://github.com/ArduPilot/ardupilot&quot;&gt;https://github.com/ArduPilot/ardupilot&lt;/a&gt;&lt;span&gt;，下载说明如下图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/940230/201710/940230-20171021235921381-71127857.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;2、PX4 toolchain工具下载与安装&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;下载链接 &lt;span&gt;&lt;a href=&quot;http://firmware.ardupilot.org/Tools/PX4-tools/pixhawk_toolchain_installer_latest.exe&quot;&gt;http://firmware.ardupilot.org/Tools/PX4-tools/pixhawk_toolchain_installer_latest.exe&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;安装该软件可以选择安装在系统盘目录下，也可以选择安装在其他盘目录下。PX4工具链中包括Python，Python的指令在windows下运行需要配置环境变量。具体步骤：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;选择环境变量&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;系统变量中查找path,并在变量值后面加入路径：C:\pixhawk_toolchain\Python27(根据工具链的安装位置选择，注意数据路径名的时候不要漏了前面的分号&quot; ; &quot;)。选择添加python工具的路径是因为飞控中有些代码的二次开发需要其支持，例如：mavlink自定义消息代码的生成等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt; 　     &lt;img src=&quot;http://images2017.cnblogs.com/blog/940230/201710/940230-20171022000042271-206192479.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;3、JAVA的下载与安装配置&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;2.4665579119086&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;下载链接&lt;span&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;span&gt;，选择下载32位操作系统对应的JDK。文中基于&lt;span&gt;&lt;a&gt;&lt;span&gt;jdk-8u151-windows-i586.exe&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;安装，可以采用默认方式进行安装。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;安装完成后，进入windows系统终端，输入java -version，回车运行。如果成功安装，则终端会输出显示java版本信息。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;配置环境变量，在系统变量中新建系统变量JAVA_HOME(Eclipse IDE基于该路径替代名字寻找java开发环境)。并且在path变量中新添加 &lt;span&gt;&lt;strong&gt;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;&lt;/strong&gt;&lt;span&gt;注意分号必须正确输入。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;md-end-block md-heading md-focus&quot;&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/940230/201710/940230-20171022001914021-306679726.jpg&quot; alt=&quot;&quot;/&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;　 　 &lt;img src=&quot;http://images2017.cnblogs.com/blog/940230/201710/940230-20171022000204474-2102050175.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; &lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;F:/%E4%B9%A6%E7%B1%8D/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%B5%84%E6%96%99/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ardupilot%E9%A3%9E%E6%8E%A7%E7%AC%94%E8%AE%B0/java%E6%96%B0%E5%BB%BACLASSPATH%E5%8F%98%E9%87%8F.jpg&quot;&gt;&lt;img alt=&quot;&quot;/&gt;终端输入javac -version，如果配置正确，终端会输出显示java编译器的版本号。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;建立Ardupilot工程代码编辑环境&lt;/span&gt;&lt;/h4&gt;
&lt;ul class=&quot;ul-list&quot; data-mark=&quot;-&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;在开始菜单中输入&lt;span&gt;&lt;strong&gt;PX4 Eclipse&lt;/strong&gt;&lt;span&gt;，选择并运行&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;成功打开Eclipse，选择&lt;span&gt;&lt;strong&gt;file-&amp;gt;New-&amp;gt;Make Project with Existing Code&lt;/strong&gt;&lt;span&gt;,填写工程名、代码存在路径，以及选择编译工具。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/940230/201710/940230-20171022000248740-322427493.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; 选择菜单栏中的 &lt;strong&gt;Window -&amp;gt; Preferences -&amp;gt; General -&amp;gt; Editors -&amp;gt; Text Editors -&amp;gt; Insert spaces for tabs&lt;/strong&gt;　　&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;　　　选择菜单栏中的 &lt;span&gt;&lt;strong&gt;Windows -&amp;gt; Preferences -&amp;gt; C/C++ -&amp;gt; Code Style -&amp;gt; Formatter&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　 &lt;img src=&quot;http://images2017.cnblogs.com/blog/940230/201710/940230-20171022000315646-222919535.png&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/940230/201710/940230-20171022000329865-265822468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;F:/%E4%B9%A6%E7%B1%8D/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%B5%84%E6%96%99/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ardupilot%E9%A3%9E%E6%8E%A7%E7%AC%94%E8%AE%B0/Eclipse%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC.png&quot;&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;按照上述步骤配置好环境之后，就可以使用Eclipse IDE愉快的读Ardupilot飞控源代码了。&lt;span class=&quot;md-expand&quot;&gt;详情请见&lt;span class=&quot;md-expand&quot;&gt;&lt;a href=&quot;http://ardupilot.org/dev/docs/editing-the-code-with-eclipse.html&quot;&gt;http://ardupilot.org/dev/docs/editing-the-code-with-eclipse.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;span class=&quot;md-expand&quot;&gt;Eclipse 常用快捷键转 &lt;span class=&quot;md-expand&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/mq0036/p/4995390.html&quot;&gt;http://www.cnblogs.com/mq0036/p/4995390.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Oct 2017 16:18:00 +0000</pubDate>
<dc:creator>前端人生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/BlogsOfLei/p/7707485.html</dc:identifier>
</item>
<item>
<title>JavaScript之“创意时钟”项目 - 青衫故人1</title>
<link>http://www.cnblogs.com/pang951189/p/7707482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pang951189/p/7707482.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;&lt;span&gt;“时钟展示项目”说明文档（&lt;span&gt;文档&lt;/span&gt;&lt;span&gt;尾部附有相应代码&lt;/span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;一、最终效果展示：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171021235640974-149455323.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;h2&gt;二、项目亮点&lt;/h2&gt;
&lt;p&gt;1.代码结构清晰明了&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171021235704896-1485867347.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.可以实时动态显示当前时间与当前日期&lt;/p&gt;
&lt;p&gt;3.界面简洁、美观、大方&lt;/p&gt;
&lt;p&gt;4.提高浏览器兼容性&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171021235806271-1713850793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;三、知识点汇总：&lt;/h2&gt;
&lt;p&gt;jQuery、原生javascript、css3、h5&lt;/p&gt;
&lt;h2&gt;四、重难点解释&lt;/h2&gt;
&lt;p&gt;1.各个指针的旋转角度的获取&lt;/p&gt;
&lt;p&gt;首先要明确如下概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时钟指针旋转一周360度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时针：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表盘上共有12小时，每经过一小时，要旋转30度；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分针：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表盘上共有60个小格子，分针每走一分钟，经过一个小格子，转动6度；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;秒针：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表盘上共有60个小格子，秒针每走一分钟，经过一个小格子，也转动6度；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）当前时间的获取&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171021235844552-1026140139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;举个例子（以时针旋转角度计算为例）：  比如现在时间是 9：28；&lt;/p&gt;
&lt;p&gt;时针应该在9和10之间，而通过&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171021235859568-2017204039.png&quot; alt=&quot;&quot;/&gt; 方式只能获取到整点，所以既要获取到当前的小时，也要获取到当前的分钟，这样才能更好的来确定时针的旋转角度，即为如下方式：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171021235929756-1187310768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）旋转角度的获取&lt;/p&gt;
&lt;p&gt;由于时针每经过一个小时后，旋转30度，故获取时针旋转角度如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171021235954349-1873014066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同理，分针与秒针的旋转角度如下：&lt;/p&gt;
&lt;p&gt;分针：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171022000014974-1070873726.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;秒针：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171022000027427-955382940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了使时钟更加的精准，这里精确到了毫秒；&lt;/p&gt;
&lt;p&gt;（3）执行频率，即秒针旋转频率控制&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171022000041318-1011543196.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;调整函数的执行时间间隔即可改变秒针转动频率。&lt;/p&gt;

&lt;h2&gt;五、项目待优化之处&lt;/h2&gt;
&lt;p&gt;1．页面过于简洁，有待进一步优化和改进；&lt;/p&gt;
&lt;p&gt;2．作图时未来得及在时钟上画上分秒的刻度；&lt;/p&gt;

&lt;h2&gt;六、项目中各部分代码&lt;/h2&gt;
&lt;p&gt;1.HTML代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b5e1c38f-fc19-4ed9-81f5-7fc04c6b5a5d')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_b5e1c38f-fc19-4ed9-81f5-7fc04c6b5a5d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b5e1c38f-fc19-4ed9-81f5-7fc04c6b5a5d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b5e1c38f-fc19-4ed9-81f5-7fc04c6b5a5d',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b5e1c38f-fc19-4ed9-81f5-7fc04c6b5a5d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jQuery指针时钟（附带日期）&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入外部css样式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;css/demo.css&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; media&lt;/span&gt;&lt;span&gt;=&quot;screen&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入jQuery库文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/jquery-1.6.2.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入外部js文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/script.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;text-align:center;clear:both&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2.css代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e76fd350-1cc4-4ee6-a698-6710405022ee')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_e76fd350-1cc4-4ee6-a698-6710405022ee&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e76fd350-1cc4-4ee6-a698-6710405022ee&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e76fd350-1cc4-4ee6-a698-6710405022ee',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e76fd350-1cc4-4ee6-a698-6710405022ee&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; {
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;    margin&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;
&lt;span&gt;  5&lt;/span&gt; }
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;body
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; {
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    background&lt;/span&gt;:&lt;span&gt;#f9f9f9&lt;/span&gt;;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;    color&lt;/span&gt;:&lt;span&gt;#000&lt;/span&gt;;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;    font&lt;/span&gt;:&lt;span&gt;15px Calibri, Arial, sans-serif&lt;/span&gt;;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;    text-shadow&lt;/span&gt;:&lt;span&gt;1px 2px 1px #FFFFFF&lt;/span&gt;;
&lt;span&gt; 12&lt;/span&gt; }
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;a,
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;a:visited
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; {
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;    text-decoration&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;    outline&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;    color&lt;/span&gt;:&lt;span&gt;#fff&lt;/span&gt;;
&lt;span&gt; 19&lt;/span&gt; }
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;a:hover
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; {
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;    text-decoration&lt;/span&gt;:&lt;span&gt;underline&lt;/span&gt;;
&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;    color&lt;/span&gt;:&lt;span&gt;#ddd&lt;/span&gt;;
&lt;span&gt; 24&lt;/span&gt; }
&lt;span&gt; 25&lt;/span&gt;      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;the footer  （尾部）&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;footer
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; {
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;    background&lt;/span&gt;:&lt;span&gt;#444 url(&quot;../images/bg-footer.png&quot;) repeat&lt;/span&gt;;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt;fixed&lt;/span&gt;;
&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt;100%&lt;/span&gt;;
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt;70px&lt;/span&gt;;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;    bottom&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;
&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;    left&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;    color&lt;/span&gt;:&lt;span&gt;#fff&lt;/span&gt;;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    text-shadow&lt;/span&gt;:&lt;span&gt;2px 2px #000&lt;/span&gt;;
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;提高浏览器的兼容性&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    -moz-box-shadow&lt;/span&gt;:&lt;span&gt;5px 1px 10px #000&lt;/span&gt;;
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    -webkit-box-shadow&lt;/span&gt;:&lt;span&gt;5px 1px 10px #000&lt;/span&gt;;
&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;    box-shadow&lt;/span&gt;:&lt;span&gt;5px 1px 10px #000&lt;/span&gt;;
&lt;span&gt; 40&lt;/span&gt; }
&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;footer h1
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; {
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;    font&lt;/span&gt;:&lt;span&gt;25px/26px Acens&lt;/span&gt;;
&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;    font-weight&lt;/span&gt;:&lt;span&gt;normal&lt;/span&gt;;
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;    left&lt;/span&gt;:&lt;span&gt;50%&lt;/span&gt;;
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;    margin&lt;/span&gt;:&lt;span&gt;0px 0 0 150px&lt;/span&gt;;
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt;25px 0&lt;/span&gt;;
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt;relative&lt;/span&gt;;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt;400px&lt;/span&gt;;
&lt;span&gt; 50&lt;/span&gt; }
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;footer a.orig,
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;a.orig:visited
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; {
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;    background&lt;/span&gt;:&lt;span&gt;url(&quot;../images/demo2.png&quot;) no-repeat right top&lt;/span&gt;;
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;    border&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;    text-decoration&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;    color&lt;/span&gt;:&lt;span&gt;#FCFCFC&lt;/span&gt;;
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;    font-size&lt;/span&gt;:&lt;span&gt;14px&lt;/span&gt;;
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt;70px&lt;/span&gt;;
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;    left&lt;/span&gt;:&lt;span&gt;50%&lt;/span&gt;;
&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt;50px&lt;/span&gt;;
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;    margin&lt;/span&gt;:&lt;span&gt;12px 0 0 -400px&lt;/span&gt;;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt;absolute&lt;/span&gt;;
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;    top&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt;250px&lt;/span&gt;;
&lt;span&gt; 66&lt;/span&gt; }
&lt;span&gt; 67&lt;/span&gt;      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;styling for the clock（时钟样式）&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;#clock
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; {
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 600px&lt;/span&gt;;
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 600px&lt;/span&gt;;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    list-style&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;    margin&lt;/span&gt;:&lt;span&gt; 20px auto&lt;/span&gt;;
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;    background&lt;/span&gt;:&lt;span&gt; url('../images/clock.png') no-repeat center&lt;/span&gt;;
&lt;span&gt; 76&lt;/span&gt;     
&lt;span&gt; 77&lt;/span&gt; }
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;#seconds,
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;#minutes,
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;#hours
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; {
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 30px&lt;/span&gt;;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 580px&lt;/span&gt;;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    left&lt;/span&gt;:&lt;span&gt; 270px&lt;/span&gt;;
&lt;span&gt; 86&lt;/span&gt; }
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;#date
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; {
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;    top&lt;/span&gt;:&lt;span&gt; 365px&lt;/span&gt;;
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    color&lt;/span&gt;:&lt;span&gt; #666&lt;/span&gt;;
&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    right&lt;/span&gt;:&lt;span&gt; 140px&lt;/span&gt;;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    font-weight&lt;/span&gt;:&lt;span&gt; bold&lt;/span&gt;;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    letter-spacing&lt;/span&gt;:&lt;span&gt; 3px&lt;/span&gt;;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    font-family&lt;/span&gt;:&lt;span&gt; &quot;微软雅黑&quot;&lt;/span&gt;;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    font-size&lt;/span&gt;:&lt;span&gt; 30px&lt;/span&gt;;
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;
&lt;span&gt; 98&lt;/span&gt; }
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;#hours
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; {
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    background&lt;/span&gt;:&lt;span&gt; url('../images/hands.png') no-repeat left&lt;/span&gt;;
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    z-index&lt;/span&gt;:&lt;span&gt; 1000&lt;/span&gt;;
&lt;span&gt;103&lt;/span&gt; }
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;#minutes
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; {
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;    background&lt;/span&gt;:&lt;span&gt; url('../images/hands.png') no-repeat center&lt;/span&gt;;
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt;25px&lt;/span&gt;;
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;    z-index&lt;/span&gt;:&lt;span&gt; 2000&lt;/span&gt;;
&lt;span&gt;109&lt;/span&gt; }
&lt;span&gt;110&lt;/span&gt; 
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;#seconds
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; {
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;    background&lt;/span&gt;:&lt;span&gt; url('../images/hands.png') no-repeat right&lt;/span&gt;;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;    z-index&lt;/span&gt;:&lt;span&gt; 3000&lt;/span&gt;;
&lt;span&gt;115&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;3.js代码&lt;/p&gt;
&lt;p&gt;（1）需要下载一个js的引用包（百度或者谷歌一下你就知道）&lt;/p&gt;
&lt;p&gt;（2）js代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c9679fb3-9405-4d12-a5d1-afa3e199f16a')&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_c9679fb3-9405-4d12-a5d1-afa3e199f16a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c9679fb3-9405-4d12-a5d1-afa3e199f16a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c9679fb3-9405-4d12-a5d1-afa3e199f16a',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c9679fb3-9405-4d12-a5d1-afa3e199f16a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; $(document).ready(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;动态插入HTML代码，标记时钟    &lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; clock =&lt;span&gt; [
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         '&amp;lt;ul id=&quot;clock&quot;&amp;gt;'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         '&amp;lt;li id=&quot;date&quot;&amp;gt;&amp;lt;/li&amp;gt;'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         '&amp;lt;li id=&quot;seconds&quot;&amp;gt;&amp;lt;/li&amp;gt;'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         '&amp;lt;li id=&quot;hours&quot;&amp;gt;&amp;lt;/li&amp;gt;'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         '&amp;lt;li id=&quot;minutes&quot;&amp;gt;&amp;lt;/li&amp;gt;'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         '&amp;lt;/ul&amp;gt;'].join(''&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 逐渐显示时钟，并把它附加到主页面中    &lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     $(clock).fadeIn().appendTo('body'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每一秒钟更新时钟视图的自动执行函数&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;也可以使用此方法： setInterval (function Clock (){})();&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     (&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Clock() {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到日期和时间&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; date = &lt;span&gt;new&lt;/span&gt; Date().getDate(),        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到当前日期&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;            hours = &lt;span&gt;new&lt;/span&gt; Date().getHours(),       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到当前小时&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;          minutes = &lt;span&gt;new&lt;/span&gt; Date().getMinutes();        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到当前分钟&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;          seconds = &lt;span&gt;new&lt;/span&gt; Date().getSeconds(),     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到当前秒&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;               ms = &lt;span&gt;new&lt;/span&gt; Date().getMilliseconds();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到当前毫秒&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将当前日期显示在时钟上&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         $(&quot;#date&quot;&lt;span&gt;).html(date);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前秒数，确定秒针位置&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; srotate = seconds + ms / 1000&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         $(&quot;#seconds&quot;&lt;span&gt;).css({
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;确定旋转角度&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             'transform': 'rotate(' + srotate * 6 + 'deg)'&lt;span&gt;,       
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前分钟数，得到分针位置&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; mrotate = minutes + srotate / 60&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         $(&quot;#minutes&quot;&lt;span&gt;).css({
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             'transform': 'rotate(' + mrotate * 6 + 'deg)'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;提高浏览器的兼容性&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             '-moz-transform': 'rotate(' + mrotate * 6 + 'deg)'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             '-webkit-transform': 'rotate(' + mrotate * 6 + 'deg)'
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前小时，得到时针位置&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; hrotate = hours % 12 + (minutes / 60&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         $(&quot;#hours&quot;&lt;span&gt;).css({
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             'transform': 'rotate(' + hrotate * 30 + 'deg)'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;提高浏览器的兼容性&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             '-moz-transform': 'rotate(' + hrotate * 30 + 'deg)'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             '-webkit-transform': 'rotate(' + hrotate * 30 + 'deg)'
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每一秒后执行一次时钟函数&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         setTimeout(Clock, 1000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    })();
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;4.一些必要的图片素材（c此处不再一一列举或展示）&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;注释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Transform 属性&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171022000302271-2090300240.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.rotate() 方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201562/201710/1201562-20171022000329427-2052792901.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Oct 2017 16:17:00 +0000</pubDate>
<dc:creator>青衫故人1</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pang951189/p/7707482.html</dc:identifier>
</item>
<item>
<title>go基础编程    day-1 - WrYcF</title>
<link>http://www.cnblogs.com/wuyongcong/p/7707474.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuyongcong/p/7707474.html</guid>
<description>&lt;h2&gt;Go语言的特性&lt;/h2&gt;
&lt;p&gt;开启了学习新的语言路程，记录每天学习的笔记，与大家一起分享。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;①&lt;/strong&gt;、自动垃圾回收&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;②&lt;/strong&gt;、更丰富的内置类型&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;③&lt;/strong&gt;、函数多返回值&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;④&lt;/strong&gt;、错误处理&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑤&lt;/strong&gt;、匿名函数和闭包&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑥&lt;/strong&gt;、类型和接口&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑦&lt;/strong&gt;、并发编程&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑧&lt;/strong&gt;、反射&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;⑨&lt;/strong&gt;、语言交互性&lt;/p&gt;
&lt;h2&gt;Go内置的关键字&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;break&lt;/span&gt;    &lt;span&gt;default&lt;/span&gt;    func    &lt;span&gt;interface&lt;/span&gt;    &lt;span&gt;select&lt;/span&gt;

&lt;span&gt;case&lt;/span&gt;       defer     go        map           &lt;span&gt;struct&lt;/span&gt;&lt;span&gt;

chan       &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;      &lt;span&gt;goto&lt;/span&gt;     package     &lt;span&gt;switch&lt;/span&gt;

&lt;span&gt;const&lt;/span&gt;       fallthrough      &lt;span&gt;if&lt;/span&gt;&lt;span&gt;         range    type

&lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;    &lt;span&gt;for&lt;/span&gt;       import       &lt;span&gt;return&lt;/span&gt;      &lt;span&gt;var&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go的注释方法有以下两种：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;           单行注释&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;      多行注释
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go程序的一般结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、go程序是通过package 来阻止的。

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、值有package名称为main的包可以包含main函数。

&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、一个可执行程序 有且仅有 一个main包。

&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;、通过import关键字来导入其它非main包。

&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;、通过const关键字来进行常量的定义。

&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;、通过在函数体外部使用var来进行全局变量的声明与赋值。

&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;、通过type关键字来进行结构struct或接口insterface的声明。

&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;、通过func关键字来进行函数的声明。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Go语言的导包方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        导入单个包                                                                          导入多个包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/940171/201710/940171-20171022000335756-1430153891.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;package别名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、当用第三方包时，包名和包名可能会非常接近或者相同，此时就可以使用别名来进行却别和调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/940171/201710/940171-20171021235841256-1930663418.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图就是给 “fmt”  包 设置一个新的别名 io&lt;/p&gt;
&lt;p&gt;&lt;span&gt;给包名设置别名时不建议使用的名字 (.)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/940171/201710/940171-20171022000011990-812874239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Go的可见性规则&lt;/h2&gt;
&lt;p&gt;Go语言中，使用大小写来决定该， &lt;strong&gt;常量&lt;/strong&gt;、&lt;strong&gt;变量&lt;/strong&gt;、&lt;strong&gt;接口&lt;/strong&gt;、&lt;strong&gt;结构&lt;/strong&gt;或&lt;strong&gt;函数&lt;/strong&gt; 是否可以被调用。&lt;/p&gt;
&lt;p&gt;根据约定，函数名首字母 小写 即为private&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/940171/201710/940171-20171022000223912-208112142.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;函数首字母大写即为public&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/940171/201710/940171-20171022000300912-1620526141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Go基础编程  day1的代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/940171/201710/940171-20171022000717006-991215038.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Oct 2017 16:08:00 +0000</pubDate>
<dc:creator>WrYcF</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuyongcong/p/7707474.html</dc:identifier>
</item>
<item>
<title>（@WhiteTaken）设计模式学习——组合模式 - WhiteTaken</title>
<link>http://www.cnblogs.com/WhiteTaken/p/7707416.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WhiteTaken/p/7707416.html</guid>
<description>&lt;p&gt;&lt;span&gt;下面来学习一下组合模式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;组合模式概念是什么呢。从别的地方抄来了一些理论。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;理论：将对象组合成树形结构以表示“部分-整体”的层次结构。Composite模式使得用户对单个对象和组合对象的使用具有一致性。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;拙见：组合模式就是为处理树形结构优化出来的一套理论方法。-_-!!!用递归可以统一处理树形结构中的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面直接上代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总公司  --分公司&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　    --分公司下属分公司&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　    --分公司下属办事处&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　     --分公司办事处&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接口类ICompany。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import java.util.List;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ICompany {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display();
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean add(ICompany company);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean remove(ICompany company);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;ICompany&amp;gt;&lt;span&gt; getChild();
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;公司类Company。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import java.util.ArrayList;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import java.util.List;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Company implements ICompany {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;ICompany&amp;gt;&lt;span&gt; children;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Company(String name) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.children = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;ICompany&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(name);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean add(ICompany company) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; children.add(company);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean remove(ICompany company) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; children.remove(company);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;ICompany&amp;gt;&lt;span&gt; getChild() {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; children;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;办事处类ConcreteCompany。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import java.util.ArrayList;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import java.util.List;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConcreteCompany implements ICompany {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ConcreteCompany(String name) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; display() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         System.&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(name);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean add(ICompany company) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean remove(ICompany company) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;ICompany&amp;gt;&lt;span&gt; getChild() {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;&lt;span&gt;26&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;测试类MainClass。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import java.util.List;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * 组合模式测试
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainClass {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         ICompany company = &lt;span&gt;new&lt;/span&gt; Company(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;总公司&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         ICompany company1 = &lt;span&gt;new&lt;/span&gt; Company(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分公司1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         ICompany company2 = &lt;span&gt;new&lt;/span&gt; Company(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分公司2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         ICompany company3 = &lt;span&gt;new&lt;/span&gt; ConcreteCompany(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分公司办事处&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        company.add(company1);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        company.add(company2);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        company.add(company3);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;         ICompany company11 = &lt;span&gt;new&lt;/span&gt; Company(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分公司1下属公司1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         ICompany company12 = &lt;span&gt;new&lt;/span&gt; Company(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分公司1下属公司2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         ICompany company13 = &lt;span&gt;new&lt;/span&gt; ConcreteCompany(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分公司1下属办事处&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        company1.add(company11);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        company1.add(company12);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        company1.add(company13);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         
&lt;span&gt;23&lt;/span&gt;         ICompany company21 = &lt;span&gt;new&lt;/span&gt; Company(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分公司2下属公司&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         ICompany company22 = &lt;span&gt;new&lt;/span&gt; ConcreteCompany(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;分公司2下属办事处&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        company2.add(company21);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        company2.add(company22);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         
&lt;span&gt;28&lt;/span&gt;         displayAllCompany(company, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; displayAllCompany(ICompany rootCompany, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; deep) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; deep; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             System.&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        rootCompany.display();
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         List&amp;lt;ICompany&amp;gt; children =&lt;span&gt; rootCompany.getChild();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(ICompany company:children)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(company instanceof ConcreteCompany)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt;= deep; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     System.&lt;span&gt;out&lt;/span&gt;.print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                company.display();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 displayAllCompany(company, deep + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;以上代码主要就是用递归方法遍历了公司的结构。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1088633/201710/1088633-20171021233720162-731494721.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个模式的精华都在代码里，大家自己体会吧。。。共同进步！！！&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 21 Oct 2017 15:41:00 +0000</pubDate>
<dc:creator>WhiteTaken</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WhiteTaken/p/7707416.html</dc:identifier>
</item>
<item>
<title>编程思维的养成——我的信息技术之路之五 - 孤荷凌寒</title>
<link>http://www.cnblogs.com/lhghroom/p/7706153.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lhghroom/p/7706153.html</guid>
<description>&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;e40rb-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;e40rb-0-0&quot;&gt;　　提到编程，当然要知道编程思想的进化史，而半路出家又特别是自学编程的人往往没有经过系统专业培养，这部分往往会被忽视，但“是思维习惯指导着行动”，了解程序编写的发展历史才能了解进化思路。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;3k9uc-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;3k9uc-0-0&quot;&gt;　　作为我入手的VB6并不是完美的面向对象的高级语言，但已算是比较合适学习的优秀的面向过程的高级语言了，初学之，从归提炼代码，养成面向过程——形成养成写可重复使用的块的好习惯，也是编程路上必不可少的阶段。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;e8qeq-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;e8qeq-0-0&quot;&gt;　　我自己作为一名小学老师深知：思维习惯的形成非常缓慢，绝非说今天想到今天就可以做到，是不断在反复的反馈刺激后才能固定下来的思维回路，最终才可以在不经主观强化约束的情况下默认执行。刚开始必须反复纠正之，反复重构之。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;1nial-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;1nial-0-0&quot;&gt;　　一开始写代码，举个例子，连接ACCESS数据库，按钮一的点击代码中需要打开数据库的某个表进行操作，然后关闭它；按钮二的点击代码中也需要打开这个数据库的另一个表进行另一些操作，然后再关闭它（这儿只是简单举例，初学者可关注，高手请绕道）。那么查阅自己过往作品，特别是能找到的初期作品，就发现一个问题：两个按钮的点击事件中的代码都是按照如下流程走的：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;39jcv-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;39jcv-0-0&quot;&gt;按钮一被单击时要执行的操作（）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;j26k-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;j26k-0-0&quot;&gt;&lt;span data-offset-key=&quot;j26k-0-1&quot;&gt;　　找到要连接的ACCESS数据库文件&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;dp9p-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;dp9p-0-0&quot;&gt;&lt;span data-offset-key=&quot;dp9p-0-1&quot;&gt;　　判断这个文件是否存在&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;m7la-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;m7la-0-0&quot;&gt;　　连接到指定的ACCESS数据库文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;57ajd-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;57ajd-0-0&quot;&gt;&lt;span data-offset-key=&quot;57ajd-0-1&quot;&gt;　　&lt;em&gt;打开要操作的数据表一&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;a7k1t-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;a7k1t-0-0&quot;&gt;　　执行按钮一要做的操作&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;8d0pa-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;8d0pa-0-0&quot;&gt;&lt;span data-offset-key=&quot;8d0pa-0-1&quot;&gt;　　&lt;em&gt;关闭要操作的数据表&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;ft75b-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;ft75b-0-0&quot;&gt;&lt;span data-offset-key=&quot;ft75b-0-1&quot;&gt;　　断开与指定的ACCESS数据库文件的连接&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;4spdv-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;4spdv-0-0&quot;&gt;结束按钮一被单击时要执行的操作&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;1hjn2-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;1hjn2-0-0&quot;&gt;按钮二被单击时要执行的操作（）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;1jbh9-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;1jbh9-0-0&quot;&gt;　　找到要连接的ACCESS数据库文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;f6a35-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;f6a35-0-0&quot;&gt;　　判断这个文件是否存在&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;18e3j-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;18e3j-0-0&quot;&gt;　　连接到指定的ACCESS数据库文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;dp2hc-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;dp2hc-0-0&quot;&gt;　　&lt;em&gt;打开要操作的数据表二&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;fv4ot-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;fv4ot-0-0&quot;&gt;　　执行要做的操作&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;acopj-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;acopj-0-0&quot;&gt;　　&lt;em&gt;关闭要操作的数据表&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;dpf81-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-offset-key=&quot;dpf81-0-0&quot;&gt;　　断开与指定的ACCESS数据库文件的连接&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;46b0c-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;46b0c-0-0&quot;&gt;结束按钮二被单击时要执行的操作&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;dnj8o-0-0&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;dnj8o-0-0&quot;&gt;　　两个按钮中加粗显示的部分可以发现是重复的，如果在两个按钮的点击事件中都写这些代码，将造成重复劳动,当然事实上是复制粘贴，但又造成另一个问题，出了错，将要修改两处，如果找不到错误在哪儿就更惨——这种事在我的过往经历中经常发生，往往花个通宵甚至都无法找到到底错在哪儿。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;51v57-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;51v57-0-0&quot;&gt;　　其实我们可以将上面加粗显示部分的操作，分别放到两个可调用 的 程序 块中，称之为 函数的东西里，使用时直接调用之就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;csvv8-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;csvv8-0-0&quot;&gt;　　而事实上上面两个按钮的单击事件中，斜体显示的部分，虽然操作的是两个不同的表，但&lt;span data-offset-key=&quot;csvv8-0-1&quot;&gt;基础操作&lt;span data-offset-key=&quot;csvv8-0-2&quot;&gt;是一样的：都是打开某一张表，则也可以放到一个程序块中，只是在调用块时，需要告诉这个程序块，你给我打开哪张表就行了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;5iqlp-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;5iqlp-0-0&quot;&gt;　　但是，往后过了将近一年，这种不是面向过程的思维习惯才被慢慢改正过来，可见一个思维习惯的形成是多么艰难。往后查看一些作品源代码，就可见如上例中的程序流程就变成了这样：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;2jqa6-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;2jqa6-0-0&quot;&gt;程序块一_我是负责连接那个ACCESS数据库文件的（）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;6qrmk-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;6qrmk-0-0&quot;&gt;　　找到要连接的ACCESS数据库文件&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;9sfb2-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9sfb2-0-0&quot;&gt;　　判断这个文件是否存在&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;bh0cm-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bh0cm-0-0&quot;&gt;　　连接到指定的ACCESS数据库文件&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;4h4uv-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;4h4uv-0-0&quot;&gt;　　返回连接后的结果&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;c0ono-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;c0ono-0-0&quot;&gt;结束程序块一&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;6qds0-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;6qds0-0-0&quot;&gt;程序块二_我是负责断开与那个ACESS数据库文件的（）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;75h77-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;75h77-0-0&quot;&gt;　　断开与指定的ACCESS数据库文件的连接&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;a8bhk-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;a8bhk-0-0&quot;&gt;　　返回断开是否成功的结果&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;sae9-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;sae9-0-0&quot;&gt;结束程序块二&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;e9l5k-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;e9l5k-0-0&quot;&gt;程序块三_我是负责打开想要打开的表（这儿告诉我要打开哪个表）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;baemo-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;baemo-0-0&quot;&gt;　　打开【这儿告诉我的要打开的那个表】&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;de2u3-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;de2u3-0-0&quot;&gt;　　返回打开的结果&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;5mg33-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;5mg33-0-0&quot;&gt;结束程序块三&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;dc4lp-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;dc4lp-0-0&quot;&gt;程序块四_我是负责关闭想要关闭的表（这儿告诉我要关闭哪个表）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;1dko6-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;1dko6-0-0&quot;&gt;　　关闭【这儿告诉我的要关闭的那个表】&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;7t93r-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;7t93r-0-0&quot;&gt;　　返回关闭的结果&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;5uf64-0-0&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;5uf64-0-0&quot;&gt;结束程序块四&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;9dt65-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9dt65-0-0&quot;&gt;按钮一被单击时要执行的操作（）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;40dlh-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;40dlh-0-0&quot;&gt;　　呼叫 &lt;span data-offset-key=&quot;40dlh-0-1&quot;&gt;程序块一 完成它的操作&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;d38s-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;d38s-0-0&quot;&gt;　　呼叫 &lt;span data-offset-key=&quot;d38s-0-1&quot;&gt;程序块三（&lt;span data-offset-key=&quot;d38s-0-2&quot;&gt;表一&lt;span data-offset-key=&quot;d38s-0-3&quot;&gt;） 完成它的操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;cs4ha-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;cs4ha-0-0&quot;&gt;　　执行按钮一要执行的操作&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;6h51-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;6h51-0-0&quot;&gt;　　呼叫 &lt;span data-offset-key=&quot;6h51-0-1&quot;&gt;程序块四（&lt;span data-offset-key=&quot;6h51-0-2&quot;&gt;表一&lt;span data-offset-key=&quot;6h51-0-3&quot;&gt;） 完成它的操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;416vs-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;416vs-0-0&quot;&gt;　　呼叫 &lt;span data-offset-key=&quot;416vs-0-1&quot;&gt;程序块二 完成它的操作&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;f4cer-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;f4cer-0-0&quot;&gt;结束按钮一单击时的操作&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;a8ogt-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;a8ogt-0-0&quot;&gt;按钮二被单击时要执行的操作（）&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;4urrp-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;4urrp-0-0&quot;&gt;　　呼叫 &lt;span data-offset-key=&quot;4urrp-0-1&quot;&gt;程序块一 完成它的操作&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;6e6s0-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;6e6s0-0-0&quot;&gt;　　呼叫 &lt;span data-offset-key=&quot;6e6s0-0-1&quot;&gt;程序块三（&lt;span data-offset-key=&quot;6e6s0-0-2&quot;&gt;表二&lt;span data-offset-key=&quot;6e6s0-0-3&quot;&gt;） 完成它的操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;7ja88-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;7ja88-0-0&quot;&gt;　　执行按钮二要执行的操作&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;ctud2-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ctud2-0-0&quot;&gt;　　呼叫 &lt;span data-offset-key=&quot;ctud2-0-1&quot;&gt;程序块四（&lt;span data-offset-key=&quot;ctud2-0-2&quot;&gt;表二&lt;span data-offset-key=&quot;ctud2-0-3&quot;&gt;） 完成它的操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;9eddq-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;9eddq-0-0&quot;&gt;　　呼叫 &lt;span data-offset-key=&quot;9eddq-0-1&quot;&gt;程序块二 完成它的操作&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;ec0ds-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ec0ds-0-0&quot;&gt;结束按钮一单击时的操作&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;77dof-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;77dof-0-0&quot;&gt;　　正是保证学习的思维每天都有进步和改变，也正是坚持每天都改变自己一点点，这种面向过程的编程思维就形成了一种习惯思维，每次开始写具体控件(如按钮就是一种控件）时，都会先自发地想到是否 些代码可以单独放到一个 程序 块中？独立的程序 块（就是专门供别人笑呼叫使唤的程序 块）多了，是不是可以专门建立 一个模块文件保存起来？&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;7qi44-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;7qi44-0-0&quot;&gt;　　通过这样每天进步一点点，每天改变一点点，终于完成了编程思维完全的完成面向过程编程的转变。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;399p8-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;399p8-0-0&quot;&gt;　　后来，当学习JAVA等时，又自然地养成了面向对象的思维习惯的转变，一下手，就会自觉地习惯地想到：把这些要反复和到的功能当作一个独立的类吧，让它自己做什么，有什么特点，有什么可自上继承的等等，这样，思维一到，代码竟活了起来，编程竟自然有趣起来。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;bvcs9-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bvcs9-0-0&quot;&gt;因为日子每天在改变，世界每天在改变，只有让自己每天都有新的改变与进步，才可能适应这个变化 的世界，那就是每天进步一点点，一年，十年，变化 就相当惊人了。转变思维，跟上时代的思维才能让自己永远走在时代的前列。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;b4548-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;b4548-0-0&quot;&gt;　　记得读书时代，教我画国画的老师讲过一个小事，他说他有个邻居很喜欢画国画，但好多年来，每次下笔画小鸡等，笔法顺序基本一样，只只小鸡都差不多，虽然确实是特别爱画画，但多年来画作几乎数年如一日，没有二致，还到处卖弄自己的作品——旁人不语，但实在可悲。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;b25bg-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;b25bg-0-0&quot;&gt;　　这个故事当时给我巨大的触动，这些年来，给愿意向我学习的徒弟们，我多数并不会教他们具体要怎么去写代码，要做些什么，我只告诉他们要达到什么目标，其余让他们自己去探索，只是上面那个故事是要经常作为鞭子鞭策他们的。很多徒弟们进步还是非常之大，迅速实现了自我的不断蜕变，这便是从心培养思维，由内心思维的转变而驱动外在行动变化 的力量。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;1s20v&quot; data-offset-key=&quot;8rc3i-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;8rc3i-0-0&quot;&gt;　　如果说编程学习除了改变了我粗枝大叶的行动习惯之外还给我带来了什么的话，最大的收获便是——改变了人思维的习惯，使思维可以如水般随时适应时代这个容器的任何变化 。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;


</description>
<pubDate>Sat, 21 Oct 2017 12:45:00 +0000</pubDate>
<dc:creator>孤荷凌寒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lhghroom/p/7706153.html</dc:identifier>
</item>
<item>
<title>初学者易上手的SSH-hibernate02 三种查询方式 - 柯一</title>
<link>http://www.cnblogs.com/lzx2509254166/p/7705826.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzx2509254166/p/7705826.html</guid>
<description>&lt;p&gt;在上一章中已经搭建好了一个hibernate的环境，那么这一章我们就使用这个环境来进行基本CRUD。在这之前我们先了解一个东西:主键生成策略。就是当向数据库表中插入记录的时候，这个记录的主键该如何生成.用法:将hbm.xml文件中&amp;lt;id&amp;gt;节点下的 &amp;lt;generator/&amp;gt;节点中的class 改成以下关键字即可。以下是简介版。推荐使用uuid&lt;/p&gt;
&lt;p&gt;01 assigned&lt;br/&gt;主键由外部程序负责生成，在 save() 之前必须指定一个，Hibernate不负责维护主键生成。也就是可以每次指定主键。该方式不推荐&lt;/p&gt;
&lt;p&gt;02 increment&lt;br/&gt;这种方式在每次插入前，需要通过“select max(主键) from 表名 ”这种方式先查询最大ID，然后通过ID+1来作为新的主键值。这种方式也不推荐，因为这样会出现线程安全问题。&lt;/p&gt;
&lt;p&gt;03 identity&lt;br/&gt;identity由底层数据库生成标识符。identity是由数据库自己生成的，但这个主键必须设置为自增长，使用identity的前提条件是底层数据库支持自动增长字段类型，如DB2、SQL Server、MySQL、Sybase和HypersonicSQL等，Oracle这类没有自增字段的则不支持。&lt;/p&gt;
&lt;p&gt;04 sequence&lt;br/&gt;采用数据库提供的sequence机制生成主键，需要数据库支持sequence。如oralce、DB、SAP DB、PostgerSQL、McKoi中的sequence。MySQL这种不支持sequence的数据库则不行&lt;/p&gt;
&lt;p&gt;05 hilo&lt;br/&gt;hilo（高低位方式high low）是hibernate中最常用的一种生成方式，需要一张额外的表保存hi的值。保存hi值的表至少有一条记录（只与第一条记录有关），否则会出现错误。可以跨数据库。&lt;/p&gt;
&lt;p&gt;06 native&lt;br/&gt;native由hibernate根据使用的数据库自行判断采用identity、hilo、sequence其中一种作为主键生成方式，灵活性很强。如果能支持identity则使用identity，如果支持sequence则使用sequence。&lt;/p&gt;
&lt;p&gt;07 uuid&lt;br/&gt;UUID：Universally Unique Identifier，是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字，标准的UUID格式为：xxxxxxxx-xxxx-xxxx-xxxxxx-xxxxxxxxxx (8-4-4-4-12)&lt;/p&gt;
&lt;p&gt;好了，接下来开始这章的主要内容。hibernate的三种方式实现CRUD。首先在src/test/java文件夹下新建package（com.test）,新建类 Test.类中写一个方法叫做temp,加上@Test标记&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; temp() {
    
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以在cfg.xml中的&amp;lt;session-factory&amp;gt;节点中添加如下代码，以便在控制台来查看我们提交的sql语句。方便修改错误。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
      &amp;lt;!--显示sql语句 --&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;show_sql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/property&amp;gt;
        &amp;lt;!--格式化Hibernate的SQL输出语句。 --&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;format_sql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在temp方法中写上如下代码:&lt;span&gt;&lt;strong&gt;代码写完后选择项目鼠标右键Run As -&amp;gt;Junit Test 运行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;第一种:Hibernate提供的Query By Criteria API来查询对象 即QBC。&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;增加:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        //添加一条数据&lt;br/&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启事物&lt;/span&gt;
        Transaction transaction =&lt;span&gt; session.beginTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化对象&lt;/span&gt;
        Student st = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Student();
        st.setName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王五&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        st.setSex(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        st.setAddress(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;长沙&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交数据&lt;/span&gt;
&lt;span&gt;        session.save(st);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交事物&lt;/span&gt;
&lt;span&gt;        transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查询单个:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启事物&lt;/span&gt;
        //Transaction transaction =&lt;span&gt; session.beginTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据主键得到对象(查询单个记录)&lt;/span&gt;
        Student st = session.&lt;span&gt;get&lt;/span&gt;(Student.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(st);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交数据
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; session.save(st);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交事物
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;修改:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启事物&lt;/span&gt;
        Transaction transaction =&lt;span&gt; session.beginTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据主键得到对象(查询单个记录)&lt;/span&gt;
        Student st = session.&lt;span&gt;get&lt;/span&gt;(Student.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置修改值&lt;/span&gt;
        st.setName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交数据 saveOrUpdate意为:存在修改,不存在增加 修改也可以用Update&lt;/span&gt;
&lt;span&gt;        session.saveOrUpdate(st);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(st);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交事物&lt;/span&gt;
&lt;span&gt;        transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查询所有:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启事物&lt;/span&gt;
        // Transaction transaction =&lt;span&gt; session.beginTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查询所有记录&lt;/span&gt;
        List&amp;lt;Student&amp;gt; ls = session.createCriteria(Student.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Student student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(student);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交数据 saveOrUpdate意为:存在修改,不存在增加 修改也可以用Update
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; session.saveOrUpdate(st);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交事物
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;删除:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启事物&lt;/span&gt;
        Transaction transaction =&lt;span&gt; session.beginTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据主键得到对象(查询单个记录)&lt;/span&gt;
        Student st = session.&lt;span&gt;get&lt;/span&gt;(Student.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交数据&lt;/span&gt;
&lt;span&gt;        session.delete(st);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交事物&lt;/span&gt;
&lt;span&gt;         transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二种:Hibernate官方推荐的标准查询Hibernate Query Language 即HQl查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查询所有:&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 注意:用HQL查询from后面接的是实体类名&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;        List&amp;lt;Student&amp;gt; ls = session.createQuery(&quot;from Student&quot;).list();&lt;br/&gt;         for (Student student : ls) {&lt;br/&gt;         System.out.println(student);&lt;br/&gt;          ｝&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;查询单个属性:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
List&lt;/span&gt;&amp;lt;String&amp;gt; ls = session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select name from Student&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(student);
        }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查询多个属性：object[]实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();



    List&lt;/span&gt;&amp;lt;Object[]&amp;gt; ls = session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select name,sex,age from Student&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Object[] student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(student[&lt;span&gt;0&lt;/span&gt;] + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + student[&lt;span&gt;1&lt;/span&gt;] + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + student[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);
        }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;查询多个属性：构造方法实现(先要在实体类中重载构造方法)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
List&lt;/span&gt;&amp;lt;Student&amp;gt; ls = session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select new Student(name,sex) from Student&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Student student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(student);
        }

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;条件查询:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; List&amp;lt;Student&amp;gt; ls = session.createQuery(&quot;from Student where age
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; between ? and ?&quot;).setInteger(0, 10).setInteger(1, 50).list();&lt;/span&gt;
        List&amp;lt;Student&amp;gt; ls = session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;from Student where age between :begin and :end&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                .setParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;begin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;).setParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Student student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(student);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;聚合函数:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        String parm &lt;/span&gt;= session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select max(age) from Student&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).uniqueResult().toString();
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(parm);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;排序:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
    List&lt;/span&gt;&amp;lt;Student&amp;gt; ls = session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;from Student order by age desc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Student student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(student);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;分组:构造方法实现(先要在实体类中重载构造方法)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; List&amp;lt;Student&amp;gt; ls = session.createQuery(&quot;select new
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Student(sex,max(age)) from Student group by sex&quot;).list();&lt;/span&gt;
        List&amp;lt;Object[]&amp;gt; ls = session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select sex,max(age) from Student group by sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Object[] student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(student[&lt;span&gt;0&lt;/span&gt;] + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + student[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Like:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
    List&lt;/span&gt;&amp;lt;Student&amp;gt; ls = session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;from Student where name like ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setParameter(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%1%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Student student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(student);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;分页:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
    List&lt;/span&gt;&amp;lt;Student&amp;gt; ls = session.createQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;from Student&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setFirstResult(&lt;span&gt;10&lt;/span&gt;).setMaxResults(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;).list();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Student student : ls) {
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(student);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;修改:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启事物&lt;/span&gt;
        Transaction transaction =&lt;span&gt; session.beginTransaction();
        session.createQuery(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;update Student set name = :name where age=10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setParameter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;哈哈&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).executeUpdate();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交事物&lt;/span&gt;
&lt;span&gt;        transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;删除:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取配置信息&lt;/span&gt;
        Configuration configuration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration().configure();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session工厂&lt;/span&gt;
        SessionFactory factory =&lt;span&gt; configuration.buildSessionFactory();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 得到Session&lt;/span&gt;
        Session session =&lt;span&gt; factory.openSession();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启事物&lt;/span&gt;
        Transaction transaction =&lt;span&gt; session.beginTransaction();
        session.createQuery(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete Student where age=?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).setParameter(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;).executeUpdate();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交事物&lt;/span&gt;
&lt;span&gt;        transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭seeion&lt;/span&gt;
&lt;span&gt;        session.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭SessionFactory&lt;/span&gt;
        factory.close();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;第三种:原生态sql&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;这种方式基本不常用，所以就简单介绍下，具体的自己百度吧&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取所有查询结果&lt;/span&gt;
session.createSQLQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from note&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).list();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;仅获取第一条结果&lt;/span&gt;
session.createSQLQuery(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from note where id = 1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).uniqueResult();
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 21 Oct 2017 11:52:00 +0000</pubDate>
<dc:creator>柯一</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzx2509254166/p/7705826.html</dc:identifier>
</item>
<item>
<title>canvas图表详解系列（5）：雷达（面积）图 - 苏天天</title>
<link>http://www.cnblogs.com/chengduxiaoc/p/7705727.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chengduxiaoc/p/7705727.html</guid>
<description>&lt;p&gt;学习方式：详细阅读，并手动实现相关代码（如果没有canvas基础，需要先学习前面的canvas基础笔记）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;学习目标&lt;/strong&gt;：此教程将教会大家如何使用canvas绘制各种图表，本次讲解雷达（面积）图。&lt;/p&gt;&lt;p&gt;功能：图表可以根据数据自动变换比例，绘制中间范围的时候有由小到大的动画，鼠标移入到对应值会实现颜色变化，并且显示当前项的详细信息。&lt;/p&gt;&lt;p&gt;实现代码相对来说比前面讲的几个图表要简单些些，具体代码如下，相应的说明在代码注释中&lt;/p&gt;&lt;div readability=&quot;155&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head lang=&quot;en&quot;&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;&lt;span&gt;
        canvas{border: 1px solid #A4E2F9;}
    &lt;/span&gt;&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;chart&quot; height=&quot;400&quot; width=&quot;600&quot; style=&quot;margin:30px;&quot;&amp;gt;&amp;lt;/div&amp;gt;
    
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; goChart(cBox,dataArr,textArr,ifFill){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明所需变量&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; canvas,ctx;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表属性&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; cWidth, cHeight, cMargin, cSpace;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; originX, originY;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 主图属性&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; tobalDots, maxValue;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; lineStartAngle,radius;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; colorArr;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 运动相关变量&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; ctr, numctr, speed;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标移动&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; mousePosition =&lt;span&gt; {};
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建canvas并获得canvas上下文&lt;/span&gt;
               canvas = document.createElement(&quot;canvas&quot;&lt;span&gt;);
               &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(canvas &amp;amp;&amp;amp;&lt;span&gt; canvas.getContext){
                ctx &lt;/span&gt;= canvas.getContext(&quot;2d&quot;&lt;span&gt;);
            }
               
               canvas.innerHTML &lt;/span&gt;= &quot;你的浏览器不支持HTML5 canvas&quot;&lt;span&gt;;
               cBox.appendChild(canvas);
            
            initChart(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表初始化&lt;/span&gt;

            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表初始化&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; initChart(){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图表信息&lt;/span&gt;
                cMargin = 60&lt;span&gt;;
                cSpace &lt;/span&gt;= 60&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将canvas扩大2倍，然后缩小，以适应高清屏幕&lt;/span&gt;
                canvas.width = cBox.getAttribute(&quot;width&quot;)* 2&lt;span&gt; ;
                canvas.height &lt;/span&gt;= cBox.getAttribute(&quot;height&quot;)* 2&lt;span&gt;;
                canvas.style.height &lt;/span&gt;= canvas.height/2 + &quot;px&quot;;
                canvas.style.width = canvas.width/2 + &quot;px&quot;;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cHeight = canvas.height - cMargin*2-cSpace*2;&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cWidth = canvas.width - cMargin*2-cSpace*2;&lt;/span&gt;
                originX = canvas.width/2;
                originY = canvas.height/2;

                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 柱状图信息&lt;/span&gt;
                tobalDots =&lt;span&gt; textArr.length;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; allArr =&lt;span&gt; [];
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;dataArr.length; i++&lt;span&gt;){
                    allArr &lt;/span&gt;=&lt;span&gt; allArr.concat( dataArr[i].value );
                }
                maxValue &lt;/span&gt;= Math.max.apply(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,allArr);
                
                colorArr&lt;/span&gt;=[&quot;#AD93DB&quot;,&quot;#3AC9CB&quot;,&quot;#5FB2ED&quot;]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;颜色数据&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 运动相关&lt;/span&gt;
                ctr = 1&lt;span&gt;;
                numctr &lt;/span&gt;= 40&lt;span&gt;;
                speed &lt;/span&gt;= 1&lt;span&gt;;
                
                textPadding&lt;/span&gt;=20;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文字与文字基线线之间的间距&lt;/span&gt;
                lineStartAngle =Math.PI+ Math.PI/tobalDots; //起始绘制角度
                radius = originY-cMargin-cSpace; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;半径&lt;/span&gt;
&lt;span&gt;                
            }

            drawLineLabelMarkers(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制图表轴、标签和标记&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制图表轴、标签和标记&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawLineLabelMarkers(){
                ctx.font &lt;/span&gt;= &quot;24px Arial&quot;&lt;span&gt;;
                ctx.lineWidth &lt;/span&gt;= 2&lt;span&gt;;
                ctx.strokeStyle &lt;/span&gt;= &quot;#DBDBDB&quot;&lt;span&gt;;
                ctx.fillStyle &lt;/span&gt;= &quot;#000&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; startAngle =&lt;span&gt; lineStartAngle;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 五个底图环&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;6; i++&lt;span&gt;){
                       R &lt;/span&gt;= radius*(1-i/5); //五个
                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画一个环&lt;/span&gt;
&lt;span&gt;                       ctx.beginPath();
                       &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j=0; j&amp;lt;tobalDots+1; j++){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;多画一个闭合路径&lt;/span&gt;
                           startAngle = startAngle+2*Math.PI/tobalDots;
                           &lt;span&gt;var&lt;/span&gt; x = parseInt( originX+R*&lt;span&gt;Math.cos(startAngle) );
                           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y = originY+R*&lt;span&gt;Math.sin(startAngle);
                           
                           ctx.lineTo(x, y);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点连线&lt;/span&gt;
                           ctx.lineTo(originX, originY);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点到圆心连线&lt;/span&gt;
&lt;span&gt;                           ctx.moveTo(x, y);
                           
                           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制文字&lt;/span&gt;
                           &lt;span&gt;if&lt;/span&gt;(i==0 &amp;amp;&amp;amp;&lt;span&gt; textArr[j]){
                               drawMarkers(textArr[j],x,y)
                           }
                       }
                       
                       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(i%2==0&lt;span&gt;){
                           ctx.fillStyle &lt;/span&gt;= &quot;#ECECEC&quot;&lt;span&gt;;
                       }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                           ctx.fillStyle &lt;/span&gt;= &quot;#fff&quot;&lt;span&gt;;
                       }
                    ctx.closePath();
                       ctx.fill();
                       ctx.stroke();
                }
                
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制标记&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawMarkers(text,x,y){
                   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(x&amp;lt;originX &amp;amp;&amp;amp; y&amp;lt;=&lt;span&gt;originY){
                     ctx.textAlign&lt;/span&gt;=&quot;right&quot;&lt;span&gt;;
                     ctx.fillText(text, x&lt;/span&gt;-textPadding, y-&lt;span&gt;textPadding);
                 }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(x&amp;lt;originX &amp;amp;&amp;amp; y&amp;gt;&lt;span&gt;originY){
                     ctx.textAlign&lt;/span&gt;=&quot;right&quot;&lt;span&gt;;
                     ctx.fillText(text, x&lt;/span&gt;-textPadding, y+&lt;span&gt;textPadding);
                 }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(y&amp;lt;=&lt;span&gt;originY){
                     ctx.textAlign&lt;/span&gt;=&quot;left&quot;&lt;span&gt;;
                     ctx.fillText(text, x&lt;/span&gt;+textPadding, y-&lt;span&gt;textPadding);
                 }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                     ctx.textAlign&lt;/span&gt;=&quot;left&quot;&lt;span&gt;;
                     ctx.fillText(text, x&lt;/span&gt;+textPadding, y+&lt;span&gt;textPadding);
                 }
            };
            
            
            drawChartAnimate(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制动画&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制动画&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawChartAnimate(mouseMove){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ifTip = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tipArr = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环传入的多组数据&lt;/span&gt;
                   &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;dataArr.length; i++&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; startAngle =&lt;span&gt; lineStartAngle;
                       &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; nowArr =&lt;span&gt; dataArr[i].value;
                       &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arcArr =&lt;span&gt; [];
                    ctx.lineWidth &lt;/span&gt;= 4&lt;span&gt;;
                       
                    ctx.fillStyle &lt;/span&gt;= ctx.strokeStyle = colorArr[i%&lt;span&gt;colorArr.length];
                       ctx.beginPath();
                       &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j=0; j&amp;lt;tobalDots; j++&lt;span&gt;){
                           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; R = radius*(nowArr[j]/maxValue)*ctr/&lt;span&gt;numctr;
                           startAngle &lt;/span&gt;= startAngle+2*Math.PI/tobalDots;
                           &lt;span&gt;var&lt;/span&gt; x = originX+R*&lt;span&gt;Math.cos(startAngle);
                           &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y = originY+R*&lt;span&gt;Math.sin(startAngle);
                           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(x,y);&lt;/span&gt;
&lt;span&gt;                           
                           ctx.lineTo(x, y);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点连线&lt;/span&gt;
                           &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawArc(x,y,color,theTipArr){
                               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                                   ctx.beginPath();
                                   ctx.fillStyle &lt;/span&gt;= &quot;#fff&quot;&lt;span&gt;;
                                   ctx.strokeStyle &lt;/span&gt;=&lt;span&gt; color;
                                   ctx.lineWidth &lt;/span&gt;= 4*ctr/numctr;
                                   ctx.arc(x,y,6*ctr/numctr,0,Math.PI*2);
                                   
                                   &lt;span&gt;if&lt;/span&gt;(!ifTip &amp;amp;&amp;amp; mouseMove &amp;amp;&amp;amp; ctx.isPointInPath(mousePosition.x*2, mousePosition.y*2)){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是鼠标移动的到小点上，重新绘制图表&lt;/span&gt;
                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ctx.fillStyle = &quot;rgba(46,199,201,1)&quot;;&lt;/span&gt;
                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否绘制提示&lt;/span&gt;
                                    ifTip = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                                    tipArr &lt;/span&gt;=&lt;span&gt; theTipArr;
                                    ctx.lineWidth &lt;/span&gt;*= 2&lt;span&gt;;
                                  }
                                   
                                   ctx.fill();
                                   ctx.stroke();
                               };
                           }
                           arcArr.push( drawArc( x, y, colorArr[i&lt;/span&gt;%colorArr.length], [dataArr[i].name,nowArr[j],textArr[j]] ) ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将绘制圆点方法利用闭包存起来，后面统一调用，数据多时颜色循环使用&lt;/span&gt;
&lt;span&gt;                       }
                       
                    ctx.closePath();
                       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(ifFill){
                           ctx.globalAlpha &lt;/span&gt;= 0.3&lt;span&gt;;
                           ctx.fill();
                           ctx.globalAlpha &lt;/span&gt;= 1&lt;span&gt;;
                       }
                       ctx.stroke();
                       
                       &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; m=0; m&amp;lt;arcArr.length; m++&lt;span&gt;){
                           arcArr[m]();
                       }
                       
                       canvas.style.cursor &lt;/span&gt;= &quot;default&quot;&lt;span&gt;;
                       ifTip &lt;/span&gt;&amp;amp;&amp;amp; drawTips(mousePosition.x*2, mousePosition.y*2&lt;span&gt;,tipArr);
                       
                   }
                   
                
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ctr&amp;lt;&lt;span&gt;numctr){
                    ctr&lt;/span&gt;++&lt;span&gt;;
                    setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                        ctx.clearRect(&lt;/span&gt;0,0&lt;span&gt;,canvas.width, canvas.height);
                        drawLineLabelMarkers();
                        drawChartAnimate();
                    }, speed&lt;/span&gt;*=1.08&lt;span&gt;);
                }
            }
            
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制提示框&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawTips(oX,oY,valArr){
                
                canvas.style.cursor &lt;/span&gt;= &quot;pointer&quot;&lt;span&gt;;
                ctx.save();
                ctx.beginPath();
                ctx.fillStyle &lt;/span&gt;= &quot;rgba(0,0,0,0.5)&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; H = 120&lt;span&gt;;
                roundedRect(ctx,oX&lt;/span&gt;+10,oY-H/2,2*H,H,5);
&lt;span&gt;                
                ctx.fillStyle &lt;/span&gt;= &quot;#fff&quot;&lt;span&gt;;
                ctx.textAlign&lt;/span&gt;=&quot;left&quot;&lt;span&gt;;
                ctx.fillText(valArr[&lt;/span&gt;0]+&quot;：&quot;, oX+20,oY-H/10);
                ctx.fillText(valArr[2]+&quot;：&quot;+valArr[1], oX+20,oY+H/4);
&lt;span&gt;                ctx.restore();
            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制圆角矩形的方法&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; roundedRect(ctx,x,y,width,height,radius){
                ctx.moveTo(x,x&lt;/span&gt;+&lt;span&gt;radius);
                ctx.beginPath();
                ctx.lineTo(x,y&lt;/span&gt;+height-&lt;span&gt;radius);
                ctx.quadraticCurveTo(x,y&lt;/span&gt;+height,x+radius,y+&lt;span&gt;height);
                ctx.lineTo(x&lt;/span&gt;+width-radius, y+&lt;span&gt;height);
                ctx.quadraticCurveTo(x&lt;/span&gt;+width,y+height,x+width,y+height-&lt;span&gt;radius);
                ctx.lineTo(x&lt;/span&gt;+width,y+&lt;span&gt;radius);
                ctx.quadraticCurveTo(x&lt;/span&gt;+width,y,x+width-&lt;span&gt;radius,y);
                ctx.lineTo(x&lt;/span&gt;+&lt;span&gt;radius,y);
                ctx.quadraticCurveTo(x,y,x,y&lt;/span&gt;+&lt;span&gt;radius);
                ctx.closePath();
                ctx.fill();
            }
            
            
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听鼠标移动&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; mouseTimer = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            canvas.addEventListener(&lt;/span&gt;&quot;mousemove&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e){
                e &lt;/span&gt;= e ||&lt;span&gt; window.event;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;( e.offsetX || e.offsetX==0&lt;span&gt; ){
                    mousePosition.x &lt;/span&gt;=&lt;span&gt; e.offsetX;
                    mousePosition.y &lt;/span&gt;=&lt;span&gt; e.offsetY;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;( e.layerX || e.layerX==0&lt;span&gt; ){
                    mousePosition.x &lt;/span&gt;=&lt;span&gt; e.layerX;
                    mousePosition.y &lt;/span&gt;=&lt;span&gt; e.layerY;
                }
                
                clearTimeout(mouseTimer);
                mouseTimer &lt;/span&gt;= setTimeout(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    ctx.clearRect(&lt;/span&gt;0,0&lt;span&gt;,canvas.width, canvas.height);
                    drawLineLabelMarkers();
                    drawChartAnimate(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                    
                },&lt;/span&gt;10&lt;span&gt;);
            });
            
            

        }

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dataArr =&lt;span&gt; [
                {
                    value : [&lt;/span&gt;20000, 10000, 28000, 35000, 50000, 19000&lt;span&gt;],
                    name : &lt;/span&gt;'预算分配'&lt;span&gt;
                },
                 {
                    value : [&lt;/span&gt;15000, 14000, 28000, 31000, 42000, 21000&lt;span&gt;],
                    name : &lt;/span&gt;'实际开销'&lt;span&gt;
                }
            ];
            
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * 参数1 ：需要显示canvas的dom  (非canvas标签，需要指定height和width)
         * 参数2：二维数据  每个数据表示需要显示的一组数据对象 （value表示数据数组，name表示此数据名称）
         * 参数3：一维数组  对应上面每个数据的名字
         * 参数4：中部填充是否实心 ，默认false
         * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        goChart(document.getElementById(&lt;/span&gt;&quot;chart&quot;),dataArr,[&quot;销售&quot;,&quot;管理&quot;,&quot;信息技术&quot;,&quot;客服&quot;,&quot;研发&quot;,&quot;市场&quot;],&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)


    &lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;

&lt;p&gt;希望大家把代码都自己敲一遍。&lt;/p&gt;


&lt;p&gt;关注公众号，博客更新即可收到推送&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/799986/201710/799986-20171011124427824-1210633966.jpg&quot; alt=&quot;&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Sat, 21 Oct 2017 11:37:00 +0000</pubDate>
<dc:creator>苏天天</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chengduxiaoc/p/7705727.html</dc:identifier>
</item>
</channel>
</rss>