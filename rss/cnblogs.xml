<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>设计模式(七)_模板方法模式 - 阳光温暖</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9276217.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9276217.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的 方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;UML类图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/20180707032123.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;举例说明&quot;&gt;举例说明&lt;/h4&gt;
&lt;p&gt;比如我们做饭，我要煮面条。分为下面几个步骤&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;打开抽油烟机&lt;/li&gt;
&lt;li&gt;生火&lt;/li&gt;
&lt;li&gt;煮面条&lt;/li&gt;
&lt;li&gt;关火&lt;/li&gt;
&lt;li&gt;关闭油烟机&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;用代码实现&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class CookNoodles{

    public void open() {
        System.out.println(&quot;打开油烟机&quot;);
    }

    public void fire() {
        System.out.println(&quot;生火&quot;);
    }

    public void doCook() {
        System.out.println(&quot;煮面条&quot;);
    }

    public void outFire() {
        System.out.println(&quot;关火&quot;);
    }

    public void close() {
        System.out.println(&quot;关闭油烟机&quot;);
    }

    public void cook() {
        this.open();
        this.fire();
        this.doCook();
        this.outFire();
        this.close();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CookNoodles cook = new CookNoodles();
        cook.cook();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是我们不能只吃面条，还要炒个菜吃&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class CookVegetable {

    public void open() {
        System.out.println(&quot;打开油烟机&quot;);
    }

    public void fire() {
        System.out.println(&quot;生火&quot;);
    }

    public void doCook() {
        System.out.println(&quot;炒菜&quot;);
    }

    public void outFire() {
        System.out.println(&quot;关火&quot;);
    }

    public void close() {
        System.out.println(&quot;关闭油烟机&quot;);
    }

    public void cook() {
        this.open();
        this.fire();
        this.doCook();
        this.outFire();
        this.close();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的两个类一比较，你会发现除了doCook()方法中的实现不一样，其他的方法步骤完全一样。身为渣渣程序猿的我看到很烦。我们可以将重复代码抽象出来，由父类实现它，然后煮面条和炒菜都继承于它&lt;/p&gt;
&lt;p&gt;抽象类&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public abstract class Cook {

    public void open() {
        System.out.println(&quot;打开油烟机&quot;);
    }

    public void fire() {
        System.out.println(&quot;生火&quot;);
    }

    /**
     * 子类去实现
     */
    public abstract void doCook();

    public void outFire() {
        System.out.println(&quot;关火&quot;);
    }

    public  void close() {
        System.out.println(&quot;关闭油烟机&quot;);
    }

    /**
     * 使用final关键字，防止子类重写
     */
    public final void cook() {
        this.open();
        this.fire();
        this.doCook();
        this.outFire();
        this.close();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;炒菜和煮面条只要实现他们不同的那部分就可以了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class CookNoodles extends Cook{


    @Override
    public void doCook() {
        System.out.println(&quot;下面条&quot;);
    }


}


public class CookVegetable extends Cook {

    @Override
    public void doCook() {
        System.out.println(&quot;炒菜&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看到这里。你已经学会模板方法模式，使用场景为：当一个业务有N个步骤（模板），其中一部分是永恒不变的，那么将不变的步骤抽象到父类。可能变化的留给子类实现。&lt;/p&gt;
&lt;h4 id=&quot;模板方法模式中的方法&quot;&gt;模板方法模式中的方法&lt;/h4&gt;
&lt;p&gt;先对代码进行注释区分下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public abstract class Cook {

    public void open() {
        System.out.println(&quot;打开油烟机&quot;);
    }

    public void fire() {
        System.out.println(&quot;生火&quot;);
    }

    /**
     * 基本方法的声明（子类去实现）
     */
    public abstract void doCook();

    /**
     * 基本方法（空方法）
     */
    public void doAfter() {}

    /**
     * 基本方法(已经实现)
     */
    public void outFire() {
        System.out.println(&quot;关火&quot;);
    }

    public  void close() {
        System.out.println(&quot;关闭油烟机&quot;);
    }

    /**
     * 模板方法
     */
    public final void cook() {
        //调用基本方法
        this.open();
        this.fire();
        this.doCook();
        this.outFire();
        this.close();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面类中可以看到，模板方法中的方法可以分为两大类：模板方法和基本方法。&lt;/p&gt;
&lt;h5 id=&quot;模板方法&quot;&gt;模板方法&lt;/h5&gt;
&lt;p&gt;一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法&lt;/p&gt;
&lt;p&gt;一个抽象类可以任意多个模板方法。而不受限于一个。&lt;/p&gt;
&lt;h5 id=&quot;基本方法&quot;&gt;基本方法&lt;/h5&gt;
&lt;p&gt;基本方法分为三种：抽象方法（Abstract Method）、具体方法（Concrete Method） 和钩子方法（Hook Method）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;抽象方法：一个抽象方法由抽象类声明。由具体子类实现。&lt;/li&gt;
&lt;li&gt;具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换&lt;/li&gt;
&lt;li&gt;钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象类给出实现是一个空方法。作为方法的默认实现。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;命名规则&quot;&gt;命名规则&lt;/h5&gt;
&lt;p&gt;命名规则是设计师之间赖以沟通的管道之一，钩子方法的名字应该以do开始。&lt;/p&gt;
&lt;h4 id=&quot;实际案例&quot;&gt;实际案例&lt;/h4&gt;
&lt;p&gt;servlet中的就是使用了典型的模板方法。使用过Servlet 需继承一个叫HttpServlet的抽象类。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String method = req.getMethod();
        long lastModified;
        if (method.equals(&quot;GET&quot;)) {
            lastModified = this.getLastModified(req);
            if (lastModified == -1L) {
                this.doGet(req, resp);
            } else {
                long ifModifiedSince = req.getDateHeader(&quot;If-Modified-Since&quot;);
                if (ifModifiedSince &amp;lt; lastModified / 1000L * 1000L) {
                    this.maybeSetLastModified(resp, lastModified);
                    this.doGet(req, resp);
                } else {
                    resp.setStatus(304);
                }
            }
        } else if (method.equals(&quot;HEAD&quot;)) {
            lastModified = this.getLastModified(req);
            this.maybeSetLastModified(resp, lastModified);
            this.doHead(req, resp);
        } else if (method.equals(&quot;POST&quot;)) {
            this.doPost(req, resp);
        } else if (method.equals(&quot;PUT&quot;)) {
            this.doPut(req, resp);
        } else if (method.equals(&quot;DELETE&quot;)) {
            this.doDelete(req, resp);
        } else if (method.equals(&quot;OPTIONS&quot;)) {
            this.doOptions(req, resp);
        } else if (method.equals(&quot;TRACE&quot;)) {
            this.doTrace(req, resp);
        } else {
            String errMsg = lStrings.getString(&quot;http.method_not_implemented&quot;);
            Object[] errArgs = new Object[]{method};
            errMsg = MessageFormat.format(errMsg, errArgs);
            resp.sendError(501, errMsg);
        }

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;HttpServlet类中方法&lt;/p&gt;
&lt;p&gt;模板方法：service（）&lt;br/&gt;基本方法：doPost()、doGet()等方法&lt;/p&gt;
</description>
<pubDate>Fri, 06 Jul 2018 19:23:00 +0000</pubDate>
<dc:creator>阳光温暖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9276217.html</dc:identifier>
</item>
<item>
<title>.NET Core开发日志——Middleware - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9275922.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9275922.html</guid>
<description>&lt;p&gt;熟悉ASP.NET架构的开发者一定对于HTTP Modules与HTTP Handlers不陌生。两者的作用主要是对网络请求执行特定的处理工作。而在.NET Core中，它们都被Middleware(中件间)取代了。&lt;/p&gt;
&lt;p&gt;之前的Http Modules和HTTP Handlers是如下图般处理请求的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180706230415479-75177611.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在变成了这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180706230528185-833586588.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一言概括之，Middleware完成了HTTP Modules与HTTP Handlers的原有工作，但又不是简单的化二为一的减法作用。&lt;/p&gt;
&lt;p&gt;Middleware减去的其实是与原来ASP.NET中重要的基础——应用程序生命周期事件(&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms178473(v=vs.85).aspx&quot;&gt;application life cycle event&lt;/a&gt;)的绑定。&lt;/p&gt;
&lt;p&gt;HTTP Modules在初始化时就需要针对HttpApplication的事件作绑定处理，这样当HttpApplication的各项事件被触发时，已绑定的相应处理程序才会按照预期的那样被执行。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class HelloWorldModule : IHttpModule
{
    public HelloWorldModule()
    {
    }

    public String ModuleName
    {
        get { return &quot;HelloWorldModule&quot;; }
    }

    // In the Init function, register for HttpApplication 
    // events by adding your handlers.
    public void Init(HttpApplication application)
    {
        application.BeginRequest += 
            (new EventHandler(this.Application_BeginRequest));
        application.EndRequest += 
            (new EventHandler(this.Application_EndRequest));
    }

    private void Application_BeginRequest(Object source, 
         EventArgs e)
    {
    // Create HttpApplication and HttpContext objects to access
    // request and response properties.
        HttpApplication application = (HttpApplication)source;
        HttpContext context = application.Context;
        context.Response.Write(&quot;&amp;lt;h1&amp;gt;&amp;lt;font color=red&amp;gt;
            HelloWorldModule: Beginning of Request
            &amp;lt;/font&amp;gt;&amp;lt;/h1&amp;gt;&amp;lt;hr&amp;gt;&quot;);
    }

    private void Application_EndRequest(Object source, EventArgs e)
    {
        HttpApplication application = (HttpApplication)source;
        HttpContext context = application.Context;
        context.Response.Write(&quot;&amp;lt;hr&amp;gt;&amp;lt;h1&amp;gt;&amp;lt;font color=red&amp;gt;
            HelloWorldModule: End of Request&amp;lt;/font&amp;gt;&amp;lt;/h1&amp;gt;&quot;);
    }

    public void Dispose()
    {
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后你还需要在web.config配置文件注册这个HTTP Module。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;system.web&amp;gt;
        &amp;lt;httpModules&amp;gt;
           &amp;lt;add name=&quot;HelloWorldModule&quot; type=&quot;HelloWorldModule&quot;/&amp;gt;
        &amp;lt;/httpModules&amp;gt;
    &amp;lt;/system.web&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果是用Middleware的话，事情就变得很简单了。抛弃IHttpModule接口及HttpModule实现类，不用再关心HttpApplication的任何事件，还有烦人的web.config配置。直接在代码中以最简洁的方式完成工作。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    
public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.Use(async(context, next) =&amp;gt;{
        await context.Response.WriteAsync(&quot;Beginning of Request\n&quot;);
        await next.Invoke();
        await context.Response.WriteAsync(&quot;End of Request\n&quot;);
    });
    app.Run(async (context) =&amp;gt;
    {
        await context.Response.WriteAsync(&quot;Hello World!\n&quot;);
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180706234720503-1226115260.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相似的，对于HTTP Handlers，虽然不用取消对HttpApplication事件的依赖，但以两者的代码实现方式作比较，Middleware亳无疑问胜出一筹。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class HelloWorldHandler : IHttpHandler
{
    public HelloWorldHandler()
    {
    }
    public void ProcessRequest(HttpContext context)
    {
        HttpRequest Request = context.Request;
        HttpResponse Response = context.Response;
        // This handler is called whenever a file ending 
        // in .sample is requested. A file with that extension
        // does not need to exist.
        Response.Write(&quot;&amp;lt;html&amp;gt;&quot;);
        Response.Write(&quot;&amp;lt;body&amp;gt;&quot;);
        Response.Write(&quot;&amp;lt;h1&amp;gt;Hello from a synchronous custom HTTP handler.&amp;lt;/h1&amp;gt;&quot;);
        Response.Write(&quot;&amp;lt;/body&amp;gt;&quot;);
        Response.Write(&quot;&amp;lt;/html&amp;gt;&quot;);
    }
    public bool IsReusable
    {
        // To enable pooling, return true here.
        // This keeps the handler in memory.
        get { return false; }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;仍需要在web.config文件中注册HTTP handler。&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;system.web&amp;gt;
        &amp;lt;httpHandlers&amp;gt;
            &amp;lt;add verb=&quot;*&quot; path=&quot;*.sample&quot; 
                  type=&quot;HelloWorldHandler&quot;/&amp;gt;
        &amp;lt;/httpHandlers&amp;gt;
    &amp;lt;/system.web&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;换作Middleware的写法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private static void HandleSample(IApplicationBuilder app)
{
    app.Run(async context =&amp;gt;
    {
        await context.Response.WriteAsync(&quot;Hello Sample&quot;);
    });
}

// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.MapWhen(context =&amp;gt; context.Request.Path.Value.EndsWith(&quot;sample&quot;), HandleSample);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180707001247800-2144190038.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结下使用Middleware的优点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;没有对HttpApplication的依赖&lt;/li&gt;
&lt;li&gt;没有对IHttpModule与IHttpHandler接口的依赖&lt;/li&gt;
&lt;li&gt;无需在web.config文件中添加各种配置&lt;/li&gt;
&lt;li&gt;代码简洁&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后需要补充Middleware与HTTP Modules的一点差异。各Middleware中处理请求与响应的顺序是刚好相反的，越早处理请求的Middleware越晚处理响应。而HTTP Modules中处理请求与响应的顺序则保持一致，因为每个HTTP Module请求与响应事件的绑定都是在同一阶段完成的。&lt;/p&gt;
</description>
<pubDate>Fri, 06 Jul 2018 16:37:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9275922.html</dc:identifier>
</item>
<item>
<title>创建和使用解耦——工厂模式详解(工厂方法+抽象工厂) - takumiCX</title>
<link>http://www.cnblogs.com/takumicx/p/9275917.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/takumicx/p/9275917.html</guid>
<description>&lt;p&gt;直接new一个对象是最简单的创建对象的方式,但大量出现在业务代码中会带来至少两个问题。1:创建对象的细节直接暴露在业务代码中,修改实现细节必须修改相关的大量客户端代码。2:直接面向具体类型编程，违反了面向接口编程的原则,系统进行扩展时也不得不进行大量修改。要使得系统具有的良好的可扩展性以及后期易于维护，必须实现对产品的获取和对产品的使用解耦。要做到这两点,首先要对客户端代码屏蔽掉创建产品的细节，其次，客户端必须面向产品的抽象编程，利用java的多态特性在运行时才确定具体的产品。而这，正式本篇我们要讲的工厂模式的关键。工厂模式根据创建的产品特性又可以分为工厂方法模式和抽象工厂模式，下面我们就详细讲讲它们的特点以及区别。&lt;/p&gt;

&lt;h3 id=&quot;工厂方法模式的定义&quot;&gt;2.1工厂方法模式的定义&lt;/h3&gt;
&lt;p&gt;定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。&lt;/p&gt;
&lt;h3 id=&quot;工厂方法的类结构&quot;&gt;2.2工厂方法的类结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422237/201807/1422237-20180706232717335-604453921.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;2.3实现&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;创建抽象产品接口&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public interface Product {

    void doSome();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;创建产品1&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public class ConcreteProduct1 implements Product {
    @Override
    public void doSome() {
        System.out.println(&quot;ConcreteProduct1&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;创建产品2&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public class ConcreteProduct2 implements Product {
    @Override
    public void doSome() {
        System.out.println(&quot;ConcreteProduct2&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;创建产品3&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public class ConcreteProduct3 implements Product {
    @Override
    public void doSome() {
        System.out.println(&quot;ConcreteProduct3&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;创建抽象工厂类&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public abstract class AbstractFactory {
    
    public abstract Product createProduct();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;创建工厂类1，生产产品1&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public class ProductFactory1 extends AbstractFactory {
    @Override
    public Product createProduct() {
        return new ConcreteProduct1();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;创建工厂类2，生产产品2&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public class ProductFactory1 extends AbstractFactory {
    @Override
    public Product createProduct() {
        return new ConcreteProduct1();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;创建工厂类3，生产产品3&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public class ProductFactory3 extends AbstractFactory {
    @Override
    public Product createProduct() {
        return new ConcreteProduct3();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;public class TestCase {

    public static void main(String[] args) {

        AbstractFactory factory=new ProductFactory1();

        Product product = factory.createProduct();

        product.doSome();

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;结果&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422237/201807/1422237-20180706232746945-617682342.png&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里只要将父类引用指向不同的工厂实现，就可以获得不同的产品类型，下面代码是通过工厂1创建了常品1，要想创建其他产品只要new 出不同的工厂就行，其他代码都不用变。咦？怎么还是需要new，这和直接new一个产品有区别吗？这里为了作演示进行了简化，实际上我们如果创建对象经常会进行一系列初始化操作，这些如果写在客户端代码里对以后维护和扩展来说简直是灾难，而现在所有这些都在客户端代码里被屏蔽了。其次如果使用过Spring框架的话就知道，对于工厂这种实例，我们可以交给框架帮我们创建并注入到所需的地方，而这时候你想要在客户端代码中获取不同的产品实例只需要修改下框架的配置参数，实现了和业务代码的完全解耦，为以后产品的扩展带来了极大的方便。&lt;/p&gt;

&lt;p&gt;简单工厂模式,顾名思义，是对工厂方法模式的简化。简单工厂模式将对所有产品的创建过程都封装在一个方法中。因为其只有一个工厂的实现类，连抽象工厂都可以省了。下面是简单工厂模式的一种实现&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class SimpleFactory {


    public static &amp;lt;T extends Product&amp;gt; Product createProduct(Class&amp;lt;T&amp;gt; clazz){

        if(clazz.equals(ConcreteProduct1.class)){
            return new ConcreteProduct1();
        }else if(clazz.equals(ConcreteProduct2.class)){
            return new ConcreteProduct2();
        }else if(clazz.equals(ConcreteProduct3.class)){
            return new ConcreteProduct3();
        }
        throw new IllegalArgumentException(&quot;参数错误！&quot;);

    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为方法是静态的，连工厂创建都省了，代码也很清晰，根据方法的参数选择实例化哪个产品类。那么简单工厂模式相比工厂方法模式有哪些缺点和优点呢？&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;优点&lt;br/&gt;实现简单，类结构清晰&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;缺点&lt;br/&gt;产品扩展困难，不符合开闭原则&lt;br/&gt;工厂方法模式要增加一种产品实现时，只要添加产品类和对应的工厂类，几乎不用改变原有代码。而工厂方法模式则需要修改工厂方法，添加一种创建产品的逻辑，修改了原有代码，不符合开闭原则。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;抽象工厂模式的定义&quot;&gt;4.1抽象工厂模式的定义&lt;/h3&gt;
&lt;p&gt;为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。&lt;/p&gt;
&lt;h3 id=&quot;抽象工厂模式的类结构&quot;&gt;4.2抽象工厂模式的类结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1422237/201807/1422237-20180706232802536-271920494.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由上图可知，抽象工厂AbstractFactory定义了两个方法用来获取产品族A和B，而具体类扩展自该抽象类实现了其抽象方法，用来获取产品族中的产品。有几个产品族，则抽象类中就有多少个抽象方法。&lt;/p&gt;
&lt;h3 id=&quot;抽象工厂模式实现&quot;&gt;4.3抽象工厂模式实现&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;抽象工厂&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public interface AbstractFactory {

    //创建A产品家族
    ProductA createProductA();
    
    //创建B产品家族
    ProductB createProductB();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;产品族A接口及其实现类&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public interface ProductA {

    void doSome();

}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;public class ProductA1 implements ProductA {
    @Override
    public void doSome() {
        System.out.println(&quot;ProductA1&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;public class ProductA2 implements ProductA {
    @Override
    public void doSome() {
        System.out.println(&quot;ProductA2&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;产品族B接口及其实现类&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public interface ProductB {

    void doSome();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;public class ProductB1 implements ProductB {
    @Override
    public void doSome() {
        System.out.println(&quot;ProductB1&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;public class ProductB2 implements ProductB {
    @Override
    public void doSome() {
        System.out.println(&quot;ProductB2&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;工厂实现类&lt;br/&gt;该实现类可以创建产品族A和产品族B的一个产品，通常因为业务关系这俩会被配合起来使用，而这也是我们使用抽象工厂模式的原因。&lt;br/&gt;细心点你会发现，这不就是工厂方法模式吗？确实，抽象工厂模式底层由工厂方法模式实现，只不过相比后者它的每个工厂实现都创建了不同产品族的产品。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;public class ConcreteFactory1 implements AbstractFactory {
    @Override
    public ProductA createProductA() {
        return new ProductA1();
    }

    @Override
    public ProductB createProductB() {
        return new ProductB1();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;抽象工厂模式的缺点&quot;&gt;4.3抽象工厂模式的缺点&lt;/h3&gt;
&lt;p&gt;产品族的扩展非常麻烦，每当我们扩展一个产品族，也即在抽象工厂中增加一个抽象方法，必须同时修改工厂的实现类，不符合开闭原则。&lt;/p&gt;

&lt;p&gt;工厂模式按复杂程度从低到高可分为简单工厂模式，工厂方法模式和抽象工厂模式。&lt;br/&gt;总的来说有两个好处。1:封装了产品创建的细节，便于后期维护 2.客户端面向接口编程，具体的产品类运行期决定，便于产品类的扩展和后期维护(简单工厂模式不具备该特性，抽象工厂产品族的扩展除外)&lt;/p&gt;
&lt;p&gt;参考资料&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;《设计模式之禅》&lt;/li&gt;
&lt;li&gt;《Head First 设计模式》&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 06 Jul 2018 15:28:00 +0000</pubDate>
<dc:creator>takumiCX</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/takumicx/p/9275917.html</dc:identifier>
</item>
<item>
<title>【python】10分钟教你用python一行代码搞点大新闻 - 短短的路走走停停</title>
<link>http://www.cnblogs.com/infroad/p/9275903.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/infroad/p/9275903.html</guid>
<description>&lt;h3 id=&quot;h&quot;&gt;&lt;span&gt;准备&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;相信各位对python的语言简洁已经深有领会了。那么，今天就带大家一探究竟。看看一行python代码究竟能干些什么大新闻。赶紧抄起手中的家伙，跟我来试试吧。&lt;/p&gt;
&lt;p&gt;首先你得先在命令行进入python。像下面一样。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt; python&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;Python &lt;span class=&quot;hljs-number&quot;&gt;3.6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt; (v3&lt;span class=&quot;hljs-number&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;df79263a11, Dec &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;) [MSC v&lt;span class=&quot;hljs-number&quot;&gt;.1900&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt; bit (AMD64)] on win32&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;Type &lt;span class=&quot;hljs-string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;copyright&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; more information.&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hpython&quot;&gt;&lt;span&gt;python之禅&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;让我们用一行代码以python 的哲学开始吧。输入：import this。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; this&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;The Zen of Python, by Tim Peters&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;Beautiful &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; better than ugly.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;Explicit &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; better than implicit.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;Simple &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; better than complex.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;Complex &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; better than complicated.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;Flat &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; better than nested.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;Sparse &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; better than dense.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;Readability counts.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;Special cases aren&lt;span class=&quot;hljs-string&quot;&gt;'t special enough to break the rules.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;Although practicality beats purity.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;Errors should never pass silently.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;Unless explicitly silenced.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;In the face of ambiguity, refuse the temptation to guess.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;There should be one-- and preferably only one --obvious way to do it.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;Although that way may not be obvious at first unless you'&lt;/span&gt;re Dutch.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;Now &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; better than never.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;Although never &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; often better than *right* now.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;If the implementation &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; hard to explain, it&lt;span class=&quot;hljs-string&quot;&gt;'s a bad idea.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;If the implementation is easy to explain, it may be a good idea.&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;Namespaces are one honking great idea -- let'&lt;/span&gt;s do more of those!&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Python为什么如此吸引人?你需要读一读这个。翻译和解释如下：&lt;/p&gt;
&lt;p&gt;本文最初发表于恋花蝶的博客（&lt;a href=&quot;http://blog.csdn.net/lanphaday&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/lanphaday&lt;/a&gt;），如蒙转载，敬请何留全文完整，并连本声明一起转载。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;Python之禅 by Tim Peters&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;优美胜于丑陋（Python 以编写优美的代码为目标）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;可读性很重要（优美的代码是可读的）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; 风格的代码）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;当存在多种可能，不要尝试去猜测&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hmandelbrot&quot;&gt;&lt;span&gt;Mandelbrot图像&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;有一个著名的图像叫Mandelbrot。Mandelbrot图像中的每个位置都对应于公式N=x+y*i中的一个复数。其实数部分是x，虚数部分是y，i是-1的平方根。图像中各个位置的x和y坐标对应于虚数的x和y部分。图像如下：&lt;/p&gt;
&lt;img title=&quot;image&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-ae1d31677211a2ea?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot;/&gt;image
&lt;p&gt;那么，用一行代码画出这个图像。如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&lt;span class=&quot;hljs-string&quot;&gt;'\n'&lt;/span&gt;.join([&lt;span class=&quot;hljs-string&quot;&gt;''&lt;/span&gt;.join([&lt;span class=&quot;hljs-string&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; abs((&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a:&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; z,c,n:a(a,z,c,n))(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; s,z,c,n:z &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; s(s,z*z+c,c,n&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;))(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;*x+&lt;span class=&quot;hljs-number&quot;&gt;0.05j&lt;/span&gt;*y,&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;))&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;-80&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)])&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;-20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)]))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;                                                                                *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;                                                                          **&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;                                                                     ***********&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;                                                                    ************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;                                                                      *********&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;                                                            *    * ************  * *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;                                                    ****** * *************************** *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                                                    *************************************** *****&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;                                                     *******************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;                                               *** ******************************************** *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;                                                **************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;                                             *******************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;                      *        *              *****************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;                     **** ******* *          *******************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;                      *****************     *******************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;                   *********************** *********************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;                   *********************** ********************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;             **** ********************************************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;*********************************************************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;             **** ********************************************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;                   *********************** ********************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;                   *********************** *********************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;                      *****************     *******************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;                     **** ******* *          *******************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;                      *        *              *****************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;                                             *******************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;                                                **************************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;                                               *** ******************************************** *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;                                                     *******************************************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;                                                    *************************************** *****&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;                                                    ****** * *************************** *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;                                                            *    * ************  * *&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;                                                                      *********&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;                                                                    ************&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;                                                                     ***********&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;                                                                          **&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hlove&quot;&gt;&lt;span&gt;有趣love爱心&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;我孩子的英文名叫andy，也许当初教他写程序的时候，如果先秀一下这行代码，可能就更能激起他对代码的兴趣了。一行代码打印心形：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&lt;span class=&quot;hljs-string&quot;&gt;'\n'&lt;/span&gt;.join([&lt;span class=&quot;hljs-string&quot;&gt;''&lt;/span&gt;.join([(&lt;span class=&quot;hljs-string&quot;&gt;'Love'&lt;/span&gt;[(x-y) % len(&lt;span class=&quot;hljs-string&quot;&gt;'Love'&lt;/span&gt;)] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((x*&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;+(y*&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;-(x*&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*(y*&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;-30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)]))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;                veLoveLov           veLoveLov&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;            eLoveLoveLoveLove   eLoveLoveLoveLove&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;          veLoveLoveLoveLoveLoveLoveLoveLoveLoveLov&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;         veLoveLoveLoveLoveLoveLoveLoveLoveLoveLoveL&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;        veLoveLoveLoveLoveLoveLoveLoveLoveLoveLoveLov&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;        eLoveLoveLoveLoveLoveLoveLoveLoveLoveLoveLove&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;        LoveLoveLoveLoveLoveLoveLoveLoveLoveLoveLoveL&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;        oveLoveLoveLoveLoveLoveLoveLoveLoveLoveLoveLo&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;        veLoveLoveLoveLoveLoveLoveLoveLoveLoveLoveLov&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;        eLoveLoveLoveLoveLoveLoveLoveLoveLoveLoveLove&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;         oveLoveLoveLoveLoveLoveLoveLoveLoveLoveLove&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;          eLoveLoveLoveLoveLoveLoveLoveLoveLoveLove&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;          LoveLoveLoveLoveLoveLoveLoveLoveLoveLoveL&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;            eLoveLoveLoveLoveLoveLoveLoveLoveLove&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;             oveLoveLoveLoveLoveLoveLoveLoveLove&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;              eLoveLoveLoveLoveLoveLoveLoveLove&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;                veLoveLoveLoveLoveLoveLoveLov&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;                  oveLoveLoveLoveLoveLoveLo&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;                    LoveLoveLoveLoveLoveL&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;                       LoveLoveLoveLov&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;                          LoveLoveL&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;                             Lov&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;                              v&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，仅凭这样还是不足以捕获妹子真心的（我知道你们想说无论怎样都捕获不了妹子的真心）。小编在这发现了一个更好玩的玩法，咱们用定时器来做个高级一点的吧。代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;words = input(&lt;span class=&quot;hljs-string&quot;&gt;'输入你想说的话哦!:'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; words.split():&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    print(&lt;span class=&quot;hljs-string&quot;&gt;'\n'&lt;/span&gt;.join([&lt;span class=&quot;hljs-string&quot;&gt;''&lt;/span&gt;.join([(item[(x-y) % len(item)] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((x*&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;+(y*&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;-(x*&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*(y*&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;)**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;-30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)]))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;    time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至于效果嘛，看下面，是不是好很多了？&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://upload-images.jianshu.io/upload_images/10386940-24ddfad258d7e578.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;九九乘法表&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;python一行代码打印九九乘法表，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;'\n'&lt;/span&gt;.join([&lt;span class=&quot;hljs-string&quot;&gt;' '&lt;/span&gt;.join([&lt;span class=&quot;hljs-string&quot;&gt;'%s*%s=%-2s'&lt;/span&gt; % (y,x,x*y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,x+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-2&quot;&gt;&lt;span&gt;来个水波展示&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random;print(random.choice(&lt;span class=&quot;hljs-string&quot;&gt;'╱╲'&lt;/span&gt;), end=&lt;span class=&quot;hljs-string&quot;&gt;''&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果看下图：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://upload-images.jianshu.io/upload_images/10386940-ae7ccb12117da3b3.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h-3&quot;&gt;&lt;span&gt;源代码下载&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;源代码下载在公众号后台回复：【pyone】，不包括【】即可下载。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;希望我们的分享，能给你带来更多收获。&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;微信公众号&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-455b04ac59373fb5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;微信公众号&quot;/&gt;微信公众号</description>
<pubDate>Fri, 06 Jul 2018 15:22:00 +0000</pubDate>
<dc:creator>短短的路走走停停</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/infroad/p/9275903.html</dc:identifier>
</item>
<item>
<title>MongoDB动态条件之分页查询 - 时间-海</title>
<link>http://www.cnblogs.com/wslook/p/9275861.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wslook/p/9275861.html</guid>
<description>&lt;h2 data-source-line=&quot;1&quot;&gt;一、使用QueryByExampleExecutor&lt;/h2&gt;
&lt;p data-source-line=&quot;3&quot;&gt;&lt;strong&gt;1. 继承MongoRepository&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
public interface StudentRepository extends MongoRepository&amp;lt;Student, String&amp;gt; {&lt;p&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;7&quot;&gt;&lt;strong&gt;2. 代码实现&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用ExampleMatcher匹配器-----只支持字符串的模糊查询，其他类型是完全匹配&lt;/li&gt;
&lt;li&gt;Example封装实体类和匹配器&lt;/li&gt;
&lt;li&gt;使用QueryByExampleExecutor接口中的findAll方法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50.5&quot;&gt;
&lt;pre readability=&quot;18&quot;&gt;
public Page&amp;lt;Student&amp;gt; getListWithExample(StudentReqVO studentReqVO) {&lt;br/&gt;Sort sort = Sort.by(Sort.Direction.DESC, &quot;createTime&quot;);&lt;br/&gt;Pageable pageable = PageRequest.of(studentReqVO.getPageNum(), studentReqVO.getPageSize(), sort);&lt;p&gt;Student student = new Student();&lt;br/&gt;BeanUtils.copyProperties(studentReqVO, student);&lt;/p&gt;&lt;p&gt;//创建匹配器，即如何使用查询条件&lt;br/&gt;ExampleMatcher matcher = ExampleMatcher.matching() //构建对象&lt;br/&gt;.withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) //改变默认字符串匹配方式：模糊查询&lt;br/&gt;.withIgnoreCase(true) //改变默认大小写忽略方式：忽略大小写&lt;br/&gt;.withMatcher(&quot;name&quot;, ExampleMatcher.GenericPropertyMatchers.contains()) //采用“包含匹配”的方式查询&lt;br/&gt;.withIgnorePaths(&quot;pageNum&quot;, &quot;pageSize&quot;);  //忽略属性，不参与查询&lt;/p&gt;&lt;p&gt;//创建实例&lt;br/&gt;Example&amp;lt;Student&amp;gt; example = Example.of(student, matcher);&lt;br/&gt;Page&amp;lt;Student&amp;gt; students = studentRepository.findAll(example, pageable);&lt;/p&gt;&lt;p&gt;return students;&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;14&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li data-source-line=&quot;14&quot;&gt;&lt;strong&gt;不支持过滤条件分组。即不支持过滤条件用 or(或) 来连接，所有的过滤条件，都是简单一层的用 and(并且) 连接&lt;/strong&gt;&lt;/li&gt;
&lt;li data-source-line=&quot;14&quot;&gt;&lt;strong&gt;不支持两个值的范围查询，如时间范围的查询&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 data-source-line=&quot;1&quot;&gt;二、MongoTemplate结合Query&lt;/h2&gt;
&lt;p data-source-line=&quot;3&quot;&gt;&lt;strong&gt;实现一：使用Criteria封装查询条件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
public Page&amp;lt;Student&amp;gt; getListWithCriteria(StudentReqVO studentReqVO) {
&lt;/pre&gt;
&lt;pre readability=&quot;23&quot;&gt;
    Sort sort = Sort.by(Sort.Direction.DESC, &quot;createTime&quot;);&lt;br/&gt;Pageable pageable = PageRequest.of(studentReqVO.getPageNum(), studentReqVO.getPageSize(), sort);&lt;p&gt;Query query = new Query();&lt;/p&gt;&lt;p&gt;//动态拼接查询条件&lt;br/&gt;if (!StringUtils.isEmpty(studentReqVO.getName())){&lt;br/&gt;Pattern pattern = Pattern.compile(&quot;^.*&quot; + studentReqVO.getName() + &quot;.*$&quot;, Pattern.CASE_INSENSITIVE);&lt;br/&gt;query.addCriteria(Criteria.where(&quot;name&quot;).regex(pattern));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;if (studentReqVO.getSex() != null){&lt;br/&gt;query.addCriteria(Criteria.where(&quot;sex&quot;).is(studentReqVO.getSex()));&lt;br/&gt;}&lt;br/&gt;if (studentReqVO.getCreateTime() != null){&lt;br/&gt;query.addCriteria(Criteria.where(&quot;createTime&quot;).lte(studentReqVO.getCreateTime()));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;//计算总数&lt;br/&gt;long total = mongoTemplate.count(query, Student.class);&lt;/p&gt;&lt;p&gt;//查询结果集&lt;br/&gt;List&amp;lt;Student&amp;gt; studentList = mongoTemplate.find(query.with(pageable), Student.class);&lt;br/&gt;Page&amp;lt;Student&amp;gt; studentPage = new PageImpl(studentList, pageable, total);&lt;br/&gt;return studentPage;&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;3&quot;&gt; &lt;/p&gt;
&lt;p data-source-line=&quot;3&quot;&gt;&lt;strong&gt;实现二：使用Example和Criteria封装查询条件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
public Page&amp;lt;Student&amp;gt; getListWithExampleAndCriteria(StudentReqVO studentReqVO) {
&lt;/pre&gt;
&lt;pre readability=&quot;27&quot;&gt;
    Sort sort = Sort.by(Sort.Direction.DESC, &quot;createTime&quot;);&lt;br/&gt;Pageable pageable = PageRequest.of(studentReqVO.getPageNum(), studentReqVO.getPageSize(), sort);&lt;p&gt;Student student = new Student();&lt;br/&gt;BeanUtils.copyProperties(studentReqVO, student);&lt;/p&gt;&lt;p&gt;//创建匹配器，即如何使用查询条件&lt;br/&gt;ExampleMatcher matcher = ExampleMatcher.matching() //构建对象&lt;br/&gt;.withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) //改变默认字符串匹配方式：模糊查询&lt;br/&gt;.withIgnoreCase(true) //改变默认大小写忽略方式：忽略大小写&lt;br/&gt;.withMatcher(&quot;name&quot;, ExampleMatcher.GenericPropertyMatchers.contains()) //标题采用“包含匹配”的方式查询&lt;br/&gt;.withIgnorePaths(&quot;pageNum&quot;, &quot;pageSize&quot;);  //忽略属性，不参与查询&lt;/p&gt;&lt;p&gt;//创建实例&lt;br/&gt;Example&amp;lt;Student&amp;gt; example = Example.of(student, matcher);&lt;br/&gt;Query query = new Query(Criteria.byExample(example));&lt;br/&gt;if (studentReqVO.getCreateTime() != null){&lt;br/&gt;query.addCriteria(Criteria.where(&quot;createTime&quot;).lte(studentReqVO.getCreateTime()));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;//计算总数&lt;br/&gt;long total = mongoTemplate.count(query, Student.class);&lt;/p&gt;&lt;p&gt;//查询结果集&lt;br/&gt;List&amp;lt;Student&amp;gt; studentList = mongoTemplate.find(query.with(pageable), Student.class);&lt;br/&gt;Page&amp;lt;Student&amp;gt; studentPage = new PageImpl(studentList, pageable, total);&lt;br/&gt;return studentPage;&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;14&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li data-source-line=&quot;14&quot;&gt;&lt;strong&gt;不支持返回固定字段&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 data-source-line=&quot;1&quot;&gt;三、MongoTemplate结合BasicQuery&lt;/h2&gt;
&lt;ul&gt;&lt;li data-source-line=&quot;3&quot;&gt;BasicQuery是Query的子类&lt;/li&gt;
&lt;li data-source-line=&quot;3&quot;&gt;支持返回固定字段&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre readability=&quot;31&quot;&gt;
public Page&amp;lt;Student&amp;gt; getListWithBasicQuery(StudentReqVO studentReqVO) {&lt;br/&gt;Sort sort = Sort.by(Sort.Direction.DESC, &quot;createTime&quot;);&lt;br/&gt;Pageable pageable = PageRequest.of(studentReqVO.getPageNum(), studentReqVO.getPageSize(), sort);&lt;p&gt;QueryBuilder queryBuilder = new QueryBuilder();&lt;/p&gt;&lt;p&gt;//动态拼接查询条件&lt;br/&gt;if (!StringUtils.isEmpty(studentReqVO.getName())) {&lt;br/&gt;Pattern pattern = Pattern.compile(&quot;^.*&quot; + studentReqVO.getName() + &quot;.*$&quot;, Pattern.CASE_INSENSITIVE);&lt;br/&gt;queryBuilder.and(&quot;name&quot;).regex(pattern);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;if (studentReqVO.getSex() != null) {&lt;br/&gt;queryBuilder.and(&quot;sex&quot;).is(studentReqVO.getSex());&lt;br/&gt;}&lt;br/&gt;if (studentReqVO.getCreateTime() != null) {&lt;br/&gt;queryBuilder.and(&quot;createTime&quot;).lessThanEquals(studentReqVO.getCreateTime());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;Query query = new BasicQuery(queryBuilder.get().toString());&lt;br/&gt;//计算总数&lt;br/&gt;long total = mongoTemplate.count(query, Student.class);&lt;/p&gt;&lt;p&gt;//查询结果集条件&lt;br/&gt;BasicDBObject fieldsObject = new BasicDBObject();&lt;br/&gt;//id默认有值，可不指定&lt;br/&gt;fieldsObject.append(&quot;id&quot;, 1)    //1查询，返回数据中有值；0不查询，无值&lt;br/&gt;.append(&quot;name&quot;, 1);&lt;br/&gt;query = new BasicQuery(queryBuilder.get().toString(), fieldsObject.toJson());&lt;/p&gt;&lt;p&gt;//查询结果集&lt;br/&gt;List&amp;lt;Student&amp;gt; studentList = mongoTemplate.find(query.with(pageable), Student.class);&lt;br/&gt;Page&amp;lt;Student&amp;gt; studentPage = new PageImpl(studentList, pageable, total);&lt;br/&gt;return studentPage;&lt;br/&gt;} 
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 data-source-line=&quot;1&quot;&gt;四、MongoTemplate结合Aggregation&lt;/h2&gt;
&lt;ul&gt;&lt;li data-source-line=&quot;3&quot;&gt;使用Aggregation聚合查询&lt;/li&gt;
&lt;li data-source-line=&quot;3&quot;&gt;支持返回固定字段&lt;/li&gt;
&lt;li data-source-line=&quot;3&quot;&gt;支持分组计算总数、求和、平均值、最大值、最小值等等&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57.5&quot;&gt;
&lt;pre readability=&quot;26&quot;&gt;
public Page&amp;lt;Student&amp;gt; getListWithAggregation(StudentReqVO studentReqVO) {&lt;br/&gt;Sort sort = Sort.by(Sort.Direction.DESC, &quot;createTime&quot;);&lt;br/&gt;Pageable pageable = PageRequest.of(studentReqVO.getPageNum(), studentReqVO.getPageSize(), sort);&lt;p&gt;Integer pageNum = studentReqVO.getPageNum();&lt;br/&gt;Integer pageSize = studentReqVO.getPageSize();&lt;/p&gt;&lt;p&gt;List&amp;lt;AggregationOperation&amp;gt; operations = new ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;if (!StringUtils.isEmpty(studentReqVO.getName())) {&lt;br/&gt;Pattern pattern = Pattern.compile(&quot;^.*&quot; + studentReqVO.getName() + &quot;.*$&quot;, Pattern.CASE_INSENSITIVE);&lt;br/&gt;Criteria criteria = Criteria.where(&quot;name&quot;).regex(pattern);&lt;br/&gt;operations.add(Aggregation.match(criteria));&lt;br/&gt;}&lt;br/&gt;if (null != studentReqVO.getSex()) {&lt;br/&gt;operations.add(Aggregation.match(Criteria.where(&quot;sex&quot;).is(studentReqVO.getSex())));&lt;br/&gt;}&lt;br/&gt;long totalCount = 0;&lt;br/&gt;//获取满足添加的总页数&lt;br/&gt;if (null != operations &amp;amp;&amp;amp; operations.size() &amp;gt; 0) {&lt;br/&gt;Aggregation aggregationCount = Aggregation.newAggregation(operations);  //operations为空，会报错&lt;br/&gt;AggregationResults&amp;lt;Student&amp;gt; resultsCount = mongoTemplate.aggregate(aggregationCount, &quot;student&quot;, Student.class);&lt;br/&gt;totalCount = resultsCount.getMappedResults().size();&lt;br/&gt;} else {&lt;br/&gt;List&amp;lt;Student&amp;gt; list = mongoTemplate.findAll(Student.class);&lt;br/&gt;totalCount = list.size();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;operations.add(Aggregation.skip((long) pageNum * pageSize));&lt;br/&gt;operations.add(Aggregation.limit(pageSize));&lt;br/&gt;operations.add(Aggregation.sort(Sort.Direction.DESC, &quot;createTime&quot;));&lt;br/&gt;Aggregation aggregation = Aggregation.newAggregation(operations);&lt;br/&gt;AggregationResults&amp;lt;Student&amp;gt; results = mongoTemplate.aggregate(aggregation, &quot;student&quot;, Student.class);&lt;/p&gt;&lt;p&gt;//查询结果集&lt;br/&gt;Page&amp;lt;Student&amp;gt; studentPage = new PageImpl(results.getMappedResults(), pageable, totalCount);&lt;br/&gt;return studentPage;&lt;br/&gt;}
&lt;/p&gt;&lt;/pre&gt;
&lt;pre&gt;
 
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 06 Jul 2018 15:07:00 +0000</pubDate>
<dc:creator>时间-海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wslook/p/9275861.html</dc:identifier>
</item>
<item>
<title>kubernetes pod termination pending - gaorong404</title>
<link>http://www.cnblogs.com/gaorong/p/9275795.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gaorong/p/9275795.html</guid>
<description>&lt;p&gt;在将k8s从1.7.9 升级到1.10.2 之后，发现删除pod一直处于terminating状态, 调查发现删不掉的pod都有一个特点就是pod yaml中command部分写错了，如下所示：&lt;/p&gt;
&lt;pre class=&quot;yaml&quot;&gt;
&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: bad-pod-termation-test
spec:
  containers:
    - image: nginx
      command:
      - xxxx
      name: pad-pod-test&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到此时pod中的command为一个不存在的命令，创建该yaml后会返回如下状态：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;% kubectl get pods 
NAME                     READY     STATUS              RESTARTS   AGE
bad-pod-termation-test   0/1       RunContainerError   0          20s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在宿主机上&lt;code&gt;docker ps -a&lt;/code&gt; 可以看到对应的docker是处于Creted状态的(无法正常启动的状态)，因为pod起不来会重试，所以有多个docker实例：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;CONTAINER ID        IMAGE                              COMMAND                  CREATED              STATUS              PORTS               NAMES
b66c1a3de3ae        nginx                              &quot;xxxx&quot;                   9 seconds ago        Created                                 k8s_pad-pod-test_bad-pod-termation-test_default_7786ffea-7de9-11e8-9754-509a4c2d27d1_3
148a312b89cf        nginx                              &quot;xxxx&quot;                   43 seconds ago       Created                                 k8s_pad-pod-test_bad-pod-termation-test_default_7786ffea-7de9-11e8-9754-509a4c2d27d1_2
6414f874ffe0        k8s.gcr.io/pause-amd64:3.1         &quot;/pause&quot;                 About a minute ago   Up About a minute                       k8s_POD_bad-pod-termation-test_default_7786ffea-7de9-11e8-9754-509a4c2d27d1_0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时删除pod就会看到pod一直处于termianting状态，只能用kubectl delete pods bad-pod-termation-test --grace-period=0 --forece强制删除，但是强制删除是官方所不建议的，可能会造成资源的泄露，这种方案肯定不是长久之计。&lt;br/&gt;调高kubelet的日志级别仔细查看发现kubelet一直输出一条可疑log：&lt;/p&gt;
&lt;pre class=&quot;log&quot;&gt;
&lt;code&gt;I0702 19:26:43.712496   26521 kubelet_pods.go:942] Pod &quot;bad-pod-termation-test_default(9eae939b-7dea-11e8-9754-509a4c2d27d1)&quot; is terminated, but some containers have not been cleaned up: [0xc4218d1260 0xc4228ae540]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也就是说container没删干净，kubelet在等待container被删除。上面log打印的是指针，也就是存放container信息的变量地址，不过可以猜出这就是pod对应的container，手动&lt;code&gt;docker rm&lt;/code&gt;上面两个created状态的container之后，pod马上就被删除不可见了，怀疑kubelet本身存在某些bug导致Created状态的container某些资源无法释放，为什么会这样呐？&lt;br/&gt;查看代码发现kubelet会有一个PodCache来保存所有的pod信息，每创建一个pod就会向其中添加一条记录，且只有在container删除的时候才会将对应的cache清空，对应的cache清空后才能删除pod。&lt;/p&gt;
&lt;p&gt;之前的环境中为了方便debug将container退出后的尸体都保存了下来，在kubelet中设置--minimum-container-ttl-duration=36h flag来保存容器尸体，该flag已经是deprecated状态了，官方不建议使用，建用--eviction-hard 或 --eviction-soft来代替，因为在1.7.9中minimum-container-ttl-duration还是可以正常使用的，倒也没在意deprecated的提醒，并且在1.10.2也同样设置了该flag，导致cache无法清空，进而无法删除pod。&lt;/p&gt;
&lt;p&gt;按照上面的分析只有删除了container，pod才可以删除，那么设置了flag minimum-container-ttl-duration来保留container的后果岂不是所有的pod都无法删除吗？为什么之前正常的pod可以被删除？难道是正常pod的container尸体都被删了? 做了一下测试，果然删除正常pod之后容器尸体立马也被删除，设置minimum-container-ttl-duration压根没起作用，但是对于上述yaml创建的异常pod反倒起作用了，Created状态的container，直到minimum-container-ttl-duration之后才被删除。&lt;br/&gt;虽然比较奇怪，但在一个deprecated的flag上面发生任何问题都是可以原谅的，官方已经明确声明不建议使用了，只能去掉该flag避免问题的出现．下了master分支最新的代码重新编译试了一下，版本如下，发现无论设不设置该flag，都会立即删除pod的container, 所以pod pending在terminating状态的问题就不存在了。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;% kubectl version  
Client Version: version.Info{Major:&quot;1&quot;, Minor:&quot;8&quot;, GitVersion:&quot;v1.8.2&quot;, GitCommit:&quot;bdaeafa71f6c7c04636251031f93464384d54963&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2017-10-24T19:48:57Z&quot;, GoVersion:&quot;go1.8.3&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;}
Server Version: version.Info{Major:&quot;1&quot;, Minor:&quot;10+&quot;, GitVersion:&quot;v1.10.2-dirty&quot;, GitCommit:&quot;81753b10df112992bf51bbc2c2f85208aad78335&quot;, GitTreeState:&quot;dirty&quot;, BuildDate:&quot;2018-07-02T11:03:02Z&quot;, GoVersion:&quot;go1.9.7&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那现在就剩一个问题了：在1.7.9的版本中设置了minimum-container-ttl-duration为什么可以正常删除pod? 为什么能够既保留容器尸体又能删除pod，通过查阅源码发现k8s通过调用PodResourcesAreReclaimed来判断资源是否回收，只有资源全部回收才可以删除pod，在1.7.9的实现代码如下，依次判断是否有正在运行中的pod，volume是否清空，sandbox(也就是pause)容器是否清理：&lt;/p&gt;
&lt;pre class=&quot;golang&quot;&gt;
&lt;code&gt;func (kl *Kubelet) PodResourcesAreReclaimed(pod *v1.Pod, status v1.PodStatus) bool {
    if !notRunning(status.ContainerStatuses) {
        // We shouldnt delete pods that still have running containers
        glog.V(3).Infof(&quot;Pod %q is terminated, but some containers are still running&quot;, format.Pod(pod))
        return false
    }
    if kl.podVolumesExist(pod.UID) &amp;amp;&amp;amp; !kl.kubeletConfiguration.KeepTerminatedPodVolumes {
        // We shouldnt delete pods whose volumes have not been cleaned up if we are not keeping terminated pod volumes
        glog.V(3).Infof(&quot;Pod %q is terminated, but some volumes have not been cleaned up&quot;, format.Pod(pod))
        return false
    }
    if kl.kubeletConfiguration.CgroupsPerQOS {
        pcm := kl.containerManager.NewPodContainerManager()
        if pcm.Exists(pod) {
            glog.V(3).Infof(&quot;Pod %q is terminated, but pod cgroup sandbox has not been cleaned up&quot;, format.Pod(pod))
            return false
        }
    }
    return true
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而在v1.10.2中的实现如下：&lt;/p&gt;
&lt;pre class=&quot;golang&quot;&gt;
&lt;code&gt;func (kl *Kubelet) PodResourcesAreReclaimed(pod *v1.Pod, status v1.PodStatus) bool {
    if !notRunning(status.ContainerStatuses) {
        // We shouldnt delete pods that still have running containers
        glog.V(3).Infof(&quot;Pod %q is terminated, but some containers are still running&quot;, format.Pod(pod))
        return false
    }
    // pod's containers should be deleted
    runtimeStatus, err := kl.podCache.Get(pod.UID)
    if err != nil {
        glog.V(3).Infof(&quot;Pod %q is terminated, Error getting runtimeStatus from the podCache: %s&quot;, format.Pod(pod), err)
        return false
    }
    if len(runtimeStatus.ContainerStatuses) &amp;gt; 0 {
        glog.V(3).Infof(&quot;Pod %q is terminated, but some containers have not been cleaned up: %+v&quot;, format.Pod(pod), runtimeStatus.ContainerStatuses)
        return false
    }
    if kl.podVolumesExist(pod.UID) &amp;amp;&amp;amp; !kl.keepTerminatedPodVolumes {
        // We shouldnt delete pods whose volumes have not been cleaned up if we are not keeping terminated pod volumes
        glog.V(3).Infof(&quot;Pod %q is terminated, but some volumes have not been cleaned up&quot;, format.Pod(pod))
        return false
    }
    if kl.kubeletConfiguration.CgroupsPerQOS {
        pcm := kl.containerManager.NewPodContainerManager()
        if pcm.Exists(pod) {
            glog.V(3).Infof(&quot;Pod %q is terminated, but pod cgroup sandbox has not been cleaned up&quot;, format.Pod(pod))
            return false
        }
    }
    return true
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出1.7.9中资源回收的逻辑与1.10.2中的不太一样，v1.10.2增加了判断cache是否为空的逻辑，上面说过只有在容器被删除之后才清空cache，1.7.9中设置了minimum-container-ttl-duration之后不会清理退出的container尸体，所以cache也未清空，其实在这种情况下是存在资源泄露的。为了验证这个结论，专门在1.7.9的PodResourcesAreReclaimed method中也加入了cache是否为空的判断逻辑，果然出现了一直pending在terminating状态的情况。　　&lt;/p&gt;
&lt;p&gt;回到我们设置 minimum-container-ttl-duration　flag的初衷：　container退出后保留信息方便debug，回溯状态，那如果不使用这个flag该怎么办哪？去哪里找逝去的信息？　官方的文档中对 minimum-container-ttl-duration　有句描述是｀deprecated once old logs are stored outside of container’s context｀，将来可能会将log保存到容器外面，但是目前显然是没有实现的。另外做了几次实验之后发现只要不手动删除pod，对应的container尸体就会一直保存下来，如果有多个退出实例尸体，不会每个实例都保存，但至少会保存一个退出实例，可以用来debug。反过来思考，如果保存每个退出实例，其实是将容器运行的上下文都保存下来了，如果一个container在writable layer写入大量的数据的话，会导致占用大量磁盘空间而不能释放，所以尽量不要保存太多退出实例，官方的保留的退出实例个数一般情况下debug就够用了，对于额外信息的保存就需要通过远程备份的方式来实现了。&lt;/p&gt;
</description>
<pubDate>Fri, 06 Jul 2018 14:48:00 +0000</pubDate>
<dc:creator>gaorong404</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gaorong/p/9275795.html</dc:identifier>
</item>
<item>
<title>编程哲学之C#篇：01——创世纪 - iDream</title>
<link>http://www.cnblogs.com/weixb/p/9269358.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/weixb/p/9269358.html</guid>
<description>&lt;p&gt;我们能否像神一样地创建一个世界？&lt;/p&gt;
&lt;p&gt;对于创建世界而言，程序员的创作能力最接近于神——相对于导演，作家，漫画家而言，他们创建的世界(作品)一旦完成，就再也不会变化，创建的角色再也不会成长。而程序员创建的世界，每次运行都可以有不一样的内容，而且最为重要的，我们还能给与角色不能学习的能力(AI[人工智能])。本章就向你展示程序员像神一样创建世界的可能性以及为什么这一系列的文章叫《编程哲学》。&lt;/p&gt;
&lt;h2 id=&quot;创世纪&quot;&gt;创世纪&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;起初...空虚混沌，渊面黑暗&lt;/li&gt;
&lt;li&gt;神说：要有光
&lt;ul&gt;&lt;li&gt;于是，就有了光...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;神说：天上要布满星辰
&lt;ul&gt;&lt;li&gt;于是，宇宙间布满了数不清的大大小小的星球...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;神说：水应聚集在一起，使旱地显露
&lt;ul&gt;&lt;li&gt;于是，有了陆地与海洋...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;神说：陆地上要生出草木和各种蔬菜
&lt;ul&gt;&lt;li&gt;于是，整个大地上一片生机盎然...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;神说：水中要有众多的鱼，天空中要有无数的鸟
&lt;ul&gt;&lt;li&gt;于是，世间出现了各种各样的鱼和飞鸟...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;神说：要有人
&lt;ul&gt;&lt;li&gt;于是，神照着自己的形像造人...
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;人通过观察与学习...&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;人说： 要有光&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;人创造的世界宇宙&quot;&gt;人创造的世界(宇宙)&lt;/h2&gt;
&lt;h3 id=&quot;网络世界&quot;&gt;网络世界&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iweixubin/assets/master/x01/wikipedia.png&quot; alt=&quot;维基百科&quot;/&gt;&lt;br/&gt;其代表：维基百科，人类将现在的知识不断地编写到这个网络世界中，方便人交流与学习。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在这个世界中我们创造了文字、图片、声音、影像，但比起神所创造的世界，还远远不够，继续提升技能吧——上帝见习生(叫程序员，太low了，这系列我都会将想学编程的人称为上帝见习生，我们的目标是像神一样创建世界！)&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;游戏世界&quot;&gt;游戏世界&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iweixubin/assets/master/x01/ready_player_one.jpg&quot; alt=&quot;头号玩家&quot;/&gt;&lt;br/&gt;&lt;strong&gt;《头号玩家》&lt;/strong&gt;——电影中，玩家通过VR设备进去游戏，可以在金字塔上滑雪，可以和蝙蝠侠一起去登陆珠穆朗玛峰，可以穿梭游戏中各个星球，可以通过穿着X1触感套装将游戏中触觉传给身体。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在这个世界中，我们可以360度观察我们创造的世界，可以通过穿着触感套装来增加对游戏世界的体验，但比起神所创造的世界，还远远不够，继续提升技能吧——上帝见习生&lt;/em&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;I'm a dreamer, I build worlds&lt;br/&gt;我是一个梦想家，我创建世界——詹姆斯·哈利迪《头号玩家》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;虚拟世界&quot;&gt;虚拟世界&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iweixubin/assets/master/x01/the_matrix_awake.gif&quot; alt=&quot;黑客帝国_觉醒&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iweixubin/assets/master/x01/the_matrix_neo.gif&quot; alt=&quot;黑客帝国_尼奥&quot;/&gt;&lt;br/&gt;&lt;strong&gt;《黑客帝国》&lt;/strong&gt;——电影的故事背景是，21世纪中叶人类发明人工智能，在随后的几十年迅速发展。也不知道是人类还是机器挑起了战争，不过可以确定的是人类为了消灭机器烧焦了天空，从此地整个球被一层黑云笼罩着。地球不再有阳光，人类自认为机器没有了阳光很快就完蛋了（当时地球的主要能源是太阳能，其他的资源都消耗完了），而人类依靠有机物可以坚持一段时间。但是结果人类想错了，没有了阳光地球唯一的能源就是有机物。最终机器发现人类的生命活动可以释放大量的电能，于是机器利用人类发明了有机电厂，利用活体人类发电。为了让人类的意识活着，机器人将人类的大脑连接到一个虚拟世界中。而上图图1就是电影男主觉醒后看到世界的真实样子。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在这个世界中，我们创造了有智慧的人工智能，但有一个瑕疵，就是人类和人工智能在同一个世界中，你觉得呢——上帝见习生&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;子世界&quot;&gt;子世界&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iweixubin/assets/master/x01/the_thirteenth_floor.jpg&quot; alt=&quot;异次元骇客&quot;/&gt;&lt;br/&gt;&lt;strong&gt;《异次元骇客》&lt;/strong&gt;——男主和他的好基友用电脑模拟出一个逼真的世界，他们可以通过电脑进入这个虚拟世界，真实地体验的生活与自己。然而一个夜里，好基友被人杀死，种种线索都表明似乎是男主所为。可男主却对当天夜里的事情全无记忆。而真相是：如同男主可以进入他用电脑模拟出的虚拟世界一样，他可以控制里面的一个人物，男主也是这样被更加上层的世界的人所控制杀了好基友。最后男主在女主的帮助下，打开了现在世界的门，前往了更加上层世界。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在这个世界中，我们创造了子世界，而子世界的人又创造了另外一个子世界...每个世界的人都富有智慧和创造力，或许这就是我们的目标——上帝见习生&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这部电影给了我一个很大的启发，我们可以编程创建一个新的世界出来，给世界中的人类智能，如果里面的人突然有一天发现他们的世界被创造出来的，并且找到前往创作者世界的方法，那么我们是不是可以从中找到跳跃出宇宙外的可能性呢？&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;编程哲学&quot;&gt;编程哲学&lt;/h2&gt;
&lt;p&gt;我们要如何创造一个世界(宇宙)呢？正如我在上面创世纪小节说了，人通过观察与学习，我们要创造一个世界(宇宙)，入手点就应该好好地观察和分析我们的世界(宇宙)是怎么样的。而研究这个世界(宇宙)的性质、世界(宇宙)内万事万物演化的总规律、人在世界(宇宙)中的位置，是哲学的范畴。&lt;/p&gt;
&lt;p&gt;哪为何编程语言和哲学挂上勾，请看下面表格&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;强类型语言&lt;/td&gt;
&lt;td&gt;哲学代表：帕拉图与亚里士多德的“永恒世界”&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;弱类型语言&lt;/td&gt;
&lt;td&gt;哲学代表：释迦牟尼的“佛学”&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;二进制&lt;/td&gt;
&lt;td&gt;哲学代表：伏羲、周文王、孔子的《易经》与太极八卦图&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;上面的表格的内容，本系列会一一解答，让你明白每种编程语言都代表&lt;strong&gt;一种思维方式，一种哲学观&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本系列核心内容是介绍各种哲学观和思维方式，随便把某种编程语言学了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;霍金在他的《大设计》中表示哲学已死，因为哲学已经远远赶不上现代科学的步伐了。然后我的观点是，现代科学只是在告诉我们所生存依赖的世界是怎么样的，但如果我们要创造一个世界的话，一般都会加上自己的“想法”，而这个“想法”谁可以来告诉我们呢？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;由于我们的文化原因，我说明一下我对佛学和佛教的看法。教你戒色，戒酒，戒肉，这些是属于佛教的内容。而“看山是山，看山不是山，看山还是山”这些是属于佛学内容。简单来说，佛学是教你怎么看这个世界——这是哲学的范畴。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;结束语&quot;&gt;结束语&lt;/h2&gt;
&lt;p&gt;这也许是编程史上最强的打鸡血文章：程序员是像神一般的存在。但创造一个世界不会真的像创世纪的神一样说几句话就成了，唯有学习才能赋予我们神一般的创造能力。&lt;/p&gt;
&lt;p&gt;下一章将介绍在阅读本系列时，需要应用到的学习思维。&lt;/p&gt;
&lt;p&gt;最后留下一道可以思考一生的问题：你认为的世界是怎么样的，你想创造一个怎么样的世界？&lt;/p&gt;
</description>
<pubDate>Fri, 06 Jul 2018 14:10:00 +0000</pubDate>
<dc:creator>iDream</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/weixb/p/9269358.html</dc:identifier>
</item>
<item>
<title>异地多活高可用架构设计方案 - defmain</title>
<link>http://www.cnblogs.com/jaychan/p/9242325.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jaychan/p/9242325.html</guid>
<description>&lt;p&gt;异地多活在近年越来越多大型互联网公司采用的方案，几乎也是大型应用发展到一定阶段的必然选择，综合比较一下各个互联网公司的方案，会发现有很多共性的东西，也有很多差异化的东西，这是最有意思的地方&lt;/p&gt;
&lt;h3 id=&quot;什么是异地多活&quot;&gt;什么是异地多活&lt;/h3&gt;
&lt;p&gt;异地多活一般是指在不同城市建立独立的数据中心，“活”是相对于冷备份而言的，冷备份是备份全量数据，平时不支撑业务需求，只有在主机房出现故障的时候才会切换到备用机房，而多活，是指这些机房在日常的业务中也需要走流量，做业务支撑。冷备份的主要问题是成本高，不跑业务，当主机房出问题的时候，也不一定能成功把业务接管过来。&lt;/p&gt;
&lt;h3 id=&quot;cap原则&quot;&gt;CAP原则&lt;/h3&gt;
&lt;p&gt;分布式架构设计无论怎样都绕不开CAP原则，C一致性 A可用性 P分区容错性，分区容错性是必不可少的，没有分区容错性就相当于退化成了单机系统，所以实际上架构设计是在一致性和可用性一个天平上的两端做衡量。为什么强一致性和高可用性是不能同时满足？假如需要满足强一致性，就需要写入一条数据的时候，扩散到分布式系统里面的每一台机器，每一台机器都回复ACK确认后再给客户端确认，这就是强一致性。如果集群任何一台机器故障了，都回滚数据，对客户端返回失败，因此影响了可用性。如果只满足高可用性，任何一台机器写入成功都返回成功，那么有可能中途因为网络抖动或者其他原因造成了数据不同步，部分客户端独到的仍然是旧数据，因此，无法满足强一致性。&lt;/p&gt;
&lt;h3 id=&quot;异地多活的挑战&quot;&gt;异地多活的挑战&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;延迟 异地多活面临的主要挑战是网络延迟，以北京到上海 1468 公里，即使是光速传输，一个来回也需要接近10ms，在实际测试的过程中，发现上海到北京的网络延迟，一般是 30 ms。&lt;/li&gt;
&lt;li&gt;一致性 用户在任何一个机房写入的数据，是否能在任何一个机房读取的时候返回的值是一致性的。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;误区&quot;&gt;误区&lt;/h3&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;所有业务都要异地多活&lt;br/&gt;以用户中心为例，注册是没必要做异地多活的，假如用户在A机房注册了，在数据没有向外同步的时候，A机房网络中断，这个时候如果让用户切换到B机房注册，就有可能发生数据不一致，出现两个基本相同的账号，这是不可容忍的。但是相对应的来说，用户登录这种是关键核心业务，就有必要做到异地多活了，用户在A机房登录不了，那就让用户在B机房登录。虽然有极端的情况，用户在A机房修改了密码，但是出现网络中断，B机房的用户仍然保存的是旧密码，但是相对于不可登录来说，这种情况是可容忍的。同时有些业务仍然是无法实现异地多活的，比如涉及到金钱的业务，加入有一个用户有100块，消费了50块，A机房发生异常，数据没有同步出去，这时候用户在B机房登录后发现自己还有100块，可以继续消费，就会对业务造成严重的影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;必须做到实时一致性&lt;br/&gt;受限于物理条件，跨地域的网速一定会存在延迟，一般是几十毫秒，如果遇上网络抖动，延迟超过几秒甚至几十秒都有可能。解决方法只能是减少需要同步的数据和只保证数据的最终一致性，有时候用户在A机房修改了一条数据，业务上实际上是能容忍数据的短时间不一致的，即使其他用户在B机房读到的是旧数据，实际上对业务也没有任何影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;只使用存储系统的同步功能&lt;br/&gt;大部分场景下，MySQL Redis自带的同步功能已经足以满足需求了，但是在某些极端情况下，可能就不合适了，MySQL的单线程复制可能会产生较大的延迟，Redis可能会有全量复制，所以系统要灵活使用各种解决方案。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;用消息队列把数据广播到各个数据中心&lt;/li&gt;
&lt;li&gt;回源读取，当A机房发现没有这条数据的时候，根据路由规则去B机房去读取该数据&lt;/li&gt;
&lt;li&gt;重新生成数据，A机房登录后生成session数据，这时候A机房挂了，可以把用户切换到B机房，重新生成session数据。&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;实现100%的高可用&lt;br/&gt;100%的高可用是无法保证的，硬件的损坏，软件的BUG，光纤传输等太多不可控的因素，而且也要在成本上做一个权衡，尤其是对于强一致性业务，C和A只能取一个平衡，容忍短时间的不可用来保证数据的完全一致性。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;饿了么异地多活方案&quot;&gt;饿了么异地多活方案&lt;/h3&gt;
&lt;h5 id=&quot;特点&quot;&gt;特点&lt;/h5&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;业务内聚，单个订单的所有流程保证在一个机房内完成调用，不允许进行跨机房调用。每一个机房称为一个ezone，对服务进行分区，让用户，商户，骑手按照规则聚合到一个ezone内。根据业务特点，饿了么选择了把地理位置作为划分业务的单元，以行政省界用围栏&lt;br/&gt;把全国分为多个shard。在某个机房出现问题的时候，也可以按照地理位置把用户，商户，骑手打包迁移到别的机房即可。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/456913/201807/456913-20180702113903184-712386610.jpg&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;可用性优先，当机房发生故障的时候，优先保证可用，用户可以先下单吃饭，有限时间窗口内的数据不一致可以事后再修复。每个 ezone 都会有全量的业务数据，当一个 ezone 失效后，其他的 ezone 可以接管用户。用户在一个ezone的下单数据，会实时的复制到其他ezone。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;保证数据的正确性，在切换和故障时，检测到某些订单在两个机房不一致，会锁定改订单，避免错误进一步扩散。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h5 id=&quot;通过drc复制mysql数据&quot;&gt;通过DRC复制MySQL数据&lt;/h5&gt;
&lt;p&gt;MySQL的数据量最大，每个机房产生的数据，都通过 DRC 复制到其他 ezone，每个ezone的主键取值空间是ezoneid + 固定步长，所以产生的 id 各不相同，数据复制到一起后不会发生主键冲突。按照分区规则，正常情况下，每个 ezone 只会写入自己的数据，但万一出现异常，2个 ezone 同时更新了同一笔数据，就会产生冲突。DRC 支持基于时间戳的冲突解决方案，当一笔数据在两个机房同时被修改时，最后修改的数据会被保留，老的数据会被覆盖。&lt;/p&gt;
&lt;h5 id=&quot;通过global-zone保证强一致性&quot;&gt;通过Global Zone保证强一致性&lt;/h5&gt;
&lt;p&gt;对于个别一致性要求很高的应用，我们提供了一种强一致的方案（Global Zone），Globa Zone是一种跨机房的读写分离机制，所有的写操作被定向到一个 Master 机房进行，以保证一致性，读操作可以在每个机房的 Slave库执行，也可以 bind 到 Master 机房进行，这一切都基于我们的数据库访问层（DAL）完成，业务基本无感知。&lt;/p&gt;
&lt;h3 id=&quot;新浪微博异地多活方案&quot;&gt;新浪微博异地多活方案&lt;/h3&gt;
&lt;p&gt;微博使用了基于 MCQ（微博自研的消息队列）的跨机房消息同步方案，并开发出跨机房消息同步组件 WMB（Weibo Message Broker）。&lt;br/&gt;每个机房的缓存是完全独立的，由每个机房的 Processor（专门负责消息处理的程序，类 Storm）根据收到的消息进行缓存更新。由于消息不会重复分发，而且信息完备，所以 MytriggerQ 方案存在的缓存更新脏数据问题就解决了。而当缓存不存在时，会穿透到 MySQL 从库，然后进行回种。可能出现的问题是，缓存穿透，但是 MySQL 从库如果此时出现延迟，这样就会把脏数据种到缓存中。解决方案是做一个延时 10 分钟的消息队列，然后由一个处理程序来根据这个消息做数据的重新载入。一般从库延时时间不超过 10 分钟，而 10 分钟内的脏数据在微博的业务场景下也是可以接受的。&lt;br/&gt;由于微博对数据库不是强依赖，加上数据库双写的维护成本过大，选择的方案是数据库通过主从同步的方式进行。这套方案可能的缺点是如果主从同步慢，并且缓存穿透，这时可能会出现脏数据。这种同步方式已运行了三年，整体上非常稳定，没有发生因为数据同步而导致的服务故障。&lt;/p&gt;
&lt;h3 id=&quot;阿里异地多活方案&quot;&gt;阿里异地多活方案&lt;/h3&gt;
&lt;p&gt;阿里在部署异地多活的时候同样是碰到延时问题，解决方案是访问一次页面的操作都在本机房完成，不做跨机房调用。阿里把业务划分成各种单元，如交易单元，这个单元是完成交易业务，称之为单元化。&lt;/p&gt;
&lt;h5 id=&quot;服务延时&quot;&gt;服务延时&lt;/h5&gt;
&lt;p&gt;让操作全部在同一中心内完成，单元化&lt;br/&gt;比如用户进入以后，比如说在淘宝上看商品，浏览商品，搜索、下单、放进购物车等等操作，还包括写数据库，就都是在所进入的那个数据中心中完成的，而不需要跨数据中心&lt;/p&gt;
&lt;h5 id=&quot;部署&quot;&gt;部署：&lt;/h5&gt;
&lt;p&gt;异地部署的是流量会爆发式增长的，流量很大的那部分。流量小的，用的不多的，不用异地部署。&lt;br/&gt;其他一些功能就会缺失，所以我们在异地部署的并非全站，而是一组业务，这组业务就成为单元&lt;br/&gt;比如：在异地只部署跟买家交易相关的核心业务，确保一个买家在淘宝上浏览商品，一直到买完东西的全过程都可以完成&lt;/p&gt;
&lt;h5 id=&quot;路由一致性&quot;&gt;路由一致性：&lt;/h5&gt;
&lt;p&gt;买家相关的数据在写的时候，一定是要写在那个单元里。要保障这个用户从进来一直到访问服务，到访问数据库，全链路的路由规则都是完全一致的。如果说某个用户本来应该进A城市的数据中心，但是却因为路由错误，进入了B城市，那看到的数据就是错的了。造成的结果，可能是用户看到的购买列表是空的，这是不能接受的。&lt;/p&gt;
&lt;h5 id=&quot;延时&quot;&gt;延时：&lt;/h5&gt;
&lt;p&gt;异地部署，我们需要同步卖家的数据、商品的数据。能接受的延时必须要做到一秒内，即在全国的范围内，都必须做到一秒内把数据同步完中心之间骨干网。&lt;/p&gt;
&lt;h5 id=&quot;数据一致性&quot;&gt;数据一致性：&lt;/h5&gt;
&lt;p&gt;把用户操作封闭在一个单元内完成，最关键的是数据。在某个点，必须确保单行的数据在一个地方写，绝对不能在多个地方写。&lt;br/&gt;为了做到这一点，必须确定数据的维度。淘宝除了用户本身的信息以外，还会看到所有商品的数据、所有卖家的数据，面对的是买家、卖家和商品三个维度。因为异地的是买家的核心链路，所以选择买家这个维度。按买家维度来切分数据。但因为有三个维度的数据，当操作卖家、商品数据时，就无法封闭。&lt;/p&gt;
&lt;p&gt;在所有的异地多活项目中，最重要的是保障某个点写进去的数据一定是正确的。这是最大的挑战，也是我们在设计整个方案中的第一原则。业务这一层出故障我们都可以接受，但是不能接受数据故障。&lt;/p&gt;
&lt;p&gt;多个单元之间一定会有数据同步。一方面，每个单元都需要卖家的数据、商品的数据；&lt;br/&gt;另一方面，我们的单元不是全量业务，那一定会有业务需要这个单元，比如说买家在这个单元下了一笔定单，而其他业务有可能也是需要这笔数据，否则可能操作不了，所以需要同步该数据。&lt;br/&gt;所以怎样确保每个单元之间的商品、卖家的数据是一致的，然后买家数据中心和单元是一致的，这是非常关键的。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;各种方案都是针对不同的业务场景设计的，所以会有一定的不同，但是基本思路都是一致的。通过各种手段避免进行跨机房调用，消除延迟，让用户无感知。必要的时候通过业务的妥协，牺牲一致性来获取更高的可用性和更低的部署复杂程度。细读CAP理论就知道，这个问题是不存在完美的解决方案的，只有尽量贴合业务，逐渐迭代出更合适的方案。&lt;/p&gt;
&lt;p&gt;引用：&lt;br/&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/57715&quot;&gt;异地多活设计辣么难？其实是你想多了！&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32009822&quot;&gt;饿了么异地多活技术实现（一）总体介绍&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;amp;mid=402920548&amp;amp;idx=1&amp;amp;sn=45cd62b84705fdd853bdd108b9301a17&amp;amp;3rd=MzA3MDU4NTYzMw==&amp;amp;scene=6#rd&quot;&gt;微博“异地多活”部署经验谈&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://servers.pconline.com.cn/721/7215376.html&quot;&gt;绝对干货:解密阿里巴巴“异地多活”技术&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/u013793650/article/details/49358507&quot;&gt;阿里和微博的异地多活方案zt&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 06 Jul 2018 13:45:00 +0000</pubDate>
<dc:creator>defmain</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jaychan/p/9242325.html</dc:identifier>
</item>
<item>
<title>Java并发编程笔记之 CountDownLatch闭锁的源码分析 - 狂小白</title>
<link>http://www.cnblogs.com/huangjuncong/p/9275634.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangjuncong/p/9275634.html</guid>
<description>&lt;p&gt;JUC 中倒数计数器 CountDownLatch 的使用与原理分析，当需要等待多个线程执行完毕后在做一件事情时候 CountDownLatch 是比调用线程的 join 方法更好的选择，CountDownLatch 与 线程的 join 方法区别是什么？&lt;/p&gt;
&lt;p&gt;日常开发中经常会遇到需要在主线程中开启多线程去并行执行任务，并且主线程需要等待所有子线程执行完毕后再进行汇总的场景，它的内部提供了一个计数器，在构造闭锁时必须指定计数器的初始值，且计数器的初始值必须大于0。另外它还提供了一个countDown方法来操作计数器的值，每调用一次countDown方法计数器都会减1，直到计数器的值减为0时就代表条件已成熟，所有因调用await方法而阻塞的线程都会被唤醒。这就是CountDownLatch的内部机制，看起来很简单，无非就是阻塞一部分线程让其在达到某个条件之后再执行。但是CountDownLatch的应用场景却比较广泛，只要你脑洞够大利用它就可以玩出各种花样。最常见的一个应用场景是开启多个线程同时执行某个任务，等到所有任务都执行完再统计汇总结果。下图动态演示了闭锁阻塞线程的整个过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180706213824244-1485979309.gif&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;在CountDownLatch出现之前一般都是使用线程的join（）方法来实现，但是join不够灵活，不能够满足不同场景的需求。接下来我们看看CountDownLatch的原理实现。&lt;/p&gt;

&lt;p&gt;一.CountDownLatch原理探究&lt;/p&gt;
&lt;p&gt;　　从CountDownLatch的名字可以猜测内部应该有个计数器，并且这个计数器是递减的，下面就通过源码看看JDK开发组是何时初始化计数器，何时递减的，计数器变为 0 的时候做了什么操作，多个线程是如何通过计时器值实现同步的，首先我们先看看CountDownLatch内部结构，类图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180706184315152-1223239310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从类图可以知道CountDownLatch内部还是使用AQS实现的，通过下面构造函数初始化计数器的值，可知实际上是把计数器的值赋值给了AQS的state，也就是这里AQS的状态值来表示计数器值。&lt;/p&gt;
&lt;p&gt;构造函数源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; CountDownLatch(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; count) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (count &amp;lt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;count &amp;lt; 0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sync = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sync(count);
    }

   Sync(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; count) {
       setState(count);
   }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来主要看一下CountDownLatch中几个重要的方法内部是如何调用AQS来实现功能的。&lt;/p&gt;
&lt;p&gt;　　1.void await()方法，当前线程调用了CountDownLatch对象的await方法后，当前线程会被阻塞，直到下面的情况之一才会返回：（1）当所有线程都调用了CountDownLatch对象的countDown方法后，&lt;/p&gt;
&lt;p&gt;也就是说计时器值为 0 的时候。（2）其他线程调用了当前线程的interrupt（）方法中断了当前线程，当前线程会抛出InterruptedException异常后返回。接下来让我们看看await（）方法内部是如何调用&lt;/p&gt;
&lt;p&gt;AQS的方法的，源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CountDownLatch的await（）方法&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt;() throws InterruptedException {
   sync.acquireSharedInterruptibly(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
}
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;AQS的获取共享资源时候可被中断的方法&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; final &lt;span&gt;void&lt;/span&gt; acquireSharedInterruptibly(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; arg)throws InterruptedException {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果线程被中断则抛异常&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Thread.interrupted())
         &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InterruptedException();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试看当前是否计数值为0，为0则直接返回，否者进入AQS的队列等待&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (tryAcquireShared(arg) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
         doAcquireSharedInterruptibly(arg);
}

 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;sync类实现的AQS的接口&lt;/span&gt;
 &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; tryAcquireShared(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; acquires) {
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (getState() == &lt;span&gt;0&lt;/span&gt;) ? &lt;span&gt;1&lt;/span&gt; : -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　从上面代码可以看到await（）方法委托sync调用了AQS的acquireSharedInterruptibly方法，该方法的特点是线程获取资源的时候可以被中断，并且获取到的资源是共享资源，这里为什么要调用AQS的这个方法，而不是调用独占锁的accquireInterruptibly方法呢？这是因为这里状态值需要的并不是非 0 即 1 的效果，而是和初始化时候指定的计数器值有关系，比如你初始化的时候计数器值为 8 ，那么state的值应该就有 0 到 8 的状态，而不是只有  0  和  1 的独占效果。&lt;/p&gt;
&lt;p&gt;　　这里await（）方法调用acquireSharedInterruptibly的时候传递的是 1 ，就是说明要获取一个资源，而这里计数器值是资源总数，也就是意味着是让总的资源数减 1 ，acquireSharedInterruptibly内部首先判断如果当前线程被中断了则抛出异常，否则调用sync实现的tryAcquireShared方法看当前状态值(计数器值)是否为 0  ，是则当前线程的await（）方法直接返回，否则调用AQS的doAcquireSharedInterruptibly让当前线程阻塞。另外调用tryAcquireShared的方法仅仅是检查当前状态值是不是为 0 ，并没有调用CAS让当前状态值减去 1 。&lt;/p&gt;

&lt;p&gt;　　2.boolean await(long timeout, TimeUnit unit)，当线程调用了 CountDownLatch 对象的该方法后，当前线程会被阻塞，直到下面的情况之一发生才会返回： （1）当所有线程都调用了 CountDownLatch 对象的 countDown 方法后，也就是计时器值为 0 的时候，这时候返回 true； (2) 设置的 timeout 时间到了，因为超时而返回 false； （3）其它线程调用了当前线程的 interrupt（）方法中断了当前线程，当前线程会抛出 InterruptedException 异常后返回。源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; boolean &lt;span&gt;await&lt;/span&gt;(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; timeout, TimeUnit unit)
        throws InterruptedException {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sync.tryAcquireSharedNanos(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, unit.toNanos(timeout));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　3.void countDown() 当前线程调用了该方法后，会递减计数器的值，递减后如果计数器为 0 则会唤醒所有调用await 方法而被阻塞的线程，否则什么都不做，接下来看一下countDown（）方法内部是如何调用AQS的方法的，源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;CountDownLatch的countDown（）方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; countDown() {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;委托sync调用AQS的方法&lt;/span&gt;
        sync.releaseShared(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    }
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;AQS的方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; final boolean releaseShared(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; arg) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用sync实现的tryReleaseShared&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (tryReleaseShared(arg)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;AQS的释放资源方法&lt;/span&gt;
&lt;span&gt;            doReleaseShared();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上面代码可以知道CountDownLatch的countDown（）方法是委托sync调用了AQS的releaseShared方法，后者调用了sync 实现的AQS的tryReleaseShared，源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;syn的方法&lt;/span&gt;
&lt;span&gt;protected&lt;/span&gt; boolean tryReleaseShared(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; releases) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环进行cas，直到当前线程成功完成cas使计数值（状态值state）减一并更新到state&lt;/span&gt;
  &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (;;) {
      &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c =&lt;span&gt; getState();

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果当前状态值为0则直接返回（1）&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (c == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;CAS设置计数值减一（2）&lt;/span&gt;
      &lt;span&gt;int&lt;/span&gt; nextc = c-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (compareAndSetState(c, nextc))
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; nextc == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码可以看到首先获取当前状态值(计数器值)，代码（1）如果当前状态值为 0 则直接返回 false ，则countDown（）方法直接返回；否则执行代码（2）使用CAS设置计数器减一，CAS失败则循环重试，否则如果当前计数器为 0 则返回 true 。返回 true 后，说明当前线程是最后一个调用countDown()方法的线程，那么该线程除了让计数器减一外，还需要唤醒调用CountDownLatch的await 方法而被阻塞的线程。这里的代码（1）貌似是多余的，其实不然，之所以添加代码 (1) 是为了防止计数器值为 0 后，其他线程又调用了countDown方法，如果没有代码（1），状态值就会变成负数。&lt;/p&gt;

&lt;p&gt;　　4.long getCount() 获取当前计数器的值，也就是 AQS 的 state 的值，一般在 debug 测试时候使用，源码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; getCount() {
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sync.getCount();
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; getCount() {
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; getState();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码可知内部还是调用了 AQS 的 getState 方法来获取 state 的值（计数器当前值）。&lt;/p&gt;

&lt;p&gt;到目前为止原理理解的差不多了，接下来用一个例子进行讲解CountDownLatch的用法，例子如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.hjc;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicInteger;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/7/6.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CountDownLatchTest {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; AtomicInteger id = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AtomicInteger();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个CountDownLatch实例，管理计数为ThreadNum&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; CountDownLatch countDownLatch = &lt;span&gt;new&lt;/span&gt; CountDownLatch(&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) throws InterruptedException {

        Thread threadOne &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    Thread.sleep(&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                    e.printStackTrace();
                }

                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;【玩家&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + id.getAndIncrement() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;】已入场&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                countDownLatch.countDown();
            }
        });

        Thread threadTwo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    Thread.sleep(&lt;/span&gt;&lt;span&gt;2000&lt;/span&gt;&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                    e.printStackTrace();
                }

                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;【玩家&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + id.getAndIncrement() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;】已入场&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                countDownLatch.countDown();

            }
        });

        Thread threadThree &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    Thread.sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;                    e.printStackTrace();
                }

                System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;【玩家&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + id.getAndIncrement() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;】已入场&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                countDownLatch.countDown();

            }
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 启动子线程&lt;/span&gt;
&lt;span&gt;        threadOne.start();
        threadTwo.start();
        threadThree.start();
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;等待斗地主玩家进场&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等待子线程执行完毕，返回&lt;/span&gt;
        countDownLatch.&lt;span&gt;await&lt;/span&gt;&lt;span&gt;();

        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;斗地主玩家已经满人，开始发牌.....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;运行结果如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180706212751735-276532125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;如上代码，创建了一个 CountDownLatch 实例，因为有两个子线程所以构造函数参数传递为 3，主线程调用 countDownLatch.await（）方法后会被阻塞。子线程执行完毕后调用 countDownLatch.countDown() 方法让 countDownLatch 内部的计数器减一，等所有子线程执行完毕调用 countDown（）后计数器会变为 0，这时候主线程的 await（）才会返回。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;如果把上面的代码中Thread.sleep和countDownLatch.await()的代码注释掉，运行几遍，运行结果就可能会出现如下结果，如下图：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201807/1202638-20180706212719711-1376930081.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 可以看到在注释掉latch.await()这行之后，就不能保证在所有玩家入场后才开始发牌了。&lt;/p&gt;

&lt;p&gt;总结：CountDownLatch 与 join 方法的区别，一个区别是调用一个子线程的 join（）方法后，该线程会一直被阻塞直到该线程运行完毕，而 CountDownLatch 则使用计数器允许子线程运行完毕或者运行中时候递减计数，也就是 CountDownLatch 可以在子线程运行任何时候让 await 方法返回而不一定必须等到线程结束；另外使用线程池来管理线程时候一般都是直接添加 Runable 到线程池这时候就没有办法在调用线程的 join 方法了，countDownLatch 相比 Join 方法让我们对线程同步有更灵活的控制。&lt;/p&gt;

</description>
<pubDate>Fri, 06 Jul 2018 13:33:00 +0000</pubDate>
<dc:creator>狂小白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangjuncong/p/9275634.html</dc:identifier>
</item>
<item>
<title>js文件操作之——导出Excel (js-xlsx) - youryida</title>
<link>http://www.cnblogs.com/youryida/p/9275615.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/youryida/p/9275615.html</guid>
<description>&lt;p&gt;前阵子跟server同学讨论一个Excel导出的需求，我说JS搞不定，需要server来做，被server同学强行打脸。&lt;/p&gt;
&lt;p&gt;今天研究了下，尼玛，不光可以，还很强大了！&lt;/p&gt;
&lt;p&gt;总结：经验是害人的，尤其是在发展迅速的前端圈儿，and，需要保持饥渴，保持对新技术的敏感度。&lt;/p&gt;
&lt;p&gt;注：以下只探讨现代浏览器&lt;/p&gt;

&lt;h2&gt;1. 最简单的Excel导出&lt;/h2&gt;
&lt;p&gt;原理：js可以通过base64或者blob，把一个包含一个&amp;lt;table&amp;gt;的&amp;lt;html&amp;gt;串，导出成xx.xls格式。而Excel可以打开html文件。这样看起来，就是一个成功的Excel导出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; tableHtml='&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;only one&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;base64 URL形式文件下载&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; oa = document.createElement('a'&lt;span&gt;);
oa.href &lt;/span&gt;= 'data:application/vnd.ms-excel;base64,'+&lt;span&gt;window.btoa(tableHtml);
oa.download &lt;/span&gt;= 'htmltable-base64.xls';&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过A标签 设置文件名&lt;/span&gt;
oa.click();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件，在js中，除了可以是base64，也可以是一个blob。&lt;/p&gt;
&lt;p&gt;- base64形式的文件描述，在js或者html中，就是一个很长的base4字符串&lt;br/&gt;- blob形式的文件描述，在js或者html中，是一个URL形式的字符串，他指向的是浏览器内存中的一个文件片段，形如&quot;blob:http://sheetjs.com/f999f57f-b79f-4293-a317-3bbf6ea58788&quot;&lt;/p&gt;
&lt;p&gt;blob形式的Excel导出，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;blob URL形式文件下载&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; tableHtml='&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;only one&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; excelBlob = &lt;span&gt;new&lt;/span&gt; Blob([tableHtml], {type: 'application/vnd.ms-excel'&lt;span&gt;});
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oa = document.createElement('a'&lt;span&gt;);
oa.href &lt;/span&gt;=&lt;span&gt; URL.createObjectURL(excelBlob);
oa.download &lt;/span&gt;= 'htmltable-blob.xls'&lt;span&gt;;
document.body.appendChild(oa);
oa.click();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;毛病：&lt;/h3&gt;
&lt;p&gt;- 这是个假的excel文件，只有xls格式可以在Excel中打开，xlsx不行。&lt;/p&gt;

&lt;h2&gt;2. 真正的Excel导出&lt;/h2&gt;
&lt;p&gt;是的，这里有一个真正的二进制Excel文件导出。&lt;/p&gt;
&lt;p&gt;他就是一万多star的js-xlsx，地址：https://github.com/SheetJS/js-xlsx&lt;/p&gt;
&lt;p&gt;我花了两个多小时，追了好一阵子他的https://github.com/SheetJS/js-xlsx/blob/master/xlsx.js，终于，我搞明白他是什么原理了。&lt;/p&gt;
&lt;p&gt;以下拿他的官方demo举例，http://sheetjs.com/demos/table.html。&lt;/p&gt;
&lt;p&gt;从网页的table DOM到Excel文件的演化过程如下：&lt;/p&gt;
&lt;h3&gt;2.1 网页上的table&lt;/h3&gt;
&lt;div id=&quot;container&quot;&gt;
&lt;table id=&quot;data-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td id=&quot;sjs-A1&quot;&gt;This&lt;/td&gt;
&lt;td id=&quot;sjs-B1&quot;&gt;is&lt;/td&gt;
&lt;td id=&quot;sjs-C1&quot;&gt;a&lt;/td&gt;
&lt;td id=&quot;sjs-D1&quot;&gt;Test&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;sjs-A2&quot;&gt;வணக்கம்&lt;/td&gt;
&lt;td id=&quot;sjs-B2&quot;&gt;สวัสดี&lt;/td&gt;
&lt;td id=&quot;sjs-C2&quot;&gt;你好&lt;/td&gt;
&lt;td id=&quot;sjs-D2&quot;&gt;가지마&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;sjs-A3&quot;&gt;1&lt;/td&gt;
&lt;td id=&quot;sjs-B3&quot;&gt;2&lt;/td&gt;
&lt;td id=&quot;sjs-C3&quot;&gt;3&lt;/td&gt;
&lt;td id=&quot;sjs-D3&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;sjs-A4&quot;&gt;Click&lt;/td&gt;
&lt;td id=&quot;sjs-B4&quot;&gt;to&lt;/td&gt;
&lt;td id=&quot;sjs-C4&quot;&gt;edit&lt;/td&gt;
&lt;td id=&quot;sjs-D4&quot;&gt;cells&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;2.2 sheet JSON&lt;/h3&gt;
&lt;p&gt;这里，他用一个json来描述了Excel表格中的A1,B1,C1等各个单元格。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
{&quot;Sheet JS&quot;:{&quot;A1&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;This&quot;},&quot;B1&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;is&quot;},&quot;C1&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;a&quot;},&quot;D1&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;Test&quot;},&quot;A2&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;வணக்கம்&quot;},&quot;B2&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;สวัสดี&quot;},&quot;C2&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;你好&quot;},&quot;D2&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;가지마&quot;},&quot;A3&quot;:{&quot;t&quot;:&quot;n&quot;,&quot;v&quot;:1},&quot;B3&quot;:{&quot;t&quot;:&quot;n&quot;,&quot;v&quot;:2},&quot;C3&quot;:{&quot;t&quot;:&quot;n&quot;,&quot;v&quot;:3},&quot;D3&quot;:{&quot;t&quot;:&quot;n&quot;,&quot;v&quot;:4},&quot;A4&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;Click&quot;},&quot;B4&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;to&quot;},&quot;C4&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;edit&quot;},&quot;D4&quot;:{&quot;t&quot;:&quot;s&quot;,&quot;v&quot;:&quot;cells&quot;},&quot;!ref&quot;:&quot;A1:D4&quot;}}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.3 未压缩的zip文件&lt;/h3&gt;
&lt;p&gt;源码中的“write_zip_type”方法，它按照标准的电子表格格式协议，把上述JSON转成了下面的样子。&lt;/p&gt;
&lt;p&gt;如下，很明显，这里面包含了一些乱码和一些xml描述。&lt;/p&gt;
&lt;p&gt;（这里本着不求甚解的精神，我咨询了一下我们部门的资深技术专家，他搭眼一看，说这是一个未压缩的zip。我也懒得输出一下zip来验证这个了，他说是，那就是了）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;PK
ÃæLÖ&lt;/span&gt;|ZZdocProps/core.xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;cp:coreProperties xmlns:cp=&quot;http://schemas.openxmlformats.org/package/2006/metadata/core-properties&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dcterms=&quot;http://purl.org/dc/terms/&quot; xmlns:dcmitype=&quot;http://purl.org/dc/dcmitype/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;/&amp;gt;PK
ÃæLþù«44docProps/app.xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;Properties xmlns=&quot;http://schemas.openxmlformats.org/officeDocument/2006/extended-properties&quot; xmlns:vt=&quot;http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes&quot;&amp;gt;&amp;lt;Application&amp;gt;SheetJS&amp;lt;/Application&amp;gt;&amp;lt;HeadingPairs&amp;gt;&amp;lt;vt:vector size=&quot;2&quot; baseType=&quot;variant&quot;&amp;gt;&amp;lt;vt:variant&amp;gt;&amp;lt;vt:lpstr&amp;gt;Worksheets&amp;lt;/vt:lpstr&amp;gt;&amp;lt;/vt:variant&amp;gt;&amp;lt;vt:variant&amp;gt;&amp;lt;vt:i4&amp;gt;1&amp;lt;/vt:i4&amp;gt;&amp;lt;/vt:variant&amp;gt;&amp;lt;/vt:vector&amp;gt;&amp;lt;/HeadingPairs&amp;gt;&amp;lt;TitlesOfParts&amp;gt;&amp;lt;vt:vector size=&quot;1&quot; baseType=&quot;lpstr&quot;&amp;gt;&amp;lt;vt:lpstr&amp;gt;Sheet JS&amp;lt;/vt:lpstr&amp;gt;&amp;lt;/vt:vector&amp;gt;&amp;lt;/TitlesOfParts&amp;gt;&amp;lt;/Properties&amp;gt;PK
ÃæLTÄ8ããxl/worksheets/sheet1.xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;worksheet xmlns=&quot;http://schemas.openxmlformats.org/spreadsheetml/2006/main&quot; xmlns:r=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships&quot;&amp;gt;&amp;lt;dimension ref=&quot;A1:D4&quot;/&amp;gt;&amp;lt;sheetViews&amp;gt;&amp;lt;sheetView workbookViewId=&quot;0&quot;/&amp;gt;&amp;lt;/sheetViews&amp;gt;&amp;lt;sheetData&amp;gt;&amp;lt;row r=&quot;1&quot;&amp;gt;&amp;lt;c r=&quot;A1&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;This&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;B1&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;is&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;C1&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;a&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;D1&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;Test&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;/row&amp;gt;&amp;lt;row r=&quot;2&quot;&amp;gt;&amp;lt;c r=&quot;A2&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;à®µà®£à®à¯à®à®®à¯&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;B2&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;à¸ªà¸§à¸±à¸ªà¸à¸µ&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;C2&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;ä½ å¥½&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;D2&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;ê°ì§ë§&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;/row&amp;gt;&amp;lt;row r=&quot;3&quot;&amp;gt;&amp;lt;c r=&quot;A3&quot;&amp;gt;&amp;lt;v&amp;gt;1&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;B3&quot;&amp;gt;&amp;lt;v&amp;gt;2&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;C3&quot;&amp;gt;&amp;lt;v&amp;gt;3&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;D3&quot;&amp;gt;&amp;lt;v&amp;gt;4&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;/row&amp;gt;&amp;lt;row r=&quot;4&quot;&amp;gt;&amp;lt;c r=&quot;A4&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;Click&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;B4&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;to&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;C4&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;edit&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;c r=&quot;D4&quot; t=&quot;str&quot;&amp;gt;&amp;lt;v&amp;gt;cells&amp;lt;/v&amp;gt;&amp;lt;/c&amp;gt;&amp;lt;/row&amp;gt;&amp;lt;/sheetData&amp;gt;&amp;lt;ignoredErrors&amp;gt;&amp;lt;ignoredError numberStoredAsText=&quot;1&quot; sqref=&quot;A1:D4&quot;/&amp;gt;&amp;lt;/ignoredErrors&amp;gt;&amp;lt;/worksheet&amp;gt;PK
ÃæLÜè¯ÏDDxl/workbook.xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;workbook xmlns=&quot;http://schemas.openxmlformats.org/spreadsheetml/2006/main&quot; xmlns:r=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships&quot;&amp;gt;&amp;lt;workbookPr codeName=&quot;ThisWorkbook&quot;/&amp;gt;&amp;lt;sheets&amp;gt;&amp;lt;sheet name=&quot;Sheet JS&quot; sheetId=&quot;1&quot; r:id=&quot;rId1&quot;/&amp;gt;&amp;lt;/sheets&amp;gt;&amp;lt;/workbook&amp;gt;&lt;span&gt;PK
ÃæL0kÞÞxl&lt;/span&gt;/theme/theme1.xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;a:theme xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot; name=&quot;Office Theme&quot;&amp;gt;&amp;lt;a:themeElements&amp;gt;&amp;lt;a:clrScheme name=&quot;Office&quot;&amp;gt;&amp;lt;a:dk1&amp;gt;&amp;lt;a:sysClr val=&quot;windowText&quot; lastClr=&quot;000000&quot;/&amp;gt;&amp;lt;/a:dk1&amp;gt;&amp;lt;a:lt1&amp;gt;&amp;lt;a:sysClr val=&quot;window&quot; lastClr=&quot;FFFFFF&quot;/&amp;gt;&amp;lt;/a:lt1&amp;gt;&amp;lt;a:dk2&amp;gt;&amp;lt;a:srgbClr val=&quot;1F497D&quot;/&amp;gt;&amp;lt;/a:dk2&amp;gt;&amp;lt;a:lt2&amp;gt;&amp;lt;a:srgbClr val=&quot;EEECE1&quot;/&amp;gt;&amp;lt;/a:lt2&amp;gt;&amp;lt;a:accent1&amp;gt;&amp;lt;a:srgbClr val=&quot;4F81BD&quot;/&amp;gt;&amp;lt;/a:accent1&amp;gt;&amp;lt;a:accent2&amp;gt;&amp;lt;a:srgbClr val=&quot;C0504D&quot;/&amp;gt;&amp;lt;/a:accent2&amp;gt;&amp;lt;a:accent3&amp;gt;&amp;lt;a:srgbClr val=&quot;9BBB59&quot;/&amp;gt;&amp;lt;/a:accent3&amp;gt;&amp;lt;a:accent4&amp;gt;&amp;lt;a:srgbClr val=&quot;8064A2&quot;/&amp;gt;&amp;lt;/a:accent4&amp;gt;&amp;lt;a:accent5&amp;gt;&amp;lt;a:srgbClr val=&quot;4BACC6&quot;/&amp;gt;&amp;lt;/a:accent5&amp;gt;&amp;lt;a:accent6&amp;gt;&amp;lt;a:srgbClr val=&quot;F79646&quot;/&amp;gt;&amp;lt;/a:accent6&amp;gt;&amp;lt;a:hlink&amp;gt;&amp;lt;a:srgbClr val=&quot;0000FF&quot;/&amp;gt;&amp;lt;/a:hlink&amp;gt;&amp;lt;a:folHlink&amp;gt;&amp;lt;a:srgbClr val=&quot;800080&quot;/&amp;gt;&amp;lt;/a:folHlink&amp;gt;&amp;lt;/a:clrScheme&amp;gt;&amp;lt;a:fontScheme name=&quot;Office&quot;&amp;gt;&amp;lt;a:majorFont&amp;gt;&amp;lt;a:latin typeface=&quot;Cambria&quot;/&amp;gt;&amp;lt;a:ea typeface=&quot;&quot;/&amp;gt;&amp;lt;a:cs typeface=&quot;&quot;/&amp;gt;&amp;lt;a:font script=&quot;Jpan&quot; typeface=&quot;ï¼­ï¼³ ï¼°ã´ã·ãã¯&quot;/&amp;gt;&amp;lt;a:font script=&quot;Hang&quot; typeface=&quot;ë§ì ê³ ë&quot;/&amp;gt;&amp;lt;a:font script=&quot;Hans&quot; typeface=&quot;å®ä½&quot;/&amp;gt;&amp;lt;a:font script=&quot;Hant&quot; typeface=&quot;æ°ç´°æé«&quot;/&amp;gt;&amp;lt;a:font script=&quot;Arab&quot; typeface=&quot;Times New Roman&quot;/&amp;gt;&amp;lt;a:font script=&quot;Hebr&quot; typeface=&quot;Times New Roman&quot;/&amp;gt;&amp;lt;a:font script=&quot;Thai&quot; typeface=&quot;Tahoma&quot;/&amp;gt;&amp;lt;a:font script=&quot;Ethi&quot; typeface=&quot;Nyala&quot;/&amp;gt;&amp;lt;a:font script=&quot;Beng&quot; typeface=&quot;Vrinda&quot;/&amp;gt;&amp;lt;a:font script=&quot;Gujr&quot; typeface=&quot;Shruti&quot;/&amp;gt;&amp;lt;a:font script=&quot;Khmr&quot; typeface=&quot;MoolBoran&quot;/&amp;gt;&amp;lt;a:font script=&quot;Knda&quot; typeface=&quot;Tunga&quot;/&amp;gt;&amp;lt;a:font script=&quot;Guru&quot; typeface=&quot;Raavi&quot;/&amp;gt;&amp;lt;a:font script=&quot;Cans&quot; typeface=&quot;Euphemia&quot;/&amp;gt;&amp;lt;a:font script=&quot;Cher&quot; typeface=&quot;Plantagenet Cherokee&quot;/&amp;gt;&amp;lt;a:font script=&quot;Yiii&quot; typeface=&quot;Microsoft Yi Baiti&quot;/&amp;gt;&amp;lt;a:font script=&quot;Tibt&quot; typeface=&quot;Microsoft Himalaya&quot;/&amp;gt;&amp;lt;a:font script=&quot;Thaa&quot; typeface=&quot;MV Boli&quot;/&amp;gt;&amp;lt;a:font script=&quot;Deva&quot; typeface=&quot;Mangal&quot;/&amp;gt;&amp;lt;a:font script=&quot;Telu&quot; typeface=&quot;Gautami&quot;/&amp;gt;&amp;lt;a:font script=&quot;Taml&quot; typeface=&quot;Latha&quot;/&amp;gt;&amp;lt;a:font script=&quot;Syrc&quot; typeface=&quot;Estrangelo Edessa&quot;/&amp;gt;&amp;lt;a:font script=&quot;Orya&quot; typeface=&quot;Kalinga&quot;/&amp;gt;&amp;lt;a:font script=&quot;Mlym&quot; typeface=&quot;Kartika&quot;/&amp;gt;&amp;lt;a:font script=&quot;Laoo&quot; typeface=&quot;DokChampa&quot;/&amp;gt;&amp;lt;a:font script=&quot;Sinh&quot; typeface=&quot;Iskoola Pota&quot;/&amp;gt;&amp;lt;a:font script=&quot;Mong&quot; typeface=&quot;Mongolian Baiti&quot;/&amp;gt;&amp;lt;a:font script=&quot;Viet&quot; typeface=&quot;Times New Roman&quot;/&amp;gt;&amp;lt;a:font script=&quot;Uigh&quot; typeface=&quot;Microsoft Uighur&quot;/&amp;gt;&amp;lt;a:font script=&quot;Geor&quot; typeface=&quot;Sylfaen&quot;/&amp;gt;&amp;lt;/a:majorFont&amp;gt;&amp;lt;a:minorFont&amp;gt;&amp;lt;a:latin typeface=&quot;Calibri&quot;/&amp;gt;&amp;lt;a:ea typeface=&quot;&quot;/&amp;gt;&amp;lt;a:cs typeface=&quot;&quot;/&amp;gt;&amp;lt;a:font script=&quot;Jpan&quot; typeface=&quot;ï¼­ï¼³ ï¼°ã´ã·ãã¯&quot;/&amp;gt;&amp;lt;a:font script=&quot;Hang&quot; typeface=&quot;ë§ì ê³ ë&quot;/&amp;gt;&amp;lt;a:font script=&quot;Hans&quot; typeface=&quot;å®ä½&quot;/&amp;gt;&amp;lt;a:font script=&quot;Hant&quot; typeface=&quot;æ°ç´°æé«&quot;/&amp;gt;&amp;lt;a:font script=&quot;Arab&quot; typeface=&quot;Arial&quot;/&amp;gt;&amp;lt;a:font script=&quot;Hebr&quot; typeface=&quot;Arial&quot;/&amp;gt;&amp;lt;a:font script=&quot;Thai&quot; typeface=&quot;Tahoma&quot;/&amp;gt;&amp;lt;a:font script=&quot;Ethi&quot; typeface=&quot;Nyala&quot;/&amp;gt;&amp;lt;a:font script=&quot;Beng&quot; typeface=&quot;Vrinda&quot;/&amp;gt;&amp;lt;a:font script=&quot;Gujr&quot; typeface=&quot;Shruti&quot;/&amp;gt;&amp;lt;a:font script=&quot;Khmr&quot; typeface=&quot;DaunPenh&quot;/&amp;gt;&amp;lt;a:font script=&quot;Knda&quot; typeface=&quot;Tunga&quot;/&amp;gt;&amp;lt;a:font script=&quot;Guru&quot; typeface=&quot;Raavi&quot;/&amp;gt;&amp;lt;a:font script=&quot;Cans&quot; typeface=&quot;Euphemia&quot;/&amp;gt;&amp;lt;a:font script=&quot;Cher&quot; typeface=&quot;Plantagenet Cherokee&quot;/&amp;gt;&amp;lt;a:font script=&quot;Yiii&quot; typeface=&quot;Microsoft Yi Baiti&quot;/&amp;gt;&amp;lt;a:font script=&quot;Tibt&quot; typeface=&quot;Microsoft Himalaya&quot;/&amp;gt;&amp;lt;a:font script=&quot;Thaa&quot; typeface=&quot;MV Boli&quot;/&amp;gt;&amp;lt;a:font script=&quot;Deva&quot; typeface=&quot;Mangal&quot;/&amp;gt;&amp;lt;a:font script=&quot;Telu&quot; typeface=&quot;Gautami&quot;/&amp;gt;&amp;lt;a:font script=&quot;Taml&quot; typeface=&quot;Latha&quot;/&amp;gt;&amp;lt;a:font script=&quot;Syrc&quot; typeface=&quot;Estrangelo Edessa&quot;/&amp;gt;&amp;lt;a:font script=&quot;Orya&quot; typeface=&quot;Kalinga&quot;/&amp;gt;&amp;lt;a:font script=&quot;Mlym&quot; typeface=&quot;Kartika&quot;/&amp;gt;&amp;lt;a:font script=&quot;Laoo&quot; typeface=&quot;DokChampa&quot;/&amp;gt;&amp;lt;a:font script=&quot;Sinh&quot; typeface=&quot;Iskoola Pota&quot;/&amp;gt;&amp;lt;a:font script=&quot;Mong&quot; typeface=&quot;Mongolian Baiti&quot;/&amp;gt;&amp;lt;a:font script=&quot;Viet&quot; typeface=&quot;Arial&quot;/&amp;gt;&amp;lt;a:font script=&quot;Uigh&quot; typeface=&quot;Microsoft Uighur&quot;/&amp;gt;&amp;lt;a:font script=&quot;Geor&quot; typeface=&quot;Sylfaen&quot;/&amp;gt;&amp;lt;/a:minorFont&amp;gt;&amp;lt;/a:fontScheme&amp;gt;&amp;lt;a:fmtScheme name=&quot;Office&quot;&amp;gt;&amp;lt;a:fillStyleLst&amp;gt;&amp;lt;a:solidFill&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;/&amp;gt;&amp;lt;/a:solidFill&amp;gt;&amp;lt;a:gradFill rotWithShape=&quot;1&quot;&amp;gt;&amp;lt;a:gsLst&amp;gt;&amp;lt;a:gs pos=&quot;0&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:tint val=&quot;50000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;300000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;a:gs pos=&quot;35000&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:tint val=&quot;37000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;300000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;a:gs pos=&quot;100000&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:tint val=&quot;15000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;350000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;/a:gsLst&amp;gt;&amp;lt;a:lin ang=&quot;16200000&quot; scaled=&quot;1&quot;/&amp;gt;&amp;lt;/a:gradFill&amp;gt;&amp;lt;a:gradFill rotWithShape=&quot;1&quot;&amp;gt;&amp;lt;a:gsLst&amp;gt;&amp;lt;a:gs pos=&quot;0&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:tint val=&quot;100000&quot;/&amp;gt;&amp;lt;a:shade val=&quot;100000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;130000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;a:gs pos=&quot;100000&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:tint val=&quot;50000&quot;/&amp;gt;&amp;lt;a:shade val=&quot;100000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;350000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;/a:gsLst&amp;gt;&amp;lt;a:lin ang=&quot;16200000&quot; scaled=&quot;0&quot;/&amp;gt;&amp;lt;/a:gradFill&amp;gt;&amp;lt;/a:fillStyleLst&amp;gt;&amp;lt;a:lnStyleLst&amp;gt;&amp;lt;a:ln w=&quot;9525&quot; cap=&quot;flat&quot; cmpd=&quot;sng&quot; algn=&quot;ctr&quot;&amp;gt;&amp;lt;a:solidFill&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:shade val=&quot;95000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;105000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:solidFill&amp;gt;&amp;lt;a:prstDash val=&quot;solid&quot;/&amp;gt;&amp;lt;/a:ln&amp;gt;&amp;lt;a:ln w=&quot;25400&quot; cap=&quot;flat&quot; cmpd=&quot;sng&quot; algn=&quot;ctr&quot;&amp;gt;&amp;lt;a:solidFill&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;/&amp;gt;&amp;lt;/a:solidFill&amp;gt;&amp;lt;a:prstDash val=&quot;solid&quot;/&amp;gt;&amp;lt;/a:ln&amp;gt;&amp;lt;a:ln w=&quot;38100&quot; cap=&quot;flat&quot; cmpd=&quot;sng&quot; algn=&quot;ctr&quot;&amp;gt;&amp;lt;a:solidFill&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;/&amp;gt;&amp;lt;/a:solidFill&amp;gt;&amp;lt;a:prstDash val=&quot;solid&quot;/&amp;gt;&amp;lt;/a:ln&amp;gt;&amp;lt;/a:lnStyleLst&amp;gt;&amp;lt;a:effectStyleLst&amp;gt;&amp;lt;a:effectStyle&amp;gt;&amp;lt;a:effectLst&amp;gt;&amp;lt;a:outerShdw blurRad=&quot;40000&quot; dist=&quot;20000&quot; dir=&quot;5400000&quot; rotWithShape=&quot;0&quot;&amp;gt;&amp;lt;a:srgbClr val=&quot;000000&quot;&amp;gt;&amp;lt;a:alpha val=&quot;38000&quot;/&amp;gt;&amp;lt;/a:srgbClr&amp;gt;&amp;lt;/a:outerShdw&amp;gt;&amp;lt;/a:effectLst&amp;gt;&amp;lt;/a:effectStyle&amp;gt;&amp;lt;a:effectStyle&amp;gt;&amp;lt;a:effectLst&amp;gt;&amp;lt;a:outerShdw blurRad=&quot;40000&quot; dist=&quot;23000&quot; dir=&quot;5400000&quot; rotWithShape=&quot;0&quot;&amp;gt;&amp;lt;a:srgbClr val=&quot;000000&quot;&amp;gt;&amp;lt;a:alpha val=&quot;35000&quot;/&amp;gt;&amp;lt;/a:srgbClr&amp;gt;&amp;lt;/a:outerShdw&amp;gt;&amp;lt;/a:effectLst&amp;gt;&amp;lt;/a:effectStyle&amp;gt;&amp;lt;a:effectStyle&amp;gt;&amp;lt;a:effectLst&amp;gt;&amp;lt;a:outerShdw blurRad=&quot;40000&quot; dist=&quot;23000&quot; dir=&quot;5400000&quot; rotWithShape=&quot;0&quot;&amp;gt;&amp;lt;a:srgbClr val=&quot;000000&quot;&amp;gt;&amp;lt;a:alpha val=&quot;35000&quot;/&amp;gt;&amp;lt;/a:srgbClr&amp;gt;&amp;lt;/a:outerShdw&amp;gt;&amp;lt;/a:effectLst&amp;gt;&amp;lt;a:scene3d&amp;gt;&amp;lt;a:camera prst=&quot;orthographicFront&quot;&amp;gt;&amp;lt;a:rot lat=&quot;0&quot; lon=&quot;0&quot; rev=&quot;0&quot;/&amp;gt;&amp;lt;/a:camera&amp;gt;&amp;lt;a:lightRig rig=&quot;threePt&quot; dir=&quot;t&quot;&amp;gt;&amp;lt;a:rot lat=&quot;0&quot; lon=&quot;0&quot; rev=&quot;1200000&quot;/&amp;gt;&amp;lt;/a:lightRig&amp;gt;&amp;lt;/a:scene3d&amp;gt;&amp;lt;a:sp3d&amp;gt;&amp;lt;a:bevelT w=&quot;63500&quot; h=&quot;25400&quot;/&amp;gt;&amp;lt;/a:sp3d&amp;gt;&amp;lt;/a:effectStyle&amp;gt;&amp;lt;/a:effectStyleLst&amp;gt;&amp;lt;a:bgFillStyleLst&amp;gt;&amp;lt;a:solidFill&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;/&amp;gt;&amp;lt;/a:solidFill&amp;gt;&amp;lt;a:gradFill rotWithShape=&quot;1&quot;&amp;gt;&amp;lt;a:gsLst&amp;gt;&amp;lt;a:gs pos=&quot;0&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:tint val=&quot;40000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;350000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;a:gs pos=&quot;40000&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:tint val=&quot;45000&quot;/&amp;gt;&amp;lt;a:shade val=&quot;99000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;350000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;a:gs pos=&quot;100000&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:shade val=&quot;20000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;255000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;/a:gsLst&amp;gt;&amp;lt;a:path path=&quot;circle&quot;&amp;gt;&amp;lt;a:fillToRect l=&quot;50000&quot; t=&quot;-80000&quot; r=&quot;50000&quot; b=&quot;180000&quot;/&amp;gt;&amp;lt;/a:path&amp;gt;&amp;lt;/a:gradFill&amp;gt;&amp;lt;a:gradFill rotWithShape=&quot;1&quot;&amp;gt;&amp;lt;a:gsLst&amp;gt;&amp;lt;a:gs pos=&quot;0&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:tint val=&quot;80000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;300000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;a:gs pos=&quot;100000&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;phClr&quot;&amp;gt;&amp;lt;a:shade val=&quot;30000&quot;/&amp;gt;&amp;lt;a:satMod val=&quot;200000&quot;/&amp;gt;&amp;lt;/a:schemeClr&amp;gt;&amp;lt;/a:gs&amp;gt;&amp;lt;/a:gsLst&amp;gt;&amp;lt;a:path path=&quot;circle&quot;&amp;gt;&amp;lt;a:fillToRect l=&quot;50000&quot; t=&quot;50000&quot; r=&quot;50000&quot; b=&quot;50000&quot;/&amp;gt;&amp;lt;/a:path&amp;gt;&amp;lt;/a:gradFill&amp;gt;&amp;lt;/a:bgFillStyleLst&amp;gt;&amp;lt;/a:fmtScheme&amp;gt;&amp;lt;/a:themeElements&amp;gt;&amp;lt;a:objectDefaults&amp;gt;&amp;lt;a:spDef&amp;gt;&amp;lt;a:spPr/&amp;gt;&amp;lt;a:bodyPr/&amp;gt;&amp;lt;a:lstStyle/&amp;gt;&amp;lt;a:style&amp;gt;&amp;lt;a:lnRef idx=&quot;1&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;accent1&quot;/&amp;gt;&amp;lt;/a:lnRef&amp;gt;&amp;lt;a:fillRef idx=&quot;3&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;accent1&quot;/&amp;gt;&amp;lt;/a:fillRef&amp;gt;&amp;lt;a:effectRef idx=&quot;2&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;accent1&quot;/&amp;gt;&amp;lt;/a:effectRef&amp;gt;&amp;lt;a:fontRef idx=&quot;minor&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;lt1&quot;/&amp;gt;&amp;lt;/a:fontRef&amp;gt;&amp;lt;/a:style&amp;gt;&amp;lt;/a:spDef&amp;gt;&amp;lt;a:lnDef&amp;gt;&amp;lt;a:spPr/&amp;gt;&amp;lt;a:bodyPr/&amp;gt;&amp;lt;a:lstStyle/&amp;gt;&amp;lt;a:style&amp;gt;&amp;lt;a:lnRef idx=&quot;2&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;accent1&quot;/&amp;gt;&amp;lt;/a:lnRef&amp;gt;&amp;lt;a:fillRef idx=&quot;0&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;accent1&quot;/&amp;gt;&amp;lt;/a:fillRef&amp;gt;&amp;lt;a:effectRef idx=&quot;1&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;accent1&quot;/&amp;gt;&amp;lt;/a:effectRef&amp;gt;&amp;lt;a:fontRef idx=&quot;minor&quot;&amp;gt;&amp;lt;a:schemeClr val=&quot;tx1&quot;/&amp;gt;&amp;lt;/a:fontRef&amp;gt;&amp;lt;/a:style&amp;gt;&amp;lt;/a:lnDef&amp;gt;&amp;lt;/a:objectDefaults&amp;gt;&amp;lt;a:extraClrSchemeLst/&amp;gt;&amp;lt;/a:theme&amp;gt;&lt;span&gt;PK
ÃæLUôZZ
xl&lt;/span&gt;/styles.xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;styleSheet xmlns=&quot;http://schemas.openxmlformats.org/spreadsheetml/2006/main&quot; xmlns:vt=&quot;http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes&quot;&amp;gt;&amp;lt;numFmts count=&quot;1&quot;&amp;gt;&amp;lt;numFmt numFmtId=&quot;56&quot; formatCode=&quot;&amp;amp;quot;ä¸å/ä¸å &amp;amp;quot;hh&amp;amp;quot;æ&amp;amp;quot;mm&amp;amp;quot;å&amp;amp;quot;ss&amp;amp;quot;ç§ &amp;amp;quot;&quot;/&amp;gt;&amp;lt;/numFmts&amp;gt;&amp;lt;fonts count=&quot;1&quot;&amp;gt;&amp;lt;font&amp;gt;&amp;lt;sz val=&quot;12&quot;/&amp;gt;&amp;lt;color theme=&quot;1&quot;/&amp;gt;&amp;lt;name val=&quot;Calibri&quot;/&amp;gt;&amp;lt;family val=&quot;2&quot;/&amp;gt;&amp;lt;scheme val=&quot;minor&quot;/&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;/fonts&amp;gt;&amp;lt;fills count=&quot;2&quot;&amp;gt;&amp;lt;fill&amp;gt;&amp;lt;patternFill patternType=&quot;none&quot;/&amp;gt;&amp;lt;/fill&amp;gt;&amp;lt;fill&amp;gt;&amp;lt;patternFill patternType=&quot;gray125&quot;/&amp;gt;&amp;lt;/fill&amp;gt;&amp;lt;/fills&amp;gt;&amp;lt;borders count=&quot;1&quot;&amp;gt;&amp;lt;border&amp;gt;&amp;lt;left/&amp;gt;&amp;lt;right/&amp;gt;&amp;lt;top/&amp;gt;&amp;lt;bottom/&amp;gt;&amp;lt;diagonal/&amp;gt;&amp;lt;/border&amp;gt;&amp;lt;/borders&amp;gt;&amp;lt;cellStyleXfs count=&quot;1&quot;&amp;gt;&amp;lt;xf numFmtId=&quot;0&quot; fontId=&quot;0&quot; fillId=&quot;0&quot; borderId=&quot;0&quot;/&amp;gt;&amp;lt;/cellStyleXfs&amp;gt;&amp;lt;cellXfs count=&quot;1&quot;&amp;gt;&amp;lt;xf numFmtId=&quot;0&quot; fontId=&quot;0&quot; fillId=&quot;0&quot; borderId=&quot;0&quot; xfId=&quot;0&quot; applyNumberFormat=&quot;1&quot;/&amp;gt;&amp;lt;/cellXfs&amp;gt;&amp;lt;cellStyles count=&quot;1&quot;&amp;gt;&amp;lt;cellStyle name=&quot;Normal&quot; xfId=&quot;0&quot; builtinId=&quot;0&quot;/&amp;gt;&amp;lt;/cellStyles&amp;gt;&amp;lt;dxfs count=&quot;0&quot;/&amp;gt;&amp;lt;tableStyles count=&quot;0&quot; defaultTableStyle=&quot;TableStyleMedium9&quot; defaultPivotStyle=&quot;PivotStyleMedium4&quot;/&amp;gt;&amp;lt;/styleSheet&amp;gt;&lt;span&gt;PK
ÃæL÷Â&lt;/span&gt;00[Content_Types].xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;Types xmlns=&quot;http://schemas.openxmlformats.org/package/2006/content-types&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&amp;lt;Default Extension=&quot;xml&quot; ContentType=&quot;application/xml&quot;/&amp;gt;&amp;lt;Default Extension=&quot;bin&quot; ContentType=&quot;application/vnd.ms-excel.sheet.binary.macroEnabled.main&quot;/&amp;gt;&amp;lt;Default Extension=&quot;vml&quot; ContentType=&quot;application/vnd.openxmlformats-officedocument.vmlDrawing&quot;/&amp;gt;&amp;lt;Default Extension=&quot;bmp&quot; ContentType=&quot;image/bmp&quot;/&amp;gt;&amp;lt;Default Extension=&quot;png&quot; ContentType=&quot;image/png&quot;/&amp;gt;&amp;lt;Default Extension=&quot;gif&quot; ContentType=&quot;image/gif&quot;/&amp;gt;&amp;lt;Default Extension=&quot;emf&quot; ContentType=&quot;image/x-emf&quot;/&amp;gt;&amp;lt;Default Extension=&quot;wmf&quot; ContentType=&quot;image/x-wmf&quot;/&amp;gt;&amp;lt;Default Extension=&quot;jpg&quot; ContentType=&quot;image/jpeg&quot;/&amp;gt;&amp;lt;Default Extension=&quot;jpeg&quot; ContentType=&quot;image/jpeg&quot;/&amp;gt;&amp;lt;Default Extension=&quot;tif&quot; ContentType=&quot;image/tiff&quot;/&amp;gt;&amp;lt;Default Extension=&quot;tiff&quot; ContentType=&quot;image/tiff&quot;/&amp;gt;&amp;lt;Default Extension=&quot;pdf&quot; ContentType=&quot;application/pdf&quot;/&amp;gt;&amp;lt;Default Extension=&quot;rels&quot; ContentType=&quot;application/vnd.openxmlformats-package.relationships+xml&quot;/&amp;gt;&amp;lt;Override PartName=&quot;/xl/workbook.xml&quot; ContentType=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml&quot;/&amp;gt;&amp;lt;Override PartName=&quot;/xl/worksheets/sheet1.xml&quot; ContentType=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml&quot;/&amp;gt;&amp;lt;Override PartName=&quot;/xl/theme/theme1.xml&quot; ContentType=&quot;application/vnd.openxmlformats-officedocument.theme+xml&quot;/&amp;gt;&amp;lt;Override PartName=&quot;/xl/styles.xml&quot; ContentType=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml&quot;/&amp;gt;&amp;lt;Override PartName=&quot;/docProps/core.xml&quot; ContentType=&quot;application/vnd.openxmlformats-package.core-properties+xml&quot;/&amp;gt;&amp;lt;Override PartName=&quot;/docProps/app.xml&quot; ContentType=&quot;application/vnd.openxmlformats-officedocument.extended-properties+xml&quot;/&amp;gt;&amp;lt;/Types&amp;gt;PK
ÃæLJjùLL_rels/.rels&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;Relationships xmlns=&quot;http://schemas.openxmlformats.org/package/2006/relationships&quot;&amp;gt;&amp;lt;Relationship Id=&quot;rId2&quot; Type=&quot;http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties&quot; Target=&quot;docProps/core.xml&quot;/&amp;gt;&amp;lt;Relationship Id=&quot;rId3&quot; Type=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties&quot; Target=&quot;docProps/app.xml&quot;/&amp;gt;&amp;lt;Relationship Id=&quot;rId1&quot; Type=&quot;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument&quot; Target=&quot;xl/workbook.xml&quot;/&amp;gt;&amp;lt;/Relationships&amp;gt;PK&lt;/span&gt;
ÃæLÐ?dÝ--xl/_rels/workbook.xml.rels&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;Relationships xmlns=&quot;http://schemas.openxmlformats.org/package/2006/relationships&quot;&amp;gt;&amp;lt;Relationship Id=&quot;rId1&quot; Type=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet&quot; Target=&quot;worksheets/sheet1.xml&quot;/&amp;gt;&amp;lt;Relationship Id=&quot;rId2&quot; Type=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme&quot; Target=&quot;theme/theme1.xml&quot;/&amp;gt;&amp;lt;Relationship Id=&quot;rId3&quot; Type=&quot;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;schemas.openxmlformats.org/officeDocument/2006/relationships/styles&quot; Target=&quot;styles.xml&quot;/&amp;gt;&amp;lt;/Relationships&amp;gt;PK&lt;/span&gt;
ÃæLÖ|ZZdocProps/core.xmlPK
ÃæLþù«44docProps/app.xmlPK
ÃæLTÄ8ããëxl/worksheets/&lt;span&gt;sheet1.xmlPK
ÃæLÜè¯ÏDDxl&lt;/span&gt;/workbook.xmlPK
ÃæL0kÞÞu    xl/theme/&lt;span&gt;theme1.xmlPK
ÃæLUôZZ
&lt;/span&gt;'&lt;span&gt;xl/styles.xmlPK
ÃæL÷Â00    ,[Content_Types].xmlPK
ÃæLJjùLLj3_rels/.relsPK
ÃæLÐ?dÝ--ß5xl/_rels/workbook.xml.relsPK        &amp;gt;D8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4 Blob URL&lt;/h3&gt;
&lt;p&gt;其实，我最感兴趣的是这儿。2.3中的一大坨字符串，通过 Uine8Array转成了无符号数组，并通过new Blob方法，转成了二进制文件片段，关键代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; blobify(strData) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buf = &lt;span&gt;new&lt;/span&gt; ArrayBuffer(strData.length), view = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uint8Array(buf);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i=0; i!=strData.length; ++i) view[i] = strData.charCodeAt(i) &amp;amp; 0xFF&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; buf;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; excelBlob = &lt;span&gt;new&lt;/span&gt; Blob([blobify(data)], {type:&quot;application/octet-stream&quot;&lt;span&gt;});
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blobURL=URL.createObjectURL(excelBlob);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，通过URL.createObjectURL方法，把blob转成了，肉眼可见的js和HTML中可以看到的，Blob URL，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
blob:http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;sheetjs.com/f999f57f-b79f-4293-a317-3bbf6ea58788&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尼玛，一个html转Excel的库js，有20170行代码，恩，不错，开源万岁。&lt;/p&gt;

&lt;h2&gt;3. 总结&lt;/h2&gt;
&lt;p&gt;看起来，先不说性能如何，上面这些关键API利用一下，js应该是可以导出很多种格式的文件了。&lt;/p&gt;
&lt;p&gt;- 文本类的，txt html js css xml&lt;/p&gt;
&lt;p&gt;- 特定协议的文档，pdf Excel cvs（看起来word ppt 应该也可以了，懒得去查了）&lt;/p&gt;
&lt;p&gt;- 其他各类二进制文件，zip png jpg gif (不晓得是不是可以导出音视频...)&lt;/p&gt;

</description>
<pubDate>Fri, 06 Jul 2018 13:25:00 +0000</pubDate>
<dc:creator>youryida</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/youryida/p/9275615.html</dc:identifier>
</item>
</channel>
</rss>