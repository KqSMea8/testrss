<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring-Blog:个人博客（一）-Mybatis 读写分离 - jaycekong</title>
<link>http://www.cnblogs.com/jaycekon/p/spring-blog-mybatis.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jaycekon/p/spring-blog-mybatis.html</guid>
<description>&lt;p&gt;　　&lt;strong&gt;2018&lt;/strong&gt;，在平（tou）静（lan）了一段时间后，开始找点事情来做。这一次准备开发一个个人博客，在开发过程之中完善一下自己的技术。本系列博客只会提出一些比较有价值的技术思路，不会像写流水账一样记录开发过程。&lt;/p&gt;
&lt;p&gt;　　技术栈方面，会采用Spring Boot 2.0 作为底层框架，主要为了后续能够接入Spring Cloud 进行学习拓展。并且Spring Boot 2.0基于Spring5，也可以提前预习一些Spring5的新特性。后续技术会在相应博客中提出。&lt;/p&gt;
&lt;p&gt;　　项目GitHub地址：&lt;a href=&quot;https://github.com/jaycekon/SpringBoot&quot; target=&quot;_blank&quot;&gt;https://github.com/jaycekon/SpringBoot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　介绍一下目录结构：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-Blog( &lt;strong&gt;Parent&lt;/strong&gt; 项目)&lt;/li&gt;
&lt;li&gt;Spring-Blog-common（ &lt;strong&gt;Util &lt;/strong&gt;模块）&lt;/li&gt;
&lt;li&gt;Spring-Blog-business（&lt;strong&gt;Repository&lt;/strong&gt;模块）&lt;/li&gt;
&lt;li&gt;Spring-Blog-api （&lt;strong&gt;Web&lt;/strong&gt; 模块）&lt;/li&gt;
&lt;li&gt;Spring-Blog-webflux （基于&lt;strong&gt;Spring Boot 2.0&lt;/strong&gt; 的 &lt;strong&gt;Web&lt;/strong&gt;模块）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　为了让各位朋友能够更好理解这一模块的内容，演示代码将存放在Spring Boot 项目下：&lt;/p&gt;
&lt;p&gt;　　Github 地址：&lt;a href=&quot;https://github.com/jaycekon/SpringBoot&quot; target=&quot;_blank&quot;&gt;https://github.com/jaycekon/SpringBoot&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;　　  在开始讲解前，我们需要先构建后我们的运行环境。&lt;strong&gt;Spring Boot&lt;/strong&gt; 引入 &lt;strong&gt;Mybatis&lt;/strong&gt; 的教程 可以参考 &lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/jaycekon/p/SpringBoot.html&quot; target=&quot;_blank&quot;&gt;传送门&lt;/a&gt; 。&lt;/strong&gt;这里我们不细述了，首先来看一下我们的目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053081/201801/1053081-20180119140745959-272970618.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　有使用过&lt;strong&gt;Spring Boot&lt;/strong&gt; 的童鞋应该清楚，当我们在application.properties 配置好了我们的数据库连接信息后，&lt;strong&gt;Spring Boot&lt;/strong&gt; 将会帮我们自动装载好 &lt;strong&gt;DataSource&lt;/strong&gt; 。但如果我们需要进行读写分离操作是，如何配置自己的数据源，是我们必须掌握的。&lt;/p&gt;
&lt;p&gt;　　首先我们来看一下配置文件中的信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring.datasource.url=jdbc:mysql://localhost:3306/charles_blog2
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#别名扫描目录
mybatis.type-aliases-package=com.jaycekon.demo.model
#Mapper.xml扫描目录
mybatis.mapper-locations=classpath:mybatis-mappers/*.xml

#tkmapper 帮助工具
mapper.mappers=com.jaycekon.demo.MyMapper
mapper.not-empty=false
mapper.identity=MYSQL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1.1 DataSourceBuilder&lt;/h2&gt;
&lt;p&gt;　　　　　　我们首先来看一下使用 DataSourceBuilder 来构建出DataSource:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@MapperScan(&lt;/span&gt;&quot;com.jaycekon.demo.mapper&quot;&lt;span&gt;)
@EnableTransactionManagement
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SpringJDBCDataSource {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 通过Spring JDBC 快速创建 DataSource
     * 参数格式
     * spring.datasource.master.jdbcurl=jdbc:mysql://localhost:3306/charles_blog
     * spring.datasource.master.username=root
     * spring.datasource.master.password=root
     * spring.datasource.master.driver-class-name=com.mysql.jdbc.Driver
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; DataSource
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    @ConfigurationProperties(prefix &lt;/span&gt;= &quot;spring.datasource.master&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DataSource dataSource() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DataSourceBuilder.create().build();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　  从代码中我们可以看出，使用DataSourceBuilder 构建DataSource 的方法非常简单，但是需要注意的是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;　　　　&lt;strong&gt;DataSourceBuilder&lt;/strong&gt; 只能自动识别配置文件中的 jdbcurl,username,password,driver-class-name等命名，因此我们需要在方法体上加上 &lt;strong&gt;@ ConfigurationProperties&lt;/strong&gt; 注解。&lt;/li&gt;
&lt;li&gt;　　       数据库连接地址变量名需要使用 &lt;strong&gt;jdbcurl&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;             &lt;/strong&gt; 数据库连接池使用 &lt;strong&gt;com.zaxxer.hikari.HikariDataSource&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;执行单元测试时，我们可以看到 DataSource 创建以及关闭的过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053081/201801/1053081-20180119144128615-704415635.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;1.2 DruidDataSource&lt;/h2&gt;
&lt;p&gt;　　　　除了使用上述的构建方法外，我们可以选择使用阿里提供的 &lt;strong&gt;Druid&lt;/strong&gt; 数据库连接池创建 &lt;strong&gt;DataSource&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@EnableTransactionManagement
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DruidDataSourceConfig {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataSourceProperties properties;

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DataSource dataSoucre() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        DruidDataSource dataSource &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DruidDataSource();
        dataSource.setUrl(properties.getUrl());
        dataSource.setDriverClassName(properties.getDriverClassName());
        dataSource.setUsername(properties.getUsername());
        dataSource.setPassword(properties.getPassword());
        dataSource.setInitialSize(&lt;/span&gt;5&lt;span&gt;);
        dataSource.setMinIdle(&lt;/span&gt;5&lt;span&gt;);
        dataSource.setMaxActive(&lt;/span&gt;100&lt;span&gt;);
        dataSource.setMaxWait(&lt;/span&gt;60000&lt;span&gt;);
        dataSource.setTimeBetweenEvictionRunsMillis(&lt;/span&gt;60000&lt;span&gt;);
        dataSource.setMinEvictableIdleTimeMillis(&lt;/span&gt;300000&lt;span&gt;);
        dataSource.setValidationQuery(&lt;/span&gt;&quot;SELECT 'x'&quot;&lt;span&gt;);
        dataSource.setTestWhileIdle(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        dataSource.setTestOnBorrow(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        dataSource.setTestOnReturn(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        dataSource.setPoolPreparedStatements(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        dataSource.setMaxPoolPreparedStatementPerConnectionSize(&lt;/span&gt;20&lt;span&gt;);
        dataSource.setFilters(&lt;/span&gt;&quot;stat,wall&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataSource;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　使用 &lt;strong&gt;DruidDataSource &lt;/strong&gt; 作为数据库连接池可能看起来会比较麻烦，但是换一个角度来说，这个更加可控。我们可以通过  &lt;strong&gt;DataSourceProperties&lt;/strong&gt; 来获取 application.properties 中的配置文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
spring.datasource.url=jdbc:mysql:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:3306/charles_blog2&lt;/span&gt;
spring.datasource.username=&lt;span&gt;root
spring.datasource.password&lt;/span&gt;=&lt;span&gt;root
spring.datasource.driver&lt;/span&gt;-&lt;span&gt;class&lt;/span&gt;-name=com.mysql.jdbc.Driver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　需要注意的是，DataSourceProperties 读取的配置文件 前缀是 spring.datasource ，我们可以进入到 DataSourceProperties 的源码中观察：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@ConfigurationProperties(prefix = &quot;spring.datasource&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataSourceProperties
        &lt;/span&gt;&lt;span&gt;implements&lt;/span&gt; BeanClassLoaderAware, EnvironmentAware, InitializingBean
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　可以看到，在源码中已经默认标注了前缀的格式。&lt;/p&gt;

&lt;p&gt;　　　　除了使用 DataSourceProperties 来获取配置文件 我们还可以使用通用的环境变量读取类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Environment env;&lt;br/&gt;　　&lt;br/&gt;　　
&lt;/pre&gt;
&lt;pre&gt;
　　　　env.getProperty(&quot;spring.datasource.write&quot;)
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;　　　　配置多数据源主要需要以下几个步骤：&lt;/p&gt;
&lt;h3&gt;　　　　2.1 DatabaseType 数据源名称&lt;/h3&gt;
&lt;p&gt;　　　　　　　　这里直接使用枚举类型区分，读数据源和写数据源&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; DatabaseType {
    master(&lt;/span&gt;&quot;write&quot;), slave(&quot;read&quot;&lt;span&gt;);


    DatabaseType(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;DatabaseType{&quot; +
                &quot;name='&quot; + name + '\'' +
                '}'&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;　　　　2.2 DatabaseContextHolder &lt;/h3&gt;
&lt;p&gt;　　　　　　该类主要用于记录当前线程使用的数据源，使用 &lt;strong&gt;ThreadLocal&lt;/strong&gt; 进行记录数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DatabaseContextHolder {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ThreadLocal&amp;lt;DatabaseType&amp;gt; contextHolder = &lt;span&gt;new&lt;/span&gt; ThreadLocal&amp;lt;&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDatabaseType(DatabaseType type) {
        contextHolder.set(type);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; DatabaseType getDatabaseType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; contextHolder.get();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;　　　　2.3 DynamicDataSource&lt;/h3&gt;
&lt;p&gt;　　　　　该类继承 &lt;strong&gt;AbstractRoutingDataSource&lt;/strong&gt; 用于管理 我们的数据源，主要实现了 &lt;strong&gt;determineCurrentLookupKey&lt;/strong&gt; 方法。&lt;/p&gt;
&lt;p&gt;　　　　　后续细述这个类是如何进行多数据源管理的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DynamicDataSource &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractRoutingDataSource {


    @Nullable
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Object determineCurrentLookupKey() {
        DatabaseType type &lt;/span&gt;=&lt;span&gt; DatabaseContextHolder.getDatabaseType();
        logger.info(&lt;/span&gt;&quot;====================dataSource ==========&quot; +&lt;span&gt; type);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; type;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;　　　　2.4 DataSourceConfig&lt;/h3&gt;
&lt;p&gt;　　　　　最后一步就是配置我们的数据源，将数据源放置到 &lt;strong&gt;DynamicDataSource&lt;/strong&gt; 中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@MapperScan(&lt;/span&gt;&quot;com.jaycekon.demo.mapper&quot;&lt;span&gt;)
@EnableTransactionManagement
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataSourceConfig {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataSourceProperties properties;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 通过Spring JDBC 快速创建 DataSource
     * 参数格式
     * spring.datasource.master.jdbcurl=jdbc:mysql://localhost:3306/charles_blog
     * spring.datasource.master.username=root
     * spring.datasource.master.password=root
     * spring.datasource.master.driver-class-name=com.mysql.jdbc.Driver
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; DataSource
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean(name &lt;/span&gt;= &quot;masterDataSource&quot;&lt;span&gt;)
    @Qualifier(&lt;/span&gt;&quot;masterDataSource&quot;&lt;span&gt;)
    @ConfigurationProperties(prefix &lt;/span&gt;= &quot;spring.datasource.master&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DataSource masterDataSource() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DataSourceBuilder.create().build();
    }

 &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 手动创建DruidDataSource,通过DataSourceProperties 读取配置
     * 参数格式
     * spring.datasource.url=jdbc:mysql://localhost:3306/charles_blog
     * spring.datasource.username=root
     * spring.datasource.password=root
     * spring.datasource.driver-class-name=com.mysql.jdbc.Driver
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; DataSource
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; SQLException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean(name &lt;/span&gt;= &quot;slaveDataSource&quot;&lt;span&gt;)
    @Qualifier(&lt;/span&gt;&quot;slaveDataSource&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DataSource slaveDataSource() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
        DruidDataSource dataSource &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DruidDataSource();
        dataSource.setUrl(properties.getUrl());
        dataSource.setDriverClassName(properties.getDriverClassName());
        dataSource.setUsername(properties.getUsername());
        dataSource.setPassword(properties.getPassword());
        dataSource.setInitialSize(&lt;/span&gt;5&lt;span&gt;);
        dataSource.setMinIdle(&lt;/span&gt;5&lt;span&gt;);
        dataSource.setMaxActive(&lt;/span&gt;100&lt;span&gt;);
        dataSource.setMaxWait(&lt;/span&gt;60000&lt;span&gt;);
        dataSource.setTimeBetweenEvictionRunsMillis(&lt;/span&gt;60000&lt;span&gt;);
        dataSource.setMinEvictableIdleTimeMillis(&lt;/span&gt;300000&lt;span&gt;);
        dataSource.setValidationQuery(&lt;/span&gt;&quot;SELECT 'x'&quot;&lt;span&gt;);
        dataSource.setTestWhileIdle(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        dataSource.setTestOnBorrow(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        dataSource.setTestOnReturn(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        dataSource.setPoolPreparedStatements(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        dataSource.setMaxPoolPreparedStatementPerConnectionSize(&lt;/span&gt;20&lt;span&gt;);
        dataSource.setFilters(&lt;/span&gt;&quot;stat,wall&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataSource;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *  构造多数据源连接池
     *  Master 数据源连接池采用 HikariDataSource
     *  Slave  数据源连接池采用 DruidDataSource
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; master
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; slave
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    @Primary
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DynamicDataSource dataSource(@Qualifier(&quot;masterDataSource&quot;&lt;span&gt;) DataSource master,
                                        @Qualifier(&lt;/span&gt;&quot;slaveDataSource&quot;&lt;span&gt;) DataSource slave) {
        Map&lt;/span&gt;&amp;lt;Object, Object&amp;gt; targetDataSources = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
        targetDataSources.put(DatabaseType.master, master);
        targetDataSources.put(DatabaseType.slave, slave);

        DynamicDataSource dataSource &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DynamicDataSource();
        dataSource.setTargetDataSources(targetDataSources);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该方法是AbstractRoutingDataSource的方法&lt;/span&gt;
        dataSource.setDefaultTargetDataSource(slave);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认的datasource设置为myTestDbDataSource&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataSource;
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionFactory sqlSessionFactory(@Qualifier(&quot;masterDataSource&quot;&lt;span&gt;) DataSource myTestDbDataSource,
                                               @Qualifier(&lt;/span&gt;&quot;slaveDataSource&quot;) DataSource myTestDb2DataSource) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        SqlSessionFactoryBean fb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBean();
        fb.setDataSource(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dataSource(myTestDbDataSource, myTestDb2DataSource));
        fb.setTypeAliasesPackage(env.getProperty(&lt;/span&gt;&quot;mybatis.type-aliases-package&quot;&lt;span&gt;));
        fb.setMapperLocations(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; PathMatchingResourcePatternResolver().getResources(env.getProperty(&quot;mybatis.mapper-locations&quot;&lt;span&gt;)));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fb.getObject();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　上述代码块比较长，我们来解析一下：&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;pre&gt;
masterDataSource 和 slaveDataSource &lt;span&gt;主要是用来创建数据源的，这里分别使用了 hikaridatasource 和  druidDataSource 作为数据源&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;pre&gt;
DynamicDataSource 方法体中，我们主要是将两个数据源都放到 DynamicDataSource 中进行统一管理
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;pre&gt;
SqlSessionFactory  方法则是将所有数据源（DynamicDataSource ）统一管理
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;　　　　2.5 UserMapperTest&lt;/h3&gt;
&lt;p&gt;　　　　　　接下来我们来简单观察一下 DataSource 的创建过程：&lt;/p&gt;
&lt;p&gt;　　　　　　首先我们可以看到我们的两个数据源以及构建好了，分别使用的是HikariDataSource 和 DruidDataSource，然后我们会将两个数据源放入到 &lt;strong&gt;targetDataSource&lt;/strong&gt; 中，并且这里讲我们的 &lt;strong&gt;slave&lt;/strong&gt; 作为默认数据源 &lt;strong&gt;defaultTargetDataSource&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053081/201801/1053081-20180119151058646-226905663.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　然后到获取数据源这一块：&lt;/p&gt;
&lt;p&gt;　　　　主要是从 AbstractRoutingDataSource 这个类中的 determineTargetDataSource（ ） 方法中进行判断，这里会调用到我们再 DynamicDataSource 中的方法， 去判断需要使用哪一个数据源。如果没有设置数据源，将采用默认数据源，就是我们刚才设置的DruidDataSource 数据源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053081/201801/1053081-20180119151355146-1739757189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　　　在最后的代码运行结果中：&lt;/p&gt;
&lt;p&gt;　　　　　　我们可以看到确实是使用了我们设置的默认数据源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053081/201801/1053081-20180119151640912-725082685.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;　　　　　　在经历了千山万水后，终于来到我们的读写分离模块了，首先我们需要添加一些我们的配置信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
spring.datasource.read =&lt;span&gt; get,select,count,list,query
spring.datasource.write &lt;/span&gt;= add,create,update,delete,remove,insert
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　这两个变量主要用于切面判断中，区分哪一些部分是需要使用 读数据源，哪些是需要使用写的。&lt;/p&gt;

&lt;h3&gt;　　　　3.1 DynamicDataSource 修改&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DynamicDataSource &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractRoutingDataSource {

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Map&amp;lt;DatabaseType, List&amp;lt;String&amp;gt;&amp;gt; METHOD_TYPE_MAP = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();


    @Nullable
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Object determineCurrentLookupKey() {
        DatabaseType type &lt;/span&gt;=&lt;span&gt; DatabaseContextHolder.getDatabaseType();
        logger.info(&lt;/span&gt;&quot;====================dataSource ==========&quot; +&lt;span&gt; type);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; type;
    }

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setMethodType(DatabaseType type, String content) {
        List&lt;/span&gt;&amp;lt;String&amp;gt; list = Arrays.asList(content.split(&quot;,&quot;&lt;span&gt;));
        METHOD_TYPE_MAP.put(type, list);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　在这里我们需要添加一个Map 进行记录一些读写的前缀信息。&lt;/p&gt;


&lt;h3&gt;　　　　3.2 DataSourceConfig 修改&lt;/h3&gt;
&lt;p&gt;　　　　　　在DataSourceConfig 中，我们再设置DynamicDataSource 的时候，将前缀信息设置进去。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Bean
    @Primary
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DynamicDataSource dataSource(@Qualifier(&quot;masterDataSource&quot;&lt;span&gt;) DataSource master,
                                        @Qualifier(&lt;/span&gt;&quot;slaveDataSource&quot;&lt;span&gt;) DataSource slave) {
        Map&lt;/span&gt;&amp;lt;Object, Object&amp;gt; targetDataSources = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
        targetDataSources.put(DatabaseType.master, master);
        targetDataSources.put(DatabaseType.slave, slave);

        DynamicDataSource dataSource &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DynamicDataSource();
        dataSource.setTargetDataSources(targetDataSources);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 该方法是AbstractRoutingDataSource的方法&lt;/span&gt;
        dataSource.setDefaultTargetDataSource(slave);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认的datasource设置为myTestDbDataSource&lt;/span&gt;
&lt;span&gt;
        String read &lt;/span&gt;= env.getProperty(&quot;spring.datasource.read&quot;&lt;span&gt;);
        dataSource.setMethodType(DatabaseType.slave, read);

        String write &lt;/span&gt;= env.getProperty(&quot;spring.datasource.write&quot;&lt;span&gt;);
        dataSource.setMethodType(DatabaseType.master, write);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataSource;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;　　　　3.3 DataSourceAspect&lt;/h3&gt;
&lt;p&gt;　　　　　　在配置好读写的方法前缀后，我们需要配置一个切面，监听在进入Mapper 方法前将数据源设置好：&lt;/p&gt;
&lt;p&gt;　　　　　　主要的操作点在于  DatabaseContextHolder.setDatabaseType(type); 结合我们上面多数据源的获取数据源方法，这里就是我们设置读或写数据源的关键了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Aspect
@Component
@EnableAspectJAutoProxy(proxyTargetClass &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataSourceAspect {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(DataSourceAspect.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    @Pointcut(&lt;/span&gt;&quot;execution(* com.jaycekon.demo.mapper.*.*(..))&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; aspect() {

    }


    @Before(&lt;/span&gt;&quot;aspect()&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; before(JoinPoint point) {
        String className &lt;/span&gt;=&lt;span&gt; point.getTarget().getClass().getName();
        String method &lt;/span&gt;=&lt;span&gt; point.getSignature().getName();
        String args &lt;/span&gt;= StringUtils.join(point.getArgs(), &quot;,&quot;&lt;span&gt;);
        logger.info(&lt;/span&gt;&quot;className:{}, method:{}, args:{} &quot;&lt;span&gt;, className, method, args);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (DatabaseType type : DatabaseType.values()) {
                List&lt;/span&gt;&amp;lt;String&amp;gt; values =&lt;span&gt; DynamicDataSource.METHOD_TYPE_MAP.get(type);
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String key : values) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (method.startsWith(key)) {
                        logger.info(&lt;/span&gt;&quot;&amp;gt;&amp;gt;{} 方法使用的数据源为:{}&amp;lt;&amp;lt;&quot;&lt;span&gt;, method, key);
                        DatabaseContextHolder.setDatabaseType(type);
                        DatabaseType types &lt;/span&gt;=&lt;span&gt; DatabaseContextHolder.getDatabaseType();
                        logger.info(&lt;/span&gt;&quot;&amp;gt;&amp;gt;{}方法使用的数据源为:{}&amp;lt;&amp;lt;&quot;&lt;span&gt;, method, types);
                    }
                }
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;　　　　3.4 UserMapperTest&lt;/h3&gt;
&lt;p&gt;　　　　　　方法启动后，先进入切面中，根据methodName 设置数据源类型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053081/201801/1053081-20180119153108912-1099343265.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　　　　　然后进入到determineTargetDataSource 方法中 获取到数据源：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053081/201801/1053081-20180119153236209-27735963.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053081/201801/1053081-20180119153257162-1784365561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;





&lt;p&gt;　　希望看完后觉得有帮助的朋友，帮博主到github 上面点个Start 或者 fork&lt;/p&gt;
&lt;p&gt;　　Spring-Blog 项目GitHub地址：&lt;a href=&quot;https://github.com/jaycekon/SpringBoot&quot; target=&quot;_blank&quot;&gt;https://github.com/jaycekon/SpringBoot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　示例代码 Github 地址：&lt;a href=&quot;https://github.com/jaycekon/SpringBoot&quot; target=&quot;_blank&quot;&gt;https://github.com/jaycekon/SpringBoot&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 07:35:00 +0000</pubDate>
<dc:creator>jaycekong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jaycekon/p/spring-blog-mybatis.html</dc:identifier>
</item>
<item>
<title>微信小程序实现按首字母检索城市列表 - 西江无月</title>
<link>http://www.cnblogs.com/xjwy/p/8317144.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xjwy/p/8317144.html</guid>
<description>&lt;p&gt;不说废话，上效果图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1015155/201801/1015155-20180119142038318-1131084048.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;因为我有多处要用到，所以我这里是写成自定义组件的，你也可以直接改成在page页面编写：&lt;/p&gt;
&lt;p&gt;布局左边一个scroll-view，显示城市列表,右边一个view显示字母列表，城市列表这边有首字母显示，给这个添加这个字母的ID，然后给右边的26个字母添加点击事件，点击的时候获取到点击的是哪个字母，给scroll-view的scroll-into-view赋值相应的字母，它左边就可以跳到相应的地方，再给scroll-view 加一个scroll-with-animation，让它跳转的时候有动画效果；&lt;/p&gt;
&lt;p&gt;首先，我们来看看wxml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;view class='city_box' style='{{styles}}'&amp;gt;
      &amp;lt;view class='city_left'&amp;gt;
          &amp;lt;scroll-view scroll-y style='width:100%;height:100%;' scroll-&lt;span&gt;with&lt;/span&gt;-animation scroll-into-view='{{cityListId}}'&amp;gt;
              &amp;lt;view class='city_locate' data-types='locate' catchtap='cityTap'&amp;gt;
                  &amp;lt;text class='city_locate_title'&amp;gt;自动定位&amp;lt;/text&amp;gt;
                  &amp;lt;text class='city_locate_text' style='{{!locateCity&amp;amp;&amp;amp;&quot;color:#33b9ff;&quot;}}'&amp;gt;{{locateCity||'点击定位'}}&amp;lt;/text&amp;gt;
              &amp;lt;/view&amp;gt;
              &amp;lt;view class='national' data-types='national' catchtap='cityTap'&amp;gt;全国&amp;lt;/view&amp;gt;
              &amp;lt;view class='new_city'&amp;gt;
                  &amp;lt;view class='new_city_title'&amp;gt;热门城市&amp;lt;/view&amp;gt;
                  &amp;lt;view class='new_city_box'&amp;gt;
                      &amp;lt;text class='new_city_text' wx:&lt;span&gt;for&lt;/span&gt;='{{newcity}}' wx:key='this' data-types='new' catchtap='cityTap' data-val='{{item}}'&amp;gt;{{item}}&amp;lt;/text&amp;gt;
                  &amp;lt;/view&amp;gt;
              &amp;lt;/view&amp;gt;
              &amp;lt;view class='city_list_box'&amp;gt;
                &amp;lt;block wx:&lt;span&gt;for&lt;/span&gt;='{{citylist}}' wx:key='this' wx:&lt;span&gt;for&lt;/span&gt;-item='letterItem' wx:&lt;span&gt;for&lt;/span&gt;-index='letterIndex'&amp;gt;
                  &amp;lt;view class='city_first_letter' id='{{letterItem.letter}}'&amp;gt;{{letterItem.letter}}&amp;lt;/view&amp;gt;
                  &amp;lt;text class='city_name' wx:&lt;span&gt;for&lt;/span&gt;='{{letterItem.data}}' wx:key='this' data-types='list' catchtap='cityTap' data-index='{{index}}' data-val='{{item}}'&amp;gt;{{item.cityName}}&amp;lt;/text&amp;gt;
                &amp;lt;/block&amp;gt;
              &amp;lt;/view&amp;gt;
          &amp;lt;/scroll-view&amp;gt;
      &amp;lt;/view&amp;gt;
      &amp;lt;view class='city_right'&amp;gt;
          &amp;lt;text class='letter_item' wx:&lt;span&gt;for&lt;/span&gt;='{{letter}}' wx:key='this' catchtap='letterTap' data-item='{{item}}'&amp;gt;{{item}}&amp;lt;/text&amp;gt;
      &amp;lt;/view&amp;gt;
  &amp;lt;/view&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后wxss&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.city_box{
  height:&lt;/span&gt;100%&lt;span&gt;;
  background: #fff;
  display: flex;
}
.city_left{
  flex: &lt;/span&gt;1&lt;span&gt;;
}
.city_right{
  width: 60rpx;
  display: flex;
  flex&lt;/span&gt;-&lt;span&gt;direction: column;
  justify&lt;/span&gt;-content: space-&lt;span&gt;around;
}
.letter_item{
  flex: &lt;/span&gt;1&lt;span&gt;;
  display: block;
  font&lt;/span&gt;-&lt;span&gt;size: 24rpx;
  color: #33B9FF;
  text&lt;/span&gt;-&lt;span&gt;align: center;
}
.city_locate,.national{
  height: 80rpx;
  line&lt;/span&gt;-&lt;span&gt;height: 80rpx;
  border&lt;/span&gt;-&lt;span&gt;bottom: 1px solid #efefef;
  font&lt;/span&gt;-&lt;span&gt;size: 28rpx;
  color: #&lt;/span&gt;333&lt;span&gt;;
  padding&lt;/span&gt;-&lt;span&gt;left: 25rpx;
}
.city_locate_title{
  color: #&lt;/span&gt;999&lt;span&gt;;
  margin&lt;/span&gt;-&lt;span&gt;right: 20rpx;
}
.new_city{
  background: #efefef;
  font&lt;/span&gt;-&lt;span&gt;size: 28rpx;
}
.new_city_title{
  line&lt;/span&gt;-&lt;span&gt;height: 50rpx;
  color: #&lt;/span&gt;999&lt;span&gt;;
  padding&lt;/span&gt;-&lt;span&gt;left: 25rpx;
  margin&lt;/span&gt;-&lt;span&gt;bottom: 20rpx;
}
.new_city_box{
  display: flex;
  flex&lt;/span&gt;-&lt;span&gt;wrap: wrap;
}
.new_city_text{
  width: 200rpx;
  text&lt;/span&gt;-&lt;span&gt;align: center;
  line&lt;/span&gt;-&lt;span&gt;height: 70rpx;
  background: #fff;
  border&lt;/span&gt;-&lt;span&gt;radius: 35rpx;
  margin:&lt;/span&gt;0 0&lt;span&gt; 22rpx 22rpx;
}
.city_first_letter{
  line&lt;/span&gt;-&lt;span&gt;height: 40rpx;
  height: 40rpx;
  padding&lt;/span&gt;-&lt;span&gt;left: 25rpx;
  font&lt;/span&gt;-&lt;span&gt;size: 28rpx;
  background: #eee;
  color: #&lt;/span&gt;999&lt;span&gt;;
}
.city_name{
  display: block;
  line&lt;/span&gt;-&lt;span&gt;height: 80rpx;
  height: 80rpx;
  border&lt;/span&gt;-&lt;span&gt;bottom: 1px solid #efefef;
  font&lt;/span&gt;-&lt;span&gt;size: 28rpx;
  color: #&lt;/span&gt;333&lt;span&gt;;
  padding&lt;/span&gt;-&lt;span&gt;left: 25rpx;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后是json文件，因为我这里是组件，所以是下面这样，如果你不是的组件，那么不要这句&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;div&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;&quot;component&quot;: true&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;最后JS，因为我这里是写的一个组件，所以是Component而不是Page&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;151&quot;&gt;
&lt;pre&gt;
import qqmap from '../../utils/map.js'&lt;span&gt;;
Component({
  properties: {
    styles:{//这个是可以自定义最外层的view的样式
      type:String,
      value:&lt;/span&gt;''&lt;span&gt;,
      observer: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (newval, oldval) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 监听改变&lt;/span&gt;
&lt;span&gt;        console.log(newval, oldval);
      }
    }
  },
  data: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面是字母排序&lt;/span&gt;
    letter: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;&lt;span&gt;],
    cityListId: &lt;/span&gt;''&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面是城市列表信息，这里只是模拟数据&lt;/span&gt;
    citylist: [{ &quot;letter&quot;: &quot;A&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v7&quot;, &quot;cityName&quot;: &quot;安徽&quot; }] }, { &quot;letter&quot;: &quot;B&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v10&quot;, &quot;cityName&quot;: &quot;巴中&quot; }, { &quot;id&quot;: &quot;v4&quot;, &quot;cityName&quot;: &quot;包头&quot; }, { &quot;id&quot;: &quot;v1&quot;, &quot;cityName&quot;: &quot;北京&quot; }] }, { &quot;letter&quot;: &quot;C&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v15&quot;, &quot;cityName&quot;: &quot;成都&quot; }] }, { &quot;letter&quot;: &quot;D&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v21&quot;, &quot;cityName&quot;: &quot;稻城&quot; }] }, { &quot;letter&quot;: &quot;G&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v17&quot;, &quot;cityName&quot;: &quot;广州&quot; }, { &quot;id&quot;: &quot;v29&quot;, &quot;cityName&quot;: &quot;桂林&quot; }] }, { &quot;letter&quot;: &quot;H&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v9&quot;, &quot;cityName&quot;: &quot;海南&quot; }, { &quot;id&quot;: &quot;v3&quot;, &quot;cityName&quot;: &quot;呼和浩特&quot; }] }, { &quot;letter&quot;: &quot;L&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v24&quot;, &quot;cityName&quot;: &quot;洛阳&quot; }, { &quot;id&quot;: &quot;v20&quot;, &quot;cityName&quot;: &quot;拉萨&quot; }, { &quot;id&quot;: &quot;v14&quot;, &quot;cityName&quot;: &quot;丽江&quot; }] }, { &quot;letter&quot;: &quot;M&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v13&quot;, &quot;cityName&quot;: &quot;眉山&quot; }] }, { &quot;letter&quot;: &quot;N&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v27&quot;, &quot;cityName&quot;: &quot;南京&quot; }] }, { &quot;letter&quot;: &quot;S&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v18&quot;, &quot;cityName&quot;: &quot;三亚&quot; }, { &quot;id&quot;: &quot;v2&quot;, &quot;cityName&quot;: &quot;上海&quot; }] }, { &quot;letter&quot;: &quot;T&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v5&quot;, &quot;cityName&quot;: &quot;天津&quot; }] }, { &quot;letter&quot;: &quot;W&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v12&quot;, &quot;cityName&quot;: &quot;乌鲁木齐&quot; }, { &quot;id&quot;: &quot;v25&quot;, &quot;cityName&quot;: &quot;武汉&quot; }] }, { &quot;letter&quot;: &quot;X&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v23&quot;, &quot;cityName&quot;: &quot;西安&quot; }, { &quot;id&quot;: &quot;v28&quot;, &quot;cityName&quot;: &quot;香港&quot; }, { &quot;id&quot;: &quot;v19&quot;, &quot;cityName&quot;: &quot;厦门&quot; }] }, { &quot;letter&quot;: &quot;Z&quot;, &quot;data&quot;: [{ &quot;id&quot;: &quot;v8&quot;, &quot;cityName&quot;: &quot;张家口&quot;&lt;span&gt; }] }],
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面是热门城市数据，模拟数据&lt;/span&gt;
    newcity: ['北京', '上海', '广州', '深圳', '成都', '杭州'&lt;span&gt;],
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; citySel: '全国',&lt;/span&gt;
    locateCity: ''&lt;span&gt;
  },
  methods: {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击城市&lt;/span&gt;
&lt;span&gt;    cityTap(e) {
      const val &lt;/span&gt;= e.currentTarget.dataset.val || ''&lt;span&gt;,
        types &lt;/span&gt;= e.currentTarget.dataset.types || ''&lt;span&gt;,
        Index &lt;/span&gt;= e.currentTarget.dataset.index || ''&lt;span&gt;,
        that&lt;/span&gt;=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
      let city &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.data.citySel;
      &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (types) {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'locate'&lt;span&gt;:
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定位内容&lt;/span&gt;
          city = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.data.locateCity;
          &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'national'&lt;span&gt;:
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;全国&lt;/span&gt;
          city = '全国'&lt;span&gt;;
          &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'new'&lt;span&gt;:
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;热门城市&lt;/span&gt;
          city =&lt;span&gt; val;
          &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; 'list'&lt;span&gt;:
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;城市列表&lt;/span&gt;
          city =&lt;span&gt; val.cityName;
          &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
      }
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(city){
        wx.setStorage({
          key: &lt;/span&gt;'city'&lt;span&gt;,
          data: city
        })&lt;br/&gt;　　　　//点击后给父组件可以通过bindcitytap事件，获取到cityname的值，这是子组件给父组件传值和触发事件的方法
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.triggerEvent('citytap'&lt;span&gt;, { cityname: city });
      }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        console.log(&lt;/span&gt;'还没有'&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getLocate();
      }
     
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击城市字母&lt;/span&gt;
&lt;span&gt;    letterTap(e) {
      const Item &lt;/span&gt;=&lt;span&gt; e.currentTarget.dataset.item;
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
        cityListId: Item
      });
      console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.data.cityListId);
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用定位&lt;/span&gt;
&lt;span&gt;    getLocate(){
      let that&lt;/span&gt;=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; qqmap().getLocateInfo().then(&lt;span&gt;function&lt;/span&gt; (val) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个方法在另一个文件里，下面有贴出代码&lt;/span&gt;
&lt;span&gt;        console.log(val);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (val.indexOf('市') !== -1) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里是去掉“市”这个字&lt;/span&gt;
          console.log(val.indexOf('市') - 1&lt;span&gt;);
          val &lt;/span&gt;= val.slice(0, val.indexOf('市'&lt;span&gt;));
          console.log(val);
        }
        that.setData({ 
          locateCity: val
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把获取的定位和获取的时间放到本地存储&lt;/span&gt;
        wx.setStorageSync('locatecity', { city: val, time: &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime() });
      });
    }
  },
  ready(){
    console.log(getApp());
    let that &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;,
        cityOrTime &lt;/span&gt;= wx.getStorageSync('locatecity')||&lt;span&gt;{},
        time &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime(),
        city&lt;/span&gt;=''&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!cityOrTime.time||(time - cityOrTime.time &amp;gt; 1800000)){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每隔30分钟请求一次定位&lt;/span&gt;
      &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getLocate();
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果未满30分钟，那么直接从本地缓存里取值&lt;/span&gt;
&lt;span&gt;      that.setData({
        locateCity: cityOrTime.city
      })
    }
   
    
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后是引用的map.js，这里需要用到腾讯地图的微信小程序sdk获取当前经纬度的详情信息，然后取到当前城市，这是&lt;a href=&quot;http://lbs.qq.com/qqmap_wx_jssdk/index.html&quot; target=&quot;_blank&quot;&gt;腾讯地图微信小程序JavaScript SDK&lt;/a&gt;，可以去查看教程，这里用到的是地址解析功能；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
const wxqqmap = require('../libs/qqmap-wx-jssdk.min.js'&lt;span&gt;),
      qqwxmap &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; wxqqmap({
        key: &lt;/span&gt;'GTDBZ-WFSRX-JOT4W-7WYBD-Z2CTO-7QBEM' &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 必填，这里最好填自己申请的的&lt;/span&gt;
&lt;span&gt;      }); 
import util from &lt;/span&gt;'./util.js'&lt;span&gt;;
const qq&lt;/span&gt;='sdfsdf'&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; class qqmap{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取定位信息&lt;/span&gt;
&lt;span&gt;  getLocateInfo(){
    let that&lt;/span&gt;=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (resolve, reject) {
            that.location().then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(val){
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果通过授权，那么直接使用腾讯的微信小程序sdk获取当前定位城市&lt;/span&gt;
&lt;span&gt;              qqwxmap.reverseGeocoder({
                location: {
                  latitude: val.latitude,
                  longitude: val.longitude
                },
                success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (res) {
                  console.log(res.result.address_component.city);
                  resolve(res.result.address_component.city);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回城市&lt;/span&gt;
&lt;span&gt;                },
                fail: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (res) {
                  reject(res);
                },
                complete: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (res) {
                  console.log(res);
                }
              });
                
              },&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(error) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果用户拒绝了授权，那么这里会提醒他，去授权后再定位&lt;/span&gt;
                console.log('shibai'&lt;span&gt;);
                wx.showModal({
                  title: &lt;/span&gt;''&lt;span&gt;,
                  content: &lt;/span&gt;'自动定位需要授权地理定位选项'&lt;span&gt;,
                  confirmText: &lt;/span&gt;'去授权'&lt;span&gt;,
                  success(res) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (res.confirm) {
                      wx.openSetting({
                        success(res) {
                          console.log(res);
                          that.getLocateInfo();
                        }
                      })
                    }
                  }
                })

              })
          
    })
  }
  
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定位，获取当前经纬度&lt;/span&gt;
&lt;span&gt;  location(){   
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (resolve, reject) {  
      wx.getLocation({
        altitude: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (res) {
          resolve(res);
        },fail(res){
          reject(res);
        }
      })
    });
    
  }  

  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在引用这个组件的时候，在引用的页面的json文件里要添加这一句&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;usingComponents&quot;&lt;span&gt;:{
    &lt;/span&gt;&quot;citylist&quot;:&quot;../../component/cityListCom/cityListCom&quot;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在引用的wxml界面添加组件，styles是设置的组件的变量，我这里是可以改变组件最外层的样式，bindcitytap是上面组件js里的点击城市方法里提到的事件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;citylist styles='max-height:100%;' bindcitytap='cityTap'&amp;gt;&amp;lt;/citylist&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在引用的界面的js里，写个cityTap事件，获取传过来的值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; pages/cityList/cityList.js&lt;/span&gt;
&lt;span&gt;Page({
  data: {
    winHeight:&lt;/span&gt;0&lt;span&gt;
  },&lt;br/&gt;//监听传值，后面自己做处理了
  cityTap(e){
    console.log(&lt;/span&gt;'fasdfsdfsdfds'&lt;span&gt;);
    console.log(e);
    const cityName&lt;/span&gt;=&lt;span&gt;e.detail.cityname;
    wx.navigateBack();
  },
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
   * 生命周期函数--监听页面加载
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  onLoad: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (options) {
    const win &lt;/span&gt;=&lt;span&gt; wx.getSystemInfoSync();
    console.log(win);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
      winHeight: win.windowHeight
    });
  }&lt;/span&gt;&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以了，完结。&lt;/p&gt;
&lt;p&gt; 想了解更多的小程序的知识请添加微信小程序开发交流群：368506119&lt;/p&gt;

</description>
<pubDate>Fri, 19 Jan 2018 07:21:00 +0000</pubDate>
<dc:creator>西江无月</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xjwy/p/8317144.html</dc:identifier>
</item>
<item>
<title>透过一道面试题来探探JavaScript中执行上下文和变量对象的底 - 不加香菜的咖啡</title>
<link>http://www.cnblogs.com/wyangnb/p/8317071.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wyangnb/p/8317071.html</guid>
<description>&lt;p&gt;在做面试题之前，我们先搞清楚两个概念&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;执行上下文（execution context）&lt;/li&gt;
&lt;li&gt;变量对象（variable object）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们都知道JavaScript的作用域一共分三种&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;全局作用域&lt;/li&gt;
&lt;li&gt;函数作用域&lt;/li&gt;
&lt;li&gt;eval作用域&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实际上每一次的函数调用都会有一个对应的执行环境，这个执行环境也叫做执行上下文。执行上下文是一个抽象的概念，函数每调用一次就会产生一个新的执行上下文。&lt;/p&gt;
&lt;p&gt;下面我们通过一段代码来理解下执行上下文的顺序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var fun0 = 'global context';
console.log(fun0);

function fun1(){
    console.log('fun1');
    function fun2(){
        console.log('fun2');
        function fun3(){
            console.log('fun3');
        }
        fun3();
    }
    fun2();
}
fun1(); // global context fun1 fun2 fun3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面代码结构我们可以看到在fun1内包含fun2，fun2中包含fun3，实际上是一层一层嵌套的。在代码执行的过程中，会先进入全局的fun0，当我们在调用fun1的时候控制权会从全局的fun0到fun1的这样一个执行上下文中，然后再调用fun2的时候控制权会从fun1到fun2，以此类推。当fun3调用结束以后会退回到fun2，当fun2调用结束之后会退回到fun1，当fun1调用结束后退回到fun0，等到整个代码都结束后就会依次输出&lt;code&gt;global context fun1 fun2 fun3&lt;/code&gt;。这几个函数的每一次调用的时候都会产生一个对应的新的执行上下文。&lt;/p&gt;

&lt;p&gt;变量对象是一个抽象概念中的“对象”，不是JavaScript中真正意义上的对象。它用于存储执行上下文中函数声明、函数参数和变量。&lt;/p&gt;
&lt;p&gt;VO按照如下的顺序存储：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;函数参数(若未传入,初始化该参数值为undefined)&lt;/li&gt;
&lt;li&gt;函数声明(若发生命名冲突,会覆盖)&lt;/li&gt;
&lt;li&gt;变量(初始化变量值为undefined,若发生命名冲突,会被忽略)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在函数中有点特殊的是：函数中有一个概念叫做激活对象（AO），AO就是在函数调用的时候会有一个特殊的arguments，arguments在初始化阶段会被放置到AO对象中，初始化之后AO对象又会被叫做VO对象。&lt;/p&gt;
&lt;p&gt;下面我们来看一个例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function textVo(x,f){
    var a = 1;
    var b = 2;
    function b(){};
    function f(){};
    var c = 'VO';
    var e = function(){};
}
textVo(3);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码再解析过程当中，按照VO存储的顺序会先将函数的参数x存储到AO中，然后是参数f，然后是函数b和函数f，再然后是变量a、b、c、e。&lt;br/&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;由于函数声明若发生命名冲突会覆盖，所以参数f会被函数f所覆盖，最后存入到AO对象中的是函数f&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;由于变量命名冲突会被忽略，所以变量b不会被存储到AO中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解析过程如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;AO(textVo)={
    x:3,
    b:&amp;lt;ref to func &quot;b&quot;&amp;gt;,
    f:&amp;lt;ref to func &quot;f&quot;&amp;gt;,
    a:undefined,
    c:undefined,
    e:undefined
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行过程如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;VO['a'] = 1;
VO['b'] = 2;
VO['c'] = 'VO';
VO['e'] = function e(){};

AO(textVo)={
    x:3,
    b:2,
    f:&amp;lt;ref to func &quot;f&quot;&amp;gt;,
    a:1,
    c:'VO',
    e:function e(){};
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;JavaScript的执行过程其实可以理解为赋值的过程，由于函数f已经在解析过程中处理完了，在执行的过程中我们就可以直接忽略掉。&lt;br/&gt;&lt;strong&gt;注意：在执行过程也就是赋值的过程中，发现b的值是2，这个时候会把值直接赋给已经存在AO中的函数b,最后输出的结果是b为2，函数b被替换掉了，这一块要注意下。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;概念搞清楚之后，我们来看下面这道面试题。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;alert(a);
a();
var a=3;
function a(){
  alert(a);
  alert(1);
}
alert(a);
a=6;
a();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一眼看到这道题的感觉是不是：???(((φ(◎ロ◎;)φ)))；现在我们掌握了执行上下文和变量对象之后再来看这道题就会变的很清晰。&lt;br/&gt;&lt;strong&gt;解析：&lt;/strong&gt;代码在解析阶段首先去找参数，我们这里没有参数所以直接忽略，接下来找到函数声明a放进VO中，然后找到变量a被忽略；&lt;br/&gt;&lt;strong&gt;执行：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一步：进入全局执行上下文，运行&lt;code&gt;alert(a)&lt;/code&gt;，因为在解析阶段a已经存在于VO中，所以弹出的是函数a的源代码（alert里面的a是函数a的引用，是一个指针指向函数a）；然后弹出全局上下文。&lt;/li&gt;
&lt;li&gt;第二步：第二个a是调用函数a，进入函数a的执行上下文，执行函数a内部的&lt;code&gt;alert(a)&lt;/code&gt;，这个时候的a还是函数a的指针，所以还是弹出函数a的源代码，然后弹出1；弹出函数a的执行上下文。&lt;/li&gt;
&lt;li&gt;第三步：进入全局执行上下文，给a赋值为3。&lt;/li&gt;
&lt;li&gt;第四步：执行alert(a)，这个时候VO中的a已经被赋值为3了，所以弹出3。&lt;/li&gt;
&lt;li&gt;第五步：给a赋值为6。&lt;/li&gt;
&lt;li&gt;第六步：由于现在VO中的a已经被赋值为6了，所以在调用a()的时候会报错：&lt;span&gt;Uncaught TypeError: a is not a function&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后执行的结果为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ƒ a(){
    console.log(a);
    console.log(1);
}
ƒ a(){
    console.log(a);
    console.log(1);
}
1
3
Uncaught TypeError: a is not a function&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上就是我对执行上下文和变量对象的理解，不合理的地方望指出。&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 07:12:00 +0000</pubDate>
<dc:creator>不加香菜的咖啡</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wyangnb/p/8317071.html</dc:identifier>
</item>
<item>
<title>基于Grafana+SimpleJson的灵活报表解决方案 - 静若清池</title>
<link>http://www.cnblogs.com/liugh/p/8315860.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liugh/p/8315860.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;        在时序分析及监控展现领域，Grafana无疑是开源解决方案中的翘楚，其灵活的插件机制，支持各种漂亮的面板、丰富的数据源以及强大的应用。典型的面板有Graph、Text、Singlestat、PieChart、Table、Histogram等，支持的数据源有ES、Graphite、InfluxDB、OpenTSDB、MySQL、Druid 、Prometheus、SimpleJson等，提供的应用有Zabbix、K8s等。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/380081/201801/380081-20180119132849303-458935402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;         由于公司某些业务用到了SQLServer数据库，因此需要将SQLServer中的统计数据展现在Grafana中，但美中不足的是Grafana官方至今没有提供对SQLServer数据源的支持，如何将SQLServer中的数据灵活展现在Grafana中，是一个摆在我们面前的痛点问题。&lt;/p&gt;
&lt;p&gt;经过研究Grafana支持的数据源，我们使用SimpleJson数据源，搭建WebAPI站点，构建报表解析引擎，通过编写契约式的SQL语句，可以将SQLServer中的数据灵活展现在Grafana中，很好的解决了这个痛点问题，整体架构如下所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/380081/201801/380081-20180119132842693-1237187943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一、WebAPI&lt;/p&gt;
&lt;p&gt;如果要支持SimpleJson，后端WebAPI需要实现4个URL：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;/：返回200，用于SimpleJson数据源测试连通性；&lt;/li&gt;
&lt;li&gt;/search：返回所有可选的指标；&lt;/li&gt;
&lt;li&gt;/query：返回对应指标的时间序列点；&lt;/li&gt;
&lt;li&gt;/annotations：返回注解。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;二、报表引擎&lt;/p&gt;
&lt;p&gt;一个报表对应一个查询SQL，这些查询SQL要事先定义好，并存储在数据库中，对Grafana只暴露报表名称。&lt;/p&gt;
&lt;p&gt;当在Grafana中选择了指定的报表名称后，会发起一个WebAPI请求，报表引擎负责解析该请求，通过报表名称获得对应的查询SQL，进行SQL安全性校验，如果校验通过，则根据报表关联的数据源，到指定数据库中执行该查询SQL，并将返回结果组装成DataTable，然后构造SimpleJson所需的数据格式。&lt;/p&gt;
&lt;p&gt;三、查询SQL契约&lt;/p&gt;
&lt;p&gt;因为Grafana用于展现时序数据，所以返回的数据中，必须有一列是Time列，因此我们对查询SQL做了约定：&lt;/p&gt;
&lt;p&gt;如果Grafana中以表格形式展现数据时，查询SQL可以是多列，必须有一列是时间列。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/380081/201801/380081-20180119132859599-965887025.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果Grafana中以数字、折线图、柱状图、饼图等展现数据时：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;查询SQL最多返回两列；&lt;/li&gt;
&lt;li&gt;查询SQL只返回一列时，必须是数字列，报表引擎自动补上时间列为当前时间，适用于在Grafana中只展示数字的情况；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/380081/201801/380081-20180119132907678-1088097539.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  3.查询SQL返回两列时&lt;/p&gt;
&lt;p&gt;a)      若含有时间列，则第一列是时间列（带有“Time”字样），第二列是数字列，适用于在Grafana中展现折线图、柱状图等情况；&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/380081/201801/380081-20180119132946537-981694892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/380081/201801/380081-20180119132951115-126498750.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; b)     若不含时间列，则第一列是名称，第二列是数字列，报表引擎自动根据名称进行分组，并补上时间列为当前时间，适用于在Grafana中展现饼图的情况。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/380081/201801/380081-20180119132959334-1145154162.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        当要在一个图中展现多条时序数据时，可以将多个查询SQL组合到一起返回，也就是报表组的功能，因此一个报表可以单独展现，也可以和其他报表组成一个报表组一起展现。&lt;/p&gt;
&lt;p&gt;        综上所述，基于SimpleJson数据源，只要按照SQL查询契约书写SQL，就能将SQLServer中的数据灵活展现在Grafana中，同时还要考虑报表权限、SQL安全校验、定时执行报表、报表缓存等，不再赘述。当然SimpleJson只是一个数据源协议载体，理论上可以对接任何类型的后台数据，只要组装成它支持的格式即可。&lt;/p&gt;
&lt;p&gt;四、特来电云计算与大数据微信公众号&lt;/p&gt;
&lt;p&gt; 1.微信公众号名称：特来电云计算与大数据&lt;/p&gt;
&lt;p&gt; 2.二维码：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/380081/201711/380081-20171108132006606-1138597315.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 06:40:00 +0000</pubDate>
<dc:creator>静若清池</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liugh/p/8315860.html</dc:identifier>
</item>
<item>
<title>JMeter基本元素简介 - 牛初九</title>
<link>http://www.cnblogs.com/boboooo/p/8316472.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/boboooo/p/8316472.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;JMeter基本元素简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、测试计划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　测试计划对象有一个复选框叫做“Functional Testing”（函数测试模式），如果选中，它将使jmeter记录服务端返回的每一个样例的数据，如果你在测试监听器中选择了一个文件，数据将会写到这个文件。如果你正在运行一个很小的测试来确保jmeter配置正确，这是非常有用的，你的服务器也返回了希望的结果。得到的结论是，这个文件会快速的变的很大，jmeter性能将受到影响。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果你正在做压力测试，这个选项建议关掉（它默认是关掉的）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果你没有记录数据到文件，这个选项不会有效果。你也可以在监听器中配置哪些字段要存储。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1191201/201801/1191201-20180119114815099-705407309.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、线程组&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　线程组元素是任何测试计划的开始点。所有的控制器和样本器必须在一个线程组下。其他元素，例如：监听器可以直接放在测试计划下，这样的话，它将应用于所有的线程组。顾名思义，线程组元素控制着线程的数量，jmeter将使用这些线程执行你的测试。线程组的管理允许你做如下的事情：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　1、设置线程的数量；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　2、设置提升的周期；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　3、设置执行测试的次数；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　每一个线程都将独立于其他线程，完整的、完全的执行测试计划。多个线程被用来模拟并发连接到服务应用。提升周期告诉jmeter花费多长时间提升到所有的线程数，如果线程数设置为10，提升周期设置为100秒，jmeter将花费100秒唤起10个线程并且运行。每一个现场将在前一个线程开始10（100/10）秒后开始。如果有30个线程，提升周期设置为120，每一个连续的线程将会延迟4秒。提升周期需要足够的长以避免测试开始时，巨大的工作负载，并且使得最后一个线程开始间隔第一个线程结束足够的短。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　提升周期 = 线程的数量做上下调整&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　默认的，线程组配置只执行一次。线程组也提供了一个调度器。点击线程组底部的复选框，可以使额外的区域有效或失效，那些区域可以输入测试的周期、启动延迟、启动开始时间和结束时间。你可以配置持续时间和启动延迟控制每一个线程组的持续时间和多少秒后启动。当测试开始后，jmeter将等待启动延迟时间后，启动启动线程组中的线程，并且执行配置的持续时间。这两个选项将覆盖掉配置的开始时间和结束时间。或者（虽然没有推荐哪个更适合）你可以设置其他的两个域，开始时间和结束时间。当测试开始以后，jmeter等待到达开始时间。在每一个周期的结尾，jmeter检查结束时间是否已经到达，如果到了，运行将停止，否则，测试将继续进行直到循环结束。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1191201/201801/1191201-20180119115109740-1683384343.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、控制器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　jmeter有两种类型的控制器：样本器和逻辑控制器。他们驾驭着测试的进程。样本器告诉jmeter发送请求给服务，例如：添加http请求样本，如果你想jmeter发送http请求。你也可以通过给样本器添加一个或多个配置元素定制请求。逻辑控制器让你定制逻辑，jmeter使用这个逻辑决定什么时候发送请求。例如：你可以添加交替逻辑控制器交替执行两个http请求样本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 样本器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　样本器告诉jmeter发送请求给服务并且等待相应。他们按照在树中出现的顺序执行。控制器可以用来修改样本器的重复次数。jmeter的样本器包含：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　FTP Request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　HTTP Request (can be used for SOAP or REST Webservice also)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　JDBC Request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　Java object request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　JMS request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　JUnit Test request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　LDAP Request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　Mail request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　OS Process request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　TCP request&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　每一个样本器都有几个可以设置的属性。你可以在测试计划中添加一个或更多的配置元素定制样本器。如果你打算发送同一种类型的多个请求到相同的服务，可以考虑使用默认的配置元素。每一个控制器都有一个或多个默认元素。记得为你的测试计划添加一个监听器来观看和存储每一个请求的结果到硬盘上。如果你对jmeter平台的响应的基本验证感兴趣，添加一个断言器到样本器。例如：压力测试一个web应用，服务返回一个成功的http响应码，但是页面可能有错误或者缺失了一部分。你可以添加断言器确定http的标签。通用的错误字符串等。jmeter让你通过正则表达式创建断言器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1191201/201801/1191201-20180119133243490-658813538.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 逻辑控制器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　逻辑控制器可以改变来自子元素的请求顺序。他们可以修改自己的请求，使jmeter重复请求。为了了解测试计划中逻辑控制器的效果，看一下下面的测试树：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1191201/201801/1191201-20180119133348365-1170640494.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个测试计划的第一个事情就是只执行一次的登录请求，随后的迭代将跳过这一步，这是仅执行一次控制器的效果。登录之后，下一个样本器将加载搜索页，这是一个简单的请求，没有通过逻辑控制器。加载搜索页之后，我们想执行一次搜索。实际上我们想执行两个不同的搜索，可是，我们想在两次搜索之间重新加载搜索页，我们可以通过4个简单的http请求元素来执行（加载搜索页、搜索A、加载搜索页、搜索B）。在这里，我们使用代替方案，使用交替控制器，它一次传递一个子请求通过测试，它保持着子元素的顺序。交替两个子请求可能过于频繁了，但它也可以很容易的有8个，或者20个子请求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　提醒一下，http默认请求 是属于交替控制器的，设想一下，搜索A和搜索B共享相同的路径信息，两个搜索请求，命中相同的后端搜索引擎。相比配置两个相同信息的http样本器，我们可以抽象出信息到一个单一的配置元素。当交替控制器传递请求时，它会用http默认请求中的值去填充空白项。所以我们将那些请求的PATH项空白，把这些信息放到配置元素中。这充其量只是一个小小的好处，但是它展示了这个特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　树中的下一个请求是另外一个http默认请求，这次是添加到线程组本身。线程组有一个内嵌的逻辑控制器。它使用这个元素像上面描述的那样。它填充任何请求的空白信息。它在web测试中非常的有用，在你所有的http请求样本器中省去域名项，把这些信息放到http默认请求元素中，并添加到线程组中。你可以在不同的服务上测试你的应用，而仅仅修改一个配置项，否则你要编辑每一个样本器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　最后一个元素是http cookie管理器，cookie管理器应该添加到所有的web测试中，否则jmeter将会忽略cookie，将他添加到线程组的级别，我们确保了所有的http请求共享相同的cookie。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 四、测试碎片&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　测试碎片元素是一个特殊类型的控制器，它存在测试计划树中，和线程组有相同的级别。它区别与线程组的地方就是除非它包含在模块控制器或者include控制器，否则他不会被执行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个元素就是为了测试复用的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、监听器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　监听器提供了访问jmeter收集的测试用例的信息。图结果监听器在图上绘制响应的次数。视图结果树展示请求和响应的细节，还可以显示响应的xml和html。其他的监听器提供总结和聚集的信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　另外的，监听器可以将数据传输的文件中为以后使用呢。jmeter的每一个监听器都可以指定文件的路径。也有一个配置按钮可以选择哪个文件保存。监听器可以在测试的任何地方添加，直接包含在测试计划下。它自从它的这个级别以下的元素中获取数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1191201/201801/1191201-20180119133710928-2035891466.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　JMeter的一些基础元素介绍完了，下一篇将介绍如何使用。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 05:41:00 +0000</pubDate>
<dc:creator>牛初九</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/boboooo/p/8316472.html</dc:identifier>
</item>
<item>
<title>表现层设计模式 - 甜橙很酸</title>
<link>http://www.cnblogs.com/hdwgxz/p/8316379.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hdwgxz/p/8316379.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、理论&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 MVC：模型-视图-控制器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;模型：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;指应用程序中，业务逻辑入口点对象。模型中包括：应用程序状态&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;视图展示的数据&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;响应用户请求的操作&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;执行控制器请求的操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;控制器：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由视图触发执行某个操作，对模型进行修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;MVC意味着要创建视图，控制器和业务层&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1024858/201801/1024858-20180119131111412-1912469425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;2 MVP：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;目前一般不会直接用&lt;/span&gt;MVP，而使用它的两个变体：SC(Supervising Controller)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;和&lt;/span&gt;PV(Passive View)。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;1&lt;span&gt;）&lt;/span&gt;&lt;span&gt;SC&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;Presenter&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;处理输入响应，操纵视图以完成更复杂的视图逻辑，同步视图和模型。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;当&lt;/span&gt;&lt;/span&gt;&lt;span&gt;UI变化时，会发出抛出一个事件，致使&lt;/span&gt;&lt;span&gt;Controller&lt;/span&gt;&lt;span&gt;&lt;span&gt;中相应的方法被调用，这个方法会处理请求并更新模型。视图会观察模型的变化并更新。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;SC模式把一部分UI处理逻辑放到视图层，例如显示样式等。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;2）PV：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;Presenter&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;响应用户事件，更新视图&lt;/span&gt;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&lt;span&gt;负责&lt;/span&gt;&lt;/span&gt;&lt;span&gt;UI处理逻辑，包括UI的呈现样式等。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;当&lt;/span&gt;&lt;/span&gt;&lt;span&gt;UI变化时，控制器更新模型和视图。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1024858/201801/1024858-20180119131124693-434546388.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;3.&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;PM&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;模型：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;PM中的模型不是业务层，而是包含多个属性的类，专门服务于视图层，含有展示视图所需的所有数据。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;视图：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图是&lt;/span&gt;UI元素的集合，UI元素绑定到模型属性上。用户触发的事件都将发送给展示器。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;模型更新后，展示器控制视图更新。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图持有对展示器的引用，模型通过展示器暴露给视图，视图不会暴露出任&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;何接口。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;展示器：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;接收视图请求，调用表现层或业务逻辑层。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;展示器持有模型对象的引用，并且暴露公开的方法和属性为视图提供数据。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1024858/201801/1024858-20180119131134756-1444764478.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;二、&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;代码示例&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图界面&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1024858/201801/1024858-20180119125743115-44401821.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;每种方法的&lt;/span&gt;UI&lt;span&gt;呈现都是相同的，不同的是接口，展示器等&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;1MVP-PV&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图接口&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IView
{
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; Tips { &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应TextBox控件&lt;/span&gt;
        &lt;span&gt;string&lt;/span&gt; Detail { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应RichTextBox控件&lt;/span&gt;
        &lt;span&gt;string&lt;/span&gt; SelectedItem { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应ComboBox控件被选择元素&lt;/span&gt;
        List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; Items { &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应ComboBox控件&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图接口的实现&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Form_MVP_PV : Form,IView
    {
        Presenter prt;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Form_MVP_PV()
        {
            InitializeComponent();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Tips
        {
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; 
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Invoke(&lt;span&gt;new&lt;/span&gt; Action(() =&amp;gt; { &lt;span&gt;this&lt;/span&gt;.tbxPV.Text =&lt;span&gt; value; }));
            }
        }


        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; IView.Detail
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.rtbxPV.Text;
            }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; 
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Invoke(&lt;span&gt;new&lt;/span&gt; Action(() =&amp;gt; { &lt;span&gt;this&lt;/span&gt;.rtbxPV.Text +=&lt;span&gt; value; }));
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnExe_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            btnExe.Enabled &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            btnExe.Text &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在执行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxPv.Enabled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            Task.Factory.StartNew(() &lt;/span&gt;=&amp;gt;&lt;span&gt; 
            {
                prt.Colculate();
                btnExe.Enabled &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                btnExe.Text &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxPv.Enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            });
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Form_MVP_PV_Load(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            prt &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Presenter(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            prt.Initialize();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; SelectedItem
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                Control.CheckForIllegalCrossThreadCalls &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxPv.SelectedItem.ToString();
            }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxPv.SelectedItem =&lt;span&gt; value; 
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; Items
        {
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Invoke(&lt;span&gt;new&lt;/span&gt; Action(() =&amp;gt; { &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxPv.Items.AddRange(value.ToArray()); }));
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;展示器Presenter&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Presenter
    {
        IView iView;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Presenter(IView view)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.iView =&lt;span&gt; view;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Initialize()
        {
            iView.Items &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;thrid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
            iView.SelectedItem &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;; 
        }
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Colculate()
        {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;11&lt;/span&gt;; i++&lt;span&gt;)
            {
                iView.Tips &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第{0}组，共{1}个-执行完{2}-正在计算第{3}个&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, iView.SelectedItem, &lt;span&gt;10&lt;/span&gt;, i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, i);

                Thread.Sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体工作，此处以挂起进程代替&lt;/span&gt;
                
                &lt;span&gt;string&lt;/span&gt; msg = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;计算到第{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;Environment.NewLine,i);
                iView.Detail &lt;/span&gt;=&lt;span&gt; msg;
            }
            iView.Tips &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;全部完成&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;1）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Presenter&lt;/span&gt;&lt;span&gt;&lt;span&gt;对&lt;/span&gt;Model的调用没有体现，一般来讲Model是业务层，这里为了体现PV的设计宗旨，即将视图和展示器分离，所以省略了&lt;/span&gt;&lt;span&gt;Presenter对业务层调用。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;你会发现在属性&lt;/span&gt;&lt;/span&gt;&lt;span&gt;SelectedItem&lt;/span&gt;&lt;span&gt;&lt;span&gt;的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;get方法中加了&lt;/span&gt;&lt;span&gt;Control&lt;/span&gt;&lt;span&gt;.CheckForIllegalCrossThreadCalls =&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&lt;span&gt;这行代码，目的是从不是创建&lt;/span&gt;&lt;/span&gt;&lt;span&gt;cbxPv&lt;/span&gt;&lt;span&gt;&lt;span&gt;这个控件的线程访问它，那么哪些线程会访问它呢？一个自然就是创建此空间的线程，另一个就是&lt;/span&gt;&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; btnExe_Click(&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender,&lt;/span&gt; &lt;span&gt;EventArgs&lt;/span&gt;&lt;span&gt; e)&lt;/span&gt;&lt;span&gt;&lt;span&gt;方法中所创建的一个线程。在此方法中创建线程是为了能够异步执行长时间计算任务，同时将任务生成的阶段性结果异步地展示到&lt;/span&gt;&lt;/span&gt;&lt;span&gt;UI上。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;3）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;你会发现&lt;/span&gt;&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; btnExe_Click(&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender,&lt;/span&gt; &lt;span&gt;EventArgs&lt;/span&gt;&lt;span&gt; e)&lt;/span&gt;&lt;span&gt;&lt;span&gt;方法中包含了&lt;/span&gt;&lt;/span&gt;&lt;span&gt;UI控件的部分显示逻辑，这似乎违背了PV设计的宗旨，但是这样的实现方式简便、直观、易于控制。下面为了将这段UI控件显示逻辑从视图挪走，放到Presenter中，代码修改如下：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;首先，在&lt;/span&gt;IView中添加如下代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;bool&lt;/span&gt; BtnEnable { &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; BtnText { &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; CheckBoxEnable { &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;变为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IView
{
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; Tips { &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应TextBox控件&lt;/span&gt;
        &lt;span&gt;string&lt;/span&gt; Detail { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应RichTextBox控件&lt;/span&gt;
        &lt;span&gt;string&lt;/span&gt; SelectedItem { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应ComboBox控件被选择元素&lt;/span&gt;
        List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; Items { &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对应ComboBox控件&lt;/span&gt;

        &lt;span&gt;bool&lt;/span&gt; BtnEnable { &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; BtnText { &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; CheckBoxEnable { &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;在接口实现（&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Form_MVP_PV&lt;/span&gt;&lt;span&gt;&lt;span&gt;类&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）中实现新添加的属性：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; BtnEnable
        {
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; 
            {
                Control.CheckForIllegalCrossThreadCalls &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExe.Enabled =&lt;span&gt; value; 
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; BtnText
        {
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; 
            {
                Control.CheckForIllegalCrossThreadCalls &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExe.Text =&lt;span&gt; value;
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; CheckBoxEnable
        {
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; 
            {
                Control.CheckForIllegalCrossThreadCalls &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxPv.Enabled =&lt;span&gt; value;
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;注掉&lt;/span&gt;&lt;/span&gt;&lt;span&gt;btnExe_Click&lt;/span&gt;&lt;span&gt;&lt;span&gt;方法中关于&lt;/span&gt;&lt;/span&gt;&lt;span&gt;UI显示逻辑的带码，变为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnExe_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;btnExe.Enabled = false;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;btnExe.Text = &quot;正在执行&quot;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.cbxPv.Enabled = false;&lt;/span&gt;
            Task.Factory.StartNew(() =&amp;gt;&lt;span&gt; 
            {
                prt.Colculate();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;btnExe.Enabled = true;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;btnExe.Text = &quot;开始&quot;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.cbxPv.Enabled = true;&lt;/span&gt;
&lt;span&gt;            });
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;至此完成修改&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Presenter中的&lt;/span&gt;&lt;span&gt;Colculate()&lt;/span&gt;&lt;span&gt;&lt;span&gt;方法，变为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Colculate()
        {
            iView.BtnEnable &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            iView.CheckBoxEnable &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            iView.BtnText &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在执行...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;11&lt;/span&gt;; i++&lt;span&gt;)
            {
                iView.Tips &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第{0}组，共{1}个-执行完{2}-正在计算第{3}个&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, iView.SelectedItem, &lt;span&gt;100&lt;/span&gt;, i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, i);

                Thread.Sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体工作，此处以挂起进程代替&lt;/span&gt;
                
                &lt;span&gt;string&lt;/span&gt; msg = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;计算到第{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;Environment.NewLine,i);
                iView.Detail &lt;/span&gt;=&lt;span&gt; msg;
            }
            iView.Tips &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;全部完成&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            iView.BtnEnable &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
  iView.BtnText &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            iView.CheckBoxEnable &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;可以看到，为了将上面注掉的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;UI显示逻辑代码从视图层挪走，添加的代码量是注掉的代码的几倍。&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;2 MVP-SC&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图接口&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IView
{
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; UpdateUI(Model model);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新执行过程信息&lt;/span&gt;
        &lt;span&gt;string&lt;/span&gt; GetSelecteditem();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得选择的元素&lt;/span&gt;
        &lt;span&gt;void&lt;/span&gt; AddItems(IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; &lt;span&gt;set&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化添加元素&lt;/span&gt;
        &lt;span&gt;void&lt;/span&gt; Begin(Model model);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始执行计算的时候，更新UI显示&lt;/span&gt;
        &lt;span&gt;void&lt;/span&gt; Complete(Model model);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;结束执行计算的时候，更新UI显示&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图接口实现&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Form_MVP_SC : Form,IView
    {
        Presenter prt;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Form_MVP_SC()
        {
            InitializeComponent();
        }

        
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnExeSC_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            Task.Factory.StartNew(() &lt;/span&gt;=&amp;gt;&lt;span&gt; 
            {
                prt.Colculate(); 
            });
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Form_MVP_SC_Load(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            prt &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Presenter(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            prt.Initialize();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UpdateUI(Model model)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Invoke(&lt;span&gt;new&lt;/span&gt; Action(() =&amp;gt;&lt;span&gt; 
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tbxSC.Text = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第{0}组,共{1}个-执行完{2}-正在计算第{3}个&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxSC.SelectedItem.ToString(),
                    model.AllCount, model.DoingIndex &lt;/span&gt;- &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, model.DoingIndex);
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.rtbxSC.Text += &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;计算到第{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; Environment.NewLine, model.DoingIndex);
            }));
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetSelecteditem()
        {
            Control.CheckForIllegalCrossThreadCalls &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxSC.SelectedItem.ToString();
        }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; AddItems(IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxSC.Items.AddRange(&lt;span&gt;set&lt;/span&gt;&lt;span&gt;.ToArray());
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxSC.SelectedIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Begin(Model model)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;model.Complete)
            {
                Control.CheckForIllegalCrossThreadCalls &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxSC.Enabled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExeSC.Enabled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExeSC.Text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在执行...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Complete(Model model)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (model.Complete)
            {
                Control.CheckForIllegalCrossThreadCalls &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxSC.Enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExeSC.Enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExeSC.Text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;展示器&lt;/span&gt;-&lt;/span&gt;&lt;span&gt;Presenter&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Presenter
    {
        IView iView;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Presenter(IView view)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.iView =&lt;span&gt; view;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Initialize()
        {
            iView.AddItems(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Colculate()
        {
            Model vm &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Model();
            iView.Begin(vm);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;11&lt;/span&gt;; i++&lt;span&gt;)
            {
                vm.AllCount &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; selectedItem =&lt;span&gt; iView.GetSelecteditem();

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为了展示，从视图获取的数据，这里将DoingIndex修改为&lt;/span&gt;
                &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (selectedItem)
                {
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vm.DoingIndex &lt;/span&gt;= i + &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vm.DoingIndex &lt;/span&gt;= i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vm.DoingIndex &lt;/span&gt;= i + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
                Thread.Sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体工作，此处以挂起进程代替&lt;/span&gt;
&lt;span&gt;
                iView.UpdateUI(vm);
            }
            vm.Complete &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            iView.Complete(vm);
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;1）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;可以看到，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Presenter&lt;/span&gt;&lt;span&gt;&lt;span&gt;中不包括&lt;/span&gt;&lt;/span&gt;&lt;span&gt;UI展示细节，仅仅包含简单的UI处理逻辑，即：开始计算，计算过程中，计算任务完成以后调用了不同的方法来展示UI。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;2）视图接口不包含任何属性，只有对&lt;/span&gt;UI进行控制的方法。展示器向接口传递Model数据，并且通过接口&lt;/span&gt;&lt;span&gt;GetSelecteditem&lt;/span&gt;&lt;span&gt;&lt;span&gt;方法获得更新后的视图模型数据。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;3 PM模式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;在给出正式的&lt;/span&gt;PM模式之前，给出一个不标准的PM例子。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;PM模式中强调UI控件绑定到模型属性上，但下面的例子，有点违背这一定义。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图类：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Form_PM : Form
    {
        Presenter pt;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Form_PM()
        {
            InitializeComponent();
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Form_PM_Load(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            pt &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Presenter();
            pt.UpdateUI &lt;/span&gt;+=&lt;span&gt; UpdateUI;

            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxSC.Items.AddRange(pt.GetAllItem().ToArray());
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxSC.SelectedIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnExePM_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            cbxSC.Enabled &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            btnExePM.Enabled &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            btnExePM.Text &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在执行...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            Task.Factory.StartNew(() &lt;/span&gt;=&amp;gt;&lt;span&gt; { 
                pt.Colculate(); 
            });
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UpdateUI()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Invoke(&lt;span&gt;new&lt;/span&gt; Action(() =&amp;gt;&lt;span&gt; 
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (pt.vm.Complete)
                {
                    cbxSC.Enabled &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    btnExePM.Enabled &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    btnExePM.Text &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tbxPM.Text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;全部完成&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tbxPM.Text = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{3}组,共{0}个-执行完{1}-正在计算第{2}个&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                       pt.vm.AllCount, pt.vm.CompleteIndex, pt.vm.CompleteIndex &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxSC.SelectedItem.ToString());
                }
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.rtbxPM.Text += &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;计算完第{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; Environment.NewLine, pt.vm.CompleteIndex);
                
            }));
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; cbxSC_SelectedIndexChanged(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            pt.Group &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxSC.SelectedItem.ToString();
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;展示器：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Presenter
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Model vm {&lt;span&gt;set&lt;/span&gt;;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;;}
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Group { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Action UpdateUI;
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Presenter()
        {
            vm &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Model();
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Colculate()
        {
            vm.Complete &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            vm.AllCount &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;11&lt;/span&gt;; i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为了展示，从视图获取的数据，这里将DoingIndex修改为&lt;/span&gt;
                &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (Group)
                {
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vm.CompleteIndex &lt;/span&gt;= i+ &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vm.CompleteIndex &lt;/span&gt;= i+ &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vm.CompleteIndex &lt;/span&gt;= i+ &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
                Thread.Sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体工作，此处以挂起进程代替&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (i ==&lt;span&gt; vm.AllCount)
                {
                    vm.Complete &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
                UpdateUI();
            }
            
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; GetAllItem()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;thrid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;模型：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Model
{
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; AllCount { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CompleteIndex { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Complete { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; AllItems { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;1）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;展示器持有&lt;/span&gt;Model对象的引用并且Model对象作为展示器的公共属性暴露给视图，视图持有展示器的引用。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图通过调用展示器的属性&lt;/span&gt;vm（Model类型） 和GetAllItem方法获得数据。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;值得注意的是，展示器另一个公有字段&lt;/span&gt;UpdateUI的类型为Action，这里使用委托的目的是，当执行public void Colculate()方法时，每更新一次模型，展示器都能控制视图使用更新后的模型数据刷新视图UI&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;模型不含有方法，只有属性&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;3）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;视图层包含了一部分&lt;/span&gt;UI呈现逻辑，展示器没有将其完全包含，这样做的好处和MVP-SC模式是一样的。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;    &lt;span&gt;此外，视图会更新展示器的公共属性&lt;/span&gt;Group。Group实际对应着视图层的ComboBox控件。这里似乎有两个模型，一个是视图展示数据用的模型，一个是展示器更新业务层数据用的模型。两者可以合二为一。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;下面我们将&lt;/span&gt;UI逻辑完全挪到展示器中去,要实现这一目标，视图、模型、展示器都有调整。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;视图&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Form_PM : Form
    {
        Presenters pt;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Form_PM()
        {
            InitializeComponent();
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Form_PM_Load(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            pt &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Presenters();
            pt.UpdateUI &lt;/span&gt;+=&lt;span&gt; UpdateUI;
            pt.Begin &lt;/span&gt;+=&lt;span&gt; Begin;
            pt.Complete &lt;/span&gt;+=&lt;span&gt; Complete;

            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxSC.Items.AddRange(pt.GetAllItem().ToArray());
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxSC.SelectedIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnExePM_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            Task.Factory.StartNew(() &lt;/span&gt;=&amp;gt;&lt;span&gt; { 
                pt.Colculate(); 
            });
        }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Begin()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Invoke(&lt;span&gt;new&lt;/span&gt; Action(() =&amp;gt;&lt;span&gt; 
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxSC.Enabled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExePM.Enabled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExePM.Text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在执行...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }));
        }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UpdateUI()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Invoke(&lt;span&gt;new&lt;/span&gt; Action(() =&amp;gt;&lt;span&gt; 
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tbxPM.Text =&lt;span&gt; pt.vm.Tip;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.rtbxPM.Text += pt.vm.Detil;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;string.Format(&quot;计算完第{0}&quot; + Environment.NewLine, pt.vm.CompleteIndex);&lt;/span&gt;
&lt;span&gt;                
            }));
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Complete()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Invoke(&lt;span&gt;new&lt;/span&gt; Action(() =&amp;gt;&lt;span&gt; 
                {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cbxSC.Enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExePM.Enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btnExePM.Text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tbxPM.Text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;全部完成&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }));
            
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; cbxSC_SelectedIndexChanged(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
        {
            pt.vm.SelectedItem &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cbxSC.SelectedItem.ToString();
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;模型：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Models
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Tip { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Detil { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SelectedItem { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; AllItems { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;展示器：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Presenters
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Models vm {&lt;span&gt;set&lt;/span&gt;;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;;}
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Action UpdateUI;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Action Begin;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Action Complete;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Presenters()
        {
            vm &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Models();
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Colculate()
        {
            Begin();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;11&lt;/span&gt;; i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为了展示，从视图获取的数据，这里将DoingIndex修改为&lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt; vs = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (vm.SelectedItem)
                {
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vs &lt;/span&gt;= i + &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vs &lt;/span&gt;= i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        vs &lt;/span&gt;= i + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }

                vm.Tip &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}组,共{1}个-执行完{2}-正在计算第{3}个&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                       vm.SelectedItem, &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;, i, i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                vm.Detil &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;计算完第{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; Environment.NewLine, vs);

                Thread.Sleep(&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体工作，此处以挂起进程代替&lt;/span&gt;
&lt;span&gt;                UpdateUI();
            }
            Complete();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; GetAllItem()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;thrid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;主要的变化有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;1）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;关于模型。模型中的属性绝大部分都可简单地绑定到视图层控件上。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;关于展示器。展示器全部的&lt;/span&gt;UI显示逻辑都被挪到了展示器中，为完成这种设计，添加了三个类型都为Action的字段，分别代表了任务开始，执行过程中，任务完成。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;3）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;关于视图。视图中的&lt;/span&gt;UI逻辑都被挪到了展示器中，只留下UI控件和模型的绑定实现&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;span&gt;4）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;关于视图和展示器的关联。使用多播委托来控制&lt;/span&gt;UI的刷新。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;----------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;转载与引用请注明出处。&lt;/p&gt;
&lt;p&gt;时间仓促，水平有限，如有不当之处，欢迎指正。&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 05:12:00 +0000</pubDate>
<dc:creator>甜橙很酸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hdwgxz/p/8316379.html</dc:identifier>
</item>
<item>
<title>云计算之路-阿里云上：docker swarm 集群故障与异常 - 博客园团队</title>
<link>http://www.cnblogs.com/cmt/p/8316263.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmt/p/8316263.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/35695/201801/35695-20180119114405599-1376565477.png&quot; alt=&quot;&quot; width=&quot;428&quot; height=&quot;112&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://www.cnblogs.com/cmt/p/8143854.html&quot; target=&quot;_blank&quot;&gt;上次&lt;/a&gt;遭遇 docker swarm 集群故障后，我们将 docker 由 17.10.0-ce 升级为最新稳定版 docker 17.12.0-ce 。&lt;/p&gt;
&lt;p&gt;前天晚上22:00之后集群中的2个节点突然出现CPU波动，在CPU波动之后，在凌晨夜深人静、访问量极低的时候，整个集群出现了故障，访问集群上的所有站点都出现了502，过了一段时间后自动恢复正常。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;ECS实例：swarm1-node5，CPU百分比于00:52发生告警，值为96.14%，持续时间0分钟&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;昨天早上发现访问部分节点中的容器应用响应有些慢，于是我们通过阿里云控制台强制重启这些节点后恢复正常。&lt;/p&gt;
&lt;p&gt;今天上午我们在集群上更新一个应用时（部署新的镜像），出现了奇怪的问题。应用是在 swarm1-node1 这个 manager 节点上部署的，部署后容器运行在其他节点上，但奇怪的是只有在 swarm1-node1 这个节点上可以正常访问容器中的站点，在其他节点上访问都是 503 ，用 docker stack rm 命令删除应用并重新部署问题依旧。&lt;/p&gt;
&lt;p&gt;当时 docker-flow-proxy（路由应用） 的 2 个容器都是部署在 swarm1-node1 节点上的，从问题现象看，在 swarm1-node1 节点上 docker-flow-proxy 容器与外界的通信正常，docker-flow-proxy 容器与其他节点上的容器的 overlay 网络（网络A）通信正常；在其他节点上，外界的请求通过 overlay 网络（网络B）被正常转发到 docker-flow-proxy 容器，却不能被正常路由到其他节点上对应的容器（也是通过 overlay 网络A）。对这个奇怪现象实在想不通，但是问题摆在那，想不通也要解决。想不通背后的原因，那我们换个角度，其他节点都异常，就 swarm1-node1 正常，根据少数服从多数的粗暴原则，那就认为 swarm1-node1 不正常吧。于是通过下面的命令将 swarm1-node1 节点下线：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker node update --availability drain swarm1-node1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;swarm1-node1 下线后，其他节点都恢复了正常，果然是 swarm1-node1 不正常。&lt;/p&gt;
&lt;p&gt;swarm1-node1 下线的背后是 docker-flow-proxy 容器换到其他节点上运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/35695/201801/35695-20180119124744771-236356219.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;65&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题就这样被猜测解决了。&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 04:52:00 +0000</pubDate>
<dc:creator>博客园团队</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmt/p/8316263.html</dc:identifier>
</item>
<item>
<title>年底面试的一点经验之谈 - 不止前端</title>
<link>http://www.cnblogs.com/buzhiqianduan/p/8316302.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buzhiqianduan/p/8316302.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;毕业半年了，是时候展现真正的技术了（面试）。防止有些人觉得po主浮躁，这里讲讲po主的想法。&lt;/p&gt;
&lt;p&gt;有些人觉得刚毕业，不应该跳槽，应该沉下心来踏踏实实学习，积累个2-3年再说，并且简历上也不好看（你怎么一下就离职了，每个公司都会问你离职原因。）&lt;/p&gt;
&lt;p&gt;但是po主不这么认为，无论最后的抉择是什么，早期都应该多面试积累经验，很多人也许技术还不如你，但他的薪水比你高，可能就是因为他面试技巧高，能把自己的10k的价值说成12k，而有的人技术完全有10k，但是面试公司确觉得你只值8k，这就是面试经验的区别。&lt;/p&gt;
&lt;p&gt;所以po主觉得，初始阶段我们都有必要多面试积累一些经验。年底这个时候，很多公司都招人，机会很多，说不定就有特别合你心意的。当然，如果你坚持你的价值观，对公司抱有感情，不是以自己利益为核心标准或者别的什么原因，那你也完全可以拒绝offer，继续留任。最最重要的一个原因就是，新人阶段，我们的成长是非常迅速的，但是绝大多公司的提薪肯定跟不上你的技术成长速度，然后就是技术氛围的差距，一个bat的3年应届生和一个皮包公司的3年应届生，这个技术差距可能是一生的。所以po主觉得，能让自己变的更好就更好吧。。（人家一周一个技术分享，怎么比啊）&lt;/p&gt;
&lt;p&gt;好了，不多bb面试的理由了，开始说干货。&lt;/p&gt;
&lt;h2 id=&quot;面试第一步-一份好看的简历&quot;&gt;面试第一步 &amp;amp;&amp;amp; 一份好看的简历&lt;/h2&gt;
&lt;p&gt;简历自然是第一步，也是重要的一步。简历不好看，你很可能连面试的机会都没。这里提一些我个人的拙见。简历一般从上到下分3个部分，个人信息、项目经验和技术栈。开头简单介绍一一下你的个人信息，最好有个人博客地址和Github地址，这是加分项。个人信息部分不需要太大的篇幅，越简单越好，简历最主要要凸显你的技术优秀即可。&lt;/p&gt;
&lt;p&gt;工作经验把自己认为优秀的项目排到前面，增加曝光率。项目介绍部分不宜过多也不宜过少，PDF1-2页最佳，项目概况遵循star法则。尽量凸显你在项目中发挥的作用然后就是项目总结很重要。&lt;/p&gt;
&lt;p&gt;然后就是技术栈，把自己的所学进行一个统一的归纳，呈现给面试官。技术栈不用说了，自然会的越多越好。对于那些伪造简历的做法。个人是十分不推荐的。如果你伪造工作年限，技术跟不上会让面试官觉得你3－5还是这个吊样，基本没得谈了。如果你伪造自己的技术，你其实根本不会vue，你说会，面试一问一样gg。准备阶段到此就差不多结束了，进入第二步。&lt;/p&gt;
&lt;blockquote readability=&quot;4.5563909774436&quot;&gt;
&lt;p&gt;如果对简历十分苦手的同学，根本不知道怎么写，可以参考一下po主的简历。&lt;a href=&quot;https://pan.baidu.com/s/1eToSowy&quot; class=&quot;uri&quot;&gt;https://pan.baidu.com/s/1eToSowy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-44aade82a3ccf9f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;如何刷题？&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;面试第二步-让自己发光&quot;&gt;面试第二步 &amp;amp;&amp;amp; 让自己发光&lt;/h2&gt;
&lt;p&gt;简历准备好了，如何得到公司的面试机会也是很重要的。先说说普通筛选流程，po主推荐boss直聘和拉钩，公司都是蛮靠谱的。普通流程就比较注重学历，英语啊这些软资质了。比如像po主这种专科非科班的人，很多公司可能看到专科非计算机专业就直接把你筛了，你连面试机会都没，技术再好也没用了。这个时候，就要找大佬了，让公司员工内推可以绕过这层筛选，直接获得面试机会，也只能这样你才有可能让自己发光。所以这时候就看你平时圈子混的熟不熟了，如果经常混迹技术社区，技术qq群的，找人内推我想难度是不大的，it圈子并不大，也许我就和正在阅读的你在哪里聊过😄&lt;/p&gt;
&lt;h2 id=&quot;面试第三步-技术面&quot;&gt;面试第三步 &amp;amp;&amp;amp; 技术面&lt;/h2&gt;
&lt;p&gt;技术面就像考试一样，范围很清楚。一个是基础，Github搜索面试题刷刷，然后就是&lt;br/&gt;多看书，js高程，你不知道的js都是很好的学习js的书籍。基础需要积累，只要坚持积累，就足够了。重点来了，问的最多肯定是跟你工作息息相关的东西。如果你的项目主要是用vue框架，那核心问题必然都是围绕vue展开的，如果你的简历里说你写过express、koa，那可能就会问2者有什么区别。所以，技术面，我们都是比较有底的。。。什么？你不知道vue双绑原理？你不知道koa的中间件模型？那赶紧学啊，停留在使用层是一大忌讳。面试官的问题都是原理层的，这个问题深度就看你能回答多少了，自然是回答的越深，你的评价就越高。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;技术面，个人不推荐吹嘘自己，应该老实点回答，不然很容易把自己说崩了。但如果你吹成了，那你的价码确实就高了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;面试第四部-hr面&quot;&gt;面试第四部 &amp;amp;&amp;amp; hr面&lt;/h2&gt;
&lt;p&gt;面试轮最最重要的一轮。为什么我说最重要，因为hr有着你的一票否定权，hr说你不行你就不行。你的薪酬也是和hr的面试中定的，你说重要不重要？聊的好，你价码就高了，聊得不好，你可能就gg了，否则加码还得被压的很低。所以hr面，可以展现你的吹牛水平了。把自己说的越理想越好的，每句话都要慎重，不好的一面都不要展现，要给hr一个你是非常崇高，非常尽责。。。。吹吧，使劲吹。反正hr不懂技术。但是背景别吹，那些有可能考证的东西你别吹。那些不能考证的使劲吹。比如薪水，可能你现在7k，但你可以说你现在8k、10k，这样你就可以在期望薪资中提高你的价码。&lt;/p&gt;
&lt;h2 id=&quot;关于如何让自己获得更高的薪水&quot;&gt;关于如何让自己获得更高的薪水&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;如果你是面试前填期望薪资，你就按着自己的期望填，比如你的期望是12k,那你就填13-15k，后面hr如果套路你说你的期望给不了，你就说12k，那你的薪资就是12k了。&lt;/li&gt;
&lt;li&gt;如果技术面后谈薪资，那可以看面试发挥情况填，如果发挥超水平，期望范围＋2-3k，如果低于水平，那你可能需要保持期望或者再降一点。&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;楼主在第一次面试就吃了一次亏，被hr套路压了2k，导致不得不放弃这个offer，所以，大家一定要坚持自己的底线，要么去，要么至少这个价，一般你的期望最低值，就是你的薪资了。。除非你填个超低薪，让公司都觉得没面子。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;2017再过一个月马上就真正意义上的结束了，经历了一个月左右的面试洗礼，也拿到了一个比较满意的offer，继续思考人生－2018，继续前行。&lt;/p&gt;
&lt;p&gt;如果觉得本文对你有所帮助，就star一下吧～大传送之术！ &lt;a href=&quot;https://github.com/xu455255849/myBlog&quot;&gt;我的博客Github&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 04:36:00 +0000</pubDate>
<dc:creator>不止前端</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/buzhiqianduan/p/8316302.html</dc:identifier>
</item>
<item>
<title>一步一步从原理跟我学邮件收取及发送 1.网络命令的发送 - clq</title>
<link>http://www.cnblogs.com/-clq/p/8316279.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/-clq/p/8316279.html</guid>
<description>&lt;p&gt;一步一步从原理跟我学邮件收取及发送 1.网络命令的发送&lt;/p&gt;&lt;p&gt;多年前我写过一个叫 eemail 的邮件客户端,原因是当时笔者的姐姐是位小有名气的作家需要通过邮件发稿子给她的编辑.而当时的 foxmail 等客户端都需要配置 smtp/pop3 地址,这对于普通用户来说简直就是无法逾越的鸿沟,在给 foxmail 开发组数次建议无果后(就是没理我的意思..),我决定自己写一个.而且当时 html 病毒流行,编辑部要求来稿是纯文本. 你让一个作家怎样知道什么是纯文本 ... 所以这个 eemail 有两个特色,1. 是自动配置了各大邮箱的 smtp/pop3 配置并且是网络同步更新的; 2.是只使用纯文本的邮件内容编辑. 这个软件一度是姐姐部门的 &quot;御用&quot; 邮件发送软件,直到我离开深圳无力再负担 eemail 的服务器为止.又过了很多年,感觉自己也快&quot;退休&quot;了,还是总结一下吧,把原理尽我所知说一下,也许有后来者需要呢?&lt;/p&gt;&lt;p&gt;记得当年还是学生时看过记者采访张小龙请教怎样开发一个邮件客户端,张先生哔哩哔哩说了一堆术语,列举了一堆 rfc 协议 ... 记者表示没听懂,小龙说过程就是这样了邮件程序的开发过程是比较麻烦的...&lt;/p&gt;&lt;p&gt;作为二流软件开发专业学生的我和同学们面面相觑也是没听懂.&lt;/p&gt;&lt;p&gt;之后我是看了很多网络编程方面的书,学校图书馆的编程书毫不夸张地说都翻遍了也是没头绪,当时的书籍主要说的是 windows 的各种 api,java 当时也有了,但就是没有网络应用开发相关的,这当然也和当时网络刚出现有&lt;br/&gt;关(98年). 最后我渐渐了解了还是通过 ftp 协议的某本书的示例,没开发过网络应用的同学一定会觉得奇怪,怎么学习开发 ftp 还能学会开发电子邮件?&lt;/p&gt;&lt;p&gt;这是因为当初的各种网络协议都是基于网络命令行演变而来的,不光是 ftp/smtp/pop3 如此,就是大家最常用的网页 http 协议也是如此,它们基于网络命令行也是有原因的,那就是早期的电脑都是命令行的,后来苹果出现了...&lt;/p&gt;&lt;p&gt;所以要学习电子邮件开发第一步不是去看什么协议,而是要了解什么是网络命令行.&lt;/p&gt;
&lt;p&gt;开始前让我们先申请一个邮箱: &lt;a href=&quot;http://www.newbt.net:8888/mail/new_user.php&quot; target=&quot;_blank&quot;&gt;&quot;newbt.net 的临时邮箱&quot;&lt;/a&gt; 或者 &lt;a href=&quot;https://mail.163.com/&quot; target=&quot;_blank&quot;&gt;&quot;163.com 的正式邮箱&quot;&lt;/a&gt;. (163 现在好象要绑定手机什么的,临时用用的话用 newbt 的好了,账号秒开.)&lt;/p&gt;
&lt;p&gt;既然是命令行,那么就来看看命令行是什么样的,按下 WIN + R 键会打开 windows 的 &quot;运行&quot; 对话框,输入 cmd 然后点击确定,这时 windows 的命令行就出来了,它会先给你显示 windows 的版本和当前的路径.(用 mac 的土豪&lt;br/&gt;和用 linux 的..非土豪请使用命令行工具) 然后我们输入一个命令 dir ,这时命令行窗口会显示当前目录下的文件名列表(用 mac 的土豪和用 linux 的..非土豪请使用 ls 命令,其实差不多的,所以后面就是 windows 下为例了,不再写 mac/linux 对应的命令).&lt;br/&gt;好了,这就是命令行,一般还会有人给它起个名称叫本机命令行,总之就是让自己正在使用的这台机器执行一个命令的东东. 好了,现在网络出现了,我还要命令网络上的另外一台机器也干点啥 ... 好,网络有先驱们想那弄个网络版本的命令环境好了.&lt;/p&gt;
&lt;p&gt;重复上面的步骤,不过把 &quot;cmd&quot; 换成 &quot;telnet newbt.net 25&quot;, 执行后神奇的一幕出现了,命令行显示了 &quot;220 newbt.net ESMTP eEmail-Server 2.0&quot;. 然后执行命令 ehlo , 这时服务器会回两条信息回来...&lt;/p&gt;&lt;p&gt;这里必须要停一停了,因为会出现很多问题...&lt;/p&gt;&lt;p&gt;1.擦... telnet 是啥玩意,我这里提示不存在.&lt;/p&gt;&lt;p&gt;现在新的 windows 版本不一定带有 telnet 客户端,需要在 windows 功能模块中打开. &quot;&lt;a href=&quot;http://newbt.net/ms/vdisk/show_bbs.php?id=59866E7DCA37A95D446752B936D9A898&amp;amp;pid=160&quot; target=&quot;_blank&quot;&gt;点我查看如何开通&lt;/a&gt;&quot;&lt;/p&gt;&lt;p&gt;2.telnet 我知道, newbt.net 是啥,我要 163 邮箱.&lt;br/&gt;好吧,把命令换成 &quot;telnet smtp.163.com 25&quot;. 你会说,为啥有个 stmp ... 好吧,这就是我前面用 newbt.net 的原因,&lt;br/&gt;后面再解释.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/318151/201801/318151-20180119121423553-1994275740.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(图1.要输入的 telnet newbt.net 25 命令)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/318151/201801/318151-20180119121447584-18079582.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(图2.连接成功后的服务器回应,及 ehlo 命令的回应)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;如果连接的不是 newbt.net 邮箱而是 163 邮箱,那么还会有两个坑要爬:&lt;/p&gt;&lt;p&gt;1.咦,我输入了 ehlo 然后回车,163 说我 &quot;500 Error: bad syntax&quot;&lt;/p&gt;&lt;p&gt;这个,咳咳,忘了说了网络程序虽然有协议但各个程序实现起来是有些差异的,因为协议不可能面面俱到,现实中兼容性是个大问题... 好了,具体到这个那是因为 163 邮箱要求命令英文(最好是)大写,因为协议中没有说是大写还是小写啊(其实是有的,不太明显而已)&lt;/p&gt;&lt;p&gt;2.好吧,我换成大写命令了... 怎么还是不行啊.&lt;br/&gt;这... 我也无语,因为 163 邮箱要求 ehlo 命令后要带上它 163 的名称,这个名称还不能乱写,它必须是 &quot;163.com&quot;,&lt;br/&gt;所以如果用 163 邮箱来学习这些命令的话那么要输入的是 &quot;EHLO 163.com&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/318151/201801/318151-20180119121337568-357793415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; (图3. 因为对协议实现的不同 163 的命令格式要求更严格. 因为现在国内还用不了 gmail 所以不能给大家看 gmail 的实现了)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;好了,经过这番掉一层皮的折腾,我终于过了网络编程的第一关: 使用及认识什么是网络命令. 但是这网络命令中还有一个大坑,我们下编文章再说. 码字好辛苦,休息下先.&lt;/p&gt;&lt;p&gt;--------------------------------------------------&lt;br/&gt;附1: newbt.net 的邮箱可以在 &lt;a href=&quot;http://www.newbt.net:8888/mail/new_user.php&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt; 申请,过程很简单.&lt;br/&gt;附2: win7 及以上版本的 windows 可能没有打开 telnet 功能,请查看 &lt;a href=&quot;http://newbt.net/ms/vdisk/show_bbs.php?id=59866E7DCA37A95D446752B936D9A898&amp;amp;pid=160&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt; . (注:打开 telnet 客户端就可以了,开 telnet 服务端的话不太安全)&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 04:34:00 +0000</pubDate>
<dc:creator>clq</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/-clq/p/8316279.html</dc:identifier>
</item>
<item>
<title>12、ABPZero系列教程之拼多多卖家工具 拼团提醒功能登录拼多多实现 - 李子深</title>
<link>http://www.cnblogs.com/shensigzs/p/8310149.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shensigzs/p/8310149.html</guid>
<description>&lt;p&gt;　　上篇文章已经完成了整个拼多多拼团提醒功能，本篇继续完成拼多多帐号登录，拼多多帐号登录的目的是为了获取拼团商品的SKU和订单号，便于商家备货。&lt;/p&gt;
&lt;p&gt;以下是拼多多官方的后台登录，要实现的功能并不是直接在这里登录，而是在项目通过发送数据包的方式去登录，主要就是拿到登录后的cookie或token。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注：做此功能需要准备拼多多卖家帐号，如果没有，可以跳过本篇内容。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/488385/201801/488385-20180118112602381-893293659.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;添加CodeResponse.cs文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\PddTool\PddApi\Response\CodeResponse.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CodeResponse
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; result { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; Data data { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Data
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; token { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; image { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加UserResponse.cs文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\PddTool\PddApi\Response\UserResponse.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登录返回
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserResponse
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; authResult { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; UserInfo userInfo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; inMobileWhiteList { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; mobileVerification { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户id
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; username { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 店铺id
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; mallId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; passwordStatus { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 手机
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; mobile { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 昵称
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; nickname { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 角色id列表
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt; roleIdList { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 店铺管理员
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; mallOwner { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; roleNameList { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; permissionList { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登录cookie
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Cookie { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加RequestErrorResponse.cs文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\PddTool\PddApi\Response\RequestErrorResponse.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 请求错误返回
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RequestErrorResponse
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; error_msg { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; error_code { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加LoginRequest.cs文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\PddTool\PddApi\Request\LoginRequest.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 拼多多登录
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginRequest
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Username { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 密码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Code { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 令牌
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Token { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改MallTool.cs文件，末尾添加如下代码：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\PddTool\MallTool.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 取验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; CodeResponse GetCode()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; url = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://mms.pinduoduo.com/captchaCode/getCaptchaCode?rd=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; Guid.NewGuid());
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestClient(url);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestRequest(Method.GET);
            request.AddHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cache-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no-cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            request.AddHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;referer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://mms.pinduoduo.com/Pdd.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            IRestResponse response &lt;/span&gt;=&lt;span&gt; client.Execute(request);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; code = JsonConvert.DeserializeObject&amp;lt;CodeResponse&amp;gt;&lt;span&gt;(response.Content);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; code;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 拼多多登录
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;data&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; UserResponse Login(LoginRequest data)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://mms.pinduoduo.com/auth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestClient(url);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestRequest(Method.POST);
            request.AddParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, data.Username);
            request.AddParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, data.Password);
            request.AddParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;authCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, data.Code);
            request.AddParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verificationCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
            request.AddParameter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, data.Token);
            request.AddHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cache-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no-cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            IRestResponse response &lt;/span&gt;=&lt;span&gt; client.Execute(request);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (response.Content.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; error = JsonConvert.DeserializeObject&amp;lt;RequestErrorResponse&amp;gt;&lt;span&gt;(response.Content);
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserFriendlyException(error.error_msg);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; c = response.Cookies.Single(a =&amp;gt; a.Name.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PASS_ID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cookie =&lt;span&gt; c.Value;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = JsonConvert.DeserializeObject&amp;lt;UserResponse&amp;gt;&lt;span&gt;(response.Content);
            user.userInfo.Cookie &lt;/span&gt;=&lt;span&gt; cookie;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;到这里就把拼多多后台登录封装好了，就2个方法，一个获取验证码、一个提交post数据登录。&lt;/p&gt;


&lt;p&gt;修改IMallAppService.cs文件，添加2个方法，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Application\Pdd\MallApp\IMallAppService.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 取验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        CodeOutput GetCode();

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登录
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        UserInfoOutput Login(LoginInput input);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加CodeOutput.cs文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Application\Pdd\MallApp\Dto\CodeOutput.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CodeOutput
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 图片
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Image { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 令牌
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Token { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加UserInfoOutput.cs文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Application\Pdd\MallApp\Dto\UserInfoOutput.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfoOutput
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Username { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 店铺id
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MallId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Cookie { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加LoginInput.cs文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Application\Pdd\MallApp\Dto\LoginInput.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginInput
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用户名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Username { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 密码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Code { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 令牌
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Token { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改MallAppService.cs文件，实现接口添加的2个方法，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Application\Pdd\MallApp\MallAppService.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取验证码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CodeOutput GetCode()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; code =&lt;span&gt; MallTool.GetCode();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (code.result == &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;验证码获取失败！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CodeOutput()
            {
                Image &lt;/span&gt;=&lt;span&gt; code.data.image,
                Token &lt;/span&gt;=&lt;span&gt; code.data.token
            };
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登录
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserInfoOutput Login(LoginInput input)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = Mapper.Map&amp;lt;LoginRequest&amp;gt;&lt;span&gt;(input);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; key = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}_{1}_Mall&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, AbpSession.UserId, input.Username);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cache = _cacheManager.GetCache&amp;lt;&lt;span&gt;string&lt;/span&gt;, UserResponse&amp;gt;&lt;span&gt;(key);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (cache != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    cache.Clear();
                }
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = _cacheManager.GetCache&amp;lt;&lt;span&gt;string&lt;/span&gt;, UserResponse&amp;gt;(key).Get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Login.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + input.Username, () =&amp;gt;&lt;span&gt; MallTool.Login(data));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录成功清除对应店铺开团商品的缓存&lt;/span&gt;
                key = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}_{1}_KaiTuan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, AbpSession.UserId, user.userInfo.mallId);
                _cacheManager.GetCache&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;, List&amp;lt;KaiTuan&amp;gt;&amp;gt;&lt;span&gt;(key).Clear();

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfoOutput()
                {
                    Cookie &lt;/span&gt;=&lt;span&gt; user.userInfo.Cookie,
                    MallId &lt;/span&gt;=&lt;span&gt; user.userInfo.mallId,
                    Username &lt;/span&gt;=&lt;span&gt; input.Username
                };
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UserFriendlyException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录失败：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ex.Message);
            }

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开CustomDtoMapper.cs文件，添加如下映射：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Application\CustomDtoMapper.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mapper.CreateMap&amp;lt;LoginInput, LoginRequest&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成解决方案，浏览器打开http://localhost:8088/swagger/ui/index，测试刚刚添加的2个api。&lt;/p&gt;
&lt;p&gt;接下来页面实现。&lt;/p&gt;

&lt;p&gt;打开KaiTuanController.cs文件，添加如下代码：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Areas\Mpa\Controllers\Pdd\KaiTuanController.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult LoginModal()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; code =&lt;span&gt; _mallAppService.GetCode();
            ViewBag.code &lt;/span&gt;=&lt;span&gt; code;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; PartialView(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_LoginModal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加对应的视图文件_LoginModal.cshtml，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Areas\Mpa\Views\KaiTuan\_LoginModal.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@using MyCompanyName.AbpZeroTemplate.Pdd.MallApp.Dto
@using MyCompanyName.AbpZeroTemplate.Web.Areas.Mpa.Models.Common.Modals
@{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; code = ViewBag.code &lt;span&gt;as&lt;/span&gt;&lt;span&gt; CodeOutput;
}
@Html.Partial(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Areas/Mpa/Views/Common/Modals/_ModalHeader.cshtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; ModalHeaderViewModel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录拼多多&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modal-body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;form name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LoginForm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-horizontal margin-bottom-40&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; role=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@code.Token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group form-md-line-input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input-icon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;帐号名/手机号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control-focus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;i &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fa fa-user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group form-md-line-input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input-icon right&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control-focus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;i &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fa fa-key&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;help-block&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
                    with right aligned icon
                &lt;/span&gt;&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group form-md-line-input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control-focus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input-group-addon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@code.Image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width: 113px; height: 30px;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-md-offset-4 col-md-10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn green save-button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;登录&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;&lt;span&gt;
@Html.Partial(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/Areas/Mpa/Views/Common/Modals/_ModalFooterWithCancel.cshtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加视图对应的JS文件，代码如下：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Areas\Mpa\Views\KaiTuan\_LoginModal.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; _mallService =&lt;span&gt; abp.services.app.mall;
(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($) {
    app.modals.LoginModal &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _$loginForm = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; _modalManager;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.init = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (modalManager) {
            _modalManager &lt;/span&gt;=&lt;span&gt; modalManager;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出Form表单&lt;/span&gt;
            _$loginForm = _modalManager.getModal().find('form[name=LoginForm]'&lt;span&gt;);
        };

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.save = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证不通过返回&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;_$loginForm.valid()) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;序列化参数&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; login =&lt;span&gt; _$loginForm.serializeFormToObject();
            _modalManager.setBusy(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            _mallService.login(
                login
            ).done(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
                _modalManager.close();
                abp.event.trigger(&lt;/span&gt;'app.loginModalSaved'&lt;span&gt;, { username: data.username });
            }).always(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                _modalManager.setBusy(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            });
        };
    };
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getCode() {
        _mallService.getCode().done(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
            $(&lt;/span&gt;&quot;#img&quot;).attr(&quot;src&quot;&lt;span&gt;, data.image);
            $(&lt;/span&gt;&quot;#token&quot;&lt;span&gt;).val(data.token);
        });
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;getCode();&lt;/span&gt;
&lt;span&gt;
    $(&lt;/span&gt;&quot;#img&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        getCode();
    });
})(jQuery);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开文件Index.js，添加如下代码：&lt;/p&gt;
&lt;p&gt;文件路径：D:\abp version\aspnet-zero-3.4.0\aspnet-zero-3.4.0\src\MyCompanyName.AbpZeroTemplate.Web\Areas\Mpa\Views\KaiTuan\Index.js&lt;/p&gt;
&lt;p&gt;6行位置添加一个变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; username;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录登录拼多多用户名&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;26行位置添加如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
         登录模态框
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; _loginModal = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; app.ModalManager({
            viewUrl: abp.appPath &lt;/span&gt;+ 'Mpa/KaiTuan/LoginModal'&lt;span&gt;,
            scriptUrl: abp.appPath &lt;/span&gt;+ 'Areas/Mpa/Views/KaiTuan/_LoginModal.js'&lt;span&gt;,
            modalClass: &lt;/span&gt;'LoginModal'&lt;span&gt;
        });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;178行位置添加如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录拼多多&lt;/span&gt;
        $(&quot;#LoginPddButton&quot;).click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            _loginModal.open();
        });

        abp.event.on(&lt;/span&gt;'app.loginModalSaved', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
            console.info(&lt;/span&gt;&quot;成功&quot;&lt;span&gt;, data);
            username &lt;/span&gt;=&lt;span&gt; data.username;
            toastr[&lt;/span&gt;&quot;success&quot;](&quot;登录拼多多成功&quot;, &quot;提示&quot;&lt;span&gt;);
        });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成解决方案，浏览器登录后台测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/488385/201801/488385-20180118143444631-1254777194.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/488385/201801/488385-20180118143459178-301479605.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/shensigzs/p/8277860.html&quot; target=&quot;_blank&quot;&gt;返回总目录&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jan 2018 04:01:00 +0000</pubDate>
<dc:creator>李子深</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shensigzs/p/8310149.html</dc:identifier>
</item>
</channel>
</rss>