<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>微信小程序实战--集阅读与电影于一体的小程序项目（一） - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/9490810.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/9490810.html</guid>
<description>&lt;h3 id=&quot;首页欢迎界面&quot;&gt;1.首页欢迎界面&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;项目目录结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建项目ReaderMovie，然后新建文件，结构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://139.199.131.146/wp-content/uploads/2018/08/2d321dcc7388d775df6ae9a6e671f6fa.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;welcome.wxml&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;view class='container'&amp;gt;
    &amp;lt;image class='user-avatar' src=&quot;/images/avatar/4.png&quot;&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;text class='user-name'&amp;gt;&amp;lt;text style='color:blue'&amp;gt;Hello&amp;lt;/text&amp;gt;,八月&amp;lt;/text&amp;gt;
    &amp;lt;view class='moto-container'&amp;gt;
        &amp;lt;text class='moto'&amp;gt;开启小程序之旅&amp;lt;/text&amp;gt;
    &amp;lt;/view&amp;gt;
&amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;welcome.wxss&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;css&quot;&gt;
&lt;code&gt;.container{ 
    display:flex;              /*弹性模型*/
    flex-direction:column;     /*垂直方向 列 排布*/
    align-items:center;        /*居中*/
}  

.user-avatar{
  width:150rpx;
  height:150rpx;
  margin-top:160rpx;
}

.user-name{
    margin-top:150rpx;
    font-size:32rpx;
    font-weight:bold;
}
.moto-container{
    margin-top:200rpx;  
    border:1px solid #405f80;
    width:200rpx;
    height:80rpx;
    border-radius:5rpx;
    text-align:center;
}
.moto{
    font-size:22rpx;
    font-weight:bold;
    line-height:80rpx;
    color:#405f80;
}
page{
    height:100%;
    background:#b3d4db;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;welcome.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Page(
  {}
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;welcome.json&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置导航条的颜色&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;{
  &quot;navigationBarBackgroundColor&quot;: &quot;#b3d4db&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;app.json&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置目录和背景颜色&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;{
  &quot;pages&quot;: [
    &quot;pages/welcome/welcome&quot;
  ],
  &quot;window&quot;: {
    &quot;navigationBarBackgroundColor&quot;: &quot;#405f80&quot;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;app.wxss&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置全局的字体格式&lt;/p&gt;
&lt;pre class=&quot;css&quot;&gt;
&lt;code&gt;text{
    font-family:MicroSoft yahei;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果预览&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://139.199.131.146/wp-content/uploads/2018/08/a122ea297955f581d0aa2b69d1a0851c.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;轮播图播放&quot;&gt;2.轮播图播放&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html&quot; title=&quot;swiper文档&quot;&gt;swiper文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新建目录posts&lt;/p&gt;
&lt;p&gt;post.wxml&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;view&amp;gt;
  &amp;lt;swiper indicator-dots='true' autoplay='true' interval='2000'&amp;gt;
    &amp;lt;swiper-item&amp;gt;
      &amp;lt;image src='/images/post/bl.png'&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;/swiper-item&amp;gt;
    &amp;lt;swiper-item&amp;gt;&amp;lt;image src='/images/post/xiaolong.jpg' &amp;gt;&amp;lt;/image&amp;gt;&amp;lt;/swiper-item&amp;gt;
    &amp;lt;swiper-item&amp;gt;&amp;lt;image src='/images/post/vr.png' &amp;gt;&amp;lt;/image&amp;gt;&amp;lt;/swiper-item&amp;gt;
  &amp;lt;/swiper&amp;gt;
&amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;post.wxss&lt;/p&gt;
&lt;pre class=&quot;css&quot;&gt;
&lt;code&gt;swiper{
  width:100%;
  height:500rpx;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;新闻列表&quot;&gt;3.新闻列表&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;导航栏背景色和文字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE&quot; title=&quot;配置文档&quot;&gt;配置文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;post.json&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;{
  &quot;navigationBarBackgroundColor&quot;: &quot;#405f80&quot;,
  &quot;navigationBarTitleText&quot;:&quot;新闻资讯&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://139.199.131.146/wp-content/uploads/2018/08/f0a0c9013b0529bc189f23d22e5aa1ba.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新闻列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;post.wxml&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;view&amp;gt;
  &amp;lt;swiper indicator-dots='true' autoplay='true' interval='2000'&amp;gt;
    &amp;lt;swiper-item&amp;gt;
      &amp;lt;image src='/images/post/bl.png'&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;/swiper-item&amp;gt;
    &amp;lt;swiper-item&amp;gt;&amp;lt;image src='/images/post/xiaolong.jpg' &amp;gt;&amp;lt;/image&amp;gt;&amp;lt;/swiper-item&amp;gt;
    &amp;lt;swiper-item&amp;gt;&amp;lt;image src='/images/post/vr.png' &amp;gt;&amp;lt;/image&amp;gt;&amp;lt;/swiper-item&amp;gt;
  &amp;lt;/swiper&amp;gt;

  &amp;lt;view class='post-container'&amp;gt;
    &amp;lt;view class='post-author-date'&amp;gt;
      &amp;lt;image class='post-author' src=&quot;/images/avatar/1.png&quot;&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-date'&amp;gt;2018/8/16&amp;lt;/text&amp;gt;
    &amp;lt;/view&amp;gt;

    &amp;lt;text class='post-title'&amp;gt;荷塘月色&amp;lt;/text&amp;gt;
    &amp;lt;image class='post-image' src='/images/post/crab.png'&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;text class='post-content'&amp;gt;这几天心里颇不宁静。今晚在院子里坐着乘凉，忽然想起日日走过的荷塘，在这满月的光里，总该另有一番样子吧。&amp;lt;/text&amp;gt;
    &amp;lt;view class='post-like'&amp;gt;
      &amp;lt;image class='post-like-image' src='../../images/icon/chat.png'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-like-font'&amp;gt;100&amp;lt;/text&amp;gt;
      &amp;lt;image class='post-like-image' src='../../images/icon/view.png'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-like-font'&amp;gt;65&amp;lt;/text&amp;gt;   
    &amp;lt;/view&amp;gt;
  
  &amp;lt;/view&amp;gt;

&amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;post.wxss&lt;/p&gt;
&lt;pre class=&quot;css&quot;&gt;
&lt;code&gt;swiper{
  width:100%;
  height:500rpx;
}

.post-container{
  display: flex;
  flex-direction: column;
  margin-top:20rpx;
  margin-bottom: 40rpx;
  background-color: #fff;
  border-top:1px solid #ededed;
  border-bottom: 1px solid #ededed;
  padding-bottom: 5px;
}

.post-author-date{
  margin:10rpx 0 20rpx 10rpx

}

.post-author{
  width: 60rpx;
  height: 60rpx;
  vertical-align: middle;
}

.post-date{
  margin-left: 20rpx;
  vertical-align: middle;
  margin-bottom: 5px;
  font-size: 26rpx;
}

.post-title{
  font-size: 34rpx;
  font-weight: 600;
  color:#333;
  margin-bottom: 10px;
  margin-left: 10px;

}

.post-image{
  margin-left: 16px;
  width: 100%;
  height: 340rpx;
  margin:auto 0;
  margin-bottom: 15px;
}

.post-content{
  color:#666;
  font-size: 28rpx;
  margin-bottom:20rpx;
  margin-left: 20rpx;
  letter-spacing: 2rpx;
  line-height: 40rpx;
}

.post-like{
  font-size: 13px;
  flex-direction: row;
  line-height: 16px;
  margin-left: 10px;
}

.post-like-image{
  height: 16px;
  width:16px;
  margin-right: 8px;
  vertical-align: middle;
}

.post-like-font{
  vertical-align: middle;
  margin-right: 20px;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://139.199.131.146/wp-content/uploads/2018/08/00f23a5031c61e2816c06446c4b5a1ca.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据绑定&quot;&gt;4.数据绑定&lt;/h3&gt;
&lt;p&gt;真正的数据肯定不可能像上面那样写在wxml文件里面，而是从服务器加载的数据，下面模拟从服务器加载数据。&lt;/p&gt;
&lt;p&gt;post.wxml&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;  &amp;lt;view class='post-container'&amp;gt;
    &amp;lt;view class='post-author-date'&amp;gt;
      &amp;lt;image class='post-author' src=&quot;{{author_img}}&quot;&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-date'&amp;gt;{{date}}&amp;lt;/text&amp;gt;
    &amp;lt;/view&amp;gt;

    &amp;lt;text class='post-title'&amp;gt;{{title}}&amp;lt;/text&amp;gt;
    &amp;lt;image class='post-image' src='{{post_img}}'&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;text class='post-content'&amp;gt;{{content}}&amp;lt;/text&amp;gt;
    &amp;lt;view class='post-like'&amp;gt;
      &amp;lt;image class='post-like-image' src='../../images/icon/chat.png'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-like-font'&amp;gt;{{collect_num}}&amp;lt;/text&amp;gt;
      &amp;lt;image class='post-like-image' src='../../images/icon/view.png'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-like-font'&amp;gt;{{view_num}}&amp;lt;/text&amp;gt;   
    &amp;lt;/view&amp;gt;
  
  &amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;post.js&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Page({

  /**
   * 页面的初始数据
   */
  data: {
    
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    var post_content1={
      date:&quot;2018/8/16&quot;,
      title:&quot;荷塘月色&quot;,
      post_img: '/images/post/crab.png',
      content:'这几天心里颇不宁静。今晚在院子里坐着乘凉，忽然想起日日走过的荷塘，在这满月的光里，总该另有一番样子吧。',
      view_num:&quot;100&quot;,
      collect_num:'50',
      author_img:'/images/avatar/1.png'
    }
    this.setData(post_content1);
  },
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;wx-for循环新闻列表&quot;&gt;5.wx-for循环新闻列表&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/list.html&quot; title=&quot;列表渲染文档&quot;&gt;列表渲染文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设有两篇新闻，通过wx:for列表循环展示新闻信息。&lt;/p&gt;
&lt;p&gt;post.js&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Page({

  /**
   * 页面的初始数据
   */
  data: {

  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    var posts_content = [
      {
        date: &quot;2018/8/16&quot;,
        title: &quot;荷塘月色&quot;,
        post_img: '/images/post/crab.png',
        content: '这几天心里颇不宁静。今晚在院子里坐着乘凉，忽然想起日日走过的荷塘，在这满月的光里，总该另有一番样子吧。',
        view_num: &quot;100&quot;,
        collect_num: '50',
        author_img: '/images/avatar/1.png'
      },
      {
        date: &quot;2018/7/15&quot;,
        title: &quot;背影&quot;,
        post_img: '/images/post/bl.png',
        content: '我与父亲不相见已二年余了，我最不能忘记的是他的背影 。那年冬天，祖母死了，父憨穿封费莩渡凤杀脯辑亲的差使也交卸了，正是祸不单行的日子',
        view_num: &quot;120&quot;,
        collect_num: '150',
        author_img: '/images/avatar/2.png'
      }
    ]
    this.setData({
      posts_key: posts_content
    });
  },

})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;post.wxml&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;view&amp;gt;
  &amp;lt;swiper indicator-dots='true' autoplay='true' interval='2000'&amp;gt;
    &amp;lt;swiper-item&amp;gt;
      &amp;lt;image src='/images/post/bl.png'&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;/swiper-item&amp;gt;
    &amp;lt;swiper-item&amp;gt;&amp;lt;image src='/images/post/xiaolong.jpg' &amp;gt;&amp;lt;/image&amp;gt;&amp;lt;/swiper-item&amp;gt;
    &amp;lt;swiper-item&amp;gt;&amp;lt;image src='/images/post/vr.png' &amp;gt;&amp;lt;/image&amp;gt;&amp;lt;/swiper-item&amp;gt;
  &amp;lt;/swiper&amp;gt;

  &amp;lt;block wx:for=&quot;{{posts_key}}&quot; wx:for-item=&quot;item&quot;&amp;gt;
    &amp;lt;view class='post-container'&amp;gt;
      &amp;lt;view class='post-author-date'&amp;gt;
        &amp;lt;image class='post-author' src=&quot;{{item.author_img}}&quot;&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-date'&amp;gt;{{item.date}}&amp;lt;/text&amp;gt;
      &amp;lt;/view&amp;gt;

      &amp;lt;text class='post-title'&amp;gt;{{item.title}}&amp;lt;/text&amp;gt;
      &amp;lt;image class='post-image' src='{{item.post_img}}'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-content'&amp;gt;{{item.content}}&amp;lt;/text&amp;gt;
      &amp;lt;view class='post-like'&amp;gt;
        &amp;lt;image class='post-like-image' src='../../images/icon/chat.png'&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-like-font'&amp;gt;{{item.collect_num}}&amp;lt;/text&amp;gt;
        &amp;lt;image class='post-like-image' src='../../images/icon/view.png'&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-like-font'&amp;gt;{{item.view_num}}&amp;lt;/text&amp;gt;   
      &amp;lt;/view&amp;gt; 
    &amp;lt;/view&amp;gt;
  &amp;lt;/block&amp;gt;
&amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;小程序事件机制&quot;&gt;6.小程序事件机制&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html&quot; title=&quot;事件文档&quot;&gt;事件文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html&quot; title=&quot;路由文档&quot;&gt;路由文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现从首页跳转到新闻列表页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;welcome.wxml绑定一个事件&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;view class='container'&amp;gt;
    &amp;lt;image class='user-avatar' src=&quot;/images/avatar/4.png&quot;&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;text class='user-name'&amp;gt;&amp;lt;text style='color:blue'&amp;gt;Hello&amp;lt;/text&amp;gt;,八月&amp;lt;/text&amp;gt;
    &amp;lt;view class='moto-container' bindtap='onTap'&amp;gt;
        &amp;lt;text class='moto'&amp;gt;开启小程序之旅&amp;lt;/text&amp;gt;
    &amp;lt;/view&amp;gt;
&amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;welcome.js&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;Page({
  onTap:function(){
    wx.redirectTo({
      url: '../posts/post',
    })
  }
}
)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;小程序的模块化&quot;&gt;7.小程序的模块化&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/list.html&quot; title=&quot;列表渲染&quot;&gt;列表渲染&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html&quot; title=&quot;模块化&quot;&gt;模块化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将业务中的数据分离到单独的数据文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建data文件夹，再创建postsdata.js&lt;/p&gt;
&lt;p&gt;post.wxml&lt;/p&gt;
&lt;p&gt;修改地方：wx:for=&quot;{{postlist}}&quot;，还有一些变量&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;block wx:for=&quot;{{postlist}}&quot; wx:for-item=&quot;item&quot;&amp;gt;
    &amp;lt;view class='post-container'&amp;gt;
      &amp;lt;view class='post-author-date'&amp;gt;
        &amp;lt;image class='post-author' src=&quot;{{item.avatar}}&quot;&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-date'&amp;gt;{{item.date}}&amp;lt;/text&amp;gt;
      &amp;lt;/view&amp;gt;

      &amp;lt;text class='post-title'&amp;gt;{{item.title}}&amp;lt;/text&amp;gt;
      &amp;lt;image class='post-image' src='{{item.imgSrc}}'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-content'&amp;gt;{{item.content}}&amp;lt;/text&amp;gt;
      &amp;lt;view class='post-like'&amp;gt;
        &amp;lt;image class='post-like-image' src='../../images/icon/chat.png'&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-like-font'&amp;gt;{{item.collection}}&amp;lt;/text&amp;gt;
        &amp;lt;image class='post-like-image' src='../../images/icon/view.png'&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-like-font'&amp;gt;{{item.reading}}&amp;lt;/text&amp;gt;
      &amp;lt;/view&amp;gt;
    &amp;lt;/view&amp;gt;
  &amp;lt;/block&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;postsdata.js&lt;/p&gt;
&lt;p&gt;把文章分离出来。通过 module.exports 对外暴露接口。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var local_database = [{
  date: &quot;2018/8/16&quot;,
  title: &quot;荷塘月色&quot;,
  imgSrc: '/images/post/crab.png',
  content: '这几天心里颇不宁静。今晚在院子里坐着乘凉，忽然想起日日走过的荷塘，在这满月的光里，总该另有一番样子吧。',
  reading: &quot;100&quot;,
  collection: '50',
  avatar: '/images/avatar/1.png'
},
{
  date: &quot;2018/7/15&quot;,
  title: &quot;背影&quot;,
  imgSrc: '/images/post/bl.png',
  content: '我与父亲不相见已二年余了，我最不能忘记的是他的背影 。那年冬天，祖母死了，父憨穿封费莩渡凤杀脯辑亲的差使也交卸了，正是祸不单行的日子',
  reading: &quot;120&quot;,
  collection: '150',
  avatar: '/images/avatar/2.png'
},
{
  date: &quot;2018/6/2&quot;,
  title: &quot;济南的冬天&quot;,
  imgSrc: '/images/post/vr.png',
  content: '对于一个在北平住惯的人，像我，冬天要是不刮风，便觉得是奇迹；济南的冬天是没有风声的。',
  reading: &quot;80&quot;,
  collection: '50',
  avatar: '/images/avatar/3.png'
},

{
  date: &quot;2018/5/1&quot;,
  title: &quot;江南之雨&quot;,
  imgSrc: '/images/post/cat.png',
  content: '江南之春雨如此缠绵，然煽情，如此醉，影青青之烟雨巷，雨丝风，润之使人动心如此',
  reading: &quot;80&quot;,
  collection: '50',
  avatar: '/images/avatar/3.png'
},

{
  date: &quot;2018/4/6&quot;,
  title: &quot;忆江南&quot;,
  imgSrc: '/images/post/xiaolong.jpg',
  content: '昨晚和阿浩谈起诸多童年记忆，不知不觉眼前浮现一片油菜花海，黄灿灿，一眼望不到头，连空气都带着甜香。',
  reading: &quot;80&quot;,
  collection: '50',
  avatar: '/images/avatar/4.png'
},
]

module.exports = {
  postlist:local_database
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;post.js使用 require(path) 将代码引入&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;var postsData = require('../../data/posts-data.js')

Page({
  data: {
    postlist: postsData.postlist
  },

  onLoad: function(options) {
    // this.setData({
    //   posts_key: postsData.postlist
    // });
  }
})&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;template模板的使用&quot;&gt;8.template模板的使用&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/template.html&quot; title=&quot;模板&quot;&gt;模板&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在posts目录下创建模板目录post-item目录，然后分别创建post-item-template.wxml和post-item-template.wxss&lt;/p&gt;
&lt;p&gt;post-item-template.wxml创建模板&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;template name=&quot;postItem&quot;&amp;gt;
  &amp;lt;view class='post-container'&amp;gt;
      &amp;lt;view class='post-author-date'&amp;gt;
        &amp;lt;image class='post-author' src=&quot;{{avatar}}&quot;&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-date'&amp;gt;{{item.date}}&amp;lt;/text&amp;gt;
      &amp;lt;/view&amp;gt;

      &amp;lt;text class='post-title'&amp;gt;{{title}}&amp;lt;/text&amp;gt;
      &amp;lt;image class='post-image' src='{{imgSrc}}'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;text class='post-content'&amp;gt;{{content}}&amp;lt;/text&amp;gt;
      &amp;lt;view class='post-like'&amp;gt;
        &amp;lt;image class='post-like-image' src='../../images/icon/chat.png'&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-like-font'&amp;gt;{{collection}}&amp;lt;/text&amp;gt;
        &amp;lt;image class='post-like-image' src='../../images/icon/view.png'&amp;gt;&amp;lt;/image&amp;gt;
        &amp;lt;text class='post-like-font'&amp;gt;{{reading}}&amp;lt;/text&amp;gt;
      &amp;lt;/view&amp;gt;
    &amp;lt;/view&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;post.wxml使用模板&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;
&amp;lt;import src='post-item/post-item-template.wxml' /&amp;gt;

&amp;lt;view&amp;gt;
  &amp;lt;swiper indicator-dots='true' autoplay='true' interval='2000'&amp;gt;
    &amp;lt;swiper-item&amp;gt;
      &amp;lt;image src='/images/post/bl.png'&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;/swiper-item&amp;gt;
    &amp;lt;swiper-item&amp;gt;
      &amp;lt;image src='/images/post/xiaolong.jpg'&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;/swiper-item&amp;gt;
    &amp;lt;swiper-item&amp;gt;
      &amp;lt;image src='/images/post/vr.png'&amp;gt;&amp;lt;/image&amp;gt;
    &amp;lt;/swiper-item&amp;gt;
  &amp;lt;/swiper&amp;gt;

  &amp;lt;block wx:for=&quot;{{postlist}}&quot; wx:for-item=&quot;item&quot;&amp;gt;
    &amp;lt;template is=&quot;postItem&quot; data=&quot;{{...item}}&quot; /&amp;gt;
  &amp;lt;/block&amp;gt;
&amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;post-item-template.wxss创建模板&lt;/p&gt;
&lt;pre class=&quot;css&quot;&gt;
&lt;code&gt;.post-container{
  display: flex;
  flex-direction: column;
  margin-top:20rpx;
  margin-bottom: 40rpx;
  background-color: #fff;
  border-top:1px solid #ededed;
  border-bottom: 1px solid #ededed;
  padding-bottom: 5px;
}

.post-author-date{
  margin:10rpx 0 20rpx 10rpx

}

.post-author{
  width: 60rpx;
  height: 60rpx;
  vertical-align: middle;
}

.post-date{
  margin-left: 20rpx;
  vertical-align: middle;
  margin-bottom: 5px;
  font-size: 26rpx;
}

.post-title{
  font-size: 34rpx;
  font-weight: 600;
  color:#333;
  margin-bottom: 10px;
  margin-left: 10px;

}

.post-image{
  margin-left: 16px;
  width: 100%;
  height: 340rpx;
  margin:auto 0;
  margin-bottom: 15px;
}

.post-content{
  color:#666;
  font-size: 28rpx;
  margin-bottom:20rpx;
  margin-left: 20rpx;
  letter-spacing: 2rpx;
  line-height: 40rpx;
}

.post-like{
  font-size: 13px;
  flex-direction: row;
  line-height: 16px;
  margin-left: 10px;
}

.post-like-image{
  height: 16px;
  width:16px;
  margin-right: 8px;
  vertical-align: middle;
}

.post-like-font{
  vertical-align: middle;
  margin-right: 20px;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;post.wxss使用模板&lt;/p&gt;
&lt;pre class=&quot;css&quot;&gt;
&lt;code&gt;@import &quot;post-item/post-item-template.wxss&quot;

swiper{
  width:100%;
  height:500rpx;
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 16 Aug 2018 15:31:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<og:description>1.首页欢迎界面 项目目录结构 新建项目ReaderMovie，然后新建文件，结构如下 welcome.wxml welcome.wxss welcome.js welcome.json 设置导航条的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/9490810.html</dc:identifier>
</item>
<item>
<title>6.2 element和elements - 佬贰</title>
<link>http://www.cnblogs.com/pythontest/p/9490802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythontest/p/9490802.html</guid>
<description>&lt;p&gt;&lt;span&gt;为什么这个要单独拿出来说，因为我在很多群里面看见很多人不能区分这个！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      &lt;span&gt;本章换个&lt;/span&gt;app&lt;span&gt;，换一个一亿人都在用的&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;，安卓市场！！！！！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       &lt;span&gt;提醒：建议初学者跟着敲，边敲边理解！&lt;/span&gt;  &lt;span&gt;实际上截止本章为止，和有无&lt;/span&gt;python&lt;span&gt;基础关系不大，前几章的东西都是需要记的！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180816230511577-258501935.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;路径：直接复制&lt;/span&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appPackage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;包名&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.baidu.appsearch.LauncherActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;如图所示，改下这三个东西就好了！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后，打开手机进入安卓市场！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首次打开会有一个权限弹窗（下章讲到）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180816230910006-263542778.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;这个脚本写好直接点击就可以了，，以往章节更新的内容可以完全可以操作这一步！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; site_packages.appium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
Start&lt;/span&gt;=&lt;span&gt;{}
Start[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;platformName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;android&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设备型号  android或者ios&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;platformVersion&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;7.1.2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;安卓设备版本号&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;deviceName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2905bdb6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;安卓设备名称&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\Users\Administrator\Desktop\xuexi\apk\anzhuoshichang_16793302.apk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设备路径  pc电脑存放apk包的路径&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;上面的路径不推荐这种写法，但是目前先这么写！后续告诉大家正确的写法&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appPackage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;包名&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.baidu.appsearch.LauncherActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;容器&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;noReset&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;是否重新安装app  True不重新安装&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;unicodeKeyboard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;是否禁用手机键盘  True禁用手机输入法&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;resetKeyboard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;是否启动appium自带键盘 True开始手机输入法&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;automationName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Uiautomator2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;可选模式  本教程默认 Uiautomator2&lt;/span&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;newCommandTimeout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;超时时间（s）&lt;/span&gt;
driver = webdriver.Remote(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://localhost:4723/wd/hub&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, Start)
driver.implicitly_wait(&lt;/span&gt;10)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;隐式等待十秒&lt;/span&gt;
time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;点击立即体验进入首页&lt;/span&gt;
&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    driver.find_element_by_id(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho:id/iknow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).click()
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;
time.sleep(&lt;/span&gt;3)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;可能由于网速或者其他原因页面加载较慢，所以加个等待时间---等待三秒之后在执行下面的定位元素语句&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;注：完全没有python基础的给补充一点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;try&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;       &lt;span&gt;如果下面这句报错，   如果不报错则&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt;里面的则不执行&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;except&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;就执行excep下面的语句，注意缩进&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;放在这里的意思是，因为【立即开启*****】&lt;/span&gt;&lt;span&gt;这个按钮只有第一次进入才有，后续进入就没有了，所以如果能点击这个就点击，不能点击就执行&lt;/span&gt;except&lt;span&gt;，直接&lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;之前有提到很多中定位方式，这里建议试一下！&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;….&lt;/p&gt;

&lt;p&gt;&lt;span&gt;大家会发现首次打开&lt;/span&gt;APP&lt;span&gt;的时候，大家会发现安装之后&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;有一个 权限读写的弹出层，这个东西怎么定位呢！  这个东西下章给更新细说！这章主要介绍&lt;/span&gt; &lt;span&gt;element&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;elments&lt;/span&gt;&lt;span&gt;，这个允许按钮大家在这里手动点击一下直接进入下一个步骤！&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;点击立即开启&lt;/span&gt; &lt;span&gt;进入首页：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180816231622304-1381726819.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;发现&lt;/span&gt; &lt;span&gt;如图标示的五个元素的&lt;/span&gt;id&lt;span&gt;是一样的&lt;/span&gt;…&lt;span&gt;比如我要定位第二个（排行上面的图片）这个时候怎么定位&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   &lt;span&gt;如果用&lt;/span&gt;driver.find_element_by_id()&lt;span&gt;定位会怎么样呢&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;上面的脚本加上这个执行&lt;/span&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
a=driver.find_element_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho:id/icon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a)
a.click()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;&lt;span&gt;会发现打印的是第一个（&lt;/span&gt;&amp;lt;site_packages.appium.webdriver.webelement.WebElement (session=&quot;ba0c2ba5-9ca7-42bd-9bb2-45eecd5e1f8a&quot;, element=&quot;88939232-8c60-4ece-aae0-744895b9422d&quot;)&amp;gt;&lt;span&gt;），切点击的也是第一个元素&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;那么用&lt;/span&gt;driver.find_elements_by_id()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
a=driver.find_elements_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho:id/icon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a)
a.click()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;执行结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180816232232860-835707055.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;很明显报错了&lt;/span&gt;---&lt;span&gt;这里涉及到&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;基础语法&lt;/span&gt;—--list&lt;span&gt;取值！因为 elements取出来的是一个 list集合，list很显然是无法直接点击的！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span&gt;语法：&lt;/span&gt;a=[1,2,3,4,5]&lt;/p&gt;
&lt;p&gt;               a[0]&lt;span&gt;取出来的结果是&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;a[1]&lt;span&gt;取出来的结果是&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;以此类推&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以修改脚本如下&lt;/span&gt;a[1]&lt;span&gt;是取第二个&lt;/span&gt;…&lt;span&gt;也就是说点击排行&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
a=driver.find_elements_by_id(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho:id/icon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a)
a[&lt;/span&gt;1].click()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;执行结果：达到预期&lt;/span&gt;&lt;/p&gt;








&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_opened_915a7b5c-8097-4826-b0ae-1dd8f0dda42e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_915a7b5c-8097-4826-b0ae-1dd8f0dda42e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
Start[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appPackage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.hiapk.marketpho&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;      #包名
Start[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;appActivity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;com.baidu.appsearch.LauncherActivit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Thu, 16 Aug 2018 15:26:00 +0000</pubDate>
<dc:creator>佬贰</dc:creator>
<og:description>为什么这个要单独拿出来说，因为我在很多群里面看见很多人不能区分这个！ 本章换个app，换一个一亿人都在用的app，安卓市场！！！！！！！ 提醒：建议初学者跟着敲，边敲边理解！ 实际上截止本章为止，和有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pythontest/p/9490802.html</dc:identifier>
</item>
<item>
<title>应用负载均衡之LVS(五)：加权调度算法的规律 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/9490629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/9490629.html</guid>
<description>&lt;p&gt;&lt;strong&gt;返回&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html#lvs&quot;&gt;LVS系列文章：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;加权调度算法是一种很常见的调度算法。如果只有两个后端，调度的顺序很容易，但是如果后端多于2个，可能就不像想象中那样的顺序进行调度。&lt;/p&gt;
&lt;p&gt;所以，本文揭秘加权调度算法到底是怎么进行调度的。&lt;/p&gt;

&lt;p&gt;首先，给一个LVS官方手册给的加权调度算法公式：&lt;/p&gt;
&lt;p&gt;假设有一组服务器S = {S0, S1, …, Sn-1}，W(Si)表示服务器Si的权值，一个&lt;br/&gt;指示变量i表示上一次选择的服务器，指示变量cw表示当前调度的权值，max(S)&lt;br/&gt;表示集合S中所有服务器的最大权值，gcd(S)表示集合S中所有服务器权值的最大&lt;br/&gt;公约数。变量i初始化为-1，cw初始化为零。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;while (true) {
  i = (i + 1) mod n;
    if (i == 0) {
        cw = cw - gcd(S); 
        if (cw &amp;lt;= 0) {
            cw = max(S);
        if (cw == 0)
            return NULL;
        }
    } 
  if (W(Si) &amp;gt;= cw) 
    return Si;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;比如，A、B、C三个后端的权重比是&lt;code&gt;2:3:4&lt;/code&gt;，那么一个调度循环内的调度顺序是CBCABCABC。&lt;/p&gt;
&lt;p&gt;如果你不想从算法公式里找规律，那么看下面。&lt;/p&gt;

&lt;p&gt;记住三个权重调度规则：&lt;br/&gt;&lt;strong&gt;1.先约分&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;2.从最大权重开始调度&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;3.同权重的后端，从前向后调度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，三台后端&lt;code&gt;A:B:C=2:3:4&lt;/code&gt;。这里没法约分。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;调度C&lt;br/&gt;调度之后，比率变成&lt;code&gt;A:B:C=2:3:3&lt;/code&gt;，B和C权重相同，从B开始调度&lt;/li&gt;
&lt;li&gt;调度B&lt;br/&gt;调度之后，比率变成&lt;code&gt;A:B:C=2:2:3&lt;/code&gt;，所以下次调度C&lt;/li&gt;
&lt;li&gt;调度C&lt;br/&gt;调度之后，比率变成&lt;code&gt;A:B:C=2:2:2&lt;/code&gt;，下次从A开始&lt;br/&gt;当权重全部调整到相同值时，就按照先后顺序不断循环，直到调度完所有权重&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度A，调度之后，比率变成&lt;code&gt;A:B:C=1:2:2&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度B，调度之后，比率变成&lt;code&gt;A:B:C=1:1:2&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度C，调度之后，比率变成&lt;code&gt;A:B:C=1:1:1&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度A，调度之后，比率变成&lt;code&gt;A:B:C=0:1:1&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度B，调度之后，比率变成&lt;code&gt;A:B:C=0:0:1&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度C，调度之后，比率变成&lt;code&gt;A:B:C=0:0:0&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;进入下一个调度循环，顺序是：CBCABCABC&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以，每个调度循环的调度顺序为：CBCABCABC&lt;/p&gt;
&lt;p&gt;调度过程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201808/733013-20180816224459175-2043338525.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再给个示例，&lt;code&gt;A:B:C:D=2:4:6:8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先约分，得到&lt;code&gt;A:B:C:D=1:2:3:4&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;调度D&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度C&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度D&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度B&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度C&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度D&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度A&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度B&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度C&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;调度D&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以，调度顺序是DCDBCDABCD。&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 14:49:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<og:description>返回</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/9490629.html</dc:identifier>
</item>
<item>
<title>SpringBoot(十三)_springboot上传Excel并读取excel中的数据 - 阳光温暖</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9490511.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9490511.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;今天工作中，发现同事在整理数据，通过excel上传到数据库。所以现在写了篇利用springboot读取excel中的数据的demo。至于数据的进一步处理，大家肯定有不同的应用场景，自行修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;pom文件&quot;&gt;pom文件&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.poi&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;poi&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.13&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.poi&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;poi-ooxml&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.13&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;controller-代码&quot;&gt;controller 代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;
@Controller
public class ImportController {

    @Autowired
    private ImportService importService;


    @PostMapping(value = &quot;/upload&quot;)
    @ResponseBody
    public String uploadExcel(HttpServletRequest request) throws Exception {
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;

        MultipartFile file = multipartRequest.getFile(&quot;filename&quot;);
        if (file.isEmpty()) {
            return &quot;文件不能为空&quot;;
        }
        InputStream inputStream = file.getInputStream();
        List&amp;lt;List&amp;lt;Object&amp;gt;&amp;gt; list = importService.getBankListByExcel(inputStream, file.getOriginalFilename());
        inputStream.close();

        for (int i = 0; i &amp;lt; list.size(); i++) {
            List&amp;lt;Object&amp;gt; lo = list.get(i);
            //TODO 随意发挥
            System.out.println(lo);

        }
        return &quot;上传成功&quot;;
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;service-代码&quot;&gt;service 代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@Service
public class ImportService {


    /**
     * 处理上传的文件
     *
     * @param in
     * @param fileName
     * @return
     * @throws Exception
     */
    public List getBankListByExcel(InputStream in, String fileName) throws Exception {
        List list = new ArrayList&amp;lt;&amp;gt;();
        //创建Excel工作薄
        Workbook work = this.getWorkbook(in, fileName);
        if (null == work) {
            throw new Exception(&quot;创建Excel工作薄为空！&quot;);
        }
        Sheet sheet = null;
        Row row = null;
        Cell cell = null;

        for (int i = 0; i &amp;lt; work.getNumberOfSheets(); i++) {
            sheet = work.getSheetAt(i);
            if (sheet == null) {
                continue;
            }

            for (int j = sheet.getFirstRowNum(); j &amp;lt;= sheet.getLastRowNum(); j++) {
                row = sheet.getRow(j);
                if (row == null || row.getFirstCellNum() == j) {
                    continue;
                }

                List&amp;lt;Object&amp;gt; li = new ArrayList&amp;lt;&amp;gt;();
                for (int y = row.getFirstCellNum(); y &amp;lt; row.getLastCellNum(); y++) {
                    cell = row.getCell(y);
                    li.add(cell);
                }
                list.add(li);
            }
        }
        work.close();
        return list;
    }

    /**
     * 判断文件格式
     *
     * @param inStr
     * @param fileName
     * @return
     * @throws Exception
     */
    public Workbook getWorkbook(InputStream inStr, String fileName) throws Exception {
        Workbook workbook = null;
        String fileType = fileName.substring(fileName.lastIndexOf(&quot;.&quot;));
        if (&quot;.xls&quot;.equals(fileType)) {
            workbook = new HSSFWorkbook(inStr);
        } else if (&quot;.xlsx&quot;.equals(fileType)) {
            workbook = new XSSFWorkbook(inStr);
        } else {
            throw new Exception(&quot;请上传excel文件！&quot;);
        }
        return workbook;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;代码下载&quot;&gt;代码下载&lt;/h3&gt;
&lt;p&gt;完整代码下载：&lt;a href=&quot;https://github.com/runzhenghengbin/SpringBoot/tree/master/springboot(%E5%8D%81%E4%B8%80)&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 14:20:00 +0000</pubDate>
<dc:creator>阳光温暖</dc:creator>
<og:description>今天工作中，发现同事在整理数据，通过excel上传到数据库。所以现在写了篇利用springboot读取excel中的数据的demo。至于数据的进一步处理，大家肯定有不同的应用场景，自行修改</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9490511.html</dc:identifier>
</item>
<item>
<title>Dubbo项目入门 - 云枭zd</title>
<link>http://www.cnblogs.com/fixzd/p/9490247.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fixzd/p/9490247.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201808/1333208-20180816213437336-1328815034.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。&lt;br/&gt;它的特性如下&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;面向接口代理的高性能RPC调用&lt;/li&gt;
&lt;li&gt;智能负载均衡&lt;/li&gt;
&lt;li&gt;服务自动注册与发现&lt;/li&gt;
&lt;li&gt;高度可扩展能力&lt;/li&gt;
&lt;li&gt;运行期流量调度&lt;/li&gt;
&lt;li&gt;可视化的服务治理与运维&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Talk is cheap， Show me the code。现在来着手搭建一个Dubbo项目吧。&lt;/p&gt;

&lt;p&gt;创建三个项目&lt;/p&gt;
&lt;h2 id=&quot;共用的接口&quot;&gt;共用的接口&lt;/h2&gt;
&lt;p&gt;先在service-api定义一个公用接口&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public interface DemoService {
    String sayHello(String name);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;服务提供者&quot;&gt;服务提供者&lt;/h2&gt;
&lt;p&gt;服务提供者service-provider提供一个DemoService的实现类&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class DemoServiceImpl implements DemoService {

    @Override
    public String sayHello(String name) {
        System.out.println(&quot;[&quot; + LocalDate.now() + &quot;] Hello &quot; + name );
        return &quot;Hello &quot; + name;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;编写xml配置文件&quot;&gt;编写xml配置文件&lt;/h3&gt;
&lt;h4 id=&quot;配置应用名称&quot;&gt;配置应用名称&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dubbo:application name=&quot;demo-provider&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;配置注册中心&quot;&gt;配置注册中心&lt;/h4&gt;
&lt;p&gt;可以使用Multicast、Redis、Zookeeper、Simple这四个作为注册中心。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;配置协议&quot;&gt;配置协议&lt;/h4&gt;
&lt;p&gt;默认为dubbo&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;定义bean&quot;&gt;定义bean&lt;/h4&gt;
&lt;p&gt;然后定义bean，以及将bean作为服务暴露出去&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;bean id=&quot;demoService&quot; class=&quot;com.learnDubbo.demo.provider.DemoServiceImpl&quot;/&amp;gt;

&amp;lt;dubbo:service interface=&quot;com.learnDubbo.demo.DemoService&quot; ref=&quot;demoService&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;main函数&quot;&gt;main函数&lt;/h4&gt;
&lt;p&gt;编写一个main函数用于启动服务提供者&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static void main(String[] args) throws Exception {

    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;dubbo-provider.xml&quot;);
    context.start();

    System.in.read();//用于阻塞函数，使其一直运行
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;服务消费者&quot;&gt;服务消费者&lt;/h2&gt;
&lt;p&gt;服务消费者需要调用service-provider 服务提供者提供的DemoService实现类&lt;br/&gt;同样需要编写xml文件，配置文件和服务提供者的类似，不同的是需要将暴露服务的配置修改为引用服务的配置，如下&lt;/p&gt;
&lt;h4 id=&quot;引用服务&quot;&gt;引用服务&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dubbo:reference id=&quot;demoService&quot; interface=&quot;com.learnDubbo.demo.DemoService&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;main函数-1&quot;&gt;main函数&lt;/h4&gt;
&lt;p&gt;编写一个main函数用于启动服务消费者,然后一直循环调用服务提供者提供的服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public static void main(String[] args) {
    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;dubbo-consumer.xml&quot;);
    context.start();
    DemoService demoService = (DemoService) context.getBean(&quot;demoService&quot;); // 调用服务提供者提供的服务
    while (true) {
        try {
            Thread.sleep(1000);
            String hello = demoService.sayHello(&quot;Dubbo&quot;); // call remote method
            System.out.println(hello); // get result
        } catch (Throwable throwable) {
            throwable.printStackTrace();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;先启动service-provider项目，然后在启动service-consumer，输出结果如下&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201808/1333208-20180816213455221-2099020730.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;服务提供者和服务消费者共用的接口还是使用service-api，新建下面两个项目&lt;/p&gt;
&lt;h2 id=&quot;基于注解的服务提供者&quot;&gt;基于注解的服务提供者&lt;/h2&gt;
&lt;p&gt;新建一个springboot项目&lt;br/&gt;同样需要提供一个DemoService的实现类，且在类上增加&lt;code&gt;@Service&lt;/code&gt;注解&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注：是com.alibaba.dubbo.config.annotation.Service&lt;br/&gt;不是org.springframework.stereotype.Service&lt;br/&gt;别导错了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来需要增加dubbo的配置类&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Configuration
public class DubboConfiguration {

    /**
     * 对应xml配置:&amp;lt;dubbo:application name=&quot;demo-provider&quot;/&amp;gt;
     * @return
     */
    @Bean
    public ApplicationConfig applicationConfig() {
        ApplicationConfig applicationConfig = new ApplicationConfig();
        applicationConfig.setName(&quot;demo-provider--annotation&quot;);
        return applicationConfig;
    }

    /**
     * 对应xml配置:&amp;lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot;/&amp;gt;
     * @return
     */
    @Bean
    public RegistryConfig registryConfig() {
        RegistryConfig registryConfig = new RegistryConfig();
        registryConfig.setAddress(&quot;multicast://224.5.6.7:1234&quot;);
        return registryConfig;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后一步在启动类上增加注解&lt;code&gt;@DubboComponentScan(basePackages = &quot;com.learnDubbo.demo.provider.service&quot;)&lt;/code&gt;basePackages自行修改为提供服务类所在的包路径&lt;/p&gt;
&lt;h2 id=&quot;基于注解的服务消费者&quot;&gt;基于注解的服务消费者&lt;/h2&gt;
&lt;p&gt;也是需要有一个配置类，和服务提供者类似，这里就不贴代码了&lt;br/&gt;接下来创建一个Controller，用于测试结果，代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@RestController
public class DemoController {

    @Reference
    private DemoService demoService;

    @GetMapping(&quot;sayHello&quot;)
    public String sayHello(){
        return demoService.sayHello(&quot;Dubbo&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@Reference&lt;/code&gt;注解表示引用服务类似于xml配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dubbo:reference id=&quot;demoService&quot; interface=&quot;com.learnDubbo.demo.DemoService&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在项目启动类上同样需要注解&lt;code&gt;@DubboComponentScan&lt;/code&gt;指定dubbo扫描路径&lt;/p&gt;
&lt;h2 id=&quot;测试-1&quot;&gt;测试&lt;/h2&gt;
&lt;p&gt;同xml配置的一样，需要先启动服务提供者&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201808/1333208-20180816213656794-444454281.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;配置信息主要包括3大块，注册中心、协议和schema配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201808/1333208-20180816213519879-1479285852.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;注册中心&quot;&gt;注册中心&lt;/h2&gt;
&lt;p&gt;注册中心总共有4个，如下&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4.2861386138614&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.8846153846154&quot;&gt;&lt;td&gt;Multicast&lt;/td&gt;
&lt;td&gt;不需要启动任何中心节点，只要广播地址一样，就可以互相发现。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/registry/multicast.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2.9130434782609&quot;&gt;&lt;td&gt;zookeeper&lt;/td&gt;
&lt;td&gt;Apacahe Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/registry/zookeeper.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.8604651162791&quot;&gt;&lt;td&gt;Redis&lt;/td&gt;
&lt;td&gt;一个高效的 KV 存储服务器 ， 从 &lt;code&gt;2.1.0&lt;/code&gt; 版本开始支持 。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/registry/redis.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.8857142857143&quot;&gt;&lt;td&gt;Simple&lt;/td&gt;
&lt;td&gt;一个普通的 Dubbo 服务，可以减少第三方依赖，使整体通讯方式一致。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/registry/simple.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;使用redis注册中心&quot;&gt;使用Redis注册中心&lt;/h3&gt;
&lt;p&gt;当使用Redis注册中心，需先把服务提供方和消费放的注册中心xml配置修改为下方&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dubbo:registry address=&quot;redis://localhost:6379&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对应的redis会产生如下数据&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201808/1333208-20180816213713573-1806571640.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到有两个key，分别对应服务提供者和消费者。两个key对应的数据类型为Hash，可以看到服务消费者key的数据如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1) &quot;consumer://192.168.79.170/com.learnDubbo.demo.DemoService?application=demo-consumer&amp;amp;category=consumers&amp;amp;check=false&amp;amp;dubbo=2.6.2&amp;amp;interface=com.learnDubbo.demo.DemoService&amp;amp;methods=sayHello&amp;amp;pid=14208&amp;amp;side=consumer&amp;amp;timestamp=1534389723130&quot;
2) &quot;1534389813690&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一个为URL址，第二个为过期时间。&lt;br/&gt;官网给的图如下&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201808/1333208-20180816213532141-948760108.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用zookeeper注册中心&quot;&gt;使用Zookeeper注册中心&lt;/h3&gt;
&lt;p&gt;当使用Zookeeper注册中心，需先把服务提供方和消费放的注册中心xml配置修改为下方&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dubbo:registry address=&quot;zookeeper://localhost:2181&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对应的Zookeeper会产生如下数据&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201808/1333208-20180816213728381-1079627421.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下图是官网给出的数据图&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201808/1333208-20180816213543339-2098824987.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有些出入，但大致还是相同的，多了configurators和routers。&lt;br/&gt;当服务提供者启动时: 会创建对应的目录结构，例如我上面代码中的共用接口名为&lt;code&gt;com.learnDubbo.demo.DemoService&lt;/code&gt;，就会创建 &lt;code&gt;/dubbo/com.learnDubbo.demo.DemoService&lt;/code&gt;目录，然后在创建&lt;code&gt;providers&lt;/code&gt;目录，再在&lt;code&gt;providers&lt;/code&gt;目录下写入自己的 URL 地址。&lt;br/&gt;当服务消费者启动时：会在&lt;code&gt;/dubbo/com.learnDubbo.demo.DemoService&lt;/code&gt;目录创建 &lt;code&gt;consumers&lt;/code&gt;目录，并在&lt;code&gt;consumers&lt;/code&gt;目录写入自己的 URL 地址。&lt;br/&gt;当监控中心启动时: 订阅 &lt;code&gt;/dubbo/com.learnDubbo.demo.DemoService&lt;/code&gt; 目录下的所有提供者和消费者 URL 地址。&lt;/p&gt;
&lt;h2 id=&quot;协议&quot;&gt;协议&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;11.436031331593&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2.9090909090909&quot;&gt;&lt;td&gt;dubbo&lt;/td&gt;
&lt;td&gt;Dubbo 缺省协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/dubbo.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2.85&quot;&gt;&lt;td&gt;rmi&lt;/td&gt;
&lt;td&gt;RMI 协议采用 JDK 标准的 &lt;code&gt;java.rmi.*&lt;/code&gt; 实现，采用阻塞式短连接和 JDK 标准序列化方式。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/rmi.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2.8977272727273&quot;&gt;&lt;td&gt;hessian&lt;/td&gt;
&lt;td&gt;Hessian 协议用于集成 Hessian 的服务，Hessian 底层采用 Http 通讯，采用 Servlet 暴露服务，Dubbo 缺省内嵌 Jetty 作为服务器实现。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/hessian.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.8709677419355&quot;&gt;&lt;td&gt;http&lt;/td&gt;
&lt;td&gt;基于 HTTP 表单的远程调用协议，采用 Spring 的 HttpInvoker 实现。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/http.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2.859375&quot;&gt;&lt;td&gt;webservice&lt;/td&gt;
&lt;td&gt;基于 WebService 的远程调用协议，基于 Apache CXF 的 frontend-simple 和 transports-http 实现 。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/webservice.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2.90625&quot;&gt;&lt;td&gt;thrift&lt;/td&gt;
&lt;td&gt;当前 dubbo 支持的 thrift 协议是对 thrift 原生协议的扩展，在原生协议的基础上添加了一些额外的头信息，比如 service name，magic number 等。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/thrift.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.7857142857143&quot;&gt;&lt;td&gt;memcached&lt;/td&gt;
&lt;td&gt;基于 memcached实现的 RPC 协议。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/memcached.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.7551020408163&quot;&gt;&lt;td&gt;redis&lt;/td&gt;
&lt;td&gt;基于 Redis 实现的 RPC 协议。&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/redis.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2.8604651162791&quot;&gt;&lt;td&gt;rest&lt;/td&gt;
&lt;td&gt;基于标准的Java REST API——JAX-RS 2.0（Java API for RESTful Web Services的简写）实现的REST调用支持&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/references/protocol/rest.html&quot;&gt;链接&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;schema配置的涉及的东西有点多这里就不列出来了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;参考资料：&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/user/quick-start.html&quot;&gt;Dubbo官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网的介绍都很详细了，从官网中一般都能获取到你想到的信息。&lt;/p&gt;
&lt;p&gt;有需要查看这篇博文的源码的可以点这里：&lt;a href=&quot;https://github.com/rainbowda/learnWay/tree/master/learnDubbo&quot;&gt;Github地址&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 13:51:00 +0000</pubDate>
<dc:creator>云枭zd</dc:creator>
<og:description>Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。 它的特性如下 面向接口代理的高性能RPC调用 智能</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fixzd/p/9490247.html</dc:identifier>
</item>
<item>
<title>.NET Core开发日志——简述路由 - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9484499.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9484499.html</guid>
<description>&lt;p&gt;有过ASP.NET或其它现代Web框架开发经历的开发者对路由这一名字应该不陌生。如果要用一句话解释什么是路由，可以这样形容：通过对URL的解析，指定相应的处理程序。&lt;/p&gt;
&lt;p&gt;回忆下在Web Forms应用程序中使用路由的方式：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static void RegisterRoutes(RouteCollection routes)
{
    routes.MapPageRoute(&quot;&quot;,
        &quot;Category/{action}/{categoryName}&quot;,
        &quot;~/categoriespage.aspx&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后是MVC应用程序：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static void RegisterRoutes(RouteCollection routes)
{
    routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);

    routes.MapRoute(
        &quot;Default&quot;,                                              
        &quot;{controller}/{action}/{id}&quot;,                          
        new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = &quot;&quot; }  
    );
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再到了ASP.NET Core：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public void Configure(IApplicationBuilder app)
{
    app.UseMvc(routes =&amp;gt;
    {
        routes.MapRoute(
            name: &quot;default&quot;,
            template: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还可以用更简单的写法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public void Configure(IApplicationBuilder app)
{
    app.UseMvcWithDefaultRoute();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从源码上看这两个方法的实现是一样的。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static IApplicationBuilder UseMvcWithDefaultRoute(this IApplicationBuilder app)
{
    if (app == null)
    {
        throw new ArgumentNullException(nameof(app));
    }

    return app.UseMvc(routes =&amp;gt;
    {
        routes.MapRoute(
            name: &quot;default&quot;,
            template: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关键是内部UseMvc方法的内容：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static IApplicationBuilder UseMvc(
    this IApplicationBuilder app,
    Action&amp;lt;IRouteBuilder&amp;gt; configureRoutes)
{
    ...

    var routes = new RouteBuilder(app)
    {
        DefaultHandler = app.ApplicationServices.GetRequiredService&amp;lt;MvcRouteHandler&amp;gt;(),
    };

    configureRoutes(routes);

    routes.Routes.Insert(0, AttributeRouting.CreateAttributeMegaRoute(app.ApplicationServices));

    return app.UseRouter(routes.Build());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中的处理过程，首先实例化了一个RouteBuilder对象，并对它的DefaultHandler属性赋值为MvcRouteHandler。接着以其为参数，执行routes.MapRoute方法。&lt;/p&gt;
&lt;p&gt;MapRoute的处理过程就是为RouteBuilder里的Routes集合新增一个Route对象。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static IRouteBuilder MapRoute(
    this IRouteBuilder routeBuilder,
    string name,
    string template,
    object defaults,
    object constraints,
    object dataTokens)
{
    ...

    var inlineConstraintResolver = routeBuilder
        .ServiceProvider
        .GetRequiredService&amp;lt;IInlineConstraintResolver&amp;gt;();

    routeBuilder.Routes.Add(new Route(
        routeBuilder.DefaultHandler,
        name,
        template,
        new RouteValueDictionary(defaults),
        new RouteValueDictionary(constraints),
        new RouteValueDictionary(dataTokens),
        inlineConstraintResolver));

    return routeBuilder;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有此一个Route对象仍不夠，程序里又插入了一个AttributeRoute。&lt;/p&gt;
&lt;p&gt;随后执行routes.Build()，返回RouteCollection集合。该集合实现了IRouter接口。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public IRouter Build()
{
    var routeCollection = new RouteCollection();

    foreach (var route in Routes)
    {
        routeCollection.Add(route);
    }

    return routeCollection;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最终使用已完成配置的路由。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static IApplicationBuilder UseRouter(this IApplicationBuilder builder, IRouter router)
{
    ...

    return builder.UseMiddleware&amp;lt;RouterMiddleware&amp;gt;(router);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;于是又看到了熟悉的Middleware。它的核心方法里先调用了RouteCollection的RouteAsync处理。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public async Task Invoke(HttpContext httpContext)
{
    var context = new RouteContext(httpContext);
    context.RouteData.Routers.Add(_router);

    await _router.RouteAsync(context);

    if (context.Handler == null)
    {
        _logger.RequestDidNotMatchRoutes();
        await _next.Invoke(httpContext);
    }
    else
    {
        httpContext.Features[typeof(IRoutingFeature)] = new RoutingFeature()
        {
            RouteData = context.RouteData,
        };

        await context.Handler(context.HttpContext);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其内部又依次执行各个Route的RouteAsync方法。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public async virtual Task RouteAsync(RouteContext context)
{
    ...

    for (var i = 0; i &amp;lt; Count; i++)
    {
        var route = this[i];
        context.RouteData.Routers.Add(route);

        try
        {
            await route.RouteAsync(context);

            if (context.Handler != null)
            {
                break;
            }
        }
        ...
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;之前的逻辑中分别在RouteCollection里加入了AttributeRoute与Route。&lt;br/&gt;*循环中会判断Handler是否被赋值，这是为了避免在路由已被匹配的情况下，继续进行其它的匹配。从执行顺序来看，很容易明白AttributeRoute比一般Route优先级高的道理。&lt;/p&gt;
&lt;p&gt;先执行AttributeRoute里的RouteAsync方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public Task RouteAsync(RouteContext context)
{
    var router = GetTreeRouter();
    return router.RouteAsync(context);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;里面调用了TreeRouter的RouteAsync方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public async Task RouteAsync(RouteContext context)
{
    foreach (var tree in _trees)
    {
        var tokenizer = new PathTokenizer(context.HttpContext.Request.Path);
        var root = tree.Root;

        var treeEnumerator = new TreeEnumerator(root, tokenizer);

        ...

        while (treeEnumerator.MoveNext())
        {
            var node = treeEnumerator.Current;
            foreach (var item in node.Matches)
            {
                var entry = item.Entry;
                var matcher = item.TemplateMatcher;

                try
                {
                    if (!matcher.TryMatch(context.HttpContext.Request.Path, context.RouteData.Values))
                    {
                        continue;
                    }

                    if (!RouteConstraintMatcher.Match(
                        entry.Constraints,
                        context.RouteData.Values,
                        context.HttpContext,
                        this,
                        RouteDirection.IncomingRequest,
                        _constraintLogger))
                    {
                        continue;
                    }

                    _logger.MatchedRoute(entry.RouteName, entry.RouteTemplate.TemplateText);
                    context.RouteData.Routers.Add(entry.Handler);

                    await entry.Handler.RouteAsync(context);
                    if (context.Handler != null)
                    {
                        return;
                    }
                }
                ...
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果所有AttributeRoute路由都不能匹配，则不会进一步作处理。否则的话，将继续执行Handler中的RouteAsync方法。这里的Handler是MvcAttributeRouteHandler。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public Task RouteAsync(RouteContext context)
{
    ...

    var actionDescriptor = _actionSelector.SelectBestCandidate(context, Actions);
    if (actionDescriptor == null)
    {
        _logger.NoActionsMatched(context.RouteData.Values);
        return Task.CompletedTask;
    }

    foreach (var kvp in actionDescriptor.RouteValues)
    {
        if (!string.IsNullOrEmpty(kvp.Value))
        {
            context.RouteData.Values[kvp.Key] = kvp.Value;
        }
    }

    context.Handler = (c) =&amp;gt;
    {
        var routeData = c.GetRouteData();

        var actionContext = new ActionContext(context.HttpContext, routeData, actionDescriptor);
        if (_actionContextAccessor != null)
        {
            _actionContextAccessor.ActionContext = actionContext;
        }

        var invoker = _actionInvokerFactory.CreateInvoker(actionContext);
        if (invoker == null)
        {
            throw new InvalidOperationException(
                Resources.FormatActionInvokerFactory_CouldNotCreateInvoker(
                    actionDescriptor.DisplayName));
        }

        return invoker.InvokeAsync();
    };

    return Task.CompletedTask;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该方法内部的处理仅是为RouteContext的Handler属性赋值。实际的操作则是要到RouterMiddleware中Invoke方法的&lt;code&gt;context.Handler(context.HttpContext)&lt;/code&gt;这一步才被执行的。&lt;/p&gt;
&lt;p&gt;至于Route里的RouteAsync方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public virtual Task RouteAsync(RouteContext context)
{
    ...

    EnsureMatcher();
    EnsureLoggers(context.HttpContext);

    var requestPath = context.HttpContext.Request.Path;

    if (!_matcher.TryMatch(requestPath, context.RouteData.Values))
    {
        // If we got back a null value set, that means the URI did not match
        return Task.CompletedTask;
    }

    // Perf: Avoid accessing dictionaries if you don't need to write to them, these dictionaries are all
    // created lazily.
    if (DataTokens.Count &amp;gt; 0)
    {
        MergeValues(context.RouteData.DataTokens, DataTokens);
    }

    if (!RouteConstraintMatcher.Match(
        Constraints,
        context.RouteData.Values,
        context.HttpContext,
        this,
        RouteDirection.IncomingRequest,
        _constraintLogger))
    {
        return Task.CompletedTask;
    }
    _logger.MatchedRoute(Name, ParsedTemplate.TemplateText);

    return OnRouteMatched(context);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只有路由被匹配的时候才在OnRouteMatched里调用target的RouteAsync方法。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;protected override Task OnRouteMatched(RouteContext context)
{
    context.RouteData.Routers.Add(_target);
    return _target.RouteAsync(context);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处的target即是最初创建RouteBuilder时传入的MvcRouteHandler。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public Task RouteAsync(RouteContext context)
{
    ...

    var candidates = _actionSelector.SelectCandidates(context);
    if (candidates == null || candidates.Count == 0)
    {
        _logger.NoActionsMatched(context.RouteData.Values);
        return Task.CompletedTask;
    }

    var actionDescriptor = _actionSelector.SelectBestCandidate(context, candidates);
    if (actionDescriptor == null)
    {
        _logger.NoActionsMatched(context.RouteData.Values);
        return Task.CompletedTask;
    }

    context.Handler = (c) =&amp;gt;
    {
        var routeData = c.GetRouteData();

        var actionContext = new ActionContext(context.HttpContext, routeData, actionDescriptor);
        if (_actionContextAccessor != null)
        {
            _actionContextAccessor.ActionContext = actionContext;
        }

        var invoker = _actionInvokerFactory.CreateInvoker(actionContext);
        if (invoker == null)
        {
            throw new InvalidOperationException(
                Resources.FormatActionInvokerFactory_CouldNotCreateInvoker(
                    actionDescriptor.DisplayName));
        }

        return invoker.InvokeAsync();
    };

    return Task.CompletedTask;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;处理过程与MvcAttributeRouteHandler相似，一样是要在RouterMiddleware的Invoke里才执行Handler的方法。&lt;/p&gt;
&lt;p&gt;以一张思维导图可以简单概括上述的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201808/991496-20180816213416341-212072946.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;或者用三句话也可以描述整个流程。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;添加路由&lt;/li&gt;
&lt;li&gt;匹配地址&lt;/li&gt;
&lt;li&gt;处理请求&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 16 Aug 2018 13:42:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<og:description>有过ASP.NET或其它现代Web框架开发经历的开发者对路由这一名字应该不陌生。如果要用一句话解释什么是路由，可以这样形容：通过对URL的解析，指定相应的处理程序。 回忆下在Web Forms应用程序</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9484499.html</dc:identifier>
</item>
<item>
<title>Python3 与 C# 并发编程之～ 进程篇 - 鲲逸鹏</title>
<link>http://www.cnblogs.com/dotnetcrazy/p/9426279.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dotnetcrazy/p/9426279.html</guid>
<description>&lt;h3 id=&quot;1.5.进程间通信～PIPE管道通信&quot;&gt;1.5.进程间通信～PIPE管道通信&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#1.5.进程间通信～PIPE管道通信&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个比较有意思，看个案例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程]老爸，老妈回来记得喊我一下～&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[父进程]滚犊子，赶紧写作业，不然我得跪方便面！&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;老爸，老妈回来记得喊我一下～
滚犊子，赶紧写作业，不然我得跪方便面！&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;multiprocessing.Pipe源码分析&quot;&gt;multiprocessing.Pipe源码分析&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#multiprocessing.Pipe源码分析&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;按照道理应该子进程自己写完自己读了，和上次讲得不一样啊？不急，先看看源码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/lotapp/cpython3/blob/master/Lib/multiprocessing/context.py&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;'''返回由管道连接的两个连接对象'''&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.connection&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看看&lt;code&gt;connection.Pipe&lt;/code&gt;方法的定义部分，是不是双向通信就看你是否设置&lt;code&gt;duplex=True&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/lotapp/cpython3/blob/master/Lib/multiprocessing/connection.py&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'win32'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;'''返回管道两端的一对连接对象'''&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# 双工内部其实是socket系列（下次讲）&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socketpair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setblocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setblocking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# 这部分就是我们上次讲的pipe管道&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fd1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# win平台的一系列处理&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PipeConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PipeConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过源码知道了，原来双工是通过socket搞的啊～&lt;/p&gt;
&lt;p&gt;再看个和原来一样效果的案例：（不用关来关去的了，方便！）&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 只能写&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程]老爸，咱们完了，老妈一直在门口～&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 你把这个放在join前面就直接死锁了&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 只能读&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：（可以思考下为什么&lt;code&gt;start换个位置就死锁&lt;/code&gt;，提示：&lt;code&gt;阻塞读写&lt;/code&gt;）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[子进程]老爸，咱们完了，老妈一直在门口～&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再举个&lt;code&gt;Pool&lt;/code&gt;的例子，咱们就进入今天的重点了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[小明]小张，今天哥们要见一女孩，你陪我呗，我24h等你回复哦～&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proc_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[小张]不去，万一被我帅气的外表迷倒就坑了～&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 关闭池，不再接收新任务&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 等待回收，必须先关才能join，不然会异常&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;小明&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;小张，今天哥们要见一女孩，你陪我呗，我&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h等你回复哦&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;～&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;小张&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;不去，万一被我帅气的外表迷倒就坑了～&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;pool.join源码分析&quot;&gt;pool.join源码分析&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#pool.join源码分析&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;看看源码就理解了：&lt;strong&gt;看看Pool的join是啥情况？看源码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/python/cpython/blob/3.7/Lib/multiprocessing/pool.py&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/lotapp/cpython3/blob/master/Lib/multiprocessing/pool.py&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'joining pool'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 没关闭就join，这边就会抛出一个异常&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pool is still running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_state&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TERMINATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;In unknown state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_worker_handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_task_handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result_handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 循环join回收&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在pool的&lt;code&gt;__init__&lt;/code&gt;的方法中，这几个属性：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_processes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 指定的进程数&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 列表&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_repopulate_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 给列表append内容的方法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将池进程的数量增加到指定的数量，join的时候会使用这个列表&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_repopulate_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 指定进程数-当前进程数，差几个补几个&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_processes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_inqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_outqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_initargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_maxtasksperchild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_wrap_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 重点来了&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Process'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PoolWorker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# pool退出后，通过pool创建的进程都会退出&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'added worker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;strong&gt;池的方法只能由创建它的进程使用&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;1.5.进程间通信～Queue管道通信（常用）&quot;&gt;1.5.进程间通信～Queue管道通信（常用）&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#1.5.进程间通信～Queue管道通信（常用）&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一步步的设局，从底层的的&lt;code&gt;pipe()&lt;/code&gt;-&amp;gt;&lt;code&gt;os.pipe&lt;/code&gt;-&amp;gt;&lt;code&gt;PIPE&lt;/code&gt;，现在终于到&lt;code&gt;Queue&lt;/code&gt;了，心酸啊，明知道上面两个项目&lt;/p&gt;
&lt;p&gt;里面基本上不会用，但为了你们能看懂源码，说了这么久&lt;code&gt;%&amp;gt;_&amp;lt;%&lt;/code&gt;其实以后当我们从&lt;code&gt;Queue&lt;/code&gt;说到&lt;code&gt;MQ&lt;/code&gt;和&lt;code&gt;RPC&lt;/code&gt;之后，现在&lt;/p&gt;
&lt;p&gt;讲得这些进程间通信(&lt;code&gt;IPC&lt;/code&gt;)也基本上不会用了，但本质你得清楚，我尽量多分析点源码，这样你们以后看开源项目压力会很小&lt;/p&gt;
&lt;p&gt;欢迎批评指正～&lt;/p&gt;
&lt;h4 id=&quot;引入案例&quot;&gt;引入案例&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#引入案例&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程]老爸，我出去嗨了&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[父进程]去吧比卡丘～&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：（&lt;code&gt;get&lt;/code&gt;和&lt;code&gt;put&lt;/code&gt;默认是阻塞等待的）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[子进程]老爸，我出去嗨了
[父进程]去吧比卡丘～&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;源码拓展&quot;&gt;源码拓展&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#源码拓展&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;先看看&lt;code&gt;Queue&lt;/code&gt;的初始化方法：（不指定大小就是最大队列数）&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# 队列类型，使用PIPE，缓存，线程&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ctx = multiprocessing.get_context(&quot;xxx&quot;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 上下文总共3种：spawn、fork、forkserver（扩展部分会提一下）&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 默认使用最大容量&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.synchronize&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEM_VALUE_MAX&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxsize&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_maxsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxsize&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 指定队列大小&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 创建了一个PIPE匿名管道（单向）&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# `multiprocessing/synchronize.py &amp;gt; Lock`&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 进程锁（读）【非递归】&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_opid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 获取PID&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'win32'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_wlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_wlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 进程锁（写）【非递归】&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Semaphore信号量通常用于保护容量有限的资源&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 控制信号量,超了就异常&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_sem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoundedSemaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 不忽略PIPE管道破裂的错误&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ignore_epipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;# 线程相关操作&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_after_fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 向`_afterfork_registry`字典中注册&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'win32'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;register_after_fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_after_fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于&lt;code&gt;get&lt;/code&gt;和&lt;code&gt;put&lt;/code&gt;是阻塞的问题，看下源码探探究竟：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;q.get()&lt;/code&gt;：收消息&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 默认情况是阻塞（lock加锁）&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 信号量+1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;deadline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monotonic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 超时抛异常&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deadline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monotonic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# 不管有没有内容都去读，超时就抛异常&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# 接收字节数据作为字节对象&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_recv_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 信号量+1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# 释放锁&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 释放锁后，重新序列化数据&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ForkingPickler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;queue.put()&lt;/code&gt;:发消息&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 如果Queue已经关闭就抛异常&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Queue {0!r} has been closed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 记录信号量的锁&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Full&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 超过数量，抛个异常&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 条件变量允许一个或多个线程等待，直到另一个线程通知它们&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_notempty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_thread&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_start_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_notempty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非阻塞&lt;code&gt;get_nowait&lt;/code&gt;和&lt;code&gt;put_nowait&lt;/code&gt;本质其实也是调用了&lt;code&gt;get&lt;/code&gt;和&lt;code&gt;put&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_nowait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put_nowait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;进程间通信1&quot;&gt;进程间通信1&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#进程间通信1&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;说这么多不如来个例子看看：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;24&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 只能 put 3条消息&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# put一个List类型的消息&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# put一个Dict类型的消息&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# put一个Set类型的消息&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 不加timeout，就一直阻塞，等消息队列有空位才能发出去&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;再加条消息呗&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Full(Exception)是空实现，你可以直接用Exception&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;消息队列已满，队列数&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;，当前存在&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;条消息&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_maxsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 非阻塞，不能put就抛异常&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_nowait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;再加条消息呗&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 相当于q.put(obj,False)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;消息队列已满，队列数&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;，当前存在&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;条消息&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_maxsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;队列数：&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;，当前存在&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;条消息 内容&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_maxsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_nowait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;队列数：&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;，当前存在：&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;条消息&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_maxsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;消息队列已满，队列数3，当前存在3条消息
消息队列已满，队列数3，当前存在3条消息
队列数：3，当前存在3条消息 内容[1, 2, 3, 4]
队列数：3，当前存在2条消息 内容{'a': 1, 'b': 2}
队列数：3，当前存在1条消息 内容{1, 2, 3, 4}
队列数：3，当前存在：0条消息&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;补充说明一下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;&lt;code&gt;q._maxsize&lt;/code&gt;&lt;/em&gt; 队列数(尽量不用&lt;code&gt;_&lt;/code&gt;开头的属性和方法）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q.qsize()&lt;/code&gt;查看当前队列中存在几条消息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q.full()&lt;/code&gt;查看是否满了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q.empty()&lt;/code&gt;查看是否为空&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;再看个简单点的子进程间通信：(铺垫demo)&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;23&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程1]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程1]小明，今晚撸串不？&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 设置一个简版的重试机制（三次重试）&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 第一次1s，第二次4s，第三次6s&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程2]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 模拟一下网络延迟&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程2]不去，我今天约了妹子&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pro_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pro_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：（&lt;code&gt;time python3 5.queue2.py&lt;/code&gt;）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[子进程1]PPID=15220,PID=15221,GID=1000
[子进程2]PPID=15220,PID=15222,GID=1000
[子进程1]小明，今晚撸串不？
[子进程2]不去，我今天约了妹子

real    0m6.087s
user    0m0.053s
sys 0m0.035s&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h4 id=&quot;进程间通信2&quot;&gt;进程间通信2&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#进程间通信2&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;多进程基本上都是用&lt;code&gt;pool&lt;/code&gt;，可用上面说的&lt;code&gt;Queue&lt;/code&gt;方法怎么报错了？&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;29&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程1]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程1]小明，今晚撸串不？&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 设置一个简版的重试机制（三次重试）&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 第一次1s，第二次4s，第三次6s&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程2]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 模拟一下网络延迟&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程2]不去，我今天约了妹子&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[父进程]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                          &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pro_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pro_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：(无法将&lt;code&gt;multiprocessing.Queue&lt;/code&gt;对象传递给&lt;code&gt;Pool&lt;/code&gt;方法)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[父进程]PPID=4223,PID=32170,GID=1000
Queue objects should only be shared between processes through inheritance
Queue objects should only be shared between processes through inheritance

real    0m0.183s
user    0m0.083s
sys 0m0.012s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面会详说，先看一下正确方式：（队列换了一下，其他都一样&lt;code&gt;Manager().Queue()&lt;/code&gt;）&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;29&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程1]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程1]小明，今晚撸串不？&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 设置一个简版的重试机制（三次重试）&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 第一次1s，第二次4s，第三次6s&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程2]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 模拟一下网络延迟&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程2]不去，我今天约了妹子&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[父进程]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                          &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pro_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pro_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[父进程]PPID=4223,PID=31329,GID=1000
[子进程1]PPID=31329,PID=31335,GID=1000
[子进程2]PPID=31329,PID=31336,GID=1000
[子进程1]小明，今晚撸串不？
[子进程2]不去，我今天约了妹子

real    0m6.134s
user    0m0.133s
sys 0m0.035s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再抛个思考题：（Linux）&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;25&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程1]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程1]小明，今晚撸串不？&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 设置一个简版的重试机制（三次重试）&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 第一次1s，第二次4s，第三次6s&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程2]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                           &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 模拟一下网络延迟&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[子进程2]不去，我今天约了妹子&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[父进程]PPID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,PID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,GID=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                          &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pro_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pro_test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：（为啥这样也可以【提示：&lt;code&gt;fork&lt;/code&gt;】）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[父进程]PPID=12855,PID=16879,GID=1000
[子进程1]PPID=16879,PID=16880,GID=1000
[子进程2]PPID=16879,PID=16881,GID=1000
[子进程1]小明，今晚撸串不？
[子进程2]不去，我今天约了妹子

real    0m6.120s
user    0m0.105s
sys     0m0.024s&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;进程拓展&quot;&gt;进程拓展&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#进程拓展&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;官方参考：&lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html&quot; target=&quot;_blank&quot;&gt;https://docs.python.org/3/library/multiprocessing.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1.上下文系&quot;&gt;1.上下文系&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#1.上下文系&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;spawn：（Win默认，Linux下也可以用【&amp;gt;=3.4】）
&lt;ol&gt;&lt;li&gt;父进程启动一个新的python解释器进程。&lt;/li&gt;
&lt;li&gt;子进程只会继承运行进程对象run()方法所需的那些资源。&lt;/li&gt;
&lt;li&gt;不会继承父进程中不必要的文件描述符和句柄。&lt;/li&gt;
&lt;li&gt;与使用fork或forkserver相比，使用此方法启动进程相当慢。&lt;/li&gt;
&lt;li&gt;可在Unix和Windows上使用。Windows上的默认设置。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;fork:（Linux下默认）
&lt;ol&gt;&lt;li&gt;父进程用于os.fork()分叉Python解释器。&lt;/li&gt;
&lt;li&gt;子进程在开始时与父进程相同（这时候内部变量之类的还没有被修改）&lt;/li&gt;
&lt;li&gt;父进程的所有资源都由子进程继承（用到多线程的时候可能有些问题）&lt;/li&gt;
&lt;li&gt;仅适用于Unix。Unix上的默认值。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;forkserver：（常用）
&lt;ol&gt;&lt;li&gt;当程序启动并选择forkserver start方法时，将启动服务器进程。&lt;/li&gt;
&lt;li&gt;从那时起，每当需要一个新进程时，父进程就会连接到服务器并请求它分叉一个新进程。&lt;/li&gt;
&lt;li&gt;fork服务器进程是单线程的，因此它可以安全使用os.fork()。没有不必要的资源被继承。&lt;/li&gt;
&lt;li&gt;可在Unix平台上使用，支持通过Unix管道传递文件描述符。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这块官方文档很详细，贴下官方的2个案例：&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;multiprocessing.set_start_method(xxx)&lt;/code&gt;来设置启动的上下文类型&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mp&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_start_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'spawn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 不要过多使用&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：（&lt;code&gt;set_start_method&lt;/code&gt;不要过多使用）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hello

real    0m0.407s
user    0m0.134s
sys     0m0.012s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你把设置启动上下文注释掉：（消耗的总时间少了很多）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;real    0m0.072s
user    0m0.057s
sys     0m0.016s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以通过&lt;code&gt;multiprocessing.get_context(xxx)&lt;/code&gt;获取指定类型的上下文&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mp&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'spawn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：（&lt;code&gt;get_context&lt;/code&gt;在Python源码里用的比较多，so=&amp;gt;也建议大家这么用）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hello

real    0m0.169s
user    0m0.146s
sys 0m0.024s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从结果来看，总耗时也少了很多&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;2.日记系列&quot;&gt;2.日记系列&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#2.日记系列&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;说下日记相关的事情：&lt;/p&gt;
&lt;p&gt;先看下&lt;code&gt;multiprocessing&lt;/code&gt;里面的日记记录：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/lotapp/cpython3/blob/master/Lib/multiprocessing/context.py&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log_to_stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;'''打开日志记录并添加一个打印到stderr的处理程序'''&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.util&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_to_stderr&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_to_stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多&lt;code&gt;Loging&lt;/code&gt;模块内容可以看官方文档：&lt;a href=&quot;https://docs.python.org/3/library/logging.html&quot; target=&quot;_blank&quot;&gt;https://docs.python.org/3/library/logging.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个是内部代码，看看即可：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/lotapp/cpython3/blob/master/Lib/multiprocessing/util.py&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log_to_stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;'''打开日志记录并添加一个打印到stderr的处理程序'''&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 全局变量默认是False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_log_to_stderr&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 日记记录转换成文本&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_LOGGING_FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 一个处理程序类，它将已适当格式化的日志记录写入流&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 此类不会关闭流，因为用到了sys.stdout|sys.stderr&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 设置格式：'[%(levelname)s/%(processName)s] %(message)s'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 返回`multiprocessing`专用的记录器&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 添加处理程序&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 设置日记级别&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 现在log是输出到stderr的&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_log_to_stderr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Logging&lt;/code&gt;之前也有提过，可以看看：&lt;a href=&quot;https://www.cnblogs.com/dotnetcrazy/p/9333792.html#2.%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BC%A0%E5%8F%82%E7%9A%84%E6%89%A9%E5%B1%95%EF%BC%88%E5%8F%AF%E4%BC%A0%E5%8F%AF%E4%B8%8D%E4%BC%A0%EF%BC%89&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/dotnetcrazy/p/9333792.html#2.装饰器传参的扩展（可传可不传）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来个案例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_to_stderr&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 把日记输出定向到sys.stderr中&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_to_stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 设置日记记录级别&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 敏感程度：DEBUG、INFO、WARN、ERROR、CRITICAL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WARN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WARNING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 这两个是一样的&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 设置日记级别(一般都是WARN)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 自定义输出&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# def log(self, level, msg, *args, **kwargs):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;我是通用格式&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 通用，下面的内部也是调用的这个&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;info 测试&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;warning 测试&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error 测试&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 做的操作都会被记录下来&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;True
[INFO/MainProcess] 我是通用格式
[INFO/MainProcess] info 测试
[WARNING/MainProcess] warning 测试
[ERROR/MainProcess] error 测试
[INFO/Process-1] child process calling self.run()
test
[INFO/Process-1] process shutting down
[INFO/Process-1] process exiting with exitcode 0
[INFO/MainProcess] process shutting down&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h4 id=&quot;3.进程5态&quot;&gt;3.进程5态&lt;a class=&quot;anchor-link&quot; href=&quot;http://www.cnblogs.com/dotnetcrazy/p/9426279.html#3.进程5态&quot;&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;之前忘记说了～现在快结尾了，补充一下进程5态：(来个草图)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1127869/201808/1127869-20180810162418968-770691664.png&quot; alt=&quot;3.进程5态.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 13:25:00 +0000</pubDate>
<dc:creator>鲲逸鹏</dc:creator>
<og:description>上次说了很多Linux下进程相关知识，这边不再复述，下面来说说Python的并发编程，如有错误欢迎提出～ 如果遇到听不懂的可以看上一次的文章：https://www.cnblogs.com/dotne</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dotnetcrazy/p/9426279.html</dc:identifier>
</item>
<item>
<title>SpringCloud教程 | 第二篇: 服务消费者（rest+ribbon）(Finchley版本) - 华丽D转身</title>
<link>http://www.cnblogs.com/snake23/p/9490063.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/snake23/p/9490063.html</guid>
<description>&lt;p&gt;在上一篇文章，讲了服务的注册和发现。在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。在这一篇文章首先讲解下基于ribbon+rest。&lt;/p&gt;
&lt;h3 id=&quot;一ribbon简介&quot;&gt;一、ribbon简介&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Ribbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Feign already uses Ribbon, so if you are using @FeignClient then this section also applies.&lt;/p&gt;
&lt;p&gt;—–摘自官网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。Feign默认集成了ribbon。&lt;/p&gt;
&lt;p&gt;ribbon 已经默认实现了这些配置bean：&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;IClientConfig ribbonClientConfig: DefaultClientConfigImpl&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;IRule ribbonRule: ZoneAvoidanceRule&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;IPing ribbonPing: NoOpPing&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ServerList ribbonServerList: ConfigurationBasedServerList&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;二准备工作&quot;&gt;二、准备工作&lt;/h3&gt;
&lt;p&gt;这一篇文章基于上一篇文章的工程，启动eureka-server 工程；启动service-hi工程，它的端口为8762；将service-hi的配置文件的端口改为8763,并启动，这时你会发现：service-hi在eureka-server注册了2个实例，这就相当于一个小的集群。&lt;/p&gt;
&lt;p&gt;如何在idea下启动多个实例，请参照这篇文章：&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/forezp/article/details/76408139&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/forezp/article/details/76408139&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;访问localhost:8761如图所示：&lt;br/&gt;如何一个工程启动多个实例，请看这篇文章:&lt;a href=&quot;https://blog.csdn.net/forezp/article/details/76408139&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/forezp/article/details/76408139&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://upload-images.jianshu.io/upload_images/2279594-862f68c48735d126.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;三建一个服务消费者&quot;&gt;三、建一个服务消费者&lt;/h4&gt;
&lt;p&gt;重新新建一个spring-boot工程，取名为：service-ribbon;&lt;br/&gt;在它的pom.xml继承了父pom文件，并引入了以下依赖：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs xml has-numbering&quot;&gt;&lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;project &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot; &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         &lt;span class=&quot;hljs-attribute&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;4.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;com.forezp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;service-ribbon&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;0.0.1-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;jar&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;name&amp;gt;service-ribbon&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;name&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;description&amp;gt;Demo project for Spring Boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;description&amp;gt;


    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;com.forezp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;sc-f-chapter2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;0.0.1-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;parent&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.cloud&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-boot-starter-web&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.cloud&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;



&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;project&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul class=&quot;pre-numbering&quot;&gt;&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;/li&gt;
&lt;li&gt;7&lt;/li&gt;
&lt;li&gt;8&lt;/li&gt;
&lt;li&gt;9&lt;/li&gt;
&lt;li&gt;10&lt;/li&gt;
&lt;li&gt;11&lt;/li&gt;
&lt;li&gt;12&lt;/li&gt;
&lt;li&gt;13&lt;/li&gt;
&lt;li&gt;14&lt;/li&gt;
&lt;li&gt;15&lt;/li&gt;
&lt;li&gt;16&lt;/li&gt;
&lt;li&gt;17&lt;/li&gt;
&lt;li&gt;18&lt;/li&gt;
&lt;li&gt;19&lt;/li&gt;
&lt;li&gt;20&lt;/li&gt;
&lt;li&gt;21&lt;/li&gt;
&lt;li&gt;22&lt;/li&gt;
&lt;li&gt;23&lt;/li&gt;
&lt;li&gt;24&lt;/li&gt;
&lt;li&gt;25&lt;/li&gt;
&lt;li&gt;26&lt;/li&gt;
&lt;li&gt;27&lt;/li&gt;
&lt;li&gt;28&lt;/li&gt;
&lt;li&gt;29&lt;/li&gt;
&lt;li&gt;30&lt;/li&gt;
&lt;li&gt;31&lt;/li&gt;
&lt;li&gt;32&lt;/li&gt;
&lt;li&gt;33&lt;/li&gt;
&lt;li&gt;34&lt;/li&gt;
&lt;li&gt;35&lt;/li&gt;
&lt;li&gt;36&lt;/li&gt;
&lt;li&gt;37&lt;/li&gt;
&lt;li&gt;38&lt;/li&gt;
&lt;li&gt;39&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在工程的配置文件指定服务的注册中心地址为&lt;a href=&quot;http://localhost:8761/eureka/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://localhost:8761/eureka/&lt;/a&gt;，程序名称为 service-ribbon，程序端口为8764。配置文件application.yml如下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs axapta has-numbering&quot;&gt;eureka:
  &lt;span class=&quot;hljs-keyword&quot;&gt;client:
    serviceUrl:
      defaultZone: http:&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul class=&quot;pre-numbering&quot;&gt;&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;/li&gt;
&lt;li&gt;7&lt;/li&gt;
&lt;li&gt;8&lt;/li&gt;
&lt;li&gt;9&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在工程的启动类中,通过@EnableDiscoveryClient向服务中心注册；并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs java has-numbering&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@SpringBootApplication
&lt;span class=&quot;hljs-annotation&quot;&gt;@EnableEurekaClient
&lt;span class=&quot;hljs-annotation&quot;&gt;@EnableDiscoveryClient
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;ServiceRibbonApplication {

    &lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main(String[] args) {
        SpringApplication.run( ServiceRibbonApplication.class, args );
    }

    &lt;span class=&quot;hljs-annotation&quot;&gt;@Bean
    &lt;span class=&quot;hljs-annotation&quot;&gt;@LoadBalanced
    RestTemplate restTemplate() {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-keyword&quot;&gt;new RestTemplate();
    }

}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul class=&quot;pre-numbering&quot;&gt;&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;/li&gt;
&lt;li&gt;7&lt;/li&gt;
&lt;li&gt;8&lt;/li&gt;
&lt;li&gt;9&lt;/li&gt;
&lt;li&gt;10&lt;/li&gt;
&lt;li&gt;11&lt;/li&gt;
&lt;li&gt;12&lt;/li&gt;
&lt;li&gt;13&lt;/li&gt;
&lt;li&gt;14&lt;/li&gt;
&lt;li&gt;15&lt;/li&gt;
&lt;li&gt;16&lt;/li&gt;
&lt;li&gt;17&lt;/li&gt;
&lt;li&gt;18&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;写一个测试类HelloService，通过之前注入ioc容器的restTemplate来消费service-hi服务的“/hi”接口，在这里我们直接用的程序名替代了具体的url地址，在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名，代码如下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs java has-numbering&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Service
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;HelloService {

    &lt;span class=&quot;hljs-annotation&quot;&gt;@Autowired
    RestTemplate restTemplate;

    &lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;hiService(String name) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return restTemplate.getForObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://SERVICE-HI/hi?name=&quot;+name,String.class);
    }


}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul class=&quot;pre-numbering&quot;&gt;&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;/li&gt;
&lt;li&gt;7&lt;/li&gt;
&lt;li&gt;8&lt;/li&gt;
&lt;li&gt;9&lt;/li&gt;
&lt;li&gt;10&lt;/li&gt;
&lt;li&gt;11&lt;/li&gt;
&lt;li&gt;12&lt;/li&gt;
&lt;li&gt;13&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;写一个controller，在controller中用调用HelloService 的方法，代码如下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs java has-numbering&quot;&gt;
&lt;span class=&quot;hljs-annotation&quot;&gt;@RestController
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;HelloControler {

    &lt;span class=&quot;hljs-annotation&quot;&gt;@Autowired
    HelloService helloService;

    &lt;span class=&quot;hljs-annotation&quot;&gt;@GetMapping(value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/hi&quot;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;hi(@RequestParam String name) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return helloService.hiService( name );
    }
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul class=&quot;pre-numbering&quot;&gt;&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;/li&gt;
&lt;li&gt;7&lt;/li&gt;
&lt;li&gt;8&lt;/li&gt;
&lt;li&gt;9&lt;/li&gt;
&lt;li&gt;10&lt;/li&gt;
&lt;li&gt;11&lt;/li&gt;
&lt;li&gt;12&lt;/li&gt;
&lt;li&gt;13&lt;/li&gt;
&lt;li&gt;14&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在浏览器上多次访问&lt;a href=&quot;http://localhost:8764/hi?name=forezp&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://localhost:8764/hi?name=forezp&lt;/a&gt;，浏览器交替显示：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;hi forezp,i am from port:8762&lt;/p&gt;
&lt;p&gt;hi forezp,i am from port:8763&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这说明当我们通过调用restTemplate.getForObject(“&lt;a href=&quot;http://service-hi/hi?name=&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://SERVICE-HI/hi?name=&lt;/a&gt;“+name,String.class)方法时，已经做了负载均衡，访问了不同的端口的服务实例。&lt;/p&gt;
&lt;h3 id=&quot;四此时的架构&quot;&gt;四、此时的架构&lt;/h3&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://upload-images.jianshu.io/upload_images/2279594-9f10b702188a129d.png&quot; alt=&quot;此时架构图.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个服务注册中心，eureka server,端口为8761&lt;/li&gt;
&lt;li&gt;service-hi工程跑了两个实例，端口分别为8762,8763，分别向服务注册中心注册&lt;/li&gt;
&lt;li&gt;sercvice-ribbon端口为8764,向服务注册中心注册&lt;/li&gt;
&lt;li&gt;当sercvice-ribbon通过restTemplate调用service-hi的hi接口时，因为用ribbon进行了负载均衡，会轮流的调用service-hi：8762和8763 两个端口的hi接口；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;源码下载：&lt;a href=&quot;https://github.com/forezp/SpringCloudLearning/tree/master/sc-f-chapter2&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/forezp/SpringCloudLearning/tree/master/sc-f-chapter2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;五参考资料&quot;&gt;五、参考资料&lt;/h3&gt;
&lt;p&gt;本文参考了以下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/forezp/article/details/69788938&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/forezp/article/details/69788938&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文地址：http://blog.csdn.net/forezp。 https://blog.csdn.net/forezp/article/details/81040946&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 13:09:00 +0000</pubDate>
<dc:creator>华丽D转身</dc:creator>
<og:description>在上一篇文章，讲了服务的注册和发现。在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+r</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/snake23/p/9490063.html</dc:identifier>
</item>
<item>
<title>docker学习篇（二）---- 基础篇 - 如是说</title>
<link>http://www.cnblogs.com/lishanlei/p/9489202.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lishanlei/p/9489202.html</guid>
<description>&lt;p&gt;在之前的学习中，我知道了docker的三大组件分别是----镜像，容器，仓库。了解了这三个组件也就初步理解了docker。所以我学习了这三个组件，并记录下来。&lt;/p&gt;


&lt;p&gt;docker在运行一个容器时需要本地存在相对应的镜像，执行流程大致是这样的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;准备容器&lt;/li&gt;
&lt;li&gt;查看容器所需要的镜像是否存在于本地&lt;/li&gt;
&lt;li&gt;如果存在，运行容器&lt;/li&gt;
&lt;li&gt;如果不存在，检索远程镜像仓库，找到并下载&lt;/li&gt;
&lt;li&gt;运行容器&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;获取镜像&lt;/h3&gt;
&lt;p&gt;通过&lt;span&gt;docker pull&lt;/span&gt;来从镜像仓库获取镜像：&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;cke_reset cke_widget_drag_handler_container&quot;&gt;在下载的过程中，会出现镜像的每一层信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果官方仓库注册服务器下载速度太慢，我们可以从其他仓库下载，这个时候因为不是从默认的注册仓库下载，所以我们需要显式的声明下载仓库地址：&lt;/p&gt;

&lt;h3&gt;显示镜像&lt;/h3&gt;

&lt;p&gt;通过上面命令可以查看本地已经下载的镜像文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1201942/201808/1201942-20180816184845984-337152071.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上面的信息中，我们可以获得：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;来自那个仓库（REPOSITORY）&lt;/li&gt;
&lt;li&gt;镜像标记(TAG)&lt;/li&gt;
&lt;li&gt;ID号唯一标识（IMAGE ID）&lt;/li&gt;
&lt;li&gt;创建时间（CREATED）&lt;/li&gt;
&lt;li&gt;镜像大小（SIZE）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;TAG：用来标记来自同一仓库的不同镜像，比如 Ubuntu仓库中中有多个镜像，通过TAG来区分版本。如果不记得具体的版本了，默认用latest标记信息&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;修改镜像&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用下载的镜像启动容器&lt;/p&gt;

&lt;p&gt;在容器中增加json和gem应用&lt;/p&gt;


&lt;p&gt; -m 来指定提交的说明信息,跟我们使用的版本控制工具一样;&lt;/p&gt;
&lt;p&gt;-a 可以指定更新的用户信息;之后是用来创建镜像的容器的 ID;&lt;/p&gt;
&lt;p&gt;最后指定目标镜像的仓库名和 tag 信息。&lt;/p&gt;
&lt;p&gt;创建成功后会返回这个镜像的 ID 信息。&lt;/p&gt;
&lt;p&gt;我们可以使用docker images查看新创建的镜像。&lt;/p&gt;
&lt;h3&gt;Dockerfile&lt;/h3&gt;
&lt;p&gt;当在一个团队中分享新创建的镜像时，我们可以使用Dockerfile来解决这个团队分享问题。&lt;/p&gt;
&lt;p&gt;Dockerfile包含一些怎样创建镜像的指令。&lt;/p&gt;
&lt;p&gt;新建一个目录和一个Dockerfile:&lt;/p&gt;


&lt;p&gt;通过#来进行注释&lt;/p&gt;
&lt;p&gt;FROM指令告诉Docker使用哪个镜像来作为基础镜像&lt;/p&gt;
&lt;p&gt;接着是维护者的信息&lt;/p&gt;
&lt;p&gt;RUN开头的指令会在创建中运行。比如安装一个软件包&lt;/p&gt;
&lt;p&gt;另外，ADD 命令是复制本地文件到镜像；EXPOSE 命令来向外部开放端口；CMD 命令来描述容器启动后运行的程序等。&lt;/p&gt;
&lt;p&gt;编写完Dockerfile后通过docker build来创建生成镜像。&lt;/p&gt;

&lt;p&gt;build 进程在执行操作。它要做的第一件事情就是上传这个 Dockerfile 内容,因为所有的操作都要依据Dockerfile 来进行。Docker指令被按条执行，每一步创建一个新的容器，在容器中执行指令并提交修改，当所有指令执行完成后，返回最终id。&lt;/p&gt;
&lt;p&gt;我们可以通过&lt;span&gt;docker tag&lt;/span&gt;来修改镜像的标签。通&lt;span&gt;过docker push&lt;/span&gt;将创建的镜像上传到仓库中进行分享。&lt;/p&gt;
&lt;h3&gt;导出和导入镜像&lt;/h3&gt;
&lt;p&gt;将镜像导出到本地，可以使用docker save命令&lt;/p&gt;



&lt;p&gt;使用&lt;span&gt;docker rmi&lt;/span&gt;命令删除本地的镜像&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;docker rm命令是用来删除容器的，两个删除命令的操作对象是不同的。&lt;/li&gt;
&lt;li&gt;在删除一个镜像时首先要删除依赖于这个镜像的所有容器，否则可能会出现错误。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;容器是独立运行的一套或者一组应用以及他们的运行态环境。虚拟机可以理解为模拟运行的一整套操作系统（提供运行态环境和其他系统环境）和运行在上面的应用。所以容器相较于虚拟机来说，显得非常轻量级，启动速度也是以秒级计算的。&lt;/p&gt;
&lt;h3&gt;启动&lt;/h3&gt;
&lt;p&gt;容器启动有两种形式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一种是基于镜像创建一个新的容器并启动&lt;/li&gt;
&lt;li&gt;另一种是将在终止状态的容器重新启动&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;启动容器命令用&lt;span&gt;docker run&lt;/span&gt;来实现，如下面的例子：&lt;/p&gt;


&lt;p&gt;当在执行docker run来创建一个容器时，docker的流程是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;检查本地是否有指定的镜像，如果没有从共有仓库下载&lt;/li&gt;
&lt;li&gt;利用指定的基础镜像创建一个容器&lt;/li&gt;
&lt;li&gt;分配一个文件系统，并且在只读的镜像层外面挂载一层读写层&lt;/li&gt;
&lt;li&gt;从宿主主机配置的网桥接口中桥接一个虚拟接口到容器&lt;/li&gt;
&lt;li&gt;从地址池中配置一个IP地址给容器&lt;/li&gt;
&lt;li&gt;执行用户指定的应用程序&lt;/li&gt;
&lt;li&gt;关闭容器&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;那么怎么启动一个之前已经终止的容器呢？我们可以利用docker start命令来将一个终止的容器重新启动起来。&lt;/p&gt;
&lt;p&gt;容器的核心为所执行的应用程序,所需要的资源都是应用程序运行所必需的。在与容器交互的伪终端中我们可以通过ps或者top命令进行查看容器中进程的信息。&lt;/p&gt;
&lt;h3&gt;守护态运行&lt;/h3&gt;
&lt;p&gt;我们想要让一个容器在后台以守护态形式运行。可以在执行docker run命令时增加-d参数。&lt;/p&gt;


&lt;p&gt;想要查看守护态容器在后台输出的信息，可是使用&lt;span&gt;docker logs&lt;/span&gt;进行查看：&lt;/p&gt;

&lt;p&gt;当加上-d运行容器时，容器以守护态形式进行在后台执行，但有时候我们想要进入到容器中进行工作，应该怎么实现呢？？&lt;/p&gt;
&lt;p&gt;1.我们可以使用docker自带的指令&lt;span&gt;docker attach&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2. nsenter命令&lt;/p&gt;
&lt;p&gt;我们可以通过nsenter命令进入容器，而是用nsenter命令需要安装nsenter工具，安装步骤如下：&lt;/p&gt;

&lt;p&gt;为了连接到容器，我们需要知道容器的第一个进程的PID,通过下面方法获得：&lt;/p&gt;


&lt;p&gt;当我们需要停止一个正在执行的容器时，使用&lt;span&gt;docker stop&lt;/span&gt;指令。&lt;/p&gt;
&lt;p&gt;如果该容器中指定的应用终止时，容器也会自动终止。比如上面我们让容器运行一个伪终端与用户进行交互，当通过exit退出伪终端时，这个容器也自动终止了。&lt;/p&gt;
&lt;p&gt;如果想让一个运行态的容器终止后重新启动，我们可以使用&lt;span&gt;docker restart&lt;/span&gt;指令。&lt;/p&gt;
&lt;h3&gt;导出和导入&lt;/h3&gt;
&lt;p&gt;导出&lt;/p&gt;
&lt;p&gt;docker中想要对容器进行备份导出也是非常简单的，可以通过&lt;span&gt;docker export&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;导入&lt;/p&gt;
&lt;p&gt;可以使用&lt;span&gt;docker import&lt;/span&gt;指令将容器快照导入为镜像。&lt;/p&gt;


&lt;p&gt;docker load是用来导入镜像存储文件到本地镜像库；docker import是导入一个容器快照到本地镜像库。区别在于容器快照文件将会丢弃所有历史记录和元数据信息（即容器当时的快照状态），而镜像文件将保存完整记录，体积更大。&lt;/p&gt;
&lt;h3&gt;删除容器&lt;/h3&gt;
&lt;p&gt;当我们想要删除一个容器时，可以使用&lt;span&gt;docker rm&lt;/span&gt;指令来删除一个终止状态的容器。如果我们想要删除一个正在运行的状态，可以加上-f参数。&lt;/p&gt;



&lt;p&gt;仓库就是存放镜像的地方。&lt;/p&gt;
&lt;p&gt;目前 Docker 官方维护了一个公共仓库 Docker Hub (https://hub.docker.com/) ,其中已经包括了超过 15000 的镜像。大部分需求,都可以通过在 Docker Hub 中直接下载镜像来实现。&lt;/p&gt;
&lt;h3&gt;登录&lt;/h3&gt;
&lt;p&gt;通过&lt;span&gt;docker login&lt;/span&gt;指令来输入用户名，密码和邮箱后完成注册和登录。用户的认证信息保存在本地的.dockercfg。&lt;/p&gt;
&lt;h3&gt;检索&lt;/h3&gt;
&lt;p&gt;我们想要查找官方仓库中有哪些我们需要的镜像，可以通过&lt;span&gt;docker search&lt;/span&gt;指令实现，并通过docker pull下载到本地镜像仓库中。&lt;/p&gt;


&lt;p&gt;以上~~&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 10:53:00 +0000</pubDate>
<dc:creator>如是说</dc:creator>
<og:description>引言 在之前的学习中，我知道了docker的三大组件分别是 镜像，容器，仓库。了解了这三个组件也就初步理解了docker。所以我学习了这三个组件，并记录下来。 镜像 docker在运行一个容器时需要本</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lishanlei/p/9489202.html</dc:identifier>
</item>
<item>
<title>ArrayList 源码分析 -- 扩容问题及序列化问题 - niaonao</title>
<link>http://www.cnblogs.com/niaonao/p/9488953.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/niaonao/p/9488953.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt; 目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、前言&lt;/span&gt;&lt;br/&gt;&lt;span&gt;二、ArrayList 的继承与实现关系&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    2.1 ArrayList.java&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    2.2 抽象类AbstractList.java&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    2.3 接口List.java&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    2.4 接口RandomAccess.java&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    2.5 接口Cloneable&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    2.6 接口Serializable&lt;/span&gt;&lt;br/&gt;&lt;span&gt;三、ArrayList 关于数组和集合的讨论&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    3.1 ArrayList 是数组还是集合问题说明&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    3.2 从构造方法分析ArrayList&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    3.1 确认ArrayList 是集合&lt;/span&gt;&lt;br/&gt;&lt;span&gt;四、ArrayList 初始容量是0 还是10 问题的确认&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    4.1 从构造方法看初始容量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    4.2 从add() 方法看初始容量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    4.3 确定ArrayList 的初始容量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;五、ArrayList 的扩容问题探索&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    5.1 扩容问题说明&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    5.2 通过add() 方法探索扩容问题&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    5.3 扩容算法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    5.4 模拟扩容演示&lt;/span&gt;&lt;br/&gt;&lt;span&gt;六、ArrayList 的序列化问题补充&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;    这里主要研究到以下问题，通过源码阅读分析探索以下问题的答案。本文不牵涉到更多问题，所以源码只贴出与这些问题直接联系的关键代码块。当然源码中必要的全局常量、方法会贴出。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;ArrayList 的继承与实现关系；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ArrayList 关于数组和集合的讨论；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ArrayList 初始容量是0还是10问题的确认；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ArrayList 的扩容问题探索；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ArrayList 的序列化问题补充；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;二arraylist-的继承与实现关系&quot;&gt;二、ArrayList 的继承与实现关系&lt;/h2&gt;
&lt;h3 id=&quot;21-arraylistjava&quot;&gt;2.1 ArrayList.java&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    ArrayList类通过extends关键字继承AbstractList抽象类，通过关键字implements实现List集合接口、RandomAccess标记接口、Cloneable克隆接口、Serializable序列化接口。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ArrayList&amp;lt;E&amp;gt; &lt;span&gt;extends&lt;/span&gt; AbstractList&amp;lt;E&amp;gt;
        &lt;span&gt;implements&lt;/span&gt; List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable {}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;22-抽象类abstractlistjava&quot;&gt;2.2 抽象类AbstractList.java&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    抽象类AbstractList继承一个AbstractCollection集合同样实现了集合List接口。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AbstractList&amp;lt;E&amp;gt; &lt;span&gt;extends&lt;/span&gt; AbstractCollection&amp;lt;E&amp;gt; &lt;span&gt;implements&lt;/span&gt; List&amp;lt;E&amp;gt; {}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;23-接口listjava&quot;&gt;2.3 接口List.java&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    List直接继承于底层集合Collection，List是一个集合，谁赞成?谁反对?&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; List&amp;lt;E&amp;gt; &lt;span&gt;extends&lt;/span&gt; Collection&amp;lt;E&amp;gt; {}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;24-接口randomaccessjava&quot;&gt;2.4 接口RandomAccess.java&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    此接口的主要目的是允许一般的算法更改其行为，从而在将其应用到随机或连续访问列表时能提供良好的性能。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    接口RandomAccess 是一个标记接口，实现该接口的集合List 支持快速随机访问。List 集合尽量要实现RandomAccess 接口，如果集合类是RandomAccess 的实现，则尽量用for(int i = 0; i &amp;lt; size; i++) 来遍历效率高，而不要用Iterator迭代器来遍历(如果List是Sequence List，则最好用迭代器来进行迭代)。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;25-接口cloneable&quot;&gt;2.5 接口Cloneable&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    关于深拷贝与浅拷贝应写一篇博客去说明。想深入了解可以参考&lt;a href=&quot;https://www.zhihu.com/question/23031215&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;知乎问答深拷贝与浅拷贝&lt;/a&gt; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    实现接口的目的是重写java.lang.Object的clone()的方法，实现浅拷贝。深拷贝和浅拷贝针对像 Object, Array 这样的复杂对象的。浅拷贝只复制一层对象的属性，而深拷贝则递归复制了所有层级。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;浅拷贝 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    被复制(拷贝)对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。浅拷贝即新建一个对象，复制原对象的基本属性，一级属性到新的存储空间，不拷贝原对象的对象引用元素，新对象的对象引用指向原来的存储空间，修改对象引用的元素，那么拷贝对象和原对象都会变化。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;深拷贝 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。深拷贝新建一个对象，不仅拷贝对象，还拷贝对象引用；深拷贝就是我们平常理解的复制，将对象的全部属性及对象引用复制到新的存储空间，不会指向原来的对象，修改新对象的任意元素都不会影响原对象。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;26-接口serializable&quot;&gt;2.6 接口Serializable&lt;/h3&gt;
&lt;p&gt;    &lt;span&gt;该接口无继承实现关系，实现该接口的类支持序列化。因此ArrayList 支持序列化。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;序列化：可以将一个对象的状态写入一个Byte 流里；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;反序列化：可以从其它地方把该Byte 流里的数据读出来。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;三arraylist-关于数组和集合的讨论&quot;&gt;三、ArrayList 关于数组和集合的讨论&lt;/h2&gt;
&lt;h3 id=&quot;31-arraylist-是数组还是集合问题说明&quot;&gt;3.1 ArrayList 是数组还是集合问题说明&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    ArrayList 是数组还是集合，这也算问题？ &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    我们都知道List 是集合啊，ArrayList 继承于List 也是集合。不过你或许会在某些文章上见过ArrayList 是数组或者说ArrayList 是基于数组的说法。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;32-从构造方法分析arraylist&quot;&gt;3.2 从构造方法分析ArrayList&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    那我们首先看一下ArrayList 的构造方法；&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认空数组，final 关键字修饰&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object[] EMPTY_ELEMENTDATA =&lt;span&gt; {};
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 空数据的共享空数组实例&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA =&lt;span&gt; {};

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 存储ArrayList元素的数组缓冲区，即ArrayList 存放数据的地方
     * ArrayList的容量是这个数组缓冲区的长度
     * transient 关键字修饰，elementData 不支持序列化
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;transient&lt;/span&gt;&lt;span&gt; Object[] elementData;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 默认无参构造方法
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ArrayList() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.elementData =&lt;span&gt; DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 带整型参数的构造方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; initialCapacity 初始化容量大小
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ArrayList(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; initialCapacity) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;gt; 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.elementData = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[initialCapacity];
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (initialCapacity == 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.elementData =&lt;span&gt; EMPTY_ELEMENTDATA;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;Illegal Capacity: &quot; +&lt;span&gt; initialCapacity);
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 泛型集合参数构造方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; c 集合类型参数
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ArrayList(Collection&amp;lt;? &lt;span&gt;extends&lt;/span&gt; E&amp;gt;&lt;span&gt; c) {
        elementData &lt;/span&gt;=&lt;span&gt; c.toArray();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((size = elementData.length) != 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; c.toArray might (incorrectly) not return Object[] (see 6260652)&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (elementData.getClass() != Object[].&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
                elementData &lt;/span&gt;= Arrays.copyOf(elementData, size, Object[].&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; replace with empty array.&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.elementData =&lt;span&gt; EMPTY_ELEMENTDATA;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;    无参构造方法中直接初始化Object[] elementData = {}; 即ArrayList 的存储数据的容器是一个数组。带参构造方法也是new Object() 或者通过Arrays 的方法转换为数组对象。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ArrayList 实现了List 接口，重写了集合的add()，size()，get()，remove()，toArray()等方法，多个方法的内部代码块是基于数组来处理数据的。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;31-确认arraylist-是集合&quot;&gt;3.1 确认ArrayList 是集合&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    因此ArrayList 是实现List 接口的集合，是基于数组的集合，数据的存储容器是数组，集合方法是通过数组实现的(比如泛型参数构造方法是将传入的集合c 先转化为数组在进行处理的)。包括其内部类Itr implements Iterator 中重新Iterator 的方法也是基于数组计算的。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    搞这个问题有意义吗？有意义^_^&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;四arraylist-初始容量是0-还是10-问题的确认&quot;&gt;四、ArrayList 初始容量是0 还是10 问题的确认&lt;/h2&gt;
&lt;h3 id=&quot;41-从构造方法看初始容量&quot;&gt;4.1 从构造方法看初始容量&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    从第三部分中的构造方法可以看出 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    无参构造一个ArrayList 时存储数据的容器elementData = {};此时存储容器大小为0 ； &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    带整型参数的构造方法通过传入的整型数据的大小来确认初始化存储容器elementData 的大小，当initialCapacity == 0 时，还是赋值elementData = {}； &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    泛型集合参数构造方法，根据集合的大小来初始化elementData 的大小，将集合转化为数组，数组的大小为0 的情况下，仍然赋值elementData = {}；&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;42-从add-方法看初始容量&quot;&gt;4.2 从add() 方法看初始容量&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    这个初始化和10 又有什么关系？？？ &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    在ArrayList 中定义了一个默认的存储容器的大小DEFAULT_CAPACITY 为10，用关键字final 修饰，注释是默认初始容器大小，通过构造方法创建ArrayList 对象并没有使用到这个常量，我们看看这个初始容器大小是怎么初始化容器大小的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Default initial capacity.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DEFAULT_CAPACITY = 10&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 集合的逻辑大小，即存储真实数据的数量&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size() {&lt;span&gt;return&lt;/span&gt;&lt;span&gt; size;}
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; isEmpty() {&lt;span&gt;return&lt;/span&gt; size == 0&lt;span&gt;;}
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 添加元素
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; e
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; add(E e) {
        ensureCapacityInternal(size &lt;/span&gt;+ 1);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount!!&lt;/span&gt;
        elementData[size++] =&lt;span&gt; e;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 确认集合内部容量大小
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; minCapacity
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ensureCapacityInternal(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 计算集合的容量
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; elementData
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; minCapacity
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; calculateCapacity(Object[] elementData, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (elementData ==&lt;span&gt; DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Math.max(DEFAULT_CAPACITY, minCapacity);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; minCapacity;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;    在集合add() 添加元素时，会将当前的size + 1 传入ensureCapacityInternal() 方法确认当前elementData 数组大小是否足够 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    足够的话size自增一，size = size + 1直接添加的元素赋值给elementData[size]； &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    不足够的话进行扩容，扩容问题下面涉及，这里说扩容中特殊情况，对空集合的扩容，比如我们通过无参构造方法创建了集合对象，此时容器大小为0，然后调用add() 方法添加一个元素，此时elementData == {}即此时elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，满足该条件在计算集合的容量方法calculateCapacity 中会进行”容器初始化”，其实是扩容而已；&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;这里的”=” 是等于不是赋值 &lt;br/&gt;此时return Math.max(DEFAULT_CAPACITY, minCapacity); &lt;br/&gt;minCapacity = size + 1 = 0 + 1 = 1 &lt;br/&gt;DEFAULT_CAPACITY = 10 &lt;br/&gt;minCapacity &amp;lt; DEFAULT_CAPACITY = 1 &amp;lt; 10 &lt;br/&gt;结果return 10;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    此时容器elementData 扩容为Object[10]&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;43-确定arraylist-的初始容量&quot;&gt;4.3 确定ArrayList 的初始容量&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    从以上两方面分析，所以ArrayList 的初始容量根据传参确定，默认无参构造方法下新对象的容器初始大小为0。而10 是在空集合添加第一个元素时扩容时的默认容器大小。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;五arraylist-的扩容问题探索&quot;&gt;五、ArrayList 的扩容问题探索&lt;/h2&gt;
&lt;h3 id=&quot;51-扩容问题说明&quot;&gt;5.1 扩容问题说明&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    集合扩容就是集合容量大小不能满足需要存储数据的数量，而需要将elementData 容器大小增大，以存储更多的元素。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;52-通过add-方法探索扩容问题&quot;&gt;5.2 通过add() 方法探索扩容问题&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    集合存储容器elementData 的容量大小不小于真实存储元素数量size&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;elementData.length &amp;gt; size 为真true &lt;br/&gt;elementData.length = size 为真true &lt;br/&gt;elementData.length &amp;lt; size 为假false&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    集合在添加元素时会首先判断当前容器是否能装下第size + 1 个元素。不能的情况下会进行扩容，上面初始容量问题中谈到当空集合扩容时会给该集合对象一个默认的容器大小10，即扩容到elementData.length == 10 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;这是一种特殊情况，给了一个默认值，并没有真正涉及扩容核心算法。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    下面看看ArrayList 是如何扩容的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 集合最大容量&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 添加元素
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; e
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; add(E e) {
        ensureCapacityInternal(size &lt;/span&gt;+ 1);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Increments modCount!!&lt;/span&gt;
        elementData[size++] =&lt;span&gt; e;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 确认集合内部容量大小
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; minCapacity 添加元素后容器的最小容量
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ensureCapacityInternal(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 计算集合的容量
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; elementData 存储数据的容器
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; minCapacity 添加元素后容器的最小容量
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; calculateCapacity(Object[] elementData, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (elementData ==&lt;span&gt; DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Math.max(DEFAULT_CAPACITY, minCapacity);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; minCapacity;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 确认明确的容量大小
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; minCapacity 添加元素后容器的最小容量
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ensureExplicitCapacity(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
        modCount&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (minCapacity - elementData.length &amp;gt; 0&lt;span&gt;)
            grow(minCapacity);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 扩容方法
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; minCapacity 添加元素后容器的最小容量
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; grow(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 扩容前容器大小&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; oldCapacity =&lt;span&gt; elementData.length;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 扩容关键算法，newCapacity 扩容后容器大小&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (newCapacity - minCapacity &amp;lt; 0) newCapacity =&lt;span&gt; minCapacity;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0) newCapacity =&lt;span&gt; hugeCapacity(minCapacity);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将扩容后的容器赋值给存储容器&lt;/span&gt;
        elementData =&lt;span&gt; Arrays.copyOf(elementData, newCapacity);
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
    * 溢出处理
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; hugeCapacity(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; minCapacity) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (minCapacity &amp;lt; 0) &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OutOfMemoryError();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 超过最大值不合法，直接将容量大小定义为Intager 的最大值&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; (minCapacity &amp;gt; MAX_ARRAY_SIZE) ?&lt;span&gt; Integer.MAX_VALUE : MAX_ARRAY_SIZE;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;    在添加元素的方法中依此调用容器大小判断相关的方法，当容器大小不够时，会进行扩容，调用grow() 方法进行扩容。扩容方法很简单，拿到扩容前容器大小oldCapacity，进行扩容，判断扩容后容量是否合法，是否溢出，然后进行处理为合理的大小。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;53-扩容算法&quot;&gt;5.3 扩容算法&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    扩容算法是首先获取到扩容前容器的大小。然后通过oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1) 来计算扩容后的容器大小newCapacity。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;    这里的扩容算法用到了&amp;gt;&amp;gt; 右移运算。即将十进制转换为二进制，每一位右移后得到的结果。oldCapacity &amp;gt;&amp;gt; 1即oldCapacity 对2 求摩，oldCapacity/2；&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1)即oldCapacity + (oldCapacity / 2)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;    所以关键扩容算法就是当容量不够存储元素时，在原容器大小size 基础上再扩充size 的接近一半，即大约扩充原容器的一半。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;  相对直白的严谨的扩容算法如下：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;扩容后容器大小newCapacity = size + size / 2&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;54-模拟扩容演示&quot;&gt;5.4 模拟扩容演示&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    举个栗子：原容器是10，elementData 已经存储10 个元素了，再次调用add() 方法会走grow() 方法进行扩容。运行中截图如下图&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;10 / 2 =5 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;新的容器大小为 10 + 5 = 15 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;另：运算 “/” 的结果是整数，15/2 =7；9/2 = 4； 8/2 = 4；&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1400082/201808/1400082-20180816180642337-2146432163.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图5-1、扩容前容量大小图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1400082/201808/1400082-20180816180711254-555851150.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图5-2、扩容后容量大小图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1400082/201808/1400082-20180816180705226-59868533.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图5-3、扩容后elementData 容量大小图 &lt;/p&gt;
&lt;h2 id=&quot;六arraylist-的序列化问题补充&quot;&gt;六、ArrayList 的序列化问题补充&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;    集合的存储容器elementData 使用transient 关键字修饰不支持序列化，但是我们知道ArrayList 是支持序列化的，那我们是怎么序列化集合中的数据呢，这里不直接序列化elementData，而是遍历每个数据分别进行IO 流处理来实现存储容器中对象的序列化的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ArrayList 列表结构被修改的次数。    &lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; modCount = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; writeObject(java.io.ObjectOutputStream s)
        &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; java.io.IOException{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ArrayList 列表结构被修改的次数。&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; expectedModCount =&lt;span&gt; modCount;
        s.defaultWriteObject();
        s.writeInt(size);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对每一个对象进行IO 流的写处理&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0; i&amp;lt;size; i++&lt;span&gt;) {
            s.writeObject(elementData[i]);
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (modCount !=&lt;span&gt; expectedModCount) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConcurrentModificationException();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;    这里对存储容器Object[] elementData 用transient 关键字修饰，考虑到容器的存储空间在扩容后会产生很大闲置空间，扩容前容量越大这个问题越明显；序列化时会将空的对象空间也进行序列化，而真实存储的元素的数量为size，那样处理的话效率很低，所以这里不支持存储容器直接序列化，而写一个新的方法来只序列化size 个真实元素即可。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 16 Aug 2018 10:09:00 +0000</pubDate>
<dc:creator>niaonao</dc:creator>
<og:description>目录 一、前言二、ArrayList 的继承与实现关系 2.1 ArrayList.java 2.2 抽象类AbstractList.java 2.3 接口List.java 2.4 接口Random</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/niaonao/p/9488953.html</dc:identifier>
</item>
</channel>
</rss>