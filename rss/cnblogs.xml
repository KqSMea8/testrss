<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>第二篇 风雨交加倒淌河，那是青藏见面礼 - zhonghaijing123</title>
<link>http://www.cnblogs.com/zhonghaijing/p/9938597.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhonghaijing/p/9938597.html</guid>
<description>&lt;p&gt;　&lt;span&gt;　这是到达西宁后的第二天，也是青藏线骑行的第一天。从青海西宁到达格尔木，经可可西里无人区，最后到达拉萨，约2000公里。第一天的计划是骑行133公里到青海湖渔场扎营。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　西宁这座城市，虽不能与广州深圳一线城市相比，但也算是应有尽有。我知道，在到达格尔木之前，再也不会有这样的vip待遇。据说后面有些地方不支持微信、支付宝，因此特意去取了些现金，也不敢多取。与王辉和伊斯兰友人道别后，正式上路。西宁的天气不错，风高气爽，阳光明媚，也没有广州的炎热，第一天肌肉足够兴奋，虽然负重，倒也显得轻松。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　开始的平均时速可达20公里每小时，负重骑行可以骑出平原的速度，也是满意。好景不长，骑了不到30公里，天空便飘起了小雨，只好找个无人篷避雨，顺便小憩，过了一会，仍不见雨停。恐耽误行程，坏了与开达兄在格尔木会合之约，只能冒雨前行。穿上雨衣，装备做好防水处理，便继续前行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1431557/201811/1431557-20181110152311908-156782295.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在骑拉萨前，虽没进行过刻意拉练，但平时有保持锻炼，健身、跑步、篮球、单飞百公里是常态。长途单飞，难免会孤独，但也有了更多思考的时间。骑行约53公里，临近潼源，远望到骑行青藏线的“同龄”骑友，加快速度赶了上去，原来是一对65岁的夫妇，皮肤黝黑，话不多却也乐观，精神抖擞，此之前已经骑行近5000公里。我打心底里佩服，顿时感觉这青藏骑行对于他们来说只是小菜，随后一起骑行至潼源。潼源前方便是明月山，明月山海拔3465米，此处去明月山口需爬升800米。靠近山区，天气越发不稳定，前方乌云密布，夫妇俩决定就地休息，风尘仆仆骑行大半天，也难得遇到同伴，我也想就地作伴，明早再一起赶路。但这才是原计划的一半路程，这样的执行力猴年马月才能到拉萨...与夫妇俩告别后，就此上山了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1431557/201811/1431557-20181110125739913-944462777.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　从潼源过去明月山口，超过35公里，相对高度不高，而坡程却很长。骑离潼源不久，天公不作美，又下起了雨。穿上雨衣骑行，动作不舒展，爬坡爬得气喘吁吁，而雨衣不透气，汗水沾湿了里面的衣服。看着时间在慢慢流逝，而速度却越来越慢，幸得上天眷顾，雨渐停，太阳出来了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前面的冒雨超负荷爬坡已耗费大部分体力，身体虽未及透支，但也接近抽筋。不知是不是水土不服的缘故，肚子也闹起了情绪，排山倒海却又一毛不拔。单车一放，往地上一坐，脑子开始了各种自我对话模式，“卧槽，这才第一天啊，后面怎么活啊？”，“咬咬牙坚持好了！”，“单车砸了卖铁去...”，“少折腾，直接拦辆车到拉萨！”，“撑下去，骑一公里就少一公里”，“你没看见你现在爬坡一公里都累得要命吗”，“可是，我现在要走得路，那对夫妇也是得走的啊”，“你的坚持，以后会成为一笔珍贵财富”...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对话归对话，路还是要走的，稍作休息，苦中作乐，继续上路，此时已晚上7点，而天空还是很亮很亮。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1431557/201811/1431557-20181110142730100-628118214.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　感觉骑了很久很久，接近明月山口，坡也陡了起来，寒风之猛烈，身体几乎被刺穿。又饿又累又冷，脚发抖，还逆风，时速四五公里，实在骑不动，就下来推车。沿途风景很美，但无心赏景，也不知这明月山上是否有野狼之类。山口之寒冷，足以让人昏阙，不敢留恋多半步。其呼啸之声，遮掩了我内心的声音。渐渐，天空彻底暗了，我将低声炮DJ音量调到最大，强光手电开到最亮，划破夜空的同时，也想告诫野兽，我 am not善类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从明月山口到最近有人烟的地方，是一个叫倒淌河的小镇。倒淌河位于青海湖日月山西侧，这里是交通要道，这无疑是形成汉藏两族交流渗透的“倒淌河文化”的重要原因。然而，“自从公主和亲后，一半胡俗似汉家”。最早，也许是一个女人的手，架起了这经济、文化，包括爱情的桥梁。倒淌河发源于日月山西麓的察汗草原，海拔约3300米，全长40多公里，自东向西，流入青海湖，故名倒淌河。藏语称“柔莫涌”，意思是令人羡慕喜爱的地方。它是青海湖水系中最小的一支，不仅河流蜿蜒曲折，而且河水清澈见底。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1431557/201811/1431557-20181110155235688-1367242119.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　   明月山口下到倒淌河约15公里，下山瞬时速度可以达到40公里每小时，但行李太多，速度越快，晃动越大，加上路滑，遂将均速控制于二十五公里每小时以下，不算快，也如履薄冰，深怕双手一刹那的颤抖、或者撞到小石直接飞下山谷。晚上十点，终于下到倒淌河镇，入夜的倒淌河镇温度很低，透支后的身体，冷得直哆嗦。十点后的小镇，冷清但还有店家在营业，找了饭馆，点了些菜，喝了不少热开水。也不记得那个小镇是否有热水洗澡，当晚吃了点藿香正气丸，便呼呼入睡。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前路茫茫，还有很长的路要走。第一天所经历的，仿佛是青藏赠予我的小小见面礼，事后也证实，这确实只是一个开始。&lt;/span&gt;&lt;/p&gt;









</description>
<pubDate>Sat, 10 Nov 2018 07:46:00 +0000</pubDate>
<dc:creator>zhonghaijing123</dc:creator>
<og:description>这是到达西宁后的第二天，也是青藏线骑行的第一天。从青海西宁到达格尔木，经可可西里无人区，最后到达拉萨，约2000公里。第一天的计划是骑行133公里到青海湖渔场扎营。 西宁这座城市，虽不能与广州深圳一线</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhonghaijing/p/9938597.html</dc:identifier>
</item>
<item>
<title>重构一段基于原生JavaScript的表格绘制代码 - ljzc002</title>
<link>http://www.cnblogs.com/ljzc002/p/9921998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljzc002/p/9921998.html</guid>
<description>&lt;p&gt;为了在CardSimulate项目中方便的显示技能和效果列表，决定重构以前编写的一段JavaScript代码——att表格绘制库，这段代码的作用是将特定的JavaScript数据对象转化为表格，支持精细的样式设置和一些复杂报表功能并且提供了自由的扩展性。可以用较新的Chrome浏览器访问https://ljzc002.github.io/Att/HTML/TEST/AttSample.html查看新版代码的例子，旧版代码的介绍见：https://www.cnblogs.com/ljzc002/p/5511510.html。&lt;/p&gt;
&lt;p&gt;1、从表格类初始化表格对象&lt;/p&gt;
&lt;p&gt;旧版的代码直接将表格对象作为一个全局变量，新版代码则定义了一个表格类，而每一个表格对象则是表格类的实例，这样就可以方便的在一个页面里添加多个表格对象，并有条理的管理多个表格的工作流程和属性。表格对象的初始化代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * Created by Administrator on 2015/5/11.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;动态画表类，尝试使用自包含结构&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2016/8/31在表格中加入更多的格式选择&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2018/10/31重构att6框架为att7版本&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; Att7=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; Att7.prototype.init=&lt;span&gt;function&lt;/span&gt;(param)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;只初始化对象的属性，不实际绘制&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.base=param.base;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表格的容器对象&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.id=param.id;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表格的id&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.left=param.left?param.left:0;//在容器对象内的左侧距离-&amp;gt;认为tab_data和div_table完全重合&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.top=param.top?param.top:0;//上部距离&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.rowsp=param.rowsp?param.rowsp:50;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认每页显示50条数据，输入负值表示无限制&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;this.page_current=param.page_current?param.page_current:0;//默认显示数据集的第一页，初始索引为0&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.isStripe=param.isStripe?param.isStripe:1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这种三目运算不适用于布尔值！！！！默认奇偶行使用不同颜色&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.isThlocked=param.isThlocked?param.isThlocked:0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认不锁定表头&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.isCollocked=param.isCollocked?param.isCollocked:0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认不锁定表列&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.showIndex=param.showIndex?param.showIndex:1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认在左侧显示行号&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.baseColor=param.baseColor?param.baseColor:&quot;#ffffff&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认背景色为白色，间隔色为背景色亮度降低十六分之一&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.stripeColor=param.stripeColor?param.stripeColor:&quot;#eeeeee&quot;&lt;span&gt;;//有时要求奇数行和偶数行使用不同的颜色
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pickColor=param.pickColor?param.pickColor:&quot;#97ceef&quot;&lt;span&gt;;//选择了某一行时要突出显示这一行
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.div_temp1=document.createElement(&quot;div&quot;&lt;span&gt;);//这几个div用来对背景颜色进行比较，因为不同的浏览器对背景颜色的保存方式不同
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.div_temp1.style.backgroundColor=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.baseColor;//有的用小写字母有的用大写字母，有的用rgb+数字，所以这里主动建立div
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.div_temp2=document.createElement(&quot;div&quot;&lt;span&gt;);//在同样的保存方式下对颜色进行比较
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.div_temp2.style.backgroundColor=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.stripeColor;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.div_temp3=document.createElement(&quot;div&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.div_temp3.style.backgroundColor=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pickColor;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.str_indexwid=param.str_indexwid?param.str_indexwid:&quot;100px&quot;&lt;span&gt;;//索引列的宽度
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.num_toolhei=param.num_toolhei?param.num_toolhei:80&lt;span&gt;;//表格上部的工具区的高度
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;固有属性，点击某些单元格时可以打开的小窗口&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.html_onclick=&quot;&amp;lt;div class=\&quot;div_inmod_lim\&quot; style=\&quot;width: 100%;height: 100%;margin: 0px;border: 1px solid;padding: 0px;&quot; +
&lt;span&gt;38&lt;/span&gt;             &quot;float: left;line-height: 20px\&quot;&amp;gt;    &quot; +
&lt;span&gt;39&lt;/span&gt;             &quot;&amp;lt;div class=\&quot;div_inmod_head\&quot; style=\&quot;width: 100%;height: 20px;background-color: #E0ECFF;margin:0;border: 0;padding:0;border-bottom: 1px solid\&quot;&amp;gt;&quot; +
&lt;span&gt;40&lt;/span&gt;             &quot; &amp;lt;span style=\&quot;float: left;margin-left: 2px\&quot;&amp;gt;详情&amp;lt;/span&amp;gt;&quot; +
&lt;span&gt;41&lt;/span&gt;             &quot;&amp;lt;BUTTON style=\'float:right;aposition:static; width: 14px;height: 14px; margin: 0;margin-top: 2px;margin-right:2px;padding: 0;&quot; +
&lt;span&gt;42&lt;/span&gt;             &quot;background: url(../../ASSETS/IMAGE/close.png) no-repeat;border: 0px;vertical-align:top\' onclick=\&quot;delete_div(\'div_bz\');\&quot; type=submit&amp;gt;&amp;lt;/BUTTON&amp;gt; &quot; +
&lt;span&gt;43&lt;/span&gt;             &quot;&amp;lt;/div&amp;gt; &quot; +
&lt;span&gt;44&lt;/span&gt;             &quot;&amp;lt;textarea class=\&quot;div_inmod_lim_content\&quot; style=\&quot;width: 100%;height: 98px;overflow-x: hidden;margin:0;border: 0;padding:0\&quot; contenteditable=\&quot;false\&quot;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;/div&amp;gt;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.html_onmouseover=&lt;span&gt;//&lt;/span&gt;&lt;span&gt;鼠标移入时弹出的小文本提示框&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;             &quot;&amp;lt;div class=\&quot;div_inmod_lim\&quot; &quot; +
&lt;span&gt;47&lt;/span&gt;             &quot;style=\&quot;width: 100%;height: 100%;margin: 0px;border: 1px solid;padding: 0px;float: left;line-height: 20px\&quot;&amp;gt;    &quot; +
&lt;span&gt;48&lt;/span&gt;                 &quot;&amp;lt;textarea class=\&quot;div_inmod_lim_content\&quot; style=\&quot;width: 100%;height: 100%;overflow-x: hidden;margin:0;border: 0;padding:0\&quot; contenteditable=\&quot;false\&quot;&amp;gt;&quot; +
&lt;span&gt;49&lt;/span&gt;                 &quot;&amp;lt;/textarea&amp;gt; &quot; +
&lt;span&gt;50&lt;/span&gt;             &quot;&amp;lt;/div&amp;gt;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         console.log(&quot;表格初始化异常！&quot;+&lt;span&gt;e);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &quot;ok&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里设置了表格对象的各项属性，第28到33行用不显示的div解决了dom标签颜色比较问题，第37到50行定义了两个窗口小控件以备后续调用。init方法的调用方式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; table1=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Att7();
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; objp=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         base:&quot;div_tab&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         id:&quot;table1&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;left:50,&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;top:50,&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         rowsp:999&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         isThlocked:1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         isCollocked:2,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不包括索引列？-》包括&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         baseColor:&quot;#00ff00&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         stripeColor:&quot;#00aa00&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         pickColor:&quot;#97ceef&quot;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(table1.init(objp)==&quot;ok&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     {//下面是数据显示
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、表格容器的建立：&lt;/p&gt;
&lt;p&gt;表格显示时dom结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/657116/201811/657116-20181107124118616-1308901484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中all_base是所有表格相关元素的总容器，div_tool是表格上面的工具区，里面可以放置一些选择筛选条件的控件，div_tab是表格主体所在的区域，table1是根据数据生成的表格dom，三个div_mask是锁定表头或者锁定表列时使用的遮罩层dom。&lt;/p&gt;
&lt;p&gt;使用的样式表文件如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;专用于表格框架的样式&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;body&lt;/span&gt;{&lt;span&gt;    margin&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;    border&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;position&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;&lt;span&gt;    font-family&lt;/span&gt;:&lt;span&gt; verdana,arial,sans-serif&lt;/span&gt;;&lt;span&gt;    touch-action&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    -ms-touch-action&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;&lt;span&gt;font-size&lt;/span&gt;:&lt;span&gt; 12px&lt;/span&gt;;&lt;span&gt;min-width&lt;/span&gt;:&lt;span&gt; 600px&lt;/span&gt;;}
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#all_base&lt;/span&gt;{&lt;span&gt;min-height&lt;/span&gt;:&lt;span&gt; 576px&lt;/span&gt;;&lt;span&gt;min-width&lt;/span&gt;:&lt;span&gt; 1024px&lt;/span&gt;;&lt;span&gt;height&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;width&lt;/span&gt;:&lt;span&gt;100%&lt;/span&gt;;&lt;span&gt;position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;overflow-x&lt;/span&gt;:&lt;span&gt;auto&lt;/span&gt;;&lt;span&gt;overflow-y&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;}
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;表格的属性&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;td input&lt;/span&gt;{&lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;    border&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;    background-color&lt;/span&gt;:&lt;span&gt; inherit&lt;/span&gt;;}
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;.div_tab&lt;/span&gt;{&lt;span&gt;float&lt;/span&gt;:&lt;span&gt; left&lt;/span&gt;;&lt;span&gt;position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;width&lt;/span&gt;:&lt;span&gt;4000px&lt;/span&gt;;&lt;span&gt;overflow-x&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;overflow-y&lt;/span&gt;:&lt;span&gt; scroll&lt;/span&gt;}
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;.div_tab td&lt;/span&gt;{&lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;border: solid 1px #008000;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    border-right&lt;/span&gt;:&lt;span&gt;solid 1px #008000&lt;/span&gt;;&lt;span&gt;    border-bottom&lt;/span&gt;:&lt;span&gt; solid 1px #008000&lt;/span&gt;;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;&lt;span&gt;    font-size&lt;/span&gt;:&lt;span&gt; 13px&lt;/span&gt;;&lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 24px&lt;/span&gt;;&lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 1px&lt;/span&gt;;&lt;span&gt;    background-color&lt;/span&gt;:&lt;span&gt; inherit&lt;/span&gt;;&lt;span&gt;    word-break&lt;/span&gt;:&lt;span&gt; keep-all&lt;/span&gt;;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;display: inline-block&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;}
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;.div_tab th&lt;/span&gt;{&lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;border: solid 1px #008000;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;&lt;span&gt;    font-size&lt;/span&gt;:&lt;span&gt; 13px&lt;/span&gt;;&lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 1px&lt;/span&gt;;&lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;    border-right&lt;/span&gt;:&lt;span&gt; solid 1px #008000&lt;/span&gt;;&lt;span&gt;    border-bottom&lt;/span&gt;:&lt;span&gt; solid 1px #008000&lt;/span&gt;;&lt;span&gt;    word-break&lt;/span&gt;:&lt;span&gt; keep-all&lt;/span&gt;;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    white-space&lt;/span&gt;:&lt;span&gt;nowrap&lt;/span&gt;;&lt;span&gt;    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;    text-overflow&lt;/span&gt;:&lt;span&gt; ellipsis&lt;/span&gt;;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;display: inline-block&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;}
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;.div_tab table&lt;/span&gt;{&lt;span&gt;    float&lt;/span&gt;:&lt;span&gt; left&lt;/span&gt;;&lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;&lt;span&gt;    border-right-width&lt;/span&gt;:&lt;span&gt;0px&lt;/span&gt;;&lt;span&gt;    border&lt;/span&gt;:&lt;span&gt; solid 1px #008000&lt;/span&gt;;&lt;span&gt;    table-layout&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;}
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;.div_tab tr&lt;/span&gt;{&lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;&lt;span&gt;    vertical-align&lt;/span&gt;:&lt;span&gt; middle&lt;/span&gt;;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;border: solid 1px #008000;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 1px&lt;/span&gt;;}
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;td a&lt;/span&gt;{&lt;span&gt;    cursor&lt;/span&gt;:&lt;span&gt; pointer&lt;/span&gt;;}
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;td button&lt;/span&gt;{&lt;span&gt;    cursor&lt;/span&gt;:&lt;span&gt; pointer&lt;/span&gt;;}
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;.div_mask2&lt;/span&gt;{&lt;span&gt;    display&lt;/span&gt;:&lt;span&gt;block&lt;/span&gt;;&lt;span&gt;    left&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;&lt;span&gt;    top&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;filter: alpha(opacity=50);    opacity: 0.50;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;锁定的表头表列&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;    float&lt;/span&gt;:&lt;span&gt; left&lt;/span&gt;;&lt;span&gt;    overflow-x&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;}
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;{&lt;span&gt;    border-spacing&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;}
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;.div_mask2 td&lt;/span&gt;{&lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;border: solid 1px #008000;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    border-right&lt;/span&gt;:&lt;span&gt;solid 1px #008000&lt;/span&gt;;&lt;span&gt;    border-bottom&lt;/span&gt;:&lt;span&gt; solid 1px #008000&lt;/span&gt;;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;&lt;span&gt;    font-size&lt;/span&gt;:&lt;span&gt; 13px&lt;/span&gt;;&lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 24px&lt;/span&gt;;&lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 1px&lt;/span&gt;;&lt;span&gt;    background-color&lt;/span&gt;:&lt;span&gt; inherit&lt;/span&gt;;&lt;span&gt;    word-break&lt;/span&gt;:&lt;span&gt; keep-all&lt;/span&gt;;}
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;.div_mask2 th&lt;/span&gt;{&lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;border: solid 1px #008000;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt; 16px&lt;/span&gt;;&lt;span&gt;    font-size&lt;/span&gt;:&lt;span&gt; 13px&lt;/span&gt;;&lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 36px&lt;/span&gt;;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 1px&lt;/span&gt;;&lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;    border-right&lt;/span&gt;:&lt;span&gt; solid 1px #008000&lt;/span&gt;;&lt;span&gt;    border-bottom&lt;/span&gt;:&lt;span&gt; solid 1px #008000&lt;/span&gt;;&lt;span&gt;    word-break&lt;/span&gt;:&lt;span&gt; keep-all&lt;/span&gt;;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    white-space&lt;/span&gt;:&lt;span&gt;nowrap&lt;/span&gt;;&lt;span&gt;    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;    text-overflow&lt;/span&gt;:&lt;span&gt; ellipsis&lt;/span&gt;;}
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;.div_mask2 table&lt;/span&gt;{&lt;span&gt;    float&lt;/span&gt;:&lt;span&gt; left&lt;/span&gt;;&lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;&lt;span&gt;    border-right-width&lt;/span&gt;:&lt;span&gt;0px&lt;/span&gt;;&lt;span&gt;    border&lt;/span&gt;:&lt;span&gt; solid 1px #008000&lt;/span&gt;;&lt;span&gt;    table-layout&lt;/span&gt;:&lt;span&gt; fixed&lt;/span&gt;;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;}
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;.div_mask2 tr&lt;/span&gt;{&lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;&lt;span&gt;    vertical-align&lt;/span&gt;:&lt;span&gt; middle&lt;/span&gt;;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;border: solid 1px #008000;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt; 1px&lt;/span&gt;;}
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;.combo-panel li&lt;/span&gt;{&lt;span&gt;    float&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;}
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;.btn_limlen&lt;/span&gt;{    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;float: left;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 20px&lt;/span&gt;;&lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 20px&lt;/span&gt;;&lt;span&gt;    border&lt;/span&gt;:&lt;span&gt; 1px solid&lt;/span&gt;;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin-top: 6px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin-left: 4px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    background&lt;/span&gt;:&lt;span&gt; url(../ASSETS/IMAGE/play.png) no-repeat&lt;/span&gt;;&lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;&lt;span&gt;    -moz-border-radius&lt;/span&gt;:&lt;span&gt; 3px&lt;/span&gt;;      &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Gecko browsers圆角 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    -webkit-border-radius&lt;/span&gt;:&lt;span&gt; 3px&lt;/span&gt;;   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Webkit browsers &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    border-radius&lt;/span&gt;:&lt;span&gt;3px&lt;/span&gt;;            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; W3C syntax &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;     position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    top&lt;/span&gt;:&lt;span&gt; 6px&lt;/span&gt;;&lt;span&gt;    right&lt;/span&gt;:&lt;span&gt; 4px&lt;/span&gt;;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;遗憾的是，因为上述CSS的调试过程太长，以至于已经忘记了这样设置的原因，如果您使用时出现莫名其妙的元素错位，请自己调试。&lt;/p&gt;
&lt;p&gt;3、启动表格绘制&lt;/p&gt;
&lt;p&gt;通过表格对象的draw方法启动表格绘制&lt;/p&gt;
&lt;p&gt;调用draw方法的方式如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;108&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;if(table1.init(objp)==&quot;ok&quot;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     {
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        var obj_datas=[
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;                &quot;测试表格&quot;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                [&quot;测试表头&quot;,&quot;测试表头&quot;,&quot;测试表头&quot;,&quot;测试表头&quot;,&quot;测试表头&quot;,&quot;测试表头&quot;,&quot;测试表头&quot;,&quot;测试表头&quot;],
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                [&quot;str&quot;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                    ,&quot;limit&quot;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                    ,[&quot;switch&quot;,[&quot;value1&quot;,&quot;text1&quot;],[&quot;value2&quot;,&quot;text2&quot;]]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                    ,[&quot;input&quot;,[&quot;class1&quot;],[&quot;height&quot;,&quot;10px&quot;]]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    ,[&quot;select&quot;,&quot;class2&quot;,[[&quot;value1&quot;,&quot;text1&quot;],[&quot;value2&quot;,&quot;text2&quot;],[&quot;value3&quot;,&quot;text3&quot;]],&quot;onChange()&quot;]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                    ,[&quot;check&quot;,&quot;class3&quot;]
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                    ,[&quot;button&quot;,&quot;class4&quot;,&quot;按钮&quot;,&quot;80px&quot;,[&quot;height&quot;,&quot;10px&quot;]]
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                    ,[&quot;a&quot;,&quot;class5&quot;,[&quot;height&quot;,&quot;10px&quot;]]
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                ],
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                [100,200,300,400,500,600,700,800],
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                [&quot;value1&quot;,&quot;value2value2value2value2value2value2value2value2value2value2&quot;,&quot;value1&quot;,&quot;value2&quot;,&quot;value1&quot;,&quot;value2&quot;,&quot;value1&quot;,&quot;value2&quot;],
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                [&quot;value1&quot;,&quot;value2&quot;,&quot;value1&quot;,&quot;value2&quot;,&quot;value1&quot;,&quot;value2&quot;,&quot;value1&quot;,&quot;value2&quot;]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                ,[&quot;value1&quot;,&quot;value2&quot;,&quot;value1&quot;,&quot;value2&quot;,&quot;value1&quot;,&quot;value2&quot;,&quot;value1&quot;,&quot;value2&quot;]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        table1.draw(obj_datas,0);//显示数据obj_datas的第0行
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        requestAnimFrame(function(){table1.AdjustWidth();&lt;/span&gt;}&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中obj_datas是一个自定义的数据对象，这个对象可能从后端程序发送过来也可能是在前台组装生成。requestAnimFrame是截取自谷歌WebGL工具库的一个方法，用来“延时一会”，等待浏览器完成表格容器渲染后，再调整表格尺寸从而使表格布局紧密。&lt;/p&gt;
&lt;p&gt;延时代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Copyright 2010, Google Inc.&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; window.requestAnimFrame = (&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; window.requestAnimationFrame ||
&lt;span&gt; 4&lt;/span&gt;         window.webkitRequestAnimationFrame ||
&lt;span&gt; 5&lt;/span&gt;         window.mozRequestAnimationFrame ||
&lt;span&gt; 6&lt;/span&gt;         window.oRequestAnimationFrame ||
&lt;span&gt; 7&lt;/span&gt;         window.msRequestAnimationFrame ||
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;(&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; function FrameRequestCallback &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; callback, &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; DOMElement Element &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; element) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             window.setTimeout(callback, 1000/60);
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; })();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、表格绘制代码的介绍：&lt;/p&gt;
&lt;p&gt;a、首先做一些和表格翻页有关的准备工作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; Att7.prototype.draw=&lt;span&gt;function&lt;/span&gt;(data,page_current)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实际绘制dom元素&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.totalpages=0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录下一共有多少页&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.rowsp&amp;gt;0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.totalpages=Math.ceil((data.length-4)/this.rowsp);
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.totalpages==0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.totalpages=1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算当前页数&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(page_current&amp;lt;0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         alert(&quot;到达数据首页！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.page_current=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(page_current&amp;gt;=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.totalpages)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         alert(&quot;到达数据末尾&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.page_current=&lt;span&gt;this&lt;/span&gt;.totalpages-1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.page_current=&lt;span&gt;page_current;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 因为att将所有dom标签的生成工作放在浏览器端，所以可以一次性将所有数据从后台读取到前端，由前端JavaScript程序进行分页操作。（而传统表格绘制工具多把dom标签生成放在后台程序中，为了降低后台压力，分页操作多在数据库层面进行）&lt;/p&gt;
&lt;p&gt;翻页方法代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;翻页处理&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; Att7.prototype.ChangePage=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(flag)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     document.body.style.cursor='wait'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;switch&lt;/span&gt;(flag)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不同的翻页动作对应不同的页号处理&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt; &quot;0&quot;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.page_current=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt; &quot;+&quot;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.page_current++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt; &quot;-&quot;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.page_current--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt; &quot;9999&quot;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.page_current=9999&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.draw(&lt;span&gt;this&lt;/span&gt;.data,&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.page_current);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     document.getElementById('t_page_span').innerHTML=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.totalpages;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;万一没有定义&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        AdjustColor();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     document.getElementById('c_page_span').innerHTML=&lt;span&gt;this&lt;/span&gt;.page_current+1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     document.body.style.cursor='default'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; _this=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         requestAnimFrame(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            _this.AdjustWidth()
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据ChangePage方法的不同参数，可以进行四种不同的翻页操作，您可以再需要的地方建立四个按钮来对应这些操作，而翻页操作实际上只是改变了参数的draw方法。t_page_span和c_page_span是两个span标签，用来显示总页数和当前页数。AdjustColor是一个可选的方法，在绘制表格后遍历单元格，根据需求改变符合某种条件的单元格的颜色。（这里并未使用）&lt;/p&gt;
&lt;p&gt;b、在开始绘制之前清理以前可能绘制过的id相同的表格：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;接着上面的翻页准备&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.data=&lt;span&gt;data;//表格的数据集
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt;&lt;span&gt; tab_data;//table标签
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt;&lt;span&gt; tab_colmask;//列锁定遮罩标签
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (document.getElementById(&lt;span&gt;this&lt;/span&gt;.id))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果已有该表&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清理已有的dom&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         tab_data= document.getElementById(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.id);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; parent =&lt;span&gt; tab_data.parentNode;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        parent.removeChild(tab_data);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(document.getElementById(&quot;div_thmask&quot;))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除锁定表头的遮罩层&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; div =document.getElementById(&quot;div_thmask&quot;&lt;span&gt;);//看来这样的设定还不能支持一个页面中同时存在多个锁定表头表格
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            div.parentNode.removeChild(div);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(document.getElementById(&quot;tab_mask2&quot;))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除锁定表列的遮罩层&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; tab =document.getElementById(&quot;tab_mask2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            tab.parentNode.removeChild(tab);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(document.getElementById(&quot;div_thmask3&quot;))&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; tab =document.getElementById(&quot;div_thmask3&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            tab.parentNode.removeChild(tab);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     tab_data = document.createElement(&quot;table&quot;&lt;span&gt;);//重新建立table标签
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     tab_data.id = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.id;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     tab_data.cellPadding = &quot;0&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     tab_data.cellSpacing = &quot;0&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     tab_data.style.position = &quot;absolute&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;tab_data.style.top = this.top + &quot;px&quot;;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;tab_data.style.left = this.left + &quot;px&quot;;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; div_table;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;包含表格的容器元素&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.base;//这个属性可能是id字符串也可能是对象本身
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;((&lt;span&gt;typeof&lt;/span&gt; obj)==&quot;string&quot;||(&lt;span&gt;typeof&lt;/span&gt; obj)==&quot;String&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         div_table =&lt;span&gt; document.getElementById(obj);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         div_table=&lt;span&gt;obj;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     div_table.innerHTML=&quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    div_table.appendChild(tab_data);//将table标签放入容器里
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.div_table=&lt;span&gt;div_table;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     tab_data = document.getElementById(&lt;span&gt;this&lt;/span&gt;.id);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;c、表格表头的绘制与遮罩原理&lt;/p&gt;
&lt;p&gt;在一个简单的表格里绘制表头并不复杂：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; tr1 = document.createElement(&quot;tr&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填写表头（接着清理代码）&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.showIndex==1)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果显示索引列&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.InsertaTHStr(tr1, &quot;第&quot;+(&lt;span&gt;this&lt;/span&gt;.page_current+1) + &quot;页&quot;,&lt;span&gt;this&lt;/span&gt;.str_indexwid);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IE8中缺少参数会报错&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; k = 0; k &amp;lt; data[1].length; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.InsertaTHStr(tr1, data[1][k],(data[3][k]+&quot;px&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    tab_data.appendChild(tr1);//将tr放入table
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     tr1.style.backgroundColor=&lt;span&gt;this&lt;/span&gt;.baseColor;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果选择显示索引列，则在表头的最左侧多插入一个th，InsertaTHStr方法用来向指定tr中插入th，参数分别是tr对象、列名、列宽，这里的data也就是之前构造的数据集。&lt;/p&gt;
&lt;p&gt;InsertaTHStr代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一些工具方法&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 向一个表行中添加字符型表头元素
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * @param tr 表行ID
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * @param str 添加字符
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * @param wid 列宽（字符型px）
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * @constructor
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; Att7.prototype.InsertaTHStr=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(tr,str,wid)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; th=document.createElement(&quot;th&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     th.style.width=wid?wid:&quot;200px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(str==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         str=&quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    th.appendChild(document.createTextNode(str));
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    tr.appendChild(th);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然而当需要锁定表头或者锁定表列时，事情变得复杂，接着绘制表头的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.arr_lock=&lt;span&gt;[];//all_base左右滑动时需要调整位置的元素
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.arr_locky=&lt;span&gt;[];
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.isThlocked==1)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制锁定表头的遮罩层，它的内容和原表格的表头是一样的&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; div_thmask=document.createElement(&quot;div&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         div_thmask.className=&quot;div_mask2&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         div_thmask.id=&quot;div_thmask&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         div_thmask.style.zIndex=&quot;200&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; div_parent=&lt;span&gt;div_table.parentNode;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.div_parent=&lt;span&gt;div_parent;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         div_thmask.style.top=(compPos2(div_table).top-parseInt(div_table.style.height.split(&quot;p&quot;)[0]))+&lt;span&gt;this&lt;/span&gt;.top+&quot;px&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定位添加的遮罩层&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         div_thmask.style.left=compPos2(div_table).left+&lt;span&gt;this&lt;/span&gt;.left+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         div_thmask.style.width=&quot;6000px&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遮罩的最大宽度&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         div_thmask.style.height=&quot;42px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         div_thmask.style.top=&lt;span&gt;this&lt;/span&gt;.num_toolhei+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;div_thmask.getElementsByTagName(&quot;table&quot;)[0].style.backgroundColor=this.baseColor;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; tab_thmask= document.createElement(&quot;table&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; tr_thmask=document.createElement(&quot;tr&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.showIndex==1)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不禁止索引列&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.InsertaTHStr(tr_thmask, &quot;第&quot; + (&lt;span&gt;this&lt;/span&gt;.page_current + 1) + &quot;页&quot;, &lt;span&gt;this&lt;/span&gt;.str_indexwid);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IE8中缺少参数会报错&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; k = 0; k &amp;lt; data[1].length; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.InsertaTHStr(tr_thmask, data[1][k],(data[3][k]+&quot;px&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        tab_thmask.appendChild(tr_thmask);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         tab_thmask.style.backgroundColor=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.baseColor;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        div_thmask.appendChild(tab_thmask);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        div_parent.appendChild(div_thmask);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.isCollocked&amp;gt;0)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制锁定表列的遮罩层，估计不需要外包装的div，可以和data_table共享div_table（考虑到层数决定这样做）&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.arr_lock.push([&quot;tab_mask2&quot;,1,0]);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是要锁定的标签的id，第二个是是否锁定，第三个是标签的初始水平偏移量&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.arr_lock.push([&quot;div_bz&quot;,0,0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         tab_colmask= document.createElement(&quot;table&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         tab_colmask.cellPadding = &quot;0&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         tab_colmask.cellSpacing = &quot;0&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         tab_colmask.style.position = &quot;absolute&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         tab_colmask.className=&quot;div_mask2&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         tab_colmask.id=&quot;tab_mask2&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         tab_colmask.style.zIndex=&quot;150&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         tab_colmask.style.top=&quot;0px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         tab_colmask.style.backgroundColor=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.baseColor
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; tr_mask= document.createElement(&quot;tr&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创造一个占位用的表头行&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.showIndex==1)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不禁止索引列&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.InsertaTHStr(tr_mask, &quot;第&quot; + (&lt;span&gt;this&lt;/span&gt;.page_current + 1) + &quot;页&quot;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.str_indexwid);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; k = 0; k &amp;lt; &lt;span&gt;this&lt;/span&gt;.isCollocked-1; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.InsertaTHStr(tr_mask, data[1][k],(data[3][k]+&quot;px&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        tab_colmask.appendChild(tr_mask);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果同时锁定了表头和左侧的表列&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;((&lt;span&gt;this&lt;/span&gt;.isThlocked==1)&amp;amp;&amp;amp;(&lt;span&gt;this&lt;/span&gt;.isCollocked&amp;gt;0&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.arr_lock.push([&quot;div_thmask3&quot;,1,0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; div_thmask=document.createElement(&quot;div&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         div_thmask.className=&quot;div_mask2&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         div_thmask.id=&quot;div_thmask3&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         div_thmask.style.zIndex=&quot;250&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; div_parent=&lt;span&gt;div_table.parentNode;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         div_thmask.style.top=(compPos2(div_table).top-parseInt(div_table.style.height.split(&quot;p&quot;)))+&quot;px&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定位添加的遮罩层&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         div_thmask.style.left=compPos2(div_table).left+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         div_thmask.style.width=&quot;4000px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;         div_thmask.style.height=&quot;42px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         div_thmask.style.top=&lt;span&gt;this&lt;/span&gt;.num_toolhei+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; tab_thmask= document.createElement(&quot;table&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;         tab_thmask.style.backgroundColor=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.baseColor;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; tr_thmask=document.createElement(&quot;tr&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.showIndex==1)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不禁止索引列&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.InsertaTHStr(tr_thmask, &quot;第&quot; + (&lt;span&gt;this&lt;/span&gt;.page_current + 1) + &quot;页&quot;, &lt;span&gt;this&lt;/span&gt;.str_indexwid);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IE8中缺少参数会报错&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; k = 0; k &amp;lt; &lt;span&gt;this&lt;/span&gt;.isCollocked-1; k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.InsertaTHStr(tr_thmask, data[1][k],(data[3][k]+&quot;px&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;        tab_thmask.appendChild(tr_thmask);
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;        div_thmask.appendChild(tab_thmask);
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;        div_parent.appendChild(div_thmask);
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现表头表列锁定的思路是这样的：首先all_base的大小固定为all_base的容器的大小（在这里等于窗口大小），然后把div_table设置的足够宽（默认4000px），而高度则设为all_base高度减div_tools高度的有限值，这样当table的行数较多且div_table获得焦点时即可用鼠标滚轮控制div_table的内容的上下滚动，而因为div_table的宽度超过all_base，div_table的上下滑动条被隐藏起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/657116/201811/657116-20181110130733887-1830758911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在div_table的内容上下滚动时，因为div_thmask和div_thmask3在div_table外相对于all_base定位，所以不会受div_table滚动的影响，再将z-index设高一些，看起来就是表格内容滚动而表头锁定不变。&lt;/p&gt;
&lt;p&gt;至于表列锁定，首先禁用all_base的上下滑动，只保留左右滑动，因为div_table比all_base宽，所以all_base的左右滑动条一直存在，监听all_base滑动条的滑动事件，在每次滑动时调整div_mask2的水平位置，即可达到看起来锁定了表列的效果。&lt;/p&gt;
&lt;p&gt;在同时锁定了表头和表列时，div_thmask3位于这几个遮罩的最上层，表现二者共同起作用的效果。&lt;/p&gt;
&lt;p&gt;all_base滑动的响应方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; Att7.prototype.ScrollLock=&lt;span&gt;function&lt;/span&gt;()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拖动滑动条时，弹出层随拖动一同移动&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; mask2left=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; mask2top=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; scrollleft=document.getElementById(&quot;all_base&quot;).scrollLeft;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;scrollLeft指滑动条向右滑动的距离&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; scrolltop=document.getElementById(&quot;all_base&quot;&lt;span&gt;).scrollTop;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; arr_lock=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.arr_lock;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; arr_locky=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.arr_locky;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; leng=&lt;span&gt;arr_lock.length;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;leng;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(arr_lock[i][1]==1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;$(&quot;#&quot;+arr_lock[i][0]).css(&quot;left&quot;,mask2left+scrollleft+arr_lock[i][2]+&quot;px&quot;);&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             document.getElementById(arr_lock[i][0]).style.left=mask2left+scrollleft+arr_lock[i][2]+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; leng2=&lt;span&gt;arr_locky.length;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;leng2;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(arr_locky[i][1]==1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;$(&quot;#&quot;+arr_locky[i][0]).css(&quot;top&quot;,mask2top+scrolltop+arr_locky[i][2]+&quot;px&quot;);&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             document.getElementById(arr_locky[i][0]).style.top=mask2top+scrolltop+arr_locky[i][2]+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在实际使用中发现，虽然锁定遮罩里的内容和原表格里的内容相同，但实际渲染时总会出现尺寸偏差，所以在完成渲染后执行AdjustWidth方法重新调整遮罩的宽度：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不断修正让遮罩层的宽高和底层一致&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; Att7.prototype.AdjustWidth=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(document.getElementById(&quot;div_thmask&quot;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ths_mask = document.getElementById(&quot;div_thmask&quot;).getElementsByTagName(&quot;th&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ths = document.getElementById(&lt;span&gt;this&lt;/span&gt;.id).getElementsByTagName(&quot;th&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (ths[0&lt;span&gt;].offsetWidth) {//有宽度说明浏览器已经完成了渲染操作
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.div_table.style.height=&lt;span&gt;this&lt;/span&gt;.div_parent.offsetHeight-&lt;span&gt;this&lt;/span&gt;.num_toolhei-12+&quot;px&quot;&lt;span&gt;;//调整div_table高度
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; leng =&lt;span&gt; ths.length;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; leng; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     ths_mask[i].style.width = (ths[i].offsetWidth - 3) + &quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;i--;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                     &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (document.getElementById(&quot;div_thmask3&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; div_thmask3 = document.getElementById(&quot;div_thmask3&quot;).getElementsByTagName(&quot;th&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; leng2 =&lt;span&gt; div_thmask3.length;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; leng2; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     div_thmask3[i].style.width = (ths[i].offsetWidth - 3) + &quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (document.getElementById(&quot;tab_mask2&quot;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; trs_mask = document.getElementById(&quot;tab_mask2&quot;).getElementsByTagName(&quot;tr&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; trs = document.getElementById(&lt;span&gt;this&lt;/span&gt;.id).getElementsByTagName(&quot;tr&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt; leng3 =&lt;span&gt; trs.length;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 1; i &amp;lt; leng3; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                     trs_mask[i].style.height =(trs[i].offsetHeight)+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {//如果还没有完成渲染，则再延时调用一次
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; _this=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             requestAnimFrame(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                _this.AdjustWidth()//需要注意的是延时操作或者事件触发时，原来的this对象已经随着时间的推移被释放掉了，所以用_this保持这个对象
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果您想为表格添加动态调整列宽功能，可以在列宽变化后调用这个方法；或者如果您想在浏览器尺寸变化后保持div_table和all_bas的紧密贴合也可以将这个方法设为resize事件的响应。&lt;/p&gt;
&lt;p&gt;d、绘制最简单的表格内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接着上面的表头绘制&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.rowsp &amp;gt; 0)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认必须要分页，数据集的第一行是表名、第二行是列名、第三行是列设定、第四行是列宽、第五行开始是数据&lt;/span&gt;
&lt;span&gt;    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rows=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.rowsp;//每一页多少行
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pages=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.page_current;//当前页
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; collock=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isCollocked;//锁定几个表列
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; count=0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记经过了几个没有数据源的列，存在按钮等不填写源数据的列时，data[2]会比data[l]长，为了让后面的类型和数据对应上，应该用m减去count！&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; count_none=0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记经过了几个使用数据源但不显示的列，&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; l = 4 + pages * rows; l &amp;lt; data.length &amp;amp;&amp;amp; (l - pages * rows) &amp;lt; rows + 4; l++&lt;span&gt;)
        {//遍历当前页中的每一条数据
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dataObj2.push(data[l]);&lt;/span&gt;
            count=0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制每一行时都把标记数设为0，其后每检测到一个标记就+1，data[l][m+count]从数据源取数&lt;/span&gt;
            count_none=0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tr2 = document.createElement(&quot;tr&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填写一个表行&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; tr_mask = document.createElement(&quot;tr&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;准备给遮罩层用&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (l % 2 == 0&amp;amp;&amp;amp;&lt;span&gt;this&lt;/span&gt;.isStripe==1)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;偶数的数据行显示为间隔色&lt;/span&gt;
&lt;span&gt;            {
                tr2.style.backgroundColor &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.stripeColor;
                tr_mask.style.backgroundColor &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.stripeColor;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                tr2.style.backgroundColor &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.baseColor;
                tr_mask.style.backgroundColor &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.baseColor;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.showIndex==1)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不禁止索引列&lt;/span&gt;
&lt;span&gt;            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.InsertaTDPick(tr2, l - 3 + &quot;&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个是序号&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;.InsertaTDPick2(tr_mask, l - 3 + &quot;&quot;, &lt;span&gt;this&lt;/span&gt;.id);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遮罩层的序号&lt;/span&gt;
&lt;span&gt;            }

            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; m = 0; m &amp;lt; data[2].length; m++)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一行中的一个单元格，这里可能有多种变化，在length范围外的数据列不会被考虑&lt;/span&gt;
            {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据数据源的第三个元素中存储的DOM信息，为数据的每一列设置不同的控件类型！！！！&lt;/span&gt;
                &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data[2][m] == &quot;str&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;简单的字符类型，要限制下宽度！&lt;/span&gt;
&lt;span&gt;                    {
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.InsertaTDStr(tr2, data[l][m - count],(data[3][m-count_none]+&quot;px&quot;&lt;span&gt;));
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.isCollocked&amp;gt;0&amp;amp;&amp;amp;(m+1)&amp;lt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isCollocked)
                        {
                            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.InsertaTDStr(tr_mask, data[l][m - count],(data[3][m-count_none]+&quot;px&quot;&lt;span&gt;));
                        }
                    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在实际使用中发现每一行数据集的元素数和表格每一行的列数并不总是能一一对应，有时表格的列数比数据集元素多，比如不包含数据集的控件，有时表格宽度比数据集短，比如某一列数据需要设定为“不可见”，为此设置了count和count_none两个计数器对表格和数据集的索引进行调整。&lt;/p&gt;
&lt;p&gt;接下来设置每一个数据tr的颜色，并在需要时向tr推入显示行号的索引列单元格。&lt;/p&gt;
&lt;p&gt;然后遍历数据集这一行的每个数据，根据设置的单元格类型，向tr中推入单元格，对于最简单的str型单元格使用InsertaTDStr方法向tr中添加，其代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * 向一个表行中添加字符型单元格元素
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * @param tr 表行ID
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * @param str 添加字符
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * @param wid 列宽
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * @constructor
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; Att7.prototype.InsertaTDStr=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(tr,str,wid)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; td=document.createElement(&quot;td&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     td.style.width=wid?wid:&quot;200px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(str==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         str=&quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    td.appendChild(document.createTextNode(str));
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    tr.appendChild(td);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着，如果有锁定表列，则也向表列锁定遮罩里推入这个td。&lt;/p&gt;
&lt;p&gt;e、前面的代码中还出现了InsertaTDPick和InsertaTDPick2方法，它们的作用是通过点击原表格或锁定表列遮罩上的行号突出显示某行数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个可以被选中的单元格，选中后改变单元格所在表行的颜色以突出显示&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; Att7.prototype.InsertaTDPick=&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tr,str)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; td=document.createElement(&quot;td&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    td.appendChild(document.createTextNode(str));
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     td.style.cursor=&quot;crosshair&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; _this=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     td.onclick=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;考虑到浏览器可能擅自更改背景颜色样式的字符串表示格式，使用一个不显示的div进行比对&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(td.parentNode.style.backgroundColor!=&lt;span&gt;_this.div_temp3.style.backgroundColor)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果还没变色&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             td.parentNode.style.backgroundColor=&lt;span&gt;_this.pickColor;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(_this.isStripe==1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果已经变色则恢复原本颜色&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(parseInt(td.innerHTML)%2==0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     td.parentNode.style.backgroundColor =&lt;span&gt; _this.baseColor;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     td.parentNode.style.backgroundColor =&lt;span&gt; _this.stripeColor;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 td.parentNode.style.backgroundColor =&lt;span&gt; _this.baseColor;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    tr.appendChild(td);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个给遮罩层用,id是表实体的id&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; Att7.prototype.InsertaTDPick2=&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tr,str,id)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; td=document.createElement(&quot;td&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    td.appendChild(document.createTextNode(str));
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     td.style.cursor=&quot;crosshair&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     td.style.width=&quot;50px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; _this=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     td.onclick=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;526DA5&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(td.parentNode.style.backgroundColor!=&lt;span&gt;_this.div_temp3.style.backgroundColor)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             td.parentNode.style.backgroundColor=_this.pickColor;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改遮罩层&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            ChangeTable(td,_this.pickColor);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(_this.isStripe==1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(parseInt(td.innerHTML)%2==0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                     td.parentNode.style.backgroundColor =&lt;span&gt; _this.baseColor;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                    ChangeTable(td,_this.baseColor);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                     td.parentNode.style.backgroundColor =&lt;span&gt; _this.stripeColor;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;                    ChangeTable(td,_this.stripeColor);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ChangeTable(obj,color)//遮罩层变化之后，原表格也要变化
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; trs=document.getElementById(id).getElementsByTagName(&quot;tr&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找实体表然后去修改&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; leng=&lt;span&gt;trs.length;
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=1;i&amp;lt;leng;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(obj.innerHTML==trs[i].getElementsByTagName(&quot;td&quot;)[0&lt;span&gt;].innerHTML)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;                 trs[i].getElementsByTagName(&quot;td&quot;)[0].parentNode.style.backgroundColor=&lt;span&gt;color;
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;    tr.appendChild(td);
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;f、自定义多样的单元格类型&lt;/p&gt;
&lt;p&gt;att定义了多种常用的复杂报表单元格，也支持您添加自己的单元格类型，时间有限，这里只举两个例子：&lt;/p&gt;
&lt;p&gt;limit单元格：数据长度正常时原样显示，如果数据长度超过单元格宽度太多，则显示缩略文本，同时在单元格里插入一个按钮，点击按钮弹出小对话框显示完整内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(data[2][m] == &quot;limit&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;限制字符长度不能过长&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                         &lt;span&gt;this&lt;/span&gt;.InsertaTDStr_lim(tr2, data[l][m - count],(data[3][m-count_none]+&quot;px&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(collock&amp;gt;0&amp;amp;&amp;amp;(m+1)&amp;lt;&lt;span&gt;collock)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                             &lt;span&gt;this&lt;/span&gt;.InsertaTDStr_lim(tr_mask, data[l][m - count],(data[3][m-count_none]+&quot;px&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;                     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;限制宽度&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; Att7.prototype.InsertaTDStr_lim= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(tr,str,wid,charwid)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;{//
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; td=document.createElement(&quot;td&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     td.style.width=wid?wid:&quot;200px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     td.style.position=&quot;relative&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(str==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         str=&quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; num_wid=parseInt(wid.split(&quot;px&quot;)[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; input1 = document.createElement(&quot;input&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     input1.type=&quot;text&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     input1.style.border = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     input1.style.width =num_wid+&quot;px&quot; ;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;控件宽度&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     input1.style.textAlign = &quot;center&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     input1.style.backgroundColor=&quot;transparent&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     input1.style.&lt;span&gt;float&lt;/span&gt;=&quot;left&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     input1.value=&lt;span&gt;str;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     input1.readOnly=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;input1.onfocus=function(evt){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;     this.blur();这样就不能复制粘贴了！
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;     }&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!charwid)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有设置字宽&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         charwid=10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;((str.length*charwid)&amp;gt;(num_wid*2))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果文字的长度超过了单元格宽度的两倍&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;td.title=str;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;td.overflow=&quot;hidden&quot;;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;str=(str.substr(0,(num_wid*2/10).toFixed()) +&quot;...&quot;);&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试在右侧加一个弹出小按钮？&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;str=(str.substr(0,(num_wid*2/10).toFixed()) );&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         input1.style.width =(num_wid-30)+&quot;px&quot;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        td.appendChild(input1);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; btn =document.createElement(&quot;button&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         btn.className=&quot;btn_limlen&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         btn.title=&lt;span&gt;str;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; _this=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         btn.onclick=&lt;span&gt;function&lt;/span&gt;()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过点击打开的弹出框需要一个关闭按钮，通过鼠标移入打开的弹出框则随移出自动关闭&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;if(clipboardData) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;             clipboardData.clearData();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;             clipboardData.setData(&quot;text&quot;, str);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;             else &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;             if(event.clipboardData)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;             {//火狐？
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;             event.clipboardData.clearData();
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;             event.clipboardData.setData(&quot;text/plain&quot;, str);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;             alert(&quot;内容已复制到剪贴板&quot;);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;             else if(window.clipboardData)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;             {//IE
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;             window.clipboardData.clearData();
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;             window.clipboardData.setData(&quot;text&quot;, str);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;             alert(&quot;内容已复制到剪贴板&quot;);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;              &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;clipboardData.getData(&quot;text&quot;);&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; evt=evt||window.event||arguments[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            cancelPropagation(evt);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; obj=evt.currentTarget?&lt;span&gt;evt.currentTarget:evt.srcElement;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(delete_div(&quot;div_bz&quot;)&amp;gt;0&lt;span&gt;)//清空可能已经显示的其他小窗口
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return;&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             Open_div(&quot;&quot;, &quot;div_bz&quot;, 240, 120, 0, 0, obj, &quot;div_tab&quot;&lt;span&gt;);//自编的一个弹出小窗口方法（旧版）
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;var target={top:,left:}//lim保持不变，尝试添加lim2&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Open_div2(&quot;div_bz&quot;, &quot;div_bz&quot;, 240, 120, 0, 0, obj, &quot;div_tab&quot;);&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;             document.querySelectorAll(&quot;#div_bz&quot;)[0].innerHTML = _this.html_onclick;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向弹出项里写入结构（之前初始化阶段定义的小控件）&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;             document.querySelectorAll(&quot;#div_bz .div_inmod_lim_content&quot;)[0].innerHTML =&lt;span&gt; str;
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;        td.appendChild(btn);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        td.appendChild(input1);
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; 
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;    tr.appendChild(td);
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;select：单元格里是一个下拉框，用户改变选项后触发某些事件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (data[2][m][0] == &quot;select&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;单元格是一个下拉框&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; td2 = document.createElement(&quot;td&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;td2.style.width = &quot;100px&quot;;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;                         td2.style.width=(data[3][m-count_none]+&quot;px&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; select = document.createElement(&quot;select&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                         select.className = data[2][m][1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                         select.style.width = &quot;100px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                         select.selectedIndex=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                         &lt;span&gt;var&lt;/span&gt; temp_i=0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用来暂存下面的i&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; data[2][m][2].length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; option = document.createElement(&quot;option&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                             option.innerHTML = data[2][m][2][i][0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;(data[2][m][2][i][1]) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有的话也不介意设置一个value&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                                 option.value = data[2][m][2][i][1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                            select.appendChild(option);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt;(data[2][m][2][i][1]==data[l][m - count]||data[2][m][2][i][0]==data[l][m - count])&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后台传过来的可能是value也可能是text！！&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                            {//如果这个选项和数据集里的数据相符，则默认把这个选项选中
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                                 option.selected=&quot;selected&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                                 select.selectedIndex=&lt;span&gt;i;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                                 temp_i=&lt;span&gt;i;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         listenEvent(select,&quot;change&quot;&lt;span&gt;,select_onchange);//监听选项变化
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                         select.datachange=data[2][m][3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; select_onchange()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; evt = evt || window.event||arguments[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                             cancelPropagation(evt);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发现如果不阻断事件，会引发button1的click相应！！？？&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; obj=evt.currentTarget?&lt;span&gt;evt.currentTarget:evt.srcElement;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;dataObj2[parseInt(this.parentNode.parentNode.firstChild.innerHTML)%150-1][parseInt(this.className.split(&quot;*&quot;)[1])]=this.value;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;                             eval((obj.getAttribute(&quot;datachange&quot;)?obj.getAttribute(&quot;datachange&quot;&lt;span&gt;):obj.datachange));
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;select.onchange=function()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                         {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                         var evt = evt || window.event;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                         cancelPropagation(evt);//发现如果不阻断事件，会引发button1的click相应！！？？
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                         //dataObj2[parseInt(this.parentNode.parentNode.firstChild.innerHTML)%150-1][parseInt(this.className.split(&quot;*&quot;)[1])]=this.value;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                         eval(data[2][m][3]);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                         }&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                        td2.appendChild(select);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                        tr2.appendChild(td2);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(collock&amp;gt;0&amp;amp;&amp;amp;(m+1)&amp;lt;collock)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于遮罩层&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;var td2a = document.createElement(&quot;td&quot;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                             td2a.style.width=(data[3][m-count_none]+&quot;px&quot;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                             var selecta=select.cloneNode(true);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                             selecta.datachange=data[2][m][3];
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                             td2a.appendChild(selecta);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; td2a=td2.cloneNode(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);//克隆dom元素
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt; selecta=td2a.childNodes[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                             selecta.datachange=data[2][m][3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                             selecta.selectedIndex=&lt;span&gt;temp_i;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;                            tr_mask.appendChild(td2a);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                             listenEvent(selecta,&quot;change&quot;&lt;span&gt;,select_onchange);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5、总结&lt;/p&gt;
&lt;p&gt;基本完成了att的重构工作，旧版中使用jQuery的地方都替换成了原生的JavaScript方法，虽然原生方法的兼容性不如JQuery，但考虑到要配合兼容性更窄的WebGL使用，这些兼容性损失可以忽略。重构的代码没有经过充分测试，可能存在各种问题，您可以访问https://ljzc002.github.io/Att/HTML/TEST/AttSample.html测试部分单元格类型。&lt;/p&gt;

</description>
<pubDate>Sat, 10 Nov 2018 06:47:00 +0000</pubDate>
<dc:creator>ljzc002</dc:creator>
<og:description>为了在CardSimulate项目中方便的显示技能和效果列表，决定重构以前编写的一段JavaScript代码——att表格绘制库，这段代码的作用是将特定的JavaScript数据对象转化为表格，支持精</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljzc002/p/9921998.html</dc:identifier>
</item>
<item>
<title>Mybatis之动态SQL揭秘 - DearLoser</title>
<link>http://www.cnblogs.com/MagicLoser/p/9939304.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MagicLoser/p/9939304.html</guid>
<description>&lt;p&gt;今天小编在这里为大家介绍一下Mybatis的一个强大功能-动态SQL&lt;br/&gt;动态SQL是Mybatis的一个强大的特性，在使用JDBC操作数据时，如果查询条件特别多，将条件串联成SQL字符串是一件非常痛苦的事情，通常的解决方法使写很多的if-else条件语句去判断和拼接，并确保不能忘了空格或在字段的最后省略逗号。Mybatis使用一种强大的动态SQL语言来改善这种情况&lt;br/&gt;动态SQL基于OGNL的表达式，可使我们能方便地在SQL语句中实现某些逻辑，那么有哪些元素来支持这种功能呢？这就是下面我要说的了&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;if：利用if实现简单的条件选择&lt;/li&gt;
&lt;li&gt;choose（when，otherwise）：相当于java中的switch语句，通常与when和otherwise搭配&lt;/li&gt;
&lt;li&gt;where：简化SQL语句中where的条件判断&lt;/li&gt;
&lt;li&gt;set：解决动态更新语句&lt;/li&gt;
&lt;li&gt;trim：可以灵活地去除多余的关键字&lt;/li&gt;
&lt;li&gt;foreach：迭代一个集合，通常用于in条件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面小编所说的这些元素，都是用于mapper.xml文件中的，并且它还是一个标签，双标签。其实用法和咱们普通的编写java用法差不多，接下来小编就来一一讲解一下&lt;br/&gt;单个的元素都好说，来说说组合标签&lt;/p&gt;
&lt;h5 id=&quot;使用ifwhere实现多条件查询&quot;&gt;使用if+where实现多条件查询&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;select id=&quot;getUserList&quot; resultType=&quot;User&quot;&amp;gt;
    select * from user
        &amp;lt;where&amp;gt;
            &amp;lt;if test=&quot;username!=null and userName!=''&quot;&amp;gt;
                and userName like CONCAT('%',#{userName},'%')
            &amp;lt;/if&amp;gt;
        &amp;lt;/where&amp;gt;
&amp;lt;/select&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码就是一个最简单的if+where的SQL映射语句，where元素标签会自动识别其标签内是否有返回值，若有，就插入一个where关键字，此外，若该标签返回的内容是以and或者or开头的，where元素会将其自动剔除，if元素标签里主要的属性就是test属性，test后面跟的是一个表达式，返回true或者false，以此来进行判断。&lt;/p&gt;
&lt;h5 id=&quot;使用iftrim实现对条件查询&quot;&gt;使用if+trim实现对条件查询&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;select id=&quot;getUserList&quot; resultType=&quot;User&quot;&amp;gt;
    select * from user
        &amp;lt;trim prefix=&quot;where&quot; prefixOverride=&quot;and|or&quot;&amp;gt;
            &amp;lt;if test=&quot;username!=null and userName!=''&quot;&amp;gt;
                and userName like CONCAT('%',#{userName},'%')
            &amp;lt;/if&amp;gt;
        &amp;lt;/trim&amp;gt;
&amp;lt;/select&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上述代码中可以看出trim和where元素标签的用法差不多，就trim标签中多了几个元素，那多了啥元素呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;prefix：前缀，作用是在trim包含的内容上加上前缀。&lt;/li&gt;
&lt;li&gt;suffix：后缀，作用是在trim包含的内容上加上后缀。&lt;/li&gt;
&lt;li&gt;prefixOverride：对于trim包含内容的首部进行指定内容（如此出的“and|or“）的忽略。&lt;/li&gt;
&lt;li&gt;suffixOverride：对于trim包含内容的首尾部进行指定内容的忽略。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接下来再来看看使用动态SQL来实现更新操作&lt;/p&gt;
&lt;h5 id=&quot;使用ifset实现更新操作&quot;&gt;使用if+set实现更新操作&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;update id=&quot;modify&quot; parameterType=&quot;AppInfo&quot;&amp;gt;
        update app_info
        &amp;lt;set&amp;gt;
            &amp;lt;if test=&quot;logoPicPath != null&quot;&amp;gt;logoPicPath=#{logoPicPath},&amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;logoLocPath != null&quot;&amp;gt;logoLocPath=#{logoLocPath},&amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;modifyBy != null&quot;&amp;gt;modifyBy=#{modifyBy},&amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;modifyDate != null&quot;&amp;gt;modifyDate=#{modifyDate},&amp;lt;/if&amp;gt;
        &amp;lt;/set&amp;gt;
        where id=#{id}
    &amp;lt;/update&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码就是一个最简单的if+set的动态SQL，从上面的代码中能看出其所做的更新操作是动态的，意思就是说你这个值为不为空，不为空就给你更新，要是为空就不管它，emmmm，看样子它的设计还是很人性化的。&lt;br/&gt;上面的操作也是可以用trim来实现的&lt;/p&gt;
&lt;h5 id=&quot;iftrim实现更新操作&quot;&gt;if+trim实现更新操作&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;update id=&quot;modify&quot; parameterType=&quot;AppInfo&quot;&amp;gt;
        update app_info
        &amp;lt;trim prefix=&quot;set&quot; suffixOverride=&quot;,&quot; suffix=&quot;where id=#{id}&quot;&amp;gt;
            &amp;lt;if test=&quot;logoPicPath != null&quot;&amp;gt;logoPicPath=#{logoPicPath},&amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;logoLocPath != null&quot;&amp;gt;logoLocPath=#{logoLocPath},&amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;modifyBy != null&quot;&amp;gt;modifyBy=#{modifyBy},&amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;modifyDate != null&quot;&amp;gt;modifyDate=#{modifyDate},&amp;lt;/if&amp;gt;
        &amp;lt;/trim&amp;gt;
    &amp;lt;/update&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;小编之前已经介绍过trim的用法了，在这里就不再赘述了，认真的童鞋应该都明白了。&lt;br/&gt;接下来就是使用foreach完成复杂查询，先说说Mybatis入参为数组的foreach迭代&lt;br/&gt;小编先带大家了解一下foreach的基本用法和属性，foreach主要用于在构建in条件中，它可以在SQL语句中迭代一个集合。它的属性主要有：item、index、collection、separator、close、open，下面我们来看代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;select id=&quot;getUserByRole_foreach_array&quot; resultMap=&quot;userMapByRole&quot;&amp;gt;
    select * from user_info where userRole in
        &amp;lt;foreach collection=&quot;array&quot; item=&quot;roleIds&quot; open=&quot;(&quot;separator&quot;,&quot;close=&quot;)&quot;&amp;gt;
                #{roleIds}
        &amp;lt;/foreach&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;resultMap tye=&quot;User&quot; id=&quot;userMapByRole&quot;&amp;gt;
    &amp;lt;id property=&quot;id&quot; clumn=&quot;id&quot;/&amp;gt;
    &amp;lt;result property=&quot;userCode&quot; column=&quot;userCode/&amp;gt;
    &amp;lt;result property=&quot;userName&quot; column=&quot;userName/&amp;gt;
&amp;lt;/resultMap&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于SQL条件循环（in语句），需要使用foreach标签，那小编就用上述代码来向大家介绍一下foreach的基本属性&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Item：表示集合中每一个元素进行迭代的别名(如此处的roleIds)。&lt;/li&gt;
&lt;li&gt;index：指定一个名称，用于表示在迭代过程中，每次迭代到的位置。&lt;/li&gt;
&lt;li&gt;open：表示该语句以什么开始（既然是in条件语句，所以必然是以“(”开始）&lt;/li&gt;
&lt;li&gt;separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是in条件语句，所以必然以“,作为分隔符）。&lt;/li&gt;
&lt;li&gt;close：表示该语句以什么结束（既然是in条件语句，所以必然是以“)”结束）。&lt;/li&gt;
&lt;li&gt;collection：最关键并最容易出错的属性，需格外注意，该属性必须指定，不同情况下，该属性的值是不一样的。主要有三种情况
&lt;ul&gt;&lt;li&gt;若入参为单参数且参数类型是一个list的时候，collection属性值为list。&lt;/li&gt;
&lt;li&gt;若入参为单参数且参数类型是一个数组的时候，collection属性值为array（此处传入参数Integer[] roleIds为数组类型，故此处collection属性值设为“array”）。&lt;/li&gt;
&lt;li&gt;若传入参数为多参数，就需要把它们封装为一个Map进行处理。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以上就是动态SQL的基本语法和元素了，想要学习更多的知识，欢迎大家的关注。。。。。。。。&lt;/p&gt;
</description>
<pubDate>Sat, 10 Nov 2018 06:16:00 +0000</pubDate>
<dc:creator>DearLoser</dc:creator>
<og:description>今天小编在这里为大家介绍一下Mybatis的一个强大功能 动态SQL 动态SQL是Mybatis的一个强大的特性，在使用JDBC操作数据时，如果查询条件特别多，将条件串联成SQL字符串是一件非常痛苦的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MagicLoser/p/9939304.html</dc:identifier>
</item>
<item>
<title>4.《python自省指南》学习 - 南宫恨</title>
<link>http://www.cnblogs.com/ydkh/p/9939266.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ydkh/p/9939266.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;  前面几篇博客我都是通过python自省来分析代码并试图得出结论。当然，仅仅通过自省能解决的问题有限，但遇到问题还是不自主的去用这个功能，觉得对于认识代码的含义还是有一定帮助的。而这些自省的知识我都是从&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-pyint/#artrelatedtopics&quot;&gt;python自省指南&lt;/a&gt;中学习的。所以，下文的内容基本参考自这份指南，看官可以直接转跳，笔者只是希望通过博客整理自己的思路，检验学习效果。&lt;/p&gt;
&lt;h2&gt;python自省是什么？&lt;/h2&gt;
&lt;p&gt;  在计算机编程中，自省是指编程语言检查某些事物以确定它是什么、有何属性及能做什么。&lt;/p&gt;
&lt;h2&gt;寻求帮助--help&lt;/h2&gt;
&lt;p&gt;  打开python的IDLE,就进入到了python解释器中，python解释器本身是被认为是一个主模块，然后在解释器提示符&amp;gt;&amp;gt;&amp;gt;下输入一些我们想了解的信息，所以首先我们会先寻求帮助，所以输入help,接着输入help()，我们就进入了help utility，然后循着提示keywords，modules，以了解python的关键字以及python自带的或者我们额外安装和定义的模块，如果要退出，输入'q'，然后回车。&lt;/p&gt;
&lt;p&gt;  如果我们想了解某个对象(python里面所有对象都可以认为是对象），也可以求助也help(),不过要在括号里输入对象的名称，格式help(object)，例如help(print),鉴于对象的自省内容太多，有的只粘贴出部分内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help
Type help() &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; interactive help, &lt;span&gt;or&lt;/span&gt; help(object) &lt;span&gt;for&lt;/span&gt;&lt;span&gt; help about object.
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help()

Welcome to Python &lt;/span&gt;3.6&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s help utility!&lt;/span&gt;
&lt;span&gt;
If this &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; your first time using Python, you should definitely check out
the tutorial on the Internet at https:&lt;/span&gt;//docs.python.org/3.6/tutorial/&lt;span&gt;.

Enter the name of any module, keyword, &lt;/span&gt;&lt;span&gt;or&lt;/span&gt;&lt;span&gt; topic to get help on writing
Python programs &lt;/span&gt;&lt;span&gt;and&lt;/span&gt; using Python modules.  To quit this help utility &lt;span&gt;and&lt;/span&gt;
&lt;span&gt;return&lt;/span&gt; to the interpreter, just type &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.
...
help&lt;/span&gt;&amp;gt;&lt;span&gt; keywords

Here &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a list of the Python keywords.  Enter any keyword to get more help.

False               &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;                  &lt;span&gt;raise&lt;/span&gt;&lt;span&gt;
None                &lt;/span&gt;&lt;span&gt;del&lt;/span&gt;                 &lt;span&gt;import&lt;/span&gt;              &lt;span&gt;return&lt;/span&gt;&lt;span&gt;
True                &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt;                &lt;span&gt;in&lt;/span&gt;                  &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;and&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;                &lt;span&gt;is&lt;/span&gt;                  &lt;span&gt;while&lt;/span&gt;&lt;span&gt;
as                  &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;              &lt;span&gt;lambda&lt;/span&gt;&lt;span&gt;              with
&lt;/span&gt;&lt;span&gt;assert&lt;/span&gt;              &lt;span&gt;finally&lt;/span&gt;             nonlocal            &lt;span&gt;yield&lt;/span&gt;
&lt;span&gt;break&lt;/span&gt;               &lt;span&gt;for&lt;/span&gt;                 &lt;span&gt;not&lt;/span&gt;                 
&lt;span&gt;class&lt;/span&gt;               &lt;span&gt;from&lt;/span&gt;                &lt;span&gt;or&lt;/span&gt;                  
&lt;span&gt;continue&lt;/span&gt;            &lt;span&gt;global&lt;/span&gt;              &lt;span&gt;pass&lt;/span&gt;&lt;span&gt;                

help&lt;/span&gt;&amp;gt;&lt;span&gt; modules

Please wait a moment &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; I gather a list of all available modules...

PIL                 base64              idlelib             runpy
&lt;/span&gt;&lt;span&gt;__future__&lt;/span&gt;&lt;span&gt;          bdb                 idna                runscript
&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;            binascii            idna_ssl            sched
_ast                binhex              imaplib             scrolledlist
_asyncio            bisect              imghdr              search
_bisect             browser             imp                 
...
Enter any module name to get more help.  Or, type &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;modules spam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; to search
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; modules whose name &lt;span&gt;or&lt;/span&gt; summary contain the string &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Help on built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt; function &lt;span&gt;print&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module builtins:

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(...)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(value, ..., sep=&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;, end=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, file=sys.stdout, flush=&lt;span&gt;False)
    
    Prints the values to a stream, &lt;/span&gt;&lt;span&gt;or&lt;/span&gt;&lt;span&gt; to sys.stdout by default.
    Optional keyword arguments:
    file:  a file&lt;/span&gt;-&lt;span&gt;like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;sys模块&lt;/h2&gt;
&lt;p&gt;  sys模块提供关于python本身的详细内在信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sys.executable            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;sys.executable 变量，它包含到 Python 解释器的路径；    &lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Python36\\pythonw.exe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; 
&amp;gt;&amp;gt;&amp;gt; sys.platform                &lt;span&gt;#&lt;/span&gt;&lt;span&gt;platform变量显示解释器所处的操作系统；&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;win32&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sys.version                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ersion变量说明解释器的版本；&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sys.argv[0]                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;vargv变量是一个包含命令行参数的列表；&lt;/span&gt;
&lt;span&gt;''&lt;/span&gt;                              &lt;span&gt;#&lt;/span&gt;&lt;span&gt;argv[0]是脚本运行的路径，当我们以交互方式运行 Python 时，这个值是空字符串；&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sys.path                    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;path 变量是模块搜索路径，Python 在导入期间将在其中的目录列表中寻找模块。最前面的空字符串 '' 是指当前目录；&lt;/span&gt;
[&lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Python36\\Lib\\idlelib&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Python36\\python36.zip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Python36\\DLLs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Python36\\lib&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Python36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Python36\\lib\\site-packages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;变量sys.stdin、sys.stdout和sys.stderr是类似于文件的流对象，表示标准的UNIX概念：标准输入、标准输出和标准错误。&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sys.stdin                    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Python从sys.stdin获取输入(如，用于input中),&lt;/span&gt;
&amp;lt;idlelib.run.PseudoInputFile object at 0x02343F50&amp;gt;
&amp;gt;&amp;gt;&amp;gt; sys.stdout                     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将输出打印到sys.stdout。&lt;/span&gt;
&amp;lt;idlelib.run.PseudoOutputFile object at 0x02343F70&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sys.stderr
&lt;/span&gt;&amp;lt;idlelib.run.PseudoOutputFile object at 0x02343F90&amp;gt;
&amp;gt;&amp;gt;&amp;gt; 

'''一个标准数据输入源是sys.stdin。当程序从标准输入读取时，你可通过输入来提供文本，也可使用管道将标准输入关联到其他程序的标准输出。你提供给print的文本出现在sys.stdout中，向input提供的提示信息也出现在这里。写入到sys.stdout的数据通常出现在屏幕上，但可使用管道将其重定向到另一个程序的标准输入。错误消息（如栈跟踪）被写入到sys.stderr，但与写入到sys.stdout的内容一样，可对其进行重定向，例如：$ cat somefile.txt | python somescript.py | sort。可以认为，somescript.py从其sys.stdin中读取数据（这些数据是somefile.txt写入的），并将结果写入到其sys.stdout（sort将从这里获取数据）。'''
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;somescript.py内容&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
text &lt;/span&gt;=&lt;span&gt; sys.stdin.read()
words &lt;/span&gt;=&lt;span&gt; text.split()
wordcount &lt;/span&gt;=&lt;span&gt; len(words)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Wordcount:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, wordcount)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;somefile.txt内容&lt;/span&gt;
Your mother was a hamster &lt;span&gt;and&lt;/span&gt;&lt;span&gt; your
father smelled of elderberries.

cat somefile.txt &lt;/span&gt;|&lt;span&gt; python somescript.py的结果如下：
Wordcount: &lt;/span&gt;11
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;dir()函数、__doc__文档字符串&lt;/h2&gt;
&lt;p&gt;  dir()函数返回传递给它的任何对象的属性名称经过排序的列表。如果不指定对象，则 dir() 返回当前作用域中的名称。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; dir()
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__annotations__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__builtins__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__loader__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__package__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__spec__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; dir(sys)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__displayhook__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__excepthook__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__interactivehook__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__loader__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__package__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__spec__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__stderr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__stdin__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__stdout__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_clear_type_cache&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_current_frames&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_debugmallocstats&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_enablelegacywindowsfsencoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_getframe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_git&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_xoptions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;api_version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;argv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;base_exec_prefix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;base_prefix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;builtin_module_names&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;byteorder&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;call_tracing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;callstats&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;copyright&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
...
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在 dir() 示例中，有一个属性是 __doc__ 属性。这个属性是一个字符串，它包含了描述对象的注释，python称之为文档字符串或 docstring。文档字符串通常包含嵌入的换行 \n ，如何要使其变得易读，可以print出来&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sys.&lt;span&gt;__doc__&lt;/span&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else &lt;/span&gt;
&lt;span&gt;...
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(sys.&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;)
This module provides access to some objects used &lt;/span&gt;&lt;span&gt;or&lt;/span&gt;&lt;span&gt; maintained by the
interpreter &lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt; to functions that interact strongly with the interpreter.

Dynamic objects:

argv &lt;/span&gt;-- command line arguments; argv[0] &lt;span&gt;is&lt;/span&gt; the script pathname &lt;span&gt;if&lt;/span&gt; knownpath -- module search path; path[0] &lt;span&gt;is&lt;/span&gt; the script directory, &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;type()--检查python对象&lt;/h2&gt;
&lt;p&gt;  编程环境中的对象试图是模拟现实世界中的对象。实际的对象有一定的形状、大小、重量和其它特征，还会对其环境进行响应、与其它对象交互或执行任务。计算机中的对象则通过象文档、日程表和业务过程这样的抽象对象模拟现实对象。&lt;/p&gt;
&lt;p&gt;  类似于实际的对象，几个计算机对象可能共享共同的特征，同时保持它们自己相对较小的变异特征。书籍是个抽象的概念，书店书籍的每个物理副本都可能有污迹、几张破损的书页或唯一的标识号。但每本书都只是原始模板的实例，并保留了原始模板的大多数特征。再比如说柏拉图的理想模型，可以说每种饼干都是来自于同一个模型&lt;/p&gt;
&lt;p&gt;  对于面向对象的类和类实例也是如此。每个实例都是以类为模板，每个实例都有类的相同属性，但每个不同实例又有某些不同的地方比如属性值等，这就是面向对象。&lt;/p&gt;
&lt;p&gt;  type() 函数有助于我们确定对象是字符串还是整数，或是其它类型的对象。它通过返回类型对象来做到这一点，可以将这个类型对象与 types 模块中定义的类型相比较：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;101&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help(type)
Help on &lt;/span&gt;&lt;span&gt;class&lt;/span&gt; type &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module builtins:

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; type(object)
 &lt;/span&gt;|&lt;span&gt;  type(object_or_name, bases, dict)
 &lt;/span&gt;|  type(object) -&amp;gt; the object&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s type&lt;/span&gt;
 |  type(name, bases, dict) -&amp;gt;&lt;span&gt; a new type
 &lt;/span&gt;|  
 |&lt;span&gt;  Methods defined here:
 &lt;/span&gt;|  
 |  &lt;span&gt;__call__&lt;/span&gt;(self, /, *args, **&lt;span&gt;kwargs)
 &lt;/span&gt;|&lt;span&gt;      Call self as a function.
 &lt;/span&gt;|  
 |  &lt;span&gt;__delattr__&lt;/span&gt;(self, name, /&lt;span&gt;)
 &lt;/span&gt;|&lt;span&gt;      Implement delattr(self, name).
 &lt;/span&gt;|  
 |  &lt;span&gt;__dir__&lt;/span&gt;&lt;span&gt;(...)
 &lt;/span&gt;|      &lt;span&gt;__dir__&lt;/span&gt;() -&amp;gt;&lt;span&gt; list
 &lt;/span&gt;|      specialized &lt;span&gt;__dir__&lt;/span&gt; implementation &lt;span&gt;for&lt;/span&gt;&lt;span&gt; types
 &lt;/span&gt;|  
 |  &lt;span&gt;__getattribute__&lt;/span&gt;(self, name, /&lt;span&gt;)
 &lt;/span&gt;|&lt;span&gt;      Return getattr(self, name).
 &lt;/span&gt;|  
 |  &lt;span&gt;__init__&lt;/span&gt;(self, /, *args, **&lt;span&gt;kwargs)
 &lt;/span&gt;|      Initialize self.  See help(type(self)) &lt;span&gt;for&lt;/span&gt;&lt;span&gt; accurate signature.
 &lt;/span&gt;|&lt;span&gt;  
...
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; type.&lt;span&gt;__doc__&lt;/span&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type(object_or_name, bases, dict)\ntype(object) -&amp;gt; the object's type\ntype(name, bases, dict) -&amp;gt; a new type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; dir(type)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__abstractmethods__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__base__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__bases__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__basicsize__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__class__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__delattr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__dict__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__dictoffset__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__dir__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__eq__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__flags__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__format__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__ge__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__getattribute__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__gt__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__hash__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__init_subclass__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__instancecheck__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__itemsize__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__le__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__lt__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__module__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__mro__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__ne__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__prepare__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__qualname__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reduce__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reduce_ex__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__repr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__setattr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__sizeof__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__subclasscheck__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__subclasses__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__subclasshook__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__text_signature__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__weakrefoffset__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mro&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; object
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; object.&lt;span&gt;__doc__&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;The most base type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help(object)
Help on &lt;/span&gt;&lt;span&gt;class&lt;/span&gt; object &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module builtins:

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; object
 &lt;/span&gt;|&lt;span&gt;  The most base type
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; help(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
Class definitions
&lt;/span&gt;*****************&lt;span&gt;

A &lt;/span&gt;&lt;span&gt;class&lt;/span&gt; definition defines a &lt;span&gt;class&lt;/span&gt;&lt;span&gt; object (see section The standard
type hierarchy):

   classdef    ::&lt;/span&gt;= [decorators] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; classname [inheritance] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; suite
   inheritance ::&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; [argument_list] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
   classname   ::&lt;/span&gt;=&lt;span&gt; identifier

A &lt;/span&gt;&lt;span&gt;class&lt;/span&gt; definition &lt;span&gt;is&lt;/span&gt;&lt;span&gt; an executable statement.  The inheritance list
usually gives a list of base classes (see Metaclasses &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; more
advanced uses), so each item &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; the list should evaluate to a &lt;span&gt;class&lt;/span&gt;&lt;span&gt;
object which allows subclassing.  Classes without an inheritance list
inherit, by default, &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; the base &lt;span&gt;class&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;; hence,

   &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo:
       &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;is&lt;/span&gt;&lt;span&gt; equivalent to

   &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo(object):
       &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;对象的名称--__&lt;strong&gt;name__&lt;/strong&gt;、__&lt;strong&gt;main__&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;  并非所有对象都有名称，但那些有名称的对象都将名称存储在其 &lt;strong&gt;name&lt;/strong&gt; 属性中。名称是从对象而不是引用该对象的变量中派生的。模块拥有名称，Python 解释器本身被认为是顶级模块或主模块。当以交互的方式运行 Python 时，局部 &lt;strong&gt;name&lt;/strong&gt; 变量被赋予值 '&lt;strong&gt;main&lt;/strong&gt;' 。同样地，当从命令行执行 Python 模块，而不是将其导入另一个模块时，其 &lt;strong&gt;name&lt;/strong&gt; 属性被赋予值 '&lt;strong&gt;main&lt;/strong&gt;' ，而不是该模块的实际名称。这样，模块可以查看其自身的 &lt;strong&gt;name&lt;/strong&gt; 值来自行确定它们自己正被如何使用，是作为另一个程序的支持，还是作为从命令行执行的主应用程序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;.&lt;span&gt;__name__&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt; &lt;span&gt;__main__&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; help(&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;)
Help on module &lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;:

NAME
    &lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;

DATA
    &lt;/span&gt;&lt;span&gt;__annotations__&lt;/span&gt; =&lt;span&gt; {}

FILE
    (built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;__main__&lt;/span&gt;
&amp;lt;module &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; (built-&lt;span&gt;in&lt;/span&gt;)&amp;gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A:
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; A.&lt;span&gt;__name__&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;__name__&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; A.&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;
Traceback (most recent call last):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;pyshell#19&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 1, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;span&gt;
    A.&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;
AttributeError: type object &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; has no attribute &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;__main__&lt;/span&gt;
&amp;lt;module &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; (built-&lt;span&gt;in&lt;/span&gt;)&amp;gt;
&amp;gt;&amp;gt;&amp;gt; help(&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;)
Help on module &lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;:

NAME
    &lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;

CLASSES
    builtins.object
        A
    
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A(builtins.object)
     &lt;/span&gt;|&lt;span&gt;  Data descriptors defined here:
     &lt;/span&gt;|  
     |  &lt;span&gt;__dict__&lt;/span&gt;
     |      dictionary &lt;span&gt;for&lt;/span&gt; instance variables (&lt;span&gt;if&lt;/span&gt;&lt;span&gt; defined)
     &lt;/span&gt;|  
     |  &lt;span&gt;__weakref__&lt;/span&gt;
     |      list of weak references to the object (&lt;span&gt;if&lt;/span&gt;&lt;span&gt; defined)

DATA
    &lt;/span&gt;&lt;span&gt;__annotations__&lt;/span&gt; =&lt;span&gt; {}

FILE
    (built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; B:
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; help(&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;)
Help on module &lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;:

NAME
    &lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;

CLASSES
    builtins.object
        A
        B
    
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A(builtins.object)
     &lt;/span&gt;|&lt;span&gt;  Data descriptors defined here:
     &lt;/span&gt;|  
     |  &lt;span&gt;__dict__&lt;/span&gt;
     |      dictionary &lt;span&gt;for&lt;/span&gt; instance variables (&lt;span&gt;if&lt;/span&gt;&lt;span&gt; defined)
     &lt;/span&gt;|  
     |  &lt;span&gt;__weakref__&lt;/span&gt;
     |      list of weak references to the object (&lt;span&gt;if&lt;/span&gt;&lt;span&gt; defined)
    
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; B(builtins.object)
     &lt;/span&gt;|&lt;span&gt;  Data descriptors defined here:
     &lt;/span&gt;|  
     |  &lt;span&gt;__dict__&lt;/span&gt;
     |      dictionary &lt;span&gt;for&lt;/span&gt; instance variables (&lt;span&gt;if&lt;/span&gt;&lt;span&gt; defined)
     &lt;/span&gt;|  
     |  &lt;span&gt;__weakref__&lt;/span&gt;
     |      list of weak references to the object (&lt;span&gt;if&lt;/span&gt;&lt;span&gt; defined)

DATA
    &lt;/span&gt;&lt;span&gt;__annotations__&lt;/span&gt; =&lt;span&gt; {}

FILE
    (built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dir(&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__annotations__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__builtins__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__loader__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__package__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__spec__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sys&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dir(&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__annotations__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__builtins__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__loader__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__package__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__spec__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sys&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  在检查类实例的时候，我们常常会见到类似于这样的自省：&amp;lt;class '&lt;strong&gt;main&lt;/strong&gt;.A'&amp;gt;，这里的__main__是一个模块，定义了顶层变量，A是该模块的一个属性，这个属性是一个类，这个类是A，当我们用type去检查A的实例a时，就有了&amp;lt;class '&lt;strong&gt;main&lt;/strong&gt;.A'&amp;gt;，a实例属于主模块下的A类的实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A:
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(A)
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; a=&lt;span&gt;A()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(a)
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__.A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;id--标识，地址&lt;/h2&gt;
&lt;p&gt;  每个对象都有标识、类型和值。id表明变量所引用的对象，值得注意的是，可能有多个变量引用同一对象，同样地，变量可以引用看起来相似（有相同的类型和值），但拥有截然不同标识的多个对象。当更改对象时（如将某一项添加到列表），这种关于对象标识的概念尤其重要，id() 函数给任何给定对象返回唯一的标识符。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help(id)
Help on built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt; function id &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module builtins:

id(obj, &lt;/span&gt;/&lt;span&gt;)
    Return the identity of an object.
    
    This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; guaranteed to be unique among simultaneously existing objects.
    (CPython uses the object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s memory address.)&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; id.&lt;span&gt;__doc__&lt;/span&gt;
     
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Return the identity of an object.\n\nThis is guaranteed to be unique among simultaneously existing objects.\n(CPython uses the object's memory address.)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(id)
     
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;builtin_function_or_method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; a=5
     
&amp;gt;&amp;gt;&amp;gt; b=&lt;span&gt;a
     
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; id(a)
     
&lt;/span&gt;1664672592
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; id(b)
     
&lt;/span&gt;1664672592
&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;可调用、实例、子类&lt;/h2&gt;
&lt;p&gt;  可以用 callable() 函数测试对象的可调用性;在 type() 函数提供对象的类型时，还可以使用 isinstance() 函数测试对象，以确定它是否是某个特定类型或定制类的实例;issubclass() 函数使我们可以查看一个类是不是继承了另一个类;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;81&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help(callable)
     
Help on built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt; function callable &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module builtins:

callable(obj, &lt;/span&gt;/&lt;span&gt;)
    Return whether the object &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; callable (i.e., some kind of function).
    
    Note that classes are callable, as are instances of classes with a
    &lt;/span&gt;&lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;() method.

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; callable.&lt;span&gt;__doc__&lt;/span&gt;
     
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Return whether the object is callable (i.e., some kind of function).\n\nNote that classes are callable, as are instances of classes with a\n__call__() method.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(callable)
     
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;builtin_function_or_method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; callable(&lt;span&gt;print&lt;/span&gt;&lt;span&gt;)
     
True
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; callable(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
     
False
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help(isinstance)
     
Help on built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt; function isinstance &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module builtins:

isinstance(obj, class_or_tuple, &lt;/span&gt;/&lt;span&gt;)
    Return whether an object &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; an instance of a &lt;span&gt;class&lt;/span&gt; &lt;span&gt;or&lt;/span&gt;&lt;span&gt; of a subclass thereof.
    
    A tuple, as &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; ``isinstance(x, (A, B, ...))``, may be given as the target to
    check against. This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; equivalent to ``isinstance(x, A) &lt;span&gt;or&lt;/span&gt;&lt;span&gt; isinstance(x, B)
    &lt;/span&gt;&lt;span&gt;or&lt;/span&gt;&lt;span&gt; ...`` etc.

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; isinstance.&lt;span&gt;__doc__&lt;/span&gt;
     
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Return whether an object is an instance of a class or of a subclass thereof.\n\nA tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to\ncheck against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)\nor ...`` etc.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(callable)
     
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;builtin_function_or_method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; callable(43&lt;span&gt;, int)
     
Traceback (most recent call last):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;pyshell#35&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 1, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;span&gt;
    callable(&lt;/span&gt;43&lt;span&gt;, int)
TypeError: callable() takes exactly one argument (&lt;/span&gt;2&lt;span&gt; given)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(isinstance)
     
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;builtin_function_or_method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; isinstance(45&lt;span&gt;, int)
     
True
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, int)
     
False
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str)
     
True
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help(issubclass)
     
Help on built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt; function issubclass &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module builtins:

issubclass(cls, class_or_tuple, &lt;/span&gt;/&lt;span&gt;)
    Return whether &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; a derived &lt;span&gt;from&lt;/span&gt; another &lt;span&gt;class&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; the same &lt;span&gt;class&lt;/span&gt;&lt;span&gt;.
    
    A tuple, as &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; ``issubclass(x, (A, B, ...))``, may be given as the target to
    check against. This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; equivalent to ``issubclass(x, A) &lt;span&gt;or&lt;/span&gt;&lt;span&gt; issubclass(x, B)
    &lt;/span&gt;&lt;span&gt;or&lt;/span&gt;&lt;span&gt; ...`` etc.

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; issubclass.&lt;span&gt;__doc__&lt;/span&gt;
     
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Return whether 'cls' is a derived from another class or is the same class.\n\nA tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to\ncheck against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)\nor ...`` etc.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; type(issubclass)
     
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;builtin_function_or_method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A:
     &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

     
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; B(A):
     &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

     
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; issubclass(B, A)
     
True
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; C:
     &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

     
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; issubclass(B, C)
     
False
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 10 Nov 2018 06:15:00 +0000</pubDate>
<dc:creator>南宫恨</dc:creator>
<og:description>前言 前面几篇博客我都是通过python自省来分析代码并试图得出结论。当然，仅仅通过自省能解决的问题有限，但遇到问题还是不自主的去用这个功能，觉得对于认识代码的含义还是有一定帮助的。而这些自省的知识我</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ydkh/p/9939266.html</dc:identifier>
</item>
<item>
<title>C# 数据类型转换   显式转型、隐式转型、强制转型 - 痴者工良</title>
<link>http://www.cnblogs.com/whuanle/p/9938918.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/whuanle/p/9938918.html</guid>
<description>&lt;p&gt;C# 的类型转换有 &lt;strong&gt;显式转型&lt;/strong&gt; 和 &lt;strong&gt;隐式转型&lt;/strong&gt; 两种方式。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;显式转型：有可能引发异常、精确度丢失及其他问题的转换方式&lt;/strong&gt;&lt;/span&gt;。需要使用手段进行转换操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;隐式转型：不会改变原有数据精确度、引发异常，不会发生任何问题的转换方式&lt;/span&gt;&lt;/strong&gt;。由系统自动转换。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 不同类型的数据进行操作(加减乘除赋值等等)，是需要进行 &lt;span&gt;类型转换&lt;/span&gt; 后，才能继续操作&lt;/strong&gt;。所以需要“类型转换”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;隐式转型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;隐式转型容易理解，当两种或多种数据类型进行某种操作时，不需要干预，系统会&lt;span&gt;自动进行隐式转换。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
        int i = 66666;
        long b = i;　　　　//转为 long 类型后为 b 赋值
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　通常情况下，多种 值类型 进行计算时，系统会自动进行隐式转型，并且总是转为范围更大的数据类型，并且不会发生精确度变化、数字大小变化等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110115239543-204015559.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110115259897-778034314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;显式转型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题是，但你需要把一个 long 类型的数据转成 int 时，又或者让 string 与 int 互转，当数据小数点太多时，这时候就必须使用 显式转型。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一，使用 ([type])  转型操作符&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此方法适用与值类型转换( string属于引用类型)&lt;/p&gt;
&lt;p&gt;在需要转换的变量前加上( [类型] )即可&lt;/p&gt;
&lt;p&gt;请仔细观察下面两图的差异&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110120222905-1725219162.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110120349517-60709882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二张图中的代码中，第二行，为 int b = (int)i;  &lt;/p&gt;
&lt;p&gt;在需要转换的变量前使用 ([type]) 这种格式进行转换，如(int)、(float)、(long)&lt;/p&gt;
&lt;p&gt;注意，&lt;/p&gt;
&lt;p&gt;此种方法只能对 &lt;strong&gt;值类型 &lt;/strong&gt;数据进行转换。&lt;/p&gt;
&lt;p&gt; 不能将范围大的类型 往 小 转换 ，例如 float 转为 int&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110130820509-796538576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二，[Type].Parse()&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; ([type]) 方法是无法在值类型、引用类型( string 类型)间转换的。&lt;/p&gt;
&lt;p&gt;但每种数据类型都提供一个Parse()方法，它允许把 &lt;span&gt;&lt;strong&gt;&lt;span&gt;字符串 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;转成对应的 数值类型。&lt;/p&gt;
&lt;p&gt;int.Parse()&lt;/p&gt;
&lt;p&gt;float.Parse()&lt;/p&gt;
&lt;p&gt;... ...&lt;/p&gt;
&lt;p&gt;请看例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
        string str = &quot;666&quot;;
        long i = int.Parse(str);
        Console.WriteLine($&quot;{i},{i.GetType()}&quot;);
        Console.ReadKey();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(图如)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110121739339-653337163.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Parse() 是专为 string 类型转成 值类型 提供功能的！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Parse() 是为符合数字格式的 string 类型进行转换！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面的例子都是错误用法 ！&lt;/p&gt;
&lt;p&gt; &lt;span&gt;Parse() 是将符合数字格式的字符串转为数字&lt;/span&gt;，也就是说，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;( )括号内的必须为字符串 ！&lt;/li&gt;
&lt;li&gt;字符串的内容必须为数字 ！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例子 1     ( )  括号内的内容不是字符串&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110121246527-449015330.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;例子 2   变量 str 的内容不是 有效数字格式&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110122456035-933211732.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三，[Type].TryParse()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;格式如下&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;int.TryParse()&lt;/p&gt;
&lt;p&gt;float.TryParse()&lt;/p&gt;
&lt;p&gt;... ...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;.TryParse() &lt;/span&gt;&lt;/strong&gt;与 &lt;strong&gt;.Parse() &lt;/strong&gt;&lt;strong&gt; 相似，但是使用形式不太一样，&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;[类型].TryParse(要更改的字符串,out 存储到哪个变量);　&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;最重要的不同点在于，&lt;/strong&gt; &lt;strong&gt;.TryParse()  在转换失败时，不会引发异常，而是返回 flase&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
        string str = &quot;666&quot;;
        int i;
        bool b = int.TryParse(str,out i);　　　　//接收转换结果
或者

        string str = &quot;666&quot;;
        int i;
        int.TryParse(str,out i);　　　　//不接收转换结果
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果你不知道 out 的使用，请查阅 &lt;a title=&quot;C#中的out参数/ref参数/params可变参数&quot; href=&quot;https://www.cnblogs.com/wy0904/p/8145202.html&quot; target=&quot;_blank&quot;&gt;C#中的out参数/ref参数/params可变参数&lt;/a&gt;&lt;a title=&quot;C#中的out参数/ref参数/params可变参数&quot; href=&quot;https://www.cnblogs.com/wy0904/p/8145202.html&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四，System.Convert&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法例子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;System.Convert.ToSingle();&lt;br/&gt;System.Convert.ToInt32();&lt;br/&gt;System.Convert.ToDouble();&lt;/p&gt;
&lt;p&gt;... ...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;System.Convert  允许将一种类型转为另一种类型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见 类型列表： char、sbyte、short、int、long、uint、ulong、float、double、decimal、string、bool ... ...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;但是，同样需要格式支持！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
        string str = &quot;666&quot;;
        int a= System.Convert.ToInt32(str);        //正确

        string str = &quot;666.66&quot;;
        int a= System.Convert.ToInt32(str);        //报错

        int a = 66666;
        bool c = System.Convert.ToBoolean(a);        //正确

        string str = &quot;666.66&quot;;
        bool c = System.Convert.ToBoolean(str);        //报错

   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　System.Convert 在转换是也需要注意 格式 才能转换成功。&lt;/p&gt;
&lt;p&gt;       同样，此方式也会发生精确度、数字大小改变&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1315495/201811/1315495-20181110130610750-299373560.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;第五，System.Convert&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;.Tostring()&lt;/p&gt;
&lt;p&gt;每种数据类型都提供了转为字符串类型的方法 ToString()&lt;/p&gt;
&lt;p&gt;无论是值类型还是DateTime 等各种引用类型。&lt;/p&gt;
&lt;p&gt;ToString()使用方法最为简单，请留意下列例子的红色背景部分&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test
{

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;666&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; aa =&lt;span&gt;&lt;span&gt; a.ToString()&lt;/span&gt;;
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{aa}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; b = &lt;span&gt;666.666F&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; bb =&lt;span&gt;&lt;span&gt; b.ToString()&lt;/span&gt;;
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{bb}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        DateTime c &lt;/span&gt;=&lt;span&gt; DateTime.Now;
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; cc =&lt;span&gt;&lt;span&gt; c.ToString()&lt;/span&gt;;
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{cc}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        FileInfo d &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FileInfo(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:\\test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; dd =&lt;span&gt;&lt;span&gt; d.ToString()&lt;/span&gt;;
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{dd}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; ee;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; e = x /&lt;span&gt; y;
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
        {
            ee &lt;/span&gt;=&lt;span&gt; ex.&lt;span&gt;ToString()&lt;/span&gt;;
            Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{ee}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }


        Console.ReadKey();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到了吧？无论什么类型，只需在后面加上 ToString() ， 都能 &lt;span&gt;&lt;strong&gt;&lt;span&gt;输出 string 类型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;的内容。（不是转为 string 类型！）&lt;/p&gt;
&lt;p&gt;当然，ToString() 是一个方法，并提供了 一下传入参数，每种类型都有几个重载的 TOString() 方法，例如DateTime的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ToString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; format, IFormatProvider provider);
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ToString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; format);
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString(IFormatProvider provider);
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ToString();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其它方面不再赘述。&lt;/p&gt;

&lt;p&gt;复制下列代码到控制台，看看输出了什么&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test
{

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main()
    {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;666&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; aa =&lt;span&gt; a.ToString();
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{aa}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; b = &lt;span&gt;666.666F&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; bb =&lt;span&gt; b.ToString();
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{bb}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        DateTime c &lt;/span&gt;=&lt;span&gt; DateTime.Now;
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; cc =&lt;span&gt; c.ToString();
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{cc}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        FileInfo d &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FileInfo(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:\\test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; dd =&lt;span&gt; d.ToString();
        Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{dd}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; ee;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; y = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; e = x /&lt;span&gt; y;
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
        {
            ee &lt;/span&gt;=&lt;span&gt; ex.ToString();
            Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{ee}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }


        Console.ReadKey();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 10 Nov 2018 05:38:00 +0000</pubDate>
<dc:creator>痴者工良</dc:creator>
<og:description>C# 的类型转换有 显式转型 和 隐式转型 两种方式。 显式转型：有可能引发异常、精确度丢失及其他问题的转换方式。需要使用手段进行转换操作。 隐式转型：不会改变原有数据精确度、引发异常，不会</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/whuanle/p/9938918.html</dc:identifier>
</item>
<item>
<title>Redis-cluster - 南岭寒</title>
<link>http://www.cnblogs.com/nanlinghan/p/9939161.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nanlinghan/p/9939161.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;集群结构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1176659/201811/1176659-20181110132020487-1692436656.png&quot; alt=&quot;&quot; width=&quot;464&quot; height=&quot;290&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;特点:&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;    1 所有redis节点(包括主和从)彼此互联(两两通信),底层使用内部的二进制传输协议,优化传输速度;(所有功能特点的基础)&lt;br/&gt;    2 集群中也有主从,也有高可用的逻辑,但是没有哨兵进程,整合到主节点的功能里了;集群中的事件被主节点(大部分主节点);通过主节点的过半选举实现哨兵以前的逻辑;&lt;br/&gt;    3 客户端与redis-cluster连接,无需关心分片的计算,客户端不在关心分片的计算逻辑,内部分发分布式数据(内部有分片计算逻辑),客户端将key交给redis节点后,集群内部判断key值的正确存储位置,转发存储;&lt;br/&gt;    4 redis-cluster把所有的主节点对应到[0-16383]整数区间--槽道slot;各自的主节点维护一批槽道号(0-5000,5001-10000,10001-16383);在分片计算时,对key值做hash取模运算(就是取余,不在使用hashCode,CRC16);key值对应的取模运算结果,将会判断由哪个节点维护;将key--slot--node,如果我们想要迁移某个key值,必须将对应的slot一并迁移;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;核心概念操作的工作原理&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;存储获取值时的转发逻辑&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1176659/201811/1176659-20181110132105772-697408599.png&quot; alt=&quot;&quot; width=&quot;567&quot; height=&quot;343&quot;/&gt;&lt;/p&gt;
&lt;p&gt;槽道迁移,数据key迁移&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1176659/201811/1176659-20181110132134272-656462589.png&quot; alt=&quot;&quot; width=&quot;566&quot; height=&quot;336&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;redis的集群槽道原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;槽道原理抛2个问题:&lt;br/&gt;    1 节点接收数据计算槽道号后,如何判断当前槽道号是否归我管?&lt;br/&gt;    2 判断不归本节点管理时,如何获取正确管理者信息&lt;br/&gt;    &lt;br/&gt;    &lt;br/&gt;槽道逻辑结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1176659/201811/1176659-20181110132332392-99296747.png&quot; alt=&quot;&quot; width=&quot;575&quot; height=&quot;485&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;    槽道是一种计算逻辑&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;    计算逻辑:&lt;br/&gt;        ○ 二进制16384位的位序列可以实现当前节点判断槽道号管理权的逻辑;(16384位二进制就是2048个元素的byte数组)&lt;br/&gt;        计算二进制,获取人为定义的二进制下标号(人为定义,计算位移计算),每一位的下标号对应二进制(1/0),与下标号一直的槽道号到底归不归当前节点管理,是通过下标对应的二进制值判断1表示管理true,0表示不管理false;&lt;br/&gt;        特点:&lt;br/&gt;        1每个主节点都管理一批槽道,每个主节点的16384位的二进制不一样&lt;br/&gt;        2从节点和没有槽道管理权的主节点的二进制是全是0&lt;br/&gt;        &lt;br/&gt;　　模拟获取二进制下标和对应二进制值的代码(byte):&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;        @Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test(){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt; a=55&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;假设,这个byte二进制代表位序列中第一个byte&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            System.out.println(Integer.toBinaryString(a));
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取定义的0号下标对应的二进制&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;8;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一次移动7位,第二次移动6,第三次移动5&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; move=8-i-1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; result=(a&amp;gt;&amp;gt;move)&amp;amp;1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 System.out.println(&quot;当前&quot;+i+&quot;号下标对应的二进制&quot;+&lt;span&gt;result);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;        ○ 索引数组&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;16384个元素的数组,下标0-16383,每个下标对应的元素引用的变量,指向内存中一个保存下标对应槽道号管理者的索引节点信息;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1176659/201811/1176659-20181110132527715-724910587.png&quot; alt=&quot;&quot; width=&quot;712&quot; height=&quot;461&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;   总结&lt;/span&gt;&lt;/strong&gt;:存入数据时,首先对存入的key值进行取模运算,通过计算,得到key值对应的槽道(16384个槽道,其实是一个16389个元素索引数组,每个数组元素变量保存着相对应槽道号管理者的节点信息), 获取槽道信息,根据对应槽道号数组元素变量的信息找到对应的主节点,并将数据存入主节点;&lt;br/&gt;如何找到槽道号相对应的主节点???底层是根据二进制计算得出,是由16384个二进制位找到主节点的槽道号,并将主节点的相关信息保存在槽道号对应数组元素的变量中.当有数据存入或者取出时,计算key值得槽道号,找到对应的数组元素,通过这个数组元素中节点的信息,找到节点,进行存取操作.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; redis集群的命令&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　　集群&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　cluster info ：打印集群的信息&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster nodes ：列出集群当前已知的所有节点（ node），以及这些节点的相关信息。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　节点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster meet &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; ：将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster forget &amp;lt;node_id&amp;gt; ：从集群中移除 node_id 指定的节点(保证空槽道)。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster replicate &amp;lt;node_id&amp;gt; ：将当前节点设置为 node_id 指定的节点的从节点。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster saveconfig ：将节点的配置文件保存到硬盘里面。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　槽(slot)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster addslots &amp;lt;slot&amp;gt; [slot ...] ：将一个或多个槽（ slot）指派（ assign）给当前节点。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster delslots &amp;lt;slot&amp;gt; [slot ...] ：移除一个或多个槽对当前节点的指派。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster flushslots ：移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster setslot &amp;lt;slot&amp;gt; node &amp;lt;node_id&amp;gt; ：将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　另一个节点，那么先让另一个节点删除该槽&amp;gt;，然后再进行指派。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster setslot &amp;lt;slot&amp;gt; migrating &amp;lt;node_id&amp;gt; ：将本节点的槽 slot 迁移到 node_id 指定的节点中。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster setslot &amp;lt;slot&amp;gt; importing &amp;lt;node_id&amp;gt; ：从 node_id 指定的节点中导入槽 slot 到本节点。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster setslot &amp;lt;slot&amp;gt; stable ：取消对槽 slot 的导入（ import）或者迁移（ migrate）。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　键&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster keyslot &amp;lt;key&amp;gt; ：计算键 key 应该被放置在哪个槽上。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster countkeysinslot &amp;lt;slot&amp;gt; ：返回槽 slot 目前包含的键值对数量。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　cluster getkeysinslot &amp;lt;slot&amp;gt; &amp;lt;count&amp;gt; ：返回 count 个 slot 槽中的键 &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 10 Nov 2018 05:32:00 +0000</pubDate>
<dc:creator>南岭寒</dc:creator>
<og:description>集群结构 特点: 1 所有redis节点(包括主和从)彼此互联(两两通信),底层使用内部的二进制传输协议,优化传输速度;(所有功能特点的基础) 2 集群中也有主从,也有高可用的逻辑,但是没有哨兵进程,</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nanlinghan/p/9939161.html</dc:identifier>
</item>
<item>
<title>我眼里的前端工程化 - zechau</title>
<link>http://www.cnblogs.com/zechau/p/9545708.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zechau/p/9545708.html</guid>
<description>&lt;p&gt;如果你不了解一个人的过去，那你根本不会明白他／她为何是现在的样子。所以，在开始聊前端工程化之前，让我们先来回顾下前端的过去。前端的发展可以总结为三个阶段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/497833/201811/497833-20181110130349298-1539747635.png&quot; alt=&quot;&quot; width=&quot;730&quot; height=&quot;181&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;后端附属物&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;可以说浏览器的诞生孕育了前端，而前端诞生之初更多的是作为后端的附属物。在我刚接触前端时，我其实先学的php。那时候前后端是不分离的，前端用来写样式和模版yi以及js动效然后交由后端渲染及输出。所以整个过程是由后端主导的，前端还只是玩具。 那这时候会有工程化吗？答案是肯定的，任何软件工程都需要工程化，只是前端尚未独立成一项工程，还谈不上工程化。而后端早就作为一项成熟的软件工程，有着各种工程化的实现。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;前后端分离&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;随着ajax等技术以及nodejs语言的诞生，前后端开始出现分离，前端开始接手模版渲染的工作，而后端则更专注于接口等服务的提供。分离之后，前端得到了解放，众多出色的框架相继诞生，如backbone, angular, reactjs, vue等优秀框架。随着前端自主性增强，前端慢慢具备了作为独立一项软件工程的条件，工程化变成了必要。于是基于nodejs实现的开源工程化工具开始出现，如grunt, gulp, webpack等。当然像google，facebook等大公司早就有前端工程化方案，只是没有对外开源。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;入侵全端&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;09年，天才的Ryan Dahl给前端界带来了nodejs，赋予了JS在后端运行的能力以及开发客户端的能力。而HybridApp，React Native等技术又让前端拥有开发移动APP的能&lt;/p&gt;
&lt;p&gt;力。&lt;/p&gt;
&lt;p&gt;至此，前端已经演进成一项成熟的软件工程，即所谓的前端工程化。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;软件工程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;前端发展成了一项软件工程，那什么是软件工程呢？我们先来看下它的定义：&lt;/p&gt;
&lt;p&gt;软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。&lt;span&gt;它涉及&lt;span&gt;程序设计语言&lt;/span&gt;、&lt;span&gt;数据库&lt;/span&gt;、&lt;span&gt;软件开发工具&lt;/span&gt;、系统平台、标准、&lt;span&gt;设计模式&lt;/span&gt;等方面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所以，我认为前端工程化就是以工程化方法构建和维护有效、实用和高质量的前端应用。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;流程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; 上面说了一大堆理论，那么怎么实现工程化呢？相信很多人脑中会冒出grunt、gulp、webpack这些打包工具以及一堆脚手架。但是前端工程化绝不是等同于一堆脚手架工具，这些脚手架工具只是为了实现工程化，即构建和维护前端应用。软件交付一般流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/497833/201811/497833-20181110130622351-1243558223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;每个阶段都需要用工程化的方法去实现，这又涉及到前端开发所用到的技术。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;前端技术&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/497833/201811/497833-20181110130509538-1284831948.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结起来，前端归根到底也就是html、css、js这三项技术。但在前端的演进过程中，发展出了这些基本技术的衍生品。如jsx是recatjs发明的对html语法的扩展；sass是对css语法的扩展；typescript是js语言的变种。这些衍生物最终还是需要还原成最基本的html，css，js后前端应用才能运行起来。这些都需要一些工具来辅助处理，如bable，postcss等，这些工具是我们构建前端应用必不可少的。而grunt、gulp、webpack则可以帮助我们集成这些工具，方便前端开发调试，并构建出最终可以用于生产环境的高质量应用。当然构建只是工程化的一部分，软件交付后还需要持续维护。像日志上报、异常监控及恢复等都措施都要进一步跟进。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我认为前端工程化就是用工程化方法构建和维护有效的、实用的和高质量的前端应用。&lt;/p&gt;
</description>
<pubDate>Sat, 10 Nov 2018 05:26:00 +0000</pubDate>
<dc:creator>zechau</dc:creator>
<og:description>阐述自己对前端工程化的理解</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zechau/p/9545708.html</dc:identifier>
</item>
<item>
<title>OpenCV颜色转换和皮肤检测 - 小佬頭</title>
<link>http://www.cnblogs.com/GeekHuman/p/9938906.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GeekHuman/p/9938906.html</guid>
<description>&lt;p&gt;本笔记重点记录OpenCV中的颜色转换和利用色彩空间的特性进行皮肤检测&lt;/p&gt;
&lt;h2 id=&quot;颜色转换&quot;&gt;颜色转换&lt;/h2&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;实现原理&lt;/h3&gt;
&lt;p&gt;之所以要引入色调/饱和度/亮度的色彩空间概念，是因为人们喜欢凭直觉分辨各种颜色，而它与这种方式吻合。实际上，人类更喜欢用色彩、彩度、亮度等直观的属性来描述颜色，而大多 数直觉色彩空间正是基于这三个属性。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;色调（hue）表示主色，我们使用的颜色名称（例如绿色、 黄色和红色）就对应了不同的色调值；&lt;/li&gt;
&lt;li&gt;饱和度（saturation）表示颜色的鲜艳程度，柔和的颜色饱 和度较低，而彩虹的颜色饱和度就很高&lt;/li&gt;
&lt;li&gt;亮度（brightness）是一个主观的属性，表示某种 颜色的光亮程度。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其他直觉色彩空间使用颜色明度（value）或颜色亮度（lightness）的概念描述 有关颜色的强度。&lt;/p&gt;
&lt;p&gt;利用这些颜色概念，能尽可能地模拟人类对颜色的直观感知。因此，它们没有标准的定义。 根据文献资料，色调、饱和度和亮度都有多种不同的定义和计算公式。OpenCV 建议的两种直觉 色彩空间的实现是 HSV 和 HLS 色彩空间，它们的转换公式略有不同，但是结果非常相似。&lt;/p&gt;
&lt;p&gt;亮度成分可能是最容易解释的。在 OpenCV 对 HSV 的实现中，它被定义为三个 BGR 成分中 的最大值，以非常简化的方式实现了亮度的概念。为了让定义更符合人类视觉系统，应该使用均 匀感知的色彩空间 L&lt;em&gt;a&lt;/em&gt;b&lt;em&gt;和 L&lt;/em&gt;u&lt;em&gt;v&lt;/em&gt;的 L 通道。举个例子，L 通道已经考虑到了，在强度相同的 情况下，人们会觉得绿色比蓝色等颜色的亮度更高。&lt;/p&gt;
&lt;p&gt;OpenCV 用一个公式来计算饱和度，该公式基于 BGR 组件的最小值和最大值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1505284/201811/1505284-20181110121047651-415675111.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其原理是：灰度颜色包含的 R、G、B 的成分是相等的，相当于一种极不饱和的颜色，因此 它的饱和度是 0（饱和度是一个 0~1.0 的值）。对于 8 位图像，饱和度被调节成一个 0~255 的值， 并且作为灰度图像显示的时候，较亮区域对应的颜色具有较高的饱和度。&lt;/p&gt;
&lt;p&gt;利用opencv把RGB图片像HSV颜色空间转变（CV_BGR2HSV）的时候，&lt;/p&gt;
&lt;p&gt;H通道的值范围为： 0-180&lt;/p&gt;
&lt;p&gt;S： 0-255&lt;/p&gt;
&lt;p&gt;V：0-255&lt;/p&gt;
&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;
#include &amp;lt;opencv2/core/core.hpp&amp;gt;
#include &amp;lt;opencv2/highgui/highgui.hpp&amp;gt;
#include &amp;lt;opencv2/imgproc/imgproc.hpp&amp;gt;

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

int main()
{
    // 读入图像
    cv::Mat image= cv::imread(&quot;boldt.jpg&quot;);
    if (!image.data)
        return 0;

    // 原始图像
    cv::namedWindow(&quot;Original image&quot;);
    cv::imshow(&quot;Original image&quot;,image);

    // 转换成HSV色彩空间
    cv::Mat hsv;
    cv::cvtColor(image, hsv, CV_BGR2HSV);

    // 把三个通道分割进三幅图像中
    std::vector&amp;lt;cv::Mat&amp;gt; channels;
    cv::split(hsv,channels);
    // channels[0] 色调
    // channels[1] 饱和度
    // channels[2] 亮度

    // 亮度
    cv::namedWindow(&quot;Value&quot;);
    cv::imshow(&quot;Value&quot;,channels[2]);

    // display 饱和度
    cv::namedWindow(&quot;Saturation&quot;);
    cv::imshow(&quot;Saturation&quot;,channels[1]);

    // display 色调
    cv::namedWindow(&quot;Hue&quot;);
    cv::imshow(&quot;Hue&quot;,channels[0]);
    cv::waitKey();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;实现效果&quot;&gt;实现效果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1505284/201811/1505284-20181110121035994-804702976.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;皮肤检测&quot;&gt;皮肤检测&lt;/h2&gt;
&lt;p&gt;8 位版本的色调在 0~180，饱和度在 0~255&lt;/p&gt;
&lt;h3 id=&quot;实现原理-1&quot;&gt;实现原理&lt;/h3&gt;
&lt;p&gt;在对特定物体做初步检测时，颜色信息非常有用。例如辅助驾驶程序中的路标检测功能，就要凭借标准路标的颜色快速识别可能是路标的信息。另一个例子是肤色检测，检测到的皮肤区域 可作为图像中有人存在的标志。手势识别就经常使用肤色检测确定手的位置。&lt;/p&gt;
&lt;p&gt;肤色检测领域的大量研究已经表明，来自不同人种的人群的皮肤颜色，可以在色调、饱和度、色彩空间中很好地归类。&lt;/p&gt;
&lt;h3 id=&quot;实现代码-1&quot;&gt;实现代码&lt;/h3&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;
#include &amp;lt;opencv2/core/core.hpp&amp;gt;
#include &amp;lt;opencv2/highgui/highgui.hpp&amp;gt;
#include &amp;lt;opencv2/imgproc/imgproc.hpp&amp;gt;

#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

void detectHScolor(const cv::Mat&amp;amp; image,       // input image
                   double minHue, double maxHue,   // Hue interval
                   double minSat, double maxSat,   // saturation interval
                   cv::Mat&amp;amp; mask) {             // output mask

    // convert into HSV space
    cv::Mat hsv;
    cv::cvtColor(image, hsv, CV_BGR2HSV);

    // split the 3 channels into 3 images
    std::vector&amp;lt;cv::Mat&amp;gt; channels;
    cv::split(hsv, channels);
    // channels[0] is the Hue
    // channels[1] is the Saturation
    // channels[2] is the Value

    // Hue masking
    cv::Mat mask1; // below maxHue
    cv::threshold(channels[0], mask1, maxHue, 255, cv::THRESH_BINARY_INV);
    cv::Mat mask2; // over minHue
    cv::threshold(channels[0], mask2, minHue, 255, cv::THRESH_BINARY);

    cv::Mat hueMask; // hue mask
    if (minHue &amp;lt; maxHue)
        hueMask = mask1 &amp;amp; mask2;
    else // if interval crosses the zero-degree axis
        hueMask = mask1 | mask2;

    // Saturation masking
    // below maxSat
    cv::threshold(channels[1], mask1, maxSat, 255, cv::THRESH_BINARY_INV);
    // over minSat
    cv::threshold(channels[1], mask2, minSat, 255, cv::THRESH_BINARY);

    cv::Mat satMask; // saturation mask
    satMask = mask1 &amp;amp; mask2;

    // combined mask
    mask = hueMask&amp;amp;satMask;
}

int main()
{
    // 读入图像
    cv::Mat image= cv::imread(&quot;girl.jpg&quot;);
    if (!image.data)
        return 0;
    // show original image
    cv::namedWindow(&quot;Original image&quot;);
    cv::imshow(&quot;Original image&quot;,image);
    // detect skin tone
    cv::Mat mask;
    detectHScolor(image,
              160, 10, // hue from 320 degrees to 20 degrees
              25, 166, // saturation from ~0.1 to 0.65
              mask);
// show masked image
    cv::Mat detected(image.size(), CV_8UC3, cv::Scalar(0, 0, 0));
    image.copyTo(detected, mask);
    cv::imshow(&quot;Detection result&quot;,detected);
    cv::waitKey();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;实现效果-1&quot;&gt;实现效果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1505284/201811/1505284-20181110121022331-1091532257.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;可改进的地方&quot;&gt;可改进的地方&lt;/h3&gt;
&lt;p&gt;在检测时没有考虑颜色的亮度。在实际应用中，排除较高亮度的颜色可以降低把明亮的淡红色误认为皮肤的可能性。所以要想对皮肤颜色进行可靠和准确的检测， 还需要更加精确的分析。对不同的图像进行检测，也很难保证效果都好，因为摄影时影响彩色再 现的因素有很多，如白平衡和光照条件等。&lt;/p&gt;
</description>
<pubDate>Sat, 10 Nov 2018 04:19:00 +0000</pubDate>
<dc:creator>小佬頭</dc:creator>
<og:description>本笔记重点记录OpenCV中的颜色转换和利用色彩空间的特性进行皮肤检测 颜色转换 实现原理 之所以要引入色调/饱和度/亮度的色彩空间概念，是因为人们喜欢凭直觉分辨各种颜色，而它与这种方式吻合。实际上，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GeekHuman/p/9938906.html</dc:identifier>
</item>
<item>
<title>前端工程化系列[06]-Yeoman脚手架核心机制 - 文顶顶</title>
<link>http://www.cnblogs.com/wendingding/p/9938874.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wendingding/p/9938874.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/yeoman02.png?raw=true&quot; alt=&quot;&quot; width=&quot;586&quot; height=&quot;328&quot;/&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;❏ Yeoman脚手架工具的价值讨论&lt;br/&gt;❏ generator[&lt;code&gt;生成器&lt;/code&gt;]的内部结构&lt;br/&gt;❏ generator[&lt;code&gt;生成器&lt;/code&gt;]的项目模板&lt;br/&gt;❏ Yeoman脚手架工具的核心运转机制&lt;br/&gt;❏ Yeoman 的主要组装流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Yeoman这样的脚手架工具解决了什么问题？&quot;&gt;Yeoman这样的脚手架工具解决了什么问题？&lt;/h3&gt;
&lt;p&gt;所有新事物都不是凭空产生的，它们的出现总有某些内在的驱动力。一项新技术，一个新工具的出现更是如此。不知道从什么时候开始起，我接触新事物新技术以及某些工具的时候，总愿意多花点时间想一想它出现的原因是什么？因为时间、精力等等这些东西都很宝贵，IT从业人员对这些资源尤其敏感，所以新技术或者新工具的出现我认为有几种情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;已有的技术或工具存在缺陷，作者们靠自己的才学推出&lt;strong&gt;&lt;code&gt;更完美的替代方案&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;已有的技术或工具无法解决既定的需求，作者们探索出&lt;strong&gt;&lt;code&gt;解决问题的技术方案&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;纯粹闲的蛋疼（这种情况一般比较少见）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;现在，我们来研究下Yeoman的价值，或者说Yeoman出现的意义是什么？Yeoman的出现解决了什么样的问题？&lt;/p&gt;
&lt;p&gt;我们假设有这样的开发场景：公司的开发团队，基于某些特定的技术栈已经完成了项目A的开发和上线等工作，项目A的基本情况如下&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;技术栈：&lt;span&gt;JavaScript + HTML + CSS + Bootstrap + jQuery&lt;/span&gt;&lt;br/&gt;工作流：&lt;span&gt;npm（包管理工具） + bower（下载器） + grunt&lt;/span&gt;&lt;br/&gt;版本管理工具：&lt;span&gt;Git&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目整体目录结构（简化后）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.
├── Gruntfile.js
├── bower.json
├── node_modules
│ ├── abbrev
···
│ └── xtend
├── package&lt;/span&gt;-&lt;span&gt;lock.json
├── package.json
├── build
│ ├── css
│ │ └── style.min.css
│ └── js
│ ├── index.js
│ └── index.min.js
├── dist
└── src
├── css
│ └── style.css
├── index.html
├── js
│ └── index.js
├── libs
│ ├── bootstrap
│ └── jquery
└── template&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：上面的目录中src为代码的工作目录，bulid为构建后目录，dist为发布目录。&lt;/p&gt;
&lt;p&gt;因为项目A已经上线发布，现在公司要求着手开展新的项目B，经过需求评审和技术选型后，新项目B采用的工作流和项目A保持一致，技术栈在原有的基础上尝试使用TypeScript来处理脚本部分引入Vue框架，其它部分保持不变。我们发现项目A和项目B它们的结构基本上是一致的（比如项目的目录就够，都需要拥有Gruntfile.js和package.json等文件），但是有些部分又不太一样，比如package.json文件中的项目名称、开发依赖等。&lt;/p&gt;
&lt;p&gt;这个时候，我们在对项目B进行初始化的方式可以尝试以下操作方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;方案① &lt;strong&gt;从0开始创建目录结构，集成工作流配置开发环境&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;方案② &lt;strong&gt;从项目A中拷贝目录结构和固定文件，对于不同的部分一个个修改&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果我们采用方案① 你会发现这个过程你在初始化项目A的时候就已经做过了，是重复性的工作，毫无技术含量但是又费时费力。&lt;br/&gt;如果我们采用方案② 你会发现要修改的文件有些多，每个文件要改的字段也比较多，而且容易遗漏总是调不通会出现各种问题，心烦意乱。&lt;/p&gt;
&lt;p&gt;如果你会使用Yeoman脚手架工具的话，那么对于上面的开发场景你就会多一个方案③，在使用方案③来初始化项目B的时候，你只需要动动手指在终端中输入&lt;code&gt;$ yo 生成器名称&lt;/code&gt;再使用交互方式简单配置某些特定值，初始化的工作就完成了。这就是Yeoman的价值所在，初始化项目的时候你不必再把自己沉入到琐碎重复无技术成长的费力工作中，也不必总是像个机器人般进入到拷贝-粘贴-修改这样无止境的循环中。脚手架工具是那么的简单直接和高效，你甚至可以省出点加班的时间来看世界杯了 : )&lt;/p&gt;
&lt;p&gt;我知道有一些杠精要出来喷了。&lt;code&gt;“解决这种初始化问题不用搞的这么复杂，我完全可以把项目结构和固定不变的部分抽取出来托管到gitHub仓库，要初始化项目的时候 $ git clone一下不就好了吗？”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;说的很有道理，但是clone下来的仓库虽然结构和必要文件已经准备好了，但很多文件是不是还得修改？那你会顶回来&lt;code&gt;“难道使用Yeoman初始化就不需要修改了吗？”&lt;/code&gt;当然也要修改，不过就算是修改那改起来也很有趣味还So快！&lt;/p&gt;
&lt;p&gt;Yeoman使用交互式的方式来对项目文件中需要灵活处理的部分进行配置，这部分内容我们称为组装指令，具体再文章的后面会进行讲解。&lt;/p&gt;
&lt;p&gt;另外，如果新项目的整体结构以及技术选型和已有的项目很不一样，那你抽取后交由git管理的仓库就没用了，因为八字不合啊。使用Yeoman就没用这样的顾虑，在&lt;a href=&quot;http://yeoman.io/generators/&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Yeoman-generator列表&lt;/a&gt;有好几千现成的generator供你选择，总有一款适合你！！！&lt;/p&gt;

&lt;p&gt;我要求太太…太高，实在谁也看不上？没关系，generator这家伙还可以私人订制，你完全可以根据自己的需求来定制需要的generator，你一高兴甚至还能把它发布到社区造福全人类。&lt;/p&gt;
&lt;h3 id=&quot;Yeoman-generator的内部结构&quot;&gt;Yeoman-generator的内部结构&lt;/h3&gt;
&lt;p&gt;搞清楚 generator的价值所在和应用场景之后，我们就可以开始谈论generator相关的话题了，前面介绍过Yeoman脚手架工具的作用是帮助我们依据特定的技术栈需求来初始化项目，在安装了yo工具之后，只需要在终端中使用类似&lt;code&gt;$ yo generator--xx&lt;/code&gt;的命令先安装对应的generator然后再&lt;code&gt;$ yo xx&lt;/code&gt;搭建即可。至于如何找到匹配当前技术选型的generator，可以去官网的generator列表搜索，这些生成器中有很大一部分来自于对应框架的作者或者Yeoman官方团队，质量有保证且更新很及时。当然，我们也可以创建自己的generator并发布。关于如何创建自己的generator，我们放到另一篇文章&lt;a href=&quot;http://wendingding.com/2018/06/14/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%B3%BB%E5%88%97[07]%20Yeoman%E8%84%9A%E6%89%8B%E6%9E%B6generator%E5%88%9B%E5%BB%BA/&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Yeoman脚手架生成器创建&lt;/a&gt;来解决。&lt;/p&gt;
&lt;p&gt;简单说Yeoman做的工作其实就是根据当前的生成器（generator）来复制固定的项目模板文件到新项目中，而新项目中的某些文件需要配置，这部分工作由安装时候的交互式指令来完成（相当于传递参数给模板文件）。&lt;/p&gt;
&lt;p&gt;需要注意的是，Yeoman的设计仅仅只提供了一小部分核心的API，而真正繁重的初始化工作是交给每个具体的generator来完成的。&lt;/p&gt;
&lt;p&gt;generator主要由&lt;strong&gt;&lt;code&gt;组装指令&lt;/code&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;code&gt;项目模板&lt;/code&gt;&lt;/strong&gt;两部分组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/yeoman03.png?raw=true&quot; alt=&quot;&quot; width=&quot;600px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组装指令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeoman generator中的generators/app/index.js文件是整个生成器的核心部分，该文件用于告知Yeoman该如何来组织并搭建项目，我们可以在该文件中设置初始化项目时必要的安装提示和选项来让用户选择，以及每个文件应该如何复制和修改，是否需要加载依赖和Node包等内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目模板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项目模板包括初始化项目需要的所有必须文件。这些文件又可以简单的划分为&lt;strong&gt;&lt;code&gt;固定文件&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;灵活文件&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;可选文件&lt;/code&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;code&gt;依赖文件&lt;/code&gt;&lt;/strong&gt;。所谓&lt;code&gt;固定文件&lt;/code&gt;就是在每个初始项目中都一模一样的文件，譬如index.js、style.css等文件，在具体处理的时候这些文件只需要简单复制即可。&lt;code&gt;灵活文件&lt;/code&gt;指的是那些需要根据用户选择来做简单修改然后才能复制的文件，譬如index.html文件（title等信息需根据用户输入来指定）。对于&lt;code&gt;可选文件&lt;/code&gt;来说，它们并不是必须的，譬如某些基础框架有的项目中需要，有的项目中也许并不需要，这部分文件的处理方式需要&lt;strong&gt;交给用户来决定&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;项目模板文件的类别&quot;&gt;项目模板文件的类别&lt;/h3&gt;
&lt;p&gt;前面已经介绍过了Yeoman生成器的组成部分主要是组装指令和项目模板。对于整个Yeman脚手架工具来说，项目模板这部分就相当于是搭建脚手架需要用到的原材料，而组装指令用来决定和控制所有的具体行动是什么。&lt;/p&gt;
&lt;p&gt;现在我们开始深入的来讨论项目模板这部分内容，需要先明白的是&lt;code&gt;“能够满足所有需求的万能的项目模板是不存在的”&lt;/code&gt;。因为这世界上每个项目组，每个产品甚至每个人的需求(要求)都各有不同。所以，在实践中你必须要对当前项目的需求和采用的技术栈有深入的理解，这样你才能知道目标项目的目录结构会是什么样的? 哪些文件是必不可少的。&lt;/p&gt;
&lt;p&gt;如果你的项目和采用的技术栈比较大众化，那么搜索一个合适的generator基本就能满足需求，拿来主义即可。如果你的项目不管结构还是所采用的技术看上去都那么的非凡和特别，那么就多花一点点时间创建个自己的generator吧，如果你需要处理多个这样的项目，那就更应该了。在创建或者理解generator的时候，我们可以根据前面对项目模板文件的划分情况来区别对待不同的文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;固定文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;固定文件是在每个项目中初始内容都一样的必要文件。&lt;/p&gt;
&lt;p&gt;比如我们可能总是会把代码的结构划分为&lt;code&gt;src&lt;/code&gt;、&lt;code&gt;build&lt;/code&gt;和&lt;code&gt;dist&lt;/code&gt;三个目录，在src目录下面拥有js、css和lib文件目录，index.js和style.css等文件。这些文件都是必要的，刚开始的时候可能是空的或者只有几行简单的代码。这些文件的特点是，在使用组装指令操作(通常是复制-移动)这些文件的时候，不需要对它们进行任何的修改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;灵活文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;灵活文件和固定文件差不多，也是初始化项目所必须的，但不同的项目中这些文件的内容也会稍有不同，这些不同之处可能很细微(比如仅仅是名字、协议这些)，也可能差异巨大。比如，我们常用的构建工作流中的&lt;code&gt;bower.json&lt;/code&gt;和&lt;code&gt;package.json&lt;/code&gt;文件，它们是必不可少的，但是它们都需要当前项目的项目名称和协议等信息才能正常工作。像这样的灵活文件还有index.html，在这个文件中的title标签中应该使用当前项目的名称。&lt;/p&gt;
&lt;p&gt;灵活文件中的部分内容需要在安装该生成器的时候，由用户交互式配置输入的信息来进行设定。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可选文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可选文件并不是搭建初始化项目时所必须的文件，如果没有那么没关系，如果有那似乎更好。这些一般在用户交互式配置的时候，以是否题的方式交由用户决定，譬如是否使用less 是否安装Bootstrap等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;依赖文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;依赖文件指的是某些常用的框架、插件或者是Node模块，这些文件并不需要你在项目模板文件中提供，然后通过组装指令去一个个复制。因为基本上成熟的项目中都会使用既定的工作流(主要包括依赖和包的下载、项目的自动化构建等)，所以我们完全只需要在&lt;code&gt;package.json&lt;/code&gt;或者&lt;code&gt;bower.json&lt;/code&gt;等文件中设置好依赖即可，然后在组装指令的相关代码中通过&lt;code&gt;this.installDependencies（）&lt;/code&gt;类似的代码来调用npm或者是bower执行install命令即可。&lt;/p&gt;
&lt;h3 id=&quot;Yeoman脚手架运转的核心机制&quot;&gt;Yeoman脚手架运转的核心机制&lt;/h3&gt;
&lt;p&gt;当您为项目准备好(搜索或自己创建)合适的generator之后，就可以用它们来搭建项目了。generator的执行需要在终端中使用yo命令来操作。yo是Yeoman的核心命令，主要用来连接生成器和项目结构。我们可以把yo命令理解为generator的执行器，它知道怎么找到对应的generator，也知道该如何执行它们。&lt;/p&gt;
&lt;div class=&quot;tip&quot; readability=&quot;6.8571428571429&quot;&gt;注意：yo基于NodeJS且需要在任何文件目录中使用，所以在安装yo命令的时候应该使用-g来进行全局安装。安装过程请参考：&lt;a href=&quot;http://wendingding.com/2018/06/12/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%B3%BB%E5%88%97[05]%20Yeoman%E8%84%9A%E6%89%8B%E6%9E%B6%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;Yeoman脚手架使用入门&lt;/a&gt;。&lt;/div&gt;
&lt;p&gt;在使用yo命令行工具和生成器来初始化项目之前，需要先把指定的生成器(generator)下载安装到本地（如果是自己创建的生成器，那么可以通过&lt;code&gt;$ npm link&lt;/code&gt;命令以软连接的方式生成一个全局的npm包，我的是mac OSX系统，生成的npm包会保存在/usr/local/lib/node_modules/路径，如果使用的是别人发布的generator，那么请使用&lt;code&gt;$ &lt;span&gt;npm install -g generator-xxx&lt;/span&gt;&lt;/code&gt;的方式来安装）。&lt;/p&gt;
&lt;p&gt;这里需要注意的是&lt;code&gt;yo命令行工具主要负责前期工作，在使用的时候它主要检查当前安装的generator有哪些，指定的generator是否能够正常工作，如果能，那么它就会调用generator的组装指令，把剩下部分的工作交接给generator来完成。generator接管项目的组装流程之后，会按app/index.js中的要求来处理文件的复制等工作&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面给出脚手架工具初始化项目时的核心流程。&lt;br/&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/yeoman04.png?raw=true&quot; alt=&quot;&quot; width=&quot;1692&quot; height=&quot;899&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里对yo的主要命令进行简单说明&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ yo&lt;/code&gt; 执行该命令的时候，yo会搜索并列出所有本地可用的生成器&lt;br/&gt;&lt;code&gt;$ yo 生成器名称&lt;/code&gt; 比如对于&lt;code&gt;generator-typescript&lt;/code&gt;生成器，那么执行的命令就是&lt;code&gt;$ yo typescript&lt;/code&gt;。该命令会先检查&lt;code&gt;enerator-typescript&lt;/code&gt;生成器是否可用。如果可用，那么就接着以 ①交互式配置 ② 写入文件 ③ 下载安装依赖的顺序来执行组装指令。&lt;/p&gt;
&lt;h3 id=&quot;Yeoman的主要组装流程&quot;&gt;Yeoman的主要组装流程&lt;/h3&gt;
&lt;p&gt;组装指令是用来让Yeoman创建项目所需文件的一系列具体的命令(代码)。典型的组装流程分为三个步骤：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/yeoman05.png?raw=true&quot; alt=&quot;&quot; width=&quot;966&quot; height=&quot;172&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;① 交互式配置&lt;/strong&gt;。这个步骤通过向用户提问或直接输入配置信息来完成模板传参。&lt;br/&gt;&lt;strong&gt;② 写入文件&lt;/strong&gt;。把项目模板中的指定文件复制到新项目的指定目录中。&lt;br/&gt;&lt;strong&gt;③ 安装依赖&lt;/strong&gt;。下载并安装所有保存在bower.json和package.json文件中的依赖和Node模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;① 交互式配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeoman在执行生成器的时候，首先会执行安装提示以交互式的方式来询问用户，目的是为了获取生成器所需要的一些参数，比如项目的名称、作者、使用的开原协议以及是否安装和使用某些组件等。&lt;/p&gt;
&lt;p&gt;这部分功能，需要使用到inquirer包，这个包的作用是生成选项来让用户选择。下面给出代码示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;prompting() {
const prompts &lt;/span&gt;=&lt;span&gt; [
{
type : &lt;/span&gt;'input'&lt;span&gt;,
name : &lt;/span&gt;'appName'&lt;span&gt;,
message : &lt;/span&gt;'请输入项目名称:'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;default&lt;/span&gt; : &lt;span&gt;this&lt;/span&gt;.appname &lt;span&gt;//&lt;/span&gt;&lt;span&gt;appname是内置对象，代表工程名，这里就是ys&lt;/span&gt;
&lt;span&gt;},
{
type : &lt;/span&gt;'input'&lt;span&gt;,
name : &lt;/span&gt;'appAuthor'&lt;span&gt;,
message : &lt;/span&gt;'请输入作者姓名:'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;default&lt;/span&gt; : '文顶顶'&lt;span&gt;
},
{
type: &lt;/span&gt;'list'&lt;span&gt;,
name: &lt;/span&gt;'appLicense'&lt;span&gt;,
message: &lt;/span&gt;'请选择使用的license:'&lt;span&gt;,
choices: [&lt;/span&gt;'MIT', 'ISC', 'Apache-2.0', 'AGPL-3.0'&lt;span&gt;]
},
{
type : &lt;/span&gt;'confirm'&lt;span&gt;,
name : &lt;/span&gt;'isIncludeBootstrap'&lt;span&gt;,
message : &lt;/span&gt;'是否需要使用bootStrap框架？'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;default&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
},
 
];
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.prompt(prompts).then(props =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; To access props later use this.props.someAnswer;&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;.props =&lt;span&gt; props;
});&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以看到在代码中，这些交互式配置都由prompts来进行维护，prompts是一个对象数组，数组中的每个元素对象就代表着一个具体的安装提示，在使用yo命令运行该生成器的时候，它的执行情况如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
_-----&lt;span&gt;_ ╭──────────────────────────╮
&lt;/span&gt;| |&lt;span&gt; │ 欢迎使用 │
&lt;/span&gt;|--(o)--| │ generator-wen!&lt;span&gt; │
`&lt;/span&gt;---------&lt;span&gt;´ │ Author：文顶顶 │
( _´U`_ ) ╰──────────────────────────╯
&lt;/span&gt;/___A___\ /
| ~ |&lt;span&gt;
__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.___.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__
´ ` &lt;/span&gt;|&lt;span&gt;° ´ Y `
 
&lt;/span&gt;?&lt;span&gt; 请输入项目名称: wendingdingTest
&lt;/span&gt;?&lt;span&gt; 请输入作者姓名: 文顶顶
&lt;/span&gt;? 请选择使用的license: Apache-&lt;span&gt;2.0&lt;/span&gt;
? 是否需要使用bootStrap框架？ (y/N) yes
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;prompts中的每个对象元素就代表着一个安装提示，上面代码一共提供了四个安装提示。每个对象中的type属性用于表明交互的类型，其中输入项目名称和作者姓名是&lt;code&gt;input型的&lt;/code&gt;,表示接收用户的输入，相当于填空题。选择使用的license是&lt;code&gt;list&lt;/code&gt;型的，它提供了多个选项供用户选择，您可以认为这种类型是单选题。是否需要使用bootStrap框架是&lt;code&gt;confirm&lt;/code&gt;型的，默认为false，如果需要安装那么需要输入YES，这相当于是非题。 &lt;/p&gt;
&lt;div class=&quot;tip&quot; readability=&quot;7.1919191919192&quot;&gt;交互式配置这部分可以根据项目的实际情况来设置prompts中的对象元素，除上面介绍的这些类型外，您还可以通过查看&lt;a href=&quot;https://www.npmjs.com/package/inquirer&quot; rel=&quot;external&quot; target=&quot;_blank&quot;&gt;inquirer.js的文档&lt;/a&gt;来获取更多内容。&lt;/div&gt;
&lt;p&gt;交互式配置过程中用户做出的所有选择和输入都会被保存到this.props对象中，可以通过访问this.props.isIncludeBootstrap属性来确定是否需要安装Bootstrap。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;message&lt;/span&gt;属性&lt;/code&gt;保存是每一条安装提示的提示信息。&lt;br/&gt;&lt;code&gt;&lt;span&gt;name&lt;/span&gt;属性&lt;/code&gt;是最重要的属性之一，它作为key用来访问用户的选择结果。&lt;br/&gt;&lt;code&gt;&lt;span&gt;default&lt;/span&gt;属性&lt;/code&gt;保存的是默认值，即当用户跳过当前安装提示的时候，name对应的value值将使用default中保存的默认值来设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;② 写入文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写入文件这个过程会把项目模板复制到指定的目录中，如果是固定文件那么就直接拷贝，如果是灵活文件那么还需要把某些参数传递给指定的模板文件。这个过程在代码中由writing() 函数体现，另外系统还提供了两个函数（&lt;code&gt;fs.copyTpl和fs.copy&lt;/code&gt;）用来执行具体的操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;writing() {
mkdirp(&lt;/span&gt;&quot;build&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建build文件目录&lt;/span&gt;
mkdirp(&quot;dist&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建dist文件目录&lt;/span&gt;
mkdirp(&quot;src/template&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建src/template文件目录&lt;/span&gt;
 
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传递参数this.props.appName渲染index.html文件&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;把项目模板中的index.html文件复制到新项目的src路径下&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fs.copyTpl(
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.templatePath('index.html'&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.destinationPath('src/index.html'&lt;span&gt;),
{appName: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.appName}
);
 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把项目模板中的style.css文件复制到新项目的src/css路径下&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fs.copy(
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.templatePath('css/style.css'&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.destinationPath('src/css/style.css'&lt;span&gt;)
);
 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fs.copy方法会把指定文件复制到目标路径。&lt;br/&gt;fs.copyTpl方法会先传递参数给模板文件，经过模板引擎处理后再进行复制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;③ 下载和安装依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个阶段做的事情非常简单，就是调用npm或者是bower来下载并安装依赖和相关的node模块。Yeoman提供了几个对应的方法来处理这个过程。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;this.npmInstall()&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;使用Npm来安装package.json中的依赖和模块，相当于在终端中输入&lt;code&gt;$ npm install&lt;/code&gt;指令。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;this.bowerInstall()&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;使用Bower来安装bower.json中的依赖和模块，相当于在终端中输入&lt;code&gt;$ bower install&lt;/code&gt;指令。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;this.installDependencies()&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;调用Bower和Npm并且安装package.json和bower.json中依赖的所有模块，相当于先后调用了npmInstall和bowerInstall方法。&lt;/p&gt;
&lt;p&gt;最后，为了帮助更好的理解Yeoman组装流程的三个阶段，给出下面的示意图。&lt;br/&gt;&lt;img src=&quot;https://github.com/flowerField/Source/blob/master/Blog/yeoman06.png?raw=true&quot; alt=&quot;&quot; width=&quot;1174&quot; height=&quot;526&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Sat, 10 Nov 2018 04:04:00 +0000</pubDate>
<dc:creator>文顶顶</dc:creator>
<og:description>在前端工程化系列[05] Yeoman脚手架使用入门这边文章中，对Yeoman的使用做了简单的入门介绍，这篇文章我们将接着探讨Yeoman这个脚手架工具内部的核心机制，主要包括以下内容 ❏ Yeoma</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wendingding/p/9938874.html</dc:identifier>
</item>
<item>
<title>面试乐融集团Python开发工程师有感 - 雨轩恋i</title>
<link>http://www.cnblogs.com/yuxuanlian/p/9938871.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuxuanlian/p/9938871.html</guid>
<description>&lt;p&gt;&lt;span&gt;这是笔者第一次面试，，乐融集团位于朝阳区朝阳公园的乐融大厦。是下午两点的笔面试，笔者是一点半到的，然后在里面等了会，开始笔试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;笔试题并不是太难，就是考的比较宽，因为笔者是校招，所以笔试题出来了数据结构的二叉树知识和先序遍历，中序遍历，后序遍历等等的知识，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还考了进制，以及计算机网络的ip分类，tcp/ip四层协议，考了点PHP知识，因为笔者并没有学过PHP的东西，所以关于PHP的部分都是瞎猜的，然后&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;是关于数据库的知识，数据库的事务是什么以及如何操作，还有面向对象编程和面向过程编程的优缺点，最后是一道二分法查找的算法，不管你笔试结果如何&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;都会面试，接下来是笔者回忆的一面以及二面面试官问的问题。要面试的小伙伴可以参考参考&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1.你先讲一下你这个项目的大体流程&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;...我们项目是基于scrapy和flask的一个小项目，先使用scrapy框架从网上爬取所需要的知识，我们爬取的是51job网站的职位信息，然后将他们存入数据库中，&lt;/p&gt;
&lt;p&gt;然后运用flask框架可以前后端结合，将后端也就是数据库中的职位信息展示到前端页面上。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2.你的项目中的数据库表结构是如何设置的&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...因为项目比较小，所以表结构也不是太复杂，主要是51job的职位表,boss直聘的职位表，还有用户表等，运用powerdesign就可以轻松地设置出表结构&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;3.mysql数据库和oracle数据库他俩之间的区别&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...笔者并不是很清楚这个东西，就没答，有会的同学可以评论。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;4.mysql数据库查100条数据和oracle数据库查100条数据的区别&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...同样不会，只好说在数据库方面只会基本的dml操作和一些复杂的多表查询等等，这俩之间的区别是真的不清楚。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;5.你平时在学校熬夜么&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...熬夜啊，经常熬夜，一般谁的很晚，然后面试官说，咋们这个行业肯定会加班的，BAT内些大公司加班更严重，我说，我知道的，这一行肯定会加班&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;6.周末你一般干什么&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...刚来北京的时候，每周末经常出去逛，去故宫啊，长城啊等等景点游玩，然后要是懒得出去的话，就在宿舍打打游戏，或者看看电影啥的&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;7.你周末出去是一个人还是和朋友&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;..和朋友啊，一个人的话，就不是太想出去玩，还是比较宅&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;8.在学校的英语和数学如何&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...英语不好，四级最高才考了410，数学吧，还凑合。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;还问了一些不太重要的问题，记不太清了，然后等了一会通知二面&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;1.你可以详细的讲讲你的项目的具体实现步骤以及实现过程中都遇到了那些问题，以及如何解决的&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...我们先是确定要爬取的网页url，比如要在51job上爬取北京python职位的职位信息，先在51上选好条件，然后得到url链接，然后分析页面上的字段，然后将爬下来的职位信息，例如职位名称，公司名等插入到mysql数据库里，然后使用flask框架将前后端结合起来，将爬下来的数据分析后运用echars可以直观的展示给别人看。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;...也遇到了很多问题，例如设计登录注册模块，在前端页面点击注册，用户名密码传不到数据库里，使用了一个session将用户密码保存，再然后存到数据库，登录也是，前端界面得用到POST方法才可以，GET方法只是返回数据，不能提交数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;...遇到问题后，一般先自己百度百度，要是不行的话就问我们组长，最后在询问老师&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2.flask框架是如何操作的，就是你如何点击登录，将返回一个界面&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...flask是一个轻量级web开发框架，自带额webservers服务，首先在app.py里定义一个登录方法，如下&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
@app.route('/',methods=['GET'])&lt;br/&gt;def hello_world():&lt;br/&gt;return render_template('main.html')
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;先app.route,然后是链接，再然后决定用POST还是GET方法&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;3.你有没有看过scrapy或者flask的源代码&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...emm这个，没有看过&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;4.你知道cpy和pypy吗？&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;..不知道，然后面试官说目前的python解释器大部分都是基于c的，pypy是先预编译了一遍，再然后解释起来速度会比基于c的解释器快一半左右，代码根本不需要改，就是换一个解释器就行&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;5.你在代码中是如何处理反爬虫的&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...加一个动态代理，然后在setting中设置时间间隔，我只用了这俩种方法，至于其他的动态ip，添加referer技术也没有使用&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;6.假如你是一个网站，你如何识别它是一个爬虫程序&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...emm这个不太清楚，面试官说，假如你是浏览器，你得看header里面的useragent是否有规律&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;7.我看你有博客园和fithub，是自己兴趣吗还是&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...博客园是老师建议的，不过发了几篇博客后自己慢慢的喜欢上了博客园，没事可以回头看看青涩的自己，github就是自己的兴趣了，希望别人可以从自己的代码里学到一些知识&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;8.如何在linux下面查看一个项目某一段时间的日志&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;...emm这个Linux用的不太多，只会一些基本的ls和cd,面试官说你只用两个命令结合起来就可以了，具体也没说是啥命令，说了我应该也忘了，，&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;大体上印象深刻的就是这么些了，二面面试官还问了一些我都没有听过的专业名称，，我现在已经记不起来了。。&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;总之以后还得了解了解linux系统的比较深的操作，面试官都特别和蔼，很温柔，也教了我很多，主要还是自己实力不行。还得努力学习。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;希望要面试python开发的同学可以从我这篇博客学到一些知识。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 10 Nov 2018 04:02:00 +0000</pubDate>
<dc:creator>雨轩恋i</dc:creator>
<og:description>这是笔者第一次面试，，乐融集团位于朝阳区朝阳公园的乐融大厦。是下午两点的笔面试，笔者是一点半到的，然后在里面等了会，开始笔试 笔试题并不是太难，就是考的比较宽，因为笔者是校招，所以笔试题出来了数据结构</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuxuanlian/p/9938871.html</dc:identifier>
</item>
</channel>
</rss>