<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【趣味连载】攻城狮上传视频与普通人上传视频：（一）生成结构化数据 - iOS122</title>
<link>http://www.cnblogs.com/ios122/p/7996524.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ios122/p/7996524.html</guid>
<description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;当知道要上传的视频资料从20条变成100条时，我就明白，绝对不能再人工处理了。他们总是想当然的认为，录入一条数据需要1分钟，那录入20条数据就是20分钟，录入100条数据，不就是100分钟吗？我有时候，真的很想问问他们，没有考虑过人是会犯错的吗？数据越多，出错的可能就越大；但是数据本身，又是不允许出现纰漏的。那拿什么去保证数据的正确性?刷脸？可能吗？&lt;/p&gt;
&lt;p&gt;大多数时候，类似的争论，最终几乎总是会以他们的一句“我不懂技术，你们看着办吧”结束。所以，也懒得去做口舌之争。我尽力尽快做；但是你承不承认事情本身的复杂度，并不会影响事情本身的复杂度。&lt;/p&gt;
&lt;p&gt;回到问题本身，究竟如何处理新到来的100条数据以及以后更多的数据，确实是一个必须想办法彻底解决下的问题。&lt;/p&gt;
&lt;h2 id=&quot;我拿到的原始数据&quot;&gt;我拿到的原始数据&lt;/h2&gt;
&lt;p&gt;此处适当象征性的描述下我拿到的数据。以下讨论，单以 10 条数据为例。&lt;/p&gt;
&lt;h3 id=&quot;一个-word-文档是一组问题&quot;&gt;一个 word 文档，是一组问题。&lt;/h3&gt;
&lt;p&gt;内容假定是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1.【smart-transform】取自 Atom 的 babeljs&amp;amp;coffeescript&amp;amp;typescript 智能转 es5 库
2.【YFMemoryLeakDetector】人人都能理解的 iOS 内存泄露检测工具类
3.【玩转树莓派】使用 sinopia 搭建私有 npm 服务器
4.【小技巧解决大问题】使用 frp 突破阿里云主机无弹性公网 IP 不能用作 Web 服务器的限制
5.【树莓派自动化应用实例】整点提醒自己休息五分钟
6. 借助 frp 随时随地访问自己的树莓派
7.【LuaJIT版】从零开始在 macOS 上配置 Lua 开发环境
8.【最新版】从零开始在 macOS 上配置 Lua 开发环境
9. 关于混合应用开发的未来的一些思考
10.记录我发现的第一个关于 Google 的 Bug&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;是的，内容中还有各种中文标点。他们有相当一部分人不理解攻城狮为什么喜欢用英文标点，甚至还有人以此为由说我们小学标点符号没学好。懒得解释那么多，但是既然给出来了，作为纯文本，也不用管这么多，照单全收就行了。符号习惯问题本身，也是一个无伤大雅的问题。&lt;/p&gt;
&lt;h3 id=&quot;另一个-word-文档是一组问题对应的-luis-语义分析结果&quot;&gt;另一个 word 文档，是一组问题对应的 Luis 语义分析结果&lt;/h3&gt;
&lt;p&gt;微软的 Luis 语义分析服务，勉强算是和人工智能沾点边吧，感兴趣的请自行了解下。从客户端角度来说，你给它一个文本字符串，他们分析出来和这个字符串匹配度最高的某个预录入的答案的唯一标记。每个唯一标记 ID，被称作一个 intent。每次请求，最多只有一个匹配度最高的 intent。&lt;/p&gt;
&lt;p&gt;感觉已经有的 word 问题，我们的后端小伙伴，送来了另一个 word 文档：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1. smart_transform
2. memory_leakDetector
3. sinopia_npm
4. frp_ip
5. tip_rest
6. frp_anywhere
7. luajit_macos
8. lua_macos
9. app_future
10. google_bug&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;又是非结构化的数据。显而易见，我们可爱的后端同学，只是简单完成了录入，自己没有做必要的单元测试。这是在等着我去发现问题啊。很久很久以前，我总是幻想着，所有的攻城狮，必然都是各种自动化测试用例，就像树上写的各种敏捷，各种快速迭代。事实上，我见到的许多所谓的敏捷式开发，最终其实只是把成本后置，各种技术债。出来混，真的迟早是要换的。100个问题，逐一去验证，真的是很耗费时间的，而且最终有问题的，数量也不会太多。也就说说，如果手动去做，很有可能寻找问题的时间，要远远大于发现问题的时间。所以，自动化批量测试，是显而易见的。根据不同的场景和需要，快速构建基本够用的批量自动化测试工具链，应该成为每个攻城狮的必修课。&lt;/p&gt;
&lt;h3 id=&quot;一组勉强算是有规律的分文件夹放置的视频&quot;&gt;一组勉强算是有规律的分文件夹放置的视频&lt;/h3&gt;
&lt;p&gt;我依然是象征性的描述下，结构类似于：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/videos/树莓派/【smart-transform】取自 Atom 的 babeljs&amp;amp;coffeescript&amp;amp;typescript 智能转 es5 库.mp4
/videos/树莓派/【YFMemoryLeakDetector】人人都能理解的 iOS 内存泄露检测工具类.mp4
/videos/树莓派/【玩转树莓派】使用 sinopia 搭建私有 npm 服务器.mp4
/videos/树莓派/【小技巧解决大问题】使用 frp 突破阿里云主机无弹性公网 IP 不能用作 Web 服务器的限制.mp4
/videos/frp/【树莓派自动化应用实例】整点提醒自己休息五分钟.mp4
/videos/frp/借助 frp 随时随地访问自己的树莓派.mp4
/videos/Lua/【LuaJIT版】从零开始在 macOS 上配置 Lua 开发环境.mp4
/videos/Lua/【最新版】从零开始在 macOS 上配置 Lua 开发环境.mp4
/videos/Lua/关于混合应用开发的未来的一些思考.mp4
/videos/Lua/记录我发现的第一个关于 Google 的 Bug.mp4&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;目标数据要求&quot;&gt;目标数据要求&lt;/h2&gt;
&lt;h3 id=&quot;intent-必须和问题关联起来&quot;&gt;intent 必须和问题关联起来&lt;/h3&gt;
&lt;p&gt;显而易见，应该使用 intent 作为数据的唯一 id。为了便于处理，索性写成了一个 JS 模块。之所以不直接用 JSON,是因为模块比 JSON 文件，更灵活性，后期扩展方便，如果有的话。&lt;/p&gt;
&lt;p&gt;这一步是必须手动做的，或者说总是需要有一个人手动去做的。为了效率，团队内总是需要有一个人必须要充当这个角色。&lt;/p&gt;
&lt;p&gt;大致处理下，初版结构 &lt;strong&gt;intent_info.js&lt;/strong&gt; 大概类似这样：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* 树莓派 */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;smart_transform&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【smart-transform】取自 Atom 的 babeljs&amp;amp;coffeescript&amp;amp;typescript 智能转 es5 库&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;memory_leakDetector&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【YFMemoryLeakDetector】人人都能理解的 iOS 内存泄露检测工具类&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;sinopia_npm&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【玩转树莓派】使用 sinopia 搭建私有 npm 服务器&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;frp_ip&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【小技巧解决大问题】使用 frp 突破阿里云主机无弹性公网 IP 不能用作 Web 服务器的限制&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* frp */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;tip_rest&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【树莓派自动化应用实例】整点提醒自己休息五分钟&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;frp_anywhere&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;借助 frp 随时随地访问自己的树莓派&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* Lua */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;luajit_macos&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【LuaJIT版】从零开始在 macOS 上配置 Lua 开发环境&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;lua_macos&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【最新版】从零开始在 macOS 上配置 Lua 开发环境&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;app_future&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;关于混合应用开发的未来的一些思考&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;google_bug&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;记录我发现的第一个关于 Google 的 Bug&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;排序&quot;&gt;排序&lt;/h3&gt;
&lt;p&gt;排序，是需要增加一个新的字段 order。不过，我就直接上面的类似 JSON 的结构来排序的。因为排序是由另外一个人做，懂技术，操作很简单些。&lt;/p&gt;
&lt;p&gt;经过对方排序后，&lt;strong&gt;intent_info.js&lt;/strong&gt;，可能变成了这样：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* 树莓派 */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;smart_transform&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【smart-transform】取自 Atom 的 babeljs&amp;amp;coffeescript&amp;amp;typescript 智能转 es5 库&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;memory_leakDetector&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【YFMemoryLeakDetector】人人都能理解的 iOS 内存泄露检测工具类&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;sinopia_npm&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【玩转树莓派】使用 sinopia 搭建私有 npm 服务器&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;frp_ip&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【小技巧解决大问题】使用 frp 突破阿里云主机无弹性公网 IP 不能用作 Web 服务器的限制&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* Lua */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;luajit_macos&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【LuaJIT版】从零开始在 macOS 上配置 Lua 开发环境&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;lua_macos&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【最新版】从零开始在 macOS 上配置 Lua 开发环境&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;app_future&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;关于混合应用开发的未来的一些思考&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;google_bug&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;记录我发现的第一个关于 Google 的 Bug&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* frp */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;tip_rest&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【树莓派自动化应用实例】整点提醒自己休息五分钟&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;frp_anywhere&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;借助 frp 随时随地访问自己的树莓派&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面的优先显示。在真正生成 order 字段时，是借助 Node 一个不太可靠的特性： 字典遍历时，会基于key的书写顺序来遍历。这一点，在 Node 和 Android 浏览器上都是成立的，在 safari 上，无效。一般开发时，不应依赖于这一点，不过目前，我只是需要一个够用的东西。Node 的这个特性，在短时间内，应该是不会有改变的。&lt;/p&gt;
&lt;h3 id=&quot;分类&quot;&gt;分类&lt;/h3&gt;
&lt;p&gt;没过几天，果然又加了新需求，说是视频太多了，太杂乱，想给每个视频加个分类，然后可以按分类查看视频。&lt;/p&gt;
&lt;p&gt;好，那我给你加个分类：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* 树莓派 */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;树莓派&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_category&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;smart_transform&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【smart-transform】取自 Atom 的 babeljs&amp;amp;coffeescript&amp;amp;typescript 智能转 es5 库&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;memory_leakDetector&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【YFMemoryLeakDetector】人人都能理解的 iOS 内存泄露检测工具类&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;sinopia_npm&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【玩转树莓派】使用 sinopia 搭建私有 npm 服务器&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;frp_ip&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【小技巧解决大问题】使用 frp 突破阿里云主机无弹性公网 IP 不能用作 Web 服务器的限制&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* Lua */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;Lua&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_category&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;luajit_macos&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【LuaJIT版】从零开始在 macOS 上配置 Lua 开发环境&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;lua_macos&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【最新版】从零开始在 macOS 上配置 Lua 开发环境&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;app_future&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;关于混合应用开发的未来的一些思考&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;google_bug&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;记录我发现的第一个关于 Google 的 Bug&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* frp */&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;frp&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_category&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;tip_rest&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;【树莓派自动化应用实例】整点提醒自己休息五分钟&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;st&quot;&gt;&quot;frp_anywhere&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;借助 frp 随时随地访问自己的树莓派&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新加了几个值为 **_category** 的字段。当检测到值为 **_category** 时，就自动判定为是一个分类。我这种处理方式，免不了引来一阵唏嘘。但是，许多时候，你选择的技术策略，都必须根据项目所处的状态和各种条件，去综合权衡。我只有几十分钟时间去重新规划和整理100条数据。可能真的没法想太多。需求总是变化的，不知道明天又会变成什么样，可能再进一步，就变成”过度设计“了。另外，项目本身， intent 本身约定了自己特有命名规律，是可以安全认为 intent 和 分类一定不会重复的。&lt;/p&gt;
&lt;h3 id=&quot;问题和视频关联&quot;&gt;问题和视频关联&lt;/h3&gt;
&lt;p&gt;在读取 &lt;strong&gt;intent_info.js&lt;/strong&gt; 中的足够可信的结构化数据后，我会动态建立问题和视频的关联。这个过程中，可能需要适当修改问题和视频的标题。为了避免遗漏，一个标题，如果没有对应的视频或对应多个视频，就直接crash。有些霸道，但总比后期一个一个比对排查，省太多事了。结合问题和视频标题的特点，我专门封装了一个方法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;/* 获取某个标题对应的本地路径.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;为了避免未知错误,如果找不到或找到多个,就直接 crash.&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;@return  本地视频的相对路径.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;localVideoPath&lt;/span&gt;(title)
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;path&quot;&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'fs-plus'&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fse &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs-extra'&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; os &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;os&quot;&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;execSync&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;child_process&quot;&lt;/span&gt;)

  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; videoDir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./videos&quot;&lt;/span&gt;)

  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; videos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;listTreeSync&lt;/span&gt;(videoDir)
                  .&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;(item&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;.mov&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extname&lt;/span&gt;(item))
                  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
                  .&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;(item&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;relative&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item)
                  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

  &lt;span class=&quot;co&quot;&gt;/* 一个标题,能且只能对应一个视频,否则就抛出异常. */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; localVideoPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; item of videos) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(title)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (localVideoPath) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; tip &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`致命异常: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;title&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 对应的视频重复:&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;localVideoPath&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;item&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Error&lt;/span&gt;(tip)
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

      localVideoPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; item
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;localVideoPath) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; tip &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`致命异常!这个标题竟然没有对应的视频:&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\n${&lt;/span&gt;title&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Error&lt;/span&gt;(tip)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; localVideoPath
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;见码如唔&quot;&gt;见码如唔&lt;/h2&gt;
&lt;p&gt;完整的自动化处理成结构数据的逻辑如下，都集中在 &lt;strong&gt;make_data.js&lt;/strong&gt; 中。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;/* 生成带有排序等信息的文件. */&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/* 支持自动生成数据. */&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;makeDataWithOrder&lt;/span&gt;()
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;makeDataWithOrder&lt;/span&gt;()
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs-extra'&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'path'&lt;/span&gt;)

  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; intentInfo &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;./intent_info.js&quot;&lt;/span&gt;)

  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; intentInfoNew &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;/* 在node中遍历时,key的顺序是和原始key的顺序对应的.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;  这个特性,并不总是有效,比如在 ios 浏览器中.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;  目前,仅仅是够用. */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; category &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; intent &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; intentInfo) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (intentInfo[intent] &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;_category&quot;&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* 说明是一个分类标记. */&lt;/span&gt;
      category &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; intent
      &lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; intentInfo[intent]
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; local_path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;localVideoPath&lt;/span&gt;(title)
    &lt;span class=&quot;va&quot;&gt;intentInfoNew&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;st&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;st&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;st&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; intent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;st&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; title&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;st&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; index&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;st&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; local_path&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;st&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extname&lt;/span&gt;(local_path)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;st&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;category&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

    &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; index
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;at&quot;&gt;localVideoLoseCheck&lt;/span&gt;(intentInfoNew)
  &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; dataPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;./data.json&quot;&lt;/span&gt;)
  &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;writeJsonSync&lt;/span&gt;(dataPath&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; intentInfoNew)
  &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`恭喜!数据已写入 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;dataPath&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/* 确保视频总数与intent总数是对应的,防止有视频遗漏.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;有视频没有对应问题时,会直接抛出异常.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;localVideoLoseCheck&lt;/span&gt;(intents)
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;/* 先把视频信息处理成 key-value. */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;path&quot;&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'fs-plus'&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fse &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs-extra'&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; os &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;os&quot;&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;execSync&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;child_process&quot;&lt;/span&gt;)

  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; videoDir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./videos&quot;&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; videoDict &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;listTreeSync&lt;/span&gt;(videoDir)
                  .&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;(item&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;.mov&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extname&lt;/span&gt;(item))
                  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
                  .&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;(item&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;relative&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item)
                  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
                  .&lt;span class=&quot;at&quot;&gt;reduce&lt;/span&gt;((sum&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;idx)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
                    sum[item] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; sum
                  &lt;span class=&quot;op&quot;&gt;},{}&lt;/span&gt;)

  &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; item of intents) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    videoDict[&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;local_video_path&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;/* 寻找缺失的. */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; loses &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
  &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; videoDict) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;videoDict[item]) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;loses&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(item)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;loses&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; tip &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`一下 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;loses&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 个视频没有对应的问题:&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(loses)&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Error&lt;/span&gt;(tip)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/* 获取某个标题对应的本地路径.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;为了避免未知错误,如果找不到或找到多个,就直接 crash.&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;@return  本地视频的相对路径.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;localVideoPath&lt;/span&gt;(title)
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;path&quot;&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'fs-plus'&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fse &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs-extra'&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; os &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;os&quot;&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;execSync&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;child_process&quot;&lt;/span&gt;)

  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; videoDir &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;resolve&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./videos&quot;&lt;/span&gt;)

  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; videos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;listTreeSync&lt;/span&gt;(videoDir)
                  .&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;(item&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;.mov&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;extname&lt;/span&gt;(item))
                  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
                  .&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;(item&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;path&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;relative&lt;/span&gt;(__dirname&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item)
                  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

  &lt;span class=&quot;co&quot;&gt;/* 一个标题,能且只能对应一个视频,否则就抛出异常. */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; localVideoPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; item of videos) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;includes&lt;/span&gt;(title)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (localVideoPath) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; tip &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`致命异常: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;title&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 对应的视频重复:&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;localVideoPath&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;vs&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;item&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Error&lt;/span&gt;(tip)
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

      localVideoPath &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; item
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;localVideoPath) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; tip &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;`致命异常!这个标题竟然没有对应的视频:&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\n${&lt;/span&gt;title&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Error&lt;/span&gt;(tip)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; localVideoPath
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在项目目录执行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;node ./make_data.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;就可以得到我们想要的结构化的数据：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;89&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;smart_transform&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;【smart-transform】取自 Atom 的 babeljs:coffeescript:typescript 智能转 es5 库&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/树莓派/【smart-transform】取自 Atom 的 babeljs:coffeescript:typescript 智能转 es5 库.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;树莓派&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;memory_leakDetector&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;【YFMemoryLeakDetector】人人都能理解的 iOS 内存泄露检测工具类&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/树莓派/【YFMemoryLeakDetector】人人都能理解的 iOS 内存泄露检测工具类.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;树莓派&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;sinopia_npm&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;【玩转树莓派】使用 sinopia 搭建私有 npm 服务器&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/树莓派/【玩转树莓派】使用 sinopia 搭建私有 npm 服务器.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;树莓派&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;frp_ip&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;【小技巧解决大问题】使用 frp 突破阿里云主机无弹性公网 IP 不能用作 Web 服务器的限制&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/树莓派/【小技巧解决大问题】使用 frp 突破阿里云主机无弹性公网 IP 不能用作 Web 服务器的限制.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;树莓派&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;luajit_macos&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;【LuaJIT版】从零开始在 macOS 上配置 Lua 开发环境&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/Lua/【LuaJIT版】从零开始在 macOS 上配置 Lua 开发环境.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Lua&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;lua_macos&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;【最新版】从零开始在 macOS 上配置 Lua 开发环境&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/Lua/【最新版】从零开始在 macOS 上配置 Lua 开发环境.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Lua&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;app_future&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;关于混合应用开发的未来的一些思考&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/Lua/关于混合应用开发的未来的一些思考.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Lua&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;google_bug&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;记录我发现的第一个关于 Google 的 Bug&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/Lua/记录我发现的第一个关于 Google 的 Bug.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Lua&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;tip_rest&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;【树莓派自动化应用实例】整点提醒自己休息五分钟&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/frp/【树莓派自动化应用实例】整点提醒自己休息五分钟.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;frp&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;video&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;intent&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;frp_anywhere&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;借助 frp 随时随地访问自己的树莓派&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;local_video_path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;videos/frp/借助 frp 随时随地访问自己的树莓派.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;frp&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;
</description>
<pubDate>Wed, 06 Dec 2017 18:35:00 +0000</pubDate>
<dc:creator>iOS122</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ios122/p/7996524.html</dc:identifier>
</item>
<item>
<title>Office 365系列 （1）概览：完整的云中Office - 搪瓷小娃娃</title>
<link>http://www.cnblogs.com/changruijun/p/7995390.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/changruijun/p/7995390.html</guid>
<description>&lt;p&gt;Office365（以下简称O365）是一个集Office，企业邮箱，日历，日程管理，音视频会议 ，企业网盘 ，企业协作平台为一体的，旨在提高团队办公效率，减少基础设施投资和IT运维压力的解决方案。在自己学习和接触客户的过程中，遇到很多共性的问题，因此写下这个系列的博客，一方面是记录和梳理知识点，另一方面也希望与大家一起讨论，让更多人了解O365的功能，体验它在提高企业生产力方面带来的巨大价值。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1267180/201712/1267180-20171206231318738-983833021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是我梳理的一个O365内容概览，里面涉及到：&lt;/p&gt;
&lt;p&gt;（1）O365的主要功能模块，其中包括目前国内版的主要功能以及国际版的主要功能，这里有一些常见的问题：&lt;/p&gt;
&lt;p&gt;（2）O365的批量部署。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1267180/201712/1267180-20171206233749488-1730664276.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是我截取的我自己的O365测试账号登陆后的界面，一般来说，管理员在给用户分配完账户和许可后，用户自己登陆到O365的界面就可以下载客户端，但是在实际环境中，由于企业用户数较多，且受到带宽条件的限制，为提高部署效率，我们可以使用 &lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=36778&quot; target=&quot;_blank&quot;&gt;Office Deployment Tool for Click-to-Run&lt;/a&gt;（以下简称：&lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=36778&quot; target=&quot;_blank&quot;&gt;ODT&lt;/a&gt;）进行即点即用的部署。相关的内容可以先参考：&lt;a href=&quot;https://social.technet.microsoft.com/wiki/zh-cn/contents/articles/18859.office-365-proplus.aspx&quot; target=&quot;_blank&quot;&gt;https://social.technet.microsoft.com/wiki/zh-cn/contents/articles/18859.office-365-proplus.aspx&lt;/a&gt; 。关于如何使用这个工具我会在后面贴上详细的截图和教程。&lt;/p&gt;
&lt;p&gt;（3）O365的混合部署。混合部署有以下两个场景：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一是本身企业内部有一套已经搭建好的server，例如Exchange2013，需要与云上的O365做集成，以实现云上云下的无缝配合，使得这两部分用户体验仍然像在同一个本地组织架构内一样，并且可以方便本地管理员统一管理这两部分用户，实现单点登录等更多功能，这种场景需要做一个混合部署；&lt;/li&gt;
&lt;li&gt;二是在邮箱迁移的过程中，混合部署后可以统一实现由本地全部迁移到云端，或者由云端全部迁移回本地，这种方式叫做混合迁移。&lt;/li&gt;
&lt;li&gt;混合部署里又有Exchange混合部署以及Skype混合部署等，相关的内容我会在下一篇文章里做详细的介绍。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（4）O365的邮箱迁移。企业在上云的过程中，不可避免的会进行邮箱迁移，从各种邮箱环境里迁移到O365上，这部分内容也是需要细讲的一块。这里我先贴出了同事写的一篇文章做个预习：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;strong&gt;O365邮箱迁移中的那些坑 -- 活动目录同步&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt; (&lt;a href=&quot;http://blog.csdn.net/Cadmus1992/article/details/78387503?locationNum=7&amp;amp;fps=1&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/Cadmus1992/article/details/78387503?locationNum=7&amp;amp;fps=1&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;（5）O365开发。很多客户或者合作伙伴会关心，能否将O365集成到自己平台或者系统中，能否做一些二次开发，O365都留了哪些接口，等等。关于这部分，我们已经有资深的前辈写过相应的文章系列进行介绍，感兴趣的小伙伴可以阅读下面　　　　的文章：&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://chenxizhang.gitbooks.io/office365devguide/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Office 365 开发概览系列文章和教程&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt; (&lt;a href=&quot;https://chenxizhang.gitbooks.io/office365devguide/&quot; target=&quot;_blank&quot;&gt;https://chenxizhang.gitbooks.io/office365devguide/&lt;/a&gt; )。&lt;/p&gt;
&lt;p&gt;以上是关于O365的一个初步介绍，以后的文章中我会逐步把涉及到的内容补全，另外关于最上面的结构图，我也会随时更新，也希望大家有好的建议和观点能随时和我分享。&lt;/p&gt;
&lt;p&gt;另，贴上我前段时间在自己的微信公众号里写的一篇利用O365 邮箱管理员界面创建会议室和设备资源的文章，希望对客户有所帮助：&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/uLdqvamOprpHaofmxyTydg&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;O365中如何创建资源邮箱&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt; （ &lt;a target=&quot;_blank&quot;&gt;http://mp.weixin.qq.com/s/uLdqvamOprpHaofmxyTydg）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下一篇预告：Office 365系列 （2）混合部署：Exchange Server与O365的混合环境搭建&lt;/p&gt;

</description>
<pubDate>Wed, 06 Dec 2017 16:24:00 +0000</pubDate>
<dc:creator>搪瓷小娃娃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/changruijun/p/7995390.html</dc:identifier>
</item>
<item>
<title>Java IO（2）阻塞式输入输出（BIO） - OKevin</title>
<link>http://www.cnblogs.com/yulinfeng/p/7995559.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yulinfeng/p/7995559.html</guid>
<description>&lt;p&gt;　　在上文中&lt;a href=&quot;http://www.cnblogs.com/yulinfeng/p/7896470.html&quot; target=&quot;_blank&quot;&gt;《Java IO（1）基础知识——字节与字符》&lt;/a&gt;了解到了什么是字节和字符，主要是为了对Java IO中有关字节流和字符流有一个更好的了解。&lt;/p&gt;
&lt;p&gt;　　本文所述的输出输出指的是Java中传统的IO，也就是阻塞式输入输出（Blocking I/O， BIO），在JDK1.4之后出现了新的输入输出API——NIO（New I/O或Non-blocking I/O），也就是同步非阻塞式输入输出，再到后面随着NIO的发展出现了新的异步非阻塞式的输入输出——AIO。&lt;/p&gt;
&lt;p&gt;　　本文将对BIO，即阻塞式输入输出的字节流以及字符流做简要概述。 需要明确对于输出：InputStream、Reader表示输入，前者表示字节流，后者表示字符流；OutStream、Writer表示输出，前者表示字节流，后者表示字符流。&lt;/p&gt;

&lt;p&gt;　　对于字节流的输入顶层类是InputStram、其输出对应的顶层类是OutputStream。&lt;/p&gt;
&lt;h2&gt;输入流（InputStream）&lt;/h2&gt;
&lt;p&gt;　　站在程序的角度，读取文件的动作称为输入，InputStream是一个抽象类，Java中IO的设计并不仅仅是只有InputStream类，因为存在许多输入流，例如网络、文件等，这些都能为程序提供数据源，而不同的数据源则通过不同的InputStream子类来接收。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; ByteArrayInputStream——字节数组。&lt;/li&gt;
&lt;li&gt; StringBufferInputStream——String对象，这个类年代久远已经被废除了，想要将String对象转换为流，推荐使用StringReader。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; FileInputStream&lt;/strong&gt;——从文件中读取信息，这个流是比较常用的类，因为通常情况下我们都是对文件进行读写操作，所以也会着重讨论这个类。&lt;/li&gt;
&lt;li&gt; PipedInputStream——和PipedOutputStream配合使用实现“管道化”的概念。&lt;/li&gt;
&lt;li&gt; FileterInputStream——这个类比较特殊，从名字上看叫做“过滤器输入流”，它是在输入流中为“装饰器”提供基类。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　着重来看FileInputStream类，如何从文件中读取信息。&lt;/p&gt;
&lt;p&gt;　　FileInputStream 一共有3个构造方法： &lt;/p&gt;
&lt;ol&gt;&lt;li&gt; InputStream in = new FileInputStream(“/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json”); //直接传递文件路径字符串，在这个构造函数中会为路径中的文件创建File对象。&lt;/li&gt;
&lt;li&gt; InputStream in = new FileInputStream(new File(“/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json””)); //传递File类型的对象，也就是我们自己为路径中的文件构造为File文件类型。&lt;/li&gt;
&lt;li&gt; InputStream in = new FileInputStream(new FileDescriptor()); //第三个构造方法传递的是“文件描述符”对象，通过文件描述符来定位文件，如果比较了解Linux和C的话应该是对“文件描述符”这个概念有所耳闻，在许多C源码中就时常出现“fd”这个变量，其表示的就是文件描述符，就是用于定位文件。这一个在Java日常的应用开发中不常用，用到它的地方其实就是System.out.println的封装。暂时可以忽略。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　其实深入到FileInputStream这个对象的源码可以发现，大部分核心的源码都是native方法，之所以只用nativa方法是因为本地方法速度快。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; File file = &lt;span&gt;new&lt;/span&gt; File(&quot;/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; InputStream in = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(file);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] b = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[64&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;in.read(b);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; System.out.println(&lt;span&gt;new&lt;/span&gt; String(b));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这段代码是读取本地文件获取文件中的信息，其中read方法关键，FileInputStream中一共有3个read重载方法：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; public int read() //返回读取的字节，FileInputStream是按照字节流的方式读取，使用该方法将一次读取一个字节并返回该字节。该方法中会调用private native int read0()本地方法。&lt;/li&gt;
&lt;li&gt; public int read(byte b[]) //将读取的字节全部放到字节数组b中，这个字节数组b是我们提前定义好的，用于存放读取文件的字节表示，返回一共读取的字（1个字母表示1个字，1中文通常则是3个字）。该方法会调用private native int readBytes(byte b[], int off, int len)本地方法。&lt;/li&gt;
&lt;li&gt;read(byte b[], int off, int len) //读取数据的开始处以及待存放字节数组的长度，基本同上，返回一共读取的字符（1个字母表示1个字符，1中文通常占用3个字节也就是3个字符）。该方法会调用private native int readBytes(byte b[], int off, int len)本地方法。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　这基本上就构成了通过FileInputStream字节流读取文件的API，到了这里应该会有一个疑问，那就是读取出来的字节放到我们定义的字节数组中，而这个数组有需要在初始化时给定大小，那此时是如何知道待读取的文件大小呢？上面定义的64个字节大小的数组，如果待读取的文件有128字节甚至更大呢？就好像上面的例子，如果之定义1个字节大小，那么最后只会输出文件中的第1个字节。但如果定义64个字节大小的字节数组，那又显得比较浪费。&lt;/p&gt;
&lt;h2&gt;输出流（OutputStream）&lt;/h2&gt;
&lt;p&gt;　　同样是站在程序的角度，写入文件的操作称为输出。和InputStream类比，它也有许多实现类，在这里不再一一举出，着重来看FileOutputStream输出到本地文件的类。如果文件不存在则创建。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; OutputStream out = &lt;span&gt;new&lt;/span&gt; FileOutputStream(&quot;/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; String str = &quot;this is data&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; out.write(str.getBytes());    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于是以字节流的方式输出，自然也是需要将输出的内容转换为字节。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　FileOutputStream类的构造方法一共有5个：主要是分为“文件地址”、“是否以追加方式写入”、“文件描述符”。 &lt;/p&gt;
&lt;ol&gt;&lt;li&gt; OutputStream out = new FileOutputStream(“/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json”); //直接传递文件路径字符串，在构造方法中会将其构造为一个File对象，如果文件不存在则会新建文件，默认将覆盖文件的内容进行写入。因为它实际上是调用FileInputStream(File, boolean)构造方法。&lt;/li&gt;
&lt;li&gt; OutputStream out = new FileOutputStream(new File(“/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json””)) //传递File对象，默认将覆盖文件的内容进行写入。实际还是调用FileInputStream(File, boolean)。&lt;/li&gt;
&lt;li&gt; OutputStream out = new FileOutputStream(“/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json”, true); //第一个参数如第一点所述，第二个参数则表示以追加的方式写入。&lt;/li&gt;
&lt;li&gt; OutputStream out = new FileOutputStream(new File(“/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json””), true) //向上参考 &lt;/li&gt;
&lt;li&gt; OutputStream out = new FileOutputStream (new FileDescriptor()); //第三个构造方法传递的是“文件描述符”对象，不需要过多的关注这个构造方法，因为实在能用的地方不多。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　对于文件输出的核心API是write方法，对应文件输入的read方法。既然read能单个读取，那么write也有单个写入，其重载方法一共有3个。 &lt;/p&gt;
&lt;ol&gt;&lt;li&gt; public void write(int b); //写入单个字节，该方法会调用private native write(b, append)这个方法是私有且本地的，至于第二个append的参数则是表示是否追加写入文件，这里的参数是在构造方法中定义的，默认不追加写入而是以覆盖的方式写入。&lt;/li&gt;
&lt;li&gt; public void write(byte b[]); //写入字节，这里传递转换后的字节数组，通常我们是需要写入一个字符串，而这里调用String.valueOf将其转换为字符数组。此方法会调用private native void writeBytes(byte b[], int off, int len, boolean append)，和写入的类似，第二个参数表示字节数组从哪个地方开始写入，len表示写入多少，最后一个还是表示是否是追加写入。&lt;/li&gt;
&lt;li&gt; public void write(byte b[], int off, int len); //分析见上 这是对OutputStream的其中一个实现类做的简要讲述，API也较为简单，类比很好掌握。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;输入流（Reader）&lt;/h2&gt;
&lt;p&gt;　　对于字符流的文件读取方式可以不用像字节流那样，读取出来是一个字节，想要输出显示这个字节则需要将这个字节转换为字符。字符流读取出来的文件则直接就是字符，不需要再重新转化。Reader和InputStream类似，也是一个抽象类，它也有不少的实现，其主要实现如下。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; CharArrayReader&lt;/li&gt;
&lt;li&gt; StringReader&lt;/li&gt;
&lt;li&gt; InputStreamReader——这个类略有不同，这个类是字节流和字符流之间的桥梁，它能将字节流转换为字符流，相对比于“FileInputStream”，字节流的本地文件读取实际上是InputStreamReader的子类——FileReader&lt;/li&gt;
&lt;li&gt; PipedReader&lt;/li&gt;
&lt;li&gt; FilterReader&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　对比字符流的FileInputStream类，此处使用FileReader。和FileInputStream类似它同样有3个构造方法：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; Reader reader = new FileReader(/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json”); //直接传递文件路径字符串，在这个构造函数中会为路径中的文件创建File对象。 &lt;/li&gt;
&lt;li&gt; Reader reader = new FileReader(new File(“/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json””)); //传递File类型的对象，也就是我们自己为路径中的文件构造为File文件类型。 &lt;/li&gt;
&lt;li&gt; Reader reader = new FileReader(new FileDescriptor()); //第三个构造方法传递的是“文件描述符”对象，通过文件描述符来定位文件，如果比较了解Linux和C的话应该是对“文件描述符”这个概念有所耳闻，在许多C源码中就时常出现“fd”这个变量，其表示的就是文件描述符，就是用于定位文件，暂时对它可以忽略。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　可以看到它的API操作几乎和FileInputStream如出一辙，唯一不同的是，它定义的是字符数组而不是字节数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Reader reader = &lt;span&gt;new&lt;/span&gt; FileReader(&quot;/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[] c = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[64&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;reader.read(c);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; System.out.println(String.valueOf(c));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　同字节输入流FileInputStream类似，它的读取API也是read，并且它也有3个重载方法。如果还能记得FileInputStream的3个read重载方法，那么这里也不难猜出FileReader的3个read重载方法分别是：读取一个字符；读取所有字符；读取范围内的字符。实际上进入FileReader类后可以发现在FileReader类中并没有read方法，因为它继承自InputStreamReader，最后发现实际上FileReader#read调用的是父类InputputStreamReader#read方法，而且和字节流的read使用native本地方法略有不同，InputputStreamReader并没有采用native方法，而是使用了一个叫做StreamDecoder类，这个类源于sun包，并没有源代码，不过还是可以带着好奇心来一看反编译后的结果。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;InputputStreamReader#read&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; read(&lt;span&gt;char&lt;/span&gt; cbuf[], &lt;span&gt;int&lt;/span&gt; offset, &lt;span&gt;int&lt;/span&gt; length) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sd.read(cbuf, offset, length);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用的StreamDecoder#read方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　对于使用FileReader#read方法调用的则是它的父类InputStreamReader#read，其实我认为可以这么理解：基于字符流的输入输出实际上是我们人为对它进行了转换，数据在网络中的传输实际还是以二进制流的方式，或者说是字节的方式，为了我们方便阅读，在传输到达时人为地将其转换为了字符的形式。所以即使这里是使用的FileReader以字符流的方式输入，但实际上它使用了字节-字符之间的桥梁——InputStreamReader类。也就是说StreamDecoder类很就是字节-字符转换的核心类。关于StreamDecoder类确实涉及比较复杂，Reader字符流本身也比字节流要复杂不少。这个地方的源码暂时还未深入了解。&lt;/p&gt;
&lt;h2&gt;输出流（Writer）&lt;/h2&gt;
&lt;p&gt;　　和字节输出流以及字符输入流之间的对比Writer也有很多实现类，我们找到有关本地文件写入的类——FileWriter，同样发现它继承自OutputStreamWriter，这个类是Writer的字节子类和InputStreamReader类似是字节流和字符流转换的桥梁。&lt;/p&gt;
&lt;p&gt;　　有了上面的例子，这里不再逐个叙述它的构造方法以及write重载方法，有一个需要关注的地方就是它的flush方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Writer writer = &lt;span&gt;new&lt;/span&gt; FileWriter(&quot;/Users/yulinfeng/Documents/Coding/Idea/maveneg/src/main/java/bio/test.json&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; String str = &quot;hello&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;writer.write(str);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; writer.flush();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码中如果不调用flush方法，字符串将不会写入到文件中。这是因为在写文件时，Java会将数据先存入缓存区，缓存区满后再一次写入到文件中，在这里“hello”并没有占满缓存，故需要在调用write方法后再调用flush方法防止在缓存区中的数据没有及时写入文件。&lt;/p&gt;
&lt;p&gt;　　不过这里有一个令我比较疑惑的是，在使用字节流输出只含1个字符到文件时，并没有使用flush也会将数据写到文件；而在字符流中则像上面的那种情况如果不使用flush则数据不会写入文件。答案确实是使用字节流输出数据到文件时，不需要使用flush，因为调用&lt;strong&gt;FileInputStream并没有重写flush方法，而是直接调用了父类OutputStream的falush方法，而OutputStream#flush方法里什么都没有，就是一个空方法；&lt;/strong&gt;而使用&lt;strong&gt;FileWriter中虽然也并未实现flush方法，但在其父类OutputStreamWriter却实现了Writer的flush方法&lt;/strong&gt;，因为在Writer类中flush方法是一个抽象方法必须实现。这里实际又会有一个疑问，为什么字符流不需要缓存，而字节流需要呢？其实就是因为对于字节流来说，是直接操作文件流，可以理解为“端到端”，而对于字符流来说中间多了一次转换为字符在“端到端”的中间利用了缓存（内存）将字符存放在了缓存中。所以在实际开发中利用字节流的方式输入输出相对更多。&lt;/p&gt;

&lt;p&gt;　　上面说了这么多，看似并没有多少干货，大多是关于这几个流的使用方法，如果仔细看下来会发现最大的干货在于最后的flush疑问。这实际上能揭开关于“字节流”和“字符流”之间的区别。 在重复一次，尽管字节流中有flush方法，但是flush在字节流FileOutputStream并没用，JDK源码能说明一切，因为FileOutputStream调用的flush方法根本就是一个空实现。然而在字符流中那就可得注意了，在FileReader调用了write方法后记住调用flush方法，清空缓存写入文件。 这个问题基本就能解释字节流和字符流之间的区别了，字节流直接操作文件，字符流虽然最后的呈现以及写入是字符，但其最终还是以字节在传输，字节到字符的转换是在内存中完成的，这也就是字符流用到了缓存的原因。其实想想就可以知道，对于两者哪个更好，字节流更常用，因为它直接操作文件读取写入字节并且不限于文本，可以是音乐、图片、视频，而字符流主要是针对纯文本文件，况且它还要转换一次，效率恐怕就没有字节来得那么快了，故一般就是直接使用字节流——InputStream和OutputStream操作文件。&lt;/p&gt;

&lt;p&gt;　　这一部分的内容将解释本文的另一主题——阻塞式输出输出。&lt;/p&gt;
&lt;p&gt;　　首先需要了解何为“阻塞”。如果对显示锁Lock有所了解的话，应该是会知道它的两个方法一个是阻塞式获取锁——lock，直到成功地获取所后才返回；另一个是非阻塞式获取锁——tryLock，它首先尝试获取锁，成功获取所则成功返回，未能获取锁也会立即返回，并不会一直等在这里获取锁。相对于阻塞式的IO也是类似，阻塞式IO也会一直等待数据的读取和写入直到完成；而对应的非阻塞式IO则不会这样做，它会立即返回，不管是完成或未完成。&lt;/p&gt;
&lt;p&gt;　　再举个例子，在现实生活中你去买烟，老板说等下我去仓库里拿，你就一直在那里等老板从仓库里拿烟，这个时候你啥也不做就干等着，这就是阻塞；对于非阻塞，你还是在买烟，你还是在等老板给你拿烟，不过此时你可以玩玩手机，时不时问下老板好了没有。&lt;/p&gt;
&lt;p&gt;　　上面的例子都是在“同步”条件下的阻塞与非阻塞。当然还有异步阻塞与非阻塞，这里暂不涉及异步相关，所以本文所述阻塞与非阻塞均是在同步状态下。&lt;/p&gt;
&lt;p&gt;　　在此有必要了解什么是同步，通俗地说就是你进行下一步动作需要依赖上一步的执行结果。有时在我们的应用程序中，读取文件并不是下一步所必需的，也就是说这是两个不相干的逻辑，此时如果采用同步的手段去读取文件，读完过后再做另外的逻辑显然这个时间就被浪费了，通常情况下采取的措施是——伪异步，单独创建一个线程执行读取文件的操作，代码形如以下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        readFile();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}).start();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;doSomething();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lamda表达式则更加简单：
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;new Thread(() -&amp;gt; readFile()).start();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;doSomething();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　脱离场景谈同步阻塞式的传统IO显得很无力也不好理解，下面将结合Socket网络编程再次试着进一步理解“同步阻塞式IO”。&lt;/p&gt;
&lt;p&gt;　　以Java中使用UDP进行数据通信为例，服务器端在创建一个socket后会调用其receive等待客户端数据的到来，而DatagramSocket#receive就是阻塞地等待客户端数据，如果数据一直不来，它将会一直“卡”在这个方法的调用处，也就是程序此时被阻塞挂起，程序无法继续执行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步阻塞式，服务器端接收数据&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; DatagramPacket request = &lt;span&gt;new&lt;/span&gt; DatagramPacket(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[1024], 1024&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;socket.receive(request);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; processData(&lt;span&gt;new&lt;/span&gt; String(request.getData()));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　试想以上代码，客户端发来的第1条、第2条……这些数据并无直接联系，它们只需要交给服务器端处理即可，但此时服务器端是同步阻塞式的获取数据并进行处理，在第1条数据未处理完时，第2条数据就必须等待，通常地做法就是上面提到的采用伪异步的方式对接收到的数据进行处理。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;（伪）异步阻塞式，服务器端接收数据&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; DatagramPacket request = &lt;span&gt;new&lt;/span&gt; DatagramPacket(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[1024], 1024&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;socket.receive(request);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt; {        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lamda表达式&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         processData(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(request.getData()));
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        e.printStackTrace();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }).start();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面代码服务端接收到数据后将新开启一个线程对数据进行处理（更好地方式是利用线程池来管理线程），尽管采用了“伪异步”的方式处理数据，但实际上这是针对的是客户端发送数据多，发送数据快时所做的改进措施，但如果客户端发送的数据少，发送数据慢，实际上上面的修改并无多大意义，因为&lt;strong&gt;此时的症结不在于对服务器端对数据接收与处理的快慢，而在于服务器端将会一直阻塞获取数据使得服务器端程序被挂起。&lt;/strong&gt;所以问题还是回到了“阻塞”式IO上来，想要解决这个问题就需要使用到“非阻塞”式IO，这也是下节所讲内容。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;这是一个能给程序员加buff的公众号 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/630246/201710/630246-20171018224424427-1683168589.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 06 Dec 2017 15:56:00 +0000</pubDate>
<dc:creator>OKevin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yulinfeng/p/7995559.html</dc:identifier>
</item>
<item>
<title>关于如何在微信里面让video不全屏播放 - 菜鸟的飞翔梦</title>
<link>http://www.cnblogs.com/HanJie0824/p/7995553.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/HanJie0824/p/7995553.html</guid>
<description>&lt;p&gt;        发现一个更简单的解决方法，加上一条属性即可。x5-video-player-type=”h5″。通过设置这个属性，让video开启同层H5播放器。另外在X5内核里，video是单独的一个view，会覆盖在任何元素之上，据说是为了统一用户体验，加上这个属性之后，也可以让其他元素浮在video上面了。&lt;/p&gt;
&lt;p&gt;经过测试，在IOS设备，依然还需要添加如下属性&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  x-webkit-airplay=”true” playsinline webkit-playsinline=”true”
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;video id=&quot;video&quot; src=&quot;mp4.mp4&quot; x-webkit-airplay=&quot;true&quot; playsinline webkit-playsinline=&quot;true&quot; x5-video-player-type=&quot;h5&quot;&amp;gt;&amp;lt;/video&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外还有几个属性 x5-video-player-fullscreen=”true”，视频播放时将会进入到全屏模式。&lt;/p&gt;
&lt;p&gt;x5­video­orientation，声明播放器支持的方向，可选值： landscape 横屏, portraint竖屏 ，此属性只在声明了x5­video­player­type=”h5″情况下生效。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;video &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;m.mp4&quot;&lt;/span&gt;&lt;span&gt; playsinline&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; webkit-playsinline&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; 
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;x-webkit-airplay&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; x5-video-player-type&lt;/span&gt;&lt;span&gt;=&quot;h5&quot;&lt;/span&gt;&lt;span&gt; x5-video-orientation&lt;/span&gt;&lt;span&gt;=&quot;h5&quot;&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;x5-video-player-fullscreen&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; preload&lt;/span&gt;&lt;span&gt;=&quot;auto&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;object-fit:fill;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;video&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;preload=&quot;auto&quot;   开启视频缓冲，页面加载完即加载视频&lt;/p&gt;
&lt;p&gt;webkit-playsinline=&quot;true&quot;  控制当前视频在当前设置的div里面播放，不脱离文档流&lt;/p&gt;
&lt;p&gt;x-webkit-airplay=&quot;true&quot;  支持Airplay的设备&lt;/p&gt;
&lt;p&gt;x5-video-player-type=&quot;h5&quot;  开启同层播放器，取消播放器的默认的播放按钮和播放器控制器控制面板，整个页面只保留微信默认自带的返回和关闭菜单&lt;/p&gt;
&lt;p&gt;x5-video-player-type=&quot;h5&quot;  x5-video-player-fullscreen=&quot;true&quot;  同层播放器设置类型为h5和设置视频播放为全屏幕&lt;/p&gt;
&lt;p&gt; style=&quot;object-fit:fill;&quot; css3样式设置填充整个屏幕&lt;/p&gt;
&lt;p&gt;通过属性的设置和样式的控制让视频全屏显示。&lt;/p&gt;


&lt;p&gt;请看demo&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;56&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&amp;gt;
    &amp;lt;title&amp;gt;Examples&amp;lt;/title&amp;gt;
    &amp;lt;meta content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0,user-scalable=no&quot; name=&quot;viewport&quot;/&amp;gt;
    &amp;lt;meta name=&quot;description&quot; content=&quot;&quot;&amp;gt;
    &amp;lt;meta name=&quot;keywords&quot; content=&quot;&quot;&amp;gt;
    &amp;lt;link href=&quot;&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;style&amp;gt;
    *{margin:0;padding: 0}
    html,body,video{width: 100%;height: 100%; position: relative;overflow: hidden;}
    video{ object-fit: cover;}
    div,#endBtn{ position: absolute; width: 100px;height: 100px; left: 50%;top: 50%; margin-left: -50px;margin-top: -50px; background: red;z-index: 100;color: #fff;text-align: center;font-size: 14px; line-height: 100px;border:none;
        transition: all 1s ease;-webkit-transition: all 1s ease;
      }
    div.move{
        transform: translate3d(0,-688px,0);
        -webkit-transform: translate3d(0,-688px,0);
    }
    #endBtn{
    transition: all 1s ease;-webkit-transition: all 1s ease;
    transform: translate3d(0,688px,0);
        -webkit-transform: translate3d(0,688px,0);
    }
    #endBtn.move{
        transform: translate3d(0,0px,0);
        -webkit-transform: translate3d(0,0,0);
    }
&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;div&quot;&amp;gt;点击播放&amp;lt;/div&amp;gt;
    &amp;lt;video id=&quot;video&quot; src=&quot;http://itakeo.com/down/video/mp4.mp4&quot; poster=&quot;poster.jpg&quot; muted x-webkit-airplay=&quot;true&quot; playsinline  webkit-playsinline=&quot;true&quot;  x5-video-player-type=&quot;h5&quot;  &amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;button id=&quot;endBtn&quot;&amp;gt;再次播放&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script&amp;gt;
    div.ontouchend = div.onclick = function(){
        this.classList.add('move')
        video.play()
    }
    endBtn.ontouchend = endBtn.onclick = function(){
        this.classList.remove('move')
        video.play()
    }
    video.addEventListener('ended',function(){
       endBtn.classList.add('move')
    })
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　更多关于关于iOS video标签限制和支持格式&lt;br/&gt;　　请参考Apple文档&lt;br/&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW1&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2017-12-06 23:54:32&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 06 Dec 2017 15:55:00 +0000</pubDate>
<dc:creator>菜鸟的飞翔梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/HanJie0824/p/7995553.html</dc:identifier>
</item>
<item>
<title>jquery无new构建学习笔记 - 三十亿少女的梦</title>
<link>http://www.cnblogs.com/yonglin/p/7995555.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yonglin/p/7995555.html</guid>
<description>&lt;p&gt;　　当我们想要创建一个对象，我们可能使用new方法去构建一个对象，那按道理jquery也是一个对象，应该也是用new jquery()来构建呀为什么我们创建jquery对象不用new jquery()而是直接使用类似$(ele)的方式去构建出来一个jquery对象呢？其实内部还是使用了new来构建的，只是jquery内部帮我们构建了而已，请看下面代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Jquery(selector, context) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; new Jquery(selector, context);
    }

    Jquery.prototype &lt;/span&gt;=&lt;span&gt; {
        version:&lt;/span&gt;'1.01'&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　直接这样内部使用new来构建Jquery，很明显是有问题的，这样的话就形成了死循环。为了解决死循环的问题，请看下面代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Jquery(selector, context) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Jquery.prototype.init(selector, context);
}

Jquery.prototype &lt;/span&gt;=&lt;span&gt; {
    version:&lt;/span&gt;'1.01'&lt;span&gt;,
    init: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = &quot;lin&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; Jquery();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; Jquery();
console.log(a.version); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.01&lt;/span&gt;
console.log(a.name);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lin&lt;/span&gt;
a.name = &quot;na&quot;&lt;span&gt;;
console.log(b.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;na&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　死循环的问题确实解决了，但是又发现了新的问题，可以看到a和b两个对象的属性是公用的,我修改a.name属性为na，b.name属性也跟着变为了na，其原因就是this都是指向Jquery的&lt;/p&gt;
&lt;p&gt;　　为了解决这个问题，我们可以每次调用Jquery()的时候都构建一个新的对象，改进代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Jquery(selector, context) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Jquery.prototype.init(selector, context); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意看，这里多了个new&lt;/span&gt;
&lt;span&gt;}

Jquery.prototype &lt;/span&gt;=&lt;span&gt; {
    version:&lt;/span&gt;'1.01'&lt;span&gt;,
    init: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = &quot;lin&quot;&lt;span&gt;;
        console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; Jquery();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; Jquery();
console.log(a.version); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;
console.log(a.name);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lin&lt;/span&gt;
a.name = &quot;na&quot;&lt;span&gt;;
console.log(b.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;na&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样处理之后，属性共享的问题已经解决了，每个对象都有各自的属性，可以自由修改，每个对象互不影响，但是又又又发现了新的问题，可以看到我们控制台打印a.version这个属性的时候是读取不到这个属性的，原因就在于此时Jquery.prototype和Jquery.prototype.init.prototype是互不相干的，我们创建的是Jquery.prototype.init对象,所以只能读到Jquery.prototype.init.prototype上的属性而读取不到Jquery.prototype上的属性的(该例指version这个属性)，解决办法很简单，就是把Jquery.prototype赋值给Jquery.prototype.init.prototype，这样就相当于把Jquery原型上的属性全部赋值到了Jquery.init的原型上，请看下面代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Jquery(selector, context) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Jquery.prototype.init(selector, context);
}

Jquery.prototype &lt;/span&gt;=&lt;span&gt; {
    version:&lt;/span&gt;'1.01'&lt;span&gt;,
    init: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name = &quot;lin&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    }
}

Jquery.prototype.init.prototype &lt;/span&gt;= Jquery.prototype;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画龙点睛之笔&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; Jquery();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b =&lt;span&gt; Jquery();
console.log(a.version); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.01&lt;/span&gt;
console.log(a.name);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;lin&lt;/span&gt;
a.name = &quot;na&quot;&lt;span&gt;;
console.log(b.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;na&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到，我们控制台打印a对象的version属性，已经可以读取并且打印出来了。&lt;/p&gt;
&lt;p&gt;　　至此，已经完成了Jquery的无new构建。&lt;/p&gt;

&lt;p&gt;ps：jQuery.fn其实就是jQuery的prototype，jquery源码可以看到该条语句：jQuery.fn = jQuery.prototype = {};&lt;/p&gt;
&lt;p&gt;　　$()和jquery()其实是一样的，jquery源码可以看到该条语句： window.jQuery = window.$ = jQuery;&lt;/p&gt;
</description>
<pubDate>Wed, 06 Dec 2017 15:55:00 +0000</pubDate>
<dc:creator>三十亿少女的梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yonglin/p/7995555.html</dc:identifier>
</item>
<item>
<title>函数传值的学习笔记 - 一念春秋</title>
<link>http://www.cnblogs.com/sujianfeng/p/7995545.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sujianfeng/p/7995545.html</guid>
<description>&lt;ul&gt;&lt;li&gt;简单值（基本标量）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　总是通过值拷贝来赋予，null,undefined,string,number,boolean.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; num = 3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; str = &quot;a&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; bol = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; nul = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; und =&lt;span&gt; undefined;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; change(a){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; a == 'number'&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 a = 4&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; a == 'string'&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 a = 'b'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; a == 'boolean'&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 a = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意null的类型是object&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; a == 'object'&lt;span&gt;){  
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 a = 'notNull'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;undefined即是类型，也是该类型得值。&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; a == 'undefined'&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 a = 'lala'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }    
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             console.log('改变后的值'+&lt;span&gt;a);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        change(num);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        change(str);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        change(bol);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        change(nul);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        change(und);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         console.log('原值'+&lt;span&gt;num);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         console.log('原值'+&lt;span&gt;str);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         console.log('原值'+&lt;span&gt;bol);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         console.log('原值'+&lt;span&gt;nul);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         console.log('原值'+&lt;span&gt;und);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1254201/201712/1254201-20171206223922284-602383567.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　将简单值当参数传入函数后，因为传入的是原值得拷贝，所以无论在函数里如何变化这个参数，原值依然是原值，不会受影响。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;复合值，object（包括array，function，和所有的对象包装器）&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;
        &lt;span&gt;var&lt;/span&gt; arr1 = [1,2,3&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr2 =&lt;span&gt; arr1;
        arr2.push(&lt;/span&gt;4&lt;span&gt;);
        console.log(arr1);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3,4]&lt;/span&gt;
        console.log(arr2);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3,4]&lt;/span&gt;
&lt;span&gt;
        arr2&lt;/span&gt;=[5,6,7,8&lt;span&gt;];
        console.log(arr1);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3,4]&lt;/span&gt;
        console.log(arr2);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[5,6,7,8]&lt;/span&gt;

&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;arr1是[1,2,3]的引用，arr1赋值给arr2后，arr2也指向了[1,2,3]。此时arr1和arr2同时指向了同一个数组值，所以arr2中push了一个4进来，在arr1中能得到同步反馈。就好像arr1和arr2住在同一个房间里，谁对房间([1,2,3])做了一点改变，这个改变将同时影响两个人。当arr2=[5,6,7,8]后，再显示arr1和arr2，值不一样了。这也很好理解，arr2现在成了[5,6,7,8]的引用了，相当于自己找了另外一间房间，做出的改变当然不能再影响到另外一个人了。&lt;/p&gt;

&lt;p&gt;　　再来看下面这段代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;
        &lt;span&gt;var&lt;/span&gt; arr = [1,2,3&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; change(obj){
            obj.push(&lt;/span&gt;4&lt;span&gt;);
            obj&lt;/span&gt;=[13,14&lt;span&gt;];
            obj.push(&lt;/span&gt;520&lt;span&gt;);
        }
        change(arr);
        console.log(arr);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;先猜猜看输出什么&lt;/span&gt;

&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　公布正确答案，&lt;strong&gt;[1,2,3,4]。&lt;/strong&gt;为什么不是1314520？？？&lt;/p&gt;
&lt;p&gt;　　还记得前面举得换房间的例子吗。把arr当参数传入的时候，obj也成了[1,2,3]引用，所以第一次push的4的时候，两者是同在一个房间的，当obj=[13,14]的时候，说明obj找到了一生一世的所爱，到宾馆开房去了，不在同一个房间了，那后来push进来的520，秀恩爱，跟arr已经没有关系了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1254201/201712/1254201-20171206232828347-611290230.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一图以蔽之，刚开始两者指向同一个数值值，后来其中一个指向了另一个数组。言情一点说，就是刚开始的时候两个人心向一处（[1,2,3]），后来一者见异思迁，心中有了别人([4,5,6])，分手了，相互没关系了，那输出的值肯定不一样呀。&lt;/p&gt;

&lt;p&gt;　　故事到这里本该结束了，可是简单值（就是string，number那群屌丝）表示不服气，为什么同样是当参数传入，复合值可以通过函数改变自身，我们却不可以，难道屌丝就没有逆袭的机会吗？&lt;/p&gt;
&lt;p&gt;　　机会还是要给的，来，请看代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;
        &lt;span&gt;var&lt;/span&gt; number = 3&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; {a:number};
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; nixi(o){
            o.a &lt;/span&gt;= 666&lt;span&gt;;
        }
        nixi(obj);
        number&lt;/span&gt;=&lt;span&gt;obj.a;
        console.log(number);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;666，逆袭成功&lt;/span&gt;
&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　哈哈，简单值想通过函数改变，就得曲线救国，先变成对象的得一部分，然后传入函数，之后再把改变后的值赋值回来。这是我目前能想到的方法。&lt;/p&gt;


</description>
<pubDate>Wed, 06 Dec 2017 15:53:00 +0000</pubDate>
<dc:creator>一念春秋</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sujianfeng/p/7995545.html</dc:identifier>
</item>
<item>
<title>.Net Self Hosting WebServer 的几种方式 - 不负春光，努力生长</title>
<link>http://www.cnblogs.com/Wolfmanlq/p/7995193.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wolfmanlq/p/7995193.html</guid>
<description>&lt;h2&gt;写在前面：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;IIS是Windows平台非常关键的组件，它是微软自带的Web服务器，可以很方便的帮助我们运行起一个网站，WebApi等服务，提供给外部来访问。即使它被很多java或者ruby的同学各种鄙视，被.Net平台的同学们吐槽性能不好，不够灵活，部署受限等等，它依然在默默的帮助我们非常轻松的构建起一个Web应用。在.Net Core中微软提供了更为强大的Web服务器 Kestrel ，它 是一个跨平台&lt;a href=&quot;https://docs.microsoft.com/zh-CN/aspnet/core/fundamentals/servers/index&quot; data-linktype=&quot;relative-path&quot;&gt;ASP.NET Core 的 web 服务器&lt;/a&gt;基于&lt;a href=&quot;https://github.com/libuv/libuv&quot; data-linktype=&quot;external&quot;&gt;libuv&lt;/a&gt;，跨平台的异步 I/O 库。它可以单独使用来host一个web服务，也可以与&lt;span data-ttu-id=&quot;7b9dc-119&quot;&gt;反向代理服务器（如 IIS、Nginx 或 Apache）结合使用。 &lt;span data-ttu-id=&quot;7b9dc-120&quot;&gt;反向代理服务器接收到来自 Internet 的 HTTP 请求，并在进行一些初步处理后将这些请求转发到 Kestrel。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/423536/201712/423536-20171206221403128-41814559.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/423536/201712/423536-20171206221411534-715022150.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么今天我们来聊一聊另外的两种可以self host的解决方案：&lt;/p&gt;
&lt;h2&gt; 第一种方式：Owin&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Owin 是 Open Web Interface for .NET 的简称，从字面意思解释可以看出OWIN是针对.NET平台的开放Web接口。那Web接口是谁和谁之间的接口呢？是Web应用程序与Web服务器之间的 接口，OWIN就是.NET Web应用程序与Web服务器之间的接口。为什么需要这样一个接口呢？因为.NET Web应用程序是运行于Web服务器之中的，.NET Web应用程序需要通过Web服务器接收用户的请求，并且通过Web服务器将响应内容发送用户。如果没有这样一个接口，.NET Web应用程序就要依赖于所运行的具体Web服务器，比如ASP.NET应用程序要依赖于IIS。有了这个接口，ASP.NET应用程序只需依赖这个抽象接口，不用关心所运行的Web服务器。所以我们可以得出下面的结论：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;OWIN的作用就是通过引入一组抽象接口，解耦了.NET Web应用程序与Web服务器，再次体现了接口的重要性。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;而我们知道在软件开发中，每次解耦都是一次很大的进步。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;更近一层我们可以理解为：OWIN是对ASP.NET Runtime的抽象。它将应用与服务器解耦， 使得便携式 .NET Web 应用以及跨平台的愿望成为现实， 标准的 OWIN 应用可以在任何 OWIN 兼容的服务器上运行，不再依赖与 Windows 和 IIS，我们更可以不用装一大堆笨重的IDE（如 visual studio）来开发web应用程序，也不再那么的依赖于IIS去Host我们的程序。&lt;/p&gt;
&lt;p&gt;我们可以用下面的一张图来表示它究竟可以做什么：&lt;/p&gt;
&lt;div align=&quot;left&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/423536/201712/423536-20171206223659113-1622503616.png&quot; alt=&quot;&quot; width=&quot;740&quot; height=&quot;476&quot;/&gt;
&lt;/div&gt;















&lt;p&gt;具体使用如下：&lt;/p&gt;
&lt;p&gt;新建EventsController 继承自：System.Web.Http.ApiController &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EventsController : ApiController
    {
        [Authorize]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;events&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Event&amp;gt;&lt;span&gt; Get()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetAllEventsFromRepo();
        }

        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;events/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Event GetById(Guid id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; GetAllEventsFromRepo().First(x =&amp;gt; x.EventId ==&lt;span&gt; id);
        }

        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;events&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Event&amp;gt; GetByType(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; type)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; GetAllEventsFromRepo().Where(x =&amp;gt;&lt;span&gt; x.EventType.Equals(type, StringComparison.InvariantCultureIgnoreCase));
        }

        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;events&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HttpResponseMessage Post(Event @event)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (@event == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpResponseMessage(HttpStatusCode.BadRequest);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpResponseMessage(HttpStatusCode.Created);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; IEnumerable&amp;lt;Event&amp;gt;&lt;span&gt; GetAllEventsFromRepo()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; List&amp;lt;Event&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Event
                {
                    EventId &lt;/span&gt;= Guid.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;45D80D13-D5A2-48D7-8353-CBB4C0EAABF5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                    Timestamp &lt;/span&gt;= DateTime.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-06-30T01:37:41.0660548&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                    EventType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SearchView&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Event
                {
                    EventId &lt;/span&gt;= Guid.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;83F9262F-28F1-4703-AB1A-8CFD9E8249C9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                    Timestamp &lt;/span&gt;= DateTime.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-06-30T01:37:52.2618864&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                    EventType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DetailsView&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Event
                {
                    EventId &lt;/span&gt;= Guid.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3E83A96B-2A0C-49B1-9959-26DF23F83AEB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                    Timestamp &lt;/span&gt;= DateTime.Parse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-06-30T01:38:00.8518952&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                    EventType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SearchView&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            };
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后新建一个Startup.cs的class，我们可以看到这里体现了Middleware(中间件)的思想，即插即用，熟悉.Net Core的同学的对它并不陌生。 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configuration(IAppBuilder app)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; config = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpConfiguration();
            config.MapHttpAttributeRoutes();

            app.UseWebApi(config);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ContainerBuilder();
            builder.RegisterApiControllers(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(EventsController).Assembly);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; container =&lt;span&gt; builder.Build();

            app.UseAutofacMiddleware(container);
            app.UseAutofacWebApi(config);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码中的ContainerBuilder 是Autofac提供的功能，它可以让我们动态的注册Controller到容器中，还有一个非常重要的东西就是 HttpConfiguration，它用来表示 &lt;a href=&quot;https://msdn.microsoft.com/zh-cn/system.web.http.httpserver&quot;&gt;HttpServer&lt;/a&gt; 实例的配置。&lt;/p&gt;
&lt;p&gt;然后我们只需要下面一句代码就可以让我们API 工作起来了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
WebApp.Start&amp;lt;TestStartup&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:51502&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样通过 http://localhost:51502 地址就可以访问我们的服务了，非常的简单。&lt;/p&gt;
&lt;h2&gt; 第二种方式：通过进程直接调用iisexpress.exe&lt;/h2&gt;
&lt;p&gt;iisexpress.iis我们很熟悉，它是windows平台自带的IIS 的运行文件，默认路径在： C:\Program Files\IIS Express 目录下，我们可以在代码中创建进程运行起这个exe就可以了。具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; IISExpress : IDisposable
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;     Stores whether this instance has been disposed.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; _isDisposed;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;     Stores the IIS Express process.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Process _process;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;     Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
        {
            Dispose(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            GC.SuppressFinalize(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Starts IIS Express using the specified directory path and port.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;directoryPath&quot;&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The directory path.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;port&quot;&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The port.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;address&quot;&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The address.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Start(&lt;span&gt;string&lt;/span&gt; directoryPath, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; port, Uri address)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_process != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The IISExpress process is already running.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (address != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request =&lt;span&gt; (HttpWebRequest)WebRequest.Create(address);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; webResponse =&lt;span&gt; (HttpWebResponse)request.GetResponse();

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (webResponse.StatusCode ==&lt;span&gt; HttpStatusCode.OK)
                    {
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
                {
                    Trace.WriteLine(ex);
                }
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iisExpressPath =&lt;span&gt; DetermineIisExpressPath();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arguments = &lt;span&gt;string&lt;/span&gt;.Format(CultureInfo.InvariantCulture, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/path:\&quot;{0}\&quot; /port:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, directoryPath, port);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; info = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProcessStartInfo(iisExpressPath)
            {
                WindowStyle &lt;/span&gt;=&lt;span&gt; ProcessWindowStyle.Hidden,
                ErrorDialog &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                LoadUserProfile &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                CreateNoWindow &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                UseShellExecute &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                Arguments &lt;/span&gt;=&lt;span&gt; arguments
            };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; startThread = &lt;span&gt;new&lt;/span&gt; Thread(() =&amp;gt;&lt;span&gt; StartIisExpress(info))
            {
                IsBackground &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            };

            startThread.Start();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Releases unmanaged and - optionally - managed resources.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;disposing&quot;&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; to release both managed and unmanaged resources; &lt;/span&gt;&lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; to release only unmanaged resources.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dispose(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; disposing)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (_isDisposed)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (disposing)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_process != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Free managed resources&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (_process.HasExited == &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
                    {
                        SendStopMessageToProcess(_process.Id);
                        _process.Close();
                    }

                    _process.Dispose();
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Free native resources if there are any&lt;/span&gt;
            _isDisposed = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;     Determines the IIS express path.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;     A &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;String&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt; instance.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; DetermineIisExpressPath()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; iisExpressPath;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Environment.Is64BitOperatingSystem)
            {
                iisExpressPath &lt;/span&gt;=&lt;span&gt; Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                iisExpressPath &lt;/span&gt;=&lt;span&gt; Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
            }

            iisExpressPath &lt;/span&gt;= Path.Combine(iisExpressPath, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;C:\Program Files\IIS Express\iisexpress.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; iisExpressPath;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The send stop message to process.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;processId&quot;&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The process id.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendStopMessageToProcess(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; processId)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; ptr =&lt;span&gt; NativeMethods.GetTopWindow(IntPtr.Zero);
                     ptr &lt;/span&gt;!=&lt;span&gt; IntPtr.Zero;
                     ptr &lt;/span&gt;= NativeMethods.GetWindow(ptr, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;))
                {
                    &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; num;
                    NativeMethods.GetWindowThreadProcessId(ptr, &lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt; num);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (processId ==&lt;span&gt; num)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; handle = &lt;span&gt;new&lt;/span&gt; HandleRef(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, ptr);
                        NativeMethods.PostMessage(handle, &lt;/span&gt;&lt;span&gt;0x12&lt;/span&gt;&lt;span&gt;, IntPtr.Zero, IntPtr.Zero);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ArgumentException)
            {
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Starts the IIS express.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;info&quot;&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The info.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        [SuppressMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Microsoft.Design&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CA1031:DoNotCatchGeneralExceptionTypes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            Justification &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Required here to ensure that the instance is disposed.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; StartIisExpress(ProcessStartInfo info)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                _process &lt;/span&gt;=&lt;span&gt; Process.Start(info);

                _process.WaitForExit();
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
            {
                Dispose();
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;     The native methods.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NativeMethods
        {
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The get top window.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;hWnd&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The h wnd.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;IntPtr&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
            [DllImport(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user32.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SetLastError = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
            &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt;&lt;span&gt; IntPtr GetTopWindow(IntPtr hWnd);

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The get window.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;hWnd&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The h wnd.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;uCmd&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The u cmd.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;IntPtr&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
            [DllImport(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user32.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SetLastError = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
            &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; IntPtr GetWindow(IntPtr hWnd, &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; uCmd);

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The get window thread process id.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;hwnd&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The hwnd.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;lpdwProcessId&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The lpdw process id.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;uint&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
            [DllImport(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user32.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SetLastError = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
            &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt; GetWindowThreadProcessId(IntPtr hwnd, &lt;span&gt;out&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; lpdwProcessId);

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The post message.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;hWnd&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The h wnd.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;Msg&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The msg.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;wParam&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The w param.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;lParam&quot;&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The l param.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;bool&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
            [&lt;span&gt;return&lt;/span&gt;&lt;span&gt;: MarshalAs(UnmanagedType.Bool)]
            [DllImport(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user32.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, SetLastError = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
            &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; PostMessage(HandleRef hWnd, &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; Msg, IntPtr wParam, IntPtr lParam);
        }
    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码比较简单，大家都能看得懂，我们只需要指定需要host的文件目录，访问端口，以及公开Uri地址就可以了，这样就能调用起IIS的服务，帮助我们host服务。&lt;/p&gt;
&lt;h2&gt;写在最后：&lt;/h2&gt;
&lt;p&gt;可能不仅限于这两种方式，我只是把我最近使用到的两种方式分享给出来，如果大家有更好的方式，欢迎交流分享。&lt;/p&gt;

</description>
<pubDate>Wed, 06 Dec 2017 14:18:00 +0000</pubDate>
<dc:creator>不负春光，努力生长</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wolfmanlq/p/7995193.html</dc:identifier>
</item>
<item>
<title>Solr7 安装部署 管理界面介绍 - ITDragon龙</title>
<link>http://www.cnblogs.com/itdragon/p/7995040.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itdragon/p/7995040.html</guid>
<description>&lt;p&gt;本章重点介绍CentOS 安装部署Solr7 ，Solr的管理界面介绍，添加核心Core配置，Dataimport导入数据，Documents 在线维护索引，Query复杂查询和一些常见问题处理办法。&lt;/p&gt;
&lt;h2 id=&quot;什么是solr&quot;&gt;什么是Solr&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Solr 是Apache下的一个顶级开源项目，采用Java开发，基于Lucene的全文搜索服务器。Solr可以独立运行在Jetty、Tomcat等这些Servlet容器中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里谈到了Lucene，它是一个开放源代码的全文检索引擎工具包。提供了完整的查询引擎和索引引擎，目的是为开发人员提供工具包，以方便的在系统中实现全文检索的功能。&lt;br/&gt;而Solr 的目标是打造一款企业级的搜索引擎系统，可以独立运行。并且Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。&lt;/p&gt;
&lt;h2 id=&quot;solr7-安装部署&quot;&gt;Solr7 安装部署&lt;/h2&gt;
&lt;p&gt;首先安装环境的jdk是 jdk1.8 或者更高，建议tomcat是tomcat8.0或者更高&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;You will need the Java Runtime Environment (JRE) version 1.8 or higher&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;[itdragon@localhost solr-server]$wget http://mirror.bit.edu.cn/apache/lucene/solr/7.1.0/solr-7.1.0.zip
[itdragon@localhost solr-server]$unzip solr-7.1.0.zip
[itdragon@localhost solr-server]$ls
apache-tomcat-8.5-solr  solr-7.1.0
[itdragon@localhost solr-server]$mkdir -p apache-tomcat-8.5-solr/webapps/solr
[itdragon@localhost solr-server]$cd apache-tomcat-8.5-solr/webapps/solr/
[itdragon@localhost solr]$cp -r /home/itdragon/solr-server/solr-7.1.0/server/solr-webapp/webapp/* ./
[itdragon@localhost solr]$cp -r /home/itdragon/solr-server/solr-7.1.0/server/lib/ext/* ./WEB-INF/lib/
[itdragon@localhost solr]$cp -r /home/itdragon/solr-server/solr-7.1.0/server/lib/metrics*.* ./WEB-INF/lib/
[itdragon@localhost solr]$cp -r /home/itdragon/solr-server/solr-7.1.0/dist/solr-dataimporthandler-* ./WEB-INF/lib/
[itdragon@localhost solr]$cd ../../
[itdragon@localhost apache-tomcat-8.5-solr]$mkdir solrhome
[itdragon@localhost apache-tomcat-8.5-solr]$cp -r /home/itdragon/solr-server/solr-7.1.0/server/solr/* ./solrhome/
[itdragon@localhost apache-tomcat-8.5-solr]$vim webapps/solr/WEB-INF/web.xml
&amp;lt;env-entry&amp;gt;
   &amp;lt;env-entry-name&amp;gt;solr/home&amp;lt;/env-entry-name&amp;gt;
   &amp;lt;env-entry-value&amp;gt;solrhome地址，pwd查看&amp;lt;/env-entry-value&amp;gt;
   &amp;lt;env-entry-type&amp;gt;java.lang.String&amp;lt;/env-entry-type&amp;gt;
&amp;lt;/env-entry&amp;gt;
&amp;lt;!--
  &amp;lt;security-constraint&amp;gt;
    ......省略
  &amp;lt;/security-constraint&amp;gt;
--&amp;gt;
[itdragon@localhost apache-tomcat-8.5-solr]$cd bin/
[itdragon@localhost apache-tomcat-8.5-solr]$./startup.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一步：系统环境准备：jdk版本在1.8，tomcat8.5&lt;br/&gt;第二步：下载solr7，并解压在当前目录&lt;br/&gt;第三步：在tomcat，webapps目录下创建solr目录，并将solr-7.1.0/server/solr-webapp/webapp/* 目录下的所有内容拷贝过去&lt;br/&gt;第四步：将需要的jar导入到 WEB-INF/lib/ 下&lt;br/&gt;第五步：在tomcat目录下创建solrhome（目录名自定义），并将solr-7.1.0/server/solr/* 目录下的所有内容拷贝过去&lt;br/&gt;第六步：修改WEB-INF/web.xml 文件，指定solrhome的位置，并注释security-constraint 权限内容&lt;br/&gt;第七步：启动tomcat，并访问http://ip:port/solr/index.html#/&lt;br/&gt;注意：访问http://ip:port/solr/ 显示404，目前还没有找到原因，网上说jar没到导入，可是笔者都导入了。&lt;/p&gt;
&lt;p&gt;看到管理页面说明安装成功&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/806956/201712/806956-20171205162638394-1869628963.png&quot; alt=&quot;Solr管理页面&quot;/&gt;&lt;/p&gt;
&lt;p&gt;存在的问题&lt;br/&gt;1 80端口占用&lt;br/&gt;修改 tomcat/conf/server.xml 文件，更换端口号。&lt;br/&gt;2 Logging页面，日志不能正常显示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[itdragon@localhost solr]$mkdir -p WEB-INF/classes
[itdragon@localhost solr]$cp /home/itdragon/solr-server/solr-7.1.0/server/resources/log4j.properties ./WEB-INF/classes/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一步：在tomcat WEB-INF目录下创建classes目录&lt;br/&gt;第二步：将solr-7.1.0/server/resources/目录下的log4j.properties文件拷贝到classes目录中，重启Solr&lt;/p&gt;
&lt;h2 id=&quot;管理界面介绍&quot;&gt;管理界面介绍&lt;/h2&gt;
&lt;h3 id=&quot;添加核心core&quot;&gt;添加核心Core&lt;/h3&gt;
&lt;p&gt;在管理页面，点击Core Admin，选择AddCore，添加核心&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/806956/201712/806956-20171205170733581-1223894950.png&quot; alt=&quot;添加核心&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;：自定义的名字，建议和instanceDir保持一致&lt;br/&gt;&lt;strong&gt;instanceDir&lt;/strong&gt;： solrhome目录下的实例类目&lt;br/&gt;&lt;strong&gt;dataDir&lt;/strong&gt;：默认填data即可&lt;br/&gt;&lt;strong&gt;config&lt;/strong&gt;：指定配置文件，new_core/conf/solrconfig.xml&lt;br/&gt;&lt;strong&gt;schema&lt;/strong&gt;：指定schema.xml文件，new_core/conf/schema文件(实际上是managed-schema文件)&lt;br/&gt;注意！在scheme下面有一个感叹号！&lt;br/&gt;instanceDir and dataDir need to exist before you can create the core&lt;/p&gt;
&lt;p&gt;如果你不管他，直接点击Add Core 会提示 solrconfig.xml 文件找不到&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Error CREATEing SolrCore 'new_core': Unable to create core [new_core] Caused by: Can't find resource 'solrconfig.xml' in classpath or '/home/itdragon/solr/apache-tomcat-8.5/solrhome/new_core'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方法如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[itdragon@localhost new_core]$mkdir conf
[itdragon@localhost new_core]$cp -r /home/itdragon/solr-server/solr-7.1.0/server/solr/configsets/_default/conf/* ./conf/
[itdragon@localhost solrhome]$cp -r /home/itdragon/solr-server/solr-7.1.0/contrib/ ./
[itdragon@localhost solrhome]$cp -r /home/itdragon/solr-server/solr-7.1.0/dist/ ./
检查solrconfig.xml和contrib目录，dist目录的相对位置
&amp;lt;!--
&amp;lt;lib dir=&quot;${solr.install.dir:../../../..}/contrib/extraction/lib&quot; regex=&quot;.*\.jar&quot; /&amp;gt;
......省略
--&amp;gt;
&amp;lt;lib dir=&quot;${solr.install.dir:../../}/contrib/extraction/lib&quot; regex=&quot;.*\.jar&quot; /&amp;gt;
......省略&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一步：将solr-7.1.0/server/solr/configsets/_default/目录下的conf 拷贝到 new_core 目录下。正确的目录结构：new_core/conf/solrconfig.xml&lt;br/&gt;第二步：将contrib目录，dist目录拷贝到solrhome目录中&lt;br/&gt;第三步：检查solrconfig.xml文件配置的路径是否正确，重启服务&lt;/p&gt;
&lt;p&gt;重启服务后即可正常创建Core，然后instanceDir文件夹（new_core）里会自动生成一个core.properties文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name=new_core
config=solrconfig.xml
schema=schema.xml
dataDir=data&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二次创建core，就不用这么麻烦了，直接把第一次创建的new_core目录复制一份，修改core.properties文件中的name 即可。&lt;br/&gt;在Core Selector 中选择刚创建的 new_core，会出现很多菜单。这是本章的另一个重点。重点学习的内容：Query（查询页面），Documents （索引文档），Dataimport(导入数据)，Analysis（分析，下章节和中文分词一起介绍）。其他了解即可。&lt;/p&gt;
&lt;h3 id=&quot;dataimport导入数据&quot;&gt;Dataimport(导入数据)&lt;/h3&gt;
&lt;p&gt;点击Dataimport 显示 Sorry, no dataimport-handler defined! 解决方法如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[itdragon@localhost ~]$cd solr-server/apache-tomcat-8.5-solr/solrhome/contrib/dataimporthandler/lib
# 导入solr-dataimporthandler 和 mysql-connector-java jar包
[itdragon@localhost solrhome]$vim new_core/conf/solrconfig.xml
&amp;lt;lib dir=&quot;${solr.install.dir:../../}/contrib/dataimporthandler/lib&quot; regex=&quot;.*\.jar&quot; /&amp;gt;
......省略
&amp;lt;requestHandler name=&quot;/dataimport&quot; class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&amp;gt;
    &amp;lt;lst name=&quot;defaults&quot;&amp;gt;
      &amp;lt;str name=&quot;config&quot;&amp;gt;data-config.xml&amp;lt;/str&amp;gt;
    &amp;lt;/lst&amp;gt;
&amp;lt;/requestHandler&amp;gt;
[itdragon@localhost solrhome]$vim new_core/conf/data-config.xml
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;  
&amp;lt;dataConfig&amp;gt;   
&amp;lt;dataSource type=&quot;JdbcDataSource&quot;   
          driver=&quot;com.mysql.jdbc.Driver&quot;   
          url=&quot;jdbc:mysql://localhost:3306/jpa&quot;   
          user=&quot;root&quot;   
          password=&quot;root&quot;/&amp;gt;   
&amp;lt;document&amp;gt;   
    &amp;lt;entity name=&quot;product&quot; query=&quot;SELECT pid,name,catalog,catalog_name,price,description,picture FROM products &quot;&amp;gt;
         &amp;lt;field column=&quot;pid&quot; name=&quot;id&quot;/&amp;gt; 
         &amp;lt;field column=&quot;name&quot; name=&quot;product_name&quot;/&amp;gt; 
&amp;lt;field column=&quot;catalog&quot; name=&quot;product_catalog&quot;/&amp;gt;
         &amp;lt;field column=&quot;catalog_name&quot; name=&quot;product_catalog_name&quot;/&amp;gt; 
         &amp;lt;field column=&quot;price&quot; name=&quot;product_price&quot;/&amp;gt; 
         &amp;lt;field column=&quot;description&quot; name=&quot;product_description&quot;/&amp;gt; 
         &amp;lt;field column=&quot;picture&quot; name=&quot;product_picture&quot;/&amp;gt; 
    &amp;lt;/entity&amp;gt;   
&amp;lt;/document&amp;gt;   

&amp;lt;/dataConfig&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一步：进入solrhome/contrib/dataimporthandler/lib 目录下，若没有lib则创建一个，导入solr-dataimporthandler-7.1.0.jar 和 mysql-connector-java-5.1.17.jar 包&lt;br/&gt;第二步：修改new_core/conf/solrconfig.xml 文件，使其加载dataimporthandler/lib下的jar包&lt;br/&gt;第三步：在new_core/conf/solrconfig.xml 文件底部添加DataImportHandler 内容&lt;br/&gt;第四步：在new_core/conf/ 目录下创建data-config.xml（数据库配置和对应的字段），重启服务&lt;/p&gt;
&lt;p&gt;jar包和sql文件：&lt;br/&gt;&lt;a href=&quot;https://github.com/ITDragonBlog/daydayup/tree/master/Solr/data-import-jar&quot; class=&quot;uri&quot;&gt;https://github.com/ITDragonBlog/daydayup/tree/master/Solr/data-import-jar&lt;/a&gt;&lt;br/&gt;如果出现下图内容则说明配置成功。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/806956/201712/806956-20171205182152409-98787547.png&quot; alt=&quot;导入数据&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command&lt;/strong&gt;：full_import：全量导入；delta_import:增量导入。&lt;br/&gt;选择 全量导入，Execute执行，Refresh Status刷新查看状态，其他都选默认即可。&lt;br/&gt;Clean：在索引开始构建之前是否删除之前的索引，默认为true&lt;br/&gt;Commit：在索引完成之后是否提交。默认为true&lt;br/&gt;&lt;strong&gt;Execute&lt;/strong&gt;：执行导入&lt;br/&gt;&lt;strong&gt;Refresh Status&lt;/strong&gt;：刷新后才能看到数据发生了变化（点一次刷新一次）&lt;/p&gt;
&lt;h3 id=&quot;documents-索引文档&quot;&gt;Documents （索引文档）&lt;/h3&gt;
&lt;p&gt;索引的增加，修改，删除相关操作。其中修改的逻辑是先删除后增加。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/806956/201712/806956-20171206115637988-613831217.png&quot; alt=&quot;增加索引&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比较重要的是前三个参数&lt;br/&gt;&lt;strong&gt;Request-Handler(qt)&lt;/strong&gt;：update（新增，更新和删除都用update）&lt;br/&gt;&lt;strong&gt;Document Type&lt;/strong&gt;：提交的索引文档类型，有JSON、XML等格式&lt;br/&gt;&lt;strong&gt;Document(s)&lt;/strong&gt;：提交的索引文档内容&lt;br/&gt;Commit Within：每1000毫秒执行&lt;br/&gt;Overwrite：true，若文档存在则默认覆盖&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除索引&lt;/strong&gt;：删除用json格式会出错，用xml格式后面需添加&amp;lt; commit/&amp;gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/806956/201712/806956-20171206115337550-536151368.png&quot; alt=&quot;删除索引&quot;/&gt;&lt;/p&gt;
&lt;p&gt;工作中，我们不可能为了个别数据去写代码修改数据，那么熟练使用Documents，对我们的工作有很大的帮助。&lt;/p&gt;
&lt;h3 id=&quot;query查询页面&quot;&gt;Query（查询页面）&lt;/h3&gt;
&lt;p&gt;查询所有价格在10到20之间的数据，并以价格降序输出商品类目名，商品标题，商品价格信息。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/806956/201712/806956-20171205231111722-72380527.png&quot; alt=&quot;查询&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Request-Handler(qt)&lt;/strong&gt;：select查询操作&lt;br/&gt;&lt;strong&gt;q（query）&lt;/strong&gt;：查询条件，key:value 形式，只能满足简单的查询&lt;br/&gt;&lt;strong&gt;fq（filter query）&lt;/strong&gt;：过滤条件。对q的补充，实现复杂的查询。如：product_price:[10.0 TO 20.0] 表示价格在10~20之间。&quot; * &quot; 表示无限，[ * TO 20.0] 表示小于20.0&lt;br/&gt;&lt;strong&gt;sort&lt;/strong&gt;：对查询结果排序。如：product_price desc 表示价格降序&lt;br/&gt;&lt;strong&gt;start，rows&lt;/strong&gt;，开始页数，和每页多少条，简称页码&lt;br/&gt;&lt;strong&gt;fl（field list）&lt;/strong&gt;：指定那些字段有返回值。多个值用&quot;,&quot;分隔。如：product_catalog_name,product_name,product_price&lt;br/&gt;&lt;strong&gt;df（default field）&lt;/strong&gt;：默认域，当q查询没有key的时候，发挥作用&lt;br/&gt;&lt;strong&gt;wt（write type）&lt;/strong&gt;：输出格式，一般都是json&lt;br/&gt;&lt;strong&gt;hl（high light）&lt;/strong&gt;：高亮，搜索的结果若不高亮，那就没啥意义了。下一章会介绍&lt;/p&gt;
&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;
&lt;p&gt;Dashboard：&lt;br/&gt;显示了该Solr实例开始启动运行的时间、版本、系统资源（物理内存，交换空间）、jvm等信息&lt;br/&gt;Logging：Solr运行日志信息&lt;br/&gt;Java Properties：&lt;br/&gt;Solr在JVM 运行环境中的属性信息，包括类路径、文件编码、jvm内存设置等信息。&lt;br/&gt;Tread Dump：&lt;br/&gt;显示Solr Server中当前活跃线程信息，同时也可以跟踪线程运行栈信息。&lt;br/&gt;Overview：&lt;br/&gt;包含基本统计如当前文档数；和实例信息如当前核心的配置目录&lt;br/&gt;Files：&lt;br/&gt;在线预览solrhome/new_core/conf/* 文件或者目录&lt;br/&gt;Ping：&lt;br/&gt;请求来检查核心是否启动并响应请求，点击后显示响应的毫秒数&lt;br/&gt;Plugins / Stats：&lt;br/&gt;插件及其状态&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Solr7是基于Lucene的全文检索服务器，可以独立运行在servlet容器中&lt;/li&gt;
&lt;li&gt;Solr7的安装部署需要注意 tomcat/webapps/solr 和 solrhome 两个目录&lt;/li&gt;
&lt;li&gt;创建Solr Core需要注意 solrconfig.xml文件在new_core/conf目录中&lt;/li&gt;
&lt;li&gt;Query查询，q + fq 实现复杂的查询，sort排序，fl指定回显数据，hl高亮&lt;/li&gt;
&lt;li&gt;Documents，支持新增，更新，删除索引文档&lt;/li&gt;
&lt;li&gt;Dataimport，导入数据，需要注意配置 solrconfig.xml 文件和创建 data-config.xml 文件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;到这里Solr7 的安装部署，管理界面介绍就结束了。感谢阅读！欢迎点评！！&lt;/p&gt;
</description>
<pubDate>Wed, 06 Dec 2017 13:42:00 +0000</pubDate>
<dc:creator>ITDragon龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itdragon/p/7995040.html</dc:identifier>
</item>
<item>
<title>【读书笔记】《Effective Java》——创建和销毁对象 - 没课割绿地</title>
<link>http://www.cnblogs.com/justcooooode/p/7956048.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/justcooooode/p/7956048.html</guid>
<description>&lt;h3&gt;Item 1. 考虑用静态工厂方法替代构造器&lt;/h3&gt;
&lt;p&gt;获得一个类的实例时我们都会采取一个公有的构造器。&lt;span&gt;&lt;strong&gt;Foo x = new Foo()；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;同时我们应该掌握另一种方法就是&lt;strong&gt;静态工厂方法&lt;/strong&gt;（static factory method）。&lt;/p&gt;
&lt;p&gt;一句话总结，静态工厂方法其实就是一个返回类的实例的静态方法。&lt;/p&gt;
&lt;p&gt;书中给出的例子是Boolean的valueOf方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1177828/201712/1177828-20171202234925460-11585886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过valueOf方法将boolean基本类型转换成了一个Boolean类型，返回了一个新的对象引用。&lt;/p&gt;
&lt;p&gt;除&lt;strong&gt;valueOf&lt;/strong&gt;外，像Java中的&lt;strong&gt;getInstance&lt;/strong&gt;和&lt;strong&gt;newInstance&lt;/strong&gt;等方法都为静态工厂方法。&lt;/p&gt;
&lt;p&gt;静态工厂方法不同于设计模式中的工厂方法。&lt;/p&gt;
&lt;p&gt;那么为什么要使用静态工厂方法呢？下面是它的几大优势：&lt;/p&gt;
&lt;h4&gt;它们有名字&lt;/h4&gt;
&lt;p&gt;给构造器起名字，增强了代码的可读性。&lt;/p&gt;
&lt;p&gt;如果一个构造器的参数并不能确切描述它返回的对象，这时候可以考虑静态工厂方法。&lt;/p&gt;
&lt;p&gt;或者你的多个构造器只是在参数列表中的参数顺序上有所不同，那么除非你提供了详尽的文档说明，否则你下次使用时就会一脸懵逼，这几个构造器到底要选哪个🤔？&lt;/p&gt;
&lt;p&gt;例如下面这个例子，一个&lt;strong&gt;RandomIntGenerator&lt;/strong&gt;类，从类名可以看出这是个用来产生整型随机数的类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RandomIntGenerator {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; min;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; next(){...}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随机数的大小介于&lt;em&gt;min&lt;/em&gt;和&lt;em&gt;max&lt;/em&gt;两个参数之间，我们需要构造器去对它们进行初始化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; RandomIntGenerator(&lt;span&gt;int&lt;/span&gt; min, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max) {
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.min =&lt;span&gt; min;
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.max =&lt;span&gt; max;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很好，现在我们又想提供一个新的功能，用户只需要指定一个最小值即可，生成的随机数会介于指定的最小值和整型默认的最大值之间。&lt;/p&gt;
&lt;p&gt;所以，我们可能会添加一个新的构造器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; RandomIntGenerator(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; min) {
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.min =&lt;span&gt; min;
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.max =&lt;span&gt; Integer.MAX_VALUE;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里事情进展很顺利，但是有指定最小值的功能，相对的我们还要添加一个指定最大值的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; RandomIntGenerator(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; max) {
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.min =&lt;span&gt; Integer.MIN_VALUE;
  &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.max =&lt;span&gt; max;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是创建完之后你会得到一个编译错误，原因是两个构造器有相同的方法签名（方法名和参数类型）。&lt;/p&gt;
&lt;p&gt;这时静态工厂方法就派上用场了，重新构造如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RandomIntGenerator {
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; min;
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max;

  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; RandomIntGenerator(&lt;span&gt;int&lt;/span&gt; min, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.min =&lt;span&gt; min;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.max =&lt;span&gt; max;
  }

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; RandomIntGenerator between(&lt;span&gt;int&lt;/span&gt; max, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; min) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RandomIntGenerator(min, max);
  }

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; RandomIntGenerator biggerThan(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; min) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RandomIntGenerator(min, Integer.MAX_VALUE);
  }

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; RandomIntGenerator smallerThan(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; max) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RandomIntGenerator(Integer.MIN_VALUE, max);
  }

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; next() {...}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不仅没有了之前的错误，而且它们有着不同的名字，很清晰地描述了方法的功能。&lt;/p&gt;
&lt;p&gt;总之，由于静态工厂方法有名称，所以他们不受那些限制。&lt;/p&gt;
&lt;p&gt;当你有多个签名相同的构造器时，用几个名字有区分度的静态工厂方法代替可能是更好的解决办法。&lt;/p&gt;
&lt;h4&gt;不必在每次调用它们的时候创建一个新对象&lt;/h4&gt;
&lt;p&gt;每次调用构造器都会创建一个新对象，而静态工厂方法则不会。&lt;/p&gt;
&lt;p&gt;这使得不可变类可以使用预先定义好的实例，或者将构建好的实例缓存起来，进行重复利用，避免创建不必要的重复对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BooleanGenerator {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Boolean b1 &lt;/span&gt;= Boolean.valueOf(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        Boolean b2 &lt;/span&gt;= Boolean.valueOf(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

        Boolean b3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Boolean(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        Boolean b4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Boolean(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

        System.out.println(b1 &lt;/span&gt;==&lt;span&gt; b2);
        System.out.println(b3 &lt;/span&gt;==&lt;span&gt; b4);
    }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;output:
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到使用valueOf并不会创建新的对象，对于一些经常创建相同对象的程序，并且创建对象的代价很高，静态工厂方法可以极大地提升性能。&lt;/p&gt;
&lt;h4&gt;可以返回原返回类型的任何子类型的对象&lt;/h4&gt;
&lt;p&gt;在选择返回对象的类时有了更大的灵活性。&lt;/p&gt;
&lt;p&gt;API可以返回对象，同时不会使对象的类变成公有的既可以是非公有类，这样做的目的可以隐藏实现类。&lt;/p&gt;
&lt;p&gt;公有的静态工厂方法所返回的对象的类不仅可以是非公有的，而且该类还可以随着每次调用发生变化，这取决于静态工厂方法的参数值。&lt;/p&gt;
&lt;p&gt;参考&lt;strong&gt;java.util.EnumSet&lt;/strong&gt;中的&lt;em&gt;&lt;strong&gt;noneOf&lt;/strong&gt;&lt;/em&gt;方法，根据不同的参数类型选择返回的是&lt;strong&gt;RegularEnumSet&lt;/strong&gt;还是&lt;strong&gt;JumboEnumSet&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1177828/201712/1177828-20171203110057804-2002114252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来，书中通过&lt;strong&gt;服务提供者框架&lt;/strong&gt;（Service Provider Framework）来说明了静态工厂方法的另一个用法。&lt;/p&gt;
&lt;p&gt;利用的是静态工厂方法返回的对象所属的类，在编写包含该静态工厂方法的类时可以不必存在。&lt;/p&gt;
&lt;p&gt;看起来有点绕，下面来通过代码来看一下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务接口&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Service(){
 ...&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体的服务方法&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务提供者接口&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Provider{
    Service newService();
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不可实例化的类，用于服务注册和访问&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Services {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Services{};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;防止实例化

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将服务的名字映射到具体服务&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Map&amp;lt;String,Provider&amp;gt; providers = &lt;span&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;String, Provider&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DEFAULT_PROVIDER_NAME = &quot;&amp;lt;def&amp;gt;&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务提供者注册API
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认的注册方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; registerDefaultProvider(Provider p){
        registerProvider(DEFAULT_PROVIDER_NAME,p);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;真正的注册方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; registerProvider(String name, Provider p) {
        providers.put(name, p);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务访问API&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Service newInstance() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; newInstance(DEFAULT_PROVIDER_NAME);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;真正的实例化方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Service newInstance(String name) {
        Provider p &lt;/span&gt;=&lt;span&gt; providers.get(name);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(p == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;No provider registered with name:&quot; +&lt;span&gt; name);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; p.newService();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回服务实例&lt;/span&gt;
&lt;span&gt;    }
}       &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务提供者框架是指这样一个系统：&lt;strong&gt;多个服务提供者实现一个服务，系统为服务提供者的客户端提供多个实现，并把他们从实现中解耦出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这块有点难理解，先来看一下UML图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1177828/201712/1177828-20171203155517163-1625472356.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JDBC&lt;/strong&gt;就是利用的服务提供者框架，当我们创建数据库连接时，需要先加载对应的驱动，然后获取连接。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Class.forName(jdbcDriver);
conn &lt;/span&gt;= DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPasswd);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于JDBC来说&lt;strong&gt;Connection&lt;/strong&gt;就是它的服务接口，里面的方法，不同的数据库需要自己实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DriverManager&lt;/strong&gt;就是Services类，其中包含的registerDriver和getConnection方法对应的就是注册和访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Driver&lt;/strong&gt;是一个服务提供者接口&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后返回的服务实际上是通过服务提供者接口，实现了解耦。&lt;/p&gt;
&lt;h4&gt;在创建参数化类型实例的时候，使得代码变得更加简洁&lt;/h4&gt;
&lt;p&gt;如果你用的是JDK1.7之前的版本在定义一个HashMap，那你不得不这么写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Map&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在使用构造器时必须再写一遍类型参数，因为不支持类型推到，每次都要干重复性的工作。&lt;/p&gt;
&lt;p&gt;假设HashMap提供了静态工厂方法，事情就变得简单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;K,V&amp;gt; HashMap&amp;lt;K,V&amp;gt;&lt;span&gt; newInstance(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;K,V&amp;gt;&lt;span&gt;();    
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你就可以通过下面的代码代替上面繁琐的声明：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Map&amp;lt;String,String&amp;gt; map = HashMap.newInstance();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显然作者在写这本书时已经考虑到了这个问题（那时候JDK的版本是1.6），JDK1.7之后的版本有了类型推导。&lt;/p&gt;
&lt;p&gt;当然凡事都有两面性，除了上述的优点，静态工厂方法同样存在不足。&lt;/p&gt;
&lt;h6&gt;类如果不含共有的或者受保护的构造器，就不能被子类化&lt;/h6&gt;
&lt;p&gt;如果没有公有构造器，当然这个类就不能被子类继承。&lt;/p&gt;
&lt;p&gt;这也许是一个优点，因为鼓励程序使用&lt;strong&gt;组合&lt;/strong&gt;而不是继承。&lt;/p&gt;
&lt;h6&gt;他们与其他的静态方法实际上没有任何区别&lt;/h6&gt;
&lt;p&gt;在API文档中它们没有像构造器那样被明确标识出来，因此对于一个使用静态工厂方法而不是构造器的类来说，要想弄明白如何实例化，就需要费点事了。&lt;/p&gt;
&lt;p&gt;你可以使用注释或者如下的命名规则让用户知道这是一个静态工厂方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;valueOf&lt;/strong&gt;——返回的实例与它的参数具有相同的值，被用来做类型转换。e.g. String.valueOf()。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;of&lt;/strong&gt;——valueOf的一种更加简洁的替代，在EnumSet中使用并流行起来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getInstance&lt;/strong&gt;——通过方法的参数来描述返回实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;newInstance&lt;/strong&gt;——和getInstance一样，每次返回新的实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getType&lt;/strong&gt;、&lt;strong&gt;newType&lt;/strong&gt;——和上面两个方法类似，在工厂方法处于不同的类中时使用，Type表示工厂方法返回的对象类型。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总之，静态工厂方法和构造器各有优势，使用时需要衡量那种方法更好。&lt;/p&gt;
&lt;h3&gt;Item 2. 遇到多个构造器参数时要考虑用构建器&lt;/h3&gt;
&lt;p&gt;上一节介绍了静态工厂方法，虽然相对构造器来说有一定的优势，但是两者都有一个局限，就是存在大量可选参数时表现不是很好。&lt;/p&gt;
&lt;h4&gt;重叠构造器&lt;/h4&gt;
&lt;p&gt;当面对大量可选参数时，一些人可能会选择&lt;strong&gt;重叠构造器&lt;/strong&gt;（telescoping constructor）。&lt;/p&gt;
&lt;p&gt;文中举了一个食品营养成分表的例子，表中有些参数是必选的，有些参数是可选的。&lt;/p&gt;
&lt;p&gt;对于重叠构造器来说，第一个构造器只包含必选参数，第二个构造器有一个可选参数，第三个构造器有两个，以此类推，直到最后一个构造器包含所有参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Telescoping constructor pattern - does not scale well!&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NutritionFacts {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; servingSize;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (mL)            required&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; servings;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (per container) required&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; calories;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;                 optional&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; fat;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (g)             optional&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; sodium;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (mg)            optional&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; carbohydrate; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (g)             optional&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt; NutritionFacts(&lt;span&gt;int&lt;/span&gt; servingSize, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servings) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(servingSize, servings, 0&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; NutritionFacts(&lt;span&gt;int&lt;/span&gt; servingSize, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servings,
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; calories) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(servingSize, servings, calories, 0&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; NutritionFacts(&lt;span&gt;int&lt;/span&gt; servingSize, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servings,
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; calories, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fat) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(servingSize, servings, calories, fat, 0&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; NutritionFacts(&lt;span&gt;int&lt;/span&gt; servingSize, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servings,
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; calories, &lt;span&gt;int&lt;/span&gt; fat, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; sodium) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(servingSize, servings, calories, fat, sodium, 0&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; NutritionFacts(&lt;span&gt;int&lt;/span&gt; servingSize, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servings,
           &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; calories, &lt;span&gt;int&lt;/span&gt; fat, &lt;span&gt;int&lt;/span&gt; sodium, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; carbohydrate) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.servingSize  =&lt;span&gt; servingSize;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.servings     =&lt;span&gt; servings;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.calories     =&lt;span&gt; calories;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fat          =&lt;span&gt; fat;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sodium       =&lt;span&gt; sodium;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.carbohydrate =&lt;span&gt; carbohydrate;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重叠构造器像套圈一样，对参数进行赋值。&lt;/p&gt;
&lt;p&gt;你必须很小心地将值和参数的位置一一对应，随着参数数量的增加，你肯定不会记得第六个参数是什么。&lt;/p&gt;
&lt;p&gt;并且如果两个类型相同参数的顺序发生了调换，可能编译期不会提示错误，但在运行时会报错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重叠构造器模式可行，但是当有许多参数时，客户端代码会很难编写，并且可读性很差。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;JavaBeans模式&lt;/h4&gt;
&lt;p&gt;另一种解决办法是&lt;strong&gt;JavaBeans模式&lt;/strong&gt;，这种模式简单并且灵活，也是我们最经常使用的，通过setter方法来设置参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; JavaBeans Pattern - allows inconsistency, mandates mutability&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NutritionFacts {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Parameters initialized to default values (if any)&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; servingSize  = -1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Required; no default value&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; servings     = -1;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     &quot;     &quot;      &quot;      &quot;&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; calories     = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; fat          = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; sodium       = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; carbohydrate = 0&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NutritionFacts() { }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Setters&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setServingSize(&lt;span&gt;int&lt;/span&gt; val)  { servingSize =&lt;span&gt; val; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setServings(&lt;span&gt;int&lt;/span&gt; val)     { servings =&lt;span&gt; val; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setCalories(&lt;span&gt;int&lt;/span&gt; val)     { calories =&lt;span&gt; val; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setFat(&lt;span&gt;int&lt;/span&gt; val)          { fat =&lt;span&gt; val; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSodium(&lt;span&gt;int&lt;/span&gt; val)       { sodium =&lt;span&gt; val; }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setCarbohydrate(&lt;span&gt;int&lt;/span&gt; val) { carbohydrate =&lt;span&gt; val; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JavaBeans模式弥补了重叠构造器的不足，有着良好的可实现性和可读性。&lt;/p&gt;
&lt;p&gt;但是其也存在着不足：&lt;/p&gt;
&lt;p&gt;JavaBeans是可变的，意思是在被创建之后它们的状态可以通过setter方法随之更改。&lt;/p&gt;
&lt;p&gt;它们的域不能声明为final，这也使它们不能成为不可变对象，不能保证线程安全。&lt;/p&gt;
&lt;h4&gt;Builder模式&lt;/h4&gt;
&lt;p&gt;Builder模式作为一种更好的方法，既能保证安全性，还有着良好的可读性。&lt;/p&gt;
&lt;p&gt;通过Builder类来返回一个builder对象，然后在客户端调用Builder中的方法来设置参数，最后调用builder()方法来完成创建一个不可变对象。&lt;/p&gt;
&lt;p&gt;Builder类是一个静态的内部类，其中的方法和setter类似，并且可以实现链式调用，易于使用和阅读。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('00661b4a-5bc6-458a-804a-aefccada6910')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_00661b4a-5bc6-458a-804a-aefccada6910&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_00661b4a-5bc6-458a-804a-aefccada6910&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('00661b4a-5bc6-458a-804a-aefccada6910',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_00661b4a-5bc6-458a-804a-aefccada6910&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @ClassName: NutritionFacts
 * @Description: 构建器
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; LJH
 * @date 2017年6月26日 下午8:57:03
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NutritionFacts {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; required&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servingSize;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servings;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; optional&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; calories;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fat;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; sodium;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; carbo;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Builder {

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servingSize;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servings;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; calories = 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; fat = 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; sodium = 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; carbo = 0&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Builder(&lt;span&gt;int&lt;/span&gt; servingSize, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; servings) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.servingSize =&lt;span&gt; servingSize;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.servings =&lt;span&gt; servings;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Builder calories(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; val) {
            calories &lt;/span&gt;=&lt;span&gt; val;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Builder fat(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; val) {
            fat &lt;/span&gt;=&lt;span&gt; val;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Builder sodium(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; val) {
            sodium &lt;/span&gt;=&lt;span&gt; val;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Builder carbo(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; val) {
            carbo &lt;/span&gt;=&lt;span&gt; val;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NutritionFacts build() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NutritionFacts(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        }
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; NutritionFacts(Builder builder) {
        servingSize &lt;/span&gt;=&lt;span&gt; builder.servingSize;
        servings &lt;/span&gt;=&lt;span&gt; builder.servings;
        calories &lt;/span&gt;=&lt;span&gt; builder.calories;
        fat &lt;/span&gt;=&lt;span&gt; builder.fat;
        sodium &lt;/span&gt;=&lt;span&gt; builder.sodium;
        carbo &lt;/span&gt;=&lt;span&gt; builder.carbo;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getServingSize() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; servingSize;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getServings() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; servings;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getCalories() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; calories;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getFat() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fat;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getSodium() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sodium;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getCarbo() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; carbo;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        NutritionFacts cocaCola &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; NutritionFacts.Builder(240, 8).calories(100).sodium(35).carbo(27&lt;span&gt;).build();
        System.out.println(&lt;/span&gt;&quot;The nutritionfacts of cocaCola \nServing Size: &quot; + cocaCola.servingSize + &quot; ml&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;Servings: &quot; + cocaCola.servings + &quot; per container&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;Calories: &quot; +&lt;span&gt; cocaCola.calories);
        System.out.println(&lt;/span&gt;&quot;Fat: &quot; + cocaCola.fat + &quot; g&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;Sodium: &quot; + cocaCola.sodium + &quot; mg&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;Carbo: &quot; + cocaCola.carbo + &quot; g&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;使用Builder模式的好处如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;构建器能通过builder方法和setter方法对其参数强加约束条件并且检验，如果不满足条件可以抛出异常；&lt;/li&gt;
&lt;li&gt;使用了构建器模式的类可以是不可变的；&lt;/li&gt;
&lt;li&gt;builder可以有多个可变参数（varargs）； &lt;/li&gt;
&lt;li&gt;构建器模式十分灵活，可以利用单个builder构建多个对象，参数可以改变，也可以自动填充；&lt;/li&gt;
&lt;li&gt;利用带有泛型的builder可以生成一个抽象工厂。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Builder模式的一个缺点就是，你必须自己编写代码创建。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总之，如果类的构造器或者静态工厂方法中含有多个参数，优先选择Builder模式。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Item 3. 用私有构造器或者枚举类型强化Singleton属性&lt;/h3&gt;
&lt;p&gt;Singleton既单例模式，作为设计模式中的一种，和其他模式一样，如果没有在项目中使用过真的很难理解。&lt;/p&gt;
&lt;p&gt;单例模式虽然结构很简单，但一开始看的时候我就懵了😵，不知道为什么要这么做。&lt;/p&gt;
&lt;p&gt;看了几篇博客之后，把干巴巴的代码和实际应用结合起来后就变得容易理解。&lt;/p&gt;
&lt;p&gt;其中一篇博客中举了一个例子：&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;假设有这样一个应用，其中需要读取配置文件的内容。许多应用都会有自己的配置文件，开发人员可以对应用中的一些参数进行自定义，然后写入配置文件。&lt;/p&gt;
&lt;p&gt;在实际项目中通常会使用xml或者properties格式的文件作为配置文件，现在假设我们通过一个叫Config的类来实现读取配置文件的功能。客户端可以通过new一个Config实例来获得操作配置文件内容的对象。&lt;/p&gt;
&lt;p&gt;如果在程序运行时，有很多模块都需要加载配置文件，那么每使用一次都需要创建一个Config对象。这样做肯定会产生问题，在程序运行时会存在多个Config对象，而这些对象中的内容都是相同的，浪费了内存资源。&lt;/p&gt;
&lt;p&gt;那么怎样能减少这种浪费，每次用到Config类时，都返回同一个对象呢？答案就是单例模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现单例模式的方法有很多种，详细可以看&lt;a href=&quot;http://www.runoob.com/design-pattern/singleton-pattern.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最常用的是&lt;strong&gt;饿汉式&lt;/strong&gt;方法，优点是线程安全，创建简单。&lt;/p&gt;
&lt;p&gt;但是由于没有实现懒加载，无论有没有用到对象都会创建，浪费了一定的空间。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Singleton {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton INSTANCE = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Singleton();
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Singleton() {
        System.out.println(&lt;/span&gt;&quot;Singleton is created&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Singleton getInstance() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; INSTANCE;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printStr() {
        System.out.println(&lt;/span&gt;&quot;Singleton&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;java.lang.Runtime使用的就是该方法实现单例模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1177828/201712/1177828-20171206172011909-169191178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另一种是通过&lt;strong&gt;枚举&lt;/strong&gt;创建，这种方法是作者推荐的，利用了JDK1.5之后加入的Enum类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; EnumSingleton {
    INSTANCE;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printStr() {
        System.out.println(&lt;/span&gt;&quot;Singleton&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        EnumSingleton.INSTANCE.printStr();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到这个方法非常简洁明了，而且利用了枚举类的特性，提供了序列化机制，防止多次实例化。&lt;/p&gt;
&lt;p&gt;作者认为单元素的枚举类型已经成为了实现单例模式的最佳方法。&lt;/p&gt;
&lt;p&gt;不过感觉这种方法可读性不是很好，一般情况还是会选择饿汉式的创建方法。&lt;/p&gt;
&lt;h3&gt;Item 4. 通过私有构造器强化不可实例化的能力&lt;/h3&gt;
&lt;p&gt;我们经常会重复使用一些类，调用它们中的方法，这种情况下我们一般会把它们设计成一个&lt;strong&gt;工具类&lt;/strong&gt;，这个类中包含一些静态方法，我们可以直接通过类名调用。&lt;/p&gt;
&lt;p&gt;例如：&lt;strong&gt;java.lang.Math&lt;/strong&gt;，&lt;strong&gt;java.util.Arrays&lt;/strong&gt;，&lt;strong&gt;java.util.Collections&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这些工具类被设计成不可实例化的类，因为实例化对对它们来说没有意义。&lt;/p&gt;
&lt;p&gt;然而在缺少显示构造器的情况下，编译期会自动提供一个公共的、无餐的&lt;strong&gt;默认构造器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可能会试图通过抽象类的方式来使得这个类不能被实例化，但是抽象类可以被&lt;strong&gt;继承&lt;/strong&gt;，它的子类仍然可以被实例化。&lt;/p&gt;
&lt;p&gt;并且这样做会让用户以为设计成抽象类的目的是为了继承。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么怎样才能使一个类具有不可实例化的能力？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为只有提供一个显示的构造器，编译期才不会自动生成默认构造器，所以我们只需要将构造器设为&lt;strong&gt;私有的&lt;/strong&gt;（private）即可。&lt;/p&gt;
&lt;p&gt;这样由于外部的类和它的子类不能调用一个私有构造方法，这个类也就不能被实例化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Noninstantiable utility class&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UtilityClass {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Suppress default constructor for noninstantiability&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UtilityClass() {
     &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AssertionError();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了防止在这个类的内部调用构造器，可以使用一个断言AssertionError()来避免这种情况的发生。&lt;/p&gt;
&lt;h3&gt;Item 5. 避免创建不必要的对象&lt;/h3&gt;
&lt;p&gt;一般来说，最好通过重用对象来代替每次都创建一个功能相同的新对象。&lt;/p&gt;
&lt;p&gt;重用方式快速，并且简单。如果一个对象是&lt;strong&gt;不可变的&lt;/strong&gt;，那么它就可以一直被重用。&lt;/p&gt;
&lt;p&gt;创建字符串时，你可能会选择这么做：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
String s = &lt;span&gt;new&lt;/span&gt; String(“stringette”); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不要这么做！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用这种方式代替会更好：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
String s = “stringette”;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初次使用字面量创建字符串也会在堆中创建对象，不过之后使用相同字符串时，都会利用字符串常量池中的引用，而不会创建新的对象。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（关于两种方法创建字符串更详尽的介绍可以看这两篇&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/justcooooode/p/7603381.html&quot; target=&quot;_blank&quot;&gt;Java字符串常量池和intern()方法&lt;/a&gt;、&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/justcooooode/p/7670256.html&quot; target=&quot;_blank&quot;&gt;Java中的字符串字面量&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了重用不可变对象，也可以重用那些已知&lt;strong&gt;不会被修改&lt;/strong&gt;的&lt;strong&gt;可变对象&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如书中的例子，计算一个人是否是在“baby boomer”时期出生的。下面是一个反例：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Date birthDate;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Other fields, methods, and constructor omitted
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; DON’T DO THIS!&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isBabyBoomer() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Unnecessary allocation of expensive object&lt;/span&gt;
        Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(&quot;GMT&quot;&lt;span&gt;));
        gmtCal.set(&lt;/span&gt;1946, Calendar.JANUARY, 1, 0, 0, 0&lt;span&gt;);
        Date boomStart &lt;/span&gt;=&lt;span&gt; gmtCal.getTime();
        gmtCal.set(&lt;/span&gt;1965, Calendar.JANUARY, 1, 0, 0, 0&lt;span&gt;);
        Date boomEnd &lt;/span&gt;=&lt;span&gt; gmtCal.getTime();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; birthDate.compareTo(boomStart) &amp;gt;= 0 &amp;amp;&amp;amp; birthDate.compareTo(boomEnd) &amp;lt; 0&lt;span&gt;;
    }&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;可以看到在isBabyBoomer方法中，创建了&lt;strong&gt;Calendar&lt;/strong&gt;、&lt;strong&gt;TimeZone&lt;/strong&gt;和&lt;strong&gt;Date&lt;/strong&gt;几个不会被修改的对象，如果每次调用方法都创建几个不必要的对象就会造成内存资源的浪费。&lt;/p&gt;
&lt;p&gt;替代方法是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Date birthDate;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Other fields, methods, and constructor omitted&lt;/span&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * The starting and ending dates of the baby boom.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Date BOOM_START;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Date BOOM_END;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
        Calendar gmtCal &lt;/span&gt;= Calendar.getInstance(TimeZone.getTimeZone(&quot;GMT&quot;&lt;span&gt;));
        gmtCal.set(&lt;/span&gt;1946, Calendar.JANUARY, 1, 0, 0, 0&lt;span&gt;);
        BOOM_START &lt;/span&gt;=&lt;span&gt; gmtCal.getTime();
        gmtCal.set(&lt;/span&gt;1965, Calendar.JANUARY, 1, 0, 0, 0&lt;span&gt;);
        BOOM_END &lt;/span&gt;=&lt;span&gt; gmtCal.getTime();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isBabyBoomer() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; birthDate.compareTo(BOOM_START) &amp;gt;= 0 &amp;amp;&amp;amp; birthDate.compareTo(BOOM_END) &amp;lt; 0&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改进后的Person类只在初始化的时候创建&lt;strong&gt;Calendar&lt;/strong&gt;、&lt;strong&gt;TimeZone&lt;/strong&gt;和&lt;strong&gt;Date&lt;/strong&gt;这个几个对象，之后再调用isBabyBoomer方法就可以一劳永逸了。&lt;/p&gt;
&lt;p&gt;除了上面提到的两点，尽量做到以下来避免创建不必要的对象：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用静态工厂方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如Boolean.valueOf方法，不会重复创建对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优先使用基本类型，而不是装箱基本类型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同于基本类型，有时你可能会没有意识到程序会自动装箱，装箱就意味着创建对象。（虽然Character、Byte、Short、Integer和Long实现了常量池技术，但是范围只有[-127,128]）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用对象池，除非池中的对象是非常重量级的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如数据库连接池，将数据库连接对象保存在对象池中来重用。&lt;/p&gt;
&lt;h3&gt;Item 6. 消除过期的对象引用&lt;/h3&gt;
&lt;p&gt;虽然Java有自己的垃圾回收策略，可以回收那些无法被访问的对象的内存。&lt;/p&gt;
&lt;p&gt;但是仍然有发生&lt;strong&gt;内存泄漏&lt;/strong&gt;的可能。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 你能发现哪里出现了内存泄漏吗？&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Stack {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Object[] elements;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DEFAULT_INITIAL_CAPACITY = 16&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Stack() {
        elements &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[DEFAULT_INITIAL_CAPACITY];
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; push(Object e) {
        ensureCapacity();
        elements[size&lt;/span&gt;++] =&lt;span&gt; e;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object pop() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (size == 0&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EmptyStackException();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; elements[--&lt;span&gt;size];
    }&lt;br/&gt;&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ensureCapacity() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (elements.length ==&lt;span&gt; size)
            elements &lt;/span&gt;= Arrays.copyOf(elements, 2 * size + 1&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在&lt;strong&gt;pop&lt;/strong&gt;方法中，被弹出的元素的引用依然存在于数组中，这个元素实际上已经是一个&lt;strong&gt;过期引用&lt;/strong&gt;——它永远也不会再被访问，但Java的垃圾回收无法知道这一点，除非该引用被覆盖。&lt;/p&gt;
&lt;p&gt;即使Stack对象不再需要这个元素，但是数组中的引用仍然可以让它继续存在。&lt;/p&gt;
&lt;p&gt;在支持垃圾回收的语言中，内存泄漏的存在非常隐蔽。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们只需要做到：一旦对象的引用已经过期，就清空这些引用。&lt;/p&gt;
&lt;p&gt;修改上面的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object pop() {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (size == 0&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EmptyStackException();
    Object result &lt;/span&gt;= elements[--&lt;span&gt;size];
    elements[size] &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Eliminate obsolete reference&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么何时清空引用呢？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。&lt;/li&gt;
&lt;li&gt;当你把引用放在缓存中，它就可能会被遗忘，导致过了很久之后虽然已经没用了，但还是残留在缓存中。这种情况我们应该偶尔去清理没有用的项。&lt;/li&gt;
&lt;li&gt;使用监听器和其他回调时，我们应该显式地注销。最好的方法是只保存保存它们的弱引用，然后储存在WeakHashMap中。&lt;/li&gt;
&lt;li&gt;使用分析工具（Heap Profiler）来发现内存泄漏。&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;转载请注明原文链接：&lt;a href=&quot;http://www.cnblogs.com/justcooooode/p/7956048.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/justcooooode/p/7956048.html&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;p&gt;《Effective Java》第二章——创建和销毁对象 &lt;/p&gt;
&lt;p&gt;https://jlordiales.me/2012/12/26/static-factory-methods-vs-traditional-constructors/&lt;/p&gt;
&lt;p&gt;http://vojtechruzicka.com/avoid-telescoping-constructor-pattern/&lt;/p&gt;
&lt;p&gt;https://www.ibm.com/developerworks/cn/java/j-lo-Singleton/index.html&lt;/p&gt;
&lt;p&gt;https://medium.com/@biratkirat/learning-effective-java-item-4-4bc457fc5674&lt;/p&gt;
</description>
<pubDate>Wed, 06 Dec 2017 13:41:00 +0000</pubDate>
<dc:creator>没课割绿地</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/justcooooode/p/7956048.html</dc:identifier>
</item>
<item>
<title>JavaWeb框架_Struts2_(六)-----&gt;Struts2的输入校验 - Mairr</title>
<link>http://www.cnblogs.com/Mairr/p/7978684.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mairr/p/7978684.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 输入校验章节目录&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;输入校验概述&lt;br/&gt;&lt;ul&gt;&lt;li&gt;客户端校验&lt;/li&gt;
&lt;li&gt;服务器端校验&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;手动编程校验
&lt;ul&gt;&lt;li&gt;重写validate方法&lt;/li&gt;
&lt;li&gt;重写validateXxx()方法&lt;/li&gt;
&lt;li&gt;输入校验流程&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;校验框架校验
&lt;ul&gt;&lt;li&gt;Struts2 内置的校验器&lt;/li&gt;
&lt;li&gt;常用的内置校验器的配置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 详细内容&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 输入校验概述&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;输入校验分为客户端校验和服务器端校验，客户端校验主要是过滤正常用户的误操作，主要通过JavaScript代码完成;服务器端校验是整个应用阻止非法数据的最后防线，主要通过在应用中编程实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.1 客户端校验&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;大多数情况下，使用JavaScript进行客户端校验的步骤如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;编写校验函数;&lt;/li&gt;
&lt;li&gt;在提交表单的事件中调用校验函数;&lt;/li&gt;
&lt;li&gt;根据校验函数来判断是否进行表单提交;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　下面通过一个简单的示例讲解使用JavaScript进行客户端校验的方法，具体代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;%--&lt;span&gt;
  Created by IntelliJ IDEA.
  User: mairr
  Date: &lt;/span&gt;17-12-5&lt;span&gt;
  Time: 下午10:&lt;/span&gt;07&lt;span&gt;
  To change &lt;/span&gt;&lt;span&gt;this&lt;/span&gt; template use File | Settings |&lt;span&gt; File Templates.
&lt;/span&gt;--%&amp;gt;


&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&amp;gt;
&amp;lt;%@ page language = &quot;java&quot; import = &quot;java.util.*&quot; pageEncoding=&quot;utf-8&quot;%&amp;gt;
&amp;lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&amp;gt;


&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;注册界面&amp;lt;/title&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; &amp;gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 去掉前后的空格&lt;/span&gt;
      &lt;span&gt;function&lt;/span&gt;&lt;span&gt; deltrim(x) {
          &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (x.length &amp;gt; 0 &amp;amp;&amp;amp; x.charAt(0) == ' '&lt;span&gt;)
              x &lt;/span&gt;= x.substring(1&lt;span&gt;, x.length);
          &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (x.length &amp;gt; 0 &amp;amp;&amp;amp; x.charAt(x.length - 1) == ' '&lt;span&gt;)
              x &lt;/span&gt;= x.substring(0, x.length - 1&lt;span&gt;);
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; x;
      }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 非空验证&lt;/span&gt;
      &lt;span&gt;function&lt;/span&gt;&lt;span&gt; isNULL(elem,message){
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; va =&lt;span&gt; deltrim(elem.value);
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(va == &quot; &quot;&lt;span&gt;) {
              alert(message);
              elem.focus();
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
          }
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
          }

          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证帐号，帐号只能是小写字母数字，并且只能以字母开头&lt;/span&gt;
      &lt;span&gt;function&lt;/span&gt;&lt;span&gt; validateId(){
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; first = document.forms[0].id.value.charAt(0&lt;span&gt;);
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exp = /^[a-z0-9]+$/&lt;span&gt;;
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(isNULL(document.forms[0].id,&quot;请输入帐号&quot;)){     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证非空&lt;/span&gt;
              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证首字符&lt;/span&gt;
              &lt;span&gt;if&lt;/span&gt;((first &amp;gt;= 'a' &amp;amp;&amp;amp; first &amp;lt;= 'z') || (first &amp;gt;= 'A' &amp;amp;&amp;amp; first &amp;lt;= 'Z'&lt;span&gt;)){}
              &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                  alert(&lt;/span&gt;&quot;帐号首字符必须是字母！&quot;&lt;span&gt;);
                  document.forms[&lt;/span&gt;0&lt;span&gt;].id.focus();
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
              }
              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!exp.test(document.forms[0&lt;span&gt;].id.value)){
                  alert(&lt;/span&gt;&quot;帐号必须是字母或者数字！&quot;&lt;span&gt;);
                  document.forms[&lt;/span&gt;0&lt;span&gt;].id.focus();
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
              }
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
          }
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
          }
      }


      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证密码，密码要在8位以上，且需要有字母或者数字之外的字符&lt;/span&gt;
      &lt;span&gt;function&lt;/span&gt;&lt;span&gt; validatepwd(){
          &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exp = /^[a-z0-9]+$/&lt;span&gt;;
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(isNULL(document.forms[0].pwd,&quot; 请输入密码&quot;)){   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证非空&lt;/span&gt;
              &lt;span&gt;if&lt;/span&gt;(document.forms[0].pwd.value.length &amp;lt;= 8&lt;span&gt;){
                  alert(&lt;/span&gt;&quot;密码大于8位&quot;&lt;span&gt;);
                  document.forms[&lt;/span&gt;0&lt;span&gt;].pwd.focus();
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
              }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(exp.test(document.forms[0&lt;span&gt;].pwd.value)){
                      alert(&lt;/span&gt;&quot;密码要有字母和数字之外的字符！&quot;&lt;span&gt;);
                      document.forms[&lt;/span&gt;0&lt;span&gt;].pwd.focus();
                      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                  }
              }
          }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
          }
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(document.forms[0].pwd.value != document.forms[0&lt;span&gt;].repwd.value)
          {
              alert(&lt;/span&gt;&quot;两次密码不一样！&quot;&lt;span&gt;);
              document.forms[&lt;/span&gt;0&lt;span&gt;].pwd.focus();
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
          }
          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
          }


          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证邮箱，右边为六位数子&lt;/span&gt;
          &lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkcode() {
              &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exp = /^[0-9]+$/&lt;span&gt;;
              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(isNULL(document.forms[0].ecode,&quot;请输入邮编&quot;)){    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证非空&lt;/span&gt;
                  &lt;span&gt;if&lt;/span&gt;(document.forms[0].ecode.value.length != 6&lt;span&gt;){
                      alert(&lt;/span&gt;&quot;邮编为6位&quot;&lt;span&gt;);
                      document.forms[&lt;/span&gt;0&lt;span&gt;].ecode.focus();
                      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                  }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!exp.test(document.forms[0&lt;span&gt;].ecode.value)){
                          alert(&lt;/span&gt;&quot;邮编为数字&quot;&lt;span&gt;);
                          document.forms[&lt;/span&gt;0&lt;span&gt;].ecode.focus();
                          &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                      }
                  }
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
              }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
              }
          }


          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证E-mail的基本格式&lt;/span&gt;
          &lt;span&gt;function&lt;/span&gt;&lt;span&gt; checkEmail(){
              &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exp = /^\w+((-\w+)|(\.\w+))*@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/&lt;span&gt;;
              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(isNULL(document.forms[0].email,&quot;请输入Email&quot;)){     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证非空&lt;/span&gt;
                  &lt;span&gt;if&lt;/span&gt;(!exp.test(document.forms[0&lt;span&gt;].email.value)){
                      alert(&lt;/span&gt;&quot;Email格式错误&quot;&lt;span&gt;);
                      document.forms[&lt;/span&gt;0&lt;span&gt;].email.focus();
                      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                  }
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
              }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
              }
          }


          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交按钮&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; gogo(){
              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(validateId() &amp;amp;&amp;amp; validatepwd() &amp;amp;&amp;amp; checkcode() &amp;amp;&amp;amp;&lt;span&gt; checkEmail()){
                  document.forms[&lt;/span&gt;0&lt;span&gt;].submit();
                  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
              }
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    &lt;/span&gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
&lt;br/&gt;&amp;lt;body&amp;gt;
     &amp;lt;s:form action =&quot;&quot; theme=&quot;simple&quot;&amp;gt;
        &amp;lt;table&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;登录帐号&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;s:textfield name=&quot;id&quot;/&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;/tr&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;密码&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;s:password name=&quot;pwd&quot;/&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;/tr&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;确认密码&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;s:password name=&quot;repwd&quot;/&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;/tr&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;邮编&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;s:textfield name = &quot;ecode&quot;/&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;/tr&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Mail&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;s:textfield name = &quot;email&quot;/&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;/tr&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;input type=&quot;button&quot; value=&quot;提交&quot; onclick=&quot;return gogo()&quot; /&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;s:reset value = &quot;重置&quot;/&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;/tr&amp;gt;
        &amp;lt;/table&amp;gt;
     &amp;lt;/s:form&amp;gt;
  &amp;lt;/body&amp;gt;&lt;p&gt;&amp;lt;/html&amp;gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上述的校验过程中，建立了一个Struts2的项目（前面几篇博文有介绍），JSP校验页面中运用了部分struts2的标签。由上述JSP程序，执行结果有如下几种情况：&lt;/p&gt;
&lt;p&gt;　　（1） 页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171205224403113-685678744.png&quot; alt=&quot;&quot; width=&quot;205&quot; height=&quot;185&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（2） 客户端校验结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171205224618363-981797150.png&quot; alt=&quot;&quot; width=&quot;546&quot; height=&quot;203&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　客户端校验可以过滤用户的错误操作，是第一道防线，一般使用JavaScript代码实现。仅有客户端校验是不够的。攻击者可以绕过客户端校验直接进行非法输入，这样会引起系统的异常，为了确保数据的合法性，防止用户通过非正常手段提交错误信息，所以必须加上服务器验证。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.2 服务器端校验&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　服务器对于系统的安全性、完整性、健壮性起到至关重要的作用。Struts2框架提供了一套验证框架，通过验证框架能够非常简单和快速地完成输入校验。&lt;/p&gt;
&lt;p&gt;　　在服务器端，对于输入校验Struts2提供了两种实现方法：一是采用手工编写代码实现;另外一种是，给予XML配置方式的实现（校验框架校验）。接下来详细介绍这两种方法。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 手动编程校验&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;手动编程校验主要是通过在类中编写校验逻辑代码，有两种方式i：一是在Action类中重写validate（）方法;二是在Action类中重写validateXxx()方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2.1 重写validate方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　validate（）方法会校验Action中所有与execute（）方法签名相同的方法。当某个数据校验失败时，在validate（）方法中应该调用addFiledError()方法向系统fieldErrors添加校验失败信息。为了使用addFileError方法，Action类需要继承ActionSupport。&lt;/p&gt;
&lt;p&gt;　　如果系统的fieldErrors包含失败信息，Struts2会将请求转发到名为input的result。在input视图中可以通过&amp;lt;s:fielderror/&amp;gt;标签失败信息。&lt;/p&gt;
&lt;p&gt;　　下面通过一个简单示例讲解如何重写validate（）方法进行输入校验。&lt;/p&gt;
&lt;p&gt;（1） 创建一个JSP页面login.jsp，要求验证所有输入项不能为空、密码长度6～12位以及两次密码一样（不运用javascript的客户端校验），具体代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%--
  &lt;/span&gt;&lt;span&gt;Created by IntelliJ IDEA.
  User: mairr
  Date: 17-12-6
  Time: 下午9:39
  To change this template use File | Settings | File Templates.
--%&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%@ page &lt;/span&gt;&lt;span&gt;language&lt;/span&gt;&lt;span&gt;=&quot;java&quot;&lt;/span&gt;&lt;span&gt; import&lt;/span&gt;&lt;span&gt;=&quot;java.util.*&quot;&lt;/span&gt;&lt;span&gt; pageEncoding&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt; %&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%@ taglib &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;s&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&quot;/struts-tags&quot;&lt;/span&gt;&lt;span&gt; %&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;



&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%
    String &lt;/span&gt;&lt;span&gt;path &lt;/span&gt;&lt;span&gt;= request.getContextPath();
    &lt;/span&gt;&lt;span&gt;String basePath &lt;/span&gt;&lt;span&gt;= request.getScheme() &lt;/span&gt;&lt;span&gt;+ &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() + path + &quot;/&quot;;
%&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;



&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;base &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;&amp;lt;%=basePath%&amp;gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;login&quot;&lt;/span&gt;&lt;span&gt; theme&lt;/span&gt;&lt;span&gt;=&quot;simple&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;登陆帐号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:textfield &lt;/span&gt;&lt;span&gt;name &lt;/span&gt;&lt;span&gt;= &quot;id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;密码&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:password &lt;/span&gt;&lt;span&gt;name &lt;/span&gt;&lt;span&gt;= &quot;pwd&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;确认密码&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:password &lt;/span&gt;&lt;span&gt;name &lt;/span&gt;&lt;span&gt;= &quot;repwd&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:submit &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;= &quot;提交&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:reset &lt;/span&gt;&lt;span&gt;value &lt;/span&gt;&lt;span&gt;= &quot;重置&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;显示this.addFieldError(&quot;id&quot;,&quot;id不能为空&quot;)的信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:fielderror &lt;/span&gt;&lt;span&gt;fieldName&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;显示所有校验失败信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:fielderror&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;s:form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2） 创建Action类LoginAction.java，在该类中重写validate（）方法，具体代码如下“&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; action;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pwd;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String repwd;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(String id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPwd() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pwd;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPwd(String pwd) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pwd =&lt;span&gt; pwd;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getRepwd() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; repwd;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRepwd(String repwd) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.repwd =&lt;span&gt; repwd;
    }


    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重写validate方法，进行输入校验，该方法在execute方法之前执行&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; validate() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (id == &lt;span&gt;null&lt;/span&gt; || id.trim().equals(&quot; &quot;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.addFieldError(&quot;id&quot;, &quot;id不能为空&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pwd == &lt;span&gt;null&lt;/span&gt; || pwd.trim().equals(&quot; &quot;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.addFieldError(&quot;pwd&quot;, &quot;密码不能为空&quot;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pwd.length() &amp;lt; 6 || pwd.length() &amp;gt; 12&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.addFieldError(&quot;pwdlength&quot;, &quot;密码的长度在6~12位之间&quot;&lt;span&gt;);
            }
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;pwd.equals(repwd)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.addFieldError(&quot;pwdsame&quot;, &quot;两次密码不一致&quot;&lt;span&gt;);
        }
    }


    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实现登陆业务处理&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String execute() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（3） 配置Struts2的action,具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE struts PUBLIC
        &quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;
        &quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;default&quot;&lt;/span&gt;&lt;span&gt; namespace&lt;/span&gt;&lt;span&gt;=&quot;/&quot;&lt;/span&gt;&lt;span&gt; extends&lt;/span&gt;&lt;span&gt;=&quot;struts-default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;action &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;login&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;action.LoginAction&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;input&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/login.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;struts&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(4) web.xml配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&lt;/span&gt;&lt;span&gt;
         version&lt;/span&gt;&lt;span&gt;=&quot;3.1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;struts2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;struts2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（5） 运行login.jsp页面，如果输入非法信息则输出校验结果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171206173653988-1915871016.png&quot; alt=&quot;&quot; width=&quot;238&quot; height=&quot;192&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2.2 重写validateXxx()方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　validateXxx()只会校验Action中方法名为Xxx()的方法，其中Xxx的第一个字母要大写。重写validateXxx()方法进行输入校验与重写validate（）方法基本一样，唯一不同的就是校验的方法名不同。&lt;/p&gt;
&lt;p&gt;　　将上面一个例子重写为validateXxx()方法进行输入校验，则需要修改Action类和配置文件。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;修改后的Action类的代码如下：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; action;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pwd;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String repwd;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(String id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPwd() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pwd;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPwd(String pwd) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pwd =&lt;span&gt; pwd;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getRepwd() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; repwd;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRepwd(String repwd) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.repwd =&lt;span&gt; repwd;
    }


    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重写validateLogin方法，进行输入校验&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; validateLogin() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (id == &lt;span&gt;null&lt;/span&gt; || id.trim().equals(&quot; &quot;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.addFieldError(&quot;id&quot;, &quot;id不能为空&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pwd == &lt;span&gt;null&lt;/span&gt; || pwd.trim().equals(&quot; &quot;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.addFieldError(&quot;pwd&quot;, &quot;密码不能为空&quot;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pwd.length() &amp;lt; 6 || pwd.length() &amp;gt; 12&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.addFieldError(&quot;pwdlength&quot;, &quot;密码的长度在6~12位之间&quot;&lt;span&gt;);
            }
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;pwd.equals(repwd)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.addFieldError(&quot;pwdsame&quot;, &quot;两次密码不一致&quot;&lt;span&gt;);
        }
    }


    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实现登陆业务处理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;修改后的配置文件struts.xml如下:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;

&amp;lt;!&lt;span&gt;DOCTYPE struts PUBLIC
        &lt;/span&gt;&quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;
        &quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;&amp;gt;

&amp;lt;struts&amp;gt;
    &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;default&quot; namespace=&quot;/&quot; &lt;span&gt;extends&lt;/span&gt;=&quot;struts-default&quot;&amp;gt;
        &amp;lt;action name=&quot;login&quot; &lt;span&gt;class&lt;/span&gt;=&quot;action.LoginAction&quot; method=&quot;login&quot;&amp;gt;
            &amp;lt;result name=&quot;input&quot;&amp;gt;/login.jsp&amp;lt;/result&amp;gt;
        &amp;lt;/action&amp;gt;
    &amp;lt;/&lt;span&gt;package&lt;/span&gt;&amp;gt;
&amp;lt;/struts&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;结果是一致的：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1194681/201712/1194681-20171206175636097-1633394089.png&quot; alt=&quot;&quot; width=&quot;242&quot; height=&quot;223&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;2.2.3 输入校验的流程&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;经过前面讲解，可以知道，Struts2输入校验需要经过一下几个步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;类型转器对请求参数执行类型转换，并且把转换后的值赋给Action中的属性。&lt;/li&gt;
&lt;li&gt;如果在执行转换过程中出现了异常，系统会把异常信息保存到ActionContext ， conversionError拦截器将异常信息添加到fieldError里。不管类型转换是否出现异常，都会进入步骤三;&lt;/li&gt;
&lt;li&gt;系统通过反射技术先调用Action中的validateXxx()方法，Xxx为方法名字。&lt;/li&gt;
&lt;li&gt;再调用Action中的validate（）方法;&lt;/li&gt;
&lt;li&gt;经过上面的4个步骤，如果系统中的fieldError存在错误信息（即存放错误信息的集合的size大于0），系统自动将请求转发至名称为input的视图。如果系统中的fileError没有任何错误信息，系统将执行Action中的处理方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 校验框架校验&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　使用Struts2校验框架的好处是将校验逻辑放到配置文件中，实现校验逻辑代码与业务逻辑代码的分离。使用基于校验框架校验方式实现输入校验时，Action也需要继承ActionSupport，并且提供校验文件。同样框架校验的方式也有2种：一是校验Action中所有与execute方法签名相同的方法;二是校验Action中某个与execute方法签名相同的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.3.1 Struts2内置的校验器&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;Struts2框架提供的内置校验器如下：（&lt;span&gt;&lt;em&gt;&lt;strong&gt;多看几遍，还蛮重要的&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;）&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;required：必填校验器，要求field的值不能为null;&lt;/li&gt;
&lt;li&gt;requiredstring:必填字符串校验器，要求field的值不能为null，并且长度大于0，默认情况下会对字符串去掉前后空格;&lt;/li&gt;
&lt;li&gt;stringlength：字符串长度校验器，要求field的值必须在指定的范围内，否则校验失败;miniLength参数指定最小长度，maxLength参数指定最大长度，trim参数指定校验field之前是否去掉字符串前后空格;&lt;/li&gt;
&lt;li&gt;regex：正则表达式校验器，检查被校验的field是否匹配一个正则表达式。expression参数指定正则表达式， caseSensitive参数指定进行正则表达式匹配时，是否区分大小写，默认值为true;&lt;/li&gt;
&lt;li&gt;int：整数校验器，要求field的整数值必须在指定范围内，mini指定最小值，max最大值;&lt;/li&gt;
&lt;li&gt;double：双精度浮点数校验器，要求field的双进度浮点数必须在指定范围内，mini指定最小值，max最大值;&lt;/li&gt;
&lt;li&gt;fieldexpression：字段OGNL表达式校验器，要求field满足一个OGNL表达式，expression参数指定一个OGNL表达式，该逻辑表达式基于ValueStack进行求值，返回true时校验通过，否则不通过。该校验器只能用于&amp;lt;filed-validator&amp;gt;;&lt;/li&gt;
&lt;li&gt;email：邮件地址校验器，要求如果field的值非空，则必须是合法的邮件地址;&lt;/li&gt;
&lt;li&gt;url：网址校验器，要求如果field的值非空，则必须是合法的URL地址i；&lt;/li&gt;
&lt;li&gt;date：日期校验器，要求field的日期值必须在指定的范围内，mini指定最小值，max指定最大值;&lt;/li&gt;
&lt;li&gt;conversion：转换校验器，指定在类型转换失败时，提示错误信息;&lt;/li&gt;
&lt;li&gt;visitor：用于校验Action中的复合属性，指定一个校验文件用于校验复合中的属性;&lt;/li&gt;
&lt;li&gt;expression：OGNL表达式表达式校验，expression参数指定OGNL表达式，该逻辑表达式基于ValueStack进行求值，返回true时校验通过，否则不通过，该校验器不用在字段校验器的配置中，只能用于&amp;lt;validator&amp;gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2.3.2 常用内置校验器的配置&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　对于Struts2校验框架来说，一般有两种方式来配置校验器：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用&amp;lt;validator&amp;gt;&lt;/li&gt;
&lt;li&gt;使用&amp;lt;field-validator&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　当&amp;lt;validator&amp;gt;的子节点中配置了&amp;lt;param name=&quot;fieldName&quot;&amp;gt;用于指定某个属性进行校验时，则达到的效果与&amp;lt;field-validator&amp;gt;是一样的。如下所示：（&lt;span&gt;&lt;em&gt;&lt;strong&gt;两种配置方式是等效的&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;校验user.id属性时，用&amp;lt;validator&amp;gt;来配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;validator &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;required&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;s:param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;fieldName&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;user.id&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;s:param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户的ID不能为空！&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        
&lt;span&gt;&amp;lt;!--------&lt;/span&gt;&lt;span&gt;方式二 ---&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;field &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;user.id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;field-validator &lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;=&quot;required&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户的ID不能为空！&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field-validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面简单介绍几种常用的内置校验器的配置示例：&lt;/p&gt;
&lt;p&gt;（1）  required（必填校验器）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;field-validator &lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;=&quot;required&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户的ID不能为空！&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field-validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）  requiredstring（必填字符串校验器）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;field-validator &lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;=&quot;requiredstring&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name &lt;/span&gt;&lt;span&gt;=&quot;trim&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户的ID不能为空！&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field-validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）  stringlength（字符串长度校验器）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;field-validator &lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;=&quot;stringlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name &lt;/span&gt;&lt;span&gt;= &quot;maxlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name &lt;/span&gt;&lt;span&gt;= &quot;minilength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;密码必须在6～12位之间&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field-validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）  email（邮件地址校验器）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;field-validator &lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱格式不正确&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field-validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）  regex（正则表达式校验器）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;field-validator &lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;=&quot;regex&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;expression&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span&gt;^1[3578]\d{9}$&lt;/span&gt;&lt;span&gt;]]&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;手机号格式不正确&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field-validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（6）  int（整数校验）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;max&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mini&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄必须在0～100之间&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field-validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（7）  字段OGNL表达式校验器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;type &lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;expression&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;![CDATA[&lt;/span&gt;&lt;span&gt;imagefile.length() &amp;lt;=0 &lt;/span&gt;&lt;span&gt;]]&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;文件不能为空&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;field-validator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　基于Struts2框架的校验主要是以上内容，这是Struts2框架应用比较多的一个版块，比较重要的内容！&lt;/p&gt;

</description>
<pubDate>Wed, 06 Dec 2017 13:23:00 +0000</pubDate>
<dc:creator>Mairr</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mairr/p/7978684.html</dc:identifier>
</item>
</channel>
</rss>