<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>在Web界面中实现Excel数据大量导入的处理方式 - 伍华聪</title>
<link>http://www.cnblogs.com/wuhuacong/p/9566946.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuhuacong/p/9566946.html</guid>
<description>&lt;p&gt;在早期Bootstrap框架介绍中，我的随笔《&lt;a id=&quot;cb_post_title_url&quot; href=&quot;https://www.cnblogs.com/wuhuacong/p/7297823.html&quot;&gt;结合bootstrap fileinput插件和Bootstrap-table表格插件，实现文件上传、预览、提交的导入Excel数据操作流程&lt;/a&gt;》中介绍了利用Bootstrap FieInput插件上传Excel文件到服务器，然后利用Bootstrap-table表格插件进行展示数据，最后导入到系统里面中，这个导入过程中可以预览到要导入的数据，而且可以选择性的导入。在实际使用过程中，发现使用Ajax导入大批量（几百条记录数据）的情况下，页面就会罢工，估计和提交的数据大小限制有关，为了解决这个问题，并结合导入数据一般都是全部导入的情况下，我们修改下数据导入的过程，从而实现大量数据量的Excel数据导入。&lt;/p&gt;
&lt;h3&gt;1、使用预览数据，并勾选导入的处理方式&lt;/h3&gt;
&lt;p&gt;Excel导入的的界面展示如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/8867/201708/8867-20170807111859549-1949294277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上传文件后，数据直接展示在弹出层的列表里面，这里直接使用了 Bootstrap-table表格插件进行展示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/8867/201708/8867-20170807112140924-1742194312.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样我们就可以把Excel的记录展示出来，实现了预览的功能，勾选必要的记录，然后保存即可提交到服务器进行保存，实现了Excel数据的真正导入数据库处理。&lt;/p&gt;
&lt;p&gt;实际的代码就比较多一点点，详细可以参考下随笔《&lt;a id=&quot;cb_post_title_url&quot; href=&quot;https://www.cnblogs.com/wuhuacong/p/7297823.html&quot;&gt;结合bootstrap fileinput插件和Bootstrap-table表格插件，实现文件上传、预览、提交的导入Excel数据操作流程&lt;/a&gt;》，这里就主要简要介绍下导入的处理逻辑即可，由于是在客户端组装列表数据，然后通过ajax提交的，它的的代码如下所示。（这个也就是后面需要解决的问题）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存导入的数据&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; SaveImport() {
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; list = [];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造集合对象&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; rows = $import.bootstrapTable('getSelections'&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; rows.length; i++&lt;span&gt;) {
                list.push({
                    &lt;/span&gt;'Name': rows[i].Name, 'Mobile': rows[i].Mobile, 'Email': rows[i].Email, 'Homepage'&lt;span&gt;: rows[i].Homepage,
                    &lt;/span&gt;'Hobby': rows[i].Hobby, 'Gender': rows[i].Gender, 'Age': rows[i].Age, 'BirthDate'&lt;span&gt;: rows[i].BirthDate,
                    &lt;/span&gt;'Height': rows[i].Height, 'Note'&lt;span&gt;: rows[i].Note
                });
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (list.length == 0&lt;span&gt;) {
                showToast(&lt;/span&gt;&quot;请选择一条记录&quot;, &quot;warning&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; postData = { 'list': list };&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以增加其他参数，如{ 'list': list, 'Rucanghao': $(&quot;#Rucanghao&quot;).val() };&lt;/span&gt;
            postData =&lt;span&gt; JSON.stringify(postData);

            $.ajax({
                url: &lt;/span&gt;'/TestUser/SaveExcelData'&lt;span&gt;,
                type: &lt;/span&gt;'post'&lt;span&gt;,
                dataType: &lt;/span&gt;'json'&lt;span&gt;,
                contentType: &lt;/span&gt;'application/json;charset=utf-8'&lt;span&gt;,
                traditional: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data.Success) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存成功  1.关闭弹出层，2.清空记录显示 3.刷新主列表&lt;/span&gt;
                        showToast(&quot;保存成功&quot;&lt;span&gt;);

                        $(&lt;/span&gt;&quot;#import&quot;).modal(&quot;hide&quot;&lt;span&gt;);
                        $(bodyTag).html(&lt;/span&gt;&quot;&quot;&lt;span&gt;);
                        Refresh();
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        showToast(&lt;/span&gt;&quot;保存失败:&quot; + data.ErrorMessage, &quot;error&quot;&lt;span&gt;);
                    }
                },
                data: postData
            });
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在实际使用过程中，发现数据几百条的时候，页面就罢工了，不能正常插入，搜索下解决问题说是大小受限的问题，但是我在Web.Config里面也设置了上传文件的大小，最终没有找到配置解决思路。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;httpRuntime &lt;/span&gt;&lt;span&gt;executionTimeout&lt;/span&gt;&lt;span&gt;=&quot;600&quot;&lt;/span&gt;&lt;span&gt; maxRequestLength&lt;/span&gt;&lt;span&gt;=&quot;951200&quot;&lt;/span&gt;&lt;span&gt; 
   useFullyQualifiedRedirectUrl&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; minFreeThreads&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt;&lt;span&gt; 
   minLocalRequestFreeThreads&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt; appRequestQueueLimit&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;span&gt;  enableVersionHeader&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终这个配置项也无法解决，那么我们只能找其他方式来避免数据大量提交了。&lt;/p&gt;

&lt;h3&gt;2、使用在控制器后台读取Excel文件导入数据库&lt;/h3&gt;
&lt;p&gt;以上的数据导入方式，在一般数据比较少的时候，体验还是不错的，不过它的过程也是先上传Excel文件，然后读取Excel里面的记录，转换为对应的List&amp;lt;T&amp;gt;类型，在序列号JSON列表在前端界面展示。&lt;/p&gt;
&lt;p&gt;既然我们文件在服务器上，并且也可以通过把Excel文件转换为对应的List&amp;lt;T&amp;gt;，那么我们减少用户勾选的步骤，确认后直接读取导入即可，这样处理应该就没有这样的受限于页面数据大小的问题的。&lt;/p&gt;
&lt;p&gt;这样我们以设备信息导入为案例，介绍这个处理过程，如下前端代码是在文件上传到服务器后，用户确认后负责导入的逻辑的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存导入的数据&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; SaveImport() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; postData = { 'guid'&lt;span&gt;: importGuid };
            postData &lt;/span&gt;=&lt;span&gt; JSON.stringify(postData);

            $.ajax({
                url: &lt;/span&gt;'/Device/SaveExcelByGuid'&lt;span&gt;,
                type: &lt;/span&gt;'post'&lt;span&gt;,
                dataType: &lt;/span&gt;'json'&lt;span&gt;,
                contentType: &lt;/span&gt;'application/json;charset=utf-8'&lt;span&gt;,
                traditional: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data.Success) {
                        Refresh();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存成功  1.关闭弹出层，2.清空记录显示 3.刷新主列表&lt;/span&gt;
                        showToast(&quot;保存成功&quot;&lt;span&gt;);

                        $(&lt;/span&gt;&quot;#import&quot;).modal(&quot;hide&quot;&lt;span&gt;);
                        $(bodyTag).html(&lt;/span&gt;&quot;&quot;&lt;span&gt;);
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        showToast(&lt;/span&gt;&quot;保存失败:&quot; + data.ErrorMessage, &quot;error&quot;&lt;span&gt;);
                    }
                },
                data: postData
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终我们是看到处理方式是在SaveExcelByGuid的控制器方法里面的，这个方法根据服务器的GUID，获取对应Excel文件的信息，然后进行读取和导入操作。&lt;/p&gt;
&lt;p&gt;这个方法的详细代码如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 在服务端保存Excel
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;guid&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; ActionResult SaveExcelByGuid(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; guid)
        {
            CommonResult result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CommonResult();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(guid))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; list = GetDevice(guid);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据guid获取对应的Excel文件，并把内容转换为对应的List&amp;lt;T&amp;gt;&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (list != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (DeviceInfo detail &lt;span&gt;in&lt;/span&gt;&lt;span&gt; list)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isExist = BLLFactory&amp;lt;Device&amp;gt;.Instance.IsExistKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DeviceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, detail.DeviceId);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isExist)
                        {
                            BLLFactory&lt;/span&gt;&amp;lt;Device&amp;gt;&lt;span&gt;.Instance.Insert(detail);
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;成功操作&lt;/span&gt;
                    result.Success = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    result.ErrorMessage &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;导入信息不能为空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                result.ErrorMessage &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;导入信息不能为空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ToJsonContent(result);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中我们看到 GetDevice(guid) 就是获取Excel文件内容并转换为对应的实体类列表过程的。&lt;/p&gt;
&lt;p&gt;其中的GetDevice就是转换为对应实体类集合的过程，代码如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取设备导入文件，转换为对应的实体类集合
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;guid&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;附件GUID&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; List&amp;lt;DeviceInfo&amp;gt; GetDevice(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; guid)
        {
            List&lt;/span&gt;&amp;lt;DeviceInfo&amp;gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;DeviceInfo&amp;gt;&lt;span&gt;();

            DataTable table &lt;/span&gt;=&lt;span&gt; ConvertExcelFileToTable(guid);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (table != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 数据转换
                &lt;span&gt;foreach&lt;/span&gt; (DataRow dr &lt;span&gt;in&lt;/span&gt;&lt;span&gt; table.Rows)
                {
                    DeviceInfo info &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DeviceInfo();
                    info.DeviceId &lt;/span&gt;= dr[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;设备ID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
                    info.VersionInfo &lt;/span&gt;= dr[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;版本信息&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
                    info.MinitorInfo &lt;/span&gt;= dr[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;预留监控信息&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
                    info.DeviceMsisdn &lt;/span&gt;= dr[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;公话手机号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();

                    list.Add(info);
                }
                &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而 ConvertExcelFileToTable 就是利用aspose.Cell的Excel操作控件，实现数据转换的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 从附件列表中获取第一个Excel文件，并转换Excel数据为对应的DataTable返回
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;guid&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;附件的Guid&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; DataTable ConvertExcelFileToTable(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; guid)
        {
            DataTable dt &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(guid))
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取上传附件的路径&lt;/span&gt;
                &lt;span&gt;string&lt;/span&gt; serverRealPath = BLLFactory&amp;lt;FileUpload&amp;gt;&lt;span&gt;.Instance.GetFirstFilePath(guid);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(serverRealPath))
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换Excel文件到DatTable里面&lt;/span&gt;
                    &lt;span&gt;string&lt;/span&gt; error = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
                    dt &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataTable();
                    AsposeExcelTools.ExcelFileToDataTable(serverRealPath, &lt;/span&gt;&lt;span&gt;out&lt;/span&gt; dt, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; error);
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dt;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样实现效果，不考虑用户勾选记录的情况，确认后直接对整个Excel文件进行判断导入操作，一般也是符合我们实际的导入过程的，这样处理起来，再也不会有前面介绍的那种情况了，至少我们能够顺利上传Excel文件，在后台读取Excel文件并转换是没有什么压力的，而且体验效果也很不错，非常快速。&lt;/p&gt;
&lt;p&gt;最后看看大量数据导入后，也能够快速刷新，并能够在分页控件进行展示了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201808/8867-20180831173927782-1359369128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 31 Aug 2018 15:47:00 +0000</pubDate>
<dc:creator>伍华聪</dc:creator>
<og:description>在早期Bootstrap框架介绍中，我的随笔《结合bootstrap fileinput插件和Bootstrap-table表格插件，实现文件上传、预览、提交的导入Excel数据操作流程》中介绍了利用</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuhuacong/p/9566946.html</dc:identifier>
</item>
<item>
<title>salesforce lightning零基础学习(六)Lightning Data Service(LDS) - zero.zhang</title>
<link>http://www.cnblogs.com/zero-zyq/p/9384437.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zero-zyq/p/9384437.html</guid>
<description>&lt;p&gt;本篇可参看：&lt;a href=&quot;https://trailhead.salesforce.com/modules/lightning_data_service&quot; target=&quot;_blank&quot;&gt;https://trailhead.salesforce.com/modules/lightning_data_service&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lightning中针对object的detail页面，一个lightning app可能包含了多个components,多个components不可避免的会对这个数据进行CRUD操作，如果我们针对每个component都在init操作时后台SQL进行查询，然后赋值给前台变量，进行CUD操作时，还要考虑其他component的数据是否要级联的改变，这种操作以及设计对于性能的影响还是蛮大的，有什么好的方法可以做到一次搜索或者一次加载，所有的components都共用吗？这个时候，LDS或许可以是你想要的。&lt;/p&gt;
&lt;p&gt;lightning中，我们使用 Lightning Data Service(LDS)去服务于数据层面，LDS 提供了对数据的访问。&lt;/p&gt;
&lt;p&gt;LDS除了可以让一个app的所有的component共用一个share的数据，这样一个更新以后，所有的component(model 为view)都会同步的刷新这个数据。还可以支持用户离线操作数据，当网络连接以后，用户对数据的操作则会进行同步。&lt;/p&gt;
&lt;p&gt;LDS优点概括来说：&lt;/p&gt;
&lt;p&gt;最小化的XMLHttpRequests&lt;/p&gt;
&lt;p&gt;数据只需要搜索一次。&lt;/p&gt;
&lt;p&gt;跨 components 分享数据记录&lt;/p&gt;
&lt;p&gt;当数据改变以后会创建通知。&lt;/p&gt;
&lt;p&gt;优点还有很多，当一个app 涉及到记录的简单的增删改查操作，使用LDS是一个最优的方式。&lt;/p&gt;
&lt;p&gt;说了这么多LDS的优点，那LDS如何使用呢？其实只需要在component中引入 &amp;lt;force:recordData&amp;gt;标签即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一. &amp;lt;force:recordData&amp;gt;属性介绍&lt;/strong&gt;&lt;br/&gt;&amp;lt;force:recordData&amp;gt;标签包含以下的常用属性：&lt;/p&gt;
&lt;p&gt;recordId : 指定哪条记录来加载，此字段为必须字段。&lt;/p&gt;
&lt;p&gt;mode: 指定当前的模式，有 View和Edit两个值。如果针对当前component有update操作，则mode设置为Edit。此字段为必须字段&lt;/p&gt;
&lt;p&gt;layoutType: 决定了哪个layout用于加载， FULL/COMPACT。&lt;/p&gt;
&lt;p&gt;fields: 决定哪些字段用来搜索出来&lt;/p&gt;
&lt;p&gt;layoutType以及fields至少有一个要求必须，因为管理员拥有更改pagelayout的权限，所以layoutType加载的字段具有不确定性，推荐使用fields。&lt;/p&gt;
&lt;p&gt;targetRecord: 此属性相当于这条记录ID对应的记录变量，通过此变量可以访问fields中指定的字段值。&lt;/p&gt;
&lt;p&gt;targetFields: targetRecord对应的字段的视图，通过此字段可以取出fields中的指定的值。&lt;/p&gt;
&lt;p&gt;通过上面的描述可以看出来targetRecord以及targetFields均可以取出fields中指定的字段值，他们两个写法尽管不同，但是他们的表达含义以及取得值相同，后面有具体的描述。&lt;/p&gt;
&lt;p&gt;targetError: 此属性存储Error Message, 如果记录没有正确的提供。&lt;/p&gt;
&lt;p&gt;recordUpdated：此属性指定当记录进行了CUD操作时的事件处理。&lt;/p&gt;
&lt;p&gt;简单Demo如下：其中 {v.accountFields.Name} 等同于{!v.record.fields.Name}.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component &lt;/span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;span&gt;=&quot;flexipage:availableForRecordHome,force:hasRecordId&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;record&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;Object&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;accountException&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;accountFields&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;Object&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;force:recordData
        &lt;/span&gt;&lt;span&gt;recordId&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordId}&quot;&lt;/span&gt;&lt;span&gt;
        aura:id&lt;/span&gt;&lt;span&gt;=&quot;accId&quot;&lt;/span&gt;&lt;span&gt;
        targetRecord&lt;/span&gt;&lt;span&gt;=&quot;{!v.record}&quot;&lt;/span&gt;&lt;span&gt;
        targetFields&lt;/span&gt;&lt;span&gt;=&quot;{!v.accountFields}&quot;&lt;/span&gt;&lt;span&gt;
                targetError&lt;/span&gt;&lt;span&gt;=&quot;{!v.accountException}&quot;&lt;/span&gt;&lt;span&gt;
        fields&lt;/span&gt;&lt;span&gt;=&quot;Id,Name,Industry&quot;&lt;/span&gt;&lt;span&gt;
        mode&lt;/span&gt;&lt;span&gt;=&quot;VIEW&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:card &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;{!v.accountFields.Name}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:formattedText &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;Industry&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;{!v.record.fields.Industry}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning:card&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 二. LDS的 CUD，错误提示以及自带的事件监听操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;force:recordData组件元素自带了好几个方法用来实现数据的简单的增删改操作。controller.js中通过获取到force:recordData元素后调用相关的方法即可进行DML操作。常用方法如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;getNewRecord():创建一条新记录，通常用于insert操作，init handler中调用此方法创建一条ID为空的记录，此方法不会返回任何类型的callback function；&lt;/li&gt;
&lt;li&gt; saveRecord(): 用于 insert/update记录，此方法会返回一个 SaveRecordResult对象的callback function,SaveResult后面会详细介绍；&lt;/li&gt;
&lt;li&gt; deleteRecord():用于记录的delete操作，此方法会返回一个SaveRecordResult对象的callback function。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过上面的常用的三个方法，我们会关注到SaveRecordResult这个对象，此类作为CUD操作的callback返回的唯一参数，此对象具有以下的字段：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;objectApiName：当前操作的object的 API name;&lt;/li&gt;
&lt;li&gt;entityLabel： 当前操作的object的label name;&lt;/li&gt;
&lt;li&gt;error: 如果发生系统或者自定义的操作此记录的错误，则返回在error字段里面,此error字段返回的类型为list，可以通过for循环迭代出所有的错误信息。如果当前的操作状态为操作成功（save state为success或者draft）则error为undefined;&lt;/li&gt;
&lt;li&gt;recordId: 当前操作记录的18位的ID;&lt;/li&gt;
&lt;li&gt;state: 返回当前操作的结果状态： SUCCESS(操作成功)/ DRAFT（Server不可达，本地存储成功）/ INCOMPLETE（Server不可达，本地不支持存储）/ERROR（存储错误，由于validation或者其他的原因）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;getNewRecord():此方法用于创建一个空的记录，方法有四个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;objectApiName： 需要创建的 object 的API name;&lt;/li&gt;
&lt;li&gt;recordTypeId:  需要创建的object的record type 的ID，如果没有指定，默认为default record type;&lt;/li&gt;
&lt;li&gt;skipCache：判断是否从server端获取object的template还是从客户端获取；&lt;/li&gt;
&lt;li&gt;callback：当object创建完以后的回调函数，此函数没有任何参数，创建完成以后会自动调用此方法。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;saveRecord():此方法用于create/edit操作，方法只有一个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;callback：当object create/update完成以后的回调函数，次函数也包含了一个参数，即上面提到的SaveResultResult对象的变量引用。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;deleteRecord():此方法用于delete操作，方法也只有一个参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;callback：当object delete完成以后的回调函数，次函数也包含了一个参数，即上面提到的SaveResultResult对象的变量引用。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面说过，通过LDS可以在数据变化后，共用的component实时的刷新数据，&lt;span&gt;但是当两个同样的字段同时在Edit 模式下，则不会同时刷新，即刷新数据仅限于View模式下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 举个例子：Account 新增一个 Action，用来展示和更新Account的部分字段信息。&lt;/p&gt;
&lt;p&gt;1). accDisplay.cmp ： 用来展示主要的几个字段&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component &lt;/span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;span&gt;=&quot;flexipage:availableForRecordHome,force:hasRecordId&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;record&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;Object&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;accountException&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;recordFields&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;Object&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;force:recordData
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;recordId&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordId}&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        aura:id&lt;/span&gt;&lt;span&gt;=&quot;accId&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        targetRecord&lt;/span&gt;&lt;span&gt;=&quot;{!v.record}&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        targetFields&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields}&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        fields&lt;/span&gt;&lt;span&gt;=&quot;Name,AccountNumber,Site&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        mode&lt;/span&gt;&lt;span&gt;=&quot;VIEW&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:card &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;Acc View&quot;&lt;/span&gt;&lt;span&gt; iconName&lt;/span&gt;&lt;span&gt;=&quot;action:info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:formattedText &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;Name&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields.Name}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:formattedText &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;Account Number&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields.AccountNumber}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:formattedText &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;Site&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields.Site}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning:card&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2). accEdit2.cmp:更新固定的几个字段&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component &lt;/span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;span&gt;=&quot;force:hasRecordId, 
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;                            force:lightningQuickActionWithoutHeader&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;record&quot;&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;                    type&lt;/span&gt;&lt;span&gt;=&quot;Object&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;current record reference&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;recordFields&quot;&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                    type&lt;/span&gt;&lt;span&gt;=&quot;Object&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;current record fields list&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:attribute &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;recordError&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                    type&lt;/span&gt;&lt;span&gt;=&quot;String&quot;&lt;/span&gt;&lt;span&gt; description&lt;/span&gt;&lt;span&gt;=&quot;if error occurs,record error reference&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;force:recordData &lt;/span&gt;&lt;span&gt;aura:id&lt;/span&gt;&lt;span&gt;=&quot;editRecordId&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                      fields&lt;/span&gt;&lt;span&gt;=&quot;Name,AccountNumber,Site&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                      recordId&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordId}&quot;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                      targetError&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordError}&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                      targetRecord&lt;/span&gt;&lt;span&gt;=&quot;{!v.record}&quot;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                      targetFields&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields}&quot;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                      mode&lt;/span&gt;&lt;span&gt;=&quot;EDIT&quot;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                       &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Display an editing form &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;Edit Account Details&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:card &lt;/span&gt;&lt;span&gt;iconName&lt;/span&gt;&lt;span&gt;=&quot;action:edit&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields.Name}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-p-horizontal--small&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:input &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;Name&quot;&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                                 value&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields.Name}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:input &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;Account Number&quot;&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                                 value&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields.AccountNumber}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:input &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;Site&quot;&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                                 value&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields.Site}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:button &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;Save&quot;&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                                  variant&lt;/span&gt;&lt;span&gt;=&quot;brand&quot;&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                                  onclick&lt;/span&gt;&lt;span&gt;=&quot;{!c.handleSaveRecord}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning:card&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; if error occurs, display operate error &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:if &lt;/span&gt;&lt;span&gt;isTrue&lt;/span&gt;&lt;span&gt;=&quot;{!not(empty(v.recordError))}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;recordError&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            {!v.recordError}
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3). AccComponent.cmp: 通过Tab方式展示数据信息，因为想要测试一个场景，所以此component里面引用了两遍accEdit2.cmp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aura:component &lt;/span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;span&gt;=&quot;flexipage:availableForAllPageTypes,force:lightningQuickAction,force:hasRecordId&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:tabSet &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;slds-tabs_scoped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:tab &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;Acc View&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:AccDisplay &lt;/span&gt;&lt;span&gt;recordId&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordId}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning:tab&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:tab &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;Acc Edit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:AccEdit2 &lt;/span&gt;&lt;span&gt;recordId&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordId}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning:tab&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lightning:tab &lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;=&quot;Acc Edit2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:AccEdit2 &lt;/span&gt;&lt;span&gt;recordId&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordId}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning:tab&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;lightning:tabSet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aura:component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 4). 新建一个Lightning Action,并且将此Action放在Page Layout中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/910966/201808/910966-20180831175613083-553310339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结果展示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1.点击Edit Test会弹出Pop Up Window&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/910966/201808/910966-20180831180158216-1766308018.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.在ACC EDIT Tab输入了内容点击Save以后，结果展示位ACC View的Tab会立刻显示输入后save的内容，而ACC Edit2 Tab则会保留原值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/910966/201808/910966-20180831180258863-849849277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 通过结果可以看出来，在mode为view情况下，save以后会立刻显示在view视图中。在mode为Edit情况下，如果edit1有某个字段更新，比如Account Number,则edit2的Account Number不会被更新。这种设计也是正常的，因为如果同步更新会有歧义，但是我们有一些场景还是希望Edit模式下也可以自动更新这些值得，这个时候就可以使用到自带的事件监听。&lt;/p&gt;
&lt;p&gt; 自带事件监听使用非常简单，只需要&amp;lt;force:recordData&amp;gt;标签增加属性：recordUpdated属性设置你需要后台controller绑定的handler即可。&lt;/p&gt;
&lt;p&gt;使用LDS的事件监听有4中类型： CHANGED / LOADED / REMOVED / ERROR。 从名字可以看出来分别对应着 更改 / 加载 / 移除 / 错误。&lt;/p&gt;
&lt;p&gt;下面我们针对上面的程序进行改进，对accEdit2.cmp 优化一下force:recordData组件元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;force:recordData &lt;/span&gt;&lt;span&gt;aura:id&lt;/span&gt;&lt;span&gt;=&quot;editRecord2Id&quot;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;                      fields&lt;/span&gt;&lt;span&gt;=&quot;Name,AccountNumber,Site&quot;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;                      recordId&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordId}&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;                      targetError&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordError}&quot;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;                      targetRecord&lt;/span&gt;&lt;span&gt;=&quot;{!v.record}&quot;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;                      targetFields&lt;/span&gt;&lt;span&gt;=&quot;{!v.recordFields}&quot;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;                      mode&lt;/span&gt;&lt;span&gt;=&quot;EDIT&quot;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;strong&gt;&lt;span&gt;                      recordUpdated&lt;/span&gt;&lt;span&gt;=&quot;{!c.reloadUpdate}&quot;&lt;/span&gt;&lt;/strong&gt;
&lt;span&gt;9&lt;/span&gt;                       &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对accEdit2Controller.js增加一个reloadUpdate方法，其中调用&lt;strong&gt;reloadRecord&lt;/strong&gt;()方法可以对force:recordData进行重新数据加载。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; reloadUpdate : &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(component, event, helper) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; eventParams =&lt;span&gt; event.getParams();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(eventParams.changeType == &quot;CHANGED&quot;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; get the changed fields for this record&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; changedFields =&lt;span&gt; eventParams.changedFields;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             console.log('Chaged Fields: ' +&lt;span&gt; JSON.stringify(changedFields));
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             component.find('editRecordId'&lt;span&gt;).reloadRecord();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(eventParams.changeType === &quot;LOADED&quot;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             console.log(&quot;Record is loaded successfully.&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(eventParams.changeType === &quot;REMOVED&quot;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; deleteRecordResult = $A.get(&quot;e.force:showToast&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            deleteRecordResult.setParams({
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &quot;title&quot;: &quot;Delete Result&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &quot;message&quot;: &quot;The record was deleted.&quot;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            deleteRecordResult.fire();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(eventParams.changeType === &quot;ERROR&quot;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             console.log('Error: ' + component.get(&quot;v.error&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增强上述方法以后，在重新运行，当ACC Edit Tab中改了相关的值以后，ACC Edit2 Tab的值也会同步的更新，因为LDS已经加载成了最新的值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（注意：调用reloadRecord()方法以后，会重新执行事件类型为LOADED的事件设置，demo中如果save以后会打出Record is loaded successfully.）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;使用LDS可以在不使用controller情况下便进行简单的CUD操作，很类似classic 中的standcontroller功能。这种方式在lightning中还是很常见的，但是如果涉及到复杂的数据关联的改动或者transaction中需要进行多次更新操作，建议不使用LDS换成后台controller中去做。篇中只弄了Edit的demo，new以及delete的demo感兴趣的可以自己去玩。篇中有错误的欢迎指出，有问题欢迎留言。&lt;/p&gt;
</description>
<pubDate>Fri, 31 Aug 2018 15:42:00 +0000</pubDate>
<dc:creator>zero.zhang</dc:creator>
<og:description>本篇可参看：https://trailhead.salesforce.com/modules/lightning_data_service Lightning中针对object的detail页面，一个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zero-zyq/p/9384437.html</dc:identifier>
</item>
<item>
<title>基于时序数据的微内核预警引擎架构设计 - 静若清池</title>
<link>http://www.cnblogs.com/liugh/p/9568701.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liugh/p/9568701.html</guid>
<description>&lt;p&gt;    一个完整的监控生态体系包括“监、析、控”三个环节，预警平台作为偏“析”的一环，既要对监控数据做规则分析，又要为控制系统生成预警日志，起着承上启下的作用。监控平台收集的数据，是典型的随着时间变化的时间序列数据（以下简称“时序数据”），如何针对时序数据设计灵活可控的预警引擎，是预警平台的首要任务。本文根据笔者的实践体会，探讨一下基于时序数据的微内核预警引擎架构设计，希望能给感兴趣的同行带来些许共鸣。&lt;/p&gt;
&lt;p&gt;     随着移动互联网、工业互联网、物联网、边缘计算的兴起及发展，时序数据最近两年呈爆发式增长，根据DB-Engines公布的权威数据，可以发现在各种类型数据库发展趋势中，时序数据库的发展势头异常强劲。 &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/380081/201808/380081-20180831230124597-134676949.png&quot; alt=&quot;&quot; width=&quot;794&quot; height=&quot;387&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;最近两年数据库发展趋势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      而在时序数据库TOP 10排名中，半开源的InfluxDB作为新一代时序数据库标杆，综合得分遥遥领先，因此在需要存储时序数据的应用场景中，InfluxDB无疑是首选。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/380081/201808/380081-20180831230241862-2002131066.png&quot; alt=&quot;&quot; width=&quot;769&quot; height=&quot;364&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;时间序列数据库综合得分排名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      特来电云平台监控系统亦基于InfluxDB存储监控数据，尽管InfluxDB生态有Kapacitor作为预警系统，但综合考虑到灵活可控、功能可扩展、与业务灵活结合等需求特点，我们最终选择了自主设计微内核的预警引擎，主要由以下三部曲组成：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/380081/201808/380081-20180831230327808-1667753494.png&quot; alt=&quot;&quot; width=&quot;611&quot; height=&quot;188&quot;/&gt; &lt;/p&gt;
&lt;p&gt;一、         抓数据&lt;/p&gt;
&lt;p&gt;      任何一个数据处理系统，都源起于数据，因此预警系统首先要提供支持可扩展的数据源管理，用于从时序数据库、关系数据库、NO-SQL数据库、WebAPI等抓取数据。一般可通过数据中心、数据源类型、数据源连接地址、数据库名称、端口、用户名、密码等属性描述一个数据源实体。预警引擎启动时，需要动态加载配置好的数据源。&lt;/p&gt;
&lt;p&gt;二、         判规则&lt;/p&gt;
&lt;p&gt;      预警引擎本质上是一个规则引擎，需要具有高度的描述性与抽象性。几乎全部的预警引擎，都是独创一套表达式规范，以期通过各种表达式组合，完成对预警规则的描述。笔者认为表达式是封闭的，有门槛的，尤其需要综合使用多个表达式进行预警描述时，很难掌握也很难理解。那对开发人员来讲，什么是最容易掌握的呢？答案是SQL、SQL、SQL。&lt;/p&gt;
&lt;p&gt;      笔者认为一个典型的基于SQL的规则引擎，具有如下的结构：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;664&quot;&gt;
&lt;ol&gt;&lt;li&gt;SELECT DATA FROM TABLE&lt;/li&gt;
&lt;li&gt;WHERE FILTER&lt;/li&gt;
&lt;li&gt;THEN ACTION&lt;/li&gt;
&lt;/ol&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;      有了数据源，SELECT DATA FROM TABLE就很容易实现，WHERE FILTER就是本节要阐述的校验规则，THEN ACTION就是后一节要讲的动作。&lt;/p&gt;
&lt;p&gt;每一条时序数据曲线，都是对一个Tag的描述，因此依据Tag的数量以及数据的有无，可以将校验规则进行如下分类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/380081/201808/380081-20180831230752510-1581573934.png&quot; alt=&quot;&quot; width=&quot;756&quot; height=&quot;385&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        如果预警引擎能提供上面校验规则的默认实现，就可以满足90%以上的场景，同时再提供可扩展机制，针对个性化场景支持扩展开发，动态加载不同校验规则插件，基本上就能涵盖所有的业务需求。&lt;/p&gt;
&lt;p&gt;      由于不同的SQL写法，返回的数据结果可能不同，需要用一个统一的内存模型来表示结果集，而DataTable无疑是一个绝佳的选择，因此实现校验规则的很多工作是在做数据转换，有了统一的数据模型后，利用DataTable的一些内置方法进行规则判断就易如反掌了。&lt;/p&gt;
&lt;p&gt;      针对无监控数据的情况进行校验规则判断是一个难点，因为监控数据的上报很容易受监控系统自身波动、网络波动等干扰，如果依赖单一校验规则，很容易产生误判，因此针对无监控数据的情况，要采用多校验规则依赖判断方式，这些依赖规则依旧是SQL，并且作为主校验规则的参数注入到规则判断中，从而可以灵活解决误判问题，提高准确率。&lt;/p&gt;
&lt;p&gt;三、         做动作&lt;/p&gt;
&lt;p&gt;      预警触发后，需要执行的动作主要分为两类：通知、命令。&lt;/p&gt;
&lt;p&gt;      通知方式有邮件、短信、微信、钉钉等，随着系统规模的增长，当有故障发生时，很容易产生预警风暴：短时间内收到大量的预警消息，因此需要对预警规则划分重要级别、设置收敛区间、发送时间段，同时结合根因分析，保证运维人员收到有效的预警消息。&lt;/p&gt;
&lt;p&gt;      命令是指对控制系统下发运维指令，做一些常规的运维操作，比如重启进程、回收应用程序池、抓取Dump、转储日志等，及时止损，防止系统进一步恶化。&lt;/p&gt;
&lt;p&gt;      动作这块需要考虑的一个因素是通知的用户，即要求预警规则对应的接收人，既可以设置静态的默认接收人，也可以动态计算，比如根据预警实际发生时所在的机器、进程等信息计算出具体的接收人，从而做到定义一条预警规则，根据实际情况灵活发给不同接收人的效果。&lt;/p&gt;
&lt;p&gt;四、         总结&lt;/p&gt;
&lt;p&gt;      基于时序数据的微内核预警引擎，需要提供可扩展及动态加载功能，基于SQL实现规则解析，驱动监控数据从抓取、判断到动作流畅运转。&lt;/p&gt;
</description>
<pubDate>Fri, 31 Aug 2018 15:10:00 +0000</pubDate>
<dc:creator>静若清池</dc:creator>
<og:description>一个完整的监控生态体系包括“监、析、控”三个环节，预警平台作为偏“析”的一环，既要对监控数据做规则分析，又要为控制系统生成预警日志，起着承上启下的作用。监控平台收集的数据，是典型的随着时间变化的时间序</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liugh/p/9568701.html</dc:identifier>
</item>
<item>
<title>[原创]分布式系统之缓存的微观应用经验谈（一） 【基础细节篇】 - AutumnBing</title>
<link>http://www.cnblogs.com/bsfz/p/9568591.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bsfz/p/9568591.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;分布式系统之缓存的微观应用经验谈（一） 【基础细节篇】&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;　　近几个月一直在忙些琐事，几乎年后都没怎么闲过。忙忙碌碌中就进入了2018年的秋天了，不得不感叹时间总是如白驹过隙，也不知道收获了什么和失去了什么。最近稍微休息，买了两本与技术无关的书，其一是Yann Martel 写的《The High Mountains of Portugal》（葡萄牙的高山），发现阅读此书是需要一些耐心的，对人生暗喻很深，也有足够的留白，有兴趣的朋友可以细品下。好了，下面回归正题，尝试写写工作中缓存技术相关的一些实战经验和思考。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;正文&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　在分布式Web程序设计中，解决高并发以及内部解耦的关键技术离不开缓存和队列，而缓存角色类似计算机硬件中CPU的各级缓存。如今的业务规模稍大的互联网项目，即使在最初beta版的开发上，都会进行预留设计。但是在诸多应用场景里，也带来了某些高成本的技术问题，需要细致权衡。本系列主要围绕分布式系统中服务端缓存相关技术，也会结合朋友间的探讨提及自己的思考细节。文中若有不妥之处，恳请指正。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;第一篇这里尝试尽可能详细的谈谈缓存自身的基础设计应用，以及相关的操作细节等（具体应用主要以Redis 举例）。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;一、提下缓存的分类和基本特点（本文主要指服务端数据缓存）&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;　　　&lt;strong&gt;　1.1 一种区分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　缓存基于不同的条件有很多种划分方式，本地缓存（Local cache）和分布式缓存（Distributed cache）是一种常见分类，两者自身又包含很多细类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　本地并不是指程序所在本地服务器（从严格概念来说），而是更细粒度的指位于程序自身的内部存储空间，而分布式更多强调的是存储在进程之外的一个或者多个服务器上，彼此交互通信，在具体软件项目的设计和应用中，多数时候是混合一体。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　（当然，个人认为对缓存本质的理解才是最重要的，至于概念上的分类只是一个不同理解下的划分而已）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　1.2 一些技术成本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　在具体项目架构设计时，单纯使用前者（本地缓存）的开发成本毋庸置疑是极低的，主要考虑的是本机的内存负载或者极少量的磁盘I/O影响。而后者的设计初心是为了利于分布式程序之间缓存数据的高效共享和管理，除了考虑缓存所在服务器自身的内存负载，设计时更需要充分考虑网络I/O、CPU的负载，以及某些场景下的磁盘I/O的代价，同时还在具体设计时尽可能规避和权衡整体稳定性和效率，这些不仅仅只是作为缓存服务器的硬件成本和技术维护。 需要谨慎考虑的底层问题包括缓存间通信、网络负载和延迟等各种需要权衡的细节。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　其实如果理解了缓存本质就该知道，任何存储介质在适当的场景下都可以充当一个高效的缓存角色并进行项目集成和缓存间集群。常见主流的Memcached和Redis等均是属于后者范畴，甚至可以包括如基于NoSql设计的MongoDB这类文档数据库（但这是从角色角度讲，而狭义划分上这是基于磁盘的存储库，需要注意，各有专攻）。这些第三方缓存在进行项目集成和缓存间集群，也需要解决一些问题。甚至项目迭代到了后期阶段，往往还需要具备较高专业知识的运维同时参与，并且在开发中的逻辑设计和代码实现也会增加一定的工作量。所以有时候在具体项目的设计上，一方面要尽可能预留，一方面还得根据实际情况尽可能精简。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　额外说下其他体会：在个人有限的技术学习和实践里，关于节点数据交互，尤其是服务间通信，是不存在完美的闭环的，理论上也都是在“当前阶段”面向“高一致”的权衡罢了（大概跟生活是一样的吧，呵，写偏了）。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　二、关于缓存数据库结构的一些设计细节&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　（由于目前个人工作中大多数情况应用的是Redis 3.x，以下若有特性关联，均是以此作为参照说明。）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　2.1 实例（Instance）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　根据业务场景，公共数据和业务耦合数据，一定分别使用不同的实例。如果是单实例，才可以考虑以DB划分。当你使用的是Redis，那么DB在Redis里是有数据隔离，但没有严格权限限制，所以划库只是一种选择。在Cluster集群里则是保持默认单个库，不过实际中我会尝试根据项目大小来调整，至于在哪个开发阶段则是作为预留设计。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　额外需要注意的是，作为重度依赖服务器内存的缓存产品，如果开启了持久化（后面会提到），并且在为并发量极大的服务提供支持时，服务器硬件资源会出现大量抢占，请结合持久策略配置，考虑实例是否进行分盘存储。持久化本质是将内存数据同步写入硬盘（刷盘），而磁盘I/O实在有限，被迫的写入阻塞除了造成线程阻塞和服务超时，还会导致额外异常甚至波及其他底层依赖服务。当然，我的建议是，如果条件允许，最好是在项目初期设计时就进行规划并确定。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　2.2 缓存“表”（Table）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　一般缓存中并没有传统RDBMS中直观的表概念（往往以键值对“KV”形式存在），但从结构上来讲，键值对本身就可以组装为各种表结构。一般我会先生成数据库表关系图，然后分析什么时候存储字符串，什么时候存储对象，然后使用缓存键（KEY）进行表和字段（列）分割。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　假定需要存储一个登录服务器表数据，包含字段（列）：name、sign、addr，那么可以考虑将数据结构拆分为以下形式：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　{ key : &quot;server:name&quot; , value : &quot;xxxx&quot; }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　{ key : &quot;server:sign&quot; , value : &quot;yyyy&quot; }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　{ key : &quot;server:addr&quot; , value : &quot;zzzz&quot; }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　需要注意的是，往往在分布式缓存产品中，例如Redis，存在多种数据结构（如String、Hash等），还需要根据数据关联性和列的数量，来选择对应缓存的存储数据结构，相关存储空间和时间复杂度是完全不同的，而这个在初期阶段是很难感受到的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　同时，就算缓存的内存设置的足够大，剩余也很多，也同样需要考虑类似RDBMS中的单表容量问题，控制条目数量不能无限增长（比如预知到存储条目可以轻松达到百万级），“分库分表”的设计思路都是相通的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　2.3 缓存键（Key）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　上面提到了基于缓存键来设计表，这里再单独说明一下键相关的个人规范。在键长度足够简短的前提下，如果关联相同业务模块，则必须设计为以同一个标识（代号）开头，目的是方便查找和统计管理。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如用户登录服务器列表：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　{ key : &quot;ul:server:a&quot; , value : &quot;xxxx&quot; }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　{ key : &quot;ul:server:b&quot; , value : &quot;yyyy&quot; }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　另外，每个独立业务系统可考虑配置一个唯一的通用前缀标识，当然，这里不是必需，若实际工作中，如果使用的是不同库，则可以忽略。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;2.4 缓存值（value）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　缓存中的值（这里指单一条目）的大小没有平均标准，但Size自然是越小越好（若使用的是Redis，一次操作的value较大会直接影响整个Redis的响应时间，不仅仅是指网络I/O）。如果存储占用空间直达10M+，建议考虑关联的业务场景是否可以拆分为热点和非热点数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;2.5 持久化（Permanence）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　上面也简单提了下，一般来说，持久和缓存本身是没有直接关系的，可以粗略想象为一个面向硬盘一个面向内存。但如今的Web项目里，有些业务场景是高度依赖缓存的，持久化可以一方面帮助提高缓存服务重启后的快速恢复，一方面提供特定场景下的存储特性。当然，由于持久化必然需要牺牲一些性能，包括CPU的抢占和硬盘I/O影响。不过大多数时候是利大于弊，建议在应用缓存的时候，没有特别情况的话，尽量搭配持久化，无论是使用自身机制还是第三方来实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　如果是使用的Redis，其自身就具备相关持久策略，包含AOF和RDB，我在大多数情况下是两者同时配置的（当然，最新官方版本本身也提供了混合模式）。如果在一些非高并发的场景下，或者说在一些中小项目的管理模块里，仅仅只是作为优化手段，确定了不需持久，也可以直接设置关闭，节约性能开销损耗，但建议在程序中将该实例做好标注，确保该实例的公共使用范围。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　2.6 淘汰（Eliminate）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　缓存如果无限制的增长，即使设置了较短的过期（Expiration ），在一些时间点上，高并发的一批大数据会在较短时间内就达到了可使用内存的峰顶，此时程序中与缓存服务器的交互会出现大量延迟和错误，甚至给服务器自身都带来了严重的不稳定性。所以在生产环境里尽量给缓存配置最大内存限制，以及适当的淘汰策略。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　如果使用的是Redis，自身淘汰策略选择比较灵活。个人的设计是，在数据呈现类似幂律分布情况下，总有大量数据访问较低，我会选择配置allkeys-lru、volatile-lru，将最少访问的数据进行淘汰。再比如缓存是作为日志应用的，那么我一般是项目前期是配置no-enviction，后期会配置为volatile-ttl。当然，我也见过一种特殊业务下的设计，缓存直接用来作为轻量的持久数据库使用，而且是终端，开始觉得有些新奇，后来发现是非常符合业务设计的（比如几乎没有任何复杂逻辑和强事务）。所以合情合理，确实不应该禁锢在传统设计里，毕竟架构总是基于业务去实时组合和改变的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　三、缓存的基础CURD和其他相关（在这里我主要讨论一级缓存）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;　　3.1 新增（Create）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　如果没有特殊业务需求（如上面提到的），插入必须设置过期时间。同时，尽量保证过期随机性。如果是进行批量缓存，则个人的做法是保证设置的过期时间上至少是分散的，目的是为了降低缓存雪崩等风险和影响（关于这些我会在以后的扩展篇里尝试阐述）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　如，批量缓存的对象是一个结果集，条目有10万条，缓存时间基础为 60*60*2（sec），现在需要同时进行缓存。我的做法是默认生成一个随机数，如random（范围 0 - 1000），过期时间则设置为( 60*60*2 + random ) 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　3.2 修改（Update）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　更新一条缓存的数据，注意是否需要重新调整过期时间。同时在很多场合，如多个缓存间同步时，建议直接删除该缓存，而不是更新缓存。修改操作很多时候是关联到DB间的同步操作的，相对考究的多一些，需要权衡分布式事务上的问题，后续文章里会写到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;3.3 读取（Read）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　查找缓存时，如果存在多条，并确定数据量不大，务必使用严格匹配key的模式，而尽量不要使用通配符方式。虽然发送指令的key数据变长了，但却避免了不必要的缓存内的搜索性能损耗。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　例如单纯相信Redis里自身的存储优化，无限制的使用 keys pattern而不考虑时间复杂度，同时造成大量线程阻塞（这里与主从复制无关）。如果折中使用scan分页替代，也并非一种“无忧”的实现，一是需要在程序代码的封装里设置较低的容量，二是请务必在程序逻辑里对数据幻读等潜在问题做相关的管控处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　另外可以额外类比一种场景，操作DB中的大表，命中的热点数据分布靠后。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　3.4 删除 / 清空（Delete / Clear）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　删除缓存，一般有直接移除和设置时间过期（并不是任何时候都是滑动增加过期）两种方式，没什么细节上的说明。（倒是听过一种特殊业务场合，批量请求同类数据，并且即时性没有很高要求，设置过期时间并将时间稍作分散。）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　清空缓存，我在项目里目前并未应用，甚至也不提倡直接使用。但是假如在应用时，需要慎重考虑两个地方。一是清理时机，二是清理时效（若在Redis里，无论是flushdb或者flushall，都会形成一定阻塞）&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　3.5 锁/信号（Locking）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　本身无关缓存，属于一些并发特性实现，有一定的适用场景。这在Redis中有一些基于原子的实现，但与本系列讨论无关。本人去年写过一篇与之相关的分享，详见：商城系统下单库存管控系列杂记（二）&lt;a href=&quot;https://www.cnblogs.com/bsfz/p/7824428.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/bsfz/p/7824428.html&lt;/a&gt;），但这里不赘述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;strong&gt;3.6 发布-订阅（Publish-Subscribe）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　　　　　为什么提到这个跟生产消费（Produce-Consume）相关的动作呢？这个机制本身是不属于缓存自身的范畴的，而是更相关于消息队列（Message Queue）。之所以提到，是因为如今主流的缓存产品都自带这一特性，很多场景使用起来较方便，配置也简单，效率也够快。只是，往往会造成滥用。最关键是不必要的强耦合也降低了整体灵活性和性能，扩展性也实在有限。当然，这是我目前的看法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　　　　　我的建议是：如果没有特殊的场景应用，尽量不使用。至少本人是不会优先推荐使用缓存自身的发布订阅的，甚至在缓存集群系统中，需要考究的细节更多。而推荐的方式是，使用其他专业中间件解决，如基于MQ的产品替代方案。具体的候选有优秀的开源作品如RabbitMQ、Kafka等，包括有朋友提到的近两年国内阿里研发的RocketMQ等等，但是个人目前使用较多的依然是RabbitMQ。当然，这里不去过多赘述了，根据场景选择，合适的场景选用最合适的技术方案即可吧。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本篇先写到这里，下一篇会围绕相关主题尝试扩展阐述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　PS，由于个人能力和经验均有限，自己也在持续学习和实践，文中若有不妥之处，恳请指正。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;【预留占位：分布式系统之缓存的微观应用经验谈（二）【交互场景篇】&lt;a href=&quot;https://www.cnblogs.com/bsfz/p/9568725.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/bsfz/p/9568725.html&lt;/a&gt;】&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;End.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 31 Aug 2018 14:40:00 +0000</pubDate>
<dc:creator>AutumnBing</dc:creator>
<og:description>前言 近几个月一直在忙些琐事，几乎年后都没怎么闲过。忙忙碌碌中就进入了2018年的秋天了，不得不感叹时间总是如白驹过隙，也不知道收获了什么和失去了什么。最近稍微休息，买了两本与技术无关的书，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bsfz/p/9568591.html</dc:identifier>
</item>
<item>
<title>SpringCloud(4)---Ribbon服务调用，源码分析 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/9568481.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/9568481.html</guid>
<description>&lt;p&gt;本篇模拟订单服务调用商品服务，同时商品服务采用集群部署。&lt;/p&gt;
&lt;p&gt;注册中心服务端口号7001，订单服务端口号9001,商品集群端口号：8001、8002、8003。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180831214647444-512867267.png&quot; alt=&quot;&quot; width=&quot;1206&quot; height=&quot;110&quot;/&gt;&lt;/p&gt;
&lt;p&gt;各服务的配置文件这里我这边不在显示了，和上篇博客配置一样。博客地址：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/qdhxhz/p/9357502.html&quot;&gt;SpringCloud(3)---Eureka服务注册与发现&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;一、商品中心服务端&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt;   1、pom.xml&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9804b8e3-4ba9-4f9a-9c9b-289c21aa41f9')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_9804b8e3-4ba9-4f9a-9c9b-289c21aa41f9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9804b8e3-4ba9-4f9a-9c9b-289c21aa41f9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9804b8e3-4ba9-4f9a-9c9b-289c21aa41f9',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9804b8e3-4ba9-4f9a-9c9b-289c21aa41f9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.jincou&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;product&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;product&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.4.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义当前springcloud版本&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Finchley.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;表明是Eureka Client客户端&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;2、Product商品实体类&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Data
@NoArgsConstructor
@AllArgsConstructor
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Product &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;商品名称&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;价格,分为单位&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; price;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;库存&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; store;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;   3、ProductService商品接口&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ProductService {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找所有商品&lt;/span&gt;
    List&amp;lt;Product&amp;gt;&lt;span&gt; listProduct();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据商品ID查找商品&lt;/span&gt;
    Product findById(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;   4、ProductServiceImpl商品实现类&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ProductServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ProductService {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Map&amp;lt;Integer, Product&amp;gt; daoMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟数据库商品数据&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
        Product p1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Product(1, &quot;苹果X&quot;, 9999, 10&lt;span&gt;);
        Product p2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Product(2, &quot;冰箱&quot;, 5342, 19&lt;span&gt;);
        Product p3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Product(3, &quot;洗衣机&quot;, 523, 90&lt;span&gt;);
        Product p4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Product(4, &quot;电话&quot;, 64345, 150&lt;span&gt;);

        daoMap.put(p1.getId(), p1);
        daoMap.put(p2.getId(), p2);
        daoMap.put(p3.getId(), p3);
        daoMap.put(p4.getId(), p4);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Product&amp;gt;&lt;span&gt; listProduct() {
        Collection&lt;/span&gt;&amp;lt;Product&amp;gt; collection =&lt;span&gt; daoMap.values();
        List&lt;/span&gt;&amp;lt;Product&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(collection);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Product findById(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; daoMap.get(id);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;     5、ProductController&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
@RequestMapping(&lt;/span&gt;&quot;/api/v1/product&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProductController {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;集群情况下，用于订单服务查看到底调用的是哪个商品微服务节点&lt;/span&gt;
    @Value(&quot;${server.port}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String port;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ProductService productService;
&lt;/span&gt;&lt;span&gt;
     //获取所有商品列表&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;list&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object list(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; productService.listProduct();
    }
&lt;/span&gt;&lt;span&gt;
    //根据id查找商品详情&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;find&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object findById(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id){
        Product product &lt;/span&gt;=&lt;span&gt; productService.findById(id);
        Product result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Product();
        BeanUtils.copyProperties(product,result);
        result.setName( result.getName() &lt;/span&gt;+ &quot; data from port=&quot;+&lt;span&gt;port );
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;      6、测下该服务接口是否成功&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180831215738536-922460920.png&quot; alt=&quot;&quot; width=&quot;513&quot; height=&quot;184&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;二、订单中心服务端&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt;    1、pom.xml&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('94b5abe6-d864-4547-a1be-83c083c0ddcf')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_94b5abe6-d864-4547-a1be-83c083c0ddcf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_94b5abe6-d864-4547-a1be-83c083c0ddcf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('94b5abe6-d864-4547-a1be-83c083c0ddcf',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_94b5abe6-d864-4547-a1be-83c083c0ddcf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.jincou&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;order&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.4.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Finchley.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;  &lt;span&gt; 2、ProductOrder商品订单实体&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Data
@AllArgsConstructor
@NoArgsConstructor
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ProductOrder &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;订单ID&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 商品名称&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String productName;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;订单号&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String tradeNo;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 价格,分&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; price;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;订单创建时间&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date createTime;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户id&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userName;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;     3、ProductOrderService订单接口&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 订单业务类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ProductOrderService {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下单接口&lt;/span&gt;
     ProductOrder save(&lt;span&gt;int&lt;/span&gt; userId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; productId);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;     4、ProductOrderServiceImpl订单实现类&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ProductOrderServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ProductOrderService {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ProductOrder save(&lt;span&gt;int&lt;/span&gt; userId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; productId) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;product-service是微服务名称（这里指向的商品微服务名称）,api/v1/product/find?id=? 就是商品微服务对外的接口&lt;/span&gt;
        Map&amp;lt;String, Object&amp;gt; productMap = restTemplate.getForObject(&quot;http://product-service/api/v1/product/find?id=&quot; + productId, Map.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

        ProductOrder productOrder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProductOrder();
        productOrder.setCreateTime(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
        productOrder.setUserId(userId);
        productOrder.setTradeNo(UUID.randomUUID().toString());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取商品名称和商品价格&lt;/span&gt;
        productOrder.setProductName(productMap.get(&quot;name&quot;&lt;span&gt;).toString());
        productOrder.setPrice(Integer.parseInt(productMap.get(&lt;/span&gt;&quot;price&quot;&lt;span&gt;).toString()));
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为在商品微服务配置了集群，所以这里打印看下调用了是哪个集群节点，输出端口号。&lt;/span&gt;
        System.out.println(productMap.get(&quot;name&quot;&lt;span&gt;).toString());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; productOrder;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;     5、OrderController类&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;span&gt;@RequestMapping(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;api/v1/order&quot;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderController {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ProductOrderService productOrderService;
    
   &lt;span&gt; @RequestMapping(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;save&quot;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object save(@RequestParam(&quot;user_id&quot;)&lt;span&gt;int&lt;/span&gt; userId, @RequestParam(&quot;product_id&quot;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt; productId){

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; productOrderService.save(userId, productId);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;    6、SpringBoot启动类&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(OrderApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当添加@LoadBalanced注解，就代表启动Ribbon,进行负载均衡&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    @LoadBalanced&lt;/span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RestTemplate restTemplate() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RestTemplate();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;    &lt;span&gt;7、接口测试&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180831220657511-1850638471.png&quot; alt=&quot;&quot; width=&quot;533&quot; height=&quot;188&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;多调几次接口，看后台打印&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180831220750632-41476104.png&quot; alt=&quot;&quot; width=&quot;539&quot; height=&quot;203&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发现订单服务去掉商品服务的时候，不是固定节点，而且集群的每个节点都有可能。所以通过Ribbon实现了负载均衡。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;三、Ribbon源码分析&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt;    1、@LoadBalanced注解作用&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;在springcloud中，引入Ribbon来作为客户端时，负载均衡&lt;span&gt;使用的是被&lt;code&gt;@LoadBalanced&lt;/code&gt;修饰的&lt;code&gt;RestTemplate&lt;/code&gt;对象&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180831221407209-1808299223.png&quot; alt=&quot;&quot; width=&quot;730&quot; height=&quot;117&quot;/&gt;&lt;/p&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;      RestTemplate 是Spring自己封装的http请求的客户端，也就是说它只能发送一个正常的Http请求,这跟我们要求的负载均衡是有出入的，还有就是这个请求的链接上的域名&lt;/p&gt;
&lt;p&gt;是我们微服的一个服务名，而不是一个真正的域名，那它是怎么实现负载均衡功能的呢？&lt;/p&gt;
&lt;p&gt;我们来看看RestTemplate的父类InterceptingHttpAccessor。&lt;/p&gt;
&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180831221647049-158144836.png&quot; alt=&quot;&quot; width=&quot;728&quot; height=&quot;667&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;18.5&quot;&gt;
&lt;p&gt;      从源码我们可以知道InterceptingHttpAccessor中有一个拦截器列表List&amp;lt;ClientHttpRequestInterceptor&amp;gt;，如果这个&lt;span&gt;列表为空，则走正常请求流程，如果不为空则走&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;拦截器&lt;/span&gt;，所以只要给RestTemplate添加拦截器，而这个拦截器中的逻辑就是Ribbon的负载均衡的逻辑。&lt;span&gt;通过&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@LoadBalanced注解&lt;/span&gt;&lt;/code&gt;为RestTemplate配置添加拦截器&lt;/span&gt;。&lt;/p&gt;
&lt;div readability=&quot;25&quot;&gt;
&lt;p&gt;具体的拦截器的生成在LoadBalancerAutoConfiguration这个配置类中，所有的RestTemplate的请求都会转到Ribbon的负载均衡器上&lt;/p&gt;
&lt;p&gt;(当然这个时候如果你用RestTemplate发起一个正常的Http请求时走不通，因为它找不到对应的服务。)这样就实现了Ribbon的请求的触发。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;     2.拦截器都做了什么？&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;上面提到过，发起http后请求后，请求会到达到达拦截器中，在拦截其中实现负载均衡，先看看代码：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180831222225985-1013783158.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;531&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;20.5&quot;&gt;
&lt;p&gt;      我们可以看到在intercept()方法中实现拦截的具体逻辑，首先会根据传进来的请求链接，获取微服的名字serviceName,然后调用LoadBalancerClient的&lt;/p&gt;
&lt;p&gt;execute(String serviceId, LoadBalancerRequest&amp;lt;T&amp;gt; request)方法，这个方法直接返回了请求结果，所以正真的路由逻辑在LoadBalancerClient的实现类中，&lt;/p&gt;
&lt;p&gt;而这个实现类就是RibbonLoadBalancerClient，看看execute()的源码：&lt;/p&gt;
&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201808/1090617-20180831222412387-663724253.png&quot; alt=&quot;&quot; width=&quot;710&quot; height=&quot;283&quot;/&gt;&lt;div readability=&quot;19.5&quot;&gt;
&lt;p&gt;       首先是获得均衡器ILoadBalancer这个类上面讲到过这是Netflix Ribbon中的均衡器，这是一个抽象类，具体的实现类是ZoneAwareLoadBalancer上面也讲到过，&lt;/p&gt;
&lt;p&gt;每一个微服名对应一个均衡器，均衡器中维护者微服名下所有的服务清单。getLoadBalancer()方法通过serviceId获得对应的均衡器，getServer()方法通过对应的均衡器&lt;/p&gt;
&lt;p&gt;在对应的路由的算法下计算得到需要路由到Server，Server中有该服务的具体域名等相关信息。得到了具体的Server后执行正常的Http请求，整个请求的负载均衡逻辑就完成了。&lt;/p&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;在微服中Ribbon和 Hystrix通常是一起使用的，其实&lt;span&gt;直接使用Ribbon和Hystrix实现服务间的调用并不是很方便&lt;/span&gt;，通常在Spring Cloud中我们使用Feign完成服务间的调用，&lt;/p&gt;
&lt;p&gt;而&lt;span&gt;Feign是对Ribbon和Hystrix做了进一步的封装方便大家使用&lt;/span&gt;，对Ribbon的学习能帮你更好的完成Spring Cloud中服务间的调用。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt; 我只是偶尔安静下来，对过去的种种思忖一番。那些曾经的旧时光里即便有过天真愚钝，也不值得谴责。毕竟，往后的日子，还很长。不断鼓励自己，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 天一亮，又是崭新的起点，又是未知的征程（上校6）&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Fri, 31 Aug 2018 14:39:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<og:description>SpringCloud(4) Ribbon 本篇模拟订单服务调用商品服务，同时商品服务采用集群部署。 注册中心服务端口号7001，订单服务端口号9001,商品集群端口号：8001、8002、8003。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/9568481.html</dc:identifier>
</item>
<item>
<title>.NET Core开发日志——ADO.NET与SQL Server - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9563015.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9563015.html</guid>
<description>&lt;p&gt;在.NET世界，如果想要对数据库进行操作，总少不了ADO.NET的身影。在.NET Core里同样离不开那些熟悉的类库与API。这里简略地介绍下如何通过ADO.NET对SQL Server进行不同的处理。&lt;/p&gt;

&lt;p&gt;第一步先在项目工程中查看有无System.Data.SqlClient引用，如果没有的话，可以用以下三种方式安装：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Visual Studio上的可视化Nuget包管理工具(Manage NuGet Packages)，找到相应类库，点击安装按钮&lt;/li&gt;
&lt;li&gt;同样是Visual Studio上的包管理控制台(Package Manager Console) 输入命令，&lt;code&gt;Install-Package System.Data.SqlClient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;命令行界面(CLI) 中使用命令，&lt;code&gt;dotnet add package System.Data.SqlClient&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用最基础的ExecuteReader方法：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var conn = new SqlConnection(&quot;Server=.;Integrated Security=true&quot;))
{
    conn.Open();
    using (var cmd = new SqlCommand(&quot;select top 10 * from [AdventureWorks2016CTP3].[Person].[Person]&quot;, conn))
    {
        using (var reader = cmd.ExecuteReader())
        {
            while (reader.Read())
            {
                Console.WriteLine(reader[&quot;FirstName&quot;]);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在.NET Core 2.0以后还可以使用SqlDataAdapter与DataSet，看得出微软在向后兼容方面做了不少工作：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var conn = new SqlConnection(&quot;Server=.;Integrated Security=true&quot;))
{
    var adapter = new SqlDataAdapter(&quot;select top 10 * from [AdventureWorks2016CTP3].[Person].[Person]&quot;, conn);
    var dataset = new DataSet();
    adapter.Fill(dataset);
    var dt = dataset.Tables[0];
    foreach (var item in dt.Rows)
    {
        var row = item as DataRow;
        Console.WriteLine(row[&quot;FirstName&quot;]);
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var conn = new SqlConnection(&quot;Server=.;Integrated Security=true&quot;))
{
    conn.Open();
    using (var cmd = new SqlCommand(&quot;insert into [AdventureWorks2016CTP3].[Person].[AddressType] (Name) values(@Name)&quot;, conn))
    {
        cmd.Parameters.AddWithValue(&quot;@Name&quot;, &quot;Test&quot;);
        cmd.ExecuteNonQuery();
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var conn = new SqlConnection(&quot;Server=.;Integrated Security=true&quot;))
{
    conn.Open();
    using (var cmd = new SqlCommand(&quot;update [AdventureWorks2016CTP3].[Person].[AddressType] set name = @Name where name = @Criterion&quot;, conn))
    {
        cmd.Parameters.AddWithValue(&quot;@Name&quot;, &quot;Test2&quot;);
        cmd.Parameters.AddWithValue(&quot;@Criterion&quot;, &quot;Test&quot;);
        cmd.ExecuteNonQuery();
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var conn = new SqlConnection(&quot;Server=.;Integrated Security=true&quot;))
{
    conn.Open();
    using (var cmd = new SqlCommand(&quot;delete [AdventureWorks2016CTP3].[Person].[AddressType] where name = @Name&quot;, conn))
    {
        cmd.Parameters.AddWithValue(&quot;@Name&quot;, &quot;Test2&quot;);
        cmd.ExecuteNonQuery();
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var conn = new SqlConnection(&quot;Server=.;Integrated Security=true&quot;))
{
    conn.Open();
    using (var cmd = new SqlCommand(&quot;[AdventureWorks2016CTP3].[dbo].[uspGetEmployeeManagers]&quot;, conn))
    {
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue(&quot;@BusinessEntityID&quot;, 10);
        using (var reader = cmd.ExecuteReader())
        {
            while (reader.Read())
            {
                Console.WriteLine(reader[&quot;FirstName&quot;]);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;使用上与普通的数据表没有差别。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using (var conn = new SqlConnection(&quot;Server=.;Integrated Security=true&quot;))
{
    conn.Open();
    using (var cmd = new SqlCommand(&quot;select top 10 * from [AdventureWorks2016CTP3].[HumanResources].[vEmployee]&quot;, conn))
    {
        using (var reader = cmd.ExecuteReader())
        {
            while (reader.Read())
            {
                Console.WriteLine(reader[&quot;FirstName&quot;]);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上代码例子里的数据库使用的是&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=49502&quot;&gt;AdventureWorks Databases and Scripts for SQL Server 2016 CTP3&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 31 Aug 2018 14:39:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<og:description>在.NET世界，如果想要对数据库进行操作，总少不了ADO.NET的身影。在.NET Core里同样离不开那些熟悉的类库与API。这里简略地介绍下如何通过ADO.NET对SQL Server进行不同的处</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9563015.html</dc:identifier>
</item>
<item>
<title>微服务介绍及Asp.net Core实战项目系列之微服务介绍 - LouieGuo</title>
<link>http://www.cnblogs.com/guolianyu/p/9568400.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guolianyu/p/9568400.html</guid>
<description>&lt;hr/&gt;&lt;p&gt; 整体架构目录：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/guolianyu/p/9473676.html&quot; target=&quot;_blank&quot;&gt;ASP.NET Core分布式项目实战-目录&lt;/a&gt;&lt;/p&gt;


&lt;hr/&gt;&lt;p&gt;在做微服务架构的技术选型的时候，以“无侵入”和“社区活跃”为主要的考量点，将来升级为原子服务架构、量子服务架构的时候、甚至恢复成单体架构的时候，代价最小。&lt;/p&gt;
&lt;p&gt;软件开发只需要组装，不再需要从头开发。&lt;/p&gt;
&lt;p&gt;选型可以参考一下张队长的文章：https://mp.weixin.qq.com/s/UIFjm7W6bDfdmjpeMVJtqA&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;每一个微服务都是一个零件，并使用这些零件组装出不同的形状。微服务架构就是把一个大系统按业务功能分解成多个职责单一的小系统，并利用简单的方法使多个小系统相互协作，组合成一个大系统。&lt;br/&gt;服务之间互相协调、互相配合，为用户提供最终价值，每个服务运行在其独立的进程中，服务于服务间采用轻量级的通信机制互相协作，通常是基于HTTP协议的RESTful API或者RPC。&lt;br/&gt;核心思想：把大系统拆分为小系统。&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;服务注册：服务提供方将自己调用地址注册到服务注册中心，让服务调用方能够方便地找到自己。&lt;/p&gt;
&lt;p&gt;服务发现：服务调用方从服务注册中心找到自己需要调用的服务的地址。&lt;br/&gt;负载均衡:&lt;br/&gt;服务网关：服务网关是服务调用的唯一入口。&lt;br/&gt;配置中心:&lt;br/&gt;API管理：&lt;br/&gt;集成框架：微服务组件都以职责单一的程序包对外提供服务，集成框架以配置的形式将所有微服务组件（特别是管理端组件）集成到统一的界面框架下，让用户能够在统一的界面中使用系统。&lt;br/&gt;分布式事务：保证数据的一致性&lt;br/&gt;调用链 ：记录完成一个业务逻辑时调用到的微服务，并将这种串 行或并行的调用关系展示出来。在系统出错时，可以方便地找到 出错点。 （监控）&lt;br/&gt;支撑平台：由于微服务化后，系统变得更加碎片化，系统的部署、运维、监控等都比单体架构更加复杂，就需要用到自动化.&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;微服务与单体的比较，可看下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/651008/201808/651008-20180831213737251-59006097.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/651008/201808/651008-20180831213748578-562938513.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;什么时候选用微服务呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从个人来看，有三种场景可以考虑使用微服务&lt;br/&gt;1、规模大 ，团队超过10人&lt;br/&gt;2、业务复杂度高，系统超过5个子模块&lt;br/&gt;3、需要长期演进，项目开发和维护周期超过半年&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用微服务简单模式进行开发的四个步骤：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;1、沿用组织中现有的技术体系开发单一职责的微服务&lt;br/&gt;2、服务提供方将地址信息注册到注册中心，调用方将服务地址从注册中心拉下来。&lt;br/&gt;3、通过门户后端（服务网关）将服务API暴露给门户和移动APP。&lt;br/&gt;4、将管理端模块集成到统一的操作界面上。&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;基础设施：&lt;/strong&gt;自动构建、自动部署、日志中心、健康 检查、性能监控等功能&lt;br/&gt;gitlab-CI/CD、Jenkins+gitlab-CI/CD：自动化部署&lt;br/&gt;K8s&amp;amp;Docker+Jenkins&amp;amp;Pipeline+Gitlab--CI/CD：自动化部署&lt;br/&gt;ELK:日志&lt;br/&gt;zipkin/skywalking：微服务监控&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;我们只需要在开发 层面理解了注册中心、服务发现、负载均衡、服务网关和管理端集成框架， 在运维层面准备好持续集成工具、配置中心和监控告警工具，就可以很容 易地落地微服务架构，享受微服务架构带来的精彩。祝大家玩得愉快。&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;1、开放给互联网用户调用的API需要在API网关上加上授权、鉴权、限流、限并发、统计、计费等功能&lt;/p&gt;
&lt;p&gt;2、内网环境：提供给内网里的其他微服务调用的API。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1、内网环境API开发&lt;/span&gt;&lt;/h2&gt;
&lt;hr/&gt;
&lt;h3&gt;1、需要先考虑是用HTTP API还是RPC？&lt;/h3&gt;
&lt;p&gt;HTTP API：&lt;br/&gt;指的是简单的基于HTTP协议的API，具体的例子就是MVC的Controller,&lt;br/&gt;http://127.0.0.1/helloworld&lt;/p&gt;
&lt;p&gt;RPC:&lt;br/&gt;远程过程调用(大多数指Socker通信方法的远程调用)，也可以使用HTTP协议来实现RPC调用，例如gRPC.&lt;/p&gt;
&lt;p&gt;HTTP 简单、RPC基于Socket的RPC性能更好。但我最后还是选择了HTTP API来使用。&lt;/p&gt;
&lt;h3&gt;2、HTTP API 的性能足以支撑多数项目&lt;/h3&gt;
&lt;p&gt;RPC的协议吞吐量是HTTP性能的几倍，如 protobuf、Thrift、Kyro、Dubbo&lt;br/&gt;等，在考虑自身技术栈、成本、稳定性、易用性、可维护性、业务场景等因素考虑，HTT和RPC的性能差别并不是主要问题。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/651008/201808/651008-20180831213917313-553928466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;以电商平台为例，当用户下单并支付后，系统需要修改订单的状态并&lt;br/&gt;且增加用户积分。由于系统采用的是微服务架构，分离出了支付服务、订 单服务和积分服务，每个服务都有独立数据库做数据存储。当用户支付成 功后，无论是修改订单状态失败还是增加积分失败，都会 造成数据的不 一致。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/651008/201808/651008-20180831213950930-828757023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然而微服务架构下，每个微服务都有自己的数据库，导致微服务架构 的系统不能简单地满足 ACID，我们就需要寻找微服务架构下的数据一致性解决方案：&lt;/p&gt;
&lt;p&gt;CAP是指在一个分布式系统下，包含三个要素：：Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），并且 三者不 可得兼。&lt;br/&gt;C:所有数据变动都是同步的&lt;br/&gt;A：即在可以接受的时间范围内正确的相应用户请求&lt;br/&gt;P：分区容错性，即某节点或网络分区故障时，系统仍能提供满足一致性和可用性的服务。&lt;br/&gt;在分布式系统下，为了保证模块的分区容错性，只能在数据强一致性和可用性之间做平衡。具体表现为在一定时间内，可能模块之间数据是不一致的，但是通过自动或者手动补偿后能够达到最终的一致。&lt;/p&gt;
&lt;p&gt;分享我们是如何保证微服务架构的数据一致性的：&lt;/p&gt;
&lt;h3&gt;1、可靠消息最终一致性（适用于跨平台技术栈不统一的场景）&lt;/h3&gt;
&lt;p&gt;利用MQ组件实现的二阶段提交，涉及三个模块：&lt;br/&gt;A、上游应用，执行业务并发送MQ消息&lt;br/&gt;B、可靠消息服务和MQ消息组件，协调上下游消息的传递，并确保上下游数据的一致性。&lt;br/&gt;C、下游应用，监听MQ的消息并执行自身业务。&lt;/p&gt;
&lt;h3&gt;2、TCC方案&lt;/h3&gt;
&lt;p&gt;涉及三个模块：主业务、从业务、活动管理器&lt;br/&gt;1、主业务服务分别调用所有从业务服务的try操作，并在活动管理器中记录所有从业务服务。当所有从业服务try成功或者某个从业服务try失败时，进入第二阶段。&lt;br/&gt;2、活动管理器根据第一阶段从业服务的try结果来执行confirm或cancel操作。如果第一阶段所有从业务服务都try成功，则协作者调用所有从业服务的confirm操作，否则，调用所有从业务服务的cancel操作。&lt;br/&gt;Confirm 失败：则回滚所有 confirm 操作并执行 cancel 操作。&lt;br/&gt;Cancel 失败：从业务服务需要提供自动 cancel 机制，以保证 cancel 成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/651008/201808/651008-20180831214023258-1725647000.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;参考地址：&lt;/p&gt;
&lt;p&gt;张队长文章：https://mp.weixin.qq.com/s/UIFjm7W6bDfdmjpeMVJtqA&lt;/p&gt;
&lt;p&gt;文档参考地址：《从 0 开始的微服务架构》&lt;/p&gt;
&lt;p&gt;文档下载地址：&lt;a href=&quot;https://files.cnblogs.com/files/guolianyu/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.pdf&quot; target=&quot;_blank&quot;&gt;《从 0 开始的微服务架构》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asp.net Core 交流群：&lt;span&gt;787464275 &lt;/span&gt;欢迎加群交流&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;如果您认为这篇文章还不错或者有所收获，您可以点击右下角的&lt;span&gt;【推荐】&lt;/span&gt;按钮精神支持，因为这种支持是我继续写作，分享的最大动力！&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;8.7209302325581&quot;&gt;

&lt;p&gt;&lt;strong&gt;声明：原创博客请在转载时保留原文链接或者在文章开头加上本人博客地址，如发现错误，欢迎批评指正。凡是转载于本人的文章，不能设置打赏功能，如有特殊需求请与本人联系！&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 31 Aug 2018 14:27:00 +0000</pubDate>
<dc:creator>LouieGuo</dc:creator>
<og:description>0、目录 整体架构目录：ASP.NET Core分布式项目实战-目录 一、微服务选型 在做微服务架构的技术选型的时候，以“无侵入”和“社区活跃”为主要的考量点，将来升级为原子服务架构、量子服务架构的时</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guolianyu/p/9568400.html</dc:identifier>
</item>
<item>
<title>Windows上虚拟环境的安装及使用 - 暮良文王</title>
<link>http://www.cnblogs.com/liangmingshen/p/9568540.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liangmingshen/p/9568540.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　  &lt;/span&gt;&lt;span&gt;为每个程序单独创建虚拟环境，可以保证程序只能访问虚拟环境中的包，保持全局解释器的干净简洁。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;CAST：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1337485/201808/1337485-20180831220624199-2000074510.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;首先创建了项目文件夹new_porject，打开文件，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装虚拟环境env，执行：virtualenv env&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1337485/201808/1337485-20180831221522443-1940072853.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;3.1 启动虚拟环境&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;启动虚拟环境，使用命令：your_env_dir\Scripts\&lt;span&gt;activate&lt;/span&gt;，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;激活虚拟环境后，在cmd窗口的命令前面将出现&amp;lt;env&amp;gt;，表示目前处于虚拟环境中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1337485/201808/1337485-20180831222522368-872982001.png&quot; alt=&quot;&quot; width=&quot;676&quot; height=&quot;119&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.2 在虚拟环境安装类库&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;默认情况下，virtualenv已经安装好了pip。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在启动虚拟环境后直接使用pip install 命令就可以为该虚拟环境安装类库：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1337485/201808/1337485-20180831222258565-520889436.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p id=&quot;打开setting添加本地python环境&quot;&gt;&lt;span&gt;打开setting添加本地python环境:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1337485/201808/1337485-20180831222920648-1013590161.png&quot; alt=&quot;&quot; width=&quot;671&quot; height=&quot;232&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;选择刚刚创建的虚拟环境&quot;&gt;&lt;span&gt;选择刚刚创建的虚拟环境:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1337485/201808/1337485-20180831223325244-373603708.png&quot; alt=&quot;&quot; width=&quot;671&quot; height=&quot;342&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;离开后，命令行前面已经没有了&amp;lt;env&amp;gt;&lt;/span&gt;&lt;/p&gt;



</description>
<pubDate>Fri, 31 Aug 2018 14:24:00 +0000</pubDate>
<dc:creator>暮良文王</dc:creator>
<og:description>Why Install VirtualEnv？ 可以方便的解决不同项目对类库的依赖问题。 可以在系统中Python解释器中避免包的混乱和版本的冲突。 可以方便的解决不同项目对类库的依赖问题。 可以在系</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liangmingshen/p/9568540.html</dc:identifier>
</item>
<item>
<title>AspNetCore 中使用 InentityServer4（2） - 乐途</title>
<link>http://www.cnblogs.com/szlblog/p/9568472.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/szlblog/p/9568472.html</guid>
<description>&lt;p&gt;&lt;strong&gt;基于上一篇文章 实现对IdnetityServer4 服务的使用&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;1：添加接口解决方案，并且使接口受认证服务的保护：&lt;/h2&gt;
&lt;p&gt;首先在解决方案中添加Api项目如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831214345149-526323629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在API项目中添加Nuget 引用 如下图所示：&lt;/p&gt;
&lt;p&gt;Install-Package IdentityServer4.AccessTokenValidation -Version 2.6.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831214442433-665937910.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加此包的作用是，在API中添加验证服务，使Api 受验证服务的保护，如果消费者在调用此受保护的接口的时候，传入的令牌没有通过验证将不允许进行访问&lt;/p&gt;
&lt;p&gt;在Startup 中添加身份认证服务如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831214520618-1667905710.png&quot; alt=&quot;&quot; width=&quot;687&quot; height=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上有关验证服务我们就配置好了，但是如果我们现在进行项目启动并且调用其中的方法时会发现和平常并没有什么区别：如图演示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831214637227-743001384.png&quot; alt=&quot;&quot; width=&quot;678&quot; height=&quot;294&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是因为我们只是进行了配置并没有进行使用：使用如下：&lt;/p&gt;
&lt;p&gt;引用：using Microsoft.AspNetCore.Authorization 这是AspNetCore的认证命命空间&lt;/p&gt;
&lt;p&gt;我们在Api 方法Get()上进行使用如下 注意在Get(int Id)方法上我们并没有进行使用项目启动后我们尝试调用结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831214942040-399368362.png&quot; alt=&quot;&quot; width=&quot;625&quot; height=&quot;218&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这是未使用验证的方法Get(int Id)：调用成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831214826747-1116458254.png&quot; alt=&quot;&quot; width=&quot;671&quot; height=&quot;241&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是使用验证的方法：调用失败未授权&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831215030852-1836086758.png&quot; alt=&quot;&quot; width=&quot;665&quot; height=&quot;202&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果说我们想让整个控制器中的所有方法都使用，在控制器上方进行使用就行：如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831214732329-2074278378.png&quot; alt=&quot;&quot; width=&quot;921&quot; height=&quot;254&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 上面的演示结果都是失败的，下面我们加上密钥去访问一下：结果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831215151724-102336540.png&quot; alt=&quot;&quot; width=&quot;683&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;
&lt;p&gt;密钥是用客户端代码请求来的，上面的演示结果都是使用Postman 进行调用演示：演示一下客户端使用&lt;/p&gt;
&lt;h2&gt;2：添加客户端解决方案，并请求密钥完成调用：&lt;/h2&gt;
&lt;p&gt;以控制台进行演示一下：&lt;/p&gt;
&lt;p&gt;新建控制台：并且引用&lt;em&gt;IdentityModel&lt;/em&gt;包 如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831215242848-1312365754.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为IdentityModel客户端只提供了异步等待请求的方式去请求认证服务器，所以 我们首先更改一下控制台的属性步骤如下&lt;/p&gt;
&lt;p&gt;点击打开控制台属性 —》点开 高级 如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831215359721-95146250.png&quot; alt=&quot;&quot; width=&quot;625&quot; height=&quot;231&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改高级语言版本为&lt;strong&gt;7.1&lt;/strong&gt;以上, 如图：注意： 7.1以上才支持 控制台入口方法 Main 支持异步等待操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831215527212-1234735274.png&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;314&quot;/&gt;&lt;/p&gt;
&lt;p&gt;环境好了之后下面我们请求一下，认证服务，并且演示模拟调用接口操作，代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831215552406-1424765175.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 结果如图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1027558/201808/1027558-20180831215602233-2059286923.png&quot; alt=&quot;&quot; width=&quot;572&quot; height=&quot;178&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;有不足之处&lt;/strong&gt; &lt;span&gt;&lt;strong&gt;希望大家指出相互学习，&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;                                  本文&lt;span&gt;&lt;strong&gt;原创：&lt;/strong&gt;转载请注明出处 谢谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 31 Aug 2018 14:06:00 +0000</pubDate>
<dc:creator>乐途</dc:creator>
<og:description>基于上一篇文章 实现对IdnetityServer4 服务的使用 1：添加接口解决方案，并且使接口受认证服务的保护： 首先在解决方案中添加Api项目如下图所示： 在API项目中添加Nuget 引用 如</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/szlblog/p/9568472.html</dc:identifier>
</item>
<item>
<title>突破三千万，我有什么感想？ - wc的一些事一些情</title>
<link>http://www.cnblogs.com/wcd144140/p/9568000.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wcd144140/p/9568000.html</guid>
<description>&lt;p&gt;&lt;span&gt;看着一个个“庆祝3000万”的运营推广活动，心里却没有一丁点儿的兴奋，反而成为了失落感的起始点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201808/758472-20180831200134489-2008233284.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个&lt;strong&gt;“3000万”&lt;/strong&gt;的背后隐藏着一大堆冰冷的数字：100+台（平均84GB内存+16C）服务器（物理机+虚拟机）、50+个应用服务、300+个Redis实例、500+个应用进程、10W+高峰并发、8亿+日API访问量、每天1TB+系统日志......，看起来我是在装逼的节奏。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;看得见的是数字，看不见的是真相&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;如果系统是一个偏查询类的应用，我想几个号称10W并发的Redis实例足以支撑千万级用户+10W并发规模的系统，你还会觉得NB吗？如果1TB的系统日志有50%是非主动业务触发，并且可能只有0.1%的日志才具有分析价值的系统，你还会觉得NB吗？如果3000万用户里面有99.99%的用户是“被迫”使用的，你还会觉得NB吗......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201808/758472-20180831200232102-1870672744.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;纵观数年，最兴奋的莫过于当年几个同事守在服务器前7*7*24小时不间断地寻找问题和重启服务服务器，往往最花费时间的事情就是大海捞针，而这一根“针”也往往就是一行代码或一个配置的事情，也是对这跟“针”的发现让我的程序员生涯兴奋指数登上了高峰。这种程序员的“单纯”，我想只有程序员才能懂。作为程序员，“高性能、高可用、高灵活”是我的目标，作为管理者，“政治性、社会性、经济性”是我考虑的重中之重（考虑因素权重排名分先后顺序）。我喜欢并擅长把一件复杂的事情简单化，但有时候不得不面对必须把一件简单的事情复杂化的现实存在。程序员时期面向的都是正向挑战，而当下面对的更多是一堆不情愿的负向情绪。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;今天的数字，其实只是延期了四年的结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 按目前的资源规模，别说3000W，再多的用户量都能支撑，这份自信心源于4年前对架构整改方案的决策。不知当年哪来的勇气，拍着自己脑袋喊着“自主研发”。可能是那一周连续的故障排查把脑袋短路的原因，埋下了“控制”的欲望。近千行核心代码的自主框架实现了高约束和规范的IOC和AOP，抛弃对各种外部中间件的高度依赖（如会话管理、数据分布式方案等），让系统建设的主动性和可控性完全掌握在自己手里。无论从8台服务器扩展到目前的100台服务器，还是从5个服务扩展至50个服务，亦或从单一局域网到混合私有云的迁移，这一切的顺利归功于当年对系统可控性改造和持续性建设的执着，回想起这些“前瞻性”的决定，确实有时会感到那丁点儿的自豪。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201808/758472-20180831200313634-2119133232.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;我不能保证99.99%的稳定性，但......&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 系统有Bug很正常，运维操作失误也是常有的事，系统上线出错回滚更不在话下，所以我不敢保证系统100%的正常运转。通过对故障的“大数据”分析，我们系统的故障率（所有大小故障）大概30%，也就是三天一“日经”，所以我无法保证4个9的稳定性。但通过数据显示，故障的99.99%都不是我们系统的内部故障，而是对接外部系统的故障。无论我们系统容灾能力多么强大，“系统繁忙，请稍后再试”成了我们唯一最有价值的降级方案。有些许朋友经常向我反馈，为什么你们应用经常“系统繁忙”，我会很自豪地跟他们说：“幸好是我们做的，换作别人，给你个白屏，连‘系统繁忙’都不跟你说一声”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201808/758472-20180831200347089-281632336.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;有时候一个“满意”的回馈比这些数字暖和得多&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 目前同时掌管着大数十号人以及多个项目，无论如何，整个组织的顺利运转还是归功于以上多年方法的思考以及工具的积累，但最让我舒心的不是以上系统用户量的突破，而是其它小规模“自主应用”给用户体验所带来满意的回馈。一串串大数据的背后可能是一个个冰冷的KPI指标，但一个个用户的认可却是真金白银的服务回馈。或许，以上的这些感想只是因为人生阶段的不同对满足的追求有了不一样的想法而已。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201808/758472-20180831200416906-935439724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 31 Aug 2018 12:09:00 +0000</pubDate>
<dc:creator>wc的一些事一些情</dc:creator>
<og:description>看着一个个“庆祝3000万”的运营推广活动，心里却没有一丁点儿的兴奋，反而成为了失落感的起始点。 一个“3000万”的背后隐藏着一大堆冰冷的数字：100+台（平均84GB内存+16C）服务器（物理机+</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wcd144140/p/9568000.html</dc:identifier>
</item>
</channel>
</rss>