<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>JavaScript中的类继承 - Jaxu</title>
<link>http://www.cnblogs.com/jaxu/p/8424720.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jaxu/p/8424720.html</guid>
<description>&lt;p&gt;　　&lt;a href=&quot;http://www.crockford.com/javascript/&quot; target=&quot;_blank&quot;&gt;JavaScript&lt;/a&gt;是一个&lt;em&gt;无class&lt;/em&gt;的面向对象语言，它使用原型继承而非类继承。这会让那些使用传统面向对象语言如C++和Java的程序员们感到困惑。正如我们所看到的，JavaScript的原型继承比类继承具有更强的表现力。&lt;/p&gt;
&lt;p&gt;　　但首先，要搞清楚我们为什么如此关注继承？主要有两个原因。首先是方便类型的转换。我们希望语言系统能够对那些相似类的引用进行自动转换。而对于一个要求对引用对象进行显示转换的类型系统来说只能获得很少的类型安全性。这对于强类型语言来说很重要，但是在像JavaScript这样的松散型语言中，永远不需要对对象引用进行强制转换。&lt;/p&gt;
&lt;p&gt;　　第二个原因是代码的复用。代码中存在大量拥有相同方法的对象是十分常见的。类可以通过一组定义来创建它们。另外存在很多相似的对象也很普遍，这些对象中只有少数有关添加和修改的方法存在区别。类的继承可以很有效地解决这些问题，但原型继承更有效。&lt;/p&gt;
&lt;p&gt;　　为了说明这一点，我们将介绍一点语法糖，它允许我们以类似于传统的class的语言来编写代码。然后我们将介绍一些有用的模式，这些模式不适用于传统的class语言。最后，我们将对语法糖进行解释。&lt;/p&gt;

&lt;p&gt;　　首先，我们添加了一个&lt;strong&gt;Parenizor&lt;/strong&gt;类，包含set和get两个方法，分别用来设置和获取&lt;strong&gt;value&lt;/strong&gt;，以及一个&lt;strong&gt;toString&lt;/strong&gt;方法，用来对parens中的&lt;strong&gt;value&lt;/strong&gt;进行包装。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Parenizor(value) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setValue(value);
}

Parenizor.method(&lt;/span&gt;'setValue', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
});

Parenizor.method(&lt;/span&gt;'getValue', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
});

Parenizor.method(&lt;/span&gt;'toString', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; '(' + &lt;span&gt;this&lt;/span&gt;.getValue() + ')'&lt;span&gt;;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　语法看起来有点不太一样，但是应该很好懂。方法&lt;strong&gt;method&lt;/strong&gt;接受方法的名称和一个function，并将这个function作为公共方法添加到类中。&lt;/p&gt;
&lt;p&gt;　　然后我们可以这样写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
myParenizor = &lt;span&gt;new&lt;/span&gt; Parenizor(0&lt;span&gt;);
myString &lt;/span&gt;= myParenizor.toString();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　正如你所期望的，&lt;strong&gt;myString&lt;/strong&gt;的值为&quot;(0)&quot;.&lt;/p&gt;
&lt;p&gt;　　现在我们创建另一个类继承&lt;strong&gt;Parenizor&lt;/strong&gt;，除了&lt;strong&gt;toString&lt;/strong&gt;方法中对于&lt;strong&gt;value&lt;/strong&gt;为空或0的情况会输出&quot;&lt;strong&gt;-0-&lt;/strong&gt;&quot;外其余都和&lt;strong&gt;Parenizor&lt;/strong&gt;相同。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; ZParenizor(value) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setValue(value);
}

ZParenizor.inherits(Parenizor);

ZParenizor.method(&lt;/span&gt;'toString', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getValue()) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.uber('toString'&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;-0-&quot;&lt;span&gt;;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里的&lt;strong&gt;inherits&lt;/strong&gt;方法与Java中的&lt;strong&gt;extends&lt;/strong&gt;方法类似，&lt;strong&gt;uber&lt;/strong&gt;方法也与Java中的&lt;strong&gt;super&lt;/strong&gt;方法类似。它允许一个方法调用父类中的方法（只是改了名称以避开保留字的限制）。&lt;/p&gt;
&lt;p&gt;　　然后我们可以这样写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
myZParenizor = &lt;span&gt;new&lt;/span&gt; ZParenizor(0&lt;span&gt;);
myString &lt;/span&gt;= myZParenizor.toString();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这一次，&lt;strong&gt;myString&lt;/strong&gt;的值为&quot;-0-&quot;.&lt;/p&gt;
&lt;p&gt;　　JavaScript没有类，但是我们可以通过编程来实现它。&lt;/p&gt;

&lt;p&gt;　　通过操作一个函数的&lt;strong&gt;原型&lt;/strong&gt;对象，我们可以实现多重继承，从而使我们可以用多个类的方法来构建一个类。混合多重继承可能难以实现，并可能存在方法名称的冲突。我们可以在JavaScript中实现混合多重继承，但是在本例中我们将使用一个更严格的被称之为&lt;a href=&quot;https://www.cosmik.com/aa-october99/stan_freberg.html&quot; target=&quot;_blank&quot;&gt;Swiss继承&lt;/a&gt;的形式。&lt;/p&gt;
&lt;p&gt;　　假设有一个&lt;strong&gt;NumberValue&lt;/strong&gt;类，包含一个方法&lt;strong&gt;setValue&lt;/strong&gt;，该方法检查&lt;strong&gt;value&lt;/strong&gt;是否为某个特定范围内的数字，必要的时候会抛出异常。我们只需要&lt;strong&gt;ZParenizor&lt;/strong&gt;的&lt;strong&gt;setValue&lt;/strong&gt;和&lt;strong&gt;setRange&lt;/strong&gt;方法，而不需要&lt;strong&gt;toString&lt;/strong&gt;方法。那么我们可以这样写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ZParenizor.swiss(NumberValue, 'setValue', 'setRange');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样只会将我们需要的方法添加到类中。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;ZParenizor&lt;/strong&gt;还有另外一种写法。除了从&lt;strong&gt;Parenizor&lt;/strong&gt;类继承，我们还可以在构造函数中调用&lt;strong&gt;Parenizor&lt;/strong&gt;的构造函数，并传递返回的结果。通过这种方式，我们给构造函数添加&lt;a href=&quot;http://www.crockford.com/javascript/private.html&quot; target=&quot;_blank&quot;&gt;特权方法&lt;/a&gt;，而不用再去为其添加公共方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; ZParenizor2(value) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; that = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Parenizor(value);
    that.toString &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getValue()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.uber('toString'&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;-0-&quot;&lt;span&gt;
    };
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; that;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　类的继承是&lt;strong&gt;is-a&lt;/strong&gt;关系（公有继承），而寄生继承是&lt;strong&gt;was-a-but-now's-a&lt;/strong&gt;关系（私有继承与公有继承）。构造函数在对象的构造中发挥了很大的作用。注意&lt;strong&gt;uber&lt;/strong&gt;和&lt;strong&gt;super&lt;/strong&gt;方法仍然可用于特权方法。&lt;/p&gt;

&lt;p&gt;　　JavaScript的动态性允许我们添加或替换现有类的方法，&lt;strong&gt;method&lt;/strong&gt;方法可以随时被调用，这样类的所有实例在现在和将来都会有这个方法。我们可以在任何时候对一个类进行扩展。继承具有追溯性，我们把这个叫做&lt;em&gt;类的扩充&lt;/em&gt;（Class Augmentation），以避免与Java的&lt;strong&gt;extends&lt;/strong&gt;产生混淆。&lt;/p&gt;

&lt;p&gt;　　在静态面向对象语言中，如果你想要一个对象与另一个对象略微不同，就需要定义一个新的类。在JavaScript中，你可以将方法添加到单个的对象中，而不需要在定义额外的类。这个非常强大，因为你只需要写很少的类，并且类都可以很简单。回想一下，JavaScript对象就像哈希表，你可以随时添加新的值，如果值是function，那么它就成了一个方法。&lt;/p&gt;
&lt;p&gt;　　因此在上面的示例中，我根本不需要&lt;strong&gt;ZParenizor&lt;/strong&gt;类。我可以简单地修改我的实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
myParenizor = &lt;span&gt;new&lt;/span&gt; Parenizor(0&lt;span&gt;);
myParenizor.toString &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getValue()) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.uber('toString'&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;-0-&quot;&lt;span&gt;;
};
myString &lt;/span&gt;= myParenizor.toString();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我将&lt;strong&gt;toString&lt;/strong&gt;方法添加到我的&lt;strong&gt;myParenizor&lt;/strong&gt;实例中，而没有使用任何形式的继承。我们可以修改单个的实例，因为语言是无class的。&lt;/p&gt;

&lt;p&gt;　　为了使上面的示例能正常工作，我写了四个&lt;a href=&quot;http://en.wikipedia.org/wiki/Syntactic_sugar&quot; target=&quot;_blank&quot;&gt;sugar&lt;/a&gt;方法。首先是&lt;strong&gt;method&lt;/strong&gt;方法，它将一个实例方法添加到类中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Function.prototype.method = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (name, func) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.prototype[name] =&lt;span&gt; func;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　它在&lt;strong&gt;Function.prototype&lt;/strong&gt;上添加了一个公共方法，因此所有的函数都通过Class Augmentation（类的扩充）获得了该方法。它接受一个名称和一个函数，并将它们添加到函数的&lt;strong&gt;原型&lt;/strong&gt;对象中。&lt;/p&gt;
&lt;p&gt;　　它返回&lt;strong&gt;this&lt;/strong&gt;. 当我编写一个不需要返回值的方法时，我通常都会返回&lt;strong&gt;this&lt;/strong&gt;，这样就具有了一个级联式的编程风格。&lt;/p&gt;
&lt;p&gt;　　接下来是&lt;strong&gt;inherits&lt;/strong&gt;方法，它用来表示一个类从另一个类继承。应该在两个类都被定义之后再调用这个方法，并且在继承类的方法之前添加该方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
Function.method('inherits', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (parent) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.prototype = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; parent();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; d =&lt;span&gt; {}, 
        p &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.prototype;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.prototype.constructor =&lt;span&gt; parent; 
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.method('uber', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; uber(name) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; d)) {
            d[name] &lt;/span&gt;= 0&lt;span&gt;;
        }        
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; f, r, t = d[name], v =&lt;span&gt; parent.prototype;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (t) {
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (t) {
                v &lt;/span&gt;=&lt;span&gt; v.constructor.prototype;
                t &lt;/span&gt;-= 1&lt;span&gt;;
            }
            f &lt;/span&gt;=&lt;span&gt; v[name];
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            f &lt;/span&gt;=&lt;span&gt; p[name];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (f == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;[name]) {
                f &lt;/span&gt;=&lt;span&gt; v[name];
            }
        }
        d[name] &lt;/span&gt;+= 1&lt;span&gt;;
        r &lt;/span&gt;= f.apply(&lt;span&gt;this&lt;/span&gt;, Array.prototype.slice.apply(arguments, [1&lt;span&gt;]));
        d[name] &lt;/span&gt;-= 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; r;
    });
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们继续对&lt;strong&gt;Function&lt;/strong&gt;进行扩充。我们创建了一个&lt;strong&gt;父类&lt;/strong&gt;的实例，并将其作为新的&lt;strong&gt;原型&lt;/strong&gt;。我们还修改了&lt;strong&gt;构造函数&lt;/strong&gt;的字段，并将&lt;strong&gt;uber&lt;/strong&gt;方法添加到&lt;strong&gt;原型&lt;/strong&gt;中。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Uber&lt;/strong&gt;方法在自己的&lt;strong&gt;原型&lt;/strong&gt;中查找指定的方法。这是在寄生继承或对象扩充的情况下调用的函数。如果我们进行类的继承，那么我们就需要在&lt;strong&gt;父类的原型&lt;/strong&gt;中找到这个函数。&lt;strong&gt;Return&lt;/strong&gt;语句使用函数的&lt;strong&gt;apply&lt;/strong&gt;方法来调用function，显示地设置&lt;strong&gt;this&lt;/strong&gt;并传递一个数组参数。参数（如果有的话）从&lt;strong&gt;arguments&lt;/strong&gt;数组中获取。可惜&lt;strong&gt;arguments&lt;/strong&gt;数组不是一个真正的数组，所以我们不得不再次使用&lt;strong&gt;apply&lt;/strong&gt;来调用的&lt;strong&gt;slice&lt;/strong&gt;方法。&lt;/p&gt;
&lt;p&gt;　　最后，是swiss方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Function.method('swiss', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (parent) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 1; i &amp;lt; arguments.length; i += 1&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; name =&lt;span&gt; arguments[i];
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.prototype[name] =&lt;span&gt; parent.prototype[name];
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;Swiss&lt;/strong&gt;方法对&lt;strong&gt;arguments&lt;/strong&gt;进行遍历。对每一个&lt;strong&gt;name&lt;/strong&gt;，它都从&lt;strong&gt;父类的原型&lt;/strong&gt;中复制一个成员到新类的&lt;strong&gt;原型&lt;/strong&gt;中。&lt;/p&gt;

&lt;p&gt;　　JavaScript可以像class语言一样来使用，但它也具有相当独特的表现力。我们研究了类的继承，Swiss继承，寄生继承，类的扩充以及对象的扩充。这种大量代码的复用模式来自于一种被认为比Java更小，更简单的语言。&lt;/p&gt;
&lt;p&gt;　　类的对象非常严格，要将一个新成员添加到对象中，唯一的方法就是创建一个新类。而在JavaScript中，对象是松散的，可以通过简单的赋值操作将一个新成员添加到对象中。&lt;/p&gt;
&lt;p&gt;　　由于JavaScript中的对象非常灵活，所以你需要对类的层次结构进行不同的考虑。深层次的结构并不太适用，相反，浅层次的结构更高效，更具有表现力。&lt;/p&gt;

&lt;table&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;我从事编写JavaScript代码已经有14年了，而且我从来没有发现需要使用uber函数。Super在class模式中十分重要，但是在原型和函数式模式中不是必须的。现在看来我早期尝试在JavaScript中支持class模式是一个错误。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://crockford.com/javascript/inheritance.html&quot; target=&quot;_blank&quot;&gt;Classical Inheritance in JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关链接：&lt;a href=&quot;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 06 Feb 2018 15:26:00 +0000</pubDate>
<dc:creator>Jaxu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jaxu/p/8424720.html</dc:identifier>
</item>
<item>
<title>WTF小程序之wxs - nobody-junior</title>
<link>http://www.cnblogs.com/imgss/p/8424656.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imgss/p/8424656.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;对于从VUE过来的前端同学来说，见到小程序的第一眼一定是熟悉—感觉就像是把vue的单文件拆成了3个文件。但是，随着慢慢入坑。马上会发现，这样怎么不行？wxs文件又是什么鬼？template和vue的template一样吗？下面我们来一起探索一下。&lt;/p&gt;
&lt;h2 id=&quot;wxs文件的写法&quot;&gt;wxs文件的写法&lt;/h2&gt;
&lt;p&gt;根据&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxs/&quot;&gt;官方文档&lt;/a&gt;的说法，wxs是小程序的一套脚本语言，用于和wxml一起构成页面结构。就像js一样，你可以在wxml中借助&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;在 HTML中的内联js
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'hello world'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;在WXML中的内联wxs&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;wxs module=&quot;m1&quot;&amp;gt;console.log&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'hello world'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;/wxs&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单独在文件中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//hello.js&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hello world&quot;&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;//引入js&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;./hello.js&quot;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;//hello.wxs&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;console.log&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;function foo&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;module.exports = {foo:foo}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;//引入wxs&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;wxs src=&quot;./hello&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;wxs&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot; module=&quot;&lt;/span&gt;m1&lt;span class=&quot;st&quot;&gt;&quot;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是别觉得wxs跟js就是一样的了。wxs实现了CommonJS规范，也就是说，你写在wxs文件或者标签中的函数需要导出后才能使用，而不是像js那样一个全局作用域。注意wxs标签多出的module属性，相当于 &lt;code&gt;const m1 = require('./hello.wxs')&lt;/code&gt;；然后你就可以在WXML中通过&lt;code&gt;m1.foo&lt;/code&gt;来调用函数。另外，你可以在wxs中通过require引用别的wxs代码。&lt;/p&gt;
&lt;h2 id=&quot;wxs的作用&quot;&gt;wxs的作用&lt;/h2&gt;
&lt;p&gt;如果不是因为&lt;code&gt;{{}}&lt;/code&gt;中不能执行我写在&lt;code&gt;Page({})&lt;/code&gt;参数对象中的函数，我可能都懒得去看wxs究竟是干什么用的😰。好在wxs解决了这个问题，wxs中的函数可以导出然后在WXML的{{}}中进行调用。这对于从vue或者react中过来又刚接触小程序的同学一定是 ？？？。&lt;/p&gt;
&lt;p&gt;我们来分别看看它们各自的文档是怎么说的：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;vue: 对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。{{ message.split('').reverse().join('') }}是支持的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;react: You can embed any JavaScript expression in JSX by wrapping it in curly braces.For example, 2 + 2, user.firstName, and formatName(user) are all valid expressions:(一句话，JSX的{}中支持函数调用)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;小程序: 简单绑定可作用于 字面量/数字运算/字符运算/.[]的索引运算/条件运算/逻辑运算，&lt;strong&gt;不支持js文件中的函数调用以及方法调用&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，我们需要把逻辑写到wxs中，从而实现在WXML中借助函数处理复杂的逻辑。以实现&lt;code&gt;message.split('').reverse().join('')&lt;/code&gt;这个逻辑为例，你可以这么写:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;wxs&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; module=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;mdl&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
function convert(str){return str.split('').reverse().join('')}
module.exports = {convert}
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/wxs&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;view&amp;gt;&lt;/span&gt;{{mdl.convert(message)}}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/view&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时如果js中的data的message =&quot;123&quot;,显示出来的就是“321”了。本文完&lt;/p&gt;
</description>
<pubDate>Tue, 06 Feb 2018 15:13:00 +0000</pubDate>
<dc:creator>nobody-junior</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imgss/p/8424656.html</dc:identifier>
</item>
<item>
<title>查询集API  -- Django从入门到精通系列教程 - 刘江liujiangblog.com</title>
<link>http://www.cnblogs.com/feixuelove1009/p/8424607.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feixuelove1009/p/8424607.html</guid>
<description>&lt;h3 id=&quot;该系列教程系个人原创并完整发布在个人官网刘江的博客和教程&quot;&gt;该系列教程系个人原创，并完整发布在个人官网&lt;a href=&quot;http://www.liujiangblog.com&quot;&gt;刘江的博客和教程&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;所有转载本文者需在顶部显著位置注明原作者及www.liujiangblog.com官网地址&quot;&gt;所有转载本文者，需在顶部显著位置注明原作者及www.liujiangblog.com官网地址。&lt;/h3&gt;
&lt;h3 id=&quot;python及django学习qq群453131687&quot;&gt;Python及Django学习QQ群：453131687&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;本节将详细介绍查询集的API，它建立在下面的模型基础上，与上一节的模型相同：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; models

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Blog(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)
    tagline &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.TextField()

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):              &lt;span class=&quot;co&quot;&gt;# __unicode__ on Python 2&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.name

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Author(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;)
    email &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.EmailField()

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):              &lt;span class=&quot;co&quot;&gt;# __unicode__ on Python 2&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.name

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Entry(models.Model):
    blog &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(Blog, on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE)
    headline &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;255&lt;/span&gt;)
    body_text &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.TextField()
    pub_date &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.DateField()
    mod_date &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.DateField()
    authors &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ManyToManyField(Author)
    n_comments &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.IntegerField()
    n_pingbacks &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.IntegerField()
    rating &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.IntegerField()

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):              &lt;span class=&quot;co&quot;&gt;# __unicode__ on Python 2&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.headline&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在内部，创建、过滤、切片和传递一个QuerySet不会真实操作数据库，在你对查询集提交之前，不会发生任何实际的数据库操作。&lt;/p&gt;
&lt;p&gt;可以使用下列方法对QuerySet提交查询操作：&lt;/p&gt;
&lt;p&gt;QuerySet是可迭代的，在首次迭代查询集时执行实际的数据库查询。 例如， 下面的语句会将数据库中所有Entry的headline打印出来：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;for e in Entry.objects.all():
    print(e.headline)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;切片&lt;/strong&gt;：如果使用切片的”step“参数，Django 将执行数据库查询并返回一个列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pickling/缓存&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;repr()&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;len()&lt;/strong&gt;：当你对QuerySet调用len()时， 将提交数据库操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;list()&lt;/strong&gt;：对QuerySet调用list()将强制提交操作&lt;code&gt;entry_list = list(Entry.objects.all())&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;bool()&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;测试布尔值，像这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if Entry.objects.filter(headline=&quot;Test&quot;):
   print(&quot;There is at least one Entry with the headline Test&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注：如果你需要知道是否存在至少一条记录（而不需要真实的对象），使用exists() 将更加高效。&lt;/p&gt;

&lt;p&gt;下面是对于QuerySet的正式定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class QuerySet(model=None, query=None, using=None)[source]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;QuerySet类具有两个公有属性用于内省：&lt;/p&gt;
&lt;p&gt;ordered：如果QuerySet是排好序的则为True，否则为False。&lt;/p&gt;
&lt;p&gt;db：如果现在执行，则返回使用的数据库。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以下的方法都将返回一个新的QuerySets。&lt;/strong&gt;重点是加粗的几个API，其它的使用场景很少。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;strong&gt;filter()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;过滤查询对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;exclude()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;排除满足条件的对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;strong&gt;annotate()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;使用聚合函数&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;strong&gt;order_by()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对查询集进行排序&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;反向排序&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;strong&gt;distinct()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对查询集去重&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;返回包含对象具体值的字典的QuerySet&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;values_list()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;与values()类似，只是返回的是元组而不是字典。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;dates()&lt;/td&gt;
&lt;td&gt;根据日期获取查询集&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;datetimes()&lt;/td&gt;
&lt;td&gt;根据时间获取查询集&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;strong&gt;none()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;创建空的查询集&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;strong&gt;all()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;获取所有的对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;union()&lt;/td&gt;
&lt;td&gt;并集&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;intersection()&lt;/td&gt;
&lt;td&gt;交集&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;difference()&lt;/td&gt;
&lt;td&gt;差集&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;strong&gt;select_related()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;附带查询关联对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;预先查询&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;extra()&lt;/td&gt;
&lt;td&gt;附加SQL查询&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;defer()&lt;/td&gt;
&lt;td&gt;不加载指定字段&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;only()&lt;/td&gt;
&lt;td&gt;只加载指定的字段&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;using()&lt;/td&gt;
&lt;td&gt;选择数据库&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;select_for_update()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;锁住选择的对象，直到事务结束。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;raw()&lt;/td&gt;
&lt;td&gt;接收一个原始的SQL查询&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;filter&quot;&gt;1. filter()&lt;/h2&gt;
&lt;p&gt;filter(**kwargs)&lt;/p&gt;
&lt;p&gt;返回满足查询参数的对象集合。&lt;/p&gt;
&lt;p&gt;查找的参数（**kwargs）应该满足下文字段查找中的格式。多个参数之间是和AND的关系。&lt;/p&gt;
&lt;h2 id=&quot;exclude&quot;&gt;2. exclude()&lt;/h2&gt;
&lt;p&gt;exclude(**kwargs)&lt;/p&gt;
&lt;p&gt;返回一个新的QuerySet，它包含&lt;strong&gt;不&lt;/strong&gt;满足给定的查找参数的对象。&lt;/p&gt;
&lt;p&gt;查找的参数（**kwargs）应该满足下文字段查找中的格式。多个参数通过AND连接，然后所有的内容放入NOT() 中。&lt;/p&gt;
&lt;p&gt;下面的示例&lt;strong&gt;排除&lt;/strong&gt;所有&lt;code&gt;pub_date&lt;/code&gt;晚于2005-1-3&lt;strong&gt;且&lt;/strong&gt;headline为“Hello” 的记录：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.exclude(pub_date__gt=datetime.date(2005, 1, 3), headline='Hello')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面的示例&lt;strong&gt;排除&lt;/strong&gt;所有&lt;code&gt;pub_date&lt;/code&gt;晚于2005-1-3&lt;strong&gt;或者&lt;/strong&gt;headline 为“Hello” 的记录：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.exclude(pub_date__gt=datetime.date(2005, 1, 3)).exclude(headline='Hello')&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;annotate&quot;&gt;3. annotate()&lt;/h2&gt;
&lt;p&gt;annotate(*args, **kwargs)&lt;/p&gt;
&lt;p&gt;使用提供的聚合表达式查询对象。&lt;/p&gt;
&lt;p&gt;表达式可以是简单的值、对模型（或任何关联模型）上的字段的引用或者聚合表达式（平均值、总和等）。&lt;/p&gt;
&lt;p&gt;annotate()的每个参数都是一个annotation，它将添加到返回的QuerySet每个对象中。&lt;/p&gt;
&lt;p&gt;关键字参数指定的Annotation将使用关键字作为Annotation 的别名。 匿名参数的别名将基于聚合函数的名称和模型的字段生成。 只有引用单个字段的聚合表达式才可以使用匿名参数。 其它所有形式都必须用关键字参数。&lt;/p&gt;
&lt;p&gt;例如，如果正在操作一个Blog列表，你可能想知道每个Blog有多少Entry：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from django.db.models import Count
&amp;gt;&amp;gt;&amp;gt; q = Blog.objects.annotate(Count('entry'))
# The name of the first blog
&amp;gt;&amp;gt;&amp;gt; q[0].name
'Blogasaurus'
# The number of entries on the first blog
&amp;gt;&amp;gt;&amp;gt; q[0].entry__count
42&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Blog模型本身没有定义&lt;code&gt;entry__count&lt;/code&gt;属性，但是通过使用一个关键字参数来指定聚合函数，可以控制Annotation的名称：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; q = Blog.objects.annotate(number_of_entries=Count('entry'))
# The number of entries on the first blog, using the name provided
&amp;gt;&amp;gt;&amp;gt; q[0].number_of_entries
42&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;order_by&quot;&gt;4. order_by()&lt;/h2&gt;
&lt;p&gt;order_by(*fields)&lt;/p&gt;
&lt;p&gt;默认情况下，根据模型的Meta类中的ordering属性对QuerySet中的对象进行排序&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.filter(pub_date__year=2005).order_by('-pub_date', 'headline')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的结果将按照&lt;code&gt;pub_date&lt;/code&gt;降序排序，然后再按照headline升序排序。&quot;-pub_date&quot;前面的负号表示降序顺序。 升序是默认的。 要随机排序，使用&quot;?&quot;，如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.order_by('?')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注：&lt;code&gt;order_by('?')&lt;/code&gt;可能耗费资源且很慢，这取决于使用的数据库。&lt;/p&gt;
&lt;p&gt;若要按照另外一个模型中的字段排序，可以使用查询关联模型的语法。即通过字段的名称后面跟两个下划线（&lt;code&gt;__&lt;/code&gt;），再加上新模型中的字段的名称，直到希望连接的模型。 像这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.order_by('blog__name', 'headline')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果排序的字段与另外一个模型关联，Django将使用关联的模型的默认排序，或者如果没有指定Meta.ordering将通过关联的模型的主键排序。 例如，因为Blog模型没有指定默认的排序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.order_by('blog')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与以下相同：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.order_by('blog__id')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果Blog设置了&lt;code&gt;ordering = ['name']&lt;/code&gt;，那么第一个QuerySet将等同于：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.order_by('blog__name')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还可以通过调用表达式的desc()或者asc()方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.order_by(Coalesce('summary', 'headline').desc())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;考虑下面的情况，指定一个多值字段来排序（例如，一个ManyToManyField 字段或者ForeignKey 字段的反向关联）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Event(Model):
   parent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(
       &lt;span class=&quot;st&quot;&gt;'self'&lt;/span&gt;,
       on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE,
       related_name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'children'&lt;/span&gt;,
   )
   date &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.DateField()

Event.objects.order_by(&lt;span class=&quot;st&quot;&gt;'children__date'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里，每个Event可能有多个排序数据；具有多个children的每个Event将被多次返回到&lt;code&gt;order_by()&lt;/code&gt;创建的新的QuerySet中。 换句话说，用&lt;code&gt;order_by()&lt;/code&gt;方法对QuerySet对象进行操作会返回一个扩大版的新QuerySet对象。因此，使用多值字段对结果进行排序时要格外小心。&lt;/p&gt;
&lt;p&gt;没有方法指定排序是否考虑大小写。 对于大小写的敏感性，Django将根据数据库中的排序方式排序结果。&lt;/p&gt;
&lt;p&gt;可以通过Lower将一个字段转换为小写来排序，它将达到大小写一致的排序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.order_by(Lower('headline').desc())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以通过检查&lt;code&gt;QuerySet.ordered&lt;/code&gt;属性来知道查询是否是排序的。&lt;/p&gt;
&lt;p&gt;每个&lt;code&gt;order_by()&lt;/code&gt;都将清除前面的任何排序。 例如下面的查询将按照&lt;code&gt;pub_date&lt;/code&gt;排序，而不是headline：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.order_by('headline').order_by('pub_date')&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;reverse&quot;&gt;5. reverse()&lt;/h2&gt;
&lt;p&gt;reverse()&lt;/p&gt;
&lt;p&gt;反向排序QuerySet中返回的元素。 第二次调用reverse()将恢复到原有的排序。&lt;/p&gt;
&lt;p&gt;如要获取QuerySet中最后五个元素，可以这样做：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;my_queryset.reverse()[:5]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这与Python直接使用负索引有点不一样。 Django不支持负索引，只能曲线救国。&lt;/p&gt;
&lt;h2 id=&quot;distinct&quot;&gt;6. distinct()&lt;/h2&gt;
&lt;p&gt;distinct(*fields)&lt;/p&gt;
&lt;p&gt;去除查询结果中重复的行。&lt;/p&gt;
&lt;p&gt;默认情况下，QuerySet不会去除重复的行。当查询跨越多张表的数据时，QuerySet可能得到重复的结果，这时候可以使用distinct()进行去重。&lt;/p&gt;
&lt;h2 id=&quot;values&quot;&gt;7. values()&lt;/h2&gt;
&lt;p&gt;values(*fields, **expressions)&lt;/p&gt;
&lt;p&gt;返回一个包含数据的字典的queryset，而不是模型实例。&lt;/p&gt;
&lt;p&gt;每个字典表示一个对象，键对应于模型对象的属性名称。&lt;/p&gt;
&lt;p&gt;下面的例子将values() 与普通的模型对象进行比较：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 列表中包含的是Blog对象
&amp;gt;&amp;gt;&amp;gt; Blog.objects.filter(name__startswith='Beatles')
&amp;lt;QuerySet [&amp;lt;Blog: Beatles Blog&amp;gt;]&amp;gt;
# 列表中包含的是数据字典
&amp;gt;&amp;gt;&amp;gt; Blog.objects.filter(name__startswith='Beatles').values()
&amp;lt;QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该方法接收可选的位置参数&lt;code&gt;*fields&lt;/code&gt;，它指定values()应该限制哪些字段。如果指定字段，每个字典将只包含指定的字段的键/值。如果没有指定字段，每个字典将包含数据库表中所有字段的键和值。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Blog.objects.values()
&amp;lt;QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Blog.objects.values('id', 'name')
&amp;lt;QuerySet [{'id': 1, 'name': 'Beatles Blog'}]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;values()方法还有关键字参数&lt;code&gt;**expressions&lt;/code&gt;，这些参数将传递给&lt;code&gt;annotate()&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from django.db.models.functions import Lower
&amp;gt;&amp;gt;&amp;gt; Blog.objects.values(lower_name=Lower('name'))
&amp;lt;QuerySet [{'lower_name': 'beatles blog'}]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在values()子句中的聚合应用于相同values()子句中的其他参数之前。 如果需要按另一个值分组，请将其添加到较早的values()子句中。 像这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from django.db.models import Count
&amp;gt;&amp;gt;&amp;gt; Blog.objects.values('author', entries=Count('entry'))
&amp;lt;QuerySet [{'author': 1, 'entries': 20}, {'author': 1, 'entries': 13}]&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Blog.objects.values('author').annotate(entries=Count('entry'))
&amp;lt;QuerySet [{'author': 1, 'entries': 33}]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;如果你有一个字段foo是一个ForeignKey，默认的&lt;code&gt;foo_id&lt;/code&gt;参数返回的字典中将有一个叫做foo 的键，因为这是保存实际值的那个隐藏的模型属性的名称。 当调用&lt;code&gt;foo_id&lt;/code&gt;并传递字段的名称，传递foo 或values()都可以，得到的结果是相同的。像这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.values()
&amp;lt;QuerySet [{'blog_id': 1, 'headline': 'First Entry', ...}, ...]&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Entry.objects.values('blog')
&amp;lt;QuerySet [{'blog': 1}, ...]&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Entry.objects.values('blog_id')
&amp;lt;QuerySet [{'blog_id': 1}, ...]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当values()与distinct()一起使用时，注意排序可能影响最终的结果。&lt;/p&gt;
&lt;p&gt;如果values()子句位于extra()调用之后，extra()中的select参数定义的字段必须显式包含在values()调用中。 values( 调用后面的extra( 调用将忽略选择的额外的字段。&lt;/p&gt;
&lt;p&gt;在values()之后调用only()和defer()不太合理，所以将引发一个NotImplementedError。&lt;/p&gt;
&lt;p&gt;可以通过ManyToManyField、ForeignKey 和 OneToOneFiel 属性反向引用关联的模型的字段：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Blog.objects.values('name', 'entry__headline')
&amp;lt;QuerySet [{'name': 'My blog', 'entry__headline': 'An entry'},
     {'name': 'My blog', 'entry__headline': 'Another entry'}, ...]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;values_list&quot;&gt;8. values_list()&lt;/h2&gt;
&lt;p&gt;values_list(*fields, flat=False)&lt;/p&gt;
&lt;p&gt;与values()类似，只是在迭代时返回的是元组而不是字典。每个元组包含传递给&lt;code&gt;values_list()&lt;/code&gt;调用的相应字段或表达式的值，因此第一个项目是第一个字段等。 像这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.values_list('id', 'headline')
&amp;lt;QuerySet [(1, 'First entry'), ...]&amp;gt;
&amp;gt;&amp;gt;&amp;gt; from django.db.models.functions import Lower
&amp;gt;&amp;gt;&amp;gt; Entry.objects.values_list('id', Lower('headline'))
&amp;lt;QuerySet [(1, 'first entry'), ...]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果只传递一个字段，还可以传递flat参数。 如果为True，它表示返回的结果为单个值而不是元组。 如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.values_list('id').order_by('id')
&amp;lt;QuerySet[(1,), (2,), (3,), ...]&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Entry.objects.values_list('id', flat=True).order_by('id')
&amp;lt;QuerySet [1, 2, 3, ...]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果有多个字段，传递flat将发生错误。&lt;/p&gt;
&lt;p&gt;如果不传递任何值给&lt;code&gt;values_list()&lt;/code&gt;，它将返回模型中的所有字段，以在模型中定义的顺序。&lt;/p&gt;
&lt;p&gt;常见的情况是获取某个模型实例的特定字段值。可以使用&lt;code&gt;values_list()&lt;/code&gt;，然后调用get()：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.values_list('headline', flat=True).get(pk=1)
'First entry'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;values()&lt;/code&gt;和&lt;code&gt;values_list()&lt;/code&gt;都用于特定情况下的优化：检索数据子集，而无需创建模型实例。&lt;/p&gt;
&lt;p&gt;注意通过ManyToManyField进行查询时的行为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Author.objects.values_list('name', 'entry__headline')
&amp;lt;QuerySet [('Noam Chomsky', 'Impressions of Gaza'),
 ('George Orwell', 'Why Socialists Do Not Believe in Fun'),
 ('George Orwell', 'In Defence of English Cooking'),
 ('Don Quixote', None)]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;类似地，当查询反向外键时，对于没有任何作者的条目，返回None。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.values_list('authors')
&amp;lt;QuerySet [('Noam Chomsky',), ('George Orwell',), (None,)]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;dates&quot;&gt;9. dates()&lt;/h2&gt;
&lt;p&gt;dates(field, kind, order='ASC')&lt;/p&gt;
&lt;p&gt;返回一个QuerySet，表示QuerySet内容中特定类型的所有可用日期的&lt;code&gt;datetime.date&lt;/code&gt;对象列表。&lt;/p&gt;
&lt;p&gt;field参数是模型的DateField的名称。 kind参数应为&quot;year&quot;，&quot;month&quot;或&quot;day&quot;。 结果列表中的每个datetime.date对象被截取为给定的类型。&lt;/p&gt;
&lt;p&gt;&quot;year&quot; 返回对应该field的所有不同年份值的列表。&lt;/p&gt;
&lt;p&gt;&quot;month&quot;返回字段的所有不同年/月值的列表。&lt;/p&gt;
&lt;p&gt;&quot;day&quot;返回字段的所有不同年/月/日值的列表。&lt;/p&gt;
&lt;p&gt;order参数默认为'ASC'，或者'DESC'。 它指定如何排序结果。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.dates('pub_date', 'year')
[datetime.date(2005, 1, 1)]
&amp;gt;&amp;gt;&amp;gt; Entry.objects.dates('pub_date', 'month')
[datetime.date(2005, 2, 1), datetime.date(2005, 3, 1)]
&amp;gt;&amp;gt;&amp;gt; Entry.objects.dates('pub_date', 'day')
[datetime.date(2005, 2, 20), datetime.date(2005, 3, 20)]
&amp;gt;&amp;gt;&amp;gt; Entry.objects.dates('pub_date', 'day', order='DESC')
[datetime.date(2005, 3, 20), datetime.date(2005, 2, 20)]
&amp;gt;&amp;gt;&amp;gt; Entry.objects.filter(headline__contains='Lennon').dates('pub_date', 'day')
[datetime.date(2005, 3, 20)]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;datetimes&quot;&gt;10. datetimes()&lt;/h2&gt;
&lt;p&gt;datetimes(field_name, kind, order='ASC', tzinfo=None)&lt;/p&gt;
&lt;p&gt;返回QuerySet，为datetime.datetime对象的列表，表示QuerySet内容中特定种类的所有可用日期。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;field_name&lt;/code&gt;应为模型的DateTimeField的名称。&lt;/p&gt;
&lt;p&gt;kind参数应为&quot;hour&quot;，&quot;minute&quot;，&quot;month&quot;，&quot;year&quot;，&quot;second&quot;或&quot;day&quot;。&lt;/p&gt;
&lt;p&gt;结果列表中的每个datetime.datetime对象被截取到给定的类型。&lt;/p&gt;
&lt;p&gt;order参数默认为'ASC'，或者'DESC'。 它指定如何排序结果。&lt;/p&gt;
&lt;p&gt;tzinfo参数定义在截取之前将数据时间转换到的时区。&lt;/p&gt;
&lt;h2 id=&quot;none&quot;&gt;11. none()&lt;/h2&gt;
&lt;p&gt;none()&lt;/p&gt;
&lt;p&gt;调用none()将创建一个不返回任何对象的查询集，并且在访问结果时不会执行任何查询。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.none()
&amp;lt;QuerySet []&amp;gt;
&amp;gt;&amp;gt;&amp;gt; from django.db.models.query import EmptyQuerySet
&amp;gt;&amp;gt;&amp;gt; isinstance(Entry.objects.none(), EmptyQuerySet)
True&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;all&quot;&gt;12. all()&lt;/h2&gt;
&lt;p&gt;all()&lt;/p&gt;
&lt;p&gt;返回当前QuerySet（或QuerySet子类）的副本。通常用于获取全部QuerySet对象。&lt;/p&gt;
&lt;h2 id=&quot;union&quot;&gt;13. union()&lt;/h2&gt;
&lt;p&gt;union(*other_qs, all=False)&lt;/p&gt;
&lt;p&gt;Django中的新功能1.11。也就是集合中并集的概念！&lt;/p&gt;
&lt;p&gt;使用SQL的UNION运算符组合两个或更多个QuerySet的结果。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; qs1.union(qs2, qs3)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认情况下，UNION操作符仅选择不同的值。 要允许重复值，请使用all=True参数。&lt;/p&gt;
&lt;h2 id=&quot;intersection&quot;&gt;14. intersection()&lt;/h2&gt;
&lt;p&gt;intersection(*other_qs)&lt;/p&gt;
&lt;p&gt;Django中的新功能1.11。也就是集合中交集的概念！&lt;/p&gt;
&lt;p&gt;使用SQL的INTERSECT运算符返回两个或更多个QuerySet的共有元素。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; qs1.intersection(qs2, qs3)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;difference&quot;&gt;15. difference()&lt;/h2&gt;
&lt;p&gt;difference(*other_qs)&lt;/p&gt;
&lt;p&gt;Django中的新功能1.11。也就是集合中差集的概念！&lt;/p&gt;
&lt;p&gt;使用SQL的EXCEPT运算符只保留QuerySet中的元素，但不保留其他QuerySet中的元素。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; qs1.difference(qs2, qs3)&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;select_related(*fields)&lt;/p&gt;
&lt;p&gt;沿着外键关系查询关联的对象的数据。这会生成一个复杂的查询并引起性能的损耗，但是在以后使用外键关系时将不需要再次数据库查询。&lt;/p&gt;
&lt;p&gt;下面的例子解释了普通查询和&lt;code&gt;select_related()&lt;/code&gt;查询的区别。 下面是一个标准的查询：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 访问数据库。
e = Entry.objects.get(id=5)
# 再次访问数据库以得到关联的Blog对象。
b = e.blog&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是一个&lt;code&gt;select_related&lt;/code&gt;查询：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 访问数据库。
e = Entry.objects.select_related('blog').get(id=5)
# 不会访问数据库，因为e.blog已经在前面的查询中获得了。
b = e.blog&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;select_related()&lt;/code&gt;可用于objects任何的查询集：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.utils &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; timezone

&lt;span class=&quot;co&quot;&gt;# Find all the blogs with entries scheduled to be published in the future.&lt;/span&gt;
blogs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;set&lt;/span&gt;()

&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; e &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; Entry.objects.&lt;span class=&quot;bu&quot;&gt;filter&lt;/span&gt;(pub_date__gt&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;timezone.now()).select_related(&lt;span class=&quot;st&quot;&gt;'blog'&lt;/span&gt;):
    &lt;span class=&quot;co&quot;&gt;# 没有select_related()，下面的语句将为每次循环迭代生成一个数据库查询,以获得每个entry关联的blog。&lt;/span&gt;
    blogs.add(e.blog)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;和&lt;code&gt;select_related()&lt;/code&gt;的顺序不重要。 下面的查询集是等同的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.filter(pub_date__gt=timezone.now()).select_related('blog')
Entry.objects.select_related('blog').filter(pub_date__gt=timezone.now())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以沿着外键查询。 如果有以下模型：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; models

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; City(models.Model):
    &lt;span class=&quot;co&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person(models.Model):
    &lt;span class=&quot;co&quot;&gt;# ...&lt;/span&gt;
    hometown &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(
        City,
        on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.SET_NULL,
        blank&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,
        null&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,
    )

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Book(models.Model):
    &lt;span class=&quot;co&quot;&gt;# ...&lt;/span&gt;
    author &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(Person, on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用&lt;code&gt;Book.objects.select_related('author__hometown').get(id=4)&lt;/code&gt;将缓存相关的Person 和相关的City：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;b = Book.objects.select_related('author__hometown').get(id=4)
p = b.author         # Doesn't hit the database.
c = p.hometown       # Doesn't hit the database.
b = Book.objects.get(id=4) # No select_related() in this example.
p = b.author         # Hits the database.
c = p.hometown       # Hits the database.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在传递给&lt;code&gt;select_related()&lt;/code&gt;的字段中，可以使用任何ForeignKey和OneToOneField。&lt;/p&gt;
&lt;p&gt;在传递给&lt;code&gt;select_related&lt;/code&gt;的字段中，还可以反向引用OneToOneField。也就是说，可以回溯到定义OneToOneField 的字段。 此时，可以使用关联对象字段的&lt;code&gt;related_name&lt;/code&gt;，而不要指定字段的名称。&lt;/p&gt;

&lt;p&gt;prefetch_related(*lookups)&lt;/p&gt;
&lt;p&gt;在单个批处理中自动检索每个指定查找的相关对象。&lt;/p&gt;
&lt;p&gt;与&lt;code&gt;select_related&lt;/code&gt;类似，但是策略是完全不同的。&lt;/p&gt;
&lt;p&gt;假设有这些模型：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; models

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Topping(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Pizza(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;)
    toppings &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ManyToManyField(Topping)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):              &lt;span class=&quot;co&quot;&gt;# __unicode__ on Python 2&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; (
            &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.name,
            &lt;span class=&quot;st&quot;&gt;&quot;, &quot;&lt;/span&gt;.join(topping.name &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; topping &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.toppings.&lt;span class=&quot;bu&quot;&gt;all&lt;/span&gt;()),
        )&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并运行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Pizza.objects.all()
[&quot;Hawaiian (ham, pineapple)&quot;, &quot;Seafood (prawns, smoked salmon)&quot;...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;问题是每次QuerySet要求&lt;code&gt;Pizza.objects.all()&lt;/code&gt;查询数据库，因此&lt;code&gt;self.toppings.all()&lt;/code&gt;将在&lt;code&gt;Pizza Pizza.__str__()&lt;/code&gt;中的每个项目的Toppings表上运行查询。&lt;/p&gt;
&lt;p&gt;可以使用&lt;code&gt;prefetch_related&lt;/code&gt;减少为只有两个查询：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Pizza.objects.all().prefetch_related('toppings')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这意味着现在每次&lt;code&gt;self.toppings.all()&lt;/code&gt;被调用，不会再去数据库查找，而是在一个预取的QuerySet缓存中查找。&lt;/p&gt;
&lt;p&gt;还可以使用正常连接语法来执行相关字段的相关字段。 假设在上面的例子中增加一个额外的模型：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Restaurant(models.Model):
    pizzas = models.ManyToManyField(Pizza, related_name='restaurants')
    best_pizza = models.ForeignKey(Pizza, related_name='championed_by')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是合法的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Restaurant.objects.prefetch_related('pizzas__toppings')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这将预取所有属于餐厅的比萨饼，和所有属于那些比萨饼的配料。 这将导致总共3个查询 - 一个用于餐馆，一个用于比萨饼，一个用于配料。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Restaurant.objects.prefetch_related('best_pizza__toppings')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这将获取最好的比萨饼和每个餐厅最好的披萨的所有配料。 这将在3个表中查询 - 一个为餐厅，一个为“最佳比萨饼”，一个为一个为配料。&lt;/p&gt;
&lt;p&gt;当然，也可以使用&lt;code&gt;best_pizza&lt;/code&gt;来获取&lt;code&gt;select_related&lt;/code&gt;关系，以将查询数减少为2：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Restaurant.objects.select_related('best_pizza').prefetch_related('best_pizza__toppings')&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)&lt;/p&gt;
&lt;p&gt;有些情况下，Django的查询语法难以简单的表达复杂的WHERE子句，对于这种情况,可以在extra()生成的SQL从句中注入新子句。使用这种方法作为最后的手段，这是一个旧的API，在将来的某个时候可能被弃用。仅当无法使用其他查询方法表达查询时才使用它。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; qs.extra(
...     select={'val': &quot;select col from sometable where othercol = %s&quot;},
...     select_params=(someparam,),
... )&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相当于：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; qs.annotate(val=RawSQL(&quot;select col from sometable where othercol = %s&quot;, (someparam,)))&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;defer&quot;&gt;19. defer()&lt;/h2&gt;
&lt;p&gt;defer(*fields)&lt;/p&gt;
&lt;p&gt;在一些复杂的数据建模情况下，模型可能包含大量字段，其中一些可能包含大尺寸数据（例如文本字段），将它们转换为Python对象需要花费很大的代价。&lt;/p&gt;
&lt;p&gt;当最初获取数据时不知道是否需要这些特定字段的情况下，如果正在使用查询集的结果，可以告诉Django不要从数据库中检索它们。&lt;/p&gt;
&lt;p&gt;通过传递字段名称到defer()实现不加载：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Entry.objects.defer(&quot;headline&quot;, &quot;body&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具有延迟加载字段的查询集仍将返回模型实例。&lt;/p&gt;
&lt;p&gt;每个延迟字段将在你访问该字段时从数据库中检索（每次只检索一个，而不是一次检索所有的延迟字段）。&lt;/p&gt;
&lt;p&gt;可以多次调用defer()。 每个调用都向延迟集添加新字段：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 延迟body和headline两个字段。
Entry.objects.defer(&quot;body&quot;).filter(rating=5).defer(&quot;headline&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;字段添加到延迟集的顺序无关紧要。对已经延迟的字段名称再次defer()没有问题（该字段仍将被延迟）。&lt;/p&gt;
&lt;p&gt;可以使用标准的双下划线符号来分隔关联的字段，从而加载关联模型中的字段：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Blog.objects.select_related().defer(&quot;entry__headline&quot;, &quot;entry__body&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果要清除延迟字段集，将None作为参数传递到defer()：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 立即加载所有的字段。
my_queryset.defer(None)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;defer()方法（及其兄弟，only()）仅适用于高级用例，它们提供了数据加载的优化方法。&lt;/p&gt;
&lt;h2 id=&quot;only&quot;&gt;20. only()&lt;/h2&gt;
&lt;p&gt;only(*fields)&lt;/p&gt;
&lt;p&gt;only()方法与defer()相反。&lt;/p&gt;
&lt;p&gt;如果有一个模型几乎所有的字段需要延迟，使用only()指定补充的字段集可以使代码更简单。&lt;/p&gt;
&lt;p&gt;假设有一个包含字段biography、age和name的模型。 以下两个查询集是相同的，就延迟字段而言：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Person.objects.defer(&quot;age&quot;, &quot;biography&quot;)
Person.objects.only(&quot;name&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;每当你调用only()时，它将替换立即加载的字段集。因此，对only()的连续调用的结果是只有最后一次调用的字段被考虑：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# This will defer all fields except the headline.
Entry.objects.only(&quot;body&quot;, &quot;rating&quot;).only(&quot;headline&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于defer()以递增方式动作（向延迟列表中添加字段），因此你可以结合only()和defer()调用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Final result is that everything except &quot;headline&quot; is deferred.
Entry.objects.only(&quot;headline&quot;, &quot;body&quot;).defer(&quot;body&quot;)
# Final result loads headline and body immediately (only() replaces any
# existing set of fields).
Entry.objects.defer(&quot;body&quot;).only(&quot;headline&quot;, &quot;body&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当对具有延迟字段的实例调用save()时，仅保存加载的字段。&lt;/p&gt;
&lt;h2 id=&quot;using&quot;&gt;21. using()&lt;/h2&gt;
&lt;p&gt;using(alias)&lt;/p&gt;
&lt;p&gt;如果正在使用多个数据库，这个方法用于指定在哪个数据库上查询QuerySet。方法的唯一参数是数据库的别名，定义在DATABASES。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# queries the database with the 'default' alias.
&amp;gt;&amp;gt;&amp;gt; Entry.objects.all()
# queries the database with the 'backup' alias
&amp;gt;&amp;gt;&amp;gt; Entry.objects.using('backup')&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;select_for_update&quot;&gt;22. select_for_update()&lt;/h2&gt;
&lt;p&gt;select_for_update(nowait=False, skip_locked=False)&lt;/p&gt;
&lt;p&gt;返回一个锁住行直到事务结束的查询集，如果数据库支持，它将生成一个&lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt;语句。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;entries = Entry.objects.select_for_update().filter(author=request.user)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所有匹配的行将被锁定，直到事务结束。这意味着可以通过锁防止数据被其它事务修改。&lt;/p&gt;
&lt;p&gt;一般情况下如果其他事务锁定了相关行，那么本查询将被阻塞，直到锁被释放。使用&lt;code&gt;select_for_update(nowait=True)&lt;/code&gt;将使查询不阻塞。如果其它事务持有冲突的锁,那么查询将引发&lt;code&gt;DatabaseError&lt;/code&gt;异常。也可以使用&lt;code&gt;select_for_update(skip_locked=True)&lt;/code&gt;忽略锁定的行。nowait和&lt;code&gt;skip_locked&lt;/code&gt;是互斥的。&lt;/p&gt;
&lt;p&gt;目前，postgresql，oracle和mysql数据库后端支持&lt;code&gt;select_for_update()&lt;/code&gt;。但是，MySQL不支持nowait和&lt;code&gt;skip_locked&lt;/code&gt;参数。&lt;/p&gt;
&lt;h2 id=&quot;raw&quot;&gt;23. raw()&lt;/h2&gt;
&lt;p&gt;raw(raw_query, params=None, translations=None)&lt;/p&gt;
&lt;p&gt;接收一个原始的SQL查询，执行它并返回一个&lt;code&gt;django.db.models.query.RawQuerySet&lt;/code&gt;实例。&lt;/p&gt;
&lt;p&gt;这个RawQuerySet实例可以迭代，就像普通的QuerySet一样。&lt;/p&gt;
</description>
<pubDate>Tue, 06 Feb 2018 14:47:00 +0000</pubDate>
<dc:creator>刘江liujiangblog.com</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feixuelove1009/p/8424607.html</dc:identifier>
</item>
<item>
<title>hexo 博客支持PWA和压缩博文 - Ryan.Miao</title>
<link>http://www.cnblogs.com/woshimrf/p/hexp-pwa-compress.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/woshimrf/p/hexp-pwa-compress.html</guid>
<description>&lt;h2 id=&quot;目标网站&quot;&gt;目标网站&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.rmiao.top/&quot; class=&quot;uri&quot;&gt;https://blog.rmiao.top/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;pwa&quot;&gt;PWA&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;yarn add hexo&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;offline&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在root config.yml里新增&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;# offline config passed to sw&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;precache&lt;/span&gt;.
service_worker&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
  maximumFileSizeToCacheInBytes&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5242880&lt;/span&gt;
  staticFileGlobs&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;js&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;html&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;css&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;png&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;jpg&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;gif&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;svg&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;eot&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;ttf&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;woff&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;woff2&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/lib/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;/*.js&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;  - /lib/**/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;css&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/images/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/js/src&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;js&lt;/span&gt;
  stripPrefix&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt;
  verbose&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
  runtimeCaching&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; urlPattern&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;      handler: cacheFirst&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;      options:&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        origin: cdn.bootcss.com&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后添加manifest.json, 比如我使用了 &lt;code&gt;hexo-theme-next&lt;/code&gt;的主题，在&lt;code&gt;layout/_custom/header.swig&lt;/code&gt; 中引用了&lt;code&gt;manifest.json&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
&amp;lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;manifest生成地址： &lt;a href=&quot;https://app-manifest.firebaseapp.com/&quot; class=&quot;uri&quot;&gt;https://app-manifest.firebaseapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如，我的为&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;风 - Ryan Miao&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;short_name&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;风&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;theme_color&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;#2196f3&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;background_color&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;#2196f3&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;display&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;browser&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;start_url&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/&quot;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体缓存策略还是看下官方文档，这里不求甚解缓存。重启博客，打开控制台，查看网络，会发现，所有的文件都是&lt;code&gt;(from ServiceWorker)&lt;/code&gt; 或者&lt;code&gt;(from disk cache)&lt;/code&gt;或者&lt;code&gt;(from memory cache)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当hexo g之后，会多出一个&lt;code&gt;service-worker.js&lt;/code&gt;里面则是会缓存的内容。&lt;/p&gt;
&lt;h2 id=&quot;压缩&quot;&gt;压缩&lt;/h2&gt;
&lt;p&gt;看了下计算，压缩大概可以节省一半空间。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;$ npm install gulp &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;g
$ npm install gulp&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;minify&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;css gulp&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;uglify gulp&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;htmlmin gulp&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;htmlclean gulp &lt;span class=&quot;op&quot;&gt;--&lt;/span&gt;save

或者使用yarn 

yarn global add gulp
yarn add gulp&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;minify&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;css gulp&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;uglify gulp&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;htmlmin gulp&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;htmlclean gulp&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，在根目录新增 &lt;code&gt;gulpfile.js&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; gulp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'gulp'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; minifycss &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'gulp-minify-css'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; uglify &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'gulp-uglify'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; htmlmin &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'gulp-htmlmin'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; htmlclean &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'gulp-htmlclean'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 压缩 public 目录 css&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;task&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'minify-css'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;src&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./public/**/*.css'&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;minifycss&lt;/span&gt;())
        .&lt;span class=&quot;at&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dest&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./public'&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 压缩 public 目录 html&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;task&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'minify-html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;src&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./public/**/*.html'&lt;/span&gt;)
    .&lt;span class=&quot;at&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;htmlclean&lt;/span&gt;())
    .&lt;span class=&quot;at&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;htmlmin&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;dt&quot;&gt;removeComments&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dt&quot;&gt;minifyJS&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dt&quot;&gt;minifyCSS&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dt&quot;&gt;minifyURLs&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))
    .&lt;span class=&quot;at&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dest&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./public'&lt;/span&gt;))
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 压缩 public/js 目录 js&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;task&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'minify-js'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;src&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./public/**/*.js'&lt;/span&gt;)
        .&lt;span class=&quot;at&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;uglify&lt;/span&gt;())
        .&lt;span class=&quot;at&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dest&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./public'&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 执行 gulp 命令时执行的任务&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;gulp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;task&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [
    &lt;span class=&quot;st&quot;&gt;'minify-html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'minify-css'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'minify-js'&lt;/span&gt;
])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;hexo clean &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; hexo g &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gulp &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  hexo s&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.naaln.com/2017/09/hexo-with-pwa/&quot; class=&quot;uri&quot;&gt;https://blog.naaln.com/2017/09/hexo-with-pwa/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 06 Feb 2018 14:43:00 +0000</pubDate>
<dc:creator>Ryan.Miao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/woshimrf/p/hexp-pwa-compress.html</dc:identifier>
</item>
<item>
<title>将excel文件内容存储到数据库，并可以实时在前端查看（不必生成文件） - 且聆听风</title>
<link>http://www.cnblogs.com/listenfwind/p/8424162.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/listenfwind/p/8424162.html</guid>
<description>&lt;p&gt;&lt;span&gt;版权声明：本文为博主原创文章，未经博主允许不得转载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本文主要讲前端内容，后端涉及较少，可以认为是使用Java。&lt;/p&gt;
&lt;p&gt;首先是excel文件上传，这个较为简单，可以html5的数据接口FormData()进行操作。具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;_file&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;或点此选择文件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    &lt;br/&gt;　　　　　&amp;lt;button id = &quot;file_button&quot; &amp;gt;按钮&amp;lt;/button&amp;gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后是对应的javascript&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$(&quot;#button&quot;).click(function(){
&lt;span&gt;&lt;span&gt;  var files = $('#_file').prop('files');&lt;/span&gt;
  var data = new FormData();
  data.append(&quot;upload&quot;,files[0]); //因为是只选择一个文件，故而只取file[0]&lt;/span&gt;
  $.ajax({
    url: yourPath,
    type: 'POST',
    data: data, 
    cache: false,
    dataType:'text',
    processData: false,
    contentType: false,
    success: function(result) {
                // Do something with the result
        alert(&quot;成功&quot;);
    },
    error : function(result){
        alert(&quot;失败&quot;+result.toString());
    }
  });

});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后端接收到文件之后，将其存储成二进制数组，在数据库中，比如postgresql，使用blob数据类型，然后在java中使用byte数组映射就可以了。&lt;/p&gt;
&lt;p&gt;那么怎么从后端存储的文件内容直接在页面上excel呢？这里需要用到sheetJs，官网：http://sheetjs.com/，可以直接取其demo来用，&lt;/p&gt;
&lt;p&gt;demo下载地址放在github上了：https://github.com/SheetJS/SheetJS.github.io。 &lt;/p&gt;
&lt;p&gt;在这里是直接使用它的一些代码，主要说说思路。&lt;/p&gt;
&lt;p&gt;下载后解压是SheetJS.github.io-master文件夹，在而显示生成excel的Js代码主要在SheetJS.github.io-master\assets\js\dropsheet.js中。其中发下其最后是通过调用该文件中以下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; handleDrop(e) {
        e.stopPropagation();
        e.preventDefault();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(pending) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; opts.errors.pending();
        &lt;/span&gt;&lt;span&gt;var files = e.dataTransfer.files;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i,f;
        &lt;/span&gt;&lt;span&gt;for (i = 0, f = files[i]; i != files.length; ++i) {
            var reader = new FileReader();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; name =&lt;span&gt; f.name;
            reader.onload &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; e.target.result;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; wb, arr;
                &lt;/span&gt;&lt;span&gt;var readtype = {type: rABS ? 'binary' : 'base64' };
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rABS) {
                    arr &lt;/span&gt;=&lt;span&gt; fixdata(data);
                    data &lt;/span&gt;=&lt;span&gt; btoa(arr);
                }
                &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; doit() {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(useworker) { sheetjsw(data, process_wb, readtype); &lt;span&gt;return&lt;/span&gt;&lt;span&gt;; }
                        wb &lt;/span&gt;=&lt;span&gt; XLSX.read(data, readtype);
                        process_wb(wb);
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e) { console.log(e); opts.errors.failed(e); }
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(e.target.result.length &amp;gt; 1e6) opts.errors.large(e.target.result.length, &lt;span&gt;function&lt;/span&gt;(e) { &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(e) doit(); });
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; { doit(); }
            };
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rABS) reader.readAsBinaryString(f);
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; reader.readAsArrayBuffer(f);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：SheetJs这个demo中，解析excel使用的是js-xlsx这个库，这个库对excel的操作很多，解析只是一个方面，具体可以上github上看。而根据解析在html上绘制excel表格的是canvas-datagrid.js这个表格控件。&lt;/p&gt;
&lt;p&gt;可以看到它是通过FileReader的readAsBinaryString方法读取每个选中的文件，根据文件内容在html中绘制出excel表格，那么我们只要在这里自己从后端接收那个二进制数据，生成一个File对象，再跑同样这段代码就OK。&lt;/p&gt;
&lt;p&gt;这个过程中碰到两个问题：&lt;/p&gt;
&lt;p&gt;一个就是后端的byte数组传递到前端很不方便，而且我在用ajax传递的时候，二进制数组参数会变成string型。&lt;/p&gt;
&lt;p&gt;另一个就是javascript中无法直接新建一个File对象。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先第一个问题&lt;/strong&gt;，二进制数组不能传递，那么就只能传递字符串了，但是不能直接转字符串，那么有什么办法呢？再上面的代码看到，里面有一句&lt;/p&gt;
&lt;pre&gt;
var readtype = {type: rABS ? 'binary' : 'base64' };
&lt;/pre&gt;
&lt;p&gt;说明这个操作可以操作base64编码的字符串，那就是转成base64，这个需要引入apache的一个包，包名为&lt;span&gt;commons-codec&lt;/span&gt;，再Maven中引用如下，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/commons-codec/commons-codec --&amp;gt;&lt;/span&gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.10&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再调用其一个方法，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Base64.encodeBase64String(byteArray);   //将byteArray转为base64字符串
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以传输到前端了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;再说第二个问题&lt;/strong&gt;，通过百度发现，javascript有一种数据类型Blob，而File正是基于这种Blob的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个Blob对象就是一个包含有只读原始数据的类文件对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是Blob是可以初始化来生成的，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;var blob = new Blob([base64Data], { type: &quot;mime&quot; })&lt;/p&gt;
&lt;p&gt;然后就可以通过FileReader读取了，再接下来只需要按照demo的代码调用就可以了。。。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;reader.readAsBinaryString(blob);&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 06 Feb 2018 14:34:00 +0000</pubDate>
<dc:creator>且聆听风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/listenfwind/p/8424162.html</dc:identifier>
</item>
<item>
<title>经典游戏还原之：松鼠大作战2 - 优梦创客</title>
<link>http://www.cnblogs.com/raymondking123/p/8380117.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/raymondking123/p/8380117.html</guid>
<description>&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;游戏介绍&lt;/strong&gt; 1990年，经迪士尼授权，由日本卡普空（Capcom）电视游戏公司制作的基于任天堂FC主机的电视游戏《松鼠大作战》出版发行。游戏延用迪士尼动画片《松鼠大作战》里的两只可爱花栗鼠Chip and Dale（奇奇和蒂蒂），从寻找小猫咪的委托任务开始，到摆脱肥猫陷阱与其一决高下为故事内容。可单人玩又可双人对战，可互助又可互攻，流畅度，创造力与可玩性均为同类游戏中的领军者。&lt;br/&gt;1993年，卡普空制作发行了《松鼠大作战2》再一次将经典搬到屏幕。除了制作更加精良外，故事也更加惊险刺激。&lt;br/&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/27/pXQxk6.jpg&quot; alt=&quot;pXQxk6.jpg&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;场景搭建&lt;/strong&gt; 将场景中的图片首尾拼接，在合适的位置设置碰撞器与平台控制器&lt;br/&gt;&lt;a href=&quot;https://imgchr.com/i/pXlknA&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/27/pXlknA.md.png&quot; alt=&quot;pXlknA.md.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;主角Chip登场&lt;/strong&gt; 将主角图片拖入层级面板上，命名为“player”,添加刚体2D组件和合适的碰撞器组件。为player设置子节点hand,添加碰撞器组件设置为触发，用于触碰箱子的判断；设置子节点foot,调整恰当的位置，用于跳跃，以及主角跳跃动画的条件判定；再设置两个节点用于主角投掷物品发射的位置。&lt;a href=&quot;https://imgchr.com/i/pXlIHI&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/27/pXlIHI.md.png&quot; alt=&quot;pXlIHI.md.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主角Chip动画制作&lt;/strong&gt; 打开动画控制器，创建主角的Idel动画，在合适的时间轴拖上相应的主角图片，重复操作将主角的动画设置好。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/pXGvWV&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/27/pXGvWV.md.png&quot; alt=&quot;pXGvWV.md.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;主角Chip基本动作实现&lt;/strong&gt; 为player添加脚本组件，命名为PlayerController，主角的移动需要通过输入设备为其提供指令，并进行相应的操作，Unity中Input可以获得这些操作。horizontal与vertical均是浮点数范围为-1至1，方向与卡迪尔坐标相同，isPressjump与isPressFire均为Bool类型。通过射线的方式我们可以判断处人物是否在跳跃状态下。Chip的移动与跳跃我们通过物理运动进行操作，在FixedUpdate()下进行代码操作；&lt;/p&gt;
&lt;pre&gt;

&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;isJump = !(Physics2D.Linecast(transform.position, foot.position, 1 &amp;lt;&amp;lt; LayerMask.NameToLayer(&quot;Map&quot;)) || Physics2D.Linecast(transform.position, foot.position, 1 &amp;lt;&amp;lt; LayerMask.NameToLayer(&quot;Box&quot;)));
horizontal = Input.GetAxis(&quot;Horizontal&quot;);//上下
vertical = Input.GetAxis(&quot;Vertical&quot;);//左右
isPressjump = Input.GetButtonDown(&quot;Jump&quot;);//跳跃
isPressFire = Input.GetButtonDown(&quot;Fire1&quot;);//攻击
void FixedUpdate()
{
    if (isControl)
    {
        if (!isDown &amp;amp;&amp;amp; isPressjump &amp;amp;&amp;amp; !isJump)
        {
            if (rig.velocity.y &amp;lt; 1F)
            {
                rig.AddForce(Vector3.up * force);
            }
            isJump = true;
        }
        if (isDown)
        {
            rig.velocity = new Vector3(0, rig.velocity.y);
        }
        else
        {
           rig.velocity = new Vector3(speed * horizontal, rig.velocity.y);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;主角Chip攻击实现&lt;/strong&gt; 与射击游戏的区别，在本作中，CHip是通过搬物品再投掷出去进行攻击的。这里的设想是将场景的箱子与投掷的箱子区别开来，方便判断。player下的节点hand添加脚本，在OnTriggerStay2D下调用MoveBox方法,isHandBox判断手中是否有箱子，isThrow则判断有没有进行投掷操作。这里贴出主要代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void MoveBox(Collider2D collision)
{
    //搬箱子
    if (!isDown &amp;amp;&amp;amp; collision.tag.StartsWith(&quot;Box&quot;) &amp;amp;&amp;amp; isPressFire &amp;amp;&amp;amp; !isHandBox &amp;amp;&amp;amp; !isThrow)
    {
        Destroy(collision.gameObject);//场景中的箱子被销毁了，游戏中松鼠头顶上的箱子仅仅是外观的区别
        isHandBox = true;
        animator.SetTrigger(&quot;moveBox&quot;);
        Instantiate(movebox);
    }
}
private void ThrowBox()
{
    if (isHandBox &amp;amp;&amp;amp; isPressFire)
    {
        isHandBox = false;
        isThrow = true;
        GameObject o = Instantiate(throwingbox);//投掷箱子时实例化一个投掷的箱子（与场景的箱子功能不同）
        if (!isDown)
        {
            o.transform.position = transform.Find(&quot;fireposition&quot;).position;
        }
        else
        {
            o.transform.position = transform.Find(&quot;downfireposition&quot;).position;
        }
        o.GetComponent&amp;lt;ThrowingBox&amp;gt;().Throw(transform.localScale.x, vertical);
        StartCoroutine(ResetIsThrow());
        animator.SetTrigger(&quot;throwbox&quot;);
        Instantiate(throwbox);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;主角Chip动画控制器动画控制&lt;/strong&gt; 给出合适的条件进行动画转换，本作动作丰富，通过多次尝试，本作动作才比较连贯。&lt;a href=&quot;https://imgchr.com/i/pXriiF&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/27/pXriiF.md.png&quot; alt=&quot;pXriiF.md.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;场景箱子的制作&lt;/strong&gt; 将箱子图片拖进层级面板中，为它设置合适的碰撞器，做成预制体备用。&lt;img src=&quot;https://s1.ax1x.com/2018/01/27/pXsn6s.png&quot; alt=&quot;pXsn6s.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;投掷箱子的制作&lt;/strong&gt; 与场景箱子类似，设置触发器，另外需要增加刚体2D组件与脚本，脚本主要用于处理与怪物接触的交互，同样也制成预制体。&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvrYe1.png&quot; alt=&quot;pvrYe1.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;其他道具的制作&lt;/strong&gt; 其他道具有花（吃了一定的数量可以奖励生命）；蜂蜜（蜜蜂怪物攻击的道具，玩家触碰会造成伤害）；坚果（若主角受伤，吃到该道具会增加1点Hp值）；叉子（投掷小鼠投掷的道具，玩家触碰会造成1点Hp伤害）。&lt;a href=&quot;https://imgchr.com/i/pvr6eI&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvr6eI.png&quot; alt=&quot;pvr6eI.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;一些其他的制定&lt;/strong&gt; 在本场景的末尾添加添加合适的触发器，绑上脚本可以通过下一个场景；在悬崖处也添加一个长条的触发器，用于触发主角死亡判定并重新加载本场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;蜜蜂怪物的制作&lt;/strong&gt; 在层级面板中，拖进一张蜜蜂怪物的图片，添加刚体组件，和合适的碰撞器，设置为触发。为这个对象设置两个动画，一个为停止动画，一个为飞行动画。摄像机还没有看到蜜蜂时，蜜蜂处于静止状态，当蜜蜂被摄像机照到时，蜜蜂处于飞行状态。蜜蜂飞到玩家的X位置时，投掷蜂蜜道具。附上蜜蜂的物理运动时脚本代码：&lt;a href=&quot;https://imgchr.com/i/pvs9mR&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvs9mR.md.png&quot; alt=&quot;pvs9mR.md.png&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://imgchr.com/i/pvyGUx&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvyGUx.md.png&quot; alt=&quot;pvyGUx.md.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void FixedUpdate()
{
    if (isHit)
    {
        rig.velocity = new Vector2(masterFlyX, masterFlyY);
    }
    else if (isRest)
    {
        rig.velocity = Vector2.zero;
    }
    else if (!isStop &amp;amp;&amp;amp; !isHit)
    {
        rig.velocity = new Vector2(flyspeedx, flyspeedy);
        if (this.transform.position.x &amp;lt; PlayerController.instance.transform.position.x &amp;amp;&amp;amp; honeyNum &amp;gt; 0)
        {
            Attack();
            honeyNum--;
            isRest = true;
            StartCoroutine(ResetIsRest());
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;投叉小鼠的制作&lt;/strong&gt; 与蜜蜂怪物类似，添加刚体组件和合适的碰撞器。为这个对象设置四个动画，停止动画，巡逻动画，攻击动画，跳跃动画。给这个对象加一个点进行射线是不是发现玩家，发现时，执行攻击逻辑播放攻击动画。这里附上部分代码：&lt;a href=&quot;https://imgchr.com/i/pvHJIO&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvHJIO.md.png&quot; alt=&quot;pvHJIO.md.png&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://imgchr.com/i/pvHazd&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvHazd.md.png&quot; alt=&quot;pvHazd.md.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void Update()
{
    if (state == State.Stop &amp;amp;&amp;amp; this.transform.position.x &amp;lt; cam.position.x + xoffset)
    {
        //怪物行为被激活
        state = State.Walk;
        animator.SetTrigger(&quot;Walk&quot;);
    }
    else if (this.transform.position.x &amp;lt; cam.position.x - xoffset || this.transform.position.y &amp;gt; cam.position.y + yoffset)
    {
        Destroy(this.gameObject);
    }
    Walk();
    Throw();
    Escape();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;strong&gt;Boss制作&lt;/strong&gt; 在层级面包板中拖入Boss的图片，组件与合适的触发器，Boss主要两种状态，添加刚体，走动状态与停下攻击状态。这里附上Boss的代码：&lt;a href=&quot;https://imgchr.com/i/pvqdbt&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvqdbt.md.png&quot; alt=&quot;pvqdbt.md.png&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://imgchr.com/i/pvq55T&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvq55T.md.png&quot; alt=&quot;pvq55T.md.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Boss : MonoBehaviour {

    public float range;
    public float speed;
    public float stopTime;
    public float walkTime;
    private float dir = 1;//方向正1表示坐标向右
    private float leftrange;
    private float rightrange;
    private Rigidbody2D rig;
    private Animator ani;
    private SpriteRenderer spriterender;
    private State state = State.Stop;
    private float currentTime;
    public GameObject puke;
    public float pukeSpeed;
    public int hp;
    public int totalHp;
    private bool isFlash = false;
    public float flashTime;
    public Color flashColor;
    public Color normalColor;
    public Color dangerColor;
    public float destoryTime;

    public GameObject bosspuke;
    public GameObject kill;


    public enum State
    {
        Stop,
        Walk,
        Attack,
        Die
    }
    // Use this for initialization
    void Start () {
        rig = this.GetComponent&amp;lt;Rigidbody2D&amp;gt;();
        ani = this.GetComponent&amp;lt;Animator&amp;gt;();
        spriterender = this.GetComponent&amp;lt;SpriteRenderer&amp;gt;();
        leftrange = this.transform.position.x - range;
        rightrange = this.transform.position.x + range;
    }

    void Update () {

        ChangeColor();
        ani.SetInteger(&quot;state&quot;, (int)state);
        if (state == State.Stop)
        {
            StartCoroutine(CancelStop());
        }
        else if (state == State.Walk)
        {
            currentTime += Time.deltaTime;
            if (currentTime &amp;gt; walkTime)
            {
                currentTime = 0f;
                state = State.Attack;
            }
            else
            {
                if (this.transform.position.x &amp;gt; rightrange)
                {
                    transform.localScale = new Vector3(-1F, 1F, 1F);
                    dir = -1F;
                }
                if (this.transform.position.x &amp;lt; leftrange)
                {
                    transform.localScale = new Vector3(1F, 1F, 1F);
                    dir = 1F;
                }
            }
        }
        else if (state == State.Die)
        {
            ani.enabled = false;
            this.GetComponent&amp;lt;Collider2D&amp;gt;().enabled = false;
            Destroy(this.gameObject, destoryTime);
        }
    }

    public void ChangeColor()
    {
        if (isFlash)
            spriterender.color = flashColor;
        else
            spriterender.color = normalColor;
        if (hp &amp;lt;= 1)
        {
            spriterender.color = dangerColor;
            if (hp &amp;lt;= 0)
            {
                state = State.Die;
            }
        }
    }

    public void FixedUpdate()
    {
        if (state == State.Stop || state == State.Attack)
        {
            rig.velocity = Vector2.zero;
        }
        else if (state == State.Walk)
        {
              rig.velocity = new Vector2(dir * speed, 0);
        }
        else if (state == State.Die)
        {
            rig.velocity = new Vector2(-3F,-1F);
        }
    }

    IEnumerator CancelStop()
    {
        yield return new WaitForSeconds(stopTime);
        state = State.Walk;
    }


    public void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == &quot;Player&quot; &amp;amp;&amp;amp;
          !PlayerController.instance.isFlash)
        {
            PlayerController.instance.Hurt();
            PlayerInfo.instance.SubHp();
        }
    }

    public void ChangeWalkState()
    {
        state = State.Walk;
    }


    public void Attack()
    {
        GameObject o = Instantiate(puke);
        Vector2 start = this.transform.Find(&quot;firePos&quot;).position;
        Vector2 end = GameObject.Find(&quot;player&quot;).transform.position;
        o.transform.position = start;
        Vector2 dir = end - start;
        dir = dir.normalized;
        o.GetComponent&amp;lt;Rigidbody2D&amp;gt;().velocity = dir*pukeSpeed;
        Instantiate(bosspuke);
    }

    public void Hit()
    {
        hp--;
        isFlash = true;
        StartCoroutine(ResetFlash());
        if (hp&amp;lt;=0)
        {
            Instantiate(kill);
        }
    }

    IEnumerator ResetFlash()
    {
        yield return new WaitForSeconds(flashTime);
        isFlash = false;
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;游戏的大体思路就是这样，让我们看看成品的图片&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://imgchr.com/i/pvLuRg&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvLuRg.png&quot; alt=&quot;pvLuRg.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://imgchr.com/i/pvLQMj&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvLQMj.png&quot; alt=&quot;pvLQMj.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://imgchr.com/i/pvLKzQ&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvLKzQ.png&quot; alt=&quot;pvLKzQ.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://imgchr.com/i/pvLnJS&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvLnJS.png&quot; alt=&quot;pvLnJS.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://imgchr.com/i/pvLlss&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvLlss.png&quot; alt=&quot;pvLlss.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://imgchr.com/i/pvLmi8&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/01/28/pvLmi8.png&quot; alt=&quot;pvLmi8.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
</description>
<pubDate>Tue, 06 Feb 2018 14:01:00 +0000</pubDate>
<dc:creator>优梦创客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/raymondking123/p/8380117.html</dc:identifier>
</item>
<item>
<title>JSP第六篇【自定义标签之传统标签】 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8424276.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8424276.html</guid>
<description>&lt;p&gt;&lt;strong&gt;JSTL标签库只提供了简单的输出等功能，没有实现任何的HTML代码封装，并且某些复杂类型转换，或者逻辑处理的时候，JSTL标签库完成不了，需要自定义标签!&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;strong&gt;编写一个实现Tag接口的Java类【标签处理器类】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在WEB-INF目录下创建tld(Tag Library Descriptor)文件，在tld文件中对标签处理类（实现Tag接口的Java类）进行描述&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; showIp &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Tag {
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPageContext&lt;/span&gt;(PageContext pageContext) {
    
        }
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setParent&lt;/span&gt;(Tag tag) {
    
        }
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Tag &lt;span class=&quot;fu&quot;&gt;getParent&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        }
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        }
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doEndTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        }
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;release&lt;/span&gt;() {
    
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;既然要获取到客户机的IP地址，那么request对象是必不可少的&lt;/strong&gt;。现在问题来了，&lt;strong&gt;在Tag重写的方法好像不能直接获取到request对象啊&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;经过我一番仔细的观察，发现了下面这个方法：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPageContext&lt;/span&gt;(PageContext pageContext) {
    
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;既然能获取到pageContext对象，那么其他8大内置对象还不是随随便便？&lt;/strong&gt;于是乎，我就&lt;strong&gt;定义一个成员变量pageContext，在setPageContext()方法中传递过来的pageContext赋值给我定义的成员变量即可&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; PageContext pageContext = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;

        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPageContext&lt;/span&gt;(PageContext pageContext) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;pageContext&lt;/span&gt; = pageContext;
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;好的，看回我们的需求：使用标签输出客户机的IP地址。&lt;strong&gt;在上面剩余5个方法中，最有可能就是在doStartTag()方法中编写代码&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {

        &lt;span class=&quot;co&quot;&gt;//获取到request对象&lt;/span&gt;
        HttpServletRequest httpServletRequest = (HttpServletRequest) pageContext.&lt;span class=&quot;fu&quot;&gt;getRequest&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//获取到客户机的ip地址&lt;/span&gt;
        String ip = httpServletRequest.&lt;span class=&quot;fu&quot;&gt;getRemoteAddr&lt;/span&gt;();
        
        &lt;span class=&quot;co&quot;&gt;//获取输出到浏览器的对象&lt;/span&gt;
        JspWriter jspWriter = pageContext.&lt;span class=&quot;fu&quot;&gt;getOut&lt;/span&gt;();
        
        &lt;span class=&quot;co&quot;&gt;//下面的异常只能捕获，因为子类的异常不能比父类多&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            jspWriter.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(ip);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;接着，&lt;strong&gt;编写tld文件，描述实现Tag接口的Java类【标签处理类】&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;taglib&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;            version=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;2.1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tlib-version&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/tlib-version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;short-name&amp;gt;&lt;/span&gt;zhongfucheng&lt;span class=&quot;kw&quot;&gt;&amp;lt;/short-name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;uri&amp;gt;&lt;/span&gt;/zhongfucheng&lt;span class=&quot;kw&quot;&gt;&amp;lt;/uri&amp;gt;&lt;/span&gt;
    
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Invoke 'Generate' action to add tags or functions --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;viewIp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag-class&amp;gt;&lt;/span&gt;tag.showIp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag-class&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;body-content&amp;gt;&lt;/span&gt;empty&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body-content&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;
    
    
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/taglib&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;下面我们&lt;strong&gt;来测试一下看能不能用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/5OTwHUl.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;标签处理类详细说明&quot;&gt;标签处理类详细说明&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;看完上面的程序，大部分人都是懵逼的。因为还不知道它具体是怎么用的，调用顺序是什么&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;首先我们来看一下Tag接口的源码&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Tag &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; JspTag {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; SKIP_BODY = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; EVAL_BODY_INCLUDE = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; SKIP_PAGE = &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; EVAL_PAGE = &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;;
    
        &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPageContext&lt;/span&gt;(PageContext var1);
    
        &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setParent&lt;/span&gt;(Tag var1);
    
        Tag &lt;span class=&quot;fu&quot;&gt;getParent&lt;/span&gt;();
    
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException;
    
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doEndTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException;
    
        &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;release&lt;/span&gt;();
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;上面程序的执行流程：&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;JSP引擎遇到自定义标签，首先创建标签处理器类的实例对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;JSP引擎实例化完标签处理器类后，&lt;strong&gt;调用setPageContext()方法，将pageContext对象传递给标签处理器类，使得标签处理器类可以通过pageContext对象与JSP页面进行通信！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;setPageContext()方法执行完后，&lt;strong&gt;调用setParent()方法，将当前标签的父标签传递给当前处理器类，如果当前标签没有父标签，则传入null&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当WEB容器执行到自定义标签的开始标记时，调用doStartTag()方法。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当WEB容器执行到自定义标签的结束标记时，调用doEndTag()方法。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一般来说，&lt;strong&gt;当WEB容器执行完自定义标签后，标签处理器类会驻留在内存中，直至停止WEB应用时，WEB容器才会调用release()方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170208140937722?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li&gt;我们现在已经清楚了方法的执行顺序了，&lt;strong&gt;可Tag接口的源码还有4个变量阿，它们是用来做什么的呢？我们在编写JSP页面时，经常需要在页面中引入一些逻辑，例如：&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;控制JSP页面某一部分（标签体）是否执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制整个JSP页面是否执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制JSP页面内容重复执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改JSP页面内容输出&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;再看回4个变量的名字，我们可以发现，这4个变量就是用来做逻辑判断的&lt;/strong&gt;！&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;我们来测试一下吧，&lt;strong&gt;在doEndTag()方法中，返回的是SKIP_PAGE变量，看下会怎么样&lt;/strong&gt;！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doEndTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; SKIP_PAGE;
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;我们再来看一看效果：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ViNg91X.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;好像是没什么区别！我们再查看一下源代码，&lt;strong&gt;发现执行完标签后，后面的代码全都没有执行！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/A1cvpAU.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;doStartTag()方法使用的是SKIP_BODY和EVAL_BODY_INCLUDE这两个变量，判断是否执行标签体的内容。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;doEndTag()方法使用的是SKIP_PAGE和EVAL_PAGE这两个变量，判断是否执行剩下页面的内容&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制JSP页面内容重复执行和修改JSP页面内容输出后面会有！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;tld文件详细说明&quot;&gt;tld文件详细说明&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170208142210947?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20170208142230738?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uXzN5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先我们来&lt;strong&gt;看一下tld文件当前用到的内容吧&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tlib-version&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/tlib-version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;short-name&amp;gt;&lt;/span&gt;myshortname&lt;span class=&quot;kw&quot;&gt;&amp;lt;/short-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;uri&amp;gt;&lt;/span&gt;http://mycompany.com&lt;span class=&quot;kw&quot;&gt;&amp;lt;/uri&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag-class&amp;gt;&amp;lt;/tag-class&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;body-content&amp;gt;&amp;lt;/body-content&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;我们一个一个来看：
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;shortname推荐使用prefix&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uri就是引入这个标签库使用的uri&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name为标签名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tagclass为实现类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bodycontent为标签体的限制&lt;/strong&gt;，它有4个值： &lt;strong&gt;EMPTY【不允许有标签体】，JSP【允许有JSP代码】 ，scriptless【不允许有脚本代码（也就是&amp;lt;%%&amp;gt;），允许有EL表达式，文本，JSP行为】 ， tagdepentend【标签体内的JSP代码不会被解析，直接输出文本】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;大部分时候我们都不需要实现Tag接口来编写自定义标签，TagSupport是Tag的一个模板类，实现了pageContext，parent的getter、setter方法以及一些其他的功能。我们要做的就是重写doStartTag()和doEndTag()方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Demo1 &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; TagSupport {
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
    
            &lt;span class=&quot;co&quot;&gt;//获取到request对象&lt;/span&gt;
            HttpServletRequest httpServletRequest = (HttpServletRequest) pageContext.&lt;span class=&quot;fu&quot;&gt;getRequest&lt;/span&gt;();
    
            String method = httpServletRequest.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;();
    
            JspWriter jspWriter = pageContext.&lt;span class=&quot;fu&quot;&gt;getOut&lt;/span&gt;();
    
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                jspWriter.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(method);
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException e) {
                e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
            }
    
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;在tld文件中描述一把&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;showMethod&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag-class&amp;gt;&lt;/span&gt;tag.Demo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag-class&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;body-content&amp;gt;&lt;/span&gt;empty&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body-content&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/oIFCZ3v.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;带属性的标签&quot;&gt;带属性的标签&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;上面我们编写的自定义标签都没有附带属性的，我们在使用core标签库的时候，标签一般都带有属性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其实&lt;strong&gt;JSTL标签库的原理就是自定义标签，把自定义标签搞明白了，对JSTL标签库的使用就有更好的理解了&lt;/strong&gt;！&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;想要自定义标签带有属性也非常简单，只要在标签处理器类上加一个成员变量和setter、getter()，再在tld文件中描述下该属性即可！它的原理是这样的：当标签使用到属性的时候，引擎就会调用它的setter()方法&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;下面我想要完成的功能是：&lt;strong&gt;使用标签的人，传入一个字符串格式就可以显示想要的格式日期&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;编写标签处理器类，增加一个成员变量以及对应的setter、getter方法&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Demo1 &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; TagSupport {
    
    
        &lt;span class=&quot;co&quot;&gt;//创建成员对象，对应的setter、getter方法&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String format = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
    
            &lt;span class=&quot;co&quot;&gt;//创建日期格式化对象&lt;/span&gt;
            SimpleDateFormat simpleDateFormat = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; SimpleDateFormat(format);
    
            &lt;span class=&quot;co&quot;&gt;//格式化日期并向浏览器输出&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                pageContext.&lt;span class=&quot;fu&quot;&gt;getOut&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(simpleDateFormat&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Date()));
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException e) {
                e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
            }
    
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getFormat&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; format;
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setFormat&lt;/span&gt;(String format) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt; = format;
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;在tld文件中描述标签和属性，name代表的是属性的名字，required代表的是是否为必须，rtexprvalue代表能否使用EL表达式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;formatDate&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag-class&amp;gt;&lt;/span&gt;tag.Demo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag-class&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;body-content&amp;gt;&lt;/span&gt;empty&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body-content&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;attribute&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;format&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;required&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/required&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;rtexprvalue&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/rtexprvalue&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/attribute&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;我们来看一下效果：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MNYQ0kK.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/OLL4Pwo.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;在深入讲解之前，我们先来看一下各种Tag接口、类之间的关系，这样学习下去才不会晕&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/uqf1Ndn.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;iterationtag说明&quot;&gt;IterationTag说明&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;我们已经使用过了Tag接口和TagSupport类了&lt;/strong&gt;。接下来我们看一下IterationTag是什么玩意。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; IterationTag &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Tag {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; EVAL_BODY_AGAIN = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
    
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doAfterBody&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;从关系图我们也可以看出，&lt;strong&gt;IterationTag接口实现了Tag接口，InterationTag接口和Tag接口最主要的区别就是多了个doAfterBody()方法和EVAL_BODY_AGAIN变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;理解起来也很简单：&lt;strong&gt;当doAfterBody()返回的是EVAL_BODY_AGAIN变量，那么标签体的内容就一直循环&lt;/strong&gt;！当然了，&lt;strong&gt;TagSupport也实现了Iteration接口，也就是说TagSupport类也能完成Iteration接口的事情&lt;/strong&gt;！&lt;/li&gt;
&lt;li&gt;我们来使用一下吧：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Demo1 &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; TagSupport {
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
    
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                pageContext.&lt;span class=&quot;fu&quot;&gt;getOut&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hello&quot;&lt;/span&gt;);
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException e) {
                e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
            }
    
            &lt;span class=&quot;co&quot;&gt;//执行标签体&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; EVAL_BODY_INCLUDE;
        }
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doAfterBody&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
    
            &lt;span class=&quot;co&quot;&gt;//标签体不断循环，直到doAfterBody()返回的是SKIP_BODY&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; EVAL_BODY_AGAIN;
        
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;tld文件中描述，&lt;strong&gt;既然标签体有内容，就不能用empty了&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;foreverEval&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag-class&amp;gt;&lt;/span&gt;tag.Demo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag-class&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;body-content&amp;gt;&lt;/span&gt;tagdependent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body-content&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;注意看横向的滑轮，已经死循环输出了：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/wu4iNkk.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;doAfterBody()中只要返回的是SKPI_BODY就退出循环，执行doEndTag()方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//定义一个变量，规定标签体循环的次数&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
    
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                pageContext.&lt;span class=&quot;fu&quot;&gt;getOut&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hello&quot;&lt;/span&gt;);
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException e) {
                e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
            }
    
            &lt;span class=&quot;co&quot;&gt;//执行标签体&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; EVAL_BODY_INCLUDE;
        }
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doAfterBody&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
            
            x++;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (x &amp;gt;= &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; SKIP_BODY;
            }
    
            &lt;span class=&quot;co&quot;&gt;//标签体不断循环，直到doAfterBody()返回的是SKIP_BODY&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; EVAL_BODY_AGAIN;
    
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;现在我们已经能控制循环的次数了&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/bvb2N5q.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;bodytag说明&quot;&gt;BodyTag说明&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;前面我们已经使用到了带标签体的自定义标签了，前面的都是只能直接输出而得不到标签体的内容，既然得不到标签体的内容，就更别说修改标签体了&lt;/strong&gt;！&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;此时，我们就需要BodyTag接口的支持了！&lt;strong&gt;它专门用来处理带标签体的标签&lt;/strong&gt;，下面我们来&lt;strong&gt;看一下BodyTag的源码&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; BodyTag &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; IterationTag {
        &lt;span class=&quot;co&quot;&gt;/** @deprecated */&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; EVAL_BODY_TAG = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;

        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; EVAL_BODY_BUFFERED = &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
    
        &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setBodyContent&lt;/span&gt;(BodyContent var1);
    
        &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doInitBody&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;BodyTag多了EVAL_BODY_BUFFERED变量【一个已经标识过时了】，多了setBodyContent和doInitBody()两个方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;其实&lt;strong&gt;使用BodyTag十分简单&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;如果doStartTag()方法返回的是EVAL_BODY_BUFFERED，把标签体的内容缓存起来&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接着调用setBodyContent()方法和doInitBody()方法，封装标签体的内容到BodyContent对象中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接着调用doEndTag()方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于标签体的内容，我们可以通过getBodyContenet()来获取！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;再看回上面的关系图，BodyTag实现了IterationTag和Tag接口，如果直接实现BodyTag接口做开发，要实现的方法就太多了。一般我们使用继承BodyTag的BodyTagSupport来做开发&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;bodytagsupport说明&quot;&gt;BodyTagSupport说明&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;首先来看一下源代码吧：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BodyTagSupport &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; TagSupport &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; BodyTag {
        &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; BodyContent bodyContent;
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BodyTagSupport&lt;/span&gt;() {
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doEndTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;doEndTag&lt;/span&gt;();
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setBodyContent&lt;/span&gt;(BodyContent b) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bodyContent&lt;/span&gt; = b;
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doInitBody&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doAfterBody&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;release&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bodyContent&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;release&lt;/span&gt;();
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; BodyContent &lt;span class=&quot;fu&quot;&gt;getBodyContent&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bodyContent&lt;/span&gt;;
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; JspWriter &lt;span class=&quot;fu&quot;&gt;getPreviousOut&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bodyContent&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getEnclosingWriter&lt;/span&gt;();
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;可以发现:&lt;strong&gt;BodyTagSupport主要扩充了以下的内容:&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;把BodyContent直接定义为成员变量，在获取标签体内容的时候就不需要通过getBodyContent()获取了&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提供获取JspWriter的方法，不需要从pageConext中获取了&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以上的两个扩充都简化了我们的代码书写&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

        &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; BodyContent bodyContent;

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; JspWriter &lt;span class=&quot;fu&quot;&gt;getPreviousOut&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bodyContent&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getEnclosingWriter&lt;/span&gt;();
        }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;从BodyTag接口中，我就说到了：&lt;strong&gt;标签体的内容封装到了BodyContent类中，那么BodyContent类究竟是什么？我们来看一下源码&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BodyContent &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; JspWriter {
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; JspWriter enclosingWriter;
    
        &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;BodyContent&lt;/span&gt;(JspWriter e) {
            &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;enclosingWriter&lt;/span&gt; = e;
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;flush&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;st&quot;&gt;&quot;Illegal to flush within a custom tag&quot;&lt;/span&gt;);
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;clearBody&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;clear&lt;/span&gt;();
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException var2) {
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Error(&lt;span class=&quot;st&quot;&gt;&quot;internal error!;&quot;&lt;/span&gt;);
            }
        }
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; Reader &lt;span class=&quot;fu&quot;&gt;getReader&lt;/span&gt;();
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;();
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;writeOut&lt;/span&gt;(Writer var1) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException;
    
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; JspWriter &lt;span class=&quot;fu&quot;&gt;getEnclosingWriter&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;enclosingWriter&lt;/span&gt;;
        }
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;原来BodyContent继承着JspWriter，它与JspWriter最大的区别是：BodyContent类的任何写入的内容并不自动地向页面输出！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;我们一般使用BodyContent都使用两个方法：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;co&quot;&gt;//将数据转变成Reader对象&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; Reader &lt;span class=&quot;fu&quot;&gt;getReader&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;//将数据转变成String对象&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;再从关系图我们可以看初，&lt;strong&gt;BodyTagSupport继承了TagSupport类实现了BodyTag接口，可以说：BodyTagSupport有着前面讲的接口和类的所有功能！&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;下面我们来&lt;strong&gt;使用下BodyTagSupport将标签体的内容转成是小写的&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;标签处理器类&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Demo1 &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; BodyTagSupport {
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doStartTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
    
    
            &lt;span class=&quot;co&quot;&gt;//想要获取到标签体的内容，就要返回EVAL_BODY_BUFFERED变量&lt;/span&gt;
    
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; EVAL_BODY_BUFFERED;
    
        }
    
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doEndTag&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; JspException {
    
            &lt;span class=&quot;co&quot;&gt;//获取到标签体的内容&lt;/span&gt;
            String value = bodyContent.&lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;();
    
            &lt;span class=&quot;co&quot;&gt;//将标签体的内容转成小写并输出&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getPreviousOut&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(value.&lt;span class=&quot;fu&quot;&gt;toLowerCase&lt;/span&gt;());
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException e) {
                e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
            }
    
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;doEndTag&lt;/span&gt;();
        }
    
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;tld文件：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;BodyContentToLowerCase&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;tag-class&amp;gt;&lt;/span&gt;tag.Demo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag-class&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;body-content&amp;gt;&lt;/span&gt;tagdependent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body-content&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/tpxuWP3.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章的同学，可以关注微信公众号:Java3y.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 06 Feb 2018 13:15:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8424276.html</dc:identifier>
</item>
<item>
<title>https原理及实践 - 酷酷的二连长</title>
<link>http://www.cnblogs.com/lyq863987322/p/8424253.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyq863987322/p/8424253.html</guid>
<description>&lt;p&gt;&lt;span&gt;转载请注明出处&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;网络安全问题&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;数据机密性&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在网络传输数据信息时，对数据的加密是至关重要的，否则所有传输的数据都是可以随时被第三方看到，完全没有机密性可言。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;数据机密性解决问题思路&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;利用算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了保证数据的机密性，首先可以采用的方法就是将数据通过相应算法，转换为其它的数据信息，然后再通过相应算法反推出真正的数据是什么，这样一来就保证了数据在网络传输过程中安全性，不会被其它人轻易的看到传输过程中的数据信息。数据加密前的信息称为明文数据(plaintext),经过加密算法转换后进行传输的信息称为密文数据(ciphertext)；反之经 过解密算法转换后，会将密文数据恢复为明文数据进行显示接收。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234532/201802/1234532-20180206201518623-414323020.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;优点：实现了数据机密传输，避免了明文传输数据的危险性。&lt;/p&gt;
&lt;p&gt;缺点：利用加密算法，将明文改密文，如果第三方获得加密算法，即可将传输密文再次变为明文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用对称加密算法解决机密性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;普通算法虽然已经解决了明文数据的机密性，可以在网络传输过程中不被直接看到明文数据。 但是新的问题又产生了，既然明文数据是通过算法改变成了新的数据信息，如果第三方获得 了算法，利用算法也是可以将密文数据信息，再次转换为明文数据信息，因此出现了对称加 密算法。形象比喻来说：数据加密算法就好比是一本密码规则手册，而对称加密算法就是将手册放在了一个保险柜中进行了上锁传输，只有传递数据信息的双方知道打开保险柜的密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234532/201802/1234532-20180206201611498-2066334811.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;数据完整性&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;网络传输数据的完整性，也是安全领域中需要考虑的重要环节，如果不能保证传输数据的完整性，那传输过程中的数据就有可能被任何人所篡改，而传输数据双方又不能及早的进行发现。将会造成互连通讯双方所表达信息的意义完全不一致。因此，对于不完整的数据信息，接收方应该进行相应判断，如果完整性验证错误，就拒绝接受相应的数据。&lt;/p&gt;
&lt;h4&gt;数据完整性解决思路&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;利用单向加密算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用数据的单项加密算法（提取数据指纹），进行提取数据特征码的方式，从而完成数据传 输的完整性验证。实际的算法实现过程为：在一段明文数据信息后加上敎据信息的特征码， 这个特征码是通过结合数据信息进行相应算法获得的数据特征码，接收方当收到数据信息后， 会利用相同的加密算法对获取的数据进行加密，确认加密后得到的特征码是否与传送过来数 据后面描述的特征码一致；如果一致，可以表示数据没有被篡改过，如果不一致表示数据完 整性遭到了破坏，数据一概不予以接收处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234532/201802/1234532-20180206201712482-159279617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用单项加密算法（加密特征码）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于可能存在中间人攻击的可能性，因此可以对传输过程中数据特征码进行加密，发送方利用对称密钥方式对手中的特征码进行加密，接收方会利用相同的密钥对手中的特征码进行解密，从而确认特征码是否一致。如果中间人将新的特征码也进行了加密，发送给接收方，但接收方无法利用和发送方协商好的解密密钥对特征码进行解密，最终无法识别中间人发送过来的数据特征码信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234532/201802/1234532-20180206201744763-269644960.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单项加密算法特征：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据输入一样，特征码信息输出必然相同&lt;/li&gt;
&lt;li&gt;雪崩效应，输入的微小改变，将造成输出的巨大改变&lt;/li&gt;
&lt;li&gt;定长输出，无论源数据多大，但结果都是一样的&lt;/li&gt;
&lt;li&gt;不可逆的，无论根据数据指纹，还原出原来的数据信息&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;单项加密算法常见的有：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DH加密算法，主要用于密钥的协商交换&lt;/li&gt;
&lt;li&gt;MD4 MD5(128)&lt;/li&gt;
&lt;li&gt;SHA1(160) SHA(192) SHA(256) SHA(384)&lt;/li&gt;
&lt;li&gt;CRC-32(循环输出校验码），不是加密机制，只是一种校验机制，不提供安全性，正常加密算 法是不允许出现输入不一样，输出一样的情况，但CRC是可以有这样情况的，因为CRC只 是具有校验功能，不具有加密功能&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;非对称加密算法常见的有：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;RSA，RSA既是一个公司的名称，也是三个创始人的名称，RSA既可以加密又可以进行签名。&lt;/li&gt;
&lt;li&gt;DSA，只能实现数字签名功能&lt;/li&gt;
&lt;li&gt;ELGamal，属于商业化的加密算法&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;身份验证&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;网络中传输数据时，很有可能传输的双方是第一次建立连接，进行相互通讯，既然是第一次 见面沟通，如何确认对方的身份信息，的确是我要进行通讯的对象呢？如果不是正确的通讯 对象，在经过通讯后，岂不是将所有数据信息发送给了一个陌生人。&lt;/p&gt;
&lt;h2&gt;网络安全证书由来&lt;/h2&gt;
&lt;h3&gt; 获取公钥信息的证书&lt;/h3&gt;
&lt;p&gt; 默认公钥在网络中进行传递时，默认情况下也是会出现问题的如下图所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1234532/201802/1234532-20180206202621201-871109002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对发送方的公钥信息进行公正步骤：(借助第三方安全机构）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A和B端首先生成自己的公钥和私钥的密钥对，为了使对方能相佶自己的公钥信息。将自己的公钥信息告知给第三方发证机构，利用第三方机构对自己的公钥进行公证。第三方机构会制作一个数字证书（机构 编号 以及发证机构的戳）。并且第三方机构也要给自己设置—个合法的公钥和私钥，并且公钥设置为第三方机构的公钥证书。&lt;/li&gt;
&lt;li&gt;发证机关计算出数字证书数据的特征码，并用自己的私钥逬行加密，并将加密的信息附加到特征码后成为数字签名。&lt;/li&gt;
&lt;li&gt;A和B两端获得公正过的证书信息，并通过证书信息传递，得到对方的公钥。&lt;/li&gt;
&lt;li&gt;A和B两端与第三方机构建立连接，获得第三方证书，通过第三方证书获得第三方公钥，利用第三方公钥只要能解密数字签名即可。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt; 证书信息所包含内容&lt;/h3&gt;
&lt;p&gt;目前标准的证书存储格式是X509，还有其他的证书格式，需要包含的内容为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;公钥信息，以及证书过期时间&lt;/li&gt;
&lt;li&gt;证书的合法拥有人信息&lt;/li&gt;
&lt;li&gt;证书该如何被使用&lt;/li&gt;
&lt;li&gt;CA颁发机构信息&lt;/li&gt;
&lt;li&gt;CA签名的校验码&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;互联网上使用的SSL和TLS证书管理机制均使用X509的格式&lt;/p&gt;

&lt;p&gt;Netscape网景公司生产了最初的浏览器，但为了提高浏览器访问页面的安全性，对TCP/IP模型进行了一定改进，在传输层与应用层之间，创建了一个3.5层的概念，称为SSL（（Secure Sockets Layer安全套接层））层，SSL不是一个软件，只是一个库，让应用层将数据传输到传输层前，调用了ssl层的功能对数据进行了加密，目前比较流行的版本是（SSLv2 V3），但是SSL是netscape公司进行定义的，不够开放性，因此为了使加密功能更加开放，TSL（传输层安全协议）协议就出现了，目前比较流行的版本是（TSLv1==ssl v3），TSL更像是传输层上实现的数据加密。&lt;/p&gt;
&lt;h2&gt;OpenSSL软件详细说明&lt;/h2&gt;
&lt;p&gt;1、获取OpenSSL软件的版本信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@web01 html]# openssl version
OpenSSL &lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;.1e-fips &lt;span&gt;11&lt;/span&gt; Feb &lt;span&gt;2013&lt;/span&gt;&lt;span&gt;
[root@web01 html]# rpm &lt;/span&gt;-&lt;span&gt;qa openssl
openssl&lt;/span&gt;-&lt;span&gt;1.0&lt;/span&gt;.1e-&lt;span&gt;57&lt;/span&gt;.el6.x86_64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、获取OpenSSL配置文件信息： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
/etc/pki/tls/openssl.cnf    &amp;lt;- openssl配置文件，主要用于配置成私有ca时进行使用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、获取OpenSSL命令详细信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5534bc45-a328-4fd0-abf0-39884ea05fe8')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5534bc45-a328-4fd0-abf0-39884ea05fe8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5534bc45-a328-4fd0-abf0-39884ea05fe8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5534bc45-a328-4fd0-abf0-39884ea05fe8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5534bc45-a328-4fd0-abf0-39884ea05fe8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
[root@web01 html]# openssl ?&lt;span&gt;
openssl:Error: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt; an invalid command.

Standard commands   # 标准命令：
asn1parse         ca                ciphers           cms               
crl               crl2pkcs7         dgst              dh                
dhparam           dsa               dsaparam          ec                
ecparam           enc               engine            errstr            
gendh             gendsa            genpkey           genrsa            
nseq              ocsp              passwd            pkcs12            
pkcs7             pkcs8             pkey              pkeyparam         
pkeyutl           prime             rand              req               
rsa               rsautl            s_client          s_server          
s_time            sess_id           smime             speed             
spkac             ts                verify            version           
x509              
# 单向加密命令（信息摘要命令）：
Message Digest commands (see the `dgst&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; command for more details)&lt;/span&gt;
&lt;span&gt;md2               md4               md5               rmd160            
sha               sha1              
# 加密命令：
Cipher commands (see the `enc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; command for more details)&lt;/span&gt;
aes-&lt;span&gt;128&lt;/span&gt;-cbc       aes-&lt;span&gt;128&lt;/span&gt;-ecb       aes-&lt;span&gt;192&lt;/span&gt;-cbc       aes-&lt;span&gt;192&lt;/span&gt;-&lt;span&gt;ecb       
aes&lt;/span&gt;-&lt;span&gt;256&lt;/span&gt;-cbc       aes-&lt;span&gt;256&lt;/span&gt;-&lt;span&gt;ecb       base64            bf                
bf&lt;/span&gt;-cbc            bf-cfb            bf-ecb            bf-&lt;span&gt;ofb            
camellia&lt;/span&gt;-&lt;span&gt;128&lt;/span&gt;-cbc  camellia-&lt;span&gt;128&lt;/span&gt;-ecb  camellia-&lt;span&gt;192&lt;/span&gt;-cbc  camellia-&lt;span&gt;192&lt;/span&gt;-&lt;span&gt;ecb  
camellia&lt;/span&gt;-&lt;span&gt;256&lt;/span&gt;-cbc  camellia-&lt;span&gt;256&lt;/span&gt;-ecb  cast              cast-&lt;span&gt;cbc          
cast5&lt;/span&gt;-cbc         cast5-cfb         cast5-ecb         cast5-&lt;span&gt;ofb         
des               des&lt;/span&gt;-cbc           des-cfb           des-&lt;span&gt;ecb           
des&lt;/span&gt;-ede           des-ede-cbc       des-ede-cfb       des-ede-&lt;span&gt;ofb       
des&lt;/span&gt;-ede3          des-ede3-cbc      des-ede3-cfb      des-ede3-&lt;span&gt;ofb      
des&lt;/span&gt;-&lt;span&gt;ofb           des3              desx              idea              
idea&lt;/span&gt;-cbc          idea-cfb          idea-ecb          idea-&lt;span&gt;ofb          
rc2               rc2&lt;/span&gt;-&lt;span&gt;40&lt;/span&gt;-cbc        rc2-&lt;span&gt;64&lt;/span&gt;-cbc        rc2-&lt;span&gt;cbc           
rc2&lt;/span&gt;-cfb           rc2-ecb           rc2-&lt;span&gt;ofb           rc4               
rc4&lt;/span&gt;-&lt;span&gt;40&lt;/span&gt;            seed              seed-cbc          seed-&lt;span&gt;cfb          
seed&lt;/span&gt;-ecb          seed-&lt;span&gt;ofb          zlib              

# openssl speed    &lt;/span&gt;&amp;lt;-&lt;span&gt; 测试当前主机对所有openssl支持的加密算法的加密速度进行测试显示，同时也对服务器性能做一个测试
# openssl enc &lt;/span&gt;-ciphername [-&lt;span&gt;in&lt;/span&gt; filename] [-&lt;span&gt;out&lt;/span&gt; filename] [-pass arg] [-e] [-d] [-a/-base64] [-A] [-k password] [-kfile filename] [-K key] [-&lt;span&gt;iv IV] 
[&lt;/span&gt;-S salt] [-salt] [-nosalt] [-z] [-md] [-p] [-P] [-bufsize number] [-nopad] [-debug] [-none] [-&lt;span&gt;engine id]
ciphername           &lt;/span&gt;&amp;lt;-&lt;span&gt; 指定加密的算法
[&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt; filename]       &amp;lt;-&lt;span&gt; 指定要加密的文件
[&lt;/span&gt;-&lt;span&gt;out&lt;/span&gt; filename]      &amp;lt;-&lt;span&gt; 指定加密后输出的文件
[&lt;/span&gt;-e] [-d]            &amp;lt;-&lt;span&gt; e是加密文件，d是解密文件，不指定默认就是加密的
[&lt;/span&gt;-a]                 &amp;lt;-&lt;span&gt; 基于base64位进行编码，可选参数

# 举例说明，加密一个文件
# openssl enc &lt;/span&gt;-des3 -salt -a &lt;span&gt;in&lt;/span&gt; inittab -&lt;span&gt;out&lt;/span&gt; initab.des3           &amp;lt;-&lt;span&gt; 输入密码后即可加密成功
# openssl enc &lt;/span&gt;-des3 -d -salt -a -&lt;span&gt;in&lt;/span&gt; -initab.des3 -&lt;span&gt;out&lt;/span&gt; inittab      &amp;lt;-&lt;span&gt; 输入密钥后即可解密成功
说明：其中命令中的salt参数，主要用于避免密码加密后，对密钥串的反推

# 输出一个文件的特征码方式
md5sum inittab                        
sha1sum inittab                    
openssl dgst&lt;/span&gt;-sha1 inittab        &amp;lt;-&lt;span&gt; 利用openssl生成文件特征码
dgst  &lt;/span&gt;-&lt;span&gt; 表示指定使用信息摘要命令
&lt;/span&gt;-sha1 -&lt;span&gt; 表示指定摘要命令选用sha1算法

# 生成和用户一样的密码串
openssl passwd &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;                &amp;lt;-&lt;span&gt; 采用md5加密用户密码串

# 生成伪随机数方法
openssl rand &lt;/span&gt;-base64 &lt;span&gt;45&lt;/span&gt;          &amp;lt;- 给出一个任意的数字，就会生成任意的随机数
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;openssl命令详细信息&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;OpenSSL软件建立私有CA&lt;/h2&gt;
&lt;h3&gt;创建私钥与公钥信息&lt;/h3&gt;
&lt;p&gt;需要先给ca证书颁发机构生成证书，即生成一对密钥；genrsa - generate an RSA private key利用genrsa生成密钥信息。虽然只是生成私钥，但需要清楚公钥是通过私钥进行提取得到的，所以只要有私钥，就可以有公钥。私钥信息是非常重要的，因此生成的私钥文件应该是600的权限 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0aee871e-463c-423b-b75d-dca10c1625b8')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0aee871e-463c-423b-b75d-dca10c1625b8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0aee871e-463c-423b-b75d-dca10c1625b8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0aee871e-463c-423b-b75d-dca10c1625b8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0aee871e-463c-423b-b75d-dca10c1625b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
# openssl genrsa &lt;span&gt;2048&lt;/span&gt; &amp;gt;server.key          &amp;lt;-&lt;span&gt; 创建私钥信息，并指定私钥的长度为2048，并将生成的私钥信息保存在一个文件中
# openssl genrsa &lt;/span&gt;-&lt;span&gt;out&lt;/span&gt; server.key &lt;span&gt;2048&lt;/span&gt;      &amp;lt;-&lt;span&gt; 将私钥信息直接进行保存，加密长度一定要放在输出文件后面
# (umask &lt;/span&gt;&lt;span&gt;077&lt;/span&gt;;openssl genrsa -&lt;span&gt;out&lt;/span&gt; server1024.key &lt;span&gt;1014&lt;/span&gt;)     &amp;lt;-&lt;span&gt; 利用小括号，实现子shell功能，临时修改umask，使子创建的私钥文件权限为600
说明：密钥文件也可以进行加密，并且支持后期手工加密，但不建议加密，每次使用私钥文件还要进行解密，比较麻烦
# openssl rsa &lt;/span&gt;-&lt;span&gt;in&lt;/span&gt; server.key -pubout       &amp;lt;- 读取私钥文件选择非对称密钥加密算法rsa，进行公钥的生成
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;实操私钥与公钥建立&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9e8a77b4-5cdd-4d10-a3f5-f5d1997aa8a8')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_9e8a77b4-5cdd-4d10-a3f5-f5d1997aa8a8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9e8a77b4-5cdd-4d10-a3f5-f5d1997aa8a8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9e8a77b4-5cdd-4d10-a3f5-f5d1997aa8a8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9e8a77b4-5cdd-4d10-a3f5-f5d1997aa8a8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
[root@web01 ~]# openssl genrsa &lt;span&gt;2048&lt;/span&gt; &amp;gt;&lt;span&gt;server.key
Generating RSA &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; key, &lt;span&gt;2048&lt;/span&gt; bit &lt;span&gt;long&lt;/span&gt;&lt;span&gt; modulus
.......................................................................&lt;/span&gt;+++&lt;span&gt;
.................................................................&lt;/span&gt;+++&lt;span&gt;
e &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; &lt;span&gt;65537&lt;/span&gt; (&lt;span&gt;0x10001&lt;/span&gt;&lt;span&gt;)
[root@web01 &lt;/span&gt;~]# openssl rsa -&lt;span&gt;in&lt;/span&gt; server.key -pubout &amp;gt;&lt;span&gt;server.cty
writing RSA key
[root@web01 &lt;/span&gt;~&lt;span&gt;]# ll
total &lt;/span&gt;&lt;span&gt;48&lt;/span&gt;
-rw-------. &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;1073&lt;/span&gt; Sep &lt;span&gt;29&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt; anaconda-&lt;span&gt;ks.cfg
&lt;/span&gt;-rw-r--r--. &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;21736&lt;/span&gt; Sep &lt;span&gt;29&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt;&lt;span&gt; install.log
&lt;/span&gt;-rw-r--r--. &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;5890&lt;/span&gt; Sep &lt;span&gt;29&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;:&lt;span&gt;18&lt;/span&gt;&lt;span&gt; install.log.syslog
&lt;/span&gt;-rw-r--r--  &lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;451&lt;/span&gt; Jan &lt;span&gt;18&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;&lt;span&gt; server.cty
&lt;/span&gt;-rw-r--r--  &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;1675&lt;/span&gt; Jan &lt;span&gt;18&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;34&lt;/span&gt; server.key
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;密钥建立&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;生成自签署的证书&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bc28f544-7070-4b7d-bf20-e2b00af54cf1')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_bc28f544-7070-4b7d-bf20-e2b00af54cf1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bc28f544-7070-4b7d-bf20-e2b00af54cf1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bc28f544-7070-4b7d-bf20-e2b00af54cf1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bc28f544-7070-4b7d-bf20-e2b00af54cf1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
[root@web01 ~]# openssl req -&lt;span&gt;new&lt;/span&gt; -x509 -key server.key -&lt;span&gt;out&lt;/span&gt; server.crt -days &lt;span&gt;365&lt;/span&gt;&lt;span&gt;
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; what &lt;span&gt;is&lt;/span&gt;&lt;span&gt; called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; value,
If you enter &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, the field will be left blank.
&lt;/span&gt;-----&lt;span&gt;
Country Name (&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; letter code) [XX]:CN
State or Province Name (full name) []:BJ
Locality Name (eg, city) [Default City]:BJ
Organization Name (eg, company) [Default Company Ltd]:o
Organizational Unit Name (eg, section) []:ol
Common Name (eg, your name or your server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s hostname) []:web01&lt;/span&gt;
&lt;span&gt;Email Address []:admin@qq.com

req    &lt;/span&gt;&amp;lt;-&lt;span&gt; 用于创建新的证书
&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;    &amp;lt;-&lt;span&gt; 表示穿件的是新的证书
x509   &lt;/span&gt;&amp;lt;-&lt;span&gt; 表示定义证书的格式为标准格式
key    &lt;/span&gt;&amp;lt;-&lt;span&gt; 表示调用的私钥文件信息
&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;    &amp;lt;-&lt;span&gt; 表示输出证书文件信息
days   &lt;/span&gt;&amp;lt;- 表示证书的有效期
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;生成自签署证书&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;ca颁发机构的私钥和证书是不能随便放置的，并且需要配置私有颁发机构的配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
vim /etc/pki/tls/openssl.cnf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[CA_default]模块参数说明：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;16&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;208&quot;&gt;
&lt;p align=&quot;center&quot;&gt;配置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;220&quot;&gt;
&lt;p align=&quot;center&quot;&gt;官方配置说明&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot;&gt;
&lt;p align=&quot;center&quot;&gt;解释配置说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;dir&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;=/etc/pki/CA&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot;&gt;
&lt;p&gt;#Where everthing is kept&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;创建并定义CA目录信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;certs&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/certs&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;#Where the issued certs are kept&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot;&gt;
&lt;p&gt;证书文件保存目录&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;crl_dir&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/crl&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;#Where the issued crl are kept&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;证书吊销文件保存目录&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;database&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/index.txt&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot;&gt;
&lt;p&gt;# data index file&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;表示发过哪些证书，都要文件进 行记录&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;new_certs_dir&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/newcerts&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;#default place for new certs&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;默认新证书的存放路径&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;certificate&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/cacert.pem&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot;&gt;
&lt;p&gt;#The CA certificate&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;定义CA机构自己的证书&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;serial&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/serial&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;#The current serial number&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;表示证书对应的序列号，一般从 01开始&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;crinumber&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/crinumber&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot;&gt;
&lt;p&gt;#The current crl number&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;表示吊销证书对应的序列号&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;crl&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/crl.pem&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot;&gt;
&lt;p&gt;#The current CRL&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;表示当前证书吊销列表文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;private_key&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/private/cakey.pem&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot;&gt;
&lt;p&gt;#The private key&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;表示CA机构目身的私钥文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;121&quot;&gt;
&lt;p align=&quot;center&quot;&gt;RANDFILE&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;208&quot;&gt;
&lt;p&gt;= $dir/private/.rand&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;220&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;#private random number file&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;私钥随机数文件，此文件会默认自己建立&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td colspan=&quot;4&quot; valign=&quot;top&quot; width=&quot;712&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;在/etc/pki/CA&lt;/strong&gt;&lt;strong&gt;的证书路径下，还需要有certs crl newcerts&lt;/strong&gt;&lt;strong&gt;三个子目录信息&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;指定证书相关的有效期限配置：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td width=&quot;149&quot;&gt;
&lt;p align=&quot;center&quot;&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;104&quot;&gt;
&lt;p align=&quot;center&quot;&gt;配置&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot;&gt;
&lt;p align=&quot;center&quot;&gt;官方配置说明&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;223&quot;&gt;
&lt;p align=&quot;center&quot;&gt;解释配置说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;149&quot;&gt;
&lt;p&gt;default_days&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;104&quot;&gt;
&lt;p&gt;= 365&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot;&gt;
&lt;p&gt;#how long to certify for&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;223&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;定义证书的有效期限&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;149&quot;&gt;
&lt;p&gt;default_crl_days&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;104&quot;&gt;
&lt;p&gt;= 30&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;#how long before next CRL&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;223&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;默认证书放罝到吊销列表中的保存时间&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;149&quot;&gt;
&lt;p&gt;default_md&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;104&quot;&gt;
&lt;p&gt;= default&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;#use public key default MD&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;223&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;指定单向加密算法采用的是默认的&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;定义[req_distinguished_name]模块参数信息，即指定证书中的一些基本属性信息&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;260&quot;&gt;
&lt;p align=&quot;center&quot;&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot;&gt;
&lt;p align=&quot;center&quot;&gt;配置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p align=&quot;center&quot;&gt;举例配置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;185&quot;&gt;
&lt;p align=&quot;center&quot;&gt;解释配置说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;260&quot;&gt;
&lt;p&gt;countryName_default&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot;&gt;
&lt;p&gt;=XX&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;= CN&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;185&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;默认的国家改为本地区域名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;260&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;stateOrProvinceName_default&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot;&gt;
&lt;p&gt;= Default Province&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;= beijing&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;185&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;默认的省份名称改为本地区域名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;260&quot;&gt;
&lt;p&gt;localityName_default&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot;&gt;
&lt;p&gt;=Default City&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;= beijing&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;185&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;默认的城市名称改为本地区域名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;260&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;0.orgzanizationName_default&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot;&gt;
&lt;p&gt;=Default Company Ltd&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;= o&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;185&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;默认的公司组织名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;260&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;organizationalUnitName_default&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;163&quot;&gt;
&lt;p&gt;=&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p&gt;=ol&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;185&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;默认的公司部分名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;nginx配置文件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
        listen       &lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt;;      # https的端口为443，要指定
        server_name  www.erlianzhang.com;
        ssl on;                # 开启ssl，下两行第一行是引用证书，第二行是引用私钥
        ssl_certificate &lt;/span&gt;/application/nginx/conf/keys/&lt;span&gt;server.crt;
        ssl_certificate_key &lt;/span&gt;/application/nginx/conf/keys/&lt;span&gt;server.key;
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/&lt;span&gt;;
            index  index.html index.htm;
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234532/201802/1234532-20180206204526857-1094402928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;设置自动跳转https&lt;/h2&gt;
&lt;p&gt; 每次都要输入https很烦，所以设置自动跳转&lt;/p&gt;
&lt;h3&gt;利用地址重写功能（方法1）&lt;/h3&gt;
&lt;p&gt;在原本的server模块上在加一个server：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
    listen  &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
    server_name www.erlianzhang.com;
    rewrite &lt;/span&gt;^(.*)$  https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$host$1 permanent;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：在https配置server基础上再添加http跳转server&lt;/p&gt;
&lt;h3&gt;利用error_page识别错误码信息进行跳转（方法2）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
        listen       &lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt;;
        listen       &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
        server_name  www.erlianzhang.com;
        ssl on;
        ssl_certificate &lt;/span&gt;/application/nginx/conf/key/&lt;span&gt;server.crt;
        ssl_certificate_key &lt;/span&gt;/application/nginx/conf/key/&lt;span&gt;server.key;
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/&lt;span&gt;www;
            index  index.html index.htm;
        }
       error_page &lt;/span&gt;&lt;span&gt;497&lt;/span&gt;  https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$host$uri;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：497为内置错误码，当访问http无法处理，需要利用https处理时&lt;/p&gt;
&lt;h2&gt;利用反向代理服务器进行http到https跳转&lt;/h2&gt;
&lt;h3&gt;修改地址池信息&lt;/h3&gt;
&lt;p&gt;将端口改为https的默认443端口 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;upstream www_server_pools {
            server &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.7&lt;/span&gt;:&lt;span&gt;443&lt;/span&gt;&lt;span&gt;;
            server &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.8&lt;/span&gt;:&lt;span&gt;443&lt;/span&gt;&lt;span&gt;;
            server &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.9&lt;/span&gt;:&lt;span&gt;443&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引用地址池时也要把http改成https&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
proxy_pass https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;web_pools;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修改地址池调用信息&lt;/h3&gt;
&lt;p&gt;注意，负载上也要有key证书与私钥文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
    listen       &lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt;;
    server_name  www.erlianzhang.com;
    ssl on;
    ssl_certificate &lt;/span&gt;/application/nginx/conf/key/&lt;span&gt;server.crt;
    ssl_certificate_key &lt;/span&gt;/application/nginx/conf/key/&lt;span&gt;server.key;
    location &lt;/span&gt;/&lt;span&gt; {
    proxy_pass https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www_server_pools;&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;定义http到https跳转配置信息&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
    listen       &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
    server_name  www.erlianzhang.com;
    rewrite &lt;/span&gt;^(.*)$  https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$host$1 permanent;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;指令&lt;/h2&gt;
&lt;h3&gt;ssl&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
语法：    ssl on |&lt;span&gt; off;
默认：    ssl off
语境：    http，server
功能：    ssl功能启用&lt;/span&gt;/不启用
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为给定的虚拟服务器启用HTTPS协议。&lt;/p&gt;
&lt;h3&gt;ssl_buffer_size&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_buffer_size size;
默认：    ssl_buffer_size 16k;
语境：    http， server
&lt;span&gt;该指令出现在1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&lt;span&gt;.9版本中。&lt;/span&gt;
功能：    设置用于发送数据的缓冲区的大小。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认情况下，缓冲区大小为16k，这对应于发送大响应时的最小开销。为了最小化第一个字节的时间，使用较小的值可能是有益的，例如：&lt;/p&gt;
&lt;div readability=&quot;23&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ssl_buffer_size 4k;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ssl_certificate&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_certificate file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
功能：    指定当前虚拟主机所使用的证书文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定file具有给定虚拟服务器的PEM格式的证书。如果除了主要证书之外还应该指定中间证书，则应该按照以下顺序在同一个文件中指定它们：主要证书首先是中间证书，然后是中间证书。PEM格式的密钥可以放在同一个文件中。&lt;/p&gt;
&lt;p&gt;从版本1.11.0开始，可以多次指定该指令来加载不同类型的证书，例如RSA和ECDSA：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('23040c00-1a12-4c6e-a709-5c406a8f24e8')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_23040c00-1a12-4c6e-a709-5c406a8f24e8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_23040c00-1a12-4c6e-a709-5c406a8f24e8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('23040c00-1a12-4c6e-a709-5c406a8f24e8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_23040c00-1a12-4c6e-a709-5c406a8f24e8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
    listen              &lt;/span&gt;&lt;span&gt;443&lt;/span&gt;&lt;span&gt; ssl;
server_name         example.com;

    ssl_certificate     example.com.rsa.crt;
    ssl_certificate_key example.com.rsa.key;

    ssl_certificate     example.com.ecdsa.crt;
    ssl_certificate_key example.com.ecdsa.key;
    ...
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;例子&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;注意：应该记住的是，由于HTTPS协议限制了最大的互操作性，虚拟服务器应该监听不同的IP地址。&lt;/p&gt;
&lt;h3&gt;ssl_certificate_key&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_certificate_key file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
功能：    当前虚拟主机与其证书文件匹配的私钥文件，用来解密&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定file给定虚拟服务器的PEM格式密钥。&lt;/p&gt;
&lt;p&gt;可以指定值engine：name：id可以指定代替file（1.7.9），该文件从OpenSSL引擎名称加载具有指定标识的密钥id。&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;ssl_ciphers&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_ciphers ciphers;
默认：    ssl_ciphers HIGH：！aNULL：！MD5;
语境：    http， server
功能：    指定支持加密算法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定启用的密码。密码以OpenSSL库理解的格式指定，例如：&lt;/p&gt;
&lt;p&gt;ssl_ciphers ALL：！aNULL：！EXPORT56：RC4 + RSA：+ HIGH：+ MEDIUM：+ LOW：+ SSLv2：+ EXP;&lt;/p&gt;
&lt;p&gt;完整列表可以使用“ openssl ciphers”命令查看。&lt;/p&gt;
&lt;p&gt;以前版本的nginx 默认使用不同的密码。&lt;/p&gt;
&lt;h3&gt;ssl_client_certificate&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_client_certificate file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
功能：    制定一个受信任的CA证书用于验证客户端证书&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果启用了ssl_stapling，则指定包含filePEM格式的可信CA证书，用于验证客户端证书和OCSP响应。&lt;/p&gt;
&lt;p&gt;证书列表将被发送给客户。如果不需要，可以使用ssl_trusted_certificate指令。&lt;/p&gt;
&lt;h3&gt;ssl_crl&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_crl file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
&lt;span&gt;该指令出现在0.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;&lt;span&gt;.7版本中。&lt;/span&gt;
功能：    证书吊销列表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定file用于验证客户端证书的PEM格式的撤销证书（CRL）。&lt;/p&gt;
&lt;h3&gt;ssl_dhparam&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_dhparam file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
&lt;span&gt;该指令出现在0.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;7.2版本中。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定fileDHE密码的DH参数。&lt;/p&gt;
&lt;h3&gt;ssl_ecdh_curve&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_ecdh_curve curve;
默认：    ssl_ecdh_curve auto;
语境：    http， server
&lt;span&gt;该指令出现在版本1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;1.0和1.0.6中。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定一个curve用于ECDHE密码。&lt;/p&gt;
&lt;p&gt;当使用OpenSSL 1.0.2或更高版本时，可以指定多条曲线（1.11.0），例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ssl_ecdh_curve prime256v1：secp384r1;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特殊值auto（1.11.0）指示nginx在使用OpenSSL 1.0.2或更高prime256v1版本时使用OpenSSL库中内置的列表，或使用旧版本。&lt;/p&gt;
&lt;p&gt;在版本1.11.0之前，prime256v1曲线是默认使用的。&lt;/p&gt;
&lt;h3&gt;ssl_password_file&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_password_file file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
&lt;span&gt;该指令出现在版本1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;7.3&lt;/span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;
功能：    指定password文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定file使用密码对密钥 ，其中每个密码都在单独的行中指定。加载密钥时会依次尝试密码。例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0e536a53-02fa-473d-8610-44c3001acf5c')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_0e536a53-02fa-473d-8610-44c3001acf5c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0e536a53-02fa-473d-8610-44c3001acf5c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0e536a53-02fa-473d-8610-44c3001acf5c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0e536a53-02fa-473d-8610-44c3001acf5c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;http {
    ssl_password_file &lt;/span&gt;/etc/keys/&lt;span&gt;global&lt;/span&gt;&lt;span&gt;.pass;
    ...
    server {
        server_name www1.example.com;
        ssl_certificate_key &lt;/span&gt;/etc/keys/&lt;span&gt;first.key;
    }
    server {
        server_name www2.example.com;
        # 命名管道也可以用来代替文件
        ssl_password_file &lt;/span&gt;/etc/keys/&lt;span&gt;fifo;
        ssl_certificate_key &lt;/span&gt;/etc/keys/&lt;span&gt;second.key;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;例子&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;ssl_prefer_server_ciphers&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
句法：    ssl_prefer_server_ciphers on |&lt;span&gt; off;
默认：    ssl_prefer_server_ciphers off;
语境：    http， server
功能：    服务端倾向使用的加密算法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定在使用SSLv3和TLS协议时，服务器密码应优先于客户端密码。&lt;/p&gt;
&lt;h3&gt;ssl_protocols&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
句法：    ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.&lt;span&gt;1&lt;/span&gt;] [TLSv1.&lt;span&gt;2&lt;/span&gt;] [TLSv1.&lt;span&gt;3&lt;/span&gt;&lt;span&gt;];
默认：    ssl_protocols TLSv1 TLSv1.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; TLSv1.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
语境：    http， server
功能：    使用什么样的加密协议，支持ssl协议版本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启用指定的协议。&lt;/p&gt;
&lt;p&gt;TLSv1.1和TLSv1.2参数（1.1.13,1.0.12）仅在使用OpenSSL 1.0.1或更高版本时才起作用。&lt;/p&gt;
&lt;p&gt;仅当使用支持TLSv1.3的OpenSSL 1.1.1时 ，TLSv1.3参数（1.13.0）才起作用。&lt;/p&gt;
&lt;h3&gt;ssl_session_cache&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
句法：    ssl_session_cache off | none |&lt;span&gt; [builtin[:size]] [shared:name:size];
默认：    ssl_session_cache无;
语境：    http， server
功能：    ssl会话缓存&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置存储会话参数的高速缓存的类型和大小。缓存可以是以下任何一种类型：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;off&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;严禁使用会话缓存：nginx明确告诉客户端会话可能不会被重用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;none&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;会话缓存的使用被轻轻地禁止：nginx告诉客户端会话可能被重用，但实际上不会将会话参数存储在缓存中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;builtin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;建立在OpenSSL中的缓存; 仅由一个工作进程使用。缓存大小在会话中指定。如果没有给出大小，则等于20480个会话。内置缓存的使用可能导致内存碎片。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shared&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有工作进程之间共享的缓存。缓存大小以字节为单位指定; 一兆字节可以存储大约4000个会话。每个共享缓存都应该有一个任意的名字。具有相同名称的缓存可以在多个虚拟服务器中使用。&lt;/p&gt;
&lt;p&gt;两种缓存类型都可以同时使用，例如：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ssl_session_cache builtin:&lt;span&gt;1000&lt;/span&gt; shared:SSL:10m;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意：但只使用没有内置缓存的共享缓存应该更有效率。&lt;/p&gt;
&lt;h3&gt;ssl_session_ticket_key&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_session_ticket_key file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
&lt;span&gt;这个指令出现在1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;5.7版本中。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;file使用用于加密和解密TLS会话票据的密钥设置a。如果必须在多个服务器之间共享相同的密钥，则该指令是必需的。默认情况下，使用随机生成的密钥。&lt;/p&gt;
&lt;p&gt;如果指定了多个密钥，则只使用第一个密钥来加密TLS会话票据。这允许配置密钥旋转，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ssl_session_ticket_key current.key;
ssl_session_ticket_key previous.key;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在&lt;code&gt;&lt;em&gt;file&lt;/em&gt;&lt;/code&gt;必须含有80或48个字节的随机数据，并且可以使用下面的命令创建：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
openssl rand &lt;span&gt;80&lt;/span&gt;&amp;gt; ticket.key
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;根据文件大小，AES256（80字节密钥，1.11.8）或AES128（48字节密钥）用于加密。&lt;/p&gt;
&lt;h3&gt;ssl_session_tickets&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
句法：    ssl_session_tickets on |&lt;span&gt; off;
默认：    ssl_session_tickets;
语境：    http， server
&lt;span&gt;该指令出现在1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&lt;span&gt;.9版本中。&lt;/span&gt;
功能：    禁用或启用会话恢复&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过TLS会话票据启用或禁用会话恢复。&lt;/p&gt;
&lt;h3&gt;ssl_session_timeout&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_session_timeout time;
默认：    ssl_session_timeout 5m;
语境：    http， server
功能：    ssl参数的有效时长，会话超时时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定客户端可以重新使用会话参数的时间。&lt;/p&gt;
&lt;h3&gt;ssl_stapling&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
句法：    ssl_stapling on |&lt;span&gt; off;
默认：    ssl_stapling off;
语境：    http， server
&lt;span&gt;这个指令出现在1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;3.7版本中。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启用或禁用 服务器对OCSP响应的装订。例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ssl_stapling on;
resolver &lt;/span&gt;&lt;span&gt;192.0&lt;/span&gt;.&lt;span&gt;2.1&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要使OCSP装订工作，应该知道服务器证书颁发者的证书。如果ssl_certificate文件不包含中间证书，则服务器证书颁发者的证书应存在于ssl_trusted_certificate文件中。&lt;/p&gt;
&lt;p&gt;对于OCSP响应者主机名的解析，也应指定解析器指令。&lt;/p&gt;
&lt;h3&gt;ssl_stapling_file&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_stapling_file file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
&lt;span&gt;这个指令出现在1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;3.7版本中。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置时，装订好的OCSP响应将取自指定的地址，file而不是查询服务器证书中指定的OCSP响应者。&lt;/p&gt;
&lt;p&gt;该文件应该是由“openssl ocsp”命令产生的DER格式。&lt;/p&gt;
&lt;h3&gt;ssl_stapling_responder&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_stapling_responder url;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
&lt;span&gt;这个指令出现在1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;3.7版本中。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;覆盖“ 授权信息访问 ”证书扩展中指定的OCSP响应者的URL 。&lt;/p&gt;
&lt;p&gt;仅http://支持“ ”OCSP响应者：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ssl_stapling_responder http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ocsp.example.com/;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ssl_stapling_verify&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
句法：    ssl_stapling_verify on |&lt;span&gt; off;
默认：    ssl_stapling_verify off;
语境：    http， server
&lt;span&gt;这个指令出现在1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;3.7版本中。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启用或禁用服务器验证OCSP响应。&lt;/p&gt;
&lt;p&gt;要使验证生效，应使用ssl_trusted_certificate指令将服务器证书颁发者，根证书和所有中间证书的证书配置为可信。&lt;/p&gt;
&lt;h3&gt;ssl_trusted_certificate&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_trusted_certificate file;
默认：    &lt;/span&gt;-&lt;span&gt;
语境：    http， server
&lt;span&gt;这个指令出现在1.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;3.7版本中。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果启用了ssl_stapling，则 指定包含filePEM格式的可信CA证书，用于验证客户端证书和OCSP响应。&lt;/p&gt;
&lt;p&gt;与由ssl_client_certificate设置的证书相比，这些证书的列表不会被发送到客户端。&lt;/p&gt;
&lt;h3&gt;ssl_verify_client&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
句法：    ssl_verify_client on | off | optional |&lt;span&gt; optional_no_ca;
默认：    ssl_verify_client off;
语境：    http， server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启用客户端证书的验证。验证结果存储在 $ ssl_client_verify变量中。&lt;/p&gt;
&lt;p&gt;的optional参数（0.8.7+）请求的客户端证书，并验证它证书是否存在。&lt;/p&gt;
&lt;p&gt;该optional_no_ca参数（1.3.8，1.2.5）要求客户端证书，但不要求它由受信任的CA证书进行签名。这适用于nginx外部的服务执行实际证书验证的情况。证书的内容可以通过$ ssl_client_cert变量访问。&lt;/p&gt;
&lt;h3&gt;ssl_verify_depth&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;句法：    ssl_verify_depth number;
默认：    ssl_verify_depth &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
语境：    http， server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置客户端证书链中的验证深度。&lt;/p&gt;
&lt;h2&gt;错误处理&lt;/h2&gt;
&lt;p&gt;该ngx_http_ssl_module模块支持使用error_page指令可以用于重定向的几个非标准错误代码 ：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;495&lt;/span&gt;&lt;span&gt;     客户端证书验证过程中发生错误;
&lt;/span&gt;&lt;span&gt;496&lt;/span&gt;&lt;span&gt;     客户没有提交所需的证书;
&lt;/span&gt;&lt;span&gt;497&lt;/span&gt;     常规请求已发送到HTTPS端口。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重定向发生后，该请求被完全解析和变量，如$request_uri， $uri，$args等人，都可用。&lt;/p&gt;
&lt;h2&gt;嵌入式变量&lt;/h2&gt;
&lt;p&gt;该ngx_http_ssl_module模块支持多个嵌入式变量：&lt;/p&gt;
&lt;h3&gt;$ssl_cipher&lt;/h3&gt;
&lt;p&gt;返回用于建立的SSL连接的密码字符串；&lt;/p&gt;
&lt;h3&gt;$ssl_ciphers&lt;/h3&gt;
&lt;p&gt;返回客户端支持的密码列表（1.11.7）。已知的密码按名称列出，未知以十六进制显示，例如：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
AES128-SHA:AES256-SHA:&lt;span&gt;0x00ff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意：只有在使用OpenSSL版本1.0.2或更高版本时才支持该变量。对于旧版本，该变量仅适用于新会话，并只列出已知密码。&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;$ssl_client_escaped_cert&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;以建立的SSL连接（1.13.5）返回PEM格式的客户端证书（urlencoded）；&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;$ssl_client_cert&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;以建立的SSL连接的PEM格式返回客户端证书，除第一行之外的每一行都加上制表符；这是为了在 proxy_set_header指令中使用;&lt;/p&gt;
&lt;p&gt;注意：该变量已被弃用，$ssl_client_escaped_cert应该使用该变量。&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;$ssl_client_fingerprint&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;为建立的SSL连接（1.7.1）返回客户端证书的SHA1指纹；&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;$ssl_client_i_dn&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;根据RFC 2253（1.11.6），为建立的SSL连接返回客户端证书的“颁发者DN”字符串；&lt;/p&gt;
&lt;h3&gt;$ssl_client_i_dn_legacy&lt;/h3&gt;
&lt;p&gt;为建立的SSL连接返回客户端证书的“颁发者DN”字符串;&lt;/p&gt;
&lt;p&gt;说明：在版本1.11.6之前，变量名是$ssl_client_i_dn。&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;$ssl_client_raw_cert&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;以建立的SSL连接的PEM格式返回客户端证书;&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;$ssl_client_s_dn&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;根据RFC 2253（1.11.6），为建立的SSL连接返回客户端证书的“主题DN”字符串；&lt;/p&gt;
&lt;h3&gt;$ssl_client_s_dn_legacy&lt;/h3&gt;
&lt;p&gt;为建立的SSL连接返回客户端证书的“主题DN”字符串;&lt;/p&gt;
&lt;p&gt;说明：在版本1.11.6之前，变量名是$ssl_client_s_dn。&lt;/p&gt;
&lt;h3&gt;$ssl_client_serial&lt;/h3&gt;
&lt;p&gt;为建立的SSL连接返回客户端证书的序列号;&lt;/p&gt;
&lt;h3&gt;$ssl_client_v_end&lt;/h3&gt;
&lt;p&gt;返回客户端证书的结束日期（1.11.7）;&lt;/p&gt;
&lt;h3&gt;$ssl_client_v_remain&lt;/h3&gt;
&lt;p&gt;返回客户端证书过期的天数（1.11.7）;&lt;/p&gt;
&lt;h3&gt;$ssl_client_v_start&lt;/h3&gt;
&lt;p&gt;返回客户端证书的开始日期（1.11.7）;&lt;/p&gt;
&lt;h3&gt;$ssl_client_verify&lt;/h3&gt;
&lt;p&gt;如果证书不存在，则 返回客户端证书验证的结果：“ SUCCESS”，“ FAILED:reason”和“ NONE”;&lt;/p&gt;
&lt;p&gt;说明：在版本1.11.7之前，“ FAILED”结果不包含reason字符串。&lt;/p&gt;
&lt;h3&gt;$ssl_curves&lt;/h3&gt;
&lt;p&gt;返回客户端支持的曲线列表（1.11.7）。已知曲线按名称列出，未知以十六进制显示，例如：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;0x001d&lt;/span&gt;：prime256v1：secp521r1：secp384r1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意：只有在使用OpenSSL版本1.0.2或更高版本时才支持该变量。对于旧版本，变量值将是一个空字符串。该变量仅适用于新会话。&lt;/p&gt;
&lt;h3&gt;$ssl_protocol&lt;/h3&gt;
&lt;p&gt;返回建立的SSL连接的协议;&lt;/p&gt;
&lt;h3&gt;$ssl_server_name&lt;/h3&gt;
&lt;p&gt;通过SNI （1.7.0）返回请求的服务器名称 ;&lt;/p&gt;
&lt;h3&gt;$ssl_session_id&lt;/h3&gt;
&lt;p&gt;返回建立的SSL连接的会话标识符;&lt;/p&gt;
&lt;h3&gt;$ssl_session_reused&lt;/h3&gt;
&lt;p&gt;如果SSL会话被重用，则 返回“ ”;否则返回“ ” &lt;code&gt;.&lt;/code&gt;（1.5.11）。&lt;/p&gt;

</description>
<pubDate>Tue, 06 Feb 2018 13:11:00 +0000</pubDate>
<dc:creator>酷酷的二连长</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyq863987322/p/8424253.html</dc:identifier>
</item>
<item>
<title>HTML5详解 - 生命壹号</title>
<link>http://www.cnblogs.com/smyhvae/p/8424230.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smyhvae/p/8424230.html</guid>
<description>&lt;blockquote readability=&quot;5.375&quot;&gt;
&lt;p&gt;本文最初发表于&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/8424230.html&quot;&gt;博客园&lt;/a&gt;，并在&lt;a href=&quot;https://github.com/smyhvae/Web&quot;&gt;GitHub&lt;/a&gt;上持续更新&lt;strong&gt;前端的系列文章&lt;/strong&gt;。欢迎在GitHub上关注我，一起入门和进阶前端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;html5的介绍&quot;&gt;HTML5的介绍&lt;/h2&gt;
&lt;h3 id=&quot;web-技术发展时间线&quot;&gt;Web 技术发展时间线&lt;/h3&gt;
&lt;p&gt;2002年的表格布局逐渐被淘汰，是因为：表格是用来承载数据的，并不是用来划分网页结构的。&lt;/p&gt;
&lt;p&gt;2009年就已经推出了HTML5的草案，但直到2014年才有定稿，是因为有移动端的推动。&lt;/p&gt;
&lt;p&gt;H5草案的前身是叫：Web Application，最早是由&lt;a href=&quot;https://baike.baidu.com/item/WHATWG/5803339?fr=aladdin&quot;&gt;WHATWG&lt;/a&gt;这个组织在2004年提出的。&lt;/p&gt;
&lt;p&gt;2007年被 W3C 组织接纳，并在 2008-01-22 发布 HTML5 的第一个草案。&lt;/p&gt;
&lt;h3 id=&quot;什么是-html5&quot;&gt;什么是 HTML5&lt;/h3&gt;
&lt;p&gt;HTML5并不仅仅只是做为HTML标记语言的一个最新版本，更重要的是它&lt;strong&gt;制定了Web应用开发的一系列标准&lt;/strong&gt;，成为第一个将Web做为应用开发平台的HTML语言。&lt;/p&gt;
&lt;p&gt;HTML5定义了一系列新元素，如新语义标签、智能表单、多媒体标签等，可以帮助开发者创建富互联网应用，还提供了一些Javascript API，如地理定位、重力感应、硬件访问等，可以在浏览器内实现类原生应用。我们甚至可以结合 Canvas 开发网页版游戏。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;HTML5&lt;/code&gt;的广义概念&lt;/strong&gt;：HTML5代表浏览器端技术的一个发展阶段。在这个阶段，浏览器的呈现技术得到了飞跃发展和广泛支持，它包括：HTML5、CSS3、Javascript API在内的一套技术组合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HTML5&lt;/code&gt;不等于 &lt;code&gt;HTML next version&lt;/code&gt;。&lt;code&gt;HTML5&lt;/code&gt; 包含： &lt;code&gt;HTML&lt;/code&gt;的升级版、&lt;code&gt;CSS&lt;/code&gt;的升级版、&lt;code&gt;JavaScript API&lt;/code&gt;的升级版。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;code&gt;HTML5&lt;/code&gt;是新一代开发 &lt;strong&gt;Web 富客户端&lt;/strong&gt;应用程序整体&lt;strong&gt;解决方案&lt;/strong&gt;。包括：HTML5，CSS3，Javascript API在内的一套&lt;strong&gt;技术组合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;富客户端&lt;/strong&gt;：具有很强的&lt;strong&gt;交互性&lt;/strong&gt;和体验的客户端程序。比如说，浏览博客，是比较简单的客户端；一个在线听歌的网站、即时聊天网站就是富客户端。&lt;/p&gt;
&lt;h3 id=&quot;html5-的应用场景&quot;&gt;HTML5 的应用场景&lt;/h3&gt;
&lt;p&gt;列举几个HTML5 的应用场景：&lt;/p&gt;
&lt;p&gt;（1）极具表现力的网页：内容简约而不简单。&lt;/p&gt;
&lt;p&gt;（2）网页应用程序：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;代替PC端的软件：iCloud、百度脑图、Office 365等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;APP端的网页：淘宝、京东、美团等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;微信端：公众号、小程序等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（3）混合式本地应用。&lt;/p&gt;
&lt;p&gt;（4）简单的游戏。&lt;/p&gt;
&lt;h3 id=&quot;html5-新增的内容&quot;&gt;HTML5 新增的内容&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1540.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1545.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1541.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;语义化的标签&quot;&gt;语义化的标签&lt;/h2&gt;
&lt;h3 id=&quot;语义化的作用&quot;&gt;语义化的作用&lt;/h3&gt;
&lt;p&gt;语义标签对于我们并不陌生，如&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;表示一个段落、&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;表示一个无序列表。&lt;strong&gt;标签语义化的作用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;能够便于开发者阅读和写出更优雅的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;更好地搜索引擎优化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总结：HTML的职责是描述一块内容是什么（或其意义），而不是它长什么样子；它的外观应该由CSS来决定。&lt;/p&gt;
&lt;h3 id=&quot;h5在语义上的改进&quot;&gt;H5在语义上的改进&lt;/h3&gt;
&lt;p&gt;在此基础上，HTML5 增加了大量有意义的语义标签，更有利于搜索引擎或辅助设备理解 HTML 页面内容。HTML5会让HTML代码的内容更结构化、标签更语义化。&lt;/p&gt;
&lt;p&gt;我们常见的 css+div 布局是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1546.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以后我们可以这样写：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1550.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;传统的做法中，我们通过增加类名如&lt;code&gt;class=&quot;header&quot;&lt;/code&gt;、&lt;code&gt;class=&quot;footer&quot;&lt;/code&gt;，使HTML页面具有语义性，但是不具有通用性。&lt;/p&gt;
&lt;p&gt;HTML5 则是通过新增语义标签的形式来解决这个问题，例如&lt;code&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;footer&amp;gt;&amp;lt;/footer&amp;gt;&lt;/code&gt;等，这样就可以使其具有通用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;传统网页布局：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 头部 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 主体部分 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 文章 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;article&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 侧边栏 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;aside&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 底部 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;H5 的经典网页布局：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 头部 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 主体部分 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 文章 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;article&amp;gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 侧边栏 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aside&amp;gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 底部 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;h5中常用的新语义标签&quot;&gt;H5中常用的新语义标签&lt;/h2&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; 表示导航&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; 表示页眉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; 表示页脚&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; 表示区块&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; 表示文章。如文章、评论、帖子、博客&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; 表示侧边栏 如文章的侧栏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; 表示媒介内容分组。&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; 表示标记 (用得少)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; 表示进度 (用得少)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; 表示日期&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本质上新语义标签与&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;没有区别，只是其具有表意性，使用时除了在HTML结构上需要注意外，其它和普通标签的使用无任何差别，可以理解成&lt;code&gt;&amp;lt;div class=&quot;nav&quot;&amp;gt;&lt;/code&gt; 相当于&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;PS：单标签不用写关闭符号。&lt;/p&gt;
&lt;h3 id=&quot;新语义标签的兼容性处理&quot;&gt;新语义标签的兼容性处理&lt;/h3&gt;
&lt;p&gt;IE8 及以下版本的浏览器不支持 H5 和 CSS3。解决办法：引入&lt;code&gt;html5shiv.js&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;引入时，需要做if判断，具体代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--  条件注释 只有ie能够识别--&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--[if lte ie 8]&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        &amp;lt;script src=&quot;html5shiv.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    &amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码是&lt;strong&gt;条件注释&lt;/strong&gt;：虽然是注释，但是IE浏览器可以识别出来。解释一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;l：less 更小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;t：than 比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;e：equal等于&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g：great 更大&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;PS:我们在测试 IE 浏览器的兼容的时候，可以使用软件 ietest，模拟IE6-IE11。&lt;/p&gt;
&lt;p&gt;在不支持HTML5新标签的浏览器，会将这些新的标签解析成行内元素(inline)对待，所以我们只需要将其转换成块元素(block)即可使用。&lt;/p&gt;
&lt;p&gt;但是在IE9版本以下，并不能正常解析这些新标签，但是可以识别通过document.createElement('tagName')创建的自定义标签。于是我们的解决方案就是：将HTML5的新标签全部通过document.createElement('tagName')来创建一遍，这样IE低版本也能正常解析HTML5新标签了。&lt;/p&gt;
&lt;p&gt;当然，在实际开发中我们更多采用的办法是：检测IE浏览器的版本，来加载第三方的JS库来解决兼容问题（如上方代码所示）。&lt;/p&gt;
&lt;h2 id=&quot;h5中的表单&quot;&gt;H5中的表单&lt;/h2&gt;
&lt;p&gt;传统的Web表单已经越来越不能满足开发的需求，HTML5 在 Web 表单方向做了很大的改进，如拾色器、日期/时间组件等，使表单处理更加高效。&lt;/p&gt;
&lt;h3 id=&quot;h5中新增的表单类型&quot;&gt;H5中新增的表单类型&lt;/h3&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;email&lt;/code&gt; 只能输入email格式。自动带有验证功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tel&lt;/code&gt; 手机号码。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;url&lt;/code&gt; 只能输入url格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;number&lt;/code&gt; 只能输入数字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;search&lt;/code&gt; 搜索框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;range&lt;/code&gt; 滑动条&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;color&lt;/code&gt; 拾色器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;time&lt;/code&gt; 时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;date&lt;/code&gt; 日期。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--datetime&lt;/code&gt; 时间日期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;month&lt;/code&gt; 月份&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;week&lt;/code&gt; 星期&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面的部分类型是针对移动设备生效的，且具有一定的兼容性，在实际应用当中可选择性的使用。&lt;/p&gt;
&lt;p&gt;代码举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1, user-scalable=no&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;表单类型&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        body &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#F7F7F7&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        form &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;max-width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        label &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        input &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;25px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;legend&amp;gt;&lt;/span&gt;表单类型&lt;span class=&quot;kw&quot;&gt;&amp;lt;/legend&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            email: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; required&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            color: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            url: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            number: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; step=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            range: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            search: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            tel: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;tel&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;tel&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            time: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            date: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            datetime: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;datetime&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            week: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;week&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;month&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            month: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;month&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;month&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            datetime-local: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;datetime-local&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;datetime-local&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码解释：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; 标签将表单里的内容进行打包，代表一组；而&lt;code&gt;&amp;lt;legend&amp;gt;&lt;/code&gt;标签的则是 fieldset 里的元素定义标题。&lt;/p&gt;
&lt;h3 id=&quot;表单元素标签&quot;&gt;表单元素（标签）&lt;/h3&gt;
&lt;p&gt;这里讲两个表单元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; 数据列表：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; list=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myData&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;datalist&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myData&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;option&amp;gt;&lt;/span&gt;本科&lt;span class=&quot;kw&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;option&amp;gt;&lt;/span&gt;研究生&lt;span class=&quot;kw&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;option&amp;gt;&lt;/span&gt;不明&lt;span class=&quot;kw&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方代码中，input里的list属性和 datalist 进行了绑定。&lt;/p&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1845.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图可以看出，数据列表可以自动提示。&lt;/p&gt;
&lt;p&gt;2、&lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt;元素：&lt;/p&gt;
&lt;p&gt;keygen 元素的作用是提供一种验证用户的可靠方法。&lt;/p&gt;
&lt;p&gt;keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键：一个公钥，一个私钥。&lt;/p&gt;
&lt;p&gt;私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。&lt;/p&gt;
&lt;p&gt;3、&lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt;元素：度量器&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;meter  value&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;81&quot;&lt;/span&gt;    min&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt; max&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;  low&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;60&quot;&lt;/span&gt;  high&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;80&quot;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;表单属性&quot;&gt;表单属性&lt;/h3&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;placeholder&lt;/code&gt; 占位符（提示文字）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;autofocus&lt;/code&gt; 自动获取焦点&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;multiple&lt;/code&gt; 文件上传多选或多个邮箱地址&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;autocomplete&lt;/code&gt; 自动完成（填充的）。on 开启（默认），off 取消。用于表单元素，也可用于表单自身(on/off)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;form&lt;/code&gt; 指定表单项属于哪个form，处理复杂表单时会需要&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;novalidate&lt;/code&gt; 关闭默认的验证功能（只能加给form）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;required&lt;/code&gt; 表示必填项&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;pattern&lt;/code&gt; 自定义正则，验证表单。例如&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代码举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        form &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 最大宽度*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;max-width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;640px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 最小宽度*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;min-width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;320px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-family:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Microsoft Yahei&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        input &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;legend&amp;gt;&lt;/span&gt;表单属性&lt;span class=&quot;kw&quot;&gt;&amp;lt;/legend&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            用户名：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; placeholder=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;例如：smyhvae&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; autofocus name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; autocomplete=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;on&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; required&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            电话：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;tel&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; pattern=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1\d{10}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            multiple的表单: &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; multiple&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 上传文件--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; multiple&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;表单事件&quot;&gt;表单事件&lt;/h3&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;oninput()&lt;/code&gt;：用户输入内容时触发，可用于输入字数统计。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;oninvalid()&lt;/code&gt;：验证不通过时触发。比如，如果验证不通过时，想弹出一段提示文字，就可以用到它。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        form &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 最大宽度*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;max-width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/* 最小宽度*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;min-width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-family:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Microsoft Yahei&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        input &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;legend&amp;gt;&lt;/span&gt;表单事件&lt;span class=&quot;kw&quot;&gt;&amp;lt;/legend&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            邮箱：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;txt1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            输入的次数统计：&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;txt2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; txt1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'txt1'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; txt2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'txt2'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;txt1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;oninput&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//用户输入时触发&lt;/span&gt;

        num&lt;span class=&quot;op&quot;&gt;++;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//用户每输入一次，num自动加 1&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//将统计数显示在txt2中&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;txt2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; num&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;txt1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;oninvalid&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//验证不通过时触发&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setCustomValidity&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'亲，请输入正确哦'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//设置验证不通过时的提示文字&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1920.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;多媒体&quot;&gt;多媒体&lt;/h2&gt;
&lt;p&gt;在HTML5之前，在网页上播放音频/视频的通用方法是利用Flash来播放。但是大多情况下，并非所有用户的浏览器都安装了Flash插件，由此使得音频、视频播放的处理变得非常复杂；并且移动设备的浏览器并不支持Flash插件。&lt;/p&gt;
&lt;p&gt;H5里面提供了视频和音频的标签。&lt;/p&gt;
&lt;h3 id=&quot;音频&quot;&gt;音频&lt;/h3&gt;
&lt;p&gt;HTML5通过&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;标签来解决音频播放的问题。&lt;/p&gt;
&lt;p&gt;使用举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;audio&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;music/yinyue.mp3&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; autoplay controls&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1958.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以通过附加属性，来更友好地控制音频的播放，如：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;autoplay&lt;/code&gt; 自动播放。写成&lt;code&gt;autoplay&lt;/code&gt; 或者 &lt;code&gt;autoplay = &quot;&quot;&lt;/code&gt;，都可以。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;controls&lt;/code&gt; 控制条。（建议把这个选项写上，不然都看不到控件在哪里）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;loop&lt;/code&gt; 循环播放。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;preload&lt;/code&gt; 预加载 同时设置 autoplay 时，此属性将失效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;处理兼容性问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于版权等原因，不同的浏览器可支持播放的格式是不一样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_1945.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了做到多浏览器支持，可以采取以下兼容性写法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!--推荐的兼容写法：--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;audio&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; controls loop&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;music/yinyue.mp3&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;music/yinyue.ogg&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;music/yinyue.wav&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    抱歉，你的浏览器暂不支持此音频格式
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码解释：如果识别不出音频格式，就弹出那句“抱歉”。&lt;/p&gt;
&lt;h3 id=&quot;视频&quot;&gt;视频&lt;/h3&gt;
&lt;p&gt;HTML5通过&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;标签来解决视频播放的问题。&lt;/p&gt;
&lt;p&gt;使用举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;video&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;video/movie.mp4&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; controls autoplay&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以通过附加属性，来更友好地控制视频的播放，如：&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;autoplay&lt;/code&gt; 自动播放。写成&lt;code&gt;autoplay&lt;/code&gt; 或者 &lt;code&gt;autoplay = &quot;&quot;&lt;/code&gt;，都可以。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;controls&lt;/code&gt; 控制条。（建议把这个选项写上，不然都看不到控件在哪里）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;loop&lt;/code&gt; 循环播放。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;preload&lt;/code&gt; 预加载 同时设置 autoplay 时，此属性将失效。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;width&lt;/code&gt;：设置播放窗口宽度。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;height&lt;/code&gt;：设置播放窗口的高度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由于版权等原因，不同的浏览器可支持播放的格式是不一样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180206_2025.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;兼容性写法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&amp;lt;video src=&quot;video/movie.mp4&quot; controls  autoplay &amp;gt;&amp;lt;/video&amp;gt;--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--  行内块 display:inline-block --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;video&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; controls autoplay&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;video/movie.mp4&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;video/movie.ogg&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;video/movie.webm&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        抱歉，不支持此视频
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dom-操作&quot;&gt;DOM 操作&lt;/h2&gt;
&lt;h3 id=&quot;获取元素&quot;&gt;获取元素&lt;/h3&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;document.querySelector(&quot;selector&quot;) 通过CSS选择器获取符合条件的第一个元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;document.querySelectorAll(&quot;selector&quot;) 通过CSS选择器获取符合条件的所有元素，以类数组形式存在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;类名操作&quot;&gt;类名操作&lt;/h3&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Node.classList.add(&quot;class&quot;) 添加class&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Node.classList.remove(&quot;class&quot;) 移除class&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Node.classList.toggle(&quot;class&quot;) 切换class，有则移除，无则添加&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Node.classList.contains(&quot;class&quot;) 检测是否存在class&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;自定义属性&quot;&gt;自定义属性&lt;/h3&gt;
&lt;p&gt;js 里可以通过 &lt;code&gt;box1.index=100;&lt;/code&gt; &lt;code&gt;box1.title&lt;/code&gt; 来自定义属性和获取属性。&lt;/p&gt;
&lt;p&gt;H5可以直接在标签里添加自定义属性，&lt;strong&gt;但必须以 &lt;code&gt;data-&lt;/code&gt; 开头&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 给标签添加自定义属性 必须以data-开头 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; title=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;盒子&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-my-name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;smyhvae&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;我是一个div&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;div&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'.box'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//自定义的属性 需要通过 dateset[]方式来获取&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dataset&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;&quot;content&quot;&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//打印结果：我是一个div&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dataset&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;&quot;myName&quot;&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//打印结果：smyhvae&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//设置自定义属性的值&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;num&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dataset&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;&quot;content&quot;&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;aaaa&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;我的公众号&quot;&gt;我的公众号&lt;/h2&gt;
&lt;p&gt;想学习&lt;span&gt;&lt;strong&gt;代码之外的软技能&lt;/strong&gt;&lt;/span&gt;？不妨关注我的微信公众号：&lt;strong&gt;生命团队&lt;/strong&gt;（id：&lt;code&gt;vitateam&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/2016040102.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 06 Feb 2018 13:06:00 +0000</pubDate>
<dc:creator>生命壹号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smyhvae/p/8424230.html</dc:identifier>
</item>
<item>
<title>vue项目中关于axios的简单使用 - 易墨</title>
<link>http://www.cnblogs.com/morang/p/8424032.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/morang/p/8424032.html</guid>
<description>&lt;h2 id=&quot;axios介绍&quot;&gt;axios介绍&lt;/h2&gt;
&lt;blockquote readability=&quot;3.6648648648649&quot;&gt;
&lt;p&gt;Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中&lt;br/&gt;官方仓库：&lt;a href=&quot;https://github.com/axios/axios&quot; class=&quot;uri&quot;&gt;https://github.com/axios/axios&lt;/a&gt;&lt;br/&gt;中文文档：&lt;a href=&quot;https://www.kancloud.cn/yunye/axios/234845&quot; class=&quot;uri&quot;&gt;https://www.kancloud.cn/yunye/axios/234845&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;axios在项目中vue的使用&quot;&gt;axios在项目中(vue)的使用&lt;/h2&gt;
&lt;p&gt;没有vue项目的&lt;a href=&quot;https://vuejs-templates.github.io/webpack/&quot;&gt;使用vue-cli脚手架生成一个webpack模板&lt;/a&gt;的项目即可愉快的看下去了~&lt;br/&gt;如果开发遇到跨域问题可以参考：&lt;a href=&quot;http://www.cnblogs.com/morang/p/8423763.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/morang/p/8423763.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装axios到项目中&quot;&gt;安装axios到项目中&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;npm install axios --save&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置wepack别名不同环境访问不同的配置接口&quot;&gt;配置wepack别名，不同环境访问不同的配置接口&lt;/h3&gt;
&lt;p&gt;配置：&lt;br/&gt;&lt;img src=&quot;https://dn-coding-net-production-pp.qbox.me/9dec9af5-337f-48cc-b815-1697b06430cc.png&quot; alt=&quot;图片&quot;/&gt;&lt;br/&gt;使用：&lt;code&gt;import config from 'config'&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;封装一个axios实例&quot;&gt;封装一个axios实例&lt;/h3&gt;
&lt;p&gt;新建&lt;code&gt;fetch.js&lt;/code&gt;,在此创建axios实例与过滤器&lt;/p&gt;
&lt;p&gt;若配置了代理。则config.apiBaseUrl则配置代理的前缀即可&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; config &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'config'&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'axios'&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// import qs from 'qs';&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; instance &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;axios&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;baseURL&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;apiBaseUrl&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// api的base_url&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;co&quot;&gt;// 请求超时时间&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// transformRequest: data =&amp;gt; qs.stringify(data) &lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;axios默认提交格式为：&lt;code&gt;application/json&lt;/code&gt;，转换后提交格式为&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;br/&gt;在asp.net core中，需要在action方法上添加&lt;code&gt;[FromBody]&lt;/code&gt;接收json格式的数据，正常的都是&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;故有此修改。&lt;br/&gt;按照使用需要安装&lt;code&gt;qs&lt;/code&gt;到项目中,可转换数据格式类型&lt;br/&gt;&lt;code&gt;npm install qs --save&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用qs转换请求对比图&quot;&gt;使用qs转换请求对比图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-coding-net-production-pp.qbox.me/befb566a-7b7d-4e34-b521-3f9cb17b9bd4.png&quot; alt=&quot;图片&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;给实例添加拦截器&quot;&gt;给实例添加拦截器&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 添加请求拦截器&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;instance&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;interceptors&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;request&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (config) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 在发送请求之前做些什么&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; config&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 对请求错误做些什么&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reject&lt;/span&gt;(error)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 添加响应拦截器&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;instance&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;interceptors&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (response) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 对响应数据做点什么&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 对响应错误做点什么&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reject&lt;/span&gt;(error)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;co&quot;&gt;// 最后暴露实例&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; instance&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;实例的调用&quot;&gt;实例的调用&lt;/h3&gt;
&lt;p&gt;若配置了express代理，请求路径为：浏览器-&amp;gt;express开发服务器-----发送请求----&amp;gt;接口服务器&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; fetch &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'fetch.js'&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//get&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'/home/data'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//完整的请求路径为fetch.js配置的baseURL+/home/data?pageIndex=1&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;pageIndex&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;//post&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;baseURL&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'/api/v1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//完整的请求路径为/api/v1/home/save&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'/home/save'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 06 Feb 2018 12:21:00 +0000</pubDate>
<dc:creator>易墨</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/morang/p/8424032.html</dc:identifier>
</item>
</channel>
</rss>