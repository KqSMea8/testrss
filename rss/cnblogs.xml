<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Linux.开关机&amp;登出&amp;用户管理 - MrChengs</title>
<link>http://www.cnblogs.com/Mrchengs/p/10014486.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mrchengs/p/10014486.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;关机重启：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;shutdown：&lt;/p&gt;
&lt;p&gt;        shutdown –h now 立该进行关机&lt;/p&gt;
&lt;p&gt;        shudown -h 1 &quot;hello, 1 分钟后会关机了&quot;&lt;/p&gt;
&lt;p&gt;        shutdown –r now 现在重新启动计算机&lt;/p&gt;

&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;halt             关机 ，作用和上面一样&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;reboot             现在重新启动计算机&lt;/p&gt;
&lt;p&gt;sync                 把内存的数据同步到磁盘（&lt;span&gt;一般关机之前执行一下&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;注意：不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 用户登陆和注销：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1) 登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可&lt;/p&gt;
&lt;p&gt;    以利用普通用户登录，登录后再用”&lt;span&gt;su - 用户名&lt;/span&gt;’命令来&lt;span&gt;切换成系统管理员身份.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2) 在提示符下输入 &lt;span&gt;logout&lt;/span&gt; 即可注销用户远程连接时即是退出连接&lt;/p&gt;
&lt;p&gt;注意：远程状态下&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012043861-23244198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;用户管理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向&lt;/p&gt;
&lt;p&gt;系统管理员申请一个账号，然后以这个账号的身份进入系统。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012232815-899986658.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012317268-1266087931.png&quot; alt=&quot;&quot; width=&quot;695&quot; height=&quot;117&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;添加用户：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;p&gt;useradd  [选项]   用户名   (可选项)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;细节说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1) 当创建用户成功后，会自动的创建和用户同名的家目录&lt;/p&gt;
&lt;p&gt;2) 也可以通过 useradd -d 指定目录 新的用户名，给新创建的用户指定家目录&lt;/p&gt;
&lt;p&gt;    指定目录的时候，不需要提前创建&lt;/p&gt;
&lt;p&gt;    useradd -d /home/xxx    XXX&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012452694-1082072617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012505390-2138033006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012520963-1988800699.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012625763-1086063014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时会自动创建一个新的目录，推荐使用此种方法&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 指定/修改密码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;p&gt;passwd  用户名&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012709551-1465332837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 删除用户&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;p&gt;userdel [可选参数] 用户名&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012739059-392002663.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012742745-1507882324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;细节说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;是否保留家目录的讨论？&lt;/p&gt;
&lt;p&gt;不建议删除家目录&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 查询用户信息指令&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;p&gt;            id 用户名&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012851940-1425693954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;切换用户&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;介绍&lt;/p&gt;
&lt;p&gt;在操作Linux中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如root&lt;/p&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;p&gt;&lt;span&gt;su – 切换用户名&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;细节说明&lt;/p&gt;
&lt;p&gt;1) 从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。&lt;/p&gt;
&lt;p&gt;2) 当需要返回到原来用户时，使用exit指令&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125012948611-1825737053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;查看当前用户/登录用户&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本语法&lt;/p&gt;
&lt;p&gt;            whoami/ who am I&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125013024063-1050160488.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt; 用户组&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;介绍&lt;/p&gt;
&lt;p&gt;    类似于角色，系统可以对有共性的多个用户进行统一的管理。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新增组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;指令&lt;/p&gt;
&lt;p&gt;        groupadd 组名&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125013125410-2088550953.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;删除组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;指令(基本语法)&lt;/p&gt;
&lt;p&gt;    groupdel 组名&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125013141238-1807762711.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;增加用户时直接加上组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;指令(基本语法)&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;useradd –g 用户组 用户名&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;增加一个用户 zwj, 直接将他指定到 wudang&lt;/p&gt;
&lt;p&gt;流程：&lt;/p&gt;
&lt;p&gt;先创建一个组&lt;/p&gt;
&lt;p&gt;在创建一个对象&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125013215761-492583274.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;修改用户的组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;• 指令(基本语法)&lt;/p&gt;
&lt;p&gt;usermod –g 用户组 用户名&lt;/p&gt;
&lt;p&gt; 此时组的id在原有基础上加1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125013319054-713311220.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 用户和组的相关文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/etc/passwd 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    用户（user）的配置文件，记录用户的各种信息&lt;/p&gt;
&lt;p&gt;    每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125013430858-885863918.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/etc/shadow 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      口令的配置文件每行的含义：&lt;/p&gt;
&lt;p&gt;　　登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125013521410-1764630420.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/etc/group 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    组(group)的配置文件，记录Linux包含的组的信息&lt;/p&gt;
&lt;p&gt;    每行含义：组名:口令:组标识号:组内用户列表&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181125013540384-1316724375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 24 Nov 2018 17:36:00 +0000</pubDate>
<dc:creator>MrChengs</dc:creator>
<og:description>关机重启： shutdown： shutdown –h now 立该进行关机 shudown -h 1 &quot;hello, 1 分钟后会关机了&quot; shutdown –r now 现在重</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mrchengs/p/10014486.html</dc:identifier>
</item>
<item>
<title>[原创]K8uac bypassUAC(Win7/Wi8/Win10) 过46款杀软影响所有Windows版本 - K8哥哥's_Blog</title>
<link>http://www.cnblogs.com/k8gege/p/10014478.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/k8gege/p/10014478.html</guid>
<description>&lt;p&gt;[原创]K8uac bypassUAC(Win7/Wi8/Win10) 过46款杀软影响所有Windows版本&lt;/p&gt;
&lt;p&gt;工具: k8uac&lt;br/&gt;编译: VC++&lt;/p&gt;
&lt;p&gt;作者:K8哥哥&lt;br/&gt;发布: 2018/11/25 1:30&lt;/p&gt;
&lt;p&gt;这是一个旧方法，近两年很多APT都有在使用，前几天测试发现依然可用。&lt;/p&gt;
&lt;p&gt;不但支持全系统而且还免杀,你让我上哪说理去。&lt;/p&gt;
&lt;p&gt;免杀报告:&lt;a href=&quot;http://r.virscan.org/language/en/report/2b1a19189b37d4f605b564c4e71227f6&quot; target=&quot;_blank&quot;&gt;http://r.virscan.org/language/en/report/2b1a19189b37d4f605b564c4e71227f6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;示例如下:&lt;/p&gt;
&lt;p&gt;C:\Users\K8team\Desktop&amp;gt;k8uac&lt;br/&gt;BypassUAC (Win7/Win8/Win10) by K8哥哥&lt;br/&gt;useage:k8uac cmdline&lt;/p&gt;&lt;p&gt;C:\Users\K8team\Desktop&amp;gt;k8uac &quot;net user k8test k8test /add&quot;&lt;br/&gt;BypassUAC (Win7/Win8/Win10) by K8哥哥&lt;br/&gt;success!&lt;br/&gt;0操作成功完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1463611/201811/1463611-20181125011356083-847881226.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 下载：&lt;a href=&quot;https://files.cnblogs.com/files/k8gege/k8uac_20181125%5BK8%5D.rar&quot; target=&quot;_blank&quot;&gt;https://files.cnblogs.com/files/k8gege/k8uac_20181125%5BK8%5D.rar&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 17:17:00 +0000</pubDate>
<dc:creator>K8哥哥&amp;#39;s_Blog</dc:creator>
<og:description>[原创]K8uac bypassUAC(Win7/Wi8/Win10) 过46款杀软影响所有Windows版本 工具: k8uac编译: VC++ 作者:K8哥哥发布: 2018/11/25</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/k8gege/p/10014478.html</dc:identifier>
</item>
<item>
<title>@Autowired注入为null问题分析 - 吃鱼不挑刺</title>
<link>http://www.cnblogs.com/cat-/p/10014477.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cat-/p/10014477.html</guid>
<description>&lt;h3&gt;&lt;span&gt;&lt;strong&gt; 2018-11-24 22:57:33&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;问题说明&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;最近看到Spring事务,在学习过程中遇到一个很苦恼问题                                                  &lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;搭建好Spring的启动环境后出现了一点小问题&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;在启动时候却出现[java.lang.NullPointerException]&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;不过因为当时一个小小的疏忽 很low的问题 请往下看 ... &lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;工程结构&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1290679/201811/1290679-20181124234623256-340915256.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;代码片段&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;spring.xml&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ed8af2c3-3ea5-4992-a215-d0f93605e837&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed8af2c3-3ea5-4992-a215-d0f93605e837&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed8af2c3-3ea5-4992-a215-d0f93605e837&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/beans
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/beans/spring-beans.xsd
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/context
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring注解扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 1. 数据源对象: C3P0连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        class&lt;/span&gt;&lt;span&gt;=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driverClass&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;org.h2.Driver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbcUrl&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            value&lt;/span&gt;&lt;span&gt;=&quot;jdbc:h2:tcp://192.168.190.1/~/test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;sa&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;123&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 2. JdbcTemplate工具类实例 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;jdbcTemplate&quot;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 3.配置事务 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSourceTransactionManager&quot;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Spring.xml&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; Test.java&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         ClassPathXmlApplicationContext classPathXmlApplicationContext = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ClassPathXmlApplicationContext(
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                 &quot;spring.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         ServiceIF service = (ServiceIF) classPathXmlApplicationContext.getBean(&quot;serviceImpl&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         service.add(&quot;小王&quot;, 23&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;TransactionUtil.java&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c079fc0b-538f-430f-a173-6f64ecfbaaf0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c079fc0b-538f-430f-a173-6f64ecfbaaf0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c079fc0b-538f-430f-a173-6f64ecfbaaf0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @Component(&quot;transactionUtil&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TransactionUtil {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     * 初始化数据源
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; DataSourceTransactionManager dataSourceTransactionManager;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * 开启事务
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TransactionStatus begin() {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         TransactionStatus transaction = dataSourceTransactionManager.getTransaction(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultTransactionDefinition());
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         System.out.println(&quot; 开启事务成功 &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; transaction;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;     * 提交事物
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; transaction
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; commit(TransactionStatus transaction) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        dataSourceTransactionManager.commit(transaction);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         System.out.println(&quot; 事物提交成功 &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;     * 回滚事务
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;     * 
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; transaction
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rollback(TransactionStatus transaction) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        dataSourceTransactionManager.rollback(transaction);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         System.err.println(&quot; 事物进行回滚 &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;TransactionUtil.java&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;ServiceImpl.java&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @Service(&quot;serviceImpl&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ServiceIF {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    TransactionUtil transactionUtil;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; TransactionStatus transactionStatus = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; add(String name, Integer age) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         transactionStatus =&lt;span&gt; transactionUtil.begin();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DaoImpl().add(name, age);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            transactionUtil.commit(transactionStatus);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             System.err.println(&quot;ERROR &amp;gt;&amp;gt;&amp;gt; 执行出现异常 即将进行回滚操作&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            transactionUtil.rollback(transactionStatus);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;DaoImpl.java&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1 &lt;span&gt;public &lt;span&gt;class DaoImpl &lt;span&gt;implements&lt;span&gt; DaoIF{
&lt;span&gt; 2 
&lt;span&gt; 3     &lt;span&gt;/**
&lt;span&gt; 4 &lt;span&gt;     * 注入jdbc模板类
&lt;span&gt; 5      &lt;span&gt;*/
&lt;span&gt; 6 &lt;span&gt;    @Autowired
&lt;span&gt; 7     &lt;span&gt;private&lt;span&gt; JdbcTemplate jdbcTemplate;
&lt;span&gt; 8 
&lt;span&gt; 9     &lt;span&gt;/**
&lt;span&gt;10 &lt;span&gt;     * 第一条插入语句
&lt;span&gt;11      &lt;span&gt;*/
&lt;span&gt;12     &lt;span&gt;private &lt;span&gt;final String SQL_INSERT_01 = &quot;insert into user values (?,?)&quot;&lt;span&gt;;
&lt;span&gt;13 
&lt;span&gt;14     &lt;span&gt;/**
&lt;span&gt;15 &lt;span&gt;     * 添加sql执行
&lt;span&gt;16 &lt;span&gt;     * 
&lt;span&gt;17 &lt;span&gt;     * &lt;span&gt;@param&lt;span&gt; name
&lt;span&gt;18 &lt;span&gt;     * &lt;span&gt;@param&lt;span&gt; age
&lt;span&gt;19      &lt;span&gt;*/
&lt;span&gt;20     &lt;span&gt;public &lt;span&gt;void&lt;span&gt; add(String name, Integer age) {
&lt;span&gt;21 &lt;span&gt;        jdbcTemplate.update(SQL_INSERT_01, name, age);
&lt;span&gt;22 &lt;span&gt;    }
&lt;span&gt;23 }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;运行结果&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1290679/201811/1290679-20181125000745957-1836635837.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt; 问题分析&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1290679/201811/1290679-20181125001319236-729363917.png&quot; alt=&quot;&quot; width=&quot;627&quot; height=&quot;471&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;解决思路&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;我在想 为什么会没有注入进来呢 我明明加了@Autowired注解&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;后来猜到可能是Spring.xml配置的问题&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;看完也没有问题 我就从Java Source一步一步看 发现....&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1290679/201811/1290679-20181125011024096-1968551561.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;我靠 我就猜测是不是如果&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;用「new Object()」的方式创建实例后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;&lt;span&gt;其class中的Bean的注解会失效&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;呢?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;然后我尝试在ServiceImpl.java中以注解的方式把DaoIF的实例注入到ServiceImpl，&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;并在DaoImpl.java的类上面添加@Repository，&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;把ServiceImpl.java中new DaoImpl()替换成注入的daoImpl。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;改修代码&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;ServiceImpl.java修改后&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1290679/201811/1290679-20181125003241717-2083166733.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;DaoImpl.java修改后&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1290679/201811/1290679-20181125003631042-683967834.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;改修后调试&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1290679/201811/1290679-20181125004455531-1931620048.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1290679/201811/1290679-20181125004322679-1910310478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;其实我懂得也不太多 Spring注入的流程那&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;首先他会把项目中target -&amp;gt; classes 目录下的「.class」文件进行解析&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;通过Spring.xml中的「context:component-scan」进行注解&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;扫描&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;如果这个路径下的「.class」文件的类上面是否存在@Component声明的注解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;如果被此类注解修饰,Spring会把所有被注解修饰的bean进行实例化操作  供给@Autowired进行注入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;(在spring注解的源码中@Service和@Repository等等都继承了@Component注解)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  结论 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;在使用Spring的Bean容器时 千万要确保&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;                配置的注解扫描路径正确&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;                J&lt;/strong&gt;&lt;/span&gt;ar的依赖是否存在&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;                是否在bean的上面加「＠Service　@Repository　@Component　…　」&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;               要细心 遇到异常不要紧 慢慢分析!!!&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;谢谢你这么忙还来我的看我的博客奥&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;如果有哪些地方写的不好希望能够指出!&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;为了变得更强 一起加油吧～&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;







</description>
<pubDate>Sat, 24 Nov 2018 17:16:00 +0000</pubDate>
<dc:creator>吃鱼不挑刺</dc:creator>
<og:description>2018-11-24 22:57:33 问题说明 最近看到Spring事务,在学习过程中遇到一个很苦恼问题 搭建好Spring的启动环境后出现了一点小问题 在启动时候却出现[java.lang.Nul</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cat-/p/10014477.html</dc:identifier>
</item>
<item>
<title>kafka全部数据清空与某一topic数据清空 - 牧梦者</title>
<link>http://www.cnblogs.com/swordfall/p/10014300.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/swordfall/p/10014300.html</guid>
<description>&lt;p&gt;kafka全部数据清空的步骤为：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;停止每台机器上的kafka；&lt;/li&gt;
&lt;li&gt;删除kafka存储目录（server.properties文件log.dirs配置，默认为“/tmp/kafka-logs”）全部topic的数据目录；&lt;/li&gt;
&lt;li&gt;删除zookeeper上与kafka相关的znode节点；&lt;/li&gt;
&lt;li&gt;重启kafka、如果删除topic还在则需要重启zookeeper；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里以192.168.187.201 node1、192.168.187.202 node2、192.168.187.203 node3三台机器作为kafka的集群。&lt;/p&gt;
&lt;p&gt;注意：kafka版本为kafka_2.11-1.1.1&lt;/p&gt;
&lt;h2&gt;1.1 停止每台机器上的kafka&lt;/h2&gt;
&lt;p&gt;以root用户分别登录三台机器，使用命令&lt;em&gt;jps &lt;/em&gt;找出kafka的PID，再使用命令&lt;em&gt; kill&lt;/em&gt; kafka进程。&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 节点node1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124230352303-2049111997.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;节点node2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124230604840-853454566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;节点node3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124230801688-49494632.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.2 删除kafka存储目录&lt;/h2&gt;
&lt;p&gt;在kafka安装目录的config文件夹下server.properties中查看存储目录为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124231905898-1028471428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;删除该目录所有数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124232013087-1166111535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124232116611-1659435898.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124232159767-1296313895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.3 删除zookeeper上与kafka相关的znode节点&lt;/h2&gt;
&lt;p&gt;zookeeper上面保存着kafka的所有topic及其消费信息，故需要删除与kafka相关的znode节点：&lt;/p&gt;
&lt;p&gt;进入zookeeper的shell界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124232558053-413681242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看与kafka相关的znode节点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124233936717-1791540859.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在上面的znode节点中，除了zookeeper作为zk的安全保障措施，其他znode节点都得删除 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124233616030-1658716067.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.4 重启kafka&lt;/h2&gt;
&lt;p&gt;分别在node1、node2、node3上面执行如下命令启动kafka：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;/opt/app/kafka_2.11-1.1.1/bin/kafka-server-start.sh /opt/app/kafka_2.11-1.1.1/config/server.properties &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;jps&lt;/em&gt;命令查看node1、node2、node3上面的启动情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124234414705-1069369616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124234443997-38484802.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124234458986-1326839643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后在查看kafka上面是否还有topic存在：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124234641324-1532703507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到topic及其相关数据已被清空删除&lt;/p&gt;

&lt;p&gt;查看当前所有topic&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124234837316-1278266344.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181125000359591-1820181582.png&quot; alt=&quot;&quot; width=&quot;657&quot; height=&quot;115&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比如目前需要删除test这一topic，目前kafka_2.11-1.1.1以上版本默认delete.topic.enable=true，即是说使用命令&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;./kafka-topics.sh --zookeeper node1:2181 --delete --topic test&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;该命令将会在zookeeper中删除与test这一topic相关的znode节点（包括test详细信息、生产数据、消费数据的节点），并在kafka的存储目录/opt/data/kafka/kafka-logs/下把与test这一topic相关的存储数据目录标记为待删除，稍后会真正删除这些待删除的目录，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124235634498-1520342452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用kafka-topics.sh查看test在zookeeper中相关znode节点信息是否已被删除&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181125000145373-1805029236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在/opt/data/kafka/kafka-logs目录下查看test相关存储目录是否被标记删除&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124235751959-368041425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在/opt/data/kafka/kafka-logs目录下查看test相关存储目录已被删除&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1217276/201811/1217276-20181124235845962-1152346598.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;kafka全部数据清空步骤比较繁琐，借鉴某一topic数据清空的方式，可以通过使用kafka-topics.sh --delete命令逐个删除所有的topic，达到清空kafka全部topic数据的目的，不足的是topic“__consumer_offsets”无法删除，不过不碍事。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/belalds/article/details/80575751&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 16:15:00 +0000</pubDate>
<dc:creator>牧梦者</dc:creator>
<og:description>1. Kafka全部数据清空 kafka全部数据清空的步骤为： 这里以192.168.187.201 node1、192.168.187.202 node2、192.168.187.203 node3</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/swordfall/p/10014300.html</dc:identifier>
</item>
<item>
<title>【ABP框架系列学习】模块系统(4) - 大龄Giser</title>
<link>http://www.cnblogs.com/OlderGiser/p/10014200.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/OlderGiser/p/10014200.html</guid>
<description>&lt;p&gt;ABP提供了构建模块和通过组合模块以创建应用程序的基础设施。一个模块可以依赖于另外一个模块。通常，程序集可以认为是模块。如果创建多个程序集的应用程序，建议为每个程序集创建模块定义。&lt;/p&gt;
&lt;p&gt;当前，模块系统主要集中在服务器，而不是客户端。&lt;/p&gt;

&lt;p&gt;模块是从ABP包中的&lt;strong&gt;AbpModule&lt;/strong&gt;派生的类定义的。比如说开发一个可以用于不同应用程序的博客模块(Blog Module)。最简单的模块定义如下 ：&lt;/p&gt;

&lt;p&gt;模块定义类负责通过依赖注入注册类，如有必要(可以像上述事例按惯例完成)。它还可以配置应用程序和其它模块，给应用程序增加新的功能等等。&lt;/p&gt;

&lt;p&gt;ABP在程序启动和关闭时调用模块一些特定的方法。你可以重写这些方法以执行某些特定的任务。&lt;/p&gt;
&lt;p&gt;ABP按照依赖顺序调用这些方法。如果模块A依赖模块B，那么模块B在模块A之前初始化。&lt;/p&gt;
&lt;p&gt;启动方法执行准确的顺序：PreInitialize-B, PreInitialize-A, Initialize-B, Initialize-A, PostInitialize-B, PostInitialize-A。对于所有依赖关系图都是如此。关闭方法也是类似的，但顺序相反。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;相关源码：&lt;/span&gt;模块启动时依次执行PreInitialize()、Initialize()、PostInitialize()，模块关闭时首先Reverse()、然后在逐个模块Shutdown()。&lt;/p&gt;

&lt;h2&gt;PreInitialize&lt;/h2&gt;
&lt;p&gt;当应用程序启动时，首先调用该方法。它是框架和其它模块初始化之前配置它们的首选方法。&lt;/p&gt;
&lt;p&gt;你还可以在该方法中编写特定的代码，以便在依赖注入注册之前运行。例如，如果你创建一个传统的注册类，那么你应在该方法中使用IOCManager.AddConventionalRegisterer方法注册它们。&lt;/p&gt;
&lt;h2&gt;Initialize&lt;/h2&gt;
&lt;p&gt;该方法是依赖注入注册的地方，通过使用IocManager.RegisterAssemblyByConvention方法完成注册。如果想定义自定义的依赖注册，请见后续依赖注入章节。&lt;/p&gt;
&lt;h2&gt;PostInitialize&lt;/h2&gt;
&lt;p&gt;该方法在程序启动的最后调用。在这里解析依赖是安全的。&lt;/p&gt;
&lt;h2&gt;Shutdown&lt;/h2&gt;
&lt;p&gt;该方法在程序关闭时调用。&lt;/p&gt;

&lt;p&gt;一个模块可以依赖于另外的模块。你可以通过&lt;strong&gt;DependsOn&lt;/strong&gt;特性显示声明依赖项，如下代码：&lt;/p&gt;

&lt;p&gt;上述事例代码中，声明了MyBlogApplicationModule模块依赖于MyBlogCoreModule模块，那么MyBlogCoreModule模块应该在MyBlogApplicationModule模块之前完成初始化。&lt;/p&gt;
&lt;p&gt;ABP可以从启动模块(start module)开始就递归的解析依赖关系，并相应地初始化它们。启动模块(start module)是最后进行初始化的模块。&lt;/p&gt;

&lt;p&gt;虽然模块从启动模块开始查找并遍历依赖关系，ABP还可以动态加载模块。&lt;strong&gt;AbpBootstrapper&lt;/strong&gt;类中定义了&lt;strong&gt;PlugInSources&lt;/strong&gt;属性，该属性可用于向动态加载的插件模块添加源。插件源可以是实现&lt;strong&gt;IPlugInSource&lt;/strong&gt;接口的任何类。通过实现&lt;strong&gt;FolderPlugInSource&lt;/strong&gt;类以从指定文件夹中的程序集获取插件模块。&lt;/p&gt;
&lt;h2&gt;ASP.NET CORE&lt;/h2&gt;
&lt;p&gt;ABP中ASP.NET CORE模块在&lt;strong&gt;AddAbp&lt;/strong&gt;扩展方法中定义选项，用于在启动类中添加插件源：&lt;/p&gt;

&lt;p&gt;也可以使用更简单的语法AddFolder扩展方法：&lt;/p&gt;


&lt;p&gt;对于传统的ASP.NET MVC应用程序，可以通过重写&lt;strong&gt;global.asax&lt;/strong&gt;文件中&lt;strong&gt;Application_Start&lt;/strong&gt;方法添加插件文件夹，如下代码：&lt;/p&gt;

&lt;h3&gt;Controllers in PlugIns&lt;/h3&gt;
&lt;p&gt;如果你的模块包括MVC或Web API Controolers，ASP.NET不能查找你的控制器。为了克服这个问题，你可以修改global.asax文件，如下代码：&lt;/p&gt;


&lt;p&gt;默认实现IAssemblyFinder和ITypeFinder接口只能在这些程序集中查找模块程序集和类型。也可以在模块中重写&lt;strong&gt;GetAdditionalAssembliesy&lt;/strong&gt;方法来包括其它程序集。&lt;/p&gt;

&lt;p&gt;你的模块还可以拥有自定义的方法，并能在依赖于这个模块的其它模块中调用这个方法。假设MyModule2依赖于MyModule1，并想在PreInitialize方法中调用MyModule1模块中的方法。&lt;/p&gt;

&lt;p&gt;在上述代码中，通过构造函数把MyModule1注入到MyModule2，所以MyModule2可以调用MyModule1中的自定义方法，前提是MyModule2依赖于MyModule1。&lt;/p&gt;

&lt;p&gt;然而自定义方法可以用来配置模块，建议使用启动配置(&lt;a href=&quot;https://aspnetboilerplate.com/Pages/Documents/Startup-Configuration&quot; data-cke-saved-href=&quot;https://aspnetboilerplate.com/Pages/Documents/Startup-Configuration&quot;&gt;startup configuration&lt;/a&gt;)系统来定义和设置模块的配置。&lt;/p&gt;

&lt;p&gt;模块类自动注册为单实例对象(singleton)。&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 15:51:00 +0000</pubDate>
<dc:creator>大龄Giser</dc:creator>
<og:description>0.引言 ABP提供了构建模块和通过组合模块以创建应用程序的基础设施。一个模块可以依赖于另外一个模块。通常，程序集可以认为是模块。如果创建多个程序集的应用程序，建议为每个程序集创建模块定义。 当前，模</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/OlderGiser/p/10014200.html</dc:identifier>
</item>
<item>
<title>go web开发(gin&amp;gorm) 之DB配置及DAO的基本使用 - funnyZpC</title>
<link>http://www.cnblogs.com/funnyzpc/p/9501376.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/funnyzpc/p/9501376.html</guid>
<description>&lt;p&gt;&lt;span&gt;转载请注明出处:&lt;/span&gt; &lt;a href=&quot;https://www.cnblogs.com/funnyzpc/p/9501376.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/funnyzpc/p/9501376.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;　  我先闲扯下，前天(也就是2018年11月16号)的某个时候，忽然有人在QQ上私聊我，一看是公司群以为是有人来慰问新人了，也没弄清楚身份就调侃起来，就这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1161789/201811/1161789-20181118175302311-1049280882.png&quot; alt=&quot;&quot; width=&quot;630&quot; height=&quot;291&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题是：我竟傻乎乎滴没看出来是行政那边的人，中午吃饭的时候和老同事聊起此事，才知道这位大锅是人事部boss，一时间感觉事情变得搞笑起来，当然，有意思的还不止这一件，就在两周前入职的时候，当时是复试，行政总监把车开到我之前公司楼下接我，出发到现场前给我买了杯咖啡，我说美式中杯就好了，这人说怎么也得大杯，面试过了后，到晚上，这人又发朋友圈说他兴奋的狠。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1161789/201811/1161789-20181118180552846-834166230.jpg&quot; alt=&quot;&quot; width=&quot;403&quot; height=&quot;716&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说实话，二当家也真够zuo的。。。😅，当然这伙计在我第一面的时候就闲聊了一个多小时，还不止，他竟然知道我小名😓&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;闲聊到这儿，现在就进入本次的主题：&lt;strong&gt;&lt;span&gt;golang web开发之Dao配置&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在正式进入主题前，先说说框架的现状，个人用的是gin-gonic框架，这是个在校大学生写的基于go语言的高性能web框架，在此之前我对比过beego 、 iris 、gin-gonic这几个在维护频度和依赖支持以及star热度方面，个人选择了gin-gonic这个框架 ，同时也在github上选用了一套比较前卫的成型的框架代码，东西十分的好，但是个人觉得框架集成的mysql实在是看不下去(主要是性能低了+ 稳定性不够好+升级麻烦)，遂就将数据库换成postgresql，配置完成就开始测试Dao，需要说的是其中gorm是位台湾胸弟写的ORM框架，于是开始~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　且先不管现有的mysql的配置，由于框架本身只集成了mysql，所以现在需要安装一个pg的连接driver，放到指定的目录就装好依赖了，至于怎么安装，大致有二。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;A&amp;gt;其一是使用go命令直接安装&lt;/span&gt;&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; go get -u github.com/lib/pq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;B&amp;gt;其二是跟我一样keng地手动安装&lt;/span&gt;&lt;/strong&gt;，就是找到github.com的源码页面，将整个项目以一个zip包下载下来，而后解压到指定目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要注意的是&lt;span&gt;手动安装一定要将github.com后面的路径改成以目录为结构的包地址&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　连接组件安装完毕开始写一个db.go的数据库初始化类和一个参数结构体，这里我给出源码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数结构体：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; config
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;     &quot;encoding/json&quot;
&lt;span&gt;  5&lt;/span&gt;     &quot;fmt&quot;
&lt;span&gt;  6&lt;/span&gt;     &quot;io/ioutil&quot;
&lt;span&gt;  7&lt;/span&gt;     &quot;os&quot;
&lt;span&gt;  8&lt;/span&gt;     &quot;regexp&quot;
&lt;span&gt;  9&lt;/span&gt;     &quot;strings&quot;
&lt;span&gt; 10&lt;/span&gt;     &quot;unicode/utf8&quot;
&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt;     &quot;github.com/shen100/golang123/utils&quot;
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt; var jsonData map[string]&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;{}
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;func initJSON() {
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     bytes, err := ioutil.ReadFile(&quot;./config.json&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         fmt.Println(&quot;ReadFile: &quot;&lt;span&gt;, err.Error())
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         os.Exit(-1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; 
&lt;span&gt; 24&lt;/span&gt;     configStr :=&lt;span&gt; string(bytes[:])
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     reg := regexp.MustCompile(`/\*.*\*/&lt;span&gt;`)
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt;     configStr = reg.ReplaceAllString(configStr, &quot;&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     bytes = []&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;(configStr)
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; err := json.Unmarshal(bytes, &amp;amp;jsonData); err !=&lt;span&gt; nil {
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         fmt.Println(&quot;invalid config: &quot;&lt;span&gt;, err.Error())
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         os.Exit(-1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;type dBConfig struct {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;    Dialect      string
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    Database     string
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;    User         string
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;    Password     string
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;    Host         string
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     Port         &lt;span&gt;int&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;    Charset      string
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;    URL          string
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     MaxIdleConns &lt;span&gt;int&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;     MaxOpenConns &lt;span&gt;int&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;    ConnMaxLifetime int64
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    Sslmode         string
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; 
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DBConfig 数据库相关配置&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;var DBConfig dBConfig
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;func initDB() {
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;     utils.SetStructByJSON(&amp;amp;DBConfig, jsonData[&quot;database&quot;].(map[string]&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;{}))
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;        mysql数据库的连接方式
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;    url := fmt.Sprintf(&quot;%s:%s@tcp(%s:%d)/%s?charset=%s&amp;amp;parseTime=True&amp;amp;loc=Local&quot;,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        DBConfig.User, DBConfig.Password, DBConfig.Host, DBConfig.Port, DBConfig.Database, DBConfig.Charset)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        更改mysql数据库为postgresql
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        具体连接方式为&amp;gt;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;            host=myhost port=myport user=gorm dbname=gorm password=mypassword
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;     url := fmt.Sprintf(&quot;host=%s port=%d user=%s dbname=%s password=%s sslmode=%s&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        DBConfig.Host,
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;        DBConfig.Port,
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        DBConfig.User,
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;        DBConfig.Database,
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        DBConfig.Password,
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        DBConfig.Sslmode)
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;     DBConfig.URL =&lt;span&gt; url
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;type serverConfig struct {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;    APIPoweredBy       string
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    SiteName           string
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;    Host               string
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    ImgHost            string
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;    Env                string
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;    LogDir             string
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;    LogFile            string
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    APIPrefix          string
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;    UploadImgDir       string
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;    ImgPath            string
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;     MaxMultipartMemory &lt;span&gt;int&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;     Port               &lt;span&gt;int&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;    StatsEnabled       bool
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    TokenSecret        string
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     TokenMaxAge        &lt;span&gt;int&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    PassSalt           string
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    LuosimaoVerifyURL  string
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    LuosimaoAPIKey     string
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    CrawlerName        string
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     MailUser           string &lt;span&gt;//&lt;/span&gt;&lt;span&gt;域名邮箱账号&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;     MailPass           string &lt;span&gt;//&lt;/span&gt;&lt;span&gt;域名邮箱密码&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;     MailHost           string &lt;span&gt;//&lt;/span&gt;&lt;span&gt;smtp邮箱域名&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;     MailPort           &lt;span&gt;int&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;smtp邮箱端口&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;     MailFrom           string &lt;span&gt;//&lt;/span&gt;&lt;span&gt;邮件来源&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    Github             string
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;    BaiduPushLink      string
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;func init() {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;    initJSON()
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;    initDB()
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;连接地址一定要根据所使用的orm框架来拼接相应的连接地址才对，这算是一个&lt;strong&gt;&lt;span&gt;坑&lt;/span&gt;&lt;/strong&gt;，下面这个是gorm的官方文档以作参考&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;doc.gorm.io/database.html#connecting-to-a-database&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1161789/201811/1161789-20181118185211238-1842500248.png&quot; alt=&quot;&quot; width=&quot;1022&quot; height=&quot;369&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;db.go初始化&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; model
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; (
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &quot;fmt&quot;
&lt;span&gt; 5&lt;/span&gt;     &quot;os&quot;
&lt;span&gt; 6&lt;/span&gt;     &quot;time&quot;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &quot;github.com/garyburd/redigo/redis&quot;
&lt;span&gt; 9&lt;/span&gt;     &quot;github.com/globalsign/mgo&quot;
&lt;span&gt;10&lt;/span&gt;     &quot;github.com/jinzhu/gorm&quot;
&lt;span&gt;11&lt;/span&gt;     _ &quot;github.com/jinzhu/gorm/dialects/postgres&quot;
&lt;span&gt;12&lt;/span&gt;     &quot;github.com/shen100/golang123/config&quot;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DB 数据库连接&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; var DB *&lt;span&gt;gorm.DB
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;var ERR error
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;func initDB() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     DB, ERR =&lt;span&gt;&lt;strong&gt;&lt;span&gt; gorm.Open&lt;/span&gt;&lt;/strong&gt;(config.DBConfig.Dialect, config.DBConfig.URL)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ERR !=&lt;span&gt; nil {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        fmt.Println(ERR.Error())
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         os.Exit(-1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; config.ServerConfig.Env ==&lt;span&gt; DevelopmentMode {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         DB.LogMode(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    DB.DB().SetMaxIdleConns(config.DBConfig.MaxIdleConns)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    DB.DB().SetMaxOpenConns(config.DBConfig.MaxOpenConns)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        禁用表名复数&amp;gt;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        !!!如不禁用则会出现表 y结尾边ies的问题
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        !!!如果只是部分表需要使用源表名，请在实体类中声明TableName的构造函数
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    ```
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        func (实体名) TableName() string {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            return &quot;数据库表名&quot;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    ```
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     DB.SingularTable(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;db.DB().SetConnMaxLifetime(config.DBConfig.ConnMaxLifetime)&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;func init() {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    initDB()&lt;/span&gt;&lt;br/&gt;&lt;span&gt;49&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的初始化就是&lt;span&gt;调用 gorm.Open 方法来打开db的连接&lt;/span&gt;，连接正常打开后设置连接池(&lt;span&gt;空闲连接数、最大连接数&lt;/span&gt;)，到这儿基本就完成了，不过，需要注意到的是：&lt;strong&gt;&lt;span&gt;gorm默认的结构体映射是复数形式&lt;/span&gt;&lt;/strong&gt;，比如你的博客表为blog，对应的结构体名就会是blogs，同时若表名为多个单词，&lt;strong&gt;&lt;span&gt;对应的model结构体名字必须是驼峰式&lt;/span&gt;&lt;/strong&gt;，首字母也必须大写，可能不太理解gorm的命名方式，个人也是被这个逻辑给折腾的不轻，查官方资料才知道需要配置一个参数，&lt;strong&gt;&lt;span&gt;以实现结构体名为非复数形式：DB.SingularTable(true); 默认不设置的时候就是false&lt;/span&gt;&lt;/strong&gt;；这是一坑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　好了，结构体设置完成就需要在mian.go（启动类）中引入这两个文件所在的package (包)；像这样&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1161789/201811/1161789-20181118200351671-946799466.png&quot; alt=&quot;&quot; width=&quot;1012&quot; height=&quot;683&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为个人在启动方法中使用到这两个包的相关方法，所以是正常引入，&lt;span&gt;若是当前文件内没有使用到，请在包的引号前加一个 &quot;&lt;strong&gt;_&lt;/strong&gt;&quot; ，以表示自动调用相关包内的init方法&lt;/span&gt;(因为在main中使用过，故也会自动调用包内的init方法)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　db的基本配置已经完成了，启动main.go若无报错，则配置成功~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　配置完成得测试下，Dao的调用，以及在结构体内配置相关映射参数，以及实现主键自增(很重要，里面有&lt;strong&gt;&lt;span&gt;坑&lt;/span&gt;&lt;/strong&gt;)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里本人用的是本人已经写完的一个业务来测试，简要的介绍下gorm的配置参数以及Dao的调用方式方法~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　 通过对象的方式操作数据表时，必须要有个model的结构体和数据库表结构，这里我给一个结构体的go代码和表结构的截图&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;结构体：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; model

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; &quot;time&quot;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Article 文章&lt;/span&gt;
&lt;span&gt;type Article struct {
    ID            uint       `&lt;span&gt;&lt;strong&gt;gorm&lt;/strong&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;primary_key&quot; &lt;strong&gt;sql&lt;/strong&gt;:&quot;auto_increment;primary_key;unique&quot; &lt;strong&gt;json&lt;/strong&gt;:&quot;id&quot;&lt;/span&gt;&lt;span&gt;`
    CreatedAt     time.Time  `json:&lt;/span&gt;&quot;createdAt&quot;&lt;span&gt;`
    UpdatedAt     time.Time  `json:&lt;/span&gt;&quot;updatedAt&quot;&lt;span&gt;`
    DeletedAt     &lt;/span&gt;*time.Time `sql:&quot;index&quot; json:&quot;deletedAt&quot;&lt;span&gt;`
    Name          string     `json:&lt;/span&gt;&quot;name&quot;&lt;span&gt;`
    BrowseCount   uint       `json:&lt;/span&gt;&quot;browseCount&quot;&lt;span&gt;`
    CommentCount  uint       `json:&lt;/span&gt;&quot;commentCount&quot;&lt;span&gt;`
    CollectCount  uint       `json:&lt;/span&gt;&quot;collectCount&quot;&lt;span&gt;`
    Status        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;        `json:&quot;status&quot;&lt;span&gt;`
    Content       string     `json:&lt;/span&gt;&quot;content&quot;&lt;span&gt;`
    HTMLContent   string     `json:&lt;/span&gt;&quot;htmlContent&quot;&lt;span&gt;`
    ContentType   &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;        `json:&quot;contentType&quot;&lt;span&gt;`
    Categories    []Category `gorm:&lt;/span&gt;&quot;many2many:article_category;ForeignKey:ID;AssociationForeignKey:ID&quot; json:&quot;categories&quot;&lt;span&gt;`
    Comments      []Comment  `gorm:&lt;/span&gt;&quot;ForeignKey:SourceID&quot; json:&quot;comments&quot;&lt;span&gt;`
    UserID        uint       `json:&lt;/span&gt;&quot;userID&quot;&lt;span&gt;`
    User          User       `json:&lt;/span&gt;&quot;user&quot;&lt;span&gt;`
    LastUserID    uint       `json:&lt;/span&gt;&quot;lastUserID&quot;` &lt;span&gt;//&lt;/span&gt;&lt;span&gt;最后一个回复话题的人&lt;/span&gt;
    LastUser      User       `json:&quot;lastUser&quot;&lt;span&gt;`
    LastCommentAt &lt;/span&gt;*time.Time `json:&quot;lastCommentAt&quot;&lt;span&gt;`
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;数据库表结构&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1161789/201811/1161789-20181124222127739-347678005.png&quot; alt=&quot;&quot; width=&quot;941&quot; height=&quot;735&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于postgresql的特殊性，在构建表的时候主键ID必须是&lt;span&gt;serial类型&lt;/span&gt;才会在结构保存的时候生成一个主键自增的触发器，主键在表结构保存后就是int类型，这是一坑(当然也只有在postgresql中存在)，不论用的是oracleDB还是mySqlDB亦或是PostgreSQLDB，实现主键自增都需要(至少)设置一个主键。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　再就是表结构对应的代码结构体(Model类或实体类)，配置的时候一定要注意，一定要定义字段参数标签，标签就目前用到的一共有三类：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;gorm标签&lt;/strong&gt;：gorm构造标签&lt;/span&gt;，这里面可以&lt;span&gt;定义字段类型、主键、长度、关联关系等等&lt;/span&gt;，这个定义一定要有的，若字段存在多个属性需要以key:value的形式给出，整个标签属性均在英文双引号内；目前官方给出的标签类型可以有以下几种&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1161789/201811/1161789-20181124223245431-1914869710.png&quot; alt=&quot;&quot; width=&quot;871&quot; height=&quot;673&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;&lt;span&gt;sql标签&lt;/span&gt;&lt;/strong&gt;：很奇怪的是这个标签在官方gorm里面并没有提到，就个人来看这个标签可能是数据库driver提供的，就目前用到的就只有以下几个(&lt;span&gt;自增、主键、唯一&lt;/span&gt;)，若有多个属性的时候请以分号隔开&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;sql&lt;/span&gt;&lt;/strong&gt;:&quot;&lt;span&gt;auto_increment&lt;/span&gt;;&lt;span&gt;primary_key&lt;/span&gt;;&lt;span&gt;unique&lt;/span&gt;&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;PostgreSQL的用户需要特别注意的是：若要使用数据库的主键自增，请务必声明以上几个属性，否则数据插入一定会报错&lt;/span&gt;！这又是一&lt;span&gt;&lt;strong&gt;坑&lt;/strong&gt;&lt;/span&gt;。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;&lt;strong&gt;SO&lt;/strong&gt;N序列化标签&lt;/span&gt;&lt;/strong&gt;: 其实，这个标签跟ORM半毛钱关系也没有，这里只是提一下(因为很有用)，这个标签在对象打印或者输出到请求端的时候&lt;span&gt;可以将model的字段以别名的形式输出&lt;/span&gt;，若使用默认序列化的方式将字段输出则所有的地段都是大写开头，所以说十分有用~，在结构体(model)里大概这么定义&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
BrowseCount   uint       `&lt;span&gt;&lt;strong&gt;json&lt;/strong&gt;&lt;/span&gt;:&quot;&lt;span&gt;browseCount&lt;/span&gt;&quot;`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;现在就尝试做一个保存操作，我的代码代码&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        saveErr = &lt;span&gt;model.DB&lt;/span&gt;.&lt;strong&gt;&lt;span&gt;Create&lt;/span&gt;&lt;/strong&gt;(&amp;amp;&lt;span&gt;article).Error
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; saveErr ==&lt;span&gt; nil {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; userErr := model.DB.Model(&amp;amp;user).Update(map[string]&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;{}{
                &lt;/span&gt;&quot;article_count&quot;&lt;span&gt;: user.ArticleCount,
                &lt;/span&gt;&quot;score&quot;&lt;span&gt;:         user.Score,
            }).Error; userErr &lt;/span&gt;!=&lt;span&gt; nil {
                fmt.Println(userErr.Error())
            }
        }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;由于我的DB操作都是定义在db的配置文件里面的一个变量&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
var DB *gorm.DB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;所以使用的时候直接看Create方法即可(注意，&lt;span&gt;保存对象一定要提前定义，使用指针的方式将对象保存&lt;/span&gt;)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;保存成功日志&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
[2018-11-24 22:02:03]  [5.87ms]  INSERT INTO &quot;article&quot; (&quot;created_at&quot;,&quot;updated_at&quot;,&quot;deleted_at&quot;,&quot;name&quot;,&quot;browse_count&quot;,&quot;comment_count&quot;,&quot;collect_count&quot;,&quot;status&quot;,&quot;content&quot;,&quot;html_content&quot;,&quot;content_type&quot;,&quot;user_id&quot;,&quot;last_user_id&quot;,&quot;last_comment_at&quot;) VALUES ('2018-11-24T22:02:03+08:00','2018-11-24T22:02:03+08:00','&amp;lt;nil&amp;gt;','怎能不说呢','0','0','0','1','欸~','','1','1','0','&amp;lt;nil&amp;gt;') RETURNING &quot;article&quot;.&quot;id&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;由于go的特性，&lt;span&gt;所有为空(null)字段均在记录操作的时候以&amp;lt;nil&amp;gt;代替&lt;/span&gt;，介意的话可以将字段设置一个默认值，或者给表字段添加一个默认值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在此，gorm的配置已经完成，接下来所有dao的操作均使用gorm提供Delete、Update、Insert、select等方法来实现，具体请参见官方文档(好像有中文版)：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　&lt;strong&gt;&lt;a href=&quot;http://doc.gorm.io/&quot; target=&quot;_blank&quot;&gt;http://doc.gorm.io/&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　虽然，大多数&lt;span&gt;dao操作都可以通过gorm提供的api来实现&lt;/span&gt;，但也存在些不便的地方，主要在以下几点：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;&amp;gt;事务&lt;/strong&gt;&lt;/span&gt;：事务是比较麻烦的一个地方，若确实需要用到事务请在第一个dao操作前调用gorm的&lt;/span&gt;&lt;code class=&quot;lang-go&quot;&gt;Begin()方法，在最后一个dao操作成功后调用Commit()方法，若保存出现异常，需要在每个dao操作后做下判断，若失败使用&lt;/code&gt;&lt;code class=&quot;lang-go&quot;&gt;Rollback()做回退处理，&lt;strong&gt;&lt;span&gt;坑&lt;/span&gt;&lt;/strong&gt;。&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;&amp;gt;级联查询&lt;/strong&gt;&lt;/span&gt;: 虽然官方的gorm提供级联的方式，但在gorm标签定义外键类型后并没任何用，这里给出的建议(比如一对多)是：在外层查询完成后循环记录，使用连接字段查询出关联记录才可，&lt;span&gt;&lt;strong&gt;坑&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;&amp;gt;复杂查询&lt;/strong&gt;&lt;/span&gt;：复杂查询需要手动写sql(&lt;strong&gt;&lt;span&gt;坑&lt;/span&gt;&lt;/strong&gt;)，由于gorm并没有提供任何sql模板(类似于java 的 mybatis)，遂，需要在代码中手动做动态sql处理，个人建议是用大括号做模板变量，各个例子哈~&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    var sql =&lt;span&gt; `SELECT                    &lt;br/&gt;　　　　　　　　　　　　b.id,b.cid,b.name,b.browse_count,b.comment_count,            &lt;br/&gt;　　　　　　　　　　　　b.collect_count,b.created_at,b.created_by,b.updated_at,
                    b.last_comment_at,b.last_comment_by
                from 
                    blog as b,
                    blog_category as bc,
                    blog_top as t
                WHERE b.cid&lt;/span&gt;=&lt;span&gt;bc.id 
                and b.id&lt;/span&gt;=&lt;span&gt;t.blog_id
                and b.status&lt;/span&gt;=1&lt;span&gt;
                {filterByCid}
                ORDER BY b.created_at desc , b.updated_at desc
                {filterLimit}`
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        这里当分类为所有时&amp;gt;取最近20条博客记录
        当分类为指定分类时&amp;gt;取指定分类下所有博客记录
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; 0==&lt;span&gt; cId {
        sql &lt;/span&gt;= strings.Replace(sql, &quot;{filterByCid}&quot;, &quot;&quot;, -1&lt;span&gt;)
        sql &lt;/span&gt;= strings.Replace(sql, &quot;{filterLimit}&quot;, &quot;limit 20&quot;, -1&lt;span&gt;)
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        sql &lt;/span&gt;= strings.Replace(sql, &quot;{filterByCid}&quot;, &quot;and b.cid = &quot;+strconv.Itoa(cId), -1&lt;span&gt;)
        sql &lt;/span&gt;= strings.Replace(sql, &quot;{filterLimit}&quot;, &quot;&quot;, -1&lt;span&gt;)

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;具体的调用方式是(一下代码中的红色部分)&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;if&lt;/span&gt; err := model.DB.&lt;span&gt;Raw(sql).Scan(&amp;amp;blogs)&lt;/span&gt;.Error; err !=&lt;span&gt; nil {
        SendErrJSON(&lt;/span&gt;&quot;error&quot;&lt;span&gt;, c)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;　&lt;span&gt;&lt;strong&gt;&amp;gt;分页&lt;/strong&gt;&lt;/span&gt;：gorm提供了Limit和Offset 这两个方法来配合分页操作，但，这里需要说的是，在连表查询(复杂查询)下必须手动使用limit offset or rownum来分页(&lt;span&gt;&lt;strong&gt;坑&lt;/strong&gt;&lt;/span&gt;)，是不是很原始~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　ok,本篇就到这里就结束了，内容如有疏漏，请参阅以下文档：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;gorm文档&lt;/strong&gt;&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;　　　　&lt;a href=&quot;http://gorm.io/docs/&quot; target=&quot;_blank&quot;&gt;http://gorm.io/docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;a href=&quot;http://doc.gorm.io/&quot; target=&quot;_blank&quot;&gt;http://doc.gorm.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;gin-gonic文档&lt;/strong&gt;&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;　　　　&lt;a href=&quot;https://github.com/gin-gonic/gin&quot; target=&quot;_blank&quot;&gt;https://github.com/gin-gonic/gin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;a href=&quot;https://github.com/shen100/golang123&quot; target=&quot;_blank&quot;&gt;https://github.com/shen100/golang123&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在是：2018-11-24 23:36:28 ，各位晚安哈~&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 24 Nov 2018 15:46:00 +0000</pubDate>
<dc:creator>funnyZpC</dc:creator>
<og:description>转载请注明出处: https://www.cnblogs.com/funnyzpc/p/9501376.html ``` 我先闲扯下，前天(也就是2018年11月16号)的某个时候，忽然有人在QQ上私</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/funnyzpc/p/9501376.html</dc:identifier>
</item>
<item>
<title>html 中 div 盒子并排展示 - bg1024</title>
<link>http://www.cnblogs.com/nzplearnSite/p/10014123.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nzplearnSite/p/10014123.html</guid>
<description>&lt;p&gt;在项目中，遇到一个前端问题，觉得小问题就别去找前端工程师解决了，还是自己动动手吧。&lt;/p&gt;
&lt;p&gt;相信不管小问题，大问题 都应该先自己尝试解决，google 、度娘查查资料，这绝对是增加理解和记忆的好机会。&lt;/p&gt;
&lt;p&gt;##问题描述：&lt;/p&gt;
&lt;p&gt;　　　　　将两个img图片 并排展示&lt;/p&gt;
&lt;p&gt; 解决思路如下：&lt;/p&gt;
&lt;p&gt;1、先画一个盒子 div ，在页面中规划出展示内容的区域位置(ps：width、height 这两个是必要的)，如果需要水平居中于浏览器、推荐使用样式即可。（ps：这样可使浏览器更加兼容）&lt;/p&gt;
&lt;p&gt;　例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;.div-levelCenter&lt;/span&gt;{
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    margin&lt;/span&gt;:&lt;span&gt;0 auto&lt;/span&gt;; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt;525px&lt;/span&gt;; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt;300px&lt;/span&gt;;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; border:1px solid #F00; 能标记出在页面中的位置和区域 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下（ps：为了能更清楚看见盒子的位置及内容区域，用红色边框标记）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/843782/201811/843782-20181124225940830-2056264494.png&quot; alt=&quot;&quot; width=&quot;814&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2、在这个盒子里，再规划出两个div盒子，这两盒子是用来放图片内容的，盒子大小是根据盒子里的内容来决定的，只要设置两个图片的width、height即可。（ps：这两个盒子要并排展示）&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;.div-levelCenter .img-div &lt;/span&gt;{
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    display&lt;/span&gt;:&lt;span&gt;inline&lt;/span&gt;;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    float&lt;/span&gt;:&lt;span&gt;left&lt;/span&gt;;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt;5px&lt;/span&gt;;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        border&lt;/span&gt;:&lt;span&gt;1px solid #009A61&lt;/span&gt;;
&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下（ps：为了能更清楚看见盒子的位置及内容区域，用绿色边框标记）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/843782/201811/843782-20181124230820978-1559089564.png&quot; alt=&quot;&quot; width=&quot;814&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、这两个绿色边框盒子就是用来放图片内容的，设置图片width、height在最外层div盒子尺寸内&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;.div-levelCenter .img-div .img-div-imgSize &lt;/span&gt;{
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt;250px&lt;/span&gt;;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt;250px&lt;/span&gt;;
&lt;span&gt;4&lt;/span&gt;         
&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下（ps：直接使用黑、绿背景色来充当图片）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/843782/201811/843782-20181124231955757-469884507.png&quot; alt=&quot;&quot; width=&quot;646&quot; height=&quot;341&quot;/&gt;&lt;/p&gt;
&lt;p&gt;黑色、绿色背景就是图片展示的内容区域。&lt;/p&gt;
&lt;p&gt;整体html 及 css 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;.div-levelCenter&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;525px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;   border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1px solid #F00&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;能标记出在页面中的位置和区域 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;.div-levelCenter .img-div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;inline&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1px solid #009A61&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;.div-levelCenter .img-div .img-div-imgSize &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;250px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;250px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;div-levelCenter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;img-div&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;img-div-imgSize&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;background-color: #000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;img-div&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;img-div-imgSize&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;background-color: #00ff00&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;记录实现效果，只是为了回顾当时解决问题的方式。&lt;/p&gt;

</description>
<pubDate>Sat, 24 Nov 2018 15:28:00 +0000</pubDate>
<dc:creator>bg1024</dc:creator>
<og:description>在项目中，遇到一个前端问题，觉得小问题就别去找前端工程师解决了，还是自己动动手吧。 相信不管小问题，大问题 都应该先自己尝试解决，google 、度娘查查资料，这绝对是增加理解和记忆的好机会。 ##问</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nzplearnSite/p/10014123.html</dc:identifier>
</item>
<item>
<title>itext实现pdf自动定位合同签订 - 天尘·云烟</title>
<link>http://www.cnblogs.com/sky-chen/p/10014081.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sky-chen/p/10014081.html</guid>
<description>&lt;h2 id=&quot;需求&quot;&gt;需求&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;需要实现如下效果（最终效果）&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751560/201811/751560-20181124223028744-1702791158.png&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;需求方的要求就是实现签订合同，实现方法不限，但过程中又提出需要在签章的过程中把签订日期的文字也打上去，这就有点坑了~&lt;/li&gt;
&lt;li&gt;一开始的想法是想办法定位需要签名的位置，事实上同类app实现方式就是这样，在前端实现签名位置定位，把位置信息发给后端，后端就可以很方便把印章放上去。&lt;/li&gt;
&lt;li&gt;但现实是现在前端不靠谱，暂时不能提供这样的功能；而且日期信息的填写也需要定位，这怎么办？用户不会手动去定位日期的位置，最多会调整下签名的位置才合理&lt;/li&gt;
&lt;li&gt;然后我研究了下itext的api，并讨论决定尾部签名部分我们自己做。也就是上图中的下半部分的所有内容，包括甲方乙方，日期，签章等都通过程序自动定位上去&lt;/li&gt;
&lt;li&gt;这样的想法遇到的难点，首先是y轴的定位问题。首先要找到文档的尾行在哪，在适当的距离进行文字的填写。&lt;strong&gt;我没有找到可以直接在文档末尾添加文字的api，如果各位知道麻烦指教一下&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;因为有上述的问题，我首先考虑要找到尾行的文字才会考虑写代码。通过api研究，可以通过itext的监听器遍历文本拿到尾行文字等信息&lt;/li&gt;
&lt;li&gt;x周位置根据页面宽度调整&lt;/li&gt;
&lt;li&gt;文字大小和字体类型问题。字体类型是我现在也没解决的，&lt;strong&gt;我没找到获取pdf文档字体类型和大小的api，请指教&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;因为没找到api所以我用的最笨的方法，通过获取字体的高度来确定字体大小，这样的文字写出来差别不会太大。至于字体，只能认为规定，合同字体统一宋体。&lt;/li&gt;
&lt;li&gt;过程中还遇到的问题就是字体左边距对齐问题，很明显甲乙方在一行上，中间用空格来分割的话会很不标准。所以我最终决定用table，且左右边签名和文字分开进行写入。也就是&lt;strong&gt;甲签的时候写左半部分，乙签的时候写右半部分&lt;/strong&gt;。当签完后就是上图的效果&lt;/li&gt;
&lt;li&gt;说了这么多接下来直接上工具代码吧，如果要使用，直接把几个类代码复制过去，把字体路径换成自己的，文件路径改下就可以在main方法运行测试了&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;上代码&quot;&gt;上代码&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;PdfParser类，主要实现类，包含了main方法&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;package com.zhiyis.framework.util.itext;

import com.itextpdf.io.font.PdfEncodings;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.geom.Rectangle;
import com.itextpdf.kernel.geom.Vector;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.canvas.parser.EventType;
import com.itextpdf.kernel.pdf.canvas.parser.PdfDocumentContentParser;
import com.itextpdf.kernel.pdf.canvas.parser.data.IEventData;
import com.itextpdf.kernel.pdf.canvas.parser.data.TextRenderInfo;
import com.itextpdf.kernel.pdf.canvas.parser.listener.IEventListener;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.zhiyis.common.utils.DateUtil;
import com.zhiyis.common.utils.Sysconfig;
import com.zhiyis.framework.util.FileUtil;
import com.zhiyis.framework.util.SignPdf;
import lombok.extern.slf4j.Slf4j;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;


/**
 * @author laoliangliang
 * @date 2018/11/23 15:03
 */
@Slf4j
public class PdfParser {

    private Sysconfig sysconfig;

    public PdfParser() {
    }

    public PdfParser(Sysconfig sysconfig) {
        this.sysconfig = sysconfig;
    }

    public enum SignType {
        //甲签
        SIGN_A(1),
        //乙签
        SIGN_B(2);
        private Integer type;

        SignType(Integer type) {
            this.type = type;
        }

        public Integer getType() {
            return type;
        }
    }

    public static void main(String[] args) {
        List&amp;lt;String&amp;gt; contents = new ArrayList&amp;lt;&amp;gt;();
        contents.add(&quot;甲方法定代表人：&quot;);
        contents.add(&quot;联系电话：&quot;);
        contents.add(&quot;身份证号码：&quot;);
        contents.add(DateUtil.format2str(&quot;yyyy 年  MM 月  dd 日&quot;));
        String input = &quot;/Users/laoliangliang/Downloads/合同模板 (1).pdf&quot;;
        String tempPath = &quot;/Users/laoliangliang/Downloads/合同模板_signed.pdf&quot;;

        String filePath = &quot;/Users/laoliangliang/Downloads/31.png&quot;;
        String fileOut = &quot;/Users/laoliangliang/Downloads/合同模板_signed_signed_signed.pdf&quot;;
        PdfParser pdfParser = new PdfParser();
//        pdfParser.startSign(input, input, fileOut, filePath, SignType.SIGN_A, contents, false);
        pdfParser.startSign(input, fileOut, tempPath, filePath, SignType.SIGN_B, contents, true);
    }

    /**
     * 甲乙方签名方法
     *
     * @param rootPath 初始合同pdf路径
     * @param tempPath 基于哪份合同签章，比如甲方先签，这里填的就是初始合同地址；若是乙方签，这里填的就是甲方签过生成的合同地址
     * @param outPath  输出的合同地址，包含文件名
     * @param imgPath  签章图片地址
     * @param signType 甲方签章还是乙方签章，输入枚举类型
     * @param contents 签章处文本内容
     * @param already  理论上甲签的时候是false，表示没有签过，乙签的时候是true，表示甲已经签过，就算下面高度不够也不会新增页面
     *                 若需求改动，可以乙先签，那逻辑控制，先签的false，后签的true；
     *                 该项错误可能导致第二方签章时新启一页签章
     */
    public void startSign(String rootPath, String tempPath, String outPath, String imgPath, SignType signType, List&amp;lt;String&amp;gt; contents, boolean already) {
        String tempRootPath = &quot;&quot;;
        try {
            //读取文章尾部位置
            MyRectangle myRectangle = getLastWordRectangle(rootPath);
            //还没签印的，临时文件路径
            tempRootPath = rootPath.substring(0, rootPath.length() - 4) + &quot;_temp.pdf&quot;;
            //添加尾部内容
            SignPosition signPosition = addTailSign(myRectangle, tempPath, tempRootPath, signType.getType(), contents, already);
            InputStream in = PdfParser.class.getClassLoader().getResourceAsStream(&quot;keystore.p12&quot;);
            byte[] fileData = SignPdf.sign(&quot;123456&quot;, in, tempRootPath, imgPath, signPosition.getX(), signPosition.getY(), signPosition.getPageNum());
            FileUtil.uploadFile(fileData, outPath);
        } catch (Exception e) {
            log.error(&quot;签名出错&quot;, e);
        } finally {
            File file = new File(tempRootPath);
            if (file.exists()) {
                boolean flag = file.delete();
                if (flag) {
                    log.debug(&quot;临时文件删除成功&quot;);
                }
            }
        }
    }

    /**
     * 添加尾部签名部分(不含签名或印章)
     *
     * @param myRectangle 文档末尾位置和大致信息
     * @param input       输入文档路径
     * @param output      输出文档路径
     * @param type        1-甲签 2-乙签
     * @param content     填写内容
     * @param already     理论上甲签的时候是false，表示没有签过，乙签的时候是true，表示甲已经签过，就算下面高度不够也不会新增页面
     *                    若需求改动，可以乙先签，那逻辑控制，先签的false，后签的true
     * @throws Exception
     */
    private SignPosition addTailSign(MyRectangle myRectangle, String input, String output, Integer type, List&amp;lt;String&amp;gt; content, boolean already) throws Exception {

        PdfReader reader = new PdfReader(input);
        PdfWriter writer = new PdfWriter(output);
        PdfDocument pdf = new PdfDocument(reader, writer);
        int numberOfPages = pdf.getNumberOfPages();

        Document doc = new Document(pdf);
        String dateFontPath;
        if (sysconfig == null) {
            dateFontPath = &quot;/Library/Fonts/simsun.ttc&quot;;
        }else{
            dateFontPath = sysconfig.getProperties().getProperty(&quot;date_font_path&quot;);
        }
        PdfFont font = PdfFontFactory.createFont(dateFontPath + &quot;,1&quot;, PdfEncodings.IDENTITY_H, true);
        //判断签名高度是否够
        int size = content.size();
        float maxRecHeight = myRectangle.getMinlineHeight() * size;
        float v = myRectangle.getBottom() - maxRecHeight;
        boolean isNewPage = false;
        if (v &amp;lt;= myRectangle.getMinlineHeight() * 3) {
            isNewPage = true;
            if (!already) {
                pdf.addNewPage();
                numberOfPages++;
            }
            myRectangle.setBottom(myRectangle.getTop() * 2 - maxRecHeight * 2);
        }
        Table table = new Table(1);
        table.setPageNumber(numberOfPages);
        float bottom = (myRectangle.getBottom() - maxRecHeight) / 2;
        float left1;
        left1 = myRectangle.getLeft() + 30f;
        if (type == 2) {
            left1 = left1 + myRectangle.getWidth() / 2 - 15;
        }
        myRectangle.setLeft(left1);
        table.setFixedPosition(left1, bottom, 200);
        table.setBorder(Border.NO_BORDER);


        for (String text : content) {
            Paragraph paragraph = new Paragraph();
            paragraph.add(text).setFont(font).setFontSize(myRectangle.getHeight());
            Cell cell = new Cell();
            cell.add(paragraph);
            cell.setBorder(Border.NO_BORDER);
            table.addCell(cell);
        }

        doc.add(table);
        doc.flush();
        pdf.close();
        return getSignPosition(myRectangle, content, bottom, numberOfPages, isNewPage);
    }

    private SignPosition getSignPosition(MyRectangle myRectangle, List&amp;lt;String&amp;gt; content, float bottom, int numberOfPages, boolean isNewPage) {
        SignPosition signPosition = new SignPosition();
        //y轴位置，底部
        if (isNewPage) {
            signPosition.setY(bottom + (content.size() - 2) * myRectangle.getMinlineHeight());
        } else {
            signPosition.setY(bottom + (content.size() - 3) * myRectangle.getMinlineHeight());
        }
        //x轴位置，文字宽度+偏移量
        signPosition.setX(myRectangle.getLeft() + content.get(0).length() * myRectangle.getHeight() - 15f);
        signPosition.setPageNum(numberOfPages);
        return signPosition;
    }

    /**
     * 拿到文章末尾参数
     */
    private MyRectangle getLastWordRectangle(String input) throws IOException {
        PdfDocument pdfDocument = new PdfDocument(new PdfReader(input));
        MyEventListener myEventListener = new MyEventListener();
        PdfDocumentContentParser parser = new PdfDocumentContentParser(pdfDocument);
        parser.processContent(pdfDocument.getNumberOfPages(), myEventListener);
        List&amp;lt;Rectangle&amp;gt; rectangles = myEventListener.getRectangles();
        float left = 100000;
        float right = 0;
        float bottom = 100000;
        boolean isTop = true;
        Rectangle tempRec = null;
        float minV = 1000;
        MyRectangle myRectangle = new MyRectangle();
        //拿到文本最左最下和最右位置
        for (Rectangle rectangle : rectangles) {
            if (isTop) {
                myRectangle.setTop(rectangle.getY());
                isTop = false;
            }
            if (tempRec != null) {
                float v = tempRec.getY() - rectangle.getY();
                if (v &amp;lt; minV &amp;amp;&amp;amp; v &amp;gt; 5f) {
                    minV = v;
                }
            }
            tempRec = rectangle;
            float lt = rectangle.getLeft();
            float rt = rectangle.getRight();
            float y = rectangle.getBottom();
            if (lt &amp;lt; left) {
                left = lt;
            }
            if (rt &amp;gt; right) {
                right = rt;
            }
            if (y &amp;lt; bottom) {
                bottom = y;
            }

        }
        Rectangle rectangle = rectangles.get(rectangles.size() - 1);
        float height = rectangle.getHeight();
        myRectangle.setHeight(height);
        myRectangle.setLeft(left);
        myRectangle.setRight(right);
        myRectangle.setBottom(bottom);
        myRectangle.setMinlineHeight(minV);
        myRectangle.setLineSpace(minV - height);
        myRectangle.setWidth(right - left);
        pdfDocument.close();
        return myRectangle;
    }


    static class MyEventListener implements IEventListener {
        private List&amp;lt;Rectangle&amp;gt; rectangles = new ArrayList&amp;lt;&amp;gt;();

        @Override
        public void eventOccurred(IEventData data, EventType type) {
            if (type == EventType.RENDER_TEXT) {
                TextRenderInfo renderInfo = (TextRenderInfo) data;
                if (&quot;&quot;.equals(renderInfo.getText().trim())) {
                    return;
                }
                Vector startPoint = renderInfo.getDescentLine().getStartPoint();
                Vector endPoint = renderInfo.getAscentLine().getEndPoint();
                float x1 = Math.min(startPoint.get(0), endPoint.get(0));
                float x2 = Math.max(startPoint.get(0), endPoint.get(0));
                float y1 = Math.min(startPoint.get(1), endPoint.get(1));
                float y2 = Math.max(startPoint.get(1), endPoint.get(1));
                rectangles.add(new Rectangle(x1, y1, x2 - x1, y2 - y1));
            }
        }

        @Override
        public Set&amp;lt;EventType&amp;gt; getSupportedEvents() {
            return new LinkedHashSet&amp;lt;&amp;gt;(Collections.singletonList(EventType.RENDER_TEXT));
        }

        public List&amp;lt;Rectangle&amp;gt; getRectangles() {
            return rectangles;
        }

        public void clear() {
            rectangles.clear();
        }
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;MyRectangle 用来存文档尾部数据的实体类&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;package com.zhiyis.framework.util.itext;

/**
 * @author laoliangliang
 * @date 2018/11/23 16:11
 */
public class MyRectangle {

    private float width;
    private float left;
    private float right;
    private float bottom;
    private float top;
    private float height;
    /**
     * 行间间隔
     */
    private float lineSpace;
    /**
     * 最小行间距，从上一行底部到下一行底部的距离
     */
    private float minlineHeight;
    public float getWidth() {
        return width;
    }

    public void setWidth(float width) {
        this.width = width;
    }
    public float getLeft() {
        return left;
    }

    public void setLeft(float left) {
        this.left = left;
    }

    public float getRight() {
        return right;
    }

    public void setRight(float right) {
        this.right = right;
    }

    public float getBottom() {
        return bottom;
    }

    public void setBottom(float bottom) {
        this.bottom = bottom;
    }

    public float getHeight() {
        return height;
    }

    public void setHeight(float height) {
        this.height = height;
    }

    public float getLineSpace() {
        return lineSpace;
    }

    public void setLineSpace(float lineSpace) {
        this.lineSpace = lineSpace;
    }

    public float getMinlineHeight() {
        return minlineHeight;
    }

    public void setMinlineHeight(float minlineHeight) {
        this.minlineHeight = minlineHeight;
    }

    public float getTop() {
        return top;
    }

    public void setTop(float top) {
        this.top = top;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;SignPosition 签章位置类&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;package com.zhiyis.framework.util.itext;

/**
 * 签章位置类
 * @author laoliangliang
 * @date 18/11/24 下午1:43
 */
public class SignPosition {

    private float x;

    private float y;

    private float width;

    private float height;

    private Integer pageNum;

    public Integer getPageNum() {
        return pageNum;
    }

    public void setPageNum(Integer pageNum) {
        this.pageNum = pageNum;
    }

    public float getX() {
        return x;
    }

    public void setX(float x) {
        this.x = x;
    }

    public float getY() {
        return y;
    }

    public void setY(float y) {
        this.y = y;
    }

    public float getWidth() {
        return width;
    }

    public void setWidth(float width) {
        this.width = width;
    }

    public float getHeight() {
        return height;
    }

    public void setHeight(float height) {
        this.height = height;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;SignPdf 签章类&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;package com.zhiyis.framework.util;

import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfSignatureAppearance;
import com.itextpdf.text.pdf.PdfSignatureAppearance.RenderingMode;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.security.*;
import com.itextpdf.text.pdf.security.MakeSignature.CryptoStandard;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.io.*;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.Certificate;
import java.util.UUID;

/**
 * 签印
 */
public class SignPdf {
    /**
     * @param password     秘钥密码
     * @param inputStream  秘钥文件
     * @param signPdfSrc   签名的PDF文件
     * @param signImage    签名图片文件
     * @param x            x坐标
     * @param y            y坐标
     * @return
     */
    public static byte[] sign(String password, InputStream inputStream, String signPdfSrc, String signImage,
                              float x, float y,int page) {
        File signPdfSrcFile = new File(signPdfSrc);
        PdfReader reader = null;
        ByteArrayOutputStream signPDFData = null;
        PdfStamper stp = null;
        try {
            BouncyCastleProvider provider = new BouncyCastleProvider();
            Security.addProvider(provider);
            KeyStore ks = KeyStore.getInstance(&quot;PKCS12&quot;, new BouncyCastleProvider());
            // 私钥密码 为Pkcs生成证书是的私钥密码 123456
            ks.load(inputStream, password.toCharArray());
            String alias = (String) ks.aliases().nextElement();
            PrivateKey key = (PrivateKey) ks.getKey(alias, password.toCharArray());
            Certificate[] chain = ks.getCertificateChain(alias);
            reader = new PdfReader(signPdfSrc);
            signPDFData = new ByteArrayOutputStream();
            // 临时pdf文件
            File temp = new File(signPdfSrcFile.getParent(), System.currentTimeMillis() + &quot;.pdf&quot;);
            stp = PdfStamper.createSignature(reader, signPDFData, '\0', temp, true);
            stp.setFullCompression();
            PdfSignatureAppearance sap = stp.getSignatureAppearance();
            sap.setReason(&quot;数字签名，不可改变&quot;);
            // 使用png格式透明图片
            Image image = Image.getInstance(signImage);
            sap.setImageScale(0);
            sap.setSignatureGraphic(image);
            sap.setRenderingMode(RenderingMode.GRAPHIC);
            int size = 120;
            // 是对应x轴和y轴坐标
            float lly = y;
            sap.setVisibleSignature(new Rectangle(x, lly, x + size, lly+size), page,
                    UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;));
            stp.getWriter().setCompressionLevel(5);
            ExternalDigest digest = new BouncyCastleDigest();
            ExternalSignature signature = new PrivateKeySignature(key, DigestAlgorithms.SHA512, provider.getName());
            MakeSignature.signDetached(sap, digest, signature, chain, null, null, null, 0, CryptoStandard.CADES);
            stp.close();
            reader.close();
            return signPDFData.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (signPDFData != null) {
                try {
                    signPDFData.close();
                } catch (IOException e) {
                }
            }

            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                }
            }
        }
        return null;
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;工具方法&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;public static boolean uploadFile(byte[] file, String filePath) throws Exception {
    String tempPath = filePath.substring(0,filePath.lastIndexOf(&quot;/&quot;));
    File targetFile = new File(tempPath);
    if(!targetFile.exists()) {
        boolean out = targetFile.mkdirs();
        if(out) {
            log.info(filePath + &quot; create success&quot;);
        } else {
            log.info(filePath + &quot; create fail&quot;);
        }
    }

    FileOutputStream out1 = new FileOutputStream(filePath);
    out1.write(file);
    out1.flush();
    out1.close();
    File f = new File(filePath);
    return f.exists();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;公私钥的生成网上很多就自己去生成吧&lt;/li&gt;
&lt;li&gt;如果想要测试效果的可以把签章部分先去掉也可以运行&lt;/li&gt;
&lt;li&gt;我觉得这篇博客是我最有含金量的一篇了~我找了很多博客定位pdf签章的没有靠谱的，很多技术实现都很复杂，我最初版本，也就是前面有一篇博客实现就是改编自网上一篇博客的，但是有很多问题，代码也过于复杂难懂，弯弯绕绕且难以修改增强。&lt;/li&gt;
&lt;li&gt;我研究了官方最新代码结合自己脑洞大开的思路，精简出了很简单的三个类，其实排除实体类，真正实现功能就一个PdfParser&lt;/li&gt;
&lt;li&gt;**如果觉得有用给我点个赞哦^_^**&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 24 Nov 2018 15:13:00 +0000</pubDate>
<dc:creator>天尘&amp;#183;云烟</dc:creator>
<og:description>需求 1. 需要实现如下效果（最终效果） 思考 1. 需求方的要求就是实现签订合同，实现方法不限，但过程中又提出需要在签章的过程中把签订日期的文字也打上去，这就有点坑了~ 2. 一开始的想法是想办法定</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sky-chen/p/10014081.html</dc:identifier>
</item>
<item>
<title>.NET Core实战项目之CMS 第四章 入门篇-Git的快速入门及实战演练 - 依乐祝</title>
<link>http://www.cnblogs.com/yilezhu/p/10014027.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yilezhu/p/10014027.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;上篇文章我带着大家通过分析了一遍ASP.NET Core的源码了解了它的启动过程，然后又带着大家熟悉了一遍配置文件的加载方式，最后引出了依赖注入以及控制反转的概念！如果大家把前面几张都理解了，那么你也就入了ASP.NET Core的大门了。但是我们还需要一个版本控制工具来提高我们的编码效率。因此这篇文章我将带着大家了解下Git这个版本控制工具以及为什么选择它。&lt;br/&gt;下面我们将通过故事的形式从Git的历史谈起，并讲述Git的强大之处。然后通过实战演练教你如何在Github以及码云上托管我们的代码并进行代码的版本控制。&lt;br/&gt;这里还想说一句，这篇文章本来昨天就能发出来的，奈何出现了一点状况，所以今天才来写，为了不浪费大家的时间我会在文章的最后再来讲述原因，这里给大家说声抱歉了。&lt;br/&gt;本篇文章已经收入&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/9977862.html&quot;&gt;.NET Core实战项目之CMS 第一章 入门篇-开篇及总体规划&lt;/a&gt; 有兴趣的朋友可以加入.NET Core项目实战交流群637326624 进行交流。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;作者：依乐祝&lt;br/&gt;原本地址：https://www.cnblogs.com/yilezhu/p/10014027.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;git快速入门&quot;&gt;Git快速入门&lt;/h2&gt;
&lt;p&gt;本部分我会先通过故事的形式讲解下Git的诞生，及其强大的分布式版本控制的能力。然后再给大家介绍一下我们在实际的项目开发过程中经常用到的git命令，让大家能够快速入门Git。当然我不会给你介绍八百年也不会用一次的命令，感觉很高级的命令，毕竟实用才是硬道理。还有不要指望通过这篇文章你就能成为Git专家，这篇文章只会让你在实际项目中能够迎刃有余的使用Git&lt;/p&gt;
&lt;h3 id=&quot;关于git你不得不知的故事&quot;&gt;关于Git你不得不知的故事&lt;/h3&gt;
&lt;p&gt;（没错，这部分参考自廖雪峰大神的文章，因为有必要让大伙了解这些）很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。&lt;/p&gt;
&lt;p&gt;Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？&lt;/p&gt;
&lt;p&gt;事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！&lt;/p&gt;
&lt;p&gt;你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。&lt;/p&gt;
&lt;p&gt;不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。&lt;/p&gt;
&lt;p&gt;安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。&lt;/p&gt;
&lt;p&gt;Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：&lt;/p&gt;
&lt;p&gt;Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。&lt;/p&gt;
&lt;p&gt;Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。如今GitHub更是被微软收购，ASP.NET Core的的全套源码以及.NET Core的源码也都是在GitHub上开源。&lt;/p&gt;
&lt;p&gt;历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。&lt;/p&gt;
&lt;h3 id=&quot;git的优势&quot;&gt;Git的优势&lt;/h3&gt;
&lt;p&gt;看了Git的的故事是不是心潮澎湃呢？但是你又在想了Git到底有什么优势能够让那么多的大名鼎鼎的项目都是用Git进行代码管理呢？别急，这部分就为你解答。&lt;/p&gt;
&lt;ol readability=&quot;5.4712793733681&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;适合分布式开发，强调个体,可以离线工作。 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。因此公共服务器压力和数据量都不会太大。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;速度快、灵活。 强大的分支管理能力，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件，想想svn是不是头疼啊。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.8695652173913&quot;&gt;
&lt;p&gt;暂存区概念，具体的点击&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000&quot;&gt;这里&lt;/a&gt; 查看&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这个优缺点Git的优势想的头疼，说太多就感觉枯燥了，只有你真正使用了才能体会到！话不多说，让我们快速入门Git吧。&lt;/p&gt;
&lt;h3 id=&quot;git安装&quot;&gt;Git安装&lt;/h3&gt;
&lt;ol readability=&quot;4.8978723404255&quot;&gt;&lt;li readability=&quot;0.91176470588235&quot;&gt;
&lt;p&gt;你可以点击&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;这里&lt;/a&gt; 到官网进行下载,可能官网下载比较忙，所以你可以点击&lt;a href=&quot;https://pc.qq.com/detail/13/detail_22693.html&quot;&gt;这里&lt;/a&gt; 到腾讯软件中心进行下载.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Windows系统的安装很简单，软件下载好之后一步一步的安装就行了，至于Linux和MacOS你可以点&lt;a href=&quot;https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git&quot;&gt;这里&lt;/a&gt; 查看官网的安装教程.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;安装完成之后，需要进行相关的配置，在命令行输入以下命令进行全局的配置：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;$ git config --global user.name &quot;yilezhu&quot;
$ git config --global user.email &quot;1015657114@qq.com&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;注：因为Git是分布式版本控制系统，所以，每台机器都必须自报家门：你的名字和Email地址（上面双引号里面的内容）。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;git config&lt;/code&gt;命令的&lt;code&gt;--global&lt;/code&gt;参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.95275590551181&quot;&gt;
&lt;p&gt;点击&lt;a href=&quot;https://tortoisegit.org/&quot;&gt;这里&lt;/a&gt; ，下载并安装TortoiseGit图形化工具,安装后可以通过鼠标进行Git命令的操作。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225642536-1232449279.png&quot; alt=&quot;1543061444748&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;git结合github进行实战演练&quot;&gt;Git结合Github进行实战演练&lt;/h3&gt;
&lt;h4 id=&quot;git本地仓库与github远程仓库关联并获取最新的代码&quot;&gt;Git本地仓库与GitHub远程仓库关联并获取最新的代码&lt;/h4&gt;
&lt;p&gt;这部分我们就进行Git的实战吧，正好前面几篇文章已经为大家演示了几个例子，那么我们就把前面几个例子为例，使用Git把他们托管到GitHub上面吧。&lt;/p&gt;
&lt;ol readability=&quot;17.948251078103&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;假设你已经有了GitHub账号，没有的话自己去注册。点击&lt;a href=&quot;https://github.com/login&quot;&gt;这里&lt;/a&gt; 登录GitHub,&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;自报家门，配置你是谁（如果你在上面的Git安装）里面已经按照下面进行了配置，这里就无需再配置。首先鼠标右键按照下图所示打开Git Bash 然后按照下图所示进行配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225641645-1039852644.png&quot; alt=&quot;1543063300748&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225640681-1933234906.png&quot; alt=&quot;1543063525086&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;生成ssh key 在git bash上面输入&lt;code&gt;ssh-keygen -t rsa -C &quot;你的邮箱&quot;&lt;/code&gt; 它会有三次等待你输入，直接回车即可。下面的图是因为我已经生成了，询问我是否覆盖，我输入y选择了是重新生成了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225640062-491784336.png&quot; alt=&quot;1543063686083&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将生成的ssh key拷贝到剪贴板，执行 &lt;code&gt;clip &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt; （或者到上图提示的路径里去打开文件并复制）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225639380-1503707165.png&quot; alt=&quot;1543064147452&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;打开github并按照如下图所示打开Settings&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225638680-1053892084.png&quot; alt=&quot;1543064363837&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;点击左边的&lt;code&gt;SSH and GPG keys&lt;/code&gt; 然后在右边点击 &lt;code&gt;New SSH key&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225637686-149620396.png&quot; alt=&quot;1543064336071&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将ssh key粘贴到右边的Key里面。Title随便命名即可。这时候GitHub会给你发送一封邮件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225636697-1714937195.png&quot; alt=&quot;1543064246038&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;执行 &lt;code&gt;ssh -T git@github.com&lt;/code&gt;测试结果如下说明GitHub配置成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225635684-1782910026.png&quot; alt=&quot;1543064535854&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;GitHub上创建一个新的项目,项目名称为&lt;code&gt;Czar.Cms&lt;/code&gt;，这个仓库将作为我们后面CMS系统的GitHub上的远程仓库
&lt;ul&gt;&lt;li&gt;首先是在右上角“+”进入创建界面&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225634705-1991539998.png&quot; alt=&quot;1543065344474&quot;/&gt;&lt;/li&gt;
&lt;li&gt;接着按照如下所示输入项目名称，然后点击&lt;code&gt;Create repository&lt;/code&gt; 就创建好了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225633685-1240301408.png&quot; alt=&quot;1543065764512&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我们有选择以Readme初始化项目。所以生成后的结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225632680-1075694170.png&quot; alt=&quot;1543065918196&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;下面我们就在本地初始化一个仓库，然后与GitHub的远程仓库关联起来吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;我们在我们的工作文件夹中，打开Git Bash，然后输入如下命令&lt;code&gt;git init&lt;/code&gt;来初始化一个本地仓库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225631686-705259541.png&quot; alt=&quot;1543066727823&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;然后输入&lt;code&gt;git remote&lt;/code&gt; 查看下远程仓库，正常的话应该有0个，现在就让我们添加下我们刚才建立的GitHub上的远程仓库吧.然后再看下远程仓库列表，发现已经有一个了，名字为&lt;code&gt;github&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225630691-1261659851.png&quot; alt=&quot;1543067824895&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;git remote add github github远程仓库的地址
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;然后输入&lt;code&gt;git pull github master&lt;/code&gt; 就会从刚才我们配置的远程仓库拉取master分支的代码。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225629645-1823975492.png&quot; alt=&quot;1543067968316&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;获取之后然后看下我么的项目文件夹，如下所示：已经从GitHub上获取到了最新的代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225628674-1307751402.png&quot; alt=&quot;1543068120750&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;把上篇文章的源码上传到github的sample02分支上&quot;&gt;把上篇文章的源码上传到GitHub的Sample02分支上&lt;/h4&gt;
&lt;ol readability=&quot;9&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在我们的本地仓库文件夹打开git bash 然后输入&lt;code&gt;git checkout -b Sample02&lt;/code&gt; 命令创建并切换到&lt;code&gt;Sample02&lt;/code&gt; 这个分支，然后把我们上篇文章的代码拷贝到这个文件夹，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225627697-1685439615.png&quot; alt=&quot;1543068715835&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225626691-1703348067.png&quot; alt=&quot;1543068674449&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;输入&lt;code&gt;git status&lt;/code&gt; 查看当前仓库有哪些文件做了修改，如下图所示，红色部分表示已经发生了修改&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225625687-2095319386.png&quot; alt=&quot;1543069027605&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;输入&lt;code&gt;git add Sample02/&lt;/code&gt; 把Sample02文件夹下面所有的已经发生了修改的文件都放进'暂存区' 然后输入&lt;code&gt;git status&lt;/code&gt; 查看一下当前的状态，都变成了绿色，说明Sample02文件夹下面的修改内容都加入了暂存区&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225624773-2139813378.png&quot; alt=&quot;1543069251735&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接着输入&lt;code&gt;git commit -m '注释内容'&lt;/code&gt;命令把我们暂存区的代码提交到我们的本地仓库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225623665-449189153.png&quot; alt=&quot;1543069360089&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;然后输入&lt;code&gt;git status&lt;/code&gt; 查看一下，发现所有的修改都已经提交成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225622716-1314411146.png&quot; alt=&quot;1543069432593&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.5&quot;&gt;
&lt;p&gt;输入如下命令&lt;code&gt;git push github Sample02&lt;/code&gt;把我们的本地代码提交到远程仓库的'Sample02分支'吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225621908-1048211604.png&quot; alt=&quot;1543069575141&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意，这里时提交到Github上的Sample02分支上，而我们的GitHub上没有这个分支，所以会自动帮我们创建这个分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这里第三篇的事例代码就上传到Github上了。大家可以去查看下，顺便给个Star哦，因为后面的CMS的代码我也会放到这个仓库，只不过是不同的分支而已。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;下面就让我们切换回master分支，并结束这个部分吧。输入&lt;code&gt;git checkout master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;github源码地址&quot;&gt;GitHub源码地址&lt;/h2&gt;
&lt;p&gt;这个时候可以上GitHub的地址了，后面所有的事例代码都会放到这个分支上，所以大伙可以先去看一下上一篇的事例代码&lt;br/&gt;https://github.com/yilezhu/Czar.Cms&lt;/p&gt;
&lt;h2 id=&quot;迟更的原因&quot;&gt;迟更的原因&lt;/h2&gt;
&lt;p&gt;非常抱歉，本来这篇文章应该昨天写的，奈何昨天中午我老婆给我打电话带着哭腔的说她的爷爷奶奶生病了，问我这个周末加不加班，如果不加班陪她回家看下。我说，你先别着急，我马上请假陪你回去。然后中午的时候就请假，然后开了四个多小时的车带着我老婆以及我女儿（大名：依乐，小名：可乐）回我老婆的老家了。然后第二天，也就是今天早上就带着我的爷爷奶奶去县城里面的人民医院做检查，还好检查结果没什么大的问题。这是万幸了！最后回到家都四五点钟了。然后才开始写“昨天的文章”，这一写就写到了现在。再次给大家说声抱歉。以后我尽量两天一更，最少也得一星期三更。再次感谢大家的支持。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文从Git的诞生开始说起，然后给大家讲了Git的优势。接着我们通过一个GitHub的实战，手把手的在GitHub上新建了一个远程仓库并跟我本地的代码进行管理，并且把我的上篇文章的事例代码给上传到了GitHub上。希望对大家使用Git有所帮助。下面再次罗列常用的Git命令&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;git init ：初始化本地仓库&lt;/li&gt;
&lt;li&gt;git remote ：查看关联的远程仓库连接&lt;/li&gt;
&lt;li&gt;git remote add github github远程仓库地址 ：创建一个远程仓库连接&lt;/li&gt;
&lt;li&gt;git pull github master ：从github命名的远程仓库拉取master分支内容&lt;/li&gt;
&lt;li&gt;git checkout -b Sample02 ：创建并切换到Sample02这个分支上&lt;/li&gt;
&lt;li&gt;git branch ：查看当前的所有分支&lt;/li&gt;
&lt;li&gt;git add Sample02/ ：把Sample02文件夹下面的所有修改文件添加到暂存区&lt;/li&gt;
&lt;li&gt;git commit -m &quot;注释&quot; ：把暂存区所有修改提交到本地仓库，并给本体提交写一个注释方便查看日志&lt;/li&gt;
&lt;li&gt;git log --graph ：查看修改日志&lt;/li&gt;
&lt;li&gt;git push github Sample02 ：把当前仓库中得当前分支的内容推送到github这个远程仓库的Sample02分支上，如果分支不存在则自动创建&lt;/li&gt;
&lt;li&gt;git merge --no-ff -m &quot;注释&quot; Sample02 :在当前分支合并&lt;code&gt;Sample02&lt;/code&gt;这个分支的修改到当前分支，并给这次合并添加注释&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;好了，今天就给大家介绍到这，主要是给大家介绍平时实际项目中常用的命令，对于不常用的命令没有介绍，因为毕竟是实战，所以以实用为主。下篇文章我会给大家介绍一下Dapper的使用（玩数据库了）来为后面我们的CMS系列课程打下基础，毕竟要照顾一些新手朋友。如果大家有什么问题的话可以加.NET Core项目实战交流群637326624跟大家交流。&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 14:59:00 +0000</pubDate>
<dc:creator>依乐祝</dc:creator>
<og:description>﻿ 写在前面 上篇文章我带着大家通过分析了一遍ASP.NET Core的源码了解了它的启动过程，然后又带着大家熟悉了一遍配置文件的加载方式，最后引出了依赖注入以及控制反转的概念！如果大家把前面几张都理</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yilezhu/p/10014027.html</dc:identifier>
</item>
<item>
<title>简明依赖注入(Dependency Injection) - racaljk</title>
<link>http://www.cnblogs.com/racaljk/p/10014031.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/racaljk/p/10014031.html</guid>
<description>&lt;p&gt;这是因特奈特上面不知道第几万篇讲依赖注入(Dependency Injection)的文章，但是说明白的却寥寥无几，这篇文章尝试控制字数同时不做大多数。&lt;/p&gt;
&lt;p&gt;首先，依赖注入的是一件很简单的事情。&lt;/p&gt;

&lt;p&gt;然后，假设我们有一个汽车Car，一个引擎接口Engine，两个引擎具体实现&lt;code&gt;Level4Engine&lt;/code&gt;,&lt;code&gt;Level5Engine&lt;/code&gt;。汽车可以长这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Car{
    private Engine e;
    public Car(){
        e = new Level4Engine();
    }
    public void ignite(){
        System.out.println()
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在要让汽车点火，简单：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;public static void main(String[] args) {
    Car c = new Car();
    c.ignite();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是假如我们想要换一个更高级的引擎，我们不得不修改&lt;code&gt;Car&lt;/code&gt;的构造函数:&lt;br/&gt;~~ &lt;code&gt;e = new Level4Engine();&lt;/code&gt; ~~&lt;br/&gt;&lt;code&gt;e = new Level5Engine();&lt;/code&gt;&lt;br/&gt;然后重新编译。这就是代码的耦合，一方面假如需求不会经常改变，这个汽车只会使用&lt;code&gt;Level4Engine&lt;/code&gt;，那没问题，这个代码很完美。但另一方面，假如引擎有多个，需求会经常改变，我们发现&lt;code&gt;Level4Engine&lt;/code&gt;还不行，需要更高级的，而且新引擎还需要进行一系列复杂配置，那这个耦合就是灾难了。只是装配汽车的血汗工人，懂不了那么多的。&lt;/p&gt;

&lt;p&gt;依赖注入就是为了解决上述问题而生的。用依赖注入的写法解决上面的问题：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Car{
    private Engine e;
    public Car(Engine e){
        this.e = e;
    }
    public void ignite(){
        System.out.println()
    }
}

// 也可以使用xml进行配置
@Confignuration
public CarFactory{
    @Bean
    public Engine engine(){
        var e = new Level5Engine();
        e.complexConfig();
        return e;
    }
    @Bean
    public Car car(Engine e){
        return new Car(e);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里Car对Engine的&lt;strong&gt;依赖&lt;/strong&gt;被抽了出去。Car不负责创建Engine，也不负责/无能力配置Enging。那么Engine抽出到了哪？又由谁&lt;strong&gt;注入&lt;/strong&gt;给Car？总不能让Car对着一个壳子(Engine接口)点火吧。&lt;/p&gt;
&lt;p&gt;答案当然是spring。spring把它们抽象为&lt;strong&gt;Bean&lt;/strong&gt;，每个&lt;code&gt;@Bean&lt;/code&gt;都通知spring&lt;br/&gt;&lt;strong&gt;嘿我要给你一个新的bean，以后就交给你来管理了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这样既解决了上述&quot;汽车装配工需要引擎配置知识&quot;的问题，也解决了&quot;更改引擎非常困难&quot;的问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;引擎制造者只关注如何制造出引擎，当现在生产条件不成熟就提供&lt;code&gt;Level4Engine&lt;/code&gt;，反之就提供&lt;code&gt;Level5Engine&lt;/code&gt;，可以随时更改并对其进行配置&lt;/li&gt;
&lt;li&gt;汽车装配工只关注装配工作，而不需要配置引擎。&lt;/li&gt;
&lt;li&gt;每次引擎更改后只需要对这个配置类进行编译，如果使用xml连编译也不需要了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这真的就是依赖注入的全部内容了，不过围绕依赖注入相关还有很多话题可以讨论，下面扩展就是两个。&lt;/p&gt;

&lt;p&gt;演示了在&lt;code&gt;CarFactory&lt;/code&gt;中手动car，还没完，spring还能更聪明一些，它可以通过自动装配完成这个配置工作：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
public class Car{
    private Engine e;

    @Autowired
    public Car(Engine e){
        this.e = e;
    }

    public void ignite(){
        System.out.println()
    }
}

@Component
public class Level5Engine{
    public void complexConfig(){
        System.out.println(&quot;really complex stuff...&quot;);
    }
}

@Confignuration
@ComponentScan
public class CarFactory{}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;CarFactory&lt;/code&gt;的&lt;code&gt;@ComponentScan&lt;/code&gt;告诉spring扫描当前类所在包下面的所有类，如果找到&lt;code&gt;@Component&lt;/code&gt;注解就加入spring bean容器。这里明显Car和Level5Engine加入了容器(默认会类名首字母小写，所以加入的是&lt;code&gt;car&lt;/code&gt;和&lt;code&gt;level5Engine&lt;/code&gt;)。然后&lt;code&gt;@Autowired&lt;/code&gt;在当前容器中查找，如果找到需要注入的类型就自动注入：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    @Autowired
    public Car(Engine e){
        this.e = e;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Car的装配需要一个引擎，spring容器刚好有一个实现了Engine的Level5Engine引擎，所以这里自动注入。&lt;/p&gt;

&lt;p&gt;最后一个不常见的问题，假如我们把两个引擎都标注了&lt;code&gt;@Component&lt;/code&gt;会怎么样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
public class Level5Engine{
}
@Component
public class Level4Engine{
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;spring不知道用哪一个注入给car，所以抛出&lt;code&gt;NoUniqueBeanDefinitionException&lt;/code&gt;，表示有多个候选注入对象，需要我们手动缩小范围(&lt;code&gt;@Qualifier&lt;/code&gt;,&lt;code&gt;@Component value&lt;/code&gt;,&lt;code&gt;@Primary&lt;/code&gt;)，关于这部分内容可以参见其他文章。&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 14:59:00 +0000</pubDate>
<dc:creator>racaljk</dc:creator>
<og:description>前言 这是因特奈特上面不知道第几万篇讲依赖注入(Dependency Injection)的文章，但是说明白的却寥寥无几，这篇文章尝试控制字数同时不做大多数。 首先，依赖注入的是一件很简单的事情。 为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/racaljk/p/10014031.html</dc:identifier>
</item>
</channel>
</rss>