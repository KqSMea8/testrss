<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>[Abp 源码分析]二、模块系统 - myzony</title>
<link>http://www.cnblogs.com/myzony/p/9198904.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/myzony/p/9198904.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;0.简介&lt;/h2&gt;
&lt;p&gt;整个 Abp 框架由各个模块组成，基本上可以看做一个程序集一个模块，不排除一个程序集有多个模块的可能性。可以看看他官方的这些扩展库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619154548078-1687792934.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到每个项目文件下面都会有一个 &lt;code&gt;xxxModule&lt;/code&gt; 的文件，这里就是存放的模块文件，一个模块拥有四个生命周期，分别为 &lt;code&gt;PreInitialize()&lt;/code&gt;(预加载)、&lt;code&gt;Initialize()&lt;/code&gt;（初始化）、&lt;code&gt;PostInitialize&lt;/code&gt;(初始化完成)、&lt;code&gt;Shutdown()&lt;/code&gt;(销毁)，前三个根据我们上一篇文章的代码可以看到，他是先执行预加载方法，然后执行初始化，最后执行初始化完成方法，销毁方法则是程序退出的时候执行。&lt;/p&gt;
&lt;p&gt;模块的主要作用就是在 Abp 框架加载的时候程序集执行初始化操作的，比如说 Abp 库自身的 &lt;code&gt;AbpKernelModule&lt;/code&gt; 模块，里面就是各种注入基础设施，执行初始化操作。&lt;/p&gt;
&lt;p&gt;可以看看其中代码：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public sealed class AbpKernelModule : AbpModule
{
    public override void PreInitialize()
    {
        // 注册各种过滤器与基础组件
        IocManager.AddConventionalRegistrar(new BasicConventionalRegistrar());

        IocManager.Register&amp;lt;IScopedIocResolver, ScopedIocResolver&amp;gt;(DependencyLifeStyle.Transient);
        IocManager.Register(typeof(IAmbientScopeProvider&amp;lt;&amp;gt;), typeof(DataContextAmbientScopeProvider&amp;lt;&amp;gt;), DependencyLifeStyle.Transient);

        AddAuditingSelectors();
        AddLocalizationSources();
        AddSettingProviders();
        AddUnitOfWorkFilters();
        ConfigureCaches();
        AddIgnoredTypes();
        AddMethodParameterValidators();
    }

    public override void Initialize()
    {
        // 这里是执行替换服务的 Action，Abp 允许用户在预加载操作替换基础设施的服务
        foreach (var replaceAction in ((AbpStartupConfiguration)Configuration).ServiceReplaceActions.Values)
        {
            replaceAction();
        }

        // 安装领域事件总线的基础设施
        IocManager.IocContainer.Install(new EventBusInstaller(IocManager));

        IocManager.Register(typeof(IOnlineClientManager&amp;lt;&amp;gt;), typeof(OnlineClientManager&amp;lt;&amp;gt;), DependencyLifeStyle.Singleton);

        IocManager.RegisterAssemblyByConvention(typeof(AbpKernelModule).GetAssembly(),
            new ConventionalRegistrationConfig
            {
                InstallInstallers = false
            });
    }

    public override void PostInitialize()
    {
        // 权限管理器等初始化才做
        RegisterMissingComponents();

        IocManager.Resolve&amp;lt;SettingDefinitionManager&amp;gt;().Initialize();
        IocManager.Resolve&amp;lt;FeatureManager&amp;gt;().Initialize();
        IocManager.Resolve&amp;lt;PermissionManager&amp;gt;().Initialize();
        IocManager.Resolve&amp;lt;LocalizationManager&amp;gt;().Initialize();
        IocManager.Resolve&amp;lt;NotificationDefinitionManager&amp;gt;().Initialize();
        IocManager.Resolve&amp;lt;NavigationManager&amp;gt;().Initialize();

        if (Configuration.BackgroundJobs.IsJobExecutionEnabled)
        {
            var workerManager = IocManager.Resolve&amp;lt;IBackgroundWorkerManager&amp;gt;();
            workerManager.Start();
            workerManager.Add(IocManager.Resolve&amp;lt;IBackgroundJobManager&amp;gt;());
        }
    }

    public override void Shutdown()
    {
        // 停止所有后台工作者
        if (Configuration.BackgroundJobs.IsJobExecutionEnabled)
        {
            IocManager.Resolve&amp;lt;IBackgroundWorkerManager&amp;gt;().StopAndWaitToStop();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;模块发现与注册&quot;&gt;1.模块发现与注册&lt;/h2&gt;
&lt;h3 id=&quot;发现模块&quot;&gt;1.1 发现模块&lt;/h3&gt;
&lt;h4 id=&quot;搜索所有定义的模块类型&quot;&gt;1.1.1 搜索所有定义的模块类型&lt;/h4&gt;
&lt;p&gt;我们定义好模块之后，Abp 如何发现我们的模块呢？&lt;/p&gt;
&lt;p&gt;在最外部，我们使用 &lt;code&gt;services.AddAbp&amp;lt;TStartModule&amp;gt;()&lt;/code&gt; 的时候，就传入了启动模块类型。&lt;/p&gt;
&lt;p&gt;在之前 &lt;code&gt;AbpBootstrapper&lt;/code&gt; 的 &lt;code&gt;Initialize()&lt;/code&gt; 初始化方法当中通过调用 &lt;code&gt;AbpModuleManager.Initialize(Type startupModule)&lt;/code&gt; 方法来初始化，在其内部可以看到：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public virtual void Initialize(Type startupModule)
{
    _modules = new AbpModuleCollection(startupModule);
    LoadAllModules();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里通过传入启动模块来初始化 &lt;code&gt;AboModuleCollection&lt;/code&gt; 类。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;internal class AbpModuleCollection : List&amp;lt;AbpModuleInfo&amp;gt;
{
    public Type StartupModuleType { get; }

    public AbpModuleCollection(Type startupModuleType)
    {
        StartupModuleType = startupModuleType;
    }

    // 其他代码
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;初始化完成之后，继续调用 &lt;code&gt;LoadAllModules()&lt;/code&gt; 方法，这里就开始加载模块了。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private void LoadAllModules()
{
    Logger.Debug(&quot;Loading Abp modules...&quot;);

    List&amp;lt;Type&amp;gt; plugInModuleTypes;
    // 发现所有 Abp 模块
    var moduleTypes = FindAllModuleTypes(out plugInModuleTypes).Distinct().ToList();

    Logger.Debug(&quot;Found &quot; + moduleTypes.Count + &quot; ABP modules in total.&quot;);

    // 注册 Abp 模块
    RegisterModules(moduleTypes);
    // 创建模块对应的 AbpModuleInfo 包装类
    CreateModules(moduleTypes, plugInModuleTypes);

    // 将核心模块放在第一位初始化
    _modules.EnsureKernelModuleToBeFirst();
    // 将启动模块放在最后一位进行初始化
    _modules.EnsureStartupModuleToBeLast();

    // 设置每个 ModuleInfo 的依赖关系
    SetDependencies();

    Logger.DebugFormat(&quot;{0} modules loaded.&quot;, _modules.Count);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继续跳转，来到内部 &lt;code&gt;FindAllModuleTypes()&lt;/code&gt; 方法，在这个方法里面我们可以看到他调用了 &lt;code&gt;AbpModule&lt;/code&gt; 的一个静态方法来根据其启动模块，之后通过启动模块上面的 &lt;code&gt;DependsOnAttribute&lt;/code&gt; 特性来递归找到它所有的依赖模块。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private List&amp;lt;Type&amp;gt; FindAllModuleTypes(out List&amp;lt;Type&amp;gt; plugInModuleTypes)
{
    plugInModuleTypes = new List&amp;lt;Type&amp;gt;();

    var modules = AbpModule.FindDependedModuleTypesRecursivelyIncludingGivenModule(_modules.StartupModuleType);
    
    // 其他代码
    return modules;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619154619982-1358285207.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;找到模块之后，在 &lt;code&gt;RegisterModules()&lt;/code&gt; 里面通过 &lt;code&gt;IocManager&lt;/code&gt; 的注册方法，将所有模块都注入到 Ioc 容器当中，注意这里注册的所有的 Abp 模块都是单例对象。&lt;/p&gt;
&lt;h4 id=&quot;包装模块信息&quot;&gt;1.1.2 包装模块信息&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;LoadAllModules()&lt;/code&gt; 方法里面，通过 &lt;code&gt;CreateModules()&lt;/code&gt; 方法来包装好 ModuleInfo 类并且将其放在之前初始化完成的 &lt;code&gt;AbpModuleCollection&lt;/code&gt; 对象 &lt;code&gt;_modules&lt;/code&gt; 里面。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private void CreateModules(ICollection&amp;lt;Type&amp;gt; moduleTypes, List&amp;lt;Type&amp;gt; plugInModuleTypes)
{
    foreach (var moduleType in moduleTypes)
    {
        // 解析刚才在 RegisterModules 里面注册的单例模块对象
        var moduleObject = _iocManager.Resolve(moduleType) as AbpModule;
        if (moduleObject == null)
        {
            throw new AbpInitializationException(&quot;This type is not an ABP module: &quot; + moduleType.AssemblyQualifiedName);
        }

        // 为这些模块对象初始化基础设施
        moduleObject.IocManager = _iocManager;
        moduleObject.Configuration = _iocManager.Resolve&amp;lt;IAbpStartupConfiguration&amp;gt;();

        // 包装成为 ModuleInfo
        var moduleInfo = new AbpModuleInfo(moduleType, moduleObject, plugInModuleTypes.Contains(moduleType));

        _modules.Add(moduleInfo);

        if (moduleType == _modules.StartupModuleType)
        {
            StartupModule = moduleInfo;
        }

        Logger.DebugFormat(&quot;Loaded module: &quot; + moduleType.AssemblyQualifiedName);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在每个 &lt;code&gt;ModuleInfo&lt;/code&gt; 对象内部都存放有该模块的模块类型信息，以及他的单例对象实例。&lt;/p&gt;
&lt;h4 id=&quot;确定基本的模块加载顺序&quot;&gt;1.1.3 确定基本的模块加载顺序&lt;/h4&gt;
&lt;p&gt;模块在进行加载的时候，第一个加载的模块一定是从核心模块，最后加载的模块肯定是启动模块。所以，这里的 &lt;code&gt;AbpModuleCollection&lt;/code&gt; 提供了两个方法，一个是 &lt;code&gt;EnsureKernelModuleToBeFirst()&lt;/code&gt; ，一个是 &lt;code&gt;EnsureStartupModuleToBeLast()&lt;/code&gt; 。这两个方法的作用第一个就是将 &lt;code&gt;AbpKernelModule&lt;/code&gt; 放在第一位，第二个就是将启动模块放在集合的末尾。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static void EnsureKernelModuleToBeFirst(List&amp;lt;AbpModuleInfo&amp;gt; modules)
{
    var kernelModuleIndex = modules.FindIndex(m =&amp;gt; m.Type == typeof(AbpKernelModule));
    if (kernelModuleIndex &amp;lt;= 0)
    {
        // 如果 AbpKernelModule 位于首位则不移动位置
        return;
    }

    var kernelModule = modules[kernelModuleIndex];
    modules.RemoveAt(kernelModuleIndex);
    modules.Insert(0, kernelModule);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static void EnsureStartupModuleToBeLast(List&amp;lt;AbpModuleInfo&amp;gt; modules, Type startupModuleType)
{
    var startupModuleIndex = modules.FindIndex(m =&amp;gt; m.Type == startupModuleType);
    if (startupModuleIndex &amp;gt;= modules.Count - 1)
    {
        // 如果启动模块位于尾部则则不移动位置
        return;
    }

    var startupModule = modules[startupModuleIndex];
    modules.RemoveAt(startupModuleIndex);
    modules.Add(startupModule);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;依赖解析&quot;&gt;1.2 依赖解析&lt;/h3&gt;
&lt;p&gt;之前这些步骤已经将我们程序所使用到的所有模块已经加载完成，并且进行了一个基本的排序操作，以确保我们的模块加载顺序没有大问题。但是仅仅这样是不够的， 我们还需要确保我们依赖的模块比被引用的模块要先加载，这个时候就需要确定每个模块的依赖关系，并且根据这个依赖关系再次进行排序。&lt;/p&gt;
&lt;h4 id=&quot;设置每个模块的依赖模块&quot;&gt;1.2.1 设置每个模块的依赖模块&lt;/h4&gt;
&lt;p&gt;因为我们之前为每个模块包装了一个 &lt;code&gt;ModuleInfo&lt;/code&gt;实例，在 &lt;code&gt;ModuleInfo&lt;/code&gt; 内部还有一个属性，叫做：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// All dependent modules of this module.
/// &amp;lt;/summary&amp;gt;
public List&amp;lt;AbpModuleInfo&amp;gt; Dependencies { get; }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以，在 &lt;code&gt;LoadAllModules()&lt;/code&gt; 方法里面还调用了一个方法，叫做 &lt;code&gt;SetDependencies()&lt;/code&gt;，这个方法也是很简单的，遍历已经加载完成的 &lt;code&gt;_modules&lt;/code&gt; 集合，在里面再根据 &lt;code&gt;AbpModule&lt;/code&gt; 提供的 &lt;code&gt;FindDependedModuleTypes()&lt;/code&gt; 方法来获取该模块的所有依赖模块类型。找到之后，在 &lt;code&gt;AbpModuleInfo&lt;/code&gt; 集合里面查找对应的依赖模块的的 &lt;code&gt;ModuleInfo&lt;/code&gt; 信息添加到目标模块的 Dependencies 集合内部。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;private void SetDependencies()
{
    foreach (var moduleInfo in _modules)
    {
        moduleInfo.Dependencies.Clear();

        //Set dependencies for defined DependsOnAttribute attribute(s).
        foreach (var dependedModuleType in AbpModule.FindDependedModuleTypes(moduleInfo.Type))
        {
            var dependedModuleInfo = _modules.FirstOrDefault(m =&amp;gt; m.Type == dependedModuleType);
            if (dependedModuleInfo == null)
            {
                throw new AbpInitializationException(&quot;Could not find a depended module &quot; + dependedModuleType.AssemblyQualifiedName + &quot; for &quot; + moduleInfo.Type.AssemblyQualifiedName);
            }

            if ((moduleInfo.Dependencies.FirstOrDefault(dm =&amp;gt; dm.Type == dependedModuleType) == null))
            {
                moduleInfo.Dependencies.Add(dependedModuleInfo);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619154646800-1992672913.gif&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;确定正确的模块加载顺序&quot;&gt;1.2.2 确定正确的模块加载顺序&lt;/h4&gt;
&lt;p&gt;在所有基本信息加载完成之后，Abp 并没有在 &lt;code&gt;AbpModuleManager&lt;/code&gt; 的 &lt;code&gt;Initialize()&lt;/code&gt; 里面来进行这个重新排序操作，而是在 &lt;code&gt;StartModules()&lt;/code&gt; 方法里面来重新排序。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;StartModules()&lt;/code&gt; 通过 &lt;code&gt;AbpModuleCollection&lt;/code&gt; 提供的 &lt;code&gt;GetSortedModuleListByDependency()&lt;/code&gt; 方法来根据依赖项重新进行了一次排序。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public List&amp;lt;AbpModuleInfo&amp;gt; GetSortedModuleListByDependency()
{
    var sortedModules = this.SortByDependencies(x =&amp;gt; x.Dependencies);
    EnsureKernelModuleToBeFirst(sortedModules);
    EnsureStartupModuleToBeLast(sortedModules, StartupModuleType);
    return sortedModules;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里使用的是存放在 &lt;code&gt;\Abp\src\Abp\Collections\Extensions\ListExtensions.cs&lt;/code&gt; 的一个扩展方法 &lt;code&gt;List&amp;lt;T&amp;gt; SortByDependencies&amp;lt;T&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, Func&amp;lt;T, IEnumerable&amp;lt;T&amp;gt;&amp;gt; getDependencies)&lt;/code&gt;，他是针对 &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; 集合实现的一种拓扑排序。&lt;/p&gt;
&lt;p&gt;排序之后的结果就是按照依赖关系来存放的一个集合，之后通过 List 的 Foreach 方法循环调用其三个生命周期方法即可。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public virtual void StartModules()
{
    var sortedModules = _modules.GetSortedModuleListByDependency();
    sortedModules.ForEach(module =&amp;gt; module.Instance.PreInitialize());
    sortedModules.ForEach(module =&amp;gt; module.Instance.Initialize());
    sortedModules.ForEach(module =&amp;gt; module.Instance.PostInitialize());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;扩展拓扑排序&quot;&gt;1.2.3 扩展：拓扑排序&lt;/h4&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// Extension methods for &amp;lt;see cref=&quot;IList{T}&quot;/&amp;gt;.
/// &amp;lt;/summary&amp;gt;
public static class ListExtensions
{
    /// &amp;lt;summary&amp;gt;
    /// Sort a list by a topological sorting, which consider their  dependencies
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&quot;T&quot;&amp;gt;The type of the members of values.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;param name=&quot;source&quot;&amp;gt;A list of objects to sort&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&quot;getDependencies&quot;&amp;gt;Function to resolve the dependencies&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
    public static List&amp;lt;T&amp;gt; SortByDependencies&amp;lt;T&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; source, Func&amp;lt;T, IEnumerable&amp;lt;T&amp;gt;&amp;gt; getDependencies)
    {
        /* See: http://www.codeproject.com/Articles/869059/Topological-sorting-in-Csharp
         *      http://en.wikipedia.org/wiki/Topological_sorting
         */

        var sorted = new List&amp;lt;T&amp;gt;();
        var visited = new Dictionary&amp;lt;T, bool&amp;gt;();

        foreach (var item in source)
        {
            SortByDependenciesVisit(item, getDependencies, sorted, visited);
        }

        return sorted;
    }

    /// &amp;lt;summary&amp;gt;
    /// 
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&quot;T&quot;&amp;gt;The type of the members of values.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;param name=&quot;item&quot;&amp;gt;Item to resolve&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&quot;getDependencies&quot;&amp;gt;Function to resolve the dependencies&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&quot;sorted&quot;&amp;gt;List with the sortet items&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&quot;visited&quot;&amp;gt;Dictionary with the visited items&amp;lt;/param&amp;gt;
    private static void SortByDependenciesVisit&amp;lt;T&amp;gt;(T item, Func&amp;lt;T, IEnumerable&amp;lt;T&amp;gt;&amp;gt; getDependencies, List&amp;lt;T&amp;gt; sorted, Dictionary&amp;lt;T, bool&amp;gt; visited)
    {
        bool inProcess;
        var alreadyVisited = visited.TryGetValue(item, out inProcess);

        if (alreadyVisited)
        {
            if (inProcess)
            {
                throw new ArgumentException(&quot;Cyclic dependency found! Item: &quot; + item);
            }
        }
        else
        {
            visited[item] = true;

            var dependencies = getDependencies(item);
            if (dependencies != null)
            {
                foreach (var dependency in dependencies)
                {
                    SortByDependenciesVisit(dependency, getDependencies, sorted, visited);
                }
            }

            visited[item] = false;
            sorted.Add(item);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后面专门写文章讲解一下拓扑排序，这里贴上代码，后面会改为文章链接的。&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;2.结语&lt;/h2&gt;
&lt;p&gt;本篇文章主要针对模块系统进行了一个较为详细地分析，后面将会讲解 Abp 依赖注入相关的代码，如果你觉得对你有用请点个赞，谢谢。&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 07:47:00 +0000</pubDate>
<dc:creator>myzony</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/myzony/p/9198904.html</dc:identifier>
</item>
<item>
<title>移形换影 - 短视频色彩特效背后的故事 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9198898.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9198898.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;作者：常青 | 2008 年毕业加入腾讯，一直从事客户端研发相关工作，先后参与过 PC QQ、手机QQ、QQ物联 等产品项目，目前在腾讯视频云团队负责音视频终端解决方案的优化和落地工作，帮助客户在可控的研发成本投入之下，获得业内一流的音视频解决方案，目前我们的产品线包括：互动直播、点播、短视频、实时视频通话，图像处理，AI 等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;从眼睛的进化说起&quot;&gt;从眼睛的进化说起&lt;/h2&gt;
&lt;p&gt;大约在5亿4千万年前的寒武纪，地球上一部分生物体开始进化出了感光细胞，这种细胞可以感应光线的强弱，并且直接驱动本体的运动细胞采取必要的规避动作，以确保脆弱的细胞不被紫外线所伤。&lt;/p&gt;
&lt;p&gt;后来单个的感光细胞开始扎堆聚集并且形成了凹陷，随着凹陷程度的逐步加深，这些感光细胞也就渐渐地汇聚成了一个前部有孔隙的球状结构，“眼球”的雏形也就由此形成了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/eabecdfe19a3c6e9cf22fa68a419f7bc.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;随着球形的眼睛结构渐渐成型，中学物理课本中的“小孔成像”原理也就越来越能发挥作用：只要开孔足够小，光线就能准确地到达这些聚集的感光细胞进而成像，眼前的物体也就开始变得边界清晰。代表腾讯文化吉祥物之一的鹦鹉螺，就是采用了这种“以小为美”的进化策略，而且一直坚持到现在。&lt;/p&gt;
&lt;p&gt;但是这种越来越小的策略也会导致光线进入量越来越小，所以鹦鹉螺们的世界想必是很昏暗的。我们的祖先可不希望放弃一个光明的世界，所以，我们给自己的眼睛安装了一个足够高级的光学部件 —— 晶状体，以期拥有一个光明而清晰地世界。&lt;/p&gt;
&lt;p&gt;然而，当大家都能把世界看得很清楚的时候，色彩分辨能力也就演变成了新一轮的军备竞赛。&lt;/p&gt;
&lt;p&gt;当我们的祖先踩着那些坚称“我就想健健康康地当个素食主义者”的同类尸体艰难前行的时候，他们并不知道，让自己活得更久的原因，竟然是因为那双能区分树叶是嫩叶还是成熟叶片的眼睛。因为成熟的叶片常常包含大量的植物性毒素，会让进食者身体遭受很大的伤害。所以，我们都是那一波“好色的”猴子的后代。&lt;/p&gt;
&lt;p&gt;而眼睛对色彩的分辨能力，不仅在远古时代让我们活了下来，也让今天衣食无忧的我们，能看到更多色彩斑斓的效果。比如短视频的移形换影特效，其本质原理就是一个充分利用色彩的小把戏。&lt;/p&gt;
&lt;h2 id=&quot;三原色的修改和组合&quot;&gt;三原色的修改和组合&lt;/h2&gt;
&lt;p&gt;人体有三种视觉锥细胞，所以我们看到的颜色都是由三原色组成的，并不是说世界上就只有这些颜色，而是更加绚丽的色彩空间我们也感知不到。&lt;/p&gt;
&lt;p&gt;因此，液晶显示器的成像原理上也就是基于 R（红）G（绿）B（蓝） 三原色的组合而实现的，腾讯云短视频（UGSV）的移形换影特效，就是在这三种颜色空间上做了一些文章：&lt;/p&gt;
&lt;p&gt;先以一幅静态的图片来举例:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/9a39fd1f61b805fec992b9220a546982.jpg&quot; alt=&quot;Doloris&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在把图片中红色的分量去掉,放大10%,再移动一些距离&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/342d626f87441e0b2c640b514d0fcfb8.png&quot; alt=&quot;Doloris-strip-red&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再把蓝色的分量去掉,放大10%,并移动一些距离&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/c06de3a1b934414672946773099d9a24.png&quot; alt=&quot;Doloris-strip-blue&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再把绿色的分量去掉,放大10%,并移动一些距离&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/54d86c1a9af413ff7901cf834be8f474.png&quot; alt=&quot;Doloris-strip-green&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后将这三副图片以33%的透明度和源图叠加到一起，形成一种移形幻影的效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/735e8168917f7722bdd22d99619e7c24.png&quot; alt=&quot;Doloris-blend&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;交给计算机来实现&quot;&gt;交给计算机来实现&lt;/h2&gt;
&lt;p&gt;上面这些图片是我用图片处理软件简单处理后得到的，但如果是视频文件，显然要交给计算机自动解决，如何做到呢？&lt;/p&gt;
&lt;p&gt;首先我们先给这幅图片定义坐标，为了方便处理我们将图片的中心点定义为 (0,0)，图片的XY轴最大值为 1，如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/697552c6f507b42030ba7d5f7ff0e792.png&quot; alt=&quot;img&quot;/&gt;坐标定义&lt;/p&gt;
&lt;p&gt;然后开始处理上面提到的两个变换，一个是放大，一个是移动。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;放大&lt;/strong&gt; 如果定义图片上的任意象素坐标是&lt;code&gt;(x,y)&lt;/code&gt;，放大 s倍后的坐标就是 &lt;code&gt;(x',y') = s(x,y) = (sx, sy)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动&lt;/strong&gt; 如果定义图片上的任意象素坐标是&lt;code&gt;(x,y)&lt;/code&gt;，将其移动&lt;code&gt;(?x,?y)&lt;/code&gt;，移动后的坐标就是&lt;code&gt;(x',y') = (x+?x, y+?y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并&lt;/strong&gt; 将上面两个公式进行合并，得到的新坐标点就是 &lt;code&gt;(x',y') = (s(x+?x), s(y+?y))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;叠加&lt;/strong&gt; 然后我们要将修改过的图片叠加到原图上，alpha叠加的公式是 &lt;code&gt;src * (1 - alpha) + overlay * alpha&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;基于opengl的版本&quot;&gt;基于OpenGL的版本&lt;/h2&gt;
&lt;p&gt;短视频的特效处理，每秒钟要处理几十张甚至更多的视频画面，所以简单的 C 语言处理算法并不能满足性能上的要求，我们需要使用手机的硬件加速能力，目前除了常见的 OpenGL 等 API 之外，还有如 Vulkan, DirectX, Metal 等可选方案。就目前而言，OpenGL 在各平台上通用性最好，网上的资料也比较丰富，不论是桌面平台还是移动平台都有支持，本文就以 OpenGL 来讲讲特效的实现。&lt;/p&gt;
&lt;p&gt;实现&lt;strong&gt;移形换影&lt;/strong&gt;特效的时候，我们会用到 OpenGL 的 Fragment Shader, Fragment Shader 作用就是返回图像各点的色值，Fragment Shader也有一套自己的编程语言，叫 Shading Language 简称GLSL, GLSL 和 C 很像，增加了一些向量的数据类型，和一些图像相关的处理函数。Shading 和 C 比起来有一个比较特殊的地方是不支持隐含的类型转换，比如浮点点整型的转换（在使用浮点数时，一定要加上小数点，如 1.0）。&lt;/p&gt;
&lt;p&gt;篇幅原因，我不在这里把所有的特效代码都一一列举了，仅附上放大和位移的部分实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;varying vec2 textureCoordinate;
uniform sampler2D inputImageTexture;

void main() {
    vec2 offset = vec2(0.05, 0.05);
    float scale = 1.1;
    vec2 coordinate;
    coordinate.x = (textureCoordinate.x - offset.x) / scale;
    coordinate.y = (textureCoordinate.y - offset.y) / scale;
    gl_FragColor = texture2D(inputImageTexture, coordinate);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;考虑到不是所有读者都学过 Shading Language，这里做一个简单的解读：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们在这里定义了一个变量 &lt;code&gt;coordinate&lt;/code&gt;，这个就是前面提到的&lt;code&gt;(x,y)&lt;/code&gt;，它的值就是 &lt;code&gt;((x - ?x)/s, (y-?y)/s)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;函数 &lt;code&gt;texture2D&lt;/code&gt; 的作用就是从图片中获取某个坐标的颜色。这里从 &lt;code&gt;inputImageTexture&lt;/code&gt; 中的 &lt;code&gt;coodinate&lt;/code&gt; 坐标点获取了颜色。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gl_FragColor&lt;/code&gt;, 这是 Fragment Shader 的输出的值， &lt;code&gt;gl_FragColor&lt;/code&gt;是一个GLSL预定义的全局变量， 类型是&lt;code&gt;vec4&lt;/code&gt;既 (r,g,b,a) 这四个量，也就是一个 RGBA 颜色。&lt;/li&gt;
&lt;li&gt;程序运行后在&lt;code&gt;textureCoordinate&lt;/code&gt;这个坐标就会显示&lt;code&gt;gl_FragColor&lt;/code&gt;这个颜色。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面讲了单幅图的处理，对于视频我们可以做些更有意思的效果，比如我们可以把当前帧和上一帧的图片进行叠加，这样就可以作出一些更有意思的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/5f8b7f52dd44341d81bb59fa3f95b699.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;更多特效&quot;&gt;更多特效&lt;/h2&gt;
&lt;p&gt;本文介绍了腾讯云短视频（UGSV）众多视频特效中的一种，如果要实现更加复杂的特效，还是需要继续深入研究 OpenGL 和人脸识别等相关领域的知识，这需要一段时间的学习和努力，也不可避免的需要踩很多坑。&lt;/p&gt;
&lt;p&gt;那有没有只需几分钟，就能一马平川地搭快速搭建建带有各种神奇特效的短视频应用速成方案呢？&lt;/p&gt;
&lt;p&gt;长按识别下图中的二维码，到我们的腾讯云的&lt;a href=&quot;https://cloud.tencent.com/product/UGSV?fromSource=yjsq&quot;&gt;短视频官网&lt;/a&gt;专区了解我们的短视频产品。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://main.qcloudimg.com/raw/d42a9e444e34f86205b3a64a7d651584.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;您可以安装我们为您准备的一个完整版Demo，用来展现我们的产品特性。值得一提的是，这个Demo的源代码是完全免费和开源的，只需要到腾讯云-视频服务-短视频（UGSV）的文档区官网就能下载到。&lt;/p&gt;
&lt;p&gt;腾讯云短视频 SDK 是不收取额外费用的，但如果您想要使用，需要购买腾讯云点播流量资源包旗舰版2（1W/年）、旗舰版3，免费领取一年使用有效期的 license ，同时，您也可以在不支付任何费用的情况下获得一个月试用期，欢迎您的指导。更多内容&amp;gt;&amp;gt;&lt;a href=&quot;https://cloud.tencent.com/product/UGSV?fromSource=yjsq&quot;&gt;短视频官网&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;1.3602150537634&quot;&gt;
&lt;p&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/60853?fromSource=waitui&quot;&gt;短视频中是如何鉴黄的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1148310?fromSource=waitui&quot;&gt;心随手动，驱动短视频热潮的引擎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1118862?fromSource=waitui&quot;&gt;从QQ视频通话到企业级融合音视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1139584?fromSource=waitui&quot;&gt;如何实现无缝切换的主播pk方案&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**此文已由作者授权腾讯云+社区发布，原文链接：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1148326?fromSource=waitui**&quot; class=&quot;uri&quot;&gt;https://cloud.tencent.com/developer/article/1148326?fromSource=waitui**&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家前往腾讯云+社区或关注云加社区微信公众号（QcloudCommunity），第一时间获取更多海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 07:46:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9198898.html</dc:identifier>
</item>
<item>
<title>Unity资源打包学习笔记（一）、详解AssetBundle的流程 - zblade</title>
<link>http://www.cnblogs.com/zblade/p/9198647.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zblade/p/9198647.html</guid>
<description>&lt;p&gt;&lt;span&gt;转载请标明出处：&lt;a href=&quot;http://www.cnblogs.com/zblade/&quot;&gt;http://www.cnblogs.com/zblade/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本文参照unity官网上对于assetBundle的一系列讲解，主要针对assetbundle的知识点做一个梳理笔记，也为后续的资源打包设计做一个基础学习，本文的代码和图片均来自unity官网，详情可以查看Unity的DOCUMENTATION。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、什么是AssetBundle&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　AssetBundle就像一个ZIP压缩文件，里面存储着不同平台的特殊资源(models/texture/prefabs/materials/audio clip/scenes...)， 这些资源都可以在运行时进行加载。具体的assetBundle中主要包含什么？主要包含两种互相关联的东西：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 磁盘上的文件：也就是assetbundle文档，可以将其视为一个容器或者文件夹，其中包含两类文件：序列化文件和资源文件，序列化文件就是资源在打包后对应的各个平台的序列化操作后的文件，资源文件主要是针对textures/audio等较大的文件打包的二进制文件，这类文件在加载的时候是在其他线程执行的（效率更高）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 就是实际的assetbundle对象了，可以通过代码来进行资源加载，其中主体是各个资源在进行加载的时候的存储路径图。用图表示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201806/656520-20180619145634368-2086711278.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、如何对资源进行分组便于打包AssetBundle&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　虽然可以对AssetBundle自由的进行规划，但是在进行项目的资源管理的时候，还是有一些规划建议可以采用：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.依据逻辑实体进行分组&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这种资源分类方式是依据资源的功能进行分类，例如 UI/角色/场景/code等具体各自功能规划的部分来进行资源分组，可以将所有的textures/layout data都打入UI相关分类中，可以将所有的模型和动画都打入角色相关的资源中，将场景相关的贴图和模型都打入场景资源中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　采用逻辑实体分组，对于资源的下载更新更为有利，由于资源的分类，可以在进行资源更新的时候，只更新对应的资源，而无需更新冗余的其他资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　使用这种分类方式最合适的策略，就是将资源进行详细的分类(when and where will be used)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.类型分组&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　主要依据资源的类型来进行分组，这样对于不同的应用平台都具有一定的适用性。比如对于audio文件的压缩设置，在mac和windows上都是一致的，那么可以将audio文件都归类为一类文件，实现文件资源的复用(不同平台的打包设置)，对于shaders而言，对于不同平台需要不同的编译设置，那么就需要分类处理。这类分类方法，对于在不同的版本中变动频率较低的代码文件和prefabs显得更有优势。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.相互关联的内容分组&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这种策略的，就是将需要同时进行加载的资源都归类为一个分组，例如将不同场景中的角色都依据场景来进行分组，这就要求单独一个场景中的资源只能用于该场景，各个分组之间没有互相关联的关系。这种分类方式，对于资源的加载时间有较大的缩减，这种分类方式的使用场合主要在场景资源中，在不同的场景资源中，其包含的资源各自互相不关联。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在一个项目中，可以将上述的几种策略都交互使用，对应具体的应用需求来灵活的采用分组策略，当然unity也提供了一些资源分组的tips:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;分离高频和低频更新的资源；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;将需要同时下载的资源合并进一个组，例如Model以及其关联的animations；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果出现多个bundle中的多个object都依赖于另一个完全不同的bundle，那么将这些依赖关系都移动到一个单独的bundle，这样可以降低依赖关系的复杂度；多个bundle均依赖于另一个bundle中的资源，那么将这些bundle以及其依赖的资源归类到一个资源，这样可以降低资源的重复率(避免一份资源被拷贝到多个不同的bundle中)；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;不可能同时加载的资源，需要归类的各自的assetbundle中，例如标准和高配的资源；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果一个assetbundle中资源在加载的时候低于50%需要被加载，那么可以考虑将这些需要被加载的资源单独分类为一个资源(避免冗余的加载)；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果一组Objects对应的是一个资源的不同版本，那么可以考虑assetbundle variants&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、如何打包AssetBundle&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　unity资源打包的接口，就是BuildPipeline.BuildAssetBundles函数，其对应具体的三个参数，第一个是bundle的输出路径，下面来详细分析一下剩下的2个参数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、BuildAssetBundleOptions&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　具体的参数设置，可以参看API当中的详细信息，下面主要集中说三个参数，分别对应三种压缩格式的选择。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）BuildAssetBundleOptions.None :&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　采用LZMA的压缩格式， 这种压缩格式要求资源在使用之前需要全部被解压，这就会带来在使用一个极小的文件的时候会额外带来较长的解压时间消耗。比较蛋疼的是，一旦这个bundle被解压之后，在磁盘上又会以LZ4的格式重新压缩，LZ4的压缩格式，在使用资源的时候不需要全部解压。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种压缩格式主要用于一个bundle中资源都需要被加载的时候，例如打包角色或者场景资源的时候，这种压缩格式在初始化下载的时候被推荐(更小的包体)，这些资源在被解压后，又会以LZ4的格式被缓存。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2） BuildAssetBundleOptions.UncompressedAssetBundle:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　无压缩的打包，加载的文件更大，但是时间更快(省去解压的时间)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）BuildAssetBundleOptions.ChunkBasedCompression:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　采用LZ4的压缩格式，相比于LZMA而言文件体积更大，但是不要求在使用之前整个bundle都被解压。LZ4使用chunk based 算法，这就运行文件以chunk或者piece的方式加载，只解压一个chunk文件，而无需解压bundle中其余不相关的chunk。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、BuildTarget&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　也就是当前资源需要被使用的平台的分类，在打完资源后，会发现文件夹中有更多的文件，一般是2*(n+1), 对于各个不同的资源，都会有一个manifest文件，一般是 bundlename+&quot;.manifest&quot;，除此之外，还会有一个额外的manifest文件，对应不同的平台会有不同的额外的manifest（这是一个总体的manifest文件）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于manifest中内容，可以在文本文件中打开，一般举例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ManifestFileVersion: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
CRC: &lt;/span&gt;&lt;span&gt;2422268106&lt;/span&gt;&lt;span&gt;
Hashes:
  AssetFileHash:
    serializedVersion: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    Hash: 8b6db55a2344f068cf8a9be0a662ba15
  TypeTreeHash:
    serializedVersion: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
    Hash: 37ad974993dbaa77485dd2a0c38f347a
HashAppended: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
ClassTypes:
&lt;/span&gt;- Class: &lt;span&gt;91&lt;/span&gt;&lt;span&gt;
  Script: {instanceID: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;}
Assets:
  Asset_0: Assets&lt;/span&gt;/Mecanim/&lt;span&gt;StateMachine.controller
Dependencies: {}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　首先是版本，然后是CRC校验码，hash码，classtypes，包含的资源及其路径，依赖关系(dependencies)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PS:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于依赖关系就多详细讲解一下，所谓的依赖关系，指的是一个bundle中的一个或者多个UnityEngine.Objects包含对另一个bundle中的一个UnityEngine.Object的引用，如果一个bundle中的object对包含对其他非该bundle的object的引用，但是该object不属于任何一个bundle，那么这种依赖关系就不存在（这儿会带来一个问题，如果多个bundle均引用一个不属于bundle的object，那么在加载的时候，各个bundle均会将该object进行copy到其内存中，这就带来内存的额外冗余占用），所以依赖关系就是两个或者多个bundle之间的object的引用关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于依赖资源的加载，需要在该资源被加载前加载，unity不会自动的加载依赖资源，这需要在代码中实现依赖资源的加载。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、如何使用AssetBundle&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在说完bundle的分类，打包后，接下来就是如何在实际的游戏中加载使用这些bundle。在unity5以后，提供了4种不同类型的加载接口，下面逐一分析一下这四种不同接口的使用：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、AssetBundle.LoadFromMemoryAsync(byte[] binary, unit crc = 0)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个方法用来加载ab数据的bytes数组，如果数据是使用LZMA的压缩格式，那么在加载的时候会进行解压的操作，LZ4格式的数据则会保持其压缩的状态，使用示例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; UnityEngine;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Example : MonoBehaviour
{
    IEnumerator LoadFromMemoryAsync(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; path)
    {
        AssetBundleCreateRequest createRequest &lt;/span&gt;=&lt;span&gt; AssetBundle.LoadFromMemoryAsync(File.ReadAllBytes(path));
        &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; createRequest;
        AssetBundle bundle &lt;/span&gt;=&lt;span&gt; createRequest.assetBundle;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; prefab = bundle.LoadAsset&amp;lt;GameObject&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyObject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        Instantiate(prefab);
    }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　当然，对于bytes数组，也可以使用File.ReadAllBytes(path)的方式来加载数组。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、 AssetBundle.LoadFromFile&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在加载非压缩文件或者LZ4压缩类型文件的时候，该接口效率极高，对于LZMA压缩格式的文件，也会在加载的时候执行解压的操作，使用示例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoadFromFileExample extends MonoBehaviour {
    function Start() {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; myLoadedAssetBundle = AssetBundle.LoadFromFile(Path.Combine(Application.streamingAssetsPath, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myassetBundle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (myLoadedAssetBundle == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            Debug.Log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Failed to load AssetBundle!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; prefab = myLoadedAssetBundle.LoadAsset.&amp;lt;GameObject&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MyObject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        Instantiate(prefab);
    }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;ps: 在unity5.3及更早的版本中，在安卓平台上如果从streaming assets路径中加载文件会失败(路径文件夹中会额外包含.jar文件)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、WWW.LoadFromCacheOrDownload&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个接口会被淘汰（被UnityWebRequest替换），那么就不过多的讲解这个接口（注意这个接口会进行存储分配的操作以容纳资源，如果分配不足以存储会使得加载失败）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、UnityWebRequest&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个接口，会有两步操作，首先是创建一个web request（调用UnityWebRequest.GetAssetBundle）, 然后进行资源的获取（调用DownloadHandlerAssetBundle.GetContent），unity提供的使用示例为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;IEnumerator InstantiateObject()
    {
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; uri = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;file:///&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + Application.dataPath + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/AssetBundles/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; assetBundleName;       
         UnityEngine.Networking.UnityWebRequest request &lt;/span&gt;= UnityEngine.Networking.UnityWebRequest.GetAssetBundle(uri, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;span&gt; request.Send();
        AssetBundle bundle &lt;/span&gt;=&lt;span&gt; DownloadHandlerAssetBundle.GetContent(request);
        GameObject cube &lt;/span&gt;= bundle.LoadAsset&amp;lt;GameObject&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cube&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        GameObject sprite &lt;/span&gt;= bundle.LoadAsset&amp;lt;GameObject&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sprite&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        Instantiate(cube);
        Instantiate(sprite);
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　使用这种方式，可以使得开发者更为灵活的操作下载数据，同时进行内存使用分配，会逐渐的被用来WWW接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在加载完assetBundle后，接下来，就是如何从bundle中获取资源(asset)，其基本的接口模板为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;T objectFromBundle = bundleObject.LoadAsset&amp;lt;T&amp;gt;(assetName);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　如果想获取所有的assets则可以使用接口：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Unity.Object[] objectArray = loadedAssetBundle.LoadAllAssets();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　一旦获取到asset，那么就可以在游戏中使用这些资源了（一般是实例化创建操作）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5、加载AssetBundle Manifest&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　除了加载assetbundle，一般还会加载其对应的manifest（与其存储在同一个文件夹下的相同名字的manifest），一般加载manifest的操作示例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;AssetBundle assetBundle =&lt;span&gt; AssetBundle.LoadFromFile(manifestFilePath);
AssetBundleManifest manifest &lt;/span&gt;= assetBundle.LoadAsset&amp;lt;AssetBundleManifest&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AssetBundleManifest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在前文也提及到，如果一个assetbundle依赖于另一个assetbundle，那么需要提前加载依赖相关的bundle，那么依据manifest，可以加载其依赖的assetbundle:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;AssetBundle assetBundle =&lt;span&gt; AssetBundle.LoadFromFile(manifestFilePath);
AssetBundleManifest manifest &lt;/span&gt;= assetBundle.LoadAsset&amp;lt;AssetBundleManifest&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AssetBundleManifest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;[] dependencies = manifest.GetAllDependencies(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;assetBundle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Pass the name of the bundle you want the dependencies for.&lt;/span&gt;
&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt; dependency &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dependencies)
{
    AssetBundle.LoadFromFile(Path.Combine(assetBundlePath, dependency));
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　现在，已经加载了assetbundle, 也获取了assetbundle的dependencies，以及其中assets，这样就可以管理这些assetbundle了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、管理AssetBundle&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　unity在场景中的Object被移除的时候不自动释放objects，资源的清理需要再特定的时间触发(场景切换)或者手动的管理。所以怎么加载和卸载资源显得尤为重要，不合适的加载可能会导致资源的重复加载，不合适的卸载可能会带来资源的缺失(比如丢失贴图)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于assetbundle的资源管理，最重要的是掌握什么时候调用AssetBundle.Unload(bool)这个函数，传入true/false会有不同的卸载策略。这个API会卸载对应的assetbundle的头部信息，参数对应着是否同时卸载从该assetbundle中实例化的所有Objects。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　AssetBundle.Unload(true)会卸载assetbundle中的所有gameobjects以及其依赖关系，但是并不包括基于其Objects实例化（复制）的Object（因为这些object不属于该assetbundle，只是引用），所以当卸载贴图相关的assetbundle的时候，场景中对其引用的实例化物体上会出现贴图丢失，也就是场景中会出现红色的区域，unity都会将其处理成贴图丢失。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　举例说明，假设材质M来自于assetbundle AB, 如果 AB.Unload(true), 那么场景中任何M的实例都会被卸载和销毁，如果AB.Unload(false)， 那么就会切断材质M实例与AB之间的关系：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201806/656520-20180619150123183-1327375202.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么如果该assetbundle AB在后面再次被加载，unity不会重新关联其关系，这样在后续的使用中，就会出现一份材质的多个实例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/656520/201806/656520-20180619150142328-605939073.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以通常情况下，AssetBundle.Unload(false) 并不能带来较为合理的释放结果，AssetBundle.Unload(true)通常用来确保不会在内存中多次拷贝同一个资源，所以其更多的被项目所采纳，此外还有两个常用的方法用来确保其使用：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）在游戏中，对于场景的卸载有明确的规划，比如在场景切换中或者场景加载中；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）管理好对每个单独的object的计数，只有在没有引用的时候才卸载该assetbundle，这样可以规避加载和卸载过程中的多份内存拷贝问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果要使用AssetBundle.Unload(false)， 那么这些实例化的对象可以通过2中途径卸载：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）清除对不需要物体的所有引用，场景和代码中都需要清楚，然后调用Resources.UnloadUnusedAssets;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2) 在场景加载的时候采用非增量的方式加载，这会清楚当前场景中的所有Objects，然后反射自动调用Resources.UnloadUnusedAssets&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你不想管理这些assetbundle，unity推出了AssetBundle Manager，可以学习了解一下，此外Unity还推出了一些AssetBundle Browser Tool, 也可以学习了解一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 07:08:00 +0000</pubDate>
<dc:creator>zblade</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zblade/p/9198647.html</dc:identifier>
</item>
<item>
<title>正确理解CAP定理 - 陈珙</title>
<link>http://www.cnblogs.com/skychen1218/p/9198551.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skychen1218/p/9198551.html</guid>
<description>&lt;p&gt;　　CAP的理解我也看了很多书籍，也看了不少同行的博文，基本每个人的理解都不一样，而布鲁尔教授得定义又太过的简单，没有具体描述和场景案例分析。因此自己参考部分资料梳理了一篇与大家互相分享一下。&lt;/p&gt;
&lt;p&gt;　　标题写了正确理解，或许某些点不是百分百正确或者有歧义，但是希望与各位分享讨论后达到&lt;strong&gt;最终正确&lt;/strong&gt;，&lt;/p&gt;

&lt;p&gt;　　CAP定理，又被称作布鲁尔定理（Brewer's theorem），是埃里克·布鲁尔教授在2000 年提出的一个&lt;strong&gt;猜想&lt;/strong&gt;，它指出对于一个分布式系统来说，不可能同时满足以下三点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Consistency（一致性）: where all nodes see the same data at the same time.（所有节点在同一时间具有相同的数据）&lt;/li&gt;
&lt;li&gt;Availability（可用性）: which guarantees that every request receives a response about whether it succeeded or failed.（保证每个请求不管成功或者失败都有响应）&lt;/li&gt;
&lt;li class=&quot;para&quot;&gt;Partition tolerance（分隔容忍）: where the system continues to operate even if any one part of the system is lost or fails.（系统中任意信息的丢失或失败不会影响系统的继续运作）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　很多书籍与文章引用Robert Greiner在2014年8月写的一篇博文 http://robertgreiner.com/2014/08/cap-theorem-revisited/。相比与看着布鲁尔教授一脸懵逼的定义，Robert Greiner的更加容易理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原文&lt;/strong&gt;：In a distributed system (a collection of &lt;strong&gt;interconnected nodes&lt;/strong&gt; that &lt;strong&gt;share data&lt;/strong&gt;.), you can only have two out of the following three guarantees across &lt;strong&gt;a write/read pair&lt;/strong&gt;: Consistency, Availability, and Partition Tolerance - one of them must be sacrificed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;翻译&lt;/strong&gt;：在一个分布式系统（指互相连接并共享数据的节点的集合）中，当涉及读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲。&lt;/p&gt;
&lt;p&gt;关键字：interconnected nodes（互连节点）、share data（共享数据）、a write/read pair（读／写）&lt;/p&gt;
&lt;p&gt;　　从上面一段话，有几个，也就是说我们聊CAP定理的时候，是在具有数据读写、数据共享和节点互连的前提下，对上面三者选其二，也是建议我们不要花费时间与精力同时满足三者。&lt;/p&gt;
&lt;p&gt;举例说明，web集群、memcached集群不属于讨论对象&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;web集群只是资源复制分配在不同的节点上，然而节点间没有互连、也没有数据共享（sessionid、memory cache）。&lt;/li&gt;
&lt;li&gt;memcached集群数据存储是通过客户端实现哈希一致性，但是集群节点间不互连的，也没有数据共享。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总得来说，CAP定理讨论的并不是分布式系统所有的功能。&lt;/p&gt;

&lt;p&gt;原文：A read is guaranteed to return the most recent write for &lt;strong&gt;a given client&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;翻译：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果&lt;/p&gt;
&lt;p&gt;关键字：a given client（指定的客户端）。&lt;/p&gt;
&lt;p&gt;　　这里的一致性与我们平常了解ACID的一致性有点偏差，ACID的一致性关注的是数据库的数据完整性。&lt;/p&gt;
&lt;p&gt;　  上面定义没说明是所有节点必须在同一时间数据一致，而关注点在客户端，假如有个场景，您在ATM(客户端)往某张银行卡存500元后，立刻在ATM发起查询余额的时候会显示加了500元后的余额，随后我们也能把这500元取出来。查询余额读操作可以是写后立刻读的主库，也或者写后某个时间段过后（中途无写）读从库。&lt;/p&gt;

&lt;p&gt;原文：A &lt;strong&gt;non-failing node&lt;/strong&gt; will return &lt;strong&gt;a reasonable response&lt;/strong&gt; within a reasonable amount of time (no error or timeout).&lt;/p&gt;
&lt;p&gt;翻译：非故障节点将在合理的时间内返回合理的响应（不是错误或超时）。&lt;/p&gt;
&lt;p&gt;关键字：non-failing node（非故障节点）、reasonable response（合理的响应）&lt;/p&gt;
&lt;p&gt;　　这里的可用性和我们平常所理解的高可用性有点偏差，高可用性指系统无中断的执行其功能的能力。&lt;/p&gt;
&lt;p&gt;　　已故障的节点就不具有可用性了，因为请求结果要么error要么 timeout。合理的响应没有说明是成功还是失败，但是响应应该具有是否成功的精确描述。例如我们读取sql server集群的某从库，同步需要时间，读取出来可能不是最新的数据，但却是合理的响应。&lt;/p&gt;

&lt;p&gt;原文：The system will &lt;strong&gt;continue to function&lt;/strong&gt; when network partitions occur.&lt;/p&gt;
&lt;p&gt;翻译：当网络分区发生时，系统将继续正常运作&lt;/p&gt;
&lt;p&gt;关键字：continue to function（继续正常运作）&lt;/p&gt;
&lt;p&gt;　　假如做了一个redis的一主两从的集群，某天某个从节点因为网络故障变成不可用，但是另外的一主一从仍然能正常运作，那么我们认为它具有分区容错性。&lt;/p&gt;

&lt;p&gt;　　作为分布式系统，分区必然总会发生（2年1次50分钟还是1年3次共10分钟？），因此认为CAP的讨论是大部分建立在P确立前提下。假设我们牺牲了P这个时候因为网络故障发生了分区导致节点不可用，这个时候请求响应了error、timeout，与可用性的定义相冲突了。&lt;/p&gt;
&lt;p&gt;　　但是，我们又假如分区大部分时间是不存在的，这时对单节点的读\写，那么就无需作出C、A的取舍。但是上面说分区总会发生这不互相矛盾么，还是取舍。假如1年时间内99.99%时间是正常的，不可用时间为0.01%（52.56分钟）不可用，若这个时间属于业务接受范围，或者只在某个地区（华南、华北、华中？）有影响，那么CA也是可以选择的。&lt;/p&gt;

&lt;p&gt;　　最典型的案例是RDBMS集群与Redis集群，这两种都是利用主从复制实现读写分离的方案。假如两者都是建立一主多从的集群，在主节点写入数据，为了保证随后的读操作获取最新数据（一致性），这个读操作仍会请求主节点（读写分离的复杂点在从库同步不及时导致业务的异常，为了保证业务的正常性写后的读会请求主库），某个从节点挂了但是只要主节点和其他从节点仍然正常运作，就满足分区容错性。但是哪天主节点因为网络故障导致写操作的error或者timeout，那么这个系统就不可用了（牺牲可用性）。&lt;/p&gt;
&lt;p&gt;这个时候可以引入其他功能和机制完成，例如Redis哨兵模式、故障转移功能。&lt;/p&gt;

&lt;p&gt;　　最典型的案例是Cassanda集群和Riak集群，这种类型的分布式数据库，可以任意节点写入，任意节点读取，当作为集群出现，无论写入哪个节点，都将会把该节点的数据同步到其他节点上，因为这种同步方式，读取数据时只要访问一个节点就足够了（喜欢任意访问也不拦着你），但是因为其他节点数据同步原因，数据可能并不是最新的（牺牲一致性）。如果当前节点因为网络异常导致分区变得不可用（无论读\写），可以转移访问节点（可用性）。&lt;/p&gt;
&lt;p&gt;另外这里说的牺牲一致性，并不代表放弃一致性，而PA选择的是最终一致性（系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态）&lt;/p&gt;

&lt;p&gt;　　上面涉及“牺牲”字眼，并不代表非此即彼的选择，可以根据子系统、模块之间的设计上进行混搭使用（例如PA和PC、CA和PC）。&lt;/p&gt;
&lt;p&gt;　　本文对CAP定理做了一个简单的梳理描述，参考了部分书籍和文章加上自己的理解希望可以跟大家做个分享，如果有不同建议和看法包括文章内描述错误，请在下方评论指出，我将及时作出修改。&lt;/p&gt;

</description>
<pubDate>Tue, 19 Jun 2018 06:52:00 +0000</pubDate>
<dc:creator>陈珙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skychen1218/p/9198551.html</dc:identifier>
</item>
<item>
<title>日志切割工具logrotate解决Tomcat catalina.out日志过大的问题 - 阿龙along</title>
<link>http://www.cnblogs.com/along21/p/9198427.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/along21/p/9198427.html</guid>
<description>&lt;h2&gt;&lt;span&gt;一、介绍日志切割logrotate&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　对于Linux系统安全来说，日志文件是极其重要的工具。不知为何，我发现很多运维同学的服务器上都运行着一些诸如每天切分Nginx日志之类的CRON脚本，大家似乎遗忘了Logrotate，争相发明自己的轮子，这真是让人沮丧啊！就好比明明身边躺着现成的性感美女，大家却忙着自娱自乐，罪过！&lt;/p&gt;
&lt;p&gt;　　logrotate程序是一个日志文件管理工具。用于&lt;strong&gt;分割日志文件，删除旧的日志文件，并创建新的日志文件，起到&quot;转储&quot;作用。可以节省磁盘空间&lt;/strong&gt;。&lt;span&gt;例如，你可以设置logrotate，让/var/log/logfile日志文件每30天轮循，并删除超过6个月的日志。配置完后，logrotate的运作完全自动化，不必进行任何进一步的人为干预。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;二、logrotate配置使用&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、安装logrotate&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）系统版本，我使用的如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@along ~]# cat /etc/redhat-&lt;span&gt;release 
CentOS Linux release &lt;/span&gt;&lt;span&gt;7.3&lt;/span&gt;.&lt;span&gt;1611&lt;/span&gt;&lt;span&gt; (Core) 
[root@along &lt;/span&gt;~]# uname -&lt;span&gt;r
&lt;/span&gt;&lt;span&gt;3.10&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;514.26&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;.el7.x86_6  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）默认centos系统安装自带logrotate，直接使用yum 安装&lt;/p&gt;
&lt;p&gt;[root@along ~]# yum -y install logrotate  &lt;/p&gt;

&lt;p&gt;（3）软件包说明&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@along ~]# rpm -ql logrotate&lt;br/&gt;/etc/cron.daily/&lt;span&gt;logrotate
&lt;/span&gt;/etc/&lt;span&gt;logrotate.conf   #logrotate 自身的配置文件
&lt;/span&gt;/etc/logrotate.d   #配置切割设置的目录
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 注：logrotate的配置文件是/etc/logrotate.conf，通常不需要对它进行修改。&lt;/p&gt;
&lt;p&gt;日志文件的轮循设置在独立的配置文件中，它（们）放在/etc/logrotate.d/目录下。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、配置使用logrotate&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）准备测试日志&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建&lt;/span&gt;测试日志/log-file&lt;span&gt;，然后在其中填入一个10MB的随机比特流数据文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[root@along ~]# touch /var/log/log-file&lt;/p&gt;
&lt;p&gt;[root@along ~]# head -c 10M &amp;lt; /dev/urandom &amp;gt; /var/log/log-file&lt;/p&gt;

&lt;p&gt;（2）配置切割设置&lt;/p&gt;
&lt;p&gt;[root@along ~]# vim /etc/logrotate.d/log-file&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@along ~]# vim /etc/logrotate.d/log-&lt;span&gt;file
&lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/log/test/log-&lt;span&gt;file {
        daily
        rotate &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;
        compress
        delaycompress
        missingok
        notifempty
        dateext
        sharedscripts
        create &lt;/span&gt;&lt;span&gt;644&lt;/span&gt;&lt;span&gt; root root
        postrotate
                &lt;/span&gt;/usr/bin/killall -&lt;span&gt;HUP rsyslogd
        endscript
}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（3）配置文件参数说明&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;13.5&quot;&gt;&lt;tr&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;配置参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;monthly&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;日志文件将按月轮循。其它可用值为'daily'，'weekly'或者'yearly'。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;rotate 5&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;compress&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;在轮循任务完成后，已轮循的归档将使用gzip进行压缩。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;delaycompress&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;missingok&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;notifempty&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;如果日志文件为空，轮循不会进行。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;dateext&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;切换后的日志文件会附加上一个短横线和YYYYMMDD格式的日期，没有这个配置项会附加一个小数点加一个数字序号&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;sharedscripts&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;create 644 root root&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td width=&quot;29%&quot;&gt;
&lt;p&gt;&lt;strong&gt;postrotate/endscript&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;70%&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td colspan=&quot;2&quot; width=&quot;100%&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;以上信息来源 &quot;man logrotate&quot;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;（4）运行logrotate&lt;/p&gt;
&lt;p&gt;logrotate可以在任何时候从命令行手动调用&lt;/p&gt;
&lt;p&gt;① 要调用为/etc/lograte.d/下配置的所有日志切割配置&lt;/p&gt;
&lt;p&gt;[root@along ~]# logrotate /etc/logrotate.conf  &lt;/p&gt;
&lt;p&gt;② 要为某个特定的配置调用logrotate，执行一次切割任务测试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@along ~]# ll /&lt;span&gt;var&lt;/span&gt;/log/log-file*
-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;10485760&lt;/span&gt; Jun &lt;span&gt;19&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt; /&lt;span&gt;var&lt;/span&gt;/log/test/log-&lt;span&gt;file
[root@along &lt;/span&gt;~]# logrotate -vf /etc/logrotate.d/log-&lt;span&gt;file 
[root@along &lt;/span&gt;~]# ll /&lt;span&gt;var&lt;/span&gt;/log/log-file* 
-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root        &lt;span&gt;0&lt;/span&gt; Jun &lt;span&gt;19&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;33&lt;/span&gt; /&lt;span&gt;var&lt;/span&gt;/log/test/log-&lt;span&gt;file
&lt;/span&gt;-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;10485760&lt;/span&gt; Jun &lt;span&gt;19&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt; /&lt;span&gt;var&lt;/span&gt;/log/test/log-file-&lt;span&gt;20180619&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; ③ 选项注释&lt;/p&gt;
&lt;p&gt;　　-f：选项来强制logrotate轮循日志文件&lt;/p&gt;
&lt;p&gt;　　-v：参数提供了详细的输出&lt;/p&gt;

&lt;p&gt;（5）设置logrotate定时任务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@along ~]# crontab -&lt;span&gt;e
#auth root
#date &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;06&lt;/span&gt;-&lt;span&gt;19&lt;/span&gt;
&lt;span&gt;00&lt;/span&gt; &lt;span&gt;00&lt;/span&gt; * * * /usr/sbin/logrotate -vf /etc/logrotate.d/log-file &amp;amp;&amp;gt;/dev/&lt;span&gt;null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;三、使用logrotate处理tomcat catalina.out日志过大问题&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;问题描述：一般在部署Tomcat后，运行久了，catalina.out文件会越来越大，对系统的稳定造成了一定的影响。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1、定义tomcat的pid 文件&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）修改catalina.sh 文件，定义Tomcat的pid文件的路径&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@along ~]# vim /data/tomca/bin/&lt;span&gt;catalina.sh
# Get standard environment variables
PRGDIR&lt;/span&gt;=`dirname &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$PRG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;`
CATALINA_PID&lt;/span&gt;=/&lt;span&gt;var&lt;/span&gt;/run/tomcat.pid
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）重启Tomcat，且查询pid&lt;/p&gt;
&lt;p&gt;[root@along ~]# systemctl restart tomcat.service&lt;/p&gt;
&lt;p&gt;[root@along ~]# cat /var/run/tomcat.pid&lt;/p&gt;
&lt;p&gt;21924&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、配置切割设置&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）配置切割&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@along ~]# vim /etc/logrotate.d/&lt;span&gt;tomcat_catalina
&lt;/span&gt;/data/tomcat/logs/catalina.&lt;span&gt;out&lt;/span&gt;&lt;span&gt; {
        daily
        rotate &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;
        missingok
        notifempty
        dateext
        compress
        delaycompress
        sharedscripts
        create &lt;/span&gt;&lt;span&gt;644&lt;/span&gt;&lt;span&gt; root root
        postrotate
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; [ -f /&lt;span&gt;var&lt;/span&gt;/run/&lt;span&gt;tomcat.pid ]; then
                        kill &lt;/span&gt;-USR1 `cat /&lt;span&gt;var&lt;/span&gt;/run/&lt;span&gt;tomcat.pid`
                fi
        endscript
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）USR1信号解释&lt;/p&gt;
&lt;p&gt;　　USR1亦通常被用来告知应用程序&lt;strong&gt;重载配置文件&lt;/strong&gt;；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。&lt;/p&gt;
&lt;p&gt;　　在没有执行kill -USR1 `cat ${pid_path}`之前，即便已经对文件执行了mv命令而改变了文件名称，tomcat还是会向新命名的文件&quot; xxx.out_ 20180619&quot;照常写入日志数据的。原因在于：linux系统中，内核是根据文件描述符来找文件的。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、测试执行&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;[root@along ~]# logrotate -vf /etc/logrotate.d/tomcat_catalina&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;4、设置logrotate定时任务&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@along ~]# crontab -&lt;span&gt;e
#auth root
#date &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;06&lt;/span&gt;-&lt;span&gt;19&lt;/span&gt;
&lt;span&gt;00&lt;/span&gt; &lt;span&gt;00&lt;/span&gt; * * * /usr/sbin/logrotate -vf /etc/logrotate.d/tomcat_catalina &amp;amp;&amp;gt;/dev/&lt;span&gt;null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 19 Jun 2018 06:48:00 +0000</pubDate>
<dc:creator>阿龙along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/along21/p/9198427.html</dc:identifier>
</item>
<item>
<title>接口测试之pytest - Luna丶</title>
<link>http://www.cnblogs.com/for-you/p/8866746.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/for-you/p/8866746.html</guid>
<description>&lt;p&gt;pytest:帮助你写出更好的程序：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;开源，免费。&lt;/li&gt;
&lt;li&gt;升级pytest,严格的向后兼容性。&lt;/li&gt;
&lt;li&gt;丰富的第三方插件。&lt;/li&gt;
&lt;li&gt;内置assert断言。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
&lt;code&gt;pip install -U pytest
# or
easy_install -U pytest&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看版本&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;py.test --version&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也许你已经使用unittest和doctest写了很多的测试用例了，不过你可以直接使用pytest运行他们。&lt;/p&gt;

&lt;p&gt;fixture可以声明function,module,fixture。也可以使用xunit的fixture的格式，setup和teardown。&lt;a href=&quot;http://pytest.org/latest/fixture.html#fixtures-as-function-arguments&quot;&gt;使用fixtures作为function的参数使用&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;分类&quot;&gt;分类&lt;/h2&gt;
&lt;p&gt;像unittest有setup和teardown固定装置，pytest扩展了该功能。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;模块的固定装置：setup_module/teardown_module&lt;/li&gt;
&lt;li&gt;类的固定装置：setup_class/teardown_class&lt;/li&gt;
&lt;li&gt;可替代的类级别的固定装置：setup/teardown&lt;/li&gt;
&lt;li&gt;Module级别方法装置:setup_function&lt;/li&gt;
&lt;li&gt;Class级别方法装置:setup_method&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;pytest_fixtrue.py&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; setup_module()
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; teardown_module()
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; setup_function()
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; teardown_funcion()
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; module_funtion()
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; class_name:
 &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; setup()
 &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; teardown()
 &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; setup_class()
 &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; teardown_class()
 &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; setup_method()
 &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; teardown_method()
 &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; class_function()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行后，执行顺序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;setup_module()
setup_function()
module_function()
teardown_funtion()
setup_class()
setup_method()
setup()
class_function()
teardown()
teardown_method()
teardown_class()
teardown_module()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要哪些装置写哪些。&lt;/p&gt;
&lt;h2 id=&quot;fixture参数scope&quot;&gt;fixture参数scope&lt;/h2&gt;
&lt;p&gt;scope控制fixtrue调用的频率，默认是function。可选的有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;function：每个测试函数之前执行一次&lt;/li&gt;
&lt;li&gt;class：每个测试类之前执行一次&lt;/li&gt;
&lt;li&gt;module：每个module之前执行一次&lt;/li&gt;
&lt;li&gt;session：每次session之前执行一次，即每次测试执行一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用request参数，当要添加finilizer到fixture中。&lt;br/&gt;相当于pytest内置的一个fixture，需要传递给fixture，才能识别finilizer。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def test_data(request):
  ......&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;fixture参数params&quot;&gt;fixture参数params&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@pytest.fixture&lt;/span&gt;( params&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] )
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_data(request):
 &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; request.param &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_not_2(test_data):
 &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'test_data: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; test_data)
 &lt;span class=&quot;cf&quot;&gt;assert&lt;/span&gt; test_data &lt;span class=&quot;op&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依次循环传入params中的每个值作为参数。&lt;/p&gt;

&lt;p&gt;pytest支持在多个完整测试参数化方法:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;pytest.fixture(): 在fixture级别的function处参数化&lt;/li&gt;
&lt;li&gt;@pytest.mark.parametrize：允许在function或class级别的参数化,为特定的测试函数或类提供了多个argument/fixture设置。&lt;/li&gt;
&lt;li&gt;pytest_generate_tests：可以实现自己的自定义动态参数化方案或扩展。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;pytest.mark.parametrize&quot;&gt;@pytest.mark.parametrize&lt;/h2&gt;
&lt;p&gt;内建的pytest.mark.parametrize装饰器可以参数化测试函数的参数。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pytest
&lt;span class=&quot;at&quot;&gt;@pytest.mark.parametrize&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;test_input,expected&quot;&lt;/span&gt;, [
 (&lt;span class=&quot;st&quot;&gt;&quot;3+5&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;),
 (&lt;span class=&quot;st&quot;&gt;&quot;2+4&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;),
 (&lt;span class=&quot;st&quot;&gt;&quot;6*9&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;),
])
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_eval(test_input, expected):
 &lt;span class=&quot;cf&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;eval&lt;/span&gt;(test_input) &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; expected&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果一个fixture需要共享，不用在每个py文件中写一遍，写在conftest.py文件中就好。&lt;/p&gt;

&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_ehlo(smtp):
 response, msg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; smtp.ehlo()
 &lt;span class=&quot;cf&quot;&gt;assert&lt;/span&gt; response &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;250&lt;/span&gt;
 &lt;span class=&quot;cf&quot;&gt;assert&lt;/span&gt; b&lt;span class=&quot;st&quot;&gt;&quot;smtp.gmail.com&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; msg
  &lt;span class=&quot;cf&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# for demo purposes&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_noop(smtp):
  response, msg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; smtp.noop()
  &lt;span class=&quot;cf&quot;&gt;assert&lt;/span&gt; response &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;250&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# for demo purposes&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;共享一个smtp实例。&lt;/p&gt;

&lt;p&gt;当最后一个需要fixture的test执行结束后，可指定执行终止的代码。可以传递一个request作为参数，在结束后回调fin函数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
request.addfinalizer(fin)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;fin为自定义的回调函数。&lt;/p&gt;

&lt;p&gt;pytest将运行所有在当前目录及其子目录的test_&lt;em&gt;.py or&lt;/em&gt; _test.py.形式。遵循标准测试发现&lt;a href=&quot;http://pytest.org/latest/example/pythoncollection.html&quot;&gt;test discovery&lt;/a&gt;规则。&lt;/p&gt;
&lt;p&gt;组织测试：当有许多的测试用例了，注意使用class或者module组织测试用例。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python -m pytest [...]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;py.test [...]&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;查看选项名称环境变量&quot;&gt;查看选项名称,环境变量&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;py.test --fixtures  # show available builtin function arguments
py.test -h | --help # show help on command line and config file options&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;选择要运行的测试&quot;&gt;选择要运行的测试&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pytest test_mod.py   &lt;span class=&quot;co&quot;&gt;# 运行test_mod.py所有测试&lt;/span&gt;
pytest somepath      &lt;span class=&quot;co&quot;&gt;#运行某个路径下的所有测试&lt;/span&gt;
pytest &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;k stringexpr &lt;span class=&quot;co&quot;&gt;# 运行匹配stringexpr的测试函数&lt;/span&gt;
pytest test_mod.py::test_func  &lt;span class=&quot;co&quot;&gt;# 运行test_mod.py模块中的test_func测试函数&lt;/span&gt;
pytest test_mod.py::TestClass::test_method  &lt;span class=&quot;co&quot;&gt;# TestClass类下的test_method测试方法&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;忽略查找路径---ingore&quot;&gt;忽略查找路径 &lt;code&gt;--ingore&lt;/code&gt;&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;tests/
|-- example
|   |-- test_example_01.py
|   |-- test_example_02.py
|   '-- test_example_03.py
|-- foobar
|   |-- test_foobar_01.py
|   |-- test_foobar_02.py
|   '-- test_foobar_03.py
'-- hello
    '-- world
        |-- test_world_01.py
        |-- test_world_02.py
        '-- test_world_03.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;忽略 test_footbar_03.py&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--ignore=tests/foobar/test_foobar_03.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;忽略 整个hello目录&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--ignore=tests/hello/&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;修改python的trace输出&quot;&gt;修改Python的trace输出&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;py.test --showlocals # show local variables in tracebacks
py.test -l           # show local variables (shortcut)

py.test --tb=auto    # (default) 'long' tracebacks for the first and last
                     # entry, but 'short' style for the other entries
py.test --tb=long    # exhaustive, informative traceback formatting
py.test --tb=short   # shorter traceback format
py.test --tb=line    # only one line per failure
py.test --tb=native  # Python standard library formatting
py.test --tb=no      # no traceback at all&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;请求一个唯一的临时目录&quot;&gt;请求一个唯一的临时目录&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_needsfiles(tmpdir):
 &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (tmpdir)
 &lt;span class=&quot;cf&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pytest会寻找并创建一个fixture在调用其他test方法时。&lt;br/&gt;在每个测试方法前面创建一个临时的目录。&lt;br/&gt;查看&lt;a href=&quot;http://pytest.org/latest/fixture.html#fixtures&quot;&gt;内建的fixture&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;py.test --fixtures # shows builtin and custom fixtures&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;运行顺序说明&quot;&gt;运行顺序说明&lt;/h2&gt;
&lt;p&gt;pytest按照在.py中的出现位置(从上到下)执行用例，可以改变执行顺序&lt;br/&gt;使用&lt;a href=&quot;http://pytest-ordering.readthedocs.io/en/develop/#&quot;&gt;pytest-ordering&lt;/a&gt;，&lt;a href=&quot;https://pypi.org/project/pytest-dependency/&quot;&gt;pytest-dependency&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pytest在通过测试时会忽略中间的print信息。要打印则需要assert为false,打印好看用json来格式化下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import json
print json.dumps(posts_local, indent=4)
        assert False&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以使用&lt;code&gt;pprint.pprint()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;-r&lt;/code&gt;可以查看skips和xfails的详细信息。&lt;/p&gt;
&lt;h2 id=&quot;skip&quot;&gt;Skip&lt;/h2&gt;
&lt;p&gt;预期测试能通过，除非环境(如：错误的python解释器，缺少依赖)阻止其不能正常的运行。&lt;/p&gt;
&lt;h2 id=&quot;跳过一个测试函数&quot;&gt;跳过一个测试函数&lt;/h2&gt;
&lt;p&gt;通过skip装饰器：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@pytest.mark.skip&lt;/span&gt;(reason&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;no way of currently testing this&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_the_unknown():
    ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设置跳过测试的条件&quot;&gt;设置跳过测试的条件&lt;/h2&gt;
&lt;p&gt;小于python3.3解释器运行时，跳过：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; sys
&lt;span class=&quot;at&quot;&gt;@pytest.mark.skipif&lt;/span&gt;(sys.version_info &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;),
                    reason&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;requires python3.3&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_function():
    ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;在module之间共享跳过条件&quot;&gt;在module之间共享跳过条件&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# content of test_mymodule.py&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; mymodule
minversion &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pytest.mark.skipif(mymodule.__versioninfo__ &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;),
                                reason&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;at least mymodule-1.1 required&quot;&lt;/span&gt;)
&lt;span class=&quot;at&quot;&gt;@minversion&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_function():
    ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;导入跳过&quot;&gt;导入跳过&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# test_myothermodule.py&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; test_mymodule &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; minversion

&lt;span class=&quot;at&quot;&gt;@minversion&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_anotherfunction():
    ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于大型测试套件是一个好主意,有一个文件,你定义的标记然后一直应用在整个测试套件。&lt;/p&gt;
&lt;h2 id=&quot;跳过一个类的所有测试函数或模块&quot;&gt;跳过一个类的所有测试函数或模块&lt;/h2&gt;
&lt;p&gt;在类上使用skipif ：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@pytest.mark.skipif&lt;/span&gt;(sys.platform &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'win32'&lt;/span&gt;,
                    reason&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;does not run on windows&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TestPosixCalls:

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_function(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;co&quot;&gt;&quot;will not be setup or run under 'win32' platform&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跳过所有测试方法：在global level使用pytestmark 名称&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# test_module.py&lt;/span&gt;
pytestmark &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pytest.mark.skipif(...)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;xfail&quot;&gt;xfail&lt;/h2&gt;
&lt;p&gt;测试可以运行，但是你期望其失败，因为有实现上的问题。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def xfail(condition=None, *, reason=None, raises=None, run=True, strict=False):&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;一个测试函数标记为失败&quot;&gt;一个测试函数标记为失败&lt;/h2&gt;
&lt;p&gt;使用xfail marker：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@pytest.mark.xfail&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_function():
    ...&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，会运行该测试，但失败了无输出信息。&lt;/p&gt;
&lt;h2 id=&quot;设定失败的理由&quot;&gt;设定失败的理由&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; test_hello6():
    pytest.xfail(&lt;span class=&quot;st&quot;&gt;&quot;reason&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;pytest可以方便的生成测试报告，即可以生成HTML的测试报告，也可以生成XML格式的测试报告用来与持续集成工具集成。&lt;br/&gt;查看&lt;a href=&quot;https://pypi.org/project/pytest-html/1.8.0/&quot;&gt;pytest-html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 05:54:00 +0000</pubDate>
<dc:creator>Luna丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/for-you/p/8866746.html</dc:identifier>
</item>
<item>
<title>CSharp for Jupyter Notebook - 鲲逸鹏</title>
<link>http://www.cnblogs.com/dotnetcrazy/p/9198129.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dotnetcrazy/p/9198129.html</guid>
<description>&lt;p&gt;之前说有机会就说下Linux下如何搭建C#版的交互编程，今天写篇文章还债^_^&lt;/p&gt;
&lt;p&gt;Win下比较简单，可以自己看&lt;a href=&quot;https://github.com/zabirauf/icsharp/wiki/Installation&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;,下面逆天带搭建搭建下Linux下的环境（官方方法有问题）&lt;/p&gt;
&lt;p&gt;在线预览：&lt;a href=&quot;https://github.com/lotapp/BaseCode/blob/master/netcore/Notebook/1.C%23%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BC%96%E7%A8%8B.ipynb&quot; target=&quot;_blank&quot;&gt;https://github.com/lotapp/BaseCode/blob/master/netcore/Notebook/1.C%23交互式编程.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;csharp交互式编程&quot;&gt;CSharp交互式编程&lt;/h2&gt;
&lt;h3 id=&quot;安装mono部分组件&quot;&gt;1.安装mono部分组件&lt;/h3&gt;
&lt;p&gt;先看看官方仓库，如果你不是Ubuntu的自己切换下源&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1127869/201806/1127869-20180619130556833-1051104710.png&quot; title=&quot;官网来源&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装mono部分组件，写段shell脚本，然后bash installmono.sh 直接执行&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1127869/201806/1127869-20180619130617167-1876033439.png&quot; title=&quot;执行脚本&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;# add Ubuntu 18.04 repository&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
&lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;deb https://download.mono-project.com/repo/ubuntu stable-bionic main&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; tee /etc/apt/sources.list.d/mono-official-stable.list
&lt;span class=&quot;co&quot;&gt;# 更新一下&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; apt-get update -y
&lt;span class=&quot;co&quot;&gt;# 安装 mono-complete&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; apt-get install mono-complete -y
&lt;span class=&quot;co&quot;&gt;# 安装 mono-dbg&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; apt-get install mono-dbg -y                 
&lt;span class=&quot;co&quot;&gt;# 安装 mono-runtime-dbg&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;sudo&lt;/span&gt; apt-get install mono-runtime-dbg -y
&lt;span class=&quot;co&quot;&gt;# 导入证书&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;mozroots&lt;/span&gt; --import --machine --sync
&lt;span class=&quot;co&quot;&gt;# 查看mono版本&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;mono&lt;/span&gt; --version&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到这个就代表安装完成了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1127869/201806/1127869-20180619130648422-1915896193.png&quot; title=&quot;安装完成&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装jupyter-notebook&quot;&gt;2.安装Jupyter-notebook&lt;/h3&gt;
&lt;p&gt;这部之前说过了，你安装了conda之后什么都有了，可以参考之前我写的一篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/dotnetcrazy/p/9158715.html&quot; target=&quot;_blank&quot;&gt;Anaconda For Linux&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;环境配置&quot;&gt;3.环境配置&lt;/h3&gt;
&lt;p&gt;下载release包：&lt;br/&gt;&lt;a href=&quot;https://github.com/gyurisc/icsharp.kernel/releases/download/v1.0-beta/icsharp_kernel_v1.0.zip&quot; class=&quot;uri&quot;&gt;https://github.com/gyurisc/icsharp.kernel/releases/download/v1.0-beta/icsharp_kernel_v1.0.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后移动到/opt/目录下（装软件一般都放这）&lt;br/&gt;现在你可以运行icsharp了：&lt;code&gt;mono icsharp.exe&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1127869/201806/1127869-20180619130719613-619578564.png&quot; title=&quot;克隆&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;编写代码&quot;&gt;4.编写代码&lt;/h3&gt;
&lt;p&gt;新建一个C#的ipynb文件&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1127869/201806/1127869-20180619130738913-385829485.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入代码，shift+回车运行&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1127869/201806/1127869-20180619130747577-122524170.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其他的自己摸索摸索吧，先这样了～&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 05:14:00 +0000</pubDate>
<dc:creator>鲲逸鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dotnetcrazy/p/9198129.html</dc:identifier>
</item>
<item>
<title>sql server 索引阐述系列二 索引存储结构 - 花阴偷移</title>
<link>http://www.cnblogs.com/MrHSR/p/9189959.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MrHSR/p/9189959.html</guid>
<description>&lt;h3&gt;一.概述、&lt;/h3&gt;
&lt;p&gt;　　&quot;流光容易把人抛,红了樱桃,绿了芭蕉“ 转眼又年中了，感叹生命的有限，知识的无限。在后续讨论索引之前，先来了解下索引和表数据的内部结构，这一节将介绍页的存储，页分配单元类型，区的存储， 最后简要介绍下系统页存储类型，页中的数据结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1  页存储&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　页是 &lt;span lang=&quot;EN-US&quot;&gt;sql server存储数据的基本单位，大小为&lt;span lang=&quot;EN-US&quot;&gt;8kb， 它存储的类型包括表，索引数据，分配位图，可用空间信息等，页也是可以读写的最小&lt;span lang=&quot;EN-US&quot;&gt;I/0单位。也就是如只需访问一行数据，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;也会把整个页加载到内存中。一页大小是&lt;span lang=&quot;EN-US&quot;&gt;8192个字节，由三块组成分为页头，数据行 ， 行偏移也叫页尾行指针。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　页头：有&lt;span lang=&quot;EN-US&quot;&gt;96个字节，&lt;/span&gt;包含的信息如&lt;span lang=&quot;EN-US&quot;&gt;PageID（文件号及页面编号），&lt;span lang=&quot;EN-US&quot;&gt;NextPage下一个页面的文件号及页面编号等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　数据行：单个数据行最大为&lt;span lang=&quot;EN-US&quot;&gt;8060字节。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　末尾行偏移： 36字节的数组，数组中的每一个值指向页中数据。当插入一行数据时，偏移量从右下角开始存储，插入第二行时偏移量为2存放于1的左边，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180619114443600-1935825747.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　一个页存储有三种分配单元类型：&lt;span lang=&quot;EN-US&quot;&gt; in_row_data （行内数据）， row_overflow_data（ 行溢出数据）， lob_data LOB（大型数据）。&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;分配单元类型&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;in_row_data&lt;/td&gt;
&lt;td&gt;存放固定长度的列，以及可变长度的列。一行字节&lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;= 8060字节的限制&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;row_overflow_data&lt;/td&gt;
&lt;td&gt;存放&lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;=8000字节的&lt;span lang=&quot;EN-US&quot;&gt;varchar,nvarchar, varbinary类型数据。一行字节&lt;span lang=&quot;EN-US&quot;&gt;&amp;gt;= 8060&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;lob_data&lt;/td&gt;
&lt;td&gt;存放大型对象数据类型值 &amp;gt;=&lt;span lang=&quot;EN-US&quot;&gt;8000节字的&lt;span lang=&quot;EN-US&quot;&gt;varchar(max), nvarchar(max), varbinary(max), 以及&lt;span lang=&quot;EN-US&quot;&gt;xml或&lt;span lang=&quot;EN-US&quot;&gt;clr udt&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;1.2 区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　区是由&lt;span lang=&quot;EN-US&quot;&gt;8个物理上连续的页组成的单元，用来有效管理页，如是区内的8个页属于同一个表，则这种区叫统一区，如果区内8个页分别属于至少两个不同的表，则这种区叫混合区。&lt;span lang=&quot;EN-US&quot;&gt;当表或索引需要更多空间时，&lt;span lang=&quot;EN-US&quot;&gt;sqlserver会为对象分配一个新区，但对象不足&lt;span lang=&quot;EN-US&quot;&gt;64kb,通常只分配一个页，当&lt;span lang=&quot;EN-US&quot;&gt;drop或&lt;span lang=&quot;EN-US&quot;&gt;truncate表时将释放整个区。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3 存储的关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;每个数据表对应有一个objectID标识符,  表中有多个索引为 sys.indexes,   表和索引存储在多个分区中 sys.partitions&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;，但至少有一个分区。每个分区下面有8个物理连续页， 页中使用最频繁的文件类型是Data数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　下图展示表和索引存储结构以及对应的元数据查询。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;分配单元可通过SELECT * FROM sys.system_internals_allocation_units视图查看&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180617173022373-1352386362.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;二. 索引与表存储关系演示&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　2.1 首先建一个RowText表&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;3000&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;
) &lt;/span&gt;&lt;span&gt;ON&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2.2 根据表名，查到表的标识符objectID：  5575058。 这里显示了表的相关信息如创建时间，修改时间。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sys.objects &lt;span&gt;where&lt;/span&gt; name&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180619104103443-520244779.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      2.3  根据标识符objectID，找到表上的多个分区，这里只有一个区。找到标识hobt_id(是该区里堆或B树结构的标识)： 72057594038976512&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sys.partitions &lt;span&gt;where&lt;/span&gt; &lt;span&gt;object_id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;5575058&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180619104236175-491355035.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　2.4  再根据hobt_id： 72057594038976512，找到页分配的单元， 这里现只显示了in_row_data  行内数据，信息包括了行内数据使用的总页数，已使用页数，数据页数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sys.allocation_units &lt;span&gt;where&lt;/span&gt; container_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;72057594038976512&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180619104416590-821472267.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;  三. 页分配单元演示&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;3.1 上面讲到页分配单元有三种类型，通过下面的脚本可以来查看分析。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;CONVERT&lt;/span&gt;(&lt;span&gt;VARCHAR&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;),&lt;span&gt;OBJECT_NAME&lt;/span&gt;(i.&lt;span&gt;object_id&lt;/span&gt;)) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; table_name,
     i.Name &lt;/span&gt;&lt;span&gt;AS&lt;/span&gt; index_name,i.index_id,i.type_desc &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; index_type,
     partition_id,partition_number,p.rows,allocation_unit_id,
     a.type_desc &lt;/span&gt;&lt;span&gt;AS&lt;/span&gt;&lt;span&gt; page_type_desc,
     a.total_pages,a.used_pages,a.data_pages
    &lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt; sys.indexes i &lt;span&gt;JOIN&lt;/span&gt;&lt;span&gt; sys.partitions p 
&lt;/span&gt;&lt;span&gt;ON&lt;/span&gt; i.&lt;span&gt;object_id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;p.&lt;span&gt;object_id&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; i.index_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;p.index_id
&lt;/span&gt;&lt;span&gt;JOIN&lt;/span&gt; sys.allocation_units a &lt;span&gt;ON&lt;/span&gt; p.partition_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;a.container_id
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; i.&lt;span&gt;object_id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;object_id&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　3.2 查看页存储的行内数据&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;IF&lt;/span&gt;  &lt;span&gt;EXISTS&lt;/span&gt; (&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; sys.objects &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;object_id&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OBJECT_ID&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[dbo].[RowText]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;AND&lt;/span&gt; type &lt;span&gt;in&lt;/span&gt; (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;

&lt;span&gt;go&lt;/span&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;3000&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;
) &lt;/span&gt;&lt;span&gt;ON&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt;&lt;span&gt; RowText
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;REPLICATE&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt;&lt;span&gt; RowText
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;REPLICATE&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt;&lt;span&gt; RowText
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;REPLICATE&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3000&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当前一行数据3000字节,小于一行8000字节，所以存放为IN_ROW_DATA类型，新增三行共9000字节，大于了一页8060字节，所以产生了data_pages:2页。通过3.1脚本查看&lt;/p&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180619110059376-1008428860.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　3.2 查看页存储的行溢出数据&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;IF&lt;/span&gt;  &lt;span&gt;EXISTS&lt;/span&gt; (&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; sys.objects &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;object_id&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OBJECT_ID&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[dbo].[RowText]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;AND&lt;/span&gt; type &lt;span&gt;in&lt;/span&gt; (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt;go&lt;/span&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;3000&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;6000&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;
) &lt;/span&gt;&lt;span&gt;ON&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt;&lt;span&gt; RowText
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;REPLICATE&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3000&lt;/span&gt;),&lt;span&gt;REPLICATE&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;6000&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当前一行数据为9000字节，大于一行8000字节,所以分配了ROW_OVERFLOW_DATA类型，通过3.1脚本查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180619110408299-817504118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　3.3  查看页存储的LOB大型数据&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;IF&lt;/span&gt;  &lt;span&gt;EXISTS&lt;/span&gt; (&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;FROM&lt;/span&gt; sys.objects &lt;span&gt;WHERE&lt;/span&gt; &lt;span&gt;object_id&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;OBJECT_ID&lt;/span&gt;(N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[dbo].[RowText]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;AND&lt;/span&gt; type &lt;span&gt;in&lt;/span&gt; (N&lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt;go&lt;/span&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;dbo&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;.&lt;span&gt;[&lt;/span&gt;&lt;span&gt;RowText&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;(
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;3000&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;(&lt;span&gt;6000&lt;/span&gt;) &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;
) &lt;/span&gt;&lt;span&gt;ON&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; TEXTIMAGE_ON &lt;span&gt;[&lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt;&lt;span&gt; RowText
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;REPLICATE&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3000&lt;/span&gt;),&lt;span&gt;REPLICATE&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;6000&lt;/span&gt;),&lt;span&gt;REPLICATE&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;12000&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当前表包含了text类型，所以分配了LOB_DATA大型数据，通过3.1脚本查看&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180619110735992-2009911395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       最后简单总结下：在设计表字段时，一定要与业务相符合，尽量避免建大型字段，产生行溢出和LOB大型数据，从而造成页拆分，查询将需要跨页。原理是当一行超过&lt;span lang=&quot;EN-US&quot;&gt;8060字节时，这类型的值将被移动到一个称为行溢出分配单元页中，在原始页上保留一个&lt;span lang=&quot;EN-US&quot;&gt;24字节指针，指向行外数据，这样就完成了行跨页&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;。 存放大型对象数据类型值时&lt;span lang=&quot;EN-US&quot;&gt;，在原始页上保留一个&lt;span lang=&quot;EN-US&quot;&gt;16字节指针，指向该大型对象值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;　四  页单元文件类型&lt;/h3&gt;
&lt;p&gt;　　我们知道页文件主要是用来存储表和索引的数据，其实还包括其它的存储， 在&lt;span lang=&quot;EN-US&quot;&gt;sqlserver里页文件存储的类型也分&lt;span lang=&quot;EN-US&quot;&gt;9种，如下图所示&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;&lt;strong&gt;页类型&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Global Allocation Map (GAM)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;它用来标识相应的区是否已经被分区,能标识64000个区，也就是4G空间，如超过4G则分配另一个GAM页 bit=0 表示当前区已被数据使用&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;.Shared Global Allocation Map(SGAM)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;表示该区是否是混合区 bit=1 是混合区且至少有一个数据页被分配&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;Page Free Space&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;存储该文件里所有页分配情况，和可用空间信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;Index Allocation Map&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;表或索引使用该区的信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;Bulk Changed Map&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;最后一条 backup log 语句之后大容量操作所修改区的信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;Differential Changed Map&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;最后一条 backup database 语句之更改区的信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;Data&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;用来存储数据&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;Row Overflow Page&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;行溢出的数据&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;284&quot;&gt;
&lt;p&gt;LOB&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;284&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;存放大型对象数据:text,nvarchar(max),varchar(max)…&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;　五.数据页的结构&lt;/h3&gt;
&lt;p&gt;　　在&lt;span lang=&quot;EN-US&quot;&gt;sql server里有这么多页文件类型，哪个页里是怎么存储的，存储了什么内容呢？下面来查看一个数据页存储的信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　&lt;span lang=&quot;EN-US&quot;&gt;下面通过&lt;span lang=&quot;EN-US&quot;&gt;partition_id的标识符：&lt;span lang=&quot;EN-US&quot;&gt;72057594038976512 找到&lt;span lang=&quot;EN-US&quot;&gt;first_page 字段 第一页&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sys.system_internals_allocation_units &lt;span&gt;where&lt;/span&gt; container_id&lt;span&gt;=&lt;/span&gt;&lt;span&gt;72057594038976512&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/151560/201806/151560-20180619111457379-1986328988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　由于存储关系，页码是以字节16进制显示0x720000000100，这里需要倒序后就是0x010000000072，&lt;/p&gt;
&lt;p&gt;　　0x表示：文件组号&lt;/p&gt;
&lt;p&gt;　　0072从16进制转成10进制为第114页（后四字节代表页的编号）&lt;/p&gt;
&lt;p&gt;　　通过Dbcc page可以查看页的具体内容，使用之前dbcc page, 先打开dbcc traceon (3604) 告诉sql server将结果返回给客户端 ，dbcc Page 四个参数 如下:&lt;/p&gt;
&lt;p&gt;dbid | dbname 该页的数据库ID或数据&lt;br/&gt;Filenum 页面文件号&lt;br/&gt;Pagenum 页面号&lt;br/&gt;Printopt =1 对每条记录打印缓冲报头，页面报头，输出行偏移表&lt;/p&gt;
&lt;p&gt;　　具体使用如下：&lt;/p&gt;
&lt;p&gt;　　dbcc traceon (3604)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　dbcc page('test',1,114,1)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　数据页结构输出分为四个主要阶段：&lt;span lang=&quot;EN-US&quot;&gt;buffer,  page header, data,  offset table&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　Buffer: 用来标识该数据页在内存中的位置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　page header: 页头信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　data：存储的数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　offset table: 偏移量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　感兴趣的朋友，可以再深入研究。这里粗略讲下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:sql;collapse:true;;gutter:true;&quot;&gt;
PAGE: (1:114)


BUFFER:


BUF @0x0000000081FE4640

bpage = 0x0000000081B66000           bhash = 0x0000000000000000           bpageno = (1:114)
bdbid = 5                            breferences = 0                      bcputicks = 222
bsampleCount = 1                     bUse1 = 5256                         bstat = 0xc00009
blog = 0x32159                       bnext = 0x0000000000000000           

PAGE HEADER:


Page @0x0000000081B66000

m_pageId = (1:114)                   m_headerVersion = 1                  m_type = 1
m_typeFlagBits = 0x4                 m_level = 0                          m_flagBits = 0x8200
m_objId (AllocUnitId.idObj) = 35     m_indexId (AllocUnitId.idInd) = 256  
Metadata: AllocUnitId = 72057594040221696                                 
Metadata: PartitionId = 72057594038976512                                 Metadata: IndexId = 0
Metadata: ObjectId = 5575058         m_prevPage = (0:0)                   m_nextPage = (0:0)
pminlen = 4                          m_slotCnt = 2                        m_freeCnt = 2070
m_freeData = 6118                    m_reservedCnt = 0                    m_lsn = (27:202:2)
m_xactReserved = 0                   m_xdesId = (0:0)                     m_ghostRecCnt = 0
m_tornBits = 2253409                 

Allocation Status

GAM (1:2) = ALLOCATED                SGAM (1:3) = ALLOCATED               
PFS (1:1) = 0x62 MIXED_EXT ALLOCATED  80_PCT_FULL                         DIFF (1:6) = CHANGED
ML (1:7) = NOT MIN_LOGGED            

DATA:


Slot 0, Offset 0x60, Length 3011, DumpStyle BYTE

Record Type = PRIMARY_RECORD         Record Attributes =  NULL_BITMAP VARIABLE_COLUMNS
Record Size = 3011                   
Memory Dump @0x000000001116A060

0000000000000000:   30000400 01000001 00c30b61 61616161 ?0..........aaaaa 
0000000000000010:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000020:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000030:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000040:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000050:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000060:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000070:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000080:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000090:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000100:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000110:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000120:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000130:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000140:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000150:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000160:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000170:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000180:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000190:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000200:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000210:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000220:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000230:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000240:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000250:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000260:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000270:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000280:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000290:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000300:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000310:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000320:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000330:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000340:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000350:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000360:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000370:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000380:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000390:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000400:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000410:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000420:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000430:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000440:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000450:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000460:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000470:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000480:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000490:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000500:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000510:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000520:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000530:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000540:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000550:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000560:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000570:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000580:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000590:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000600:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000610:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000620:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000630:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000640:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000650:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000660:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000670:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000680:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000690:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000700:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000710:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000720:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000730:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000740:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000750:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000760:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000770:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000780:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000790:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000800:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000810:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000820:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000830:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000840:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000850:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000860:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000870:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000880:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000890:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000900:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000910:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000920:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000930:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000940:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000950:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000960:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000970:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000980:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000990:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A00:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A10:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A20:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A30:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A40:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A50:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A60:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A70:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A80:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A90:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AA0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AB0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AC0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AD0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AE0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AF0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B00:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B10:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B20:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B30:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B40:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B50:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B60:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B70:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B80:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B90:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000BA0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000BB0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000BC0:   616161???????????????????????????????aaa              

Slot 1, Offset 0xc23, Length 3011, DumpStyle BYTE

Record Type = PRIMARY_RECORD         Record Attributes =  NULL_BITMAP VARIABLE_COLUMNS
Record Size = 3011                   
Memory Dump @0x000000001116AC23

0000000000000000:   30000400 01000001 00c30b61 61616161 ?0..........aaaaa 
0000000000000010:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000020:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000030:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000040:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000050:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000060:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000070:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000080:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000090:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000000F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000100:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000110:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000120:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000130:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000140:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000150:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000160:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000170:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000180:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000190:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000001F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000200:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000210:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000220:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000230:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000240:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000250:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000260:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000270:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000280:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000290:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000002F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000300:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000310:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000320:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000330:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000340:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000350:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000360:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000370:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000380:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000390:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000003F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000400:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000410:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000420:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000430:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000440:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000450:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000460:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000470:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000480:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000490:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000004F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000500:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000510:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000520:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000530:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000540:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000550:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000560:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000570:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000580:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000590:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000005F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000600:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000610:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000620:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000630:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000640:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000650:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000660:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000670:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000680:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000690:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000006F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000700:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000710:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000720:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000730:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000740:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000750:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000760:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000770:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000780:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000790:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000007F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000800:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000810:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000820:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000830:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000840:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000850:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000860:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000870:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000880:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000890:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000008F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000900:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000910:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000920:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000930:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000940:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000950:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000960:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000970:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000980:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000990:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009A0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009B0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009C0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009D0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009E0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
00000000000009F0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A00:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A10:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A20:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A30:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A40:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A50:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A60:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A70:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A80:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000A90:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AA0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AB0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AC0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AD0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AE0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000AF0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B00:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B10:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B20:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B30:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B40:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B50:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B60:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B70:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B80:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000B90:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000BA0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000BB0:   61616161 61616161 61616161 61616161 ?aaaaaaaaaaaaaaaa 
0000000000000BC0:   616161???????????????????????????????aaa              

OFFSET TABLE:

Row - Offset                         
1 (0x1) - 3107 (0xc23)               
0 (0x0) - 96 (0x60)                  


DBCC 执行完毕。如果 DBCC 输出了错误信息，请与系统管理员联系。
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 19 Jun 2018 04:32:00 +0000</pubDate>
<dc:creator>花阴偷移</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MrHSR/p/9189959.html</dc:identifier>
</item>
<item>
<title>python3+requests：接口自动化测试（二） - Shapelei</title>
<link>http://www.cnblogs.com/shapeL/p/9188495.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shapeL/p/9188495.html</guid>
<description>&lt;p&gt;&lt;span&gt;转载请注明出处：&lt;a href=&quot;https://www.cnblogs.com/shapeL/p/9188495.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/shapeL/p/9188495.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;前言：上篇文章python3+requests+unittest：接口自动化测试（一）：&lt;a href=&quot;https://www.cnblogs.com/shapeL/p/9179484.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/shapeL/p/9179484.html&lt;/a&gt; ，已经介绍了基于unittest框架的实现接口自动化，但是也存在一些问题，比如最明显的测试数据和业务没有区分开，接口用例不便于管理等，所以又对此修改完善。接下来主要是介绍该套接口自动化框架的设计到实现，参考代码的git地址：&lt;a href=&quot;https://github.com/zhangying123456/python3_interface&quot; target=&quot;_blank&quot;&gt;https://github.com/zhangying123456/python3_interface&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.代码框架展示&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1249000/201806/1249000-20180615175957204-1078689332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）case：存放测试用例数据的，比如请求类型get/post、请求url、请求header、请求数据等；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）data：获取excel文件中相应数据的方法封装，获取excel中对应表格内的数据，excel的行列数据等：get_data.py；判断用例直接是否存在依赖关系并获取依赖数据：dependent_data.py；初始化excel文件：data_config.py；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）dataconfig：存放请求中涉及到的header、data、cookies等数据；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）log：存放测试完成之后生成的日志文件，可以查看日志定位问题；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（5）main：脚本执行的主函数run_test.py&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（6）util：通用方法的封装，各种不同断言方式common_assert.py；对excel文件的读写操作operation_excel.py；从请求返回数据中拿取数据作为下一个接口的请求header数据operation_header.py；从json文件中拿取想要的数据operation_json.py；将接口自动化过程中的相关日志输出到log.txt中print_log.py；根据请求类型的不同执行对应的get/post方法runmethod.py；将测试结果以邮件形式发送给相关人员send_mail.py。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.代码实现说明&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）首先看下用例数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说明：该用例只是用来覆盖一些接口场景而测试使用的，有兴趣的可以参考源码用自己项目的真实数据来实现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1249000/201806/1249000-20180615180008109-1627249411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 先判断是否执行：如果yes，执行该条用例；如果no，直接跳过该条用例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行用例：获取用例的url、请求类型、请求头header、请求数据，request.get/post执行该条接口用例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在执行用例过程中，会存在特殊情况：（1）比如test_04依赖于test_03，test_04中的请求字段supplier的参数数据来源于test_03的response中value[0].biz字段的数据，所以在执行接口过程中需要判断是否存在依赖关系；（2）比如test_06请求数据需要test_05的response中的cookies数据，所以这种类型接口也要特殊处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行完成后：写入实际结果，与预期结果做对比，进行断言。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）看了用例excel后，对基本的流程有个大概了解，现在的问题就是如何拿取对应的数据执行接口得到运行结果&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_run:
        url &lt;/span&gt;=&lt;span&gt; self.data.get_request_url(i)
        method &lt;/span&gt;=&lt;span&gt; self.data.get_request_method(i)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取请求参数&lt;/span&gt;
        data =&lt;span&gt; self.data.get_data_value(i)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取excel文件中header关键字&lt;/span&gt;
        header_key =&lt;span&gt; self.data.get_request_header(i)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取json文件中header_key对应的头文件数据&lt;/span&gt;
        header =&lt;span&gt; self.data.get_header_value(i)
        expect &lt;/span&gt;=&lt;span&gt; self.data.get_expect_data(i)
        depend_case &lt;/span&gt;= self.data.is_depend(i)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;举例说明1：请求url数据是存放在excel中，我们通过操作excel文件到特定单元格拿到url数据&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取url&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_request_url(self,row):
        col &lt;/span&gt;=&lt;span&gt; int(data_config.get_url())
        url &lt;/span&gt;=&lt;span&gt; self.oper_excel.get_cell_value(row,col)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; url
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;举例说明2：请求头header或者请求数据中有的数据为空，所以我们在拿取数据过程中要做判断&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取请求数据&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_request_data(self,row):
        col &lt;/span&gt;=&lt;span&gt; int(data_config.get_data())
        data &lt;/span&gt;=&lt;span&gt; self.oper_excel.get_cell_value(row,col)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; data == &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; None
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;首先拿取excel中表格中的关键字，再通过关键字去对应json文件拿取具体的请求数据。比如先拿取excel中请求数据中的hotwords，再根据此关键字去json文件读取hotwords的键值数据&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hotwords&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bizName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;globalSearchClient&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8c8bc3ee9d6c4b7b8a390ae298cb6db5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeMills&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1524906299999&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过获取请求关键字拿到data数据&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_data_value(self,row):
        oper_json &lt;/span&gt;= OperationJson(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;../dataconfig/request_data.json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        request_data &lt;/span&gt;=&lt;span&gt; oper_json.get_data(self.get_request_data(row))
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; request_data
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;根据关键字获取数据&lt;/span&gt;
    &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    dict['key']只能获取存在的值，如果不存在则触发KeyError
    dict.get(key, default=None)，返回指定键的值，如果值不在字典中返回默认值None
    excel文件中请求数据有可能为空，所以用get方法获取
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_data(self,key):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; return self.data[key]&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; self.data.get(key)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; （3）一般的接口都是单接口，即是单独请求，没有上下依赖关系的，针对这种只要模拟请求拿到数据进行断言就可以了。但是实际项目中会存在特殊场景，比如test_03和test04&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说明：test_04中，请求数据qqmusic_more中的supplier字段依赖于test_03中的返回数据value[0].biz的值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qqmusic_more&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bizName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;globalSearchClient&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appLan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zh_CN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;musicLimit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;864044030085594&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keyword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fly&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeMills&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1527134461256&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sign&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;17daa7e3e84bd4dfbe9a1bd9a1bd7e62&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mac&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;90f05205d7b7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sessionId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;43e605b914874cd99b47ac997e19c1a1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;network&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;supplier&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;language&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zh_CN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;先执行test_03，获取依赖的返回数据value[0].biz的值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行依赖测试，获取test_03返回结果&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run_dependent(self):
        row_num &lt;/span&gt;=&lt;span&gt; self.oper_excel.get_row_num(self.case_id)
        request_data &lt;/span&gt;=&lt;span&gt; self.data.get_data_value(row_num)
        header &lt;/span&gt;=&lt;span&gt; self.data.get_request_header(row_num)
        method &lt;/span&gt;=&lt;span&gt; self.data.get_request_method(row_num)
        url &lt;/span&gt;=&lt;span&gt; self.data.get_request_url(row_num)
        res &lt;/span&gt;= self.method.run_main(method,url,request_data,header,params=&lt;span&gt;request_data)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取依赖字段的响应数据：通过执行依赖测试case来获取响应数据，响应中某个字段数据作为依赖key的value&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_value_for_key(self,row):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取依赖的返回数据key&lt;/span&gt;
        depend_data =&lt;span&gt; self.data.get_depend_key(row)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(depend_data)  #depend_data打印数据：value[0].biz
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行依赖case返回结果&lt;/span&gt;
        response_data =&lt;span&gt; self.run_dependent()
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(depend_data)&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(response_data)&lt;/span&gt;

        &lt;span&gt;return&lt;/span&gt; [match.value &lt;span&gt;for&lt;/span&gt; match &lt;span&gt;in&lt;/span&gt; parse(depend_data).find(response_data)][0]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;再将value[0].biz值放入test_04请求数据qqmusic_more中的supplier字段中&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;if&lt;/span&gt; depend_case !=&lt;span&gt; None:
            self.depend_data &lt;/span&gt;=&lt;span&gt; DependentData(depend_case)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取依赖字段的响应数据&lt;/span&gt;
            depend_response_data =&lt;span&gt; self.depend_data.get_value_for_key(i)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取请求依赖的key&lt;/span&gt;
            depend_key =&lt;span&gt; self.data.get_depend_field(i)
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将依赖case的响应返回中某个字段的value赋值给该接口请求中某个参数&lt;/span&gt;
            data[depend_key] = depend_response_data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;（4）拿到请求相关数据后，执行该条case，获取response；然后实际结果与预期结果进行断言&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
res = self.run_method.run_main(method,url,data,header,params=&lt;span&gt;data)
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
get请求参数是params:request.get(url='',params={}),post请求数据是data:request.post(url='',data={})
excel文件中没有区分直接用请求数据表示,则data = self.data.get_data_value(i)拿到的数据，post请求就是data=data,get请就是params=data
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;根据get、post类型区分&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; RunMethod:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; post_main(self,url,data,header=&lt;span&gt;None):
        res &lt;/span&gt;=&lt;span&gt; None
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; header !=&lt;span&gt; None:
            res &lt;/span&gt;= requests.post(url=url,data=data,headers=&lt;span&gt;header)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            res &lt;/span&gt;= requests.post(url=url,data=&lt;span&gt;data)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res.json()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; get_main(self,url,params=None,header=&lt;span&gt;None):
        res &lt;/span&gt;=&lt;span&gt; None
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; header !=&lt;span&gt; None:
            res &lt;/span&gt;= requests.get(url=url, params=params, headers=&lt;span&gt;header)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            res &lt;/span&gt;= requests.get(url=url, params=&lt;span&gt;params)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res.json()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; run_main(self,method,url,data=None,header=None,params=&lt;span&gt;None):
        res &lt;/span&gt;=&lt;span&gt; None
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; method == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            res &lt;/span&gt;=&lt;span&gt; self.post_main(url,data,header)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            res &lt;/span&gt;=&lt;span&gt; self.get_main(url,params,header)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; res
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;（5）执行接口case过程中，可能存在某条case异常报错，导致下面的case无法运行，所以我们既要将异常日志存放在特定文件中方便后续排查，也要保证下面的case能够不受影响继续执行完&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
           &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:...
            
           &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将报错写入指定路径的日志文件里&lt;/span&gt;
                with open(log_file,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
                    f.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n第%s条用例报错:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; i)
                initLogging(log_file,e)
                fail_count.append(i)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;抓取日志的方法可以使用python内置模块logging，具体用法可以参考：&lt;a href=&quot;https://www.cnblogs.com/shapeL/p/9174303.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/shapeL/p/9174303.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; initLogging(logFilename,e):

  logging.basicConfig(
                    level &lt;/span&gt;=&lt;span&gt; logging.INFO,
                    format &lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%(asctime)s-%(levelname)s-%(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    datefmt &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%y-%m-%d %H:%M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    filename &lt;/span&gt;=&lt;span&gt; logFilename,
                    filemode &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  fh &lt;/span&gt;= logging.FileHandler(logFilename,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  logging.getLogger().addHandler(fh)
  log &lt;/span&gt;=&lt;span&gt; logging.exception(e)
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;日志文件log.txt结果：直接定位问题出在哪儿&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;第5条用例报错:
&lt;/span&gt;18-06-19 10:27-ERROR-&lt;span&gt;string indices must be integers
Traceback (most recent call last):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:/Users/xxx/Documents/GitHub/python3_interface/main/run_test.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 70, &lt;span&gt;in&lt;/span&gt;&lt;span&gt; go_on_run
    op_header.write_cookie()
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:\Users\xxx\Documents\GitHub\python3_interface\util\operation_header.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 30, &lt;span&gt;in&lt;/span&gt;&lt;span&gt; write_cookie
    cookie &lt;/span&gt;=&lt;span&gt; requests.utils.dict_from_cookiejar(self.get_cookie())
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:\Users\zhangying1\Documents\GitHub\python3_interface\util\operation_header.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 25, &lt;span&gt;in&lt;/span&gt;&lt;span&gt; get_cookie
    url &lt;/span&gt;= self.get_response_url()+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;callback=jQuery21008240514814031887_1508666806688&amp;amp;_=1508666806689&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:\Users\xxx\Documents\GitHub\python3_interface\util\operation_header.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 18, &lt;span&gt;in&lt;/span&gt;&lt;span&gt; get_response_url
    url &lt;/span&gt;= self.response[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;][0]
TypeError: string indices must be integers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;（6）接口自动化测试执行完成后，需要将测试结果发送给项目组相关人员，邮件发送实现方法参考：&lt;a href=&quot;https://www.cnblogs.com/shapeL/p/9115887.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/shapeL/p/9115887.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;self.send_mail.send_main(pass_count,fail_count,no_run_count)&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;coding:utf-8&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; smtplib
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; email.mime.text &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MIMEText
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; email.mime.multipart &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MIMEMultipart
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SendEmail:
    &lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt; send_user
    &lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt; email_host
    &lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt; password
    password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lunkbrgwqxhfjgxx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    email_host &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;smtp.qq.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    send_user &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx@qq.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; send_mail(self,user_list,sub,content):
        user &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shape&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + send_user + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建一个带附件的实例&lt;/span&gt;
        message =&lt;span&gt; MIMEMultipart()
        message[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Subject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; sub
        message[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;From&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; user
        message[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;To&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.join(user_list)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 邮件正文内容&lt;/span&gt;
        message.attach(MIMEText(content, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;plain&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 构造附件（附件为txt格式的文本）&lt;/span&gt;
        filename = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;../log/log.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        time &lt;/span&gt;=&lt;span&gt; datetime.date.today()
        att &lt;/span&gt;= MIMEText(open(filename, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).read(), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;base64&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        att[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;application/octet-stream&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        att[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Disposition&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;attachment; filename=&quot;%s_Log.txt&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt; time
        message.attach(att)

        server &lt;/span&gt;=&lt;span&gt; smtplib.SMTP_SSL()
        server.connect(email_host,&lt;/span&gt;465)&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启用SSL发信, 端口一般是465&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; server.set_debuglevel(1)# 打印出和SMTP服务器交互的所有信息&lt;/span&gt;
&lt;span&gt;        server.login(send_user,password)
        server.sendmail(user,user_list,message.as_string())
        server.close()

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; send_main(self,pass_list,fail_list,no_run_list):
        pass_num &lt;/span&gt;=&lt;span&gt; len(pass_list)
        fail_num &lt;/span&gt;=&lt;span&gt; len(fail_list)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;未执行的用例&lt;/span&gt;
        no_run_num =&lt;span&gt; len(no_run_list)
        count_num &lt;/span&gt;= pass_num + fail_num +&lt;span&gt; no_run_num

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;成功率、失败率&lt;/span&gt;
        &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
        用%对字符串进行格式化
        %d 格式化整数
        %f 格式化小数；想保留两位小数，需要在f前面加上条件：%.2f；用%%来表示一个%
        如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串 
       &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
        pass_result &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.2f%%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (pass_num/count_num*100&lt;span&gt;)
        fail_result &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.2f%%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (fail_num/count_num*100&lt;span&gt;)
        no_run_result &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.2f%%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (no_run_num/count_num*100&lt;span&gt;)

        user_list &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx@qq.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
        sub &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;接口自动化测试报告&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        content &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;接口自动化测试结果:\n通过个数%s个，失败个数%s个，未执行个数%s个：通过率为%s，失败率为%s，未执行率为%s\n日志见附件&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (pass_num,fail_num,no_run_num,pass_result,fail_result,no_run_result)
        self.send_mail(user_list,sub,content)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1249000/201806/1249000-20180619110130752-510203042.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;到此，就基本完成。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;说明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.只是大概整理了接口自动化实现的设计流程，需要源码参考的可查看：&lt;a href=&quot;https://github.com/zhangying123456/python3_interface&quot; target=&quot;_blank&quot;&gt;https://github.com/zhangying123456/python3_interface&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.这套接口框架中还有很多需要完善的地方，比如断言方法不够丰富，比如测试报告展示需要完善，等等。各位有兴趣的可以不断完善改进&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 19 Jun 2018 03:11:00 +0000</pubDate>
<dc:creator>Shapelei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shapeL/p/9188495.html</dc:identifier>
</item>
<item>
<title>We Do Sleep At Night, We Do REST Right - 白细胞</title>
<link>http://www.cnblogs.com/Wddpct/p/9197401.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wddpct/p/9197401.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://github.com/wddpct/articles/issues/6&quot;&gt;Github 同步发表链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;笔者在&lt;a href=&quot;https://www.cnblogs.com/Wddpct/p/9039466.html&quot;&gt;上一篇文章&lt;/a&gt;中提过，任何一种非“强制性”约束同时也没有“标杆”工具支持的开发风格或协议，最后都会在不同的程序员手中得到不同的诠释，微服务是如此，DDD 是如此，笔者把它称为技术思想上的“康威定律”。不出意外的，REST 同样难逃此劫。光是在学习和收集资料的过程中，笔者就已经见过不下十多篇此类理解，甚至于在 url 中使用短划线或下划线连接单词也是众口难调。&lt;/p&gt;
&lt;p&gt;尽管这只是小事。&lt;/p&gt;
&lt;p&gt;微软也发布过关于如何设计 REST API 的&lt;a href=&quot;https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md&quot;&gt;开发指南&lt;/a&gt;，但是不幸的是，REST 的创始人 Roy Fielding 认为微软的 REST API 规范与 REST 没有多大关系。&lt;/p&gt;
&lt;p&gt;“即使是我最糟糕的 REST 描述也比微软的 API 指南提供的总结或参考要好很多。”&lt;/p&gt;
&lt;p&gt;那什么才是正确的 REST 描述呢，或者说，REST 是什么。本文的创作动机便是希冀于解决这样一个问题。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;本文假设读者已经具备基本的 REST 和 Web 知识，哪怕你们现在认为 HTTP API 就是 REST API 也可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;rest-起源&quot;&gt;REST 起源&lt;/h2&gt;
&lt;p&gt;REST 英文全称为 Representational State Transfer，又名“表述性状态移交”，是由 Roy Fielding 在&lt;a href=&quot;https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;《架构风格与基于网络的软件架构设计》&lt;/a&gt;一文中提出的一种架构风格（Architectural Style）。而在这篇 REST 圣经问世之前，R.F 博士就已经参与了 HTTP 1.0 协议规范的开发工作（1996年），并且负责了 HTTP 1.1 协议规范的制定（1997年）。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;一种架构风格由一组准确命名的，相互协作的架构约束组成。当我们在谈论 REST 本质的时候，我们谈论的其实是架构约束。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;REST 用以指导基于网络的分布式超媒体系统的设计和实现，Web（即万维网）就是一种典型的分布式超媒体系统。可以确定的是，在制定 HTTP 协议的过程中，R.F 博士就已经以 REST 架构风格作为指导原则来完成相关工作。论文中提到了以下内容：&lt;/p&gt;
&lt;p&gt;“在过去的6年中，我们使用 REST 架构风格来指导现代 Web 架构的设计和开发。这个工作是与我所创作的 HTTP 和 URI 两个互联网规范共同完成的，这两个规范定义了在 Web 上进行交互的所有组件所使用的通用接口。”&lt;/p&gt;
&lt;p&gt;“自从1994年起，REST 架构风格就被用来指导现代 Web 架构的设计与开发。”&lt;/p&gt;
&lt;p&gt;“开发 REST 的动机是为 Web 的运转方式创建一种架构模型，使之成为 Web 协议标准的指导框架。”&lt;/p&gt;
&lt;p&gt;“REST 的第一版开发于1994年10月至1995年8月之间，起初，在我编写 HTTP/1.0 规范和最初的 HTTP/1.1 建议时，将它用来作为表达各种 Web 概念的一种方法……”&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Web 架构规范主要包括 HTTP， URI 和 HTML 等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我们也不难理解为什么 REST 与 Web 和 HTTP 能够结合得如此紧密。尽管直到2000年，这只“鸡”才在下完鸡蛋后，出现在了世人面前。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.hb.aicdn.com/6540d23b1cfa238f1cfa5b474310087bdf3222113434-Sb41w1&quot; alt=&quot;REST 演化&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;rest-约束&quot;&gt;REST 约束&lt;/h2&gt;
&lt;p&gt;无论是否愿意承认，REST 一开始就是为 Web 而服务的，可以这么说的是，REST 是现代 Web 的架构风格，Web 也是 REST 最典型和最成功的案例。包括在 R.F 博士的论文中，他也是在解决现代 Web 需求（无法控制的可伸缩性和独立部署）的过程中而逐步推导出 REST。前文已经提到一种架构风格是由一组准确命名的，相互协作的架构约束组成。而所谓架构约束，便是这个推导过程中最重要的产物。甚至高于 REST 本身。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;早先的 Web 与 REST 所描述的模型有着大量出入，然而正是在对应的 HTTP 和 URI 规范出炉后，才有了所谓“现代 Web”的说法。笔者更愿意把“现代 Web”的定义期限定为1996年后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;客户端-服务端&quot;&gt;客户端 - 服务端&lt;/h3&gt;
&lt;p&gt;设计与实现上的关注点分离。&lt;/p&gt;
&lt;h3 id=&quot;无状态&quot;&gt;无状态&lt;/h3&gt;
&lt;p&gt;在客户端没有发起请求时，服务器并不知道它的存在。同样的，服务器无须维护当前请求之外的客户端状态，从而改善服务器的可伸缩性。Session 和 Cookie 都是“需要”被抛弃的。&lt;br/&gt;如果有些应用状态重要到服务器需要去关心，那它应该成为一个资源。&lt;/p&gt;
&lt;h3 id=&quot;缓存&quot;&gt;缓存&lt;/h3&gt;
&lt;p&gt;对于客户端而言，使用缓存则是维护状态和提升性能的更好做法。&lt;/p&gt;
&lt;h3 id=&quot;统一接口&quot;&gt;统一接口&lt;/h3&gt;
&lt;p&gt;使 REST 架构风格区别于其他基于网络的架构风格的核心特征是，它强调组件之间具有一个统一的接口。实现与他们所提供的服务是解耦的，这促进了独立的可进化性。同时这也引申出了其他的约束：资源识别；通过表述来操作资源；自描述信息；超媒体作为应用状态引擎（即 HATEOAS）。下文会专门说明。&lt;/p&gt;
&lt;h3 id=&quot;分层系统&quot;&gt;分层系统&lt;/h3&gt;
&lt;p&gt;“分层系统”约束在“客户 - 服务端”约束的基础上增加了代理组件和网关组件。尽管笔者认为代理和网关都不是重点，“分层系统”约束更注重的是“在客户端和服务端之间添加一个组件应该是一个透明操作”，组件只能“看到”与其交互的相邻层（是不是想到了&lt;a href=&quot;http://www.uml.org.cn/sjms/201211023.asp#5&quot;&gt;迪米特法则&lt;/a&gt;），使用层级来封装服务，同时能够支持负载均衡和诸如安全性检查的功能。&lt;/p&gt;
&lt;h3 id=&quot;按需代码&quot;&gt;按需代码&lt;/h3&gt;
&lt;p&gt;这是六大约束中唯一的可选约束。REST 允许客户端通过下载并执行脚本或其他形式的代码，对客户端的功能进行扩展，从而提高客户端的灵活性和性能。通俗点说，HTML 中的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签就是一种按需代码，尽管它可能会导致一些例如跨站脚本攻击这样的问题。&lt;/p&gt;
&lt;h2 id=&quot;统一接口约束&quot;&gt;统一接口约束&lt;/h2&gt;
&lt;p&gt;R.F 博士在论文中针对六大约束中的“统一接口”做了额外的约束分解和说明，但遗憾的是并没有以列表的方式展示出来。但在接下来的内容中你可能就会发现，这几项可能是目前大部分开发者践行 REST 原则时所遵循的全部标准。&lt;/p&gt;
&lt;h3 id=&quot;资源识别&quot;&gt;资源识别&lt;/h3&gt;
&lt;p&gt;REST 对于信息的核心抽象是资源，任何能够被命名的信息都可以称为是资源，只要你的想象力允许。资源一词通常和“可寻址性”绑定，一个或多个 URI 标识一个资源。如果资源的 URI 发生了变化，服务器应该使用超媒体引导客户端访问新的 URI 或提示对应信息。&lt;/p&gt;
&lt;h3 id=&quot;通过表述来操作资源&quot;&gt;通过表述来操作资源&lt;/h3&gt;
&lt;p&gt;当客户端对一个资源发起一个请求时，服务器会以一种有效的方式提供一个采集了资源信息的文档作为回应。这就是表述——一种以机器可读的方式对资源当前状态的说明。客户端和服务器之间也可以继续传递表述，从而对资源执行某种操作。客户端从来不会直接看到资源，能看到的都是资源的表述。可以这么说的是，&lt;strong&gt;服务器发送的表述用于描述资源当前的状态，客户端发送的表述用于描述客户端希望资源拥有的状态，这就是表述性状态转移/移交。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个表述由一个“字节序列”和描述这些字节的“表述元数据”构成，且不与服务器端代码绑定，这意味着当服务器端的资源实现和业务操作代码发生变化时，可以选择不更改资源的呈现方式。&lt;/p&gt;
&lt;p&gt;值得注意的是，一般人通常会将表述认为成资源的“值”，这虽然可以理解，但是当你请求一个天气服务时，千万不要认为表述一定便是温度等确定的值信息，因为它仍然可能是某次响应中的错误提示。一个表述的具体含义取决于消息中的控制数据。&lt;/p&gt;
&lt;p&gt;“控制数据定义了在组件之间移交的消息的用途，例如被请求的动作或相应的含义。它也可用于提供请求的参数，或覆盖某些连接元素的默认行为。例如，可以使用（包含在请求或响应消息中的）控制数据来修改缓存的行为。”&lt;/p&gt;
&lt;p&gt;“表述的数据格式称为媒体类型（media type）。发送者能够将一个表述包含在一个消息中，发送给接收者。接收者收到消息之后，根据消息中的控制数据和媒体类型的性质，来对该消息进行处理。”&lt;/p&gt;
&lt;p&gt;表述在现代 Web 中的实例包括 HTML，Json，XML，图片等。&lt;/p&gt;
&lt;h3 id=&quot;自描述的消息&quot;&gt;自描述的消息&lt;/h3&gt;
&lt;p&gt;一个 （HTTP）消息体包含了所有足以让接收者理解它的必要信息，在现代 Web 中，自描述的消息由一些标准的HTTP方法、可定制的HTTP头信息、可定制的HTTP响应代码组成。扩展开来，它通常有以下三方面的含义。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;请求之间的交互是无状态的。 对应于 REST 约束中的“无状态”约束，服务器可以独立处理每个请求，而无须对该客户端先前所有请求的处理进行记忆。&lt;/li&gt;
&lt;li&gt;使用标准的方法和媒体类型来表达语义和交换信息。想想 HTTP Methods 和 HTTP Headers，客户端通常靠这些信息理解请求的含义和解析消息体。&lt;/li&gt;
&lt;li&gt;响应可以明确地表明其可缓存性。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;超媒体作为应用状态引擎&quot;&gt;超媒体作为应用状态引擎&lt;/h3&gt;
&lt;p&gt;该约束便是大名鼎鼎的“HATEOAS”（Hypertext/Hypermedia As The Engine Of Application State），但实际上 R.F 博士在论文中并没有对它做过详细的介绍。在目前的共识中（讽刺的是在大多数时候它并没有被应用到设计所谓 REST APIs 中去），HATEOAS 意味着客户端应该使用超文本来作为你在接收到当前的表述后，再进行下一步寻址的方式。更进一步的，客户端需要通过解析超文本理解服务器提供了哪些资源，而不是在客户端事先定义或约定俗成。&lt;/p&gt;
&lt;p&gt;“客户端依赖的是超文本的状态迁移语义，而不应该对于是否存在某个URI或URI的某种特殊构造方式作出假设。一切都有可能变化，只有超媒体的状态迁移语义能够长期保持稳定。” —— 《理解本真的REST架构风格》&lt;/p&gt;
&lt;p&gt;最终结果便是客户端可以自动化地适应服务器端的变化，服务器也允许在不破坏所有客户端的情况下更改它底层的实现。同样的，我们可以列出几点说明。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;所有的应用状态维持在客户端一侧。改变应用状态是客户端的职责。&lt;/li&gt;
&lt;li&gt;客户端仅能够通过发送请求和处理响应来改变应用状态。&lt;/li&gt;
&lt;li&gt;客户端可以通过已经收到的表述中的超文本知道接下来可以操作的请求动作（如 HTML 中的超链接）。&lt;/li&gt;
&lt;li&gt;超文本是应用状态变化背后的动力。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;看起来，上述四点内容说的多是集中式 Web 应用的情况，在如今多用 Web APIs 进行前后端分离开发的 Web 应用中，HATEOAS 又该做如何理解呢？如今有这么一项技术可以让超文本继续充当驱动应用状态更新流动的引擎，那就是 Web Links，&lt;a href=&quot;https://tools.ietf.org/html/rfc5988&quot;&gt;RFC 5988&lt;/a&gt; 定义了 HTTP 的这项扩展。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;Github REST API v3&lt;/a&gt; 中，我们可以在很多 apis （如列表翻页）的响应体中看到 Link Header，对应引导的 Uri 同样有相关标准，即 &lt;a href=&quot;https://tools.ietf.org/html/rfc6570&quot;&gt;Uri Templates（RFC 6570）&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Link: &amp;lt;https://api.github.com/user/repos?page=3&amp;amp;per_page=100&amp;gt;; rel=&quot;next&quot;,
  &amp;lt;https://api.github.com/user/repos?page=50&amp;amp;per_page=100&amp;gt;; rel=&quot;last&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，想必你也大致清晰了 HATEOAS 的含义。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;如果可以的话，你可以将“应用状态”理解为客户端对资源操作后的展示结果。比如“主页”，“博客”，“关于我”，“成功提交”等操作界面。它和“资源状态”有抽象概念上的区分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;你可以放弃对 Hypertext 和 Hypermedia 之间区别的思考，笔者也认为它们在你理解 REST 时并不应该区分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;richardson-成熟度模型&quot;&gt;Richardson 成熟度模型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/articles/richardsonMaturityModel.html&quot;&gt;Richardson Maturity Model&lt;/a&gt; 是一个可以尝试的甜品，特别是当你在设计自己的 REST APIs 时。和 REST 相似，你也可以把该模型称为指导原则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.hb.aicdn.com/48df7d56f8aad6d90c25f84e1a615c5964beb487c002-5IAoFj&quot; alt=&quot;Richardson Maturity Model&quot;/&gt;&lt;/p&gt;
&lt;p&gt;笔者无意去解释这几个层级，因为这些层级和“统一接口”的扩展约束都是间接的映射关系。而且正如上文一直在强调的，REST 不依赖于任何单一的通信/传输/移交协议，所以模型中的 HTTP 指示就有些耐人寻味了。&lt;/p&gt;
&lt;p&gt;“它是标准吗？”&lt;br/&gt;“当然不是，它只是目前设计 REST APIs 时的一种潜规则。”&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;对于理解概念性文章的总结总是特别艰难，看起来内容挺丰富，同时结合了 R.F 博士论文及其译者李琨教授相关文章，其实摊开了目录整篇文章也就只涉及到了起源—&amp;gt;约束-&amp;gt;模型这样几个方面，实际上 REST 也确实只是一组约束而已。最后，仅用笔者认为的 R.F 博士论文中至关重要的两段话作为结束。&lt;/p&gt;
&lt;p&gt;“因此，REST的模型应用是一个引擎，它通过检查和选择当前的表述集合中的状态迁移选项，从一个状态迁移到下一个状态。毫不奇怪，这与一个超媒体浏览器的用户接口完全匹配。然而，REST风格并不假设所有应用都是浏览器。事实上，通用的连接器接口对服务器隐藏了应用的细节，因此各种形式的用户代理都是等价的，无论是为一个索引服务执行信息获取任务的自动化机器人，还是查找匹配特定查询标准的数据的私人代理，或者是忙于巡视破损的引用或被修改的内容的维护爬虫。”&lt;/p&gt;
&lt;p&gt;“这个名称“表述性状态转移”是有意唤起人们对于一个良好设计的Web应用如何运转的印象：一个由网页组成的网络（一个虚拟状态机），用户通过选择链接（状态迁移）在应用中前进，导致下一个页面（代表应用的下一个状态）被转移给用户，并且呈现给他们，以便他们来使用。”&lt;/p&gt;
&lt;h2 id=&quot;有效的参考文档&quot;&gt;有效的参考文档&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/understanding-restful-style&quot;&gt;理解本真的REST架构风格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ruby-china.org/topics/34341&quot;&gt;理解本质的 REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&quot;&gt;REST APIs must be hypertext-driven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2009/06/hateoas-dsl-protocol-description&quot;&gt;HATEOAS作为领域特定协议描述的引擎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/richardsonMaturityModel.html&quot;&gt;Richardson Maturity Model&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 19 Jun 2018 02:23:00 +0000</pubDate>
<dc:creator>白细胞</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wddpct/p/9197401.html</dc:identifier>
</item>
</channel>
</rss>