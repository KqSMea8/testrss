<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>git 命令和使用场景总结 - calvin_xhk</title>
<link>http://www.cnblogs.com/xinghuaikang/p/8507135.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xinghuaikang/p/8507135.html</guid>
<description>&lt;p&gt;资料地址：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&lt;/p&gt;
&lt;p&gt;　　　　   http://www.cnblogs.com/wupeiqi/p/7295372.html&lt;/p&gt;
&lt;p&gt;一、git的起源 ？&lt;/p&gt;
&lt;p&gt;    git是Linux的创始人Linus为了管理linux的版本而花了两个星期写的。之前用过一段时间BitKeeper这个软件，后来要收费了，Linus索性自己搞。所以之后才能出现全球最大同性交友网站github，&lt;/p&gt;
&lt;p&gt;　任性改变历史。膜拜&lt;/p&gt;
&lt;p&gt;二、git的作用？&lt;/p&gt;
&lt;p&gt;　从起源可以看出来，可以用作版本管理，特别是多人协作的情况下，在当今集团军作战的时代，git已经成为必不可少的工具。&lt;/p&gt;
&lt;p&gt;三、 git的安装&lt;/p&gt;
&lt;p&gt;　　没有特殊的&lt;/p&gt;
&lt;p&gt;　　windows 官网下载&lt;/p&gt;
&lt;p&gt;　　Linux yum install git&lt;/p&gt;
&lt;p&gt;四、git 命令大全&lt;img src=&quot;https://images2018.cnblogs.com/blog/1302322/201803/1302322-20180305072258823-1050829221.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 04 Mar 2018 23:29:00 +0000</pubDate>
<dc:creator>calvin_xhk</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xinghuaikang/p/8507135.html</dc:identifier>
</item>
<item>
<title>Service IP 原理 - 每天5分钟玩转 Docker 容器技术（137） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8503685.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8503685.html</guid>
<description>&lt;p&gt;&lt;span&gt;Service Cluster IP 是一个虚拟 IP，是由 Kubernetes 节点上的 iptables 规则管理的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;iptables-save&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令打印出当前节点的 iptables 规则，因为输出较多，这里只截取与 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-svc&lt;/span&gt;&lt;/code&gt;&lt;span&gt; Cluster IP &lt;/span&gt;&lt;code&gt;&lt;span&gt;10.99.229.179&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 相关的信息：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180304061342155-1619643644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这两条规则的含义是：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;如果 Cluster 内的 Pod（源地址来自 10.244.0.0/16）要访问 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-svc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，则允许。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;其他源地址访问 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-svc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，跳转到规则 &lt;/span&gt;&lt;code&gt;&lt;span&gt;KUBE-SVC-RL3JAE4GN7VOGDGP&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;KUBE-SVC-RL3JAE4GN7VOGDGP&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 规则如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180304061404364-589543328.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1/3 的概率跳转到规则 &lt;/span&gt;&lt;code&gt;&lt;span&gt;KUBE-SEP-C5KB52P4BBJQ35PH&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1/3 的概率（剩下 2/3 的一半）跳转到规则 &lt;/span&gt;&lt;code&gt;&lt;span&gt;KUBE-SEP-HGVKQQZZCF7RV4IT&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1/3 的概率跳转到规则 &lt;/span&gt;&lt;code&gt;&lt;span&gt;KUBE-SEP-XE25WGVXLHEIRVO5&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;上面三个跳转的规则如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180304061453894-1918642111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;即将请求分别转发到后端的三个 Pod。通过上面的分析，我们得到如下结论：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;iptables 将访问 Service 的流量转发到后端 Pod，而且使用类似轮询的负载均衡策略&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外需要补充一点：Cluster 的每一个节点都配置了相同的 iptables 规则，这样就确保了整个 Cluster 都能够通过 Service 的 Cluster IP 访问 Service。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180304061436941-1709553806.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了直接通过 Cluster IP 访问到 Service，DNS 是更加便捷的方式，下一节我们讨论。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://item.jd.com/16936307278.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 04 Mar 2018 22:32:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8503685.html</dc:identifier>
</item>
<item>
<title>基于 HTML5 Canvas 的交互式地铁线路图 - CarrieYung</title>
<link>http://www.cnblogs.com/zoroyoung/p/8434978.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zoroyoung/p/8434978.html</guid>
<description>&lt;h4&gt;前言&lt;/h4&gt;
&lt;p&gt;前两天在 echarts 上寻找灵感的时候，看到了很多有关地图类似的例子，地图定位等等，但是好像就是没有地铁线路图，就自己花了一些时间捣鼓出来了这个交互式地铁线路图的 Demo，地铁线路上的点是在网上随便下载了一个，这篇文章记录自己的一些收获（毕竟我还是个菜鸟）以及代码的实现，希望能够帮到一些朋友。当然，如果有什么意见的可以直接跟我说，大家一起交流才会进步。&lt;/p&gt;
&lt;h4&gt;效果图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1159588/201803/1159588-20180304152222639-1272345319.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hightopo.com/demo/subway/index.html&quot; target=&quot;_blank&quot;&gt;http://www.hightopo.com/demo/subway/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;地图稍微内容有点多，要全部展示，字显得有点小了，但是没关系，可以按照需求放大缩小，字体和绘制的内容并不会失真，毕竟都是用矢量绘制的~&lt;/p&gt;
&lt;h4&gt;界面生成&lt;/h4&gt;
&lt;p&gt;底层的 div 是通过 ht.graph.GraphView 组件生成的，然后就可以利用 HT for Web 提供好的方法，调用 canvas 画笔随便绘制就好，先来看看怎么生成底层 div：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; dm = &lt;span&gt;new&lt;/span&gt; ht.DataModel();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据容器&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; gv = &lt;span&gt;new&lt;/span&gt; ht.graph.GraphView(dm);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拓扑组件&lt;/span&gt;
gv.addToDOM();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将拓扑图组件添加进body中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;addToDOM 函数声明如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
addToDOM = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){   
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; self = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;,
        view &lt;/span&gt;=&lt;span&gt; self.getView(),   
        style &lt;/span&gt;=&lt;span&gt; view.style;
    document.body.appendChild(view); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将组件底层div添加到body中           &lt;/span&gt;
    style.left = '0';&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认组件是绝对定位，所以要设置位置&lt;/span&gt;
    style.right = '0'&lt;span&gt;;
    style.top &lt;/span&gt;= '0'&lt;span&gt;;
    style.bottom &lt;/span&gt;= '0'&lt;span&gt;;      
    window.addEventListener(&lt;/span&gt;'resize', &lt;span&gt;function&lt;/span&gt; () { self.iv(); }, &lt;span&gt;false&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;窗口变化事件           &lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我就可以在这个 div 上乱涂乱画了~首先我获取下载好的地铁线路图上的点，我将它们放在 subway.js 中，这个 js 文件全部都是下载的内容，我没有做其他的改动，主要是将这些点根据线路来分分配添加到数组中，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
mark_Point13 = [];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;线路 数组内包含线路的起点和终点坐标以及这条线路的名称&lt;/span&gt;
t_Point13 = [];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;换成站点 数组内包含线路中的换乘站点坐标以及换成站点名称&lt;/span&gt;
n_Point13 = [];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;小站点 数组内包含线路中的小站点坐标以及小站点名称&lt;/span&gt;
mark_Point13.push({ name: '十三号线', value: [113.4973,23.1095&lt;span&gt;]}); 
mark_Point13.push({ name: &lt;/span&gt;'十三号线', value: [113.4155,23.1080&lt;span&gt;]}); 
t_Point13.push({ name: &lt;/span&gt;'鱼珠', value: [113.41548,23.10547&lt;span&gt;]}); 
n_Point13.push({ name: &lt;/span&gt;'裕丰围', value: [113.41548,23.10004]}); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来来描绘地铁线路，我声明了一个数组 lineNum，用来装 js 中所有的地铁线路的编号，以及一个 color 数组，用来装所有的地铁线的颜色，这些颜色的 index 与 lineNum 中地铁线编号的 index 是一一对应的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; lineNum = ['1', '2', '3', '30', '4', '5', '6', '7', '8', '9', '13', '14', '32', '18', '21', '22', '60', '68'&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; color = ['#f1cd44', '#0060a1', '#ed9b4f', '#ed9b4f', '#007e3a', '#cb0447', '#7a1a57', '#18472c', '#008193', '#83c39e', '#8a8c29', '#82352b', '#82352b', '#09a1e0', '#8a8c29', '#82352b', '#b6d300', '#09a1e0'];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着遍历 lineNum，将 lineNum 中的元素和颜色传到 createLine 函数中，根据这两个参数来绘制地铁线路以及配色，毕竟 js 文件中的命名方式也是有规律的，哪一条线路，则命名后面一定会加上对应的数字，所以我们只需要将字符串与这个编号结合即可获得 js 中对应的数组了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
let lineName = 'Line' +&lt;span&gt; num;
let line &lt;/span&gt;= window[lineName];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;createLine 的定义也非常简单，我的代码设置了不少的样式，所以看起来有点多。创建一个 ht.Polyline 管线，我们可以通过 polyline.addPoint() 函数向这个变量中添加具体的点，通过 setSegments 可以设置点的连接方式。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; createLine(num, color) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制地图线&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; polyline = &lt;span&gt;new&lt;/span&gt; ht.Polyline();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多边形 管线&lt;/span&gt;
    polyline.setTag(num);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置节点tag标签，作为唯一标示&lt;/span&gt;
    
    &lt;span&gt;if&lt;/span&gt;(num === '68') polyline.setToolTip('A P M');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置提示信息 &lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(num === '60') polyline.setToolTip('G F'&lt;span&gt;); 
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; polyline.setToolTip('Line' +&lt;span&gt; num);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(color) {
        polyline.s({&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;s 为 setStyle 的简写，设置样式&lt;/span&gt;
            'shape.border.width': 0.4,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置多边形的边框宽度&lt;/span&gt;
            'shape.border.color': color,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置多边形的边框颜色&lt;/span&gt;
            'select.width': 0.2,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置选中节点的边框宽度&lt;/span&gt;
            'select.color': color&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置选中节点的边框颜色&lt;/span&gt;
&lt;span&gt;        });
    }

    let lineName &lt;/span&gt;= 'Line' +&lt;span&gt; num;
    let line &lt;/span&gt;=&lt;span&gt; window[lineName];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i = 0; i &amp;lt; line.length; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let j = 0; j &amp;lt; line[i].coords.length; j++&lt;span&gt;) {
            polyline.addPoint({x: line[i].coords[j][&lt;/span&gt;0]*300, y: -line[i].coords[j][1]*300&lt;span&gt;});
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(num === '68'){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;APM线（有两条，但是点是在同一个数组中的）&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(i === 0 &amp;amp;&amp;amp; j === 0&lt;span&gt;) {
                    polyline.setSegments([&lt;/span&gt;1&lt;span&gt;]);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(i === 1 &amp;amp;&amp;amp; j === 0&lt;span&gt;) {
                    polyline.getSegments().push(&lt;/span&gt;1&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    polyline.getSegments().push(&lt;/span&gt;2&lt;span&gt;);
                }
            }    
        }
    }

    polyline.setLayer(&lt;/span&gt;'0');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将线设置在下层，点设置在上层“top”&lt;/span&gt;
    dm.add(polyline);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将管线添加进数据容器中储存，不然这个管线属于“游离”状态，是不会显示在拓扑图上的&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; polyline;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码中添加地铁线上的点有分为几种情况，是因为 js 中设置线的时候 Line68 有一个“跳跃”点的现象，所以我们必须“跳跃”过去，篇幅有限 Line68 数组具体的声明自行看 subway.js。&lt;/p&gt;
&lt;p&gt;这里说明一点，如果用的是 addPoint 函数，不设置 segments 时，默认将添加进的点用直线连接，segments 的定义如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1： moveTo，占用 1 个点信息，代表一个新路径的起点&lt;/li&gt;
&lt;li&gt;2： lineTo，占用 1 个点信息，代表从上次最后点连接到该点&lt;/li&gt;
&lt;li&gt;3： quadraticCurveTo，占用 2 个点信息，第一个点作为曲线控制点，第二个点作为曲线结束点&lt;/li&gt;
&lt;li&gt;4： bezierCurveTo，占用 3 个点信息，第一和第二个点作为曲线控制点，第三个点作为曲线结束点&lt;/li&gt;
&lt;li&gt;5： closePath，不占用点信息，代表本次路径绘制结束，并闭合到路径的起始点&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以我们要做“跳跃”的行为设置 segments 为 1 即可。&lt;/p&gt;
&lt;p&gt;最后绘制这些地铁线上的点，这个部分 subway.js 中也分离出来了，命名以“mark_Point”、“t_Point”以及“n_Point”开头，我在前面 js 的展示部分有对这些数组进行解释，大家动动中指划上去看看。&lt;/p&gt;
&lt;p&gt;我们在这些点的位置添加 ht.Node 节点，当节点一添加进 dm 数据容器中时，就会在拓扑图上显示，当然，前提是这个拓扑图组件 gv 设置的数据容器是这个 dm。篇幅有限，添加地铁线上的点的代码部分我只展示添加“换乘站点”的点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; tName = 't_Point' +&lt;span&gt; num;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tP = window[tName];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;大站点&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;(tP) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有些线路没有“换乘站点”&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(let i = 0; i &amp;lt; tP.length; i++&lt;span&gt;) {
        let node &lt;/span&gt;= createNode(tP[i].name, tP[i].value, color[index]);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在获取的线路上的点的坐标位置添加节点&lt;/span&gt;
        node.s({&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置节点的样式style&lt;/span&gt;
            'label.scale': 0.05,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文本缩放，可以避免浏览器限制的最小字号问题&lt;/span&gt;
            'label.font': 'bold 12px arial, sans-serif'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置文本的font&lt;/span&gt;
&lt;span&gt;        });
        node.setSize(&lt;/span&gt;0.6, 0.6);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置节点大小。由于js中每个点之间的偏移量太小，所以我不得不把节点设置小一些&lt;/span&gt;
        node.setImage('images/旋转箭头.json');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置节点的图片&lt;/span&gt;
        node.a('alarmColor1', 'rgb(150, 150, 150)');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;attr属性，可以在这里面设置任何的东西，alarmColor1是在上面设置的image的json中绑定的属性，具体参看 HT for Web 矢量手册(http://www.hightopo.com/guide/guide/core/vector/ht-vector-guide.html#ref_binding)&lt;/span&gt;
        node.a('alarmColor2', 'rgb(150, 150, 150)');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同上&lt;/span&gt;
        node.a('tpNode', &lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个属性设置只是为了用来区分“换乘站点”和“小站点”的，后面会用上&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有的地铁线路以及站点都添加完毕。但是！你可能会看不见自己绘制的图，因为他们太小了，这个时候可以设置 graphView 拓扑组件上的 fitContent 函数，我们顺便将拓扑图上的所有东西不可移动也设置一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
gv.fitContent(&lt;span&gt;false&lt;/span&gt;, 0.00001);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自适应大小，参数1为是否动画，参数2为gv与边框的padding值&lt;/span&gt;
gv.setMovableFunc(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置gv上的节点不可移动&lt;/span&gt;
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这下你的地铁线路图就可以显示啦~接下来看看交互。&lt;/p&gt;
&lt;h4&gt;交互&lt;/h4&gt;
&lt;p&gt;首先是鼠标移动事件，鼠标滑过具体线路时，线路会变粗，悬停一会儿还能看到这条线路的编号；当鼠标移动到“换乘站点”或“小站点”，站点对应的图标都会变大并且变色，字体也会变大，鼠标移开图标变回原来的颜色并且字体变小。不同点在于鼠标移动到“换乘站点”时，“换乘站点”会旋转。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1159588/201802/1159588-20180209144029670-1869445696.gif&quot; alt=&quot;&quot; width=&quot;363&quot; height=&quot;294&quot;/&gt;&lt;/p&gt;
&lt;p&gt;鼠标滑动事件，我直接基于 gv 的底层 div 进行的 mousemove 事件，通过 ht 封装的 getDataAt 函数传入事件 event 参数，获取事件下对应的节点，然后就可以随意操作节点了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
gv.getView().addEventListener('mousemove', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = gv.getDataAt(e);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传入逻辑坐标点或者交互event事件参数，返回当前点下的图元&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(name) {
        originNode(name);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不管什么时候都要让节点保持原来的大小&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data &lt;span&gt;instanceof&lt;/span&gt; ht.Polyline) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断事件节点的类型&lt;/span&gt;
        dm.sm().ss(data);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选中“管道”&lt;/span&gt;
        name = ''&lt;span&gt;;
        clearInterval(interval);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (data &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ht.Node) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data.getTag() !== name &amp;amp;&amp;amp; data.a('tpNode')) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若不是同一个节点，并且mousemove的事件对象为ht.Node类型，那么设置节点的旋转&lt;/span&gt;
            interval = setInterval(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                data.setRotation(data.getRotation() &lt;/span&gt;- Math.PI/16); //在自身旋转的基础上再旋转
            }, 100&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data.a('npNode')) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果鼠标移到“小站点”也要停止动画&lt;/span&gt;
&lt;span&gt;            clearInterval(interval);
        }
        expandNode(data, name);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;//自定义的放大节点函数，比较容易，我不粘代码了，可以去http://hightopo.com/   查看&lt;/span&gt;
        dm.sm().ss(data);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置选中节点&lt;/span&gt;
        name = data.getTag();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;作为“上一个节点”的存储变量，可以通过这个值来获取节点&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他任何情况则不选中任何内容并且清除“换乘站点”上的动画&lt;/span&gt;
        dm.sm().ss(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        name &lt;/span&gt;= ''&lt;span&gt;;
        clearInterval(interval);
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;鼠标悬停在地铁线路上时显示“具体线路信息”，我是通过设置 tooltip 来完成的（注意：要打开 gv 的 tooltip 开关）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
gv.enableToolTip();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开 tooltip 的开关&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;(num === '68') polyline.setToolTip('A P M');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置提示信息 &lt;/span&gt;
&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(num === '60') polyline.setToolTip('G F'&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; polyline.setToolTip('Line' + num);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我利用右下角的 form 表单，单击表单上的具体线路，或者双击拓扑图上任意一个“站点”或者线路，则拓扑图会自适应到对应的部分，将被双击的部分展现到拓扑图的中央。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1159588/201803/1159588-20180304211422285-588264011.gif&quot; alt=&quot;&quot; width=&quot;526&quot; height=&quot;333&quot;/&gt;&lt;/p&gt;
&lt;p&gt;form 表单的声明部分我好像还没有解释。。。就是通过 new 一个 ht.widget.FomePane 类创建一个 form 表单组件，通过 form.getView() 获取表单组件的底层 div，将这个 div 摆放在 body 右下角，然后通过 addRow 函数向 form 表单中添加一行的表单项，可以在这行中添加任意多个项，通过 addRow 函数的第二个参数（一个数组），对添加进的表单项进行宽度的设置，通过第三个参数设置这行的高度：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; createForm() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建右下角的form表单&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; form = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ht.widget.FormPane();
    form.setWidth(&lt;/span&gt;200);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置表单宽度&lt;/span&gt;
    form.setHeight(416);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置表单高度&lt;/span&gt;
    let view =&lt;span&gt; form.getView();
    document.body.appendChild(view);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将表单添加进body中&lt;/span&gt;
    view.style.zIndex = 1000&lt;span&gt;;
    view.style.bottom &lt;/span&gt;= '10px';&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ht组件几乎都设置绝对路径&lt;/span&gt;
    view.style.right = '10px'&lt;span&gt;;
    view.style.background &lt;/span&gt;= 'rgba(211, 211, 211, 0.8)'&lt;span&gt;;

    names.forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(nameString) {
        form.addRow([&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向表单中添加行&lt;/span&gt;
            {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这一行中的第一个表单项&lt;/span&gt;
                button: {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向表单中添加button按钮&lt;/span&gt;
                    icon: 'images/Line'+nameString.value+'.json',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置按钮的图标&lt;/span&gt;
                    background: '',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置按钮的背景&lt;/span&gt;
                    borderColor: '',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置按钮的边框颜色&lt;/span&gt;
                    clickable: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置按钮不可点击&lt;/span&gt;
&lt;span&gt;                }
            },
            {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个表单项&lt;/span&gt;
&lt;span&gt;                button: {
                    label: nameString.name,
                    labelFont: &lt;/span&gt;'bold 14px arial, sans-serif'&lt;span&gt;,
                    labelColor: &lt;/span&gt;'#fff'&lt;span&gt;,
                    background: &lt;/span&gt;''&lt;span&gt;,
                    borderColor: &lt;/span&gt;''&lt;span&gt;,
                    onClicked: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按钮点击回调事件&lt;/span&gt;
                        gv.sm().ss(dm.getDataByTag(nameString.value));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置选中按下的按钮对应的线路&lt;/span&gt;
                        gv.fitData(gv.sm().ld(), &lt;span&gt;true&lt;/span&gt;, 5);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将选中的地铁线路显示在拓扑图的中央&lt;/span&gt;
&lt;span&gt;                    }
                }
            }
        ], [&lt;/span&gt;0.1, 0.2], 23);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个参数是设置第一参数中的数组的宽度，小于1是比例，大于1是实际宽度。第三个参数是该行的高度&lt;/span&gt;
&lt;span&gt;    });
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;单击“站点”显示红色标注，双击节点自适应放置到拓扑图中央以及双击空白处将红色标注隐藏的内容都是通过对拓扑组件 gv 的事件监听来控制的，非常清晰易懂，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; node = createRedLight();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个新的节点，显示为“红灯”的样式&lt;/span&gt;
gv.mi(&lt;span&gt;function&lt;/span&gt;(e) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ht 中拓扑组件中的事件监听&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(e.kind === 'clickData' &amp;amp;&amp;amp; (e.data.a('tpNode') || e.data.a('npNode'))) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;e.kind获取当前事件类型，e.data获取当前事件下的节点&lt;/span&gt;
        node.s('2d.visible', &lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置node节点可见&lt;/span&gt;
        node.setPosition(e.data.getPosition().x, e.data.getPosition().y);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置node的坐标为当前事件下节点的位置&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(e.kind === 'doubleClickData') {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;双击节点&lt;/span&gt;
        gv.fitData(e.data, &lt;span&gt;false&lt;/span&gt;, 10);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将事件下的节点自适应到拓扑图的中央，参数1为自适应的节点，参数2为是否动画，参数3为gv与边框的padding&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(e.kind === 'doubleClickBackground') {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;双击空白处&lt;/span&gt;
        node.s('2d.visible', &lt;span&gt;false&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置node节点不可见 查看 HT for Web 样式手册（http://www.hightopo.com/guide/guide/core/theme/ht-theme-guide.html#ref_style）&lt;/span&gt;
&lt;span&gt;    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意 s（style） 和 a（attr） 定义是这样的，s 是 ht 预定义的一些样式属性，而 a 是我们用户来自定义的属性，一般是通过调用字符串来调用结果的，这个字符串对应的可以是常量也可以是函数，还是很灵活的。&lt;/p&gt;
&lt;p&gt;最后还做了一个小小的部分，选中“站点”，则该“站点”的上方会显示一个红色的会“呼吸”的用来注明当前选中的“站点”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1159588/201802/1159588-20180209151906576-1560424730.gif&quot; alt=&quot;&quot; width=&quot;219&quot; height=&quot;218&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“呼吸”的部分是利用 ht 的 setAnimation 函数来完成的，在用这个函数之前要先打开数据容器的动画开关，然后设置动画：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
dm.enableAnimation();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开数据容器的动画开关&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; createRedLight() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; node = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ht.Node();
    node.setImage(&lt;/span&gt;'images/红灯.json');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置节点的图片&lt;/span&gt;
    node.setSize(1, 1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置节点的大小&lt;/span&gt;
    node.setLayer('firstTop');&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置节点显示在gv的最上层&lt;/span&gt;
    node.s('2d.visible', &lt;span&gt;false&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点不可见&lt;/span&gt;
    node.s('select.width', 0);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点选中时的边框为0，不可见&lt;/span&gt;
    node.s('2d.selectable', &lt;span&gt;false&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置这个属性，则节点不可选中&lt;/span&gt;
&lt;span&gt;
    node.setAnimation({&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置动画 具体参见 HT for Web 动画手册（http://www.hightopo.com/guide/guide/plugin/animation/ht-animation-guide.html）&lt;/span&gt;
&lt;span&gt;        expandWidth: {
            property: &lt;/span&gt;&quot;width&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置这个属性，并且未设置 accessType，则默认通过 setWidth/getWidth 来设置和获取属性。这里的 width 和下面的 height 都是通过前面设置的 size 得到的&lt;/span&gt;
            from: 0.5, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;动画开始时的属性值&lt;/span&gt;
            to: 1,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;动画结束时的属性值&lt;/span&gt;
            next: &quot;collapseWidth&quot;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符串类型，指定当前动画完成之后，要执行的下个动画，可将多个动画融合&lt;/span&gt;
&lt;span&gt;        },
        collapseWidth: {
            property: &lt;/span&gt;&quot;width&quot;&lt;span&gt;,
            from: &lt;/span&gt;1&lt;span&gt;, 
            to: &lt;/span&gt;0.5&lt;span&gt;,
            next: &lt;/span&gt;&quot;expandWidth&quot;&lt;span&gt;
        },
        expandHeight: {
            property: &lt;/span&gt;&quot;height&quot;&lt;span&gt;,
            from: &lt;/span&gt;0.5&lt;span&gt;, 
            to: &lt;/span&gt;1&lt;span&gt;,
            next: &lt;/span&gt;&quot;collapseHeight&quot;&lt;span&gt;
        },
        collapseHeight: {
            property: &lt;/span&gt;&quot;height&quot;&lt;span&gt;,
            from: &lt;/span&gt;1&lt;span&gt;, 
            to: &lt;/span&gt;0.5&lt;span&gt;,
            next: &lt;/span&gt;&quot;expandHeight&quot;&lt;span&gt;
        },
        start: [&lt;/span&gt;&quot;expandWidth&quot;, &quot;expandHeight&quot;]&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组，用于指定要启动的一个或多个动画&lt;/span&gt;
&lt;span&gt;    });
    dm.add(node);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全部代码结束！&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;这个 Demo 花了我两天时间完成，总觉得有点不甘心啊，但是有时候思维又转不过弯来，花费了不少的时间，但是总的来说收获还是很多的，我以前一直以为只要通过 getPoints().push 来向多边形中添加点就可以了，求助了大神之后，发现原来这个方法不仅绕弯路而且还会出现各种各样的问题，比如 getPoints 之前，一定要在多边形中已经有 points 才可以，但是在很多情况下，初始化的 points 并不好设置，而且会造成代码很繁琐，直接通过 addPoint 方法，直接将点添加进多边形变量中，并且还会默认将点通过直线的方式连接，也不用设置 segments，多可爱的一个函数。&lt;/p&gt;
&lt;p&gt;还有就是因为 ht 默认缩放大小是 20，而我这个 Demo 的间距又很小，导致缩放到最大地铁线路图显示也很小，所以我在 htconfig 中更改了 ht 的默认 zoomMax 属性，记住，更改这个值一定要在所有的 ht 调用之前，因为在 htconfig 中设置的值在后面定义都是不可更改的。&lt;/p&gt;
&lt;p&gt;总而言之，这两天我的脑细胞死了不少，也重新生长了不少，人都是在不断进步的嘛~&lt;/p&gt;
</description>
<pubDate>Sun, 04 Mar 2018 22:11:00 +0000</pubDate>
<dc:creator>CarrieYung</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zoroyoung/p/8434978.html</dc:identifier>
</item>
<item>
<title>设计模式之装饰者模式 - Dyleaf</title>
<link>http://www.cnblogs.com/Dyleaf/p/8507047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Dyleaf/p/8507047.html</guid>
<description>&lt;h2 id=&quot;装饰者模式&quot;&gt;装饰者模式&lt;/h2&gt;
&lt;h3 id=&quot;概述&quot;&gt;概述&lt;/h3&gt;
&lt;p&gt;装饰模式（decorator）：&lt;strong&gt;表示动态的给一个对象添加一些新的功能&lt;/strong&gt;（利用子类继承父类也可以实现），但是比生成子类方式更灵活。&lt;/p&gt;
&lt;p&gt;也叫装饰者模式或者装饰器模式。在理解装饰者模式最重要的就是理解组合和委托的两种思想，我们平时遇到的装饰者模式有IO集合、Android中的view等。&lt;/p&gt;
&lt;h3 id=&quot;uml&quot;&gt;UML&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://ox7gll2kh.bkt.clouddn.com/1664b8e423dc87fe10e6b3cff66e16f7.png&quot;/&gt;- Component：定义一个对象接口，可以给这些对象动态添加职责。真实对象和装饰者对象有相同的接口，这样客户端不用知道内部有装饰者对象（Decorator）存在的，还是以之前处理真实对象的相同方式来和装饰者对象交互。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ConcreteComponent&lt;/strong&gt;：是定义了一个具体的对象（例如：人），也可以给这个对象添加一些其他职责。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decorator&lt;/strong&gt;：装饰抽象类，继承了Component，从外类来扩展Component类的功能，但对Component来说，是无需知道Decorator的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConcreteDecorator&lt;/strong&gt;：就是具体的装饰对象了（衣服，鞋子..），它起到了给Component添加职责的功能。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;使用场景&quot;&gt;使用场景&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;需要透明且动态的扩展类的功能时&lt;/li&gt;
&lt;li&gt;实例&lt;/li&gt;
&lt;li&gt;IO中输入流和输出流&lt;/li&gt;
&lt;li&gt;Swing包中图形界面构件功能&lt;/li&gt;
&lt;li&gt;Servlet API中提供了一个request对象的Decorator设计模式的默认实现类HttpServletRequestWrapper,增强了request对象的功能。&lt;/li&gt;
&lt;li&gt;Struts2中，request，response，session对象的处理。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;示例&quot;&gt;示例&lt;/h3&gt;
&lt;p&gt;一杯主饮料（Beverage）需要加入各种调料，比如蒸奶、豆浆、摩卡、奶泡等，最后需要算出加入调料后饮料的价格。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果只是几种固定的饮料进行组合和搭配那么容易实现，但是这些都是动态随机的，并且可能以后会有更多的新饮料。那么如何进行动态的组合呢？&lt;/li&gt;
&lt;li&gt;如果使用组合的方式，效果会如何？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;用装饰者构造饮料&lt;/p&gt;
&lt;p&gt;以装饰者的思想构建饮料可以理解为：将饮料作为一个主体，调料作为装饰，主体和装饰是分离的，装饰可以以任何顺序和数量动态添加到主体上。也体现出组合的效果，不用在现有的代码上做任何修改，只需要添加新功能就可以（不用改变主饮料，按需求意愿添加调料），组合效果如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2001284-9047ba2d21c09866.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/528&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;装饰者可以一层层的把主体包裹起来，那么装饰者（两种调料Mocha和Soy）和主体（一种叫HouseBlend的咖啡）的类型应该保持一致。&lt;/p&gt;
&lt;h5 id=&quot;uml-1&quot;&gt;UML&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2001284-4ea375f2c60af2b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/531&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看出，装饰者和主体都是Beverage类型，同时beverage可以委托给具体的饮料如Espresso和HouseBlend或者调料Mocha和Soy计算出未被装饰（未加调料）或者装饰后（加调料）的价格cost。这是可以通过继承来实现的。在结构图中Beverage和CondimentsDecorator都是虚类来控制必须实现的方法。&lt;/p&gt;
&lt;h5 id=&quot;代码实现&quot;&gt;代码实现&lt;/h5&gt;
&lt;p&gt;这里只写了两个主体和两个调料，其实自己可以测试更多的主体饮料和多种调料的自由组合，在实际中肯定不止这几个类，那么弄清楚装饰者模式的结构就显得尤为重要。&lt;/p&gt;
&lt;p&gt;定义两个虚类：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Beverage {
    String description = &lt;span class=&quot;st&quot;&gt;&quot;Unknown Beverage&quot;&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getDescription&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; description;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;();
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CondimentDecorator &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Beverage {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getDescription&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两个主体饮料（Espresso和HouseBlend）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Espresso &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Beverage {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Espresso&lt;/span&gt;(){
        description = &lt;span class=&quot;st&quot;&gt;&quot;Espresso&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.99&lt;/span&gt;;
    }
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HouseBlend &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Beverage {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HouseBlend&lt;/span&gt;(){
        description = &lt;span class=&quot;st&quot;&gt;&quot;HouseBlend&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.89&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两种调料（Mocha和Soy）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Mocha &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; CondimentDecorator {

    Beverage beverage;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Mocha&lt;/span&gt;(Beverage beverage) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;beverage&lt;/span&gt; = beverage;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getDescription&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; beverage.&lt;span class=&quot;fu&quot;&gt;getDescription&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, Mocha&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; beverage.&lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;() + &lt;span class=&quot;fl&quot;&gt;0.20&lt;/span&gt;;
    }
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Soy &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; CondimentDecorator {
    Beverage beverage;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Soy&lt;/span&gt;(Beverage beverage) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;beverage&lt;/span&gt; = beverage;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getDescription&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; beverage.&lt;span class=&quot;fu&quot;&gt;getDescription&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; ,Soy&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; beverage.&lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;() + &lt;span class=&quot;fl&quot;&gt;0.30&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试类&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Test {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        Beverage beverage = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Espresso&lt;/span&gt;();
        &lt;span class=&quot;co&quot;&gt;//任何调料都不加&lt;/span&gt;
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(beverage.&lt;span class=&quot;fu&quot;&gt;getDescription&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; $&quot;&lt;/span&gt; + beverage.&lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;());

        Beverage beverage2 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HouseBlend&lt;/span&gt;();
        beverage2 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Mocha&lt;/span&gt;(beverage2);
        beverage2 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Soy&lt;/span&gt;(beverage2);
        &lt;span class=&quot;co&quot;&gt;//加Mocah和Soy&lt;/span&gt;
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(beverage2.&lt;span class=&quot;fu&quot;&gt;getDescription&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; $&quot;&lt;/span&gt; + beverage2.&lt;span class=&quot;fu&quot;&gt;cost&lt;/span&gt;());
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;优缺点&quot;&gt;优缺点&lt;/h3&gt;
&lt;h4 id=&quot;优点&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;扩展功能强，相比继承来说更灵活。继承的话会导致子类个数增加。而装饰者模式不会出现这种情况。&lt;/li&gt;
&lt;li&gt;可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象。&lt;/li&gt;
&lt;li&gt;具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的构件子类和具体装饰类。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;缺点&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;产生很多小对象，大量小对象会占据内存。一定程度上影响了性能&lt;/li&gt;
&lt;li&gt;​ 装饰模式易于出错，调试排查比较麻烦。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;see-source-code&quot;&gt;see &lt;a href=&quot;https://github.com/Dyleaf/DesignPattern&quot;&gt;source code&lt;/a&gt;&lt;/h3&gt;
</description>
<pubDate>Sun, 04 Mar 2018 17:47:00 +0000</pubDate>
<dc:creator>Dyleaf</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Dyleaf/p/8507047.html</dc:identifier>
</item>
<item>
<title>nodejs爬虫初试---superagent和cheerio - Shapeying</title>
<link>http://www.cnblogs.com/shapeY/p/8506947.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shapeY/p/8506947.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;　　早就听过爬虫，这几天开始学习nodejs，写了个爬虫 &lt;a href=&quot;https://github.com/leichangchun/node-crawlers/tree/master/superagent_cheerio_demo&quot; target=&quot;_blank&quot;&gt;demo&lt;/a&gt;  ，爬取 博客园首页的文章标题、用户名、阅读数、推荐数和用户头像，现做个小总结。&lt;/p&gt;
&lt;p&gt;　　使用到这几个点：&lt;/p&gt;
&lt;p&gt;　　1、node的核心模块-- &lt;a href=&quot;http://nodejs.cn/api/fs.html&quot; target=&quot;_blank&quot;&gt;文件系统&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　2、用于http请求的第三方模块 -- &lt;a href=&quot;http://visionmedia.github.io/superagent/&quot; target=&quot;_blank&quot;&gt;superagent&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　3、用于解析DOM的第三方模块 -- &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot; target=&quot;_blank&quot;&gt;cheerio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　几个模块详细的讲解及API请到各个链接查阅，demo中只有简单的用法。&lt;/p&gt;
&lt;h2&gt;准备工作&lt;/h2&gt;
&lt;p&gt;　　使用npm管理依赖，依赖信息会存放在package.json中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
//&lt;span&gt;安装用到的第三方模块
cnpm install &lt;/span&gt;--save superagent cheerio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　引入所需要用到的功能模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入第三方模块，superagent用于http请求，cheerio用于解析DOM&lt;/span&gt;
const request = require('superagent'&lt;span&gt;);
const cheerio &lt;/span&gt;= require('cheerio'&lt;span&gt;);
const fs &lt;/span&gt;= require('fs');
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;请求 + 解析页面&lt;/h2&gt;
&lt;p&gt;　　想要爬到博客园首页的内容，首先要请求首页地址，拿到返回的html，这里使用superagent进行http请求，基本的使用方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;request.get(url)
            .end(error,res){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;do something          &lt;/span&gt;
}        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　向指定的url发起get请求，请求错误时，会有error返回（没有错误时，error为null或undefined），res为返回的数据。&lt;/p&gt;
&lt;p&gt;　　拿到html内容后，要拿到我们想要的数据，这个时候就需要用cheerio解析DOM了，cheerio要先load目标html，然后再进行解析，API和jquery的API非常类似，熟悉jquery上手非常快。直接看代码实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;目标链接 博客园首页&lt;/span&gt;
let targetUrl = 'https://www.cnblogs.com/'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用来暂时保存解析到的内容和图片地址数据&lt;/span&gt;
let content = ''&lt;span&gt;;
let imgs &lt;/span&gt;=&lt;span&gt; [];

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发起请求&lt;/span&gt;
&lt;span&gt;request.get(targetUrl)
       .end( (error,res) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(error){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求出错，打印错误，返回&lt;/span&gt;
&lt;span&gt;               console.log(error)
               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
           }
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; cheerio需要先load html&lt;/span&gt;
           let $ =&lt;span&gt; cheerio.load(res.text);
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;抓取需要的数据,each为cheerio提供的方法用来遍历&lt;/span&gt;
           $('#post_list .post_item').each( (index,element) =&amp;gt;&lt;span&gt; {
               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分析所需要的数据的DOM结构&lt;/span&gt;
               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过选择器定位到目标元素，再获取到数据&lt;/span&gt;
                let temp =&lt;span&gt; {
                    &lt;/span&gt;'标题' : $(element).find('h3 a'&lt;span&gt;).text(),
                    &lt;/span&gt;'作者' : $(element).find('.post_item_foot &amp;gt; a'&lt;span&gt;).text(),
                    &lt;/span&gt;'阅读数' : +$(element).find('.article_view a').text().slice(3,-2&lt;span&gt;),
                    &lt;/span&gt;'推荐数' : +$(element).find('.diggnum'&lt;span&gt;).text()
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拼接数据&lt;/span&gt;
                content += JSON.stringify(temp) + '\n'&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同样的方式获取图片地址&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;($(element).find('img.pfs').length &amp;gt; 0&lt;span&gt;){
                    imgs.push($(element).find(&lt;/span&gt;'img.pfs').attr('src'&lt;span&gt;));
                }
           });
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存放数据&lt;/span&gt;
           mkdir('./content'&lt;span&gt;,saveContent);
           mkdir(&lt;/span&gt;'./imgs'&lt;span&gt;,downloadImg);
       })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;存储数据&lt;/h2&gt;
&lt;p&gt;　　上面解析DOM之后，已经拼接了所需要的信息内容，也拿到了图片的URL，现在就进行存储，把内容存放到指定目录的txt文件中，而且下载图片到指定目录&lt;/p&gt;
&lt;p&gt;　　先创建目录，使用nodejs核心的文件系统&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建目录&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; mkdir(_path,callback){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(fs.existsSync(_path)){
        console.log(`${_path}目录已存在`)
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        fs.mkdir(_path,(error)&lt;/span&gt;=&amp;gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(error){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; console.log(`创建${_path}目录失败`);
            }
            console.log(`创建${_path}目录成功`)
        })
    }
    callback();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有生成指定目录不会执行&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　有了指定目录之后，可以写入数据了，txt文件的内容已经有了，直接写入就可以了使用writeFile()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将文字内容存入txt文件中&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; saveContent() {
    fs.writeFile(&lt;/span&gt;'./content/content.txt'&lt;span&gt;,content.toString());
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　取到了图片的链接，所以需要再使用superagent下载图片，存在本地。superagent可以直接返回一个响应流，再配合nodejs的管道，直接把图片内容写到本地&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下载爬到的图片&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; downloadImg() {
    imgs.forEach((imgUrl,index) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取图片名  &lt;/span&gt;
        let imgName = imgUrl.split('/'&lt;span&gt;).pop();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下载图片存放到指定目录&lt;/span&gt;
        let stream = fs.createWriteStream(`./imgs/&lt;span&gt;${imgName}`);
        let req &lt;/span&gt;= request.get('https:' + imgUrl);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;响应流&lt;/span&gt;
&lt;span&gt;        req.pipe(stream);
        console.log(`开始下载图片 https:${imgUrl} &lt;/span&gt;--&amp;gt; ./imgs/&lt;span&gt;${imgName}`);         
    } )
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;效果　　&lt;/h2&gt;
&lt;p&gt;　　执行下demo，看下效果，数据已经正常爬下来了&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072774/201803/1072774-20180305002327704-1596258521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　非常简单的一个demo，可能也没有那么严谨，不过总是走出了node的第一小步。&lt;/p&gt;
</description>
<pubDate>Sun, 04 Mar 2018 16:29:00 +0000</pubDate>
<dc:creator>Shapeying</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shapeY/p/8506947.html</dc:identifier>
</item>
<item>
<title>Markdown语法你都会了吗？ - Jetictors</title>
<link>http://www.cnblogs.com/Jetictors/p/8506757.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jetictors/p/8506757.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1255627/201803/1255627-20180304225910844-948112106.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于&lt;code&gt;Markdown&lt;/code&gt;，它可以说是程序员公认最好的文档语言了，没有之一！我相信经常写文章或者开发文档的大佬们都对其能生成简洁、大方、雅观的文档都深有体会，它的强大是毋庸置疑的。它编写的文档不但能生成&lt;code&gt;html&lt;/code&gt;格式的文档，还可以生成&lt;code&gt;pdf&lt;/code&gt;格式的文档。而且现在网上的在线编辑器几乎上都支持了&lt;code&gt;Markdown&lt;/code&gt;语法。比如：&lt;code&gt;Github&lt;/code&gt;、&lt;code&gt;GitLab&lt;/code&gt;、&lt;code&gt;掘金&lt;/code&gt;、&lt;code&gt;简书&lt;/code&gt;、&lt;code&gt;博客园&lt;/code&gt;、&lt;code&gt;csdn&lt;/code&gt;、&lt;code&gt;码云&lt;/code&gt;、&lt;code&gt;有道云笔记&lt;/code&gt;...等等,这里就不在一一列举了。反正大家只要知道它很简洁、通用、强大就够了。&lt;/p&gt;
&lt;p&gt;这是我以前学习&lt;code&gt;Markdown&lt;/code&gt;语法的笔记，对着电脑无聊之下发现了其存在，而前不久还有一个朋友问我其语法，或许不会&lt;code&gt;Markdown&lt;/code&gt;语法的同学还是有一部的。故而，这里整合以前自己的笔记分享给大家，希望大家会喜欢。&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1255627/201803/1255627-20180304225956670-396979841.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一markdown简介&quot;&gt;一、Markdown简介&lt;/h2&gt;
&lt;p&gt;既然我们用了它，就该对其有一个大概的了解&lt;/p&gt;
&lt;h3 id=&quot;认识markdown&quot;&gt;1.1、认识Markdown&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，&lt;code&gt;Markdown&lt;/code&gt;的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的&lt;code&gt;HTML&lt;/code&gt;标记语言来说，&lt;code&gt;Markdown&lt;/code&gt;可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它用简洁的语法代替排版，而不像一般我们用的字处理软件&lt;code&gt;Word&lt;/code&gt;或&lt;code&gt;Pages&lt;/code&gt;有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。&lt;/p&gt;
&lt;h3 id=&quot;使用markdown的好处&quot;&gt;1.2、使用Markdown的好处&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;专注你的文字内容而不是排版样式。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;轻松的导出 HTML、PDF 和本身的 .md 文件。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;纯文本内容，兼容所有的文本编辑器与字处理软件。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;可读，直观。适合所有人的写作语言。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;二markdown语法规则&quot;&gt;二、Markdown语法规则&lt;/h2&gt;
&lt;p&gt;上面对&lt;code&gt;Markdown&lt;/code&gt;有了一个基本的认识，并且对其使用的好处也介绍了几点。那么该怎样编写&lt;code&gt;Markdown&lt;/code&gt;文档呢？请继续往下看...&lt;/p&gt;
&lt;h3 id=&quot;标题&quot;&gt;2.1、标题&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;类似于&lt;code&gt;word&lt;/code&gt;文档中的标题。并且该标题的级数对应于&lt;code&gt;Html&lt;/code&gt;语言的标题标签级数。如&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;&lt;/code&gt;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;一级标题：使用1个`#`号。 例： # 一级标题  等价于html中的 &amp;lt;h1&amp;gt;一级标题&amp;lt;/h1&amp;gt;
二级标题：使用2个`#`号。 例： ## 二级标题  等价于html中的 &amp;lt;h2&amp;gt;二级标题&amp;lt;/h2&amp;gt;
三级标题：使用3个`#`号。 例： ### 三级标题  等价于html中的 &amp;lt;h3&amp;gt;三级标题&amp;lt;/h3&amp;gt;
四级标题：使用4个`#`号。 例： #### 四级标题  等价于html中的 &amp;lt;h4&amp;gt;四级标题&amp;lt;/h4&amp;gt;
五级标题：使用5个`#`号。 例： ##### 五级标题  等价于html中的 &amp;lt;h5&amp;gt;五级标题&amp;lt;/h5&amp;gt;
六级标题：使用6个`#`号。 例： ###### 六级标题  等价于html中的 &amp;lt;h6&amp;gt;六级标题&amp;lt;/h6&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;

&lt;h2 id=&quot;二级标题&quot;&gt;二级标题&lt;/h2&gt;
&lt;h3 id=&quot;三级标题&quot;&gt;三级标题&lt;/h3&gt;
&lt;h4 id=&quot;四级标题&quot;&gt;四级标题&lt;/h4&gt;
&lt;h5 id=&quot;五级标题&quot;&gt;五级标题&lt;/h5&gt;
&lt;h6 id=&quot;六级标题&quot;&gt;六级标题&lt;/h6&gt;
&lt;h3 id=&quot;列表&quot;&gt;2.2、列表&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在编写&lt;code&gt;Markdown&lt;/code&gt;文档时，列表几乎上都会用到的，而列表可分为&lt;code&gt;无序列表&lt;/code&gt;和&lt;code&gt;有序列表&lt;/code&gt;两种，他们的语法都很简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;有序列表&quot;&gt;2.2.1、有序列表&lt;/h4&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;要使用有序列表，只要在一段文字前加上序号即可。如&lt;code&gt;1. xxx&lt;/code&gt;、&lt;code&gt;2. xxx&lt;/code&gt;...，这里值得注意的是，序号后面跟上一个英文符号的点（&lt;code&gt;.&lt;/code&gt;）,并且(&lt;code&gt;.&lt;/code&gt;)后面有一个空格，不然无效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1. 中国
2. 美国
3. 英国&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;中国&lt;/li&gt;
&lt;li&gt;美国&lt;/li&gt;
&lt;li&gt;英国&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;无序列表&quot;&gt;2.2.2、无序列表&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;要是用无序列表，只要在一段文字前面加上特定的符号即可。这里的符号可以是(&lt;code&gt;*、-、+&lt;/code&gt;)。如&lt;code&gt;- xxx&lt;/code&gt;、&lt;code&gt;+ xxx&lt;/code&gt;、&lt;code&gt;* xxx&lt;/code&gt;。同样值得注意的是符号与文字之间有一个空格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- 中国                 + 中国                 * 中国
- 美国      &amp;lt;===&amp;gt;      + 美国     &amp;lt;===&amp;gt;       * 美国
- 英国                 + 英国                 * 英国&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面三个符号的效果是一样的，并且可以混用。看下效果：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;中国&lt;/li&gt;
&lt;li&gt;美国&lt;/li&gt;
&lt;li&gt;英国&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;有序列表和无序列表之间的混用情况&quot;&gt;2.2.3、有序列表和无序列表之间的混用情况&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在实际编写中，可能会出现列表包含子列表的情况，也可能发生无序与有序列表之间嵌套的情况。这种情况下，只要在子列表的字段前面加上一个&lt;code&gt;Tab&lt;/code&gt;键，即4个空格就行了。请看下面的实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;1. 中国
    - 深圳
    - 上海
2. 美国
    - 纽约
    - 硅谷
3. 英国
    - 英格兰
    - 威尔士&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;中国
&lt;ul&gt;&lt;li&gt;深圳&lt;/li&gt;
&lt;li&gt;上海&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;美国
&lt;ul&gt;&lt;li&gt;纽约&lt;/li&gt;
&lt;li&gt;硅谷&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;英国
&lt;ul&gt;&lt;li&gt;英格兰&lt;/li&gt;
&lt;li&gt;威尔士&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上面只演示了，有序列表嵌套无序列表的情况，其他的根据这个格式按照有序和无序列表的语法改动就行了。&lt;/p&gt;
&lt;h3 id=&quot;引用&quot;&gt;2.3、引用&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;引用的使用：在一段文本的前面加上英文的右尖括号，即(&lt;code&gt;&amp;gt;&lt;/code&gt;)符号。值得注意的是，&lt;code&gt;&amp;gt;&lt;/code&gt;符号与文本之间有一个空格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;基本使用&quot;&gt;2.3.1、基本使用&lt;/h4&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; 我是引用文本&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看小效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我是引用文本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;嵌套引用&quot;&gt;2.3.2、嵌套引用&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;嵌套引用在一个引用文本中在引用其他的文本，也可以和列表一起使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; 我是引用文本1
&amp;gt;   &amp;gt; 我是嵌套的引用文本1
&amp;gt;   &amp;gt; 我是嵌套的引用文本2
&amp;gt;   &amp;gt;   &amp;gt; 1. 在嵌套一层1   
&amp;gt;   &amp;gt;   &amp;gt; 2. 在嵌套一层2
&amp;gt;   &amp;gt;
&amp;gt;   &amp;gt; 我是嵌套的引用文本3
&amp;gt;
&amp;gt; 我是引用文本2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我是引用文本1&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;我是嵌套的引用文本1&lt;br/&gt;我是嵌套的引用文本2&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;在嵌套一层1&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;在嵌套一层2&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;我是嵌套的引用文本3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我是引用文本2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;文字的样式&quot;&gt;2.4、文字的样式&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;Markdown&lt;/code&gt;中，还提供了几种很常见的文字样式，比如：&lt;code&gt;加粗&lt;/code&gt;、&lt;code&gt;倾斜&lt;/code&gt;、&lt;code&gt;删除线&lt;/code&gt;等。&lt;/p&gt;
&lt;h4 id=&quot;加粗&quot;&gt;2.4.1、加粗&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在文本的两端分别加上两个星号（&lt;code&gt;**&lt;/code&gt;）或者下划线（&lt;code&gt;__&lt;/code&gt;）。比如&lt;code&gt;**xxx**&lt;/code&gt;，&lt;strong&gt;注意:不能有空格&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;**我是加粗的文本1**
__我是加粗的文本2__&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我是加粗的文本1&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;我是加粗的文本2&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;斜体&quot;&gt;2.4.2、斜体&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在文本的两端分别加上一个星号（&lt;code&gt;*&lt;/code&gt;）或者一个下划线（&lt;code&gt;_&lt;/code&gt;）。比如&lt;code&gt;*xxx*&lt;/code&gt;，&lt;strong&gt;注意:不能有空格&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;*我是倾斜的文本1*
_我是倾斜的文本2_&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我是倾斜的文本1&lt;/em&gt;&lt;br/&gt;&lt;em&gt;我是倾斜的文本2&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;删除线&quot;&gt;2.4.3、删除线&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在文本的两端分别加上两个波浪号（&lt;code&gt;~~&lt;/code&gt;）。比如&lt;code&gt;~~xxx~~&lt;/code&gt;，&lt;strong&gt;注意:不能有空格&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;~~我是要删除的文本~~&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我是要删除的文本&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&quot;下划线&quot;&gt;2.4.4、下划线&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在&lt;code&gt;Markdown&lt;/code&gt;的原生语法中是不存在下划线的语法的，因为它会和链接产生冲突。在下面讲到&lt;code&gt;Markdown&lt;/code&gt;引用链接时，你就明白了。但是我们可以用html代码达到下划线的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;解决方案&quot;&gt;2.4.4.1、解决方案：&lt;/h5&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;使用行内&lt;code&gt;Html&lt;/code&gt;代码解决,当然，上面的几种文本样式同样可以用&lt;code&gt;Html&lt;/code&gt;去完成它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;使用行内html代码解决的两种方式&quot;&gt;2.4.4.2、使用行内&lt;code&gt;Html&lt;/code&gt;代码解决的两种方式&lt;/h5&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;使用&lt;code&gt;Html&lt;/code&gt;标签中的&lt;code&gt;&amp;lt;u&amp;gt;&amp;lt;/u&amp;gt;&lt;/code&gt;标签，但是这种方案不推荐，因为&lt;code&gt;Html5&lt;/code&gt;的代码规范以及&lt;code&gt;&amp;lt;u&amp;gt;&amp;lt;/u&amp;gt;&lt;/code&gt;标签的不可定制性。&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;u&amp;gt;我是带有下划线的文本&amp;lt;/u&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;&lt;u&gt;我是带有下划线的文本&lt;/u&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;使用&lt;code&gt;Html&lt;/code&gt;语言中的&lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;标签，相信对于前端开发者来说，是再熟悉不过了。推荐用此方式&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;举例说明：下划线为绿色，并且高度为1px，并且下划线为虚线。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;span style=&quot;border-bottom:1px dashed green;&quot;&amp;gt;所添加的需要加下划线的行内文字&amp;lt;/span&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所添加的需要加下划线的行内文字&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意，要实现下划线为实线的话，请把&lt;code&gt;dashed&lt;/code&gt;修改为&lt;code&gt;solid&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面就是实现下划线的两种方式。&lt;/p&gt;
&lt;h4 id=&quot;数学公式中的表达方法很少用到&quot;&gt;2.4.5、数学公式中的表达方法（很少用到）&lt;/h4&gt;
&lt;blockquote readability=&quot;5.6398104265403&quot;&gt;
&lt;p&gt;用&lt;code&gt;Markdown&lt;/code&gt;编写文档，用到数学公式的地方很少，我在这里列举常用的两三种，如果你想深入研究它，请参见&lt;a href=&quot;https://www.jianshu.com/p/a0aa94ef8ab2&quot;&gt;在Markdown中输入数学公式(MathJax)&lt;/a&gt;这边文章，写的很详细&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在这里只举例说明数学公式中的上划线与下划线。&lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;上划线：
        $\overline{X}$
下划线：
        $\underline{X}$&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;数学公式中的上划线：$\overline{X}$&lt;/p&gt;
&lt;p&gt;数学公式中的下划线：$\underline{X}$&lt;/p&gt;
&lt;h3 id=&quot;链接与图片&quot;&gt;2.5、链接与图片&lt;/h3&gt;
&lt;p&gt;在实际的文档编写中，链接的引用于图片的插入都很重要，而且其使用度也很高。而且链接和图片在其语法上也只有一个细微的差别。请看下面的实例&lt;/p&gt;
&lt;h4 id=&quot;链接&quot;&gt;2.5.1、链接&lt;/h4&gt;
&lt;blockquote readability=&quot;5.3877551020408&quot;&gt;
&lt;p&gt;链接的使用：英文下的一对中括号&lt;code&gt;[]&lt;/code&gt;来包裹住链接的文本，中括号后面跟上英文下的一对小括号&lt;code&gt;()&lt;/code&gt;来包裹住链接的地址。比如：[百度](&lt;a href=&quot;http://www.baidu.com/&quot; class=&quot;uri&quot;&gt;http://www.baidu.com&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[百度](http://www.baidu.com)
[掘金](https://juejin.im)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.baidu.com/&quot;&gt;百度&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://juejin.im/&quot;&gt;掘金&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;图片&quot;&gt;2.5.2、图片&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;图片的使用和链接的使用几乎相同，只要在&lt;code&gt;[]&lt;/code&gt;前面加上一个英文的感叹号即可，即(&lt;code&gt;!&lt;/code&gt;)符号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;![图片1](图片的连接)    
![图片2](图片的连接) &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里为了篇幅原因，就不举实例了，大家只要记住上面的用法就行了。&lt;br/&gt;如果是在在线平台上插入图片，该平台一般会先上传你的图片后，该平台会给你生成该图片的链接地址。你用这个地址就可以了。&lt;/p&gt;
&lt;h3 id=&quot;表格&quot;&gt;2.6、表格&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Markdown&lt;/code&gt;中的实现表格是比较麻烦的。这里不多作解释，看下面的例子就知道了。&lt;/p&gt;
&lt;h4 id=&quot;基本使用-1&quot;&gt;2.6.1、基本使用&lt;/h4&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;|  列名1  |  列名2  |  列名3  |
|---------|---------|---------|
|  值1    |   值1   |  值2    |
|  值1    |   值1   |  值2    |
|  值1    |   值1   |  值2    |&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;值1&lt;/td&gt;
&lt;td&gt;值1&lt;/td&gt;
&lt;td&gt;值2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;值1&lt;/td&gt;
&lt;td&gt;值1&lt;/td&gt;
&lt;td&gt;值2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;值1&lt;/td&gt;
&lt;td&gt;值1&lt;/td&gt;
&lt;td&gt;值2&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;表格的对齐方式&quot;&gt;2.6.2、表格的对齐方式&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;默认的对齐方式为：左对齐方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：以上面的例子举例，第一列左对齐，第二列居中对齐，第三列右对齐。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;注意和上面例子的不同之处

|  列名1  |  列名2  |  列名3  |
|:--------|:-------:|--------:|
|  值1    |   值1   |  值2    |
|  值1    |   值1   |  值2    |
|  值1    |   值1   |  值2    |&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;left&quot;&gt;值1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;值1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;值2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;left&quot;&gt;值1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;值1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;值2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;left&quot;&gt;值1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;值1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;值2&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;关键字代码块多行文本换行&quot;&gt;2.7、关键字、代码块、多行文本、换行&lt;/h3&gt;
&lt;p&gt;在编写文档，特别是技术型文章的时候，关键字和代码框的使用尤其的多。这里对上面提到的4个知识点一一的讲解。&lt;/p&gt;
&lt;h4 id=&quot;关键字&quot;&gt;2.7.1、关键字&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;关键字的使用：在文本的两端分别加上英文的(`)这个符号。即键盘上&lt;code&gt;Tab&lt;/code&gt;键的上面哪一个键。注意是英文的情况下。例：`xxx`、`yyy`&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;`关键字1`、`Java`、`Android`、`ios`&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;关键字1&lt;/code&gt;、&lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;Android&lt;/code&gt;、&lt;code&gt;ios&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;代码块&quot;&gt;2.7.2、代码块&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;代码框的使用：在一段文本的前面加上4个空格，或者一个&lt;code&gt;Tab&lt;/code&gt;键的长度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    注意看下面的每一行前面都有一个Tab键的额长度，即4个空格
    for(int i = 0 ; i &amp;lt; 5; i++){
        println(&quot;asdasdasdasd&quot;)
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：我这里就随意的写一段代码为演示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;注意看下面的每一行前面都有一个Tab键的额长度，即4个空格
for(int i = 0 ; i &amp;lt; 5; i++){
    println(&quot;asdasdasdasd&quot;)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;纯文本&quot;&gt;2.7.3、纯文本&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;纯文本的使用：在一段文本的两端分别加上3个英文的（`）符号，例：```xxxxx```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实在写文章的时候，几乎用不到纯文本，因为在用代码块几乎上可以代替他了。不过还是有特例，就比如说上面的那个例子就用到了纯文本。&lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;```
for(int i = 0 ; i &amp;lt; 5; i++){
    println(&quot;asdasdasdasd&quot;)
}
```&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;br/&gt;&lt;code&gt;for(int i = 0 ; i &amp;lt; 5; i++){ println(&quot;asdasdasdasd&quot;) }&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;换行符&quot;&gt;2.7.4、换行符&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;换行符的使用这里提供三种方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用&lt;code&gt;Html&lt;/code&gt;中的&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;标签（不推荐），因为在某一些工具或在线平台中达不到效果&lt;/li&gt;
&lt;li&gt;段落与段落之间使用一个空行（推荐）&lt;/li&gt;
&lt;li&gt;在第一段文本结束后使用两个空格，在换行写第二段文本。（推荐）&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. 使用&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;第一段文本&amp;lt;br/&amp;gt;
第二段文本&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;第一段文本&lt;/p&gt;&lt;p&gt;第二段文本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 使用空行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;第一段文本

第二段文本&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;第一段文本&lt;/p&gt;
&lt;p&gt;第二段文本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 使用两个空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;第一段文本(这里跟了两个空格)   
第二段文本&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果：&lt;/p&gt;
&lt;p&gt;第一段文本&lt;br/&gt;第二段文本&lt;/p&gt;
&lt;h3 id=&quot;分割线&quot;&gt;2.8、分割线&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;分割线的使用：在段落与段落之间加上3个中划线(&lt;code&gt;-&lt;/code&gt;)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例说明：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;---&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看下效果&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;我相信在你详细看完这篇文章后，用以上的语法去写文章或者文档完全足够你用了。不过大家还是要踊跃的尝试下，应为上面的例子只是单方面的讲解这一个知识点。而写文章或者文档的时候，几乎上都是混用的。比方说，列表嵌套列表、应用嵌套列表，列表里面文本加粗等等...。孰能生巧，当你写一遍文章下来，我相信你已经掌握了&lt;code&gt;Markdown&lt;/code&gt;的语法了。我相信你也会深深的爱上它的...&lt;/p&gt;
&lt;p&gt;这一篇文章主要让您了解&lt;code&gt;Markdown&lt;/code&gt;以及掌握其语法规则。而关于&lt;code&gt;Markdown&lt;/code&gt;的编辑器我会在下一篇文章中为大家详细的介绍。&lt;/p&gt;
&lt;p&gt;在这最后希望您能给个关注，因为您的关注，是我继续写文章最好的动力。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我的个人博客&lt;/em&gt;：&lt;a href=&quot;https://jetictors.github.io/&quot;&gt;Jetictors&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;Github&lt;/strong&gt;：&lt;a href=&quot;https://github.com/Jetictors&quot;&gt;Jteictors&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;我的掘金&lt;/strong&gt;：&lt;a href=&quot;https://juejin.im/user/5709f5798ac247004c295d95&quot;&gt;Jetictors&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 04 Mar 2018 16:20:00 +0000</pubDate>
<dc:creator>Jetictors</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jetictors/p/8506757.html</dc:identifier>
</item>
<item>
<title>css y轴溢出滚动条，x轴溢出显示 - 假面骑士</title>
<link>http://www.cnblogs.com/xieyao/p/8506908.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyao/p/8506908.html</guid>
<description>&lt;p&gt;这个是我工作中遇到的一个问题，困扰了我好几天，彻底理解了什么叫思路很重要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/989810/201803/989810-20180304233319139-1390823720.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;黄色盒子里的内容是要超出出现滚动条的，红色的方块是根据另外的元素去定位的，于是呢 我就加上了 overflow-y：auto;然后出现了下面这幕。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/989810/201803/989810-20180304233600028-504666861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;会发现红色放开溢出之后出现了 滚动条，然后我又改成了这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/989810/201803/989810-20180304233844754-1584554209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;让x轴溢出之后不剪切任何内容也不出现滚动条，你们觉得是解决了吗？我满心欢喜的查看了效果，依然没有解决，苦恼了几天各种的 搜寻答案，其实这种y轴滚动条x轴溢出显示的效果 是做不到的，如果有人能做到 教我。&lt;/p&gt;
&lt;p&gt;于是呢 我想出了另外一个办法：&lt;/p&gt;
&lt;p&gt;给最外层的容器设置overflow:auto,当超出容器的时候让其可以滚动，然后让滚动条不可见&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/989810/201803/989810-20180304235138009-1561195137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 这样超出之后页面也可以滚动 方块也同时存在，我真的很感慨，写代码真的  思路很重要！！！&lt;/p&gt;
</description>
<pubDate>Sun, 04 Mar 2018 15:55:00 +0000</pubDate>
<dc:creator>假面骑士</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyao/p/8506908.html</dc:identifier>
</item>
<item>
<title>SpringCloud入门1-服务注册与发现(Eureka) - Ryan.Miao</title>
<link>http://www.cnblogs.com/woshimrf/p/springclout-eureka.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/woshimrf/p/springclout-eureka.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Oracle转让Java，各种动态语言的曝光率上升，Java工程师的未来在哪里？我觉得Spring Cloud让未来有无限可能。拖了半年之久的Spring Cloud学习就从今天开始了。中文教材不多，而且大多都是简单的离散的信息，想要找到企业级的一体化解决方案很少。不过，对于入门来说，简单就够了，等到用的时候自然而然的汇总起来。&lt;/p&gt;
&lt;p&gt;目标是把springcloud的子项目过一遍。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;spring-cloud-aws&lt;/td&gt;
&lt;td&gt;1.2.2.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M4&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-cloud-bus&lt;/td&gt;
&lt;td&gt;1.3.2.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M6&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;spring-cloud-cli&lt;/td&gt;
&lt;td&gt;1.4.1.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M1&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-cloud-commons&lt;/td&gt;
&lt;td&gt;1.3.2.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M7&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;spring-cloud-contract&lt;/td&gt;
&lt;td&gt;1.2.3.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M7&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-cloud-config&lt;/td&gt;
&lt;td&gt;1.4.2.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M7&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;spring-cloud-netflix&lt;/td&gt;
&lt;td&gt;1.4.3.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M7&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-cloud-security&lt;/td&gt;
&lt;td&gt;1.2.2.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M2&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;spring-cloud-cloudfoundry&lt;/td&gt;
&lt;td&gt;1.1.1.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M3&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-cloud-consul&lt;/td&gt;
&lt;td&gt;1.3.2.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M6&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;spring-cloud-sleuth&lt;/td&gt;
&lt;td&gt;1.3.2.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M7&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-cloud-stream&lt;/td&gt;
&lt;td&gt;Ditmars.SR3&lt;/td&gt;
&lt;td&gt;Elmhurst.RC1&lt;/td&gt;
&lt;td&gt;Elmhurst.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;spring-cloud-zookeeper&lt;/td&gt;
&lt;td&gt;1.2.0.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M6&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-boot&lt;/td&gt;
&lt;td&gt;1.5.10.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.RC2&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;spring-cloud-task&lt;/td&gt;
&lt;td&gt;1.2.2.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M3&lt;/td&gt;
&lt;td&gt;2.0.0.RELEASE&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-cloud-vault&lt;/td&gt;
&lt;td&gt;1.1.0.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M6&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;spring-cloud-gateway&lt;/td&gt;
&lt;td&gt;1.0.1.RELEASE&lt;/td&gt;
&lt;td&gt;2.0.0.M7&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;spring-cloud-openfeign&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;2.0.0.M1&lt;/td&gt;
&lt;td&gt;2.0.0.BUILD-SNAPSHOT&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;本次学习服务注册与发现， Eureka。&lt;/p&gt;
&lt;h2 id=&quot;eureka介绍&quot;&gt;Eureka介绍&lt;/h2&gt;
&lt;p&gt;Eureka是一个基于REST(Representational State Transfer)的服务，主要用于AWS cloud， 提供服务定位(locating services)、负载均衡(load balancing)、故障转移(failover of middle-tier servers)。我们把它叫做&lt;strong&gt;Eureka Server&lt;/strong&gt;. Eureka也提供了基于Java的客户端组件，&lt;strong&gt;Eureka Client&lt;/strong&gt;,内置的负载均衡器可以实现基本的round-robin负载均衡能力。在Netflix，一个基于Eureka的更复杂的负载均衡器针对多种因素(如流量、资源利用率、错误状态等)提供加权负载均衡，以实现高可用(superior resiliency).&lt;/p&gt;
&lt;h3 id=&quot;为什么需要eureka&quot;&gt;为什么需要Eureka&lt;/h3&gt;
&lt;p&gt;在AWS Cloud，由于其天生的特性，服务器经常变换。我们知道每个EC2挂掉后，重启又是一个新的。不像传统的固定IP，AWS的服务器是变化的。因此需要更复杂的负载均衡方案来动态注册和注销。由于AWS并没有提供中间层负载均衡解决方案，Eureka填补了这个领域的巨大空白。&lt;/p&gt;
&lt;h3 id=&quot;eureka和aws-elb有什么不同&quot;&gt;Eureka和AWS ELB有什么不同&lt;/h3&gt;
&lt;p&gt;AWS ELB(Elastic Load Balancer)是面向最终用户Web流量的边缘服务的负载均衡解决方案。Eureka填补了对中间层负载均衡的需求。理论上，你可以把中间层服务放在AWS ELB之后，但在EC2模型中，你将会把他们直接暴露到外网，从而失去了AWS security groups的好处。(这里有疑问，我现实使用的时候ELB也有区分VPC的，所以不会暴露到外网，不知道是不是本文发布的时候AWS还没这功能，所以感觉Eureka和ELB区别不大啊)。&lt;/p&gt;
&lt;p&gt;AWS ELB也是一种传统的基于代理的负载平衡解决方案，而Eureka则不同之处在于负载平衡发生在实例/服务器/主机级别。客户端实例知道他们需要与哪些服务器交互的所有信息。这样的好坏取决于你怎么看待它。如果你想要AWS现在提供的基于粘滞用户session的负载均衡，Eureka没有开箱即用的解决方案。在Netflix，我们更喜欢我们的服务是无状态的(非粘性)。这有利于提供更好的扩展性，Eureka非常适合解决这个问题。(感觉这段也是吹水，现在的web交互大都是无状态的，状态通过redis，message queue等第三方维护，ELB照样可以提供)。&lt;/p&gt;
&lt;p&gt;使用Eureka区分基于代理的负载平衡和负载平衡的另一个重要方面是，&lt;strong&gt;您的应用程序可以灵活地处理负载平衡器的中断，因为有关可用服务器的信息会缓存在客户端上。这确实需要少量的内存，但换得更好的弹性。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;eureka和route-53有什么不同&quot;&gt;Eureka和Route 53有什么不同&lt;/h3&gt;
&lt;p&gt;Route 53是一个域名服务，就像Eureka可以为中层服务器提供相同的服务一样，但仅此而已。 Route 53是一项DNS服务，即使对于非AWS数据中心，也可以托管您的DNS记录。 Route 53还可以在AWS区域间执行基于延迟的路由。Eureka类似于内部DNS，与全世界的DNS服务器无关。Eureka也是区域隔离的，因为它不知道其他AWS区域中的服务器。保存信息的主要目的是在区域内进行负载平衡。&lt;/p&gt;
&lt;p&gt;虽然你可以在Route 53中注册你的中间层服务器，并依赖AWS安全组保护你的服务器不受外网访问，但你的中间层服务器身份仍然暴露于外网环境。它同样带有传统基于DNS的负载均衡方案的缺点，其中流量仍然会被路由到已经不健康或已经不存在的服务器上（在AWS云中，服务器随时可能消失）。&lt;/p&gt;
&lt;h3 id=&quot;eureka如何使用&quot;&gt;Eureka如何使用？&lt;/h3&gt;
&lt;p&gt;在Netflix，Eureka不仅是中间层负载均衡关键部分，还有以下功能：&lt;/p&gt;
&lt;p&gt;与Netflix Asgard一起提供红/黑部署服务， Asgard是一个让云部署更方便的开源服务。Eureka会与Asgard搭配，让应用在新/老版本部署切换，让故障处理更快速和无缝，尤其是当启动100个实例部署时要花费很长时间的时候。&lt;/p&gt;
&lt;p&gt;当我们的cassandra需要维护时，停止Cassandra实例。&lt;/p&gt;
&lt;p&gt;为我们的memcached缓存服务提供识别环上实例列表功能。&lt;/p&gt;
&lt;p&gt;为特定的应用提供因意外导致故障保存元信息的服务。&lt;/p&gt;
&lt;h3 id=&quot;eureka使用时机&quot;&gt;Eureka使用时机？&lt;/h3&gt;
&lt;p&gt;当你的服务运行在AWS云上并且你不希望使用AWS ELB注册或暴露给外网。你要么需要使用类似round-robin这种简单的负载均衡方案或者想要写一个基于Eureka包装过的符合要求的负载均衡器。你没有session粘性，没有session绑定机制和在外部缓存(例如 memcached)载入会话数据的需要。更重要的是，如果你的架构风格适合一个基于客户端的负载均衡模型，Eureka相当适合这个场景。&lt;/p&gt;
&lt;p&gt;应用客户端和应用服务端如何通信？&lt;/p&gt;
&lt;p&gt;通信技术可以是任何你喜欢的。Eureka帮你找到你需要通信的服务信息但没有引入任何通信协议或方法的限制。比如，你可以用Eureka获取目标服务器地址并使用thrift,http(s)或其他RPC机制的协议。&lt;/p&gt;
&lt;h3 id=&quot;eureka架构&quot;&gt;Eureka架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Netflix/eureka/master/images/eureka_architecture.png&quot;/&gt;&lt;br/&gt;上面的架构图描述了Eureka是如何在Netflix部署的，这也是Eureka集群的运行方式。在每个区域（region）都有一个eureka集群，它只知道该区域内的实例信息。每个分区（zone）至少有一个eureka服务器来处理本分区故障。&lt;/p&gt;
&lt;p&gt;服务注册在Eureka上并且每30秒发送心跳来续租。如果一个客户端在几次内没有刷新心跳，它将在大约90秒内被移出服务器注册表。注册信息和更新信息会在整个eureka集群的节点进行复制。任何分区的客户端都可查找注册中心信息（每30秒发生一次）来定位他们的服务（可能会在任何分区）并进行远程调用。&lt;/p&gt;
&lt;h3 id=&quot;非java服务和客户端&quot;&gt;非Java服务和客户端&lt;/h3&gt;
&lt;p&gt;对于非Java的服务，你可以用其他语言实现eureka的客户端部分。基于REST的服务也暴露给了所有操作给Eureka客户端。非Java客户端也可以使用REST服务来查询其他服务的信息。&lt;/p&gt;
&lt;h3 id=&quot;可配置&quot;&gt;可配置&lt;/h3&gt;
&lt;p&gt;有了Eureka，你可以动态添加删除集群节点。你可以调整内部配置，从超时到线程池。Eureka使用archaius并且如果你有一个配置源的实现，那么很多配置可以动态调优。&lt;/p&gt;
&lt;h3 id=&quot;弹性&quot;&gt;弹性&lt;/h3&gt;
&lt;p&gt;在AWS云中，构建弹性伸缩必不可少。Eureka是我们经验的结晶，并且在客户端和服务端都内置了弹性能力。&lt;/p&gt;
&lt;p&gt;Eureka客户端设计成可以处理一个或多个Eureka服务端的失败场景。由于Eureka客户端有注册表缓存信息，即使所有的eureka服务器都挂了，服务也能正常运行。&lt;/p&gt;
&lt;p&gt;Eureka服务器对于其他eureka节点挂了也提供了足够的弹性。即使服务端和客户端之间产生了网络分区，服务器也由内置的弹性策略来防止大规模的停机。&lt;/p&gt;
&lt;h3 id=&quot;多区域&quot;&gt;多区域&lt;/h3&gt;
&lt;p&gt;在多个AWS区域部署Eureka是一个很简单的工作。不同区域之间Eureka集群并不通信。&lt;/p&gt;
&lt;h3 id=&quot;监控&quot;&gt;监控&lt;/h3&gt;
&lt;p&gt;Eureka使用servo来跟踪服务端和客户端的信息，包括性能，监控和报警。数据保存在JMX中并暴露给Amazon Cloud Watch。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;eureka服务治理体系&quot;&gt;Eureka服务治理体系&lt;/h2&gt;
&lt;p&gt;以下参考&lt;a href=&quot;http://blog.csdn.net/sunhuiliang85/article/details/76222517&quot;&gt;《Spring Cloud Eureka详解》&lt;/a&gt;, 作者 大道化简, 然而，后面发现是程序员dd的书籍里的内容。在此正名，以下出自《Spring Cloud 微服务实战》，作者翟永超。&lt;/p&gt;
&lt;p&gt;大概读完Eureka的简介，应该可以知道Eureka是负责微服务架构中服务治理的功能，负责各个微服务实例的自动注册和发现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-archi.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;服务注册&quot;&gt;服务注册&lt;/h3&gt;
&lt;p&gt;在服务治理框架中，通常都会构建一个注册中心，每个服务单元向注册中心登记自己提供的服务，包括服务的主机与端口号、服务版本号、通讯协议等一些附加信息。注册中心按照服务名分类组织服务清单，同时还需要以心跳检测的方式去监测清单中的服务是否可用，若不可用需要从服务清单中剔除，以达到排除故障服务的效果。&lt;/p&gt;
&lt;h3 id=&quot;服务发现&quot;&gt;服务发现&lt;/h3&gt;
&lt;p&gt;在服务治理框架下，服务间的调用不再通过指定具体的实例地址来实现，而是通过服务名发起请求调用实现。服务调用方通过服务名从服务注册中心的服务清单中获取服务实例的列表清单，通过指定的负载均衡策略取出一个服务实例位置来进行服务调用。&lt;/p&gt;
&lt;h3 id=&quot;eureka服务端&quot;&gt;Eureka服务端&lt;/h3&gt;
&lt;p&gt;Eureka服务端，即服务注册中心。它同其他服务注册中心一样，支持高可用配置。依托于强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。&lt;/p&gt;
&lt;p&gt;Eureka服务端支持集群模式部署，当集群中有分片发生故障的时候，Eureka会自动转入自我保护模式。它允许在分片发生故障的时候继续提供服务的发现和注册，当故障分配恢复时，集群中的其他分片会把他们的状态再次同步回来。集群中的的不同服务注册中心通过异步模式互相复制各自的状态，这也意味着在给定的时间点每个实例关于所有服务的状态可能存在不一致的现象。&lt;/p&gt;
&lt;h3 id=&quot;eureka客户端&quot;&gt;Eureka客户端&lt;/h3&gt;
&lt;p&gt;Eureka客户端，主要处理服务的注册和发现。客户端服务通过注册和参数配置的方式，嵌入在客户端应用程序的代码中。在应用程序启动时，Eureka客户端向服务注册中心注册自身提供的服务，并周期性的发送心跳来更新它的服务租约。同时，他也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期行的刷新服务状态。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;注册中心&quot;&gt;注册中心&lt;/h2&gt;
&lt;p&gt;在服务治理框架中，通常都会构建一个注册中心，每个服务单元向注册中心登记自己提供的服务，包括服务的主机与端口号、服务版本号、通讯协议等一些附加信息。注册中心按照服务名分类组织服务清单，同时还需要以心跳检测的方式去监测清单中的服务是否可用，若不可用需要从服务清单中剔除，以达到排除故障服务的效果。&lt;/p&gt;
&lt;h3 id=&quot;创建eureka-server&quot;&gt;创建Eureka Server&lt;/h3&gt;
&lt;p&gt;测试代码： &lt;a href=&quot;https://github.com/Ryan-Miao/eureka-server&quot; class=&quot;uri&quot;&gt;https://github.com/Ryan-Miao/eureka-server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eureka Server是基于springboot的，只要启动一个springboot就可以了。start.spring.io提供了一系列启动模板，而且Spring又和Idea比较暧昧，所以使用Idea可以超级简单的搭建和集成Spring项目。&lt;/p&gt;
&lt;p&gt;在Idea里，新建项目，选择Spring initializer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2279594-de33b84a79858106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，勾选你想要的组件就行了。这里搜索Eureka Server, 选择&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2279594-3addb73d569a58e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，创建好项目后记得先修改编码为UTF8, 不然万恶的GBK...&lt;/p&gt;
&lt;p&gt;我的pom如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;project&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;eureka-server&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;kw&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;eureka-server&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.10.RELEASE&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;spring-cloud.version&amp;gt;&lt;/span&gt;Edgware.SR2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/spring-cloud.version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-eureka-server&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;kw&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，在application.properties中加入配置信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;spring.application.name=eureka-server

#服务注册中心端口号
server.port=1110

#服务注册中心实例的主机名
eureka.instance.hostname=localhost

#是否向服务注册中心注册自己
eureka.client.register-with-eureka=false

#是否检索服务
eureka.client.fetch-registry=false

#服务注册中心的配置内容，指定服务注册中心的位置
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改启动类，添加&lt;code&gt;@EnableEurekaServer&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@EnableEurekaServer&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; EurekaServerApplication {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(EurekaServerApplication.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，启动main方法即可。如果端口有冲突，修改合适的端口重启。demo中端口为1110，启动后，访问http://localhost:1110/ 可以看到状态控制台。&lt;/p&gt;
&lt;p&gt;前文也说了，上述demo是注册中心，所有的微服务要向本server注册以实现负载均衡。那么，首先就要保证注册中心的稳定，于是就必须搭建Eureka集群的高可用方案。&lt;/p&gt;
&lt;h2 id=&quot;高可用服务注册中心&quot;&gt;高可用服务注册中心&lt;/h2&gt;
&lt;p&gt;考虑到发生故障的情况，服务注册中心发生故障必将会造成整个系统的瘫痪，因此需要保证服务注册中心的高可用。&lt;/p&gt;
&lt;p&gt;Eureka Server在设计的时候就考虑了高可用设计，在Eureka服务治理设计中，所有节点既是服务的提供方，也是服务的消费方，服务注册中心也不例外。&lt;/p&gt;
&lt;p&gt;Eureka Server的高可用实际上就是将自己做为服务向其他服务注册中心注册自己，这样就可以形成一组互相注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。&lt;/p&gt;
&lt;h3 id=&quot;构建服务注册中心集群&quot;&gt;构建服务注册中心集群&lt;/h3&gt;
&lt;p&gt;Eureka Server的同步遵循着一个非常简单的原则：只要有一条边将节点连接，就可以进行信息传播与同步。可以采用两两注册的方式实现集群中节点完全对等的效果，实现最高可用性集群，任何一台注册中心故障都不会影响服务的注册与发现.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-invoke.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以，下面创建3个Eureka Server两两互相注册，形成集群。由于核心代码一样，我们只要将其部署在不同的机器上即可。因此，我需要3个不同的配置文件。&lt;/p&gt;
&lt;p&gt;为了本地模拟，修改host，虚拟3个域名&lt;/p&gt;
&lt;p&gt;windows host 位置&lt;code&gt;C:\Windows\System32\drivers\etc&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1 master
127.0.0.1 backup1
127.0.0.1 backup2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，给我们的Eureka Server增加3个配置文件。此时，应该将application.properties里除了spring.application.name之外的配置注释掉，我们后面3个配置暂时不用上面几个开关。&lt;/p&gt;
&lt;p&gt;application-peer1.properties&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
server.port=1111

eureka.instance.hostname=master

eureka.client.serviceUrl.defaultZone=http://backup1:1112/eureka/,http://backup2:1113/eureka/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;application-peer2.properties&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server.port=1112

eureka.instance.hostname=backup1

eureka.client.serviceUrl.defaultZone=http://master:1111/eureka/,http://backup2:1113/eureka/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;application-peer3.properties&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server.port=1113

eureka.instance.hostname=backup2


eureka.client.serviceUrl.defaultZone=http://master:1111/eureka/,http://backup1:1112/eureka/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于是本地开发环境，我们直接以maven启动。当然，也可以选择jar启动。&lt;/p&gt;
&lt;p&gt;分别打开3个命令行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mvn spring-boot:run -Dspring.profiles.active=peer1
mvn spring-boot:run -Dspring.profiles.active=peer2
mvn spring-boot:run -Dspring.profiles.active=peer3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，由于启动的时候会去指定zone注册，而另外的server还没启动，这时候会报错，&lt;code&gt;Cannot execute request on any known server&lt;/code&gt;, 不用理会，接着启动后两个即可。&lt;/p&gt;
&lt;p&gt;全部启动成功后，访问http://master:1111/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-info.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到2个备份，在线的server有3个Availability Zones。Availability Zones在AWS中是指可用区，是在不同region里的不同机房。&lt;/p&gt;
&lt;p&gt;注册中心高可用集群demo搭建完毕。&lt;/p&gt;
&lt;h3 id=&quot;失效剔除&quot;&gt;失效剔除&lt;/h3&gt;
&lt;p&gt;有些时候，我们的服务实例并不一定会正常下线，可能由于内存溢出、网络故障等原因使服务不能正常运作。而服务注册中心并未收到“服务下线”的请求，为了从服务列表中将这些无法提供服务的实例剔除，Eureka Server在启动的时候会创建一个定时任务，默认每隔一段时间（默认为60秒）将当前清单中超时（默认为90秒）没有续约的服务剔除出去。&lt;/p&gt;
&lt;h3 id=&quot;自我保护&quot;&gt;自我保护&lt;/h3&gt;
&lt;p&gt;服务注册到Eureka Server后，会维护一个心跳连接，告诉Eureka Server自己还活着。Eureka Server在运行期间会统计心跳失败的比例在15分钟以之内是否低于85%，如果出现低于的情况，Eureka Server会将当前实例注册信息保护起来，让这些实例不会过期。这样做会使客户端很容易拿到实际已经不存在的服务实例，会出现调用失败的情况。因此客户端要有容错机制，比如请求重试、断路器。&lt;/p&gt;
&lt;p&gt;以下是自我保护相关的属性：&lt;/p&gt;
&lt;p&gt;eureka.server.enableSelfPreservation=true. 可以设置改参数值为false，以确保注册中心将不可用的实例删除&lt;/p&gt;
&lt;h3 id=&quot;region地域与zone可用区&quot;&gt;region（地域）与zone（可用区）&lt;/h3&gt;
&lt;p&gt;region和zone（或者Availability Zone）均是AWS的概念。在非AWS环境下，我们可以简单地将region理解为地域，zone理解成机房。一个region可以包含多个zone，可以理解为一个地域内的多个不同的机房。不同地域的距离很远，一个地域的不同zone间距离往往较近，也可能在同一个机房内。&lt;/p&gt;
&lt;p&gt;region可以通过配置文件进行配置，如果不配置，会默认使用us-east-1。同样Zone也可以配置，如果不配置，会默认使用defaultZone。&lt;/p&gt;
&lt;p&gt;Eureka Server通过eureka.client.serviceUrl.defaultZone属性设置Eureka的服务注册中心的位置。&lt;/p&gt;
&lt;p&gt;指定region和zone的属性如下：&lt;/p&gt;
&lt;p&gt;（1）eureka.client.availabilityZones.myregion=myzone# myregion是region&lt;/p&gt;
&lt;p&gt;（2）eureka.client.region=myregion&lt;/p&gt;
&lt;p&gt;Ribbon的默认策略会优先访问通客户端处于同一个region中的服务端实例，只有当同一个zone中没有可用服务端实例的时候才会访问其他zone中的实例。所以通过zone属性的定义，配合实际部署的物理结构，我们就可以设计出应对区域性故障的容错集群。&lt;/p&gt;
&lt;h3 id=&quot;安全验证&quot;&gt;安全验证&lt;/h3&gt;
&lt;p&gt;刚才的demo中，我们注册中心的面板是公开访问的。这里可以简单加入用户名密码，让访问更安全。当然，你可以自己实现sso。&lt;br/&gt;pom添加&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，为了简单演示，事实上也应该这样。我们将3个server的用户名密码设置一致。即，在application.properties里添加：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;security.user.name=admin
security.user.password=123456
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，在我们其他三个配置文件中的&lt;code&gt;eureka.client.serviceUrl.defaultZone&lt;/code&gt;添加自己的url并加入用户名密码，&lt;br/&gt;以peer1为例子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;eureka.client.serviceUrl.defaultZone=http://${security.user.name}:${security.user.password}@${eureka.instance.hostname}:${server.port}/eureka/,http://backup1:1112/eureka/,http://backup2:1113/eureka/&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h2 id=&quot;服务提供者-微服务集群&quot;&gt;服务提供者 微服务集群&lt;/h2&gt;
&lt;h3 id=&quot;服务注册-1&quot;&gt;服务注册&lt;/h3&gt;
&lt;p&gt;服务提供者在启动的时候会通过REST请求的方式将自己注册到Eureka Server上，同时带上自身服务的一些元数据信息。Eureka Server接收到这个Rest请求之后，将元数据信息存储在一个双层结构的Map中，其中第一层的key是服务名。第二层的key 是具体服务的实例名。&lt;/p&gt;
&lt;p&gt;在服务注册时，需要确认一下eureka.client.register-with-eureka=true参数是否正确，该值默认为true。若设置为fasle将不会启动注册操作。&lt;/p&gt;
&lt;h3 id=&quot;服务同步&quot;&gt;服务同步&lt;/h3&gt;
&lt;p&gt;从eureka服务治理体系架构图中可以看到，不同的服务提供者可以注册在不同的服务注册中心上，它们的信息被不同的服务注册中心维护。&lt;/p&gt;
&lt;p&gt;此时，由于多个服务注册中心互相注册为服务，当服务提供者发送注册请求到一个服务注册中心时，它会将该请求转发给集群中相连的其他注册中心，从而实现服务注册中心之间的服务同步。通过服务同步，提供者的服务信息就可以通过集群中的任意一个服务注册中心获得。&lt;/p&gt;
&lt;h3 id=&quot;服务续约&quot;&gt;服务续约&lt;/h3&gt;
&lt;p&gt;在注册服务之后，服务提供者会维护一个心跳用来持续高速Eureka Server，“我还在持续提供服务”，否则Eureka Server的剔除任务会将该服务实例从服务列表中排除出去。我们称之为服务续约。&lt;/p&gt;
&lt;p&gt;下面是服务续约的两个重要属性：&lt;/p&gt;
&lt;p&gt;（1）&lt;code&gt;eureka.instance.lease-expiration-duration-in-seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;leaseExpirationDurationInSeconds，表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance。&lt;/p&gt;
&lt;p&gt;默认为90秒&lt;/p&gt;
&lt;p&gt;如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。&lt;br/&gt;如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。&lt;br/&gt;该值至少应该大于leaseRenewalIntervalInSeconds&lt;/p&gt;
&lt;p&gt;（2）&lt;code&gt;eureka.instance.lease-renewal-interval-in-seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;leaseRenewalIntervalInSeconds，表示eureka client发送心跳给server端的频率。如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance。除此之外，如果该instance实现了HealthCheckCallback，并决定让自己unavailable的话，则该instance也不会接收到流量。&lt;/p&gt;
&lt;p&gt;默认30秒&lt;/p&gt;
&lt;h3 id=&quot;创建并注册服务提供者-eureka-client&quot;&gt;创建并注册服务提供者 Eureka Client&lt;/h3&gt;
&lt;p&gt;项目代码： &lt;a href=&quot;https://github.com/Ryan-Miao/eureka-client&quot; class=&quot;uri&quot;&gt;https://github.com/Ryan-Miao/eureka-client&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eureka Server是注册中心，我们的客户端也要集成Eureka client来自我注册。我们client项目也是基于Springboot的。同样创建一个新的项目 eureka-client. 这次，要引入Eureka Discovery以及健康检查Actuator。最终pom如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;st&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;project xmlns=&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; xmlns:xsi=&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
    xsi:schemaLocation=&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;modelVersion&amp;gt;&lt;span class=&quot;fl&quot;&gt;4.0.0&lt;/span&gt;&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;com.&lt;span class=&quot;fu&quot;&gt;test&lt;/span&gt;&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;eureka-client&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;&lt;span class=&quot;fl&quot;&gt;0.0.1&lt;/span&gt;-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;

    &amp;lt;name&amp;gt;eureka-client&amp;lt;/name&amp;gt;
    &amp;lt;description&amp;gt;Demo project &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; Spring Boot&amp;lt;/description&amp;gt;

    &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.&lt;span class=&quot;fu&quot;&gt;springframework&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;boot&lt;/span&gt;&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;&lt;span class=&quot;fl&quot;&gt;1.5.10&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;RELEASE&lt;/span&gt;&amp;lt;/version&amp;gt;
        &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
    &amp;lt;/parent&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;project.&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;sourceEncoding&lt;/span&gt;&amp;gt;UTF&lt;span class=&quot;dv&quot;&gt;-8&lt;/span&gt;&amp;lt;/project.&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;sourceEncoding&lt;/span&gt;&amp;gt;
        &amp;lt;project.&lt;span class=&quot;fu&quot;&gt;reporting&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;outputEncoding&lt;/span&gt;&amp;gt;UTF&lt;span class=&quot;dv&quot;&gt;-8&lt;/span&gt;&amp;lt;/project.&lt;span class=&quot;fu&quot;&gt;reporting&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;outputEncoding&lt;/span&gt;&amp;gt;
        &amp;lt;java.&lt;span class=&quot;fu&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;span class=&quot;fl&quot;&gt;1.8&lt;/span&gt;&amp;lt;/java.&lt;span class=&quot;fu&quot;&gt;version&lt;/span&gt;&amp;gt;
        &amp;lt;spring-cloud.&lt;span class=&quot;fu&quot;&gt;version&lt;/span&gt;&amp;gt;Edgware.&lt;span class=&quot;fu&quot;&gt;SR2&lt;/span&gt;&amp;lt;/spring-cloud.&lt;span class=&quot;fu&quot;&gt;version&lt;/span&gt;&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.&lt;span class=&quot;fu&quot;&gt;springframework&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;boot&lt;/span&gt;&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.&lt;span class=&quot;fu&quot;&gt;springframework&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;cloud&lt;/span&gt;&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.&lt;span class=&quot;fu&quot;&gt;springframework&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;boot&lt;/span&gt;&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.&lt;span class=&quot;fu&quot;&gt;projectlombok&lt;/span&gt;&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.&lt;span class=&quot;fu&quot;&gt;springframework&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;boot&lt;/span&gt;&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.&lt;span class=&quot;fu&quot;&gt;springframework&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;cloud&lt;/span&gt;&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${spring-cloud.&lt;span class=&quot;fu&quot;&gt;version&lt;/span&gt;}&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt;&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.&lt;span class=&quot;fu&quot;&gt;springframework&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;boot&lt;/span&gt;&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;


&amp;lt;/project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，启动类添加&lt;code&gt;@EnableDiscoveryClient&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@EnableDiscoveryClient&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; EurekaClientApplication {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(EurekaClientApplication.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，添加配置信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;spring.application.name=eureka-client-service-provider
server.port=2001
eureka.client.serviceUrl.defaultZone=http://admin:123456@master:1111/eureka/,http://admin:123456@backup1:1112/eureka/,http://admin:123456@backup2:1113/eureka/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里，我们把三个注册中心的地址都加上。然后，为保证高可用，我们的服务提供者也需要集群部署。真实生产环境中肯定是部署到不同的机器上，在本地模拟的话，我们只好以不同端口来模拟了。&lt;/p&gt;
&lt;p&gt;启动端口2001&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mvn spring-boot:run -Dserver.port=2001&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动端口2002&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mvn spring-boot:run -Dserver.port=2002&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，查看注册中心面板。&lt;br/&gt;&lt;img src=&quot;http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-client-provider.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;服务消费者-另一个微服务集群&quot;&gt;服务消费者 另一个微服务集群&lt;/h2&gt;
&lt;h3 id=&quot;获取服务&quot;&gt;获取服务&lt;/h3&gt;
&lt;p&gt;消费者服务启动时，会发送一个Rest请求给服务注册中心，来获取上面注册的服务清单。为了性能考虑，Eureka Server会维护一份只读的服务注册清单来返回给客户端，同时该缓存清单默认会每隔30秒更新一次。&lt;/p&gt;
&lt;p&gt;下面是获取服务的两个重要的属性：&lt;/p&gt;
&lt;p&gt;（1） &lt;code&gt;eureka.client.fetch-registry&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;是否需要去检索寻找服务，默认是true&lt;/p&gt;
&lt;p&gt;（2）&lt;code&gt;eureka.client.registry-fetch-interval-seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;表示eureka client间隔多久去拉取服务注册信息，默认为30秒，对于api-gateway，如果要迅速获取服务注册状态，可以缩小该值，比如5秒&lt;/p&gt;
&lt;h3 id=&quot;服务调用&quot;&gt;服务调用&lt;/h3&gt;
&lt;p&gt;服务消费者在获取服务清单后，通过服务名可以获取具体提供服务的实例名和该实例的元数据信息。因为有这些服务实例的详细信息，所以客户端可以根据自己的需要决定具体调用哪个实例，在Ribbon中会默认采用轮询的方式进行调用，从而实现客户端的负载均衡。&lt;/p&gt;
&lt;p&gt;等学到Ribbon之后再继续服务消费。&lt;/p&gt;
&lt;h3 id=&quot;服务下线&quot;&gt;服务下线&lt;/h3&gt;
&lt;p&gt;在系统运行过程中必然会面临关闭或重启服务的某个实例的情况，在服务关闭操作时，会触发一个服务下线的Rest服务请求给Eureka Server，告诉服务注册中心：“我要下线了。”服务端在接收到该请求后，将该服务状态置位下线（DOWN），并把该下线事件传播出去。&lt;/p&gt;
&lt;h2 id=&quot;配置详解&quot;&gt;配置详解&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-config.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;服务实例类配置&quot;&gt;服务实例类配置&lt;/h2&gt;
&lt;h3 id=&quot;端点配置&quot;&gt;端点配置&lt;/h3&gt;
&lt;p&gt;eureka实例的状态页面和健康监控的url默认为spring boot actuator提供的/info端点和/health端点。我们必须确保Eureka客户端的/health端点在发送元数据的时候，是一个能够被注册中心访问到的地址，否则服务注册中心不会根据应用的健康检查来更改状态（仅当开启了healthcheck功能时，以该端点信息作为健康检查标准）。而如果/info端点不正确的话，会导致在Eureka面板中单击服务时，无法访问到服务实例提供的信息接口。&lt;/p&gt;
&lt;p&gt;大多数情况下，我们不需要修改这个几个url配置。但是当应用不使用默认的上下文(context path或servlet path，比如配置server.servletPath=/test），或者管理终端路径（比如配置management.contextPath=/admin）时，我们需要修改健康检查和状态页的url地址信息。&lt;/p&gt;
&lt;p&gt;application.yml配置文件如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server.context-path=/helloeureka&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;//下面配置为相对路径，也支持配置成绝对路径，例如需要支持https&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;eureka.instance.health-check-url-path=${server.context-path}/health

eureka.instance.status-page-url-path=${server.context-path}/info&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;元数据&quot;&gt;元数据&lt;/h3&gt;
&lt;p&gt;元数据是Eureka客户端在向服务注册中心发送注册请求时，用来描述自身服务信息的对象，其中包含了一些标准化的元数据，比如服务名称、实例名称、实例IP、实例端口等用于服务治理的重要信息；以及一些用于负载均衡策略或是其他特殊用途的自定义元数据信息。&lt;/p&gt;
&lt;p&gt;我们可以通过&lt;code&gt;eureka.instance.&amp;lt;properties&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;的格式对标准化元数据直接进行配置，其中&lt;code&gt;&amp;lt;properties&amp;gt;&lt;/code&gt;就是EurekaInstanceConfigBean对象中的成员变量。而对于自定义元数据，可以通过&lt;code&gt;eureka.instance.metadataMap.&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;的格式来进行配置。比如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;eureka.instance.metadataMap.zone=tianjin

//随机生成实例名

eureka.instance.metadataMap.instanceId=${spring.application.name}:${random.value}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;健康检测&quot;&gt;健康检测&lt;/h3&gt;
&lt;p&gt;默认情况下，Eureka中各个服务实例的健康检测并不是通过spring-boot-acturator模块的/health端点来实现的，而是依靠客户端心跳的方式来保持服务实例的存活。在Eureka的服务续约与剔除机制下，客户端的健康状态从注册到注册中心开始都会处于UP状态，除非心跳终止一段时间之后，服务注册中心将其剔除。默认的心跳实现方式可以有效检查客户端进程是否正常运作，但却无法保证客户端应用能够正常提供服务。&lt;/p&gt;
&lt;p&gt;在Spring Cloud Eureka中，可以把Eureka客户端的健康检测交给spring-boot-actuator模块的health端点，以实现更加全面的健康状态维护，设置方式如下：&lt;/p&gt;
&lt;p&gt;（1） 在pom.xml中引入spring-boot-starter-actuator模块的依赖&lt;/p&gt;
&lt;p&gt;（2） 在application.properties中增加参数配置&lt;code&gt;eureka.client.healthcheck.enabled=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里，Idea里并没有提示&lt;code&gt;eureka.client.healthcheck.enabled&lt;/code&gt;这个属性，并且还显示黄色，让以为是不是哪里错了，根本不敢尝试。不过百度后，发现有人做了类似实验，成功了。好吧，可能对这个的学习还不够，或者就应该给Idea提一个issue。下面给出自定义health check来替换Eureka自带心跳测试。&lt;/p&gt;
&lt;h4 id=&quot;自己实现healthchecker&quot;&gt;自己实现HealthChecker&lt;/h4&gt;
&lt;p&gt;根据自己health的定义，自己实现一个HealthChecker。这里简单模拟。&lt;br/&gt;在eureka-client创建MyHealthChecker，&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MyHealthChecker &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; HealthIndicator {


    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; up = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Health &lt;span class=&quot;fu&quot;&gt;health&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (up) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Health.&lt;span class=&quot;fu&quot;&gt;Builder&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;withDetail&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;aaa_cnt&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;//自定义监控内容&lt;/span&gt;
                    .&lt;span class=&quot;fu&quot;&gt;withDetail&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;bbb_status&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;up&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;up&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;();
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Health.&lt;span class=&quot;fu&quot;&gt;Builder&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;withDetail&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;error&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;client is down&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;down&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;();
        }

    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isUp&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; up;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setUp&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; up) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;up&lt;/span&gt; = up;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，暴露出一个接口来控制up状态。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;fu&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HealthSettingController {

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    MyHealthChecker myHealthChecker;

    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/health/{status}&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;up&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;status&quot;&lt;/span&gt;) Boolean status) {
        myHealthChecker.&lt;span class=&quot;fu&quot;&gt;setUp&lt;/span&gt;(status);

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; status.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;();
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在我们的客户端eureka-clientp配置文件里新增&lt;code&gt;eureka.client.healthcheck.enabled=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重新启动，访问&lt;code&gt;http://localhost:2001/health/false&lt;/code&gt;来把我们client端中一个instance设置为down。然后，刷新eureka server面板，即访问http://master:1111/， 可以看到，我们的client确实下线了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-client-down.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他配置&quot;&gt;其他配置&lt;/h3&gt;
&lt;p&gt;除了上述配置参数外，下面整理了一些EurekaInstanceConfigBean中定义的配置参数以及对应的说明和默认值，这些参数均以eureka.instance为前缀。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oe20lp6p0.bkt.clouddn.com/blog/2018/eureka-config2.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;通讯协议&quot;&gt;通讯协议&lt;/h2&gt;
&lt;p&gt;默认情况下，Eureka使用Jersey和XStream配合JSON作为Server与Client之间的通讯协议。也可以选择实现自己的协议来代替。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
</description>
<pubDate>Sun, 04 Mar 2018 15:52:00 +0000</pubDate>
<dc:creator>Ryan.Miao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/woshimrf/p/springclout-eureka.html</dc:identifier>
</item>
<item>
<title>Spring IO Platform 作为Spring官网的排位第一的项目，解决Spring项目组合中版本依赖 - 壮壮熊</title>
<link>http://www.cnblogs.com/zhouqinxiong/p/spring_io_platform.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhouqinxiong/p/spring_io_platform.html</guid>
<description>&lt;p&gt;&lt;strong&gt;简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        Spring IO Platform是Spring官网中排第一位的项目。它将Spring的核心API集成到一个适用于现代应用程序的平台中。提供了Spring项目组合中的版本依赖。这些依赖关系是经过测试，可以保证正常工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为什么要使用？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        Spring IO Platform主要是解决依赖版本的冲突问题。举个栗子：在使用Spring的时候，经常会使用到第三方库，一般大家都是根据经验挑选一个版本浩或挑选最新的，其实这是存在隐患的。除非做过完整的测试，保证集成该版本的依赖不会出现问题，否则风险很大，且后续扩展会越来越困难。因为随着业务复杂度的增加，集成的第三方组件会越来会多，依赖之间的关联也会也来越复杂。&lt;/p&gt;
&lt;p&gt;        Spring IO Platform正好解决了这些问题，在我们添加第三方依赖时，不需要写版本号，它能自动帮我们选择一个最优的版本，保证最大限度的扩展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;维护了哪些依赖？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        Spring IO Platform维护的依赖非常多，挑选了一些常见的（更多详情请查看官网），如下表所示：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;201.66666666666666&quot;&gt;Group&lt;/th&gt;
&lt;th width=&quot;104.66666666666667&quot;&gt;Artifact&lt;/th&gt;
&lt;th width=&quot;142.66666666666666&quot;&gt;Version&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;222.66666666666666&quot;&gt;org.springframework.boot&lt;/td&gt;
&lt;td width=&quot;125.66666666666667&quot;&gt;spring-boot&lt;/td&gt;
&lt;td width=&quot;136.66666666666666&quot;&gt;1.5.10.RELEASE&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;222.66666666666666&quot;&gt;ch.qos.logback&lt;/td&gt;
&lt;td width=&quot;125.66666666666667&quot;&gt;logback-core&lt;/td&gt;
&lt;td width=&quot;156.66666666666666&quot;&gt;1.1.11&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;222.66666666666666&quot;&gt;com.google.code.gson&lt;/td&gt;
&lt;td width=&quot;125.66666666666667&quot;&gt;gson&lt;/td&gt;
&lt;td width=&quot;156.66666666666666&quot;&gt;2.8.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;222.66666666666666&quot;&gt;com.rabbitmq&lt;/td&gt;
&lt;td width=&quot;125.66666666666667&quot;&gt;amqp-client&lt;/td&gt;
&lt;td width=&quot;156.66666666666666&quot;&gt;4.0.3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;222.66666666666666&quot;&gt;com.rabbitmq&lt;/td&gt;
&lt;td width=&quot;125.66666666666667&quot;&gt;http-client&lt;/td&gt;
&lt;td width=&quot;156.66666666666666&quot;&gt;1.1.1.RELEASE&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;222.66666666666666&quot;&gt;junit&lt;/td&gt;
&lt;td width=&quot;125.66666666666667&quot;&gt;junit&lt;/td&gt;
&lt;td width=&quot;152.66666666666666&quot;&gt;4.12&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;222.66666666666666&quot;&gt;org.apache.tomcat&lt;/td&gt;
&lt;td width=&quot;125.66666666666667&quot;&gt;tomcat-jdbc&lt;/td&gt;
&lt;td width=&quot;152.66666666666666&quot;&gt;8.5.27&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;使用Spring IO Platform&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        Spring IO Platform主要用于管理系统依赖，可以支持Maven和Gradle。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Maven中使用Spring IO Platform&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        Spring IO Platform支持import和继承parent两种方式：&lt;/p&gt;
&lt;p&gt;        import的方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;your-application&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.spring.platform&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;platform-bom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Brussels-SR7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Dependency declarations &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        继承parent的方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;your-application&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.spring.platform&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;platform-bom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Brussels-SR7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Dependency declarations &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        采用继承parent的方法，除了导入pom提供的依赖关系管理之外，应用程序还将获得一些插件管理，为许多插件提供合理的默认设置，包括Spring Boot的Maven插件。 要利用这个默认配置，需要做的就是把这个插件包含在你的pom的&amp;lt;plugins&amp;gt;部分中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        当想在自己的pom里添加了一个属于Spring IO Platform中的依赖的时候，可以直接省略版本号，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在Gradle中使用Spring IO Platform&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        如下所示，我们会应用io.spring.dependency-management这个插件，然后在dependencyManagement中导入bom&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;buildscript {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    repositories {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        jcenter()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    dependencies {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        classpath 'io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE'
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;apply plugin: 'io.spring.dependency-management'
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;repositories {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    mavenCentral()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;dependencyManagement {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    imports {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        mavenBom 'io.spring.platform:platform-bom:Brussels-SR7'
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        当需要添加一个属于Spring IO Platform中的依赖的时候，写法与Maven类似，可以省略版本号，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;dependencies {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    compile 'org.springframework:spring-core'
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;喜欢请关注我公众号--“精修Java”，做一些实战项目中的问题和解决方案分享。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yNV7KSicILb4ZjO618OTQVHgj6xJfbYLYOUq5pk02Mm3xX3zIiaNqcQ8TEH9kciaomib5Rwavtme8abXyu6gRN7rDg/640?wx_fmt=jpeg&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 04 Mar 2018 15:51:00 +0000</pubDate>
<dc:creator>壮壮熊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhouqinxiong/p/spring_io_platform.html</dc:identifier>
</item>
<item>
<title>当我问表单校验的面试题时，我期望得到什么样的答案 - 钌子_rawbin</title>
<link>http://www.cnblogs.com/rawbin/p/8506892.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rawbin/p/8506892.html</guid>
<description>&lt;h2 id=&quot;面试题&quot;&gt;面试题&lt;/h2&gt;
&lt;p&gt;校验用户名表单，长度为8-10位的只包含数字和字母的字符串，用JavaScript实现一个校验函数。&lt;/p&gt;
&lt;h2 id=&quot;解决过程&quot;&gt;1 解决过程&lt;/h2&gt;
&lt;h3 id=&quot;首先确认题目需求几乎没有人确认过当然也没有人写对过&quot;&gt;1.1 首先确认题目需求（几乎没有人确认过，当然也没有人写对过）&lt;/h3&gt;
&lt;h4 id=&quot;题目要求&quot;&gt;1.1.1 题目要求&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;长度8-10位&lt;/li&gt;
&lt;li&gt;只包含数字和字母&lt;/li&gt;
&lt;li&gt;JS校验函数&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;tips&quot;&gt;1.1.2 Tips&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;几乎没人确认过&lt;/li&gt;
&lt;li&gt;没人写对过&lt;/li&gt;
&lt;li&gt;如果这里有问题，后面肯定对不了&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;其次分析思路转换为可以写代码的等价逻辑表达也没人写对过&quot;&gt;1.2 其次分析思路（转换为可以写代码的等价逻辑表达，也没人写对过）&lt;/h3&gt;
&lt;h4 id=&quot;等价逻辑转换一&quot;&gt;1.2.1 等价逻辑转换一&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;包含字母&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只能是数字和字母&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;长度8-10位&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;​&lt;/p&gt;
&lt;h4 id=&quot;等价逻辑转换二&quot;&gt;1.2.2 等价逻辑转换二&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;不 全为数字&lt;/li&gt;
&lt;li&gt;不 全为字母&lt;/li&gt;
&lt;li&gt;只能是数字和字母&lt;/li&gt;
&lt;li&gt;长度8-10位&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;等价逻辑转换三&quot;&gt;1.2.3 等价逻辑转换三&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;所有字符ASCII码在数字和字母的范围内&lt;/li&gt;
&lt;li&gt;长度8-10位&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;tips-1&quot;&gt;1.2.4 Tips&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;即使前面需求理解清楚，这里转换不等价也得不到正确的结果&lt;/li&gt;
&lt;li&gt;有了这里面的等价分解，最基本的TestCase也就有了，便于后面做校验&lt;/li&gt;
&lt;li&gt;即使写不出代码来，这里能说清楚也行&lt;/li&gt;
&lt;li&gt;说不清楚也行，需要能看到不断尝试，积极思考的过程&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;然后是核心代码实现清一色的正则我们也先说正则&quot;&gt;1.3 然后是核心代码实现（清一色的正则，我们也先说正则）&lt;/h3&gt;
&lt;h4 id=&quot;使用零宽正向先行断言&quot;&gt;1.3.1 使用零宽正向先行断言&lt;/h4&gt;
&lt;h5 id=&quot;代码实现&quot;&gt;1.3.1.1 代码实现&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;/^(?=.*\d.*)(?=.*[a-zA-Z].*)[0-9a-zA-Z]{8,10}$/.test(str)&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;代码解释&quot;&gt;1.3.1.2 代码解释&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;(?=)&lt;/code&gt;表达正向先行断言，满足条件的其他匹配结果才为真，即括号内的表达式匹配整个匹配结果才为真&lt;/li&gt;
&lt;li&gt;可以出现在代码的任意位置&lt;/li&gt;
&lt;li&gt;不占用最终的匹配宽度&lt;/li&gt;
&lt;li&gt;这里表达既包含数字又包含字母的只包含数字和字母的8-10位的字符串&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;逻辑表达&quot;&gt;1.3.1.3 逻辑表达&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;包含数字&lt;/li&gt;
&lt;li&gt;包含字母&lt;/li&gt;
&lt;li&gt;8-10位的数字和字母的组合（全匹配）&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;使用零宽负向先行断言&quot;&gt;1.3.2 使用零宽负向先行断言&lt;/h4&gt;
&lt;h5 id=&quot;代码实现-1&quot;&gt;1.3.2.1 代码实现&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;/^(?!\d+$)(?![a-zA-Z]+$)[0-9a-zA-Z]{8,10}$/.test(str)&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;代码解释-1&quot;&gt;1.3.2.2 代码解释&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;(?!)&lt;/code&gt; 表达负向先行断言，满足非条件的其他匹配结果才为真，即括号内的表达式不匹配整个匹配结果才为真&lt;/li&gt;
&lt;li&gt;可以出现在代码的任意位置&lt;/li&gt;
&lt;li&gt;不占用最终的匹配宽度&lt;/li&gt;
&lt;li&gt;这里表达不全为数字且不全为字母的只包含数字和字母的8-10位的字符串&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;逻辑表达-1&quot;&gt;1.3.2.3 逻辑表达&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;不全为数字的（全匹配）&lt;/li&gt;
&lt;li&gt;不全为字母的（全匹配）&lt;/li&gt;
&lt;li&gt;8-10位的数字和字母的组合（全匹配）&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;section&quot;&gt;1.3.2.4&lt;/h5&gt;
&lt;h4 id=&quot;如果不知道上面的方式可以拆分一下&quot;&gt;1.3.3 如果不知道上面的方式，可以拆分一下&lt;/h4&gt;
&lt;h5 id=&quot;代码实现-2&quot;&gt;1.3.3.1 代码实现&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;!/^\d+$/.test(str) &amp;amp;&amp;amp; !/^[a-zA-Z]+$/.test(str) &amp;amp;&amp;amp; /^[0-9a-zA-Z]{8,10}$/.test(str)&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;代码解释-2&quot;&gt;1.3.3.2 代码解释&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;不解释了，直接的逻辑表达&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;逻辑表达-2&quot;&gt;1.3.3.3 逻辑表达&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;不全为数字的（全匹配）&lt;/li&gt;
&lt;li&gt;不全为字母的（全匹配）&lt;/li&gt;
&lt;li&gt;8-10位的数字和字母的组合（全匹配）&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;如果不知道正则怎么玩也可以用字符判断的方式&quot;&gt;1.3.4 如果不知道正则怎么玩，也可以用字符判断的方式&lt;/h4&gt;
&lt;h5 id=&quot;代码实现-3&quot;&gt;1.3.4.1 代码实现&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;//考虑记不住ASCII码
var rangeChars = '09azAZ';
var char0Code = rangeChars.charCodeAt(0),
char9Code = rangeChars.charCodeAt(1),
charaCode = rangeChars.charCodeAt(2),
charzCode = rangeChars.charCodeAt(3),
charACode = rangeChars.charCodeAt(4),
charZCode = rangeChars.charCodeAt(5);

Array.from(str).every(char =&amp;gt; {
    return '0' &amp;lt;= char &amp;amp;&amp;amp; char &amp;lt;= '9' || 'a' &amp;lt;= char &amp;amp;&amp;amp; char &amp;lt;= 'z' || 'A' &amp;lt;= char &amp;amp;&amp;amp; char &amp;lt;= 'Z' 
});

Array.from(str).some(char =&amp;gt; {
    return '0' &amp;lt;= char &amp;amp;&amp;amp; char &amp;lt;= '9'
});

Array.from(str).some(char =&amp;gt; {
    return 'a' &amp;lt;= char &amp;amp;&amp;amp; char &amp;lt;= 'z' || 'A' &amp;lt;= char &amp;amp;&amp;amp; char &amp;lt;= 'Z' 
});

8 &amp;lt;= str.length &amp;amp;&amp;amp; str.length &amp;lt;= 10&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;最后是结果的输出&quot;&gt;1.4 最后是结果的输出&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;export const validationUtil = {
    isNameValid:(str) =&amp;gt; {
        //调用isNameValid 的同时，不应该有判断undefind,判断null的过程，表单取出来的不会有这俩值
        str += '';
        str = str.trim();
        return /^(?!\d+$)(?![a-zA-Z]+$)[0-9a-zA-Z]{8,10}$/.test(str);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;常见问题&quot;&gt;2 常见问题&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;校验不写trim&lt;/li&gt;
&lt;li&gt;正则不写首尾匹配&lt;/li&gt;
&lt;li&gt;/^[0-9a-zA-Z]{8,10}$/ 作为题目结果&lt;/li&gt;
&lt;li&gt;自己写出来的正则，自己也不知道啥意思&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;参考资料&quot;&gt;3 参考资料&lt;/h2&gt;
&lt;h3 id=&quot;正则书籍&quot;&gt;3.1 正则书籍&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;基础&lt;/li&gt;
&lt;li&gt;学习正则表达式&lt;/li&gt;
&lt;li&gt;正则表达式必知必会&lt;/li&gt;
&lt;li&gt;神奇的匹配&lt;/li&gt;
&lt;li&gt;进阶&lt;/li&gt;
&lt;li&gt;精通正则表达式&lt;/li&gt;
&lt;li&gt;正则指引&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;正则工具&quot;&gt;3.2 正则工具&lt;/h3&gt;
</description>
<pubDate>Sun, 04 Mar 2018 15:49:00 +0000</pubDate>
<dc:creator>钌子_rawbin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rawbin/p/8506892.html</dc:identifier>
</item>
</channel>
</rss>