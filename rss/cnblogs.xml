<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>MVP架构在xamarin android中的简单使用 - 张林-布莱恩特</title>
<link>http://www.cnblogs.com/zhangmumu/p/9053969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangmumu/p/9053969.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;好几个月没写文章了，使用xamarin android也快接近两年，还有一个月职业生涯就到两个年了，从刚出来啥也不会了，到现在回头看这个项目，真jb操蛋（真辛苦了实施的人了，无数次吐槽怎么这么丑），怪自己太年轻了，还好是给指定行业的人使用。 重新学习思考之后，再看自己在项目中的某些实现的代码，的确不尽人意，甚至想骂自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目经常改，改来该去，代码一直增加，一个fragment也没什么功能，接近1000行的代码，用region括起来，开看起来还挺整齐的，找的时候就凉了。究其原因，没有一种模式，所有的逻辑全写在controller（fragment和activity里面），当然不管了解不了解什么框架模式、设计模式。最主要、最基本的还是实现功能和良好的用户体验，一些小的项目，不需要频繁修改需求甚至不需要MVP、MVC等模式来设计，那样反而有点刻意设计，代码复杂臃肿。关于android中mvp架构的介绍文章非常丰富，这里我只是做一个学习的记录，温故而知新。&lt;/p&gt;
&lt;p&gt;程序的思想都是通用的，搞.net对于mvc框架应该是非常熟悉，webform用的目前应该不是很多。先说说android中 MVC，mvc分为三部分 ：视图（View用户界面）、Controller（fragmnet、activity控制器业务逻辑）、Model（数据存取）； &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://www.jcodecraeer.com/uploads/20160414/1460565635729862.png&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;Model：负责数据的处理、请求网络数据、读取本地数据、检验等 &lt;br/&gt;View：UI操作，控件的实际处理，更新Model层的数据，负责用户请求通知Controller &lt;br/&gt;Controller：Activity和Fragment，初始化各种控件，加载数据、逻辑的处理，职责比较多。&lt;/p&gt;

&lt;p&gt;mvp将controller改成了peresenter提出者，也改变了通信的方向，是一个MVC的改良版，MVP的结构如下： &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1492853730&amp;amp;di=e7e25f80917150deb60a3c9f46cc4509&amp;amp;imgtype=jpg&amp;amp;er=1&amp;amp;src=http://www.android100.org/uploadfile/2016/0506/20160506155642_0.gif&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;br/&gt;Model：存取数据，网络数据、SharedPreferences、sqlite等数据的存取 &lt;br/&gt;Presenter：订阅，负责View和Model的交互，隔断View层和Model层的交互。调用View中的相应方法展示数据 &lt;br/&gt;View：Fragment、Activity、ViewGroup 这一层，处理用户的交互和事件，并触发Presenter中的相应操作 &lt;br/&gt;mvp的优点是： &lt;br/&gt;1.view与model不发生任何交互，view层不能持有Model层的引用，不能直接去更新Model层，必须通过Presenter层，Presenter层中也不能直接操作View及相关的UI控件，必须通过View层的引用来操作。 &lt;br/&gt;2.便于测试，维护性提高，代码结构更加清晰，可以明显看到Activity和 &lt;br/&gt;3.View与Model分离使工程的整体架构和代码结构非常清晰（不再是所有的业务和逻辑都糅合在Activity、Fragment里了），易于理解和上手。 &lt;br/&gt;mvp的缺点是： &lt;br/&gt;代码更加复杂，代码量增加。 &lt;br/&gt;实践是检验真理的唯一标准，下面通过一个简单的例子获取天气预报信息看看，如何在xamarin android项目如何使用MVP架构吧&lt;/p&gt;
&lt;h2 id=&quot;使用mvp架构实现查询公网备案的例子&quot;&gt;使用mvp架构实现查询公网备案的例子&lt;/h2&gt;
&lt;p&gt;天气预报的接口：&lt;a href=&quot;https://www.sojson.com/api/gongan/&quot; target=&quot;_blank&quot;&gt;https://www.sojson.com/api/gongan/&lt;/a&gt;域名，根据域名查询备案信息 &lt;br/&gt;返回的格式是json. &lt;br/&gt;如果你想更深入地了解mvp架构，可以参看一下google官方MVP框架源码解析之TODO-MVP &lt;br/&gt;&lt;a href=&quot;https://github.com/googlesamples/android-architecture/tree/todo-mvp/&quot; target=&quot;_blank&quot;&gt;https://github.com/googlesamples/android-architecture/tree/todo-mvp/&lt;/a&gt; &lt;br/&gt;效果图如下： &lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1220420/201805/1220420-20180517231835726-229962394.png&quot; alt=&quot;&quot; width=&quot;332&quot; height=&quot;623&quot;/&gt; &lt;br/&gt;项目的结构如下： &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://img-blog.csdn.net/2018051718561732?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlYmkwMDc=/font/5a6L5L2T/fontsize/400/I0JBQkFCMA/!50p&quot; alt=&quot;这里写图片描述&quot;/&gt; &lt;br/&gt;新建peresenter文件夹，GongAnPresenter.cs 如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GongAnPresenter
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; IGongAnView view;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; GongAnPresenter(IGongAnView view)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.view =&lt;span&gt; view;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; showResult(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; sitedomain)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; SearchGongAn.getGonganDetail(sitedomain);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (result != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; result.status == &lt;span&gt;200&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                view.getServiceGongAnSuccess(result.data);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (result == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 view.getServiceGonganFail(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 view.getServiceGonganFail(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;没有备案：status:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;result.status);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs cs has-numbering&quot;&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  新建Views文件夹 ，IGongAnView.cs 接口 如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IGongAnView
    {
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; getServiceGongAnSuccess(Data model);
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; getServiceGonganFail(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;  error);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新建Model文件夹，SearchGongAn.cs如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SearchGongAn
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;        &lt;span&gt;private&lt;/span&gt;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;  url= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.sojson.com/api/gongan/{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; System.Threading.Tasks.Task&amp;lt;GongAnModel&amp;gt; getGonganDetail(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; city)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Format(url, city));
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 request.Method = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 HttpWebResponse response =&lt;span&gt; (HttpWebResponse)request.GetResponse();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 Stream responseStream =&lt;span&gt; response.GetResponseStream();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 StreamReader streamReader = &lt;span&gt;new&lt;/span&gt; StreamReader(responseStream, Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; streamReader.ReadToEndAsync();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 GongAnModel model = JsonConvert.DeserializeObject&amp;lt;GongAnModel&amp;gt;&lt;span&gt;(result);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                streamReader.Close();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                responseStream.Close();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; model;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 Log.Info(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ex.ToString());
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs cs has-numbering&quot;&gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Mainactivity.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  [Activity(Label = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PeresenterForXamarinAndroid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, MainLauncher = &lt;span&gt;true&lt;/span&gt;, Icon = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@drawable/icon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity : Activity,IGongAnView,View.IOnClickListener
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        TextView txt_result;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        Button btn_search;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        EditText btn_sitedomain;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        GongAnPresenter presenter;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        ProgressDialog progressDialog;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnCreate(Bundle bundle)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnCreate(bundle);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            SetContentView(Resource.Layout.Main);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             txt_result = FindViewById&amp;lt;TextView&amp;gt;&lt;span&gt;(Resource.Id.txt_result);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             btn_search = FindViewById&amp;lt;Button&amp;gt;&lt;span&gt;(Resource.Id.btn_search);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             btn_sitedomain = FindViewById&amp;lt;EditText&amp;gt;&lt;span&gt;(Resource.Id.btn_sitedomain);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             presenter = &lt;span&gt;new&lt;/span&gt; Peresenter.GongAnPresenter(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             progressDialog = &lt;span&gt;new&lt;/span&gt; ProgressDialog(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             progressDialog.SetTitle(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;搜索公网备案&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             progressDialog.SetMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在搜索，请稍后.....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             btn_search.SetOnClickListener(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnClick(View v)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (v.Id ==&lt;span&gt; Resource.Id.btn_search)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; sitedomain =&lt;span&gt; btn_sitedomain.Text;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; pattern = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;^[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 Regex reg = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Regex(pattern);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(sitedomain))
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                     Toast.MakeText(&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入域名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ToastLength.Short).Show();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (reg.IsMatch(sitedomain))
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                    progressDialog.Show();
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                    presenter.showResult(sitedomain);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     Toast.MakeText(&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;域名错误，请重新输入&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ToastLength.Short).Show();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getServiceGongAnSuccess(Data model)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            progressDialog.Hide();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             txt_result.Text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;工信部更新日期：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + model.cdate.ToShortDateString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n公司地址：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + model.comaddress + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n公司名称：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + model.comname + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n网备案号:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + model.id + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n域名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + model.sitedomain + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n简称：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; model.sitename;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; getServiceGonganFail(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; error)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            progressDialog.Hide();
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             txt_result.Text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查询失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             Toast.MakeText(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,error,ToastLength.Short).Show();
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行。只要不断实践，丰富项目经验，架构模式在初学者前期并不是那么重要。android开发无外乎就三种架构MVC、MVP、MVVM。MVP模式简单易用非常容易上手，Presenter隔断了View和Model的联系，作为两者沟通的桥梁，在Activityhe fragment中你的代码就不会变得臃肿，杂乱了。 &lt;br/&gt;引用一句我非常喜欢的话：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;架构只是一种思维模式，不管是MVC、MVP还是MVVM，都只是一种思考问题的思维，其目的还是要解决变成过程中高内聚、低耦合、可维护、易测试。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 17 May 2018 15:21:00 +0000</pubDate>
<dc:creator>张林-布莱恩特</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangmumu/p/9053969.html</dc:identifier>
</item>
<item>
<title>java多线程及线程安全详解 - nianzhilian</title>
<link>http://www.cnblogs.com/nianzhilian/p/9034018.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nianzhilian/p/9034018.html</guid>
<description>&lt;h3&gt;为什么要使用多线程：&lt;/h3&gt;
&lt;p&gt;单线程只能干一件事  而多线程可以同时干好多事（将任务放到线程里执行  效率高）&lt;/p&gt;
&lt;p&gt;而所谓同时干并不是真正意义上的同时   只是（这里就叫CPU）cpu在每个线程中随机切换来执行 线程中要干的活&lt;/p&gt;
&lt;h4&gt;多线程编写：&lt;/h4&gt;
&lt;p&gt;1）第一种：（线程类）&lt;/p&gt;
&lt;p&gt;class Stu1 extends Thread{&lt;/p&gt;
&lt;p&gt;　　//重写 run方法　&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;调用：Stu1 su = new Stu1();&lt;/p&gt;
&lt;p&gt;su.start()//内部会自动调用run方法    把run方法放到线程上调用&lt;/p&gt;
&lt;p&gt;2）第二种：普通任务类（由于第一种类只能是单继承 就没法实现继承其他父类并且继承线程类 所以第一种方法扩展性比较差）&lt;/p&gt;
&lt;p&gt;直接创建线程对象    线程内干的事  放到一个自定义对象里面实现   （用到修饰设计模式）&lt;/p&gt;
&lt;h4&gt;底层代码&lt;/h4&gt;
&lt;p&gt;class Thread{&lt;/p&gt;
&lt;p&gt;private Runnable r&lt;/p&gt;
&lt;p&gt;public void Thread(Runnable r){ //利用有参构造将自定义对象传进来&lt;/p&gt;
&lt;p&gt;this.r = r;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public void start(){&lt;/p&gt;
&lt;p&gt;　　r.run();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;class Stu implements Runnable{}  通过实现接口   线程类底层start调用的run方法 实际就是我们自定义类中的run方法&lt;/p&gt;
&lt;p&gt;Thread th = new  Thread（new Stu（））  //直接创建线程对象&lt;/p&gt;
&lt;p&gt;th.start();&lt;/p&gt;
&lt;p&gt;我们用第二种方法创建多线程如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public static void main(String[] args) {
//              不同线程干同一件事
                SaleWindow sw = new SaleWindow();
                Thread t1 = new Thread(sw);
                Thread t2 = new Thread(sw);
                t1.setName(&quot;窗口A&quot;);
                t2.setName(&quot;窗口B&quot;);
                t1.start();
                t2.start();
        }
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class SaleWindow implements Runnable {
        private int ticketCount = 10;

        @Override
        public void run() {
                // TODO Auto-generated method stub
//              多个窗口卖票
                for(int i = 0;i&amp;lt;10;i++){
                        if(ticketCount&amp;gt;0){
                                //字符串拼接信息   变量+&quot;&quot;  就可以拼接成字符串
                                System.out.println(Thread.currentThread().getName()+&quot;卖出&quot;+ticketCount+&quot;张票&quot;);
                                ticketCount--;
                                try {
                                        Thread.sleep(500);
                                } catch (InterruptedException e) {
                                        // TODO Auto-generated catch block
//                                      e.printStackTrace();
                                }
                        }
                }
        }
        
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 最后结果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/795484/201805/795484-20180515000403538-1064270979.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从运行结果来看：同一张票卖给了二个人  这是在现实生活中不允许的 这样就会产生线程安全问题。&lt;/p&gt;
&lt;h3&gt;而产生线程安全问题的有三个要素必须同时满足才会产生线程安全：&lt;/h3&gt;
&lt;p&gt;1、必须有共享资源&lt;br/&gt;2、必须是多线程环境&lt;br/&gt;3、每个线程都适用了共享资源&lt;/p&gt;
&lt;p&gt;而上面的例子：票是共享资源、又是多线程环境、线程执行任务的时候又使用了共享资源 所以会产生线程安全&lt;/p&gt;
&lt;h3&gt;怎么解决线程安全？&lt;/h3&gt;
&lt;p&gt;解决线程安全其核心：就是将某一个线程中的任务给锁（同步锁）起来，这个时候JVM就不得不等到本任务里的代码执行完以后在去执行另外一个线程里的任务。&lt;/p&gt;
&lt;h4&gt;二种方法：&lt;/h4&gt;
&lt;p&gt;1、同步代码块：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class SaleWindow implements Runnable {
        private int ticketCount = 10;

        @Override
        public void run() {
                // TODO Auto-generated method stub
                // 多个窗口卖票
                for (int i = 0; i &amp;lt; 10; i++) {//可以随意设置锁
                        synchronized (this) {
                                if (ticketCount &amp;gt; 0) {
                                        // 字符串拼接信息 变量+&quot;&quot; 就可以拼接成字符串
                                        System.out.println(Thread.currentThread().getName() + &quot;卖出&quot;
                                                        + ticketCount + &quot;张票&quot;);
                                        ticketCount--;
                                        try {
                                                Thread.sleep(500);//每隔500毫秒 线程休眠 随后自己自动会唤醒（目的是为了调节线程速度）
                                        } catch (InterruptedException e) {
                                                // TODO Auto-generated catch block
                                                // e.printStackTrace();
                                        }
                                }
                        }
                }
        }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2、同步方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class SaleWindow implements Runnable {
        private int ticketCount = 10;
　　　　　//默认固定的锁对象this&lt;br/&gt;//将产生线程安全的代码封装到方法里并设置成同步方法
        public synchronized void syncB() {
                if (ticketCount &amp;gt; 0) {
                        // 字符串拼接信息 变量+&quot;&quot; 就可以拼接成字符串
                        System.out.println(Thread.currentThread().getName() + &quot;卖出&quot;
                                        + ticketCount + &quot;张票&quot;);
                        ticketCount--;
                        try {
                                Thread.sleep(500);
                        } catch (InterruptedException e) {
                                // TODO Auto-generated catch block
                                // e.printStackTrace();
                        }
                }
        }

        @Override
        public void run() {
                // TODO Auto-generated method stub
                // 多个窗口卖票
                for (int i = 0; i &amp;lt; 10; i++) {
                        syncB();
                }
        }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/795484/201805/795484-20180515001407511-2028596551.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后结果每个窗口不能卖同样的票解决了线程安全问题&lt;/p&gt;
&lt;h3&gt;线程之间的通信&lt;/h3&gt;
&lt;p&gt;（ps：线程之间的通信和线程安全无关联二者不是一回事）&lt;/p&gt;
&lt;h5&gt;怎样才能让二个线程之间进行通信？&lt;/h5&gt;
&lt;p&gt;线程之间是相互独立的互不联系 而真正意义上的通信是通过中间件（同步锁 必须是同一把锁）来达到线程之间通信的目的&lt;/p&gt;
&lt;p&gt;案例：二个线程来回交替输出一条数据（意思就是必须按照我说一句你说一句的这个规则走）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class BingB extends Thread {
        public void run(){
                for(int i = 0;i&amp;lt;5;i++){
                        System.out.println(&quot;冰冰美，如花丑&quot;);
                }
        }
}

class RuH extends Thread{
        public void run(){
                for(int i = 0;i&amp;lt;5;i++){
                        System.out.println(&quot;如花美，冰冰丑&quot;);
                }
        }
}

public class Test {
        public static void main(String[] args) {
                BingB bb = new BingB();
                RuH rh = new RuH();
                bb.start();
                rh.start();
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果图：此结果不是交替出现的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/795484/201805/795484-20180516235047803-321511706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;要想达到交替的目的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class MyLock{
        static Object o = new Object();
}

class BingB extends Thread {
        public void run(){
                for(int i = 0;i&amp;lt;5;i++){
                        //加锁（意思是必须等到本线程的任务代码执行完以后才去执行别的线程的代码）
                        synchronized (MyLock.o) {
                                System.out.println(&quot;冰冰美，如花丑&quot;);
                                MyLock.o.notify();//唤醒另一个线程（这里表示如花线程）
                                try {
                                        MyLock.o.wait();//暂时彻底休眠本线程（不会自动唤醒 需要手动唤醒）   同时解锁  阻塞线程 代码就不会往下继续走  jvm会切换到另外一个线程中去
                                } catch (InterruptedException e) {
                                        // TODO Auto-generated catch block
                                }
                        }
                }
        }
}

class RuH extends Thread{
        public void run(){
                for(int i = 0;i&amp;lt;5;i++){
                        synchronized (MyLock.o) {
                                System.out.println(&quot;如花美，冰冰丑&quot;);
                                MyLock.o.notify();//唤醒另一个线程（这里表示如冰冰程）
                                try {
                                        MyLock.o.wait();//暂时彻底休眠本线程   同时解锁  阻塞线程
                                } catch (InterruptedException e) {
                                        // TODO Auto-generated catch block
                                        e.printStackTrace();
                                }
                        }
                }
        }
}

public class Test {
        public static void main(String[] args) {
                BingB bb = new BingB();
                RuH rh = new RuH();
                bb.start();
                rh.start();
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/795484/201805/795484-20180517000324121-1755275237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;多线程状态流程图：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/795484/201805/795484-20180517164811105-1391393323.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;写到这里有关线程的基本讲解完毕，如果内容有我自己理解错误的地方还请各位大神指教，小弟不吝求教！&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 15:13:00 +0000</pubDate>
<dc:creator>nianzhilian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nianzhilian/p/9034018.html</dc:identifier>
</item>
<item>
<title>拦截器的使用 - lichking2017</title>
<link>http://www.cnblogs.com/lichking2017/p/9053625.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lichking2017/p/9053625.html</guid>
<description>&lt;p&gt;穿越：&lt;a href=&quot;http://www.cnblogs.com/lichking2017/p/9016033.html&quot; target=&quot;_blank&quot;&gt;从0开始，构建前后端分离应用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;拦截器是web项目不可或缺的组成部分，一般使用拦截器实现以下功能&lt;/p&gt;
&lt;p&gt;1、登录session验证&lt;/p&gt;
&lt;p&gt;　　防止浏览器端绕过登录，直接进入到应用&lt;/p&gt;
&lt;p&gt;　　或者session超时后，返回到登录页面&lt;/p&gt;
&lt;p&gt;2、记录系统日志&lt;/p&gt;
&lt;p&gt;　　一个完善的应用系统，应该具备监控功能，通过完善的系统日志记录系统运行过程中都经历了什么，当发生错误的时候及时通知管理人员，将损失降到最低。同时通过系统日志的监控，也能监控每次访问的响应时长，作为性能调优的参考&lt;/p&gt;
&lt;p&gt;3、对请求进行前置或后置的操作&lt;/p&gt;
&lt;p&gt;　　比如对于服务端返回的异常信息，可以通过拦截器统一的进行后处理，使其格式统一&lt;/p&gt;

&lt;p&gt;有两种方式&lt;/p&gt;
&lt;p&gt;1、基于Spring AOP 的切面方式&lt;/p&gt;
&lt;p&gt;2、基于Servlet规范的拦截器&lt;/p&gt;


&lt;p&gt;下面分享一下拦截器，在我的项目中是如何使用的。&lt;/p&gt;
&lt;p&gt;我分别用基于Spring AOP的拦截器实现了&lt;span&gt;登录验证及系统日志&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用基于Servlet规范的拦截器实现了跨域请求&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;基于Spring AOP的拦截器-登录验证&lt;/h2&gt;
&lt;h3&gt;实现过程&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;1、pom中添加依赖&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.aspectj&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;aspectjweaver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.9.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、开启Spring对@AspectJ的支持&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在spring-mybatis.xml配置文件中，加入下面的内容&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;!--开启Spring对@AspectJ的支持--&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;&lt;span&gt;aop&lt;span&gt;:aspectj-autoproxy/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;当然，要先在xml文件头部加上aop的命名空间（红色字体部分）&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
       &lt;span&gt;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       &lt;span&gt;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&lt;/span&gt;
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;3、新建拦截器类 LoginInterceptor&lt;br/&gt;4、在类上添加注解&lt;br/&gt;     @Component ：将类的实例纳入到Spring 容器中管理&lt;br/&gt;     @Aspect ：声明是基于@ASpectJ的注解实现&lt;br/&gt;5、新建通知方法&lt;br/&gt;    当应用中的方法处于切点表达式声明的范围内的时候，通知将被执行&lt;br/&gt;6、使用@Around、@Before、@After来生命通知的类型是环绕通知、前置通知、后置通知&lt;br/&gt;7、定义切点表达式&lt;/p&gt;
&lt;h3&gt;具体实现&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3c683d27-4342-4117-aed5-ffc35f118d99&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3c683d27-4342-4117-aed5-ffc35f118d99&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3c683d27-4342-4117-aed5-ffc35f118d99&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.wt.common.security.interceptor;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.annotations.IgnoreAuth;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.result.HttpResultEntity;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.result.HttpResultHandle;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.utils.ServletNativeObjectUtil;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.security.handler.HttpSessionHandler;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.security.model.SysUser;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.ProceedingJoinPoint;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.annotation.Around;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.annotation.Aspect;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.reflect.MethodSignature;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.core.annotation.Order;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt; * @ProjectName: syInfo
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt; * @Package: com.wt.common.core.interceptor
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt; * @Description:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt; * @Author: lichking2017@aliyun.com
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt; * @CreateDate: 2018/5/16 上午8:20
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt; * @Version: v1.0
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; @Order(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;@Aspect
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginInterceptor {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Logger logger = LoggerFactory.getLogger(LoginInterceptor.class);&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     @Around(&quot;@within(org.springframework.web.bind.annotation.RestController)&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; HttpResultEntity loginCheck(ProceedingJoinPoint pjp) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         HttpServletRequest request =&lt;span&gt; ServletNativeObjectUtil.getRequest();
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         SysUser loginUser =&lt;span&gt; (SysUser) request.getSession().getAttribute(HttpSessionHandler.Items.LOGINUSER.name());
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; MethodSignature methodSignature =&lt;span&gt; (MethodSignature) pjp.getSignature();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; Method method =&lt;span&gt; methodSignature.getMethod();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; ignoreAuth = method.isAnnotationPresent(IgnoreAuth.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;null&lt;/span&gt; == loginUser)&amp;amp;&amp;amp;!&lt;span&gt;ignoreAuth) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpResultEntity(HttpResultHandle.HttpResultEnum.NOTLOG);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (HttpResultEntity) pjp.proceed();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;一些说明&lt;/h3&gt;
&lt;p&gt;在上述过程中需要理解一下的有以下两点&lt;br/&gt;1、切点表达式&lt;br/&gt;@within(org.springframework.web.bind.annotation.RestController)&lt;br/&gt;它的意思代表了，通知的范围是只要有类添加了@RestController的注解，那么类中的方法，只要被调用，都会执行相应的通知&lt;br/&gt;2、为什么这么配置呢？&lt;br/&gt;为什么这么配置：因为我的项目是基于SpringMVC框架的，并且使用的请求都是基于Restful规范的。所以所有的Action都会配置@RestController这个注解，也就是说，所有的后台请求，&lt;br/&gt;3、上述配置要完成的功能是什么？&lt;br/&gt;如果用户没有登录，那么请求就会被打回，并在页面上给与用户提示&lt;br/&gt;4、对于@Around环绕通知的执行过程是什么样的？&lt;br/&gt;正常流：浏览器发起请求-》通知被执行-》在通知的内部，根据业务逻辑判断，该请求是否合法，也就是前置的一些处理，如果合法调用pjp.proceed()方法-》进入controller的方法执行，执行完成后-》返回到通知内部，继续执行pjp.proceed()后面的代码-》返回客户端&lt;br/&gt;异常流：浏览器发起请求-》通知被执行-》在通知的内部，根据业务逻辑判断，该请求是否合法，也就是前置的一些处理，如果不合法，直接return-》浏览器显示处理结果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://doc.javanb.com/spring-framework-reference-zh-2-0-5/ch06s02.html&quot; target=&quot;_blank&quot;&gt;关于@AspectJ的相关知识就不再这里介绍了，感兴趣的朋友可以查看：@Aspect注解教程&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;基于Spring AOP的拦截器-系统日志&lt;/h2&gt;
&lt;h3&gt;具体实现&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44.5&quot;&gt;&lt;img id=&quot;code_img_closed_1ce3dd5e-8eba-4836-8f6c-e43a1e8e59dd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1ce3dd5e-8eba-4836-8f6c-e43a1e8e59dd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1ce3dd5e-8eba-4836-8f6c-e43a1e8e59dd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.wt.common.security.interceptor;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.gson.Gson;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.exception.BaseErrorException;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.exception.BaseLogicException;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.result.HttpResultEntity;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.result.HttpResultHandle;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.core.utils.ServletNativeObjectUtil;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.security.handler.HttpSessionHandler;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.security.model.SysUser;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.security.model.SyslogPerformance;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.wt.common.security.service.SyslogPerformanceService;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang3.StringUtils;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.ProceedingJoinPoint;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.annotation.Around;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aspectj.lang.annotation.Aspect;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.core.annotation.Order;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; 
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt; * @ProjectName: syInfo
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt; * @Package: com.wt.common.core.interceptor
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt; * @Description:
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt; * @Author: lichking2017@aliyun.com
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt; * @CreateDate: 2018/5/16 下午4:14
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt; * @Version: v1.0
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt; 
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;@Aspect
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; @Order(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogInterceptor {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;     Logger logger = LoggerFactory.getLogger(LoginInterceptor.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SyslogPerformanceService syslogPerformanceService;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;     @Around(&quot;@within(org.springframework.web.bind.annotation.RestController)&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HttpResultEntity logRecord(ProceedingJoinPoint pjp) {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         Gson gson = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Gson();
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         HttpServletRequest request =&lt;span&gt; ServletNativeObjectUtil.getRequest();
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         SyslogPerformance syslogPerformance = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setLog(request);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        syslogPerformance.setParameters(gson.toJson(pjp.getArgs()));
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;long&lt;/span&gt; startTime = System.currentTimeMillis(), endTime = 0, consume = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;         String requestInfo = String.format(&quot;⭐️{User-Agent:[%s],Protocol:[%s],Remote Addr:[%s],Method:[%s],uri:[%s],Cookie:[%s],operator:[%s],parameters:[%s]}⭐️&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;                 request.getHeader(&quot;User-Agent&quot;&lt;span&gt;), request.getProtocol(), request.getRemoteAddr(),
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                 request.getMethod(), request.getRequestURI(), request.getHeader(&quot;Cookie&quot;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 &quot;ceshi&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;                gson.toJson(pjp.getArgs()));
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             HttpResultEntity result =&lt;span&gt; (HttpResultEntity) pjp.proceed();
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             endTime =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            logger.info(requestInfo);
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable throwable) {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             endTime =&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (throwable &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BaseLogicException) {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                 String errorMessage =&lt;span&gt; ((BaseLogicException) throwable).getExceptionBody().getMessage();
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                 String errorCode =&lt;span&gt; ((BaseLogicException) throwable).getExceptionBody().getMessage();
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;                logger.error(StringUtils.join(requestInfo, errorMessage), throwable);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; HttpResultHandle.getErrorResult(errorCode, errorMessage);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (throwable &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BaseErrorException) {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                logger.error(StringUtils.join(requestInfo, throwable.getMessage()), throwable);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; HttpResultHandle.getErrorResult();
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;            logger.error(StringUtils.join(requestInfo, throwable.getMessage()), throwable);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; HttpResultHandle.getErrorResult();
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;             consume = endTime -&lt;span&gt; startTime;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;            syslogPerformance.setTimeConsuming(String.valueOf(consume));
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            syslogPerformanceService.save(syslogPerformance);
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SyslogPerformance setLog(HttpServletRequest request) {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         SysUser currentUser =&lt;span&gt; (SysUser) request.getSession().getAttribute(HttpSessionHandler.Items.LOGINUSER.name());
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         SyslogPerformance syslogPerformance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SyslogPerformance();
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;        syslogPerformance
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;                .setRemoteHost(request.getRemoteHost())
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                .setRemotePort(request.getRemotePort())
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;                .setRequestType(request.getMethod())
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;                .setRequestURI(request.getRequestURI());
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(currentUser!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;            syslogPerformance.setOperatorId(currentUser.getUserId()).setOperatorName(currentUser.getUserName());
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; syslogPerformance;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;一些说明&lt;/h3&gt;
&lt;p&gt;1、如果后台的请求执行正常，那么放行并记录日志&lt;/p&gt;
&lt;p&gt;2、如果出现错误，同一处理结果，并返回结果到浏览器&lt;/p&gt;
&lt;p&gt;3、无论处理过程是否异常，都会记录到数据库表当中&lt;/p&gt;
&lt;h3&gt;效果&lt;/h3&gt;
&lt;p&gt;1、功能如下图，每当一次请求被执行，在日志表中都会进行记录，包括时长，及时间。可以再扩展一下，加上操作人&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1394048/201805/1394048-20180517230457540-1461658512.png&quot; alt=&quot;&quot; width=&quot;946&quot; height=&quot;411&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;基于Servlet规范的拦截器-跨域请求&lt;/h2&gt;
&lt;h3&gt;实现过程&lt;/h3&gt;
&lt;p&gt;1、新建拦截器类CrossDomainInterceptor，并继承自HandlerInterceptor&lt;/p&gt;
&lt;p&gt;2、对拦截器进行配置，在spring配置文件中，添加下面的内容&lt;/p&gt;
&lt;div readability=&quot;29&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:mapping &lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;=&quot;/**&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:exclude-mapping &lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;=&quot;/index.html&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.wt.common.core.interceptor.CrossDomainInterceptor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、重写以下方法&lt;/p&gt;
&lt;p&gt;    preHandle：在请求调用之前调用&lt;/p&gt;
&lt;p&gt;    postHandle：在请求执行完成，且返回视图渲染之前调用&lt;/p&gt;
&lt;p&gt;    afterCompletion：在请求执行完成，并且完成视图渲染之后执行&lt;/p&gt;
&lt;h3&gt;具体实现&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.wt.common.core.interceptor;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.core.annotation.Order;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.HandlerInterceptor;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * @ProjectName: syInfo
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * @Package: com.wt.common.core.interceptor
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; * @Description:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * @Author: lichking2017@aliyun.com
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * @CreateDate: 2018/5/15 下午11:21
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt; * @Version: v1.0
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; @Order(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CrossDomainInterceptor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HandlerInterceptor {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     Logger logger = LoggerFactory.getLogger(CrossDomainInterceptor.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With, accept, content-type, xxxx&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, PATCH&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;一些说明&lt;/h3&gt;
&lt;p&gt;1、这个比较简单，没什么太多说的地方，注意方法的返回值即可，根据项目的业务逻辑，如果请求通行，那么就return true，否则返回false。&lt;br/&gt;2、如果有多个拦截器，执行顺序会按照拦截器在spring配置文件中声明的先后顺序执行，执行过程如下&lt;br/&gt;    如果有A、B两个拦截器，A声明在先，B声明在后，执行顺序为&lt;br/&gt;    A.preHandle-》B.preHandle-》B.postHandle-》A.postHandle&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Thu, 17 May 2018 15:07:00 +0000</pubDate>
<dc:creator>lichking2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lichking2017/p/9053625.html</dc:identifier>
</item>
<item>
<title>react-入门 - wyao</title>
<link>http://www.cnblogs.com/nordon-wang/p/9053869.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nordon-wang/p/9053869.html</guid>
<description>&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://doc.react-china.org/&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;特点&lt;/li&gt;
&lt;li&gt;声明式编程&lt;/li&gt;
&lt;li&gt;组件化&lt;/li&gt;
&lt;li&gt;支持客户端和服务端渲染&lt;/li&gt;
&lt;li&gt;高效
&lt;ul&gt;&lt;li&gt;虚拟DOM，不总是直接操作DOM，只是减少DOM的操作,操作虚拟DOM不会对页面进行重绘，当渲染的时候，才会进行渲染&lt;/li&gt;
&lt;li&gt;DOM Diff 算法，最小化页面重绘，就是当页面变化时，通过计算那部分需要重绘，只重绘当前部分，减少页面的重绘区域&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;单向数据流&lt;/li&gt;
&lt;li&gt;js文件&lt;/li&gt;
&lt;li&gt;react.js：react的核心库&lt;/li&gt;
&lt;li&gt;react-dom.js：提供操作DOM的react扩展&lt;/li&gt;
&lt;li&gt;babel.js：解析jsx语法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;script src=&quot;js/react&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;development&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;js/react-dom.development.js&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;script src=&quot;js/babel&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;min&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/babel&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 创建虚拟DOM元素对象&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; vDom &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;react hello&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        // 将虚拟DOM渲染到页面真实DOM容器中&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        ReactDOM.render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;vDom,document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/script&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;react提供了创建虚拟DOM的方法&lt;/li&gt;
&lt;li&gt;虚拟DOM对象最终都会被react转换为真实的DOM&lt;/li&gt;
&lt;li&gt;编码时，只需要操作react的虚拟DOM相关数据，react会转换为真实DOM变化而更新界面&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// react直接操作和JSX操作对比&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; msg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'MSG content'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; msgId &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'App'&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 创建虚拟DOM&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// const VDom1 = React.createElement('标签名',{id:'xxx'},'内容')&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; vDom1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;msgId&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toLowerCase&lt;/span&gt;()
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toLowerCase&lt;/span&gt;())

&lt;span class=&quot;co&quot;&gt;// 渲染虚拟DOM&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(vDom1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app1'&lt;/span&gt;))
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;script type=&quot;text/babel&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 创建虚拟DOM &lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; vDom2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h2 id&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;msgId&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toUpperCase&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;msg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toLowerCase&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h2&amp;gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// 渲染虚拟DOM &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;ReactDOM.render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;vDom2, document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'app2'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/script&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;动态渲染一个列表&lt;/li&gt;
&lt;li&gt;使用数组的Map函数返回所需要的列表内容&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; arrs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;444&lt;/span&gt;]
&lt;span class=&quot;co&quot;&gt;// 创建虚拟DOM &lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; ul &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;arrs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;index) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li key&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;index&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;name&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/ul&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
)

&lt;span class=&quot;co&quot;&gt;// 渲染虚拟DOM &lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(ul&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app1'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;工厂函数创建组件&lt;/li&gt;
&lt;li&gt;使用工厂函数的效率比使用class高，因为工厂函数中不需要创建一系列的对象之类的&lt;/li&gt;
&lt;li&gt;当组件有状态(state)的时候就不适合使用了&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 工厂函数创建组件&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;MyCom&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;工厂函数创建组件&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h2&amp;gt;            &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;// 渲染组件标签&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;// &amp;lt;MyCom /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;必须这么写
&lt;span class=&quot;co&quot;&gt;// &amp;lt;MyCom&amp;gt;这么写是错误的&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;MyCom /&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;class创建组件&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// class定义组件&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MyCom2 &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;class定义组件&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// 渲染组件标签&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;// &amp;lt;MyCom2 /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;必须这么写
&lt;span class=&quot;co&quot;&gt;// &amp;lt;MyCom2&amp;gt;这么写是错误的&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;MyCom2 /&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;state&quot;&gt;state&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;stateProp1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;value1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;stateProp2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;value2
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;读取某个状态值&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;statePropertyName&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;更新状态:组件重新渲染&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;stateProp1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;newValue1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;stateProp2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;newValue2
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;案例：点击切换内容&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//定义组件&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Like &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)
        &lt;span class=&quot;co&quot;&gt;//初始化状态state&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;isShow&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;co&quot;&gt;//将新增方法中的this强制绑定为组件对象&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;handleClick&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;// 新添加的方法:内置的this默认不是组件对象，是一个undefined&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;handleClick&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//获取原始状态并取反&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; isShow &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isShow&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 设置状态&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;isShow&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;// React.Component中本身就具有render函数，在class中只是重写组件类的方法render，所以这里的this指向没有问题&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//获取状态&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// const isShow = this.state.isShow&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;isShow&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//onClick是react的，区分原生的onclick&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// this.handleClick.bind(this)也可以，但是这种效率比较低，因为每次render都会执行一次bind进行绑定，而在constructor中只会在初始化的时候绑定一次&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h1 onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;gt;{&lt;/span&gt;isShow &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'我是帅哥'&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'帅哥是我'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;//渲染组件&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;ReactDOM.render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;Like/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app'&lt;/span&gt;))
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;props&quot;&gt;props&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;案例：定义一个显示个人信息的组件&lt;/li&gt;
&lt;li&gt;姓名必须指定&lt;/li&gt;
&lt;li&gt;性别默认为男&lt;/li&gt;
&lt;li&gt;年龄默认为18&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//创建组件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/* function Person(props) {&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    return (&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            &amp;lt;li&amp;gt;姓名:{props.name}&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            &amp;lt;li&amp;gt;性别:{props.sex}&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            &amp;lt;li&amp;gt;年龄:{props.age}&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        &amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    )&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;} */&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// class创建&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;姓名&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;li&amp;gt;性别:{this.props.sex}&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;年龄&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;/ul&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        )
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        
&lt;span class=&quot;co&quot;&gt;//属性默认值&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defaultProps&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'man'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;//属性的类型和必填&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;PropTypes&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;PropTypes&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; p1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'nordon'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'man'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 渲染组件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// ReactDOM.render(&amp;lt;Person name={p1.name} sex={p1.sex} age={p1.age} /&amp;gt;,document.getElementById('app'))&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Person &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;...&lt;span class=&quot;at&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;,document.getElementById&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;const p2 = {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    name:'lisan'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}   &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;ReactDOM.render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;Person name={p2.name}  age=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{19}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app2'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;refs与事件处理&quot;&gt;refs与事件处理&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;案例：获取input中的值&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//定义组件&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MyInput &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;handleClick&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleBlur&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;handleBlur&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;handleClick&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; input1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;refs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;inputValue&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;input1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;newInput&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;handleBlur&lt;/span&gt;(event)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt; ()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt; ref&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;inputValue&quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;input type=&quot;text&quot; ref={inputValue =&amp;gt; this.newInput = inputValue } /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class=&quot;op&quot;&gt;;&amp;amp;&lt;/span&gt;nbsp&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;获取值&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;input type=&quot;text&quot; placeholder=&quot;失去焦点获取值&quot; onBlur={this.handleBlur} /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;//渲染组件&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;ReactDOM.render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;MyInput/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;&lt;li&gt;简单的tdolist案例&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 定义组件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 组件状态的更改必须在当前组件中进行&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; App &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; 

    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)

        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'111'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'222'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'333'&lt;/span&gt;]
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addTodo&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;addTodo&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;addTodo&lt;/span&gt;(todo)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;todos&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;todos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;unshift&lt;/span&gt;(todo)
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            todos
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;todos&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt; is todolist demo&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;Add count={todos.length} addTodo={this.addTodo} /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;List todos&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;todos&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        ) 
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Add &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)

        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handleAdd&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;handleAdd&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;handleAdd&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// console.log(this.refs.content.value);&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// &amp;lt;input  type=&quot;text&quot; ref=&quot;content&quot; /&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// console.log(this.newTodos.value);&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;newTodos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;data)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;newTodos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addTodo&lt;/span&gt;(data)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;input  type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt; ref&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;inputValue &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;newTodos&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; inputValue&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;button onClick={this.handleAdd}&amp;gt;按钮#{this.props.count &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; 1}&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;Add.propTypes = {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    count:PropTypes.number.isRequired,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    addTodo:PropTypes.func.isRequired&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;class List extends React.Component{&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;    render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        let {todos} = this.props&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        return &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            {todos.map&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;item,index&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; &amp;lt;li key={index}&amp;gt;{item}&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        )
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
}
&lt;span class=&quot;co&quot;&gt;// name:PropTypes.string.isRequired,&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;List&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;PropTypes&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;array&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isRequired&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 渲染组件&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;App/&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'app'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 17 May 2018 14:58:00 +0000</pubDate>
<dc:creator>wyao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nordon-wang/p/9053869.html</dc:identifier>
</item>
<item>
<title>好代码是管出来的——使用Git来管理源代码 - 7m鱼</title>
<link>http://www.cnblogs.com/selimsong/p/9051137.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/selimsong/p/9051137.html</guid>
<description>&lt;p&gt;　　软件开发过程中一个重要的产出就是代码，软件的编码过程一般是由一个团队共同完成，它是一个并行活动，为了保证代码在多人开发中能够顺利完成，我们需要使用代码版本控制工具来对代码进行统一存储，并追踪每一份代码的历史以便于对代码的更改进行追溯，另外一些版本控制工具还提供了冲突合并等高级功能来协调多人对同一代码文件修改。所以版本控制工具可以看做整个编码工作的基础，如果没有版本控制来统一代码库，那么对于复杂且参与人数较多的项目是难以完成的，同时如果没有统一的代码库基础，那么如持续集成、发布等工作将无法开展。&lt;/p&gt;
&lt;p&gt;　　本文将从以下几个方面介绍版本控制工具及Git的使用方法：&lt;/p&gt;
&lt;h2&gt;常用的版本控制工具简介&lt;/h2&gt;
&lt;p&gt;　　CVS：&lt;/p&gt;
&lt;p&gt;　　　　CVS（Concurrent Versions System）是一个开源的版本控制系统，基于C/S模式，CVS将代码存储在服务器上，通过客户端来获取、提交代码及其它操作。&lt;br/&gt;　　SVN：&lt;br/&gt;　　　　SVN(Subversion)和CVS一样是一个C/S模式的开源版本控制系统。&lt;br/&gt;　　TFS/VSTS：&lt;br/&gt;　　　　TFS(Team Foundation Server)/VSTS(Visual Studio Team Services)是微软推出的针对团队协作的软件开发工具，版本控制只是其中一个功能，除此之外还提供敏捷开发支持、持续集成等高级功能，TFS和VSTS功能相同，VSTS可以看作是云版本的TFS。TFS按照服务器来授权，VSTS安装账户来授权，另外VSTS提供了免费试用版本(注：VSTS支持Git作为版本控制工具)。&lt;br/&gt;　　Git：&lt;br/&gt;　　　　Git是一个分布式的版本控制工具，相对于其它版本控制工具来说，它有一些特有的性质如：分布式/去中心化(每个客户端保存了完整的代码仓库)，强大的分支能力，速度非常快(因为代码库在本地基本是本地操作)。因为本身的特性所以Git非常适合开源项目的代码管理，所以使用非常广泛。&lt;/p&gt;
&lt;h2&gt;使用Git来管理源代码&lt;/h2&gt;
&lt;h3&gt;Git简介&lt;/h3&gt;
&lt;p&gt;　　Git是一个&lt;span&gt;基于文件快照&lt;/span&gt;&lt;span&gt;的分布式版本控制工具&lt;/span&gt;，对于文件快照来说它体现在当提交更新时，它会对所有文件制作一个快照，在快照中对于&lt;span&gt;没变的文件以链接的方式指向之前存储的文件&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517201249137-2141416759.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图中每一个Version都是一个包含所有文件的快照，其中虚线框代表的是未改变的文件，通过链接指向前面的文件。&lt;br/&gt;　　而分布式可以理解为去中心化，没有特定服务器，&lt;span&gt;每一个节点都拥有所有的内容&lt;/span&gt;，而每一台安装了Git的计算机就可以看作一个节点，所以&lt;span&gt;Git几乎所有的操作都是在本地执行&lt;/span&gt;的（可以在本地创建仓库、添加/修改/提交文件等等）。&lt;br/&gt;Git中对于文件有三个重要的工作区：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据仓库：保存了所有Git提交的状态为Commited的文件，相当于集中式版本管理工具中服务器管理的文件数据库，数据仓库文件位于.git目录下&lt;/li&gt;
&lt;li&gt;工作目录：工作目录就是用于开发的区域，工作目录的内容从数据仓库中检出指定版本进行修改，修改完成后可将修改内容提交到暂存区域。&lt;/li&gt;
&lt;li&gt;暂存区域：暂存区域保存了工作区域提交的文件，“暂存”的意思就是只是对用户修改后需要提交到数据仓库的文件进行暂存，最后可一次性将暂存的内容提交到数据仓库。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　它们的工作流程如下(&lt;strong&gt;将它们看作普通的文件目录，它们的操作看成目录间文件的复制操作更容易理解Git的工作原理，其中git仓库比较特殊会保存每一次复制(提交)的内容，而其它两个目录相同内容会被覆盖&lt;/strong&gt;)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517201851345-252195925.png&quot; alt=&quot;&quot;/&gt;　　&lt;/p&gt;
&lt;h3&gt;安装Git&lt;/h3&gt;
&lt;p&gt;　　说到Git有人可能会有疑惑，为什么Git可以在Visual Studio中使用，而GitHub也提供了自己的客户端，但是像国内也有码云(gitee)这样的托管平台，那么Git这个工具到底是怎样的？要如何使用？&lt;br/&gt;　　Git它有多种表现形式，其一是&lt;span&gt;原生的命令行工具&lt;/span&gt;，另外其它工具如VS中的、GitHub的客户端实际上都是&lt;span&gt;对命令的封装以简化用户操作的GUI工具&lt;/span&gt;，换句话说Git的工具无论怎么变，它的核心都是原生的命令行工具，同时也说明了只要有命令行工具那么就可以使用如GitHub、gitee等不同的基于Git的代码托管平台。&lt;br/&gt;　　在Windows下安装git命令行工具(注：Windows下的Git项目是一个独立于Git的项目，好像由微软维护)：&lt;br/&gt;　　下载地址：&lt;a href=&quot;https://git-scm.com/download/win&quot; target=&quot;_blank&quot;&gt;https://git-scm.com/download/win&lt;/a&gt;&lt;br/&gt;　　安装Git：&lt;br/&gt;　　选择组件：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202153492-1614220915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注：如果勾选了GitBash Here及Git GUI Here，那么在window的资源管理器中可以通过右键在当前目录打开GitBash(Git专用的命令执行工具，类似cmd/powershell，同时也可以将git的cmd目录配置到环境变量中用Windows的命令行工具执行git命令)或新版本中内置的简单GUI程序：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202222847-1126296137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　安装运行结果：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202330520-1010257834.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　左为Git Bash右为Windows cmd工具。&lt;br/&gt;　　&lt;span&gt;注：由于新版本VS会安装内置的Git工具，如果出现一下信息，可检查是否存在路径如“Microsoft Visual Studio 14.0\Web\External\git”的环境变量，删除即可：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202405900-866420430.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;创建一个本地仓库&lt;/h3&gt;
&lt;p&gt;　　本文使用基于.Net Core的My Blog应用程序代码为例进行演示，My Blog的目录结构如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202504048-1243617894.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　src目录中包含所有代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202525569-1505578694.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1. 在My Blog的根目录下打开Git Bash，使用git init创建一个本地仓库：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202552312-1027500370.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　同时该目录下将生成一个.git隐藏目录。&lt;br/&gt;　　2. 为该仓库配置用户信息，在提交代码时将使用该用户信息进行提交：&lt;br/&gt;　　git config user.name &quot;Selim&quot;&lt;br/&gt;　　git config user.email &quot;yqszt@qq.com&quot;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202634405-1080140603.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注：此处用户信息仅对当前仓库有效，如果要配置全局用户信息需添加--global选项：&lt;br/&gt;　　git config &lt;span&gt;--global&lt;/span&gt; user.name &quot;Selim&quot;&lt;br/&gt;　　git config &lt;span&gt;--global&lt;/span&gt; user.email &quot;yqszt@qq.com&quot;&lt;/p&gt;
&lt;p&gt;　　3. 最后为该仓库添加忽略文件配置(仅管理代码，如编译结果等文件应该进行过滤)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202709660-1794221899.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　文件内容来源：&lt;a href=&quot;https://github.com/github/gitignore/blob/master/VisualStudio.gitignore&quot; target=&quot;_blank&quot;&gt;https://github.com/github/gitignore/blob/master/VisualStudio.gitignore&lt;/a&gt;&lt;br/&gt;　　注：windows无法直接创建.gitignore文件，可以用编辑器另存为改变文件名，另外gitignore文件的格式可参考文档：&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot; target=&quot;_blank&quot;&gt;https://git-scm.com/docs/gitignore&lt;/a&gt;。&lt;br/&gt;　　&lt;/p&gt;
&lt;p&gt;　　4. 将所有文件添加到暂存区：(git add --a)&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202824247-595099767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注：LF是Unix下的换行符CRLF是Windows下的换行符，默认git中使用Unix换行符，可以通过git config –global core.autocrlf false 禁用自动转换 。&lt;/span&gt;&lt;br/&gt;　　5. 查看状态：(git status)&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202856576-1081236826.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到所有必须的文件都已经被添加到了暂存区。&lt;br/&gt;　　6. 将暂存区代码提交到仓库：(git commit -m &quot;create a repository&quot;)&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517202952082-197740685.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　7. 查看日志：(git log)&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203105596-2086037664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　8. 使用VS2017打开该解决方案后，团队资源管理器中将会自动识别这个本地的git仓库：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203121107-768018435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Git对仓库的常用操作&lt;/h2&gt;
&lt;p&gt;　　前面已经完成了代码仓库的创建，那么Git有哪些常用操作呢？&lt;/p&gt;
&lt;h3&gt;文件的跟踪、修改、提交&lt;/h3&gt;
&lt;p&gt;　　将新的文件添加到git中管理涉及到的相关操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;跟踪新文件：(git add 文件名 或 git add -a 后者添加除被忽略以外的所有文件)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203303450-1858183245.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;提交文件：(git commit -m &quot;提交信息&quot;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203406095-1379280699.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;文件修改：(当已经提交的文件再次被修改时，如果要再次提交该文件仍然需要使用git add命令，或者使用git commit -a来跳过暂存区进行提交。注：git commit -a只能提交已经被git管理的修改文件)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203440383-1015695093.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　跳过暂存区提交：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203524596-1626855525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;手动删除工作区文件(即直接删除目录下文件)：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203620541-706642974.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;从git中删除文件：(git rm 1.md 或 git rm 1.md -force强制删除)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203733393-2118789472.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;文件的比较&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;比较修改内容：(git diff)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203808306-1594989005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;比较暂存区的修改内容：(git diff --cached 或 git diff --staged)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203840059-1760697581.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注：需要保证暂存区有内容才会有结果。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用内置vimdiff比较器查看修改内容：(git difftool)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517203917303-1609446095.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　windows上可以使用winmerge来替换默认的比较/合并工具：&lt;br/&gt;　　winmerge下载地址：&lt;a href=&quot;http://winmerge.org/&quot; target=&quot;_blank&quot;&gt;http://winmerge.org/&lt;/a&gt;&lt;br/&gt;　　配置方法参考：&lt;a href=&quot;https://blog.csdn.net/guoxinian/article/details/52297804&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/guoxinian/article/details/52297804&lt;/a&gt;&lt;br/&gt;　　　　　　　　　&lt;a href=&quot;https://stackoverflow.com/questions/1881594/use-winmerge-inside-of-git-to-file-diff&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/1881594/use-winmerge-inside-of-git-to-file-diff&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;文件状态及历史查看&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;查看状态：(git status)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204028996-1583403329.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;查看提交历史：(git log)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204050316-86008658.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;查看状态概要：(git status -s)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204114690-1126129843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　状态由2位字符构成，第一位代表暂存区状态有(添加A、修改M）第二位代表工作区状态(修改M)，另外??代表git未跟踪的文件。&lt;/p&gt;
&lt;h3&gt;操作的撤销&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;撤销工作区的修改：(git checkout -- README.md)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204206991-1988759898.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;撤销暂存区的文件：( git reset HEAD README.md)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204228327-1581390543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;提交补充(多次提交合并为一个后续提交信息会覆盖之前的)：(git commit --amend)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204247319-796613249.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图对文件READ.md进行了2次修改和提交，但是日志中只会看到最后一次提交的信息：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204438398-1180248768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;标签&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;打标签：(git tag -a v0.1 -m &quot;version 0.1&quot;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204511428-1230164062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对提交历史打标签：(git tag -a v0.01 -m &quot;created repository&quot;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204608635-2027380970.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;推送标签到远程服务器：(git push origin v0.1 注：需要有远程仓库)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204627760-841602580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　GitHub上的标签：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204838220-1127084471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;检出标签代码：(git checkout -b version0 v0.01 注：需要有远程仓库)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517204949765-93243123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注：该命令创建了一个新的分支version0，并获取了v0.01tag的代码，改代码是版本库最初的版本。&lt;/p&gt;
&lt;h3&gt;别名&lt;/h3&gt;
&lt;p&gt;　　git中可以设置命令别名，以简化命令：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517205112757-1185292594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图的别名设置是将checkout等命令简化为co、br、ci、st。&lt;/p&gt;
&lt;p&gt;　　更多命令和使用方法请参考：&lt;br/&gt;　　&lt;a href=&quot;https://git-scm.com/docs&quot; target=&quot;_blank&quot;&gt;https://git-scm.com/docs&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://git-scm.com/book/en/v2&quot; target=&quot;_blank&quot;&gt;https://git-scm.com/book/en/v2&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;将本地仓库提交到远程&lt;/h2&gt;
&lt;p&gt;　　本地的git仓库已经实现了代码版本控制功能，但是&lt;span&gt;本地的仓库无法实现团队的合作&lt;/span&gt;，而且&lt;span&gt;代码库都在本地无法发挥分布式的特性&lt;/span&gt;。所以可以将本地的代码仓库提交到远程托管平台如GitHub、Gitee等等。&lt;br/&gt;　　在GitHub上创建一个新的仓库(注：需要先注册一个GitHub账户)：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517205213667-1622419460.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　创建成功后GitHub会给出提示如何使用这个库，比如创建新库的流程、导入已有库的流程以及导入代码的流程：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517205235943-1222951805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里我们需要第二种方法：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517205301133-1646625616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注：如果第一次通过git将代码push到github，那么会出现以下登陆提示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517205321006-124267810.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　&lt;span&gt;在Windows下仅需要登陆一次，git就会记住登陆信息，避免后续的重复登陆，记录登陆信息的功能由git credential manager提供，详见： &lt;a href=&quot;https://github.com/Microsoft/Git-Credential-Manager-for-Windows&quot; target=&quot;_blank&quot;&gt;https://github.com/Microsoft/Git-Credential-Manager-for-Windows&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;　　这样就能够成功将代码提交到GitHub上：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201805/640251-20180517205348139-361093451.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　更多使用GitHub托管代码的内容后续介绍。&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;　　本文主要介绍了常用的代码版本控制工具，版本控制工具可分为集中式的和分布式的，其中集中式的常用的有SVN而分布式的有Git，随着软件开发方式的发展Git更加的符合现代的敏捷、远程协作等概念，所以本系列文章选择了Git作为代码版本控制工具。&lt;br/&gt;　　另外本文主要是介绍了Git命令行工具的使用方法并使用了GitHub作为远程代码托管平台对代码进行了托管，Git的GUI工具非常多，但所有的GUI工具的原理都是对Git命令封装，然后提供一些便捷的功能，所以理解Git命令是非常必要的，理解了Git的基础命令再去使用GUI工具会更加得心应手。但要注意的是本文介绍的命令并不全面，因为一个命令还有很多参数选项，所以更多内容可参考Git的官方文档或书籍：&lt;a href=&quot;https://git-scm.com/docs&quot; target=&quot;_blank&quot;&gt;https://git-scm.com/docs&lt;/a&gt;  &lt;a href=&quot;https://git-scm.com/book/en/v2&quot; target=&quot;_blank&quot;&gt;https://git-scm.com/book/en/v2&lt;/a&gt;&lt;br/&gt;　　下一篇文章将对Git的核心特性分支以及pull request进行介绍，敬请期待。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;参考：&lt;br/&gt;　　&lt;a href=&quot;https://git-scm.com/docs&quot; target=&quot;_blank&quot;&gt;https://git-scm.com/docs&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://git-scm.com/book/en/v2&quot; target=&quot;_blank&quot;&gt;https://git-scm.com/book/en/v2&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://github.com/Microsoft/Git-Credential-Manager-for-Windows&quot; target=&quot;_blank&quot;&gt;https://github.com/Microsoft/Git-Credential-Manager-for-Windows&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://blog.csdn.net/guoxinian/article/details/52297804&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/guoxinian/article/details/52297804&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://stackoverflow.com/questions/1881594/use-winmerge-inside-of-git-to-file-diff&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/1881594/use-winmerge-inside-of-git-to-file-diff&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://github.com/github/gitignore/blob/master/VisualStudio.gitignore&quot; target=&quot;_blank&quot;&gt;https://github.com/github/gitignore/blob/master/VisualStudio.gitignore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 好代码是管出来的——使用Git来管理源代码&quot; href=&quot;http://www.cnblogs.com/selimsong/p/9051137.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/selimsong/p/9051137.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a id=&quot;post_title_link_8675028&quot; href=&quot;http://www.cnblogs.com/selimsong/p/8675028.html&quot;&gt;好代码是管出来的——浅谈.Net Core的代码管理方法与落地（更新中...）&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 14:49:00 +0000</pubDate>
<dc:creator>7m鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/selimsong/p/9051137.html</dc:identifier>
</item>
<item>
<title>Vue数据双向绑定原理及简单实现 - 阿龙丶along</title>
<link>http://www.cnblogs.com/alongup/p/9022180.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alongup/p/9022180.html</guid>
<description>&lt;p&gt;　　嘿，Goodgirl and GoodBoy,点进来了就看完点个赞再go. &lt;/p&gt;
&lt;p&gt;　　Vue这个框架就不简单介绍了，它最大的特性就是数据的双向绑定以及虚拟dom.核心就是用数据来驱动视图层的改变.先看一段代码.&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;一、示例&lt;/span&gt;　&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;h3 class=&quot;brush:csharp;gutter:true;&quot;&gt;var vm = new Vue({ data: { obj: { a: 1 } }, created: function () { console.log(this.obj); } });&lt;/h3&gt;
&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237383/201805/1237383-20180510205104261-1011788500.png&quot; alt=&quot;&quot; width=&quot;423&quot; height=&quot;201&quot;/&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;&lt;span&gt;二、实现原理&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
vue数据双向绑定是通过数据劫持结合发布者-&lt;span&gt;订阅者模式的方式来实现的.
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;）数据劫持、vue是通过Object.defineProperty()来实现数据劫持，其中会有getter()和setter方法；当读取属性值时，就会触发getter()方法，在view中如果数据发生了变化，就会通&lt;br/&gt;过Object.definePr
operty( )对属性设置一个setter函数，当数据改变了就会来触发这个函数；&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;三、实现步骤&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;97&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、实现Observer
ok, 思路已经整理完毕，也已经比较明确相关逻辑和模块功能了，let&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s do it&lt;/span&gt;
&lt;span&gt;我们知道可以利用Obeject.defineProperty()来监听属性变动
那么将需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter
这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化。。相关代码可以是这样：

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = {name: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;kindeng&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;};
observe(data);
data.name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dmq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 哈哈哈，监听到值变化了 kindeng --&amp;gt; dmq&lt;/span&gt;
&lt;span&gt;
function observe(data) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!data || &lt;span&gt;typeof&lt;/span&gt; data !== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取出所有属性遍历&lt;/span&gt;
&lt;span&gt;    Object.keys(data).forEach(function(key) {
        defineReactive(data, key, data[key]);
    });
};

function defineReactive(data, key, val) {
    observe(val); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 监听子属性&lt;/span&gt;
&lt;span&gt;    Object.defineProperty(data, key, {
        enumerable: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可枚举&lt;/span&gt;
        configurable: &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不能再define&lt;/span&gt;
        &lt;span&gt;get&lt;/span&gt;&lt;span&gt;: function() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; val;
        },
        &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;: function(newVal) {
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;哈哈哈，监听到值变化了 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, val, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; --&amp;gt; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, newVal);
            val &lt;/span&gt;=&lt;span&gt; newVal;
        }
    });
}
这样我们已经可以监听每个数据的变化了，那么监听到变化之后就是怎么通知订阅者了，所以接下来我们需要实现一个消息订阅器，很简单，维护一个数组，用来收集订阅者，数据变动触发notify，再调用订阅者的update方法，代码改善之后是这样：

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ... 省略&lt;/span&gt;
&lt;span&gt;function defineReactive(data, key, val) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dep = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dep();
    observe(val); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 监听子属性&lt;/span&gt;
&lt;span&gt;
    Object.defineProperty(data, key, {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ... 省略&lt;/span&gt;
        &lt;span&gt;set&lt;/span&gt;&lt;span&gt;: function(newVal) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (val === newVal) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;哈哈哈，监听到值变化了 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, val, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; --&amp;gt; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, newVal);
            val &lt;/span&gt;=&lt;span&gt; newVal;
            dep.notify(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通知所有订阅者&lt;/span&gt;
&lt;span&gt;        }
    });
}

function Dep() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.subs =&lt;span&gt; [];
}
Dep.prototype &lt;/span&gt;=&lt;span&gt; {
    addSub: function(sub) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.subs.push(sub);
    },
    notify: function() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.subs.forEach(function(sub) {
            sub.update();
        });
    }
};
那么问题来了，谁是订阅者？怎么往订阅器添加订阅者？
没错，上面的思路整理中我们已经明确订阅者应该是Watcher, 而且var dep &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dep();是在 defineReactive方法内部定义的，所以想通过dep添加订阅者，就必须要在闭包内操作，所以我们可以在 getter里面动手脚：

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Observer.js
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...省略&lt;/span&gt;
&lt;span&gt;Object.defineProperty(data, key, {
    &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;: function() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除&lt;/span&gt;
        Dep.target &amp;amp;&amp;amp;&lt;span&gt; dep.addDep(Dep.target);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; val;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ... 省略&lt;/span&gt;
&lt;span&gt;});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Watcher.js&lt;/span&gt;
Watcher.prototype =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;: function(key) {
        Dep.target &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value = data[key];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里会触发属性的getter，从而添加订阅者&lt;/span&gt;
        Dep.target = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}
这里已经实现了一个Observer了，已经具备了监听数据和数据变化通知订阅者的功能，完整代码。那么接下来就是实现Compile了

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、实现Compile
compile主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图，如图所示：
图片描述

因为遍历解析的过程有多次操作dom节点，为提高性能和效率，会先将跟节点el转换成文档碎片fragment进行解析编译操作，解析完成，再将fragment添加回原来的真实dom节点中

function Compile(el) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$el = &lt;span&gt;this&lt;/span&gt;.isElementNode(el) ?&lt;span&gt; el : document.querySelector(el);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$el) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$fragment = &lt;span&gt;this&lt;/span&gt;.node2Fragment(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$el);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.init();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$el.appendChild(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$fragment);
    }
}
Compile.prototype &lt;/span&gt;=&lt;span&gt; {
    init: function() { &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.compileElement(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$fragment); },
    node2Fragment: function(el) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fragment =&lt;span&gt; document.createDocumentFragment(), child;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将原生节点拷贝到fragment&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; (child =&lt;span&gt; el.firstChild) {
            fragment.appendChild(child);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fragment;
    }
};
compileElement方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定，详看代码及注释说明：

Compile.prototype &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ... 省略&lt;/span&gt;
&lt;span&gt;    compileElement: function(el) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; childNodes = el.childNodes, me = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        [].slice.call(childNodes).forEach(function(node) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; text =&lt;span&gt; node.textContent;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reg = /\{\{(.*)\}\}/;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 表达式文本
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按元素节点方式编译&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (me.isElementNode(node)) {
                me.compile(node);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (me.isTextNode(node) &amp;amp;&amp;amp;&lt;span&gt; reg.test(text)) {
                me.compileText(node, RegExp.$&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历编译子节点&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (node.childNodes &amp;amp;&amp;amp;&lt;span&gt; node.childNodes.length) {
                me.compileElement(node);
            }
        });
    },

    compile: function(node) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; nodeAttrs = node.attributes, me = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        [].slice.call(nodeAttrs).forEach(function(attr) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 规定：指令以 v-xxx 命名
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如 &amp;lt;span v-text=&quot;content&quot;&amp;gt;&amp;lt;/span&amp;gt; 中指令为 v-text&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; attrName = attr.name;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; v-text&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (me.isDirective(attrName)) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exp = attr.value; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; dir = attrName.substring(&lt;span&gt;2&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; text&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (me.isEventDirective(dir)) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 事件指令, 如 v-on:click&lt;/span&gt;
&lt;span&gt;                    compileUtil.eventHandler(node, me.$vm, exp, dir);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 普通指令&lt;/span&gt;
                    compileUtil[dir] &amp;amp;&amp;amp;&lt;span&gt; compileUtil[dir](node, me.$vm, exp);
                }
            }
        });
    }
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 指令处理集合&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; compileUtil =&lt;span&gt; {
    text: function(node, vm, exp) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.bind(node, vm, exp, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    },
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...省略&lt;/span&gt;
&lt;span&gt;    bind: function(node, vm, exp, dir) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; updaterFn = updater[dir + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Updater&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一次初始化视图&lt;/span&gt;
        updaterFn &amp;amp;&amp;amp;&lt;span&gt; updaterFn(node, vm[exp]);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化订阅者，此操作会在对应的属性消息订阅器中添加了该订阅者watcher&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Watcher(vm, exp, function(value, oldValue) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 一旦属性值有变化，会收到通知执行此更新函数，更新视图&lt;/span&gt;
            updaterFn &amp;amp;&amp;amp;&lt;span&gt; updaterFn(node, value, oldValue);
        });
    }
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 更新函数&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; updater =&lt;span&gt; {
    textUpdater: function(node, value) {
        node.textContent &lt;/span&gt;= &lt;span&gt;typeof&lt;/span&gt; value == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ? &lt;span&gt;''&lt;/span&gt;&lt;span&gt; : value;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...省略&lt;/span&gt;
&lt;span&gt;};
这里通过递归遍历保证了每个节点及子节点都会解析编译到，包括了{{}}表达式声明的文本节点。指令的声明规定是通过特定前缀的节点属性来标记，如&lt;/span&gt;&amp;lt;span v-text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; other-attr中v-text便是指令，而other-&lt;span&gt;attr不是指令，只是普通的属性。
监听数据、绑定更新函数的处理是在compileUtil.bind()这个方法中，通过new Watcher()添加回调来接收数据变化的通知

至此，一个简单的Compile就完成了，完整代码。接下来要看看Watcher这个订阅者的具体实现了

&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、实现Watcher
Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是:
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、在自身实例化时往属性订阅器(dep)里面添加自己
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、自身必须有一个update()方法
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。
如果有点乱，可以回顾下前面的思路整理

function Watcher(vm, exp, cb) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cb =&lt;span&gt; cb;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.vm =&lt;span&gt; vm;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.exp =&lt;span&gt; exp;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.value = &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(); 
}
Watcher.prototype &lt;/span&gt;=&lt;span&gt; {
    update: function() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.run();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 属性值变化收到通知&lt;/span&gt;
&lt;span&gt;    },
    run: function() {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; value = &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;get&lt;/span&gt;(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取到最新值&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; oldVal = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value !==&lt;span&gt; oldVal) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cb.call(&lt;span&gt;this&lt;/span&gt;.vm, value, oldVal); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行Compile中绑定的回调，更新视图&lt;/span&gt;
&lt;span&gt;        }
    },
    &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;: function() {
        Dep.target &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将当前订阅者指向自己&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; value = &lt;span&gt;this&lt;/span&gt;.vm[exp];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 触发getter，添加自己到属性订阅器中&lt;/span&gt;
        Dep.target = &lt;span&gt;null&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加完毕，重置&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
    }
};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里再次列出Observer和Dep，方便理解&lt;/span&gt;
&lt;span&gt;Object.defineProperty(data, key, {
    &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;: function() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除&lt;/span&gt;
        Dep.target &amp;amp;&amp;amp;&lt;span&gt; dep.addDep(Dep.target);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; val;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ... 省略&lt;/span&gt;
&lt;span&gt;});
Dep.prototype &lt;/span&gt;=&lt;span&gt; {
    notify: function() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.subs.forEach(function(sub) {
            sub.update(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用订阅者的update方法，通知变化&lt;/span&gt;
&lt;span&gt;        });
    }
};
实例化Watcher的时候，调用get()方法，通过Dep.target &lt;/span&gt;= watcherInstance标记订阅者是当前watcher实例，强行触发属性定义的getter方法，getter方法执行的时候，就会在属性的订阅器dep添加当前watcher实例，从而在属性值有变化的时候，watcherInstance就能收到更新通知。
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;四、简单实现方法&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
   &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
       &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
       &amp;lt;p id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;show-txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;script&amp;gt;
       &lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; {}
       Object.defineProperty(obj, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
           &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;: function () {
               &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; obj
           },
           &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;: function (newValue) {
               document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).value =&lt;span&gt; newValue
               document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show-txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).innerHTML =&lt;span&gt; newValue
           }
       })
       document.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;keyup&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function (e) {
           obj.txt &lt;/span&gt;=&lt;span&gt; e.target.value
       })
   &lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注、可能有很多不正确的地方，请多多指教。   along&lt;/p&gt;





</description>
<pubDate>Thu, 17 May 2018 14:29:00 +0000</pubDate>
<dc:creator>阿龙丶along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alongup/p/9022180.html</dc:identifier>
</item>
<item>
<title>SpringCloud实战-Feign声明式服务调用 - 蜗居在小黑屋操控世界</title>
<link>http://www.cnblogs.com/huangjuncong/p/9053576.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangjuncong/p/9053576.html</guid>
<description>&lt;p&gt;在前面的文章中可以发现当我们通过RestTemplate调用其它服务的API时，所需要的参数须在请求的URL中进行拼接，如果参数少的话或许我们还可以忍受，一旦有多个参数的话，这时拼接请求字符串就会效率低下，并且显得好傻。&lt;/p&gt;
&lt;p&gt;那么有没有更好的解决方案呢？答案是确定的有，Netflix已经为我们提供了一个框架：Feign。&lt;/p&gt;
&lt;p&gt;Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。&lt;/p&gt;
&lt;p&gt;而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。Feign整合了Ribbon和Hystrix(关于Hystrix我们后面再讲)，可以让我们不再需要显式地使用这两个组件。&lt;/p&gt;
&lt;p&gt;总起来说，Feign具有如下特性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可插拔的注解支持，包括Feign注解和JAX-RS注解;&lt;/li&gt;
&lt;li&gt;支持可插拔的HTTP编码器和解码器;&lt;/li&gt;
&lt;li&gt;支持Hystrix和它的Fallback;&lt;/li&gt;
&lt;li&gt;支持Ribbon的负载均衡;&lt;/li&gt;
&lt;li&gt;支持HTTP请求和响应的压缩。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这看起来有点像我们springmvc模式的Controller层的RequestMapping映射。这种模式是我们非常喜欢的。Feign是用@FeignClient来映射服务的。&lt;/p&gt;

&lt;p&gt;首先第一步，在原来的基础上新建一个Feign模块，接着引入相关依赖，引入Feign依赖，会自动引入Hystrix依赖的，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
　　　　&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-feign&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.4&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;application.yml配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: &lt;/span&gt;&lt;span&gt;8083&lt;/span&gt;&lt;span&gt;
spring:
  application:
    name: feign&lt;/span&gt;-&lt;span&gt;consumer
eureka:
  client:
    service&lt;/span&gt;-&lt;span&gt;url:
      defaultZone: http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:8888/eureka/,&lt;/span&gt;&lt;span&gt;http://localhost&lt;/span&gt;&lt;span&gt;:8889/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着在前面文章中的的的两个provider1和provider2两个模块的服务新增几个方法，如下代码所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/8.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {

    @RequestMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello(){
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问来1了......&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }

    @RequestMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hjcs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt;&lt;span&gt; laowangs(String ids){
        List&lt;/span&gt;&amp;lt;String&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;laowang1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        list.add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;laowang2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        list.add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;laowang3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新增的方法&lt;/span&gt;
    @RequestMapping(value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hellol&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, method=&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello(@RequestParam String name) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; name;
    }

    @RequestMapping(value &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hello2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, method=&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User hello(@RequestHeader String name, @RequestHeader Integer age) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User(name, age);
    }

    @RequestMapping(value &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hello3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, method =&lt;span&gt; RequestMethod.POST)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello (@RequestBody User user) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+ user. getName () + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; user. getAge ();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接着是上面代码所需用到的User类，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong 2017/12/2.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;序列化传输的时候必须要有空构造方法，不然会出错&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User() {
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User(String name, Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来用Feign的@FeignClient(“服务名称”)映射服务调用。代码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package hjc;

import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.&lt;/span&gt;*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/17.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;configuration = xxx.class  这个类配置Hystrix的一些精确属性&lt;br/&gt;//value=“你用到的服务名称”&lt;br/&gt;&lt;/span&gt;
@FeignClient(value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello-service&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,fallback = FeignFallBack.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; FeignService {
　　//服务中方法的映射路径
    @RequestMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    String hello();

    @RequestMapping(value &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hellol&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, method=&lt;span&gt; RequestMethod.GET)
    String hello(@RequestParam(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) String name) ;

    @RequestMapping(value &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hello2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, method=&lt;span&gt; RequestMethod.GET)
    User hello(@RequestHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) String name, @RequestHeader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) Integer age);

    @RequestMapping(value &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/hello3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, method=&lt;span&gt; RequestMethod.POST)
    String hello(@RequestBody User user);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接着在Controller层注入FeiService这个接口，进行远程服务调用，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/17.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsumerController {

    @Autowired
    FeignService feignService;

    @RequestMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/consumer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String helloConsumer(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; feignService.hello();
    }

    @RequestMapping(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/consumer2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String helloConsumer2(){
        String r1 &lt;/span&gt;= feignService.hello(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hjc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        String r2 &lt;/span&gt;= feignService.hello(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hjc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;23&lt;/span&gt;&lt;span&gt;).toString();
        String r3 &lt;/span&gt;= feignService.hello(&lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hjc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;23&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; r1 + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + r2 + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; r3;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接着在Feign模块的启动类哪里打上Eureka客户端的注解@EnableDiscoveryClient  Feign客户端的注解@EnableFeignClients，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FeignApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(FeignApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接着启动启动类，浏览器上输入localhost:8083/consumer  运行结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180517213107757-2020180833.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180517213117153-1308227768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到负载均衡轮询出现hello1,hello2。&lt;/p&gt;

&lt;p&gt;接着继续在浏览器上输入localhost:8083/consumer2，运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180517213829925-1959903942.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;接下来我们进行Feign声明式调用服务下的，服务降级的使用，那么我们就必须新建一个FeignFallBack类来继承FeiService，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package hjc;

import org.springframework.stereotype.Component;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/17.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FeignFallBack implements FeignService{&lt;br/&gt;　　//实现的方法是服务调用的降级方法
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello(String name) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User hello(String name, Integer age) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello(User user) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 接着我们再把那两个服务提供模块provider1,provider2模块进行停止，运行结果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202638/201805/1202638-20180517214158532-857614664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 可以看到我们这几个调用，都进行了服务降级了。&lt;/p&gt;

&lt;p&gt;那么如果我们想精确的控制一下Hystrix的参数也是可以的，比方说跟Hystrix结合的参数，那么可以在FeignClient注解里面配置一个Configuration=XXX类.class属性，在哪个类里面精确的指定一下属性。&lt;/p&gt;
&lt;p&gt;或者在application.yml里面配置，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;hystrix:
  command:
    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
      execution:
        isolation:
          thread:
            timeoutinMilliseconds: &lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;

ribbon:
  connectTimeout: &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;

#如果想对单独的某个服务进行详细配置，如下
hello&lt;/span&gt;-&lt;span&gt;service:
  ribbon:
    connectTimeout: &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里满足了我们大部分场景的调用，但是有写精细场景，还是要用原生的Hystrix，跟我们之前的Hystrix用法一下，不要走Feign客户端调用就行了，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created by cong on 2018/5/17.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HjcCommand extends HystrixCommand {
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; HjcCommand(HystrixCommandGroupKey group) {
        super(group);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Object run() throws Exception {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 17 May 2018 14:03:00 +0000</pubDate>
<dc:creator>蜗居在小黑屋操控世界</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangjuncong/p/9053576.html</dc:identifier>
</item>
<item>
<title>DropZone（文件上传插件） - 人生不如戏</title>
<link>http://www.cnblogs.com/fu-yong/p/9053515.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fu-yong/p/9053515.html</guid>
<description>&lt;h3 id=&quot;1-html文件&quot;&gt;1. html文件&lt;/h3&gt;
&lt;p&gt;dropzone的原理是模拟表单来上传文件，html中的元素有多重形式。&lt;/p&gt;
&lt;ol&gt;&lt;li readability=&quot;-1.5&quot;&gt;可以建立一个form表单：
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;lt;form id=&quot;dropz&quot; action=&quot;/upload.php&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
    &amp;lt;input type=&quot;file&quot; name=&quot;file&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;也可以不用表单的形式，直接用一个div
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;lt;div id=&quot;dropz&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;2引入css文件&quot;&gt;2.引入css文件&lt;/h3&gt;
&lt;p&gt;引入dropzone.min.css之后会有更漂亮的外观；&lt;/p&gt;
&lt;h3 id=&quot;3js文件&quot;&gt;3.js文件&lt;/h3&gt;
&lt;p&gt;必须配置js才能上传 &lt;br/&gt;1.如果没有引入jquery: &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
var myDropzone = new Dropzone(&quot;div#mydropzone&quot;, {url: &quot;/upload&quot;}); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.如果引入了jquery:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
$(&quot;#dropz&quot;).dropzone({url: &quot;/upload&quot;})
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;常用的配置项&quot;&gt;常用的配置项：&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;url : 必要参数，文件的上传地址；&lt;/li&gt;
&lt;li&gt;maxFiles : 默认为null，可以指定为一个数值，限制最多文件数量。&lt;/li&gt;
&lt;li&gt;maxFilesize : 限制文件的大小，单位是MB；&lt;/li&gt;
&lt;li&gt;acceptedFiles : 允许上传的文件类型，文件扩展名以逗号隔开，格式见实例；&lt;/li&gt;
&lt;li&gt;autoProcessQueue : 默认为true，即拖入文件立即自动上传；如果需要在上传之前有一些选择的操作，然后手动上传，可以把该属性设置为false，然后手动点击按钮上传；&lt;/li&gt;
&lt;li&gt;paramName : 相当于&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;元素的name属性，默认为file。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;提示文本&quot;&gt;提示文本：&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;dictDefaultMessage : 没有任何文件被添加时的提示文本；&lt;/li&gt;
&lt;li&gt;dictFallbackMessage：Fallback 情况下的提示文本。&lt;/li&gt;
&lt;li&gt;dictInvalidInputType：文件类型被拒绝时的提示文本。&lt;/li&gt;
&lt;li&gt;dictFileTooBig：文件大小过大时的提示文本。&lt;/li&gt;
&lt;li&gt;dictCancelUpload：取消上传链接的文本。&lt;/li&gt;
&lt;li&gt;dictCancelUploadConfirmation：取消上传确认信息的文本。&lt;/li&gt;
&lt;li&gt;dictRemoveFile：移除文件链接的文本。&lt;/li&gt;
&lt;li&gt;dictMaxFilesExceeded：超过最大文件数量的提示文本。&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;添加监听事件：&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
$(&quot;#dropz&quot;).dropzone({
    init: function() {
        this.on(&quot;addedfile&quot;, function(file) {
            // actions...
        });
    }
});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;没有添加jquery时：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
dropz.on(&quot;addedfile&quot;, function(file) {
    // actions...
});
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;常用事件&quot;&gt;常用事件：&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;addedfile : 添加文件是发生&lt;/li&gt;
&lt;li&gt;removefile : 手动从服务器删除文件时发生&lt;/li&gt;
&lt;li&gt;success : 上传成功后发生&lt;/li&gt;
&lt;li&gt;complete：当文件上传成功或失败之后发生。&lt;/li&gt;
&lt;li&gt;canceled：当文件在上传时被取消的时候发生。&lt;/li&gt;
&lt;li&gt;maxfilesreached：当文件数量达到最大时发生。&lt;/li&gt;
&lt;li&gt;maxfilesexceeded：当文件数量超过限制时发生。&lt;/li&gt;
&lt;li&gt;totaluploadprogress : 文件上传中的返回值，第一个参数为总上传进度(0到100)，第二个为总字节数，第三个为总上传字节数，利用这几个参数，可计算出上传速度，和剩余上传时间；&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;完整示例：&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;69&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
$(&quot;#dropz&quot;).dropzone({            
    url: &quot;/files/uploading&quot;,
    maxFiles: 1,
    maxFilesize: 1024,
    acceptedFiles: &quot;.jpg,.jpeg,.doc,.docx,.ppt,.pptx,.txt,.avi,.pdf,.mp3,.zip&quot;,
    autoProcessQueue: false,
    paramName: &quot;file&quot;,
    dictDefaultMessage: &quot;拖入需要上传的文件&quot;,
    init: function () {
        var myDropzone = this, submitButton = document.querySelector(&quot;#qr&quot;), 
        cancelButton = document.querySelector(&quot;#cancel&quot;);
        myDropzone.on('addedfile', function (file) {
            //添加上传文件的过程，可再次弹出弹框，添加上传文件的信息
        });
        myDropzone.on('sending', function (data, xhr, formData) {
            //向后台发送该文件的参数
            formData.append('watermark', jQuery('#info').val());
        });
        myDropzone.on('success', function (files, response) {
            //文件上传成功之后的操作
        });
        myDropzone.on('error', function (files, response) {
            //文件上传失败后的操作
        });
        myDropzone.on('totaluploadprogress', function (progress, byte, bytes) {
            //progress为进度百分比
            $(&quot;#pro&quot;).text(&quot;上传进度：&quot; + parseInt(progress) + &quot;%&quot;);
            //计算上传速度和剩余时间
            var mm = 0;
            var byte = 0;
            var tt = setInterval(function () {
                mm++;
                var byte2 = bytes;
                var remain;
                var speed;
                var byteKb = byte/1024;
                var bytesKb = bytes/1024;
                var byteMb = byte/1024/1024;
                var bytesMb = bytes/1024/1024;
                if(byteKb &amp;lt;= 1024){
                    speed = (parseFloat(byte2 - byte)/(1024)/mm).toFixed(2) + &quot; KB/s&quot;;
                    remain = (byteKb - bytesKb)/parseFloat(speed);
                }else{
                    speed = (parseFloat(byte2 - byte)/(1024*1024)/mm).toFixed(2) + &quot; MB/s&quot;;
                    remain = (byteMb - bytesMb)/parseFloat(speed);
                }
                $(&quot;#dropz #speed&quot;).text(&quot;上传速率：&quot; + speed);
                $(&quot;#dropz #time&quot;).text(&quot;剩余时间&quot;+arrive_timer_format(parseInt(remain)));
                if(bytes &amp;gt;= byte){
                    clearInterval(tt);
                    if(byteKb &amp;lt;= 1024){
                        $(&quot;#dropz #speed&quot;).text(&quot;上传速率：0 KB/s&quot;);
                    }else{
                        $(&quot;#dropz #speed&quot;).text(&quot;上传速率：0 MB/s&quot;);
                    }
                    $(&quot;#dropz #time&quot;).text(&quot;剩余时间：0:00:00&quot;);
                }
            },1000);
        });
        submitButton.addEventListener('click', function () {
            //点击上传文件
            myDropzone.processQueue();
        });
        cancelButton.addEventListener('click', function () {
            //取消上传
            myDropzone.removeAllFiles();
        });
    }
});
//剩余时间格式转换：
function arrive_timer_format(s) {
    var t;
    if(s &amp;gt; -1){
        var hour = Math.floor(s/3600);
        var min = Math.floor(s/60) % 60;
        var sec = s % 60;
        var day = parseInt(hour / 24);
        if (day &amp;gt; 0) {
            hour = hour - 24 * day;
            t = day + &quot;day &quot; + hour + &quot;:&quot;;
        }
        else t = hour + &quot;:&quot;;
        if(min &amp;lt; 10){t += &quot;0&quot;;}
        t += min + &quot;:&quot;;
        if(sec &amp;lt; 10){t += &quot;0&quot;;}
        t += sec;
    }
    return t;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;75&quot;&gt;
&lt;pre class=&quot;brush:python;collapse:true;;gutter:true;&quot;&gt;
#urls.py

from app01 import views

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^test/', views.dropzoneTest),
]





#views.py

from django.shortcuts import render

def dropzoneTest(request):
    if request.is_ajax():
        file = request.FILES.get('file')
        with open('file.jpg','wb') as f:
            for line in file:
                f.write(line)
    return render(request,'dropzoneTest.html')


#dropzoneDemo.html

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    {% load static %}
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'dropzone.css' %}&quot;&amp;gt;
    &amp;lt;script src=&quot;{% static 'jquery-3.2.1.min.js' %}&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;{% static 'dropzone.js' %}&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;请上传身份照正反面照片&amp;lt;/p&amp;gt;
        &amp;lt;form id=&quot;filedropzone&quot; method=&quot;post&quot; action=&quot;{{ request.path }}&quot; class=&quot;dropzone dz-clickable&quot; &amp;gt;{% csrf_token %}
            &amp;lt;div class=&quot;dz-default dz-message&quot;&amp;gt;
                &amp;lt;div class=&quot;dz-icon icon-wrap icon-circle icon-wrap-md&quot;&amp;gt;
                    &amp;lt;i class=&quot;fa fa-cloud-upload fa-3x&quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;p class=&quot;dz-text&quot;&amp;gt;把证件信息拖放到这里&amp;lt;/p&amp;gt;
                    &amp;lt;p class=&quot;text-muted&quot;&amp;gt;最多可上传2张照片&amp;lt;/p&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/form&amp;gt;

&amp;lt;!---------------------------------------------------------------&amp;gt;
&amp;lt;script&amp;gt;
$(document).ready(function () {
    $(&quot;#filedropzone&quot;).dropzone({
        url: &quot;{{ request.path }}&quot;,
        maxFiles: 5,
        maxFilesize: 1024,
        acceptedFiles: &quot;.jpg,.jpeg,.doc,.docx,.ppt,.pptx,.txt,.avi,.pdf,.mp3,.zip&quot;,
        autoProcessQueue: false,
        paramName: &quot;file&quot;,
        dictDefaultMessage: &quot;拖入需要上传的文件&quot;,
        init: function () {
            var myDropzone = this, submitButton = document.querySelector(&quot;#qr&quot;),
                    cancelButton = document.querySelector(&quot;#cancel&quot;);
            myDropzone.on('addedfile', function (file) {
                //添加上传文件的过程，可再次弹出弹框，添加上传文件的信息
            });
            myDropzone.on('sending', function (data, xhr, formData) {
                //向后台发送该文件的参数
                formData.append('watermark', jQuery('#info').val());
            });
            myDropzone.on('success', function (files, response) {
                //文件上传成功之后的操作
            });
            myDropzone.on('error', function (files, response) {
                //文件上传失败后的操作
            });
            myDropzone.on('totaluploadprogress', function (progress, byte, bytes) {
                //progress为进度百分比
                $(&quot;#pro&quot;).text(&quot;上传进度：&quot; + parseInt(progress) + &quot;%&quot;);
                //计算上传速度和剩余时间
                var mm = 0;
                var byte = 0;
                var tt = setInterval(function () {
                    mm++;
                    var byte2 = bytes;
                    var remain;
                    var speed;
                    var byteKb = byte / 1024;
                    var bytesKb = bytes / 1024;
                    var byteMb = byte / 1024 / 1024;
                    var bytesMb = bytes / 1024 / 1024;
                    if (byteKb &amp;lt;= 1024) {
                        speed = (parseFloat(byte2 - byte) / (1024) / mm).toFixed(2) + &quot; KB/s&quot;;
                        remain = (byteKb - bytesKb) / parseFloat(speed);
                    } else {
                        speed = (parseFloat(byte2 - byte) / (1024 * 1024) / mm).toFixed(2) + &quot; MB/s&quot;;
                        remain = (byteMb - bytesMb) / parseFloat(speed);
                    }
                    $(&quot;#dropz #speed&quot;).text(&quot;上传速率：&quot; + speed);
                    $(&quot;#dropz #time&quot;).text(&quot;剩余时间&quot; + arrive_timer_format(parseInt(remain)));
                    if (bytes &amp;gt;= byte) {
                        clearInterval(tt);
                        if (byteKb &amp;lt;= 1024) {
                            $(&quot;#dropz #speed&quot;).text(&quot;上传速率：0 KB/s&quot;);
                        } else {
                            $(&quot;#dropz #speed&quot;).text(&quot;上传速率：0 MB/s&quot;);
                        }
                        $(&quot;#dropz #time&quot;).text(&quot;剩余时间：0:00:00&quot;);
                    }
                }, 1000);
            });
            submitButton.addEventListener('click', function () {
                //点击上传文件
                myDropzone.processQueue();
            });
            cancelButton.addEventListener('click', function () {
                //取消上传
                myDropzone.removeAllFiles();
            });
        }
    });
//剩余时间格式转换：
    function arrive_timer_format(s) {
        var t;
        if (s &amp;gt; -1) {
            var hour = Math.floor(s / 3600);
            var min = Math.floor(s / 60) % 60;
            var sec = s % 60;
            var day = parseInt(hour / 24);
            if (day &amp;gt; 0) {
                hour = hour - 24 * day;
                t = day + &quot;day &quot; + hour + &quot;:&quot;;
            }
            else t = hour + &quot;:&quot;;
            if (min &amp;lt; 10) {
                t += &quot;0&quot;;
            }
            t += min + &quot;:&quot;;
            if (sec &amp;lt; 10) {
                t += &quot;0&quot;;
            }
            t += sec;
        }
        return t;
    }
}
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Thu, 17 May 2018 13:50:00 +0000</pubDate>
<dc:creator>人生不如戏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fu-yong/p/9053515.html</dc:identifier>
</item>
<item>
<title>PHP生成腾讯云COS请求签名 - Cinlap Soft</title>
<link>http://www.cnblogs.com/cinlap/p/9052705.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cinlap/p/9052705.html</guid>
<description>&lt;h2 id=&quot;目标&quot;&gt;目标&lt;/h2&gt;
&lt;p&gt;使用 PHP 创建 COS 接口所需要的请求签名，按照官方示例，请求签名应用在需要身份校验的场景，即非公有读权限时。否则在请求API接口时，就必须携带签名作为请求头的一部分传递。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;
&lt;h3 id=&quot;准备好用户信息&quot;&gt;准备好用户信息&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;将会使用到的用户信息包括：&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;SecretId：腾讯云账号内分配&lt;/li&gt;
&lt;li&gt;SecretKey：腾讯云账号内分配&lt;/li&gt;
&lt;li&gt;Bucket：存储桶名称&lt;/li&gt;
&lt;li&gt;Region：区域，即该COS所属&lt;a href=&quot;https://cloud.tencent.com/document/product/436/6224&quot;&gt;区域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FileUri：请求路径，如&lt;code&gt;PUT /textfile HTTP1.1&lt;/code&gt;，意思是将新上传的文件放在目标存储桶根目录下并命名为&lt;code&gt;textfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Host：主机，存储桶具体访问地址，腾讯云存储桶详情可以找到&lt;/li&gt;
&lt;li&gt;Content-Length：上传文件时必须的请求头&lt;/li&gt;
&lt;/ul&gt;&lt;ol readability=&quot;-2&quot;&gt;&lt;li readability=&quot;0.5&quot;&gt;
&lt;p&gt;创建参数&lt;br/&gt;先看一个官方文档给出的栗子&lt;/p&gt;
&lt;blockquote readability=&quot;7.5&quot;&gt;
&lt;p&gt;通过 RESTful API 对 COS 发起的 HTTP 签名请求，使用标准的 HTTP Authorization 头部来传递，如下例所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;PUT /testfile2 HTTP/1.1
Host: bucket1-1254000000.cos.ap-beijing.myqcloud.com
x-cos-content-sha1: 7b502c3a1f48c8609ae212cdfb639dee39673f5e
x-cos-storage-class: standard

Hello world&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;解读一下，这是一个很简单的&lt;code&gt;http&lt;/code&gt;请求，第一行是请求行，第二、三、四行都是请求头，先放在这儿，后面会用到。按照官方文档，先准备好必需的参数，参数均已键值对方式存在，首先看看官方给出的完整签名结构&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;q-sign-algorithm=sha1&amp;amp;q-ak=[SecretID]&amp;amp;q-sign-time=[SignTime]&amp;amp;
q-key-time=[KeyTime]&amp;amp;q-header-list=[SignedHeaderList]&amp;amp;
q-url-param-list=[SignedParameterList]&amp;amp;q-signature=[Signature]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文本中每一个方括号中的内容就是用户信息，其实&lt;code&gt;sha1&lt;/code&gt;也是一个参数截止到发文官方文档表示只支持&lt;code&gt;sha1&lt;/code&gt;因此直接填写即可，其它的以下逐一解读&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;q-xxx：参数中的&lt;code&gt;键&lt;/code&gt;，固定值，接口设定&lt;/li&gt;
&lt;li&gt;[SecretID]：对应客户的SecretId，如&lt;code&gt;AKIDQjz3ltompVjBni5LitkWHFlFpwkn9U5q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[SignTime]：一个由本签名起始时间和结束时间组成的字符串，官方文档解释的很清楚，不再赘述&lt;/li&gt;
&lt;li&gt;[KeyTime]：与[SignTime]相同&lt;/li&gt;
&lt;li&gt;[SignedHeaderList]：HTTP请求头所组成，官方文档说明&lt;em&gt;需从 key:value 中提取部分或全部 key...&lt;/em&gt;，第一次没有理解怎么还允许部分，到底是全部还是部分。再次研究接口时，明白了，数据来自对接口的&lt;strong&gt;原始&lt;/strong&gt;请求，即还没计算签名前的&lt;code&gt;HTTP Request Headers&lt;/code&gt;。往回倒两步来看&lt;code&gt;2. 创建参数&lt;/code&gt;开始时给出的请求示例。&lt;code&gt;Host&lt;/code&gt;、&lt;code&gt;x-cos-content-sha1&lt;/code&gt;、&lt;code&gt;x-cos-storage-class&lt;/code&gt;说明该请求全部请求头有三个，因此&lt;code&gt;[SignedHeaderList]&lt;/code&gt;可以有这三个请求头组成，也可以挑两个甚至一个（我按照理论猜测未测试）。该值是由请求头的Key部分组成，Key需转化为小写并且以字典排序再用连接符&lt;code&gt;;&lt;/code&gt;连接，正确处理后的结果应该是&lt;code&gt;host;x-cos-content-sha1;x-cos-storage-class&lt;/code&gt;。当然如果有&lt;code&gt;Content-Type&lt;/code&gt;这样的请求头，结果应为&lt;code&gt;content-type;host;x-cos-content-sha1;x-cos-storage-class&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;[SignedParameterList]：官方文档说明该值来自接口中的&lt;code&gt;HTTP&lt;/code&gt;请求部分，即第一行请求行。官方给出的例子是HTTP请求&lt;code&gt;GET /?prefix=abc&amp;amp;max-keys=20&lt;/code&gt;时，&lt;code&gt;[SignedParameterList]&lt;/code&gt;为&lt;code&gt;max-keys;prefix&lt;/code&gt;或&lt;code&gt;prefix&lt;/code&gt;。按字面意思如果是非GET请求应该就没有查询部分也就没有参数，该值应该是空。&lt;/li&gt;
&lt;li&gt;[Signature]：使用特定的算法计算出的签名字符串，后面细说。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;编写&quot;&gt;编写&lt;/h3&gt;
&lt;p&gt;根据上面的结构分解，可以了解到以下结构&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;请求签名是由7个键值对组成的字符串&lt;/li&gt;
&lt;li&gt;请求签名最后一个值&lt;code&gt;[Signature]&lt;/code&gt;需要进一步计算&lt;/li&gt;
&lt;li&gt;在创建请求签名之前，HTTP原始请求头最好就设计好包括哪些字段，最好只包括最必要的如&lt;code&gt;Host&lt;/code&gt;，因为原始请求头将作为一种数据源影响请求签名的计算结果&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;了解了结构之后，开始创建一个签名，为了和官方文档比对结果，用户信息使用官方文档给出的内容&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;用户信息&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;APPID：1254000000（在计算请求签名的过程中我没发现该参数有什么用）&lt;/li&gt;
&lt;li&gt;SecretId：AKIDQjz3ltompVjBni5LitkWHFlFpwkn9U5q&lt;/li&gt;
&lt;li&gt;SecretKey：BQYIM75p8x0iWVFSIgqEKwFprpRSVHlz&lt;/li&gt;
&lt;li&gt;Bucket：bucket1-1254000000&lt;/li&gt;
&lt;li&gt;Region：ap-beijing&lt;/li&gt;
&lt;li&gt;FileUri：/testfile2&lt;/li&gt;
&lt;li&gt;Host：bucket1-1254000000.cos.ap-beijing.myqcloud.com(Host的构造可以从官方给出的示例自行组成或拆分)&lt;/li&gt;
&lt;li&gt;Content-Length：示例中未有此项&lt;/li&gt;
&lt;li&gt;x-cos-content-sha1: 7b502c3a1f48c8609ae212cdfb639dee39673f5e&lt;/li&gt;
&lt;li&gt;x-cos-storage-class: standard&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;请求签名结果比照&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;根据用户信息，带入到请求签名结构中，对应关系如下&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;q-sign-algorithm&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;sha1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;目前仅支持 sha1 签名算法&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;q-ak&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;AKIDQjz3ltompVjBni5LitkWHFlFpwkn9U5q&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;SecretId 字段&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;q-sign-time&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1417773892;1417853898&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2014/12/5 18:04:52 到 2014/12/6 16:18:18&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;q-key-time&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1417773892;1417853898&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2014/12/5 18:04:52 到 2014/12/6 16:18:18&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;q-header-list&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;host;x-cos-content-sha1;x-cos-storage-class&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;HTTP 头部 key 的字典顺序排序列表&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;q-url-param-list&lt;/td&gt;
&lt;td align=&quot;center&quot;/&gt;
&lt;td align=&quot;right&quot;&gt;HTTP 参数列表为空&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;q-signature&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;14e6ebd7955b0c6da532151bf97045e2c5a64e10&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;通过代码计算所得&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;以上是官方文档给出的“结果”，也就是说如果自己计算出来的7个键值对跟表格中结果一致，即说明算法正确。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;先计算已有的值&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode php&quot;&gt;
&lt;code class=&quot;sourceCode php&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 计算签名&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * secretId、secretKey 为必需参数，qSignStart、qSignEnd为调试需要，测试通过后应取消，改为方法内自动创建&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; get_authorization&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$secretId&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$secretKey&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$qSignStart&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$qSignEnd&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$fileUri&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$headers&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;{
    &lt;span class=&quot;co&quot;&gt;/* &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * 计算COS签名&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * 2018-05-17&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * author:cinlap &amp;lt;cash216@163&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * ref:https://cloud.tencent.com/document/product/436/7778&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    */&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;$qSignTime&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$qSignStart&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$qSignEnd&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//unix_timestamp;unix_timestamp&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$qKeyTime&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$qSignTime&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;$header_list&lt;/span&gt; = get_q_header_list&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//如果 Uri 中带有 ?的请求参数，该处应为数组排序后的字符串组合&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$url_param_list&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//compute signature&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$httpMethod&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;'put'&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$httpUri&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$fileUri&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//与 q-url-param-list 相同&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$httpParameters&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$url_param_list&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//将自定义请求头分解为 &amp;amp; 连接的字符串&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$headerString&lt;/span&gt; = get_http_header_string&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$headers&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 计算签名中的 signature 部分&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$signTime&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;$qSignTime&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$signKey&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;hash_hmac&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'sha1'&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$signTime&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$secretKey&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$httpString&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$httpMethod\n$httpUri\n$httpParameters\n$headerString\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$sha1edHttpString&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$httpString&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$stringToSign&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&quot;sha1&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;\n$signTime\n$sha1edHttpString\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$signature&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;hash_hmac&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'sha1'&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$stringToSign&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$signKey&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//组合结果&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;$authorization&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&quot;q-sign-algorithm=sha1&amp;amp;q-ak=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$secretId&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;amp;q-sign-time=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$qSignTime&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;amp;q-key-time=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$qKeyTime&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;amp;q-header-list=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$header_list&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;amp;q-url-param-list=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$url_param_list&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;amp;q-signature=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$signature&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;$authorization&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了测试，该方法参数应该是多过需要了，前六个参数是已经给出的，是来自用户的，因此直接赋值即可&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;$authorization = &quot;q-sign-algorithm=sha1&amp;amp;q-ak=$secretId&amp;amp;q-sign-time=$qSignTime&amp;amp;q-key-time=$qKeyTime...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;q-header-list&lt;br/&gt;这个值需要计算，逻辑是&lt;code&gt;从HTTP请求头中，选择全部或部分，将每项的key转化为小写并按字典排序，最终输出成字符串，多个key用字符 ; 连接&lt;/code&gt;。代码如下&lt;br/&gt;```php&lt;br/&gt;/**&lt;/li&gt;
&lt;/ol&gt;&lt;ul readability=&quot;1.5&quot;&gt;&lt;li&gt;按COS要求对header_list内容进行转换&lt;/li&gt;
&lt;li&gt;提取所有key&lt;/li&gt;
&lt;li&gt;字典排序&lt;/li&gt;
&lt;li&gt;key转换为小写&lt;/li&gt;
&lt;li&gt;多对key=value之间用连接符连接&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;*/&lt;br/&gt;function get_q_header_list($headers){&lt;br/&gt;if(!is_array($headers)){&lt;br/&gt;return false;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;try{&lt;br/&gt;$tmpArray = array();&lt;br/&gt;foreach( $headers as $key=&amp;gt;$value){&lt;br/&gt;array_push($tmpArray, strtolower($key));&lt;br/&gt;}&lt;br/&gt;sort($tmpArray);&lt;br/&gt;return implode(';', $tmpArray);&lt;br/&gt;}&lt;br/&gt;catch(Exception $error){&lt;br/&gt;return false;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;code&gt;本例中，HTTP请求头是三个，因此输出结果应该是&lt;/code&gt;host;x-cos-content-sha1;x-cos-storage-class```，和官方给出结果一致。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;q-url-param-list&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上面讲过，这个值是HTTP请求参数，对于PUT方法没有?后参数，自然值为0，所以代码中“偷懒”直接给了空字符串，实际应该根据用户给的URI做个智能判断之类的，但是想想从逻辑上不做也行。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;最后重点是计算 Signature&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;算法官方已经给出了，PHP还是很幸福的直接拿来用，先看一下 &lt;code&gt;$httpString&lt;/code&gt; 的组成。由四个部分组成 &lt;code&gt;$httpMethod&lt;/code&gt;、 &lt;code&gt;$httpUri&lt;/code&gt;、 &lt;code&gt;$httpParameters&lt;/code&gt;、 &lt;code&gt;$headerString&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;组合输出&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;至此，请求签名中7个值都有了，有的是来自用户信息，有的需要计算，需要计算的上面也给出了所有的计算方法和为什么如此计算的个人理解。最后只需要按照官方要求进行输出即可。看一下🌰，在PostMan中选择Post方法，选择form-data方式提交数据，在Body中给出所有用户参数（这个地方为了测试算法是否与官方一直，所以几乎所有的值都是Post提交上去的，实际时间、Host都可以在算法中创建）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/23329/201805/23329-20180517213147076-1896748745.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;提交后，返回结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/23329/201805/23329-20180517213324979-1689434972.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;字很小，单独把结果提取出来&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;q-sign-algorithm=sha1&amp;amp;q-ak=AKIDQjz3ltompVjBni5LitkWHFlFpwkn9U5q&amp;amp;q-sign-time=1417773892;1417853898&amp;amp;q-key-time=1417773892;1417853898&amp;amp;q-header-list=host;x-cos-content-sha1;x-cos-storage-class&amp;amp;q-url-param-list=&amp;amp;q-signature=14e6ebd7955b0c6da532151bf97045e2c5a64e10&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Host&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;bucket1-1254000000.cos.ap-beijing.myqcloud.com&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;12000&quot;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Host和Content-Length是我自定义输出，主要是看&lt;code&gt;Authorization&lt;/code&gt;部分，和官方文档给出的结果值完全一致，说明算法逻辑正确。&lt;/p&gt;
&lt;h2 id=&quot;吐槽&quot;&gt;吐槽&lt;/h2&gt;
&lt;p&gt;之前 C# 做过一次对接口的研究，死活不行，最后通过腾讯技术支持提供的AWS的SDK调用成功，真是心累。本次需要用PHP做项目，必须要攻克，本来不应该多难，必须要为自己的智力和年龄讨个说法。不过还是想再次吐槽官方文档，看似详尽，顺序前后不够一致，示例代码细节比如参数不够统一，造成新手容易误解怎么前后对不上，对一些细节和前后逻辑不能第一时间融汇贯通。比如我自己，就是再次研究接口时，才理解里边关于&lt;code&gt;[SignHeaderList]&lt;/code&gt;等和计算&lt;code&gt;[Signature]&lt;/code&gt;有什么关联。&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 13:37:00 +0000</pubDate>
<dc:creator>Cinlap Soft</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cinlap/p/9052705.html</dc:identifier>
</item>
<item>
<title>Java开源生鲜电商平台-账单模块的设计与架构(源码可下载） - 巨人大哥</title>
<link>http://www.cnblogs.com/jurendage/p/9053417.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jurendage/p/9053417.html</guid>
<description>&lt;p&gt;&lt;strong&gt;Java开源生鲜电商平台-账单模块的设计与架构(源码可下载）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;补充说明：&lt;strong&gt;Java开源生鲜电商平台-账单模块的设计与架构，即用户的账单形成过程。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于系统存在一个押账功能的需求，（何为押账，就是形成公司的资金池，类似摩拜单车，ofo单车等等）。目前B2B平台也是采用押账的这种功能策略。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里有个特别说明的押账方式：就是比如有个卖家张三，他是5月1日跟我们平台签约开始入住平台卖菜，我们约定好押账7天，那么他5月1日的金额会在5月2日存入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;他自己的余额里面，但是这个钱不能马上提取出来，需要等一个星期，&lt;span&gt;也就是5月8日可以提现5月1日的金额，5月9日可以提现5月2日以前的所有金额。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;这个算法的最大好处就是永远的压住客户7天的金额。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个算法采用的是Spring quartz定时器每天晚上23:00点处理的。&lt;/p&gt;
&lt;p&gt;相关核心的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 任务工作
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; wangfucai
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TasksQuartz{
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger=LoggerFactory.getLogger(TasksQuartz.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BillService billService;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; SellerService sellerService;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DeliveryIncomeService deliveryIncomeService;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; BuyerService buyerService;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OrderInfoService orderInfoService;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; GroupsBuyerService groupsBuyerService;
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 计算每天账单
     * 每天23点执行
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Scheduled(cron&lt;/span&gt;=&quot;0 0 23 * * ?&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; makeBill(){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            logger.info(&lt;/span&gt;&quot;TasksQuartz.execute.start&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;统计当天的交易完成的订单生成账单&lt;/span&gt;
&lt;span&gt;            billService.addBills();
            logger.info(&lt;/span&gt;&quot;账单数据更新完成&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据卖家抽点金额更新账单实际金额&lt;/span&gt;
&lt;span&gt;            billService.updateRealAmountByPercentage();
            logger.info(&lt;/span&gt;&quot;根据卖家抽点金额更新账单实际金额完成&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新卖家余额&lt;/span&gt;
&lt;span&gt;            sellerService.updateBalanceByBill();
            logger.info(&lt;/span&gt;&quot;卖家余额数据更新完成&quot;&lt;span&gt;);
            logger.info(&lt;/span&gt;&quot;TasksQuartz.execute.end&quot;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception ex)
        {
            logger.error(&lt;/span&gt;&quot;TasksQuartz.execute.exception&quot;&lt;span&gt;,ex);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;补充说明：1.需要统计每个卖家今天的收入。&lt;/p&gt;
&lt;p&gt;                  2.并行的需要把订单的数据存入账单表。&lt;/p&gt;
&lt;p&gt;                  3.余额来源于账单表。形成一个数据的流转体现。&lt;/p&gt;

&lt;p&gt;账单表的表结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/641237/201805/641237-20180517211449884-1101676858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;补充说明：每天定时器会根据卖家的账期形成账单，最终更新到用卖家的余额里面。&lt;/p&gt;
&lt;p&gt;                  实际运营情况来讲是每个卖家的账期是不一样的，有的两天，有的三天，有的一周，有的是一个月。&lt;/p&gt;

&lt;p&gt;相关核心算法与代码如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 统计10天前的账单更新卖家余额和账单金额
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateMoney() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取10天前的日期d&lt;/span&gt;
        String day = DateUtil.dateToString(DateUtil.addDay(&lt;span&gt;new&lt;/span&gt; Date(), -9&lt;span&gt;), DateUtil.FMT_DATE);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查询十天前的所有帐单信息&lt;/span&gt;
        List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; list =&lt;span&gt; billDao.getBillsByDay(day);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (CollectionUtils.isEmpty(list)) {
            logger.info(&lt;/span&gt;&quot;TasksQuartz.updateMoney.isEmpty--&amp;gt;day:&quot; +&lt;span&gt; day);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Map&amp;lt;String, Object&amp;gt;&lt;span&gt; map : list) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 卖家ID&lt;/span&gt;
            Long sellerId = (Long) map.get(&quot;sellerId&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sellerId == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取提现的金额即最终账单的金额&lt;/span&gt;
            BigDecimal realityMoney = (BigDecimal) map.get(&quot;realIncome&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (realityMoney == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取卖家的余额&lt;/span&gt;
            BigDecimal balanceMoney = (BigDecimal) map.get(&quot;balanceMoney&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (balanceMoney == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                balanceMoney &lt;/span&gt;=&lt;span&gt; BigDecimal.ZERO;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取卖家的账单金额&lt;/span&gt;
            BigDecimal billMoney = (BigDecimal) map.get(&quot;billMoney&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (billMoney == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                billMoney &lt;/span&gt;=&lt;span&gt; BigDecimal.ZERO;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 金额相加&lt;/span&gt;
            BigDecimal resultBalanceMoney =&lt;span&gt; realityMoney.add(balanceMoney);

            BigDecimal resultBillMoney &lt;/span&gt;=&lt;span&gt; realityMoney.add(billMoney);

            logger.info(&lt;/span&gt;&quot;当前用户sellerId:&quot; + sellerId + &quot; 当前的余额为：balanceMoney=&quot; +&lt;span&gt; balanceMoney
                    &lt;/span&gt;+ &quot; 最终金额：resultBalanceMoney=&quot; +&lt;span&gt; resultBalanceMoney);

            logger.info(&lt;/span&gt;&quot;当前的余额为：billMoney=&quot; + billMoney + &quot; 最终金额：resultBillMoney=&quot; +&lt;span&gt; resultBillMoney);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 更新卖家余额和账单金额&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; result =&lt;span&gt; sellerDao.updateMoney(sellerId, resultBalanceMoney, resultBillMoney);
            logger.info(&lt;/span&gt;&quot;当前用户sellerId:&quot; + sellerId + &quot; 更新结果为：&quot; + (result &amp;gt; 0&lt;span&gt;));
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 更新十天前的所有账单的状态&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; count =&lt;span&gt; billDao.updateStatus(day);
        logger.info(&lt;/span&gt;&quot; 更新&quot; + count + &quot;条账单，状态变为已结算&quot;&lt;span&gt;);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;业务说明：&lt;/p&gt;
&lt;p&gt;                  1. 无外乎每天需要统计卖家的今日收益情况。&lt;/p&gt;
&lt;p&gt;                  2. 更新卖家的最终余额。&lt;/p&gt;
&lt;p&gt;                  3.  根据卖家的所设置的账单周期，形成用户的账单金额。&lt;/p&gt;
&lt;p&gt;                  4. 最终根据账单金额，形成用户的可提现余额的过程。&lt;/p&gt;
&lt;p&gt;            业务有点绕口，但是整体是非常地清晰的，思路就是押用户所配置的账期金额。配置10天就压10天，配置15天就压15天。&lt;/p&gt;

&lt;p&gt;以下是账单跟卖家的核心关联表，就是配置所属的卖家对应的所属账期时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/641237/201805/641237-20180517212124415-1664681088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;总结：整个技术方面其实都不算复杂，主要是业务逻辑以及统计的一些概念，希望这些定时器计算，账单思路形成，架构方面能给大家一些帮助。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java开源生鲜电商平台-账单模块的设计与架构(源码可下载），如果需要下载的话，可以在我的github下面进行下载。&lt;/strong&gt; &lt;/p&gt;

</description>
<pubDate>Thu, 17 May 2018 13:25:00 +0000</pubDate>
<dc:creator>巨人大哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jurendage/p/9053417.html</dc:identifier>
</item>
</channel>
</rss>