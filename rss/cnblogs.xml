<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Windows编程之进程遍历(C++实现) - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/8159426.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/8159426.html</guid>
<description>&lt;p&gt;&lt;span&gt;PS: 主要扣代码使用,直接滑动到最下面使用.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;遍历进程需要几个API,和一个结构体&lt;/p&gt;
&lt;p&gt;　　1.创建进程快照&lt;/p&gt;
&lt;p&gt;　　2.遍历首次进程&lt;/p&gt;
&lt;p&gt;　　3.继续下次遍历&lt;/p&gt;
&lt;p&gt;　　4.进程信息结构体&lt;/p&gt;
&lt;p&gt;API 分别是:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.创建进程快照&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HANDLE WINAPI CreateToolhelp32Snapshot(　　　　　　进程快照API
  DWORD dwFlags,       　　　　　　　　　　　　　　　 遍历的标志,表示你要遍历什么(进程,模块,堆...)
  DWORD th32ProcessID  　　　　　　　　　　　　　　   遍历的进程ID,如果为0,则是当前进程,如果不为0,则是创建指定进程的快照进行遍历
);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意,创建进程快照需要包含头文件  &lt;span&gt;Tlhelp32.h&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;返回值:&lt;/p&gt;
&lt;p&gt;　　成功返回快照句柄&lt;/p&gt;
&lt;p&gt;　　失败返回 INVALID_HANDLE_VALUE&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.遍历首次进程.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;syntax&quot;&gt;
&lt;strong&gt;BOOL WINAPI Process32First(
  HANDLE&lt;/strong&gt;&lt;em&gt; &lt;a class=&quot;synParam&quot;&gt;hSnapshot&lt;/a&gt;&lt;/em&gt;&lt;strong&gt;,      　　　　进程快照句柄&lt;/strong&gt;
&lt;strong&gt;  LPPROCESSENTRY32&lt;/strong&gt;&lt;em&gt; &lt;a class=&quot;synParam&quot;&gt;lppe&lt;/a&gt;  　　　　传入进程信息结构体,系统帮你填写.&lt;/em&gt;
&lt;strong&gt;);&lt;br/&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;pre class=&quot;syntax&quot;&gt;
&lt;strong&gt;进程信息结构体&lt;/strong&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
typedef struct&lt;span&gt; tagPROCESSENTRY32 { 
  DWORD dwSize; 　　　　　　　　　　　　　　进程信息结构体大小,首次调用之前必须初始化
  DWORD cntUsage; 　　　　　　　　　　　　 引用进程的次数,引用次数为0时,则进程结束
  DWORD th32ProcessID; 　　　　　　　　　　进程的ID
  ULONG_PTR th32DefaultHeapID; 　　　　  进程默认堆的标识符,除工具使用对我们没用
  DWORD th32ModuleID;                  进程模块的标识符
  DWORD cntThreads; 　　　　　　　　　　  进程启动的执行线程数
  DWORD th32ParentProcessID;           父进程ID
  LONG  pcPriClassBase; 　　　　　　　　 进程线程的基本优先级
  DWORD dwFlags; 　　　　　　　　　　　　 保留
  TCHAR szExeFile[MAX_PATH];          进程的路径
} PROCESSENTRY32; 
typedef PROCESSENTRY32 *PPROCESSENTRY32; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&quot;syntax&quot;&gt;
&lt;br/&gt;对我们有用的就是 &lt;br/&gt;dwSize　　　　　　　　 初始化结构体的大小&lt;br/&gt;th32ProcessId       进程ID&lt;br/&gt;szExeFile[MAX_PATH] 进程路径&lt;p&gt;&lt;span&gt;3.遍历下一次进程&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;
&lt;pre class=&quot;syntax&quot;&gt;
&lt;strong&gt;BOOL WINAPI Process32Next(
  HANDLE&lt;/strong&gt;&lt;em&gt; &lt;a class=&quot;synParam&quot;&gt;hSnapshot&lt;/a&gt;&lt;/em&gt;&lt;strong&gt;,      　　进程句柄&lt;/strong&gt;
&lt;strong&gt;  LPPROCESSENTRY32&lt;/strong&gt;&lt;em&gt; &lt;a class=&quot;synParam&quot;&gt;lppe&lt;/a&gt;     进程信息结构体&lt;/em&gt;
&lt;strong&gt;);&lt;/strong&gt;
&lt;/pre&gt;
&lt;pre class=&quot;syntax&quot;&gt;
&lt;strong&gt;&lt;br/&gt;兼容代码&lt;br/&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
#include &amp;lt;windows.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;Tlhelp32.h&amp;gt;
&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt;*&lt;span&gt; argv[])
{
    HANDLE hSnapshot &lt;/span&gt;= CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (INVALID_HANDLE_VALUE ==&lt;span&gt; hSnapshot)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    PROCESSENTRY32 pi; 
    pi.dwSize &lt;/span&gt;= &lt;span&gt;sizeof&lt;/span&gt;(PROCESSENTRY32); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一次使用必须初始化成员&lt;/span&gt;
    BOOL bRet = Process32First(hSnapshot,&amp;amp;&lt;span&gt;pi);
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (bRet)
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        循环遍历添加自己的额外代码
        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    
        bRet &lt;/span&gt;= Process32Next(hSnapshot,&amp;amp;&lt;span&gt;pi);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自己写的测试输出代码.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;windows.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;Tlhelp32.h&amp;gt;
&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt;*&lt;span&gt; argv[])
{
    HANDLE hSnapshot &lt;/span&gt;= CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (INVALID_HANDLE_VALUE ==&lt;span&gt; hSnapshot)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    PROCESSENTRY32 pi; 
    pi.dwSize &lt;/span&gt;= &lt;span&gt;sizeof&lt;/span&gt;(PROCESSENTRY32); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一次使用必须初始化成员&lt;/span&gt;
    BOOL bRet = Process32First(hSnapshot,&amp;amp;&lt;span&gt;pi);
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (bRet)
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        循环遍历添加自己的额外代码
        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;    
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进程ID = %d ,进程路径 = %s\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,pi.th32ProcessID,pi.szExeFile);
        bRet &lt;/span&gt;= Process32Next(hSnapshot,&amp;amp;&lt;span&gt;pi);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201712/1197364-20171231233718320-1470983258.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;pre class=&quot;syntax&quot;&gt;
&lt;strong&gt; &lt;/strong&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 31 Dec 2017 15:38:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/8159426.html</dc:identifier>
</item>
<item>
<title>spring boot + Thymeleaf开发web项目 - 钧阳</title>
<link>http://www.cnblogs.com/junyang/p/8159383.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/junyang/p/8159383.html</guid>
<description>&lt;p&gt;“Spring boot非常适合Web应用程序开发。您可以轻松创建自包含的HTTP应用。web服务器采用嵌入式Tomcat，或者Jetty等。大多数情况下Web应用程序将使用&lt;/p&gt;
&lt;p&gt;spring-bootstarter-web模块快速启动和运行。”&lt;/p&gt;
&lt;p&gt;本例子通过显示用户列表展示如何使用spring boot和Thymeleaf开发web项目。&lt;/p&gt;

&lt;p&gt;几点说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; Spring boot开发web项目，通常打成jar包，使用内置的web服务器 Tomcat、Jetty、undertow 来运行。&lt;/li&gt;
&lt;li&gt; 静态资源（css、js、图片等）默认放在resources/static下面。如果要修改默认存放目录，可以通过设置属性 &lt;strong&gt;spring.mvc.static-path-pattern&lt;/strong&gt;来实现。&lt;/li&gt;
&lt;li&gt;模板文件默认放在 templates目录下&lt;/li&gt;
&lt;li&gt; Spring boot支持使用模板来开发web应用，支持的模板类型包括
&lt;ul&gt;&lt;li&gt;FreeMarker&lt;/li&gt;
&lt;li&gt;Groovy&lt;/li&gt;
&lt;li&gt;Thymeleaf&lt;/li&gt;
&lt;li&gt;Mustache&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Spring boot不建议使用jsp开发web。&lt;/p&gt;
&lt;p&gt;本文使用Thymeleaf来作为模板引擎开发web项目。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Thymeleaf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Thymeleaf是一个Java模板引擎开发库，可以处理和生成HTML、XML、JavaScript、CSS和文本，在Web和非Web环境下都可以正常工作。&lt;/p&gt;
&lt;p&gt;Thymeleaf可以跟Spring boot很好的集成。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Spring Boot+Thymeleaf开发web&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;创建spring boot项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/732517/201712/732517-20171231231228304-1520065316.png&quot; alt=&quot;&quot; width=&quot;587&quot; height=&quot;513&quot;/&gt;&lt;/p&gt;

&lt;p&gt;选择spring boot和依赖 ，注意需要的依赖包括web和Thymeleaf&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/732517/201712/732517-20171231231253210-489813301.png&quot; alt=&quot;&quot; width=&quot;571&quot; height=&quot;511&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 点击finish。创建的项目结构如下：&lt;/p&gt;
&lt;p&gt;其中SpringBootWebApplication.java是自动生成的。是程序启动入口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/732517/201712/732517-20171231231423023-396247515.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;生成的POM.xml文件如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.yuny&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;myweb&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Spring-boot-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;web project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.5.9.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;增加实体User&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String age;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String address;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略get和set方法、构造函数&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;增加UserController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
@RequestMapping(&lt;/span&gt;&quot;/user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {
    
    @RequestMapping(&lt;/span&gt;&quot;/{id}&quot;&lt;span&gt;) 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String  getUser(@PathVariable Integer id,Model model) {
        
        model.addAttribute(&lt;/span&gt;&quot;user&quot;,&lt;span&gt;new&lt;/span&gt; User(id,&quot;张三&quot;,20,&quot;中国广州&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;/user/detail&quot;&lt;span&gt;;
    }
    
    @RequestMapping(&lt;/span&gt;&quot;/list&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String  listUser(Model model) {
        List&lt;/span&gt;&amp;lt;User&amp;gt; userList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;User&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt;10; i++&lt;span&gt;) {
            userList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(i,&quot;张三&quot;+i,20+i,&quot;中国广州&quot;&lt;span&gt;));
        }
        
        model.addAttribute(&lt;/span&gt;&quot;users&quot;&lt;span&gt;, userList);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;/user/list&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;增加模版文件list.html，注意模版文件是放在tempplates目录下。本案例将文件放在/templates/user/下面。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;xmlns:th&lt;/span&gt;&lt;span&gt;=&quot;http://www.thymeleaf.org&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Insert title here&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户列表&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li  &lt;/span&gt;&lt;span&gt;th:each&lt;/span&gt;&lt;span&gt;=&quot;user:${users}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;th:text&lt;/span&gt;&lt;span&gt;=&quot;${user.id}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;-
             &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;th:text&lt;/span&gt;&lt;span&gt;=&quot;${user.name}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;-
             &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;th:text&lt;/span&gt;&lt;span&gt;=&quot;${user.age}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;-
             &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;th:text&lt;/span&gt;&lt;span&gt;=&quot;${user.address}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动&lt;/p&gt;
&lt;p&gt;以application方式启动SpringBootWebApplication.java&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/732517/201712/732517-20171231231824023-366405602.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 访问&lt;a href=&quot;http://localhost:8080/user/list&quot;&gt;http://localhost:8080/user/list&lt;/a&gt; ，效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/732517/201712/732517-20171231231841570-487193040.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;Spring boot开发web项目非常简单，对模版的支持也很到位。Thymeleaf模版引擎跟el表达式很相似，所以从jsp过度到使用Thymeleaf 并不是太难的事。&lt;/p&gt;

&lt;p&gt;本文案例代码下载地址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/junyanghuang/spring-boot-samples/tree/master/Spring-boot-web&quot;&gt;https://github.com/junyanghuang/spring-boot-samples/tree/master/Spring-boot-web&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 31 Dec 2017 15:19:00 +0000</pubDate>
<dc:creator>钧阳</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/junyang/p/8159383.html</dc:identifier>
</item>
<item>
<title>2017 年终总结 —— 在路上 - 牧云云</title>
<link>http://www.cnblogs.com/MuYunyun/p/8159340.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MuYunyun/p/8159340.html</guid>
<description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://muyunyun.cn/posts/b9cd3f63/&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不久前年会主题征集活动中，我提交的主题是《在路上》，和骑手们一样，我们亦不是在路上呢？&lt;/p&gt;
&lt;p&gt;恰逢踏入社会一年之际写下第一篇年终总结，百感交集，有初融入团队的喜悦、有独自完成需求的兴奋、有一次次团建的畅饮也有过为自己能力不足的懊恼以及与好友离别的感伤。&lt;/p&gt;
&lt;p&gt;通过这篇总结，希望能记录些琐事，并给 2018 年的自己定下 promise。&lt;/p&gt;
&lt;h3 id=&quot;启程&quot;&gt;启程&lt;/h3&gt;
&lt;p&gt;按捺不住走出校园的兴奋，走入我达新世界的大门。当时未进公司的时候，在朋友圈中看到的小伙伴们的照片，当时心中一阵惊叹，&quot;这么帅！！要拖后腿了&quot;，不曾想到后来几个月和每个人发生的故事，已然成为生命中不可或缺的色彩了。时隔一年当再次回味这张照片时，似乎里面藏着初心。&lt;/p&gt;
&lt;p&gt;&lt;embed src=&quot;http://oqhtscus0.bkt.clouddn.com/dd07286ed73f1c2f6091521254b9abf5.jpg-300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;春节结束后公司如期举行了年会，我在倒数第二个节目中独奏了二胡~，前端部门的年会中奖率也是全公司最高的，一度让其他部门的人说是改了脚本o(╯□╰)o。运气也是实力的一部分吧，不过我没有中奖。再接着是为期 15 天的小黑屋封闭式开发快递模块，这也是我第一次感觉到了挫败感，让&lt;a href=&quot;http://blog.5udou.cn/&quot;&gt;林师傅&lt;/a&gt;帮填了好多坑。期间李开复老师来参观我们公司，我也跑去趁了张合照。同时迎来了陪我渡过短暂岁月的小伙伴虾球。一只可爱的猫咪。现在在新主人家过得很好。&lt;/p&gt;
&lt;h3 id=&quot;batman-hawkeye&quot;&gt;batman &amp;amp;&amp;amp; hawkeye&lt;/h3&gt;
&lt;p&gt;在往后的一段时间，前端部门内部进行了更细致的分工划分，我被划分到了直营业务组，主要负责 batman(客服关系系统) 以及 hawkeye(运维系统)的开发与维护，期间经历了并参与了 batman、hawkeye 的技术栈迭代，从老鹰眼的 reflux 到 redux，以及 batman 网关独立抽离成一个 ts 项目。为了更好的熟悉 react 全家桶的工作流程，五月份的时候在仿照 batman 和 hawkeye 写了个 &lt;a href=&quot;https://github.com/MuYunyun/reactSPA&quot;&gt;demo&lt;/a&gt;，现在收获了几百的 Star，也算今年的一大收获吧。o(╯□╰)o&lt;/p&gt;
&lt;p&gt;下面谈谈今年在做项目的收获和成长：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先是带我进入了奇妙的 React 技术栈 和 ES6 世界，对相关的知识点进行了实践；&lt;/li&gt;
&lt;li&gt;能合理对组件进行拆分；&lt;/li&gt;
&lt;li&gt;对 JS 异步流程有了一定认知；&lt;/li&gt;
&lt;li&gt;对底层组件的设计有了一定的认知；&lt;/li&gt;
&lt;li&gt;对 git 多人合作的流程有了一定的实践；&lt;/li&gt;
&lt;li&gt;在遇到不懂的知识时学会进行翻相关文档以及阅读源码；&lt;/li&gt;
&lt;li&gt;最后在 npm 上尝试发布了&lt;a href=&quot;https://github.com/MuYunyun/diana&quot;&gt;第一个包&lt;/a&gt;，并用到了 batman 中;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;谈完收获再来谈谈不足：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;知识点体系没有梳理成网，比较零散；&lt;/li&gt;
&lt;li&gt;知识面广度和深度都还欠缺;&lt;/li&gt;
&lt;li&gt;在项目优化的层面没有特别上心;&lt;/li&gt;
&lt;li&gt;在和别人交谈时，抓重点能力以及逻辑整合能力有待加强；&lt;/li&gt;
&lt;li&gt;效率不足，容易被琐事影响；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;高山仰止&quot;&gt;高山仰止&lt;/h3&gt;
&lt;p&gt;分享一位同行的博客中让我感慨良多的话：&lt;code&gt;行远自迩，登高自卑&lt;/code&gt;。在写这篇总结前我曾以为这句话是说当你登高的途中看到比你站在更高更远处的人的时候会产生自卑感，现在不经莞尔一笑，&lt;code&gt;风起于青萍之末，浪成于微澜之间&lt;/code&gt;，那些让我高高仰望的人不正是有着一颗常人难能企及的大毅力和大心脏吗？而我呢，希望能离那群人能近一点是一点吧。想到现在负责的项目名为 batman，突然谐音想到了 better-man。新年计划做一个让别人靠得住的 better-man。&lt;/p&gt;
&lt;h3 id=&quot;番外随笔&quot;&gt;番外随笔&lt;/h3&gt;
&lt;p&gt;今年刷了好多动漫，整体偏热血、玄幻类型，也入了 B 站刷了几部小清新动漫，如四月是你的谎言、宝石之国~，和朋友一起刷了几部有意义的电影，比如爱乐之城、寻梦环游记~；另外从 4 月份开始使用网易云音乐来，累计听了七八千首歌吧，基本码代码的时候都会带着耳机~，以英文歌、民谣为主，&lt;a href=&quot;https://music.163.com/#/user/home?id=472504060&quot;&gt;我的歌单如下&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;在游戏方面发挥稳定，王者荣耀上了最强王者以及为团队拿下个冠军，不过感觉花了太多时间在上面，浪费了不少原定的计划~，不过也算是青春的成长吧。公司年假即将会去曼巴玩上一段时间，也将算是我第一次出国。&lt;/p&gt;
&lt;p&gt;看书方面主要是技术类的，大概阅读了 6、7 本，这个比较尴尬了，看书看得慢而且看过的知识点也不是完全吃透了，新年期待改善。个人产出方面也比较低产，翻译文章和原创文章加起来十几篇~，我把它们集合在了 &lt;a href=&quot;https://github.com/MuYunyun/blog&quot;&gt;blog&lt;/a&gt;这个项目里。不过也有值得高兴的事，搭建了自己的博客，并且写文章的深度自己感觉有所提高(虽然依然菜)。然后很遗憾的是今年的技术交流会一场也没参加成，怪自己的消息不灵通加上水平的不足。&lt;/p&gt;
&lt;h3 id=&quot;总结展望篇&quot;&gt;总结展望篇&lt;/h3&gt;
&lt;p&gt;这部分是对自己打算要成为一个 better-man 的一个 promise 吧。就结合文章中提到的不足点进行相应的改善(自己想到解决方案的先记下来了)，也就是新年的计划。望监督。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;知识点碎片化&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;对已有的知识点进行思维脑图的整理，对将来的知识点也采取思维脑图的方式进行学习&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td align=&quot;center&quot;&gt;知识面广度和深度欠缺&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;参与到一个千星 Star 的开源项目的改善，提高阅读源码的能力，阅读 6 本技术书籍，阅读 1 本非技术书籍&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td align=&quot;center&quot;&gt;项目优化方面没有用心&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;课外学习积累相关方面知识并尝试用到公司项目中&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;&gt;没去成技术交流会&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;带有目的性地参加 1 到 2 场前端技术交流会&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;沟通能力不足&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;避免讲话结巴，加强语言组织能力和逻辑能力，没想清楚问题之前不要轻易回答&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;效率不足&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;加强自己的自控能力，规定的时间做规定的事情，做到按时起睡，不晚于 8 点半起床&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Sun, 31 Dec 2017 15:06:00 +0000</pubDate>
<dc:creator>牧云云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MuYunyun/p/8159340.html</dc:identifier>
</item>
<item>
<title>2017~回顾分享 - jaak_yatoo</title>
<link>http://www.cnblogs.com/jaakyatoo/p/8159327.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jaakyatoo/p/8159327.html</guid>
<description>&lt;p&gt;&lt;strong&gt;# 关于后端架构设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  关注了大半年的微服务架构，现在感觉有些力不从心。IT行业的技术累积，需要时间和不断沉淀。&lt;/p&gt;
&lt;p&gt;  对于服务架构方面设计，这一年心路成长历程：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  支付宝&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;  先看看业内最强的支付宝系统，支付宝的支付系统整体架构设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2017.cnblogs.com/blog/1124214/201712/1124214-20171231225031257-184718259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1124214/201712/1124214-20171231225055960-1048510073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1124214/201712/1124214-20171231225115351-1265615162.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;京东金融&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;来自京东支付平台总体架构设计 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz_png/qkBRxAX6WnrOrkglDU8HTLeNFMxQe1VJiaF2iamyqrr9KWbobloftHKiaeQiblzk9d9nNZGymicK38GQUKwFkW1mpfQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot; data-src=&quot;http://mmbiz.qpic.cn/mmbiz_png/qkBRxAX6WnrOrkglDU8HTLeNFMxQe1VJiaF2iamyqrr9KWbobloftHKiaeQiblzk9d9nNZGymicK38GQUKwFkW1mpfQ/0?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6429056347589952&quot; data-w=&quot;1473&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;京东金融是在网银在线的基础上发展起来的。 网银在线的原班技术人员有不少来自易宝公司，在京东收购之后，又引入了支付宝的人才。因而从架构上受这两个公司的影响很大。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 去哪儿&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;来自去哪儿公司分享的支付产品架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1124214/201712/1124214-20171231225338835-896072879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;支付系统从架构上来说，分为三层;&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;支撑层： 用来支持核心系统的基础软件包和基础设施， 包括运维监控系统、日志分析系统等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;核心层： 支付系统的核心模块，内部又分为两个部分： 支付核心模块以及支付服务模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;产品层： 通过核心层提供的服务组合起来，对最终用户、商户、运营管理人员提供的系统。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;支撑系统&lt;/h2&gt;
&lt;p&gt;支撑系统是一个公司提供给支付系统运行的基础设施。 主要包括如下子系统：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;运维监控： 支付系统在下运行过程中不可避免的会受到各种内部和外部的干扰，光纤被挖断、黑客攻击、数据库被误删、上线系统中有bug等等，运维人员必须在第一时间内对这些意外事件作出响应，又不能够一天24小时盯着。这就需要一个运维监控系统来协助完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;日志分析： 日志是支付系统统计分析、运维监控的重要依据。公司需要提供基础设施来支持日志统一收集和分析。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;短信平台： 短信在支付系统中有重要作用： 身份验证、安全登录、找回密码、以及报警监控，都需要短信的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;安全机制： 安全是支付的生命线。 SSL、证书系统、防刷接口等，都是支付的必要设施。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;统计报表： 支付数据的可视化展示，是公司进行决策的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;远程连接管理、分布式计算、消息机制、全文检索、文件传输、数据存储、机器学习等，都是构建大型系统所必须的基础软件，这里不再一一详细介绍。&lt;/p&gt;
&lt;h2&gt;支付核心系统&lt;/h2&gt;
&lt;p&gt;支付核心系统指用户执行支付的核心流程，包括：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;用户从支付应用启动支付流程。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;支付应用根据应用和用户选择的支付工具来调用对应的支付产品来执行支付。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;支付路由根据支付工具、渠道费率、接口稳定性等因素选择合适的支付渠道来落地支付。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;支付渠道调用银行、第三方支付等渠道提供的接口来执行支付操作，最终落地资金转移。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;支付服务系统&lt;/h2&gt;
&lt;p&gt;支持支付核心系统所提供的功能。服务系统又分为基础服务系统、资金系统、风控和信用系统。&lt;/p&gt;
&lt;p&gt;基础服务系统提供支撑线上支付系统运行的基础业务功能：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;客户信息管理：包括对用户、商户的实名身份、基本信息、协议的管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;卡券管理： 对优惠券、代金券、折扣券的制作、发放、使用流程的管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支付通道管理: 通道接口、配置参数、费用、限额以及QOS的管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;账户和账务系统： 管理账户信息以及交易流水、记账凭证等。这里的账务一般指对接线上系统的账务，采用单边账的记账方式。 内部账记录在会计核算系统中。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;订单系统： 一般订单系统可以独立于业务系统来实现的。这里的订单，主要指支付订单。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;资金系统指围绕财务会计而产生的后台资金核实、调度和管理的系统，包括：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;会计核算： 提供会计科目、内部账务、试算平衡、日切、流水登记、核算和归档的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;资金管理： 管理公司在各个支付渠道的头寸，在余额不足时进行打款。 对第三方支付公司，还需要对备付金进行管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;清算分润： 对于有分润需求的业务，还需要提供清分清算、对账处理和计费分润功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;风控系统是支付系统必备的基础功能，所有的支付行为必须做风险评估并采取对应的措施；信用系统是在风控基础上发展的高级功能，京东的白条，蚂蚁花呗等，都是成功的案例。&lt;/p&gt;
&lt;h2&gt;支付应用&lt;/h2&gt;
&lt;p&gt;支撑系统、核心系统和服务系统，在每个公司的架构上应该是大同小异的，都是必不可少的模块。而支付应用是每个公司根据自己的业务来构建的，各不相同。 总的来说，可以按照使用对象分为针对最终用户的应用、针对商户的应用、针对运营人员的运营管理、BI和风控后台。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;# 关于前端和后端的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先前端分为 UI设计，UED用户体验设计，前端开发等等，web前端开发用到的诸多技术（JavaScript，JQuery，TypeScript，Vue，Node，ReactNative，AngularJS，CSS3，HTML5，ES6等等）我们简称这些为 类库，像构建项目的脚手架有很多（yeoman，Gulp、webpack等等）&lt;/p&gt;&lt;p&gt;这么多成熟的技术框架基本取决于你的需求，好用的框架技术有很多，某些技术适合做某个模块的功能（比如HTMl适合做web页面设计，JS更能提高HTML的交互逻辑）。一般性来说前端更注重用户的视觉敏感度，其逻辑也相对于后端更加简洁清晰明了，如果有兴趣可以选择前端开发工作。&lt;/p&gt;&lt;p&gt;后端也就是所谓的网络编程，其原理很简单（通过前端交互数据来增加业务逻辑），其用到的最为广泛的（Java，PHP，Go，ASP，.Net，C++）等等，其中Java相对于其他编程语言更适合做后端开发，学习成本较低 思想深奥，有相应成熟的技术体系和成熟的开发团体，PHP属于脚本语言，经过几个版本的迭代，现在所占市场份额不亚于Java，不过在大型系统和强大的后端逻辑里面几乎很少见，不是在恶意贬低，其开发成本和运营成本远低于java，最后就是google推出的Go语言，我个人认为go更像java的衍生版，其内在优化了许多，现在也有相应的成熟团队，开发成本和运营成本也相对较低。C# 和 .Net在2000年左右还是现对于比较火的，包括现在的新浪，腾讯，百度，京东，等等知名的公司前身都是采用这些技术。阿里巴巴旗下的淘宝，最早采用的PHP，后面慢慢转向Java，包括前面提到的那些大公司。不过说这么多，腾讯是最为奇葩的一个，整个平台运营十几年，最早的 QQ空间竟然用CGI写的，比较注重C++ 这种古老的开发语言。不过C相对其他领域的编程语言更适合做底层交互。&lt;/p&gt;&lt;p&gt;说了这么多，其实java后端现在玩的东西较多，比如Maven，Redis，Echen，Spring等等，此处有机会慢慢分享&lt;/p&gt;
&lt;p&gt;## 关于前端学习路线&lt;br/&gt;基础篇：&lt;/p&gt;
&lt;p&gt;【CSS3】 前端必学之路，起CSS3样式&lt;/p&gt;
&lt;p&gt;【HTML5】 只需记住HTML标签和作用即可&lt;/p&gt;
&lt;p&gt;【JavaScript】 作为浏览器脚本语言，必学&lt;/p&gt;
&lt;p&gt;【JQuery】至今最为流行的开发类库，必学&lt;/p&gt;
&lt;p&gt;JavaScript 设计模式 以下链接：http://www.cnblogs.com/chen-jie/p/JavaScript-Composite.html&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;最近带前端妹纸，感觉自己在技术钻研的程度上永远跟不上，大问题没有，小问题一堆，关于妹纸的想法有很多，在这里我就不隐瞒自己啦，或多或少的对妹纸有点倾慕之情，但是我已表露不出太多感情了，那种掏心掏肺的日子相信大家都有，也不会对妹纸太多的期待；只希望我能带她融入这个圈子，在这个看脸的社会为她增添一点硬实力，期待太多，失望越多，控制好自己的执念；有些时候执念这玩意儿给自己带来太多痛苦，原因都很简单 就是希望能得到，但是现实得不到的只能会给自己增添一份伤感和无情。&lt;/p&gt;

</description>
<pubDate>Sun, 31 Dec 2017 14:59:00 +0000</pubDate>
<dc:creator>jaak_yatoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jaakyatoo/p/8159327.html</dc:identifier>
</item>
<item>
<title>Spring基础篇——DI和AOP初识 - 陈本布衣</title>
<link>http://www.cnblogs.com/chenbenbuyi/p/7470834.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenbenbuyi/p/7470834.html</guid>
<description>&lt;h3&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　作为从事java开发的码农，Spring的重要性不言而喻，你可能每天都在和Spring框架打交道。Spring恰如其名的，给java应用程序的开发带了春天般的舒爽感觉。Spring，可以说是任何一个java开发者通往技术高阶的必备基础。当然，要学好Spring，尤其是了解Spring的底层原理并不容易，需要花费很多时间和精力来潜心的研习，并在实际的项目中不断的试错和总结，才能形成属于自己的思维理解。博主对Spring最初的认识颇浅，项目中遇到问题依靠度娘大概也能笼而统之的解决。不过呢，接触Spring这么一年多时间里，对&lt;span&gt;其&lt;/span&gt;框架体系认知比较杂乱，深层技术依然是雾里看花一般，没有形成自己的认知和理解，这对编程技术的提升是十分不利的。鉴于此，才决定静下心来从头至尾系统的学习Spring框架，并通过博客的形式记录学习点滴，分享技术知识，算是抛砖引玉吧。好了，闲言少叙，咱们开始切入正题——&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;Spring框架核心介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;DI(Dependency Injection),依赖注入&lt;/strong&gt;，和我们常听说的另一个概念 &lt;strong&gt;IOC(控制反转)&lt;/strong&gt;其实归根结底实现的功能是相同的，只是&lt;em&gt;同样的功能站在不同的角度来阐述罢了&lt;/em&gt;。这里博主就不去过多的辨析，度娘上有一大堆解释。我们需要知道的是，什么叫依赖注入，为什么要依赖注入。搞清这两点，我想对Spring的学习在思想上就算是上道了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在没用使用Spring的时候——也就是没有依赖注入的时候，java应用程序的类与类之间要实现相互的功能协作是比较费劲的，某个类(A)要实现它的功能如果需要依赖另一个类(B)的协作的话，就需要在A类中主动创建出B类的对象，才能使用B类的方法完成功能(这里看官就不要去纠结静态方法之类的情况了)。这等于是A类需要负责B类对象整个生命周期的管理。在极度简单的情况下，在一个类中new出另一个类的对象似乎并没有什么问题，但是复杂的应用程序类与类的协作关系往往是多边的，我们并不知道一个类功能的实现会依赖多少个另类对象来协作，所以在类中自行创建对象并且管理对象的整个生命周期，会造成代码的高度耦合以及不可想象的复杂度。&lt;span&gt;&lt;span&gt;&lt;span&gt;那么，试想，如果我们能将对象的生命周期交给第三方组件来管理，当某个类需要另外的对象时第三方组件就直接创建出来交给它，这样，类就可以只专注于自己功能的实现，而不用去管理其他类对象的生命周期，这样类的功能就单纯了很多。是的，你一定已经明白了，Spring(容器)就是这个第三方组件。我们只需要告诉Spring(容器)有哪些对象需要管理就行了，不用去关心Spring框架是如何创建对象的。这样，当某个类A需要类B对象时，如果类B已经声明交给了Sping容器管理，那么在程序运行到类A需要类B时，Spring容器就通过依赖注入的方式，将类B对象注入到类A中协助完成业务功能。通过第三方组件的依赖注入,对象无需再自行的创建和管理类与类之间的依赖关系了。对象的创建依赖注入的方式也有多种，譬如&lt;strong&gt;接口注入，构造方法注入，setter方法&lt;/strong&gt;注入等等。&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;说到这里，你对依赖注入应该有比较直白的认知了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;至于为什么要依赖注入，上文已经说得很明白了，就是为了减少代码中组件之间的耦合度，我们还是先通过简单示例来直观感受下依赖注入比自己管理对象的好处吧——&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_0ea64138-4f30-47b8-a819-4270f09cf1ef&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0ea64138-4f30-47b8-a819-4270f09cf1ef&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0ea64138-4f30-47b8-a819-4270f09cf1ef&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Man &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Human {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; QQCar car;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Man() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.car = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QQCar();
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; xiabibi() {
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; driveCar(){
        car.drive();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;   &lt;span&gt;接口Car暂有两个实现：奔驰车和QQ车，在以上Man类和QQCar类高度耦合的代码中，老司机通过构造器只创建了QQ车对象，所以只能开QQ车，那么老司机想开奔驰怎么办呢，你让他重新创建奔驰车的对象吗？这样高度耦合的代码似乎是毫无办法的，那么，我们通过注入对象的方式对上述代码做一番改进：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_052e11be-80ac-4b75-a7cd-a92546123c6e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_052e11be-80ac-4b75-a7cd-a92546123c6e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_052e11be-80ac-4b75-a7cd-a92546123c6e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Man &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Human {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Car car;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Man(Car car) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.car =&lt;span&gt; car;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; xiabibi() {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; driveCar() {
        car.drive();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　以上代码根据多态特性，通过构造器接口注入的方式屏蔽掉了具体的对象实现，这样，老司机就能想开什么车就开什么车了。这就是依赖注入带来的好处。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;AOP(Aspect Oriented Programming),面向切面编程&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;&lt;span&gt;日常开发中，我们在完成某个业务功能的时候，写了一堆代码，到最后代码优化的时候发现，真正完成业务的代码可能就那么两句，而其余都是与该部分业务相关度不大，仅仅是为了实现某种技术的代码，是完全可以抽离出去的，于是很自然的，我们会将其抽取成一个工具类，这样凡是用到的地方只需调用一下工具方法就ok了。我们再站高一点看，各个业务模块的功能组件中除了完成相关的业务功能外，都有涉及日志、事务、安全控制等额外的操作等。这些并不是模块的核心功能，却又不可或缺。如果将这些额外功能添加进代码，业务系统每个组件都来一套又显得太过重复，而且让业务代码显得混乱，不够纯粹。这个时候，你问上帝，可不可以让你的业务代码只专注于业务的实现，不去管什么日志、事务等不相干的东西？喔，上帝说没问题，于是就有了AOP。&lt;strong&gt;如果说&lt;span&gt;依赖注入的目的是让相互协作的组件保持一种较为松散的耦合状态的话，AOP则是将遍布应用各处的功能分离出来形成可重用的组件。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;通俗点说，&lt;/span&gt;&lt;span&gt;日志、事务等都是可以重用的组件，我们完全可以将分散于业务代码各处的日志、事务、安全等功能代码抽离出成为一个单独的工具组件，在Spring的配置中将其进行声明为一个功能切面，再告诉Spring你想在哪些地方、什么时机使用（切入）这些可重用组件就行了。这就是我对面向切面的简单释义。该篇只是引子，所以博主就只是简单阐述一下概念，不做具体的代码、配置实现，在会在后续的博文中将陆续奉上，欢迎拍砖。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　2017年最后一天了，想想这一年，除了年龄之外，技术、能力都成长的太慢太慢，博文更新太懒惰，很久憋不出点东西了，不善总结、学习，这对技术人员来说是致命的缺点。新的一年，当以此为戒，严格律己，每周至少应有一篇博文总结，以此为誓！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 31 Dec 2017 14:45:00 +0000</pubDate>
<dc:creator>陈本布衣</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenbenbuyi/p/7470834.html</dc:identifier>
</item>
<item>
<title>张高兴的 Xamarin.Forms 开发笔记：Android 快捷方式 Shortcut 应用 - 张高兴</title>
<link>http://www.cnblogs.com/zhanggaoxing/p/8159248.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanggaoxing/p/8159248.html</guid>
<description>&lt;h2 id=&quot;一shortcut-简介&quot;&gt;一、Shortcut 简介&lt;/h2&gt;
&lt;p&gt;Shortcut 是 Android 7.1 (API Level 25) 的新特性，类似于苹果的 3D Touch ，但并不是压力感应，只是一种长按菜单。Shortcut 是受启动器限制的，也就是说国内大厂的定制系统大多数是不支持的，那些所谓的可以 pin 在桌面上的应用功能的快捷启动图标本质上就是 Shortcut 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1085877/201712/1085877-20171231211424851-539040613.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二shortcut-在-xamarin.forms-中的实现分析&quot;&gt;二、Shortcut 在 Xamarin.Forms 中的实现分析&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;本文讨论的是动态 Shortcut 实现。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;实现方式无非两种思路，一种 &lt;strong&gt;Native to Forms&lt;/strong&gt; ，另一种 &lt;strong&gt;Forms to Native&lt;/strong&gt; 。博主最开始考虑的是 Forms to Native ，但没成功。在设置 ShortcutInfo 时需要一个 Intent ，其中一个构造函数为&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public Intent(Context packageContext, Type type);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看着很容易，只要传入一个 Content 以及 把对应的页面 typeof 一下即可，但会抛出异常。原因是传入的 Forms Page 类并不是 Java 的原生类型。查阅 Xamarin.Android 的相关文档发现，这个 Type 是必须继承 &lt;strong&gt;Activity&lt;/strong&gt; 类的。那么，所有的 Forms 页面均不可传入，Forms to Native 这条路也就不能走了。&lt;/p&gt;
&lt;p&gt;Native to Forms 呢？&lt;/p&gt;
&lt;p&gt;既然是需要依赖 Activity 的，那就通过新建一个 Android Activity 去调用 Forms 页面。&lt;/p&gt;
&lt;h2 id=&quot;三代码实现&quot;&gt;三、代码实现&lt;/h2&gt;
&lt;p&gt;下面新建一个空的 Cross-Platform 项目 ShortcutDemo ，使用 Shared Project 共享代码。（GitHub：&lt;a href=&quot;https://github.com/ZhangGaoxing/xamarin-forms-demo/tree/master/ShortcutDemo&quot; class=&quot;uri&quot;&gt;https://github.com/ZhangGaoxing/xamarin-forms-demo/tree/master/ShortcutDemo&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id=&quot;修改-shared-project&quot;&gt;修改 Shared Project&lt;/h3&gt;
&lt;p&gt;添加两个 ContentPage 用作测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1085877/201712/1085877-20171231214440054-1188500532.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;修改-xamarin.android&quot;&gt;修改 Xamarin.Android&lt;/h3&gt;
&lt;p&gt;添加两个活动，ShortcutContainerActivity.cs 与 FormsActivity.cs 。&lt;/p&gt;
&lt;h4 id=&quot;shortcutcontaineractivity.cs&quot;&gt;ShortcutContainerActivity.cs&lt;/h4&gt;
&lt;p&gt;ShortcutContainerActivity.cs 用来作为展示 Forms 页面的跳板，因此将其继承的 Activity 改成 &lt;strong&gt;global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity&lt;/strong&gt; 。同时把 OnCreate 的代码改成如下所示&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;protected override void OnCreate(Bundle savedInstanceState)
{
    TabLayoutResource = Resource.Layout.Tabbar;
    ToolbarResource = Resource.Layout.Toolbar;

    base.OnCreate(savedInstanceState);

    global::Xamarin.Forms.Forms.Init(this, savedInstanceState);
   
    Intent intent = Intent;
    // 获取传进来的页面名称
    string pageName = intent.GetStringExtra(&quot;PageName&quot;);

    var app = new App();
    // 设置显示的页面
    switch (pageName)
    {
        case &quot;Page1&quot;:
            app.MainPage = new ShortcutDemo.Views.Page1();
            break;
        case &quot;Page2&quot;:
            app.MainPage = new ShortcutDemo.Views.Page2();
            break;
        default:
            break;
    }

    LoadApplication(app);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要注意的是，顶部的 Activity 特性标签要改动，&lt;strong&gt;除了 MainLauncher 要改为 false 以外，其他的全部要和 MainActivity.cs 里的一样&lt;/strong&gt;，不然会抛出异常，可能是主题不统一的原因。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;[Activity(Label = &quot;ShortcutDemo&quot;, Icon = &quot;@drawable/icon&quot;, Theme = &quot;@style/MainTheme&quot;, MainLauncher = false, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;formsactivity.cs&quot;&gt;FormsActivity.cs&lt;/h4&gt;
&lt;p&gt;FormsActivity.cs 作为正常启动应用的活动，只是将其从 MainActivity.cs 中剥离开来。代码如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;[Activity(Label = &quot;ShortcutDemo&quot;, Icon = &quot;@drawable/icon&quot;, Theme = &quot;@style/MainTheme&quot;, MainLauncher = false, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]
public class FormsActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity
{
    protected override void OnCreate(Bundle savedInstanceState)
    {
        TabLayoutResource = Resource.Layout.Tabbar;
        ToolbarResource = Resource.Layout.Toolbar;

        base.OnCreate(savedInstanceState);

        global::Xamarin.Forms.Forms.Init(this, savedInstanceState);
        LoadApplication(new App());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;mainactivity.cs&quot;&gt;MainActivity.cs&lt;/h4&gt;
&lt;p&gt;MainActivity.cs 作为应用程序的入口，由于 Forms 的初始化以及加载已被剥离至 FormsActivity.cs 中，可将 MainActivity.cs 的继承改为 Activity 类。&lt;/p&gt;
&lt;ol readability=&quot;11.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;在其中添加一个 SetShortcut() 方法用于设置 Shortcut 。首先添加一个 List 用于存放 ShortcutInfo，以备最后动态设置 Shortcut 作为参数传入。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;List&amp;lt;ShortcutInfo&amp;gt; shortcutInfoList = new List&amp;lt;ShortcutInfo&amp;gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;接下来实例化一个 Intent 。其中 SetClass 将跳板活动 ShortcutContainerActivity 传入；&lt;strong&gt;SetAction 是必须设置的&lt;/strong&gt;，要不然报错都不知道怎么回事；PutExtra 用于向下一个活动传递参数，我们这里传入的名称用于在跳板活动里设置 MainPage 。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;Intent page1 = new Intent();
page1.SetClass(this, typeof(ShortcutContainerActivity));
page1.SetAction(Intent.ActionMain);
page1.PutExtra(&quot;PageName&quot;, &quot;Page1&quot;);&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;下面实例化 ShortcutInfo 。SetRank 为设置排序序号，最多显示5个 Shortcut ，也就是 0-4 ；SetIcon 为设置图标；SetShortLabel 与 SetLongLabel 则是设置长名称与段名称；SetIntent 则把上一步实例化的 Intent 传入；最后将其加入 List 。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;ShortcutInfo page1Info = new ShortcutInfo.Builder(this, &quot;Page1&quot;)
.SetRank(0)
.SetIcon(Icon.CreateWithResource(this, Resource.Drawable.Page1))
.SetShortLabel(&quot;Page1&quot;)
.SetLongLabel(&quot;Page1&quot;)
.SetIntent(page1)
.Build();
shortcutInfoList.Add(page1Info);&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;最后获取 ShortcutManager 进行动态设置 Shortcut&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;ShortcutManager shortcutManager = (ShortcutManager)GetSystemService(Context.ShortcutService);
shortcutManager.SetDynamicShortcuts(shortcutInfoList);&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;因此全部的 MainActivity.cs 的代码如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;[Activity(Label = &quot;ShortcutDemo&quot;, Icon = &quot;@drawable/icon&quot;, Theme = &quot;@style/MainTheme&quot;, MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]
public class MainActivity : Activity
{
    protected override void OnCreate(Bundle bundle)
    {
        base.OnCreate(bundle);

        SetShortcut();

        StartActivity(typeof(FormsActivity));
    }

    private void SetShortcut()
    {
        List&amp;lt;ShortcutInfo&amp;gt; shortcutInfoList = new List&amp;lt;ShortcutInfo&amp;gt;();

        Intent page1 = new Intent();
        page1.SetClass(this, typeof(ShortcutContainerActivity));
        page1.SetAction(Intent.ActionMain);
        page1.PutExtra(&quot;PageName&quot;, &quot;Page1&quot;);
        ShortcutInfo page1Info = new ShortcutInfo.Builder(this, &quot;Page1&quot;)
            .SetRank(0)
            .SetIcon(Icon.CreateWithResource(this, Resource.Drawable.Page1))
            .SetShortLabel(&quot;Page1&quot;)
            .SetLongLabel(&quot;Page1&quot;)
            .SetIntent(page1)
            .Build();
        shortcutInfoList.Add(page1Info);

        Intent page2 = new Intent();
        page2.SetClass(this, typeof(ShortcutContainerActivity));
        page2.SetAction(Intent.ActionMain);
        page2.PutExtra(&quot;PageName&quot;, &quot;Page2&quot;);
        ShortcutInfo page2 = new ShortcutInfo.Builder(this, &quot;Page2&quot;)
            .SetRank(1)
            .SetIcon(Icon.CreateWithResource(this, Resource.Drawable.Page2))
            .SetShortLabel(&quot;Page2&quot;)
            .SetLongLabel(&quot;Page2&quot;)
            .SetIntent(page2)
            .Build();
        shortcutInfoList.Add(page2);

        ShortcutManager shortcutManager = (ShortcutManager)GetSystemService(Context.ShortcutService);
        shortcutManager.SetDynamicShortcuts(shortcutInfoList);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四效果图&quot;&gt;四、效果图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1085877/201712/1085877-20171231222928476-1687352689.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 31 Dec 2017 14:35:00 +0000</pubDate>
<dc:creator>张高兴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhanggaoxing/p/8159248.html</dc:identifier>
</item>
<item>
<title>浅析 SpringMVC 原理和配置. - JMCui</title>
<link>http://www.cnblogs.com/jmcui/p/8124204.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jmcui/p/8124204.html</guid>
<description>&lt;h2&gt;一、原理&lt;/h2&gt;
&lt;p&gt;      Spring MVC基于模型-视图-控制器（Model-View-Controller，MVC）模式实现，它能够帮你构建像Spring框架那样灵活和松耦合的Web应用程序，将请求处理的逻辑和视图中的渲染实现解耦。&lt;/p&gt;
&lt;p&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/1153954/201712/1153954-20171227193742503-136787177.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;&lt;span class=&quot;fontstyle0&quot;&gt;DispatcherServlet&lt;span class=&quot;fontstyle1&quot;&gt;是&lt;span class=&quot;fontstyle2&quot;&gt;Spring MVC&lt;span class=&quot;fontstyle1&quot;&gt;的核心 。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;Spring MVC 中的请求页面都会委托给DispatcherServlet来执行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;DispatcherServlet需要知道将请求发送给哪个控制器,所以DispatcherServlet会查询一个或多个处理器映射（handler mapping） 来确定请求的下一站在哪里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;到了控制器（controller），请求会卸下其负载（用户提交的信息）并耐心等待控制器处理这些信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、&lt;/strong&gt;控制器在处理完成后，通常会产生一些信息，这些信息称为模型（model）。但是这个模型到底是渲染哪个页面的呢？所以控制器还会返回视图相关的东西。Spring 有个思想就是前后端分离，为了和视图解耦，所以控制器只返回了视图名。即，这里控制器返回了模型和视图名（modelAndViews）。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;tips：&lt;/strong&gt;&lt;span&gt;Model 实际上就是一个Map(也就是key-value对的集合)，它会传递给视图，这样数据就能渲染到客户端了，当调用addAttribute()方法并且不指定key的时候，那么key会根据值的对象类型推断确定，比如 List&amp;lt;Spittle&amp;gt;，那么推断他的 key 就是 spittleList。如果你希望使用非Spring类型的话，那么可以用java.util.Map来代替Model。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、&lt;/strong&gt;MVC 要怎么依靠一个视图名找到对应的视图呢？答案就是 视图解析器（view resolver）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、&lt;/strong&gt;视图解析器会返回一个视图（view），并将模型数据填充到对应的视图中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、&lt;/strong&gt;视图 （比如 JSP）。最终会被相应的容器（比如Tomcat）解析成 HTML 页面，并响应用户的请求。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;tips&lt;/strong&gt;：&lt;/span&gt;&lt;span&gt;实际上，设计良好的控制器本身只处理很少甚至不处理工作，而是将业务逻辑委托给一个或多个服务对象进行处理。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、使用 Java 配置&lt;/h2&gt;
&lt;p&gt;    按照传统的方式，像 DispatcherServlet 这样的Servlet会配置在web.xml文件中 ，但是，借助于Servlet 3规范和Spring 3.1的功能增强，这种方式已经不是唯一的方案了 。我们会使用Java将DispatcherServlet配置在Servlet容器中。开始前，我们先来理解下 DispatcherServlet 和 Servlet 监听器（也就是ContextLoaderListener） 这两个应用上下文 。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;strong&gt;DispatcherServlet 上下文&lt;/strong&gt;：当DispatcherServlet启动的时候，它会创建Spring应用上下文，并加载配置文件或配置类(即带有@configuration注解的配置类)中所声明的bean，主要是Web 组件中的 bean， 包括 控制器（controller）、映射器（handler mapping）、视图解析器（view resolver）等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;strong&gt;ContextLoaderListener 上下文：&lt;/strong&gt;这个上下文 由 &lt;span class=&quot;fontstyle0&quot;&gt;ContextLoaderListener  创建，主要负责加载应用中的其他 bean 。&lt;span class=&quot;fontstyle0&quot;&gt;这些&lt;span class=&quot;fontstyle1&quot;&gt;bean&lt;span class=&quot;fontstyle0&quot;&gt;通常是驱动应用后端的中间层和数据层组件。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle1&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;    我们通过继承 &lt;span class=&quot;fontstyle0&quot;&gt;AbstractAnnotationConfigDispatcherServletInitializer 类来配置SpringMVC，以作为传统 XML 配置的替代方案。实际上，&lt;span class=&quot;fontstyle0&quot;&gt;AbstractAnnotationConfigDispatcherServletInitializer  会 同时创建 DispatcherServlet 和 ContextLoaderListener 。当然，我们需要手动配置我们的映射路径、视图解析器 并启用组件扫描 以及一系列我们可以自定义的配置。当然，如果我们没有配置视图解析器，SpringMVC 会启用默认的视图解析器（通过查找 ID 与视图名称相匹配的Bean，并且这个Bena 要实现View 接口）。如果没有配置路径映射，DispatcherServlet会映射为应用的默认Servlet，所以它会处理所有的请求，包括对静态资源的请求，如图片和样式表等。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('38f09125-47cd-4a4a-9196-84614f79328a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_38f09125-47cd-4a4a-9196-84614f79328a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_38f09125-47cd-4a4a-9196-84614f79328a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('38f09125-47cd-4a4a-9196-84614f79328a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_38f09125-47cd-4a4a-9196-84614f79328a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SplittrWebAppInitailzer &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractAnnotationConfigDispatcherServletInitializer {
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;返回会创建ContextLoaderListener 上下文&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; Class&amp;lt;?&amp;gt;&lt;span&gt;[] getRootConfigClasses() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[]{RootConfig.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;};
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;返回会创建 DispatcherServlet 上下文&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; Class&amp;lt;?&amp;gt;&lt;span&gt;[] getServletConfigClasses() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Class&amp;lt;?&amp;gt;[]{WebConfig.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;};
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;配置路径映射&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; String[] getServletMappings() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; String[]{&quot;/&quot;&lt;span&gt;};
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;最小但可用的SpringMVC配置&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c1946341-f8c6-4316-9d9d-8f6c809d8d02')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c1946341-f8c6-4316-9d9d-8f6c809d8d02&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c1946341-f8c6-4316-9d9d-8f6c809d8d02&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c1946341-f8c6-4316-9d9d-8f6c809d8d02',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c1946341-f8c6-4316-9d9d-8f6c809d8d02&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@ComponentScan(basePackages &lt;/span&gt;= {&quot;com&quot;&lt;span&gt;},
        excludeFilters &lt;/span&gt;=&lt;span&gt; {
            @ComponentScan.Filter(type &lt;/span&gt;= FilterType.ANNOTATION,value = EnableWebMvc.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
        })
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RootConfig {
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;RootConfig.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('67a4c63e-a4a5-4e87-91e9-4a68e7e56e14')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_67a4c63e-a4a5-4e87-91e9-4a68e7e56e14&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_67a4c63e-a4a5-4e87-91e9-4a68e7e56e14&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('67a4c63e-a4a5-4e87-91e9-4a68e7e56e14',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_67a4c63e-a4a5-4e87-91e9-4a68e7e56e14&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@EnableWebMvc &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启用SpringMVC，当然也可以使用 &amp;lt;mvc:annotation-driven /&amp;gt; 注解驱动&lt;/span&gt;
@ComponentScan(basePackages = &quot;com.controller&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WebConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebMvcConfigurerAdapter {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 在查找的时候，它会在视图名称上加一个特定的前缀和后缀
     * （例如，名为home的视图将会解析为/WEB-INF/pages/home.jsp）。
     *
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ViewResolver viewResolver() {
        InternalResourceViewResolver resolver &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InternalResourceViewResolver();
        resolver.setPrefix(&lt;/span&gt;&quot;/WEB-INF/pages/&quot;&lt;span&gt;);
        resolver.setSuffix(&lt;/span&gt;&quot;.jsp&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;设置是否把所有在上下文中定义的bean作为request属性可公开访问。
          这样在JSP 2.0中可使用${}来存取，JSTL中使用c:out。
          默认为false。&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        resolver.setExposeContextBeansAsAttributes(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        resolver.setViewClass(org.springframework.web.servlet.view.JstlView.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置解析JSTL&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; resolver;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 通过调用DefaultServlet-HandlerConfigurer的enable()方法，
     * 我们要求DispatcherServlet将对静态资源的请求转发到Servlet容器
     * 中默认的Servlet上，而不是使用DispatcherServlet本身来处理此类请求
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; configurer
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
        configurer.enable();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;WebConfig.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('505cfb15-27a5-43f5-a6fe-202a84ca3f57')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_505cfb15-27a5-43f5-a6fe-202a84ca3f57&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_505cfb15-27a5-43f5-a6fe-202a84ca3f57&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('505cfb15-27a5-43f5-a6fe-202a84ca3f57',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_505cfb15-27a5-43f5-a6fe-202a84ca3f57&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
    @RequestMapping(value = {&quot;/&quot;,&quot;/home&quot;},method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getHome(Model model){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;home&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;controller&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1153954/201712/1153954-20171228091945128-1434795423.png&quot; alt=&quot;&quot;/&gt;&lt;/h2&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;添加自定义Servlet、Filter、Listener&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d3181e53-c8fb-4076-98c3-fd1420fac9bc')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_d3181e53-c8fb-4076-98c3-fd1420fac9bc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d3181e53-c8fb-4076-98c3-fd1420fac9bc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d3181e53-c8fb-4076-98c3-fd1420fac9bc',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d3181e53-c8fb-4076-98c3-fd1420fac9bc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyServlet &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HttpServlet {
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doPost(HttpServletRequest request, HttpServletResponse response) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
        doGet(request,response);
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doGet(HttpServletRequest request, HttpServletResponse response) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
        System.out.println(&lt;/span&gt;&quot;这是新建的Servlet&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;自定义Servlet类&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2402a33d-1cea-40a7-9acb-11a092cc8322')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2402a33d-1cea-40a7-9acb-11a092cc8322&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2402a33d-1cea-40a7-9acb-11a092cc8322&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2402a33d-1cea-40a7-9acb-11a092cc8322',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2402a33d-1cea-40a7-9acb-11a092cc8322&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyServletInitializer &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; WebApplicationInitializer {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onStartup(ServletContext servletContext) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException {
        ServletRegistration.Dynamic myServlet &lt;/span&gt;= servletContext.addServlet(&quot;MyServlet&quot;, MyServlet.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        myServlet.addMapping(&lt;/span&gt;&quot;/myServlet&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;注册Servlet&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;    注册Filter、Listener 也可以用类似的方式。但是，&lt;span class=&quot;fontstyle0&quot;&gt;如果你只是注册&lt;span class=&quot;fontstyle1&quot;&gt;Filter&lt;span class=&quot;fontstyle0&quot;&gt;，并且该&lt;span class=&quot;fontstyle1&quot;&gt;Filter&lt;span class=&quot;fontstyle0&quot;&gt;只会映射到&lt;span class=&quot;fontstyle2&quot;&gt;DispatcherServlet&lt;span class=&quot;fontstyle0&quot;&gt;上的话，那么在&lt;span class=&quot;fontstyle2&quot;&gt;AbstractAnnotationConfigDispatcherServletInitializer&lt;span class=&quot;fontstyle0&quot;&gt;中还有一种快捷方式。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('afb321af-ac1a-4197-972a-af2b8e334398')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_afb321af-ac1a-4197-972a-af2b8e334398&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_afb321af-ac1a-4197-972a-af2b8e334398&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('afb321af-ac1a-4197-972a-af2b8e334398',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_afb321af-ac1a-4197-972a-af2b8e334398&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyFilter &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Filter {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; destroy() {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
        System.out.println(&lt;/span&gt;&quot;过滤器的工作&quot;&lt;span&gt;);
        chain.doFilter(req, resp);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; init(FilterConfig config) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException {

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;自定义Filter类&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('291b5348-944b-4052-a52c-7f681598641e')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_291b5348-944b-4052-a52c-7f681598641e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_291b5348-944b-4052-a52c-7f681598641e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('291b5348-944b-4052-a52c-7f681598641e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_291b5348-944b-4052-a52c-7f681598641e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Filter[] getServletFilters() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Filter[]{&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyFilter()};
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;在AbstractAnnotationConfigDispatcherServletInitializer的继承上添加...&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;三、使用 XML 配置&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app
        &lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;=&quot;3.0&quot;&lt;/span&gt;&lt;span&gt;
        xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;&lt;span&gt;
        xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
        xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Web应用图标：指出IDE和GUI工具用来表示Web应用的大图标和小图标&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;small-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/images/small.gif&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;small-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;large-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/images/large.gif&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;large-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;br/&gt;&lt;span&gt;    &amp;lt;!--&lt;/span&gt;&lt;span&gt;定义了WEB应用的名字&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;br/&gt;&lt;span&gt;    &amp;lt;!--&lt;/span&gt;&lt;span&gt;声明WEB应用的描述信息&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mvc test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;br/&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;上下文参数：在servlet里面可以通过 getServletContext().getInitParameter(&quot;name&quot;)得到&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;设置根上下文配置文件位置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;br/&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置过滤器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding-filter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding-filter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;br/&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置监听器 注册ContextLoaderListener&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;br/&gt;&lt;span&gt;    &amp;lt;!--&lt;/span&gt;&lt;span&gt;配置Servlet 注册DispatcherServlet&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;appServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;appServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;br/&gt;&lt;span&gt;    &amp;lt;!--&lt;/span&gt;&lt;span&gt;会话超时配置（单位为分钟）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-timeout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;120&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-timeout&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;br/&gt;&lt;span&gt;    &amp;lt;!--&lt;/span&gt;&lt;span&gt;mime类型配置，用来指定对应的格式的浏览器处理方式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置静态页面的打开编码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mime-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extension&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;htm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;extension&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mime-type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/html;charset=gb2312&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mime-type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mime-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mime-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;extension&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;html&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;extension&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mime-type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/html;charset=gb2312&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mime-type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mime-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;欢迎文件页配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;br/&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;错误页面配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置了当系统发生404错误时，跳转到错误处理页面NotFound.jsp&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;404&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/NotFound.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;配置了当系统发生java.lang.NullException（即空指针异常）时，跳转到错误处理页面error.jsp&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exception-type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;java.lang.NullException&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exception-type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/error.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--以上是常见的配置，以下的东西也没搞懂怎么用，特别是 security-role 的含义指的是？--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;安全限制配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;与login-config元素联合使用，指定服务器应该怎样给试图访问受保护页面的用户授权&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;security-constraint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-resource-collection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-resource-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ProtectedArea&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-resource-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/resources/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;如果没有&amp;lt;http-method&amp;gt;方法，表示禁止所有的HTTP方法访问对应的资源&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;http-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;GET&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;http-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-resource-collection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;哪些用户应该具有受保护资源的访问权
            如果没有 &amp;lt;auth-constraint&amp;gt; ，配置实际上是不起作用的。
            如果内容为空，表示所有的身份都被禁止访问&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;auth-constraint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;role-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ALL Role&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;role-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;auth-constraint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;security-constraint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;登录验证配置四种认证类型 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; BASIC：HTTP规范，Base64 这种方式被认为是最不安全的认证，因为它没有提供强烈的加密措施 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;auth-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;BASIC&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;auth-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; DIGEST：HTTP规范，数据完整性强一些，但不是SSL 相比于BASIC认证，它是种比较安全的认证，它在认证时将请求数据 通过MD5的加密方式进行认证 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;auth-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DIGEST&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;auth-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; CLIENT-CERT：J2EE规范，数据完整性很强，公共钥匙(PKC) 这是一种基于客户端证书的认证方式，比较安全。但缺陷是在没有安全证书的客户端无法使用 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;auth-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;CLIENT-CERT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;auth-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; FORM：J2EE规范，数据完整性非常弱，没有加密，允许有定制的登录界面 这是种基础自定义表单的认证，你可以指定登录时的验证表单 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;auth-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;FORM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;auth-method&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form-login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form-login-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/login.html&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form-login-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form-error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/error.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form-error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form-login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;login-config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;安全角色&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;这些角色将出现在servlet元素内的security-role-ref元素的role-name子元素中。分别地声明角色可使高级IDE处理安全信息更为容易(没看懂这句话)&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;security-role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;role-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ALL Role&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;role-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;security-role&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;tips&lt;/strong&gt;：&lt;/span&gt;&lt;span&gt;web.xml 的加载顺序是：ServletContext -&amp;gt; context-param -&amp;gt; listener -&amp;gt; filter -&amp;gt; servlet ，而同个类型之间的实际程序调用的时候的顺序是根据对应的 mapping 的顺序进行调用的。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;四、结语 &lt;/h2&gt;
&lt;p&gt;    2017年最后一篇博文了，坚持在2017年的最后一个晚上写完。毕竟2017的事总不好意思拖一年呀！坚持写博客真是个好习惯，好记性毕竟不如白纸黑字来的牢靠啊，如果把记性比作网上搜索的话，博客就是自己的一份离线存储。&lt;/p&gt;
&lt;p&gt;    本来想好好回顾下2017，打一大堆满满的文字，装一个文艺的青年。真到落笔的时候，什么都不想写。敬往事一杯酒，悠悠岁月不回头！&lt;/p&gt;
&lt;p&gt;    祝大家新年快乐！2018！我来了......&lt;/p&gt;
</description>
<pubDate>Sun, 31 Dec 2017 14:30:00 +0000</pubDate>
<dc:creator>JMCui</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jmcui/p/8124204.html</dc:identifier>
</item>
<item>
<title>2017年度总结——用自己喜欢的方式过一生 - 王磊的博客</title>
<link>http://www.cnblogs.com/vipstone/p/8159207.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vipstone/p/8159207.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　还有两个小时2018年就要来了，虽然极不情愿，但他真的来了，而这个时刻总能触动我最敏感的神经，让我回忆起这一年的过往，让我计划下一年的目标，也正是这股来自内心深处，最为感性的情绪，成就了今天这个，人到中年依然对生活满怀期待，世事终不能如愿，但依旧努力向前的我，下面是我这一年的故事。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关于2017年&lt;/strong&gt;&lt;strong&gt;的&lt;/strong&gt;&lt;strong&gt;目标&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2017年整体来说，目标不算太难：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、学习2门以上新语言；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　完成指数：100分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　说明：在工作中熟练的使用了React Native开发手机app；使用了vuejs、hprose开发了一套财务报备系统；还有Xamarin开发手机app应该也是2017年开始用的.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2、阅读10本技术书籍；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　完成指数：40分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　说明：看了《人件》、《程序员修炼之道—从小工到专家》软件管理图书，《Egret HTML5游戏开发指南》，产品类书籍《爆品手记》，还有《JavaScript权威指南》的1/10之一，因为《JavaScript权威指南》厚的很新华词典一样，一本顶其他书籍5、6本，所以整体总体也只就完成40%.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3、跑步300KM；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　完成指数：80分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　说明：真正的跑步算起来没有300KM，到加上跑和走是基本要在450KM，但这一项只能感性的打80分吧.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　目标实现总结：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第一、先说健身，就健身的态度和执行作风而言还是比较满意的，但对锻炼的形式而言是不满意的，最好的锻炼是既能到达锻炼的目的，又能提高自己的技术水平，比如打篮球，打羽毛球，游泳等，都是有技术增益的运动，而跑和走并不是一个完美的理想运动，所以在2017年，如果有机会在运动形式上要有所突破。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第二、今年完成最糟糕的是技术书籍的阅读，因为2016年读书相对来说比较多，读了30本书，所以2017对于读书的要求有所降低，有了一定的懈怠，作为惩罚，2018年要在本身的计划的基础上加8本，作为惩罚。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关于工作&lt;/strong&gt;&lt;strong&gt;和&lt;/strong&gt;&lt;strong&gt;生活&lt;/strong&gt;&lt;strong&gt;上的变化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　今年算是工作变动比较大的一年，我离开呆了9年的西安，孤身一人来到了上海，期间遇到了很多的阻力，一是抛家舍业的，房子、车子、孩子都在西安；二是要放弃之前的既有利益和光环，之前技术的积累，同事的默契，工作业务部分和生活环境的熟悉，部门经理的光环，这些都是放弃了的既有利益，虽然这些对于一个真正知道自己想要什么的人来说都不重要，但来上海也需要重新开始，我独自一人先来上海把事情安排妥当（这期间，我还要感谢好朋友王伟、龚杰、还有小雨，谢谢你们的帮助，帮我度过难关），现在回过头看这一切也挺不容易，之前一个人没出过这么远的门，来这边能关照上的朋友也不多，一切都是从陌生到熟悉的一个过程，但还好有从小离家生活的经验，让我对这一切都胸有成竹。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在西安最后的日子，我克服了老婆偶尔的絮叨，还有自己对于未知的迷茫与恐惧，那时候只有一个念头，既然已经充分想好的决定，就一定要坚决执行。未来的路上会有很多的坎坷和障碍，如果你妥协一次你就会有第二次，我也不会给自己留下遗憾的念头，临阵脱逃从来都不是我的作风，既然是自己选择的路跪着也得走完，俗话说的好：树无根不长，人无志不立！就这样，我毅然决然的来到了魔都，看启了我人生的新篇章。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　除了上面提到的我与现实的抗争，还有我与自己的抗争，这一年我离开了，我工作快3年的公司，离开了自己的舒服区，就是想给自己找一点不同的困难来挑战。我有一个小小的梦想，详见上一篇博客：《工作了八年，我准备去上海了》，我想一点一点的实现它,生活从来都不易，但我们不能因为一两次的失败，就选择屈从这个世俗，那些不能打倒我们的，终将让我们变得更强大！有人说，万一努力了一辈子终将不能闪闪发亮怎么办？怕什么？真理无穷，进一寸有进一寸的欢喜！不是嘛？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关于新生活，关于上海&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　来上海两个礼拜了，来谈谈我自己的感受，每个城市都有他独有的魅力，上海的空气质量很好，每天早晨拉开窗帘就能看到刺眼的阳光，这是西安冬天鲜能看到的场景，那种沐浴阳光的感觉美妙急了，让我的心情好到了极点，情不自禁的感叹大自然神奇的力量，他是一切美好的开始。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果你在西安待过几个冬天，你会发现“静电”也是一件让你非常苦恼的事情，为了躲避他，我煞费苦心，不仅是所有的贴身衣物都用金纺浸泡，还买了去静电的物件，接触金属制品的时候，要手握着钥匙的一端，用另一端先触碰金属物品排电，但即使做到这样小心翼翼，有时候也并不能完全排除，这让人哭笑不得，甚至有时候看起来很愚蠢，而上海因为本身空气比较湿润，天生不带静电，这为我省去了很大的烦恼。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　作为北方旱鸭子的我，对于所有之前没看到过的东西，比如说江河啊，很大的鱼和活着大个的虾啊，都感到新奇和愉悦。还有就是魔都生活上的便利性，我租的房子很近的地方，就有很多的商城和电影院，这些商业上的便利性和差距，虽然随着时间的推移，二线城市和一线城市的差距会越来越小，但还是土鳖的觉得挺方便。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　就工作而言，感觉大家生存压力更大，所以工作积极性更好，自驱动性更好。活跃度更高，感受到更多的自由度，也让人挺舒服的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　说完了2017年的所思与所得，接下来谈谈2018年。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关于2018&lt;/strong&gt;&lt;strong&gt;计划&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、精读20本书并记录观后感；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2、参加10个以上的技术沙龙；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3、去3个以上不同的城市旅行；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4、完成15篇技术博客，25篇非技术博客；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　很庆幸能在2017年的最后一天，能坐在乌镇的酒店里，以自己喜欢的生活方式，来回忆这一年的得失，这也是某种意义上自我斗争的胜利，生活从来都是欺软怕硬，一切都没有你想象中的那么难实现，梦想就在哪里等你，只是你准备好起航了吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2018年，不忘初心，继续前行，努力工作，快乐生活！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　坚持是这个时间上最可贵的品质，拥有它你将攻无不克，战无不胜！致自己！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2018，你好！2017，再见！&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 31 Dec 2017 14:15:00 +0000</pubDate>
<dc:creator>王磊的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vipstone/p/8159207.html</dc:identifier>
</item>
<item>
<title>2017让我受益最大的那些书--别找了，都在这里 - SolidMango</title>
<link>http://www.cnblogs.com/pugang/p/8159168.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pugang/p/8159168.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2017让我受益最大的那些书--别找了，都在这里&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　每一年对自己读过的技术书籍都会进行一个小结，今年也不例外，终于拖到了2017的最后一天，但是非常高兴，时间还来得及，也算对自己今年的一年来工作的总结。&lt;/span&gt;&lt;span&gt;年初的时候由于公司一个电商项目的原因，需要用到 React 框架和 ES6，于是对这两项技术相关的资料进行了梳理 ，如下是相关的书籍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231210628507-1514823147.png&quot; alt=&quot;&quot; width=&quot;234&quot; height=&quot;304&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231210650023-1386639696.png&quot; alt=&quot;&quot; width=&quot;226&quot; height=&quot;304&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231210716460-156528039.png&quot; alt=&quot;&quot; width=&quot;234&quot; height=&quot;304&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231210736023-1972325784.png&quot; alt=&quot;&quot; width=&quot;233&quot; height=&quot;304&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231210801773-1246296198.png&quot; alt=&quot;&quot; width=&quot;228&quot; height=&quot;283&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231210853007-445239632.png&quot; alt=&quot;&quot; width=&quot;215&quot; height=&quot;284&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231210910148-1901127033.png&quot; alt=&quot;&quot; width=&quot;215&quot; height=&quot;284&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231210937788-1964558172.png&quot; alt=&quot;&quot; width=&quot;218&quot; height=&quot;285&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231211125554-1470415558.png&quot; alt=&quot;&quot; width=&quot;236&quot; height=&quot;285&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;       从今年下半年开始，也是由于公司一个新的金融项目的原因，笔者的主力开发技术栈又切回了Linux C++,  今时今日的C++ 11/14 语言特性已经是开发主流，笔者虽然多年来一直关注着这些语言特性的进步，但是也是好久都没有系统的梳理一下相关的知识了，于是在今年年中的时候对C++11/14的书籍进行了一次系统的梳理，可以这么说，士别三日当刮目相看，今天的C++11/14/17 对于现代编程语言的内存模型，并行，语言简洁性等都给与了全新的生命力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231212721429-1355831419.png&quot; alt=&quot;&quot; width=&quot;200&quot; height=&quot;264&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231212745273-1791042374.png&quot; alt=&quot;&quot; width=&quot;210&quot; height=&quot;264&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231212803101-1869411209.png&quot; alt=&quot;&quot; width=&quot;210&quot; height=&quot;263&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231212821367-1408091496.png&quot; alt=&quot;&quot; width=&quot;201&quot; height=&quot;263&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231212846382-2129888504.png&quot; alt=&quot;&quot; width=&quot;201&quot; height=&quot;267&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;       金融项目开发过程中，经常需要配合Python, Go, MQ, 分布式系统设计，调试技术等主题，于是笔者也逐步对相关的资料进行了研究，相关的知识进行了梳理，如下是相关书籍，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213603726-857682530.png&quot; alt=&quot;&quot; width=&quot;211&quot; height=&quot;280&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213632992-1019763062.png&quot; alt=&quot;&quot; width=&quot;210&quot; height=&quot;278&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213653429-1224713989.png&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;278&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213746382-329947944.png&quot; alt=&quot;&quot; width=&quot;195&quot; height=&quot;278&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213801132-1411324496.png&quot; alt=&quot;&quot; width=&quot;211&quot; height=&quot;279&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213837210-207834518.png&quot; alt=&quot;&quot; width=&quot;216&quot; height=&quot;268&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213857242-1813949999.png&quot; alt=&quot;&quot; width=&quot;209&quot; height=&quot;266&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213921132-2134197213.png&quot; alt=&quot;&quot; width=&quot;218&quot; height=&quot;274&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/60039/201712/60039-20171231213940913-1082833312.png&quot; alt=&quot;&quot; width=&quot;219&quot; height=&quot;274&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2017年对笔者来说注定是收获满满的一年，技术体系上，全栈技术体系日臻完善，新技术，新特性都进行了热更新，分布式系统设计能力上主力架构工具都进行了研究和实战，效果都达到了预期，调试能力上，对JavaScript调试工具和GDB的使用能力上都有了长足的进步，尤其值得一提的是Fiddler对前端调试的映射，在极大程度上提高了前端JavaScript的调试效率，脚本能力上对shell 和 python3, vim高级特性等也有很多的收获，感谢2017， come on 2018..&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 31 Dec 2017 14:00:00 +0000</pubDate>
<dc:creator>SolidMango</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pugang/p/8159168.html</dc:identifier>
</item>
<item>
<title>2017 业余程序员的回顾 - stoneniqiu</title>
<link>http://www.cnblogs.com/stoneniqiu/p/8159068.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stoneniqiu/p/8159068.html</guid>
<description>&lt;p&gt;今年对自己来说是转变的一年，完成了婚姻大事、换了一份工作，上半年还在上海，下半年就到了天津，这几日还在准备最后几门的专业课考试，这是年初完全没有预计到的剧情。&lt;/p&gt;
&lt;p&gt;先说下流水账，上半年还是比较专心的在研究技术，当时和同事约定一起学webpack、vue和react，每天除了完成工作任务之外还学学新东西，写写博客。工作上不断的对接项目，完善websocket的jssdk，日子还算充实，看见公司h5上的直播也在用vue开发，很激动，也想上线一个vue的项目。可惜计划赶不上变化，vue还没学透，react还没开始，中途搁置，最近几个月都没有看技术相关的书。下半年国庆期间办完了婚礼，十号就回到了学校，期间主要都是在学习，波澜不惊。&lt;/p&gt;
&lt;h3&gt;成长&lt;/h3&gt;
&lt;p&gt;相对于2016年，刚到魔都，今年是心智和技能上都稳步上升的一年，也怀念和同事一起进步、加班的日子。到了学校这边，最大的变化就是作息规律了，早睡早起，锻炼的次数也多些，精气神明显好了很多。原本只是想考试应付一下就行了，但想到一句话：&lt;strong&gt;求其上者得其中 求其中者得其下&lt;/strong&gt;，自己又是一批里面年纪最大的，考得好点，也对得起自己些。另外就是培训这一年，没有工资收入，课余做了两个项目作生活费，学费都是老婆交的，现在估计过这个年还得靠老婆维持了。前不久父亲工作中伤了手指，整个拇指差点锯掉，休息了一个月，好在现在已经康复，年中岳父还犯过脑梗，现在身体状态还不错，新的一年，希望家人都身体安康。&lt;/p&gt;
&lt;h3&gt;读书&lt;/h3&gt;
&lt;p&gt;读书还是我最大的乐趣之一，今年读了&lt;a href=&quot;https://book.douban.com/people/62719021/collect&quot; target=&quot;_blank&quot;&gt;35&lt;/a&gt;本书，比前两年放慢了不少，文学类偏多。温情类的有《最好的告别》、《岛上书店》、《解忧杂货店》。这些不是什么鸡汤书，而是有人性之美的书。《最好的告别》里弥留之际的舐犊情深，以及这种关怀的社会化，这是值得思考的问题。《解忧杂货店》作者设置精妙，浪矢老头和三个小偷的贯穿人间冷暖。《岛上书店》中的书店老板AJ，搞笑的警长。文学的魅力在于，通过一个一个看似遥远的故事，其实洞悉的是自己所生活的世界。心理学方面的有《暗时间》《学会提问》，《暗时间》从心理学到算法，一本不错的关于思维及问题本质的书，我还记得是茶叔分享的，他还写好几篇博客。&lt;a href=&quot;http://www.cnblogs.com/stoneniqiu/p/7927505.html&quot; target=&quot;_blank&quot;&gt;《学会提问》&lt;/a&gt;着重讲批判性思维，面对信息的洪流，我们很有必要有这张信息过滤网。其他的如《智能时代》《创业维难》也不错，作为一名业余程序员，今年的技术读的不多，《ES6入门标准》、《你不知道的JavaScript》还是可以学学的。如果说今年读的最特别的一本书，那应该算是《金-P-梅》了。没看之前，以为是一本经典黄书，看了之后发现那就是现实生活，只不过现实有人做美颜，比如其中的一个细节，街访抓奸王六儿的时候，那是热闹非凡，各个义正言辞，但武松在街上询问武大是怎么死，街访没一个敢说，卖梨的浑哥要了钱财才说与武松，和keyboard man多么相似。后来了解到，毛主席曾五次提起此书，建议省委书记都应该看看。当然其中男人们关心的细节也有两万多字（全书七十多万字），我觉得一个工作了三四年的人可以看看了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/417688/201712/417688-20171231204053960-1433142668.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  展望2018年 首先还是要完成培训，然后下半年的就是在机场实习、考执照。把英语学好，毕竟工作要用，这些都问题应该不大。关键的是一方面进入机场工作，要慎言慎行，老师们上课都在提醒，你们首先是要学会保护自己，然后是去拯救他人，一方面开始家庭生活，时间上的分配可能更加分散，除了看书学习，还要兼顾到两个家庭的融合，现在条件允许，可以多回家看看。2018，继续小步快跑！&lt;/p&gt;
</description>
<pubDate>Sun, 31 Dec 2017 13:45:00 +0000</pubDate>
<dc:creator>stoneniqiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stoneniqiu/p/8159068.html</dc:identifier>
</item>
</channel>
</rss>