<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>thinkphp5URL和路由 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8110834.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8110834.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　本文将详细介绍thinkphp5URL和路由&lt;/p&gt;

&lt;h3&gt;URL访问&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;　　ThinkPHP&lt;/code&gt;采用单一入口模式访问应用，对应用的所有请求都定向到应用的入口文件，系统会从&lt;code&gt;URL&lt;/code&gt;参数中解析当前请求的模块、控制器和操作，下面是一个标准的&lt;code&gt;URL&lt;/code&gt;访问格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;domainName/index.php/模块/控制器/操作&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中&lt;code&gt;index.php&lt;/code&gt;就称之为应用的入口文件（注意入口文件可以被隐藏，后面会提到）&lt;/p&gt;
&lt;p&gt;　　模块在ThinkPHP中的概念其实就是应用目录下面的子目录，而官方的规范是目录名小写，因此模块全部采用小写命名，无论URL是否开启大小写转换，模块名都会强制小写&lt;/p&gt;
&lt;p&gt;　　应用的&lt;code&gt;index&lt;/code&gt;模块的&lt;code&gt;Index&lt;/code&gt;控制器定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function index()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; function hello($name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果直接访问入口文件的话，由于URL中没有模块、控制器和操作，因此系统会访问默认模块（index）下面的默认控制器（Index）的默认操作（index），因此下面的访问是等效的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果要访问控制器的hello方法，则需要使用完整的URL地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello/name/thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　访问URL地址后页面输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
Hello,thinkphp!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　由于&lt;code&gt;name&lt;/code&gt;参数为可选参数，因此也可以使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　访问URL地址后页面输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
Hello,World!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　默认情况下，URL地址中的控制器和操作名是不区分大小写的，因此下面的访问其实是等效的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/Index/Index&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/INDEX/INDEX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果控制器是驼峰的，例如定义一个HelloWorld控制器（&lt;code&gt;application/index/controller/HelloWorld.php&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloWorld
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; function index($name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　正确的URL访问地址（该地址可以使用url方法生成）应该是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/hello_world/index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　系统会自动定位到&lt;code&gt;HelloWorld&lt;/code&gt;控制器类去操作&lt;/p&gt;
&lt;p&gt;　　如果使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/HelloWorld/index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将会报错，并提示&lt;code&gt;Helloworld&lt;/code&gt;控制器类不存在&lt;/p&gt;
&lt;p&gt;　　如果希望严格区分大小写访问（这样就可以支持驼峰法进行控制器访问），可以在应用配置文件中设置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭URL自动转换（支持驼峰访问控制器）&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;url_convert&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;false&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　关闭URL自动转换之后，必须使用下面的URL地址访问（控制器名称必须严格使用控制器类的名称，不包含控制器后缀）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/Index/index&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/HelloWorld/index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果服务器环境不支持&lt;code&gt;pathinfo&lt;/code&gt;方式的URL访问，可以使用兼容方式，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php?s=/index/Index/index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中变量&lt;code&gt;s&lt;/code&gt;的名称的可以配置的&lt;/p&gt;
&lt;p&gt;　　5.0不再支持普通的URL访问方式，所以下面的访问是无效的，你会发现无论输入什么，访问的都是默认的控制器和操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php?m=index&amp;amp;c=Index&amp;amp;a=hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;参数传入&lt;/h3&gt;
&lt;p&gt;　　通过操作方法的参数绑定功能，可以实现自动获取URL的参数，仍然以上面的控制器为例，控制器代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function index()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; function hello($name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当我们访问&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　就是访问&lt;code&gt;app\index\controller\Index&lt;/code&gt;控制器类的&lt;code&gt;hello&lt;/code&gt;方法，因为没有传入任何参数，&lt;code&gt;name&lt;/code&gt;参数就使用默认值&lt;code&gt;World&lt;/code&gt;。如果传入name参数，则使用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello/name/thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　页面输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
Hello,thinkphp!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在给hello方法增加第二个参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; function hello($name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, $city = &lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;! You come from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $city . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　访问地址为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello/name/thinkphp/city/shanghai&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　页面输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Hello,thinkphp! You come &lt;span&gt;from&lt;/span&gt; shanghai.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到，&lt;code&gt;hello&lt;/code&gt;方法会自动获取URL地址中的同名参数值作为方法的参数值，而且这个参数的传入顺序不受URL参数顺序的影响，例如下面的URL地址输出的结果和上面是一样的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello/city/shanghai/name/thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　或者使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello?city=shanghai&amp;amp;name=thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　还可以进一步对URL地址做简化，前提就是我们必须明确参数的顺序代表的变量，我们更改下URL参数的获取方式，把应用配置文件中的&lt;code&gt;url_param_type&lt;/code&gt;参数的值修改如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按照参数顺序获取&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;url_param_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;1&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在，URL的参数传值方式就变成了严格按照操作方法的变量定义顺序来传值了，也就是说我们必须使用下面的URL地址访问才能正确传入&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;city&lt;/code&gt;参数到&lt;code&gt;hello&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello/thinkphp/shanghai&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　页面输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Hello,thinkphp! You come &lt;span&gt;from&lt;/span&gt; shanghai.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果改变参数顺序为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello/shanghai/thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　页面输出结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Hello,shanghai! You come &lt;span&gt;from&lt;/span&gt; thinkphp.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　显然不是我们预期的结果。&lt;/p&gt;
&lt;p&gt;　　同样，我们试图通过&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello/name/thinkphp/city/shanghai&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　访问也不会得到正确的结果&lt;/p&gt;
&lt;p&gt;　　[注意]按顺序绑定参数的话，操作方法的参数只能使用URL pathinfo变量，而不能使用get或者post变量&lt;/p&gt;

&lt;h3&gt;隐藏入口&lt;/h3&gt;
&lt;p&gt;　　可以去掉URL地址里面的入口文件&lt;code&gt;index.php&lt;/code&gt;，但是需要额外配置WEB服务器的重写规则。&lt;/p&gt;
&lt;p&gt;　　以&lt;code&gt;Apache&lt;/code&gt;为例，需要在入口文件的同级添加&lt;code&gt;.htaccess&lt;/code&gt;文件（官方默认自带了该文件），内容如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;IfModule mod_rewrite.c&amp;gt;&lt;span&gt;
Options &lt;/span&gt;+FollowSymlinks -&lt;span&gt;Multiviews
RewriteEngine on
RewriteCond &lt;/span&gt;%{REQUEST_FILENAME} !-&lt;span&gt;d
RewriteCond &lt;/span&gt;%{REQUEST_FILENAME} !-&lt;span&gt;f
RewriteRule &lt;/span&gt;^(.*)$ index.php/$&lt;span&gt;1&lt;/span&gt;&lt;span&gt; [QSA,PT,L]
&lt;/span&gt;&amp;lt;/IfModule&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果用的&lt;code&gt;phpstudy&lt;/code&gt;，规则如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;IfModule mod_rewrite.c&amp;gt;&lt;span&gt; 
Options &lt;/span&gt;+FollowSymlinks -&lt;span&gt;Multiviews 
RewriteEngine on 
RewriteCond &lt;/span&gt;%{REQUEST_FILENAME} !-&lt;span&gt;d 
RewriteCond &lt;/span&gt;%{REQUEST_FILENAME} !-&lt;span&gt;f 
RewriteRule &lt;/span&gt;^(.*)$ index.php [L,E=PATH_INFO:$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] 
&lt;/span&gt;&amp;lt;/IfModule&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来就可以使用下面的URL地址访问了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index/index/index&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index/index/hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果使用的&lt;code&gt;apache&lt;/code&gt;版本使用上面的方式无法正常隐藏&lt;code&gt;index.php&lt;/code&gt;，可以尝试使用下面的方式配置&lt;code&gt;.htaccess&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;IfModule mod_rewrite.c&amp;gt;&lt;span&gt;
Options &lt;/span&gt;+FollowSymlinks -&lt;span&gt;Multiviews
RewriteEngine on
RewriteCond &lt;/span&gt;%{REQUEST_FILENAME} !-&lt;span&gt;d
RewriteCond &lt;/span&gt;%{REQUEST_FILENAME} !-&lt;span&gt;f
RewriteRule &lt;/span&gt;^(.*)$ index.php?/$&lt;span&gt;1&lt;/span&gt;&lt;span&gt; [QSA,PT,L]
&lt;/span&gt;&amp;lt;/IfModule&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果是&lt;code&gt;Nginx&lt;/code&gt;环境的话，可以在&lt;code&gt;Nginx.conf&lt;/code&gt;中添加：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
location / { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; …..省略部分代码&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!-&lt;span&gt;e $request_filename) {
        rewrite  &lt;/span&gt;^(.*)$  /index.php?s=/$&lt;span&gt;1&lt;/span&gt;&lt;span&gt;  last;
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;定义路由&lt;/h3&gt;
&lt;p&gt;　　URL地址里面的&lt;code&gt;index&lt;/code&gt;模块怎么才能省略呢，默认的URL地址显得有点长，下面就来说说如何通过路由简化URL访问。&lt;/p&gt;
&lt;p&gt;　　我们在路由定义文件（&lt;code&gt;application/route.php&lt;/code&gt;）里面添加一些路由规则，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加路由规则 路由到 index控制器的hello操作方法&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello/:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index/index/hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　该路由规则表示所有&lt;code&gt;hello&lt;/code&gt;开头的并且带参数的访问都会路由到&lt;code&gt;index&lt;/code&gt;控制器的&lt;code&gt;hello&lt;/code&gt;操作方法。&lt;/p&gt;
&lt;p&gt;　　路由之前的URL访问地址为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index/index/hello/name/thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　定义路由后就只能访问下面的URL地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello/thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　[注意]定义路由规则后，原来的URL地址将会失效，变成非法请求。&lt;/p&gt;
&lt;p&gt;　　但这里有一个小问题，如果我们只是访问&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将发生错误&lt;/p&gt;
&lt;p&gt;　　事实上这是由于路由没有正确匹配到，我们修改路由规则如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 路由参数name为可选&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello/[:name]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index/hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用&lt;code&gt;[]&lt;/code&gt;把路由规则中的变量包起来，就表示该变量为可选，接下来就可以正常访问了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当&lt;code&gt;name&lt;/code&gt;参数没有传入值的时候，&lt;code&gt;hello&lt;/code&gt;方法的&lt;code&gt;name&lt;/code&gt;参数有默认值&lt;code&gt;World&lt;/code&gt;，所以输出的内容为 &lt;code&gt;Hello,World!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　除了路由配置文件中定义之外，还可以采用动态定义路由规则的方式定义，例如在路由配置文件（&lt;code&gt;application/route.php&lt;/code&gt;）的开头直接添加下面的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;use think\Route;

Route::rule(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello/:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index/hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　完成的效果和使用配置方式定义是一样的。&lt;/p&gt;
&lt;p&gt;　　无论是配置方式还是通过Route类的方法定义路由，都统一放到路由配置文件&lt;code&gt;application/route.php&lt;/code&gt;文件中&lt;/p&gt;
&lt;p&gt;　　[注意]路由配置不支持在模块配置文件中设置&lt;/p&gt;
&lt;p&gt;【完整匹配】&lt;/p&gt;
&lt;p&gt;　　前面定义的路由是只要以hello开头就能进行匹配，如果需要完整匹配，可以使用下面的定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 路由参数name为可选&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello/[:name]$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index/hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当路由规则以&lt;code&gt;$&lt;/code&gt;结尾的时候就表示当前路由规则需要完整匹配。&lt;/p&gt;
&lt;p&gt;　　当我们访问下面的URL地址的时候：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 正确匹配&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello/thinkphp &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 正确匹配&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello/thinkphp/val/value &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不会匹配&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【闭包定义】&lt;/p&gt;
&lt;p&gt;　　还支持通过定义闭包为某些特殊的场景定义路由规则，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义闭包&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello/[:name]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt;&lt;span&gt; function ($name) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    },
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;use think\Route;

Route::rule(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello/:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function ($name) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　[注意]闭包函数的参数就是路由规则中定义的变量&lt;/p&gt;
&lt;p&gt;　　因此，当访问下面的URL地址：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello/thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　会输出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
Hello,thinkphp!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【设置URL分隔符】&lt;/p&gt;
&lt;p&gt;　　如果需要改变URL地址中的&lt;code&gt;pathinfo&lt;/code&gt;参数分隔符，只需要在应用配置文件（&lt;code&gt;application/config.php&lt;/code&gt;）中设置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置pathinfo分隔符&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pathinfo_depr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;          =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　路由规则定义无需做任何改变，我们就可以访问下面的地址：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello-thinkphp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【路由参数】&lt;/p&gt;
&lt;p&gt;　　还可以约束路由规则的请求类型或者URL后缀之类的条件，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义路由的请求类型和后缀&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello/[:name]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index/hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ext&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面定义的路由规则限制了必须是&lt;code&gt;get&lt;/code&gt;请求，而且后缀必须是&lt;code&gt;html&lt;/code&gt;的，所以下面的访问地址：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 无效&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello.html &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 有效&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello/thinkphp &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 无效&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/hello/thinkphp.html &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 有效&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【变量规则】&lt;/p&gt;
&lt;p&gt;　　接下来，尝试一些复杂的路由规则定义满足不同的路由变量。在此之前，首先增加一个控制器类如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Blog
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; function &lt;span&gt;get&lt;/span&gt;&lt;span&gt;($id)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;查看id=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $id . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;的内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function read($name)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;查看name=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;的内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function archive($year, $month)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;查看&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $year . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $month . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;的归档内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　添加如下路由规则：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:year/:month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/archive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{4}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;          =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;        =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在上面的路由规则中，我们对变量进行的规则约束，变量规则使用正则表达式进行定义。&lt;/p&gt;
&lt;p&gt;　　我们看下几种URL访问的情况&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 访问id为5的内容&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/blog/5 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 访问name为thinkphp的内容&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/blog/thinkphp 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 访问2015年5月的归档内容&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/blog/2015/05 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【路由分组】&lt;/p&gt;
&lt;p&gt;　　上面的三个路由规则由于都是&lt;code&gt;blog&lt;/code&gt;打头，所以我们可以做如下的简化：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[blog]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt;&lt;span&gt; [
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:year/:month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/archive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{4}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],    
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;          =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;        =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
    ],
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　对于这种定义方式，我们称之为路由分组，路由分组一定程度上可以提高路由检测的效率&lt;/p&gt;
&lt;p&gt;【复杂路由】&lt;/p&gt;
&lt;p&gt;　　有时候，还需要对URL做一些特殊的定制，例如如果要同时支持下面的访问地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/blog/thinkphp &lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/blog-2015-05 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们只要稍微改变路由定义规则即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;            =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;          =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog-&amp;lt;year&amp;gt;-&amp;lt;month&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/archive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{4}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　对 &lt;code&gt;blog-&amp;lt;year&amp;gt;-&amp;lt;month&amp;gt;&lt;/code&gt; 这样的非正常规范，我们需要使用&lt;code&gt;&amp;lt;变量名&amp;gt;&lt;/code&gt;这样的变量定义方式，而不是 &lt;code&gt;:变量名&lt;/code&gt;方式。&lt;/p&gt;
&lt;p&gt;　　简单起见，我们还可以把变量规则统一定义，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 全局变量规则定义&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__pattern__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;         =&amp;gt;&lt;span&gt; [
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{4}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    ],
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 路由规则定义&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;            =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;          =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog-&amp;lt;year&amp;gt;-&amp;lt;month&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/archive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在&lt;code&gt;__pattern__&lt;/code&gt;中定义的变量规则我们称之为全局变量规则，在路由规则里面定义的变量规则我们称之为局部变量规则，如果一个变量同时定义了全局规则和局部规则的话，当前的局部规则会覆盖全局规则的，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 全局变量规则&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__pattern__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;         =&amp;gt;&lt;span&gt; [
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\w+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{4}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d{2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    ],

    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;            =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义了局部变量规则&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;          =&amp;gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\w{5,}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]],
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog-&amp;lt;year&amp;gt;-&amp;lt;month&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/archive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;URL生成&lt;/h3&gt;
&lt;p&gt;　　定义路由规则之后，可以通过Url类来方便的生成实际的URL地址（路由地址），针对上面的路由规则，我们可以用下面的方式生成URL地址。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出 blog/thinkphp&lt;/span&gt;
Url::build(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name=thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
Url::build(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出 blog/5&lt;/span&gt;
Url::build(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;id=5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
Url::build(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出 blog/2015/05&lt;/span&gt;
Url::build(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/archive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;year=2015&amp;amp;month=05&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
Url::build(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/archive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2015&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　[注意]build方法的第一个参数使用路由定义中的完整路由地址&lt;/p&gt;
&lt;p&gt;　　还可以使用系统提供的助手函数url来简化&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
url(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name=thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等效于&lt;/span&gt;
Url::build(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name=thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通常在模板文件中输出的话，可以使用助手函数，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
{:url(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blog/read&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name=thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果我们的路由规则发生调整，生成的URL地址会自动变化&lt;/p&gt;
&lt;p&gt;　　如果你配置了&lt;code&gt;url_html_suffix&lt;/code&gt;参数的话，生成的URL地址会带上后缀，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;url_html_suffix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;   =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　那么生成的URL地址 类似&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
blog/&lt;span&gt;thinkphp.html 
blog&lt;/span&gt;/&lt;span&gt;2015&lt;/span&gt;/&lt;span&gt;05&lt;/span&gt;.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果你的URL地址全部采用路由方式定义，也可以直接使用路由规则来定义URL生成，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
url(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/blog/thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
Url::build(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/blog/8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
Url::build(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/blog/archive/2015/05&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　生成方法的第一个参数一定要和路由定义的路由地址保持一致，如果你的路由地址比较特殊，例如使用闭包定义的话，则需要手动给路由指定标识，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加hello路由标识&lt;/span&gt;
Route::rule([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello/:name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;], function($name){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.$name;
});
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据路由标识快速生成URL&lt;/span&gt;
Url::build(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name=thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 或者使用&lt;/span&gt;
Url::build(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]);
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 25 Dec 2017 22:31:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8110834.html</dc:identifier>
</item>
<item>
<title>快看Sample代码，速学Swift语言（1）-语法速览 - 伍华聪</title>
<link>http://www.cnblogs.com/wuhuacong/p/8111316.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuhuacong/p/8111316.html</guid>
<description>&lt;p&gt;Swift是苹果推出的一个比较新的语言，它除了借鉴语言如C#、Java等内容外，好像还采用了很多JavaScript脚本里面的一些脚本语法，用起来感觉非常棒，作为一个使用C#多年的技术控，对这种比较超前的语言非常感兴趣，之前也在学习ES6语法的时候学习了阮一峰的《&lt;a href=&quot;http://es6.ruanyifeng.com&quot; target=&quot;_blank&quot;&gt;ECMAScript 6 入门&lt;/a&gt;》，对JavaScript脚本的ES6语法写法叹为观止，这种Swift语言也具有很多这种脚本语法的特点，可以说这个Swift在吸收了Object C的优点并摒弃一些不好的东西外，同时吸收了大量新一代语言的各种特点，包括泛型、元祖等特点。我在学习Swift的时候，发现官方的语言介绍文章（&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html&quot; target=&quot;_blank&quot;&gt;The Swift Programming Language&lt;/a&gt;）还是非常浅显易懂，虽然是英文，不过代码及分析说明都很到位，就是内容显得比较多一些，而我们作为技术人员，一般看代码就很好了解了各种语法特点了，基于这个原因，我对官网的案例代码进行了一个摘要总结，以代码的方式进行Swift语言的语法特点介绍，总结一句话就是：快看Sample代码，速学Swift语言。&lt;/p&gt;
&lt;h3&gt;1、语法速览&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; myVariable = 42&lt;span&gt;
myVariable &lt;/span&gt;= 50&lt;span&gt;
let myConstant &lt;/span&gt;= 42
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;变量定义用var，常量则用let，类型自行推断。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let apples = 3&lt;span&gt;
let oranges &lt;/span&gt;= 5&lt;span&gt;
let appleSummary &lt;/span&gt;= &quot;I have \(apples) apples.&quot;&lt;span&gt;
let fruitSummary &lt;/span&gt;= &quot;I have \(apples + oranges) pieces of fruit.&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用括号包含变量&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let quotation = &quot;&quot;&quot;&lt;span&gt;
I said &lt;/span&gt;&quot;I have \(apples) apples.&quot;&lt;span&gt;
And then I said &lt;/span&gt;&quot;I have \(apples + oranges) pieces of fruit.&quot;
&quot;&quot;&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码通过三个双引号来包含预定格式的字符串（包括换行符号），左侧缩进空格省略。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; shoppingList = [&quot;catfish&quot;, &quot;water&quot;, &quot;tulips&quot;, &quot;blue paint&quot;&lt;span&gt;]
shoppingList[&lt;/span&gt;1] = &quot;bottle of water&quot;
 
&lt;span&gt;var&lt;/span&gt; occupations =&lt;span&gt; [
    &lt;/span&gt;&quot;Malcolm&quot;: &quot;Captain&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;Kaylee&quot;: &quot;Mechanic&quot;&lt;span&gt;,
]
occupations[&lt;/span&gt;&quot;Jayne&quot;] = &quot;Public Relations&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组和字典集合初始化符合常规，字典后面可以保留逗号结尾&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
let emptyArray =&lt;span&gt; [String]()
let emptyDictionary &lt;/span&gt;= [String: Float]()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始化函数也比较简洁。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
let individualScores = [75, 43, 103, 87, 12&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; teamScore = 0
&lt;span&gt;for&lt;/span&gt; score &lt;span&gt;in&lt;/span&gt;&lt;span&gt; individualScores {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; score &amp;gt; 50&lt;span&gt; {
        teamScore &lt;/span&gt;+= 3&lt;span&gt;
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        teamScore &lt;/span&gt;+= 1&lt;span&gt;
    }
}
print(teamScore)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;控制流的if-else这些和其他语言没有什么差异，for ... in 则是迭代遍历的语法，控制流方式还支持其他的while、repeat...while等不同的语法。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; optionalString: String? = &quot;Hello&quot;&lt;span&gt;
print(optionalString &lt;/span&gt;==&lt;span&gt; nil)
 
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; optionalName: String? = &quot;John Appleseed&quot;
&lt;span&gt;var&lt;/span&gt; greeting = &quot;Hello!&quot;
&lt;span&gt;if&lt;/span&gt; let name =&lt;span&gt; optionalName {
    greeting &lt;/span&gt;= &quot;Hello, \(name)&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这部分则是可空类型的使用，以及可空判断语句的使用，可空判断语句在Swift中使用非常广泛，这种相当于先求值再判断是否进入大括符语句。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
let vegetable = &quot;red pepper&quot;
&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; vegetable {
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &quot;celery&quot;&lt;span&gt;:
    print(&lt;/span&gt;&quot;Add some raisins and make ants on a log.&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &quot;cucumber&quot;, &quot;watercress&quot;&lt;span&gt;:
    print(&lt;/span&gt;&quot;That would make a good tea sandwich.&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; let x where x.hasSuffix(&quot;pepper&quot;&lt;span&gt;):
    print(&lt;/span&gt;&quot;Is it a spicy \(x)?&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
    print(&lt;/span&gt;&quot;Everything tastes good in soup.&quot;&lt;span&gt;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Switch语法和常规的语言不同，这种简化了一些语法，每个子条件不用显式的写break语句（默认就是返回的），多个条件逗号分开即可公用一个判断处理。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
let interestingNumbers =&lt;span&gt; [
    &lt;/span&gt;&quot;Prime&quot;: [2, 3, 5, 7, 11, 13&lt;span&gt;],
    &lt;/span&gt;&quot;Fibonacci&quot;: [1, 1, 2, 3, 5, 8&lt;span&gt;],
    &lt;/span&gt;&quot;Square&quot;: [1, 4, 9, 16, 25&lt;span&gt;],
]
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; largest = 0
&lt;span&gt;for&lt;/span&gt; (kind, numbers) &lt;span&gt;in&lt;/span&gt;&lt;span&gt; interestingNumbers {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; number &lt;span&gt;in&lt;/span&gt;&lt;span&gt; numbers {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; number &amp;gt;&lt;span&gt; largest {
            largest &lt;/span&gt;=&lt;span&gt; number
        }
    }
}
print(largest)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面字典遍历的方式采用for...in的方式进行遍历，另外通过(&lt;span class=&quot;vc&quot;&gt;kind, &lt;span class=&quot;vc&quot;&gt;numbers)的方式进行一个参数的解构过程，把字典的键值分别付给kind，numbers这两个参数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; total = 0
&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; 0..&amp;lt;4&lt;span&gt; {
    total &lt;/span&gt;+=&lt;span&gt; i
}
print(total)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的for...in循环采用了一个语法符号..&amp;lt;属于数学半封闭概念，从0到4，不含4，同理还有全封闭符号：...全包含左右两个范围的值。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
func greet(person: String, day: String) -&amp;gt;&lt;span&gt; String {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello \(person), today is \(day).&quot;&lt;span&gt;
}
greet(person: &lt;/span&gt;&quot;Bob&quot;, day: &quot;Tuesday&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面是函数的定义，以func关键字定义，括号内是参数的标签、名称和类型内容，返回值通过-&amp;gt;指定。&lt;/p&gt;
&lt;p&gt;上面函数需要输入参数名称，如果不需要参数名称，可以通过下划线省略输入，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
func greet(_ person: String, on day: String) -&amp;gt;&lt;span&gt; String {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello \(person), today is \(day).&quot;&lt;span&gt;
}
greet(&lt;/span&gt;&quot;John&quot;, on: &quot;Wednesday&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外参数名称可以使用标签名称。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
func greet(person: String, from hometown: String) -&amp;gt;&lt;span&gt; String {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello \(person)!  Glad you could visit from \(hometown).&quot;&lt;span&gt;
}
print(greet(person: &lt;/span&gt;&quot;Bill&quot;, from: &quot;Cupertino&quot;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Prints &quot;Hello Bill!  Glad you could visit from Cupertino.&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嵌套函数如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
func returnFifteen() -&amp;gt;&lt;span&gt; Int {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y = 10&lt;span&gt;
    func add() {
        y &lt;/span&gt;+= 5&lt;span&gt;
    }
    add()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; y
}
returnFifteen()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;复杂一点的函数的参数可以传入函数进行使用，这种类似闭包的处理了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
func hasAnyMatches(list: [Int], condition: (Int) -&amp;gt; Bool) -&amp;gt;&lt;span&gt; Bool {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; list {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; condition(item) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
}
func lessThanTen(number: Int) &lt;/span&gt;-&amp;gt;&lt;span&gt; Bool {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; number &amp;lt; 10&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; numbers = [20, 19, 7, 12&lt;span&gt;]
hasAnyMatches(list: numbers, condition: lessThanTen)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是一个闭包的函数，闭包通过in 来区分参数和返回的函数体&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
numbers.map({ (number: Int) -&amp;gt; Int &lt;span&gt;in&lt;/span&gt;&lt;span&gt;
    let result &lt;/span&gt;= 3 *&lt;span&gt; number
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class Shape {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; numberOfSides = 0&lt;span&gt;
    func simpleDescription() &lt;/span&gt;-&amp;gt;&lt;span&gt; String {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;A shape with \(numberOfSides) sides.&quot;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类的定义通过class关键字进行标识，默认的权限是internal，在项目模块内部可以访问的，非常方便。&lt;/p&gt;
&lt;p&gt;使用则如下所示，可以通过点语法直接获取属性和调用方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; shape =&lt;span&gt; Shape()
shape.numberOfSides &lt;/span&gt;= 7
&lt;span&gt;var&lt;/span&gt; shapeDescription = shape.simpleDescription()
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class NamedShape {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; numberOfSides: Int = 0
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; name: String
    
    init(name: String) {
        self.name &lt;/span&gt;=&lt;span&gt; name
    }
    
    func simpleDescription() &lt;/span&gt;-&amp;gt;&lt;span&gt; String {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;A shape with \(numberOfSides) sides.&quot;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类通过使用init的指定名称作为构造函数，使用deinit来做析构函数，使用self来获取当前的类引用，类似于其他语言的this语法，super获取基类的引用。&lt;/p&gt;
&lt;p&gt;其他的处理方式如继承、重写的语法和C#类似。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class Square: NamedShape {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; sideLength: Double
    
    init(sideLength: Double, name: String) {
        self.sideLength &lt;/span&gt;=&lt;span&gt; sideLength
        super.init(name: name)
        numberOfSides &lt;/span&gt;= 4&lt;span&gt;
    }
    
    func area() &lt;/span&gt;-&amp;gt;&lt;span&gt; Double {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sideLength *&lt;span&gt; sideLength
    }
    
    override func simpleDescription() &lt;/span&gt;-&amp;gt;&lt;span&gt; String {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;A square with sides of length \(sideLength).&quot;&lt;span&gt;
    }
}
let test &lt;/span&gt;= Square(sideLength: 5.2, name: &quot;my test square&quot;&lt;span&gt;)
test.area()
test.simpleDescription()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;类的属性使用get、set语法关键字，和C#类似&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class EquilateralTriangle: NamedShape {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; sideLength: Double = 0.0&lt;span&gt;
    
    init(sideLength: Double, name: String) {
        self.sideLength &lt;/span&gt;=&lt;span&gt; sideLength
        super.init(name: name)
        numberOfSides &lt;/span&gt;= 3&lt;span&gt;
    }
    
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; perimeter: Double {
        get {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 3.0 *&lt;span&gt; sideLength
        }
        set {
            sideLength &lt;/span&gt;= newValue / 3.0&lt;span&gt;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class TriangleAndSquare {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; triangle: EquilateralTriangle {
        willSet {
            square.sideLength &lt;/span&gt;=&lt;span&gt; newValue.sideLength
        }
    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; square: Square {
        willSet {
            triangle.sideLength &lt;/span&gt;=&lt;span&gt; newValue.sideLength
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类属性的赋值可以进行观察，如通过willSet在设置之前调用，didSet在设置之后调用，实现对属性值得监控处理。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;enum Rank: Int {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ace = 1
    &lt;span&gt;case&lt;/span&gt;&lt;span&gt; two, three, four, five, six, seven, eight, nine, ten
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; jack, queen, king
    func simpleDescription() &lt;/span&gt;-&amp;gt;&lt;span&gt; String {
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; self {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; .ace:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;ace&quot;
        &lt;span&gt;case&lt;/span&gt;&lt;span&gt; .jack:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;jack&quot;
        &lt;span&gt;case&lt;/span&gt;&lt;span&gt; .queen:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;queen&quot;
        &lt;span&gt;case&lt;/span&gt;&lt;span&gt; .king:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;king&quot;
        &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; String(self.rawValue)
        }
    }
}
let ace &lt;/span&gt;=&lt;span&gt; Rank.ace
let aceRawValue &lt;/span&gt;= ace.rawValue
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和类及其他类型一样，枚举类型在Swift中还可以有方法定义，是一种非常灵活的类型定义，这个和我们之前接触过的一般语言有所差异。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;enum ServerResponse {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; result(String, String)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; failure(String)
}
 
let success &lt;/span&gt;= ServerResponse.result(&quot;6:00 am&quot;, &quot;8:09 pm&quot;&lt;span&gt;)
let failure &lt;/span&gt;= ServerResponse.failure(&quot;Out of cheese.&quot;&lt;span&gt;)
 
&lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; success {
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; let .result(sunrise, sunset):
    print(&lt;/span&gt;&quot;Sunrise is at \(sunrise) and sunset is at \(sunset).&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; let .failure(message):
    print(&lt;/span&gt;&quot;Failure...  \(message)&quot;&lt;span&gt;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;struct Card {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; rank: Rank
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; suit: Suit
    func simpleDescription() &lt;/span&gt;-&amp;gt;&lt;span&gt; String {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;The \(rank.simpleDescription()) of \(suit.simpleDescription())&quot;&lt;span&gt;
    }
}
let threeOfSpades &lt;/span&gt;=&lt;span&gt; Card(rank: .three, suit: .spades)
let threeOfSpadesDescription &lt;/span&gt;= threeOfSpades.simpleDescription()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结构类型和类的各个方面很类似，结构支持构造函数，方法定义，属性等，重要一点不同是结构在代码传递的是副本，而类实例传递的是类的引用。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protocol ExampleProtocol {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; simpleDescription: String { get }
    mutating func adjust()
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的协议，类似很多语言的接口概念，不过比常规语言（包括C#）的接口更加多样化、复杂化一些。&lt;/p&gt;
&lt;p&gt;Swift的协议，可以有部分方法实现，协议可以可选，继承其他协议等等。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;extension Int: ExampleProtocol {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; simpleDescription: String {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;The number \(self)&quot;&lt;span&gt;
    }
    mutating func adjust() {
        self &lt;/span&gt;+= 42&lt;span&gt;
    }
}
print(&lt;/span&gt;7.simpleDescription)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扩展函数通过extension进行标识，可以为已有的类进行扩展一些特殊的方法处理，这个类似C#的扩展函数。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
func send(job: Int, toPrinter printerName: String) throws -&amp;gt;&lt;span&gt; String {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; printerName == &quot;Never Has Toner&quot;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; PrinterError.noToner
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Job sent&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;异常处理中，函数声明通过throws关键字标识有异常抛出，在函数里面通过throw进行异常抛出处理。&lt;/p&gt;
&lt;p&gt;而在处理有异常的地方进行拦截，则通过do...catch的方式进行处理，在do的语句里面，通过try来拦截可能出现的异常，默认catch里面的异常名称为error。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
    let printerResponse &lt;/span&gt;= &lt;span&gt;try&lt;/span&gt; send(job: 1040, toPrinter: &quot;Bi Sheng&quot;&lt;span&gt;)
    print(printerResponse)
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; {
    print(error)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以对多个异常进行判断处理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
    let printerResponse &lt;/span&gt;= &lt;span&gt;try&lt;/span&gt; send(job: 1440, toPrinter: &quot;Gutenberg&quot;&lt;span&gt;)
    print(printerResponse)
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; PrinterError.onFire {
    print(&lt;/span&gt;&quot;I'll just put this over here, with the rest of the fire.&quot;&lt;span&gt;)
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; let printerError as PrinterError {
    print(&lt;/span&gt;&quot;Printer error: \(printerError).&quot;&lt;span&gt;)
} &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; {
    print(error)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以通过使用try?的方式进行友好的异常处理，如果有异常返回nil，否者获取结果赋值给变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let printerSuccess = &lt;span&gt;try&lt;/span&gt;? send(job: 1884, toPrinter: &quot;Mergenthaler&quot;&lt;span&gt;)
let printerFailure &lt;/span&gt;= &lt;span&gt;try&lt;/span&gt;? send(job: 1885, toPrinter: &quot;Never Has Toner&quot;)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; fridgeIsOpen = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
let fridgeContent &lt;/span&gt;= [&quot;milk&quot;, &quot;eggs&quot;, &quot;leftovers&quot;&lt;span&gt;]
 
func fridgeContains(_ food: String) &lt;/span&gt;-&amp;gt;&lt;span&gt; Bool {
    fridgeIsOpen &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    defer {
        fridgeIsOpen &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
    }
    
    let result &lt;/span&gt;=&lt;span&gt; fridgeContent.contains(food)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
}
fridgeContains(&lt;/span&gt;&quot;banana&quot;&lt;span&gt;)
print(fridgeIsOpen)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用defer的关键字来在函数返回前处理代码块，如果有多个defer函数，则是后进先出的方式进行调用，最后的defer先调用，依次倒序。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
func makeArray&amp;lt;Item&amp;gt;(repeating item: Item, numberOfTimes: Int) -&amp;gt;&lt;span&gt; [Item] {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; [Item]()
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; 0..&amp;lt;&lt;span&gt;numberOfTimes {
        result.append(item)
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result
}
makeArray(repeating: &lt;/span&gt;&quot;knock&quot;, numberOfTimes: 4)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Swift支持泛型，因此可以大大简化很多函数的编写，提供更加强大的功能。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
enum OptionalValue&amp;lt;Wrapped&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; none
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; some(Wrapped)
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; possibleInteger: OptionalValue&amp;lt;Int&amp;gt; =&lt;span&gt; .none
possibleInteger &lt;/span&gt;= .some(100)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
func anyCommonElements&amp;lt;T: Sequence, U: Sequence&amp;gt;(_ lhs: T, _ rhs: U) -&amp;gt;&lt;span&gt; Bool
    where T.Iterator.Element: Equatable, T.Iterator.Element &lt;/span&gt;==&lt;span&gt; U.Iterator.Element {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; lhsItem &lt;span&gt;in&lt;/span&gt;&lt;span&gt; lhs {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; rhsItem &lt;span&gt;in&lt;/span&gt;&lt;span&gt; rhs {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; lhsItem ==&lt;span&gt; rhsItem {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
}
anyCommonElements([&lt;/span&gt;1, 2, 3], [3])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;泛型的参数支持where的关键字进行泛型类型的约束，如可以指定泛型的参数采用什么协议或者继承哪个基类等等。&lt;/p&gt;

</description>
<pubDate>Mon, 25 Dec 2017 16:22:00 +0000</pubDate>
<dc:creator>伍华聪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuhuacong/p/8111316.html</dc:identifier>
</item>
<item>
<title>愿你在合适的年纪遇到愿意栽培你的人 - 宋鑫磊</title>
<link>http://www.cnblogs.com/feisuccess/p/8111830.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feisuccess/p/8111830.html</guid>
<description>&lt;h3&gt;大家好，我是阿飞！一名.net 开发工程师&lt;/h3&gt;
&lt;p&gt;      做我们这行都知道，我们可以说是吃青春饭的一种，这并不是说我们年纪大了就不适合再这个岗位上继续发展，最后我们能不能在我们所热爱的岗位完全就是看我们在这段时间学到了多少内容，有没有能够不被年轻人替代的实力。&lt;/p&gt;
&lt;p&gt;      之前听一个朋友提起过，他面试一个8年左右的人，对设计模式，大数据处理优化，架构这些接近于一无所知，还在停留在逻辑上的增删改查，我们在这里并没有说这种不好，他们可能只是在8年的时间里各种控件之类的用的多了。但是，打铁还需自身硬，自己的能力如果和一个工作3-5年的差不多，那么首选必定是后者，因其年轻，可以承受更大的苦，这时你也就有苦说不出了，不能怪别人，更不能怪公司领导，要怪只能怪自己出生在这么一个大浪淘沙的时代。&lt;/p&gt;
&lt;p&gt;      好，下面要进入主题了。&lt;strong&gt;愿你在合适的年纪遇到愿意栽培你的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      如果你20岁左右，那么希望您能够找到一个愿意栽培你的地方，愿意栽培你的人。哪怕你培训机构出来，相信我，进入公司后，领导绝对能够感觉的出来，你是不是如你简历中描述2年工作经验，3年工作经验，所以，这个时候只要你的技术够硬，领导绝对会愿意栽培你，前提你得体现出来你的价值，你自身的努力，这个时候我们要做的就是学习他的专业能力，学习他的专业素质，学习他的领导能力，提高自己，补充自己，升华自己。（领导年纪在30左右最好）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      希望大家能够早日寻得自己的伯乐，学会各种能力，最终不被大浪所淘，能够一直呆在自己喜欢的岗位。&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt; &lt;/h4&gt;
</description>
<pubDate>Mon, 25 Dec 2017 16:11:00 +0000</pubDate>
<dc:creator>宋鑫磊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feisuccess/p/8111830.html</dc:identifier>
</item>
<item>
<title>redis基础（一） - 天宇之游</title>
<link>http://www.cnblogs.com/cwp-bg/p/8111788.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cwp-bg/p/8111788.html</guid>
<description>&lt;p&gt;redis是一种流行的非关系内存型数据库，拥有非常高的读写性能，下面是本人学习的总结。&lt;/p&gt;
&lt;h2 id=&quot;redis的类型&quot;&gt;redis的类型&lt;/h2&gt;
&lt;ol readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;string：字符串类型；一个string最大可以储存512MB的数据，其可以储存任何对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;hash：哈希类型,用来存储对象，key代表对象，field代表属性&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;set：集合类型,无序的集合，元素为string类型，不可重复；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;list：列表类型,其元素类型属于string，按照插入的顺序排序&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;zset：有序集合类型，元素为string，不可重复，每个元素可以指定一个权重，按权重从小到大排列&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;常用命令&quot;&gt;常用命令&lt;/h2&gt;
&lt;h3 id=&quot;服务相关命令&quot;&gt;服务相关命令&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;ping : 返回pong,用来测试连接是否成功；
echo xxx: 在命令行打印一些内容；
quit/exit：退出客户端；
info：返回redis相关的信息；&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;键命令&quot;&gt;键命令&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# redis默认有16个数据库，切换数据库
select index  # 0~15,代表16个数据库

# 查看当前所有的keys
keys *
# 查找键，支持正则
keys pattern  # 常用的有  *(匹配0个或多个) ?(匹配一个) [a-z] [abcd]
# 查看这个key是否存在
exists key
# 查看数据库中所有的键值对的数目
dbsize
# 查看key的类型
type key
# 随机返回数据库里的一个key
randomkey
# 查看有效时间,指的是还剩余的有效时间，如果过期，有效时间置为-2；如果设置为永久有效，有效时间为-1.
ttl key

# 重命名key
rename key1 key2

# 删除一个键值对
del key key 。。。
# 清空当前选择的数据库
flushdb
# 清库该redis的事例
flushall

# 为键值对设置过期时间
expire key seconds&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;操作string类型&quot;&gt;操作string类型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 设置键值对，永久保存
set key value
# 设置有过期时间的键值对，过期自动删除
setex key 时间 value
# 设置多个键值对
mset key value key value ...

# 对于value是数值的情况，可以运算
incr key   # 对value加1
incrby key num  # 对value加一个整数，可以是负数，但不可以是小数
decr key   # 对value减少1
decrby key num  # 对value减一个整数，可以是负数，但不可以是小数

append key value  # 对原来的key的值进行字符串拼接
serlen key   # 获取值得长度&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;操作hash类型&quot;&gt;操作hash类型&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;# 设置单个hash对象
hset key field value
# 设置多个属性
hset key field value field value...
# 判断属性是否存在
hexists key field

# 获取一个属性
hget key field
# 获取多个属性
hmget key field field...
# 获取所有属性和值
hgetall key
# 获取所有的属性
hkeys key
# 获取所有的值
hvals key
# 获取对象属性的个数
hlen key

# 删除属性和值
hdel key field field
# 返回值得字符串的长度
hstrlen key field
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;操作list类型&quot;&gt;操作list类型&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;# 创建一个list并在头部插入数据
lpush key value value..
# 在尾部插入数据
rpush key value value
# 在一个元素的后面或前面插入新的元素，如果有多个相同的元素，会按从头到尾找到的第一个元素
linsert key before|after 已有的元素  新的元素
# 设置指定的索引值的元素值，可以是负数，-1表示最后一个
lset  key index value  # lset list1 3 kkk

# 从头部弹出元素
lpop key
# 从尾部弹出元素
rpop key
# 返回指定范围内的元素，基于下标0，可以是负数
lrange key start stop   # lrange list1 -3 -1
# 如果指定的下标超出了范围，会返回实际的数据

# 删除元素
lrem key count value   
# 删除count个value值，如果count&amp;gt;0，从左边开始删；
# 小于0从右边开始删；
# 等于0删除所有的value；
# count的绝对值大于列表中value的个数时，删除所有的value

# 剪切原来的列表
ltrim key start stop

# 返回list的长度
llen key
# 返回对应索引的元素
lindex key index&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;操作集合set&quot;&gt;操作集合set&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;# 创建并添加元素到集合
sadd key value ...

# 返回集合里的所有元素
smembers key
# 返回集合元素的个数
scard key

# 删除元素
srem key value

# 多集合的交际
sinter key1 key2
# 多集合的并集
sunion key1 key2
# 多集合的差集，以第一个key作为基准
sdiff key ...

# 判断元素是否在集合中,如果存在返回1，不存在返回0
sismember key value&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;有序集合zset&quot;&gt;有序集合zset&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;# 创建并加入元素,会按照score的值进行排序，如果元素的分数值相同，将会使用字典排序，按照a到z
zadd key score value score value ...

# 获取集合中的所有的值,超过范围取实际的值
zrange key start stop 
# 返回在分数范围内的元素
zrangebyscore key min max
# 返回元素的个数
zcard key
# 返回score在范围内的元素
zcount key min max
# 返回成员的score的值
zscore key value

# 修改元素的值的分数
zincrby key 整数  value 

# 删除指定元素
zrem key member member
# 删除分数范围的元素
zremrangebyscore key min max
&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;box&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;作者：天宇之游&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/cwp-bg/&quot;&gt;http://www.cnblogs.com/cwp-bg/&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;本文版权归作者和博客园共有，欢迎转载、交流，但未经作者同意必须保留此段声明，且在文章明显位置给出原文链接。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 25 Dec 2017 15:56:00 +0000</pubDate>
<dc:creator>天宇之游</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cwp-bg/p/8111788.html</dc:identifier>
</item>
<item>
<title>你为什么还坚持.NET - 波多尔斯基</title>
<link>http://www.cnblogs.com/podolski/p/8111734.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/podolski/p/8111734.html</guid>
<description>&lt;h3 id=&quot;c换什么比较合适&quot;&gt;C#换什么比较合适？&lt;/h3&gt;
&lt;p&gt;从TIOBE来看，Java、C++、C、Python都好，对了，还不能忘了JS。&lt;/p&gt;
&lt;h3 id=&quot;sql-server换什么比较合适&quot;&gt;Sql Server换什么比较合适？&lt;/h3&gt;
&lt;p&gt;MySql挺好，Oracle也不错，也还有不少选择。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;都挺好，那问题来了，你为什么要换呢？&lt;/p&gt;
&lt;p&gt;最初踏进.NET的世界，很多人都是为了能够快速开发一个程序，解决一个问题。参观各大造船厂，巨硬造船厂给了一个近乎衣来伸手饭来张口的平台，通过这个，很快就能搞定了。&lt;/p&gt;
&lt;p&gt;随后你就上了一条巨硬造船厂的客轮，从水手干起，进入了这个行当，干了一年两年很多年，当了船长，船没沉，还能开。&lt;/p&gt;
&lt;p&gt;一天，船上有人要去北冰洋了，觉得破冰船更合适，就下船了，上了破冰船；&lt;br/&gt;又过一阵子，有人要运大型龙门吊了，半潜船合适，也下船了；&lt;br/&gt;过两天打仗了，有人去了战列舰。&lt;/p&gt;
&lt;p&gt;你还在原来的船上，船上的人越来越少，你怀疑，MDZZ，哥们是不是上了贼船？自己开始焦虑，我应该学点什么好，应该换条什么船。&lt;/p&gt;
&lt;p&gt;JS很火，Node.js,react native等技术把js从前端拉到的后端，移动端，感觉什么都能做。仿佛js的船就是航空母舰一样，匆匆上了js的船，开航母，真开心。&lt;br/&gt;“语言都是相通的”，学个语法而已，一个礼拜两个礼拜差不多了，航母一样开。&lt;/p&gt;
&lt;p&gt;航母是船，但是不是客轮，好多地方和客轮不一样，没控制好，撞沉了。我靠这什么鬼航母！下船，准备找另一条船...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/616093/201712/616093-20171225234257837-638008321.jpg&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;入行很多年，最近一直在管理和开发两个角色上切换，.NET的技术也算是碰了不少。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Winform -&amp;gt; ASP.NET -&amp;gt; ASP.NET MVC -&amp;gt; WPF -&amp;gt; OPENTK -&amp;gt; Accord.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回头一看，造船厂一直在出新的船，&lt;code&gt;Xamarin&lt;/code&gt;, &lt;code&gt;.Net Core&lt;/code&gt;，要被技术淹没了。我觉得...有点迷茫？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;今天，需要开发一个服务程序，那么&lt;code&gt;Windows Service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要开发一个3D程序，&lt;code&gt;OPENTK + Winform&lt;/code&gt;，外观再复杂一些？&lt;code&gt;OPENTK + WPF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在加点图像处理吧，+ &lt;code&gt;Emgucv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再加点机器学习啥的 + &lt;code&gt;Accord.net&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组态软件？俄语会不会，会的话可以试试&lt;code&gt;RapidScada&lt;/code&gt;，不会，那会英语也行啊。&lt;/li&gt;
&lt;li&gt;要调用C++？&lt;code&gt;P/Invoke&lt;/code&gt;，&lt;code&gt;C++ Interop&lt;/code&gt;，坑不少，但是也能用下。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Newtonsoft.Json&lt;/code&gt;, &lt;code&gt;EF&lt;/code&gt;, &lt;code&gt;Dapper&lt;/code&gt;, &lt;code&gt;dotnetty&lt;/code&gt;, &lt;code&gt;supersocket&lt;/code&gt;...这些东西潜移默化在脑子里，会用能用，至少知道该找些什么。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这形成了你的一种体系，虽然品类众多，但是互联互通，迷茫但不迷失。当你决定弃船的时候，放弃的不仅是一艘船，而是一个体系。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;不愿意重新来过是不是意味着要耗死在这条船上了&quot;&gt;不愿意重新来过，是不是意味着要耗死在这条船上了？&lt;/h3&gt;
&lt;p&gt;我们都害怕没有选择，很正常，牢牢捆在船上听上去不是个好主意。&lt;/p&gt;
&lt;p&gt;兴趣和工作需要，这些都是契机，当你需要用的东西用另外一种语言，另外一种体积比较合适的话，可以先试水用一用。但我建议不要轻易弃船。&lt;/p&gt;
&lt;p&gt;有时候兴趣只是一时的，很多年前，我就很喜欢单片机，STM32正开始火，当时整了很多教程，看了很多资料，买了开发板。后来结果并没有坚持下去，我并不是真的喜欢。工作需要也是一样的，前阵子，工作需要，我学了下python，写了个脚本操作excel的，B格可高了，然后发现我还是不习惯，写了个监控程序，发现费半天劲也摸不着门道，还是用C#来的直接。&lt;/p&gt;
&lt;p&gt;这并不是说排斥其他语言，我现在时不时还要写python，但是这不是我主要的语言。我这行为...应该叫“脚踏两条船吧”。说不定哪天python用的多了用的熟了，有必要了，我就换船。&lt;/p&gt;
&lt;p&gt;你要TensorFlow，学点Java，Python，还要加点深度学习的知识。3D图像、Lidar，整点C++吧。上面的领域.NET也能做，但是不是强项.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;很多小伙伴希望能掌握一种语言，学会了就能够吃遍天下了，愿望是美好的，我也希望有这么一天，可惜现在的现实...有取有舍，磨砺好一个技能就很不错了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.NET是不是好船（nice boat？），说说个人意见。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;语言支持丰富（C#,VB.NET,F#)；&lt;/li&gt;
&lt;li&gt;商业支持好，近期开源生态圈也好；&lt;/li&gt;
&lt;li&gt;支持桌面开发、WEB开发、移动开发（Xamarin），基本上除了前端都能做了（当然有方案生成前端代码的，不讨论）；&lt;/li&gt;
&lt;li&gt;组件丰富，轮子也多。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;不能算完美的船，但也不错了。(佛系佛系)&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;你为什么还坚持.net&quot;&gt;你为什么还坚持.NET？&lt;/h3&gt;
&lt;p&gt;我搞客运的，客轮，我觉得对我来说挺好...&lt;br/&gt;好好考船员适任证书，往远洋方面发展，也希望客轮的船长越来越多，船队发展越来越好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/616093/201712/616093-20171225233605619-1338786698.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 15:45:00 +0000</pubDate>
<dc:creator>波多尔斯基</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/podolski/p/8111734.html</dc:identifier>
</item>
<item>
<title>nginx、fastCGI、php-fpm关系梳理 - AmyZYX</title>
<link>http://www.cnblogs.com/amyzhu/p/8068125.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/amyzhu/p/8068125.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Linux下搭建nginx+php+memached(LPMN)的时候，nginx.conf中配需要配置fastCGI，php需要安装php-fpm扩展并启动php-fpm守护进程，nginx才可以解析php脚本。那么，这样配置的背后原理是什么？nginx、fastCGI、php-fpm之间又有什么关系呢？博主一直有这样的疑惑，由于无法理清nginx、php-fpm之间的关系，遇到nginx解析不了php脚本的时候，往往不知所措，花费的问题排查时间也非常长。因此，特地抽时间了解这背后的原理，梳理了一下nginx、fastCGI、php-fpm之间的关系。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一、fastCGI？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　fastCGI是由CGI（common gateway interface，通用网关接口）发展而来，是http服务器（nginx、apache）和动态脚本语言（php）之间的&lt;strong&gt;通信接口&lt;/strong&gt;。记住，fastCGI只是一个接口。&lt;/p&gt;
&lt;p&gt;　　fastCGI的优点：fastCGI采用C/S结构，可以&lt;strong&gt;&lt;span&gt;将http服务器和动态脚本解析服务器分离（二者可以部署在不同的服务器上）&lt;/span&gt;&lt;/strong&gt;，让http服务器专一处理静态请求和转发动态请求到脚本解析服务器；脚本解析服务器则专一处理动态脚本的请求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、nginx+fastCGI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　nginx不支持对外部程序的直接调用或者解析，必须通过fastCGI进行调用。nginx收到CGI请求之后，fastCGI接口在脚本解析服务器上，启动一个或者多个守护进程对动态脚本进行解析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、php-fpm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　fastCGI进程管理器/引擎：即对动态脚本进行实际解析的守护进程，由fastCGI启动。这里，php-fpm就是支持解析php的一个fastCGI进程管理器/引擎。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;f&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;astCGI是nginx和php之间的一个通信接口，该接口实际处理过程通过启动php-fpm进程来解析php脚本&lt;/span&gt;&lt;/strong&gt;，即&lt;span&gt;&lt;strong&gt;php-fpm相当于一个动态应用服务器&lt;/strong&gt;&lt;/span&gt;，从而实现nginx动态解析php。因此，如果nginx服务器需要支持php解析，需要在nginx.conf中增加php的配置：将php脚本转发到fastCGI进程监听的IP地址和端口（php-fpm.conf中指定）。同时，php安装的时候，需要开启支持fastCGI选项，并且编译安装php-fpm补丁/扩展，同时，需要&lt;span&gt;&lt;strong&gt;启动php-fpm进程，才可以解析nginx通过fastCGI转发过来的php脚本&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考文章：&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 25 Dec 2017 15:40:00 +0000</pubDate>
<dc:creator>AmyZYX</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/amyzhu/p/8068125.html</dc:identifier>
</item>
<item>
<title>快速序列化组件MessagePack介绍 - 晓晨Master</title>
<link>http://www.cnblogs.com/stulzq/p/8039933.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stulzq/p/8039933.html</guid>
<description>&lt;p&gt;MessagePack for C＃（MessagePack-CSharp）是用于C＃的极速MessagePack序列化程序，比MsgPack-Cli快10倍，与其他所有C＃序列化程序相比，具有最好的性能。 MessagePack for C＃具有内置的LZ4压缩功能，可以实现超快速序列化和二进制占用空间小。 性能永远是重要的！ 可用于游戏，分布式计算，微服务，数据存储到Redis等。支持.NET, .NET Core, Unity, Xamarin。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171214200132920-1375437951.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图我们看出MessagePack for C＃在性能测试中是最好的，这里解释一下第三个MsgPack-Cli是MessagePack官方实现的。第一和第二都是MessagePack for C＃，第一项相比第二项具有稍快一点的序列化和反序列化速度，但是第二项采用了L4压缩功能，显著的减少了二进制的大小。在实际使用中推荐使用L4压缩功能。&lt;/p&gt;

&lt;p&gt;该组件已经发布在Nuget，使用命令加入项目。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-Package MessagePack&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;分析器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-Package MessagePackAnalyzer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;扩展&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;Install-Package MessagePack.ImmutableCollection
Install-Package MessagePack.ReactiveProperty
Install-Package MessagePack.UnityShims
Install-Package MessagePack.AspNetCoreMvcFormatter&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;1.4189189189189&quot;&gt;
&lt;p&gt;Unity在此处下载 &lt;a href=&quot;https://github.com/neuecc/MessagePack-CSharp/releases&quot; class=&quot;uri&quot;&gt;https://github.com/neuecc/MessagePack-CSharp/releases&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;定义一个类添加&lt;code&gt;[MessagePackObject]&lt;/code&gt;特性，公共成员（属性或者字段）添加&lt;code&gt;[Key]&lt;/code&gt;特性，调用&lt;code&gt;MessagePackSerializer.Serialize&amp;lt;T&amp;gt;/Deserialize&amp;lt;T&amp;gt;&lt;/code&gt;进行序列化和反序列化，&lt;code&gt;ToJson&lt;/code&gt;可以帮我们转储二进制为json格式。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;// 标记 MessagePackObjectAttribute
[MessagePackObject]
public class MyClass
{
    // Key 是序列化索引，对于版本控制非常重要。
    [Key(0)]
    public int Age { get; set; }

    [Key(1)]
    public string FirstName { get; set; }

    [Key(2)]
    public string LastName { get; set; }

    // 公共成员中不序列化目标，标记IgnoreMemberAttribute
    [IgnoreMember]
    public string FullName { get { return FirstName + LastName; } }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;class Program
{
    static void Main(string[] args)
    {
        var mc = new MyClass
        {
            Age = 99,
            FirstName = &quot;hoge&quot;,
            LastName = &quot;huga&quot;,
        };

        // 序列化
        var bytes = MessagePackSerializer.Serialize(mc);
        //反序列化
        var mc2 = MessagePackSerializer.Deserialize&amp;lt;MyClass&amp;gt;(bytes);

        // 你可以将msgpack二进制转储为可读的json。
        // 在默认情况下，MeesagePack for C＃减少了属性名称信息。
        // [99,&quot;hoge&quot;,&quot;huga&quot;]
        var json = MessagePackSerializer.ToJson(bytes);
        Console.WriteLine(json);

        Console.ReadKey();

    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;序列化索引将会影响该信息在序列化数据中的位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认情况下特性是必须的，但是我们有方法进行改变，让它变为不是必须的，详情请看后面。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MessagePackAnalyzer&lt;/code&gt; 可以帮助我们定义对象. 如果不符合规则，那么特性, 程序集等可以被检测到，如果我们编译就会出现编译错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171214203656482-248372267.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果要允许特定类型（例如，注册自定义类型时），请将MessagePackAnalyzer.json放在项目根目录下，并将生成操作设置为&lt;code&gt;AdditionalFiles&lt;/code&gt;（其他文件）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171214203909888-962307440.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是MessagePackAnalyzer.json内容的一个示例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[ &quot;MyNamespace.FooClass&quot;, &quot;MyNameSpace.BarStruct&quot; ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这些类型可以默认序列化。&lt;/p&gt;
&lt;p&gt;基元（int、string等等）, Enum, Nullable&amp;lt;&amp;gt;, TimeSpan, DateTime, DateTimeOffset, Nil, Guid, Uri, Version, StringBuilder, BitArray, ArraySegment&amp;lt;&amp;gt;, BigInteger, Complext, Task, Array[], Array[,], Array[,,], Array[,,,], KeyValuePair&amp;lt;,&amp;gt;, Tuple&amp;lt;,...&amp;gt;, ValueTuple&amp;lt;,...&amp;gt;, List&amp;lt;&amp;gt;, LinkedList&amp;lt;&amp;gt;, Queue&amp;lt;&amp;gt;, Stack&amp;lt;&amp;gt;, HashSet&amp;lt;&amp;gt;, ReadOnlyCollection&amp;lt;&amp;gt;, IList&amp;lt;&amp;gt;, ICollection&amp;lt;&amp;gt;, IEnumerable&amp;lt;&amp;gt;, Dictionary&amp;lt;,&amp;gt;, IDictionary&amp;lt;,&amp;gt;, SortedDictionary&amp;lt;,&amp;gt;, SortedList&amp;lt;,&amp;gt;, ILookup&amp;lt;,&amp;gt;, IGrouping&amp;lt;,&amp;gt;, ObservableCollection&amp;lt;&amp;gt;, ReadOnlyOnservableCollection&amp;lt;&amp;gt;, IReadOnlyList&amp;lt;&amp;gt;, IReadOnlyCollection&amp;lt;&amp;gt;, ISet&amp;lt;&amp;gt;, ConcurrentBag&amp;lt;&amp;gt;, ConcurrentQueue&amp;lt;&amp;gt;, ConcurrentStack&amp;lt;&amp;gt;, ReadOnlyDictionary&amp;lt;,&amp;gt;, IReadOnlyDictionary&amp;lt;,&amp;gt;, ConcurrentDictionary&amp;lt;,&amp;gt;, Lazy&amp;lt;&amp;gt;, Task&amp;lt;&amp;gt;, 自定义继承ICollection &amp;lt;&amp;gt;或IDictionary &amp;lt;,&amp;gt;具有无参构造方法, IList，IDictionary和自定义继承ICollection或IDictionary具有无参构造函数（包括ArrayList和Hashtable）。&lt;/p&gt;
&lt;p&gt;您可以添加自定义类型的支持和一些官方/第三方扩展包。 对于ImmutableCollections（ImmutableList &amp;lt;&amp;gt;等），对于ReactiveProperty和Unity（Vector3, Quaternion等等），对于F＃（Record，FsList，Discriminated Unions等）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MessagePack.Nil&lt;/code&gt;是MessagePack for C＃的内置null/void/unit表示类型。&lt;/p&gt;

&lt;p&gt;MessagePack for C＃可以序列化public Class或Struct，序列化目标必须标记[MessagePackObject]和[Key]， Key类型可以选择int或字符串。如果Key类型是int，则使用序列化格式为数组，如果Key类型是字符串，则使用序列化格式为键值对，如果您定义了[MessagePackObject(keyAsPropertyName:true)]，则不需要Key特性。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[MessagePackObject]
public class Sample1
{
    [Key(0)]
    public int Foo { get; set; }
    [Key(1)]
    public int Bar { get; set; }
}

[MessagePackObject]
public class Sample2
{
    [Key(&quot;foo&quot;)]
    public int Foo { get; set; }
    [Key(&quot;bar&quot;)]
    public int Bar { get; set; }
}

[MessagePackObject(keyAsPropertyName: true)]
public class Sample3
{
    // 不需要key特性
    public int Foo { get; set; }

    // 不需要序列化的成员使用IgnoreMember特性
    [IgnoreMember]
    public int Bar { get; set; }
}

// 结果 [10,20]
Console.WriteLine(MessagePackSerializer.ToJson(new Sample1 { Foo = 10, Bar = 20 }));

// 结果 {&quot;foo&quot;:10,&quot;bar&quot;:20}
Console.WriteLine(MessagePackSerializer.ToJson(new Sample2 { Foo = 10, Bar = 20 }));

// 结果 {&quot;Foo&quot;:10}
Console.WriteLine(MessagePackSerializer.ToJson(new Sample3 { Foo = 10, Bar = 20 }));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所有模式序列化目标都是公共实例成员（字段或属性）。 如果要避免序列化目标，可以将&lt;code&gt;[IgnoreMember]&lt;/code&gt;添加到目标成员。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;目标类必须是 public, 不允许 private, internal 类.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应该使用哪种Key类型，int或string？ 作者建议使用int key，因为比string key更快，更紧凑。 但是string key有关键的名字信息，对调试很有用。&lt;/p&gt;
&lt;p&gt;MessagePackSerializer序列化目标时，必须在目标使用特性才能保证稳健性，如果类进行了扩充，你必须意识到版本控制。如果Key不存在，MessagePackSerializer将会使用默认值。如果使用的是int key，那么必须从0开始，如果不必要的属性出现，请填写空缺的数字。重用是不好的。 此外，如果Int Key的跳转数字差距太大，则会影响二进制大小。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[MessagePackObject]
public class IntKeySample
{
    [Key(3)]
    public int A { get; set; }
    [Key(10)]
    public int B { get; set; }
}

// int key不从0开始并且数字进行了跳跃，将会出现下面的结果
//[null,null,null,0,null,null,null,null,null,null,0]
Console.WriteLine(MessagePackSerializer.ToJson(new IntKeySample()));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你想像JSON.NET那样使用！不想加特性！ 如果你这样想，你可以使用无约定的解析器。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class ContractlessSample
{
    public int MyProperty1 { get; set; }
    public int MyProperty2 { get; set; }
}

var data = new ContractlessSample { MyProperty1 = 99, MyProperty2 = 9999 };
var bin = MessagePackSerializer.Serialize(data, MessagePack.Resolvers.ContractlessStandardResolver.Instance);

// {&quot;MyProperty1&quot;:99,&quot;MyProperty2&quot;:9999}
Console.WriteLine(MessagePackSerializer.ToJson(bin));

// 全局设置无约束解析器为默认解析器
MessagePackSerializer.SetDefaultResolver(MessagePack.Resolvers.ContractlessStandardResolver.Instance);

// 序列化
var bin2 = MessagePackSerializer.Serialize(data);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我想序列化私人成员！ 默认情况下，不能序列化/反序列化私有成员。 但是你可以使用allow-private解析器来序列化私人成员。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[MessagePackObject]
public class PrivateSample
{
    [Key(0)]
    int x;

    public void SetX(int v)
    {
        x = v;
    }

    public int GetX()
    {
        return x;
    }
}

var data = new PrivateSample();
data.SetX(9999);

// 你可以选择 StandardResolverAllowPrivate 或者  ContractlessStandardResolverAllowPrivate 解析器
var bin = MessagePackSerializer.Serialize(data, MessagePack.Resolvers.DynamicObjectResolverAllowPrivate.Instance);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我不需要类型，我想像BinaryFormatter那样使用！ 你可以使用无类型的解析器和帮助器。 请参阅Typeless部分。&lt;/p&gt;
&lt;p&gt;解析器是MessagePack For C#的关键定制点。 详情请见扩展部分。&lt;/p&gt;

&lt;p&gt;您可以使用[DataContract]而不是[MessagePackObject]。 如果type标记为DataContract，则可以使用[DataMember]代替[Key]，[IgnoreDataMember]代替[IgnoreMember]。&lt;/p&gt;
&lt;p&gt;[DataMember(Order = int)] 和 [Key(int)]相同, [DataMember(Name = string)]和 [Key(string)]相同. 如果使用 [DataMember], 则类似于 [Key(nameof(propertyname)].&lt;/p&gt;
&lt;p&gt;使用DataContract使其成为一个共享的类库，您不必引用MessagePack for C＃。 但是，它不包含在分析器或由&lt;code&gt;mpc.exe&lt;/code&gt;生成的代码中。此外，像UnionAttribute，MessagePackFormatterAttribute，SerializationConstructorAttribute等功能不能使用。 出于这个原因，我建议您基本上使用MessagePack for C＃特性。&lt;/p&gt;

&lt;p&gt;MessagePack for C＃支持反序列化不可变对象。 例如，这个struct可以自然地序列化/反序列化。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[MessagePackObject]
public struct Point
{
    [Key(0)]
    public readonly int X;
    [Key(1)]
    public readonly int Y;

    public Point(int x, int y)
    {
        this.X = x;
        this.Y = y;
    }
}

var data = new Point(99, 9999);
var bin = MessagePackSerializer.Serialize(data);

// Okay to deserialize immutable obejct
var point = MessagePackSerializer.Deserialize&amp;lt;Point&amp;gt;(bin);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;MessagePackSerializer choose constructor with the least matched argument, match index if key in integer or match name(ignore case) if key is string. If encounts MessagePackDynamicObjectResolverException: can't find matched constructor parameter you should check about this.&lt;/p&gt;
&lt;p&gt;MessagePackSerializer选择具有最少参数的构造方法，如果key是整型将匹配索引或者如果key是字符串将匹配名称（忽略大小写）。 如果遇到 &lt;code&gt;MessagePackDynamicObjectResolverException: can't find matched constructor parameter&lt;/code&gt; 你应该检查一会下。&lt;/p&gt;
&lt;p&gt;如果不能自动匹配，可以通过[SerializationConstructorAttribute]手动指定使用构造函数。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[MessagePackObject]
public struct Point
{
    [Key(0)]
    public readonly int X;
    [Key(1)]
    public readonly int Y;

    // 如果没有标记特性，将会使用这方法（最少参数）
    public Point(int x)
    {
        X = x;
    }

    [SerializationConstructor]
    public Point(int x, int y)
    {
        this.X = x;
        this.Y = y;
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;如果对象实现了&lt;code&gt;IMessagePackSerializationCallbackReceiver&lt;/code&gt;，则接受&lt;code&gt;OnBeforeSerialize&lt;/code&gt;和&lt;code&gt;OnAfterDeserialize&lt;/code&gt;序列化处理。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[MessagePackObject]
public class SampleCallback : IMessagePackSerializationCallbackReceiver
{
    [Key(0)]
    public int Key { get; set; }

    public void OnBeforeSerialize()
    {
        Console.WriteLine(&quot;OnBefore&quot;);
    }

    public void OnAfterDeserialize()
    {
        Console.WriteLine(&quot;OnAfter&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;MessagePack for C＃支持序列化接口。这就像XmlInclude或ProtoInclude。在MessagePack for C＃里叫Union。UnionAttribute只能附加到接口或抽象类。 它需要区分的整型key和子类型&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;// mark inheritance types
[MessagePack.Union(0, typeof(FooClass))]
[MessagePack.Union(1, typeof(BarClass))]
public interface IUnionSample
{
}

[MessagePackObject]
public class FooClass : IUnionSample
{
    [Key(0)]
    public int XYZ { get; set; }
}

[MessagePackObject]
public class BarClass : IUnionSample
{
    [Key(0)]
    public string OPQ { get; set; }
}

// ---

IUnionSample data = new FooClass() { XYZ = 999 };

// serialize interface.
var bin = MessagePackSerializer.Serialize(data);

// deserialize interface.
var reData = MessagePackSerializer.Deserialize&amp;lt;IUnionSample&amp;gt;(bin);

// use type-switch of C# 7.0
switch (reData)
{
    case FooClass x:
        Console.WriteLine(x.XYZ);
        break;
    case BarClass x:
        Console.WriteLine(x.OPQ);
        break;
    default:
        break;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;C＃7.0 type-switch是Union的最佳选择。 Union被序列化为两个长度的数组。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;IUnionSample data = new BarClass { OPQ = &quot;FooBar&quot; };

var bin = MessagePackSerializer.Serialize(data);

// Union is serialized to two-length array, [key, object]
// [1,[&quot;FooBar&quot;]]
Console.WriteLine(MessagePackSerializer.ToJson(bin));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在抽象类中使用Union，你可以像接口那样使用。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[Union(0, typeof(SubUnionType1))]
[Union(1, typeof(SubUnionType2))]
[MessagePackObject]
public abstract class ParentUnionType
{
    [Key(0)]
    public int MyProperty { get; set; }
}

[MessagePackObject]
public class SubUnionType1 : ParentUnionType
{
    [Key(1)]
    public int MyProperty1 { get; set; }
}

[MessagePackObject]
public class SubUnionType2 : ParentUnionType
{
    [Key(1)]
    public int MyProperty2 { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;继承类型的序列化，在数组（或键值对）中是扁平化的，对于整型键是无关紧要的，它不能复制父类和所有的子类。&lt;/p&gt;

&lt;p&gt;如果使用&lt;code&gt;MessagePackSerializer.Deserialize&amp;lt;object&amp;gt;&lt;/code&gt; 或者&lt;code&gt;MessagePackSerializer.Deserialize&amp;lt;dynamic&amp;gt;&lt;/code&gt;，messagepack将转换为 primitive values，msgpack-primitive将转换为&lt;code&gt;bool, char, sbyte, byte, short, int, long, ushort, uint, ulong, float, double, DateTime, string, byte[], object[], IDictionary&amp;lt;object, object&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;// sample binary.
var model = new DynamicModel { Name = &quot;foobar&quot;, Items = new[] { 1, 10, 100, 1000 } };
var bin = MessagePackSerializer.Serialize(model, ContractlessStandardResolver.Instance);

// dynamic, untyped
var dynamicModel = MessagePackSerializer.Deserialize&amp;lt;dynamic&amp;gt;(bin, ContractlessStandardResolver.Instance);

Console.WriteLine(dynamicModel[&quot;Name&quot;]); // foobar
Console.WriteLine(dynamicModel[&quot;Items&quot;][2]); // 100&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所以你可以使用索引访问键值对或者数组。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;StandardResolver&lt;/code&gt;和&lt;code&gt;ContractlessStandardResolver&lt;/code&gt;可以通过&lt;code&gt;DynamicObjectTypeFallbackResolver&lt;/code&gt;将Object类型序列化为具体类型。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var objects = new object[] { 1, &quot;aaa&quot;, new ObjectFieldType { Anything = 9999 } };
var bin = MessagePackSerializer.Serialize(objects);

// [1,&quot;aaa&quot;,[9999]]
Console.WriteLine(MessagePackSerializer.ToJson(bin));

// Support Anonymous Type Serialize
var anonType = new { Foo = 100, Bar = &quot;foobar&quot; };
var bin2 = MessagePackSerializer.Serialize(anonType, MessagePack.Resolvers.ContractlessStandardResolver.Instance);

// {&quot;Foo&quot;:100,&quot;Bar&quot;:&quot;foobar&quot;}
Console.WriteLine(MessagePackSerializer.ToJson(bin2));&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Unity支持是有限的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;反序列化时，与Dynamic（Untyped）反序列化相同。&lt;/p&gt;

&lt;p&gt;Typeless API就像BinaryFormatter, 将类型信息嵌入到二进制中，所以不需要类型去反序列化.&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;object mc = new Sandbox.MyClass()
{
    Age = 10,
    FirstName = &quot;hoge&quot;,
    LastName = &quot;huga&quot;
};

// serialize to typeless
var bin = MessagePackSerializer.Typeless.Serialize(mc);

// binary data is embeded type-assembly information.
// [&quot;Sandbox.MyClass, Sandbox&quot;,10,&quot;hoge&quot;,&quot;huga&quot;]
Console.WriteLine(MessagePackSerializer.ToJson(bin));

// can deserialize to MyClass with typeless
var objModel = MessagePackSerializer.Typeless.Deserialize(bin) as MyClass;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;类型信息由mspgack ext格式序列化，typecode为100。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MessagePackSerializer.Typeless&lt;/code&gt;是&lt;code&gt;Serialize / Deserialize &amp;lt;object&amp;gt;（TypelessContractlessStandardResolver.Instance）&lt;/code&gt;的快捷方式。 如果要配置默认的Typeless解析器，可以通过&lt;code&gt;MessagePackSerializer.Typeless.RegisterDefaultResolver&lt;/code&gt;进行设置。&lt;/p&gt;

&lt;p&gt;与其他序列化器在Windows 10 Pro x64 Intel Core i7-6700K 4.00GHz, 32GB RAM上进行Benchmarks比较，&lt;a href=&quot;https://github.com/neuecc/ZeroFormatter/tree/master/sandbox/PerformanceComparison&quot; title=&quot;Benchmark代码在这&quot;&gt;Benchmark代码在这&lt;/a&gt;-&lt;a href=&quot;https://github.com/neuecc/ZeroFormatter/blob/bc63cb925d/sandbox/PerformanceComparison/packages.config&quot; title=&quot;版本信息&quot;&gt;版本信息&lt;/a&gt;，ZeroFormatter和FlatBuffers具有非常快速的反序列化器，因此忽略反序列化的性能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171219155629381-1253440926.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MessagePack for C＃使用许多技术来提高性能。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;序列化只使用ref byte []和int offset，不使用（Memory）Stream（调用Stream api会有开销）&lt;/li&gt;
&lt;li&gt;高级API使用内部内存池，分配工作内存不要低于64k&lt;/li&gt;
&lt;li&gt;不创建中间实用程序实例（XxxWriter / Reader，XxxContext等）&lt;/li&gt;
&lt;li&gt;所有代码避免装箱，所有平台（包括Unity / IL2CPP）&lt;/li&gt;
&lt;li&gt;对静态泛型字段生成的格式化程序进行缓存，查找时从缓存查找（不使用字典缓存，因为字典查找需要一定开销）&lt;/li&gt;
&lt;li&gt;重新调整的动态代码生成&lt;/li&gt;
&lt;li&gt;当代码生成知道目标是primitive时直接调用PrimitiveAPI&lt;/li&gt;
&lt;li&gt;当代码生成知道目标（整数/字符串）范围时，减少可变长度格式的分支&lt;/li&gt;
&lt;li&gt;不在迭代集合上使用IEnumerable&amp;lt;T&amp;gt; 抽象&lt;/li&gt;
&lt;li&gt;使用预先生成的查找表来减少检查消息包类型所耗时间&lt;/li&gt;
&lt;li&gt;对非泛型方法使用优化类型key字典&lt;/li&gt;
&lt;li&gt;避免查找映射（字符串键）键的字符串键解码，并使用自动化名称查找与il内联代码生成&lt;/li&gt;
&lt;li&gt;对于字符串键编码，预先生成的成员名字节并在IL中使用固定大小的二进制副本&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在创建这个库之前，作则实现了一个具有ZeroFormatter＃Performance的快速序列化器。 这是一个进一步演变的实现。 MessagePack for C#始终是快速的，为所有类型（原始，小结构，大对象，任何集合）进行了优化。&lt;/p&gt;

&lt;p&gt;性能取决于选项。 这是一个BenchmarkDotNet的微型benchamark。 目标对象有9个成员（MyProperty1〜MyProperty9），值为零。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;IntKey&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;72.67 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1.00&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0132&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;56 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;StringKey&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;217.95 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;3.00&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0131&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;56 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Typeless_IntKey&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;176.71 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2.43&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0131&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;56 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Typeless_StringKey&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;378.64 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5.21&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0129&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;56 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MsgPackCliMap&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1,355.26 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;18.65&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.1431&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;608 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;MsgPackCliArray&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;455.28 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;6.26&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0415&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;176 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ProtobufNet&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;265.85 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;3.66&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0319&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;136 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Hyperion&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;366.47 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5.04&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0949&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;400 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;JsonNetString&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2,783.39 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;38.30&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.6790&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2864 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JsonNetStreamReader&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;3,297.90 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;45.38&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1.4267&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;6000 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;JilString&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;553.65 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;7.62&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0362&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;152 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JilStreamReader&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1,408.46 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;19.38&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.8450&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;3552 B&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;IntKey，StringKey，Typeless_IntKey，Typeless_StringKey都是MessagePack for C＃的方法&lt;br/&gt;，在反序列化过程中实现零内存分配。JsonNetString /JilString从字符串反序列化。JsonStStreamReader / JilStreamReader是从StreamReader的UTF8 byte []中反序列化的。反序列化通常从Stream读取。 因此，它将从字节数组（或流）而不是字符串中读取。&lt;/p&gt;
&lt;p&gt;MessagePack for C＃IntKey是最快的。 StringKey比IntKey慢，因为StringKey需要从字符串进行匹配。 如果是IntKey，读取数组长度，根据数组长度进行for循环二进制解码。 如果StringKey，读取map 长度，根据map长度循环，首先需要对密钥解码，然后按照key查找，最后二进制解码，则需要额外两个步骤（解码密钥和按键查找）。&lt;/p&gt;
&lt;p&gt;字符串键通常是有用的，无约束的，简单的JSON替换，与其他语言的互操作性，以及更多的某些版本。 MessagePack for C＃也为String Key进行了优化。 首先，它不会将UTF8字节数组解码为与成员名称匹配的字符串，它会按原样查找字节数组（避免解码成本和额外分配）。&lt;/p&gt;
&lt;p&gt;它会尝试匹配每个长整型（long）（每8个字符，如果长度不够，填充0）使用automata和在生成时内联IL代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171221135005334-1754235309.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这也避免了计算字节数组的哈希码，并且可以在长单元上进行多次比较。&lt;/p&gt;
&lt;p&gt;这是ILSpy生成的反序列化器代码的示例的反编译。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171221135435678-1158736440.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/neuecc/MessagePack-CSharp#performance&quot; class=&quot;uri&quot;&gt;https://github.com/neuecc/MessagePack-CSharp#performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果节点数量很大，则使用嵌入式二进制搜索进行搜索。&lt;/p&gt;
&lt;p&gt;另外请注意，这是序列化的基准测试结果。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;IntKey&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;84.11 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1.00&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0094&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;40 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;StringKey&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;126.75 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1.51&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0341&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;144 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Typeless_IntKey&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;183.31 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2.18&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0265&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;112 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Typeless_StringKey&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;193.95 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2.31&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0513&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;216 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;MsgPackCliMap&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;967.68 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;11.51&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.1297&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;552 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;MsgPackCliArray&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;284.20 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;3.38&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.1006&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;424 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ProtobufNet&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;176.43 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2.10&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.0665&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;280 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Hyperion&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;280.14 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;3.33&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.1674&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;704 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;ZeroFormatter&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;149.95 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1.78&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.1009&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;424 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JsonNetString&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1,432.55 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;17.03&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.4616&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1944 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;JsonNetStreamWriter&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1,775.72 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;21.11&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1.5526&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;6522 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;JilString&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;547.51 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;6.51&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0.3481&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1464 B&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;JilStreamWriter&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;778.78 ns&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;NA&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;9.26&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1.4448&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;6066 B&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;当然，IntKey是最快的，但StringKey也不错。&lt;/p&gt;

&lt;p&gt;MessagePack是一个快速和紧凑的格式，但它不是压缩格式。 LZ4是非常快速的压缩算法，使用MessagePack for C＃可以实现极快的性能和非常紧凑的二进制大小！&lt;/p&gt;
&lt;p&gt;MessagePack for C＃具有内置的LZ4支持。 您可以使用LZ4MessagePackSerializer而不是MessagePackSerializer。 内建支持是特殊的，作者已经创建了序列化压缩管道，并专门调整了管道，所以共享工作内存，不分配，不要调整，直到完成。&lt;/p&gt;
&lt;p&gt;序列化二进制不是简单地压缩lz4二进制。 序列化二进制是有效的MessagePack二进制使用ext格式和自定义typecode（99）。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var array= Enumerable.Range(1, 100).Select(x =&amp;gt; new MyClass { Age = 5, FirstName = &quot;foo&quot;, LastName = &quot;bar&quot; }).ToArray();

// call LZ4MessagePackSerializer instead of MessagePackSerializer, api is completely same
var lz4Bytes = LZ4MessagePackSerializer.Serialize(array);
var mc2 = LZ4MessagePackSerializer.Deserialize&amp;lt;MyClass[]&amp;gt;(lz4Bytes);

// you can dump lz4 message pack
// [[5,&quot;hoge&quot;,&quot;huga&quot;],[5,&quot;hoge&quot;,&quot;huga&quot;],....]
var json = LZ4MessagePackSerializer.ToJson(lz4Bytes);
Console.WriteLine(json);

// lz4Bytes is valid MessagePack, it is using ext-format( [TypeCode:99, SourceLength|CompressedBinary] )
// [99,&quot;0gAAA+vf3ABkkwWjZm9vo2JhcgoA////yVBvo2Jhcg==&quot;]
var rawJson = MessagePackSerializer.ToJson(lz4Bytes);
Console.WriteLine(rawJson);&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;protbuf-net是.NET上最常用的二进制格式化库。 我（作者）喜欢protobuf-net，并尊重那伟大的工作。 但是如果使用protobuf-net作为通用序列化格式，则可能会引起烦人的问题。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;[ProtoContract]
public class Parent
{
    [ProtoMember(1)]
    public int Primitive { get; set; }
    [ProtoMember(2)]
    public Child Prop { get; set; }
    [ProtoMember(3)]
    public int[] Array { get; set; }
}

[ProtoContract]
public class Child
{
    [ProtoMember(1)]
    public int Number { get; set; }
}

using (var ms = new MemoryStream())
{
    // serialize null.
    ProtoBuf.Serializer.Serialize&amp;lt;Parent&amp;gt;(ms, null);

    ms.Position = 0;
    var result = ProtoBuf.Serializer.Deserialize&amp;lt;Parent&amp;gt;(ms);

    Console.WriteLine(result != null); // True, not null. but all property are zero formatted.
    Console.WriteLine(result.Primitive); // 0
    Console.WriteLine(result.Prop); // null
    Console.WriteLine(result.Array); // null
}

using (var ms = new MemoryStream())
{
    // serialize empty array.
    ProtoBuf.Serializer.Serialize&amp;lt;Parent&amp;gt;(ms, new Parent { Array = new int[0] });

    ms.Position = 0;
    var result = ProtoBuf.Serializer.Deserialize&amp;lt;Parent&amp;gt;(ms);

    Console.WriteLine(result.Array == null); // True, null!
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;protobuf(-net)不能正确处理null和空集合。 因为protobuf没有null表示（这是protobuf-net作者的答案）。&lt;/p&gt;
&lt;p&gt;MessagePack规范可以完全序列化C＃类型。 这就是推荐MessagePack而不是protobuf的原因。&lt;/p&gt;
&lt;p&gt;Protocol Buffers具有良好的IDL和gRPC，这比MessagePack好得多。 如果你想使用IDL，我（作者）推荐Google.Protobuf。&lt;/p&gt;
&lt;p&gt;JSON是很好的通用格式。 这是完美的，简单的，足够规范的。 Utf8Json创建了我采用与MessagePack for C＃相同的体系结构，并避免编码/修饰成本，所以像二进制一样工作。 如果你想了解二进制与文本，请参阅Utf8Json /应使用哪个序列化器部分。&lt;/p&gt;
&lt;p&gt;ZeroFormatter与FlatBuffers类似，但专门用于C＃。 这是特别的。 反序列化速度非常快，但是二进制大小却很大。 而ZeroFormatter的缓存算法需要额外的内存。&lt;/p&gt;
&lt;p&gt;ZeroFormatter也是特别的。 当与ZeroFormatter对比的情况下，它显示格式化的力量。 但是对于许多常见的用途，MessagePack for C＃会更好。&lt;/p&gt;

&lt;p&gt;MessagePack for C＃具有扩展点，您可以添加外部类型的序列化支持。 下列是官方扩展支持。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Install-Package MessagePack.ImmutableCollection
Install-Package MessagePack.ReactiveProperty
Install-Package MessagePack.UnityShims
Install-Package MessagePack.AspNetCoreMvcFormatter&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;MessagePack.ImmutableCollection&lt;/code&gt;添加对 &lt;code&gt;System.Collections.Immutable&lt;/code&gt;的支持. 添加了对&lt;code&gt;ImmutableArray&amp;lt;&amp;gt;, ImmutableList&amp;lt;&amp;gt;, ImmutableDictionary&amp;lt;,&amp;gt;, ImmutableHashSet&amp;lt;&amp;gt;, ImmutableSortedDictionary&amp;lt;,&amp;gt;, ImmutableSortedSet&amp;lt;&amp;gt;, ImmutableQueue&amp;lt;&amp;gt;, ImmutableStack&amp;lt;&amp;gt;, IImmutableList&amp;lt;&amp;gt;, IImmutableDictionary&amp;lt;,&amp;gt;, IImmutableQueue&amp;lt;&amp;gt;, IImmutableSet&amp;lt;&amp;gt;, IImmutableStack&amp;lt;&amp;gt;&lt;/code&gt;的序列化支持.&lt;/p&gt;
&lt;p&gt;MessagePack.ReactiveProperty包添加对ReactiveProperty库的支持。它增加了&lt;code&gt;ReactiveProperty &amp;lt;&amp;gt;，IReactiveProperty &amp;lt;&amp;gt;，IReadOnlyReactiveProperty &amp;lt;&amp;gt;，ReactiveCollection &amp;lt;&amp;gt;，unit&lt;/code&gt;序列化支持。 这对保存视图模型状态很有用。&lt;/p&gt;
&lt;p&gt;MessagePack.AspNetCoreMvcFormatter是ASP.NET Core MVC序列化的附加组件，可提升性能。 这是配置示例。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc().AddMvcOptions(option =&amp;gt;
    {
        option.OutputFormatters.Clear();
        option.OutputFormatters.Add(new MessagePackOutputFormatter(ContractlessStandardResolver.Instance));
        option.InputFormatters.Clear();
        option.InputFormatters.Add(new MessagePackInputFormatter(ContractlessStandardResolver.Instance));
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;更多信息请访问github: &lt;a href=&quot;https://github.com/neuecc/MessagePack-CSharp&quot; class=&quot;uri&quot;&gt;https://github.com/neuecc/MessagePack-CSharp&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 15:31:00 +0000</pubDate>
<dc:creator>晓晨Master</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stulzq/p/8039933.html</dc:identifier>
</item>
<item>
<title>node.js之路由，中间件，ge请求和post请求的参数 - 蜜迷</title>
<link>http://www.cnblogs.com/15fj/p/8111678.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/15fj/p/8111678.html</guid>
<description>&lt;p&gt;一、路由&lt;/p&gt;
&lt;p&gt;　　　1、什么是路由&lt;/p&gt;
&lt;p&gt;　　　　　　服务器需要根据不同的URL或请求来执行不一样的操作，我们可以通过路由来实现这个步骤&lt;/p&gt;
&lt;p&gt;　　　2、实现路由的方法&lt;/p&gt;
&lt;p&gt;　　　　2.1、get请求访问网址时，做什么事&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
1    app.get(&quot;网址&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;2        
3    });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　2.2、post请求访问网址时，做什么事　　　　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
1    app.post(&quot;网址&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;2        
3    });
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　2.3、任何请求访问这个网址　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1    app.all(&quot;网址&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;2        
3    });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　注意：1、’这里的网址不分大小写，例如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1    app.get(&quot;/AAb&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){　　　　　　　　//我们访问　　/aab也是可以的
&lt;/span&gt;2        res.send(&quot;你好&quot;&lt;span&gt;);
&lt;/span&gt;3    });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　　　　2、你路由到/a ， 实际/a?id=2&amp;amp;sex=nan 也能被处理。&lt;/p&gt;

&lt;p&gt;　　3、路由中正则表达式的使用&lt;/p&gt;
&lt;p&gt;　　　　3.1、正则表达式中，未知部分用圆括号分组，然后可以用req.params[0]、[1]得到。req.params类数组对象。　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1    app.get(/^\/student\/([\d]{10})$/,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;2        res.send(&quot;学生信息，学号&quot; + req.params[0&lt;span&gt;]);
&lt;/span&gt;3    });
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　 3.2、冒号写法（推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require('express'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;冒号1&lt;/span&gt;
app.get(&quot;&lt;span&gt;/student/:id&lt;/span&gt;&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; id=&lt;span&gt;req.params[&quot;id&quot;];　　　　　　　　　　　　　　　　　　　　//得到id的值
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reg=/^[\d]{6}$/&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(reg.test(id)){
        res.send(id);
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        res.send(&lt;/span&gt;&quot;请检查格式&quot;&lt;span&gt;);
    }

});
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;冒号2&lt;/span&gt;
app.get(&quot;&lt;span&gt;/:username/:oid&lt;/span&gt;&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; username = &lt;span&gt;req.params[&quot;username&quot;];　　　　　　　　　　　　//得到username的值
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; oid = &lt;span&gt;req.params[&quot;oid&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;];　　　　　　　　　　　　　　　　　　//得到//oid的值&lt;/span&gt;
    res.write(username);
    res.end(oid);
});
app.listen(&lt;/span&gt;3000);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;冒号1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202490/201712/1202490-20171225221433962-2041713246.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 冒号2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202490/201712/1202490-20171225221519759-1144303017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;二、中间件&lt;/p&gt;
&lt;p&gt;　　1、什么是中间件&lt;/p&gt;
&lt;p&gt;　　　　应用于应用之间 充当连接服务的，例如上面的get、post请求就是中间件&lt;/p&gt;
&lt;p&gt;　　2、express中所有的路由（中间件）的顺序（很重要）&lt;/p&gt;
&lt;p&gt;　　　　　2.1、next（）方法　　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
app.get(&lt;/span&gt;&quot;/&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res,next) {
    console.log(&lt;/span&gt;1&lt;span&gt;);
    next();             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有next参数，就只会conlose出来1，而不会是1，2&lt;/span&gt;
&lt;span&gt;});
app.get(&lt;/span&gt;&quot;/&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    console.log(&lt;/span&gt;2&lt;span&gt;);
});
 app.listen(&lt;/span&gt;3000);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　2.2、顺序冲突:下面这两个路由，看起来没有关系，但其实是有冲突的，因为admin可以当做用户名 login可以当做id&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
app.get(&lt;/span&gt;&quot;/&lt;span&gt;:username&lt;/span&gt;/&lt;span&gt;:id&lt;/span&gt;&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
        console.log(&lt;/span&gt;&quot;1&quot;&lt;span&gt;);
     res.send(&lt;/span&gt;&quot;用户信息&quot; +&lt;span&gt; req.params.username);
});

app.get(&lt;/span&gt;&quot;/&lt;span&gt;admin&lt;/span&gt;/&lt;span&gt;login&lt;/span&gt;&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
     console.log(&lt;/span&gt;&quot;2&quot;&lt;span&gt;);
     res.send(&lt;/span&gt;&quot;管理员登录&quot;&lt;span&gt;);
});
app.listen(&lt;/span&gt;3000)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　运行结果：当我们访问172.0.0.1：3000/admin/login时只会输出  &lt;span&gt;用户信息admin &lt;span&gt;而不会&lt;/span&gt;是管理员登录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;2.3、解决顺序冲突&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　2.3.1、具体的往上写，抽象的往下写&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;　　　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体的&lt;/span&gt;
app.get(&quot;/admin/login&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
     console.log(&lt;/span&gt;&quot;2&quot;&lt;span&gt;);
     res.send(&lt;/span&gt;&quot;管理员登录&quot;&lt;span&gt;);
});
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;抽象的&lt;/span&gt;
app.get(&quot;/:username/:id&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
        console.log(&lt;/span&gt;&quot;1&quot;&lt;span&gt;);
     res.send(&lt;/span&gt;&quot;用户信息&quot; +&lt;span&gt; req.params.username);
});
app.listen(&lt;/span&gt;3000)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：当我们访问172.0.0.1：3000/admin/login时输出  &lt;span&gt;管理员登录&lt;/span&gt; 而不会是&lt;span&gt;用户信息admin &lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　　　2.3.2、检索数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
app.get(&lt;/span&gt;&quot;/:username/:id&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res,next) {
     &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; username=&lt;span&gt;req.params.username;
      //检索数据库，如果username 不存在，那么next()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(检索数据库){
        console.log(&lt;/span&gt;&quot;1&quot;&lt;span&gt;);
        res.send(&lt;/span&gt;&quot;用户信息&quot;&lt;span&gt;)
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        next();
    }
});
app.get(&lt;/span&gt;&quot;/admin/login&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    console.log(&lt;/span&gt;&quot;2&quot;&lt;span&gt;);
    res.send(&lt;/span&gt;&quot;管理员登录&quot;&lt;span&gt;);
});
app.listen(&lt;/span&gt;3000)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　3、app.use()中间件：与get、post不同的是，他的网址&lt;span&gt;不是精确匹配的&lt;/span&gt;。而是能够有小文件夹拓展的。&lt;/p&gt;
&lt;p&gt;　　　　3.1、get.use()的模糊匹配&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;匹配所有网址&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;法一&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;当你不写路径的时候，实际上就相当于“/”,就是所有网址&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; app.use(function (req,res,next) {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     console.log(new Date());&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     next();                 //执行下面的&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; });&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;法二&lt;/span&gt;
app.use(&quot;/&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res,next) {
    console.log(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
    next();                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行下面的&lt;/span&gt;
&lt;span&gt;});
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;匹配/admin所有地址，例如/admin/ss/aa这个都行&lt;/span&gt;
app.use(&quot;/admin&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    res.write(req.originalUrl&lt;/span&gt;+&quot;\n&quot;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  /admin/ss/aa&lt;/span&gt;
    res.write(req.path+&quot;\n&quot;);           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  /ss/aa&lt;/span&gt;
    res.write(req.baseUrl+&quot;\n&quot;);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   /admin&lt;/span&gt;
    res.end(&quot;你好&quot;&lt;span&gt;);
});
app.listen(&lt;/span&gt;3000);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　3.2、get.use()读取文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fs=require(&quot;fs&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当你不写路径的时候，实际上就相当于“/”,就是所有网址&lt;/span&gt;
app.use(haha);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;haha是一个函数&lt;/span&gt;
app.listen(3000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; function haha(req,res) {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     res.send(&quot;哈哈&quot;);&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt;
app.use(&lt;/span&gt;'/admin',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    res.send(&lt;/span&gt;'管理员登录'&lt;span&gt;);
})
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据当前的网址，读取punlic文件夹的文件&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;如果有这个文件，就渲染这个文件&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;如果没有这个文件，那么next()&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; haha(req,res,next) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; filePath=&lt;span&gt;req.originalUrl;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据当前的网址，读取public文件夹的文件&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有这个文件，那么渲染这个文件&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没哟偶这个文件，那么next();&lt;/span&gt;
    fs.readFile(&quot;./public/&quot;+filePath,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err,data) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(err){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件不存在&lt;/span&gt;
            next(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一定要写,不然处于挂起状态&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        res.send(data.toString());
    })
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　4、render和send&lt;/p&gt;
&lt;p&gt;　　　　　4.1、res.send()方法快速测试页&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;静态服务&lt;/span&gt;
app.use('/jingtai',express.static(&quot;./public&quot;&lt;span&gt;));

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新的路由&lt;/span&gt;
app.get('/images',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    res.send(&lt;/span&gt;&quot;哈哈&quot;&lt;span&gt;)
});
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;会自动识别err参数，如果有，那么就这个函数能捕获err&lt;/span&gt;
app.use(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    res.status(&lt;/span&gt;404).send(&quot;没有这个页面！&quot;&lt;span&gt;);
})
app.listen(&lt;/span&gt;3000);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　　　4.2、res.render()渲染内容，将会根据views中的模板文件进行渲染。如果不想使用views文件夹，想自己设置文件夹名字，那么app.set(&quot;views&quot;,&quot;aaaa&quot;);&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; //设置ejs文件夹名字     //在day3文件夹下新建文件夹a，然后在里面放ejs文件&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; app.set(&quot;views&quot;,&quot;a&quot;)&lt;/span&gt;
app.set(&quot;view engine&quot;,&quot;ejs&quot;&lt;span&gt;);
app.get(&lt;/span&gt;&quot;/&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res) {
    res.render(&lt;/span&gt;&quot;haha&quot;&lt;span&gt;,{news:[]});

});

app.get(&lt;/span&gt;&quot;/check&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    res.send({
        &lt;/span&gt;&quot;user&quot;:&quot;ok&quot;&lt;span&gt;
    })
})
app.listen(&lt;/span&gt;3000);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　5、req.query:当输入http://127.0.0.1:3000/?id=0&amp;amp;ag=9&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
app.get(&lt;/span&gt;&quot;/&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    console.log(req.query);
    res.send();
});
app.listen(&lt;/span&gt;3000);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202490/201712/1202490-20171225225750322-1827668972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;三、get请求参数post请求参数：&lt;/p&gt;
&lt;p&gt;GET请求的参数：在URL中，在Express中，不需要使用url模块了。可以直接使用req.query对象。&lt;/p&gt;
&lt;p&gt;POST请求参数：在express中不能直接获得，必须使用body-parser模块。使用后，将可以用req.body得到参数。但是如果表单中含有文件上传，那么还是需要使用formidable模块。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;form.ejs&lt;/span&gt;

&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;form action=&quot;#&quot; method=&quot;post&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; name=&quot;name&quot;/&amp;gt;
    &amp;lt;input type=&quot;text&quot; name=&quot;age&quot;/&amp;gt;

    &amp;lt;input type=&quot;submit&quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//.js&lt;br/&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bodyParser=require('body-parser'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
app.set(&lt;/span&gt;'view engine','ejs'&lt;span&gt;)
app.get(&lt;/span&gt;'/',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    res.render(&lt;/span&gt;&quot;form&quot;&lt;span&gt;);
});
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bodyParser API&lt;/span&gt;
app.use(bodyParser.urlencoded({extended:&lt;span&gt;false&lt;/span&gt;&lt;span&gt;}));
app.post(&lt;/span&gt;'/',&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
    console.log(req.body);
});
app.listen(&lt;/span&gt;3000);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202490/201712/1202490-20171225230133759-140100363.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202490/201712/1202490-20171225230147712-1402299105.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如何问题欢迎指教！&lt;/p&gt;

</description>
<pubDate>Mon, 25 Dec 2017 15:04:00 +0000</pubDate>
<dc:creator>蜜迷</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/15fj/p/8111678.html</dc:identifier>
</item>
<item>
<title>【Java入门提高篇】Day10 Java代理——静态代理 - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/8111359.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/8111359.html</guid>
<description>&lt;p&gt;　　今天要介绍的是一个Java中一个很重要的概念——代理。&lt;/p&gt;
&lt;p&gt;　　什么是代理？联系生活想想看，代理似乎并不陌生，最形象的代表便是经纪人，明星一般都有经纪人，经纪人作为中间人，负责代理明星的相关事宜，比如说，有人要请明星去唱歌表演，一般不会直接跟明星联系，而是联系他的经纪人，他的经纪人来负责安排行程，而真正唱歌表演的还是明星本人，经纪人仅仅作为一个附加物存在。&lt;/p&gt;
&lt;p&gt;　　在Java中，代理也是这样的概念，来看个栗子：&lt;/p&gt;
&lt;p&gt;　　先来创建一个明星类Stars：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Stars &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IStars{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Stars(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sing(){
        System.out.println(getName() &lt;/span&gt;+ &quot; 唱了一首歌.&quot;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; dance(){
        System.out.println(getName() &lt;/span&gt;+ &quot; 跳了一支舞.&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这是相应的接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IStars {
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; sing();
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; dance();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在创建一个代理类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; StarsProxy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IStars{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存接收的代理对象&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; IStars stars;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StarsProxy(IStars stars){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stars =&lt;span&gt; stars;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sing() {
        System.out.println(&lt;/span&gt;&quot;我是代理，我收到了唱歌请求。&quot;&lt;span&gt;);
        stars.sing();
        System.out.println(&lt;/span&gt;&quot;唱歌完毕&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; dance() {
        System.out.println(&lt;/span&gt;&quot;我是代理，我收到了跳舞请求。&quot;&lt;span&gt;);
        stars.dance();
        System.out.println(&lt;/span&gt;&quot;跳舞完毕&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　来测试一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建目标对象&lt;/span&gt;
        IStars stars = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stars(&quot;Frank&quot;);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;代理对象，把目标传给代理对象，建立关系&lt;/span&gt;
        IStars starsProxy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StarsProxy(stars);
        starsProxy.sing();
        starsProxy.dance();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;我是代理，我收到了唱歌请求。
Frank 唱了一首歌.
唱歌完毕
我是代理，我收到了跳舞请求。
Frank 跳了一支舞.
跳舞完毕&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们可以看到，实际上代理类只是保存了Stars类的一个实例，因为实现的是相同的接口，StarsProxy类必须实现需要代理的Stars类的方法，比如这里的dance和sing，而这个接口正是链接两者的关键，因为实现接口就代表必定存在接口中声明的方法。&lt;/p&gt;
&lt;p&gt;　　那么，为什么要使用代理呢？&lt;/p&gt;
&lt;p&gt;　　其实主要目的是为了扩展原有类的功能，想想看，如果那个Stars类不是你写的，而是别人写的，现在要将原有的sing或者dance方法进行改造，比如需要统计唱歌和跳舞的次数，次数大于10则不进行该操作直接返回，这时候用代理就很好实现了，来把代理类稍作修改：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; StarsProxy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IStars{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存接收的代理对象&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; IStars stars;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存sing和dance的次数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StarsProxy(IStars stars){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.stars =&lt;span&gt; stars;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sing() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ifWork()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        System.out.println(&lt;/span&gt;&quot;我是代理，我收到了唱歌请求。&quot;&lt;span&gt;);
        stars.sing();
        System.out.println(&lt;/span&gt;&quot;唱歌完毕&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; dance() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ifWork()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        System.out.println(&lt;/span&gt;&quot;我是代理，我收到了跳舞请求。&quot;&lt;span&gt;);
        stars.dance();
        System.out.println(&lt;/span&gt;&quot;跳舞完毕&quot;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 是否继续工作
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; 是返回true，否则返回false
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; ifWork(){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (num &amp;gt; 3&lt;span&gt;){
            System.out.println(&lt;/span&gt;&quot;明星今天已经很累了，明天再来吧。&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            num&lt;/span&gt;++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　修改一下测试类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建目标对象&lt;/span&gt;
        Stars stars = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stars();
        stars.setName(&lt;/span&gt;&quot;Frank&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;代理对象，把目标传给代理对象，建立关系&lt;/span&gt;
        StarsProxy starsProxy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StarsProxy(stars);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0;i &amp;lt; 5; i++&lt;span&gt;){
            starsProxy.sing();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　测试结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;我是代理，我收到了唱歌请求。
Frank 唱了一首歌.
唱歌完毕
我是代理，我收到了唱歌请求。
Frank 唱了一首歌.
唱歌完毕
我是代理，我收到了唱歌请求。
Frank 唱了一首歌.
唱歌完毕
我是代理，我收到了唱歌请求。
Frank 唱了一首歌.
唱歌完毕
明星今天已经很累了，明天再来吧。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　看，简单粗暴。&lt;/p&gt;
&lt;p&gt;　　但其实并没有多少干货，这里仅仅是一种代理的思想，用这种思想可以比较方便的在不直接修改原有类的前提下对原有类的方法进行扩展。&lt;/p&gt;
&lt;p&gt;　　但是限制也显而易见：&lt;/p&gt;
&lt;p&gt;　　1.代理类需要跟被代理类实现相同的接口，这样才能一起向上转型后实现多态。&lt;/p&gt;
&lt;p&gt;　　2.当被代理的类需要进行的扩展增多时，管理会变得更加困难，之后对被代理类的修改，需要同时修改代理类，增加了修改成本。&lt;/p&gt;
&lt;p&gt;　　所以不要为了使用而使用，应用在合适的场景才能发挥它真正的作用。&lt;/p&gt;
&lt;p&gt;　　至此，本篇讲解完毕，欢迎大家继续关注！&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 13:39:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/8111359.html</dc:identifier>
</item>
<item>
<title>Nginx服务编译安装、日志功能、状态模块及访问认证模式实操 - 酷酷的二连长</title>
<link>http://www.cnblogs.com/lyq863987322/p/8111347.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyq863987322/p/8111347.html</guid>
<description>&lt;div readability=&quot;34&quot;&gt;
&lt;pre&gt;
　　[root@web ~]# &lt;span&gt;cat&lt;/span&gt; /etc/redhat-&lt;span&gt;release 
　　CentOS release &lt;/span&gt;&lt;span&gt;6.9&lt;/span&gt;&lt;span&gt; (Final)
　　[root@web &lt;/span&gt;~]# &lt;span&gt;uname&lt;/span&gt; -&lt;span&gt;a
　　Linux db02 &lt;/span&gt;&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;32&lt;/span&gt;-&lt;span&gt;696&lt;/span&gt;.el6.x86_64 #&lt;span&gt;1&lt;/span&gt; SMP Tue Mar &lt;span&gt;21&lt;/span&gt; &lt;span&gt;19&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; UTC &lt;span&gt;2017&lt;/span&gt; x86_64 x86_64 x86_64 GNU/Linux
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;　　Nginx是一个开源的，支持高性能、高并发的WWW服务器和代理服务软件&lt;/p&gt;&lt;div readability=&quot;116.63383407306&quot;&gt;
&lt;p class=&quot;a&quot;&gt;　　nginx软件常见的使用方式或架构为：LNMP(linux nginx mysql php)&lt;/p&gt;
&lt;h2 class=&quot;a&quot;&gt;Nginx的特点或优势&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;  　　支持高并发：能支持几万并发连接（特别是静态小文件业务环境）&lt;/li&gt;
&lt;li&gt;  　　资源消耗少：在3万并发连接下，开启10个Nginx线程消耗的内存不到200MB&lt;/li&gt;
&lt;li&gt;  　　可以做HTTP反向代理及加速缓存、即负载均衡功能，内置对RS节点服务器健康检查功能，这相当于专业的Haproxy软件或LVS的功能。&lt;/li&gt;
&lt;li&gt;  　　具备Squid等专业缓存软件等的缓存功能。   &lt;/li&gt;
&lt;li&gt;  　　支持异步网络I/O事件模型epoll（Linux 2.6+）(绘图说明同步和异步)&lt;/li&gt;
&lt;/ul&gt;&lt;div readability=&quot;11&quot;&gt;
&lt;p class=&quot;a&quot;&gt;  　　　　大并发写操作；先写内存，再将内存数据存储到硬盘中---保证访问效率&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;  　　　　大并发读操作；先写磁盘，再将磁盘数据存储到内存中---保证数据安全&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　总结：高并发--&amp;gt;资源消耗少--&amp;gt;功能多样(web服务/负载均衡/支持缓存)--&amp;gt;通讯模型先进(epoll)&lt;/p&gt;

&lt;h2&gt;一、解决nginx依赖包&lt;/h2&gt;
&lt;p&gt;需要的依赖：&lt;/p&gt;
&lt;p&gt;　　pcre：兼容perl语言正则表达式，perl compatible regular expressions rewirte模块 参数信息（perl方式定义正则表达式）&lt;/p&gt;
&lt;p&gt;　　openssl：https&lt;/p&gt;
&lt;p&gt;　　注意：所有安装依赖软件，后面都要加上-devel&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_8733e92f-49eb-49ec-bf3d-3daf79b00501&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8733e92f-49eb-49ec-bf3d-3daf79b00501&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8733e92f-49eb-49ec-bf3d-3daf79b00501&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
[root@web ~]# &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; -y pcre-devel openssl-&lt;span&gt;devel
下载nginx
[root@web tools]# &lt;/span&gt;&lt;span&gt;wget&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;nginx.org/download/nginx-1.10.2.tar.gz&lt;/span&gt;
&lt;span&gt;[root@web tools]# ll
total &lt;/span&gt;&lt;span&gt;892&lt;/span&gt;
-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;910812&lt;/span&gt; Oct &lt;span&gt;24&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;解决依赖，下载nginx&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;二、解压nginx、创建管理用户、配置nginx&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_fe84abc5-a5ba-4cff-8978-b1b39202173d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fe84abc5-a5ba-4cff-8978-b1b39202173d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fe84abc5-a5ba-4cff-8978-b1b39202173d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
[root@web tools]# &lt;span&gt;tar&lt;/span&gt; xf nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
[root@web tools]# ll
total &lt;/span&gt;&lt;span&gt;896&lt;/span&gt;&lt;span&gt;
drwxr&lt;/span&gt;-xr-x &lt;span&gt;8&lt;/span&gt; &lt;span&gt;1001&lt;/span&gt; &lt;span&gt;1001&lt;/span&gt;   &lt;span&gt;4096&lt;/span&gt; Oct &lt;span&gt;18&lt;/span&gt;  &lt;span&gt;2016&lt;/span&gt; nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;
-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;910812&lt;/span&gt; Oct &lt;span&gt;24&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
[root@web tools]# cd nginx&lt;/span&gt;-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
[root@web nginx&lt;/span&gt;-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;]# useradd -s /sbin/nologin www -&lt;span&gt;M
[root@web nginx&lt;/span&gt;-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;]# &lt;span&gt;id&lt;/span&gt;&lt;span&gt; www
uid&lt;/span&gt;=&lt;span&gt;2223&lt;/span&gt;(www) gid=&lt;span&gt;2223&lt;/span&gt;(www) &lt;span&gt;groups&lt;/span&gt;=&lt;span&gt;2223&lt;/span&gt;&lt;span&gt;(www)
[root@web01 nginx&lt;/span&gt;-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;]# ./configure --prefix=/application/nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt; --user=www --group=www --with-http_stub_status_module  --with-&lt;span&gt;http_ssl_module
&lt;/span&gt;--&lt;span&gt;prefix：表示指定软件安装到哪个目录中，指定目录不存在会自动创建
&lt;/span&gt;--user/--&lt;span&gt;group：nginx工作进程由哪个用户运行管理
&lt;/span&gt;--with-&lt;span&gt;http_stub_status_module：表示启动nginx状态模块功能（用户访问nginx的网络信息）
&lt;/span&gt;--with-http_ssl_module：启动https功能模块 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;解压nginx、创建用户、配置nginx&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;三、编译&amp;amp;&amp;amp;编译安装&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;make&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;给软件创建软连接文件，方便以后管理使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_f8b549cf-c992-46f5-892d-5164893e712e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f8b549cf-c992-46f5-892d-5164893e712e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f8b549cf-c992-46f5-892d-5164893e712e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
[root@web application]# &lt;span&gt;ln&lt;/span&gt; -s /application/nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/ /application/&lt;span&gt;nginx
[root@web application]# ll
total &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
lrwxrwxrwx &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;26&lt;/span&gt; Oct &lt;span&gt;24&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;:&lt;span&gt;51&lt;/span&gt; nginx -&amp;gt; /application/nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/&lt;span&gt;
drwxr&lt;/span&gt;-xr-x &lt;span&gt;6&lt;/span&gt; root root &lt;span&gt;4096&lt;/span&gt; Oct &lt;span&gt;24&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;:&lt;span&gt;50&lt;/span&gt; nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;创建软连接&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;四、启动nginx服务&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f5125320-71e0-4afa-8b25-d17bcbabf229&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f5125320-71e0-4afa-8b25-d17bcbabf229&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f5125320-71e0-4afa-8b25-d17bcbabf229&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
[root@web application]# /application/nginx/sbin/&lt;span&gt;nginx 
[root@web application]# &lt;/span&gt;&lt;span&gt;ps&lt;/span&gt; -ef |&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; nginx
root  &lt;/span&gt;&lt;span&gt;15342&lt;/span&gt;      &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt; ?   &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; nginx: master process /application/nginx/&lt;span&gt;sbinnginx
www   &lt;/span&gt;&lt;span&gt;15343&lt;/span&gt;  &lt;span&gt;15342&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt; ?  &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt; nginx: worker process  
        
root  &lt;/span&gt;&lt;span&gt;15345&lt;/span&gt;  &lt;span&gt;12539&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt; pts/&lt;span&gt;0&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; &lt;span&gt;grep&lt;/span&gt; --color=auto nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;启动nginx&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;软件安装完目录信息&lt;/h2&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;p class=&quot;a&quot;&gt;　　conf             --- 软件配置文件保存目录&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　html             --- 网站站点目录*&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　logs             --- 日志文件保存目录&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　sbin             --- nginx命令保存目录&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;conf目录中内容&lt;/h3&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p class=&quot;a&quot;&gt;　　nginx.conf           　　--- nginx程序的主配置文件&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　nginx.conf.default  　 --- nginx配置备份文件&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;因为初始化的nginx配置文件内有较多注释，影响对配置文件的修改，所以进行精简化配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@web conf]# &lt;span&gt;egrep&lt;/span&gt; -v &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#|^$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; nginx.conf.default &amp;gt;nginx.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;nginx软件启动重启方法&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_faaf836d-3ef9-4951-9d95-6a11c4d462ee&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_faaf836d-3ef9-4951-9d95-6a11c4d462ee&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_faaf836d-3ef9-4951-9d95-6a11c4d462ee&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;启动方法（全路径） 
&lt;/span&gt;/applocation/nginx/sbin/&lt;span&gt;nginx 
停止方法（全路径&lt;/span&gt;+   -&lt;span&gt;s 参数 接指令）
&lt;/span&gt;/applocation/nginx/sbin/nginx -&lt;span&gt;s stop
平滑重启方法（全路径&lt;/span&gt;+   -&lt;span&gt;s 参数 接指令）
&lt;/span&gt;/applocation/nginx/sbin/nginx -&lt;span&gt;s reload
检查配置文件语法（全路径&lt;/span&gt;+  -&lt;span&gt;t 参数）
&lt;/span&gt;/applocation/nginx/sbin/nginx -&lt;span&gt;t
查看怎么部署的（全路径&lt;/span&gt;+   -&lt;span&gt;V 参数）
&lt;/span&gt;/applocation/nginx/sbin/nginx -V
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;nginx重启方式&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;Nginx配置文件配置详解&lt;/h2&gt;
&lt;p&gt;在server模块下指定主页文件，可以指定自己写的主页，这里需要注意的是，主页文件要放到站点目录下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_20566545-a5fe-4d45-92ac-708cd7021c20&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_20566545-a5fe-4d45-92ac-708cd7021c20&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_20566545-a5fe-4d45-92ac-708cd7021c20&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
[root@web nginx]# &lt;span&gt;cat&lt;/span&gt; conf/&lt;span&gt;nginx.conf
worker_processes  &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;                        ##worker进程数量
events {
    worker_connections  &lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;;               ##每个worker进程支持的最大连接数
}
http {
    include       mime.types;               ##Nginx支持的媒体类型库文件
    default_type  application&lt;/span&gt;/octet-&lt;span&gt;stream; ##默认的媒体类型
    sendfile        on;                     ##开启高效传输模式
    keepalive_timeout  &lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;;                  ##连接超时
    server {
        listen       &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;                    ##提供服务的端口，默认是80
        server_name  www.zxpo.top;          ##提供服务的域名主机名
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/&lt;span&gt;www;                ##站点的根目录，相当于Nginx的安装目录
            index  index.html index.htm;   ##默认的首页文件，多个用空格分开
        }
        error_page   &lt;/span&gt;&lt;span&gt;500&lt;/span&gt; &lt;span&gt;502&lt;/span&gt; &lt;span&gt;503&lt;/span&gt; &lt;span&gt;504&lt;/span&gt;  /&lt;span&gt;50x.html;    ##出现对应的状态码，使50x.html
        location &lt;/span&gt;= /&lt;span&gt;50x.html {
            root   html;                    ##指定对应的站点目录为html
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;配置文件详解&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;多个server模块堆在一个配置文件中比较乱，难以修改，可以将配置文件分为多个，一个nginx.conf为主，例如&lt;/p&gt;
&lt;p&gt;创建一个exyra目录为存放不同站点的配置文件目录，将不同网页的server模块写成不同的配置文件，然后引用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;http {
    include       mime.types;
    default_type  application&lt;/span&gt;/octet-&lt;span&gt;stream;
    sendfile        on;
    keepalive_timeout  &lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;;
    include     extra&lt;/span&gt;/&lt;span&gt;www.conf;
    include     extra&lt;/span&gt;/&lt;span&gt;blog.conf;
    include     extra&lt;/span&gt;/&lt;span&gt;bbs.conf;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;基于域名访问&lt;/h2&gt;
&lt;p&gt;　　在server模块中设置，server模块可以有多个，server_name，可以修改成不同的域名，如果是本地测试的话，记得host文件解析&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; server {
        listen       &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
        server_name  www.zxpo.top;          &lt;/span&gt;&amp;lt;-&lt;span&gt; 修改虚拟主机域名名称
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/www;                &amp;lt;-&lt;span&gt; 修改虚拟主机站点目录
            index  index.html index.htm;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;基于端口访问&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
        listen       &lt;/span&gt;&lt;span&gt;81&lt;/span&gt;;      &amp;lt;-&lt;span&gt; 将端口换成81，进行测试
        server_name  bbs.zxpo.top;
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/&lt;span&gt;bbs;
            index  index.html index.htm;
        }&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;检查&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@web nginx]# netstat -lntup|&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; nginx
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;       &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*         LISTEN      &lt;span&gt;15342&lt;/span&gt;/&lt;span&gt;nginx         
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;81&lt;/span&gt;       &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*         LISTEN      &lt;span&gt;15342&lt;/span&gt;/nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;基于IP访问&lt;/h2&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p class=&quot;a&quot;&gt;　　注意：采用基于IP配置虚拟主机，修改完配置文件后，需要重启配置文件，不能够采用平滑重启。&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　　　    只要配置文件中，有关IP地址相关的改动，都需要进行重启nginx服务，不能够采用平滑重启。&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;改配置文件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
        listen       &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.8&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt;;   &amp;lt;-&lt;span&gt;改成某个ip还有指定的端口
        server_name  www.zxpo.top;
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/&lt;span&gt;www;
            index  index.html index.htm;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重启&lt;/p&gt;
&lt;h2&gt;curl访问网站流程&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@web ~]# curl -v www.zxpo.top         &amp;lt;- 利用curl命令-&lt;span&gt;v参数获取访问网站流程
a. 访问网站时首先需要根据域名解析获取到网站的ip地址，找寻网站的ip地址对应的服务器
b. 访问网站时其次需要根据请求建立连接的目标端口信息，找寻网站的相应服务端口是否存在
c. 访问网站时再次需要根据请求域名信息获悉相应的站点，找寻网站的相应站点目录下的资源信息
d. 访问网站时最后如果ip地址加端口信息都已找到，但没有找到对应的域名信息，会按照默认原则使用第一个虚拟主机作为默认访问的虚拟站点目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Nginx共享文件web页面&lt;/h2&gt;
&lt;p&gt;　　当配置autoindex on参数以后，会显示站点目录文件列表信息：&lt;/p&gt;
&lt;p&gt;　　　1. 对于nginx服务可以识别解析资源，进行点击，会显示相应内容&lt;/p&gt;
&lt;p&gt;　　　2. 对于nginx服务不可以识别解析资源，进行点击，会直接下载&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
        listen       &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
        server_name  www.zxpo.com;
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/www;           &amp;lt;-&lt;span&gt;或者在设置一级专门做共享的目录
          index  index.html index.htm; &lt;/span&gt;&amp;lt;-&lt;span&gt;这里要在站点目录中把主页文件删除，否则会直接显示主页
            autoindex on;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201712/1234532-20171225205111353-1602873015.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　stub_status模块主要用于查看Nginx的一些状态信息&lt;/p&gt;
&lt;p&gt;       在主配置文件配置  log_format main……&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;http {
    include       mime.types;
    default_type  application&lt;/span&gt;/octet-&lt;span&gt;stream;
    sendfile        on;
    keepalive_timeout  &lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;;&lt;br/&gt;log_format  main  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$remote_addr - $remote_user [$time_local] &quot;$request&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$status $body_bytes_sent &quot;$http_referer&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;&lt;br/&gt;省略……
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问状态信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201712/1234532-20171225205730306-1976554998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div readability=&quot;21&quot;&gt;
&lt;p class=&quot;a&quot;&gt;　　Active connections   客户端连接数&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　accepts   接收数值&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　handled   处理数值（通常跟接收值是一样的，但是限制值达到上限就例外了）&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　requests  客户端请求值&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　Reading   请求报文的连接数&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　Writing   响应&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　Waiting   等待请求的数量&lt;/p&gt;
&lt;p class=&quot;a&quot;&gt;　　说明：一般以上页面内容信息主要会被zabbix监控服务调取，形成图像信息；根据图像信息，从而判断nginx网站服务用户访问量情况&lt;/p&gt;
&lt;/div&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;12&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Nginx&lt;/strong&gt;&lt;strong&gt;日志变量&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$remote_addr&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;记录访问网站的客户端地址；即源 ip地址&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$http_x_forwarded_for&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器上也进行了相关的 x_forwarded_for设置可以记录用户真实的 IP地址信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$remote_user&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;远程客户端用户名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$time_local&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;记录访问时间与时区&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$request&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;用户的 http请求起始行信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$status&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;http状态码，记录请求返回的状态，例如：200，404，301等&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$body_bytes_sents&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;服务器发送给客户端的响应body字节数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$http_referer&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;记录此次请求是从哪个链接访问过来的，可以根据referer进行防盗链设置即表示是哪个网站介绍过来的&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;196&quot;&gt;
&lt;p&gt;$http_user_agent&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;516&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;记录客户端访问信息，例如：浏览器、手机客户端等&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;712&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;在没有特殊要求的情况下，采用默认的配置即可，更多可以设置的记录日志信息的变量见： http://nginx.org/en/docs/http/ngx_httpJog_module.html&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;错误日志信息&lt;/h2&gt;
&lt;p&gt;　　记录nginx服务运行异常情况信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;error_log的默认值为：
error_log logs&lt;/span&gt;/error.log error；
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;可以放置的标签段为（可以设置的区块）：
main，http，server，location&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　参考资料：&lt;a href=&quot;http://nginx.org/en/docs/ngx_core_module.html#error_log&quot; target=&quot;_blank&quot;&gt;http://nginx.org/en/docs/ngx_core_module.html#error_log&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;　　说明：nginx官方文档查询信息如何使用，如何根据配置信息获取所在模块目录&lt;/p&gt;
&lt;h3&gt;配置文件中设置错误日志&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
error_log  logs/error.log  error;  
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;访问日志信息&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Nginx日志格式中默认的参数配置如下：
log_format  main  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$status $body_bytes_sent &quot;$http_referer&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Nginx记录日志的默认参数配置如下：
access_log  logs&lt;/span&gt;/access.log  main;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;配置文件中设置访问日志&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;http {
    include       mime.types;
    default_type  application&lt;/span&gt;/octet-&lt;span&gt;stream;
    sendfile        on;
    keepalive_timeout  &lt;/span&gt;&lt;span&gt;65&lt;/span&gt;&lt;span&gt;;
 log_format  main  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$remote_addr - $remote_user [$time_local] &quot;$request&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;$status $body_bytes_sent &quot;$http_referer&quot; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;

access_log  logs&lt;/span&gt;/access.log  main;&lt;br/&gt;……
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;日志信息说明&lt;/h3&gt;
&lt;p&gt;这是一条日志文件中的日志信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.253&lt;/span&gt; - - [&lt;span&gt;25&lt;/span&gt;/Oct/&lt;span&gt;2017&lt;/span&gt;:&lt;span&gt;15&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET /favicon.ico HTTP/1.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;404&lt;/span&gt; &lt;span&gt;571&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.zxpo.top/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
$remote_addr    &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;.&lt;span&gt;0.253&lt;/span&gt;&lt;span&gt;       客户端IP地址信息
$remote_user    &lt;/span&gt;-&lt;span&gt;                远程认证用户信息
[$time_local]     [&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;/Oct/&lt;span&gt;2017&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;&lt;span&gt;]       显示访问事件信息
$request        GET &lt;/span&gt;/ HTTP/&lt;span&gt;1.1&lt;/span&gt;&lt;span&gt;   表示显示请求行内容
$status        &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;               显示状态码信息（若日志中，状态码为304，表示用户端有缓存信息）
$body_bytes_sent   &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;            响应保存主体内容大小
$http_user_agent                 定义客户端以什么软件进行访问web服务器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Nginx日志切割方式&lt;/h2&gt;
&lt;h3&gt;利用脚本切割&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
#!/bin/&lt;span&gt;bash
&lt;/span&gt;/application/nginx/sbin/nginx -&lt;span&gt;s reload    #先重启一次生成日志

&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; /application/nginx/logs/access_www.log /application/nginx/logs/access_www_$(&lt;span&gt;date&lt;/span&gt; +%&lt;span&gt;F).log    #然后改名

&lt;/span&gt;/application/nginx/sbin/nginx -s reload    #再次重启重新生成新的
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;具体切割日志脚本&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@www logs]# &lt;span&gt;cat&lt;/span&gt; /server/script/cut_nginx_log.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;!/bin/&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
Dateformat&lt;/span&gt;=`&lt;span&gt;date&lt;/span&gt; +%Y%m%&lt;span&gt;d`
Basedir&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/application/nginx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Nginxlogdir&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$Basedir/logs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Logname&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;access_www&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;-d $Nginxlogdir ] &amp;amp;&amp;amp; cd $Nginxlogdir || exit &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;-f ${Logname}.log ] || exit &lt;span&gt;1&lt;/span&gt;
/bin/&lt;span&gt;mv&lt;/span&gt;&lt;span&gt; ${Logname}.log ${Dateformat}_${Logname}.log
$Basedir&lt;/span&gt;/sbin/nginx -s reload
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;logrotate方式切割&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201712/1234532-20171225211456228-1700300384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; logrotate配置文件详解&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
/var/log/nginx&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.log { #/var/log/nginx/日志的存储目录，可以根据实际情况进行修改
&lt;span&gt;daily &lt;/span&gt;               ##日志文件将按天轮循
&lt;span&gt;weekly&lt;/span&gt;               ##日志文件将按周轮循
&lt;span&gt;monthly&lt;/span&gt;              ##日志文件将按月轮循
&lt;span&gt;missingok&lt;/span&gt;            ##在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误
&lt;span&gt;rotate 7&lt;/span&gt;             #一次存储7个日志文件。对于第8个日志文件，时间最久的那个日志文件将被删除
&lt;span&gt;dateext&lt;/span&gt;              #定义日志文件后缀是日期格式,也就是切割后文件是:xxx.log-20160402.gz这样的格式。如果该参数被注释掉,切割出来是按数字递增,即前面说的 xxx.log-1这种格式
&lt;span&gt;# compress &lt;/span&gt;          ##在轮循任务完成后，已轮循的归档将使用gzip进行压缩
&lt;span&gt;delaycompress&lt;/span&gt;        ##总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用
&lt;span&gt;notifempty&lt;/span&gt;           ##如果是空文件的话，不进行转储
&lt;span&gt;create 640 nginx adm&lt;/span&gt; ##以指定的权限和用书属性，创建全新的日志文件，同logrotate也会重命名原始日志文件
&lt;span&gt;sharedscripts&lt;/span&gt;        ##表示postrotate脚本在压缩了日志之后只执行一次
&lt;span&gt;postrotate&lt;/span&gt;        
&lt;span&gt;[ -f /var/run/nginx.pid ] &amp;amp;&amp;amp; kill -USR1 `cat /var/run/nginx.pid`
endscript        
}&lt;/span&gt;
## postrotate/endscript：在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd进程将立即再次读取其配置并继续运行。注意：这两个关键字必须单独成行&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 进行策略控制&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_3ac75137-f946-45c8-91f1-44919d54e8a0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3ac75137-f946-45c8-91f1-44919d54e8a0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3ac75137-f946-45c8-91f1-44919d54e8a0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
location = /&lt;span&gt; {                      
        [ configuration A ]
    }
    location &lt;/span&gt;/&lt;span&gt; {                   
        [ configuration B ]
    }
    location &lt;/span&gt;/documents/&lt;span&gt; {        
        [ configuration C ]
    }
    location &lt;/span&gt;^~ /images/&lt;span&gt; {        
        [ configuration D ]
    }
    location &lt;/span&gt;~* \.（gif|jpg|&lt;span&gt;jpeg）$ {       
        [ configuration E ]
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;官方location说明&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　location表示位置的概念，类似于if，即满足什么条件，就做什么&lt;/p&gt;
&lt;p&gt;　　控制访问网段，设置访问网段白名单和黑名单&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@web01 www]# &lt;span&gt;cat&lt;/span&gt; /application/nginx/conf/extra/&lt;span&gt;www.conf 
    server {
        listen       &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
        server_name  www.etiantian.org t.org;
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/&lt;span&gt;www;
            index  index.html index.htm;
        }
        location &lt;/span&gt;/AV/&lt;span&gt; {
            root   html&lt;/span&gt;/&lt;span&gt;www;
            index  index.html index.htm;
            allow  &lt;/span&gt;&lt;span&gt;172.16&lt;/span&gt;.&lt;span&gt;1.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;&lt;span&gt;;   ##允许内网网段访问
            deny   all;             ##其余网段拒绝
        }
   }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;location匹配说明&lt;/h2&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;253&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;不用&lt;/strong&gt;&lt;strong&gt;URI&lt;/strong&gt;&lt;strong&gt;及特殊字符组合匹配&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;459&quot;&gt;
&lt;p&gt;&lt;strong&gt;匹配说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;253&quot;&gt;
&lt;p&gt;location = / {&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;459&quot;&gt;
&lt;p&gt;精确匹配 /&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;253&quot;&gt;
&lt;p&gt;location ^~ /images {&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;459&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;匹配常规字符串，不做正则匹配检查（优先）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;253&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;location ~* \. ( gif|jpg|jpeg ) $ {&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;459&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;正常匹配，匹配后缀为gif|jpg|jpeg的&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;253&quot;&gt;
&lt;p&gt;location /documents/ {&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;459&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;匹配常规字符串，如果有正则，优先匹配正则&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;253&quot;&gt;
&lt;p&gt;location / {&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;459&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;所有location都不能匹配后的默认匹配&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;712&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;strong&gt;~   :&lt;/strong&gt; &lt;strong&gt;匹配内容区分大小写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~* &lt;/strong&gt; &lt;strong&gt;：匹配内容不区分大小写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;！&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt; &lt;strong&gt;：表示取反匹配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;^~ &lt;/strong&gt; &lt;strong&gt;：表示当多个匹配同时存在，优先匹配&lt;/strong&gt;&lt;strong&gt;^~&lt;/strong&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;修改nginx的相关配置文件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    server {
        listen      &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
        server_name  www.zxpo.top;
        location &lt;/span&gt;/&lt;span&gt; {
            root   html&lt;/span&gt;/&lt;span&gt;www;
            index  index.html index.htm;
            auth_basic       &lt;/span&gt;&lt;span&gt;&quot;erlianzhang&lt;/span&gt;&lt;span&gt; training&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            auth_basic_user_file    &lt;/span&gt;/application/nginx/conf/&lt;span&gt;htpasswd;
       }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;创建密码认证文件并进行授权&lt;/h2&gt;
&lt;h3&gt; 首先要下载httpd-tools软件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; httpd-tools -y
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;htpasswd的参数&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_bf2efafb-eb2a-4be1-bade-0d751b9f7d1d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bf2efafb-eb2a-4be1-bade-0d751b9f7d1d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bf2efafb-eb2a-4be1-bade-0d751b9f7d1d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
[root@web application]# htpasswd -&lt;span&gt;hlep
Usage:
    htpasswd [&lt;/span&gt;-&lt;span&gt;cmdpsD] passwordfile username
    htpasswd &lt;/span&gt;-&lt;span&gt;b[cmdpsD] passwordfile username password
    htpasswd &lt;/span&gt;-&lt;span&gt;n[mdps] username
    htpasswd &lt;/span&gt;-&lt;span&gt;nb[mdps] username password
 &lt;/span&gt;-c      Create a new &lt;span&gt;file&lt;/span&gt;&lt;span&gt;.
        创建一个新的密码文件
 &lt;/span&gt;-n      Don&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t update file; display results on stdout.&lt;/span&gt;
&lt;span&gt;        不更新文件，显示输出结果
 &lt;/span&gt;-&lt;span&gt;m      Force MD5 encryption of the password.
        强制采用MD5加密密码
 &lt;/span&gt;-&lt;span&gt;d      Force CRYPT encryption of the password (default).
        强制采用CRYPT加密密码（默认）
 &lt;/span&gt;-&lt;span&gt;p      Do not encrypt the password (plaintext).
        不加密密码（明文） 
 &lt;/span&gt;-&lt;span&gt;s      Force SHA encryption of the password.
        强制采用SHA加密密码
 &lt;/span&gt;-b      Use the password from the command line rather than prompting &lt;span&gt;for&lt;/span&gt;&lt;span&gt; it.
        使用密码来自命令行，相当于免交互方式
 &lt;/span&gt;-&lt;span&gt;D      Delete the specified user.
        删除指定用户
On Windows, NetWare and TPF systems the &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; flag is used by default.
On all other systems, the &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; flag will probably not work.
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;htpasswd参数详解&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;创建认证文件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_0572697a-854c-4af8-a300-ac9577c93fc5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0572697a-854c-4af8-a300-ac9577c93fc5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0572697a-854c-4af8-a300-ac9577c93fc5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
[root@web www]# htpasswd -bc /application/nginx/conf/htpasswd lyq &lt;span&gt;123456&lt;/span&gt;&lt;span&gt;
Adding password &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; user oldboy
[root@web01 www]# &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt; /application/nginx/conf/&lt;span&gt;htpasswd 
lyq:DVu6f44f2I81w    &lt;/span&gt;&amp;lt;- 加密的认证文件自动设置密文
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;认证文件生成&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;给密码文件授权，重启Nginx&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7007f125-dc5a-4ce2-9b53-d273d5ba7b3b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7007f125-dc5a-4ce2-9b53-d273d5ba7b3b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7007f125-dc5a-4ce2-9b53-d273d5ba7b3b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
[root@web www]# &lt;span&gt;chown&lt;/span&gt; -R www.www /application/nginx/conf/&lt;span&gt;htpasswd
[root@web www]# &lt;/span&gt;&lt;span&gt;chmod&lt;/span&gt; &lt;span&gt;400&lt;/span&gt; /application/nginx/conf/&lt;span&gt;htpasswd
[root@web www]# &lt;/span&gt;/application/nginx/sbin/nginx -&lt;span&gt;t
nginx: the configuration &lt;/span&gt;&lt;span&gt;file&lt;/span&gt; /application/nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/conf/&lt;span&gt;nginx.conf syntax is ok
nginx: configuration &lt;/span&gt;&lt;span&gt;file&lt;/span&gt; /application/nginx-&lt;span&gt;1.10&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;/conf/&lt;span&gt;nginx.conf test is successful
[root@web www]# &lt;/span&gt;/application/nginx/sbin/nginx -s reload
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;授权密码文件，重启nginx&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;登陆测试&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1234532/201712/1234532-20171225213310540-703621609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Mon, 25 Dec 2017 13:35:00 +0000</pubDate>
<dc:creator>酷酷的二连长</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyq863987322/p/8111347.html</dc:identifier>
</item>
</channel>
</rss>