<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Ubuntu虚拟机配置WiFi连接 - 东小东</title>
<link>http://www.cnblogs.com/dongxiaodong/p/9678416.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dongxiaodong/p/9678416.html</guid>
<description>&lt;p&gt;      身处学校的环境中，很难想象学校内网连接互联网居然要购买流量包，哈哈，而且价格很不厚道。&lt;/p&gt;
&lt;p&gt;      插上网线是为了连接学校内网下载课件远程什么的，但同时也连上手机热点是日常操作，电脑是默认有线网优先，所以电脑是校内网连接，但既然可以同时连上手机热点，但有该怎么访问外网。接下来虚拟机的出现：&lt;/p&gt;
&lt;p&gt;       工具：VMware Workstation Pro&lt;/p&gt;
&lt;p&gt;                  Ubuntu 系统镜像&lt;/p&gt;
&lt;p&gt;        &lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201809/1485202-20180919234624098-393110055.png&quot; alt=&quot;&quot; width=&quot;629&quot; height=&quot;412&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201809/1485202-20180919234640209-2101599403.png&quot; alt=&quot;&quot; width=&quot;602&quot; height=&quot;549&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201809/1485202-20180919234654611-603136344.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1485202/201809/1485202-20180919234706539-841255065.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  桥接成功，可以打开浏览器www.baidu.com看看&lt;/p&gt;

</description>
<pubDate>Wed, 19 Sep 2018 15:50:00 +0000</pubDate>
<dc:creator>东小东</dc:creator>
<og:description>身处学校的环境中，很难想象学校内网连接互联网居然要购买流量包，哈哈，而且价格很不厚道。 插上网线是为了连接学校内网下载课件远程什么的，但同时也连上手机热点是日常操作，电脑是默认有线网优先，所以电脑是校</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dongxiaodong/p/9678416.html</dc:identifier>
</item>
<item>
<title>iOS 模块分解—「Runtime面试、工作」看我就 🐒 了 ^_^. - public-不知名开发者</title>
<link>http://www.cnblogs.com/Plainboiledwater/p/9678287.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Plainboiledwater/p/9678287.html</guid>
<description>&lt;h4 id=&quot;引导&quot;&gt;引导&lt;/h4&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;相信对于从事开发人员来说 runtime 这个名称都不陌生，就像我起初只知道「 runtime 叫运行时 」，后来知道 runtime 同样可以像 KVC 一样访问私有成员变量，还有「 给类动态添加属性：LNTextField.placeholderColor || 交换方法：imageNamed =&amp;gt; ln_imageNamed 」，还有深入的 「 消息机制的调用流程 || 字典转模型 || 实现NSCoding归解档 」以及我们常说的“黑魔法” 是什么？&lt;/p&gt;
&lt;p&gt;runtime 是编程中比较难的模块，想要深入学习，这个模块你必须掌握，同样还有写的另一篇 runloop 模块，下面是我对 runtime 的整理，从零开始，由浅入深，且带了几个 Runtime 实践场景 --&amp;gt; 大厂来的工友们可选择性路过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;3.7875150060024&quot;&gt;
&lt;p&gt;目录： &lt;a href=&quot;https://github.com/CoderLN/Apple-GitHub-Codeidea&quot;&gt;🤡&lt;/a&gt; 、 &lt;a href=&quot;https://github.com/CoderLN/Framework-Codeidea&quot;&gt;👨‍💻&lt;/a&gt;、&lt;a href=&quot;http://upload-images.jianshu.io/upload_images/2230763-93b83d5b7a7b0a49.gif?imageMogr2/auto-orient/strip&quot;&gt;👙&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/CoderLN/Framework-Codeidea/tree/master/Framework-Codeidea/LNOtherFrameworks-Annotations/Runtime&quot;&gt;runtime.h&lt;/a&gt; 释义&lt;/li&gt;
&lt;li&gt;消息机制&lt;br/&gt;1.isa指针释义&lt;br/&gt;2.方法调用，是否真的是转换为消息机制？&lt;br/&gt;2.objc_msgSend 参数概念释义&lt;/li&gt;
&lt;li&gt;消息机制（方法调用流程）&lt;/li&gt;
&lt;li&gt;常见作用&lt;/li&gt;
&lt;li&gt;开发场景「工作掌握」&lt;br/&gt;1.交换方法&lt;br/&gt;2.给系统分类动态添加属性&lt;br/&gt;3.字典转模型（Runtime 考虑三种情况实现）&lt;/li&gt;
&lt;li&gt;其它作用「面试熟悉」&lt;br/&gt;1.动态添加方法&lt;br/&gt;2.动态变量控制&lt;br/&gt;3.实现NSCoding的自动归档和解档&lt;br/&gt;4.runtime 部分函数&lt;br/&gt;5.method swizzling（俗称黑魔法）&lt;/li&gt;
&lt;li&gt;一道面试题的注解&lt;/li&gt;
&lt;li&gt;模块博文推荐(❤️数量较多)&lt;/li&gt;
&lt;li&gt;Runtime &amp;amp; Runloop 常面问题整理（附答案）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CustomPBWaters/runtime-Learning&quot;&gt;Demo 重要的部分代码中都有相应的注解和文字打印，运行程序可以很直观的表现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;iOS 模块注解—「Runloop面试、工作」看我就 🐒 了 ^_^.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;释义&quot;&gt;释义&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;Objective-C 是基于 C 的，它为 C 添加了面向对象的特性。它将很多静态语言在编译和链接时期做的事放到了 runtime 运行时来处理，可以说 runtime 是我们 Objective-C 幕后工作者。&lt;br/&gt;1.&lt;strong&gt;runtime&lt;/strong&gt;（&lt;code&gt;简称运行时&lt;/code&gt;），是一套 纯C(C和汇编)写的API。而 &lt;strong&gt;OC 就是运行时机制&lt;/strong&gt;，也就是在运行时候的一些机制，其中最主要的是 &lt;strong&gt;消息机制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;2.对于 C 语言，&lt;strong&gt;函数的调用在编译的时候会决定调用哪个函数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;3.&lt;strong&gt;运行时机制原理&lt;/strong&gt;：OC的函数调用称为消息发送，属于 &lt;strong&gt;动态调用过程&lt;/strong&gt;。在 &lt;strong&gt;编译的时候&lt;/strong&gt; 并不能决定真正调用哪个函数，只有在真 &lt;strong&gt;正运行的时候&lt;/strong&gt; 才会根据函数的名称找到对应的函数来调用。&lt;/p&gt;
&lt;p&gt;4.&lt;strong&gt;事实证明：在编译阶段，OC 可以 调用任何函数，即使这个函数并未实现，只要声明过就不会报错，只有当运行的时候才会报错，这是因为OC是运行时动态调用的。而 C 语言 调用未实现的函数 就会报错&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;消息机制&quot;&gt;消息机制&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;我们写 OC 代码，它在运行的时候也是转换成了 &lt;code&gt;runtime&lt;/code&gt; 方式运行的。任何方法调用本质：就是发送一个消息（用 &lt;code&gt;runtime&lt;/code&gt;发送消息，OC 底层实现通过 &lt;code&gt;runtime&lt;/code&gt; 实现），每一个 OC 的方法，底层必然有一个与之对应的 &lt;code&gt;runtime&lt;/code&gt; 方法。&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2230763-c544843cabe32e0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;验证示例方法调用是否真的是转换为消息机制&quot;&gt;验证示例：方法调用，是否真的是转换为消息机制？&lt;/h5&gt;
&lt;p&gt;消息机制原理：对象根据方法编号SEL去映射表查找对应的方法实现。&lt;br/&gt;&lt;strong&gt;注解&lt;/strong&gt;：&lt;br/&gt;1.必须要导入头文件 &lt;code&gt;#import &amp;lt;objc/message.h&amp;gt;&lt;/code&gt;&lt;br/&gt;2.我们导入系统的头文件，一般用尖括号。&lt;br/&gt;3.OC 解决消息机制方法提示步骤【查找&lt;code&gt;build setting&lt;/code&gt; -&amp;gt; 搜索&lt;code&gt;msg&lt;/code&gt; -&amp;gt; &lt;code&gt;objc_msgSend&lt;/code&gt;（YES --&amp;gt; NO）】&lt;br/&gt;4.最终生成消息机制，编译器做的事情，最终代码，需要把当前代码用xcode重新编译，【&lt;code&gt;clang -rewrite-objc main.m&lt;/code&gt; 查看最终生成代码】，示例：&lt;code&gt;cd main.m --&amp;gt; 输入前面指令，就会生成 .opp文件(C++代码)&lt;/code&gt;&lt;br/&gt;5.这里一般不会直接导入&lt;code&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2230763-6ebbe2c7584b7285.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;：OC 方法 &amp;lt;--&amp;gt; runtime 方法&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;说明：
eat(无参) 和 run(有参NSInteger) 是 LNPerson模型类中的私有方法「runtime 作用：可以调用私有方法」
示例分别以 OC写法 和 最底层写法 对照验证.
- (void)msgSend
{
    // 方法一：
    //id objc = [NSObject alloc];
    LNPerson *person = objc_msgSend(objc_getClass(&quot;LNPerson&quot;), sel_registerName(&quot;alloc&quot;));
    
    //objc = [objc init];
    person = objc_msgSend(person, sel_registerName(&quot;init&quot;));
    
    // 调用
    //[objc eat];
    //[objc run:10];
    objc_msgSend(person,@selector(eat)); // 无参
    objc_msgSend(person,@selector(run:),10); // 有残
}
/
 注解：
    // 用最底层写
    objc_getClass(const char *name) 获取当前类
    sel_registerName(const char *str) 注册个方法编号
    objc_msgSend(id self：谁发送消息, SEL op：发送什么消息, ...)
    让LNPerson这个类对象发送了一个alloc消息，返回一个分配好的内存对象给你，再发送一个消息初始化.
 */

// 方法二：
#pragma mark - 也许下面这种好理解一点
- (void)test
{
    // id objc = [NSObject alloc];
    id objc = objc_msgSend([NSObject class], @selector(alloc));
    
    // objc = [objc init];
    objc = objc_msgSend(objc, @selector(eat));
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;objc_msgsend-参数概念&quot;&gt;objc_msgSend 参数概念&lt;/h5&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;/
 objc_msgSend(&amp;lt;#id  _Nullable self#&amp;gt;, &amp;lt;#SEL  _Nonnull op, ...#&amp;gt;)

 1、objc_msgSend
    这是个最基本的用于发送消息的函数。
    其实编译器会根据情况在`objc_msgSend`， `objc_msgSend_stret`,，`objc_msgSendSuper`， 或 `objc_msgSendSuper_stret` 四个方法中选择一个来调用。如果消息是传递给超类，那么会调用名字带有 `Super` 的函数；如果消息返回值是数据结构而不是简单值时，那么会调用名字带有`stret`的函数。
 
 2、SEL
    `objc_msgSend`函数第二个参数类型为`SEL`，它是`selector`在Objc中的表示类型（Swift中是Selector类）。`selector`是方法选择器，可以理解为区分方法的 `ID`，而这个 `ID` 的数据结构是`SEL`:
    `typedef struct objc_selector *SEL;`
    其实它就是个映射到方法的C字符串，你可以用 Objc 编译器命令`@selector()``或者 Runtime` 系统的`sel_registerName`函数来获得一个`SEL`类型的方法选择器。
 
 3、id
    `objc_msgSend`第一个参数类型为`id`，大家对它都不陌生，它是一个指向类实例的指针：
    `typedef struct objc_object *id;`
    那`objc_object`又是啥呢：
    `struct objc_object { Class isa; };`
    `objc_object`结构体包含一个`isa`指针，根据`isa`指针就可以顺藤摸瓜找到对象所属的类。
 */&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;消息机制方法调用流程&quot;&gt;消息机制「方法调用流程」&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;面试：消息机制方法调用流程❓&lt;/strong&gt;&lt;br/&gt;怎么去调用&lt;code&gt;eat&lt;/code&gt;方法，&lt;br/&gt;对象方法：(保存到类对象的方法列表) ，类方法：(保存到元类(&lt;code&gt;Meta Class&lt;/code&gt;)中方法列表)。&lt;/p&gt;
&lt;p&gt;1.OC 在向一个对象发送消息时，runtime 库会根据对象的 isa指针找到该对象对应的类或其父类中查找方法。。&lt;br/&gt;2.注册方法编号（这里用方法编号的好处，可以快速查找）。&lt;br/&gt;3.根据方法编号去查找对应方法。&lt;br/&gt;4.找到只是最终函数实现地址，根据地址去方法区调用对应函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充&lt;/strong&gt;：一个objc 对象的 isa 的指针指向什么？有什么作用？&lt;br/&gt;每一个对象内部都有一个isa指针，这个指针是指向它的真实类型，根据这个指针就能知道将来调用哪个类的方法。&lt;/p&gt;
&lt;h5 id=&quot;isa指针相关释义&quot;&gt;isa指针相关释义&lt;/h5&gt;
&lt;p&gt;上面也提到OC底层都是转化为runtime方式来实现的，&lt;strong&gt;类和类的实例（对象）都相对于的isa指针&lt;/strong&gt;。&lt;br/&gt;我们可以在Xcode中使用 [Shift＋Cmd＋O ] 快速打开文件objc.h 能看到类的定义：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2230763-f3b6e5b8f10fff71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;objc.h&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2230763-2ab976db7139cade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;isa：是一个Class 类型的指针&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2230763-c44c51bdc34f8645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;runtime 对象，类，元类的isa指针关系图.png&quot;/&gt;&lt;br/&gt;&lt;strong&gt;总结：runtime 对象，类，元类的isa指针关系图&lt;/strong&gt;&lt;br/&gt;1、每一个对象本质上都是一个类的实例。其中类定义了成员变量和成员方法的列表。&lt;strong&gt;对象通过对象的isa指针指向所属类&lt;/strong&gt;。&lt;br/&gt;2、每一个类本质上都是一个对象，类其实是元类（meteClass）的实例。元类定义了类方法的列表。&lt;strong&gt;类通过类的isa指针指向元类&lt;/strong&gt;。&lt;br/&gt;3、元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：元类（meteClass）也是类，它也是对象。&lt;strong&gt;元类通过isa指针最终指向的是一个根元类(root meteClass)&lt;/strong&gt;。&lt;br/&gt;4、&lt;strong&gt;根元类的isa指针指向本身，这样形成了一个封闭的内循环&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;常见作用&quot;&gt;常见作用&lt;/h4&gt;
&lt;hr/&gt;&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;/
 1.动态交换两个方法的实现
 2.动态添加属性
 3.实现字典转模型的自动转换
 4.动态添加方法
 5.拦截并替换方法
 6.实现 NSCoding 的自动归档和解档

补充常用runtime示例：Demo中有体现
    1.添加属性和交换方法示例：UITextField占位文字颜色placeholderColor
    2.交换方法示例：交换dealloc方法实现，添加功能那个控制器被销毁了
 */&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;开发场景工作掌握&quot;&gt;开发场景「工作掌握」&lt;/h4&gt;
&lt;hr/&gt;&lt;h5 id=&quot;runtime-交换方法&quot;&gt;runtime 交换方法&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：当第三方框架 或者 系统原生方法功能不能满足我们的时候，我们可以在保持系统原有方法功能的基础上，添加额外的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：加载一张图片直接用&lt;code&gt;[UIImage imageNamed:@&quot;image&quot;];&lt;/code&gt;是无法知道到底有没有加载成功。给系统的&lt;code&gt;imageNamed&lt;/code&gt;添加额外功能（是否加载图片成功）。&lt;br/&gt;方案一：继承系统的类，重写方法.（弊端：每次使用都需要导入）&lt;br/&gt;方案二：使用 runtime，交换方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;br/&gt;1.给系统的方法添加分类&lt;br/&gt;2.自己实现一个带有扩展功能的方法&lt;br/&gt;3.交换方法,只需要交换一次,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景代码&lt;/strong&gt;：方法+调用+打印输出&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;#import &quot;UIImage+Image.h&quot;
#import &amp;lt;objc/message.h&amp;gt;

@implementation UIImage (Image)

/
 看清楚下面是不会有死循环的
    调用 imageNamed =&amp;gt; ln_imageNamed
    调用 ln_imageNamed =&amp;gt; imageNamed
 */
// 加载图片 且 带判断是否加载成功
+ (UIImage *)ln_imageNamed:(NSString *)name {
    
    UIImage *image = [UIImage ln_imageNamed:name];
    if (image) {
        NSLog(@&quot;runtime交互方法 -&amp;gt; 图片加载成功&quot;);
    } else {
        NSLog(@&quot;runtime交互方法 -&amp;gt; 图片加载失败&quot;);
    }
    return image;
}

/
 注解：
    不能在分类中重写系统方法imageNamed，因为会把系统的功能给覆盖掉，而且分类中不能调用super
    所以第二步，我们要 自己实现一个带有扩展功能的方法.
 + (UIImage *)imageNamed:(NSString *)name {
 
 }
 */

/
 作用：把类加载进内存的时候调用,只会调用一次
 调用：方法应先交换，再去调用
 */
+ (void)load {
    
    // 1.获取 imageNamed方法地址
    Method imageNamedMethod = class_getClassMethod(self, @selector(imageNamed:));
    // 2.获取 ln_imageNamed方法地址
    Method ln_imageNamedMethod = class_getClassMethod(self, @selector(ln_imageNamed:));
    
    // 3.交换方法地址，相当于交换实现方式;「method_exchangeImplementations 交换两个方法的实现」
    method_exchangeImplementations(imageNamedMethod, ln_imageNamedMethod);
}

- - -
//方案一：先搞个分类，定义一个能加载图片并且能打印的方法+ (instancetype)imageWithName:(NSString *)name;
//方案二：交换 imageNamed 和 ln_imageNamed 的实现，就能调用 imageNamed，间接调用 ln_imageNamed 的实现。
- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.imageView.image = [UIImage imageNamed:@&quot;CoerLN&quot;];
}

- - -
// 打印输出
2016-03-17 17:52:14.693 runtime[12761:543574] runtime交互方法 -&amp;gt; 图片加载成功&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;br/&gt;我们所做的就是在方法调用流程第三步的时候，交换两个方法地址指向。而且我们改变指向要在系统的&lt;code&gt;imageNamed:&lt;/code&gt;方法调用前，所以将代码写在了分类的&lt;code&gt;load&lt;/code&gt;方法里。最后当运行的时候系统的方法就会去找我们的方法的实现。&lt;/p&gt;
&lt;h5 id=&quot;给系统分类动态添加属性&quot;&gt;给系统分类动态添加属性&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：给系统的类添加额外属性的时候，可以使用runtime动态添加属性方法。&lt;br/&gt;&lt;strong&gt;原理&lt;/strong&gt;：给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到类存空间。&lt;br/&gt;&lt;strong&gt;注解&lt;/strong&gt;：给系统 &lt;code&gt;NSObject&lt;/code&gt; 添加一个分类，我们知道在分类中是不能够添加成员属性的，虽然我们用了&lt;code&gt;@property&lt;/code&gt;，但是仅仅会自动生成&lt;code&gt;get&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;方法的声明，并没有带下划线的属性和方法实现生成。但是我们可以通过&lt;code&gt;runtime&lt;/code&gt;就可以做到给它方法的实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：给系统 NSObject 类动态添加属性 &lt;code&gt;name&lt;/code&gt; 字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景代码&lt;/strong&gt;：方法+调用+打印&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
@interface NSObject (Property)

@property NSString *name;
@end

- - -
#import &quot;NSObject+Property.h&quot;
#import &amp;lt;objc/message.h&amp;gt;
//#import &amp;lt;objc/runtime.h&amp;gt;

@implementation NSObject (Property)

- (NSString *)name
{
    // 利用参数key 将对象object中存储的对应值取出来
    return objc_getAssociatedObject(self, @&quot;name&quot;);
}

- (void)setName:(NSString *)name
{
    /**
     将某个值跟某个对象关联起来，将某个值存储到某个对象中
     objc_setAssociatedObject(&amp;lt;#id  _Nonnull object#&amp;gt;：给哪个对象添加属性, &amp;lt;#const void * _Nonnull key#&amp;gt;：属性名称, &amp;lt;#id  _Nullable value#&amp;gt;：属性值, &amp;lt;#objc_AssociationPolicy policy#&amp;gt;：保存策略)
     */
    objc_setAssociatedObject(self, @&quot;name&quot;, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    NSLog(@&quot;name----&amp;gt;%p&quot;,name);
}
@end

// 调用
NSObject *objc = [[NSObject alloc] init];
objc.name = @&quot;CoderLN&quot;;
NSLog(@&quot;runtime动态添加属性name==%@&quot;,objc.name);

// 打印输出
2016-03-17 19:37:10.530 runtime[12761:543574] runtime动态添加属性name == CoderLN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;br/&gt;其实，&lt;strong&gt;属性赋值的本质，就是让属性与一个对象产生关联&lt;/strong&gt;，所以要给&lt;code&gt;NSObject&lt;/code&gt;的分类的&lt;code&gt;name&lt;/code&gt;属性赋值就是让&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;NSObject&lt;/code&gt;产生关联，而&lt;code&gt;runtime&lt;/code&gt;可以做到这一点。&lt;/p&gt;
&lt;h5 id=&quot;字典转模型&quot;&gt;字典转模型&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;字典转模型的方式&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;给模型中属性，在 .m 依次赋值（初学者）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字典转模型 KVC 实现&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;KVC 字典转模型弊端：必须保证，模型中的属性和字典中的&lt;code&gt;key&lt;/code&gt; 一一对应。&lt;/li&gt;
&lt;li&gt;如果不一致，就会调用&lt;code&gt;[&amp;lt;Status 0x7fa74b545d60&amp;gt; setValue:forUndefinedKey:]&lt;/code&gt; 报&lt;code&gt;key&lt;/code&gt;找不到的错。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析&lt;/strong&gt;：模型中的属性和字典的&lt;code&gt;key&lt;/code&gt;不一一对应，系统就会调用&lt;code&gt;setValue:forUndefinedKey:&lt;/code&gt;报错。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：重写对象的&lt;code&gt;setValue:forUndefinedKey:&lt;/code&gt;，把系统的方法覆盖，就能继续使用KVC，字典转模型了。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字典转模型 Runtime 实现&lt;/strong&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：利用运行时，遍历模型中所有属性，根据模型的属性名，去字典中查找&lt;code&gt;key&lt;/code&gt;，取出对应的值，给模型的属性赋值（从提醒：字典中取值，不一定要全部取出来）；提供一个NSObject分类，专门字典转模型，以后所有模型都可以通过这个分类实现字典转模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;考虑情况&lt;/strong&gt;：&lt;br/&gt;1.当字典的&lt;code&gt;key&lt;/code&gt;和模型的属性匹配不上。&lt;br/&gt;2.模型中嵌套模型（模型属性是另外一个模型对象）。&lt;br/&gt;3.数组中装着模型（模型的属性是一个数组，数组中是一个个模型对象）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注解&lt;/strong&gt;：&lt;br/&gt;根据上面的三种特殊情况，先是字典的&lt;code&gt;key&lt;/code&gt;和模型的属性不对应的情况。不对应有两种，一种是字典的键值大于模型属性数量，这时候我们不需要任何处理，因为&lt;code&gt;runtime&lt;/code&gt;是先遍历模型所有属性，再去字典中根据属性名找对应值进行赋值，多余的键值对也当然不会去看了；另外一种是模型属性数量大于字典的键值对，这时候由于属性没有对应值会被赋值为&lt;code&gt;nil&lt;/code&gt;，就会导致&lt;code&gt;crash&lt;/code&gt;，我们只需加一个判断即可。考虑三种情况下面一一注解&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MJExtension 字典转模型实现&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;底层也是对 &lt;code&gt;runtime&lt;/code&gt; 的封装，才可以把一个模型中所有属性遍历出来。（我之所以看不懂，是MJ封装了很多层而已^_^.）。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;示例：runtime 字典转模型考虑三种情况&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2230763-90c4b9e71267bef4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Runtime 字典转模型&quot;/&gt;&lt;/p&gt;
&lt;h6 id=&quot;runtime-字典转模型--字典的-key-和模型的属性不匹配模型属性数量大于字典键值对数这种情况处理如下&quot;&gt;1、runtime 字典转模型--&amp;gt;字典的 key 和模型的属性不匹配「模型属性数量大于字典键值对数」，这种情况处理如下：&lt;/h6&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;#import &quot;NSObject+Model.h&quot;
#import &amp;lt;objc/message.h&amp;gt;

@implementation NSObject (Model)

// 思路：利用runtime 遍历模型中所有属性，根据模型中属性,去字典中取出对应的value给模型属性赋值
+ (instancetype)modelWithDict:(NSDictionary *)dict
{
    // 1.创建对应的对象
    id objc = [[self alloc] init];
    
    // 2.利用runtime给对象中的属性赋值
    /**
      获取类中的所有成员变量
        class_copyIvarList(Class _Nullable cls：表示获取哪个类中的成员变量, unsigned int * _Nullable outCount：表示这个类有多少成员变量，传入一个Int变量地址，会自动给这个变量赋值)
      返回值Ivar * =
        指的是一个ivar数组，会把所有成员属性放在一个数组中，通过返回的数组就能全部获取到
     */
    // 成员变量个数
    unsigned int count = 0;
    // 获取类中的所有成员变量
    Ivar *ivarList = class_copyIvarList(self, &amp;amp;count);

    // 遍历所有成员变量
    for (int i = 0; i &amp;lt; count; i++) {
        // 根据角标，从数组取出对应的成员变量（Ivar：成员变量,以下划线开头）
        Ivar ivar = ivarList[i];
        
        // 获取成员变量名字
        NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)];
        
        // 处理成员变量名，字典中的key(去掉 _ ,从第一个角标开始截取)
        NSString *key = [ivarName substringFromIndex:1];
        
        // 根据成员属性名去字典中查找对应的value
        id value = dict[key];
        
        //【如果模型属性数量大于字典键值对数理，模型属性会被赋值为nil】
        // 而报错 (could not set nil as the value for the key age.)
        if (value) {
            // 给模型中属性赋值
            [objc setValue:value forKey:key];
        }
    }
    return objc;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注解&lt;/strong&gt;：&lt;br/&gt;这里在获取模型类中的所有属性名，是采取 &lt;code&gt;class_copyIvarList&lt;/code&gt; 先获取成员变量（&lt;code&gt;以下划线开头&lt;/code&gt;） ，然后再处理成员变量名，字典中的key(&lt;code&gt;去掉 _ ,从第一个角标开始截取&lt;/code&gt;) 得到属性名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;{
    int _a; // 成员变量
}
@property (nonatomic, assign) NSInteger attitudes_count; // 属性

`Ivar：成员变量，以下划线开头`，
`Property 属性`
`class_copyPropertyList` 获取类里面属性 
`class_copyIvarList` 获取类中的所有成员变量 
这里有成员变量，就不会漏掉属性；如果有属性，可能会漏掉成员变量；
使用`runtime`字典转模型获取模型属性名的时候，最好获取成员属性名`Ivar`因为可能会有个属性是没有`setter`和`getter`方法的。&lt;/code&gt;
&lt;/pre&gt;
&lt;h6 id=&quot;runtime-字典转模型--模型中嵌套模型模型属性是另外一个模型对象这种情况处理如下&quot;&gt;2、runtime 字典转模型--&amp;gt;模型中嵌套模型「模型属性是另外一个模型对象」，这种情况处理如下：&lt;/h6&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;// 思路：利用runtime 遍历模型中所有属性，根据模型中属性,去字典中取出对应的value给模型属性赋值
+ (instancetype)modelWithDict2:(NSDictionary *)dict
{
    // 1.创建对应的对象
    id objc = [[self alloc] init];
    
    // 2.利用runtime给对象中的属性赋值
    // 成员变量个数
    unsigned int count = 0;
    // 获取类中的所有成员变量
    Ivar *ivarList = class_copyIvarList(self, &amp;amp;count);
    
    // 遍历所有成员变量
    for (int i = 0; i &amp;lt; count; i++) {
        // 根据角标，从数组取出对应的成员变量（Ivar：成员变量,以下划线开头）
        Ivar ivar = ivarList[i];
        
        // 获取成员变量名字
        NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)];
        // 获取成员变量类型
        NSString *ivarType = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];
        
        // 替换: @\&quot;User\&quot; -&amp;gt; User
        ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;\&quot;&quot; withString:@&quot;&quot;];
        ivarType = [ivarType stringByReplacingOccurrencesOfString:@&quot;@&quot; withString:@&quot;&quot;];
        
        // 处理成员变量名-&amp;gt;字典中的key(去掉 _ ,从第一个角标开始截取)
        NSString *key = [ivarName substringFromIndex:1];
        
        // 根据成员属性名去字典中查找对应的value
        id value = dict[key];
        
        // 二级转换：如果字典中还有字典，也需要把对应的字典转换成模型
        // 判断下value是否是字典,并且是自定义对象才需要转换
        if ([value isKindOfClass:[NSDictionary class]] &amp;amp;&amp;amp; ![ivarType hasPrefix:@&quot;NS&quot;]) {
            
            // 字典转换成模型 userDict =&amp;gt; User模型, 转换成哪个模型
            // 根据字符串类名生成类对象
            Class modelClass = NSClassFromString(ivarType);
            
            if (modelClass) { // 有对应的模型才需要转
                // 把字典转模型
                value = [modelClass modelWithDict2:value];
            }
        }
        
        // 给模型中属性赋值
        if (value) {
            [objc setValue:value forKey:key];
        }
    }
    return objc;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h6 id=&quot;runtime-字典转模型--数组中装着模型模型的属性是一个数组数组中是字典模型对象这种情况处理如下&quot;&gt;3、runtime 字典转模型--&amp;gt;数组中装着模型「模型的属性是一个数组，数组中是字典模型对象」，这种情况处理如下：&lt;/h6&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;// 思路：利用runtime 遍历模型中所有属性，根据模型中属性,去字典中取出对应的value给模型属性赋值
+ (instancetype)modelWithDict3:(NSDictionary *)dict
{
    // 1.创建对应的对象
    id objc = [[self alloc] init];
    
    // 2.利用runtime给对象中的属性赋值
    // 成员变量个数
    unsigned int count = 0;
    // 获取类中的所有成员变量
    Ivar *ivarList = class_copyIvarList(self, &amp;amp;count);
    
    // 遍历所有成员变量
    for (int i = 0; i &amp;lt; count; i++) {
        // 根据角标，从数组取出对应的成员变量（Ivar：成员变量,以下划线开头）
        Ivar ivar = ivarList[i];
        
        // 获取成员变量名字
        NSString *ivarName = [NSString stringWithUTF8String:ivar_getName(ivar)];
        
        // 处理成员属性名-&amp;gt;字典中的key(去掉 _ ,从第一个角标开始截取)
        NSString *key = [ivarName substringFromIndex:1];
        
        // 根据成员属性名去字典中查找对应的value
        id value = dict[key];
        
        
        //--------------------------- &amp;lt;#我是分割线#&amp;gt; ------------------------------//
        //
        
        // 三级转换：NSArray中也是字典，把数组中的字典转换成模型.
        // 判断值是否是数组
        if ([value isKindOfClass:[NSArray class]]) {
            // 判断对应类有没有实现字典数组转模型数组的协议
            // arrayContainModelClass 提供一个协议，只要遵守这个协议的类，都能把数组中的字典转模型
            if ([self respondsToSelector:@selector(arrayContainModelClass)]) {
                
                // 转换成id类型，就能调用任何对象的方法
                id idSelf = self;
                
                // 获取数组中字典对应的模型
                NSString *type =  [idSelf arrayContainModelClass][key];
                
                // 生成模型
                Class classModel = NSClassFromString(type);
                NSMutableArray *arrM = [NSMutableArray array];
                // 遍历字典数组，生成模型数组
                for (NSDictionary *dict in value) {
                    // 字典转模型
                    id model =  [classModel modelWithDict3:dict];
                    [arrM addObject:model];
                }
                
                // 把模型数组赋值给value
                value = arrM;     
            }
        }
        
        // 如果模型属性数量大于字典键值对数理，模型属性会被赋值为nil,而报错
        if (value) {
            // 给模型中属性赋值
            [objc setValue:value forKey:key];
        }
    }
    return objc;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2230763-339901c56acf905a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;br/&gt;我们既然能获取到属性类型，那就可以拦截到模型的那个数组属性，进而对数组中每个模型遍历并字典转模型，但是我们不知道数组中的模型都是什么类型，我们可以声明一个方法，该方法目的不是让其调用，而是让其实现并返回模型的类型。&lt;/p&gt;
&lt;p&gt;这里提到的你如果不是很清楚，建议参考我的Demo，重要的部分代码中都有相应的注解和文字打印，运行程序可以很直观的表现。&lt;/p&gt;
&lt;h4 id=&quot;其它作用面试熟悉&quot;&gt;其它作用「面试熟悉」&lt;/h4&gt;
&lt;hr/&gt;&lt;h5 id=&quot;动态添加方法&quot;&gt;动态添加方法&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注解&lt;/strong&gt;：OC 中我们很习惯的会用懒加载，当用到的时候才去加载它，但是实际上只要一个类实现了某个方法，就会被加载进内存。当我们不想加载这么多方法的时候，就会使用到 &lt;code&gt;runtime&lt;/code&gt; 动态的添加方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：runtime 动态添加方法处理调用一个未实现的方法 和 去除报错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景代码&lt;/strong&gt;：方法+调用+打印输出&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;#import &quot;Person.h&quot;
#import &amp;lt;objc/message.h&amp;gt;

@implementation Person

/**
 调用：只要一个对象调用了一个未实现的方法就会调用这个方法,进行处理
 作用：动态添加方法,处理未实现
 注解：任何方法默认都有两个隐式参数,self,_cmd（当前方法的方法编号）
 */
+ (BOOL)resolveInstanceMethod:(SEL)sel {
    
    if (sel == NSSelectorFromString(@&quot;roll:&quot;)) {
        /**
         class_addMethod(&amp;lt;#Class  _Nullable __unsafe_unretained cls#&amp;gt;：给哪个类添加方法, &amp;lt;#SEL  _Nonnull name#&amp;gt;：添加哪个方法，即添加方法的方法编号, &amp;lt;#IMP  _Nonnull imp#&amp;gt;：方法实现 =&amp;gt; 函数 =&amp;gt; 函数入口 =&amp;gt; 函数名（添加方法的函数实现（函数地址））, &amp;lt;#const char * _Nullable types#&amp;gt;：方法类型，(返回值+参数类型) v:void @:对象-&amp;gt;self :表示SEL-&amp;gt;_cmd)
         */
        // 给类添加roll:滚了多远方法
        class_addMethod(self, sel, (IMP)LNRoll, &quot;v@:@&quot;);
        
        return YES;
    }
    
    if ([NSStringFromSelector(sel) isEqualToString:@&quot;go:&quot;]) {
        // 给类添加go:走了多远方法
        class_addMethod(self, sel, (IMP)LNGO, &quot;v@:@&quot;);
        return YES;
    }
    
    return [super resolveInstanceMethod:sel];
}

// 调用
Person *p = [[Person alloc] init];
// 执行某个方法
[p performSelector:@selector(roll:) withObject:@&quot;11&quot;];
[p performSelector:@selector(go:) withObject:@10];

// 打印输出
2016-03-17 19:05:03.917 runtime[12761:543574] 我滚了 11 米远的屎蛋
2016-03-17 19:05:04.617 runtime[12761:543574] 我走了 10 公里才到的家 &lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h5 id=&quot;实现nscoding的自动归档和解档&quot;&gt;实现NSCoding的自动归档和解档&lt;/h5&gt;
&lt;p&gt;如果你实现过自定义模型数据持久化的过程，那么你也肯定明白，如果一个模型有许多个属性，那么我们需要对每个属性都实现一遍&lt;code&gt;encodeObject&lt;/code&gt; 和 &lt;code&gt;decodeObjectForKey&lt;/code&gt;方法，如果这样的模型又有很多个，这还真的是一个十分麻烦的事情。下面来看看简单的实现方式。&lt;/p&gt;
&lt;p&gt;假设现在有一个&lt;code&gt;Movie&lt;/code&gt;类，有3个属性。先看下 .h文件&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;// Movie.h文件
//1. 如果想要当前类可以实现归档与反归档，需要遵守一个协议NSCoding
@interface Movie : NSObject&amp;lt;NSCoding&amp;gt;

@property (nonatomic, copy) NSString *movieId;
@property (nonatomic, copy) NSString *movieName;
@property (nonatomic, copy) NSString *pic_url;
@end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果是正常写法，.m 文件应该是这样的：&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;// Movie.m文件
@implementation Movie

- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:_movieId forKey:@&quot;id&quot;];
    [aCoder encodeObject:_movieName forKey:@&quot;name&quot;];
    [aCoder encodeObject:_pic_url forKey:@&quot;url&quot;];

}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    if (self = [super init]) {
        self.movieId = [aDecoder decodeObjectForKey:@&quot;id&quot;];
        self.movieName = [aDecoder decodeObjectForKey:@&quot;name&quot;];
        self.pic_url = [aDecoder decodeObjectForKey:@&quot;url&quot;];
    }
    return self;
}
@end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果这里有100个属性，那么我们也只能把100个属性都给写一遍吗。&lt;br/&gt;不过你会使用&lt;code&gt;runtime&lt;/code&gt;后，这里就有更简便的方法，如下。&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;#import &quot;Movie.h&quot;
#import &amp;lt;objc/runtime.h&amp;gt;
@implementation Movie

- (void)encodeWithCoder:(NSCoder *)encoder

{
    unsigned int count = 0;
    Ivar *ivars = class_copyIvarList([Movie class], &amp;amp;count);

    for (int i = 0; i&amp;lt;count; i++) {
        // 取出i位置对应的成员变量
        Ivar ivar = ivars[i];
        // 查看成员变量
        const char *name = ivar_getName(ivar);
        // 归档
        NSString *key = [NSString stringWithUTF8String:name];
        id value = [self valueForKey:key];
        [encoder encodeObject:value forKey:key];
    }
    free(ivars);
}

- (id)initWithCoder:(NSCoder *)decoder
{
    if (self = [super init]) {
        unsigned int count = 0;
        Ivar *ivars = class_copyIvarList([Movie class], &amp;amp;count);
        for (int i = 0; i&amp;lt;count; i++) {
        // 取出i位置对应的成员变量
        Ivar ivar = ivars[i];
        // 查看成员变量
        const char *name = ivar_getName(ivar);
       // 归档
       NSString *key = [NSString stringWithUTF8String:name];
      id value = [decoder decodeObjectForKey:key];
       // 设置到成员变量身上
        [self setValue:value forKey:key];

        }
        free(ivars);
    } 
    return self;
}
@end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样的方式实现，不管有多少个属性，写这几行代码就搞定了。&lt;br/&gt;下面看看更加简便的方法：两句代码搞定。&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;#import &quot;Movie.h&quot;
#import &amp;lt;objc/runtime.h&amp;gt;

#define encodeRuntime(A) \
\
unsigned int count = 0;\
Ivar *ivars = class_copyIvarList([A class], &amp;amp;count);\
for (int i = 0; i&amp;lt;count; i++) {\
Ivar ivar = ivars[i];\
const char *name = ivar_getName(ivar);\
NSString *key = [NSString stringWithUTF8String:name];\
id value = [self valueForKey:key];\
[encoder encodeObject:value forKey:key];\
}\
free(ivars);\
\

#define initCoderRuntime(A) \
\
if (self = [super init]) {\
unsigned int count = 0;\
Ivar *ivars = class_copyIvarList([A class], &amp;amp;count);\
for (int i = 0; i&amp;lt;count; i++) {\
Ivar ivar = ivars[i];\
const char *name = ivar_getName(ivar);\
NSString *key = [NSString stringWithUTF8String:name];\
id value = [decoder decodeObjectForKey:key];\
[self setValue:value forKey:key];\
}\
free(ivars);\
}\
return self;\
\

- - -
@implementation Movie
- (void)encodeWithCoder:(NSCoder *)encoder {
    encodeRuntime(Movie)
}

- (id)initWithCoder:(NSCoder *)decoder {
    initCoderRuntime(Movie)
}
@end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;优化&lt;/strong&gt;：&lt;br/&gt;上面是&lt;code&gt;encodeWithCoder&lt;/code&gt; 和 &lt;code&gt;initWithCoder&lt;/code&gt;这两个方法抽成宏。我们可以把这两个宏单独放到一个文件里面，这里以后需要进行数据持久化的模型都可以直接使用这两个宏。&lt;/p&gt;
&lt;h5 id=&quot;runtime-下class的各项操作&quot;&gt;runtime 下Class的各项操作&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;1.runtime 部分函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;#warning - 以下为功能模块相关的方法示例, 具体方法作用、使用、注解请移步 -&amp;gt; github.com/CoderLN
以下的这些方法应该算是`runtime`在实际场景中所应用的大部分的情况了，平常的编码中差不多足够用了。

 0、class_copyPropertyList 获取类中所有的属性
        objc_property_t *propertyList = class_copyPropertyList([self class], &amp;amp;count);
        for (unsigned int i=0; i&amp;lt;count; i++) {
            const char *propertyName = property_getName(propertyList[i]);
            NSLog(@&quot;property----&amp;gt;%@&quot;, [NSString stringWithUTF8String:propertyName]);
        }

 0、class_copyMethodList 获取类的所有方法
        Method *methodList = class_copyMethodList([self class], &amp;amp;count);
        for (unsigned int i; i&amp;lt;count; i++) {
            Method method = methodList[i];
            NSLog(@&quot;method----&amp;gt;%@&quot;, NSStringFromSelector(method_getName(method)));
        }

 0、class_copyIvarList 获取类中所有的成员变量（outCount 会返回成员变量的总数）
        Ivar *ivarList = class_copyIvarList([self class], &amp;amp;count);
        for (unsigned int i; i&amp;lt;count; i++) {
            Ivar myIvar = ivarList[i];
            const char *ivarName = ivar_getName(myIvar);
            NSLog(@&quot;Ivar----&amp;gt;%@&quot;, [NSString stringWithUTF8String:ivarName]);
        }
 
 0、class_copyProtocolList 获取协议列表
    __unsafe_unretained Protocol **protocolList = class_copyProtocolList([self class], &amp;amp;count);
    for (unsigned int i; i&amp;lt;count; i++) {
        Protocol *myProtocal = protocolList[i];
        const char *protocolName = protocol_getName(myProtocal);
        NSLog(@&quot;protocol----&amp;gt;%@&quot;, [NSString stringWithUTF8String:protocolName]);
    }
 
 0、object_getClass 获得类方法
        Class PersonClass = object_getClass([Person class]);
        SEL oriSEL = @selector(test1);
        Method oriMethod = _class_getMethod(xiaomingClass, oriSEL);
 
 0、class_getInstanceMethod 获得实例方法
        Class PersonClass = object_getClass([xiaoming class]);
        SEL oriSEL = @selector(test2);
        Method cusMethod = class_getInstanceMethod(xiaomingClass, oriSEL);
 
 0、class_addMethod 动态添加方法
        BOOL addSucc = class_addMethod(xiaomingClass, oriSEL, method_getImplementation(cusMethod), method_getTypeEncoding(cusMethod));
 
 0、class_replaceMethod 替换原方法实现
        class_replaceMethod(toolClass, cusSEL, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));
 
 0、method_exchangeImplementations 交换两个方法的实现
        method_exchangeImplementations(method1, method2);

 0、根据名字得到类变量的Ivar指针，但是这个在OC中好像毫无意义
    Ivar oneCVIvar = class_getClassVariable([Person class], name);

 0、根据名字得到实例变量的Ivar指针
    Ivar oneIVIvar = class_getInstanceVariable([Person class], name);

 0、找到后可以直接对私有成员变量赋值（强制修改name属性）
    object_setIvar(_per, oneIVIvar, @&quot;age&quot;);


 0、动态添加方法
    class_addMethod([person class]：Class cls 类型, @selector(eat)：待调用的方法名称, (IMP)myAddingFunction：(IMP)myAddingFunction，IMP是一个函数指针，这里表示指定具体实现方法myAddingFunction, 0：0代表没有参数);

 0、获得某个类的类方法
    Method class_getClassMethod(Class cls , SEL name)

 0、获得成员变量的名字
    const char *ivar_getName(Ivar v);

 0、将某个值跟某个对象关联起来，将某个值存储到某个对象中
    void objc_setAssociatedObject(id object：表示关联者，是一个对象，变量名理所当然也是object , const void *key：获取被关联者的索引key ,id value ：被关联者 ,objc_AssociationPolicy policy：关联时采用的协议，有assign，retain，copy等协议，一般使用OBJC_ASSOCIATION_RETAIN_NONATOMIC)

 0、利用参数key 将对象object中存储的对应值取出来
    id objc_getAssociatedObject(id object , const void *key)
 */&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;method-swizzling俗称黑魔法&quot;&gt;method swizzling（俗称黑魔法）&lt;/h4&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;简单说就是进行方法交换&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Objective-C&lt;/code&gt;中调用一个方法，其实是向一个对象发送消息，查找消息的唯一依据是&lt;code&gt;selector&lt;/code&gt;的名字。利用&lt;code&gt;Objective-C&lt;/code&gt;的动态特性，可以实现在运行时偷换&lt;code&gt;selector&lt;/code&gt;对应的方法实现，达到给方法挂钩的目的&lt;/li&gt;
&lt;li&gt;每个类都有一个方法列表，存放着方法的名字和方法实现的映射关系，&lt;code&gt;selector&lt;/code&gt;的本质其实就是方法名，&lt;code&gt;IMP&lt;/code&gt;有点类似函数指针，指向具体的&lt;code&gt;Method&lt;/code&gt;实现，通过&lt;code&gt;selector&lt;/code&gt;就可以找到对应的&lt;code&gt;IMP&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2230763-6a0a0fbe675edfba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;selector --&amp;gt; 对应的IMP&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;交换方法的几种实现方式
&lt;ul&gt;&lt;li&gt;利用 &lt;code&gt;method_exchangeImplementations&lt;/code&gt; 交换两个方法的实现&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;class_replaceMethod&lt;/code&gt; 替换方法的实现&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;method_setImplementation&lt;/code&gt; 来直接设置某个方法的&lt;code&gt;IMP&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2230763-4324f35bfc814f69.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;交换方法&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里可以参考简友这篇：&lt;a href=&quot;http://www.jianshu.com/p/f6dad8e1b848&quot;&gt;Runtime Method Swizzling开发实例汇总&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;一道面试题的注解&quot;&gt;一道面试题的注解&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;下面的代码输出什么?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;@implementation Son : NSObject
- (id)init
{
    self = [super init];
    if (self) {
        NSLog(@&quot;%@&quot;, NSStringFromClass([self class]));
        NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));
    }
    return self;
}
@end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先思考一下，会打印出来什么❓&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;答案：都输出 Son&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;class&lt;/code&gt; 获取当前方法的调用者的类，&lt;code&gt;superClass&lt;/code&gt; 获取当前方法的调用者的父类，&lt;code&gt;super&lt;/code&gt; 仅仅是一个编译指示器，就是给编译器看的，不是一个指针。&lt;/li&gt;
&lt;li&gt;本质：只要编译器看到&lt;code&gt;super&lt;/code&gt;这个标志，就会让当前对象去调用父类方法，本质还是当前对象在调用&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这个题目主要是考察关于&lt;code&gt;objc&lt;/code&gt;中对 &lt;code&gt;self&lt;/code&gt; 和 &lt;code&gt;super&lt;/code&gt; 的理解：&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;self&lt;/code&gt; 是类的隐藏参数，指向当前调用方法的这个类的实例。而 &lt;code&gt;super&lt;/code&gt; 本质是一个编译器标示符，和 &lt;code&gt;self&lt;/code&gt; 是指向的同一个消息接受者&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;当使用 &lt;code&gt;self&lt;/code&gt; 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;而当使用 &lt;code&gt;super&lt;/code&gt;时，则从父类的方法列表中开始找。然后调用父类的这个方法&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;调用 &lt;code&gt;[self class]&lt;/code&gt; 时，会转化成 &lt;code&gt;objc_msgSend&lt;/code&gt; 函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;id objc_msgSend(id self, SEL op, ...)
- 调用 `[super class]`时，会转化成 `objc_msgSendSuper` 函数.

id objc_msgSendSuper(struct objc_super *super, SEL op, ...)
第一个参数是 objc_super 这样一个结构体，其定义如下
 struct objc_super {
 __unsafe_unretained id receiver;
 __unsafe_unretained Class super_class;
 };

第一个成员是 receiver, 类似于上面的 objc_msgSend函数第一个参数self
第二个成员是记录当前类的父类是什么，告诉程序从父类中开始找方法，找到方法后，最后内部是使用 objc_msgSend(objc_super-&amp;gt;receiver, @selector(class))去调用， 此时已经和[self class]调用相同了，故上述输出结果仍然返回 Son

objc Runtime 开源代码对- (Class)class方法的实现
-(Class)class { return object_getClass(self); 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;runtime-模块博文推荐-数量较多&quot;&gt;Runtime 模块博文推荐 (❤️数量较多)&lt;/h4&gt;
&lt;hr/&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7.4623824451411&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.7894736842105&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;西木&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;完整总结 http://www.jianshu.com/p/6b905584f536&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.5454545454545&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;天口三水羊&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;objc_msgSend http://www.jianshu.com/p/9e1bc8d890f9&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.5789473684211&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;夜千寻墨&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;详解 http://www.jianshu.com/p/46dd81402f63&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.59375&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;袁峥Seemygo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;快速上手 http://www.jianshu.com/p/e071206103a4&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.7142857142857&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;郑钦洪_&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;实现自动化归档 http://www.jianshu.com/p/bd24c3f3cd0a&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.672131147541&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;HenryCheng&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;消息机制 http://www.jianshu.com/p/f6300eb3ec3d&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.5368421052632&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;卖报的小画家Sure&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Method Swizzling开发实例汇总 http://www.jianshu.com/p/f6dad8e1b848&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.76&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;滕大鸟&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;OC最实用的runtime总结 http://www.jianshu.com/p/ab966e8a82e2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.7176470588235&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/Plainboiledwater/p/9678287.html&quot;&gt;黑花白花&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Runtime在实际开发中的应用 http://www.jianshu.com/p/851b21870d91&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;runtime-runloop-常面问题整理附答案&quot;&gt;Runtime &amp;amp; Runloop 常面问题整理（附答案）&lt;/h4&gt;
&lt;p&gt;同一个面试问题并非只有一个答案，而同一个答案并不是在任何面试场合都有效，关键在于应聘者掌握了规律后，对面试的具体情况进行把握，有意识地揣摩面试官提出问题的心理 (&lt;strong&gt;真实问答&lt;/strong&gt;)，要 get 的到问的点，然后答其所问，算是“ 投其所好 ”吧。&lt;br/&gt;摘录：&lt;br/&gt;http://www.jianshu.com/p/56e40ea56813&lt;br/&gt;http://www.jianshu.com/p/f9eb6b315c08&lt;/p&gt;
&lt;h5 id=&quot;runtime&quot;&gt;Runtime&lt;/h5&gt;
&lt;table&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;01 / objc在向一个对象发送消息时，发生了什么？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;8&quot;&gt;&lt;td&gt;参考1：根据对象的 isa 指针找到类对象 id，在查询类对象里面的 methodLists 方法函数列表，如果没有在好到，在沿着 superClass ,寻找父类，再在父类 methodLists 方法列表里面查询，最终找到 SEL ,根据 id 和 SEL 确认 IMP（指针函数）,在发送消息；&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;02 / 问题：什么时候会报unrecognized selector错误？iOS有哪些机制来避免走到这一步？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;参考1：当发送消息的时候，我们会根据类里面的 methodLists 列表去查询我们要动用的SEL，当查询不到的时候，我们会一直沿着父类查询，当最终查询不到的时候我们会报 &lt;code&gt;unrecognized selector&lt;/code&gt; 错误，当系统查询不到方法的时候，会调用 &lt;code&gt;+(BOOL)resolveInstanceMethod:(SEL)sel&lt;/code&gt; 动态解释的方法来给我一次机会来添加，调用不到的方法。或者我们可以再次使用 &lt;code&gt;-(id)forwardingTargetForSelector:(SEL)aSelector&lt;/code&gt; 重定向的方法来告诉系统，该调用什么方法，一来保证不会崩溃。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;03 / 问题：能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;参考1：1、不能向编译后得到的类增加实例变量 2、能向运行时创建的类中添加实例变量。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;7&quot;&gt;&lt;td&gt;分析：1. 编译后的类已经注册在 runtime 中,类结构体中的 objc_ivar_list 实例变量的链表和 instance_size 实例变量的内存大小已经确定，runtime会调用 class_setvarlayout 或 class_setWeaklvarLayout 来处理strong weak 引用.所以不能向存在的类中添加实例变量。2. 运行时创建的类是可以添加实例变量，调用class_addIvar函数. 但是的在调用 objc_allocateClassPair 之后，objc_registerClassPair 之前,原因同上.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;04 / 问题：runtime如何实现weak变量的自动置nil？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;参考1：runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;05 / 问题：给类添加一个属性后，在类结构体里哪些元素会发生变化？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;参考1：instance_size ：实例的内存大小；objc_ivar_list *ivars:属性列表&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h5 id=&quot;runloop&quot;&gt;RunLoop&lt;/h5&gt;
&lt;table&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;01 / 问题：runloop是来做什么的？runloop和线程有什么关系？主线程默认开启了runloop么？子线程呢？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;参考1：runloop: 从字面意思看：运行循环、跑圈，其实它内部就是do-while循环，在这个循环内部不断地处理各种任务（比如Source、Timer、Observer）事件。runloop和线程的关系：一个线程对应一个RunLoop，主线程的RunLoop默认创建并启动，子线程的RunLoop需手动创建且手动启动（调用run方法）。RunLoop只能选择一个Mode启动，如果当前Mode中没有任何Source(Sources0、Sources1)、Timer，那么就直接退出RunLoop。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;02 / 问题：runloop的mode是用来做什么的？有几种mode？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;参考1：model:是runloop里面的运行模式，不同的模式下的runloop处理的事件和消息有一定的差别。系统默认注册了5个Mode:（1）kCFRunLoopDefaultMode: App的默认 Mode，通常主线程是在这个 Mode 下运行的。（2）UITrackingRunLoopMode: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响。（3）UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。（4）GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到。（5）kCFRunLoopCommonModes: 这是一个占位的 Mode，没有实际作用。注意iOS 对以上5中model进行了封装 NSDefaultRunLoopMode、NSRunLoopCommonModes&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;03 / 问题：为什么把NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环以后，滑动scrollview的时候NSTimer却不动了？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;参考1：nstime对象是在 NSDefaultRunLoopMode下面调用消息的，但是当我们滑动scrollview的时候，NSDefaultRunLoopMode模式就自动切换到UITrackingRunLoopMode模式下面，却不可以继续响应nstime发送的消息。所以如果想在滑动scrollview的情况下面还调用nstime的消息，我们可以把nsrunloop的模式更改为NSRunLoopCommonModes.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;04 / 问题：苹果是如何实现Autorelease Pool的？&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;参考1：Autorelease Pool作用：缓存池，可以避免我们经常写relase的一种方式。其实就是延迟release，将创建的对象，添加到最近的autoreleasePool中，等到autoreleasePool作用域结束的时候，会将里面所有的对象的引用计数器 - autorelease.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/CustomPBWaters/runtime-Learning&quot;&gt;附上写的小样 Demo，重要的部分代码中都有相应的注解和文字打印，运行程序可以很直观的表现&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;reading&quot;&gt;Reading&lt;/h4&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;各位厂友，由于「时间 &amp;amp; 知识」有限，总结的文章难免有「未全、不足」，该模块将系统化学习，后替换、补充文章内容 ~&lt;/li&gt;
&lt;li&gt;熬夜写者不易，&lt;a href=&quot;https://upload-images.jianshu.io/upload_images/2230763-5407990be8e69fff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;&gt;不知名开发者，更多模块文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 19 Sep 2018 15:14:00 +0000</pubDate>
<dc:creator>public-不知名开发者</dc:creator>
<og:description>引导 相信对于从事开发人员来说 runtime 这个名称都不陌生，就像我起初只知道「 runtime 叫运行时 」，后来知道 runtime 同样可以像 KVC 一样访问私有成员变量，还有「 给类动态</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Plainboiledwater/p/9678287.html</dc:identifier>
</item>
<item>
<title>python文件流 - 风住</title>
<link>http://www.cnblogs.com/whych/p/9678249.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/whych/p/9678249.html</guid>
<description>&lt;p&gt;&lt;span&gt;打开文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;文件的基本方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;迭代文件内容&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;打开文件&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;打开文件，可以使用自动导入的模块io中的函数open。函数open将文件名作为唯一必不可少的参数，并返回一个文件对象。如果只指定一个文件名，则获得一个可读取的文件对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果当前目录中有此文件则可以打开，如果位于其他位置则需要指定完整的路径，如果指定文件不存在，则如下报错。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387124/201809/1387124-20180919230302618-723640688.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;文件模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果需要写入文件，则需要通过指定模式。函数open的参数模式常见有如下：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table border=&quot;0&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot; readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;'r'&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;读取模式（默认）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;'w'&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;写入模式（文件不存在时创建它）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;'t'&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;文本模式（默认，与其他模式结合使用）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;'x'&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;独占写模式，新建一个文件，如果该文件已存在则会报错。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;'a'&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;附加模式（在既有文件末尾继续写入）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;'b'&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;二进制模式（与其他模式结合使用）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;&lt;span&gt;'+'&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;打开一个文件进行更新（可读可写，与其他模式结合使用）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;默认模式为'rt'，读取时将自动替换其他行尾字符（'\r','\r\n'），写入时将'\n'替换为系统的默认行尾字符（os.linesep）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要打开一个文本文件进行读写，可使用'r+',但是会将既有内容删除，而'w+'不会。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;文件的基本方法&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;读取和写入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;管道重定向输出&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;随机存取&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;读取和写入行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关闭文件&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;文件最重要的功能就是提供和接收数据。在文本和二进制模式下，基本上分别将str和bytes类用作数据。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;读取和写入：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387124/201809/1387124-20180919230303009-1069883659.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用read读取数据，默认读取全部内容。还可以指定参数，然后读取剩下的全部内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387124/201809/1387124-20180919230303256-1739546988.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;管道重定向输出&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将一个命令的标准输出链接到下个命令的标准输入：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;cat some.txt&lt;/span&gt;
&lt;span&gt;
you are bad boy

 

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;cat some.py&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/evn python&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算sys.stdin中包含多少个单词的脚本&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys

text &lt;/span&gt;=&lt;span&gt; sys.stdin.read()

words &lt;/span&gt;=&lt;span&gt; text.split()

wordcount &lt;/span&gt;=&lt;span&gt; len(words)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(wordcount)

 

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;cat some.txt | python3 some.py&lt;/span&gt;

4
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;随机存取&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以使用方法seek和tell。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;seek(offset,[, whence])将当前位置移到offset（指定字节数）和whence指定的地方（参数whence默认为io.SEEK_SET(0)，偏移量是相对于文件开头的，而io.SEEK_SET(1)，相对于当前位置进行移动，io.SEEK_SET(2)，相对于文件末尾进行移动）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;tell()返回当前位于文件的什么位置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387124/201809/1387124-20180919230303545-955579702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;对行的读取和写入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以使用方法readline，不指定参数默认读取一行并返回，指定参数为最多读取多少个字符。要读取文件中所有的行，并&lt;strong&gt;以列表的方式返回&lt;/strong&gt;它们，可以使用方法readlines。方法writelines&lt;strong&gt;接受一个字符串列表&lt;/strong&gt;写入文件中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387124/201809/1387124-20180919230303803-431184671.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387124/201809/1387124-20180919230304006-580327125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;# 修改文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1387124/201809/1387124-20180919230304299-194107194.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;关闭文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;避免锁定文件以防止修改，避免用完系统可能指定的文件打开配额。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;确保文件关闭，可以使用try/finally语句。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;try&lt;/span&gt;&lt;span&gt;：

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将数据写入到文件中&lt;/span&gt;

&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;：

file.close()


with语句可以让你打开一个文件并赋值到一个变量，到达该句末尾时，将自动关闭文件，即便出现异常。

with open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;somefile.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as somefile

do_something(somefile)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;迭代文件内容&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; process(string):
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Processing:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, string)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每次迭代一个字符&lt;/span&gt;
with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileone.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
　　&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        char &lt;/span&gt;= f.read(1&lt;span&gt;)
　　&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; char: &lt;span&gt;break&lt;/span&gt;&lt;span&gt;
　　process(char)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;每次迭代一行字符&lt;/span&gt;
with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileone.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
    line &lt;/span&gt;=&lt;span&gt; f.readline()
&lt;/span&gt;&lt;span&gt;                                                                                                                                                          process(line)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;读取所有内容，使用read&lt;/span&gt;
with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileone.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:                                                                                                                                                                                          &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; char &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f.read():
    process(char)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用readlines&lt;/span&gt;
with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileone.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:                                                                                                                                                                                                                                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; char &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f.readlines():
    process(char)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用fileinput实现延迟迭代，读取实际需要文本的部分&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; fileinput
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; fileinput.input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileone.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
    process(line)
 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;文件迭代器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;迭代文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileone.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:&lt;br/&gt;　　&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f:&lt;br/&gt;　　process(line)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;不将文件对象赋给变量迭代文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; open(fileone.txt):
    process(line)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;对迭代器的操作也可以对文件做，如list(open(fileone.txt))：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; f = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileone.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;First&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, file=&lt;span&gt;f)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, file=&lt;span&gt;f)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; f.close()


&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; lines = list(open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;fileone.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; lines

[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;First line\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Second line\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 19 Sep 2018 15:09:00 +0000</pubDate>
<dc:creator>风住</dc:creator>
<og:description>打开文件 文件的基本方法 迭代文件内容 打开文件 打开文件，可以使用自动导入的模块io中的函数open。函数open将文件名作为唯一必不可少的参数，并返回一个文件对象。如果只指定一个文件名，则获得一个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/whych/p/9678249.html</dc:identifier>
</item>
<item>
<title>分布式系列五: RMI通信 - 罪恶斯巴克</title>
<link>http://www.cnblogs.com/walkinhalo/p/9678139.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/walkinhalo/p/9678139.html</guid>
<description>&lt;h2 id=&quot;rpcremote-procedure-call协议&quot;&gt;RPC(Remote Procedure Call)协议&lt;/h2&gt;
&lt;p&gt;RPC协议是一种通过网络从远程计算机上请求服务, 而不需要了解底层网络技术的协议, 在OSI模型中处在应用层和网络层.&lt;/p&gt;
&lt;p&gt;作为一个规范, 使用RPC协议的框架有很多, Dubbo,Hessian等均使用这个协议, RMI也使用该协议实现.&lt;/p&gt;
&lt;h2 id=&quot;rmiremote-method-invocation-远程方法调用&quot;&gt;RMI(Remote Method Invocation) 远程方法调用&lt;/h2&gt;
&lt;p&gt;RMI使用Java远程消息交换协议JRMP（Java Remote Messaging Protocol）进行通信,JRMP是纯java的.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;定义接口, 使其extends &lt;code&gt;Remote&lt;/code&gt;接口, 方法需要抛出异常&lt;code&gt;RemoteException&lt;/code&gt;, Remote是一个标记接口&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public interface IRmiTest extends Remote {
    String hello() throws RemoteException;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;实现接口, 使其extends &lt;code&gt;UnicastRemoteObject&lt;/code&gt;, 需要有构造方法, 并抛出异常&lt;code&gt;RemoteException&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class RmiTest extends UnicastRemoteObject implements IRmiTest {

    public RmiTest() throws RemoteException {

    }

    @Override
    public String hello() {
        return &quot;Hello ....&quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;定义服务端, 注册和绑定&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class TestServer {
    public static void main(String[] args) throws RemoteException, AlreadyBoundException, MalformedURLException {
        IRmiTest rmiTest = new RmiTest();
        LocateRegistry.createRegistry(8888);
        Naming.bind(&quot;rmi://localhost:8888/hello&quot;,rmiTest);
        System.out.println(&quot;server started&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;定义客户端, lookup方法的参数url与服务端bind的必须一致. 接口需要定义为与服务端一致.&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class TestClient {
    public static void main(String[] args) throws RemoteException,  MalformedURLException, NotBoundException {
        IRmiTest rmiTest = (IRmiTest) Naming.lookup(&quot;rmi://localhost:8888/hello&quot;);
        System.out.println(rmiTest.hello());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;rmi实现机制&quot;&gt;RMI实现机制&lt;/h2&gt;
&lt;p&gt;RMI屏蔽了底层复杂的网络调用, 使得远程对象的方法调用变得透明, 就像调用本地方法一样方便.&lt;br/&gt;下面深入探究下jdk中rmi的实现原理, 看看底层是如何实现远程调用的.&lt;br/&gt;首先, 需要了解下比较重要的两个角色stub和skeleton, 这两个角色封装了与网络相关的代码. 原始的交互式这样的,客户端--网络--服务器--具体服务. 有了这两个角色之后的模型变为: 客户端--stub--网络--skeleton--服务器--服务.可以参考的图&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_remote_method_invocation&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面来看源码...&lt;/p&gt;
&lt;h3 id=&quot;一.实例化registryimpl初始化&quot;&gt;一.实例化RegistryImpl,初始化&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LocateRegistry.createRegistry(8888);&lt;/code&gt;这句代码启动了一个注册器(其中有个Map对象来存储名称和服务的映射,这个后面再细看)&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static Registry createRegistry(int port) throws RemoteException {
    return new RegistryImpl(port);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个方法实例化了一个&lt;code&gt;RegistryImpl&lt;/code&gt;的实例,&lt;code&gt;RegistryImpl&lt;/code&gt;实现了&lt;code&gt;Registry&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public RegistryImpl(final int var1) throws RemoteException {
    if(var1 == 1099 &amp;amp;&amp;amp; System.getSecurityManager() != null) {
        try {
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Void run() throws RemoteException {
                    LiveRef var1x = new LiveRef(RegistryImpl.id, var1);
                    RegistryImpl.this.setup(new UnicastServerRef(var1x));
                    return null;
                }
            }, (AccessControlContext)null, new Permission[]{new SocketPermission(&quot;localhost:&quot; + var1, &quot;listen,accept&quot;)});
        } catch (PrivilegedActionException var3) {
            throw (RemoteException)var3.getException();
        }
    } else {
        LiveRef var2 = new LiveRef(id, var1);
        this.setup(new UnicastServerRef(var2));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;两个分支最终都调用了&lt;code&gt;setup()&lt;/code&gt;方法, 主要关注该方法.if分支中var1=1099是指默认端口并且存在安全管理器的时候不做校验, 这是为了性能考虑.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private void setup(UnicastServerRef var1) throws RemoteException {
    this.ref = var1; // UnicastServerRef继承了RemoteRef,this.ref的类型就是RemoteRef
    var1.exportObject(this, (Object)null, true); 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;setup方法的参数是包装后的&lt;code&gt;UnicastServerRef&lt;/code&gt;对象, &lt;code&gt;UnicastServerRef&lt;/code&gt;继承了&lt;code&gt;RemoteRef&lt;/code&gt;因此可以赋值给ref变量. 该方法将调用委托给&lt;code&gt;UnicastServerRef&lt;/code&gt;的方法&lt;code&gt;exportObject()&lt;/code&gt;&lt;br/&gt;如果是拿文章开头的代码进行调试, 会发现这个方法会走两次, 除了&lt;code&gt;RegistryImpl&lt;/code&gt;, 还有一次是&lt;code&gt;RmiTest&lt;/code&gt;也会走这个方法.不同的是&lt;code&gt;RegistryImpl&lt;/code&gt;会走下面代码中的&lt;code&gt;if(var5 instanceof RemoteStub)&lt;/code&gt;分支语句, 这个语句最终将生成一个Skeleton实例并设置给当前实例的域变量skel, 不过自jdk1.2之后skeleton就没什么用了.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public Remote exportObject(Remote var1, Object var2, boolean var3) throws RemoteException {
    Class var4 = var1.getClass();

    Remote var5;
    try {
        var5 = Util.createProxy(var4, this.getClientRef(), this.forceStubUse);
    } catch (IllegalArgumentException var7) {
        throw new ExportException(&quot;remote object implements illegal remote interface&quot;, var7);
    }

    if(var5 instanceof RemoteStub) {
        // 生成Skeleton实例并设置给当前实例的域变量skel
        this.setSkeleton(var1);
    }

    Target var6 = new Target(var1, this, var5, this.ref.getObjID(), var3);
    this.ref.exportObject(var6);  //ref是实例化UnicastServerRef的时候传入的
    this.hashToMethod_Map = (Map)hashToMethod_Maps.get(var4);
    return var5;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面方法首先根据&lt;code&gt;Remote&lt;/code&gt;的参数var1创建了一个代理对象var5, var1是&lt;code&gt;RegistryImpl&lt;/code&gt;类的实例. 然后实例化一个&lt;code&gt;Target&lt;/code&gt;的实例, 从参数可以看到,Target对象包含了几乎之前代码的所有对象.然后将这个对象作为参数,调用&lt;code&gt;LiveRef&lt;/code&gt;实例ref的&lt;code&gt;exportObject()&lt;/code&gt;方法.&lt;/p&gt;
&lt;h3 id=&quot;二.-网络连接和对象传输&quot;&gt;二. 网络连接和对象传输&lt;/h3&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void exportObject(Target var1) throws RemoteException {
    this.ep.exportObject(var1);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接上一步, &lt;code&gt;RemoteRef&lt;/code&gt;的方法最终委托给&lt;code&gt;TCPEndpoint&lt;/code&gt;的同名方法(委托模式), 到此代码将控制权传递给传输层.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    public void exportObject(Target var1) throws RemoteException {
        synchronized(this) {
            this.listen();
            ++this.exportCount;
        }

        boolean var2 = false;
        boolean var12 = false;

        try {
            var12 = true;
            super.exportObject(var1);
            var2 = true;
            var12 = false;
        } finally {
            if (var12) {
                if (!var2) {
                    synchronized(this) {
                        this.decrementExportCount();
                    }
                }

            }
        }

        if (!var2) {
            synchronized(this) {
                this.decrementExportCount();
            }
        }

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个方法实现了网络通信, 首先&lt;code&gt;linsten()&lt;/code&gt;启动了一个&lt;code&gt;ServerSocket&lt;/code&gt;的线程,并开始监听端口. 然后调用父类的方法将&lt;code&gt;Target&lt;/code&gt;对象暴露出去, 此时服务端的初始化就完成了.&lt;/p&gt;
&lt;h3 id=&quot;三.-注册服务&quot;&gt;三. 注册服务&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Naming.bind(&quot;rmi://localhost:8888/hello&quot;,rmiTest);&lt;/code&gt; 完成名称和服务对象的绑定.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static void bind(String name, Remote obj)
    throws AlreadyBoundException,
        java.net.MalformedURLException,
        RemoteException
{
    ParsedNamingURL parsed = parseURL(name);
    Registry registry = getRegistry(parsed);

    if (obj == null)
        throw new NullPointerException(&quot;cannot bind to null&quot;);

    registry.bind(parsed.name, obj);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码&lt;code&gt;Naming&lt;/code&gt;类, 调用的是注册器&lt;code&gt;Registry&lt;/code&gt;的&lt;code&gt;bind()&lt;/code&gt;方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public void bind(String var1, Remote var2) throws RemoteException, AlreadyBoundException, AccessException {
    Hashtable var3 = this.bindings;
    synchronized(this.bindings) {
        Remote var4 = (Remote)this.bindings.get(var1);
        if (var4 != null) {
            throw new AlreadyBoundException(var1);
        } else {
            this.bindings.put(var1, var2);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注册使用的容器是一个&lt;code&gt;HashTable&lt;/code&gt;, 最终服务的名称和服务会被注册到这个map容器中.&lt;/p&gt;
&lt;p&gt;到此为止, 服务端的初始化完成. 首先实例化了一个实现&lt;code&gt;Register&lt;/code&gt;注册器的实例, 通过层层组装, 最终生成一个&lt;code&gt;Target&lt;/code&gt;对象, 其中包含了组装过程中生成的全部状态, 最后调用&lt;code&gt;RemoteRef&lt;/code&gt;的方法将对象转交给传输层对象&lt;code&gt;TCPEndpoint&lt;/code&gt;的实例, 最终由这个对象启动Socket开启通信连接. 注册服务是通过&lt;code&gt;Naming&lt;/code&gt;的方法委托调用&lt;code&gt;Register&lt;/code&gt;注册器的方法实现, 并将结果最终注册到&lt;code&gt;Register&lt;/code&gt;域的map对象中.&lt;/p&gt;
&lt;h3 id=&quot;四.-客户端远程调用&quot;&gt;四. 客户端远程调用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;IRmiTest rmiTest = (IRmiTest) Naming.lookup(&quot;rmi://localhost:8888/hello&quot;);&lt;/code&gt; 客户端通过&lt;code&gt;Naming&lt;/code&gt;的方法获取服务的实例&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static Remote lookup(String name)
    throws NotBoundException,
        java.net.MalformedURLException,
        RemoteException{
    ParsedNamingURL parsed = parseURL(name);
    Registry registry = getRegistry(parsed);

    if (parsed.name == null)
        return registry;
    return registry.lookup(parsed.name);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;与服务端注册时候使用&lt;code&gt;Naming.bind()&lt;/code&gt;方法一样, 这里&lt;code&gt;lookup()&lt;/code&gt;最终也会委托给&lt;code&gt;Registry&lt;/code&gt;的实例. 这个实例的实现不是用的服务端的&lt;code&gt;Register_Impl&lt;/code&gt;, 而是使用&lt;code&gt;RegistryImpl_Stub&lt;/code&gt;, 下面代码是&lt;code&gt;lookup()&lt;/code&gt;的实现, 可以看出这里封装了网络io的一些逻辑.&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public Remote lookup(String var1) throws AccessException, NotBoundException, RemoteException {
    try {
        RemoteCall var2 = this.ref.newCall(this, operations, 2, 4905912898345647071L);

        try {
            ObjectOutput var3 = var2.getOutputStream();
            var3.writeObject(var1);
        } catch (IOException var17) {
            throw new MarshalException(&quot;error marshalling arguments&quot;, var17);
        }

        this.ref.invoke(var2);

        Remote var22;
        try {
            ObjectInput var4 = var2.getInputStream();
            var22 = (Remote)var4.readObject();
        } catch (IOException var14) {
            throw new UnmarshalException(&quot;error unmarshalling return&quot;, var14);
        } catch (ClassNotFoundException var15) {
            throw new UnmarshalException(&quot;error unmarshalling return&quot;, var15);
        } finally {
            this.ref.done(var2);
        }

        return var22;
    } catch (RuntimeException var18) {
        throw var18;
    } catch (RemoteException var19) {
        throw var19;
    } catch (NotBoundException var20) {
        throw var20;
    } catch (Exception var21) {
        throw new UnexpectedException(&quot;undeclared checked exception&quot;, var21);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此, 服务端和客户端的连接完成, 可以开始通信了.&lt;/p&gt;
&lt;p&gt;RMI自JDK1.1就已经提供了, 它提供了Java语言自己的RPC调用方式, 虽然有些老旧, 但依然经典. 目前有很多跨语言的技术或框架, 如后来的WebService, 再到目前的netty,shrift等基本已经取代了这种原始的调用方式, 他们是非阻塞的,且还能跨语言调用. 但熟悉RMI的实现方式对了解分布式系统的通信的实现原理有很大帮助.&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 14:41:00 +0000</pubDate>
<dc:creator>罪恶斯巴克</dc:creator>
<og:description>RPC(Remote Procedure Call)协议 RPC协议是一种通过网络从远程计算机上请求服务, 而不需要了解底层网络技术的协议, 在OSI模型中处在应用层和网络层. 作为一个规范, 使用R</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/walkinhalo/p/9678139.html</dc:identifier>
</item>
<item>
<title>ES6语法的学习与实践 - Peerless1029</title>
<link>http://www.cnblogs.com/peerless1029/p/9678130.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/peerless1029/p/9678130.html</guid>
<description>&lt;p&gt;　　ES6是JavaScript语言的新一代标准，是ECMAScript的第六个版本，加入了很多新的功能和语法，在很多框架，如在使用Vue,React等框架的项目中一般都采用ES6语法来编写的，下面对经常用到的ES6语法做简要的介绍。&lt;/p&gt;
&lt;p&gt;　　1.let,const&lt;/p&gt;
&lt;p&gt;　　let和const是ES6中新增的两个关键字，用来生命变量，let和const都是块级作用域。let声明的变量只在let命令所在的代码块内有效。const声明一个只读变量，一旦声明，常量的值就不可更改。与var声明的变量不同，var声明的是函数作用域，且存在变量提升。例如：　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; let示例&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;var&lt;/span&gt; a=1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;   let b=2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; a;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; b;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ReferenceError:b is not undefined.&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; const示例&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; const c=3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; c=4; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  Assignment to constant variable.&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; var 示例&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; console.log(d); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; d=3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; console.log(d); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;声明提前后浏览器执行顺序为：
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;&lt;span&gt; d;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; console.log(d); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; undefined&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; d=3&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; console.log(d); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2.箭头函数&lt;/p&gt;
&lt;p&gt;　　ES6允许使用“箭头”（=&amp;gt;）定义函数。这种函数创建的函数不需要函数关键字，并且还可以省略return关键字。与此同时，箭头函数内的this指向函数定义时所在的上下文对象。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; foo1=(a,b)=&amp;gt;a+1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等价于 &lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; foo1=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(a,b){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; a+&lt;span&gt;b;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在return只有一个表达式时，使用箭头函数可以省略return和{}&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; name='jhon'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; obj=&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   name:&quot;tom&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   sayName1:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     setTimeout(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;       console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     },500&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;  sayName2:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     setTimeout(()=&amp;gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;       console.log(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     },500&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; obj.sayName1(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; jhon&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; obj.sayName2(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一个this值window对象，第二个方法里面指向当前的obj对象，&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　小结：1.使用箭头函数可以简写代码量；2.可以改变this的指向，可以替代apply,call,bind一些方法。&lt;/p&gt;
&lt;p&gt;　　3.模板字符串&lt;/p&gt;
&lt;p&gt;　　相信许多小伙伴在js里面用‘’，+拼接字符串很让人头疼了，如果字符串量比较少还好，一旦比较多，最后拼的自己都不认识了，而且严重影响代码的整洁优雅度。ES6的反引号（``）标识字符串，除了可以当做普通字符串使用外，还可以用来定义多行字符串，以及在字符串内嵌入变零，功能很强大。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 普通字符串&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;`Hello World`
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 多行字符串&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;`Hello World，
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   Hello JavaScript!
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;`
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符串内嵌入变量&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; let name='Peer'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; `Hello,${name}`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4.解构赋值&lt;/p&gt;
&lt;p&gt;　　ES6允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构。例如：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数组解构&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; [a,b,c]=[1,2,3&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; a &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; b &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; c &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象解构&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; let name='Peer'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; let age=23&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; let person=&lt;span&gt;{name,age};
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; person &lt;span&gt;//&lt;/span&gt;&lt;span&gt;{name:&quot;Peer&quot;,age:23}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 函数的参数也可以使用解构赋值，例如：&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数组的参数解构&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum([x,y]){
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; x+&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; sum([1,2]); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象的参数解构&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum2({x,y}){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; x+&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; sum2({x:5,y:6}); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 解构同样适用于嵌套的数组与对象&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 嵌套数组解构&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; let [a,[b],c]=[1,[2],3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; a; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; b; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; c: &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 嵌套对象解构&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; let {person:{name,age},foo}={person:{name:&quot;Peer&quot;,age:23},foo:&quot;foo&quot;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; name;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;Peer&quot;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; age;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; foo; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;foo&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　小结：对象和数组的解构只需和声明好的对象数组形式保持一致即可，在获取对象里面的属性值还是很方便的，在Vue，React等框架的开发中也用的比较多，如:import { a , b , c } from 'component',所以不难理解这段代码，就是把component这个模块里面的啊，a,b,c属性对应的值取出来再分别赋值给a,b,c变量，确实大大简化了代码，提高了开发效率。&lt;/p&gt;
&lt;p&gt;5.rest参数&lt;/p&gt;
&lt;p&gt;　　rest打开软件翻译为：休息; 剩余部分; 支持物; 宁静，安宁。ES6引入rest参数（形式为...变零名）用于获取多数的多余参数，以替代arguments对象的使用。rest参数是一个数组，数组中的元素是多余的参数。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; printName(a,...names){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;  console.log(a);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;  console.log(names)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; printName(&quot;Peer&quot;,&quot;jhon&quot;,&quot;toom&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Peer&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;[&quot;jhon&quot;, &quot;toom&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.扩展运算符&lt;/p&gt;
&lt;p&gt;　　扩展运算符是三个点（...）,它将一个数组转为用逗号分隔的参数序列，类似于rest参数的逆运算。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum(a,b,c){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt; a+b+&lt;span&gt;c;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; sum(...[1,2,3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.import ,export&lt;/p&gt;
&lt;p&gt;　　ES6实现了自己的模块化表标准，在语言层面上实现了模块化，它逐渐取代了CommonJS和AMD规范。ES6的模块功能主要有两个关键字构成：export和import。export用于规定模块对外暴露的接口，import用于引入其他模块提供的接口。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a.js&lt;/span&gt;
const a=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'this is a.js'&lt;span&gt;
}
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; b.js&lt;/span&gt;
const b=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'this is b.js'&lt;span&gt;
}
export {b}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; c.js&lt;/span&gt;
import a from './a'&lt;span&gt;;
import {b} from &lt;/span&gt;'./b'&lt;span&gt;;
console.log(a,b); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'this is a.js', 'this is b.js'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　小结：ES6的模块化解决了JavaScript没有模块化系统的缺陷，同时也使得各个模块相互独立，有独立的作用域。&lt;/p&gt;
&lt;p&gt;8.Class&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义一个类&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;class Person{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;  constructor(name,age){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.name=&lt;span&gt;name;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.age=&lt;span&gt;age;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  getName(){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; person=&lt;span&gt;new&lt;/span&gt; Person(&quot;Peer&quot;,23&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通过extends 关键字实现继承&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;class Man extends Person{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  constructor(anme,age){
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    super(name,age)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  getGender(){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; 'male'
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; man=&lt;span&gt;new&lt;/span&gt; Man(&quot;Peer&quot;,23&lt;span&gt;)；&lt;br/&gt;23 man.getName(); //Peer&lt;br/&gt;&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; console.dir(man);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1103967/201809/1103967-20180919221404440-969472432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从打印man对象的结构来看，getGender是Man原型的方法，getName是Man继承Person的构造方法，man.getName()方法首先再man.__proto__的原型上查找，如果没有就在man.__proto__.proto__上查找，于是一级一级就构成了作用域链。&lt;/p&gt;
&lt;p&gt;话说好记性不如烂笔头，书写文章也是自我反思与总结的过程。以上就是个人在项目开发中用的比较多的地方分享给大家，不足之处，多多指正。&lt;/p&gt;
&lt;p&gt;参考书籍：《React进阶之路》，《深入浅出Webpack》&lt;/p&gt;



</description>
<pubDate>Wed, 19 Sep 2018 14:39:00 +0000</pubDate>
<dc:creator>Peerless1029</dc:creator>
<og:description>ES6是JavaScript语言的新一代标准，是ECMAScript的第六个版本，加入了很多新的功能和语法，在很多框架，如在使用Vue,React等框架的项目中一般都采用ES6语法来编写的，下面对经常</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/peerless1029/p/9678130.html</dc:identifier>
</item>
<item>
<title>浅谈final修饰的变量 - 养码青年</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9678123.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9678123.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;一直大概的知道final关键字的作用，但是自己实际工作中却很少用，除非在声明一些常量值的时候，今天忽然自己在项目中用一个map进行存储一些值。一开始我只是用private修饰的，心里想的是如果final修饰的话，应该不能修改了。毕竟被final修饰的变量不可变。今天回家后，做了下面的尝试，彻底暴露出自己基础的不扎实。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;final的作用&quot;&gt;final的作用&lt;/h3&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;被final修饰的类不可以被继承&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;被final修饰的方法不可以被重写&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;被final修饰的变量不可变&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;实战演示&quot;&gt;实战演示&lt;/h3&gt;
&lt;p&gt;1、首先看下面代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class FinalDemo {
    private static final Map&amp;lt;String, Object&amp;gt; NAME = new HashMap&amp;lt;&amp;gt;(16);
    private static final List&amp;lt;String&amp;gt; LIST = new ArrayList&amp;lt;&amp;gt;(10);
    private static final String[] TYPE = new String[15];
    private static final StringBuilder SB = new StringBuilder(&quot;22&quot;);
    private static final StringBuffer SBU = new StringBuffer(&quot;22&quot;);
    private static final String S = &quot;44&quot;;
    private static final int num = 44;
    private static final String S1 = new String();



    public void setName() {
        NAME.put(&quot;1&quot;, &quot;maomao&quot;);
        LIST.add(&quot;11&quot;);
        TYPE[0] = &quot;1&quot;;
        SB.append(&quot;12&quot;);
        SBU.append(&quot;32&quot;);
        System.out.println(NAME);
        System.out.println(LIST);
        System.out.println(Arrays.asList(TYPE));
        System.out.println(SB.toString());
        System.out.println(SBU.toString());
    }

    public static void main(String[] args) {
        FinalDemo finalDemo = new FinalDemo();
        finalDemo.setName();
    }


}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2、运行结果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{1=maomao}
[11]
[1, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
2212
2232
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3、由此可见：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用了map、list、数组、StringBuilder 、StringBuffer .它们的内容是可以修改的。&lt;/li&gt;
&lt;li&gt;String和基本数据类型修饰的变量。同样final表示地址不能修改，但是地址的存储跟常量的值有关，给他重新赋值会指向另外一个对象，地址就改变了。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;被final修饰的变量，不可变的是&lt;strong&gt;变量的引用&lt;/strong&gt;，而不是变量的内容&lt;/p&gt;
&lt;p&gt;当然，final还有其他作用，比如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;被final修饰的常量，在编译阶段会存入调用类的常量池中&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这一块暂时不先探讨，现在自己水平还没到。还需要继续努力。&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 14:38:00 +0000</pubDate>
<dc:creator>养码青年</dc:creator>
<og:description>浅谈final修饰的变量</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9678123.html</dc:identifier>
</item>
<item>
<title>基于.net core webapi和mongodb的日志系统 - 去海边生活</title>
<link>http://www.cnblogs.com/betterlife/p/9676033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/betterlife/p/9676033.html</guid>
<description>&lt;p&gt;开发环境vs2017,数据写入到mongodb。思路就是1.提供接口写入日志，2.基于接口封装类库。3.引入类库使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要写它&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多开源项目像nlog、log4net、elk、exceptionless等都挺好的。就是除了引入所需类库，还要在项目中添加配置，不喜欢。elk在分布式海量数据收集和检索方面可能更能发挥它的优势，单纯记日志也可以，exceptionless就是基于elk的。就想着写一个简单易用的、可以发邮件报警的，直接引入类库就能用的一个记日志工具，所有的配置信息和入库都交给web api。这是当时问的问题，https://q.cnblogs.com/q/109489/。干脆就实现了先&lt;/p&gt;
&lt;p&gt;接下里的代码可能有很多可以优化的地方，如果有些地方觉得不妥或者可以用更好的方式实现或组织代码，请告诉说，我改。另外实现完的接口没有加访问限制，先默认内网使用，当然有热心网友给出实现的话就更好了，像ip限制或者签名等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、实现Web Api&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; 新建.net core web api项目 【LogWebApi】&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为要发邮件和写入mongodb，先改配置文件appsettings.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
{
  &quot;ConnectionStrings&quot;: {
    &quot;ConnectionString&quot;: &quot;mongodb://yourmongoserver&quot;,
    &quot;Database&quot;: &quot;logdb&quot;,
    &quot;LogCollection&quot;: &quot;logdata&quot;
  },
  &quot;AllowedHosts&quot;: &quot;*&quot;,
  &quot;AppSettings&quot;: {
    &quot;SendMailInfo&quot;: {
      &quot;SMTPServerName&quot;: &quot;smtp.qiye.163.com&quot;,
      &quot;SendEmailAdress&quot;: &quot;发送人邮箱&quot;,
      &quot;SendEmailPwd&quot;: &quot;&quot;,
      &quot;SiteName&quot;: &quot;邮件主题&quot;,
      &quot;SendEmailPort&quot;: &quot;123&quot;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;实现依赖注入获取配置文件信息&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;创建目录结构如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919153536967-1336343169.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;AppSettings类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8507c80f-ea46-4b10-bad7-6e374e3f52bb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8507c80f-ea46-4b10-bad7-6e374e3f52bb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8507c80f-ea46-4b10-bad7-6e374e3f52bb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AppSettings
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SendMailInfo SendMailInfo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SendMailInfo
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SMTPServerName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SendEmailAdress { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SendEmailPwd { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SiteName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SendEmailPort { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;DBSettings类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_02697d33-de1e-438e-a908-414036b32e0a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_02697d33-de1e-438e-a908-414036b32e0a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_02697d33-de1e-438e-a908-414036b32e0a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 数据库配置信息
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DBSettings
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; mongodb connectionstring
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConnectionString { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; mongodb database
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Database { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志collection
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogCollection { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 接下来Here is how we modify Startup.cs to inject Settings in the Options accessor model:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8a96d4d5-b8e7-428e-81f9-ae969c8eb9c8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8a96d4d5-b8e7-428e-81f9-ae969c8eb9c8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8a96d4d5-b8e7-428e-81f9-ae969c8eb9c8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {            
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            services.Configure&lt;/span&gt;&amp;lt;DBSettings&amp;gt;(Configuration.GetSection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConnectionStrings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库连接信息&lt;/span&gt;
            services.Configure&amp;lt;AppSettings&amp;gt;(Configuration.GetSection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppSettings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他配置信息            &lt;/span&gt;
&lt;span&gt;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在项目中将通过IOptions 接口来获取配置信息，后面看代码吧&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
IOptions&amp;lt;AppSettings&amp;gt;&lt;span&gt;
IOptions&lt;/span&gt;&amp;lt;DBSettings&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置文件信息获取算是准备完了&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建日志信息Model&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在Model文件夹下创建类LogEventData，也就是存到mongodb的信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_5dbea430-9234-468e-8a62-3608941b66a6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5dbea430-9234-468e-8a62-3608941b66a6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5dbea430-9234-468e-8a62-3608941b66a6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogEventData
    {
        [BsonId]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ObjectId Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 时间
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        [BsonDateTimeOptions(Representation = BsonType.DateTime, Kind =&lt;span&gt; DateTimeKind.Local)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime Date { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 错误级别
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Level { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志来源
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogSource { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 类名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ClassName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 方法名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MethodName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 完整信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FullInfo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 行号
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LineNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 文件名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FileName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; ip
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; IP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否发送邮件,不为空则发送邮件，多个接收人用英文逗号隔开
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;        [JsonIgnore]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Emails { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ToString()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JsonConvert.SerializeObject(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;定义database Context&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;站点根目录新建文件夹Context和类，别忘了引用 MongoDB.Driver  nuget包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919161111480-1002467753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8e5fb65f-f9b6-45b8-8258-f3d8084adb26&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8e5fb65f-f9b6-45b8-8258-f3d8084adb26&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8e5fb65f-f9b6-45b8-8258-f3d8084adb26&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MongoContext
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; IMongoDatabase _database = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _logCollection;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MongoContext(IOptions&amp;lt;DBSettings&amp;gt;&lt;span&gt; settings)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MongoClient(settings.Value.ConnectionString);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (client != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                _database &lt;/span&gt;=&lt;span&gt; client.GetDatabase(settings.Value.Database);
            _logCollection &lt;/span&gt;=&lt;span&gt; settings.Value.LogCollection;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IMongoCollection&amp;lt;LogEventData&amp;gt;&lt;span&gt; LogEventDatas
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _database.GetCollection&amp;lt;LogEventData&amp;gt;&lt;span&gt;(_logCollection);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;添加Repository&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;别纠结为什么叫这个名了，就是数据访问类，像是常用的DAL，创建目录如下，之后可以通过依赖注入来访问具体实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919162605014-1431221088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IRepository类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_705243c8-cdad-4d4b-8da6-68f361130671&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_705243c8-cdad-4d4b-8da6-68f361130671&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_705243c8-cdad-4d4b-8da6-68f361130671&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; IRepository&amp;lt;T&amp;gt; &lt;span&gt;where&lt;/span&gt; T:&lt;span&gt;class&lt;/span&gt;&lt;span&gt;
    {
        Task&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;&lt;span&gt; GetAll();
        Task&lt;/span&gt;&amp;lt;T&amp;gt; Get(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; id);
        Task Add(T item);
        Task&lt;/span&gt;&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Remove(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; id);
        Task&lt;/span&gt;&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Update(&lt;span&gt;string&lt;/span&gt; id, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; body);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;LogRepository类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_5dcd2d27-7f81-4f83-9c3d-74e9e0707e2b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5dcd2d27-7f81-4f83-9c3d-74e9e0707e2b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5dcd2d27-7f81-4f83-9c3d-74e9e0707e2b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LogRepository : IRepository&amp;lt;LogEventData&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; MongoContext _context = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; LogRepository(IOptions&amp;lt;DBSettings&amp;gt;&lt;span&gt; settings)
        {
            _context &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MongoContext(settings);
        }


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Add(LogEventData item)
        {
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.LogEventDatas.InsertOneAsync(item);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt;&lt;span&gt; GetList(QueryLogModel model)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; builder = Builders&amp;lt;LogEventData&amp;gt;&lt;span&gt;.Filter;
            FilterDefinition&lt;/span&gt;&amp;lt;LogEventData&amp;gt; filter =&lt;span&gt; builder.Empty;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(model.Level))
            {
                filter &lt;/span&gt;= builder.Eq(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Level&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model.Level);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(model.LogSource))
            {
                filter &lt;/span&gt;= filter &amp;amp; builder.Eq(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogSource&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model.LogSource);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(model.Message))
            {
                filter &lt;/span&gt;= filter &amp;amp; builder.Regex(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; BsonRegularExpression(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Regex(model.Message)));
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (DateTime.MinValue !=&lt;span&gt; model.StartTime)
            {
                filter &lt;/span&gt;= filter &amp;amp; builder.Gte(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model.StartTime);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(DateTime.MinValue !=&lt;span&gt; model.EndTime)
            {
                filter &lt;/span&gt;= filter &amp;amp; builder.Lte(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, model.EndTime);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _context.LogEventDatas.Find(filter)
                 .SortByDescending(log &lt;/span&gt;=&amp;gt;&lt;span&gt; log.Date)
                 .Skip((model.PageIndex &lt;/span&gt;- &lt;span&gt;1&lt;/span&gt;) *&lt;span&gt; model.PageSize)
                 .Limit(model.PageSize).ToListAsync();
        }
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 未实现方法
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;LogEventData&amp;gt; Get(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt;&lt;span&gt; GetAll()
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Remove(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; Update(&lt;span&gt;string&lt;/span&gt; id, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; body)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        } 
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 为了通过DI model来访问LogRepository，修改Startup.cs ，ConfigureServices添加如下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
services.AddTransient&amp;lt;IRepository&amp;lt;LogEventData&amp;gt;, LogRepository&amp;gt;();//数据访问
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 到这基本的数据写入和查询算是写完了，下面来实现Controller&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建LogController&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919164153001-1121233476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_9a7f5f69-c08c-4ac8-a9de-382718ebb7fc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9a7f5f69-c08c-4ac8-a9de-382718ebb7fc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9a7f5f69-c08c-4ac8-a9de-382718ebb7fc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
[Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    [ApiController]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogController : ControllerBase
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; LogRepository _logRepository;
        IOptions&lt;/span&gt;&amp;lt;AppSettings&amp;gt;&lt;span&gt; _appsettings;        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; LogController(IRepository&amp;lt;LogEventData&amp;gt; logRepository,IOptions&amp;lt;AppSettings&amp;gt;&lt;span&gt; appsettings)
        {
            _logRepository &lt;/span&gt;=&lt;span&gt; (LogRepository)logRepository;
            _appsettings &lt;/span&gt;=&lt;span&gt; appsettings;
        }

        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Trace([FromBody] LogEventData value)
        {
            Add(value);
        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Debug([FromBody] LogEventData value)
        {
            Add(value);

        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Info([FromBody] LogEventData value)
        {
            Add(value);
        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Warn([FromBody] LogEventData value)
        {
            Add(value);
        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Error([FromBody] LogEventData value)
        {
            Add(value);
        }
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Fatal([FromBody] LogEventData value)
        {
            Add(value);
        }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Add(LogEventData data)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _logRepository.Add(data);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(data.Emails))
                {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; EmailHelpers(_appsettings).SendMailAsync(data.Emails, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;监测邮件&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, data.ToString());
                }
            }
        }

        [HttpGet(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getlist&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ResponseModel&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; GetList([FromQuery] QueryLogModel model)
        {
            ResponseModel&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt; resp = &lt;span&gt;new&lt;/span&gt; ResponseModel&amp;lt;IEnumerable&amp;lt;LogEventData&amp;gt;&amp;gt;&lt;span&gt;();
            resp.Data &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _logRepository.GetList(model);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resp;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;控制器里整个逻辑很简单，除了向外提供不同日志级别的写入接口，也实现了日志查询接口给日志查看站点用，基本上够用了。到这编译的话会报错，有一些类还没加上，稍后加上。在Add方法内部，用到了new EmailHelpers。讲道理按.net core 对依赖注入的使用 ，这个 new是不应该出现在这的，就先这么着吧，下面补类：&lt;/p&gt;
&lt;p&gt;先创建Model文件夹下的两个类，很简单就不解释了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919165246984-1420520706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;QueryLogModel类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ba539ee6-18c6-41eb-98bb-a53ec6318429&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ba539ee6-18c6-41eb-98bb-a53ec6318429&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ba539ee6-18c6-41eb-98bb-a53ec6318429&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueryLogModel
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; _pageindex = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; _pagesize = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; PageIndex
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _pageindex; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { _pageindex =&lt;span&gt; value; }
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; PageSize
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _pagesize; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { _pagesize =&lt;span&gt; value; }
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Level { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogSource { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime StartTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime EndTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;ResponseModel类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_148dd8d0-31e4-4d39-9a5a-3d95edd7b6f8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_148dd8d0-31e4-4d39-9a5a-3d95edd7b6f8&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_148dd8d0-31e4-4d39-9a5a-3d95edd7b6f8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ResponseModel&amp;lt;T&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; HttpStatusCode _resultCode =&lt;span&gt; HttpStatusCode.OK;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; _message = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;        
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; T _data = &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; HttpStatusCode ResultCode
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._resultCode; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { &lt;span&gt;this&lt;/span&gt;._resultCode =&lt;span&gt; value; }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 结果说明
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Message
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._message; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { &lt;span&gt;this&lt;/span&gt;._message =&lt;span&gt; value; }
        }        
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 返回的数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; T Data
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._data; }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { &lt;span&gt;this&lt;/span&gt;._data =&lt;span&gt; value; }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 创建EmailHelpers类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919165724474-827162712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_d2e1413e-5009-46a9-8f10-caec19768dfe&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d2e1413e-5009-46a9-8f10-caec19768dfe&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d2e1413e-5009-46a9-8f10-caec19768dfe&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EmailHelpers
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; SendMailInfo _mailinfo;
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; EmailHelpers(IOptions&amp;lt;AppSettings&amp;gt;&lt;span&gt; appsettings)
        {
            _mailinfo &lt;/span&gt;=&lt;span&gt; appsettings.Value.SendMailInfo;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 异步发送邮件
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;email地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;subject&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;邮件标题&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;邮件内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendMailAsync(&lt;span&gt;string&lt;/span&gt; emails, &lt;span&gt;string&lt;/span&gt; subject, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; content)
        {
            Task.Factory.StartNew(() &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                SendEmail(emails, subject, content);
            });
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 邮件发送方法
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;email地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;subject&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;邮件标题&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;邮件内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SendEmail(&lt;span&gt;string&lt;/span&gt; emails, &lt;span&gt;string&lt;/span&gt; subject, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; content)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;[] emailArray = emails.Split(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[] { &lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; }, StringSplitOptions.RemoveEmptyEntries);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; fromSMTP = _mailinfo.SMTPServerName;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;邮件服务器&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; fromEmail = _mailinfo.SendEmailAdress;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送方邮件地址&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; fromEmailPwd = _mailinfo.SendEmailPwd;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送方邮件地址密码&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; fromEmailName = _mailinfo.SiteName;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送方称呼&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个MailMessage对象&lt;/span&gt;
                MailMessage aMessage = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MailMessage();
                aMessage.From &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MailAddress(fromEmail, fromEmailName);
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; emailArray)
                {
                    aMessage.To.Add(item);
                }
                aMessage.Subject &lt;/span&gt;=&lt;span&gt; subject;
                aMessage.Body &lt;/span&gt;=&lt;span&gt; content;
                System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
                aMessage.BodyEncoding &lt;/span&gt;= Encoding.GetEncoding(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                aMessage.IsBodyHtml &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                aMessage.Priority &lt;/span&gt;=&lt;span&gt; MailPriority.High;                
                aMessage.ReplyToList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MailAddress(fromEmail, fromEmailName));
                SmtpClient smtp &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmtpClient();

                smtp.Host &lt;/span&gt;=&lt;span&gt; fromSMTP;
                smtp.Timeout &lt;/span&gt;= &lt;span&gt;20000&lt;/span&gt;&lt;span&gt;;
                smtp.UseDefaultCredentials &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                smtp.EnableSsl &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                smtp.DeliveryMethod &lt;/span&gt;=&lt;span&gt; SmtpDeliveryMethod.Network;
                smtp.Credentials &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; NetworkCredential(fromEmail, fromEmailPwd); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发邮件的EMIAL和密码&lt;/span&gt;
                smtp.Port = &lt;span&gt;int&lt;/span&gt;&lt;span&gt;.Parse(_mailinfo.SendEmailPort);                
                smtp.Send(aMessage);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;到这接口基本上就可以用了。&lt;/p&gt;
&lt;p&gt;但是再加三个东西&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 添加全局异常捕获服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919171820883-1418685616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ExceptionMiddlewareExtensions类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_d20ae6fc-c41f-48d3-9ff2-de5c0569acde&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d20ae6fc-c41f-48d3-9ff2-de5c0569acde&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d20ae6fc-c41f-48d3-9ff2-de5c0569acde&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 全局异常处理中间件
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExceptionMiddlewareExtensions
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ConfigureExceptionHandler(&lt;span&gt;this&lt;/span&gt; IApplicationBuilder app, IOptions&amp;lt;DBSettings&amp;gt;&lt;span&gt; settings)
        {
            LogRepository _repository &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogRepository(settings);
            app.UseExceptionHandler(appError &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                appError.Run(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt; context =&amp;gt;&lt;span&gt;
                {
                    context.Response.StatusCode &lt;/span&gt;= (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)HttpStatusCode.InternalServerError;
                    context.Response.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; contextFeature = context.Features.Get&amp;lt;IExceptionHandlerFeature&amp;gt;&lt;span&gt;();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (contextFeature != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; _repository.Add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogEventData
                        {
                            Message&lt;/span&gt;=&lt;span&gt; contextFeature.Error.ToString(),
                            Date&lt;/span&gt;=&lt;span&gt;DateTime.Now,
                            Level&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                            LogSource&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogWebApi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        }); 
                        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; context.Response.WriteAsync(context.Response.StatusCode + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-Internal Server Error.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    }
                });
            });
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;修改Startup.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e18ed40d-d0dd-4216-ada4-f5e869df95ab&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e18ed40d-d0dd-4216-ada4-f5e869df95ab&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e18ed40d-d0dd-4216-ada4-f5e869df95ab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env,IOptions&amp;lt;DBSettings&amp;gt;&lt;span&gt; settings)
        {            
            app.ConfigureExceptionHandler(settings);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;添加&lt;a href=&quot;https://msgpack.org/&quot; target=&quot;_blank&quot;&gt;MessagePack&lt;/a&gt;扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;messagepack可以让我们在post数据的时候序列化数据，“压缩”数据传输大小,这个会结合针对接口封装的类库配合使用。&lt;/p&gt;
&lt;p&gt;引用nuget: WebApiContrib.Core.Formatter.MessagePack&lt;/p&gt;
&lt;p&gt;在ConfigureServices添加代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;services.AddMvcCore().AddMessagePackFormatters();
services.AddMvc().AddMessagePackFormatters();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;扩展了&lt;a class=&quot;message&quot; title=&quot;corrected typo and added =&amp;gt; &amp;quot;application/msgpack&amp;quot; media type&quot; href=&quot;https://github.com/WebApiContrib/WebAPIContrib.Core/commit/f0d31ef6a6f4e9a3176586a97fea72b14d5eb5f7&quot; data-pjax=&quot;true&quot;&gt;media type&lt;/a&gt;，用以支持&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;application/x-msgpack&lt;span class=&quot;pl-pds&quot;&gt;&quot;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;application/msgpack&lt;span class=&quot;pl-pds&quot;&gt;&quot;，在接下来封装的类库中会使用&quot;application/x-msgpack&lt;span class=&quot;pl-pds&quot;&gt;&quot;，在web api来引入这个东西就是为了能解析从客户端传过来的数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加Swagger支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pl-s&quot;&gt;引用nuget:Swashbuckle.AspNetCore&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pl-s&quot;&gt;修改ConfigureServices&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
services.AddSwaggerGen(c =&amp;gt;&lt;span&gt;
            {
                c.SwaggerDoc(&quot;v1&quot;, new Info { Title = &quot;My API&quot;, Version = &quot;v1&quot;&lt;span&gt; });
            });&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改Configure&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_9637ab2b-88a9-41f9-b01d-21153c2377bf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9637ab2b-88a9-41f9-b01d-21153c2377bf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9637ab2b-88a9-41f9-b01d-21153c2377bf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable middleware to serve generated Swagger as a JSON endpoint.&lt;/span&gt;
&lt;span&gt;            app.UseSwagger();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; specifying the Swagger JSON endpoint.&lt;/span&gt;
            app.UseSwaggerUI(c =&amp;gt;&lt;span&gt;
            {
                c.SwaggerEndpoint(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/swagger/v1/swagger.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;My API V1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                c.RoutePrefix &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Empty;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在应用的根 (&lt;/span&gt;&lt;span&gt;http://localhost&lt;/span&gt;&lt;span&gt;:&amp;lt;port&amp;gt;/) 处提供 Swagger UI&lt;/span&gt;
            });
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;到这整个web api站点算是写完了，编译不出错就ok了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919175124625-1668291958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;hr/&gt;&lt;p class=&quot;postTitle&quot;&gt;&lt;strong&gt;二、实现类库&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;类库整体目录结构如下&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919213903454-1280239758.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;1.新建类库LogApiHandler&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;2.实现&lt;/p&gt;
&lt;ul&gt;&lt;li class=&quot;postTitle&quot;&gt;创建日志信息类，和WebApi那个对应，LogEventData&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0fb924f3-aa6f-4624-907a-157a25f37c6c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0fb924f3-aa6f-4624-907a-157a25f37c6c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0fb924f3-aa6f-4624-907a-157a25f37c6c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志数据
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; post到日志接口的数据
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogEventData
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 时间
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; DateTime Date { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 错误级别
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Level { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志来源
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogSource { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 类名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ClassName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 方法名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MethodName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 完整信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FullInfo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 行号
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LineNumber { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 文件名
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FileName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; ip
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; IP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 不为空则发送邮件，多个接收人用英文分号 ; 隔开
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Emails { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;创建日志级别类，就是其他开源项目常见的Level&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_1911653e-a40f-4302-b077-25472cf561db&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1911653e-a40f-4302-b077-25472cf561db&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1911653e-a40f-4302-b077-25472cf561db&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogLevel
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Trace log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Trace = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Debug log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Debug = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Info log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Info = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Warn log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Warn = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Error log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Error = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Fatal log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; LogLevel Fatal = &lt;span&gt;new&lt;/span&gt; LogLevel(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; _ordinal;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _name;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Initializes a new instance of &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;LogLevel&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;name&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The log level name.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ordinal&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The log level ordinal number.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; LogLevel(&lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ordinal)
        {
            _name &lt;/span&gt;=&lt;span&gt; name;
            _ordinal &lt;/span&gt;=&lt;span&gt; ordinal;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the name of the log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name =&amp;gt;&lt;span&gt; _name;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the ordinal of the log level.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Ordinal =&amp;gt;&lt;span&gt; _ordinal;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 请求地址
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; LogApi
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (_name)
                {
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:56503/api/log/fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;                        
                    &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Returns the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;T:NLog.LogLevel&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt; that corresponds to the supplied &lt;/span&gt;&lt;span&gt;&amp;lt;see langword=&quot;string&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;levelName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The textual representation of the log level.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;The enumeration value.&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; LogLevel FromString(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; levelName)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(levelName));
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Trace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Trace;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Debug;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Info;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Warn;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Error;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (levelName.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fatal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Fatal;
            }

            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unknown log level: {levelName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;上面代码是NLog Level源码,修改了一下，因为这个项目并不复杂，也不需要读配置。类里面有个LogApi属性会根据级别返回相应的日志接口，生产环境得在部署完WebApi站点以后，将里面的接口信息替换掉然后编译发布再用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建日志追踪信息类，行号、类名、文件等等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;LogEventData类中有几个属性如下图，接下来创建的类就是为了获取它们&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919211738917-643555445.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在项目中创建文件夹Core,结构如下，创建顺序为MethodItem、StackFrameItem、LocationInfo，它们层层相扣，最终由LocationInfo提供所需信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919211949080-1307514662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MethodItem类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_bd616671-b3ad-4c8d-b271-7c8e4029db3a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bd616671-b3ad-4c8d-b271-7c8e4029db3a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bd616671-b3ad-4c8d-b271-7c8e4029db3a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MethodItem
    {
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Public Instance Constructors

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructs a method item for an unknown method.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MethodItem()
        {
            m_name &lt;/span&gt;=&lt;span&gt; NA;
            m_parameters &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructs a method item from the name of the method.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;name&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; MethodItem(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
            : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;()
        {
            m_name &lt;/span&gt;=&lt;span&gt; name;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructs a method item from the name of the method and its parameters.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;name&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameters&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; MethodItem(&lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] parameters)
            : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(name)
        {
            m_parameters &lt;/span&gt;=&lt;span&gt; parameters;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; constructs a method item from a method base by determining the method name and its parameters.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;methodBase&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MethodItem(System.Reflection.MethodBase methodBase)
            : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;(methodBase.Name, GetMethodParameterNames(methodBase))
        {
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] GetMethodParameterNames(System.Reflection.MethodBase methodBase)
        {
            ArrayList methodParameterNames &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                System.Reflection.ParameterInfo[] methodBaseGetParameters &lt;/span&gt;=&lt;span&gt; methodBase.GetParameters();

                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; methodBaseGetParametersCount = methodBaseGetParameters.GetUpperBound(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt;= methodBaseGetParametersCount; i++&lt;span&gt;)
                {
                    methodParameterNames.Add(methodBaseGetParameters[i].ParameterType &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; methodBaseGetParameters[i].Name);
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LogLog.Error(declaringType, &quot;An exception ocurred while retreiving method parameters.&quot;, ex);&lt;/span&gt;
&lt;span&gt;            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;[])methodParameterNames.ToArray(&lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;));
        }

        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Public Instance Properties

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The method name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Name
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_name; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method parameters of the caller making
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; the logging request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The method parameters of the caller making
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; the logging request
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method parameters of the caller making
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; the logging request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] Parameters
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_parameters; }
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; Private Instance Fields

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_name;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] m_parameters;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; Private Static Fields

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified type of the StackFrameItem class.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Used by the internal logger to record the Type of the
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; log message.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type declaringType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(MethodItem);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; When location information is not available the constant
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; is returned. Current value of this string
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; constant is &lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; NA = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Private Static Fields&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;StackFrameItem类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_ee1e5376-65e2-45e3-846a-75d0679820f7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ee1e5376-65e2-45e3-846a-75d0679820f7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ee1e5376-65e2-45e3-846a-75d0679820f7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StackFrameItem
    {
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Public Instance Constructors

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; returns a stack frame item from a stack frame. This 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;frame&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; StackFrameItem(StackFrame frame)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; set default values&lt;/span&gt;
            m_lineNumber =&lt;span&gt; NA;
            m_fileName &lt;/span&gt;=&lt;span&gt; NA;
            m_method &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MethodItem();
            m_className &lt;/span&gt;=&lt;span&gt; NA;

            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; get frame values&lt;/span&gt;
                m_lineNumber =&lt;span&gt; frame.GetFileLineNumber().ToString(System.Globalization.NumberFormatInfo.InvariantInfo);
                m_fileName &lt;/span&gt;=&lt;span&gt; frame.GetFileName();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; get method values&lt;/span&gt;
                MethodBase method =&lt;span&gt; frame.GetMethod();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method.DeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        m_className &lt;/span&gt;=&lt;span&gt; method.DeclaringType.FullName;
                    m_method &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MethodItem(method);
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {

            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; set full info&lt;/span&gt;
            m_fullInfo = m_className + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_method.Name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_fileName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_lineNumber + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; Public Instance Properties

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ClassName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_className; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FileName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_fileName; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; LineNumber
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_lineNumber; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MethodItem Method
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_method; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets all available caller information
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; All available caller information, in the format
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;fully.qualified.classname.of.caller.methodName(Filename:line)&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets all available caller information, in the format
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;fully.qualified.classname.of.caller.methodName(Filename:line)&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FullInfo
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_fullInfo; }
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Public Instance Properties

        &lt;span&gt;#region&lt;/span&gt; Private Instance Fields

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_lineNumber;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_fileName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_className;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_fullInfo;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; MethodItem m_method;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; Private Static Fields

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified type of the StackFrameItem class.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Used by the internal logger to record the Type of the
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; log message.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type declaringType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(StackFrameItem);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; When location information is not available the constant
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; is returned. Current value of this string
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; constant is &lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; NA = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Private Static Fields
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;LocationInfo类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_3d288c5b-8919-431f-afa0-486738822534&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3d288c5b-8919-431f-afa0-486738822534&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3d288c5b-8919-431f-afa0-486738822534&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LocationInfo
    {
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Public Instance Constructors

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Constructor
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;callerStackBoundaryDeclaringType&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The declaring type of the method that is
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; the stack boundary into the logging system for this call.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Initializes a new instance of the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;LocationInfo&quot; /&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; class based on the current thread.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LocationInfo(Type callerStackBoundaryDeclaringType)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initialize all fields&lt;/span&gt;
            m_className =&lt;span&gt; NA;
            m_fileName &lt;/span&gt;=&lt;span&gt; NA;
            m_lineNumber &lt;/span&gt;=&lt;span&gt; NA;
            m_methodName &lt;/span&gt;=&lt;span&gt; NA;
            m_fullInfo &lt;/span&gt;=&lt;span&gt; NA;

&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; !(NETCF || NETSTANDARD1_3) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; StackTrace isn't fully implemented for NETSTANDARD1_3 &lt;/span&gt;&lt;span&gt;https://github.com/dotnet/corefx/issues/1797&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (callerStackBoundaryDeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    StackTrace st &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; StackTrace(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; frameIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; skip frames not from fqnOfCallingClass&lt;/span&gt;
                    &lt;span&gt;while&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        StackFrame frame &lt;/span&gt;=&lt;span&gt; st.GetFrame(frameIndex);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frame != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; frame.GetMethod().DeclaringType ==&lt;span&gt; callerStackBoundaryDeclaringType)
                        {
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                        frameIndex&lt;/span&gt;++&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; skip frames from fqnOfCallingClass&lt;/span&gt;
                    &lt;span&gt;while&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        StackFrame frame &lt;/span&gt;=&lt;span&gt; st.GetFrame(frameIndex);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frame != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; frame.GetMethod().DeclaringType !=&lt;span&gt; callerStackBoundaryDeclaringType)
                        {
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                        frameIndex&lt;/span&gt;++&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; take into account the frames we skip above&lt;/span&gt;
                        &lt;span&gt;int&lt;/span&gt; adjustedFrameCount = st.FrameCount -&lt;span&gt; frameIndex;
                        ArrayList stackFramesList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList(adjustedFrameCount);
                        m_stackFrames &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StackFrameItem[adjustedFrameCount];
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = frameIndex; i &amp;lt; st.FrameCount; i++&lt;span&gt;)
                        {
                            stackFramesList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StackFrameItem(st.GetFrame(i)));
                        }

                        stackFramesList.CopyTo(m_stackFrames, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; now frameIndex is the first 'user' caller frame&lt;/span&gt;
                        StackFrame locationFrame =&lt;span&gt; st.GetFrame(frameIndex);

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (locationFrame != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        {
                            System.Reflection.MethodBase method &lt;/span&gt;=&lt;span&gt; locationFrame.GetMethod();

                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                            {
                                m_methodName &lt;/span&gt;=&lt;span&gt; method.Name;
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method.DeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                                {
                                    m_className &lt;/span&gt;=&lt;span&gt; method.DeclaringType.FullName;
                                }
                            }
                            m_fileName &lt;/span&gt;=&lt;span&gt; locationFrame.GetFileName();
                            m_lineNumber &lt;/span&gt;=&lt;span&gt; locationFrame.GetFileLineNumber().ToString(System.Globalization.NumberFormatInfo.InvariantInfo);

                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Combine all location info&lt;/span&gt;
                            m_fullInfo = m_className + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_methodName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_fileName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_lineNumber + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        }
                    }
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (System.Security.SecurityException)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This security exception will occur if the caller does not have 
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; some undefined set of SecurityPermission flags.
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LogLog.Debug(declaringType, &quot;Security exception while trying to get caller stack frame. Error Ignored. Location Information Not Available.&quot;);&lt;/span&gt;
&lt;span&gt;                }
            }
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 自定义获取位置信息，异步线程内获取期望值
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;callerStackBoundaryDeclaringType&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;st&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LocationInfo(Type callerStackBoundaryDeclaringType,StackTrace st)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initialize all fields&lt;/span&gt;
            m_className =&lt;span&gt; NA;
            m_fileName &lt;/span&gt;=&lt;span&gt; NA;
            m_lineNumber &lt;/span&gt;=&lt;span&gt; NA;
            m_methodName &lt;/span&gt;=&lt;span&gt; NA;
            m_fullInfo &lt;/span&gt;=&lt;span&gt; NA;

&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; !(NETCF || NETSTANDARD1_3) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; StackTrace isn't fully implemented for NETSTANDARD1_3 &lt;/span&gt;&lt;span&gt;https://github.com/dotnet/corefx/issues/1797&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (callerStackBoundaryDeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;StackTrace st = new StackTrace(true);&lt;/span&gt;
                    &lt;span&gt;int&lt;/span&gt; frameIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; skip frames not from fqnOfCallingClass&lt;/span&gt;
                    &lt;span&gt;while&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        StackFrame frame &lt;/span&gt;=&lt;span&gt; st.GetFrame(frameIndex);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frame != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; frame.GetMethod().DeclaringType ==&lt;span&gt; callerStackBoundaryDeclaringType)
                        {
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                        frameIndex&lt;/span&gt;++&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; skip frames from fqnOfCallingClass&lt;/span&gt;
                    &lt;span&gt;while&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        StackFrame frame &lt;/span&gt;=&lt;span&gt; st.GetFrame(frameIndex);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frame != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; frame.GetMethod().DeclaringType !=&lt;span&gt; callerStackBoundaryDeclaringType)
                        {
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                        frameIndex&lt;/span&gt;++&lt;span&gt;;
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (frameIndex &amp;lt;&lt;span&gt; st.FrameCount)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; take into account the frames we skip above&lt;/span&gt;
                        &lt;span&gt;int&lt;/span&gt; adjustedFrameCount = st.FrameCount -&lt;span&gt; frameIndex;
                        ArrayList stackFramesList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList(adjustedFrameCount);
                        m_stackFrames &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StackFrameItem[adjustedFrameCount];
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = frameIndex; i &amp;lt; st.FrameCount; i++&lt;span&gt;)
                        {
                            stackFramesList.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; StackFrameItem(st.GetFrame(i)));
                        }

                        stackFramesList.CopyTo(m_stackFrames, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; now frameIndex is the first 'user' caller frame&lt;/span&gt;
                        StackFrame locationFrame =&lt;span&gt; st.GetFrame(frameIndex);

                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (locationFrame != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        {
                            System.Reflection.MethodBase method &lt;/span&gt;=&lt;span&gt; locationFrame.GetMethod();

                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                            {
                                m_methodName &lt;/span&gt;=&lt;span&gt; method.Name;
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method.DeclaringType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                                {
                                    m_className &lt;/span&gt;=&lt;span&gt; method.DeclaringType.FullName;
                                }
                            }
                            m_fileName &lt;/span&gt;=&lt;span&gt; locationFrame.GetFileName();
                            m_lineNumber &lt;/span&gt;=&lt;span&gt; locationFrame.GetFileLineNumber().ToString(System.Globalization.NumberFormatInfo.InvariantInfo);

                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Combine all location info&lt;/span&gt;
                            m_fullInfo = m_className + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_methodName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_fileName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_lineNumber + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                        }
                    }
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (System.Security.SecurityException)
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This security exception will occur if the caller does not have 
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; some undefined set of SecurityPermission flags.
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LogLog.Debug(declaringType, &quot;Security exception while trying to get caller stack frame. Error Ignored. Location Information Not Available.&quot;);&lt;/span&gt;
&lt;span&gt;                }
            }
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Constructor
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;className&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The fully qualified class name.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;methodName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The method name.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fileName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The file name.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;lineNumber&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;The line number of the method within the file.&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Initializes a new instance of the &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;LocationInfo&quot; /&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; class with the specified data.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; LocationInfo(&lt;span&gt;string&lt;/span&gt; className, &lt;span&gt;string&lt;/span&gt; methodName, &lt;span&gt;string&lt;/span&gt; fileName, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; lineNumber)
        {
            m_className &lt;/span&gt;=&lt;span&gt; className;
            m_fileName &lt;/span&gt;=&lt;span&gt; fileName;
            m_lineNumber &lt;/span&gt;=&lt;span&gt; lineNumber;
            m_methodName &lt;/span&gt;=&lt;span&gt; methodName;
            m_fullInfo &lt;/span&gt;= m_className + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_methodName + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_fileName +
                &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + m_lineNumber + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Public Instance Constructors

        &lt;span&gt;#region&lt;/span&gt; Public Instance Properties

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the fully qualified class name of the caller making the logging 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; request.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ClassName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_className; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the file name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FileName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_fileName; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the line number of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; LineNumber
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_lineNumber; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the method name of the caller.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; MethodName
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_methodName; }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets all available caller information
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; All available caller information, in the format
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;fully.qualified.classname.of.caller.methodName(Filename:line)&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets all available caller information, in the format
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;fully.qualified.classname.of.caller.methodName(Filename:line)&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/para&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FullInfo
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_fullInfo; }
        }

&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; !(NETCF || NETSTANDARD1_3)
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the stack frames from the stack trace of the caller making the log request
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; StackFrameItem[] StackFrames
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; m_stackFrames; }
        }
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;

        &lt;span&gt;#endregion&lt;/span&gt; Public Instance Properties

        &lt;span&gt;#region&lt;/span&gt; Private Instance Fields

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_className;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_fileName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_lineNumber;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_methodName;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; m_fullInfo;
&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; !(NETCF || NETSTANDARD1_3)
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; StackFrameItem[] m_stackFrames;
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;

        &lt;span&gt;#endregion&lt;/span&gt; Private Instance Fields

        &lt;span&gt;#region&lt;/span&gt; Private Static Fields

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; The fully qualified type of the LocationInfo class.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Used by the internal logger to record the Type of the
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; log message.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type declaringType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(LocationInfo);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; When location information is not available the constant
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;c&amp;gt;&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;&amp;lt;/c&amp;gt;&lt;/span&gt;&lt;span&gt; is returned. Current value of this string
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; constant is &lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; NA = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Private Static Fields
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;为什么会有这么多英文注释呢，因为这是copy的log4net源码。。。但是LocationInfo中重载了构造函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919212635520-2008789140.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我需要先获取调用日志方法的StackTrace，然后传入方法，主要因为写入日志用到异步，如果在异步线程内用LocationInfo(Type callerStackBoundaryDeclaringType)，会导致获取不到我们期望的那几个追踪信息，因为StackFrame是在它内部new的，这会导致获取的是异步线程的信息。所以我要在进入异步线程前将StackTrace获取到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919213136854-1890994238.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以也就有了下面这个类（LogEventDataAsync），一个传入异步线程的数据对象，里面保存着一些基本的初始日志信息&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建LogEventDataAsync&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ae86b0cf-4731-4ff2-a6dc-d8f6220f2920&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ae86b0cf-4731-4ff2-a6dc-d8f6220f2920&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ae86b0cf-4731-4ff2-a6dc-d8f6220f2920&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志数据，传入异步执行方法的数据
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 主要为提前获取CallerStackBoundaryDeclaringType和CallerStackTrace，避免Core（log4net源码）下追踪信息在异步线程内与期望不一致
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogEventDataAsync
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 错误级别
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Level { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志来源
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LogSource { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 调用日志方法实例类型
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; Type CallerStackBoundaryDeclaringType { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; StackTrace
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; StackTrace CallerStackTrace { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 不为空则发送邮件，多个接收人用英文逗号隔开
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Emails { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;到目前为止日志信息的准备工作就做完了，下面来赋值写入mongodb&lt;/p&gt;
&lt;p&gt;先来创建两个帮助类吧，一个用于异步，一个是比较常见的请求类，都很简单&lt;/p&gt;
&lt;p&gt;创建Common文件夹，在下面创建两个类&lt;/p&gt;
&lt;p&gt;AsyncHelpers（NLog源码）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_d807c133-5b6e-4ecc-be04-77fa82facabd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d807c133-5b6e-4ecc-be04-77fa82facabd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d807c133-5b6e-4ecc-be04-77fa82facabd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AsyncHelpers
    {
        &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; GetManagedThreadId()
        {
&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; NETSTANDARD1_3
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; System.Environment.CurrentManagedThreadId;
&lt;/span&gt;&lt;span&gt;#else&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Thread.CurrentThread.ManagedThreadId;
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;
        }

        &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; StartAsyncTask(Action&amp;lt;&lt;span&gt;object&lt;/span&gt;&amp;gt; action, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; state)
        {
&lt;/span&gt;&lt;span&gt;#if&lt;/span&gt; NET4_0 || NET4_5 || NETSTANDARD&lt;span&gt;
            System.Threading.Tasks.Task.Factory.StartNew(action, state, CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default);
&lt;/span&gt;&lt;span&gt;#else&lt;/span&gt;&lt;span&gt;
            ThreadPool.QueueUserWorkItem(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WaitCallback(action), state);
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;span&gt;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;RequestHelpers&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50.5&quot;&gt;&lt;img id=&quot;code_img_closed_89f00a74-684c-45c5-b3d8-ca9696fac7ba&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_89f00a74-684c-45c5-b3d8-ca9696fac7ba&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_89f00a74-684c-45c5-b3d8-ca9696fac7ba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;96&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RequestHelpers
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 组装普通文本请求参数。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameters&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;Key-Value形式请求参数字典&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;URL编码后的请求数据&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String BuildQuery(IDictionary&amp;lt;String, String&amp;gt;&lt;span&gt; parameters)
        {
            StringBuilder postData &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; hasParam = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

            IEnumerator&lt;/span&gt;&amp;lt;KeyValuePair&amp;lt;String, String&amp;gt;&amp;gt; dem =&lt;span&gt; parameters.GetEnumerator();
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (dem.MoveNext())
            {
                String name &lt;/span&gt;=&lt;span&gt; dem.Current.Key;
                String value &lt;/span&gt;=&lt;span&gt; dem.Current.Value;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 忽略参数名或参数值为空的参数&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!String.IsNullOrEmpty(name) &amp;amp;&amp;amp; !&lt;span&gt;String.IsNullOrEmpty(value))
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (hasParam)
                    {
                        postData.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    }

                    postData.Append(name);
                    postData.Append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    postData.Append(HttpUtility.UrlEncode(value));
                    hasParam &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; postData.ToString();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行HTTP POST请求。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 对参数值执行UrlEncode
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameters&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求参数&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;HTTP响应&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String DoPost(String url, IDictionary&amp;lt;String, String&amp;gt;&lt;span&gt; parameters)
        {
            HttpWebRequest req &lt;/span&gt;= GetWebRequest(url, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded;charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            Byte[] postData &lt;/span&gt;=&lt;span&gt; Encoding.UTF8.GetBytes(BuildQuery(parameters));
            Stream reqStream &lt;/span&gt;=&lt;span&gt; req.GetRequestStream();
            reqStream.Write(postData, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, postData.Length);
            reqStream.Close();

            HttpWebResponse rsp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            rsp &lt;/span&gt;=&lt;span&gt; (HttpWebResponse)req.GetResponse();

            Encoding encoding &lt;/span&gt;=&lt;span&gt; Encoding.GetEncoding(rsp.CharacterSet);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetResponseAsString(rsp, encoding);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行HTTP POST请求。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该方法在执行post时不对请求数据进行任何编码（UrlEncode）
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;data&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求数据&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;HTTP响应&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String DoPost(String url, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; data)
        {
            HttpWebRequest req &lt;/span&gt;= GetWebRequest(url, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded;charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            Byte[] postData &lt;/span&gt;=&lt;span&gt; Encoding.UTF8.GetBytes(data);
            Stream reqStream &lt;/span&gt;=&lt;span&gt; req.GetRequestStream();
            reqStream.Write(postData, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, postData.Length);
            reqStream.Close();

            HttpWebResponse rsp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            rsp &lt;/span&gt;=&lt;span&gt; (HttpWebResponse)req.GetResponse();

            Encoding encoding &lt;/span&gt;=&lt;span&gt; Encoding.GetEncoding(rsp.CharacterSet);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetResponseAsString(rsp, encoding);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; post数据 T messagepack序列化格式 减少传输数据大小
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;model&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; DoPost&amp;lt;T&amp;gt;&lt;span&gt;(String url, T model)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClient();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MessagePack.Resolvers.CompositeResolver.RegisterAndSetAsDefault(
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        NativeDateTimeResolver.Instance,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        ContractlessStandardResolver.Instance);&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; messagePackMediaTypeFormatter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessagePackMediaTypeFormatter(ContractlessStandardResolver.Instance);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpRequestMessage(HttpMethod.Post, url);
            request.Content &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ObjectContent&amp;lt;T&amp;gt;&lt;span&gt;(
                model,messagePackMediaTypeFormatter);            
            request.Content.Headers.ContentType.MediaType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-msgpack&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;client.Timeout = new TimeSpan(0,0,5);&lt;/span&gt;
&lt;span&gt;            client.SendAsync(request);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行HTTP POST请求。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该方法在执行post时不对请求数据进行任何编码（UrlEncode）
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;data&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求数据&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;HTTP响应&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String DoPostJson(String url, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; data)
        {
            HttpWebRequest req &lt;/span&gt;= GetWebRequest(url, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            req.Accept &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            Byte[] postData &lt;/span&gt;=&lt;span&gt; Encoding.UTF8.GetBytes(data);
            Stream reqStream &lt;/span&gt;=&lt;span&gt; req.GetRequestStream();
            reqStream.Write(postData, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, postData.Length);
            reqStream.Close();

            HttpWebResponse rsp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            rsp &lt;/span&gt;=&lt;span&gt; (HttpWebResponse)req.GetResponse();

            Encoding encoding &lt;/span&gt;=&lt;span&gt; Encoding.GetEncoding(rsp.CharacterSet);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetResponseAsString(rsp, encoding);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行HTTP GET请求。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameters&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求参数&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;HTTP响应&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String DoGet(String url, IDictionary&amp;lt;String, String&amp;gt;&lt;span&gt; parameters)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parameters != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; parameters.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (url.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                {
                    url &lt;/span&gt;= url + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; BuildQuery(parameters);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    url &lt;/span&gt;= url + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; BuildQuery(parameters);
                }
            }

            HttpWebRequest req &lt;/span&gt;= GetWebRequest(url, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded;charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            HttpWebResponse rsp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            rsp &lt;/span&gt;=&lt;span&gt; (HttpWebResponse)req.GetResponse();

            Encoding encoding &lt;/span&gt;=&lt;span&gt; Encoding.GetEncoding(rsp.CharacterSet);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; GetResponseAsString(rsp, encoding);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; HttpWebRequest GetWebRequest(String url, String method)
        {
            HttpWebRequest req &lt;/span&gt;=&lt;span&gt; (HttpWebRequest)WebRequest.Create(url);
            req.Method &lt;/span&gt;=&lt;span&gt; method;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; req;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 把响应流转换为文本。
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;rsp&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;响应流对象&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;encoding&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;编码方式&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;响应文本&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String GetResponseAsString(HttpWebResponse rsp, Encoding encoding)
        {
            Stream stream &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            StreamReader reader &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以字符流的方式读取HTTP响应&lt;/span&gt;
                stream =&lt;span&gt; rsp.GetResponseStream();
                reader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(stream, encoding);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; reader.ReadToEnd();
            }
            &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 释放资源&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (reader != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) reader.Close();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (stream != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) stream.Close();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rsp != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) rsp.Close();
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetUrlData(&lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;string&lt;/span&gt; encoding, &lt;span&gt;out&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; logSize)
        {
            logSize &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; return_value = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                HttpWebRequest wq &lt;/span&gt;= WebRequest.Create(url) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; HttpWebRequest;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (wq == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; return_value;
                }
                wq.Credentials &lt;/span&gt;=&lt;span&gt; CredentialCache.DefaultCredentials;
                wq.CookieContainer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CookieContainer();
                wq.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                wq.Method &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                wq.UserAgent &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                wq.Host &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(url).Host;
                wq.Timeout &lt;/span&gt;= &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                {
                    HttpWebResponse rep &lt;/span&gt;= wq.GetResponse() &lt;span&gt;as&lt;/span&gt;&lt;span&gt; HttpWebResponse;
                    logSize &lt;/span&gt;=&lt;span&gt; rep.ContentLength;
                    Stream responseStream &lt;/span&gt;=&lt;span&gt; rep.GetResponseStream();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rep.ContentEncoding.ToLower().Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gzip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                    {
                        responseStream &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GZipStream(responseStream, CompressionMode.Decompress);
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (rep.ContentEncoding.ToLower().Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;deflate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
                    {
                        responseStream &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DeflateStream(responseStream, CompressionMode.Decompress);
                    }
                    StreamReader reader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(responseStream, Encoding.GetEncoding(encoding));
                    return_value &lt;/span&gt;=&lt;span&gt; reader.ReadToEnd();

                    responseStream.Close();
                    reader.Close();
                    rep.Close();
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
                {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nolog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (WebException ex)
            {
                return_value &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error_error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; return_value;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在RequestHelpers中真正用到的是public static void DoPost&amp;lt;T&amp;gt;(String url, T model)方法，里面用到了MessagePack以及扩展的MediaType &quot;application/x-msgpack&quot;,所以这里要引用两个nuget包&lt;/p&gt;
&lt;p&gt;MessagePack和Sketch7.MessagePack.MediaTypeFormatter&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建LogWriter&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;LogWriter为调用Post方法的类，里面主要提供了异步调用的方法以及创建完整的日志信息功能&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_39ef63e2-6584-4257-a5a1-774dd73dcce4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_39ef63e2-6584-4257-a5a1-774dd73dcce4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_39ef63e2-6584-4257-a5a1-774dd73dcce4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogWriter
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 私有构造函数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; LogWriter() { }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取LogWriter实例
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; LogWriter GetLogWriter()
        {            
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogWriter();
        }        
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Writer(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; logEventDataAsync)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; led =&lt;span&gt; GetLoggingEventData((LogEventDataAsync)logEventDataAsync);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; level =&lt;span&gt; LogLevel.FromString(led.Level);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; logapi =&lt;span&gt; level.LogApi;
            RequestHelpers.DoPost&lt;/span&gt;&amp;lt;LogEventData&amp;gt;(logapi, led);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MessagePack进行数据压缩，减小传输数据&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取日志数据
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;logEventDataAsync&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; LogEventData GetLoggingEventData(LogEventDataAsync logEventDataAsync)
        {
            LocationInfo locationInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LocationInfo(logEventDataAsync.CallerStackBoundaryDeclaringType, logEventDataAsync.CallerStackTrace);
            LogEventData logData &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogEventData
            {
                Message &lt;/span&gt;=&lt;span&gt; logEventDataAsync.Message,
                Date &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                Level &lt;/span&gt;=&lt;span&gt; logEventDataAsync.Level,
                LogSource &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(logEventDataAsync.LogSource) ?&lt;span&gt; locationInfo.ClassName : logEventDataAsync.LogSource,
                ClassName &lt;/span&gt;=&lt;span&gt; locationInfo.ClassName,
                MethodName &lt;/span&gt;=&lt;span&gt; locationInfo.MethodName,
                LineNumber &lt;/span&gt;=&lt;span&gt; locationInfo.LineNumber,
                FileName &lt;/span&gt;=&lt;span&gt; locationInfo.FileName,
                IP &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Emails &lt;/span&gt;=&lt;span&gt; logEventDataAsync.Emails,
                FullInfo&lt;/span&gt;=&lt;span&gt;locationInfo.FullInfo
            };
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; logData;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;GetLoggingEventData方法中就包含了LocationInfo的实例化，之所以放这里是因为这里异步执行，而获取追踪信息需要各种反射比较耗时，不然也就没有LogEventDataAsync这个类了，获取IP的方法没实现。。。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建Logger类&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这个类是真正暴露给开发者使用的类，就像开源项目log.debug这样的方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;&lt;img id=&quot;code_img_closed_f028b8b5-9317-4829-aaae-fdf1a99e4bdd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f028b8b5-9317-4829-aaae-fdf1a99e4bdd&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f028b8b5-9317-4829-aaae-fdf1a99e4bdd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;117&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Logger
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type declaringType = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Logger);
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志写入实例
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; LogWriter _logWriter = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志来源
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 默认为调用方法所在类
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; _logSource = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 私有构造函数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Logger()
        {
            _logWriter &lt;/span&gt;=&lt;span&gt; LogWriter.GetLogWriter();
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 私有构造函数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;logSource&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志来源&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; Logger(&lt;span&gt;string&lt;/span&gt; logSource):&lt;span&gt;this&lt;/span&gt;&lt;span&gt;()
        {
            _logSource &lt;/span&gt;=&lt;span&gt; logSource;
        }        
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取Logger实例
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 默认日志来源为调用方法所在类：namespace.classname
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;logSource&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志来源&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger GetLogger(&lt;span&gt;string&lt;/span&gt; logSource=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {            
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Logger(logSource);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Trace
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Trace(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Trace, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Trace
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Trace(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            
            WriterToTargets(ex.ToString(), LogLevel.Trace, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Debug
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Debug(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Debug, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Debug
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Debug(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Debug, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Info
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Info(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Info, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Info
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Info(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Info, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Warn
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Warn(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Warn, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Warn
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Warn(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Warn, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Error
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Error(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Error, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Error
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Error(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Error, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Fatal
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Fatal(&lt;span&gt;string&lt;/span&gt; message, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(message, LogLevel.Fatal, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Fatal
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;异常信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Fatal(Exception ex, &lt;span&gt;string&lt;/span&gt; emails = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            WriterToTargets(ex.ToString(), LogLevel.Fatal, emails);
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 写日志
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;level&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;级别&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;emails&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; WriterToTargets(&lt;span&gt;string&lt;/span&gt; message, LogLevel level,&lt;span&gt;string&lt;/span&gt; emails=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                LogEventDataAsync leda &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogEventDataAsync
                {
                    LogSource &lt;/span&gt;=&lt;span&gt; _logSource,
                    Level &lt;/span&gt;=&lt;span&gt; level.Name,
                    CallerStackBoundaryDeclaringType &lt;/span&gt;= GetType(),&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前实例&lt;/span&gt;
                    CallerStackTrace = &lt;span&gt;new&lt;/span&gt; StackTrace(&lt;span&gt;true&lt;/span&gt;),&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前StackTrace&lt;/span&gt;
                    Message =&lt;span&gt; message,
                    Emails &lt;/span&gt;=&lt;span&gt; emails
                };

                AsyncHelpers.StartAsyncTask(_logWriter.Writer, leda);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行异步写日志&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;
            {
            }            
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;代码非常简单，重载了最常用的自定义信息和exception信息，以及邮件联系人。日志来源主要为了分类日志，像不同的服务、站点等等，可以方便入库后查询。到这已经可以编译使用了，但是为了在.net core中可以依赖注入这个Logger，最后添加一个扩展方法&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建Extensions文件夹及LoggerServiceExtension类&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_5f176f2f-37a2-450d-a261-8ada56cd21f1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5f176f2f-37a2-450d-a261-8ada56cd21f1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5f176f2f-37a2-450d-a261-8ada56cd21f1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志服务注入扩展类
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoggerServiceExtension
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 注入日志服务
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;service&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;IServiceCollection&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;logSource&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;日志来源，默认日志来源为调用方法所在类：namespace.classname&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IServiceCollection AddLoggerService(&lt;span&gt;this&lt;/span&gt; IServiceCollection service, &lt;span&gt;string&lt;/span&gt; logSource=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; service.AddTransient(factory =&amp;gt;&lt;span&gt; Logger.GetLogger(logSource));
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;3.使用（引入类库）&lt;/p&gt;
&lt;p&gt;一般项目使用可以这样，比如控制台&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_8189e5e6-d761-4478-a5b0-6ca8b57c4297&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8189e5e6-d761-4478-a5b0-6ca8b57c4297&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8189e5e6-d761-4478-a5b0-6ca8b57c4297&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; Logger logger = LogApiHandler.Logger.GetLogger(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logSource&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            logger.Debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            Console.ReadLine();
        }        
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;.net core的话比如web项目可以这样用依赖注入&lt;/p&gt;
&lt;p&gt;在Startup中，ConfigureServices添加一行代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
services.AddLoggerService(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TestApi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在其他类中就可以这么用了，当然也可以用new的方式使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ValuesController : ControllerBase
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Logger _logger;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValuesController(Logger logger)
        {
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET api/values&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ActionResult&amp;lt;IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; Get()
        {
            _logger.Error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;测试依赖注入logger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ddd@ddd.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大体使用方式就是这样了。&lt;/p&gt;
&lt;p&gt; 最后得需要自己写一个页面来调用web api的api/log/getlist接口查询显示日志&lt;/p&gt;
&lt;p&gt;mongodb客户端用的Robo 3T，安装完记得修改Options--Display Dates in--Local Timezone,不然默认utc,存入时的时间少8小时。mongodb存入数据就是下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/656769/201809/656769-20180919225438906-468150384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 14:16:00 +0000</pubDate>
<dc:creator>去海边生活</dc:creator>
<og:description>开发环境vs2017,数据写入到mongodb。思路就是1.提供接口写入日志，2.基于接口封装类库。3.引入类库使用 为什么要写它 很多开源项目像nlog、log4net、elk、exceptionl</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/betterlife/p/9676033.html</dc:identifier>
</item>
<item>
<title>.NetCore实践篇：分布式监控Zipkin持久化之殇 - 范存威</title>
<link>http://www.cnblogs.com/fancunwei/p/9677952.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fancunwei/p/9677952.html</guid>
<description>&lt;p&gt;本系列已写了四篇文章，读本篇之前，可以先读前面几篇。&lt;br/&gt;思考大纲：&lt;a href=&quot;https://www.cnblogs.com/fancunwei/p/9625841.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.Net架构篇:思考如何设计一款实用的分布式监控系统？&lt;/a&gt;&lt;br/&gt;实践篇一：&lt;a href=&quot;https://www.cnblogs.com/fancunwei/p/9637247.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.NetCore实践篇：分布式监控客户端ZipkinTracer从入门到放弃之路&lt;/a&gt;&lt;br/&gt;实践篇二：&lt;a href=&quot;https://www.cnblogs.com/fancunwei/p/9649192.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.NetCore实践篇：分布式监控系统zipkin踩坑之路（二）&lt;/a&gt;&lt;br/&gt;实践篇三：&lt;a href=&quot;https://www.cnblogs.com/fancunwei/p/9664749.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.NetCore实践篇：成功解决分布式监控ZipKin聚合依赖问题（三）&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;zipkin&lt;/h2&gt;
&lt;p&gt;Zipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据&lt;br/&gt;&lt;a href=&quot;https://zipkin.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin官网&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;zipkin4Net&lt;/h2&gt;
&lt;p&gt;zipkin4net是.NET客户端库。&lt;br/&gt;&lt;a href=&quot;https://github.com/openzipkin/zipkin4net&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin4net&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;zipkin-dependencies&lt;/h2&gt;
&lt;p&gt;这是一个Spark作业，它将从您的数据存储区收集跨度，分析服务之间的链接，并存储它们以供以后在&lt;a href=&quot;https://github.com/openzipkin/zipkin/tree/master/zipkin-ui&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Web UI中&lt;/a&gt;呈现。&lt;/p&gt;
&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;p&gt;如果内存不足时，java后跟上-Xmx1024m -Xms1024m参数，JAVA_OPTS的一些参数可参考Oracle官方说明&lt;a href=&quot;https://docs.oracle.com/cd/E22289_01/html/821-1274/configuring-the-default-jvm-and-java-arguments.html#scrolltoc&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;配置默认JVM和Java参数&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;
$ STORAGE_TYPE=cassandra3 java -jar zipkin-dependencies.jar &lt;span class=&quot;hljs-string&quot;&gt;`date -uv-1d +%F`&lt;/span&gt;

$ STORAGE_TYPE=cassandra3 java -jar zipkin-dependencies.jar &lt;span class=&quot;hljs-string&quot;&gt;`date -u -d '1 day ago' +%F`&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;MySQL 存储&lt;/h3&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_DB`&lt;/span&gt;: 使用的数据库，默认是 &lt;span class=&quot;hljs-string&quot;&gt;&quot;zipkin&quot;&lt;/span&gt;.
* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_USER`&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_PASS`&lt;/span&gt;: MySQL授权, 默认是空.
* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_HOST`&lt;/span&gt;: 默认主机（域名/ip）是localhost
* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_TCP_PORT`&lt;/span&gt;: 默认端口是 &lt;span class=&quot;hljs-number&quot;&gt;3306&lt;/span&gt;
* &lt;span class=&quot;hljs-string&quot;&gt;`MYSQL_USE_SSL`&lt;/span&gt;: 验证 &lt;span class=&quot;hljs-string&quot;&gt;`javax.net.ssl.trustStore`&lt;/span&gt; 和 &lt;span class=&quot;hljs-string&quot;&gt;`javax.net.ssl.trustStorePassword`&lt;/span&gt;,默认不验证。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt;示例&lt;/h4&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;$ STORAGE_TYPE=mysql MYSQL_USER=root java -jar zipkin-dependencies.jar
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;详情参考：&lt;br/&gt;&lt;a href=&quot;https://github.com/openzipkin/zipkin-dependencies&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin-dependencies&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;创建使用数据库&lt;/h2&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;mysql&amp;gt; create database mytestdb;
Query OK, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; row affected (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; sec)
mysql&amp;gt; show databases;
+--------------------+
&lt;span class=&quot;hljs-params&quot;&gt;| Database |&lt;/span&gt;
+--------------------+
&lt;span class=&quot;hljs-params&quot;&gt;| information_schema |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| mysql |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| mytestdb |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| performance_schema |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| sys |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| ttt |&lt;/span&gt;
+--------------------+
&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; rows &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; set (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; sec)
mysql&amp;gt; use mytestdb
Database changed
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;使用sql语句创建zipkin表&lt;/h2&gt;
&lt;pre class=&quot;hljs javascript&quot;&gt;
&lt;code class=&quot;javascript&quot;&gt;CREATETABLE IF NOT EXISTS zipkin_spans (
&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt; BIGINT NOT NULL DEFAULT &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'If non zero, this means the trace uses 128 bit traceIds instead of 64bit'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt; BIGINT NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`id`&lt;/span&gt; BIGINT NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`name`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`parent_id`&lt;/span&gt; BIGINT,
&lt;span class=&quot;hljs-string&quot;&gt;`debug`&lt;/span&gt; BIT(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),
&lt;span class=&quot;hljs-string&quot;&gt;`start_ts`&lt;/span&gt; BIGINT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Span.timestamp():epoch micros used for endTs query and to implement TTL'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`duration`&lt;/span&gt; BIGINT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Span.duration():micros used for minDuration and maxDuration query'&lt;/span&gt;
)ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;
ALTERTABLE zipkin_spans ADD UNIQUE KEY(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`id`&lt;/span&gt;) COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'ignore insert on duplicate'&lt;/span&gt;;
ALTERTABLE zipkin_spans ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`id`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'forjoining with zipkin_annotations'&lt;/span&gt;;
ALTERTABLE zipkin_spans ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'forgetTracesByIds'&lt;/span&gt;;
ALTERTABLE zipkin_spans ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`name`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for getTraces and getSpanNames'&lt;/span&gt;;
ALTERTABLE zipkin_spans ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`start_ts`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for getTraces ordering andrange'&lt;/span&gt;;
CREATETABLE IF NOT EXISTS zipkin_annotations (
&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt; BIGINT NOT NULL DEFAULT &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'If non zero, this means the trace uses 128 bit traceIds instead of 64bit'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt; BIGINT NOT NULL COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'coincideswith zipkin_spans.trace_id'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`span_id`&lt;/span&gt; BIGINT NOT NULL COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'coincideswith zipkin_spans.id'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`a_key`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) NOT NULL COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'BinaryAnnotation.key or Annotation.value if type == -1'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`a_value`&lt;/span&gt; BLOB COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'BinaryAnnotation.value(), which must be smaller than 64KB'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`a_type`&lt;/span&gt; INT NOT NULL COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'BinaryAnnotation.type() or -1 if Annotation'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`a_timestamp`&lt;/span&gt; BIGINT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Used toimplement TTL; Annotation.timestamp or zipkin_spans.timestamp'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_ipv4`&lt;/span&gt; INT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Null whenBinary/Annotation.endpoint is null'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_ipv6`&lt;/span&gt; BINARY(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Null whenBinary/Annotation.endpoint is null, or no IPv6 address'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_port`&lt;/span&gt; SMALLINT COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Null whenBinary/Annotation.endpoint is null'&lt;/span&gt;,
&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_service_name`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) COMMENT&lt;span class=&quot;hljs-string&quot;&gt;'Null when Binary/Annotation.endpoint is null'&lt;/span&gt;
)ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;
ALTERTABLE zipkin_annotations ADD UNIQUE KEY(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`span_id`&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;`a_key`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`a_timestamp`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'Ignore insert on duplicate'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`span_id`&lt;/span&gt;)COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for joining with zipkin_spans'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id_high`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'forgetTraces/ByIds'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`endpoint_service_name`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'forgetTraces and getServiceNames'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`a_type`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for getTraces'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`a_key`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'for getTraces'&lt;/span&gt;;
ALTERTABLE zipkin_annotations ADD INDEX(&lt;span class=&quot;hljs-string&quot;&gt;`trace_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`span_id`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`a_key`&lt;/span&gt;) COMMENT &lt;span class=&quot;hljs-string&quot;&gt;'fordependencies job'&lt;/span&gt;;
CREATETABLE IF NOT EXISTS zipkin_dependencies (
&lt;span class=&quot;hljs-string&quot;&gt;`day`&lt;/span&gt; DATE NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`parent`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`child`&lt;/span&gt; VARCHAR(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;) NOT NULL,
&lt;span class=&quot;hljs-string&quot;&gt;`call_count`&lt;/span&gt; BIGINT
)ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;
ALTERTABLE zipkin_dependencies ADD UNIQUE KEY(&lt;span class=&quot;hljs-string&quot;&gt;`day`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`parent`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`child`&lt;/span&gt;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建成功后，查询结果。&lt;/p&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;mysql&amp;gt; show tables;
+---------------------+
&lt;span class=&quot;hljs-params&quot;&gt;| Tables_in_mytestdb |&lt;/span&gt;
+---------------------+
&lt;span class=&quot;hljs-params&quot;&gt;| zipkin_annotations |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| zipkin_dependencies |&lt;/span&gt;
&lt;span class=&quot;hljs-params&quot;&gt;| zipkin_spans |&lt;/span&gt;
+---------------------+
&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; rows &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; set (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; sec)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;启动zipkin-dependencies&lt;/h2&gt;
&lt;p&gt;最开始我的密码是【四个字母一个感叹号一个数字】，再执行启动命令时，&lt;span&gt;密码那块给我报错自动换成【四个字母rm -f】&lt;/span&gt;，我修改成【四个字母一个#号一个数字】就能执行了&lt;/p&gt;
&lt;p&gt;执行成功后，依然提示&lt;span&gt;Access denied for user 'root'@'localhost' (using password: NO)&lt;/span&gt;,但我在linux的命令中直接用mysql -u root -p相同密码是可以登录成功的。所以问题出现在哪呢？&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;[root@izwz9fwifc2eniq3lbdzmgz cusD]
Exception &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; thread &lt;span class=&quot;hljs-string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.RuntimeException: java.sql.SQLInvalidAuthorizationSpecException: Access denied &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; user &lt;span class=&quot;hljs-string&quot;&gt;'root'&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;'localhost'&lt;/span&gt; (using password: NO)
at zipkin2.dependencies.mysql.MySQLDependenciesJob.hasTraceIdHigh(MySQLDependenciesJob.java:233)
at zipkin2.dependencies.mysql.MySQLDependenciesJob.run(MySQLDependenciesJob.java:184)
at zipkin2.dependencies.ZipkinDependenciesJob.main(ZipkinDependenciesJob.java:65)
Caused by: java.sql.SQLInvalidAuthorizationSpecException: Access denied &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; user &lt;span class=&quot;hljs-string&quot;&gt;'root'&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;'localhost'&lt;/span&gt; (using password: NO)
at org.mariadb.jdbc.internal.util.exceptions.ExceptionMapper.get(ExceptionMapper.java:173)
at org.mariadb.jdbc.internal.util.exceptions.ExceptionMapper.getException(ExceptionMapper.java:110)
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.connectWithoutProxy(AbstractConnectProtocol.java:1115)
at org.mariadb.jdbc.internal.util.Utils.retrieveProxy(Utils.java:502)
at org.mariadb.jdbc.MariaDbConnection.newConnection(MariaDbConnection.java:154)
at org.mariadb.jdbc.Driver.connect(Driver.java:86)
at java.sql.DriverManager.getConnection(DriverManager.java:664)
at java.sql.DriverManager.getConnection(DriverManager.java:247)
at zipkin2.dependencies.mysql.MySQLDependenciesJob.hasTraceIdHigh(MySQLDependenciesJob.java:229)
... 2 more
Caused by: java.sql.SQLException: Access denied &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; user &lt;span class=&quot;hljs-string&quot;&gt;'root'&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;'localhost'&lt;/span&gt; (using password: NO)
Current charset is UTF-8. If password has been &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; using other charset, consider using option &lt;span class=&quot;hljs-string&quot;&gt;'passwordCharacterEncoding'&lt;/span&gt;
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.authentication(AbstractConnectProtocol.java:862)
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.handleConnectionPhases(AbstractConnectProtocol.java:785)
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.connect(AbstractConnectProtocol.java:456)
at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.connectWithoutProxy(AbstractConnectProtocol.java:1111)
... 8 more
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;追溯源码&lt;/h2&gt;
&lt;p&gt;逼不得已，走上查看源码之路，Idea打开zipkin-dependencies/mysql源码，查看相关部分代码。&lt;/p&gt;
&lt;pre class=&quot;hljs java&quot;&gt;
&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Builder&lt;/span&gt; &lt;/span&gt;{
Map&amp;lt;String, String&amp;gt; sparkProperties = ImmutableMap.of(
&lt;span class=&quot;hljs-string&quot;&gt;&quot;spark.ui.enabled&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;
);
String db = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_DB&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;zipkin&quot;&lt;/span&gt;);
String host = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_HOST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port = Integer.parseInt(getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_TCP_PORT&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;3306&quot;&lt;/span&gt;));
String user = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_USER&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);
String password = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_PASS&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; maxConnections = Integer.parseInt(getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_MAX_CONNECTIONS&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;));
&lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; useSsl = Boolean.parseBoolean(getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MYSQL_USE_SSL&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;));

String sparkMaster = getEnv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SPARK_MASTER&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;local[*]&quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; day = midnightUTC(System.currentTimeMillis());

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; MySQLDependenciesJob &lt;span class=&quot;hljs-title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MySQLDependenciesJob(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
}
}

MySQLDependenciesJob(Builder builder) {
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.db = builder.db;
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.day = builder.day;
SimpleDateFormat df = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;);
df.setTimeZone(TimeZone.getTimeZone(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTC&quot;&lt;/span&gt;));
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.dateStamp = df.format(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date(builder.day));
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.url = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:mysql://&quot;&lt;/span&gt;)
.append(builder.host).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;).append(builder.port)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).append(builder.db)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;?autoReconnect=true&quot;&lt;/span&gt;)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;useSSL=&quot;&lt;/span&gt;).append(builder.useSsl).toString();
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.user = builder.user;
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.password = builder.password;
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.conf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SparkConf(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)
.setMaster(builder.sparkMaster)
.setAppName(getClass().getName());
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (builder.jars != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) conf.setJars(builder.jars);
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, String&amp;gt; entry : builder.sparkProperties.entrySet()) {
conf.set(entry.getKey(), entry.getValue());
}
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.logInitializer = builder.logInitializer;
}
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;saveToMySQL&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;DependencyLink&amp;gt; links)&lt;/span&gt; &lt;/span&gt;{
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; (Connection con = DriverManager.getConnection(url, user, password)) {
PreparedStatement replace = con.prepareStatement(
&lt;span class=&quot;hljs-string&quot;&gt;&quot;REPLACE INTO zipkin_dependencies (day, parent, child, call_count, error_count) VALUES (?,?,?,?,?)&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (DependencyLink link : links) {
replace.setDate(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; java.sql.Date(day));
replace.setString(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, link.parent());
replace.setString(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, link.child());
replace.setLong(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, link.callCount());
replace.setLong(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, link.errorCount());
replace.executeUpdate();
}
} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (SQLException e) {
&lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Could not save links &quot;&lt;/span&gt; + links, e);
}
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然并卵，看完之后，没看出明显问题。难道还是我自己的mysql配置问题？还是启动部分的参数问题？代码部分也是有些疑惑,password和root为什么没放进url里，难道是为了安全考虑么？&lt;/p&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.url = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:mysql://&quot;&lt;/span&gt;)
.append(builder.host).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;).append(builder.port)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;).append(builder.db)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;?autoReconnect=true&quot;&lt;/span&gt;)
.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;useSSL=&quot;&lt;/span&gt;).append(builder.useSsl).toString();
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.user = builder.user;
&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.password = builder.password;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;文中还提到 Current charset is UTF-8. If password has been set using other charset, consider using option 'passwordCharacterEncoding'，编码格式是否有不同呢？&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/shootercheng/p/5836657.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;查看mysql数据库及表编码格式&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;hljs ruby&quot;&gt;
&lt;code class=&quot;ruby&quot;&gt;mysql&amp;gt; show variables like &lt;span class=&quot;hljs-string&quot;&gt;'character_set_database'&lt;/span&gt;;
+------------------------+---------+
&lt;span class=&quot;hljs-params&quot;&gt;| Variable_name |&lt;/span&gt; Value &lt;span class=&quot;hljs-params&quot;&gt;|
+------------------------+---------+
|&lt;/span&gt; character_set_database &lt;span class=&quot;hljs-params&quot;&gt;| utf8mb4 |&lt;/span&gt;
+------------------------+---------+
&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; row &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; set (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; sec)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://jira.mariadb.org/browse/CONJ-480&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://jira.mariadb.org/browse/CONJ-480&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://samebug.io/exceptions/2980875/java.sql.SQLInvalidAuthorizationSpecException/could-not-connect-access-denied-for-user&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://samebug.io/exceptions/2980875/java.sql.SQLInvalidAuthorizationSpecException/could-not-connect-access-denied-for-user&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11002827/passing-request-parameters-as-utf-8-encoded-strings&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;将请求参数作为UTF-8编码的字符串传递[重复]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/liaokailin/article/details/52077620&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/lindan1984/article/details/79325124&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin集成到node，C#&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/jek123456/article/details/78077112&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;微服务之分布式跟踪系统（springboot+zipkin+mysql）&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/java-zhao/p/5858138.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;第二十九章 springboot + zipkin + mysql&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41186788/article/details/80462916&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Linux下的Mysql用命令执行sql文件&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.bitnami.com/installer/apps/liferay/administration/change-reset-password/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;修改MySQL管理员密码&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/openzipkin/zipkin/tree/master/zipkin-server&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;zipkin-server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由于启动zipkin-dependencies链接mysql报&lt;span&gt;Access denied for user 'root'@'localhost' (using password: NO)&lt;/span&gt;错误，本次持久化之路最终失败。但由于我直接使用【mysql -u 用户 -p】是能登录成功的，所以我猜测了以下原因：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;客户端自己的bug,和我服务器mysql版本不兼容？&lt;/li&gt;
&lt;li&gt;编码问题，编码两者不符？&lt;/li&gt;
&lt;li&gt;用户名和密码没有共享全局，只对一个数据库有效？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;别人的博文是面向教学成功编程，我的是面向失败编程，也别有一番趣味。留下疑问，待日后解决调。虽然失败了，但我又收集了一堆链接，增添了mysql一些故障解决的认识。&lt;/p&gt;

&lt;p&gt;今天换了一款个人很喜欢的皮肤，会根据h1,h2自动生成目录，之前的博文我也都检查了下，有很大失位的我都调整了过来，不标准的暂时不改了，我以后的博文都按照要求的格式写，排版美观度提升了很多，感谢作者&lt;a href=&quot;https://www.cnblogs.com/bndong/&quot; title=&quot;bndong&quot;&gt;bndong&lt;/a&gt;，如果有打算使用这个皮肤的，一定要开启&lt;strong&gt;控件显示公告。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 14:06:00 +0000</pubDate>
<dc:creator>范存威</dc:creator>
<og:description>前言 本系列已写了四篇文章，读本篇之前，可以先读前面几篇。 思考大纲：.Net架构篇:思考如何设计一款实用的分布式监控系统？ 实践篇一：.NetCore实践篇：分布式监控客户端ZipkinTracer</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fancunwei/p/9677952.html</dc:identifier>
</item>
<item>
<title>机器学习：集成学习（ensemble learning）（一）——原理概述 - 流影心</title>
<link>http://www.cnblogs.com/lyxML/p/9670627.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lyxML/p/9670627.html</guid>
<description>&lt;h3 id=&quot;集成学习ensemble-learning&quot;&gt;集成学习（ensemble learning）&lt;/h3&gt;
&lt;p&gt;集成学习通过构建多个个体学习器，然后再用某种策略将他们结合起来，产生一个有较好效果的强学习器来完成任务。基本原理如下图所示。这里主要有三个关键点：个体学习器的同质异质、个体学习器的生成方式、结合策略。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1453066/201809/1453066-20180919165340759-844441675.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;同质异质&lt;/strong&gt;。首先需要明确的是个体学习器至少不差于弱学习器。弱学习器常指泛化性能略优于随机猜测的学习器，例如二分类问题中精度略高于50%的分类器。对于训练数据若集成中的个体学习器为同一类型，例如都为BP神经网络或者都为决策树，则称同质集成。同样的道理，若个体学习器类型不同，例如既有决策树又有神经网络，则称异质集成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;个体学习器的生成方式&lt;/strong&gt;。主要可以分为两种，个体学习器之间存在强依赖关系、必须串行生成的序列化方法，以及个体学习器件不存在强依赖关系、可同时生成的并行化方法。前者代表是Boosting，后者代表是Bagging和随机森林（Random Forest）。&lt;br/&gt;&lt;strong&gt;1.Boosting基本原理如图所示&lt;/strong&gt;。大多数提升方法都是改变训练数据的概率分布（训练数据的权值分布），针对不同训练数据分布获得不同个体学习器，最终组合。因此需要解决两个问题，一是每一轮怎样改变权值分布的，二是如何将个体学习器进行组合的。Adaboost做法是，对于前者提高被前一轮预测错误样本的的权重，降低预测正确样本的的权重，对于后者加大误差率小的个体学习器的权值，减小误差率小的个体学习率的权值。&lt;strong&gt;Boosting算法要求个体学习器能够对特定的数据分布进行学习，这可以通过“重赋权法”实施，即在训练过程每一轮中，根据样本分布对每个样本重新赋予权重。对于无法接受带权样本的个体学习器（算法），可以通过“重采样法”来处理，即在每一轮学习中，根据样本分布对训练集重新采样，再用重采样得到的样本集对个体学习器进行训练。一般情况下两者差别不大。需要注意的是每一轮训练中需要检查当前生成的学习器是否满足基本条件，一旦不满足，则被抛弃，并且学习停止，此时可能还远远没有达到最大学习轮数，导致最终学习器性能欠佳。若采用“重采样法”，则会“重启动”，以避免过早停止。&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1453066/201809/1453066-20180919172903466-158489530.png&quot;/&gt;&lt;br/&gt;&lt;strong&gt;2.Bagging基本原理如图所示&lt;/strong&gt;。要想得到泛华性较强的集成，其中每个学习器应尽量独立，在现实中无法做到，但可以设法使之差异较大。一种做法就是对训练集采样产生多个子集，对各个子集训练学习器，从而得到差异较大的学习器。但是我们还希望个体学习器不能太差，如果子集都完全不同，，每个学习器只学习到一小部分数据，无法确保产生比较好的学习器。为解决这个问题，我们考虑使用相互重叠的采用子集（&lt;strong&gt;有放回采样&lt;/strong&gt;）。自主采样法：给定包含m个样本的数据集，先随机取出一个放入采样集，再放回初始训练集，使得下次采样仍然可能被选中，这样，经过m次随机采样，可以得到含m个样本的采样集，初始训练集中有样本在采样集里多次出现，有的则从未出现。关于比例很好求，求极限，63.2%出现在采样集中。预测输出时，对于分类任务使用简单投票法，回归任务使用简单平均法。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1453066/201809/1453066-20180919180638156-1666982913.png&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成的组合策略&lt;/strong&gt;。
&lt;ul&gt;&lt;li&gt;平均法。对于回归问题一般使用平均法，分为算术平均与加权平均等。&lt;span class=&quot;math display&quot;&gt;\[\begin{array}{l} G(x) = \frac{1}{T}\sum\limits_{i = 1}^T {{G_i}} (x)\\ G(x) = \sum\limits_{i = 1}^T {{\alpha _i}{G_i}} (x),{\alpha _i} \ge 0\;\;\;\;\sum\limits_{i = 1}^T {{\alpha _i} = 1} \end{array}\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;投票法。对于分类问题一般使用投票法。相对多数投票法，取学习器分类结果中数目最多的类为最终类别。绝对多数投票法，票数最多，且必须大于半数。加权投票法。&lt;/li&gt;
&lt;li&gt;学习法。即通过一个学习器来进行组合。Stacking为典型代表。实际上上面两种方法可以看做其中的特例。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;偏差方差与泛化误差&quot;&gt;偏差、方差与泛化误差&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;“偏差-方差分解”是解释学习算法泛化性能的一种重要工具。我们知道，算法在不同训练集上学得的结果可能不同，即便这些训练集来自同一分布。&lt;/li&gt;
&lt;li&gt;对测试样本&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;，令&lt;span class=&quot;math inline&quot;&gt;\(y_D\)&lt;/span&gt;为其在数据集D上的标记，&lt;span class=&quot;math inline&quot;&gt;\(y\)&lt;/span&gt;为其真实标记（因为由于噪声存在，会出现两者不等情况），&lt;span class=&quot;math inline&quot;&gt;\(f(x;D)\)&lt;/span&gt;为在训练集D上学得得模型&lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt;在&lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt;上的预测输出。&lt;/li&gt;
&lt;li&gt;由上有学习算法的期望预测&lt;span class=&quot;math display&quot;&gt;\[\bar f(x) = {{\rm E}_D}[f(x;D)]\]&lt;/span&gt;使用样本数相同的训练集产生的方差为&lt;span class=&quot;math display&quot;&gt;\[{\mathop{\rm var}} ( \cdot ) = {{\rm E}_D}[{(f(x;D) - \bar f(x))^2}]\]&lt;/span&gt;噪声满足&lt;span class=&quot;math display&quot;&gt;\[{\varepsilon ^2} = {{\rm E}_D}[{(\bar f(x) - {y_D})^2}]\]&lt;/span&gt;期望输出与真实标记的差别称为偏差,满足&lt;span class=&quot;math display&quot;&gt;\[bia{s^2}( \cdot ) = {(\bar f(x) - y)^2}\]&lt;/span&gt;为便于讨论，假定噪声期望为0，通过简单多项式计算，可对算法的期望泛华误差进行分解,最后得到&lt;span class=&quot;math display&quot;&gt;\[{\rm E}(f;D) = bia{s^2} + {\mathop{\rm var}} + {\varepsilon ^2}\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;回顾三者含义。&lt;strong&gt;偏差度量学习算法的期望预测与真实结果的偏离程度，即刻画了算法本身的拟合程度。方差度量了同样大小的训练集的变动导致的预测偏离期望预测的能力（单纯从训练集来说，好的算法应该是变动较小的），刻画了数据扰动造成的影响。噪声则表达了在当前任务上任何学习算法所能达到的期望泛化误差的下界，即刻画了学习问题本身的难度。偏差-方差分解说明，泛化性能由学习算法的能力，数据的充分性以及任务本身的难度共同决定。给定任务，为取得较好的泛化性能，则需偏差较小，即能充分拟合数据，并使方差较小，即使得数据扰动产生的误差较小。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一般来说，两者是有冲突的，称为“偏差-方差窘境”&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1453066/201809/1453066-20180919203153468-1219575055.png&quot;/&gt;&lt;/li&gt;
&lt;li&gt;偏差-方差分解，这种简单优美形式由[Geman et al., 1992]给出，仅在基于均方误差的回归任务中推导出，确实可以反映各种学习任务中的误差决定因素。对于分类任务，由于0/1损失函数跳变性，理论上推导出偏差-方差分解很难。但是已经有多种其他方法对偏差方差估计。&lt;/li&gt;
&lt;li&gt;从偏差-方差分解角度看，Boosting主要关注降低偏差，Bagging主要关注降低方差。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;关于集成学习的错误率分析以及研究核心&quot;&gt;关于集成学习的错误率分析以及研究核心&lt;/h3&gt;
&lt;p&gt;为便于分析，我们考虑二分类问题,正例为+1，负例为-1，真实函数为&lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt;，假定基分类器错误率为&lt;span class=&quot;math inline&quot;&gt;\(e\)&lt;/span&gt;，即对每个分类器&lt;span class=&quot;math inline&quot;&gt;\(G_i\)&lt;/span&gt;，有&lt;span class=&quot;math display&quot;&gt;\[P({G_i}(x) \ne f(x)) = e\]&lt;/span&gt;假设集成通过相对多数投票法结合T个分类器，因为二分类，那么超过半数学习器分类正确，集成分类器就正确，则集成分类器&lt;span class=&quot;math display&quot;&gt;\[G(x) = sign(\sum\limits_{i = 1}^T {{G_i}} (x))\]&lt;/span&gt;假设个体学习器错误率相互独立，则由Hoeffding不等式，&lt;span class=&quot;math display&quot;&gt;\[P(G(x) \ne f(x)) = \sum\limits_{i = 1}^{T/2} {\left( {\begin{array}{*{20}{c}} T\\ k \end{array}} \right)} {(1 - e)^k}{e^{T - k}} \le \exp ( - \frac{1}{2}T{(1 - 2e)^2})\]&lt;/span&gt;上式表明，随着个体学习器数目增大，集成错误率将指数级下降，最终趋于零。&lt;br/&gt;另外，我们注意到，上面的关键假设：学习器相互独立。实际上他们为解决同一问题训练出来的，显然不可能相互独立。事实上，个体学习器的准确性与多样性本身就存在冲突，如何产生并组合“好而不同”的学习器，恰恰是集成学习的研究核心。&lt;/p&gt;
</description>
<pubDate>Wed, 19 Sep 2018 13:28:00 +0000</pubDate>
<dc:creator>流影心</dc:creator>
<og:description>集成学习（ensemble learning） 集成学习通过构建多个个体学习器，然后再用某种策略将他们结合起来，产生一个有较好效果的强学习器来完成任务。基本原理如下图所示。这里主要有三个关键点：个体学</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lyxML/p/9670627.html</dc:identifier>
</item>
<item>
<title>搭建SpringBoot+dubbo+zookeeper+maven框架（四） - 王者之巅</title>
<link>http://www.cnblogs.com/gaopengfirst/p/9677604.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gaopengfirst/p/9677604.html</guid>
<description>&lt;p&gt; 今天我们完成框架的thymeleaf模板显示页面功能，页面的用户登陆，密码的AES加密解密，输错3次进行验证码验证功能，东西可能比较多，这个是我这两天在网上结合各种资源整合出来的，基本功能都已经实现，项目代码我会附在文章的最后面。&lt;/p&gt;&lt;p&gt;简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：&lt;/p&gt;&lt;p&gt;a、Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。&lt;/p&gt;&lt;p&gt;b、Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。&lt;/p&gt;&lt;p&gt;c、Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。&lt;/p&gt;&lt;div readability=&quot;168&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.thymeleaf&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;thymeleaf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;3.0&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.thymeleaf&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;thymeleaf-spring4&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;3.0&lt;/span&gt;.&lt;span&gt;9&lt;/span&gt;.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在customer模块的resources下创建static、templates文件夹，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919181009516-958274237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在static下放置一些页面样式的js和css，在templates文件夹下放置html页面，此时在resources下的application.properties配置文件中配置thymeleaf，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#thymelea模板配置
spring.thymeleaf.prefix&lt;/span&gt;=classpath:/templates/&lt;span&gt;
spring.thymeleaf.suffix&lt;/span&gt;=&lt;span&gt;.html
spring.thymeleaf.mode&lt;/span&gt;=&lt;span&gt;HTML5
spring.thymeleaf.encoding&lt;/span&gt;=UTF-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
#热部署文件，页面不产生缓存，及时更新
spring.thymeleaf.cache&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
spring.resources.chain.strategy.content.enabled&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
spring.resources.chain.strategy.content.paths&lt;/span&gt;=&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时thymeleaf模板就配置完成了。&lt;/p&gt;

&lt;p&gt;2.页面的用户登陆，AES加密解密：&lt;/p&gt;
&lt;p&gt;关于AES的加密解密，我的实现思路是：首先用户在浏览器中输入网址跳转到登录页面，此时在页面中已经保存了从后台传过来的key，该key值是后台随机生成的，后台session中保存key值，前台页面的隐藏框中也要保存key值，用于前端页面的密码加密以及后端的密码解密，页面刷新或用户名、密码输入错误时，都会重新生成新的key值来替换原有保存的key。&lt;/p&gt;
&lt;p&gt;首先在pom.xml中添加依赖：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.2&lt;/span&gt;.&lt;span&gt;28&lt;/span&gt;&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mvnrepository.com/artifact/commons-codec/commons-codec --&amp;gt;&lt;/span&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;&lt;span&gt;1.10&lt;/span&gt;&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用AES加密解密&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;a.前端加密用到的js有：aes.js和mode-ecb-min.js，就为了下载这两个js花了我30个积分呢，[/哭]，可以在static文件夹下创建一个aes文件夹，用于放置这两个js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;在templates下创建login.html，代码如下：&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!--&amp;lt;html xmlns:th=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.thymeleaf.org&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;--&amp;gt;
&amp;lt;html xmlns=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.w3.org/1999/xhtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; xmlns:th=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.thymeleaf.org&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      xmlns:sec&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.thymeleaf.org/thymeleaf-extras-springsecurity3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;welcome&amp;lt;/title&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../jquery/jquery-1.11.1.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../jquery/jquery.easyui.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../aes/aes.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;../aes/mode-ecb-min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!--&amp;lt;script th:src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@{jquery/jquery-1.11.1.min.js}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;script th:src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@{jquery/jquery-1.11.1.min.js}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;script th:src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@{jquery/jquery-1.11.1.min.js}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;script th:src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@{jquery/jquery-1.11.1.min.js}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;KEY&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; th:value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${model.loginToken}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;form action=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;signIn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; method=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginForm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group has-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
               onkeydown&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:if(event.keyCode==13) $('#password').focus();&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;glyphicon glyphicon-envelope form-control-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group has-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
               onkeydown&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:if(event.keyCode==13) login();&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;
        &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;glyphicon glyphicon-lock form-control-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;&lt;span&gt;
    [[${session.SESSION_LOGIN_FAILURE_COUNT}]]
    &lt;/span&gt;&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group has-feedback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; th:&lt;span&gt;if&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${session.SESSION_LOGIN_FAILURE_COUNT}&amp;lt;=0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onkeydown=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:if(event.keyCode==13)  login();&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; maxlength=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width:120px;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
        &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getValidateCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateCheckCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; align=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;middle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点击刷新验证码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getCode()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cursor: pointer;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkCodeSpan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: red;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;row&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-xs-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox icheck&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;label&amp;gt;
                &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkbox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;remember&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &amp;gt;&lt;span&gt;记住密码
            &lt;/span&gt;&amp;lt;/label&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;!-- /.col --&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;col-xs-4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;login()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-primary btn-block btn-flat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;登录&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;!-- /.col --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;script&amp;gt;&lt;span&gt;
    function login(){
        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,{
            onSubmit: function(param){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; username = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm input[name=username]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.trim(username)==&lt;span&gt;''&lt;/span&gt;&lt;span&gt;){
                    alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;账号不能为空！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm input[name=username]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).focus();
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; p = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.trim(p)==&lt;span&gt;''&lt;/span&gt;&lt;span&gt;){
                    alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;密码不能为空！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).focus();
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; checkCodeInput = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #checkCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(checkCodeInput.length&amp;gt;&lt;span&gt;0&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断元素是否存在&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; checkCode =&lt;span&gt; checkCodeInput.val();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($.trim(checkCode)==&lt;span&gt;''&lt;/span&gt; || checkCode.length!=&lt;span&gt;4&lt;/span&gt;&lt;span&gt; ){
                        alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请输入4位验证码！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                        checkCodeInput.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;();
                        checkCodeInput.focus();
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    }
                }
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; key = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#KEY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; alert(&quot;key的值是：  &quot;+key);&lt;/span&gt;
                key =&lt;span&gt; CryptoJS.enc.Utf8.parse(key);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; alert(&quot;加密后key的值是：  &quot;+key);&lt;/span&gt;
                p =&lt;span&gt; CryptoJS.enc.Utf8.parse($.trim(p));
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; encrypted =&lt;span&gt; CryptoJS.AES.encrypt(p, key, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});
                param.password &lt;/span&gt;=&lt;span&gt; encrypted.toString();
            },
            success:function(data){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; data = eval(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + data + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data.success){
                    window.location.href &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data.msg==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可能已经就登录了，无需再次登录&lt;/span&gt;
                        alert(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录超时或已经登录！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                        window.location.href &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;${request.contextPath}/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;==data.msg){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要验证码了&lt;/span&gt;
                        alert(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                        window.location.href &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;codeError&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;==data.msg){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证码错误&lt;/span&gt;
&lt;span&gt;                        getCode();
                        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#checkCodeSpan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;验证码错误&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #checkCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).&lt;span&gt;select&lt;/span&gt;&lt;span&gt;();
                        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#loginForm #checkCode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).focus();
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录失败，更新login_token&lt;/span&gt;
                        $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#KEY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val(data.data);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#checkCodeSpan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)){
                            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#checkCodeSpan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text(&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
                        }
                        alert(data.msg);
                    }
                }
            },

        }) ;
    }

    function getCode(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; img = document.getElementById(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateCheckCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        img.src &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getValidateCode?nocache=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; $(&quot;#CreateCheckCode&quot;).attr('src',&quot;getValidateCode?nocache=&quot; + new Date().getTime());&lt;/span&gt;
&lt;span&gt;    }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有一个坑，就是在html页面中引入js的时候路径的问题，可以看到我在页面中是这样写的：&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../jquery/jquery-1.11.1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;，但是你仔细看应该是&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../static/jquery/jquery-1.11.1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;才对，为什么会少一个static呢，这是因为thymeleaf模板本身引入js时的路径就是默认在static下的，要是加上static反而页面会报js404错误，不信大家可以试试看。&lt;/p&gt;
&lt;pre&gt;
var key = $('#KEY'&lt;span&gt;).val();
 // alert(&quot;key的值是：  &quot;+key);
key =&lt;span&gt; CryptoJS.enc.Utf8.parse(key);
// alert(&quot;加密后key的值是：  &quot;+key);
p =&lt;span&gt; CryptoJS.enc.Utf8.parse($.trim(p));
var encrypted =&lt;span&gt; CryptoJS.AES.encrypt(p, key, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});
param.password =&lt;span&gt; encrypted.toString();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码就是通过AES将用户输入的明文密码和后台传过来的key加密成密文，放到input框中提交到后台。&lt;/p&gt;
&lt;p&gt;b.后台生成随机的key值，并将前台传过来的密文解密成明文密码，&lt;/p&gt;
&lt;p&gt;这里要在common模块中写几个工具类：EncryptUtil用于密码的加密解密，Helper用于记录一些常量，RandomUtil用于随机生成key值，Result用于向前台返回一个结果对象，样式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919202334580-866900058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;工具类代码如下：&lt;/p&gt;
&lt;p&gt;EncryptUtil：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

import sun.misc.BASE64Decoder;

import java.security.SecureRandom;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 17:30
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EncryptUtil {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String KEY = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcdefgabcdefg12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String ALGORITHMSTR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES/ECB/PKCS5Padding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String base64Encode(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] bytes){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Base64.encodeBase64String(bytes);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] base64Decode(String base64Code) throws Exception{
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BASE64Decoder().decodeBuffer(base64Code);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] aesEncryptToBytes(String content, String encryptKey) throws Exception {
        KeyGenerator kgen &lt;/span&gt;= KeyGenerator.getInstance(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        kgen.init(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;);
        Cipher cipher &lt;/span&gt;=&lt;span&gt; Cipher.getInstance(ALGORITHMSTR);
        cipher.init(Cipher.ENCRYPT_MODE, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SecretKeySpec(encryptKey.getBytes(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; cipher.doFinal(content.getBytes(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String aesEncrypt(String content, String encryptKey) throws Exception {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; base64Encode(aesEncryptToBytes(content, encryptKey));
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String aesDecryptByBytes(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] encryptBytes, String decryptKey) throws Exception {
        KeyGenerator kgen &lt;/span&gt;= KeyGenerator.getInstance(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        SecureRandom secureRandom &lt;/span&gt;= SecureRandom.getInstance(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SHA1PRNG&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
        secureRandom.setSeed(decryptKey.getBytes());
        kgen.init(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;&lt;span&gt;,secureRandom);

        Cipher cipher &lt;/span&gt;=&lt;span&gt; Cipher.getInstance(ALGORITHMSTR);
        cipher.init(Cipher.DECRYPT_MODE, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; SecretKeySpec(decryptKey.getBytes(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] decryptBytes =&lt;span&gt; cipher.doFinal(encryptBytes);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(decryptBytes);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String aesDecrypt(String encryptStr, String decryptKey) throws Exception {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; aesDecryptByBytes(base64Decode(encryptStr), decryptKey);
    }


    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 测试
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) throws Exception {

        String content &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Test String么么哒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0gqIDaFNAAmwvv3tKsFOFf9P9m/6MWlmtB8SspgxqpWKYnELb/lXkyXm7P4sMf3e&lt;/span&gt;
        System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加密前：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; content);

        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加密密钥和解密密钥：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; KEY);

        String encrypt &lt;/span&gt;=&lt;span&gt; aesEncrypt(content, KEY);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(encrypt.length()+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:加密后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; encrypt);

        String decrypt &lt;/span&gt;=&lt;span&gt; aesDecrypt(encrypt, KEY);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;解密后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; decrypt);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Helper:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 17:08
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Helper {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String SESSION_CHECKCODE = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_CHECKCODE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String SESSION_LOGIN_TOKEN = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_LOGIN_TOKEN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String SESSION_USER = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_USER&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String SESSION_LOGIN_FAILURE_COUNT = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SESSION_LOGIN_FAILURE_COUNT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String logTypeSecurity = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logTypeSecurity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final Integer COUNT = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RandomUtil:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

import java.util.Random;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 17:22
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RandomUtil {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String ALLCHAR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String LETTERCHAR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcdefghijkllmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; final String NUMBERCHAR = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0123456789&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 返回一个定长的随机字符串(只包含大小写字母、数字)
     *
     * @param length
     *            随机字符串长度
     * @return 随机字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        Random random &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
            sb.append(ALLCHAR.charAt(random.nextInt(ALLCHAR.length())));
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 返回一个定长的随机纯字母字符串(只包含大小写字母)
     *
     * @param length
     *            随机字符串长度
     * @return 随机字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateMixString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        Random random &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
            sb.append(LETTERCHAR.charAt(random.nextInt(LETTERCHAR.length())));
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 返回一个定长的随机纯大写字母字符串(只包含大小写字母)
     *
     * @param length
     *            随机字符串长度
     * @return 随机字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateLowerString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; generateMixString(length).toLowerCase();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 返回一个定长的随机纯小写字母字符串(只包含大小写字母)
     *
     * @param length
     *            随机字符串长度
     * @return 随机字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateUpperString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; generateMixString(length).toUpperCase();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 生成一个定长的纯0字符串
     *
     * @param length
     *            字符串长度
     * @return 纯0字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String generateZeroString(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; length) {
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++&lt;span&gt;) {
            sb.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 根据数字生成一个定长的字符串，长度不够前面补0
     *
     * @param num
     *            数字
     * @param fixdlenth
     *            字符串长度
     * @return 定长的字符串
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String toFixdLengthString(&lt;span&gt;long&lt;/span&gt; num, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fixdlenth) {
        StringBuffer sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        String strNum &lt;/span&gt;=&lt;span&gt; String.valueOf(num);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fixdlenth - strNum.length() &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
            sb.append(generateZeroString(fixdlenth &lt;/span&gt;-&lt;span&gt; strNum.length()));
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;将数字&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + num + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;转化为长度为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; fixdlenth
                    &lt;/span&gt;+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;的字符串发生异常！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        sb.append(strNum);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sb.toString();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 每次生成的len位数都不相同
     *
     * @param param
     * @return 定长的数字
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getNotSimple(&lt;span&gt;int&lt;/span&gt;[] param, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; len) {
        Random rand &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = param.length; i &amp;gt; &lt;span&gt;1&lt;/span&gt;; i--&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index =&lt;span&gt; rand.nextInt(i);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; tmp =&lt;span&gt; param[index];
            param[index] &lt;/span&gt;= param[i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
            param[i &lt;/span&gt;- &lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; tmp;
        }
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; result = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; len; i++&lt;span&gt;) {
            result &lt;/span&gt;= result * &lt;span&gt;10&lt;/span&gt; +&lt;span&gt; param[i];
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

import java.util.Date;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 18:26
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Result {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Boolean success;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String msg;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String key;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Boolean getSuccess() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; success;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setSuccess(Boolean success) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.success =&lt;span&gt; success;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getMsg() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; msg;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setMsg(String msg) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.msg =&lt;span&gt; msg;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getKey() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; key;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setKey(String key) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result(Boolean b, String s){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.success =&lt;span&gt; b;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.msg =&lt;span&gt; s;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result(Boolean b, String s, String k){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.success =&lt;span&gt; b;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.msg =&lt;span&gt; s;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; k;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;在customer模块中的controller中拦截/login和/signIn路径的代码如下：&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    @GetMapping(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ModelAndView login(HttpServletResponse response, HttpServletRequest request, Model model){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成login_token&lt;/span&gt;
&lt;span&gt;
        HttpSession session &lt;/span&gt;=&lt;span&gt; request.getSession();
        String key &lt;/span&gt;= RandomUtil.generateString(&lt;span&gt;16&lt;/span&gt;&lt;span&gt;);
        session.setAttribute(Helper.SESSION_LOGIN_TOKEN, key);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录令牌，用于密码加密的key，16位长度&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(session.getAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            session.setAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT, Helper.COUNT);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录剩余失败次数&lt;/span&gt;
&lt;span&gt;        }
        model.addAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginToken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,key);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;传到前台的key值为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt; key);
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;页面跳转到login.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        return &quot;login&quot;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if(session.getAttribute(Helper.SESSION_USER) == null){&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ModelAndView(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,model);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        else
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            return &quot;redirect:/&quot;;&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
    @PostMapping(value = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;signIn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    @ResponseBody
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String signIn(String username,String password,boolean remember,String checkCode,HttpServletRequest request, HttpServletResponse response){
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(username+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+password+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+remember+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;checkCode);
        HttpSession session &lt;/span&gt;=&lt;span&gt; request.getSession();
        Object token &lt;/span&gt;= session.getAttribute(Helper.SESSION_LOGIN_TOKEN);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原始令牌&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt;(token==&lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录成功后token失效，则页面失效，客户端需要重定向到主界面&lt;/span&gt;
        Object countObj =&lt;span&gt; session.getAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT);
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count = countObj==&lt;span&gt;null&lt;/span&gt;?&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:Integer.parseInt(countObj.toString());
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;剩余次数：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;count);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证码逻辑&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(count&amp;lt;=&lt;span&gt;0&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要验证码&lt;/span&gt;
            Object oldCode =&lt;span&gt; session.getAttribute(Helper.SESSION_CHECKCODE);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(checkCode==&lt;span&gt;null&lt;/span&gt;||oldCode==&lt;span&gt;null&lt;/span&gt;){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该登录界面没有验证码字段，但是已经消耗掉了剩余次数，说明该页面是过期页面，需要重新登录&lt;/span&gt;
                System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chaoshila&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端需要重定向到主界面&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(checkCode.trim().isEmpty()) &lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入验证码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(oldCode.toString().equalsIgnoreCase(checkCode)){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证通过，可信客户端，给0次剩余次数&lt;/span&gt;
                count=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                session.setAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT,count);
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;codeError&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证码不正确，客户端需要刷新验证码&lt;/span&gt;
&lt;span&gt;            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            password &lt;/span&gt;= EncryptUtil.aesDecrypt(password,token.toString());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密后&lt;/span&gt;
            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Decrypt:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;password);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端需要重定向到主界面&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录校验&lt;/span&gt;
        String loginKey = RandomUtil.generateString(&lt;span&gt;16&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新生成登录令牌,任何登录失败的操作都需要更新登录令牌&lt;/span&gt;
        User user =  &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            session.setAttribute(Helper.SESSION_LOGIN_TOKEN,loginKey);
            session.setAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT,&lt;/span&gt;--count);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;剩余次数-1&lt;/span&gt;
            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;剩余次数：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; session.getAttribute(Helper.SESSION_LOGIN_FAILURE_COUNT));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if(count&amp;lt;=0) return JSON.toJSONString(new Result(false,&quot;checkCode&quot;,loginKey));&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端需要重定向到登录界面将验证码显示出来&lt;/span&gt;
            System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这里直接要返回了！！！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Result result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,loginKey);
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result对象的值是：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; result.getKey());
            System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.println(JSON.toJSONString(result));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名或密码错误！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,loginKey));
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            if(user.getUserid()!=ConfigInfo.admin_id &amp;amp;&amp;amp; !user.getuStatus().equals(ConfigInfo.user_status_normal)) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                session.setAttribute(Helper.SESSION_LOGIN_TOKEN,key);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                return JSON.toJSONString(new Result(false,&quot;登录失败，该账号已被禁止使用！&quot;,key));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;登录成功&lt;/span&gt;
&lt;span&gt;            session.removeAttribute(Helper.SESSION_LOGIN_TOKEN);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            loginUser = user;&lt;/span&gt;
&lt;span&gt;            session.setAttribute(Helper.SESSION_USER,user);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            sysEventService.insertEventLog(Helper.logTypeSecurity,username+&quot; 登录系统&quot;);&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; JSON.toJSONString(&lt;span&gt;new&lt;/span&gt; Result(&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre readability=&quot;6&quot;&gt;
上面生成key以及解密的部分都有注解，应该能看懂的。&lt;p&gt;c.&lt;span&gt;输错3次显示验证码&lt;br/&gt;&lt;/span&gt;这里要实现验证码功能，首先要在common中写一个工具类，用于生成验证码，代码如下：
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;94&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.lj.common.util;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Random;

import javax.imageio.ImageIO;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * Created with IntelliJ IDEA.
 * User: gaopeng
 * Date: 2018/9/17 0017
 * Time: 16:57
 * Description:
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ValidateCode {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图片的宽度。&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; width = &lt;span&gt;160&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图片的高度。&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; height = &lt;span&gt;28&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码字符个数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; codeCount = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码干扰线数&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; lineCount = &lt;span&gt;150&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String code = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码图片Buffer&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; BufferedImage buffImg = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[] codeSequence = { &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; };

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValidateCode() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createCode();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     *
     * @param width
     *            图片宽
     * @param height
     *            图片高
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ValidateCode(&lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; height) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.width =&lt;span&gt; width;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.height =&lt;span&gt; height;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createCode();
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     *
     * @param width
     *            图片宽
     * @param height
     *            图片高
     * @param codeCount
     *            字符个数
     * @param lineCount
     *            干扰线条数
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; ValidateCode(&lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt; height, &lt;span&gt;int&lt;/span&gt; codeCount, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; lineCount) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.width =&lt;span&gt; width;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.height =&lt;span&gt; height;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.codeCount =&lt;span&gt; codeCount;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.lineCount =&lt;span&gt; lineCount;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createCode();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; createCode() {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;, fontHeight = &lt;span&gt;0&lt;/span&gt;, codeY = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; red = &lt;span&gt;0&lt;/span&gt;, green = &lt;span&gt;0&lt;/span&gt;, blue = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

        x &lt;/span&gt;= width / (codeCount + &lt;span&gt;2&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每个字符的宽度&lt;/span&gt;
        fontHeight = height - &lt;span&gt;2&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字体的高度&lt;/span&gt;
        codeY = height - &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图像buffer&lt;/span&gt;
        buffImg = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g &lt;/span&gt;=&lt;span&gt; buffImg.createGraphics();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生成随机数&lt;/span&gt;
        Random random = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将图像填充为白色&lt;/span&gt;
&lt;span&gt;        g.setColor(Color.WHITE);
        g.fillRect(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, width, height);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建字体&lt;/span&gt;
        Font font = &lt;span&gt;new&lt;/span&gt; Font(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Fixedsys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Font.BOLD, fontHeight);
        g.setFont(font);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;干扰线&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; lineCount; i++&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; xs =&lt;span&gt; random.nextInt(width);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ys =&lt;span&gt; random.nextInt(height);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; xe = xs + random.nextInt(width / &lt;span&gt;8&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ye = ys + random.nextInt(height / &lt;span&gt;8&lt;/span&gt;&lt;span&gt;);
            red &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            green &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            blue &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            g.setColor(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Color(red, green, blue));
            g.drawLine(xs, ys, xe, ye);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; randomCode记录随机产生的验证码&lt;/span&gt;
        StringBuffer randomCode = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 随机产生codeCount个字符的验证码。&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; codeCount; i++&lt;span&gt;) {
            String strRand &lt;/span&gt;=&lt;span&gt; String.valueOf(codeSequence[random.nextInt(codeSequence.length)]);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 产生随机的颜色值，让输出的每个字符的颜色值都将不同。&lt;/span&gt;
            red = random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            green &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            blue &lt;/span&gt;= random.nextInt(&lt;span&gt;255&lt;/span&gt;&lt;span&gt;);
            g.setColor(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Color(red, green, blue));
            g.drawString(strRand, (i &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt;) *&lt;span&gt; x, codeY);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将产生的四个随机数组合在一起。&lt;/span&gt;
&lt;span&gt;            randomCode.append(strRand);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将四位数字的验证码保存到Session中。&lt;/span&gt;
        code =&lt;span&gt; randomCode.toString();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; write(String path) throws IOException {
        OutputStream sos &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileOutputStream(path);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.write(sos);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; write(OutputStream sos) throws IOException {
        ImageIO.write(buffImg, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, sos);
        sos.close();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BufferedImage getBuffImg() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; buffImg;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCode() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; code;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
在customer模块中的controller，编写拦截/getValidateCode路径的请求，用于生成验证码，代码如下：
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
 @GetMapping(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getValidateCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getValidateCode(HttpServletRequest reqeust, HttpServletResponse response) throws IOException {
        response.setContentType(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image/jpeg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 禁止图像缓存。&lt;/span&gt;
        response.setHeader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Pragma&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no-cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        response.setHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cache-Control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no-cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        response.setDateHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Expires&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

        HttpSession session &lt;/span&gt;=&lt;span&gt; reqeust.getSession();

        ValidateCode vCode &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ValidateCode(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;28&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
        session.setAttribute(Helper.SESSION_CHECKCODE, vCode.getCode());
        vCode.write(response.getOutputStream());
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;验证码在3次输入错误用户名密码后启动的逻辑代码在上面都已经贴出来了，这个3次是存储在session中的，前台页面要通过获取session中的“可输入错误剩余次数SESSION_LOGIN_FAILURE_COUNT”来判断&lt;/p&gt;
&lt;p&gt;至此，页面的用户登陆，密码的AES加密解密，输错3次进行验证码验证功能。演示效果如下：&lt;/p&gt;
&lt;p&gt;第一次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919205508529-1454803281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919205637091-152215797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三次：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919205708035-545752487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三次以后的页面就有验证码了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1203840/201809/1203840-20180919205747421-1913339989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是该项目的源码下载地址：https://download.csdn.net/download/weixin_38340967/10677372&lt;/p&gt;
&lt;p&gt;文章参考文献：https://www.cnblogs.com/nicknailo/p/8947643.html&lt;/p&gt;
&lt;p&gt;http://itfish.net/article/64414.html&lt;/p&gt;





&lt;pre&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Wed, 19 Sep 2018 13:04:00 +0000</pubDate>
<dc:creator>王者之巅</dc:creator>
<og:description>今天我们完成框架的thymeleaf模板显示页面功能，页面的用户登陆，密码的AES加密解密，输错3次进行验证码验证功能，东西可能比较多，这个是我这两天在网上结合各种资源整合出来的，基本功能都已经实现，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gaopengfirst/p/9677604.html</dc:identifier>
</item>
</channel>
</rss>