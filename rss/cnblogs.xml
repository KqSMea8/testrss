<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>[C#]使用 C# 代码实现拓扑排序 - myzony</title>
<link>http://www.cnblogs.com/myzony/p/9201768.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/myzony/p/9201768.html</guid>
<description>&lt;h2 id=&quot;参考资料&quot;&gt;0.参考资料：&lt;/h2&gt;
&lt;p&gt;尊重他人的劳动成果，贴上参考的资料地址，本文仅作学习记录之用。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/869059/Topological-sorting-in-Csharp&quot; class=&quot;uri&quot;&gt;https://www.codeproject.com/Articles/869059/Topological-sorting-in-Csharp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://songlee24.github.io/2015/05/07/topological-sorting/&quot; class=&quot;uri&quot;&gt;https://songlee24.github.io/2015/05/07/topological-sorting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/skywang12345/p/3711483.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/skywang12345/p/3711483.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;介绍&quot;&gt;1.介绍&lt;/h2&gt;
&lt;p&gt;自己之前并没有接触过拓扑排序，顶多听说过拓扑图。在写前一篇文章的时候，看到 Abp 框架在处理模块依赖项的时候使用了拓扑排序，来确保顶级节点始终是最先进行加载的。第一次看到觉得很神奇，看了一下维基百科头也是略微大，自己的水平也是停留在冒泡排序的层次。ヽ(≧□≦)ノ&lt;/p&gt;
&lt;p&gt;看了第二篇参考资料才大致了解，在此记录一下。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;2.原理&lt;/h2&gt;
&lt;p&gt;先来一个基本定义：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在图论中，&lt;strong&gt;拓扑排序（Topological Sorting）&lt;/strong&gt;是一个&lt;strong&gt;有向无环图（DAG, Directed Acyclic Graph）&lt;/strong&gt;的所有顶点的线性序列。且该序列必须满足下面两个条件：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;每个顶点出现且只出现一次。&lt;/li&gt;
&lt;li&gt;若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;有向无环图（DAG）才有拓扑排序，非DAG图没有拓扑排序一说。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，有一个集合它的依赖关系如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619194108192-15185462.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到他有一个依赖关系:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Module D 依赖于 Module E 与 Module B 。&lt;/li&gt;
&lt;li&gt;Module E 依赖于 Module B 与 Module C 。&lt;/li&gt;
&lt;li&gt;Module B 依赖于 Module A 与 Module C 。&lt;/li&gt;
&lt;li&gt;Module C 依赖于 Module A 。&lt;/li&gt;
&lt;li&gt;Module A 无依赖 。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这个就是一个 DAG 图，我们要得到它的拓扑排序，一个简单的步骤如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;从 DAG 图中选择一个没有前驱的顶点并输出。&lt;/li&gt;
&lt;li&gt;从 DAG 图中删除该顶点，以及以它为起点的有向边。&lt;/li&gt;
&lt;li&gt;重复步骤 1、2 直到当前的 DAG 图为空，或者&lt;strong&gt;当前图不存在无前驱的顶点为止&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;按照以上步骤，我们来进行一个排序试试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619194049989-1696515519.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后的排序结果就是：&lt;/p&gt;
&lt;p&gt;Module D -&amp;gt; Module E -&amp;gt; Module B -&amp;gt; Module C -&amp;gt; Module A&lt;/p&gt;
&lt;p&gt;emmmm，其实一个有向无环图可以有一个或者多个拓扑序列的，因为有的时候会存在一种情况，即以下这种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619194028400-547074994.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个时候你就可能会有这两种结果&lt;/p&gt;
&lt;p&gt;D-&amp;gt;E-&amp;gt;B-&amp;gt;C-&amp;gt;F-&amp;gt;A&lt;/p&gt;
&lt;p&gt;D-&amp;gt;E-&amp;gt;B-&amp;gt;F-&amp;gt;C-&amp;gt;A&lt;/p&gt;
&lt;p&gt;因为 F 与 C 是平级的，他们初始化顺序即便不同也没有什么影响，因为他们的依赖层级是一致的，不过细心的朋友可能会发现这个顺序好像是反的，我们还需要将其再反转一次。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;3.实现&lt;/h2&gt;
&lt;p&gt;上面这种方法仅适用于已知入度的时候，也就是说这些内容本身就是存在于一个有向无环图之中的，如果按照以上方法进行拓扑排序，你需要维护一个入度为 0 的队列，然后每次迭代移除入度为 0 顶点所指向的顶点入度。&lt;/p&gt;
&lt;p&gt;例如有以下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150507013500102&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照我们之前的算法，&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先初始化队列，将 5 与 4 这两个入度为 0 的顶点加入队列当中。&lt;/li&gt;
&lt;li&gt;执行 While 循环，条件是队列不为空。&lt;/li&gt;
&lt;li&gt;之后首先拿出 4 。&lt;/li&gt;
&lt;li&gt;然后针对其指向的顶点 0 与 顶点 1 的入度减去 1。&lt;/li&gt;
&lt;li&gt;减去指向顶点入度的时候同时判断，被减去入度的顶点其值是否为 0 。&lt;/li&gt;
&lt;li&gt;这里 1 入度被减去 1 ，为 0 ，添加到队列。&lt;/li&gt;
&lt;li&gt;0 顶点入度减去 1 ，为 1。&lt;/li&gt;
&lt;li&gt;队列现在有 5 与 1 这两个顶点，循环判断队列不为空。&lt;/li&gt;
&lt;li&gt;5 指向的顶点 0 入度 减去 1，顶点 0 入度为 0 ，插入队列。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这样反复循环，最终队列全部清空，退出循环，得到拓扑排序的结果4, 5, 2, 0, 3, 1 。&lt;/p&gt;
&lt;h2 id=&quot;深度优先搜索实现&quot;&gt;4.深度优先搜索实现&lt;/h2&gt;
&lt;p&gt;在参考资料 1 的代码当中使用的是深度优先算法，它适用于有向无环图。&lt;/p&gt;
&lt;p&gt;有以下有向环图 G2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619194001423-230423212.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对上图 G2 进行深度优先遍历，首先从入度为 0 的顶点 A 开始遍历：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619193939057-1751239089.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;它的步骤如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;访问 A 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问 B 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问 C 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在访问了 B 后应该是访问 B 的另外一个顶点，这里可以是随机的也可以是有序的，具体取决于你存储的序列顺序，这里先访问 C 。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;访问 E 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问 D 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里访问 D 是因为 B 已经被访问过了，所以访问顶点 D 。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;访问 F 。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;因为顶点 C 已经被访问过，所以应该回溯访问顶点 B 的另一个有向边指向的顶点 F 。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;访问 G 。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;因此最后的访问顺序就是 A -&amp;gt; B -&amp;gt; C -&amp;gt; E -&amp;gt; D -&amp;gt; F -&amp;gt; G ，注意顺序还是不太对哦。&lt;/p&gt;
&lt;p&gt;看起来跟之前的方法差不多，实现当中，其 &lt;code&gt;Sort()&lt;/code&gt; 方法内部包含一个 visited 字典，用于标记已经访问过的顶点，sorted 则是已经排序完成的集合列表。&lt;/p&gt;
&lt;p&gt;在字典里 Key 是顶点的值，其 value 值用来标识是否已经访问完所有路径，为 &lt;code&gt;true&lt;/code&gt; 则表示正在处理该顶点，为 &lt;code&gt;false&lt;/code&gt; 则表示已经处理完成。&lt;/p&gt;
&lt;p&gt;现在我们来写实现吧：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public static IList&amp;lt;T&amp;gt; Sort&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; source, Func&amp;lt;T, IEnumerable&amp;lt;T&amp;gt;&amp;gt; getDependencies)
{
    var sorted = new List&amp;lt;T&amp;gt;();
    var visited = new Dictionary&amp;lt;T, bool&amp;gt;();

    foreach (var item in source)
    {
        Visit(item, getDependencies, sorted, visited);
    }

    return sorted;
}

public static void Visit&amp;lt;T&amp;gt;(T item, Func&amp;lt;T, IEnumerable&amp;lt;T&amp;gt;&amp;gt; getDependencies, List&amp;lt;T&amp;gt; sorted, Dictionary&amp;lt;T, bool&amp;gt; visited)
{
    bool inProcess;
    var alreadyVisited = visited.TryGetValue(item, out inProcess);

    // 如果已经访问该顶点，则直接返回
    if (alreadyVisited)
    {
        // 如果处理的为当前节点，则说明存在循环引用
        if (inProcess)
        {
            throw new ArgumentException(&quot;Cyclic dependency found.&quot;);
        }
    }
    else
    {
        // 正在处理当前顶点
        visited[item] = true;

        // 获得所有依赖项
        var dependencies = getDependencies(item);
        // 如果依赖项集合不为空，遍历访问其依赖节点
        if (dependencies != null)
        {
            foreach (var dependency in dependencies)
            {
                // 递归遍历访问
                Visit(dependency, getDependencies, sorted, visited);
            }
        }

        // 处理完成置为 false
        visited[item] = false;
        sorted.Add(item);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;顶点定义：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;// Item 定义
public class Item
{
    // 条目名称
    public string Name { get; private set; }
    // 依赖项
    public Item[] Dependencies { get; set; }

    public Item(string name, params Item[] dependencies)
    {
        Name = name;
        Dependencies = dependencies;
    }

    public override string ToString()
    {
        return Name;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;调用：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;static void Main(string[] args)
{
    var moduleA = new Item(&quot;Module A&quot;);
    var moduleC = new Item(&quot;Module C&quot;, moduleA);
    var moduleB = new Item(&quot;Module B&quot;, moduleC);
    var moduleE = new Item(&quot;Module E&quot;, moduleB);
    var moduleD = new Item(&quot;Module D&quot;, moduleE);

    var unsorted = new[] { moduleE, moduleA, moduleD, moduleB, moduleC };

    var sorted = Sort(unsorted, x =&amp;gt; x.Dependencies);

    foreach (var item in sorted)
    {
        Console.WriteLine(item.Name);
    }

    Console.ReadLine();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1203160/201806/1203160-20180619193858972-1653336197.gif&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 23:09:00 +0000</pubDate>
<dc:creator>myzony</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/myzony/p/9201768.html</dc:identifier>
</item>
<item>
<title>django2 用iframe标签完成 网页内嵌播放b站视频功能 - 雪落忆海</title>
<link>http://www.cnblogs.com/xuepangzi/p/9201941.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuepangzi/p/9201941.html</guid>
<description>&lt;p&gt;　　给自己的网站中加入视频资源，有两种方法，一种是用iframe标签引用外站资源，另一种则使用video标签，获取站内资源进行视频播放。其中前者顾名思义，是将视频资源上传到视频网站中，然后通过引用的方式在站内播放视频，这种方法适用于视频资源内容公开免费，且不想花钱购买七牛云空间的开发者，毕竟是免费的嘛！而后者，则是需要有云空间存放视频资源才可以，不过后者的好处是，可以用于视频付费内容的开发。&lt;/p&gt;
&lt;p&gt;　　今天恰好遇到了给自己要开发的项目，加一段视频新闻公告的需求！既然是新闻公告内容，当然是不需要加密的了。所以，也就没有必要花钱搞个云空间了。果断选择第一种，使用iframe标签的方式来实现网页内嵌播放视频方式来开发！&lt;/p&gt;

&lt;p&gt;1.爱奇艺的视频加广告加得简直丧心病狂，像老太太的裹脚布又臭又长，垃圾，不用！&lt;/p&gt;
&lt;p&gt;2.腾讯视频的视频也加广告，虽然广告没有那么长，但是很阴险的是，如果视频超过十几分钟，就会无法在引用视频的网站播放，被强制要求转去腾讯视频才可以看，简直狼子野心，垃圾中的垃圾，不用！&lt;/p&gt;
&lt;p&gt;3.bilibili，也就是传说中的b站，不但视频没有广告（引导型广告还是有的，但是不影响观看，不是那种不看完广告不让看视频的霸王硬广），没有玩儿阴的强制跳转去他家网站，还高清无码有弹幕，选b站！&lt;/p&gt;

&lt;h2&gt;1.在template目录下的index.html中加入跟视频引用相关的代码：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;视频 S&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;videoCon&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color: orangered&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;新闻公告&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;videoF&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;这里填入从b站随机挑选一个视频，然后获取的引用代码&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;iframe &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;//player.bilibili.com/player.html?aid=24841101&amp;amp;cid=41877807&amp;amp;page=1&quot;&lt;/span&gt;&lt;span&gt; 
scrolling&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt;&lt;span&gt; border&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; frameborder&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt;&lt;span&gt; framespacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; allowfullscreen&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!----&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;视频 E&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.获取b站的视频引用相关代码（随机挑选一个b站视频，进入视频播放页）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180620012149554-72213298.png&quot; alt=&quot;&quot; width=&quot;756&quot; height=&quot;473&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.django网页中的效果图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180620012343733-1125642516.png&quot; alt=&quot;&quot; width=&quot;673&quot; height=&quot;408&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;1.在models.py中（一般嵌入代码长度不会超过300，在150——300之间）&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Bili(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;新闻相关视频&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    new&lt;/span&gt;=models.ForeignKey(News,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;新闻公告&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    is_topline&lt;/span&gt;=models.BooleanField(default=False,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否是头条&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    bili&lt;/span&gt;=models.CharField(verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;视频嵌入代码&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=300&lt;span&gt;)
    add_time &lt;/span&gt;= models.DateTimeField(default=datetime.now, verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;新闻相关视频&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.new.title
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;打开Terminal终端，执行数据更新命令：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;python manage.py makemigrations
python manage.py migrate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.在adminx.py中注册&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; News,Bili

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; NewsAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click_num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    search_fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click_num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,]
    list_filter &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click_num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    style_fields&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ueditor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}


&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注册代码&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BiliAdmin(object):
    list_display &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_topline&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    search_fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_topline&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    list_filter &lt;/span&gt;=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_topline&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]


xadmin.site.register(News, NewsAdmin)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;注册代码&lt;/span&gt;
xadmin.site.register(Bili, BiliAdmin)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.可以在xadmin后台进行多个视频嵌入代码的填入&lt;/h2&gt;
&lt;h3&gt;随机在b站找的三个视频的嵌入代码：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;iframe &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;//player.bilibili.com/player.html?aid=24687507&amp;amp;cid=41510047&amp;amp;page=1&quot;&lt;/span&gt;&lt;span&gt; scrolling&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt;&lt;span&gt; 
border&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; frameborder&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt;&lt;span&gt; framespacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; allowfullscreen&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;iframe &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;//player.bilibili.com/player.html?aid=22025564&amp;amp;cid=36402353&amp;amp;page=1&quot;&lt;/span&gt;&lt;span&gt; scrolling&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt;&lt;span&gt; 
border&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; frameborder&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt;&lt;span&gt; framespacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; allowfullscreen&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;iframe &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;//player.bilibili.com/player.html?aid=17766502&amp;amp;cid=29007139&amp;amp;page=1&quot;&lt;/span&gt;&lt;span&gt; scrolling&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt;&lt;span&gt; 
border&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; frameborder&lt;/span&gt;&lt;span&gt;=&quot;no&quot;&lt;/span&gt;&lt;span&gt; framespacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; allowfullscreen&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180620021255691-1495644161.png&quot; alt=&quot;&quot; width=&quot;828&quot; height=&quot;339&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180620022327117-711900534.png&quot; alt=&quot;&quot; width=&quot;696&quot; height=&quot;297&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.在views.py中：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; News,Bili


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; NewView(View):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;新闻公告详情&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(self,request,new_id):
        new&lt;/span&gt;=News.objects.filter(id=&lt;span&gt;new_id).first()
        new.click_num&lt;/span&gt;+=1

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据新闻公告的不同，显示与之关联的视频&lt;/span&gt;
        bili=Bili.objects.filter(new=&lt;span&gt;new).last()

        new.save()
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;news-base.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:new,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bili&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:bili})


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; IndexView(View):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;首页&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(self,request):
        all_news&lt;/span&gt;=News.objects.all().order_by(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-add_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

        p &lt;/span&gt;= Paginator(all_news, 20&lt;span&gt;)
        page &lt;/span&gt;= request.GET.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 1&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            news &lt;/span&gt;=&lt;span&gt; p.page(int(page))
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; PageNotAnInteger:
            news &lt;/span&gt;= p.page(1&lt;span&gt;)
            
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;首页播放被标记为头条的最后一部视频&lt;/span&gt;
        bili=Bili.objects.filter(is_topline=&lt;span&gt;True).last()

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;news&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:news,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bili&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:bili})
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5.改写Template目录下的index.html（首页）和new-base.html（新闻模板页）&lt;/h2&gt;
&lt;h3&gt;index.html&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;视频 S&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;videoCon&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color: orangered&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;新闻公告&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;videoF&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{ bili.bili|safe }}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;视频 E&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;new-base.html&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;视频 S&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;videoCon&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;color: orangered&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ new.title }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;videoF&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{ bili.bili|safe }}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;视频 E&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6.效果图&lt;/h2&gt;
&lt;h3&gt;新闻详情页&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180620024427685-1189191904.png&quot; alt=&quot;&quot; width=&quot;670&quot; height=&quot;425&quot;/&gt;&lt;/p&gt;

&lt;h3&gt; 首页&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180620024716019-691989847.png&quot; alt=&quot;&quot; width=&quot;664&quot; height=&quot;368&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　这个功能其实还是挺简单的，技术上没有什么可总结的，只不过我在随机在b站找几个视频，发现基本上所有的视频内容吧，都挺令人担忧的，b站作为体现年轻人喜好的一个网站，其中内容全都是以低俗，谄媚，秀下限，恶趣味，宅腐文化为主旋律的，作为一个90后，不禁叹息，00后真是垮掉的一代啊啊啊啊……现在的年轻人，女生（有些甚至是男扮女装）穿裙子的标准长度，居然是以一扭屁股就能露出安全裤为标准的长度！对于未成年的小男生来说，根本不存在戒撸的可能性了啊！什么叫心理下流看什么都下流？天天靠露安全裤博眼球，自己出于什么心理真的没个数么？当然，从宏观上看，因为三十年前那一拨国策，搞得现在女少男多，按照市场规律：在绝对刚需的情况下，物以稀为贵！ 现在社会整体上，女性的权利空前的大，这是无法改变的。既然无法改变，不妨转变一个角度看问题，适龄女性比适龄男性少，当今女性的裙子又比过去女性的裙子短，显然卫生纸的市场需求量，势必越来越大，而卫生纸的上游行业（木材，芦苇等造纸原材料的行业），及同类行业（软装、纸箱、办公用纸等与卫生纸消耗同样原料的行业）价值必将一路上扬！如果有搞期货或者炒股票的兄弟觉得有道理，入手一些这种行业的证券，肯定稳赚啊！&lt;/p&gt;
&lt;p&gt;觉得有道理的，来打赏5元支持一下啊？&lt;/p&gt;

&lt;h2&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201806/1282071-20180620031419258-1572026557.png&quot; alt=&quot;&quot;/&gt;&lt;/h2&gt;

</description>
<pubDate>Tue, 19 Jun 2018 19:15:00 +0000</pubDate>
<dc:creator>雪落忆海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuepangzi/p/9201941.html</dc:identifier>
</item>
<item>
<title>《从0开始学架构》——学习笔记（基础篇和高性能篇） - 姜小泮</title>
<link>http://www.cnblogs.com/jpcflyer/p/9194679.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jpcflyer/p/9194679.html</guid>
<description>&lt;p&gt;&lt;span&gt;        4月份在某网订阅了李运华先生的《从0开始学架构》课程，目前已经更新了22期，其中前21期介绍的是架构基础知识篇和高性能篇，学习完后对整体的架构知识增进了一些了解，所以把心得整理记录下来。要说对这个课程的评价如何呢？总体而言还是不错的，尤其是适用于从0开始未接触过架构设计的同学们，但如果对于有些架构经验的同学，这个课程就不太合适了（当然李运华先生说不定看到本篇，在后面的30期里面丰富了内容也说不定，哈哈），请这样的大侠直接绕过吧^_^&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       不多说了，直接上图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/364723/201806/364723-20180620003128710-547972847.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       目前先整理基础知识篇和高性能篇，后期等某网更新完后，再整理高可用篇和可扩展篇，按某网的更新速度，估计时间会是在2个月以后，敬请期待：）&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 16:59:00 +0000</pubDate>
<dc:creator>姜小泮</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jpcflyer/p/9194679.html</dc:identifier>
</item>
<item>
<title>再说接口测试 - Andrea-Pirlo</title>
<link>http://www.cnblogs.com/ailiailan/p/9191010.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ailiailan/p/9191010.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为什么要做接口测试？这个命题本身就是一个比较宽泛的范畴，我也是在工作和学习中对这个命题常思考、常更新，不断丰富对接口测试的理解。&lt;/p&gt;
&lt;p&gt; 端午假期，没有外出安排，放下火热的俄罗斯世界杯，正是学习总结的好时间，哈哈。在testerhome论坛上看到了一篇虽然篇幅短小，但是质量很好的文章，促使我自己也想写点东西，当作记录。&lt;/p&gt;

&lt;p&gt;先搬运一下维基百科上的英文解释：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/907091/201806/907091-20180619235510336-1968465331.png&quot; alt=&quot;&quot; width=&quot;1025&quot; height=&quot;209&quot;/&gt;&lt;/p&gt;
&lt;p&gt;翻译过来就是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/907091/201806/907091-20180619235552769-1256885606.png&quot; alt=&quot;&quot; width=&quot;987&quot; height=&quot;142&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、接口测试的意义&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;1. 更早的发现问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;测试工作应该更早地介入到项目开发中，测试应该更早的介入到项目开发中，因为越早的发现 bug，修复的成本越低。然而功能测试必须要等到系统提供可测试的界面才能对系统进行测试。而接口测试可以功能界面开发出来之前对系统进行测试。系统接口是上层功能的基础，接口测试可以更早更低成本的发现和解决问题。&lt;/p&gt;
&lt;p&gt;然而，在实际的开发过程中，开发人员并没有充足的时间去编写单元测试，并且他们往往对自己编写的 代码有足够的信心，不愿意将“浪费”时间在编写单元测试上面。这个时候接口测试的作用就会变得更加重要。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.缩短产品研发周期&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对于产品研发周期来说，如果将所有测试工作都集中在功能测试阶段。那么测试的问题和修复周期就会变长。因为测试可以更早的介入产品开发中，所以，可以有效的控制功能阶段 bug的数量；从而有效的缩短产品开发周期。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.发现更底层的问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;系统的有些底层逻辑是在UI功能测试中不太容易触发的，那么这些逻辑可能会存在问题。接口测试可以更容易更全面的测试到这些底层的逻辑。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.检查服务器的异常处理能力&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通常把前端的验证称为弱验证，因为它很容易被绕过，这个时候如果只站在功能的层面进行测试， 就很难发现一些安全的问题。不以功能为入口的接口测试就会很容易的验证这些异常情况。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;某公司发现，价值100元的商品，在该公司网上商城被以0.01元买走了很多。攻城狮们火速定位，问题原因很快被找到了，原来是购买商品接口的bug。该接口需要3个参数：商品id、商品单价、购买数量，而服务器根据接口传过来的商品单价（0.01元）生成了订单。服务器本应根据数据库中的商品单价100元来生成订单。如下图，我们将页面上的单价修改后，再购买，提交到服务器的商品单价就是0.01元。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/907091/201806/907091-20180619100739863-850832183.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;作为测试工程师的你，有做过这种测试吗？&lt;/p&gt;
&lt;p&gt;如果没有强烈建议你赶紧补充测试。&lt;strong&gt;侥幸是测试工程师的最大天敌之一&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;what-接口是什么？&quot;&gt;&lt;span&gt;2.1 接口是什么&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;接口测试是测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。举个例子，我提供加法的计算接口，你给我两个数，我就给你返回一个和。&lt;/p&gt;
&lt;h4 id=&quot;what-什么是接口测试？&quot;&gt;&lt;span&gt;2.2 什么是接口测试&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;狭义的接口测试指的是对接口进行测试，上个例子中测试的是&lt;strong&gt;不同输入参数时，我加法的返回是否正确。一般讲的接口测试是这种。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;广义的接口测试包含接口提供方、接口调用方的测试。 比如，你调用我的接口执行加法，我返回错误的响应，或者我响应超时，这时你的处理是否正确。&lt;strong&gt;（也就是客户端容错）&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;为什么要做接口测试？&quot;&gt;&lt;span&gt;2.3 为什么要做接口测试&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;上面的案例就能说明做接口测试的重要性。一般做接口测试有如下原因：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一般的功能测试，覆盖不到多种情况。（如上例所示）&lt;/li&gt;
&lt;li&gt;从安全角度考虑，只依赖于前端的校验不能满足要求，需要服务端也要做校验，比如：APP上一个充值的界面，充值金额输入框不能输入负数，测试时，我们要确保服务器也做了这个校验。有一万种手段绕过前端验证。&lt;/li&gt;
&lt;li&gt;从安全的角度考虑，用户密码、其他用户隐私信息传输时都需要进行加密。&lt;/li&gt;
&lt;li&gt;当APP的代码不更新，而服务端代码更新时，直接通过&lt;strong&gt;接口自动化测试&lt;/strong&gt;就能快速知道是否影响APP的功能。&lt;strong&gt;（服务端开发新的接口，是否会对现有接口有影响，影响客户端）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;很多系统是没有界面的，只提供接口功能，没法通过界面的方式进行测试。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;&lt;span&gt;2.4 接口测试流程&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;1、 项目启动后，测试人员要&lt;strong&gt;尽早&lt;/strong&gt;找到开发人员拿到接口测试文档&lt;/p&gt;
&lt;p&gt;2、 获取接口测试文档后，就可以进行&lt;strong&gt;接口用例的编写和调试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3、 接口用例编写调试完成后，部署到&lt;strong&gt;持续集成&lt;/strong&gt;的&lt;strong&gt;测试环境&lt;/strong&gt;中&lt;/p&gt;
&lt;p&gt;4、 设定脚本&lt;strong&gt;运行频率&lt;/strong&gt;，&lt;strong&gt;告警方式&lt;/strong&gt;等基本参数，进行接口的&lt;strong&gt;日常监控&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5、 每日进行接口脚本的&lt;strong&gt;维护更新&lt;/strong&gt;，&lt;strong&gt;接口异常的处理&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;How-怎么做接口测试？&quot;&gt;&lt;span&gt;2.5 怎么做接口测试&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;“怎么做接口测试”这个问题可以分解为两个问题：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 2.5.1 怎么设计接口测试用例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/907091/201806/907091-20180619102341637-48655814.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;怎么执行接口测试？&quot;&gt;&lt;strong&gt;&lt;span&gt;2.5.2 怎么执行接口测试：&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;h5&gt;&lt;span&gt;1.Fiddler、SOAPUI、PostMan等可以做半自动的接口自动化测试；&lt;/span&gt;&lt;/h5&gt;
&lt;h5&gt;&lt;span&gt;2.使用Robot Framework做全自动化的接口自动化测试；&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.自己用代码做全自动的接口自动化测试，如Python + unittest；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;6. 接口测试相对容易实现自动化，也容易实现持续集成，且相对UI自动化也比较稳定，可以减少人工回归测试人力成本与时间，缩短测试周期，支持后端快速发版需求。接口持续集成是为什么能低成本高收益的根源。&quot;&gt;&lt;span&gt;'''接口测试相对容易实现自动化，也容易实现持续集成，且相对UI自动化也比较稳定，可以减少人工回归测试人力成本与时间，缩短测试周期，支持后端快速发版需求。接口持续集成是为什么能低成本高收益的根源。'''&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;'''通过持续集成的接口监控能够及时的发现项目中存在的问题，这对持续运营的项目来说，非常重要。'''&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; 二、实例中大部分内容来自：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://testerhome.com/topics/9265&quot; target=&quot;_blank&quot;&gt;https://testerhome.com/topics/9265&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 16:48:00 +0000</pubDate>
<dc:creator>Andrea-Pirlo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ailiailan/p/9191010.html</dc:identifier>
</item>
<item>
<title>年轻的工程师你要跟谁比？ - 旁观者</title>
<link>http://www.cnblogs.com/zhengyun_ustc/p/challenge.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhengyun_ustc/p/challenge.html</guid>
<description>&lt;p&gt;郑昀：你要跟谁比？&lt;br/&gt;&lt;span&gt;关键词：成长，自我管理，自我激励，面试，候选人&lt;/span&gt;&lt;br/&gt;201806&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——你觉得跟你的 Leader 差在什么地方？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;——肯定有差距，一个是知识面不如他广，二一个是解决问题不如他老练。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;——怎么追上他？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;——……没想过&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/7438/201806/7438-20180620011835160-1613113101.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Okay，一个年轻工程师可以跟三种人对比：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;第一种，跟身边的同龄人、同行者对比。&lt;/strong&gt;你比他们强在什么地方？你有什么优势？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我常常举这两个例子。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我的同事刘振，北航毕业，十七八年前一度持之以恒地维护一个客户端软件，作为课外练习。这个软件几乎无所不能，能打电话（我们公司有一个程控交换机），能发短信，能像QQ一样聊天（当年QQ还是一个可有可无的软件），支持手写板画画聊天，像 foxmail 一样收发和管理邮件，能识别语音命令，能在局域网内传输大文件……&lt;/span&gt;&lt;br/&gt;&lt;span&gt;是的，优秀工程师就是会这样反复实践，知行合一。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我，擅长调试，尤其是擅长在多线程、多进程、多物理节点的成千上万条日志里推理，找到逻辑关系。屡屡上演这样的帽子戏法：同事调了一天也没调明白，叫我过去，在事先没有阅读过的、繁杂的代码中进进出出十分钟，就搞定了。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;优秀工程师一定在一入行的时候就知道自己比别人强在哪里。说不出来的话，……，说明你可能真的很弱。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二种，跟自己的Leader对比。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;知识面不如 Leader 广？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;那你做什么了？枚举所有技术点，列出自己的知识短板？逐一攻克？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;没有这么做，就靠自然积累？你什么时候才能自称知识面广？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;怎么做？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我举一个例子。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我在大学的时候，是这么消灭文学类目的：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我会先阅读一国之文学史（美国/英国/日本/...），它们会对各类文学著作做深入灵魂的点评；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;记下那些我感兴趣的，逐一借出；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;以此类推，按照国别，反复扫描。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;技术上的知识面广也是如此，你总得找到一个“纲举目张”的纲领性书籍，按图索骥啊，不然你撞大运、大海捞针吗？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;什么样的书籍？&lt;/span&gt;&lt;br/&gt;&lt;span&gt;比如《大数据日知录，张俊林，2014》，《大型网站系统与Java中间件开发实践，曾宪杰，2014》，《亿级流量网站架构核心技术 ，张开涛，2017》，《淘宝技术这十年，子柳，2013》。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三种，跟业界的顶尖高手对比。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;业界顶尖高手在哪里？也不用去找那些老牌的比如我XD&lt;/span&gt;&lt;br/&gt;&lt;span&gt;与时俱进地看顶级互联网以及（百亿美金估值以上）独角兽的技术团队 Blog。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;你会看到顶尖高手是怎么做功课的。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;怎么才能做好作业？&lt;br/&gt;&lt;/span&gt;&lt;span&gt;你该不会连偷看好学生的作业都不会吧？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/7438/201806/7438-20180620011712078-167820422.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;——比过之后再来面试吧。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;其他技术文章：&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;post_title_link_5941110&quot; href=&quot;https://www.cnblogs.com/zhengyun_ustc/p/how_to_be_great.html&quot;&gt;如何成为一位牛逼的高手&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;post_title_link_7047366&quot; href=&quot;https://www.cnblogs.com/zhengyun_ustc/p/7047366.html&quot;&gt;我当初是怎么管理技术团队的&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;post_title_link_5883413&quot; href=&quot;https://www.cnblogs.com/zhengyun_ustc/p/topicStudy.html&quot;&gt;有些事儿，工程师可能今生仅此一次&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 16:47:00 +0000</pubDate>
<dc:creator>旁观者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhengyun_ustc/p/challenge.html</dc:identifier>
</item>
<item>
<title>【Java】MyBatis框架初步学习总结 - 黑白色的枫</title>
<link>http://www.cnblogs.com/BWMaple/p/9201802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BWMaple/p/9201802.html</guid>
<description>&lt;p&gt;　　&lt;strong&gt;本篇篇幅较长，请善用 Ctrl + F 搜索功能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　结尾补充了 MyBatis 中 resultMap 的映射级别。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- &lt;/p&gt;
&lt;p&gt;　　MyBatis学完也有几天了，总结一下学习到的内容，也算是复习了。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;使用MyBatis之前，我们要知道，什么是MyBatis？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;MyBatis是apache一个开源的，基于Java的持久层框架。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;MyBatis的优点有哪些？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;学习简单，提供半自动的关系映射，SQL语句与代码分离。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;MyBatis的缺点又有哪些？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;要会写SQL语句；每个数据库的SQL语句都多少会有偏差，所以不方便更换数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;MyBatis适合什么样的项目？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;适合性能要求很高，或者需要变化较多的项目。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　要使用MyBatis，得有MyBatis的jar包。&lt;/p&gt;
&lt;p&gt;　　在&lt;span&gt;https://github.com/mybatis/mybatis-3/releases下载mybatis-x.x.x.zip&lt;/span&gt;，我用的版本是3.3.2。&lt;/p&gt;
&lt;p&gt;　　压缩包里的mybatis-x.x.x.jar就是我们要的jar包了，.pdf的是帮助文档，lib文件夹里的是MyBatis的依赖包，具体作用自行百度，一起丢到项目的lib的文件夹里全部add build一下就行了。&lt;/p&gt;
&lt;p&gt;　　哦对了，jdbc的jar包请自行准备。&lt;/p&gt;

&lt;p&gt;　　只有jar包还不够，我们还需要xml配置文件。&lt;/p&gt;
&lt;p&gt;　　新建一个Source Folder，将配置文件统一放在里面。为了方便识别，MyBatis的配置文件我们可以命名为“mybatis-config.xml”，配置文件的内容大致是这样的，改改就能用：　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;mybatis.properties&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; jdbc配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 类型别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAlias &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;cn.bwm.pojo.User&quot;&lt;/span&gt;&lt;span&gt; alias&lt;/span&gt;&lt;span&gt;=&quot;User&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 给指定的类起一个别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;cn.bwm.pojo&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 给包里的所有类起一个和类名一样的别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environments &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置环境 ，default选择默认配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;environment &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 环境元素 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;transactionManager &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;JDBC&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置事务管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dataSource &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;POOLED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据源 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${driver}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; jdbc配置文件对应属性 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;url&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${url}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${username}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${password}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;environments&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 映射器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;cn/bwm/dao/IUserMapper.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; xml映射文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mappers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　每个标签的具体作用请参考官方文档，中文的，&lt;span&gt;http://www.mybatis.org/mybatis-3/zh/getting-started.html&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;　　最后一步也是举足轻重的一步，配置MyBatis的两个dtd文件。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;这两个文件，一个叫“mybatis-3-config.dtd”，另一个叫“mybatis-3-mapper.dtd”，我们可以通过解压缩mybatis-x.x.x.jar，在\org\apache\ibatis\builder\xml 这个目录下找到这两个文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　我用的是MyEclipse10.6，配置的步骤是：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;Windows → Preferences ； 选择XML Catalog ，选择User Specified Entries，单击 Add ； 单击 File System 后选择dtd文件， Key填写 -//mybatis.org//DTD Config 3.0//EN （与MyBatis-config.xml文件投中的 -//mybatis.org//DTD Config 3.0//EN 相同）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　两个dtd文件配置步骤一样，配置完成以后，在MyBatis-config.xml文件和xml映射文件中就可以使用 alt + / 自动联想了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;br/&gt;　　完成以上步骤以后，MyBatis就算是部署到项目中了，至于&lt;strong&gt;如何使用MyBatis&lt;/strong&gt;，我们还需要准备一个数据库。这个数据库至少要有两张结构简单有主外键关系的表，以及少量数据。在项目中创建与数据库的表对应的实体类，在数据访问层创建实体类对应的接口，并声明抽象方法，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 老师类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Teacher {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;String &lt;/span&gt;&lt;span&gt;name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Student student;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Student&amp;gt;&lt;span&gt; studentList;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;String &lt;/span&gt;&lt;span&gt;getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setName(&lt;span&gt;String &lt;/span&gt;&lt;span&gt;name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Student getStudent() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; student;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setStudent(Student student) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.student =&lt;span&gt; student;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Student&amp;gt;&lt;span&gt; getStudentList() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; studentList;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setStudentList(List&amp;lt;Student&amp;gt;&lt;span&gt; studentList) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.studentList =&lt;span&gt; studentList;
    }
}

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 学生类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; tid;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getTid() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; tid;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setTid(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; tid) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tid =&lt;span&gt; tid;
    }    
}

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Teacher实体类的对应接口
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ITeacherMapper {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 根据id查询老师
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;    Teacher对象
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Teacher queryTeacherById(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在接口的同目录下创建同名xml文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;cn.bwm.dao.ITeacherMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacherById&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;        SELECT `Id`,`Name` FROM `teacher` WHERE `Id` = #{id}
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　写完这些代码和配置文件，现在，我们再来简单了解一下MyBatis的核心接口和类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;SqlSessionFactoryBuilder：提供多个build()方法的重载，只负责构建SqlSessionFactory的对象，只需要使用一次。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SqlSessionFactory：提供OpenSession()方法的重载，用来创建SqlSession对象，需要使用多次。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SqlSession：用于执行已映射的SQL语句，在未使用close()方法关闭前可多次使用SQL。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　深入了解请查看官方文档，中文的， http://www.mybatis.org/mybatis-3/zh/java-api.html 。&lt;/p&gt;
&lt;p&gt;　　根据三个核心接口和类，我们再写一个用来获取SqlSession对象的工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SqlSessionUtil {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; SqlSessionFactory sqlSessionFactory;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         SqlSessionFactoryBuilder sqlSessionFactoryBuilder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBuilder();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             sqlSessionFactory =&lt;span&gt; sqlSessionFactoryBuilder.build(inputStream);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     * 获取SqlSession对象
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; SqlSession getSqlSession(){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sqlSessionFactory.openSession();        
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;     * 关闭SqlSession对象
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sqlSession
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; closeSqlSession(SqlSession sqlSession){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (sqlSession != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            sqlSession.close();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在，我们可以写测试代码了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; SqlSessionUtil.getSqlSession();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         Teacher teacher = sqlSession.getMapper(ITeacherMapper.&lt;span&gt;class&lt;/span&gt;).queryTeacherById(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         System.out.println(&quot;编号：&quot; + teacher.getId() + &quot;\t姓名：&quot; +&lt;span&gt; teacher.getName());
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;        SqlSessionUtil.closeSqlSession(sqlSession);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　相信大家也看出来了，我们使用MyBatis执行了简单的查询操作，并将结果封装成了一个对象，而这其中的关键就在于与接口同名的xml映射文件。&lt;/p&gt;
&lt;p&gt;　　我们来看一下映射文件中用到了哪些元素：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;mapper标签：映射文件的根节点。&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;namespace属性：用于区分不同的napper，全局唯一，必须与对应的接口同名。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;select标签：映射查询语句。&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;id属性：命名空间中唯一的标识符，与接口中的方法名对应。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;parameterType：表示传入参数的类型的完全限定名或别名。完全限定名就是 java.long.String 这样的完整路径，别名则是在 mybatis-config.xml 中设置的别名，MyBatis已经为部分Java类型提供了别名。可以省略&lt;span&gt;（省略好像也没有什么影响）&lt;/span&gt;。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;resultType：查询语句返回结果类型的完全限定名或别名。在这里我写的是 Teacher ，MyBatis就会按照查询的结果的列名和类的属性字段进行匹配映射，一样的就调用set方法进行赋值，所以类的属性要尽量和数据库的字段名一样，否则就要在查询的时候给查询结果起别名。如果想返回 int 或 String ，可以使用MyBatis提供的别名。如果方法想返回一个List集合，这里写List集合里元素的类型。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;#{id}：这就告诉 MyBatis 创建一个预处理语句参数，通过 JDBC，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中。实际上，无论MyBatis的入参是哪种参数类型，都会被放在一个Map中，单参数入参就会有这些情况 &lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;基本类型：对应接口中方法的参数名作为 key ， 变量值为 value。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;对象：对象的属性名作为 key，属性值为 value。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;List：默认 list 作为 key，该 list 即为 value。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;数组：默认 array 作为 key，该数组即为 value。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Map：键值不变。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　我们在查询的时候，不可能只有单参数查询，而parameterType只能写一个类型，这个时候，有三种方法：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;使用对象作为参数。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;将参数封装成Map集合。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用@Param注解。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　先说第一种，&lt;strong&gt;使用对象作为参数&lt;/strong&gt;。这种方法应该比较适合插入操作，我们这里强行使用一波。&lt;/p&gt;
&lt;p&gt;　　先在接口里写上方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;     * 根据编号和姓名查询老师
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; t Teacher对象
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;    Teacher对象
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Teacher queryTeacherByIdName(Teacher t);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在xml映射文件里写对应的SQL语句，parameterType写的是参数类型 Teacher，#{id}和#{name}都是 Teacher 类的属性，CONCAT()是MySQL的函数，用来拼接字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacherByIdName&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    SELECT  `Id`,`Name` FROM `teacher` WHERE `Id` = #{id} AND `Name` LIKE CONCAT('%' , #{name} , '%')
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　测试代码是这样的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; SqlSessionUtil.getSqlSession();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         Teacher t = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Teacher();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         t.setId(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         t.setName(&quot;小&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         Teacher teacher = sqlSession.getMapper(ITeacherMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).queryTeacherByIdName(t);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         System.out.println(&quot;编号：&quot; + teacher.getId() + &quot;\t姓名：&quot; +&lt;span&gt; teacher.getName());
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;        SqlSessionUtil.closeSqlSession(sqlSession);
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样便完成了使用对象作为参数来进行查询的操作。&lt;/p&gt;
&lt;p&gt;　　然后是第二种，&lt;strong&gt;将参数封装成Map集合&lt;/strong&gt;，我们修改一下刚才的方法，把参数改成 Map&amp;lt;String , Object&amp;gt;集合：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;     * 根据编号和姓名查询老师
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; map Map&amp;lt;String,Object&amp;gt;集合
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;    Teacher对象
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Teacher queryTeacherByIdName(Map&amp;lt;String,Object&amp;gt; map);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　xml映射文件里，parameterType改成了 map，是MyBatis提供的别名：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacherByIdName&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        SELECT  `Id`,`Name` FROM `teacher` WHERE `Id` = #{id} AND `Name` LIKE CONCAT('%' , #{name} , '%')
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　测试代码把刚才作为参数的 Teacher 对象改成 Map&amp;lt;String , Object&amp;gt;集合：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; SqlSessionUtil.getSqlSession();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         Map&amp;lt;String,Object&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String,Object&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         map.put(&quot;id&quot;, 1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         map.put(&quot;name&quot;, &quot;小&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         Teacher teacher = sqlSession.getMapper(ITeacherMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).queryTeacherByIdName(map);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         System.out.println(&quot;编号：&quot; + teacher.getId() + &quot;\t姓名：&quot; +&lt;span&gt; teacher.getName());
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;        SqlSessionUtil.closeSqlSession(sqlSession);
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样就完成了使用 Map 传递多个参数。&lt;/p&gt;
&lt;p&gt;　　最后是第三种，&lt;strong&gt;使用@Param注解&lt;/strong&gt;，还是直接修改刚才的方法，把 Map&amp;lt;String ， Object&amp;gt; 换成 @Param 注解的参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;     * 根据编号和姓名查询老师
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id    编号
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name    姓名
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;    Teacher 对象
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Teacher queryTeacherByIdName(@Param(&quot;tid&quot;)&lt;span&gt;int&lt;/span&gt; id , @Param(&quot;tname&quot;)String name);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　xml文件里，因为@Param(&quot;&quot;)里写的是 tid 和 tname，所以 #{} 也要写的一样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacherByIdName&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        SELECT  `Id`,`Name` FROM `teacher` WHERE `Id` = #{tid} AND `Name` LIKE CONCAT('%' , #{tname} , '%')
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　测试代码里，参数也不用放在 Map 集合里了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; SqlSessionUtil.getSqlSession();
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         Teacher teacher = sqlSession.getMapper(ITeacherMapper.&lt;span&gt;class&lt;/span&gt;).queryTeacherByIdName(1 , &quot;小&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         System.out.println(&quot;编号：&quot; + teacher.getId() + &quot;\t姓名：&quot; +&lt;span&gt; teacher.getName());
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        SqlSessionUtil.closeSqlSession(sqlSession);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这就是 @Param 的使用方法。&lt;/p&gt;
&lt;p&gt;　　三种方法说完了，但不管参数有多少，我们现在查询的结果都只是一个简单对象，如果结果的类型包含另一个类型，或者包含一个集合，这里我们就要了解一下 &amp;lt;resultMap&amp;gt; 元素及其子元素 &amp;lt;result&amp;gt;、&amp;lt;association&amp;gt; 和 &amp;lt;conllection&amp;gt; 。&lt;/p&gt;
&lt;p&gt;　　我们通过代码来讲解这几个个元素的使用方法，我的 Teacher 类中已经有一个 Student 属性和一个 List&amp;lt;Student&amp;gt; 属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * 老师类
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Teacher {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Student student;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;学生对象&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;Student&amp;gt; studentList;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;学生集合
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略 getset 方法&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接口里的方法可以不用修改，xml映射文件需要大改一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacherByIdName&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;query&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        select t.`Id` as tid , t.`Name`as tname , s.`Id` as sid , s.`Name` as sname from `teacher` as t 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        inner join `student` as s on s.`Tid` = t.`Id` where t.`Id` = #{tid}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;query&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tname&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;student&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sname&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;association&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collection &lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;=&quot;studentList&quot;&lt;/span&gt;&lt;span&gt; ofType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sname&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;collection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　select 标签的 resultType 属性换成了 resultMap属性，值与 resultMap 标签的 id 一样。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;resultMap标签：用来自定义结果映射，通常在实体类的属性名与数据库里表的字段不一致导致无法自动映射时，以及需要映射复杂对象时使用。要注意的是，resultMap 和 resultType 这两个元素只能使用其中一个，不能同时存在。&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;id属性：resultMap 的唯一标识。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;type属性：表示该 resultMap 的映射结果类型。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;id 标签：用来标记主键，可以提高整体性能。&lt;/span&gt;&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;column 属性：对应SQL语句查询结果的字段名。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;property 属性：对应要赋值的属性。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;result 标签：标志简单属性。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;association 标签：用来映射 JavaBean 的某个 复杂类型 属性，仅处理一对一的关联关系。&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;javaType 属性：完整 Java 类名或者别名。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;collection 元素：映射 JavaBean 的某个 复杂类型 的集合属性，用来处理一对多的关联关系。&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;ofType 属性：完整 Java 的类名或或别名，即集合所包含的类型。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　另外，&lt;strong&gt;resultMap 结果映射可以复用&lt;/strong&gt;，我们改一下xml映射文件的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacherByIdName&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;query1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        select t.`Id` as tid , t.`Name`as tname , s.`Id` as sid , s.`Name` as sname from `teacher` as t 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        inner join `student` as s on s.`Tid` = t.`Id` where t.`Id` = #{tid}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt; 5&lt;/span&gt;         
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;student&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;sname&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;query1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tname&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;association &lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;=&quot;student&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;student&quot;&lt;/span&gt;&lt;span&gt; javaType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;query2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tid&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;tname&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;collection &lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;=&quot;student&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;studentList&quot;&lt;/span&gt;&lt;span&gt; ofType&lt;/span&gt;&lt;span&gt;=&quot;Student&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在代码里，两个 resultMap 里的 association 和 collection 都重用了 query 这个 resultMap ，可以节省不少代码。顺便一提，我在测试时，&lt;strong&gt;association 和 collection 无法在一个 resultMap 里重用同一个 resultMap&lt;/strong&gt; ，collection 会失效，最终查询出来的结果，List的元素数量是0，具体原因暂时还没找到。&lt;/p&gt;

&lt;p&gt;　　查询部分算是结束了，接下是比较简单的增删改操作，先在接口里写上对应的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 增加老师
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; teacher    Teacher对象
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; addTeacher(Teacher teacher);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;     * 修改老师
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; teacher    Teacher对象
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; updateTeacher(Teacher teacher);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;     * 根据id删除老师
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id    老师的编号
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; deleteTeacher(&lt;span&gt;int&lt;/span&gt; id);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　xml映射文件里也要使用对应的标签，分别是 &lt;span&gt;&amp;lt;insert&amp;gt;、&amp;lt;update&amp;gt;和&amp;lt;delete&amp;gt;&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;addTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        INSERT INTO `teacher`(`Name`) VALUES(#{name})
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        UPDATE `teacher` SET `Name` = #{name} WHERE id = #{id}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;delete &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;int&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        DELETE FROM `teacher` WHERE `Id` = #{id}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因为增删改的操作返回的是数据库受影响的行数，所以这个三个标签是没有 resultType 和 resultMap 两个属性的。&lt;/p&gt;
&lt;p&gt;　　测试部分需要增加一点点代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;     * 添加老师
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addTeacher() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; SqlSessionUtil.getSqlSession();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         Teacher teacher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Teacher();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         teacher.setName(&quot;小黑白&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = sqlSession.getMapper(ITeacherMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).addTeacher(teacher);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (result &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             sqlSession.commit();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交事务&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             System.out.println(&quot;添加成功！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             System.out.println(&quot;添加失败！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        SqlSessionUtil.closeSqlSession(sqlSession);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;     * 修改老师
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateTeacher() {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; SqlSessionUtil.getSqlSession();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         Teacher teacher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Teacher();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         teacher.setId(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         teacher.setName(&quot;小黑&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = sqlSession.getMapper(ITeacherMapper.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;).updateTeacher(teacher);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (result &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             sqlSession.commit();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交事务&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             System.out.println(&quot;修改成功！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             System.out.println(&quot;修改失败！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        SqlSessionUtil.closeSqlSession(sqlSession);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;     * 根据id删除老师
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteTeacher() {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         SqlSession sqlSession =&lt;span&gt; SqlSessionUtil.getSqlSession();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = sqlSession.getMapper(ITeacherMapper.&lt;span&gt;class&lt;/span&gt;).deleteTeacher(2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (result &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             sqlSession.commit();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交事务&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;             System.out.println(&quot;删除成功！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             System.out.println(&quot;删除失败！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        SqlSessionUtil.closeSqlSession(sqlSession);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这三个操作都有一个共同的特点，就是在判断数据库受影响的行数大于0以后，都会调用 SqlSession 的 commit() 方法。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;这是因为 MyBatis 在执行增删改操作的时候并没有直接操作数据库，我们可以理解成是在操作一个虚拟的数据库，当我们调用 commit() 方法后，我们所做的操作才会对真正的数据库产生影响。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　以上就是使用 MyBatis 对数据库进行增删改查操作的示例，我们不难发现，把 SQL语句写在 xml映射文件里会导致我们无法用代码改变 SQL 语句，显得不够灵活，对此，MyBatis为我们提供了&lt;strong&gt;动态SQL&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;动态SQL是MyBatis的一个强大的特性，基于 OGNL 的表达式，使我们可以方便的动态改变 SQL 语句。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　用于动态SQL的元素有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;if&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;choose(when , otherwise)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;trim(where , set)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　假设，我们使用 id 和 name 来查询老师，如果 name 没有传入参数，就只用 id 查询老师，这时候就可以&lt;strong&gt;使用 if 来进行判断&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        SELECT * FROM `teacher`
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        WHERE `Id` = #{id}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null and name != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;            AND `Name` LIKE CONCAT('%' , #{name} , '%')
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;test 属性其他标签也有，用来判断条件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　再假设，id 和 name 只要有其中一个就可以了，按照有条件进行查询，如果没有就查询全部，这时可以使用 &lt;strong&gt;choose 和 它的子元素 when、otherwise&lt;/strong&gt;来实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        SELECT * FROM `teacher`
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        WHERE 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;id != null and id != 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                `Id` = #{id}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null and name != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                `Name` = #{name}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                1 = 1
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;choose 相当于 Java 中的 switch 语句，从上向下开始判断，只要有 when 的 test 成立，就返回该 when 里的 SQL 语句并跳出 choose，如果所有的 when 都不成立，就返回 otherwise 里的SQL语句。因为是从上向下判断的，所以要注意 SQL 语句的优先顺序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　还有最后的 otherwise 里的 1 = 1，如果没有这个的话，很有可能因为 id 和 name 两个都没有参数而造成 where 后面什么都没有，造成 SQL 语句报错。这时，就需要使用 &lt;strong&gt;trim元素，它可以灵活的去除多余的关键字&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        SELECT * FROM `theacher`
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;trim &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;WHERE&quot;&lt;/span&gt;&lt;span&gt; prefixOverrides&lt;/span&gt;&lt;span&gt;=&quot;and | or&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;id != null and id != 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                AND `id` = #{id}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null and name != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                AND `name` = #{name}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;trim 元素会自动识别标签内是否有返回值，有的话就在内容的前面加上 prefix 属性的值 where，并忽略 prefixOverrides 里所包含的内容 and 和 or 。&lt;/span&gt;（这部分代码只为了展示 trim 的作用，请忽略代码的意义）&lt;/p&gt;
&lt;p&gt;　　这部分的 trim 的使用等价于 where 标签：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;map&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        SELECT * FROM `theacher`
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;id != null and id != 0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                AND `id` = #{id}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null and name != ''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                AND `name` = #{name}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　trim 不仅可以在 SQL 语句前添加内容和忽略内容，也可以在 SQL 语句后追加内容和忽略内容，例如刚才的修改操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        UPDATE `teacher` SET `Name` = #{name} WHERE id = #{id}
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;trim &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;Set&quot;&lt;/span&gt;&lt;span&gt; suffixOverrides&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; suffix&lt;/span&gt;&lt;span&gt;=&quot;WHERE id = #{id}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;id != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                `id` = #{id} ,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                `name` = #{name} ,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;使用 prefix 在 SQL 语句前加上 prefix 的值 Set， 在 SQL 语句的最后加上 suffix 的值 WHERE id = #{id}，忽略 SQL 语句最后的 suffixOverrides 的值  , 。&lt;/span&gt;（这段代码只展示了 trim 的作用，请无视不合理的部分）&lt;/p&gt;
&lt;p&gt;　　这部分 trim 的使用等价于 set 标签：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;updateTeacher&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        UPDATE `teacher` SET `Name` = #{name} WHERE id = #{id}
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;id != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                `id` = #{id} ,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name != null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                `name` = #{name} ,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        WHERE `id` = #{id}
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　不过 WHERE 需要自己写。&lt;/p&gt;
&lt;p&gt;　　另外，&lt;span&gt;prefix、perfixOverriders、suffix 和 suffixOverriders四个属性是可以同时使用的&lt;/span&gt;，根据时间情况选择。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;foreach 元素，用于循环集合，主要用于构建 IN 条件语句的时候使用&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;queryTeacher&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;Teacher&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        SELECT * FROM `theacher`
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        WHERE `id` IN 
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;foreach &lt;/span&gt;&lt;span&gt;collection&lt;/span&gt;&lt;span&gt;=&quot;list&quot;&lt;/span&gt;&lt;span&gt; item&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; index&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt; open&lt;/span&gt;&lt;span&gt;=&quot;(&quot;&lt;/span&gt;&lt;span&gt; separator&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; close&lt;/span&gt;&lt;span&gt;=&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;            #{id}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里我们迭代了 list 集合，collection 属性表示迭代时每个元素的别名；index 表示每次迭代到的位置；open 表示 SQL 语句以什么开始；separator 表示每次迭代直接用什么进行分隔；close 表示 SQL 语句以什么结束；collection 必须指定，对应要遍历的集合。&lt;/p&gt;
&lt;p&gt;　　在遍历 对象 和 数组时，index 表示当前迭代的次数，item 的值是表示当前迭代获取的元素。&lt;/p&gt;
&lt;p&gt;　　遍历 Map 时，index 是键， item 是值。&lt;/p&gt;

&lt;p&gt;　　补充一下 &lt;strong&gt;&lt;span&gt;resultMap 的映射级别&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　我在使用 resultMap 自定义映射结果的时候发现，即使我只在 resultMap 里定义一个 id ，其他的属性也还是会自动映射上去。&lt;/p&gt;
&lt;p&gt;　　这是因为 &lt;span&gt;MyBatis 的配置文件中，autoMappingBehavior 的默认级别是 PARTIAL，只会自动映射没有定义嵌套结果集映射的结果集，改成 NONE 就可以取消自动映射，改成FULL的话，会自动映射复杂的结果集，无论是否嵌套。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;br/&gt;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　到这里，关于MyBatis我所学习到的内容就全部结束了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　第一次写博客没有经验，写的很长，也很烂&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　感谢耐心看到这里的你，如果对你有所帮助就再好不过了&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 16:13:00 +0000</pubDate>
<dc:creator>黑白色的枫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/BWMaple/p/9201802.html</dc:identifier>
</item>
<item>
<title>mongodb高级聚合查询 - 单曲荨环</title>
<link>http://www.cnblogs.com/zhoujie/p/mongo1.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhoujie/p/mongo1.html</guid>
<description>&lt;p&gt;　　在工作中会经常遇到一些mongodb的聚合操作，特此总结下。mongo存储的可以是复杂类型，比如数组、对象等mysql不善于处理的文档型结构，并且聚合的操作也比mysql复杂很多。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：&lt;/span&gt;本文基于 mongodb v3.6&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;mongo与mysql聚合类比&lt;/li&gt;
&lt;li&gt;aggregate简介&lt;/li&gt;
&lt;li&gt;aggregate语法&lt;/li&gt;
&lt;li&gt;aggregate常用pipeline stage介绍(本文核心)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了便于理解，先将常见的mongo的聚合操作和mysql的查询做下类比：&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;SQL 操作/函数   &lt;/td&gt;
&lt;td&gt;mongodb聚合操作&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;where&lt;/td&gt;
&lt;td&gt;$match&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;group by&lt;/td&gt;
&lt;td&gt;$group&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;having&lt;/td&gt;
&lt;td&gt;$match&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;select&lt;/td&gt;
&lt;td&gt;$project&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;order by&lt;/td&gt;
&lt;td&gt;$sort&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;limit　&lt;/td&gt;
&lt;td&gt;$limit&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sum()&lt;/td&gt;
&lt;td&gt;$sum&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;count()&lt;/td&gt;
&lt;td&gt;$sum&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;join&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;$lookup  &lt;/p&gt;
&lt;p&gt;（v3.2 新增）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;










&lt;p&gt;下面举了一些常用的mongo聚合例子和mysql对比，假设有一条如下的数据库记录（表名：orders）作为例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  cust_id: &quot;abc123&quot;,
  ord_date: ISODate(&quot;&lt;/span&gt;&lt;span&gt;2012&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;02T17:&lt;span&gt;04&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt;&lt;span&gt;.102Z&quot;),
  status: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  price: &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;,
  items: &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; { sku: &quot;xxx&quot;, qty: 25, price: 1 },
           { sku: &quot;yyy&quot;, qty: 25, price: 1 } &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 统计orders表所有记录&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: null,
        count: { $sum: 1 }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;   &lt;span&gt;FROM&lt;/span&gt; orders
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.对orders表计算所有price求和&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: null,
        total: { $sum: &quot;$price&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql;
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;AS&lt;/span&gt; total  &lt;span&gt;FROM&lt;/span&gt; orders
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.对每一个唯一的cust_id, 计算price总和&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        total: { $sum: &quot;$price&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; cust_id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.对每一个唯一对cust_id和ord_date分组，计算price总和，不包括日期的时间部分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: {
           cust_id: &quot;$cust_id&quot;,
           ord_date: {
               month: { $month: &quot;$ord_date&quot; },
               day: { $dayOfMonth: &quot;$ord_date&quot; },
               year: { $year: &quot;$ord_date&quot;}
           }
        },
        total: { $sum: &quot;$price&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql：
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       ord_date,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id,
         ord_date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.对于有多个记录的cust_id，返回cust_id和对应的数量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        count: { $sum: 1 }
     }
   },
   { $match: { count: { $gt: 1 } } }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id
&lt;/span&gt;&lt;span&gt;HAVING&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;) &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.对每个唯一的cust_id和ord_date分组，计算价格总和，并只返回price总和大于250的记录，且排除日期的时间部分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: {
           cust_id: &quot;$cust_id&quot;,
           ord_date: {
               month: { $month: &quot;$ord_date&quot; },
               day: { $dayOfMonth: &quot;$ord_date&quot; },
               year: { $year: &quot;$ord_date&quot;}
           }
        },
        total: { $sum: &quot;$price&quot; }
     }
   },
   { $match: { total: { $gt: 250 } } }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       ord_date,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id,
         ord_date
&lt;/span&gt;&lt;span&gt;HAVING&lt;/span&gt; total &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;250&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;7.对每个唯一的cust_id且status=A，计算price总和&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   { $match: { status: 'A' } },
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        total: { $sum: &quot;$price&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; cust_id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.对每个唯一的cust_id且status=A，计算price总和并且只返回price总和大于250的记录&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   { $match: { status: 'A' } },
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        total: { $sum: &quot;$price&quot; }
     }
   },
   { $match: { total: { $gt: 250 } } }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:&lt;br/&gt;&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(price) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; total
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; status &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id
&lt;/span&gt;&lt;span&gt;HAVING&lt;/span&gt; total &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;250&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;9.对于每个唯一的cust_id，将与orders相关联的相应订单项order_lineitem的qty字段进行总计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   { $unwind: &quot;$items&quot; },
   {
     $group: {
        _id: &quot;$cust_id&quot;,
        qty: { $sum: &quot;$items.qty&quot; }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id,
       &lt;/span&gt;&lt;span&gt;SUM&lt;/span&gt;(li.qty) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; qty
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders o,
     order_lineitem li
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; li.order_id &lt;span&gt;=&lt;/span&gt;&lt;span&gt; o.id
&lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; cust_id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;10.统计不同cust_id和ord_date分组的数量，排除日期的时间部分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
db.orders.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   {
     $group: {
        _id: {
           cust_id: &quot;$cust_id&quot;,
           ord_date: {
               month: { $month: &quot;$ord_date&quot; },
               day: { $dayOfMonth: &quot;$ord_date&quot; },
               year: { $year: &quot;$ord_date&quot;}
           }
        }
     }
   },
   {
     $group: {
        _id: null,
        count: { $sum: 1 }
     }
   }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

类似mysql:
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;COUNT&lt;/span&gt;(&lt;span&gt;*&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt; (&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; cust_id, ord_date
      &lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; orders
      &lt;/span&gt;&lt;span&gt;GROUP&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; cust_id, ord_date)
      &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; DerivedTable
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　db.collection.aggregate()是基于数据处理的聚合管道，每个文档通过一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的结果。&lt;/p&gt;
&lt;p&gt;通过这张图，可以了解Aggregate处理的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619212647050-925796422.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1、db.collection.aggregate() 可以用多个构件创建一个管道，对于一连串的文档进行处理。这些构件包括：筛选操作的match、映射操作的project、分组操作的group、排序操作的sort、限制操作的limit、和跳过操作的skip。&lt;br/&gt;2、db.collection.aggregate()使用了MongoDB内置的原生操作，聚合效率非常高,支持类似于SQL Group By操作的功能，而不再需要用户编写自定义的JavaScript例程。&lt;br/&gt;3、 每个阶段管道限制为100MB的内存。如果一个节点管道超过这个极限,MongoDB将产生一个错误。为了能够在处理大型数据集,可以设置allowDiskUse为true来在聚合管道节点把数据写入临时文件。这样就可以解决100MB的内存的限制。&lt;br/&gt;4、db.collection.aggregate()可以作用在分片集合，但结果不能输在分片集合，MapReduce可以 作用在分片集合，结果也可以输在分片集合。&lt;br/&gt;5、db.collection.aggregate()方法可以返回一个指针（cursor），数据放在内存中，直接操作。跟Mongo shell 一样指针操作。&lt;br/&gt;6、db.collection.aggregate()输出的结果只能保存在一个文档中，BSON Document大小限制为16M。可以通过返回指针解决，版本2.6中后面：DB.collect.aggregate()方法返回一个指针，可以返回任何结果集的大小。&lt;/p&gt;

&lt;p&gt;基本格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
db.collection.aggregate(pipeline, options)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;3.3496932515337&quot;&gt;&lt;tr&gt;&lt;td&gt;参数         &lt;/td&gt;
&lt;td&gt;类型           &lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.5531914893617&quot;&gt;&lt;td&gt;pipeline&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td readability=&quot;6.4494382022472&quot;&gt;
&lt;p&gt;一系列数据聚合操作或阶段。详见&lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/aggregation/&quot; target=&quot;_blank&quot;&gt;聚合管道操作符&lt;/a&gt;&lt;br/&gt;在版本2.6中更改：该方法仍然可以将流水线阶段作为单独的参数接受，而不是作为数组中的元素;但是，如果不将管道指定为数组，则不能指定options参数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td&gt;options&lt;/td&gt;
&lt;td&gt;document  &lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;可选。 aggregate()传递给聚合命令的其他选项。&lt;br/&gt;2.6版中的新增功能：仅当将管道指定为数组时才可用。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;注意&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;使用db.collection.aggregate()直接查询会提示错误，但是传一个空数组如db.collection.aggregate([])则不会报错，且会和find一样返回所有文档。&lt;/p&gt;

&lt;p&gt;pipeline有很多stage，但这里我只记录我经常用到的几个，如果后续用到再补充。stage详见&lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/aggregation/group/&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下来介绍这几个常用的stage:&lt;/p&gt;
&lt;p&gt;$count , $group,  $match, $project,  $unwind, $limit, $skip,  $sort, $sortByCount,  $lookup, $out, $addFields&lt;/p&gt;

&lt;h2&gt;$count&lt;/h2&gt;
&lt;h4&gt;释义：&lt;/h4&gt;
&lt;p&gt;返回包含输入到stage的文档的计数，理解为返回与表或视图的find()查询匹配的文档的计数。&lt;/p&gt;
&lt;p&gt;db.collection.count()方法不执行find()操作，而是计数并返回与查询匹配的结果数。&lt;/p&gt;
&lt;h4&gt;语法：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
{ $&lt;span&gt;count&lt;/span&gt;: &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$count阶段相当于下面$group+$project的序列：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.collection.aggregate( [
   { $group: { _id: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;, myCount: { $&lt;span&gt;sum&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt; } } }, #这里myCount自定义，相当于mysql的select count(*&lt;span&gt;) as myCount
   { $project: { _id: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; } }  # 返回不显示_id字段
] )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;示例数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
{ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;88&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;92&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;97&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;71&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;79&lt;/span&gt;&lt;span&gt; }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;History&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;83&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;p&gt;1）$match 阶段排除score小于等于80的文档，将大于80的文档传到下个阶段&lt;/p&gt;
&lt;p&gt;2）$count阶段返回聚合管道中剩余文档的计数，并将该值分配给名为passing_scores的字段。&lt;/p&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619222124883-288829809.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;$group&lt;/h2&gt;
&lt;h4&gt;释义：&lt;/h4&gt;
&lt;p&gt;按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字段，该字段按键包含不同的组。&lt;/p&gt;
&lt;p&gt;输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息。&lt;/p&gt;
&lt;h4&gt;语法：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
{ $group: { _id: &amp;lt;expression&amp;gt;, &amp;lt;field1&amp;gt;: { &amp;lt;accumulator1&amp;gt; : &amp;lt;expression1&amp;gt; }, ... } }
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;_id字段是必填的;但是，可以指定_id值为null来为整个输入文档计算累计值。&lt;/li&gt;
&lt;li&gt;剩余的计算字段是可选的，并使用&amp;lt;accumulator&amp;gt;运算符进行计算。&lt;/li&gt;
&lt;li&gt;_id和&amp;lt;accumulator&amp;gt;表达式可以接受任何有效的&lt;a href=&quot;https://docs.mongodb.com/manual/meta/aggregation-quick-reference/#aggregation-expressions&quot; target=&quot;_blank&quot;&gt;表达式&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;accumulator操作符&lt;/h4&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;名称                      &lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;td&gt;类比sql&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$avg&lt;/td&gt;
&lt;td&gt;计算均值     &lt;/td&gt;
&lt;td&gt;avg&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;$first&lt;/td&gt;
&lt;td&gt;返回每组第一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的第一个文档。&lt;/td&gt;
&lt;td&gt;limit 0,1&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;$last&lt;/td&gt;
&lt;td&gt;返回每组最后一个文档，如果有排序，按照排序，如果没有按照默认的存储的顺序的最后个文档。&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$max&lt;/td&gt;
&lt;td&gt;根据分组，获取集合中所有文档对应值得最大值。&lt;/td&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$min&lt;/td&gt;
&lt;td&gt;根据分组，获取集合中所有文档对应值得最小值。&lt;/td&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$push&lt;/td&gt;
&lt;td&gt;将指定的表达式的值添加到一个数组中。&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$addToSet &lt;/td&gt;
&lt;td&gt;将表达式的值添加到一个集合中（无重复值，无序）。&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$sum&lt;/td&gt;
&lt;td&gt;计算总和&lt;/td&gt;
&lt;td&gt;sum&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$stdDevPop&lt;/td&gt;
&lt;td&gt;返回输入值的总体标准偏差（population standard deviation）&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$stdDevSamp&lt;/td&gt;
&lt;td&gt;返回输入值的样本标准偏差（the sample standard deviation）&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;$group阶段的内存限制为100M。默认情况下，如果stage超过此限制，$group将产生错误。但是，要允许处理大型数据集，请将allowDiskUse选项设置为true以启用$group操作以写入临时文件。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;友情备注&lt;/span&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&quot;$addToSet&quot;:expr，如果当前数组中不包含expr，那就将它添加到数组中。&lt;/li&gt;
&lt;li&gt;&quot;$push&quot;:expr，不管expr是什么只，都将它添加到数组中。返回包含所有值的数组。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在版本2.6中进行了更改：对于$group阶段，MongoDB引入了100M内存的限制以及allowDiskUse选项来处理大数据集的操作。&lt;/p&gt;
&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;示例数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
{ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-03-01T08:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jkl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;20&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-03-01T09:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-03-15T09:00:00Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;20&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-04-04T11:21:39.736Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) }
{ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quantity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ISODate(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2014-04-04T21:23:13.331Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1. 以下汇总操作使用$group阶段按月份，日期和年份对文档进行分组，并计算total price和average quantity，并计算每个组的文档数量：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619225349108-1276973299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : {
        &quot;&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&quot; : &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;day&lt;/span&gt;&quot; : &lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&quot; : &lt;span&gt;2014&lt;/span&gt;&lt;span&gt;
    },
    &quot;totalPrice&quot; : &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;,
    &quot;averageQuantity&quot; : &lt;/span&gt;&lt;span&gt;15.0&lt;/span&gt;&lt;span&gt;,
    &quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&quot; : &lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : {
        &quot;&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&quot; : &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;day&lt;/span&gt;&quot; : &lt;span&gt;15&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&quot; : &lt;span&gt;2014&lt;/span&gt;&lt;span&gt;
    },
    &quot;totalPrice&quot; : &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;,
    &quot;averageQuantity&quot; : &lt;/span&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt;,
    &quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&quot; : &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 3 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : {
        &quot;&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&quot; : &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;day&lt;/span&gt;&quot; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
        &quot;&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&quot; : &lt;span&gt;2014&lt;/span&gt;&lt;span&gt;
    },
    &quot;totalPrice&quot; : &lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt;,
    &quot;averageQuantity&quot; : &lt;/span&gt;&lt;span&gt;1.5&lt;/span&gt;&lt;span&gt;,
    &quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&quot; : &lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. group null  , &lt;span lang=&quot;zh-CN&quot;&gt;以下聚合操作将指定组_id为null，计算集合中所有文档的总价格和平均数量以及计数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619225601745-274714329.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 查询distinct values &lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;以下汇总操作使用$group阶段按item对文档进行分组以检索不同的项目值：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619225917904-343833521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 数据转换&lt;/p&gt;
&lt;p&gt;1）将集合中的数据按price分组转换成item数组&lt;/p&gt;
&lt;p&gt;返回的数据id值是group中指定的字段，items可以自定义，是分组后的列表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619231004975-287610370.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2）下面聚合操作实用系统变量$$ROOT按item对文档进行分组，&lt;span lang=&quot;zh-CN&quot;&gt;生成的文档不得超过BSON文档大小限制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619231315308-577090097.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &quot;xyz&quot;,
    &quot;books&quot; : &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; 
        {
            &quot;_id&quot; : 3,
            &quot;item&quot; : &quot;xyz&quot;,
            &quot;price&quot; : 5,
            &quot;quantity&quot; : 10,
            &quot;date&quot; : ISODate(&quot;2014-03-15T09:00:00.000Z&quot;)
        }, 
        {
            &quot;_id&quot; : 4,
            &quot;item&quot; : &quot;xyz&quot;,
            &quot;price&quot; : 5,
            &quot;quantity&quot; : 20,
            &quot;date&quot; : ISODate(&quot;2014-04-04T11:21:39.736Z&quot;)
        }
    &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &quot;jkl&quot;,
    &quot;books&quot; : &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; 
        {
            &quot;_id&quot; : 2,
            &quot;item&quot; : &quot;jkl&quot;,
            &quot;price&quot; : 20,
            &quot;quantity&quot; : 1,
            &quot;date&quot; : ISODate(&quot;2014-03-01T09:00:00.000Z&quot;)
        }
    &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 3 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &quot;abc&quot;,
    &quot;books&quot; : &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; 
        {
            &quot;_id&quot; : 1,
            &quot;item&quot; : &quot;abc&quot;,
            &quot;price&quot; : 10,
            &quot;quantity&quot; : 2,
            &quot;date&quot; : ISODate(&quot;2014-03-01T08:00:00.000Z&quot;)
        }, 
        {
            &quot;_id&quot; : 5,
            &quot;item&quot; : &quot;abc&quot;,
            &quot;price&quot; : 10,
            &quot;quantity&quot; : 10,
            &quot;date&quot; : ISODate(&quot;2014-04-04T21:23:13.331Z&quot;)
        }
    &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;$match&lt;/h2&gt;
&lt;h4&gt;释义：&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;过滤文档，仅将符合指定条件的文档传递到下一个管道阶段。&lt;br class=&quot;Apple-interchange-newline&quot;/&gt;
$match接受一个指定查询条件的文档。查询语法与读操作查询语法相同。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span lang=&quot;zh-CN&quot;&gt;语法：&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
{ $match: { &lt;span&gt;&amp;lt;&lt;/span&gt;query&lt;span&gt;&amp;gt;&lt;/span&gt; } }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;管道优化：&lt;/h4&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;$match用于对文档进行筛选，之后可以在得到的文档子集上做聚合，$match可以使用除了地理空间之外的所有常规查询操作符，&lt;strong&gt;在实际应用中尽可能将$match放在管道的前面位置&lt;/strong&gt;。这样有两个好处：一是可以快速将不需要的文档过滤掉，以&lt;strong&gt;减少管道的工作量&lt;/strong&gt;；二是如果再投射和分组之前执行$match，&lt;strong&gt;查询可以使用索引&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;限制：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span lang=&quot;zh-CN&quot;&gt;不能在$ match查询中使用$作为聚合管道的一部分。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span lang=&quot;zh-CN&quot;&gt;要在$match阶段使用$text，$match阶段必须是管道的第一阶段。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span lang=&quot;zh-CN&quot;&gt;视图不支持文本搜索。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;示例数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
{ &quot;_id&quot; : ObjectId(&quot;512bc95fe835e68f199c8686&quot;), &quot;author&quot; : &quot;dave&quot;, &quot;score&quot; : &lt;span&gt;80&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;100&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;512bc962e835e68f199c8687&quot;), &quot;author&quot; : &quot;dave&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;85&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;521&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a192d4bede9ac365b257&quot;), &quot;author&quot; : &quot;ahn&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;60&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a192d4bede9ac365b258&quot;), &quot;author&quot; : &quot;li&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;55&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;5000&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a1d3d4bede9ac365b259&quot;), &quot;author&quot; : &quot;annT&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;60&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;50&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a1d3d4bede9ac365b25a&quot;), &quot;author&quot; : &quot;li&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;94&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;999&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : ObjectId(&quot;55f5a1d3d4bede9ac365b25b&quot;), &quot;author&quot; : &quot;ty&quot;, &quot;score&quot; : &lt;/span&gt;&lt;span&gt;95&lt;/span&gt;, &quot;views&quot; : &lt;span&gt;1000&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1.使用 $match做简单的匹配查询&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619234118950-569445436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : ObjectId(&quot;512bc95fe835e68f199c8686&quot;),
    &quot;author&quot; : &quot;dave&quot;,
    &quot;score&quot; : &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;,
    &quot;views&quot; : &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 2 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : ObjectId(&quot;512bc962e835e68f199c8687&quot;),
    &quot;author&quot; : &quot;dave&quot;,
    &quot;score&quot; : &lt;/span&gt;&lt;span&gt;85&lt;/span&gt;&lt;span&gt;,
    &quot;views&quot; : &lt;/span&gt;&lt;span&gt;521&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. &lt;span lang=&quot;zh-CN&quot;&gt;使用$match管道选择要处理的文档，然后将结果输出到$group管道以计算文档的计数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/476931/201806/476931-20180619234018261-1141135850.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;返回：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
{
    &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    &quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&quot; : &lt;span&gt;5.0&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;$unwind&lt;/h2&gt;
&lt;h4&gt;&lt;span lang=&quot;zh-CN&quot;&gt;释义：&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;从输入文档解构数组字段以输出每个元素的文档。简单说就是 &lt;/span&gt;可以将数组拆分为单独的文档。&lt;/p&gt;
&lt;h4&gt;语法：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{ $unwind: &lt;span&gt;&amp;lt;&lt;/span&gt;field path&lt;span&gt;&amp;gt;&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要指定字段路径，在字段名称前加上$符并用引号括起来。&lt;/p&gt;
&lt;p&gt;v3.2+支持如下语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  $unwind:
    {
      path: &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;field path&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,
      includeArrayIndex: &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;,  &lt;span&gt;#&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;可选,一个新字段的名称用于存放元素的数组索引。该名称不能以$开头。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;      preserveNullAndEmptyArrays: &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;boolean&lt;span&gt;&amp;gt; #可选，default :false，若为true,&lt;/span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;如果路径为空，缺少或为空数组，则$unwind输出文档&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt; } &lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果为输入文档中不存在的字段指定路径，或者该字段为空数组，则$unwind默认会忽略输入文档，并且不会输出该输入文档的文档。&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;版本3.2中的新功能：要输出数组字段丢失的文档，null或空数组，请使用选项preserveNullAndEmptyArrays。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;1. 示例数据1：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
{ &quot;_id&quot; : &lt;span&gt;1&lt;/span&gt;, &quot;item&quot; : &quot;ABC1&quot;, sizes: &lt;span&gt;[&lt;/span&gt;&lt;span&gt; &quot;S&quot;, &quot;M&quot;, &quot;L&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;以下聚合使用$unwind为sizes数组中的每个元素输出一个文档：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
db.getCollection(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).aggregate(
 &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; { $unwind : &quot;$sizes&quot; } &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;
)

返回：
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC1&quot;, &quot;sizes&quot; : &quot;S&quot; }&lt;br/&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC1&quot;, &quot;sizes&quot; : &quot;M&quot; }&lt;br/&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC1&quot;, &quot;sizes&quot; : &quot;L&quot; }&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;每个文档与输入文档相同，除了sizes字段的值是原始sizes数组的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;2. 再如下示例数据：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
{ &quot;_id&quot; : &lt;span&gt;1&lt;/span&gt;, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot;: &lt;span&gt;[&lt;/span&gt;&lt;span&gt; &quot;S&quot;, &quot;M&quot;, &quot;L&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;, &quot;item&quot; : &quot;EFG&quot;, &quot;sizes&quot; : &lt;span&gt;[&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;span&gt; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;IJK&quot;, &quot;sizes&quot;: &quot;M&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;LMN&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;, &quot;item&quot; : &quot;XYZ&quot;, &quot;sizes&quot; : &lt;span&gt;null&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1）以下$unwind操作使用includeArrayIndex选项来输出数组元素的数组索引。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
db.getCollection(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt; { $unwind: { path: &quot;$sizes&quot;, includeArrayIndex: &quot;arrayIndex&quot; } } &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

返回：
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;S&quot;, &quot;arrayIndex&quot; : NumberLong(0) }&lt;br/&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;M&quot;, &quot;arrayIndex&quot; : NumberLong(1) }&lt;br/&gt;{ &quot;_id&quot; : 1, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;L&quot;, &quot;arrayIndex&quot; : NumberLong(2) }&lt;br/&gt;{ &quot;_id&quot; : 3, &quot;item&quot; : &quot;IJK&quot;, &quot;sizes&quot; : &quot;M&quot;, &quot;arrayIndex&quot; : null }&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;2）以下$unwind操作使用preserveNullAndEmptyArrays选项在输出中包含缺少size字段，null或空数组的文档。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
db.inventory.aggregate( &lt;span&gt;[&lt;/span&gt;&lt;span&gt;
   { $unwind: { path: &quot;$sizes&quot;, preserveNullAndEmptyArrays: true } }
&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )

返回：
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;S&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;M&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;ABC&quot;, &quot;sizes&quot; : &quot;L&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;EFG&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;IJK&quot;, &quot;sizes&quot; : &quot;M&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &quot;item&quot; : &quot;LMN&quot; }
{ &quot;_id&quot; : &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;, &quot;item&quot; : &quot;XYZ&quot;, &quot;sizes&quot; : &lt;span&gt;null&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;$project&lt;/h2&gt;
&lt;h4&gt;释义：&lt;/h4&gt;
&lt;p&gt;$project可以从文档中选择想要的字段，和不想要的字段（&lt;span lang=&quot;zh-CN&quot;&gt;指定的字段可以是来自输入文档或新计算字段的现有字段&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;），也可以通过管道表达式进行一些复杂的操作，例如数学操作，日期操作，字符串操作，逻辑操作。&lt;/p&gt;
&lt;h4&gt;语法：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{ $project: { &lt;span&gt;&amp;lt;&lt;/span&gt;specification(s)&lt;span&gt;&amp;gt;&lt;/span&gt; } }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$project 管道符的作用是选择字段（指定字段，添加字段，不显示字段,_id：0，排除字段等），重命名字段，派生字段。&lt;/p&gt;
&lt;p&gt;specifications有以下形式：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;field&amp;gt;: &lt;span class=&quot;pre&quot;&gt;&amp;lt;1 &lt;span class=&quot;pre&quot;&gt;or &lt;span class=&quot;pre&quot;&gt;true&amp;gt;    是否包含该字段，field:1/0，表示选择/不选择 field&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;_id: &lt;span class=&quot;pre&quot;&gt;&amp;lt;0 &lt;span class=&quot;pre&quot;&gt;or &lt;span class=&quot;pre&quot;&gt;false&amp;gt;        是否指定_id字段&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;field&amp;gt;: &lt;span class=&quot;pre&quot;&gt;&amp;lt;expression&amp;gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;添加新字段或重置现有字段的值。 在版本3.6中更改：MongoDB 3.6添加变量REMOVE。如果表达式的计算结果为$$REMOVE，则该字段将排除在输出中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;field&amp;gt;:&amp;lt;0 &lt;span class=&quot;pre&quot;&gt;or &lt;span class=&quot;pre&quot;&gt;false&amp;gt;    v3.4新增功能，指定排除字段&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 19 Jun 2018 15:32:00 +0000</pubDate>
<dc:creator>单曲荨环</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhoujie/p/mongo1.html</dc:identifier>
</item>
<item>
<title>JVM学习十：JVM之垃圾收集器及GC参数 - pony1223</title>
<link>http://www.cnblogs.com/pony1223/p/9201625.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pony1223/p/9201625.html</guid>
<description>&lt;p&gt;&lt;span&gt;接近两个月左右没有写博客，主要是因为小孩过来后，回家比较忙，现在小孩端午送回家了，开始继续之前的JVM学习之路，前面学习了GC的算法和种类，那么本章则是基于算法来产生实际的用途，即垃圾收集器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、堆的回顾&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新生代中的98%对象都是“朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是&lt;strong&gt;将内存分为一块比较大的Eden空间和两块较小的Survivor空间&lt;/strong&gt;，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖于老年代进行分配担保，所以大对象直接进入老年代。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;堆的结构如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225002674-1661261950.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;垃圾收集器：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果说收集算法时内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;虽然我们在对各种收集器进行比较，但并非为了挑出一个最好的收集器。因为直到现在位置还没有最好的收集器出现，更加没有万能的收集器，所以&lt;strong&gt;我们选择的只是对具体应用最合适的收集器&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、串行收集器：&lt;strong&gt;Serial收集器&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;最古老，最稳定&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;简单而高效&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能会产生较长的停顿&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseSerialGC&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;新生代、老年代都会使用串行回收&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新生代复制算法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;老年代标记-整理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总结：&lt;strong&gt;Serial收集器&lt;/strong&gt;对于&lt;strong&gt;运行在Client模式下&lt;/strong&gt;的虚拟机来说是一个很好的选择。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个收集器是一个单线程的收集器，但它的单线程的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。收集器的运行过程如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225326678-747770356.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、并行收集器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、ParNew收集器：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;ParNew收集器其实就是Serial收集器新生代的并行版本。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;多线程，需要多核支持。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseParNewGC&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　新生代并行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　老年代串行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:ParallelGCThreads 限制线程数量&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225456403-1368923997.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、Parallel Scanvenge收集器：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;类似ParNew，但更加关注&lt;strong&gt;吞吐量&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseParallelGC  使用Parallel Scanvenge收集器：&lt;strong&gt;新生代并行，老年代串行&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、Parallel Old收集器：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Parallel Old收集器是Parallel Scanvenge收集器的老年代版本&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseParallelGC  使用Parallel Old收集器：&lt;strong&gt;新生代并行，老年代并行&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225623319-1400481328.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;各种参数设置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:MaxGCPauseMills&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　　　最大停顿时间，单位毫秒&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　GC尽力保证回收时间不超过设定值&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:GCTimeRatio&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　　　0-100的取值范围&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　垃圾收集时间占总时间的比&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　默认99，即最大允许1%时间做GC&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：这两个参数是矛盾的。因为&lt;strong&gt;停顿时间和吞吐量不可能同时调优&lt;/strong&gt;。我们一方买希望停顿时间少，另外一方面希望吞吐量高，其实这是矛盾的。因为：在GC的时候，垃圾回收的工作总量是不变的，如果将停顿时间减少，那频率就会提高；既然频率提高了，说明就会频繁的进行GC，那吞吐量就会减少，性能就会降低。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;吞吐量：CPU用于用户代码的时间/CPU总消耗时间的比值&lt;/strong&gt;，即=运行用户代码的时间/(运行用户代码时间+垃圾收集时间)。比如，虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注2：以上所有的收集器当中，当执行GC时，都会stop the world，但是下面的CMS收集器却不会这样。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、CMS收集器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CMS收集器（Concurrent Mark Sweep：&lt;strong&gt;并发标记清除&lt;/strong&gt;）是一种&lt;strong&gt;以获取最短回收停顿时间为目标&lt;/strong&gt;的收集器。适合应用在互联网站或者B/S系统的服务器上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Concurrent Mark Sweep 并发标记清除，并发低停顿&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;标记-清除算法&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;并发阶段会降低吞吐量（因为停顿时间减少了，于是GC的频率会变高）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;老年代收集器&lt;/strong&gt;（新生代使用ParNew）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;-XX:+UseConcMarkSweepGC   打开这收集器&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;注：这里的并发指的是与用户线程一起执行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、CMS收集器运行过程：（着重实现了标记的过程）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）&lt;strong&gt;初始标记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根可以直接关联到的对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;速度快&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）&lt;strong&gt;并发标记&lt;/strong&gt;（和用户线程一起）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;主要标记过程，标记全部对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）&lt;strong&gt;重新标记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于并发标记时，用户线程依然运行，因此在正式清理前，再做修正&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）&lt;strong&gt;并发清除&lt;/strong&gt;（和用户线程一起）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基于标记结果，直接清理对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整个过程如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619225916562-869426377.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中，初始标记和重新标记时，需要stop the world。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;整个过程中耗时最长的是并发标记和并发清除，这两个过程都可以和用户线程一起工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打印GC日志举例如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619230007246-7589019.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、CMS收集器特点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）尽可能降低停顿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）会影响系统整体吞吐量和性能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如，在用户线程运行过程中，分一半CPU去做GC，系统性能在GC阶段，反应速度就下降一半&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）清理不彻底&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为在清理阶段，用户线程还在运行，会产生新的垃圾，无法清理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）因为和用户线程一起运行，不能在空间快满时再清理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:CMSInitiatingOccupancyFraction设置触发GC的阈值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果不幸内存预留空间不够，就会引起concurrent mode failure&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们来看一下concurrent mode failure的日志：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201806/401339-20180619230043411-1603012919.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;碰到上图中的情况，我们需要使用串行收集器作为后备。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、既然标记清除算法会造成内存空间的碎片化，CMS收集器为什么使用标记清除算法而不是使用标记整理算法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;答案：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    CMS收集器更加关注停顿，它在做GC的时候是和用户线程一起工作的（并发执行），如果使用标记整理算法的话，那么在清理的时候就会去移动可用对象的内存空间，那么应用程序的线程就很有可能找不到应用对象在哪里。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了解决碎片的问题，CMS收集器会有一些整理上的参数，接下来就来讲这个。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、整理时的各种参数：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:+ UseCMSCompactAtFullCollection     &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Full GC后，进行一次整理。整理过程是独占的，会引起停顿时间变长&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:+CMSFullGCsBeforeCompaction&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;设置进行几次Full GC后，进行一次碎片整理&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;-XX:ParallelCMSThreads&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;设定CMS的线程数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、GC参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseSerialGC：在新生代和老年代使用串行收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:SurvivorRatio：设置eden区大小和survivior区大小的比例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:NewRatio:新生代和老年代的比&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseParNewGC：在新生代使用并行收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseParallelGC ：新生代使用并行回收收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseParallelOldGC：老年代使用并行回收收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:ParallelGCThreads：设置用于垃圾回收的线程数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseConcMarkSweepGC：新生代使用并行收集器，老年代使用CMS+串行收集器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:ParallelCMSThreads：设定CMS的线程数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:CMSInitiatingOccupancyFraction：设置CMS收集器在老年代空间被使用多少后触发&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+UseCMSCompactAtFullCollection：设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片的整理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:CMSFullGCsBeforeCompaction：设定进行多少次CMS垃圾回收后，进行一次内存压缩&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:+CMSClassUnloadingEnabled：允许对类元数据进行回收&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:CMSInitiatingPermOccupancyFraction：当永久区占用率达到这一百分比时，启动CMS回收&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-XX:UseCMSInitiatingOccupancyOnly：表示只在到达阀值的时候，才进行CMS回收&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了减轻GC压力，我们需要注意些什么？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;软件如何设计架构（性能的根本在应用）&lt;/li&gt;
&lt;li&gt;GC参数属于微调（设置不合理会影响性能，产生大的延时）&lt;/li&gt;
&lt;li&gt;堆空间如何管理和分配&lt;/li&gt;
&lt;li&gt;代码如何写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;《深入JVM内核原理诊断与优化》视频学习  &lt;/p&gt;
&lt;p&gt; http://www.cnblogs.com/smyhvae &lt;/p&gt;

</description>
<pubDate>Tue, 19 Jun 2018 15:06:00 +0000</pubDate>
<dc:creator>pony1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pony1223/p/9201625.html</dc:identifier>
</item>
<item>
<title>Spring Cloud（十一）声名式服务调用：Feign的使用 （第一部分） - 东北小狐狸</title>
<link>http://www.cnblogs.com/hellxz/p/9201608.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hellxz/p/9201608.html</guid>
<description>&lt;h2 id=&quot;一写在前边&quot;&gt;一、写在前边&lt;/h2&gt;
&lt;p&gt;最近开发任务比较忙，下班也开始锻炼了，这个系列的文章就放了很久，看github我提交的Feign的入门程序已经好久了，今天正好得空，这就更上一贴，准备分几部分写&lt;/p&gt;
&lt;p&gt;注意：之前几个项目中，笔者忽略了一个问题，pom文件中如果parent节点下的是spring-cloud-starter-parent而不是spring-boot-starter-parent的话，这样就可以不用写如下代码了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;Camden.SR3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;kw&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;二feign简介&quot;&gt;二、Feign简介&lt;/h2&gt;
&lt;p&gt;通过前面的学习对Ribbon和Hystrix来进行开发，通过这两个重磅武器学会了如何在微服务实现客户端的负载均衡、服务调用和断路保护，实践中我们发现这两个基础工具总是成对出现的，那么有没有更高层次的封装来简化开发呢？&lt;/p&gt;
&lt;p&gt;Spring为我们提供了Spring Cloud Feign就是这样的一个工具，基于Netflix Feign实现，除了负载均衡、服务调用和断路保护的功能外，还提供了声明式Web服务客户端的定义方式以及兼容SpringMVC的注解支持。&lt;/p&gt;
&lt;h2 id=&quot;三快速入门&quot;&gt;三、快速入门&lt;/h2&gt;
&lt;p&gt;继续使用之前的整个项目，没有这个项目的同学请clone下来代码，地址：&lt;a href=&quot;https://github.com/HellxZ/SpringCloudLearn.git&quot; class=&quot;uri&quot;&gt;https://github.com/HellxZ/SpringCloudLearn.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新建一个项目名为&lt;code&gt;FeignCustomer&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619225901126-865885965.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;pom.xml如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;project&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;         xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;         xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.cnblogs.hellxz&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;FeignCustomer&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-parent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;Dalston.SR5&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Hystrix，Feign是基于Hystrix的--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-hystrix&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Eureka依赖，连接注册中心的都需要有这个依赖 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-eureka&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Feign依赖，声明式开发 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-feign&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- SpringMVC依赖 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如同常规在&lt;code&gt;resources&lt;/code&gt;包下创建&lt;code&gt;application.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode yaml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;server:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;port:&lt;/span&gt; 9001
&lt;span class=&quot;fu&quot;&gt;spring:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;application:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;name:&lt;/span&gt; feign-customer
&lt;span class=&quot;fu&quot;&gt;eureka:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;client:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;serviceUrl:&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;defaultZone:&lt;/span&gt; http://peer1:1111/eureka&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建主类，相较于其他只需添加&lt;code&gt;@EnableFeignClients&lt;/code&gt;来开启Feign的支持&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.cnblogs.hellxz;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.boot.SpringApplication;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.cloud.client.SpringCloudApplication;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.cloud.netflix.feign.EnableFeignClients;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@EnableFeignClients&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//开启Feign&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@SpringCloudApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FeignApp {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(FeignApp.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了以上的我们需要一个用来调用服务提供者的工具，在Ribbon那几章我们使用的是RestTemplate，Feign是一种声明式调用工具，下面就来探索一下&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;com.cnblogs.hellxz.client&lt;/code&gt;创建&lt;code&gt;EurekaServiceFeign&lt;/code&gt;,这个是用来当做Service一样的用法，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.cnblogs.hellxz.client;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.cloud.netflix.feign.FeignClient;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 服务提供者的Feign&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 这个接口相当于把原来的服务提供者项目当成一个Service类，&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 我们只需在声明它的Feign-client的名字，会自动去调用注册中心的这个名字的服务&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 更简单的理解是value相当于MVC中的Controller类的父路径，通过&quot;父路径+子路径和参数来调用服务&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@FeignClient&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;eureka-service&quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;//其中的value的值为要调用服务的名称&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; EurekaServiceFeign {

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 第一个Feign代码&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Feign中没有原生的@GetMapping/@PostMapping/@DeleteMapping/@PutMapping，要指定需要用method进行&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/hello&quot;&lt;/span&gt;, method=RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    String &lt;span class=&quot;fu&quot;&gt;helloFeign&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刚才说过我们可以使用这个Feign当做Service来使用服务提供者的方法，得出返回值，这里我们写一个Controller来示范一下使用&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package com.cnblogs.hellxz.controller;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.cnblogs.hellxz.client.EurekaServiceFeign;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Controller;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.GetMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.ResponseBody;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;feign&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HelloController {

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; EurekaServiceFeign eurekaServiceFeign; &lt;span class=&quot;co&quot;&gt;//注入Feign&lt;/span&gt;

    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hello&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;sayHello&lt;/span&gt;(){
        &lt;span class=&quot;co&quot;&gt;//在方法中调用feign的方法&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;helloFeign&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，我们分别启动注册中心、服务提供者、还有这个Feign项目&lt;/p&gt;
&lt;p&gt;使用postman进行测试，使用Get请求访问&lt;code&gt;http://localhost:9001/feign/hello&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619225926844-294811203.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四参数绑定&quot;&gt;四、参数绑定&lt;/h2&gt;
&lt;p&gt;Spring官方在整合NetFlix Feign的时候，加入了SpringMVC的注解支持，这使得Feign让习惯了SpringMVC的程序员更好的过渡过来，下面我举几个例子，就举项目中最常用的吧。&lt;/p&gt;
&lt;h4 id=&quot;pathvariable&quot;&gt;1. @PathVariable&lt;/h4&gt;
&lt;p&gt;扩充&lt;code&gt;EurekaServiceFeign&lt;/code&gt;，添加如下代码，注释很详细，不多说&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 在服务提供者我们有一个方法是用直接写在链接，SpringMVC中用的@PathVariable&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 这里边和SpringMVC中有些有一点点出入，SpringMVC中只有一个参数而且参数名的话是不用额外指定参数名的，而feign中必须指定&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/greet/{dd}&quot;&lt;/span&gt;,method = RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    String &lt;span class=&quot;fu&quot;&gt;greetFeign&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;dd&quot;&lt;/span&gt;) String dd);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在&lt;code&gt;HelloController&lt;/code&gt;中也添加对应的代码，用来调用上边的方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 注意这里是SpringMVC，URL中的参数与方法中的参数名相同无需在注解中注明参数名&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/greet/{test}&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;greet&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt; String test){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;greetFeign&lt;/span&gt;(test);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试这个方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619225957947-1294559184.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;requestparam&quot;&gt;2. &lt;code&gt;@RequestParam&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;为声名为Feign的类添加方法，调用服务提供者的方法&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;如下代码中使用的User类是从服务提供者模块中复制出来的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 这里说下@RequestParam 注解和SpringMVC中差别也是不大，我认为区别在于Feign中的是参数进入URL或请求体中，&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 而SpringMVC中是参数从请求体中到方法中&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param ids &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;id串，比如“1，2，3”&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/users&quot;&lt;/span&gt;,method = RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUsersByIds&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ids&quot;&lt;/span&gt;) List&amp;lt;Long&amp;gt; ids);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用这个方法的方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 调用Feign中使用@RequestParam的方法&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/users&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUserListByIds&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ids&quot;&lt;/span&gt;) List&amp;lt;Long&amp;gt; ids){
      &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;getUsersByIds&lt;/span&gt;(ids);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619230022084-1918464379.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里是为请求的Header中加入参数的注解，但是之前我们的服务提供者并没有这个方法，这里为&lt;code&gt;GetRequestController&lt;/code&gt;添加一个方法如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/headers&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getParamByRequestHeader&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们为Feign这个类添加一个调用上边方法的方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 这里是将参数添加到Headers中&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param name &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;参数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/headers&quot;&lt;/span&gt;)
    String &lt;span class=&quot;fu&quot;&gt;getParamByHeaders&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Controller中，添加代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/headers&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getParamByHeaders&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;) String name){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;getParamByHeaders&lt;/span&gt;(name);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619230038236-303919996.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;requestbody&quot;&gt;5. &lt;code&gt;@RequestBody&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;使用这个注解需要使用Post请求，这里简单举例&lt;/p&gt;
&lt;p&gt;Feign类中添加方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 调用服务提供者的post方法,接收回来再被服务提供者丢回来&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param user &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;User对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/user&quot;&lt;/span&gt;, method = RequestMethod.&lt;span class=&quot;fu&quot;&gt;POST&lt;/span&gt;)
    User &lt;span class=&quot;fu&quot;&gt;getUserByRequestBody&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestBody&lt;/span&gt; User user);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Controller中添加&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@PostMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/requestBody&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;fu&quot;&gt;getParamByRequestBody&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestBody&lt;/span&gt; User user){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; eurekaServiceFeign.&lt;span class=&quot;fu&quot;&gt;getUserByRequestBody&lt;/span&gt;(user);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1149398/201806/1149398-20180619230103964-1313086076.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;需要注意的是&lt;code&gt;@RequestParam&lt;/code&gt;和&lt;code&gt;@RequestHeader&lt;/code&gt;，以及最先提到的&lt;code&gt;@PathVariable&lt;/code&gt;这三个注解都需要写明参数名称，这点与SpringMVC中不同，否则会报IllegalStateException异常，所以一定要指明参数名！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时间不早了，明天继续更&lt;/p&gt;
</description>
<pubDate>Tue, 19 Jun 2018 15:02:00 +0000</pubDate>
<dc:creator>东北小狐狸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hellxz/p/9201608.html</dc:identifier>
</item>
<item>
<title>云计算测试技术体系及发展方向(一) - 大卡尔</title>
<link>http://www.cnblogs.com/jinsdu/p/9201413.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jinsdu/p/9201413.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;得益于过去几年移动互联网红利，移动测试圈也发展的如火如荼，催生了很多的测试框架，解决方案，甚至测试相关的技术大会。然而云计算测试这块却探讨的不多，原因会有很多，比如从业门槛高，技术一般特性强(非测试专属)，行业中搞云计算的企业也不多等等因素。&lt;/p&gt;
&lt;p&gt;笔者近几年一直活动在云计算领域，在此想结合这几年的切身体会，给大家介绍下云计算领域的测试技术体系，以及各自的发展方向。有些跟传统的质量保证方向一样，有些稍有些区别。一家之言，以飨大家。&lt;/p&gt;
&lt;h2 id=&quot;总起&quot;&gt;总起&lt;/h2&gt;
&lt;p&gt;一定要明确，不管是什么业务形态，所有的测试技术一定是为&lt;strong&gt;保障产品质量，提高迭代效率&lt;/strong&gt;而存在的。这是主线方向，不能丢。所以沿着此条思路，任何产品形态的测试技术发展脉络就都是有迹可循，云计算也不例外。如果我们将产品从代码形态到最终服务线上客户这个过程看成是一条流水线的话，那么保证产品质量的过程基本可分为&lt;strong&gt;保障代码质量，构建业务测试场景并不断提高测试覆盖率，到最终的构建质量监测与评估的全套闭环&lt;/strong&gt;。每一步都是有足够的纵深可以挖掘，每一步做好了都会非常出彩。&lt;/p&gt;
&lt;h2 id=&quot;保障代码质量&quot;&gt;保障代码质量&lt;/h2&gt;
&lt;p&gt;很多传统企业甚至外企，测试作为质量保证的最终一环，在追求高质量的前提下，会将测试这一环建设的比较重。研发测试比一直居高不下，有时可能会达到夸张的2比1，甚至1比1的情况，然而，在日益严重的人力资源成本下，这种模式很明显难以为继。同样在云计算领域，这种模式更加的不可能。云计算技术为了应对海量用户，高并发场景等，会广泛的使用分布式技术。服务的多实例化，天然的支持灰度升级。在这种模式下，小步快跑，快速迭代才是王道。&lt;/p&gt;
&lt;p&gt;同样在这样的形式，利用有限的测试人力，去获得更大的质量保证成果，就成为必然，这也是我们一直思考的方向。在此形势下，&lt;strong&gt;质量必须是全员建设&lt;/strong&gt;，且围绕业务质量，将质量保证体系前移，是我们探索出的一个非常有利的手段。而生产高质量的代码，就是其中非常重要的一环。那么如何保障代码质量呢？笔者认为，通常绕不开以下三个方面: &lt;strong&gt;构建语言的编程规范，能够快速检测语言层面的代码缺陷，以及构建强大友好的单测服务支撑&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;构建语言的编程规范&quot;&gt;构建语言的编程规范&lt;/h4&gt;
&lt;p&gt;所有的工程师都明白，遵守良好的编程规范对保证代码质量，加强团队协作具有不可估量的价值。大多数语言，围绕其语法语义层面都会有基本的编程规范推荐, 比如go语言的gofmt。同样，作为代码可读性考量，业界也会有其通用性的规范。这一块的落实，大家多数是通过Code Review方式来进行。当然也有做的比较好，直接落实在工具，IDE层面，比如阿里巴巴，不光出了JAVA开发手册，还同时配套主流编程工具IntelliJ IDEA，eclipse的相关辅助插件。&lt;/p&gt;
&lt;p&gt;我们做质量保证体系的，这块就非常有责任去相应的推动落实，以更好的工具化，服务化的方式提供给大家使用。不一定每样都要自行研发，最好结合公司的研发资源，以最佳实践方式来落地。这块搞好了，不光有实际收益，对团队，公司的技术影响力也会有很大的提升。&lt;/p&gt;
&lt;h4 id=&quot;检测语言层面的代码缺陷&quot;&gt;检测语言层面的代码缺陷&lt;/h4&gt;
&lt;p&gt;同样，语言层面的静态分析，也是检测缺陷的有力手段。不同于传统测试手段，静态分析可以在不运行代码的前提下，通过一定的词法分析，语法分析等来快速检测代码的规范性，安全性等问题。这类工具的一大特性就是快，可以想想，如果我们能提供一个比较好用的类似工具，在工程师提交PR时，就检测到他们代码中的问题，工程师立马改正，这种效率可就远胜于集成测试阶段发现问题然后再改了！&lt;/p&gt;
&lt;p&gt;不过搞静态分析难度系数较大，且很多时候准确率不高，要想做好这块，需要有较大的技术投入才行。&lt;/p&gt;
&lt;h4 id=&quot;构建强大友好的单测服务支撑&quot;&gt;构建强大友好的单测服务支撑&lt;/h4&gt;
&lt;p&gt;搞质量的多数都熟悉测试金字塔理论，应该知道单测的投入产出比是最大的，所以从如何促进研发写单测角度，来进行一定的工程投入是非常值得的。甚至采用一些商业服务，也不为过。比如我司，所有的代码都托管在github上，单测跑在travis里，非常方便。&lt;/p&gt;
&lt;p&gt;除此之外，我们还可以考虑出一些单测工具，最佳实践，各种例子来辅助，教习研发写单测。实践发现，很多时候并不是研发不愿意写单测，而是其不会写，又或者发现写某些单测的投入较大，于是他们就放弃了。而这些都应该是质量体系要解决的问题。&lt;/p&gt;
&lt;p&gt;好的单测服务，不光是辅助研发如何写单测，同时也可以起到激励作用。比如，如果我们将单测结果能友好的量化出来，去推动不同研发之间的比拼意识，服务之间的比拼意识，甚至团队之间的比拼意识，那么就能起到非常好的良性促进作用。&lt;/p&gt;
&lt;p&gt;这块整体的难度系数较低，收益又很明显，应当做为质量保证体系中很重要的一环去建设。&lt;/p&gt;
&lt;h2 id=&quot;构建业务测试覆盖&quot;&gt;构建业务测试覆盖&lt;/h2&gt;
&lt;p&gt;前面谈了主要从如何保证代码质量的角度，提出了3个测试技术发展方向。但光关注代码这一层一定是不够的，我们还应该从业务角度去关注我们的产品质量到底如何。这个阶段是绝大多数QA人员比较熟悉的。可能不少QA同学会把这个阶段说成API测试，集成测试等，但这是动作。我认为这里主要应该强调目的，所以我把该阶段抽象为&lt;strong&gt;构建业务测试覆盖&lt;/strong&gt;。我们不断的测试或者写自动化，其目标就是尽可能的覆盖各种业务场景，各种新需求，避免发布到线上出问题。&lt;/p&gt;
&lt;p&gt;这块的测试技术发展上当遵循两大方向: &lt;strong&gt;接口自动化，故障注入。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;构建接口自动化&quot;&gt;构建接口自动化&lt;/h4&gt;
&lt;p&gt;绝大多数云计算服务都是通过API方式，对外暴漏，所以从业务测试角度，我们就需要通过调用这些API，模拟业务请求来测试这些服务。在实际场景中，为了做好这些，通常需要一套完善的自动化测试框架，当然实操上也比较简单。不管哪个测试框架，主要解决以下问题，比如，需要好用的Http客户端来发送HTTP请求和处理Response，方便灵活的Assert库，测试用例的组织和执行。这是基本的需求，当case数量到一定量级，还需要做完善的测试报告，统一的log方便定位问题，以及灵活的业务SDK。&lt;/p&gt;
&lt;p&gt;测试框架不建议从头自己写，选择热门开源的项目可以快速的开展工作。比如，go语言，就可以使用Ginkgo+Gomega+Gorequest+Glog的组合。&lt;/p&gt;
&lt;p&gt;云服务接口因为要应对海量并发场景，单纯的功能测试需求，不够完善，还需要针对每个接口进行高并发测试。笔者之前分享过一篇&lt;a href=&quot;http://www.cnblogs.com/jinsdu/p/6347572.html&quot;&gt;GO并发编程实践&lt;/a&gt;， 里面的例子都可以融合到这些测试框架里，方便在实际的迭代中使用，以提高效率。稍加改造这些例子，完全可以应对更高的并发场景，以及基准测试等需求。相对与jmeter等工具会轻便很多。&lt;/p&gt;
&lt;p&gt;另外，还有些公司因为绝大多数测试同学都是手工测试，为了提高这部分同学的效率，可能会专门为他们做些更简易的封装，提供UI界面。这些属于锦上添花型，在绝大多数QA同学都是测试开发的云计算行业，有点鸡肋，不建议花太多精力在这个方面。&lt;/p&gt;
&lt;p&gt;不过，所有的这些方式其实都是常规的测试模式，需要人工一条条的补充业务测试场景。但是人就有可能犯错，有可能遗漏测试场景。并且在常规的迭代中，多数同学比较容易关注新需求，有时候就会遗漏旧有的业务场景组合，容易造成回归问题遗漏。所以针对接口自动化这个方向，如何能更好的提高业务测试覆盖率，才是需要QA同学持续探索的。&lt;/p&gt;
&lt;p&gt;此方向，笔者将会在下篇中更深入分析，此处按下不表。&lt;/p&gt;
&lt;h4 id=&quot;引入故障注入机制&quot;&gt;引入故障注入机制&lt;/h4&gt;
&lt;p&gt;说到云计算的测试技术，就不得不提起&lt;strong&gt;Fault Injection&lt;/strong&gt;。前面提到的接口自动化，思考的逻辑是从业务角度，保证系统在正常的情形下做正确的事。但还里，还有个很大的问题就是如果服务所依赖的环境不符合预期了，系统还能正常工作吗？&lt;/p&gt;
&lt;p&gt;实践发现，在面对多机房，海量机器的场景下，云计算基础设施出问题的概率是非常大的。比较常见的如磁盘损坏，网络故障，机器宕机等等，可能时时刻刻都在发生，每一种故障都有可能引发数据丢失，系统雪崩等重大灾难，对业务造成难以估量的损失。云计算系统需要在各种故障场景下仍能正常工作，做到高可用，高可靠需要投入巨大的精力。同样，如何更灵活验收这些场景，如何能模拟更多的故障场景，也是测试技术需要投入的巨大课题。&lt;/p&gt;
&lt;p&gt;好的故障注入方式一定是朝着&lt;strong&gt;Simulate everything automatically, and be able to reproduce the fault again&lt;/strong&gt;方向去的。从常规的服务挂掉，到机器宕机，坏盘，磁盘高负载，网络延迟，丢包，不通等等情况，通过工具或者命令我们都可以手动模拟的，但是模拟一次系统不出问题，不代表就一定不出问题，云计算的复杂业务调用关系就决定了故障注入必须是常态化的运行，这样才能在长时间，高频次的测试下，增大问题检出概率。所以故障注入系统应该构建成自动化的方式，并且每次执行还要记录详细的故障注入步骤，这样在检测出问题时，方便复现和修复后的再次验证。&lt;/p&gt;
&lt;h2 id=&quot;质量监测体系&quot;&gt;质量监测体系&lt;/h2&gt;
&lt;p&gt;前面我们从代码质量和业务验证角度，阐述了云计算测试技术的几个方向。但实践中发现，还有些场景和问题，上述场景并不能很好的覆盖到。比如句柄和内存泄露等问题，这种问题需要一定的时间的发酵，且单纯的从业务角度，感知也不会太明显。再比如，前面说到的故障注入，那故障发生后，如何判断系统是否工作正常？如何判断一个故障对系统的影响范围？这些问题必须明确，因为只有这样，我们才能更好的分析问题，明确问题的修复优先级。&lt;/p&gt;
&lt;p&gt;实践发现，要解决上述问题，我们还需要构建完善的&lt;strong&gt;质量监测体系&lt;/strong&gt;，辅助做好业务质量的测试和评估。&lt;/p&gt;
&lt;h4 id=&quot;业务质量监测&quot;&gt;业务质量监测&lt;/h4&gt;
&lt;p&gt;为了更好的运营系统，服务客户，所有云计算系统一般都会有一整套的线上监控体系。但在测试环境同样运营这一套系统的却很少，我认为这是很大缺失的。测试环境我们可以不照搬线上完整的一套，但是入口级的业务质量必须要有。这样在做故障模拟测试时，就可以及时的感知系统的整体质量。同样上面提到一些服务本身的内建质量也应该加上，比如内存，句柄等等。真正能在集成测试和灰度验收时，检测到更多的问题。&lt;/p&gt;
&lt;p&gt;传统的验收测试，比较关注业务本身的&quot;true与false&quot;,但在实际生产的复杂场景，还有更多的指标需要关注。比如响应时间。如果说业务验收从E2E角度来考虑，那么业务质量监测就是从整个系统端来考量。各有各的优势，在质量保证体系里，二者缺一不可。&lt;/p&gt;
&lt;h2 id=&quot;云计算测试技术体系图&quot;&gt;云计算测试技术体系图&lt;/h2&gt;
&lt;p&gt;总结我上面描述的测试技术体系，可以用下面这个图来概况:&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/293394/201806/293394-20180619224028180-1152982931.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;里程碑&quot;&gt;里程碑&lt;/h2&gt;
&lt;p&gt;很多时候，很多测试团队会做着做着，把自己做成人力外包团队，输出QA 人力 Resource，这是是非常low的。七牛的CEO老许曾说过，七牛的所有团队都应该是产品团队，包括HR。Can't agree more!! 我认为理想中的测试团队不光要拥有业务质量的全局视角，还要能深入到业务构建的底层技术细节，然后围绕业务质量方向，打造核心产品或平台，以此来提供高价值的质量保证服务。测试不在于人，而在于服务。测试服务不是测试同学的玩物，应该是围绕解决如何保证业务质量的难题。同时，单个人，或者单个组织来做质量保证必有其局限性，质量全员建设才是王道。&lt;/p&gt;
&lt;p&gt;需要明确的是，上面总结的是测试技术体系，并不是完整的质量保证体系。完整的质量保证体系，不光有技术层面，还要有一定的流程规范来约束。&lt;/p&gt;
&lt;p&gt;另一方面，要达到我上面所说的测试技术体系，常规的测试团队很难完成，而应该结合基础设施团队共同构建才能达到。这里不是常规的缺乏质量sense的基础设施团队，而应该是真正的Test Infrastructure Team。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;童鞋，点个赞吧(⊙o⊙)？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Email: &lt;a href=&quot;mailto:jinsdu@outlook.com&quot;&gt;jinsdu@outlook.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blog: &lt;a href=&quot;http://www.cnblogs.com/jinsdu/&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/jinsdu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/CarlJi&quot; class=&quot;uri&quot;&gt;https://github.com/CarlJi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知乎: &lt;a href=&quot;https://www.zhihu.com/people/jinsdu/posts&quot; class=&quot;uri&quot;&gt;https://www.zhihu.com/people/jinsdu/posts&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Tue, 19 Jun 2018 14:43:00 +0000</pubDate>
<dc:creator>大卡尔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jinsdu/p/9201413.html</dc:identifier>
</item>
</channel>
</rss>