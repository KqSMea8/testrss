<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>使用ui-route实现多层嵌套路由 - 孟丽媛</title>
<link>http://www.cnblogs.com/Anita-meng/p/8254163.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Anita-meng/p/8254163.html</guid>
<description>&lt;p&gt;一、预期实现效果：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://liyuan-meng.github.io/uiRouter-app/index.html&quot; rel=&quot;nofollow&quot;&gt;https://liyuan-meng.github.io/uiRouter-app/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;（项目地址：https://github.com/liyuan-meng/uiRouter-app）&lt;/p&gt;
&lt;p&gt;二、分析题目要求，给出依赖关系，构建项目&lt;/p&gt;
&lt;p&gt;1. service:&lt;/p&gt;
&lt;p&gt;（1）根据条件查询people数据checkPeople.service，不给出条件则查询所有。&lt;/p&gt;
&lt;p&gt;（2）得到路由信息getStateParams.service。&lt;/p&gt;
&lt;p&gt;2. components:&lt;/p&gt;
&lt;p&gt;（1）hello模块：点击button按钮更改内容。&lt;/p&gt;
&lt;p&gt;（2）peolpleList模块：显示people列表，点击people显示people详情。依赖于checkPeople.service模块。&lt;/p&gt;
&lt;p&gt;（3）peopleDetail模块：显示people详情，依赖于checkPeople.service模块和getStateParams.service模块。&lt;/p&gt;
&lt;p&gt;3. 构建项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/967867/201801/967867-20180109223325644-749286516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如图所示：component目录用来保存所有服务模块和业务模块，lib目录保存外部引用（我是用的是angular.js1.5.8和ui-route0.2.18），app.config.js文件用来配置路由，index.html则作为入口文件。&lt;/p&gt;
&lt;p&gt;三、实现这个例子&lt;/p&gt;
&lt;p&gt;1. 首页index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./lib/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./lib/angular-ui-route.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./app.config.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/core/people/checkPeople.service.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/core/people/getStateParams.service.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/hello/hello.component.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/people-list/people-list.component.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./components/people-detail/people-detail.component.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;helloSolarSystem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;ui-sref&lt;/span&gt;&lt;span&gt;=&quot;helloState&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;ui-sref&lt;/span&gt;&lt;span&gt;=&quot;aboutState&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;About&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;ui-sref&lt;/span&gt;&lt;span&gt;=&quot;peopleState&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;People&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）导入lib中的文件以及所有用到的service和component服务的文件。&lt;/p&gt;
&lt;p&gt;（2）ng-app=&quot;helloSolarSystem&quot;指明了从helloSolarSystem模块开始解析。&lt;/p&gt;
&lt;p&gt;（3）定义视图&amp;lt;ui-view&amp;gt;&amp;lt;/ui-view&amp;gt;&lt;/p&gt;
&lt;p&gt;2. 配置路由app.config.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;helloSolarSystem&quot;, ['peopleList', 'peopleDetail', 'hello','ui.router'&lt;span&gt;]).

    config([&lt;/span&gt;'$stateProvider', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($stateProvider) {

        $stateProvider.state(&lt;/span&gt;'helloState'&lt;span&gt;, {
            url: &lt;/span&gt;'/helloState'&lt;span&gt;,
            template:&lt;/span&gt;'&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;'&lt;span&gt;

        }).state(&lt;/span&gt;'aboutState'&lt;span&gt;, {
            url: &lt;/span&gt;'/about'&lt;span&gt;,
            template: &lt;/span&gt;'&amp;lt;h4&amp;gt;Its the UI-Router Hello Solar System app!&amp;lt;/h4&amp;gt;'&lt;span&gt;

        }).state(&lt;/span&gt;'peopleState'&lt;span&gt;, {
            url: &lt;/span&gt;'/peopleList'&lt;span&gt;,
            template:&lt;/span&gt;'&amp;lt;people-list&amp;gt;&amp;lt;/people-list&amp;gt;'&lt;span&gt;

        }).state(&lt;/span&gt;'peopleState.details'&lt;span&gt;, {
            url:&lt;/span&gt;'/detail/:id'&lt;span&gt;,
            template: &lt;/span&gt;'&amp;lt;people-detail&amp;gt;&amp;lt;/people-detail&amp;gt;'&lt;span&gt;
        })
    }
]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）模块名字：helloSolarSystem；&lt;/p&gt;
&lt;p&gt;（2）注入'peopleList', 'peopleDetail', 'hello','ui.router'模块。&lt;/p&gt;
&lt;p&gt;（3）配置stateProvider服务的视图控制，例如第一个名为helloState的视图控制器：当ui-sref == &quot;helloState&quot;的时候，路由更新为url的值#/helloState，并且&amp;lt;ui-view&amp;gt;&amp;lt;/ui-view&amp;gt;中显示的内容为&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;组件解析出的内容。&lt;/p&gt;
&lt;p&gt;（4）嵌套路由的实现：名为peopleState的视图控制器是父路由。名为peopleState.details的视图控制器是子路由。这是一种相对路由方式，父路由将匹配.../index.html#/peopleState/，子路由将匹配.../index.html#/peopleState/detail/x（x是/detail/:id中的id的值）。如果改成绝对路由的形式，只需要写成url:'^/detail/:id',这时子路由将匹配.../index.html#/detail/x（x是/detail/:id中的id的值）。&lt;/p&gt;
&lt;p&gt;4. 实现checkPeople.service（根据条件查找people）&lt;/p&gt;
&lt;p&gt;checkPeople.sercice.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据条件（参数）查找信息。&lt;/span&gt;
angular.module('people.checkPeople', ['ui.router'&lt;span&gt;]).
    factory(&lt;/span&gt;'CheckPeople', ['$http', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($http) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
            getData: getData
        };
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getData(filed) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; people;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; promise =&lt;span&gt;  $http({
                method: &lt;/span&gt;'GET'&lt;span&gt;,
                url: &lt;/span&gt;'./data/people.json'&lt;span&gt;
            }).then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (response) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (filed) {
                    people &lt;/span&gt;= response.data.filter(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (value) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Number(value.id) ===&lt;span&gt; Number(filed)) {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
                        }
                    })
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    people &lt;/span&gt;=&lt;span&gt; response.data;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; people;
            });
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; promise;
        }
    }]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）在getData这个函数中，我们想要返回一个保存people信息的数组，但是由于使用$http().then()服务的时候，这是一个异步请求，我们并不知道请求什么时候结束，所以世界返回people数组是有问题的。我们注意到，$http().then()是一个Promise对象，所以我们可以想到直接将这个对象返回，这样在就可以使用&quot;函数的结果.then(function(data))&quot;来得到异步请求拿来的数据data。&lt;/p&gt;
&lt;p&gt;3. 实现getStateParams.service（获取路由信息）&lt;/p&gt;
&lt;p&gt;getStatePatams.service.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&quot;use strict&quot;&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;getStateParams&quot;, ['ui.router'&lt;span&gt;]).
    factory(&lt;/span&gt;&quot;GetStateParams&quot;, [&quot;$location&quot;, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ($location) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
            getParams: getParams
        };
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getParams() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; partUrlArr = $location.url().split(&quot;/&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; partUrlArr[partUrlArr.length-1&lt;span&gt;];
        }
}]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）这里的getParams函数返回的是路由信息的最后一个数据，也就是people的id，这个service有些特殊，不够通用，可能还需要优化一下会更加合理。不过并不影响我们的需求。&lt;/p&gt;
&lt;p&gt;4. 实现hello模块&lt;/p&gt;
&lt;p&gt;hello.template.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-hide&lt;/span&gt;&lt;span&gt;=&quot;hideFirstContent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hello solar sytem!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-hide&lt;/span&gt;&lt;span&gt;=&quot;!hideFirstContent&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;whats up solar sytem!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;ng-click&lt;/span&gt;&lt;span&gt;=&quot;ctlButton()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;click&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hello.component.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;hello&quot;&lt;span&gt;, [])
    .component(&lt;/span&gt;'hello'&lt;span&gt;, {
        templateUrl: &lt;/span&gt;'./components/hello/hello.template.html'&lt;span&gt;,
        controller: [&lt;/span&gt;&quot;$scope&quot;&lt;span&gt;, 
            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; HelloController($scope) {
                $scope.hideFirstContent &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                $scope.ctlButton &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hideFirstContent = !&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.hideFirstContent;
                };
            }
        ]
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5. 实现peolpeList模块：&lt;/p&gt;
&lt;p&gt;peopleList.template.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;ng-repeat&lt;/span&gt;&lt;span&gt;=&quot;item in people&quot;&lt;/span&gt;&lt;span&gt; ui-sref&lt;/span&gt;&lt;span&gt;=&quot;peopleState.details({id:item.id})&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-view&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（1）这里的&amp;lt;ui-view&amp;gt;&amp;lt;/ui-view&amp;gt;用来显示peopleList的子组件pepleDetail&lt;/p&gt;
&lt;p&gt;peopleList.component.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;peopleList&quot;, ['people.checkPeople'&lt;span&gt;])
    .component(&lt;/span&gt;'peopleList'&lt;span&gt;, {
        templateUrl: &lt;/span&gt;'./components/people-list/people-list.template.html'&lt;span&gt;,
        controller: [&lt;/span&gt;'CheckPeople','$scope'&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; PeopleListController(CheckPeople, $scope) {
                $scope.people &lt;/span&gt;=&lt;span&gt; [];
                CheckPeople.getData().then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                    $scope.people &lt;/span&gt;=&lt;span&gt; data;
                });
            }
        ]
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6. 实现peopleDetail模块&lt;/p&gt;
&lt;p&gt;peopleDetail.template.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;ng-repeat&lt;/span&gt;&lt;span&gt;=&quot;item in peopleDetails track by $index&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;名字： {{item.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;介绍： {{item.intro}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;peopleDetail.component.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
'use strict'&lt;span&gt;;

angular.module(&lt;/span&gt;&quot;peopleDetail&quot;, ['people.checkPeople', 'getStateParams'&lt;span&gt;])
    .component(&lt;/span&gt;'peopleDetail'&lt;span&gt;, {
        templateUrl: &lt;/span&gt;'./components/people-detail/people-detail.template.html'&lt;span&gt;,
        controller: [&lt;/span&gt;'CheckPeople', 'GetStateParams', '$scope'&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; peopleDetailController(CheckPeople, GetStateParams, $scope) {
                $scope.peopleDetails &lt;/span&gt;=&lt;span&gt; [];
                CheckPeople.getData(GetStateParams.getParams()).then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                    $scope.peopleDetails &lt;/span&gt;=&lt;span&gt; data;
                });
            }
        ]
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.源码：&lt;/p&gt;
&lt;p&gt;https://github.com/liyuan-meng/uiRouter-app&lt;/p&gt;

</description>
<pubDate>Tue, 09 Jan 2018 15:31:00 +0000</pubDate>
<dc:creator>孟丽媛</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Anita-meng/p/8254163.html</dc:identifier>
</item>
<item>
<title>[UWP]如何使用Fluent Design System (上) - dino.c</title>
<link>http://www.cnblogs.com/dino623/p/FluentDesignSystem.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dino623/p/FluentDesignSystem.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;1. 前言&lt;/h2&gt;
&lt;p&gt;微软在&lt;a href=&quot;https://news.microsoft.com/build2017/&quot;&gt;Build 2017&lt;/a&gt;中公布了新的设计语言Fluent Design System（以下简称FDS），不过&lt;a href=&quot;https://fluent.microsoft.com/&quot;&gt;官网&lt;/a&gt;只是堆砌了各种华丽的词语以及一堆动画。至于在UWP中要做成怎么样，怎么做，可以参考这个视频：&lt;br/&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Build/2017/B8034&quot;&gt;Build Amazing Apps with Fluent Design - Build 2017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频中使用&lt;a href=&quot;https://github.com/Microsoft/BuildCast&quot;&gt;BuildCast&lt;/a&gt;这个示例应用详细展示了Fall Creators Update(16299)中如何实现FDS以及其它FCU的新API，极具参考价值。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230136831-1614533023.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;或者参考&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/fluent-design-system/index&quot;&gt;开发人员官网&lt;/a&gt;，这里详细介绍了FDS的五大核心主题（Material（材质）、Light（光照）、Depth（深度）、Motion（动态）和 Scale（伸缩性））相关功能及使用规范。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;好像没见到专门提供给设计人员的FDS指南？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;fall-creators-update中的fluent-design-system&quot;&gt;2. Fall Creators Update中的Fluent Design System&lt;/h2&gt;
&lt;p&gt;本文主要介绍微软在Fall Creators Update中主打的各种FDS特效、控件。&lt;/p&gt;
&lt;h3 id=&quot;material&quot;&gt;2.1 Material&lt;/h3&gt;
&lt;p&gt;材质是FDS最好玩的主题，以往主推的Metro强调去材质化，现在又重新提把材质捡回来。不过目前FDS中材质的应用场景有明确规定，并不是和以前材质化泛滥时一样连所有按钮都材质化。从材质的回归可以看出UWP的承载主体已经从屏幕延伸到MR。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/style/acrylic&quot;&gt;Acrylic&lt;/a&gt;是目前FDS主打的材质。在Fall Creators Update之前计算器等几个应用已经用上了这个特效，效果看起来还不错。Acrylic除了负责展现材质化的效果，还负责营造有深度的UI。简单来说Acrylic只是一个Brush，UWP提供了一组Acrylic Brush给开发者使用，通过ThemeResource找到资源名字中包含“Acrylic”的Brush即可轻松在应用中使用Acrylic，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Grid&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource SystemControlAcrylicElementBrush}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Acrylic包含两种。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Background acrylic&lt;/strong&gt; 透视整个应用UI，可以看到应用窗体后的其它应用或桌面（在ThemeResource中名称包含 -AcrylicWindow-）。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230328237-1735800495.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;In-app acrylic&lt;/strong&gt; 只透视套用了acrylic brush的元素（在ThemeResource中名称包含 -AcrylicElement-）。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230332346-1903584429.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;light&quot;&gt;2.2 Light&lt;/h3&gt;
&lt;p&gt;UWP使用&lt;a href=&quot;https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Composition.CompositionLight&quot;&gt;CompositionLight&lt;/a&gt;可以制造很多很有趣的光照效果，FDS主打的光照特效是&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/style/reveal&quot;&gt;Reveal&lt;/a&gt;，在FCU中大部分Items Control（ListView、GridView等）都默认启用了Reveal特效，一些Button控件也可以通过套用Style启用这个特效。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Button Content&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{StaticResource ButtonRevealStyle}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230427003-1368146291.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Reveal最大的特点是鼠标靠近时控件的边框会被照亮，这对于无边框按钮或ListViewItem可以在不破坏其简约设计的前提下提示其可操作区域。（或许在MR中Reveal有更多的应用场景。）&lt;/p&gt;
&lt;h3 id=&quot;depth&quot;&gt;2.3 Depth&lt;/h3&gt;
&lt;p&gt;即使在强调扁平化的时代，深度仍是设计师关心的一个主题。FCU中除了使用Acrylic营造有深度的UI，还新增了&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/motion/parallax&quot;&gt;ParallaxView&lt;/a&gt;控件，可以制作简单的视差滚动效果。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ParallaxView&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;parallaxView&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;              Source=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{Binding ElementName=listView}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;              VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Top&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;              HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Left&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;              VerticalShift=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;50&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Image&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Source=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ms-appx:///Assets/cliff.jpg&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ParallaxView&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ListView&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;listView&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;          HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Stretch&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;          VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Top&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;          Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#80000000&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;Item 1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;Item 2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;x:String&amp;gt;&lt;/span&gt;Item 3&lt;span class=&quot;kw&quot;&gt;&amp;lt;/x:String&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ListView.ItemTemplate&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;DataTemplate&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextBlock&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{Binding}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                       Foreground=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;White&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/DataTemplate&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ListView.ItemTemplate&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ListView&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106230745206-275023596.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;motion&quot;&gt;2.4 Motion&lt;/h3&gt;
&lt;p&gt;UWP控件自带的动画已经不少，&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/motion/connected-animation&quot;&gt;Connected animations&lt;/a&gt;则更进一步。Connected animations通常用于在导航中引导视觉，定位操作对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180109162315113-162034370.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比起默认的写法，我更喜欢UWP Community Toolkit封装好的 &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwpcommunitytoolkit/animations/ConnectedAnimations&quot;&gt;Connected Animations 附加属性&lt;/a&gt;。只需在源页面和目标页面的操作对象使用相同的Connected.Key即可轻松实现Connected animations。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MotionPage.xaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Border&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource SystemControlForegroundAccentBrush}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Center&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        animations:Connected.Key=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Tapped=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Border_Tapped&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;MotionPage.xaml.cs&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;navigationService.&lt;span class=&quot;fu&quot;&gt;NavigateToPage&lt;/span&gt;&amp;lt;ConnectedAnimations2ndPage&amp;gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;ConnectedAnimations2ndPage.xaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Border&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;HeroElement&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;300&quot;&lt;/span&gt; 
&lt;span class=&quot;ot&quot;&gt;        Width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;300&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        Background=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource SystemControlForegroundAccentBrush}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        animations:Connected.Key=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106231004878-1148575734.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;scale&quot;&gt;2.5 Scale&lt;/h3&gt;
&lt;p&gt;在FDS中，伸缩性这个主题比较特殊。它没有主打的控件或API，简单地理解成适应各种屏幕尺寸的响应式设计也可以，但我更愿意将它的主旨理解成设计可以在0D到3D的形式中延伸，即可以适应从语言到鼠标、键盘、触摸、MR等各种形式的输入和输出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106231211924-1745685927.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对设计师和开发人员来说这个主题可能不太有趣，毕竟它看起来只是繁琐，一点都不华丽。但我觉得重申这个主题十分重要，UWP诞生的目的就是为了打造能在各种设备上运行的通用应用，伸缩性对UWP至关重要。即使只针对桌面设备，能有各种输入方式对可用性都有很大提高。可惜随着最近移动系统的流行，设计师越来越习惯设计只针对触摸的UI，连带影响到桌面应用，快捷键越来越少，有些设计师甚至拒绝提供按钮的PointerOver效果。希望随着设计规范及控件的完善这个问题能有所改善吧。&lt;/p&gt;
&lt;h2 id=&quot;在fall-creators-update中升级应用&quot;&gt;3. 在Fall Creators Update中升级应用&lt;/h2&gt;
&lt;p&gt;在Fall Creators Update中只需要修改导航及标题栏，应用的UI即可有大幅提升。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106231601987-1690497169.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用navigationview更新导航菜单&quot;&gt;3.1 使用NavigationView更新导航菜单&lt;/h3&gt;
&lt;p&gt;以前很多教程都专门讲解了怎么制作汉堡包菜单，现在UWP终于提供了默认方案。&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/navigationview&quot;&gt;NavigationView&lt;/a&gt;是Fall Creators Update提供的新导航菜单，它应用了FDS最常用的两个特效：Acrylic和Reveal，可以折叠及最小化，使用简单：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationView&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; IsSettingsVisible=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;True&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;NavigationView&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                AlwaysShowHeader=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;False&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                ItemInvoked=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;NavigationView_ItemInvoked&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                x:FieldModifier=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Public&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationView.MenuItems&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Material&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                            IsSelected=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Light&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Motion&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Depth&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; Content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Scale&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;FontIcon&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; FontFamily=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Segoe MDL2 Assets&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                          Glyph=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;#xF126;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem.Icon&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationViewItem&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationView.MenuItems&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;Frame&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;RootFrame&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Navigated=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;RootFrame_Navigated&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/Frame&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/NavigationView&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;将内容扩展到标题栏&quot;&gt;3.2 将内容扩展到标题栏&lt;/h3&gt;
&lt;p&gt;在程序启动或每次更改主题颜色时调用&lt;code&gt;SetupTitlebar()&lt;/code&gt;这个函数，注意要根据当前主题颜色改变TitleBar上按钮的颜色（因为官方文档上没有，所以很多人会忘了处理按钮的颜色）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SetupTitlebar&lt;/span&gt;()
{
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ApiInformation.&lt;span class=&quot;fu&quot;&gt;IsTypePresent&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Windows.UI.ViewManagement.ApplicationView&quot;&lt;/span&gt;))
    {
        &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; titleBar = ApplicationView.&lt;span class=&quot;fu&quot;&gt;GetForCurrentView&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;TitleBar&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (titleBar != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
        {
            titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonBackgroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Transparent&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;TrueTheme&lt;/span&gt;() == ElementTheme.&lt;span class=&quot;fu&quot;&gt;Dark&lt;/span&gt;)
            {
                titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;White&lt;/span&gt;;
                titleBar.&lt;span class=&quot;fu&quot;&gt;ForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;White&lt;/span&gt;;
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
            {
                titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Black&lt;/span&gt;;
                titleBar.&lt;span class=&quot;fu&quot;&gt;ForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Black&lt;/span&gt;;
            }

            titleBar.&lt;span class=&quot;fu&quot;&gt;BackgroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Black&lt;/span&gt;;

            titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonInactiveBackgroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;Transparent&lt;/span&gt;;
            titleBar.&lt;span class=&quot;fu&quot;&gt;ButtonInactiveForegroundColor&lt;/span&gt; = Colors.&lt;span class=&quot;fu&quot;&gt;LightGray&lt;/span&gt;;

            CoreApplicationViewTitleBar coreTitleBar = TitleBarHelper.&lt;span class=&quot;fu&quot;&gt;Instance&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;TitleBar&lt;/span&gt;;

            coreTitleBar.&lt;span class=&quot;fu&quot;&gt;ExtendViewIntoTitleBar&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        }
    }
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; ElementTheme &lt;span class=&quot;fu&quot;&gt;TrueTheme&lt;/span&gt;()
{
    &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; frameworkElement = Window.&lt;span class=&quot;fu&quot;&gt;Current&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; FrameworkElement;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; frameworkElement.&lt;span class=&quot;fu&quot;&gt;ActualTheme&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主页中使用TextBlock代替应用标题：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;TextBlock&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; x:Name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;WindowTitle&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{ThemeResource CaptionTextBlockStyle}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Visibility=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{x:Bind TitleHelper.TitleVisibility, Mode=OneWay}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Margin=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{x:Bind TitleHelper.TitlePosition, Mode=OneWay}&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Top&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;           Text=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{x:Bind appmodel:Package.Current.DisplayName}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我自己的&lt;a href=&quot;https://github.com/DinoChan/Colorful-Box&quot;&gt;ColorfulBox&lt;/a&gt;应用在使用上述方案升级后外观有了不少改善（请忽略标题没有垂直居中这个小错误）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106234840143-283547442.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（待续...）&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 15:22:00 +0000</pubDate>
<dc:creator>dino.c</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dino623/p/FluentDesignSystem.html</dc:identifier>
</item>
<item>
<title>【软件】关于Notepad++（32位） - Cherry_波克比</title>
<link>http://www.cnblogs.com/cherry611557/p/8254102.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cherry611557/p/8254102.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.Notepad++安装包&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简介：NotePad++是一个轻量级的代码编辑器，占用内存少，运行速度快。&lt;/p&gt;
&lt;p&gt;官网网址：&lt;a title=&quot;Notepad++_download&quot; href=&quot;https://notepad-plus-plus.org/download/v7.5.4.html&quot; target=&quot;_blank&quot;&gt;https://notepad-plus-plus.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;百度网盘：&lt;a title=&quot;Notepad++_download_baidupan&quot; href=&quot;https://pan.baidu.com/s/1gg7M6eJ&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1gg7M6eJ&lt;/a&gt;（密码：dnud）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1065837/201801/1065837-20180109214638207-1459812585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.Notepad++插件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）NppAStyle.dll&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简介：Notepad++本来是没有自动缩进（格式化）的功能的，NppAStyle可以让代码风格看起来更美观。&lt;/p&gt;
&lt;p&gt;官网网址：&lt;a title=&quot;NppAStyle.dll_download&quot; href=&quot;https://sourceforge.net/projects/nppastyle/files/&quot; target=&quot;_blank&quot;&gt;https://sourceforge.net/projects/nppastyle/files/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1065837/201801/1065837-20180109214525097-543517789.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;百度网盘：&lt;a title=&quot;NppAStyle.dll_download_baidupan&quot; href=&quot;https://pan.baidu.com/s/1sm2c2Vr&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1sm2c2Vr&lt;/a&gt;（密码：h3z1）&lt;/p&gt;
&lt;p&gt;备注：官网和百度网盘下载下来的压缩文件内均包含两个文件夹ansi和unicode，ansi是标准编码，支持语言少；unicode是通用编码，支持较多语言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1065837/201801/1065837-20180109220623957-721114169.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装方法：只需将NppAStyle.dll文件解压到Notepad++所在的安装文件的Plugins文件下即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1065837/201801/1065837-20180109230205472-750249322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Note：&lt;/p&gt;

</description>
<pubDate>Tue, 09 Jan 2018 15:07:00 +0000</pubDate>
<dc:creator>Cherry_波克比</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cherry611557/p/8254102.html</dc:identifier>
</item>
<item>
<title>QuickStart系列：docker部署之Elasticsearch - yusina</title>
<link>http://www.cnblogs.com/wtujvk/p/8254101.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wtujvk/p/8254101.html</guid>
<description>&lt;p&gt;&lt;span&gt;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。---选自&lt;a title=&quot;elasticsearch&quot; href=&quot;https://baike.so.com/doc/6990701-7213557.html&quot; target=&quot;_blank&quot;&gt;百度百科&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;官方文档：&lt;a title=&quot;官网elasticsearch&quot; href=&quot;https://www.elastic.co/cn/&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/cn/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当前版本 6.1.0（2018.1.9）这里使用的是 开发环境 是为了快速部署 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;环境: VM虚拟机12上 CentOS7 ,Docker 是ce版本，分配内存4G &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;或者 将目录挂载在宿主机上：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;docker run -p 9200:9200 -p 9300:9300 -v /opt/data/elasticsearch/esdata  /usr/share/elasticsearch/data -e &quot;discovery.type=single-node&quot; elasticsearch&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 -v 表示挂载docker容器里目录到宿主机的命令 /opt/data/elasticsearch/esdata是宿主机的目录  /usr/share/elasticsearch/data是容器里面的目录&lt;/p&gt;
&lt;p&gt;elasticsearch是镜像名，默认是latest版本 也可以加上版本号 例如 elasticsearch:5.6.1&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Docker安装Elasticsearch： &lt;a title=&quot;Docker安装elasticsearch&quot; href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 15:06:00 +0000</pubDate>
<dc:creator>yusina</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wtujvk/p/8254101.html</dc:identifier>
</item>
<item>
<title>【读书笔记与思考】《python数据分析与挖掘实战》-张良均 - .....?</title>
<link>http://www.cnblogs.com/fanling999/p/8254010.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fanling999/p/8254010.html</guid>
<description>&lt;p&gt;最近看一些机器学习相关书籍，主要是为了拓宽视野。在阅读这本书前最吸引我的地方是实战篇，我通读全书后给我印象最深的还是实战篇。基础篇我也看了，但发现有不少理论还是讲得不够透彻，个人还是比较倾向于 《Machine Learning》--Tom M.Mitchell，Andrew 的 machine learning 课程，或周华志的《机器学习》，Jiawei Han 的 《data mining》。相对于本书的基础篇，这些侧重于理论基础的课程和书籍对基础模型的理解和阐释要更系统化。另外，值得注意的是本书基础篇有多处错误，比如高斯分布的公式，阅读时应当留意。&lt;/p&gt;
&lt;p&gt;机器学习的工程实践过程大致可分为如下几个步骤：问题抽象、确定目标、采集数据、数据预处理（探索、清洗和变换）、模型选择与构建、模型评价和模型应用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;其中问题的抽象和目标确定很关键，只有充分的理解“我们想要什么”才能更好的去思考“如何做”。&lt;/li&gt;
&lt;li&gt;数据采集的手段多种多样，常见的有传感器、互联网数据库、爬虫等，采集的手段往往和业务背景密切联系。&lt;/li&gt;
&lt;li&gt;数据预处理，这个环节往往要耗费大量时间并且需要灵活的思考，为了保证数据的质量这一步骤尤为关键。我们需要调研一些领域知识，基于领域知识和统计特征对数据进行前期的探索，在进一步清洗的基础上进行数据变换，即特征提取。&lt;strong&gt;特征工程&lt;/strong&gt;往往是模型成败的关键，这里需要多加思考、联合领域知识并反复尝试评估。&lt;/li&gt;
&lt;li&gt;模型选择与构建，机器学习和数据挖掘发展至今已经有很多成熟的模型可供使用。很多时候我们需要基于业务的场景以及任务目标对比不同的模型进行选择。我们需要深入理解模型的原理、应用场景和优缺点。&lt;/li&gt;
&lt;li&gt;模型的评价，机器学习的最终目的是降低&lt;strong&gt;泛化误差&lt;/strong&gt;，然而我们只能通过有限的数据（训练数据）对其进行近似计算。如何根据不同的任务，选择合适的指标对模型进行评估很关键。比如回归问题的 RMSE。分类问题的 accuracy, precision, recall, f1-scall 等。充分利用图表，比如 ROC等。&lt;/li&gt;
&lt;li&gt;模型的应用，对资源、模型的实时性等方面进行综合考虑。我们需要定期的更新我们的模型以适应环境的变化。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本书涉及的主要内容包括&lt;strong&gt;时间序列分析&lt;/strong&gt;，&lt;strong&gt;分类&lt;/strong&gt;，&lt;strong&gt;回归预测&lt;/strong&gt;，&lt;strong&gt;关联关系挖掘&lt;/strong&gt;，&lt;strong&gt;推荐系统&lt;/strong&gt;。以下是我读过的一些书籍整理，可以作为进一步的扩展。这里还想到了本科时学的《数学建模》，实际上和数据挖掘的流程很相似。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;时间序列分析可以进一步参考《时间序列分析及应用》——Jonathan D.Cryer，《Time Series Analysis and Its Applications with R examples》-- Robert H. Shumway。相对于 Python，其实 R 在时间序列分析上的支持更为完善。&lt;/li&gt;
&lt;li&gt;统计机器学习（分类，回归预测）：sklearn 官方的 tutorial 我觉得很好，理论的话，《Machine Learning》--Tom M.Mitchell，Andrew 的 machine learning 课程，或周华志的《机器学习》。&lt;/li&gt;
&lt;li&gt;数据挖掘：最为经典的Jiawei Han 的 《data mining》，其中涉及了数据挖掘的基本流程和方法、数据处理、数据仓库、分类、预测、异常检测、关联关系挖掘等内容。“Data Mining”--Charu C.Aggarwal，其特点是加入了时序数据处理的内容，可作为进阶内容。&lt;/li&gt;
&lt;li&gt;推荐系统：《推荐系统实践》——项亮，很好的入门书籍。&lt;/li&gt;
&lt;li&gt;关于工具，我觉得官网的 tutorial 是很好的入门资料。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我没有动手实操，阅读旨在拓宽自己的视野，也是出于对各个行业如何应用机器学习的好奇。如果时间有余的读者不妨过一遍书本的例子，应该会有更深的认识。此外通过 kaggle 等比赛平台去进行实践也是不错的。&lt;/p&gt;
&lt;p&gt;总的来说，对于 data driven 的工程实践还是应该做足调研，几乎不可能有一个全新的方向和全新的难题。因此学会在巨人的肩膀上去拓展很重要，尤其是在数据科学这一交叉领域，注意团队合作。平时注重积累，处理问题发散思考很重要，很多特征的设计都很巧妙且有意思。&lt;/p&gt;


&lt;p&gt;作者：张良均、王路、谭立云、苏剑林&lt;br/&gt;注意：这本书有多处地方有误，尤其是公式推导部分。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基础篇&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#01&quot;&gt;01. 数据挖掘基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#02&quot;&gt;02. Python 数据分析简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#03&quot;&gt;03. 数据探索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#04&quot;&gt;04. 数据预处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#05&quot;&gt;05. 数据建模&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实战篇&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#06&quot;&gt;06. 电力窃漏电用户自动识别：&lt;/a&gt;基于 5 年所有窃电用户的有关数据（用户基本信息，各种用电功率等）对窃电用户进行识别。基于目标对数据进行清洗，缺失值填充。基于领域知识构建了 3 个指标：电量趋势下降指标-用电量趋势，线损指标-线损增长率，告警类指标-与窃漏电相关的终端告警数。基于 3 个指标利用 Keras 构建 LM 神经网络模型，准确率为 94%；Scikit-Learn CART 决策树的准确率为 94%。使用 ROC 曲线对模型进行评估。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#07&quot;&gt;07. 航空公司客户价值分析：&lt;/a&gt;借助航空公司客户数据对客户进行分类，在此基础上对不同类客户进行对比分析发现有价值的模式。基于分析结果提供个性化服务，制定相应的营销策略。基于领域知识了解到 LRFMC模型，由此可计算 5 个关键指标作为特征，分别为客户关系长度 L, 消费时间间隔 R, 消费频率 F, 飞行里程 M 和折扣系数的平均 C。采用 k-means 聚类划分用户群，采用图表的形式分析不同用户群的特点并制定营销策略。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#08&quot;&gt;08. 中医证型关联规则挖掘：&lt;/a&gt;借助三阴乳腺癌患者的病理信息，挖掘患者的症状与中医证型之间的关联关系。对截断治疗提供依据，挖掘潜在性证素。由于医疗数据的缺乏，通过问卷调查的形式获取数据。问卷调查仅针对患病者并且具有一定中以诊断学基础，能清除的描述病情。根据领域知识得到 6 种证型得分作为后期模型分析的基础。采用Apriori 算法进行关联关系挖掘，注意选择合适的最小支持度、最小置信度。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#09&quot;&gt;09. 基于水色图像的水质评价：&lt;/a&gt;有经验的从事渔业生产的从业者可通过观察水色变化调控水质，以维持养殖水体生态系统中浮游植物、微生物、浮游动物等合理的动态平衡。我们期望通过机器学习的方法将这一过程自动化。通过拍摄照片获取不同水质的图片。这里我们还需要通过专家对数据打 label，这个过程很是费时费力，并且质量奖影响整体模型的效果。使用直接提取的方式对图片进行切割，在此基础上计算 一阶颜色矩，二阶颜色矩，三阶颜色矩 3 个特征。将特征向量输入到 svm 分类器中，这里有个需要注意的细节，征的范围都在 0～1 之间，如果直接输入 SVM，彼此之间区分度会比较小，&lt;strong&gt;因此不妨将所有特征统一乘以一个适当的常数 k&lt;/strong&gt;，经过反复测试最佳的 k=30。&lt;br/&gt;实际上对于图片的处理，现在大多都直接采用 DNN，尤其是 CNN 在图像处理中表现出非常好的效果。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#10&quot;&gt;10. 家用电器用户行为分析与事件识别：&lt;/a&gt;对热水器使用中的用水事件进行识别。分析过程涉及到领域知识和基于数据观察的手工特征，并没有涉及太多的模型，几乎都是基于阈值进行数据的处理。最后使用 BP 神经网络进行分类识别，准确率 85.5%。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#11&quot;&gt;11. 应用系统负载分析与磁盘容量预测：&lt;/a&gt;这是时间序列预测的一个典型案例，主要涉及到 ARIMA 模型应用的细节。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#12&quot;&gt;12. 电子商务网站用户行为分析及服务推荐：&lt;/a&gt;这是推荐系统的一个应用实例。爬虫获取数据，数据的探索分类，这一过程占了不少工作量。基于物品和基于用户的协同过滤推荐之间的权衡。为用户和物品之间建立关系，使得用户更容易发现潜在有价值的物品，同时使得长尾物品更容易被发掘出来。基本步骤为（1）计算物品之间的相似度；（2）根据物品的相似度和用户的历史行为给用户生成推荐列表。对于推荐系统的评价应该考虑 3 个方面：用户、物品提供者和提供推荐系统的网站。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#13&quot;&gt;13. 财政收入影响因素分析及预测模型：&lt;/a&gt;通过 Adative-Lasso 模型进行特征选择。灰色预测与神经网路组合模型进行预测。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#14&quot;&gt;14. 基于基站定位数据的商圈分析：&lt;/a&gt;计算 4 个指标，工作日上班时间人均停留时间、凌晨人均停留时间、周末人均停留时间、日均人流量。基于以上 4 个指标进行层次聚类，根据谱系聚类图可以聚成 3 类。通过图表观察每个簇的特征。“轨迹挖掘”是一个新兴的研究主题，尤其是面向拼车推荐应用是轨迹挖掘。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/fanling999/p/8254010.html#15&quot;&gt;15. 电商产品评论数据情感分析：&lt;/a&gt; 主要是主题模型的应用。“八爪鱼”爬虫工具爬取评论数据，并进行文本去重、机械压缩去词和短句删除等数据预处理操作。（1）构建情感倾向性模型对评论进行分类，即分为正面、负面和中性 3 类评论。这里有两个关键点，一个是文本的表示，训练栈式自编码网络；另一方面是类别标注，人工标注费时。本案例使用 ROST 系统完成情感倾向性分析的任务。（2）基于语义网络的评论分析，抽取正面、负面两组，以进行语意网络的构建与分析。由于中性评论过于复杂本案例没有进一步分析。（3）基于 LDA 模型的主题分析，针对正面和负面的文本分别使用 LDA 发现潜在的主题。基于前 3 个分析结果给出改进建议。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Tue, 09 Jan 2018 14:34:00 +0000</pubDate>
<dc:creator>.....?</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fanling999/p/8254010.html</dc:identifier>
</item>
<item>
<title>dubbo源码—service reference - lacker</title>
<link>http://www.cnblogs.com/sunshine-2015/p/8253974.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-2015/p/8253974.html</guid>
<description>&lt;h2 id=&quot;service-reference&quot;&gt;service reference&lt;/h2&gt;
&lt;p&gt;在编写好服务之后，dubbo会将服务export出去，这个时候就可以编写consumer来调用这个服务了。dubbo作为一个rpc框架，使用者使用远程服务和使用本地服务是类似的，不用关心远程服务在哪里，怎么引用的，因为dubbo包含了自动发现和引用服务的功能。&lt;/p&gt;
&lt;p&gt;dubbo引用服务主要工作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;创建proxy和Invoker（DubboInvoker里面会启动NettyClient）&lt;/li&gt;
&lt;li&gt;将consumer注册到注册中心&lt;/li&gt;
&lt;li&gt;订阅configurators、providers、routers&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;通过java代码引用&quot;&gt;通过Java代码引用&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;ReferenceConfig&amp;lt;TestDubboService&amp;gt; reference = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ReferenceConfig&lt;/span&gt;();
reference.&lt;span class=&quot;fu&quot;&gt;setApplication&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ApplicationConfig&lt;/span&gt;(appName));
reference.&lt;span class=&quot;fu&quot;&gt;setRegistry&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RegistryConfig&lt;/span&gt;(dubboRegistry));
reference.&lt;span class=&quot;fu&quot;&gt;setInterface&lt;/span&gt;(TestDubboService.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
reference.&lt;span class=&quot;fu&quot;&gt;setTimeout&lt;/span&gt;(timeout);
TestDubboService service = (TestDubboService)reference.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用Java代码配置很明显，直接使用ReferenceConfig.get获取一个proxy&lt;/p&gt;
&lt;h3 id=&quot;通过spring配置引用&quot;&gt;通过spring配置引用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;dubbo:reference interface=&quot;com.test.service.TestDubboService&quot; id=&quot;testDubboService&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;spring解析该dubbo自定义标签的时候（请提前学习spring如何解析自定义标签），会初始化ReferenceBean，该bean是一个factoryBean并且继承自ReferenceConfig，在getBean方法中调用了ReferenceConfig.get，接下来的方式就和上面“使用Java代码引用”一致了。所以dubbo引用服务的工作就主要在于如何创建proxy。&lt;/p&gt;
&lt;h3 id=&quot;referenceconfig初始化&quot;&gt;ReferenceConfig初始化&lt;/h3&gt;
&lt;p&gt;ReferenceConfig的主要作用是配置并引用远程服务，创建远程服务的本地代理。ReferenceBean继承自ReferenceConfig，ReferenceConfig是一个FactoryBean ，实现了getObject方法，在spring容器初始化完成的时候会初始化配置为非lazyInit的bean，也就会调用ReferenceBean.getObject方法，里面会调用ReferenceConfig.get方法，从而触发ServiceConfig的初始化方法ServiceConfig.init。&lt;/p&gt;
&lt;p&gt;inti方法的主要逻辑是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;判断是否已经初始化，get方法是同步方法，所以只需直接判断标志位initialized即可&lt;/li&gt;
&lt;li&gt;判断配置的interface是否正确&lt;/li&gt;
&lt;li&gt;判断-D参数配置或者配置文件是否配置是直连提供者&lt;/li&gt;
&lt;li&gt;配置application、module、registries、monitor等&lt;/li&gt;
&lt;li&gt;检查stub和mock配置（类似provider端的检查）&lt;/li&gt;
&lt;li&gt;搜集需要配置到URL中的参数，先将参数收集到map中，URL参数在refer的过程中极其重要，dubbo中的所有配置几乎都是靠URL传递，从URL中获取或者设置到URL中&lt;/li&gt;
&lt;li&gt;创建远程服务的本地代理，createProxy&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;如何创建proxy&quot;&gt;如何创建proxy&lt;/h2&gt;
&lt;p&gt;由于是远程服务，consumer需要有一个代理来处理consumer发起的远程过程调用。dubbo通过远程调用的可执行体Invoker的代理来实现。接下来主要就是先创建Invoker，然后创建Invoker的proxy。&lt;/p&gt;
&lt;p&gt;创建Invoker调用堆栈如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/846961/201801/846961-20180109221941972-969374916.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;createProxy的主要功能：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;判断ReferenceConfig中是否配置了url，如果配置了url，则不从registry中获取，直接使用配置的url。&lt;/li&gt;
&lt;li&gt;没有配置url，从registry配置拼装url&lt;/li&gt;
&lt;li&gt;根据上面配置好的URL来refer对应的服务，创建远程服务的可执行体Invoker&lt;/li&gt;
&lt;li&gt;将所有的invokers聚合成一个可执行实体MockClusterInvoker&lt;/li&gt;
&lt;li&gt;给MockClusterInvoker创建一个代理类，这个代理类就是我们在consumer端使用的远程服务代理，该代理实现了对应的service接口，对应的InvocationHandler就是作为代理类构造方法入参的MockClusterInvoker，在后面一节分析中会说明consumer怎么发起调用&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面主要说说Invoker的创建过程：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;和provider一样，会调用ProtocolFilterWrapper#refer和ProtocolListenerWrapper#refer，分别构造filter链和调用对应的listener.referred&lt;/li&gt;
&lt;li&gt;RegistryProtocol#refer会判断是否配置了group&lt;/li&gt;
&lt;li&gt;根据上面的调用堆栈会调用ZookeeperRegistry#doSubscribe，该方法中会订阅providers、configurators等，并通过notify方法来调用到AbstractRegistry#notify，里面会针对每一个category调用对应listener.notify，consumer端的listener是RegistryDirectory，所以这里会调用RegistryDirectory#notify&lt;/li&gt;
&lt;li&gt;RegistryDirectory#notify，这个方法也是registry对应节点变化后监听的listener，会对每一种监听的节点类型做处理，这里先只看provider的处理，调用refreshInvoker方法&lt;/li&gt;
&lt;li&gt;refreshInvoker方法就是将配置好的url转换为Invoker，如果转化后的invoker至少有一个，并且少于原来的invoker（缓存的invoker），则会把废弃的invoker销毁掉（destroy）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里具体说明一下consumer订阅，ZookeeperRegistry#doSubscribe中会将url中配置的category取出来拼接成registry的目录节点形式，然后订阅这些节点&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// RegistryProtocol类&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;doRefer&lt;/span&gt;(Cluster cluster, Registry registry, Class&amp;lt;T&amp;gt; type, URL url) {
  &lt;span class=&quot;co&quot;&gt;// ... 省略中间代码&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 这里调用的是RegistryDirectory.subscribe方法&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 在这里将consumer端想要订阅的category添加到url，包括providers,configurators,routers&lt;/span&gt;
  directory.&lt;span class=&quot;fu&quot;&gt;subscribe&lt;/span&gt;(subscribeUrl.&lt;span class=&quot;fu&quot;&gt;addParameter&lt;/span&gt;(Constants.&lt;span class=&quot;fu&quot;&gt;CATEGORY_KEY&lt;/span&gt;, 
                                                Constants.&lt;span class=&quot;fu&quot;&gt;PROVIDERS_CATEGORY&lt;/span&gt; 
                                                + &lt;span class=&quot;st&quot;&gt;&quot;,&quot;&lt;/span&gt; + Constants.&lt;span class=&quot;fu&quot;&gt;CONFIGURATORS_CATEGORY&lt;/span&gt; 
                                                + &lt;span class=&quot;st&quot;&gt;&quot;,&quot;&lt;/span&gt; + Constants.&lt;span class=&quot;fu&quot;&gt;ROUTERS_CATEGORY&lt;/span&gt;));
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cluster.&lt;span class=&quot;fu&quot;&gt;join&lt;/span&gt;(directory);
}

&lt;span class=&quot;co&quot;&gt;// ZookeeperRegistry在doSubscribe调用自己的下面这个方法，将URL中的category转化为registry中的目录对应的url&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String[] &lt;span class=&quot;fu&quot;&gt;toCategoriesPath&lt;/span&gt;(URL url) {
  String[] categroies;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Constants.&lt;span class=&quot;fu&quot;&gt;ANY_VALUE&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(url.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(Constants.&lt;span class=&quot;fu&quot;&gt;CATEGORY_KEY&lt;/span&gt;))) {
    &lt;span class=&quot;co&quot;&gt;// 如果配置的category是*，则取所有的category：providers,consumer,routers,configurators&lt;/span&gt;
    categroies = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[] {Constants.&lt;span class=&quot;fu&quot;&gt;PROVIDERS_CATEGORY&lt;/span&gt;, Constants.&lt;span class=&quot;fu&quot;&gt;CONSUMERS_CATEGORY&lt;/span&gt;, 
                               Constants.&lt;span class=&quot;fu&quot;&gt;ROUTERS_CATEGORY&lt;/span&gt;, Constants.&lt;span class=&quot;fu&quot;&gt;CONFIGURATORS_CATEGORY&lt;/span&gt;};
  } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
    categroies = url.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(Constants.&lt;span class=&quot;fu&quot;&gt;CATEGORY_KEY&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[] {Constants.&lt;span class=&quot;fu&quot;&gt;DEFAULT_CATEGORY&lt;/span&gt;});
  }
  String[] paths = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[categroies.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;];
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; categroies.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;; i ++) {
    &lt;span class=&quot;co&quot;&gt;// 将category拼接成registry中的目录形式，类似：/dubbo/com.test.service.TestDubboService/providers&lt;/span&gt;
    paths[i] = &lt;span class=&quot;fu&quot;&gt;toServicePath&lt;/span&gt;(url) + Constants.&lt;span class=&quot;fu&quot;&gt;PATH_SEPARATOR&lt;/span&gt; + categroies[i];
  }
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; paths;
}


&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doSubscribe&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; URL url, &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; NotifyListener listener) {
  &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Constants.&lt;span class=&quot;fu&quot;&gt;ANY_VALUE&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(url.&lt;span class=&quot;fu&quot;&gt;getServiceInterface&lt;/span&gt;())) {
        &lt;span class=&quot;co&quot;&gt;// ... 省略中间代码&lt;/span&gt;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
      List&amp;lt;URL&amp;gt; urls = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;URL&amp;gt;();
      &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String path : &lt;span class=&quot;fu&quot;&gt;toCategoriesPath&lt;/span&gt;(url)) {
        ConcurrentMap&amp;lt;NotifyListener, ChildListener&amp;gt; listeners = zkListeners.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(url);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (listeners == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
          &lt;span class=&quot;co&quot;&gt;// 如果之前该路径没有添加过listener，则创建一个map来放置listener&lt;/span&gt;
          zkListeners.&lt;span class=&quot;fu&quot;&gt;putIfAbsent&lt;/span&gt;(url, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;NotifyListener, ChildListener&amp;gt;());
          listeners = zkListeners.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(url);
        }
        ChildListener zkListener = listeners.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(listener);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (zkListener == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
          &lt;span class=&quot;co&quot;&gt;// 如果没有添加过对于子节点的listener，则创建&lt;/span&gt;
          listeners.&lt;span class=&quot;fu&quot;&gt;putIfAbsent&lt;/span&gt;(listener, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ChildListener&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;childChanged&lt;/span&gt;(String parentPath, List&amp;lt;String&amp;gt; currentChilds) {
              ZookeeperRegistry.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;notify&lt;/span&gt;(url, listener, &lt;span class=&quot;fu&quot;&gt;toUrlsWithEmpty&lt;/span&gt;(url, parentPath, currentChilds));
            }
          });
          zkListener = listeners.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(listener);
        }
        zkClient.&lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(path, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 添加listener到该目录及其子节点&lt;/span&gt;
        List&amp;lt;String&amp;gt; children = zkClient.&lt;span class=&quot;fu&quot;&gt;addChildListener&lt;/span&gt;(path, zkListener);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (children != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
          urls.&lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;toUrlsWithEmpty&lt;/span&gt;(url, path, children));
        }
      }
      &lt;span class=&quot;co&quot;&gt;// 这个方法本身会导致监听的目录及其子节点变化，直接调用notify&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;notify&lt;/span&gt;(url, listener, urls);
    }
  } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable e) {
    &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RpcException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Failed to subscribe &quot;&lt;/span&gt; + url + &lt;span class=&quot;st&quot;&gt;&quot; to zookeeper &quot;&lt;/span&gt; + &lt;span class=&quot;fu&quot;&gt;getUrl&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;, cause: &quot;&lt;/span&gt; + e.&lt;span class=&quot;fu&quot;&gt;getMessage&lt;/span&gt;(), e);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面是consumer的订阅部分的源码，在consumer订阅的时候会调用FailbackRegistry#notify，接下来就是将url转换为Invoker，接下来的调用链路可以参考上面方法调用堆栈的图，转化的主要代码为：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;registry&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;integration&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;RegistryDirectory&lt;/span&gt;#refreshInvoker
com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;registry&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;integration&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;RegistryDirectory&lt;/span&gt;#toInvokers&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个方法中的源代码注释较为详细了就不再赘述了。&lt;/p&gt;
&lt;p&gt;在toInvokers方法中会调用DubboProtocol#refer，在该方法中启动NettyClient。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;provider提供服务后，consumer端就可以找到并引用该服务，接下来就可以像使用本地服务一样使用该服务了，发起远程该过程调用。&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 14:20:00 +0000</pubDate>
<dc:creator>lacker</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-2015/p/8253974.html</dc:identifier>
</item>
<item>
<title>MySQL 行锁 表锁机制 - ITDragon龙</title>
<link>http://www.cnblogs.com/itdragon/p/8194622.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itdragon/p/8194622.html</guid>
<description>&lt;p&gt;行锁变表锁，是福还是坑？如果你不清楚MySQL加锁的原理，你会被它整的很惨！不知坑在何方？没事，我来给你们标记几个坑。遇到了可别乱踩。通过本章内容，带你学习MySQL的行锁，表锁，两种锁的优缺点，行锁变表锁的原因，以及开发中需要注意的事项。还在等啥？经验等你来拿！&lt;/p&gt;
&lt;p&gt;MySQL的存储引擎是从MyISAM到InnoDB，锁从表锁到行锁。后者的出现从某种程度上是弥补前者的不足。比如：MyISAM不支持事务，InnoDB支持事务。表锁虽然开销小，锁表快，但高并发下性能低。行锁虽然开销大，锁表慢，但高并发下相比之下性能更高。事务和行锁都是在确保数据准确的基础上提高并发的处理能力。本章重点介绍InnoDB的行锁。&lt;/p&gt;
&lt;h2 id=&quot;案例分析&quot;&gt;案例分析&lt;/h2&gt;
&lt;p&gt;目前，MySQL常用的存储引擎是InnoDB，相对于MyISAM而言。InnoDB更适合高并发场景，同时也支持事务处理。我们通过下面这个案例(坑)，来了解行锁和表锁。&lt;br/&gt;业务：因为订单重复导入，需要用脚本将订单状态为&quot;待客服确认&quot;且平台是&quot;xxx&quot;的数据批量修改为&quot;已关闭&quot;。&lt;br/&gt;说明：避免直接修改订单表造成数据异常。这里用innodb_lock 表演示InnoDB的行锁。表中有三个字段：id，k(key值)，v(value值)。&lt;br/&gt;步骤：&lt;br/&gt;第一步：连接数据库，这里为了方便区分命名为Transaction-A，设置autocommit为零，表示需手动提交事务。&lt;br/&gt;第二步：Transaction-A，执行update修改id为1的命令。&lt;br/&gt;第三步：新增一个连接，命名为Transaction-B，能正常修改id为2的数据。再执行修改id为1的数据命令时，却发现该命令一直处理阻塞等待中。&lt;br/&gt;第四步：Transaction-A，执行commit命令。Transaction-B，修改id为1的命令自动执行，等待37.51秒。&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;多个事务操作同一行数据时，后来的事务处于阻塞等待状态。这样可以避免了脏读等数据一致性的问题。后来的事务可以操作其他行数据，解决了表锁高并发性能低的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;commit&lt;/span&gt;;

# Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'2001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.37&lt;/span&gt; sec)
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;37.51&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了上面的模拟操作，结果和理论又惊奇的一致，似乎可以放心大胆的实战。。。。。。但现实真的很残酷。&lt;br/&gt;现实：当执行批量修改数据脚本的时候，行锁升级为表锁。其他对订单的操作都处于等待中，，，&lt;br/&gt;原因：InnoDB只有在通过索引条件检索数据时使用行级锁，否则使用表锁！而模拟操作正是通过id去作为检索条件，而id又是MySQL自动创建的唯一索引，所以才忽略了行锁变表锁的情况。&lt;br/&gt;步骤：&lt;br/&gt;第一步：还原问题，Transaction-A，通过k=1更新v。Transaction-B，通过k=2更新v，命令处于阻塞等待状态。&lt;br/&gt;第二步：处理问题，给需要作为查询条件的字段添加索引。用完后可以删掉。&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;InnoDB的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁&lt;/strong&gt;。索引失效的原因在上一章节中已经介绍：&lt;a href=&quot;http://www.cnblogs.com/itdragon/p/8146439.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/itdragon/p/8146439.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;commit&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; idx_k &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; innodb_lock(k);

Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'2002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;19.82&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的案例看出，行锁变表锁似乎是一个坑，可MySQL没有这么无聊给你挖坑。这是因为MySQL有自己的执行计划。&lt;br/&gt;当你需要更新一张较大表的大部分甚至全表的数据时。而你又傻乎乎地用索引作为检索条件。一不小心开启了行锁(没毛病啊！保证数据的一致性！)。可MySQL却认为大量对一张表使用行锁，会导致事务执行效率低，从而可能造成其他事务长时间锁等待和更多的锁冲突问题，性能严重下降。所以MySQL会将行锁升级为表锁，即实际上并没有使用索引。&lt;br/&gt;我们仔细想想也能理解，既然整张表的大部分数据都要更新数据，一行一行地加锁效率则更低。其实我们可以通过explain命令查看MySQL的执行计划，你会发现key为null。表明MySQL实际上并没有使用索引，行锁升级为表锁也和上面的结论一致。&lt;br/&gt;本章重点介绍InnoDB的行锁及其相关的事务知识。如果想了解MySQL的执行计划，请看&lt;a href=&quot;http://www.cnblogs.com/itdragon/p/8146439.html&quot;&gt;上一章节&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;行锁&quot;&gt;行锁&lt;/h2&gt;
&lt;p&gt;行锁的劣势：开销大；加锁慢；会出现死锁&lt;br/&gt;行锁的优势：锁的粒度小，发生锁冲突的概率低；处理并发的能力强&lt;br/&gt;加锁的方式：自动加锁。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁；对于普通SELECT语句，InnoDB不会加任何锁；当然我们也可以显示的加锁：&lt;br/&gt;共享锁：select * from tableName where ... + lock in share more&lt;br/&gt;排他锁：select * from tableName where ... + for update&lt;br/&gt;InnoDB和MyISAM的最大不同点有两个：一，InnoDB支持事务(transaction)；二，默认采用行级锁。加锁可以保证事务的一致性，可谓是有人(锁)的地方，就有江湖(事务)；我们先简单了解一下事务知识。&lt;/p&gt;
&lt;h3 id=&quot;mysql-事务属性&quot;&gt;MySQL 事务属性&lt;/h3&gt;
&lt;p&gt;事务是由一组SQL语句组成的逻辑处理单元，事务具有ACID属性。&lt;br/&gt;&lt;strong&gt;原子性&lt;/strong&gt;（Atomicity）：事务是一个原子操作单元。在当时原子是不可分割的最小元素，其对数据的修改，要么全部成功，要么全部都不成功。&lt;br/&gt;&lt;strong&gt;一致性&lt;/strong&gt;（Consistent）：事务开始到结束的时间段内，数据都必须保持一致状态。&lt;br/&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的&quot;独立&quot;环境执行。&lt;br/&gt;&lt;strong&gt;持久性&lt;/strong&gt;（Durable）：事务完成后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。&lt;/p&gt;
&lt;h3 id=&quot;事务常见问题&quot;&gt;事务常见问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;更新丢失&lt;/strong&gt;（Lost Update）&lt;br/&gt;原因：当多个事务选择同一行操作，并且都是基于最初选定的值，由于每个事务都不知道其他事务的存在，就会发生更新覆盖的问题。类比github提交冲突。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脏读&lt;/strong&gt;（Dirty Reads）&lt;br/&gt;原因：事务A读取了事务B已经修改但尚未提交的数据。若事务B回滚数据，事务A的数据存在不一致性的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;（Non-Repeatable Reads）&lt;br/&gt;原因：事务A第一次读取最初数据，第二次读取事务B已经提交的修改或删除数据。导致两次读取数据不一致。不符合事务的隔离性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;幻读&lt;/strong&gt;（Phantom Reads）&lt;br/&gt;原因：事务A根据相同条件第二次查询到事务B提交的新增数据，两次数据结果集不一致。不符合事务的隔离性。&lt;/p&gt;
&lt;p&gt;幻读和脏读有点类似&lt;br/&gt;脏读是事务B里面修改了数据，&lt;br/&gt;幻读是事务B里面新增了数据。&lt;/p&gt;
&lt;h3 id=&quot;事务的隔离级别&quot;&gt;事务的隔离级别&lt;/h3&gt;
&lt;p&gt;数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大。这是因为事务隔离实质上是将事务在一定程度上&quot;串行&quot;进行，这显然与&quot;并发&quot;是矛盾的。根据自己的业务逻辑，权衡能接受的最大副作用。从而平衡了&quot;隔离&quot; 和 &quot;并发&quot;的问题。MySQL默认隔离级别是可重复读。&lt;br/&gt;脏读，不可重复读，幻读，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 隔离级别                      | 读数据一致性         | 脏读         | 不可重复 读   | 幻读         |
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 未提交读(&lt;span class=&quot;kw&quot;&gt;Read&lt;/span&gt; uncommitted)    | 最低级别            | 是            | 是           | 是           | 
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 已提交读(&lt;span class=&quot;kw&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;committed&lt;/span&gt;)      | 语句级              | 否           | 是           | 是           |
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 可重复读(Repeatable &lt;span class=&quot;kw&quot;&gt;read&lt;/span&gt;)     | 事务级              | 否           | 否           | 是           |
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;
| 可序列化(&lt;span class=&quot;kw&quot;&gt;Serializable&lt;/span&gt;)        | 最高级别，事务级     | 否           | 否           | 否           |
+&lt;span class=&quot;co&quot;&gt;------------------------------+---------------------+--------------+--------------+--------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看当前数据库的事务隔离级别：show variables like 'tx_isolation';&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show variables &lt;span class=&quot;kw&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'tx_isolation'&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;---------------+-----------------+&lt;/span&gt;
| Variable_name | &lt;span class=&quot;fu&quot;&gt;Value&lt;/span&gt;           |
+&lt;span class=&quot;co&quot;&gt;---------------+-----------------+&lt;/span&gt;
| tx_isolation  | REPEATABLE-READ |
+&lt;span class=&quot;co&quot;&gt;---------------+-----------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;间隙锁&quot;&gt;间隙锁&lt;/h3&gt;
&lt;p&gt;当我们用范围条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做&quot;间隙(GAP)&quot;。InnoDB也会对这个&quot;间隙&quot;加锁，这种锁机制就是所谓的间隙锁(Next-Key锁)。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; k=&lt;span class=&quot;dv&quot;&gt;66&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &amp;gt;=&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.63&lt;/span&gt; sec)
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;commit&lt;/span&gt;;

Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; innodb_lock (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;,k,v) &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'7'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'7000'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;18.99&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;危害(坑)：&lt;strong&gt;若执行的条件是范围过大，则InnoDB会将整个范围内所有的索引键值全部锁定，很容易对性能造成影响&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;排他锁&quot;&gt;排他锁&lt;/h3&gt;
&lt;p&gt;排他锁，也称写锁，独占锁，当前写操作没有完成前，它会阻断其他写锁和读锁。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180108223455238-1630428254.png&quot; alt=&quot;排他锁&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction_A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | k    | v    |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    | &lt;span class=&quot;dv&quot;&gt;4000&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'4001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)
&lt;span class=&quot;kw&quot;&gt;Rows&lt;/span&gt; matched: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  Changed: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  Warnings: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;commit&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.04&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction_B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | k    | v    |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    | &lt;span class=&quot;dv&quot;&gt;4001&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;9.53&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;共享锁&quot;&gt;共享锁&lt;/h3&gt;
&lt;p&gt;共享锁，也称读锁，多用于判断数据是否存在，多个读操作可以同时进行而不会互相影响。当如果事务对读锁进行修改操作，很可能会造成死锁。如下图所示。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180108222644301-1772818432.png&quot; alt=&quot;共享锁&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction_A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mode&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | k    | v    |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    | &lt;span class=&quot;dv&quot;&gt;4001&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'4002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;31.29&lt;/span&gt; sec)
&lt;span class=&quot;kw&quot;&gt;Rows&lt;/span&gt; matched: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  Changed: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  Warnings: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;# Transaction_B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mode&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | k    | v    |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
|  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    | &lt;span class=&quot;dv&quot;&gt;4001&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----+------+------+&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'4002'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id=&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
ERROR &lt;span class=&quot;dv&quot;&gt;1213&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;40001&lt;/span&gt;): Deadlock found &lt;span class=&quot;kw&quot;&gt;when&lt;/span&gt; trying &lt;span class=&quot;kw&quot;&gt;to&lt;/span&gt; get &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt;; try restarting &lt;span class=&quot;kw&quot;&gt;transaction&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;分析行锁定&quot;&gt;分析行锁定&lt;/h3&gt;
&lt;p&gt;通过检查InnoDB_row_lock 状态变量分析系统上的行锁的争夺情况 show status like 'innodb_row_lock%'&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show status &lt;span class=&quot;kw&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'innodb_row_lock%'&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;-------------------------------+-------+&lt;/span&gt;
| Variable_name                 | &lt;span class=&quot;fu&quot;&gt;Value&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;-------------------------------+-------+&lt;/span&gt;
| Innodb_row_lock_current_waits | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
| Innodb_row_lock_time          | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
| Innodb_row_lock_time_avg      | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
| Innodb_row_lock_time_max      | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
| Innodb_row_lock_waits         | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
+&lt;span class=&quot;co&quot;&gt;-------------------------------+-------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;innodb_row_lock_current_waits: 当前正在等待锁定的数量&lt;br/&gt;innodb_row_lock_time: 从系统启动到现在锁定总时间长度；非常重要的参数，&lt;br/&gt;innodb_row_lock_time_avg: 每次等待所花平均时间；非常重要的参数，&lt;br/&gt;innodb_row_lock_time_max: 从系统启动到现在等待最常的一次所花的时间；&lt;br/&gt;innodb_row_lock_waits: 系统启动后到现在总共等待的次数；非常重要的参数。直接决定优化的方向和策略。&lt;/p&gt;
&lt;h3 id=&quot;行锁优化&quot;&gt;行锁优化&lt;/h3&gt;
&lt;p&gt;1 尽可能让所有数据检索都通过索引来完成，避免无索引行或索引失效导致行锁升级为表锁。&lt;br/&gt;2 尽可能避免间隙锁带来的性能下降，减少或使用合理的检索范围。&lt;br/&gt;3 尽可能减少事务的粒度，比如控制事务大小，而从减少锁定资源量和时间长度，从而减少锁的竞争等，提供性能。&lt;br/&gt;4 尽可能低级别事务隔离，隔离级别越高，并发的处理能力越低。&lt;/p&gt;
&lt;h2 id=&quot;表锁&quot;&gt;表锁&lt;/h2&gt;
&lt;p&gt;表锁的优势：开销小；加锁快；无死锁&lt;br/&gt;表锁的劣势：锁粒度大，发生锁冲突的概率高，并发处理能力低&lt;br/&gt;加锁的方式：自动加锁。查询操作（SELECT），会自动给涉及的所有表加读锁，更新操作（UPDATE、DELETE、INSERT），会自动给涉及的表加写锁。也可以显示加锁：&lt;br/&gt;共享读锁：lock table tableName read;&lt;br/&gt;独占写锁：lock table tableName write;&lt;br/&gt;批量解锁：unlock tables;&lt;/p&gt;
&lt;h3 id=&quot;共享读锁&quot;&gt;共享读锁&lt;/h3&gt;
&lt;p&gt;对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读操作，但会阻塞对同一表的写操作。只有当读锁释放后，才能执行其他进程的写操作。在锁释放前不能取其他表。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180109110055769-1244049794.png&quot; alt=&quot;读锁&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;read&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; myisam_lock;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock;
ERROR &lt;span class=&quot;dv&quot;&gt;1100&lt;/span&gt; (HY000): &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'innodb_lock'&lt;/span&gt; was &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLES&lt;/span&gt;

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;;
ERROR &lt;span class=&quot;dv&quot;&gt;1099&lt;/span&gt; (HY000): &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'myisam_lock'&lt;/span&gt; was &lt;span class=&quot;kw&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;READ&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; can&lt;span class=&quot;st&quot;&gt;'t be updated&lt;/span&gt;

&lt;span class=&quot;st&quot;&gt;mysql&amp;gt; unlock tables;&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;Query OK, 0 rows affected (0.00 sec)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; myisam_lock;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; innodb_lock;
&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.01&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;18.67&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;独占写锁&quot;&gt;独占写锁&lt;/h3&gt;
&lt;p&gt;对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其他进程的读写操作。在锁释放前不能写其他表。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/806956/201801/806956-20180109111140472-1348610312.png&quot; alt=&quot;写锁&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-A
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.05&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.03&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; myisam_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'2001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;row&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; myisam_lock;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt; innodb_lock &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; v=&lt;span class=&quot;st&quot;&gt;'1001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; k=&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;;
ERROR &lt;span class=&quot;dv&quot;&gt;1100&lt;/span&gt; (HY000): &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'innodb_lock'&lt;/span&gt; was &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLES&lt;/span&gt;

mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;tables&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;Query&lt;/span&gt; OK, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;fl&quot;&gt;0.00&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;Transaction-B
mysql&amp;gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;from&lt;/span&gt; myisam_lock;
&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;fl&quot;&gt;42.83&lt;/span&gt; sec)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结：&lt;strong&gt;表锁，读锁会阻塞写，不会阻塞读。而写锁则会把读写都阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;查看加锁情况&quot;&gt;查看加锁情况&lt;/h3&gt;
&lt;p&gt;show open tables; 1表示加锁，0表示未加锁。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show &lt;span class=&quot;kw&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; in_use &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----------+-------------+--------+-------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;Database&lt;/span&gt; | &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt;       | In_use | Name_locked |
+&lt;span class=&quot;co&quot;&gt;----------+-------------+--------+-------------+&lt;/span&gt;
| &lt;span class=&quot;kw&quot;&gt;lock&lt;/span&gt;     | myisam_lock |      &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; |           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----------+-------------+--------+-------------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;分析表锁定&quot;&gt;分析表锁定&lt;/h3&gt;
&lt;p&gt;可以通过检查table_locks_waited 和 table_locks_immediate 状态变量分析系统上的表锁定：show status like 'table_locks%'&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;mysql&amp;gt; show status &lt;span class=&quot;kw&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'table_locks%'&lt;/span&gt;;
+&lt;span class=&quot;co&quot;&gt;----------------------------+-------+&lt;/span&gt;
| Variable_name              | &lt;span class=&quot;fu&quot;&gt;Value&lt;/span&gt; |
+&lt;span class=&quot;co&quot;&gt;----------------------------+-------+&lt;/span&gt;
| Table_locks_immediate      | &lt;span class=&quot;dv&quot;&gt;104&lt;/span&gt;   |
| Table_locks_waited         | &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     |
+&lt;span class=&quot;co&quot;&gt;----------------------------+-------+&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;table_locks_immediate: 表示立即释放表锁数。&lt;br/&gt;table_locks_waited: 表示需要等待的表锁数。此值越高则说明存在着越严重的表级锁争用情况。&lt;/p&gt;
&lt;p&gt;此外，MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主表的存储引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永久阻塞。&lt;/p&gt;
&lt;h2 id=&quot;什么场景下用表锁&quot;&gt;什么场景下用表锁&lt;/h2&gt;
&lt;p&gt;InnoDB默认采用行锁，在未使用索引字段查询时升级为表锁。MySQL这样设计并不是给你挖坑。它有自己的设计目的。&lt;br/&gt;即便你在条件中使用了索引字段，MySQL会根据自身的执行计划，考虑是否使用索引(所以explain命令中会有possible_key 和 key)。如果MySQL认为全表扫描效率更高，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。因此，在分析锁冲突时，别忘了检查SQL的执行计划，以确认是否真正使用了索引。&lt;/p&gt;
&lt;p&gt;第一种情况：&lt;strong&gt;全表更新&lt;/strong&gt;。事务需要更新大部分或全部数据，且表又比较大。若使用行锁，会导致事务执行效率低，从而可能造成其他事务长时间锁等待和更多的锁冲突。&lt;/p&gt;
&lt;p&gt;第二种情况：&lt;strong&gt;多表查询&lt;/strong&gt;。事务涉及多个表，比较复杂的关联查询，很可能引起死锁，造成大量事务回滚。这种情况若能一次性锁定事务涉及的表，从而可以避免死锁、减少数据库因事务回滚带来的开销。&lt;/p&gt;
&lt;h2 id=&quot;页锁&quot;&gt;页锁&lt;/h2&gt;
&lt;p&gt;开销和加锁时间介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发处理能力一般。只需了解一下。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;1 InnoDB 支持表锁和行锁，使用索引作为检索条件修改数据时采用行锁，否则采用表锁。&lt;br/&gt;2 InnoDB 自动给修改操作加锁，给查询操作不自动加锁&lt;br/&gt;3 行锁可能因为未使用索引而升级为表锁，所以除了检查索引是否创建的同时，也需要通过explain执行计划查询索引是否被实际使用。&lt;br/&gt;4 行锁相对于表锁来说，优势在于高并发场景下表现更突出，毕竟锁的粒度小。&lt;br/&gt;5 当表的大部分数据需要被修改，或者是多表复杂关联查询时，建议使用表锁优于行锁。&lt;br/&gt;6 为了保证数据的一致完整性，任何一个数据库都存在锁定机制。锁定机制的优劣直接影响到一个数据库的并发处理能力和性能。&lt;/p&gt;
&lt;p&gt;到这里，Mysql的表锁和行锁机制就介绍完了，若你不清楚InnoDB的行锁会升级为表锁，那以后会吃大亏的。若有打什么不对的地方请指正。若觉得文章不错，麻烦点个赞！来都来了，留下你的痕迹吧！&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 13:42:00 +0000</pubDate>
<dc:creator>ITDragon龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itdragon/p/8194622.html</dc:identifier>
</item>
<item>
<title>不怎么靠谱的腾讯云，客服连价格都能乱来 - Maintell</title>
<link>http://www.cnblogs.com/maintell/p/8253651.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/maintell/p/8253651.html</guid>
<description>&lt;p&gt;公司的业务本来全放在阿里云，问题是不管是什么设施都有个可靠性的问题，在阿里云这么久也遇到了不少问题，&lt;/p&gt;
&lt;p&gt;其中有一类问题是网络问题，比如运营商调整了路由可以让从江苏到上海的路由飙到200ms，提交工单也花了几个小时才解决。&lt;/p&gt;
&lt;p&gt;但是客户需要24小时都稳定可靠的服务，涉及到生产的事情基本上都是强调HA，好吧，没办法，增加一个冗余节点吧；&lt;/p&gt;
&lt;p&gt;考虑到品牌效应，除了阿里云，剩下的腾讯、百度、京东等等，小的算了，最后看看还是试试腾讯吧~&lt;/p&gt;
&lt;p&gt;接着开动前往腾讯云开始查价格，好报预算~~&lt;/p&gt;
&lt;ul class=&quot;item-descr-list my-selected-info&quot;&gt;&lt;li&gt;&lt;span class=&quot;item-descr-tit&quot;&gt;计费模式&lt;span class=&quot;item-descr-txt&quot;&gt;包年包月&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;item-descr-tit&quot;&gt;地域&lt;span class=&quot;item-descr-txt&quot;&gt;华东地区（上海）&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;item-descr-tit&quot;&gt;可用区&lt;span class=&quot;item-descr-txt&quot;&gt;上海二区&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;item-descr-tit&quot;&gt;机型&lt;span class=&quot;item-descr-txt&quot;&gt;系列2、标准型S2、2核CPU、4G内存&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;cnblogs_code_collapse&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/157344/201801/157344-20180109201505051-674152768.png&quot; alt=&quot;&quot; width=&quot;598&quot; height=&quot;275&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/157344/201801/157344-20180109201421785-1499614831.png&quot; alt=&quot;&quot; width=&quot;612&quot; height=&quot;290&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;item-descr-tit&quot;&gt;&lt;span class=&quot;item-descr-txt&quot;&gt;1Mbps三年的价格是3852，5Mbps三年的价格是5562，看来网络从1Mbps升级到5Mbps价差在1710。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;item-descr-tit&quot;&gt;&lt;span class=&quot;item-descr-txt&quot;&gt;另外特别注意到腾讯云在搞活动：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code_collapse&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/157344/201801/157344-20180109201617191-1314787114.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/157344/201801/157344-20180109201659004-1999450634.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;貌似活动价格很好啊，三年只要1548，注意到下面活动规则里面第七条：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
7、购买后您可自主升级网络带宽，进入 控制台 &amp;gt; 云主机设置 &amp;gt; 调整网络。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于看不懂百度云的网络价格，然后就打客服电话 4009-100-100，工号1112的男客服做了计算后回复：&lt;/p&gt;
&lt;p&gt;参与新购特惠的活动后购买的云服务器在3年的服务器内升级网络从1Mbps到5Mbps大约需要1700元人民币。&lt;/p&gt;
&lt;p&gt;得到客服确定的结果后然后就报预算，立马下单购买，然后依照提示来调整网络，可惜得到的结果与客服说的不一样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/157344/201801/157344-20180109202400051-1493755811.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt; 升级的价格变成了3473.65，和1700左右相差甚远，于是又电话到4009-100-100，询问客服，&lt;/p&gt;
&lt;p&gt;得到的结果是：所有价格依照网站为准，客服说了不算。&lt;/p&gt;
&lt;p&gt;要是我个人购买也就算了，忍忍用吧，我这给公司买的，预算都已经走了OA流程，现在就很尴尬了，老板怎么看？&lt;/p&gt;
&lt;p&gt;那么现在真想问一句不怎么靠谱的腾讯云：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果客服说了都不算，那4009-100-100是你家的客服吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你们的工单系统会不会以后也不靠谱，说了也不算？&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Tue, 09 Jan 2018 13:00:00 +0000</pubDate>
<dc:creator>Maintell</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/maintell/p/8253651.html</dc:identifier>
</item>
<item>
<title>H2Engine游戏服务器设计之属性管理器 - 知然</title>
<link>http://www.cnblogs.com/zhiranok/p/h2engine_propmgr.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhiranok/p/h2engine_propmgr.html</guid>
<description>&lt;p&gt;　　游戏中角色拥有的属性值很多，运营多年的游戏，往往会有很多个成长线，每个属性都有可能被N个成长线模块增减数值。举例当角色戴上武器时候hp+100点，卸下武器时HP-100点，这样加减逻辑只有一处还比较好控制，如果某天有个特殊功能当被某技能攻击时，角色武器会被击落，这样就会出现减数值的操作不止一处。如果逻辑处理不当，比如击落的时候没有恰当的减数值，再次穿戴武器就导致属性值加了两边，也就是玩家经常说的刷属性。这种bug对游戏平衡性影响很大，反响很恶劣，bug又很难被测试发现。本文将介绍一种管理属性的思路，最大限度的避免此类bug，如果出现bug，也能够很好的排查。&lt;/p&gt;
&lt;h2 id=&quot;设计思路&quot;&gt;设计思路&lt;/h2&gt;
&lt;p&gt;　　刷属性bug的核心原因是某功能的模块数值加了N次，所以各个模块加的属性要被记录，加过了必须不能重复加。设计这样的数据结构。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;co&quot;&gt;//!&lt;/span&gt;各个属性对应一个总值
&lt;span class=&quot;co&quot;&gt;//!&lt;/span&gt;各个属性对应各个模块的分值
&lt;span class=&quot;kw&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;kw&quot;&gt;typename&lt;/span&gt; T&amp;gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PropCommonMgr
{
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt;:
    &lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; T ObjType;
    &lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; (*functorGet)(ObjType);
    &lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; (*functorSet)(ObjType, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; PropGetterSetter
    {
        PropGetterSetter():fGet(NULL), fSet(NULL){}        
        functorGet fGet;
        functorSet fSet;
        std::map&amp;lt;std::string, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt;&amp;gt; moduleRecord;
    };
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; regGetterSetter(&lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; strName, functorGet fGet, functorSet fSet){
        PropGetterSetter info;
        info.fGet = fGet;
        info.fSet = fSet;
        propName2GetterSetter[strName] = info;
    }
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt;:
      std::map&amp;lt;std::string, PropGetterSetter&amp;gt;    propName2GetterSetter;
  };&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;关于数据结构的get和set，我们为每个属性命名一个名字，这样处理数据的时候会非常方便（比如道具配增加属性等等），角色属性有很多种，这里不能一一定义，所以属性管理器只是映射属性，并不创建属性值。通过regGetterSetter接口，注册get和set的操作映射。为什么不需要提供add和sub接口能，因为add和sub可以通过get和set组合实现。get和set的接口实现如下：&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; get(ObjType obj, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; strName) {
        &lt;span class=&quot;kw&quot;&gt;typename&lt;/span&gt; std::map&amp;lt;std::string, PropGetterSetter&amp;gt;::iterator it = propName2GetterSetter.find(strName);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (it != propName2GetterSetter.end() &amp;amp;&amp;amp; it-&amp;gt;second.fGet){
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; it-&amp;gt;second.fGet(obj);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }
    &lt;span class=&quot;dt&quot;&gt;bool&lt;/span&gt; set(ObjType obj, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; strName, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; v) {
        &lt;span class=&quot;kw&quot;&gt;typename&lt;/span&gt; std::map&amp;lt;std::string, PropGetterSetter&amp;gt;::iterator it = propName2GetterSetter.find(strName);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (it != propName2GetterSetter.end() &amp;amp;&amp;amp; it-&amp;gt;second.fSet){
            it-&amp;gt;second.fSet(obj, v);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;关于add和sub，前面提到要避免刷属性，就必须避免重复加属性。所以每个模块再加属性前必须检查一下是否该模块已经加了属性，如果加过一定要先减后加。因为每次模块加属性都记录在属性管理器中，那么减掉的数值一定是正确的。这样可以避免另外一种常见bug，如加了100，减的时候计算错误减了80，也会积少成多造成刷属性。add和sub的代码如下：&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; addByModule(ObjType obj, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; strName, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; moduleName, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; v) {
        &lt;span class=&quot;kw&quot;&gt;typename&lt;/span&gt; std::map&amp;lt;std::string, PropGetterSetter&amp;gt;::iterator it = propName2GetterSetter.find(strName);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (it != propName2GetterSetter.end() &amp;amp;&amp;amp; it-&amp;gt;second.fGet &amp;amp;&amp;amp; it-&amp;gt;second.fSet){
            &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; ret =it-&amp;gt;second.fGet(obj);
            std::map&amp;lt;std::string, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt;&amp;gt;::iterator itMod = it-&amp;gt;second.moduleRecord.find(moduleName);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (itMod != it-&amp;gt;second.moduleRecord.end()){
                ret -= itMod-&amp;gt;second;
                itMod-&amp;gt;second = v;
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;{
                it-&amp;gt;second.moduleRecord[moduleName] = v;
            }
            ret += v;
            it-&amp;gt;second.fSet(obj, ret);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ret;
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }
    &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; subByModule(ObjType obj, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; strName, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; moduleName) {
        &lt;span class=&quot;kw&quot;&gt;typename&lt;/span&gt; std::map&amp;lt;std::string, PropGetterSetter&amp;gt;::iterator it = propName2GetterSetter.find(strName);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (it != propName2GetterSetter.end() &amp;amp;&amp;amp; it-&amp;gt;second.fGet &amp;amp;&amp;amp; it-&amp;gt;second.fSet){
            &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; ret =it-&amp;gt;second.fGet(obj);
            std::map&amp;lt;std::string, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt;&amp;gt;::iterator itMod = it-&amp;gt;second.moduleRecord.find(moduleName);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (itMod == it-&amp;gt;second.moduleRecord.end()){
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ret;
            }
            ret -= itMod-&amp;gt;second;
            it-&amp;gt;second.moduleRecord.erase(itMod);
            it-&amp;gt;second.fSet(obj, ret);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ret;
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }
    &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; getByModule(ObjType obj, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; strName, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; moduleName) {
        &lt;span class=&quot;kw&quot;&gt;typename&lt;/span&gt; std::map&amp;lt;std::string, PropGetterSetter&amp;gt;::iterator it = propName2GetterSetter.find(strName);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (it != propName2GetterSetter.end() &amp;amp;&amp;amp; it-&amp;gt;second.fGet &amp;amp;&amp;amp; it-&amp;gt;second.fSet){
            &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt; ret =it-&amp;gt;second.fGet(obj);
            std::map&amp;lt;std::string, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt;&amp;gt;::iterator itMod = it-&amp;gt;second.moduleRecord.find(moduleName);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (itMod != it-&amp;gt;second.moduleRecord.end()){
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; itMod-&amp;gt;second;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }
    std::map&amp;lt;std::string, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt;&amp;gt; getAllModule(ObjType obj, &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; std::string&amp;amp; strName) {
        std::map&amp;lt;std::string, &lt;span class=&quot;dt&quot;&gt;int64_t&lt;/span&gt;&amp;gt; ret;
        &lt;span class=&quot;kw&quot;&gt;typename&lt;/span&gt; std::map&amp;lt;std::string, PropGetterSetter&amp;gt;::iterator it = propName2GetterSetter.find(strName);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (it != propName2GetterSetter.end() &amp;amp;&amp;amp; it-&amp;gt;second.fGet &amp;amp;&amp;amp; it-&amp;gt;second.fSet){
            ret = it-&amp;gt;second.moduleRecord;
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ret;
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如上代码所示，addByModule和subByModule必须提供模块名，比如穿装备的时候加血量:addByModule('HP', 'Weapon', 100)，而卸下武器的时候只要subByModule('HP', 'Weapon'),因为属性管理器知道减多少。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;属性提供一个名字映射有很多好处，比如装备配属性，buff配属性的，有名字相关联会特别方便&lt;/li&gt;
&lt;li&gt;提供一个get和set接口的映射，这样属性管理器就和具体的对象的属性字段解耦了。即使是现有的功能模块也可以集成这个属性管理器。&lt;/li&gt;
&lt;li&gt;属性的add和sub操作，都在属性管理器中留下记录，这样即使出现问题，通过getByModule getAllModule两个接口亦可以辅助查找问题。&lt;/li&gt;
&lt;li&gt;属性管理已经集成到H2Engine中，github地址: &lt;a href=&quot;https://github.com/fanchy/h2engine&quot; class=&quot;uri&quot;&gt;https://github.com/fanchy/h2engine&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 09 Jan 2018 11:52:00 +0000</pubDate>
<dc:creator>知然</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhiranok/p/h2engine_propmgr.html</dc:identifier>
</item>
<item>
<title>见招拆招-PostgreSQL中文全文索引效率优化 - 枕边书</title>
<link>http://www.cnblogs.com/zhenbianshu/p/8253131.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenbianshu/p/8253131.html</guid>
<description>&lt;p&gt;上文 &lt;a href=&quot;http://www.cnblogs.com/zhenbianshu/p/7795247.html&quot;&gt;使用PostgreSQL进行中文全文检索&lt;/a&gt; 中我使用 PostgreSQL 搭建完成了一套中文全文检索系统，对数据库配置和分词都进行了优化，基本的查询完全可以支持，但是在使用过程中还是发现了一些很恼人的问题，包括查询效果和查询效率，万幸都一一解决掉了。&lt;/p&gt;
&lt;p&gt;其中过程自认为还是很有借鉴意义的，今天来总结分享一下。&lt;/p&gt;
&lt;p&gt;博客欢迎转载，请带上来源：http://www.cnblogs.com/zhenbianshu/p/8253131.html &lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;toc_2&quot;&gt;分词问题&lt;/h3&gt;
&lt;p&gt;一开始是分词效果的问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;中文博大精深，&lt;code&gt;乒乓球拍卖啦、南京市长江大桥&lt;/code&gt; 这种歧义句的分词，还没有一个分词插件能够达到 100% 的准确率，当然包括我们正在使用的 &lt;code&gt;scws&lt;/code&gt; 分词库；&lt;/li&gt;
&lt;li&gt;我们的搜索内容是 Poi 地点名，而很多地点名都缺失语义性，产生歧义词的概率更大；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;scws 支持更为灵活的分词等级，为了能分出较多的词来尽量包含目标结果，我们将 scws 的分词等级调为了 &lt;code&gt;7&lt;/code&gt;（不了解的可以看上文），但同时也引入了更奇葩的问题： 搜索&lt;code&gt;天安门&lt;/code&gt; 查不到 &lt;code&gt;天安门广场&lt;/code&gt;。。。&lt;/p&gt;
&lt;p&gt;原因也很另人无语：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;天安门广场&lt;/code&gt; 的分词结果向量 tsv 是 &lt;code&gt;'天安':2 '天安门广场':1 '广场':4 '门广':3&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;查询向量 &lt;code&gt;to_tsquery('parser', '天安门')&lt;/code&gt; tsq 的结果是 &lt;code&gt;'天安门' &amp;amp; '天安' &amp;amp; '安门'&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;查询语句是 &lt;code&gt;SELECT * FROM table WHERE tsv @@ tsq&lt;/code&gt;， 由于 tsv 里没有 tsq 里的 &lt;code&gt;安门&lt;/code&gt;向量，匹配失败。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;toc_3&quot;&gt;B树索引&lt;/h3&gt;
&lt;p&gt;一个常识：大家想搜一个地点时大多会先输入其名称前面的部分，基于此考虑，我向表内引入 B树索引支持前缀查询，配合原来分词的 GIN 索引，解决了此问题。&lt;/p&gt;
&lt;p&gt;如Mysql一样，PostgreSQL 也支持通过 &lt;code&gt;like '关键词%'&lt;/code&gt; 语句来使用 B树索引。在 name 列上添加了 B树索引，再修改查询语句变为 &lt;code&gt;SELECT * FROM table WHERE tsv @@ tsq OR name LIKE 'keyword%'&lt;/code&gt;，这样结果就完全 OK 啦。&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;toc_5&quot;&gt;GIN索引效率问题&lt;/h3&gt;
&lt;p&gt;紧接着又发现了新的问题：&lt;/p&gt;
&lt;p&gt;PostgreSQL 的 GIN 索引（Generalized Inverted Index 通用倒排索引）存储的是 &lt;code&gt;(key, posting list)对&lt;/code&gt;， 这里的 posting list 是一组出现键的行ID。如 数据：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;行ID&lt;/th&gt;
&lt;th&gt;分词向量&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;测试 分词&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;分词 结果&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;则索引的内容就是 &lt;code&gt;测试=&amp;gt;1 分词=&amp;gt;1,2 结果=&amp;gt;2&lt;/code&gt;，在我们要查询分词向量内包含 &lt;code&gt;分词&lt;/code&gt; 的数据时就可以快速查找到第1，2列。&lt;/p&gt;
&lt;p&gt;但这种设计也带来了另一个问题，当某一个 key 对应的 posting list 过大时，数据操作会很慢，如我们的数据中地点名带有 &lt;code&gt;饭店&lt;/code&gt; 的数据就很多，有几十万，而我们的需求有一项就是要对查询结果按照 &lt;code&gt;评分&lt;/code&gt; 一列倒序排序，这么几十万数据，数据库响应超时会达到 3000 ms。&lt;/p&gt;
&lt;p&gt;我们期望的响应时间是 90% 50ms 以内，虽然统计结果显示，确实 90% 的请求已经符合要求，但另外的 10% 完全不能用也是不可能接受的。&lt;/p&gt;
&lt;p&gt;接下来的优化就是针对这些 bad case。&lt;/p&gt;
&lt;h3 id=&quot;toc_6&quot;&gt;缓存&lt;/h3&gt;
&lt;p&gt;对于这种响应超时的问题，大家肯定会想到万能的缓存：把响应超时的查询结果放到缓存，查询时先检查缓存。&lt;/p&gt;
&lt;p&gt;可是超时的毕竟只有很少一部分，&lt;code&gt;缓存的命中率堪忧&lt;/code&gt;。虽然这一小部分查询可用了，但是所有查询语句都会多出一次取缓存的操作。&lt;/p&gt;
&lt;p&gt;为了能提高缓存命中率，我还特意统计了关键字各长度的搜索数量占比和超时率占比，发现以下情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1字节（1个字母）、3字节（单字）关键词的超时率最高，可是也不超过 30%；&lt;/li&gt;
&lt;li&gt;1字节、3字节关键词的搜索量占比有30%左右；&lt;/li&gt;
&lt;li&gt;其他长度关键词的超时率10%左右，非常尴尬。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这种情况打消了我只针对某些长度的关键词设置缓存的想法。&lt;/p&gt;
&lt;p&gt;不仅是命中率问题，缓存过期时间和缓存更新等更是大坑，基于以上考虑，缓存方案彻底被放弃。&lt;/p&gt;
&lt;h3 id=&quot;toc_7&quot;&gt;分表&lt;/h3&gt;
&lt;p&gt;一个方法不行，那就换一个方向，既然某些关键词的结果集太大，那么我们就将它变小一些，我们一开始采用的策略是分表。&lt;/p&gt;
&lt;p&gt;由于 Poi 地点都有区域属性，我们以区域 ID 将这些数据分成了多个数据表，原来最大的关键词结果集有几十万，拆分到多个表后，每个表中最大的关键词结果集也就几万，此时的排序性能提高了，基本在 &lt;code&gt;100~200ms&lt;/code&gt; 之间。&lt;/p&gt;
&lt;p&gt;查询时我们先通过位置将用户定位到区域，根据区域 ID 确定要查询的表，再从对应表内查询结果。&lt;/p&gt;
&lt;p&gt;这个方案的缺点也非常多：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对定位很依赖，且定位计算区域也会有耗时；&lt;/li&gt;
&lt;li&gt;区域边缘点的搜索很蛋疼，明明离得很近，如果被划分到跟用户不同区域了就搜索不到。&lt;/li&gt;
&lt;li&gt;多个表非常不好维护。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;toc_8&quot;&gt;子查询&lt;/h3&gt;
&lt;p&gt;终于灵活考虑了业务需求，引入子查询提出了一种颇为完美的方案：&lt;/p&gt;
&lt;p&gt;用户在搜索框键入了 &lt;code&gt;饭店、宾馆&lt;/code&gt; 等无意义关键词，不同于搜索 &lt;code&gt;海底捞&lt;/code&gt;，此时用户也不知道他自己需要什么，对搜索结果是没有明确期待的。&lt;/p&gt;
&lt;p&gt;这时候，我们也并不需要很愣地把全国名字中带有饭店、宾馆的地点都拿出来排序，这样的排序结果用户也不一定满意。 我们可以只取一部分 Poi 地点给用户，如果结果用户不满意，会再完善关键词，而关键词稍有完善，结果集就会极大地减小。&lt;/p&gt;
&lt;p&gt;子查询用来实现结果集过滤非常有效，如我们可以在极大页码查询分页时使用子查询先过滤掉一大批无用数据。&lt;/p&gt;
&lt;p&gt;本例中，我们在子查询语句中使用 limit 语句限制取的结果集条数，从而大大减小排序压力，查询语句类似 &lt;code&gt;SELECT id FROM (SELECT * FROM table WHERE tsv @@ tsq OR name LIKE 'keyword%' LIMIT 10000) AS tmp ORDER BY score DESC&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这样优化过后，查询语句的最差性能也可以稳定在 170ms 以下了。&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;toc_10&quot;&gt;多索引效率问题&lt;/h3&gt;
&lt;p&gt;本以为优化到此为止了呢，可是有次在试着查询 &lt;code&gt;中关村&lt;/code&gt; 和 &lt;code&gt;东&lt;/code&gt; 两个关键词时，我明确感觉到了响应时间的差异， 100ms 左右的时间差还是很明显的。&lt;/p&gt;
&lt;p&gt;子查询语句才是这条 SQL 语句的效率关键，于是我开始分析 &lt;code&gt;东&lt;/code&gt; 这个关键词的 &lt;code&gt;子查询SQL&lt;/code&gt; 语句，首先我试着调整语句中 limit 的限制值，发现即使只取 1000条，响应时间也在 100ms 以上。&lt;/p&gt;
&lt;p&gt;接着我又尝试改变 SQL 语句的 WHERE 条件，去除 &lt;code&gt;OR name LIKE 'keyword%'&lt;/code&gt; 后， 总条数并没有太大的变动，结果集由 13w 减小到了 11w， 但 添加 limit 后的效率却急剧提升：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;SQL&lt;/th&gt;
&lt;th&gt;结果条数&lt;/th&gt;
&lt;th&gt;响应时间&lt;/th&gt;
&lt;th&gt;添加 limit 后&lt;/th&gt;
&lt;th&gt;SQL&lt;/th&gt;
&lt;th&gt;响应时间&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;WHERE tsv @@ tsq OR name LIKE 'keyword%'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;13W&lt;/td&gt;
&lt;td&gt;2400ms&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;code&gt;WHERE tsv @@ tsq OR name LIKE 'keyword%' LIMIT 10000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;170ms&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;WHERE tsv @@ tsq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;11W&lt;/td&gt;
&lt;td&gt;1900ms&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;code&gt;WHERE tsv @@ tsq limit 10000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;25ms&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这样对比起来就很明显了， 分词查询的 GIN 索引和前缀词查询的 B树索引之间配合并不完美。&lt;/p&gt;
&lt;p&gt;想想也是，如果在一个索引上取 1w 条数据，直接取就行了，而如果在两个索引上取 1w 数据，那么还得考虑每个索引上各取多少，取完后还要排重。&lt;/p&gt;
&lt;h3 id=&quot;toc_11&quot;&gt;替换B树索引&lt;/h3&gt;
&lt;p&gt;问题分析完，那么就得根据问题寻找解决方案了，怎么能把两个索引并到同一索引上呢？把分词 GIN 索引并到 B树索引显然是不可能的，只能试着使用分词来替代 B树索引。&lt;/p&gt;
&lt;p&gt;当时有三种方案：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;修改开源分词库 scws，添加一个分前缀词的功能。不过我担心改出 Bug，而且还要改 PostgreSQL 的分词插件 zhparser 以适应 scws 的参数变动。&lt;/li&gt;
&lt;li&gt;使用 PostgreSQL 的数组类型（&lt;code&gt;text[]&lt;/code&gt;）存储分词结果，后续往此字段内灵活添加前缀词。但填充数组字段需要调用 &lt;code&gt;SELECT to_tsvector('parser', 'nane')&lt;/code&gt; 查询后使用脚本处理结果后再写入数组，比较麻烦。&lt;/li&gt;
&lt;li&gt;修改 tsvector 分词向量字段，手动向此字段添加前缀词的分词向量。但分词向量不同于文本，不能直接拼接。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最好的方案当然是最后一种，改动最小，于是我就查询了一下 PostgreSQL 向量拼接，还是找到了向量拼接的方法，使用 &lt;code&gt;::tsvector&lt;/code&gt; 将字符串强转成向量，再使用 &lt;code&gt;||&lt;/code&gt; 拼接到原来的分词向量上，SQL 语句类似 &lt;code&gt;SELECT to_tsvector('parser', 'keyword') || 'prefix'::tsvector&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在查询时，就可以直接使用 &lt;code&gt;WHERE tsv @@ to_tsquery('parser', 'keyword')&lt;/code&gt; 查询前缀了。这样，子查询语句的响应时间就可以大大降低了，在 50ms 左右，而且还可以通过减小 LIMIT 值来加快响应。&lt;/p&gt;
&lt;p&gt;此后，B树索引就可以退休啦~&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;以上就是我对 PostgreSQL 关键词查询从效果到效率优化的全过程了，效果和效率已经完全达标了。当然，还可以对用户体验进行再优化，比如添加错别字识别、拼音首字母智能识别等，打磨好一款产品当然是非常不容易的，还需要继续努力。&lt;/p&gt;
&lt;p&gt;顺便吐槽几句周边同事对 PostgreSQL 的态度，理由竟然是认为它是一个开源产品，可能会有各种埋得深的坑，所以不信任。&lt;/p&gt;
&lt;p&gt;比较想不到比较前沿的互联网公司也会有人对开源抱如此看法，不可否认很多开源产品或工具都有各种各样的坑，但为此因噎废食大可不必，我们一直在用的 Linux/Git 还是开源产品呢，可有多少人离不开它们？而且闭源产品就不会出现问题么？也不可否认 PostgreSQL 小众，但它也有自己的特色，而且近年来它的占有率一率攀升，未来什么样，还未可知。&lt;/p&gt;
&lt;p&gt;关于本文有什么问题可以在下面留言交流，如果您觉得本文对您有帮助，可以点击下面的 &lt;strong&gt;&lt;code&gt;推荐&lt;/code&gt;&lt;/strong&gt; 支持一下我，博客一直在更新，欢迎 &lt;strong&gt;&lt;code&gt;关注&lt;/code&gt;&lt;/strong&gt; 。&lt;/p&gt;
</description>
<pubDate>Tue, 09 Jan 2018 11:34:00 +0000</pubDate>
<dc:creator>枕边书</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenbianshu/p/8253131.html</dc:identifier>
</item>
</channel>
</rss>