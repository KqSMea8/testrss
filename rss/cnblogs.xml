<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>外网如何访问 Service？- 每天5分钟玩转 Docker 容器技术（139） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8526293.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8526293.html</guid>
<description>&lt;p&gt;&lt;span&gt;除了 Cluster 内部可以访问 Service，很多情况我们也希望应用的 Service 能够暴露给 Cluster 外部。Kubernetes 提供了多种类型的 Service，默认是 ClusterIP。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ClusterIP&lt;/span&gt; &lt;br/&gt;Service 通过 Cluster 内部的 IP 对外提供服务，只有 Cluster 内的节点和 Pod 可访问，这是默认的 Service 类型，前面实验中的 Service 都是 ClusterIP。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;NodePort&lt;/span&gt; &lt;br/&gt;Service 通过 Cluster 节点的静态端口对外提供服务。Cluster 外部可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;&amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 访问 Service。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;LoadBalancer&lt;/span&gt; &lt;br/&gt;Service 利用 cloud provider 特有的 load balancer 对外提供服务，cloud provider 负责将 load balancer 的流量导向 Service。目前支持的 cloud provider 有 GCP、AWS、Azur 等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;下面我们来实践 NodePort，Service &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-svc&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的配置文件修改如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180308064522158-849829922.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;添加 &lt;/span&gt;&lt;code&gt;&lt;span&gt;type: NodePort&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，重新创建 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-svc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180308064534778-243470144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Kubernetes 依然会为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-svc&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 分配一个 ClusterIP，不同的是：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;EXTERNAL-IP&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;nodes&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，表示可通过 Cluster 每个节点自身的 IP 访问 Service。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;PORT(S)&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;8080:32312&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;code&gt;&lt;span&gt;8080&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是 ClusterIP 监听的端口，&lt;/span&gt;&lt;code&gt;&lt;span&gt;32312&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 则是节点上监听的端口。Kubernetes 会从 30000-32767 中分配一个可用的端口，每个节点都会监听此端口并将请求转发给 Service。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180308064545628-907769657.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面测试 NodePort 是否正常工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180308064559628-2111035645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;通过三个节点 IP + 32312 端口都能够访问 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-svc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;接下来我们深入探讨一个问题：Kubernetes 是如何将 &lt;/span&gt;&lt;code&gt;&lt;span&gt;&amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 映射到 Pod 的呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;与 ClusterIP 一样，也是借助了 iptables。与 ClusterIP 相比，每个节点的 iptables 中都增加了下面两条规则：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180308064612337-1530867280.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;规则的含义是：访问当前节点 &lt;/span&gt;&lt;code&gt;&lt;span&gt;32312&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 端口的请求会应用规则 &lt;/span&gt;&lt;code&gt;&lt;span&gt;KUBE-SVC-RL3JAE4GN7VOGDGP&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，内容为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180308064627356-720111485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其作用就是负载均衡到每一个 Pod。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;NodePort 默认是的随机选择，不过我们可以用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;nodePort&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 指定某个特定端口。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180308064646576-2109500228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;现在配置文件中就有三个 Port 了：&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;nodePort&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是节点上监听的端口。&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;port&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是 ClusterIP 上监听的端口。&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;targetPort&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是 Pod 监听的端口。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;最终，Node 和 ClusterIP 在各自端口上接收到的请求都会通过 iptables 转发到 Pod 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;targetPort&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;应用新的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;nodePort&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 并验证：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180308064659825-1506591210.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;nodePort: 30000&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 已经生效了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本章我们讨论访问应用的机制 Service，学习了如何创建 Service；Service 的三种类型 ClusterIP、NodePort 和 LoadBalancer，以及它们各自的适用场景。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们开始学习 Rolling Update。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://item.jd.com/16936307278.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 22:05:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8526293.html</dc:identifier>
</item>
<item>
<title>SpringMVC_第一个程序 - hoje</title>
<link>http://www.cnblogs.com/hoje/p/8531796.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hoje/p/8531796.html</guid>
<description>&lt;p&gt;一、基本代码的完成&lt;/p&gt;
&lt;p&gt;补充&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;1、在myeclipse中 WEB-INF下放的资源和WebRoot下的资源区别：&lt;/p&gt;
&lt;p&gt;WEB-INF下放到资源是不能通过浏览器直接访问的，是比较安全的，只能是后台服务端程序进行跳转的时候跳转过去，所以不能重定向到WEB-INF.&lt;/p&gt;
&lt;p&gt;2、在使用EL表达式的jsp页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;%@page isELIgnored=&quot;false&quot; %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、SpringMVC最全约束&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
        xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
        xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;span&gt;
        xmlns:aop&lt;/span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;span&gt;
        xmlns:tx&lt;/span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;span&gt;
        xmlns:mvc&lt;/span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;span&gt;
        xsi:schemaLocation&lt;/span&gt;=&quot;&lt;span&gt;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd&lt;/span&gt;&quot;&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_c5732cf0-9412-46a4-891c-217a3d613571&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c5732cf0-9412-46a4-891c-217a3d613571&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c5732cf0-9412-46a4-891c-217a3d613571&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyController &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Controller {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ModelAndView handleRequest(HttpServletRequest request, 
            HttpServletResponse response) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        ModelAndView mv= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
        mv.addObject(&lt;/span&gt;&quot;message&quot;,&quot;hello SpringMVC World!&quot;&lt;span&gt;);
        mv.setViewName(&lt;/span&gt;&quot;/WEB-INF/welcome.jsp&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; mv;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MyController&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;注册处理器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_aeaee740-afe9-4260-9d6d-dd263db9babf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_aeaee740-afe9-4260-9d6d-dd263db9babf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_aeaee740-afe9-4260-9d6d-dd263db9babf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
&lt;span&gt; 3&lt;/span&gt;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
&lt;span&gt; 4&lt;/span&gt;         xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
&lt;span&gt; 5&lt;/span&gt;         xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
&lt;span&gt; 6&lt;/span&gt;         xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
&lt;span&gt; 7&lt;/span&gt;         xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
&lt;span&gt; 8&lt;/span&gt;         xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
&lt;span&gt; 9&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context/spring-context.xsd&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop/spring-aop.xsd&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx/spring-tx.xsd&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &amp;lt;!-- 注册处理器 --&amp;gt;
&lt;span&gt;20&lt;/span&gt; &amp;lt;bean id=&quot;/my.do&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.jmu.handlers.MyController&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&lt;span&gt;21&lt;/span&gt; &amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;springmvc.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1212417/201803/1212417-20180309001551825-846204381.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、注册中央调度器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在web.xml中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;!--  注册中央调度器 --&amp;gt;
 &amp;lt;servlet&amp;gt;
   &amp;lt;servlet-name&amp;gt;reyco&amp;lt;/servlet-name&amp;gt;
   &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;
 &amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
  &amp;lt;servlet-name&amp;gt;reyco&amp;lt;/servlet-name&amp;gt;
  &amp;lt;url-pattern&amp;gt;*.&lt;span&gt;do&lt;/span&gt;&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;三、指定SpringMVC配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;添加修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &amp;lt;servlet&amp;gt;
   &amp;lt;servlet-name&amp;gt;reyco&amp;lt;/servlet-name&amp;gt;
   &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;
     &lt;br/&gt;&amp;lt;init-param&amp;gt;
     &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
     &amp;lt;param-value&amp;gt;classpath:springMVC.xml&amp;lt;/param-value&amp;gt;
   &amp;lt;/init-param&amp;gt;
 &amp;lt;/servlet&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1212417/201803/1212417-20180309004905541-972352816.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、springMVC执行流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1212417/201803/1212417-20180309010011843-323313032.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;五、使用servletloadOnStartup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目的：在Tomcat启动时直接创建当前Servlet&lt;/p&gt;
&lt;p&gt;在web.xml中添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即添加修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
!--  注册中央调度器 --&amp;gt;
 &amp;lt;servlet&amp;gt;
   &amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;
   &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;
   &amp;lt;!-- 指定springMVC配置文件的位置及文件名 --&amp;gt;
   &amp;lt;init-param&amp;gt;
     &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
     &amp;lt;param-value&amp;gt;classpath:springMVC.xml&amp;lt;/param-value&amp;gt;
   &amp;lt;/init-param&amp;gt;
   &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
 &amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
  &amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;
  &amp;lt;url-pattern&amp;gt;*.&lt;span&gt;do&lt;/span&gt;&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;五、使用视图解析器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改MyController&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    mv.setViewName(&quot;welcome&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;welcome为逻辑视图&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;welcome逻辑视图名通过内部资源适配器InternalResourceViewResolver转换成物理视图&lt;/p&gt;
&lt;p&gt;修改springmvc.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 注册视图解析器 --&amp;gt;
&amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&amp;gt;
 &amp;lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;&amp;gt;&amp;lt;/property&amp;gt;
  &amp;lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;六、整理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_0442f894-697e-4386-9203-774e184c4a94&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0442f894-697e-4386-9203-774e184c4a94&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0442f894-697e-4386-9203-774e184c4a94&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyController &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Controller {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ModelAndView handleRequest(HttpServletRequest request, 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             HttpServletResponse response) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         ModelAndView mv= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         mv.addObject(&quot;message&quot;,&quot;hello SpringMVC World!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         mv.setViewName(&quot;welcome&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;welcome为逻辑视图&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mv;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MyController&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_1f9a57a8-e246-4403-b406-3aa192d33bab&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1f9a57a8-e246-4403-b406-3aa192d33bab&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1f9a57a8-e246-4403-b406-3aa192d33bab&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
&lt;span&gt; 3&lt;/span&gt;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
&lt;span&gt; 4&lt;/span&gt;         xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
&lt;span&gt; 5&lt;/span&gt;         xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
&lt;span&gt; 6&lt;/span&gt;         xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
&lt;span&gt; 7&lt;/span&gt;         xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
&lt;span&gt; 8&lt;/span&gt;         xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
&lt;span&gt; 9&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context/spring-context.xsd&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop/spring-aop.xsd&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/tx/spring-tx.xsd&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &amp;lt;!-- 注册视图解析器 --&amp;gt;
&lt;span&gt;19&lt;/span&gt; &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&amp;gt;
&lt;span&gt;20&lt;/span&gt;  &amp;lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;&amp;gt;&amp;lt;/property&amp;gt;
&lt;span&gt;21&lt;/span&gt;   &amp;lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&amp;gt;&amp;lt;/property&amp;gt;
&lt;span&gt;22&lt;/span&gt; &amp;lt;/bean&amp;gt;
&lt;span&gt;23&lt;/span&gt; &amp;lt;!-- 注册处理器 --&amp;gt;
&lt;span&gt;24&lt;/span&gt; &amp;lt;bean id=&quot;/my.do&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.jmu.handlers.MyController&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&lt;span&gt;25&lt;/span&gt; &amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;springmvc.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_cf58c333-c9db-465e-9bd0-50f80e490e6a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cf58c333-c9db-465e-9bd0-50f80e490e6a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cf58c333-c9db-465e-9bd0-50f80e490e6a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
&lt;span&gt; 3&lt;/span&gt;     xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;
&lt;span&gt; 4&lt;/span&gt;     xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;
&lt;span&gt; 5&lt;/span&gt;     id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;display-name&amp;gt;01-springmvc-primary&amp;lt;/display-name&amp;gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;!-- 注册中央调度器 --&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;servlet&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt;12&lt;/span&gt;         &amp;lt;!-- 指定springMVC配置文件的位置及文件名 --&amp;gt;
&lt;span&gt;13&lt;/span&gt;         &amp;lt;init-param&amp;gt;
&lt;span&gt;14&lt;/span&gt;             &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
&lt;span&gt;15&lt;/span&gt;             &amp;lt;param-value&amp;gt;classpath:springmvc.xml&amp;lt;/param-value&amp;gt;
&lt;span&gt;16&lt;/span&gt;         &amp;lt;/init-param&amp;gt;
&lt;span&gt;17&lt;/span&gt;         &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&lt;span&gt;18&lt;/span&gt;     &amp;lt;/servlet&amp;gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;servlet-mapping&amp;gt;
&lt;span&gt;20&lt;/span&gt;         &amp;lt;servlet-name&amp;gt;springMVC&amp;lt;/servlet-name&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;url-pattern&amp;gt;*.&lt;span&gt;do&lt;/span&gt;&amp;lt;/url-pattern&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;/servlet-mapping&amp;gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &amp;lt;welcome-file-list&amp;gt;
&lt;span&gt;26&lt;/span&gt;         &amp;lt;welcome-file&amp;gt;index.jsp&amp;lt;/welcome-file&amp;gt;
&lt;span&gt;27&lt;/span&gt;     &amp;lt;/welcome-file-list&amp;gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &amp;lt;/web-app&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;web.xml&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;七、DispatcherServlet默认配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1212417/201803/1212417-20180309014919639-326106489.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1212417/201803/1212417-20180309014928234-1372328930.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 17:50:00 +0000</pubDate>
<dc:creator>hoje</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hoje/p/8531796.html</dc:identifier>
</item>
<item>
<title>【开源】支持子流程及演示动画的流程设计器 - tongling</title>
<link>http://www.cnblogs.com/tlzzu/p/8531740.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tlzzu/p/8531740.html</guid>
<description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;最近做的项目中有流程设计的需求，且要求设计器具有可嵌套子流程功能，业务比较复杂，当时没有找到合适的设计器，后来选型cytoscapejs，用vue架构了一个流程设计器，不过相对而言太复杂，业务特征太明显，故计划年后做出版较为通用的流程设计器，且增加演示动画功能（待完善）。本文是对目前所做设计器的一个展示。后续还会继续完善。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/flow-chart-editor&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/flow-chart-editor.svg?maxAge=3600&quot; alt=&quot;npm&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://npmjs.org/package/flow-chart-editor&quot;&gt;&lt;img src=&quot;http://img.shields.io/npm/dm/flow-chart-editor.svg&quot; alt=&quot;NPM downloads&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;http://img.badgesize.io/tlzzu/flow-chart-editor/master/lib/index.js.svg?compression=gzip&amp;amp;label=gzip%20size:%20JS&quot; alt=&quot;JS gzip size&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://img.badgesize.io/tlzzu/flow-chart-editor/master/lib/style.css.svg?compression=gzip&amp;amp;label=gzip%20size:%20CSS&quot; alt=&quot;CSS gzip size&quot;/&gt;&lt;br/&gt;&lt;a href=&quot;https://gitter.im/tlzzu/flow-chart-editor?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/tlzzu/flow-chart-editor.svg&quot; alt=&quot;Join the chat at https://gitter.im/tlzzu/flow-chart-editor&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基于&lt;a href=&quot;https://github.com/cytoscape/cytoscape.js&quot;&gt;cytoscape.js&lt;/a&gt;的流程设计器。&lt;a href=&quot;https://tlzzu.github.io/flow-chart-editor/dist/index.html&quot;&gt;演示文档 Demo&lt;/a&gt;。已纳入SoDiao豪华套餐。(&lt;em&gt;^▽^&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;优点如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1.  支持实/虚线、连线弯曲、撤销重做、放大缩小;
2.  可导出 json/png/jpg 文档；
3.  toolbar自定义；
4.  允许在流程中嵌套**子流程**；
5.  支持只读、设计两种模式（敬请期待）;
6.  支持设置**流程动画**（敬请期待）;
7.  ……后续再完善……&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在此，感谢 easyicon.net 提供的图标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8531740.html#1-预览-preview&quot;&gt;1. 预览-Preview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8531740.html#2-安装使用-install&quot;&gt;2. 安装使用-Install&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8531740.html#3-二次开发-build&quot;&gt;3. 二次开发-Build&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8531740.html#4-文档-document&quot;&gt;4. 文档-Document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8531740.html#5-依赖-dependencies&quot;&gt;5. 依赖-Dependencies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8531740.html#6-错误提交-bug&quot;&gt;6. 错误提交-Bug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8531740.html#6-捐赠-donation&quot;&gt;7. 捐赠-Donation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8531740.html#7-许可证-license&quot;&gt;8. 许可证-LICENSE&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;预览-preview&quot;&gt;1. 预览-Preview&lt;/h2&gt;
&lt;p&gt;预览效果如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/544734/201803/544734-20180309005503770-1121231687.gif&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/544734/201803/544734-20180309005628409-455120421.gif&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/544734/201803/544734-20180309005635324-1573303451.gif&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/544734/201803/544734-20180309005652863-1604639382.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装使用-install&quot;&gt;2. 安装使用-Install&lt;/h2&gt;
&lt;h3 id=&quot;npm-安装&quot;&gt;npm 安装&lt;/h3&gt;
&lt;p&gt;推荐使用 npm 安装&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm i flow-chart-editor -S&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可在页面中引用&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import FCE from &quot;flow-chart-editor&quot;;

var fce=new FCE({
  el: document.getElementById(&quot;fce&quot;),//初始化节点
  toolbars: [{//自定义toolbar
      name: &quot;rectangle&quot;,//节点名称
      icon: &quot;images/rectangle.png&quot;,//toolbar的图片
      className: &quot;&quot;,//自定义样式
      title: &quot;矩形&quot;,//title值
      exec(evt, clickType, obj) {//选中该节点后，点击编辑区域后被触发事件
        const label = prompt(&quot;请输入节点名称：&quot;),
          data = { id: new Date().getTime(), label: label };
        if (!label) return;
        if (clickType === &quot;node&quot;) {
          data.parent = obj.id;
        }
        this.addNode(data, &quot;rectangle&quot;);
      }
    },  
    &quot;animation&quot;]//这里FCE内置的一种制作流程动画组件
  });&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;脚本引用&quot;&gt;脚本引用&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;flow-chart-editor流程设计器&amp;lt;/title&amp;gt;
    &amp;lt;link href=&quot;css/cytoscape-context-menus.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;link href=&quot;css/fce.1.0.0.min.css?a643cc98a261f0b1586b&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/cytoscape.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/konva.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/cytoscape-node-resize.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/cytoscape-grid-guide.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/cytoscape-edgehandles.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/cytoscape-context-menus.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/cytoscape-edge-bend-editing.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/cytoscape-undo-redo.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/cytoscape-view-utilities.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/fce.1.0.0.min.js?a643cc98a261f0b1586b&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;fce&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
      var fce=new FCE({
        el: document.getElementById(&quot;fce&quot;),//初始化节点
        toolbars: [{//自定义toolbar
          name: &quot;rectangle&quot;,//节点名称
          icon: &quot;images/rectangle.png&quot;,//toolbar的图片
          className: &quot;&quot;,//自定义样式
          title: &quot;矩形&quot;,//title值
          exec(evt, clickType, obj) {//选中该节点后，点击编辑区域后被触发事件
            const label = prompt(&quot;请输入节点名称：&quot;),
              data = { id: new Date().getTime(), label: label };
            if (!label) return;
            if (clickType === &quot;node&quot;) {
              data.parent = obj.id;
            }
            this.addNode(data, &quot;rectangle&quot;);
          }
        },  
        &quot;animation&quot;]//这里FCE内置的一种制作流程动画组件
      });
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;二次开发-build&quot;&gt;3. 二次开发-Build&lt;/h2&gt;
&lt;p&gt;二次开发前请确保已经安装&lt;code&gt;node&lt;/code&gt;及&lt;code&gt;webpack&lt;/code&gt;。在控制台中执行 &lt;code&gt;npm run &amp;lt;target&amp;gt;&lt;/code&gt;，其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;dev&lt;/code&gt;：开发模式，执行后可直接访问&lt;a href=&quot;http://localhost:9110/&quot; class=&quot;uri&quot;&gt;http://localhost:9110/&lt;/a&gt;直接调试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;：执行打包，dist 中的文件会重新打包。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;文档-document&quot;&gt;4. 文档-Document&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;//todo 稍后完善。&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;依赖-dependencies&quot;&gt;5. 依赖-Dependencies&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery&quot;&gt;jquery ^3.2.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cytoscape/cytoscape.js&quot;&gt;cytoscape ^3.2.0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;错误提交-bug&quot;&gt;6. 错误提交-Bug&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;可邮件至&lt;a href=&quot;mailto://dd@sodiao.org/&quot;&gt;dd@sodiao.org&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;可以在github中的&lt;a href=&quot;https://github.com/tlzzu/flow-chart-editor/issues&quot;&gt;ISS&lt;/a&gt;中提交；&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;捐赠-donation&quot;&gt;7. 捐赠-Donation&lt;/h2&gt;
&lt;p&gt;表示您对本项目的支持&lt;br/&gt;&lt;img src=&quot;https://github.com/tlzzu/SoDiaoEditor.v2/raw/master/data/img/ds.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;许可证-license&quot;&gt;8. 许可证-LICENSE&lt;/h2&gt;
&lt;p&gt;MIT.&lt;/p&gt;
&lt;p&gt;欢迎下载适用！&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 17:20:00 +0000</pubDate>
<dc:creator>tongling</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tlzzu/p/8531740.html</dc:identifier>
</item>
<item>
<title>Spring Boot 文件上传 - 才丶</title>
<link>http://www.cnblogs.com/Caucasian/p/8531746.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Caucasian/p/8531746.html</guid>
<description>&lt;p&gt;　　其实网上已经有很多这样的文章了。为什么我还要记录一下呢？原因是在工作中对接外系统时，碰到了他们调取我们文件上传接口确存在着&lt;strong&gt;http请求头部规范的情况&lt;/strong&gt;，从而导致用传统方法获取不到参数。今天就来整理下Spring Boot中两种上传文件的方法。&lt;/p&gt;
&lt;p&gt;　　首先我们需要配置一下文件上传的最大值（为*.yml配置文件，*.properties文件同理）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;spring:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;   http:
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;     multipart:
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;       max-file-size: 50Mb  #限制文件大小
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;        max-request-size: 50Mb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来我们看一下第一种上传方式，&lt;strong&gt;适用于请求头规范，和单文件上传&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; @RequestMapping(value = &quot;/upload&quot;, method =&lt;span&gt; RequestMethod.POST)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;@ResponseBody
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; void uploadTest(MultipartFile file) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     System.out.println(&quot;上传的文件名：&quot;  +&lt;span&gt; file.getOriginalFilename());                  
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们在来看一下第二种上传方式，&lt;strong&gt;适用于多文件或者第一种获取不到文件的情况：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; @RequestMapping(value = &quot;/upload/batch&quot;, method =&lt;span&gt; RequestMethod.POST)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; String batchUploadTest(HttpServletRequest request) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取文件流集合&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     List&amp;lt;MultipartFile&amp;gt; files = ((MultipartHttpServletRequest) request).getFiles(&quot;file&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (MultipartFile file : files) {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         System.out.println(&quot;上传的文件名：&quot;  +&lt;span&gt; file.getOriginalFilename());     
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　经过各种尝试之后终于解决了由于http请求头不规范而得不到文件流的问题，顺便学到了SpringBoot怎样上传多文件。如果还有其他更好的方法。欢迎联系博主，进行更新。&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 16:58:00 +0000</pubDate>
<dc:creator>才丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Caucasian/p/8531746.html</dc:identifier>
</item>
<item>
<title>jQuery框架-1.基础知识 - 大仲马</title>
<link>http://www.cnblogs.com/witkeydu/p/8526089.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/witkeydu/p/8526089.html</guid>
<description>&lt;h4&gt;&lt;span&gt;jQuery简介&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;jQuery，顾名思义是JavaScript和查询（Query），jQuery是免费、开源的。它可以简化查询DOM对象、处理事件、制作动画、处理Ajax交互过程且兼容多浏览器的javascript库，核心理念是write less,do more(写得更少,做得更多)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;strong&gt;优势&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;体积小，使用灵巧（只需引入一个js文件）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;方便的选择页面元素（模仿CSS选择器更精确、灵活）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;动态更改页面样式/页面内容（操作DOM，动态添加、移除样式）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;控制响应事件（动态添加响应事件）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;提供基本网页特效（提供已封装的网页特效方法）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;快速实现通信（ajax）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;易扩展、插件丰富。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持链式写法。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;引入jQuery&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;通过script引入本地jQuery文件。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;通过引入CDN上面jQuery文件。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;版本选择&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;1.x：兼容ie678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2.x：不兼容ie678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3.x：不兼容ie678，只支持最新的浏览器。除非特殊要求，一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。目前该版本是官方主要更新维护的版本。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;jQuery和$的关系：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1083924/201803/1083924-20180307233544158-676448695.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;一、jQuery选择器&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt; ID选择器：$(“#box”);&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;类名选择器：$(“.box”);&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;标签选择器：$(“div”);&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;后代选择器：$(“#box  p”);&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;:first：获取第一个元素。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;:last：获取最后一个元素。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;:even：匹配所有索引值为偶数的元素，从 0 开始计数。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;:odd：匹配所有索引值为奇数的元素，从 0 开始计数。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;:eq(index)：匹配一个给定索引值的元素，从 0 开始计数。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;:not(selector)：去除所有与给定选择器匹配的元素。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;:has(selector)：匹配含有选择器所匹配的元素的元素。&lt;/span&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;title&amp;gt;jQuery练习&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;special&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;span&amp;gt;测试数据&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;测试数据&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;测试数据&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;测试数据&amp;lt;/li&amp;gt;
        &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;special&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;span&amp;gt;测试数据&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;list-style&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#555555&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#list li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;多属性设置以对象的方式进行传参&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).css({
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;设置css属性line-height必须加单位&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;line-height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;30px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;80%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;opacity&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:.&lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10px auto&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#f4f4f4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    });
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;eq获取设置对应下标元素&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul li:eq(1)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#ff0000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;实现隔行换色&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul li:odd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#888888&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul li:even&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#333333&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;分别获取第一个和最后一个元素&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul li:first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#ff0000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul li:last&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#ff0000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;适用去除选择器的元素&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul li:not(.special)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;适用满足选择器元素的子元素&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul li:has(span)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;purple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;二、jQuery属性和样式CSS&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;操作属性：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;attr(name|properties|key,value|fn)：设置或返回被选元素的属性值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;removeAttr(name)：从每一个匹配的元素中删除一个属性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;prop(name|properties|key,value|fn)：获取在匹配的元素集中的第一个元素的属性值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;removeProp(name)：用来删除由.prop()方法设置的属性集。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;区别：attr可以操作（增删改查）自定义的节点属性，而prop不可以（增删改查）。attr和prop对input的disabled属性的返回值不一致，attr返回disabled或者undefined，而prop返回&lt;strong&gt;布尔值&lt;/strong&gt;。&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;属性和css&amp;lt;/title&amp;gt;
        &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            html,body{
                height:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;;
            }
            body{
                position:relative;
                overflow: hidden;
            }
            .container{
                height:200px;
                background:#ff0000;
                line&lt;/span&gt;-&lt;span&gt;height: 200px;
                text&lt;/span&gt;-&lt;span&gt;align: center;
                color: #ffffff;
                position:absolute;
                left:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                right:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                top:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                bottom:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                margin:auto;
            }
        &lt;/span&gt;&amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-save=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
                输入内容：&lt;/span&gt;&amp;lt;input &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; disabled/&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    操作属性
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    读取属性值&lt;/span&gt;
    console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[type=text]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[type=text]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).prop(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[type=text]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回undefined&lt;/span&gt;
    console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[type=text]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).prop(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;无返回值&lt;/span&gt;
&lt;span&gt;    
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[type=text]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;disabled&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;));    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回值disabled&lt;/span&gt;
    console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[type=text]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).prop(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;disabled&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回值true
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    attr支持所有属性节点的增删改 prop支持自带属性的操作，不支持自定义属性的操作
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    操作标签自带属性&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;boxcontainer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置class属性为boxcontainer&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).prop(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;containerClass&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置class属性为containerClass
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    操作标签自定义属性&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.containerClass&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).attr(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-save&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;成功更改&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.boxcontainer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).prop(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-save&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不起作用
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    删除相关属性removeAttr移除相关属性 removeProp移除相关属性值且赋值undefined&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.containerClass&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).removeAttr(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.boxcontainer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).removeProp(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;操作Class：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;addClass(class|fn) ：为每个匹配的元素添加指定的类名。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;removeClass([class|fn]) ：从所有匹配的元素中删除全部或者指定的类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;toggleClass(class|fn[,switch])：如果存在（不存在）就删除（添加）一个类。&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;属性和css&amp;lt;/title&amp;gt;
        &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            html,body{
                height:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;;
            }
            body{
                position:relative;
                overflow: hidden;
            }
            .container{
                width:100px;
                height:100px;
                background:#ff0000;
                line&lt;/span&gt;-&lt;span&gt;height: 100px;
                text&lt;/span&gt;-&lt;span&gt;align: center;
                color: #ffffff;
                position:absolute;
                left:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                right:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                top:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                bottom:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                margin:auto;
            }
            .changeClass{
                width:100px;
                height:100px;
                line&lt;/span&gt;-&lt;span&gt;height: 100px;
                text&lt;/span&gt;-&lt;span&gt;align: center;
                color: #ffffff;
                background: #&lt;/span&gt;&lt;span&gt;000000&lt;/span&gt;&lt;span&gt;;
                position:absolute;
                left:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                right:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                top:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                bottom:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                margin:auto;
            }
        &lt;/span&gt;&amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box toggleClassOne&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
                显示内容
            &lt;/span&gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    操作class
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    添加class
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    $('.container').addClass('changeClass');
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    移除class
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    $('.container').removeClass('changeClass');
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    链式写法与上面的分开效果同&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).addClass(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;changeClass&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).removeClass(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    toggleClass存在删除不存在添加&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).toggleClass(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;toggleClassOne&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).toggleClass(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;toggleClassTwo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;操作内容：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;html([val|fn])：取得第一个匹配元素的html内容。这个函数不能用于XML文档。但可以用于XHTML文档。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;text([val|fn])：取得所有匹配元素的内容。结果是由所有匹配元素包含的文本内容组合起来的文本。这个方法对HTML和XML文档都有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val([val|fn|arr])：获得匹配元素的当前值。如果多选，将返回一个数组，其包含所选的值。&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;属性和css&amp;lt;/title&amp;gt;
        &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            html,body{
                height:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;;
            }
            ul{
                list&lt;/span&gt;-&lt;span&gt;style: none;
                width: &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;%&lt;span&gt;;
                margin: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; auto;
                text&lt;/span&gt;-&lt;span&gt;align: center;
            }
            #list li{
                line&lt;/span&gt;-&lt;span&gt;height: 40px;
                border&lt;/span&gt;-&lt;span&gt;bottom: 1px dashed #ff0000;
                font&lt;/span&gt;-&lt;span&gt;size: 20px;
            } 
        &lt;/span&gt;&amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-save=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;li&amp;gt;这是1&amp;lt;/li&amp;gt;
                    &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;even&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;这是2&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;这是3&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testhtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                
            &amp;lt;/div&amp;gt;        
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testtext&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;        
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     操作内容
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;html标签文本输出   text输出文本&lt;/span&gt;
    console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).html());
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).text());
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;赋值时html标签可渲染  text当文本处理&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.testhtml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).html(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;好诗！&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.testtext&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;好诗！&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[name=username]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).val(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[name=username]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;操作CSS：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;css(name|pro|[,val|fn])：访问匹配元素的样式属性。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 操作样式(详细请查看选择器)&lt;/span&gt;
        console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;250&lt;/span&gt;, height: &lt;span&gt;500&lt;/span&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;操作位置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;offset([coordinates])：获取匹配元素在当前文档的相对偏移。返回的对象包含两个整型属性：top 和 left，以像素计。方法只对可见元素有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;position()：获取匹配元素相对父元素的偏移。返回的对象包含两个整型属性：top 和 left。为精确计算结果，请在补白、边框和填充属性上使用像素单位。此方法只对可见元素有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;scrollTop([val])：获取匹配元素相对滚动条顶部的偏移。此方法对可见和隐藏元素均有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;scrollLeft([val])：获取匹配元素相对滚动条左侧的偏移。此方法对可见和隐藏元素均有效。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;属性和css&amp;lt;/title&amp;gt;
        &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            html,body{
                height:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;;
            }
            body{
                position: relative;
                overflow: hidden;
            }
            .container{
                width: 300px;
                height: 300px;
                background: #ff0000;
                position: absolute;
                left: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                right: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                top: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                bottom: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                margin: auto;
            }
            .box{
                width: 100px;
                height: 100px;
                line&lt;/span&gt;-&lt;span&gt;height: 100px;
                text&lt;/span&gt;-&lt;span&gt;align: center;
                color: #ffffff;
                background: #&lt;/span&gt;&lt;span&gt;000000&lt;/span&gt;&lt;span&gt;;
                position: absolute;
                left: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                right: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                top: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                bottom: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                margin: auto;
            }
        &lt;/span&gt;&amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-save=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
                中心
            &lt;/span&gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width: 200px; height: 200px; overflow: auto; &lt;/span&gt;
border: 1px solid #ccc; padding: 10px; margin: 10px;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inner&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height: 400px;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        
    &amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;    
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取相对于文档的left和top的值&lt;/span&gt;
    console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).offset())
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置left和top值&lt;/span&gt;
    $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).offset({left:&lt;span&gt;0&lt;/span&gt;,top:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;})
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.box&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).offset())
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).scrollTop());
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).scrollTop(&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).scroll(function () {
        console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).scrollTop());
    });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;操作尺寸：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;height([val|fn])：取得匹配元素当前计算的高度值（px）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;width([val|fn])：取得第一个匹配元素当前计算的宽度值（px）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;innerHeight()：获取第一个匹配元素内部区域高度（包括补白、不包括边框）。此方法对可见和隐藏元素均有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;innerWidth()：获取第一个匹配元素内部区域宽度（包括补白、不包括边框）。此方法对可见和隐藏元素均有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;outerHeight([options])：获取第一个匹配元素外部高度（默认包括补白和边框）。此方法对可见和隐藏元素均有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;outerWidth([options])：获取第一个匹配元素外部宽度（默认包括补白和边框）。此方法对可见和隐藏元素均有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：设置options为true，计算margin在内。&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;属性和css&amp;lt;/title&amp;gt;
        &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            html,body{
                height:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;;
            }
        &lt;/span&gt;&amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width: 200px; height: 200px; overflow: auto; border: 1px solid #ccc; padding: 10px; margin: 10px;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inner&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height: 400px;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        
    &amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).width(&lt;span&gt;150&lt;/span&gt;&lt;span&gt;));
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).height(&lt;span&gt;130&lt;/span&gt;&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;+补白的宽度、高度&lt;/span&gt;
    console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).innerWidth());
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).innerHeight());
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;+边框和补白的宽度、高度&lt;/span&gt;
    console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).outerWidth());
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).outerHeight());
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;+外边距、边框和补白的宽度、高度&lt;/span&gt;
    console.log($(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).outerWidth(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
    console.log($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#outer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).outerHeight(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; &lt;span&gt;三、过滤查找 &lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;过滤元素：(与选择器的作用基本相同，只是分装成方法使用，此处不再举例)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;eq(index|-index)：获取第N个元素。这个元素的位置是从0算起，如果是负数，则从集合中的最后一个元素开始倒数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;first()：获取第一个元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;last()：获取最后一个元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;hasClass(class)：检查当前的元素是否含有某个特定的类，如果有，则返回true。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;has(expr|ele)：保留包含特定后代的元素，去掉那些不含有指定后代的元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;not(expr|ele|fn)：删除与指定表达式匹配的元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查找元素：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;children([expr])：取得一个包含匹配的元素集合中每一个元素的所有子元素的元素集合。&lt;strong&gt;只考虑子元素而不考虑所有后代元素。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;find(expr|obj|ele)：搜索所有与指定表达式匹配的子元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;parent([expr])：取得一个包含着所有匹配元素的唯一父元素的元素集合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;offsetParent()：返回第一个匹配元素用于定位的父节点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;next([expr])：取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;nextAll([expr])：查找当前元素之后所有的同辈元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;prev([expr])：取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;prevAll([expr])：查找当前元素之前所有的同辈元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;siblings([expr])：取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合。可以用可选的表达式进行筛选。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;串联操作：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;add(expr|ele|html|obj[,con])：把与表达式匹配的元素添加到jQuery对象中。这个函数可以用于连接分别与两个表达式匹配的元素结果集。返回的结果将始终以元素在HTML文档中出现的顺序来排序，而不再是简单的添加。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;title&amp;gt;jQuery练习-选择器&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;label&amp;gt;测试数据&amp;lt;/label&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;测试数据&amp;lt;/li&amp;gt;
        &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;special&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;测试数据&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;测试数据&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
$(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#list .special&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).add(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#ff0000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;andSelf()：将先前所选的加入当前元素中。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;title&amp;gt;jQuery练习-选择器&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;li&amp;gt;测试数据&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;测试数据&amp;lt;/li&amp;gt;
        &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;special&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;测试数据&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;测试数据&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
$(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#list .special&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).nextAll().andSelf().css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#ff0000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;end()：回到最近的一个&quot;破坏性&quot;操作之前。即，将匹配的元素列表变为前一次的状态。如果之前没有破坏性操作，则返回一个空集。所谓的&quot;破坏性&quot;就是指任何改变所匹配的jQuery元素的操作。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;title&amp;gt;jQuery练习-end()&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;  
    &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;list item &lt;span&gt;1&lt;/span&gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;list item &lt;span&gt;2&lt;/span&gt;&amp;lt;/li&amp;gt;
        &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;list item &lt;span&gt;3&lt;/span&gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
    &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;list item &lt;span&gt;1&lt;/span&gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;list item &lt;span&gt;2&lt;/span&gt;&amp;lt;/li&amp;gt;
        &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;list item &lt;span&gt;3&lt;/span&gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;end() 方法结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态&lt;/span&gt;
      $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul.first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    .end().find(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
  &lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;四、jQuery事件 &lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;页面载入事件：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ready(fn)：当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。这是事件模块中最重要的一个函数，因为它可以极大地提高web应用程序的响应速度。简单地说，这个方法纯粹是对向window.load事件注册事件的替代方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;绑定事件：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;events:表示jQuery事件不加on，可同时绑定多个事件，事件间用空格隔开例如：'click dbclick';&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;[selector]:表示对应样式的选择器；&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;[data]:表示传入回调函数的参数，用event.data进行接收&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;fn:回调函数&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;on(events,[selector],[data],fn)：在选择元素上绑定一个或多个事件的事件处理函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;off(events,[selector],[fn])：在选择元素上移除一个或多个事件的事件处理函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;bind(type,[data],fn)：为每个匹配元素的特定事件绑定事件处理函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;unbind(type,[data|fn]])：bind()的反向操作，从每一个匹配的元素中删除绑定的事件。如果没有参数，则删除所有绑定的事件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;one(type,[data],fn)：为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;hover([over,]out)：当鼠标移动到一个匹配的元素上面时，会触发指定的第一个函数。当鼠标移出这个元素时，会触发指定的第二个函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;click([[data],fn])：触发每一个匹配元素的click事件。这个函数会调用执行绑定到click事件的所有函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：其他事件方法使用方式一样。例如：mouseover、mouseout、dblclick、change、blur、focus、keydown、keyup、keypress、mousedown、mouseup、mousemove、mouseenter、mouseleave、resize、scroll、select、submit、unload等。&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;属性和css&amp;lt;/title&amp;gt;
        &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            html,body{
                height:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;;
            }
            ul{
                list&lt;/span&gt;-&lt;span&gt;style: none;
                width: &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;%&lt;span&gt;;
                margin: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; auto;
                text&lt;/span&gt;-&lt;span&gt;align: center;
            }
            #list li{
                line&lt;/span&gt;-&lt;span&gt;height: 40px;
                border&lt;/span&gt;-&lt;span&gt;bottom: 1px dashed #ff0000;
                font&lt;/span&gt;-&lt;span&gt;size: 20px;
            } 
        &lt;/span&gt;&amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-save=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;li&amp;gt;这是1&amp;lt;/li&amp;gt;
                    &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;even&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;这是2&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;这是3&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;这是4&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;这是5&amp;lt;/li&amp;gt;
                    &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;even&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;这是6&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;这是7&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;这是8&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;!--考虑兼容选择相应的版本，此处参考百度选择1.x的版本进行说明，案例不提供此文件自行下载--&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/jquery.1.8.3.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    //添加单击事件
    $('#list li').on('click',function(){
        alert(this.innerHTML);
    })&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
    
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    //添加双击事件
    $('#list li').on('dblclick',function(){
        alert(this.innerHTML);
    })
    //无法移除双击事件（不是同一个方法）
    $('#list li').off('dblclick',function(){
        alert(this.innerHTML);
    })&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    function fun(){
        alert(&lt;/span&gt;&lt;span&gt;0000&lt;/span&gt;&lt;span&gt;);
    }
    
    
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    //添加双击事件且可选择选择器过滤
    $('#list').on('dblclick','.even',fun);
    //可移除双击事件
    $('#list').off('dblclick',fun);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
    
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    //添加双击事件
    $('#list').on('dblclick',fun);
    //无法移除双击事件与添加双击事件的方法选择器对应或者全部移除
    $('#list').off('dblclick','.even',fun);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
    
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    //bind和on的区别是其无法进行选择器过滤，其他用法基本相同都可添加多个事件
    $('#list').bind('click ', fun);
    $('#list').unbind('click', fun);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    //一次性事件处理函数
    $('#list').one('click',{'param':'参数'},function(e){
        console.log(e.data['param'])
    })&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    
    
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    
     //鼠标划入划出事件
     $('#list').hover(function(){
            console.log(&quot;鼠标划入&quot;)
        },
        function(){
            console.log(&quot;鼠标划出&quot;)
        })&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).click(function(){
        console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;鼠标点击事件&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    })
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;附录：&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;选项卡实例demo:&lt;/strong&gt;&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;jQuery选项卡效果&amp;lt;/title&amp;gt;
    &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        *&lt;span&gt;{
            padding: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            margin: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }
        html,body{
            height: &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;;
        }
        body{
            background: #f4f4f4;
        }
        ul{
            list&lt;/span&gt;-&lt;span&gt;style: none;
        }
        .container{
            width: 600px;
            margin: 100px auto;
            background: #ffffff;
            border&lt;/span&gt;-&lt;span&gt;radius: 10px;
            border:1px solid #&lt;/span&gt;&lt;span&gt;555555&lt;/span&gt;&lt;span&gt;;
            overflow: hidden;
        }
        .header&lt;/span&gt;-&lt;span&gt;box{

        }
        .tab&lt;/span&gt;-&lt;span&gt;navigation{
            overflow: hidden;
            background: #eeeeee;
            color: #&lt;/span&gt;&lt;span&gt;080808&lt;/span&gt;&lt;span&gt;;
            border&lt;/span&gt;-bottom: 1px solid #&lt;span&gt;555555&lt;/span&gt;&lt;span&gt;;
        }
        .tab&lt;/span&gt;-&lt;span&gt;navigation li{
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;: left;
            width: 100px;
            text&lt;/span&gt;-&lt;span&gt;align: center;
            line&lt;/span&gt;-&lt;span&gt;height: 50px;
        }
        .tab&lt;/span&gt;-&lt;span&gt;body{
            width: &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%&lt;span&gt;;
            height: 300px;
            position: relative;    
        }
        .tab&lt;/span&gt;-&lt;span&gt;body li{
            padding: 10px;
            position: absolute;
            left: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            top: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }
        .tab&lt;/span&gt;-body li:first-&lt;span&gt;child{
            display: block;
        }        
        .tab&lt;/span&gt;-body li:nth-child(n+&lt;span&gt;2&lt;/span&gt;&lt;span&gt;){
            display: none;
        }
        .tab&lt;/span&gt;-&lt;span&gt;navigation .selected{
            background: #ffffff;
            color: #&lt;/span&gt;&lt;span&gt;000000&lt;/span&gt;&lt;span&gt;;
        }
        .tab&lt;/span&gt;-&lt;span&gt;navigation .active{
            background: #ff0000;
        }
    &lt;/span&gt;&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;header-box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tab-navigation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;li &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;selected&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;选项卡1&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;选项卡2&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;选项卡3&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;选项卡4&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;选项卡5&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;选项卡6&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;            
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body-box&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;ul &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tab-body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;li&amp;gt;内容1内容1内容1内容1内容1内容1内容1内容1内容1内容1内容1&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;内容2内容2内容2内容2内容2内容2内容2内容2内容2内容2内容2&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;内容3内容3内容3内容3内容3内容3内容3内容3内容3内容3内容3&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;内容4内容4内容4内容4内容4内容4内容4内容4内容4内容4内容4&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;内容5内容5内容5内容5内容5内容5内容5内容5内容5内容5内容5&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;内容6内容6内容6内容6内容6内容6内容6内容6内容6内容6内容6&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;            
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://cdn.bootcss.com/jquery/1.12.4/jquery.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.tab-navigation li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).click(function () {
        $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).addClass(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;selected&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).siblings().removeClass(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;selected&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; index = $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.tab-navigation li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).index(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.tab-body li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).eq(index).css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).siblings().css(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    }).hover(function () {
            $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).addClass(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;active&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        },function () {
            $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).removeClass(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;active&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 08 Mar 2018 16:33:00 +0000</pubDate>
<dc:creator>大仲马</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/witkeydu/p/8526089.html</dc:identifier>
</item>
<item>
<title>java类型转换详解（自动转换和强制转换） - nianzhilian</title>
<link>http://www.cnblogs.com/nianzhilian/p/8531710.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nianzhilian/p/8531710.html</guid>
<description>&lt;h2&gt;自动转换&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class Hello
{
        public static void main(String[] args)
        {
                //自动转换
                int a = 5;
                byte b = 6;
                int c = a + b;
                System.out.println(c);
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; a是int类型，b是byte类型 当二者进行加法运算时（根据同类型相加结果还是同类型） 由于int的范围比byte的取值范围大这个时候jvm会自动将b转换成int类型&lt;/p&gt;
&lt;h2&gt;强制转换&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//强制转换
                int a = (int)8.8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 强制转换就是将前面加上要转换的类型就可以了。&lt;/p&gt;
&lt;h2&gt;下面来看比较特殊的&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class Hello
{
    public static void main(String[] args)
    {
        byte b = 3;//正确
        int x = 3;//正确
        b = x;//错误
        
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 上面代码在编译的时候会报错 常量3的类型为int   int类型可以赋值给byte的变量    但是b=x这个时候就不行了呢   因为根据常量优化机制  这种方式只针对 常量  不针对变量 也就是说大范围的不能赋值给小范围  除非用强制转换类型&lt;/p&gt;
&lt;p&gt;在看下面的也遵循上面的原则&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class Hello
{
        public static void main(String[] args)
        {
                byte b1=3,b2=4,b;//正确
                b = b1 + b2;//错误   因为b1  b2这个时候是变量（常量优化机制只针对常量不针对变量）
                b = 3 + 4;//正确
                
        }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 在看一个例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class Hello
{
    public static void main(String[] args)
    {
        
        short s = 1;
        s = s + 1;//错误

        和
        
        short s = 1;
        s+=1;//正确
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 上面的代码从表面上看是没什么区别的 为什么第二种写法就正确了呢？&lt;/p&gt;
&lt;p&gt;第一种算的时候  会将s自动转换为int类型在进行加法运算（低精度转高精度）  然后得出的结果是int类型  在赋值给short类型 这样是不合适的（高精度不能赋值给低精度类型）所以会报错 正确的写法如下面代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
class Hello
{
        public static void main(String[] args)
        {
                
                short s = 1;
                s = (short)(s + 1);

                System.out.println(s);
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 那第二种为什么是可行的呢？&lt;/p&gt;
&lt;p&gt;因为+=、-+、*=、/=  这些运算符比较特殊  本身就具有强制类型转换的作用。&lt;/p&gt;

</description>
<pubDate>Thu, 08 Mar 2018 16:27:00 +0000</pubDate>
<dc:creator>nianzhilian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nianzhilian/p/8531710.html</dc:identifier>
</item>
<item>
<title>EntityFramework Core 2.0 Explicitly Compiled Query（显式编译查询） - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/8519512.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/8519512.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;EntityFramework Core 2.0引入了显式编译查询，在查询数据时预先编译好LINQ查询便于在请求数据时能够立即响应。显式编译查询提供了高可用场景，&lt;span&gt;通过使用显式编译的查询可&lt;/span&gt;&lt;span&gt;以提高查询性能。&lt;/span&gt;&lt;span&gt;EF Core&lt;/span&gt;&lt;span&gt;已经使用查询表达式的散列来表示自动编译和缓存查询，当我们的代码需要重用以前执行的查询时，&lt;/span&gt;&lt;span&gt;EF Core&lt;/span&gt;&lt;span&gt;将使用哈希查找并从缓存中返回已编译的查询。我们更希望直接使用编译查询绕过散列计算和高速缓存查找。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;EntityFramework Core 2.0显式编译查询&lt;/h2&gt;
&lt;p&gt;比如我们要从博客实体中通过主键查询博客同时饥饿加载发表文章的集合列表，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; id = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext())
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blog =&lt;span&gt; context.Blogs
                    .AsNoTracking()
                    .Include(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Posts)
                    .Where(c &lt;/span&gt;=&amp;gt; c.Id ==&lt;span&gt; id)
                    .FirstOrDefault();
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当进行上述查询时，此时要经过编译翻译阶段最终返回实际结果，比如在Web网站上这样的请求很频繁，此时将严重影响响应速度导致页面加载数据过慢。从Web程序应用角度来看我们大可利用ASP.NET Core中的响应式缓存，在实际应用中我们会将查询封装为方法来使用，我们无法优化结果和查询方式，但是我们能够通过编译查询来提前保存好数据以达到缓存的效果。通过EF静态类中的扩展方法CompileQuery来实现。如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;Blog&amp;gt; GetBlogAsync(EFCoreDbContext context, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            Func&lt;/span&gt;&amp;lt;EFCoreDbContext, &lt;span&gt;int&lt;/span&gt;, Task&amp;lt;Blog&amp;gt;&amp;gt; blog = EF.CompileAsyncQuery((EFCoreDbContext context, &lt;span&gt;int&lt;/span&gt; Id) =&amp;gt;&lt;span&gt;
                 context.Blogs.Include(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Posts)
                         .Where(c &lt;/span&gt;=&amp;gt; c.Id ==&lt;span&gt; Id)
                         .FirstOrDefault());
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; blog(context, id);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;常规查询和显式编译查询性能比较&lt;/h2&gt;
&lt;p&gt;接下来我们测试常规查询和使用显式编译查询的性能，我们利用EF Core提供的内存数据库来测试避免使用SQL Server数据库，利用SQL Server数据库很难去比较二者性能问题，因为数据库会进行查询计划优化和缓存，利用内存数据库只知道当前执行的查询不会进行任何优化， 首先我们下载EF Core内存数据库。额外再说明一点内存数据库在进行单元测试时很有意义。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201803/589642-20180308212611397-1974775277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们首先测试常规查询，我们预先在内存数据库中创建50条记录，然后查询十万次数据，这样来看每一次查询都会再次重新编译。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; options = &lt;span&gt;new&lt;/span&gt; DbContextOptionsBuilder&amp;lt;EFCoreDbContext&amp;gt;&lt;span&gt;()
                           .UseInMemoryDatabase(Guid.NewGuid().ToString())
                           .Options;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext(options);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stopWatch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();
            FillBlogs(context);
            stopWatch.Start();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;1000000&lt;/span&gt;; i++&lt;span&gt;)
            {
                GetUnCompileQueryBlog(context);
            }
            stopWatch.Stop();
            Console.Write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Compiling time:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.WriteLine(stopWatch.Elapsed);
            Console.ReadKey();
        }

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; FillBlogs(EFCoreDbContext context)
        {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;50&lt;/span&gt;; i++&lt;span&gt;)
            {
                context.Blogs.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Blog
                {
                    Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    CreatedTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                    Url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.cnblogs/com/CreateMyself&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    ModifiedTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                    Posts &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;Post&amp;gt;&lt;span&gt;()
                    {
                        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Post()
                        {
                            CommentCount &lt;/span&gt;= i, CreatedTime =&lt;span&gt; DateTime.Now,
                            ModifiedTime &lt;/span&gt;= DateTime.Now, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EF Core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        }
                    }
                });
            }
            context.SaveChanges(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; Blog GetUnCompileQueryBlog(EFCoreDbContext context)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; context.Blogs.Include(c =&amp;gt;&lt;span&gt; c.Posts)
                         .OrderBy(o &lt;/span&gt;=&amp;gt;&lt;span&gt; o.Id)
                         .FirstOrDefault();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201803/589642-20180308232938937-14302591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们看到上述利用常规查询总耗时27秒，接下来我们再来看看显式编译查询耗时情况。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;EFCoreDbContext, Blog&amp;gt; _getCompiledBlog = EF.CompileQuery((EFCoreDbContext context) =&amp;gt;&lt;span&gt;
                    context.Blogs.Include(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Posts)
                            .OrderBy(o &lt;/span&gt;=&amp;gt;&lt;span&gt; o.Id)
                            .FirstOrDefault());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; options = &lt;span&gt;new&lt;/span&gt; DbContextOptionsBuilder&amp;lt;EFCoreDbContext&amp;gt;&lt;span&gt;()
                           .UseInMemoryDatabase(Guid.NewGuid().ToString())
                           .Options;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext(options);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; stopWatch = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();
            FillBlogs(context);
            stopWatch.Start();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;100000&lt;/span&gt;; i++&lt;span&gt;)
            {
                GetCompileQueryBlog(context);
            }
            stopWatch.Stop();
            Console.Write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Compiling time:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.WriteLine(stopWatch.Elapsed);
            Console.ReadKey();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201803/589642-20180308233046516-1330078031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上通过显式编译查询耗时16秒，那么是不是就说明显式编译查询性能一定优于常规查询呢？显然不是这样，上述只是简单的测试方法，有可能运行多次显式编译查询性能还低于常规查询，所以上述简单的测试方法并不能看出常规查询和显式编译查询之间的性能差异，当查询基数足够大时则能通过机器明显看出二者之间的性能差异，这也就说明了为什么EntityFramework Core官方文档说明显式编译查询的高可用。但是显式编译查询还有且缺点，当我们进行如下查询呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; options = &lt;span&gt;new&lt;/span&gt; DbContextOptionsBuilder&amp;lt;EFCoreDbContext&amp;gt;&lt;span&gt;()
                           .UseInMemoryDatabase(Guid.NewGuid().ToString())
                           .Options;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EFCoreDbContext(options);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blogs =&lt;span&gt; GetCompileQueryBlogs(context);

            Console.ReadKey();
        }


        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; Blog[] GetCompileQueryBlogs(EFCoreDbContext context)
        {
            Func&lt;/span&gt;&amp;lt;EFCoreDbContext, Blog[]&amp;gt; func = EF.CompileQuery((EFCoreDbContext db) =&amp;gt;&lt;span&gt;
                  db.Blogs.Include(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Posts)
                          .OrderBy(o &lt;/span&gt;=&amp;gt;&lt;span&gt; o.Id)
                          .ToArray());

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func(context);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201803/589642-20180309000002863-66244394.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当前EntityFramework Core 2.0.1版本对于显式编译查询还不支持返回IEnumerable&amp;lt;T&amp;gt;, IQueryable&amp;lt;T&amp;gt;的集合类型，期待未来能够有所支持。&lt;/p&gt;
&lt;h2&gt;总结缺陷&lt;/h2&gt;
&lt;p&gt;显式编译查询提供高可用场景，但是仍然存在其缺陷，期待未来能有更多支持，希望给阅读的您一点帮助。精简的内容，简单的讲解，希望对阅读的您有所帮助，我们明天再会。&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 16:20:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/8519512.html</dc:identifier>
</item>
<item>
<title>WPF自学入门（二）WPF-XAML布局控件 - 黄昏前黎明后</title>
<link>http://www.cnblogs.com/fly-bird/p/8531650.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fly-bird/p/8531650.html</guid>
<description>&lt;p&gt;     上一篇介绍了xaml基本知识，我们已经知道了WPF简单的语法。那么接下来，我们要认识一下WPF的布局容器。布局容器可以使控件按照分类显示，我们一起来看看WPF里面可以使用哪些布局容器用来布局。&lt;/p&gt;
&lt;p&gt;       在WPF中，布局是由布局容器来完成的，容器里面是可以放控件，容器里面也可以放容器。而在WPF中，布局容器有很多，下面主要介绍最常用的几种布局容器，&lt;/p&gt;
&lt;p&gt;      下面分别介绍StackPanel,WarpPanel,DockPanel,Grid,Canvas五种布局容器&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一、StackPanel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       在WPF中StackPanel的功能是，紧凑地把子控件按照一定规律地排列在一起，基本的排列方式有两种，一种是横排列&amp;lt;StackPanel Orientation=&quot;Horizontal&quot;/&amp;gt;，一种是竖排列&amp;lt;StackPanel Orientation=&quot;Vertical&quot;&amp;gt;。下面看一下这个布局容器的使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/bqdp06iYDDwPvzDVmecV0a3CANgHGPyoYsWi9vriwFM!/b/dMgAAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=9QHeAAAAAAADEB8!&amp;amp;su=0263280033&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot; alt=&quot;&quot; width=&quot;500.0&quot; height=&quot;221.0&quot; data-img-idx=&quot;0&quot; data-src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/bqdp06iYDDwPvzDVmecV0a3CANgHGPyoYsWi9vriwFM!/b/dMgAAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=9QHeAAAAAAADEB8!&amp;amp;su=0263280033&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/Z1xnZkWU3XXOFXFcKVIY8EkqAMcytSM1yJ15OLmksE4!/b/dAQBAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=9QHDAAAAAAADEAI!&amp;amp;su=0205995377&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot; alt=&quot;&quot; width=&quot;500.0&quot; height=&quot;194.0&quot; data-img-idx=&quot;1&quot; data-src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/Z1xnZkWU3XXOFXFcKVIY8EkqAMcytSM1yJ15OLmksE4!/b/dAQBAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=9QHDAAAAAAADEAI!&amp;amp;su=0205995377&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里随便说一下Margin属性，Margin属性定义控件的外边缘，可以通过以下几种方式来设置&lt;/p&gt;
&lt;p&gt;1、Margin=”10”：各边缘均为10&lt;/p&gt;
&lt;p&gt;2、Margin=”10,20,30,40”：设定左、上、右、下各边缘分别为10、20、30、40&lt;/p&gt;
&lt;p&gt;3、使用拆分式方式设定Margin=”20,10”，如上下为10，左右为20&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、WarpPanel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;StackPanel是比较有局限性的，那么WPF怎么解决这个问题呢，WarpPanel和DockPanel就是补充StackPanel功能的布局容器，下面通过观察来对比一下两个布局容器的区别吧。看一下WarpPanel到底改进了什么功能？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://a2.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/PMPSn7IHQXKRcWtAygCaoDHLlYAdZVDATzQUjTrnkSg!/b/dEUBAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=DwFrAQAAAAADEFE!&amp;amp;su=083411713&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot; alt=&quot;&quot; width=&quot;270.6700134277344&quot; height=&quot;362.54998779296875&quot; data-img-idx=&quot;2&quot; data-src=&quot;http://a2.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/PMPSn7IHQXKRcWtAygCaoDHLlYAdZVDATzQUjTrnkSg!/b/dEUBAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=DwFrAQAAAAADEFE!&amp;amp;su=083411713&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看到上面的运行结果，我想大家已经知道了，区别在哪里，WarpPanel是可以根据容器的大小变化，来滚动控件的排布的。而StackPanel只是死死地盯住控件，容器小了，就会遮挡内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、DockPanel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       DockPanel布局容器是以上、下、左、右、中为基本结构的布局方式，主要是控件的停靠方式。有类似于港口停船的方式。我们可以利用DockPanel.Dock这个附加属性来设置控件的停泊方式的。有四个方式，上下左右。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/rhfE81RfuvtKgi*Tu5Y9lRpIkp.g*2SRl8h4MhYIw.4!/b/dEQBAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=KgJ7AQAAAAADEGc!&amp;amp;su=0234998289&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot; alt=&quot;&quot; width=&quot;553.0&quot; height=&quot;378.4599914550781&quot; data-img-idx=&quot;3&quot; data-src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/rhfE81RfuvtKgi*Tu5Y9lRpIkp.g*2SRl8h4MhYIw.4!/b/dEQBAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=KgJ7AQAAAAADEGc!&amp;amp;su=0234998289&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;四、Grid&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;      在WPF中可以说最强大的布局容器就是Grid了，我们刚才演示的容器都可以放置在Grid中，因为Grid可以模仿除了Warppanel之外的所有布局容器的功能。Grid其实就是把一个页面分为一格格，然后再这些格上面放东西。&lt;/p&gt;
&lt;p&gt;      在布局控件之前，我们首先要做的是布局Grid容器，因为Grid容器是由小网格组成，那么我们在布局容器的时候就要设置好有多少行，有多少列。然后就形成了用这些行和列分隔开的网格了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/cxjoE2o5JyCjBIxjV3IDbxNVU8wQznDMUL3eI6Abiq4!/b/dAgBAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=kwFhAQAAAAADEMc!&amp;amp;su=0263927841&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot; alt=&quot;&quot; width=&quot;402.6700134277344&quot; height=&quot;352.5799865722656&quot; data-img-idx=&quot;4&quot; data-src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/cxjoE2o5JyCjBIxjV3IDbxNVU8wQznDMUL3eI6Abiq4!/b/dAgBAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=kwFhAQAAAAADEMc!&amp;amp;su=0263927841&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot;/&gt;&lt;/p&gt;
&lt;p&gt;       我们用&amp;lt;ColumnDefinition&amp;gt;标签来定义列的，用&amp;lt;RowDefinition&amp;gt;来定义行的。上图我们定义的5*5的Grid布局容器。&lt;/p&gt;
&lt;p&gt;      注意，默认情况下是平均分，但是有很多情况不是平均分的，我们可以设置高度或者宽度的值,有三种方式.我们利用列来说明：&lt;/p&gt;
&lt;p&gt;         第一就是Width=&quot;*&quot;，这种是按比例分的，2*就是2倍的意思了。&lt;/p&gt;
&lt;p&gt;        第二就是Width=&quot;auto&quot;自动分配，就是根据内容分配空间。&lt;/p&gt;
&lt;p&gt;        第三就是Width=&quot;Value&quot;一个确定的值。这个属性可以这样写&lt;/p&gt;
&lt;p&gt;&amp;lt;ColumnDefinition Width=&quot;*&quot;&amp;gt;&amp;lt;/ColumnDefinition&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;ColumnDefinition Width=&quot;Auto&quot;&amp;gt;&amp;lt;/ColumnDefinition&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;ColumnDefinition Width=&quot;2*&quot;&amp;gt;&amp;lt;/ColumnDefinition&amp;gt;&lt;/p&gt;
&lt;p&gt;        定义Grid的行和列以后，网格就出来了就可以再里面放内容了&lt;/p&gt;
&lt;p&gt;我们通过Grid.Row和Grid.Column来把空间放进去。当然，我们也可以在容器里面的空间标签中加入各种属性来改变一些东西，如Margin，当我们不想看到分割线的话，也可以设置ShowGridLines=false来取消。我们可以再方格里面镶嵌一个布局容器，在里面继续布局。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;五、Canvas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        Canvas布局容器就好像传统的布局一样，基于坐标的布局，利用Canvas.Left,Canvas.Top,Canvas.Right,Canvas.Bottom这四个附加属性来定位控件坐标。&lt;/p&gt;
&lt;p&gt;WPF中使用的坐标是以左上角为原点，向右为X轴，向下为Y轴的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/.OBJz*86V9qLqKnNEh1R3G81mJBnkFo9atekW3SvlwA!/b/dMgAAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=KgIpAgAAAAADEDY!&amp;amp;su=0247731473&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot; alt=&quot;&quot; width=&quot;553.0&quot; height=&quot;552.1699829101562&quot; data-img-idx=&quot;5&quot; data-src=&quot;http://a1.qpic.cn/psb?/1c254e4b-5aa1-477d-9e8a-d6cbfebb6027/.OBJz*86V9qLqKnNEh1R3G81mJBnkFo9atekW3SvlwA!/b/dMgAAAAAAAAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=KgIpAgAAAAADEDY!&amp;amp;su=0247731473&amp;amp;tm=1520521200&amp;amp;sce=0-12-12&amp;amp;rf=2-9&quot;/&gt;&lt;/p&gt;
&lt;p&gt;坐标点就是控件的左上角的位置。&lt;/p&gt;

&lt;p&gt;PS:本人也是WPF的初学者，如有不对的地方，欢迎在评论区多多指教，学习，为了分享，为了提高。&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 15:57:00 +0000</pubDate>
<dc:creator>黄昏前黎明后</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fly-bird/p/8531650.html</dc:identifier>
</item>
<item>
<title>python之文件读写详解 - 天宇之游</title>
<link>http://www.cnblogs.com/cwp-bg/p/8531588.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cwp-bg/p/8531588.html</guid>
<description>&lt;h2 id=&quot;打开文件&quot;&gt;打开文件&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;函数open()&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;7.5&quot;&gt;&lt;li&gt;
&lt;p&gt;file：文件路径&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;mode: 文件的读写方式，默认‘r’，只读方式；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;buffering：设置缓冲策略，0用于二进制文件，1为行缓冲，用于文本模式；默认二进制文件固定大小缓冲，文本文件行缓冲&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;encoding：设置编码，默认utf-8;该参数不能用于二进制模式；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;errors：设置怎么处理文件的编码异常，默认strict,发生错误抛出异常；设置ignore忽略编码异常，可能导致数据丢失，这个参数不能用于二进制模式；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;newline：设置换行符，默认换行符为'\n','\r','\r\n',写入文件的时候，所有文本中的上述三种都会转换成'\n'换行符；当设置为''时，也启用默认模式；如果设置其它合法值，则使用其他值，一般不用；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;closefd=True ：设置文件描述符的状态，当为False时，文件关闭但描述符不关闭，但是打开文件时指定了文件名，那么设置False不会起作用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;文件打开方式&quot;&gt;文件打开方式&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;r:  以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
w:  打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
a:  打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
x:  创建一个新文件，将其打开并编写；如果文件已经存在报错；
rb: 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
wb: 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
ab: 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
r+: 打开一个文件用于读写。文件指针将会放在文件的开头。
w+: 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
a+: 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
rb+:以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
wb+:以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
ab+:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;关闭文件&quot;&gt;关闭文件&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;f &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;file&lt;/span&gt;)
f.close()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于文件每次打开都需要调用Close函数关闭，可以使用上下文管理器管理文件，其会自动在适当的时候关闭文件。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; f:
    f.read()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;文件普通读写&quot;&gt;文件普通读写&lt;/h2&gt;
&lt;p&gt;方法一：read()&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with open(filename) as f:
    f.read()  # 一次性读取全部，在大文件这是不可取的
    f.read(5) # 读取5个字节，如果使用UTF-8编码，5表示5个汉字，也表示5个字母。
    f.read(6) # 同一个f对象，多次读取时在上一次的基础上继续往下，如果超过则有多少读多少&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法二：readline()&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with open(filename) as f:
    f.readline()  # 按行来读取，每次返回一行，
    f.readline()  # 多次读取在上一行的基础上往下，换行符也会被读取&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法三：readlines()&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with open(filename) as f:
    t = f.readlines()  # 按行读取全部的内容作为一个列表返回&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法一：write()&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with open(filename,'w',encoding='utf-8') as f:
    t = f.write('ddd') # 将内容写入，必须是字符串格式，不可以是数字，返回的是字符串的个数，包括了换行符\r\n占两个字符（windows）,占一个字符\n(linux)。
    t = f.write('aaa') # 多次写入在原来的基础上继续写入&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法二：writelines()&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with open(filename,'w',encoding='utf-8') as f:
    f.writelines(['aa','bb'])  # 该方法自动将列表元素拼接起来写入文件，参数时一个可迭代对象，列表、字典、集合都可以
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;writeable()可以判断打开的文件对象f究竟是可读的还是可写的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;注意的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ol readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;f.write(123) 这种是不被允许的，必须转化成二进制或字符串；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;open(filename,'rb',encoding='utf-8') : 以二进制格式打开文件是不能指定编码的，否则报错&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;以二进制格式打开文件，写入的必须是字节文件，同时写入返回的是字节数；以文本模式打开，写入的必须是文本，同时返回的是字符串个数；一个汉字字符串占3个字节。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;普通字符串转化为字节文件的方法：&lt;/li&gt;
&lt;/ul&gt;&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;b'123adf':这种方法只能针对数字和字母，默认使用ascii编码，不能转化汉字；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;'123adf'.encode('utf-8):可以转化字母和汉字；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;bytes('我的',encoding='utf-8'):可以转化字母和汉字,但必须 指定编码格式；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;文件的定位读写&quot;&gt;文件的定位读写&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;tell():获取文件指针的位置&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(filename,&lt;span class=&quot;st&quot;&gt;'r'&lt;/span&gt;,encoding&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; f:
    f.read(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
    t &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.tell()  &lt;span class=&quot;co&quot;&gt;# 获取指针的位置,返回3，如果读取到换行符，换行符在windows占两个字节&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;seek(offset,from):设置指针的位置&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;offset:偏移量，设置负数表示向前偏移，正数表示向后偏移，一个汉字占3个字节，字母占一个字节&lt;/li&gt;
&lt;li&gt;from:偏移的方向&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;0:表示文件开头
1:表示当前位置
2:表示文件末尾&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(filename,&lt;span class=&quot;st&quot;&gt;'r'&lt;/span&gt;,encoding&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; f:
    f.read(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
    a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.seek(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# 返回指针定位后的实际位置，默认偏移方向从文件开头算起&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在文本模式下打开文件，偏移方向只能从文件开头算起，参数from只能为0，这是因为文本模式涉及到编码的问题，以二进制格式打开文件就可以设置不同的方向。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;每次打开文件，读操作的指针都是在文件的开头，写操作的指针在文件的末尾，直到文件被关闭；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;几个经典的案例&quot;&gt;几个经典的案例&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;文件同时读写的情况&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'test.txt'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'r+'&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; f:
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.tell())  &lt;span class=&quot;co&quot;&gt;# 当前指针的位置在开头0&lt;/span&gt;
        a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.read(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 指针到了位置3&lt;/span&gt;
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a)
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.tell())
        h &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.write(&lt;span class=&quot;st&quot;&gt;'hhh'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 从文件的末尾写入，相当于追加数据&lt;/span&gt;
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(h)
        c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.tell()  &lt;span class=&quot;co&quot;&gt;# 指针在文件的末尾&lt;/span&gt;
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(c)
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.read())  &lt;span class=&quot;co&quot;&gt;# 读取从位置3到文件原来的末尾的数据&lt;/span&gt;
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.tell())  &lt;span class=&quot;co&quot;&gt;# 当前位置在新的文件末尾和c相同&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;总结：r+模式下，如果同一个文件对象需要读和写，读和写各有一个指针，它们是相互独立的，读写位置各不干扰；但是tell函数获取到的位置优先表示写的位置；即当程序执行时，如果只有读，tell获取的位置是读的位置；如果出现了写，tell获取的位置就一定是写的位置了，无论后面还有没有更多的读操作；同理其他的模式也一样；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;文件同时读写存在偏移的情况&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'test.txt'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'r+'&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; f:
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.tell())  &lt;span class=&quot;co&quot;&gt;# 当前读指针的位置在开头0,写指针还未初始化&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.read(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;))  &lt;span class=&quot;co&quot;&gt;# 读指针到了位置3&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.tell())  &lt;span class=&quot;co&quot;&gt;# 获取到读指针的位置为3&lt;/span&gt;
    f.seek(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 指针偏移到文件的开头,只能影响一个指针&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.read(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;))  &lt;span class=&quot;co&quot;&gt;# 读指针到了位置3&lt;/span&gt;
    h &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.write(&lt;span class=&quot;st&quot;&gt;'gggg'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 增加一个文件描述符，写指针初始化到文件的末尾，写入数据&lt;/span&gt;
    j &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.tell()  &lt;span class=&quot;co&quot;&gt;# 获取写的位置优先，写指针在文件末尾&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(j)
    f.seek(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 指针偏移到文件的开头，读文件的数据更新，加入了写入的数据&lt;/span&gt;
    j &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.tell()  &lt;span class=&quot;co&quot;&gt;# 获取写指针在文件的开头&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(j)
    h &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.write(&lt;span class=&quot;st&quot;&gt;'vvvv'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 从文件开头写入数据，覆盖原来的数据&lt;/span&gt;
    c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.tell()  &lt;span class=&quot;co&quot;&gt;# 获取写指针在文件的位置4&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(c)
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.read(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;))  &lt;span class=&quot;co&quot;&gt;# 读取从位置4往后的4个字符&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.tell())  &lt;span class=&quot;co&quot;&gt;# 读指针在文件8位置&lt;/span&gt;
    h &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; f.write(&lt;span class=&quot;st&quot;&gt;'xxx'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 从文件的末尾写入，相当于追加数据&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.tell())  &lt;span class=&quot;co&quot;&gt;# 当前位置在新的文件末尾&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f.read())  &lt;span class=&quot;co&quot;&gt;# 从8位置读取所有的数据&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;seek()函数只能影响它下面的第一次的读写操作；并且会将上一次写入的数据更新到读缓冲区中；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在r+模式下，write()总是从文件的末尾写入，除非受seek函数的影响；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;write()操作被偏移影响后,其后的read操作的指针会被移到write操作的位置；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;文件同时读写存在且存在更新的情况&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'test.txt'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'r+'&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; f:
        f.read()
        f.seek(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 定位到到文件的开头往右2的位置&lt;/span&gt;
        f.truncate()  &lt;span class=&quot;co&quot;&gt;# 将2位置后所有的数据删除&lt;/span&gt;
        f.write(&lt;span class=&quot;st&quot;&gt;'aaa'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 写入新的数据&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;truncate()：动态删除数据，从当前指针删除后面所有的数据&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;其他方法&quot;&gt;其他方法&lt;/h2&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;flush():刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入,一般close()函数时先调用flush(),然后再关闭文件描述符。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;fileno:返回一个整型的文件描述符,很少用到；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;isatty()：文件是否连接到一个终端的设备；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;truncate()：文件截取，无参数时从当前的指针位置删除后面所有；有参数时从首行首字母截取数据留下来，其余的删除；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 08 Mar 2018 15:41:00 +0000</pubDate>
<dc:creator>天宇之游</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cwp-bg/p/8531588.html</dc:identifier>
</item>
<item>
<title>How to verify Certificate Pinning? - Pieces0310</title>
<link>http://www.cnblogs.com/pieces0310/p/8531567.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pieces0310/p/8531567.html</guid>
<description>&lt;p&gt;&lt;span&gt;Some friends of mine they worry about the risk of Man-in-the-middle so they ask me how to verify the potential risk of some Apps.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Take a popular shopping app “X” for example, If “X” does not meet the requirement of  “Certificate Pinning”,  we could definitely use proxy tool like Burp Suite to intercept any confidential between mobile device and servers.&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Run Burp Suite on my laptop and my laptop becomes a proxy server. (Don’t foreget to change policy of firewall to allow connection to its proxy server listening port.)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Download Certificate from Burp Suite and install this cert file into my mobile phone.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Setup the proxy server ip and port in my mobile phone’s wifi settings.(Of course the ip is my laptop’s ip; the port number is the listening port of proxy server on my laptop)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Make sure Burp suite is ready to intercept packets.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Now we could run this app “X” and start to login. Let’s see what data Burp could intercept. To my surprise “nothing” found in intercept tab.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706830/201803/706830-20180308232813631-889826096.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The “Alert” tab turns orange means something happens. It looks like “X” could meet the requirement of certificate pinning.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706830/201803/706830-20180308232854584-1698878562.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Don’t jump to conclusions too soon. Let’s take a look at account registry. Input some data such as ID, username , password, phone number, e-mail and click “Submit”.  Guess what? Those confidential data being intercepted by Burp suite.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706830/201803/706830-20180308233025074-367121342.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“X” still need to do certificate pinning to avoid the risk of MITM. Now my friends know how to verify certificate pinning by using proxy.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Mar 2018 15:31:00 +0000</pubDate>
<dc:creator>Pieces0310</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pieces0310/p/8531567.html</dc:identifier>
</item>
</channel>
</rss>