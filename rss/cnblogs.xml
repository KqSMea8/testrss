<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>微软工作这二年 - 周见智</title>
<link>http://www.cnblogs.com/xiaozhi_5638/p/8109517.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaozhi_5638/p/8109517.html</guid>
<description>&lt;p&gt;16年元旦顶着大风来北京面试，一天6轮，在回去的高铁上感觉面试可能挂了，一个礼拜后收到了Offer。由于自身各方面的原因，18年元旦，选择离开微软。It is hard to say LEAVE, 这里整理了一下我在微软的两年经历，算是我这两年的总结。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/104032/201712/104032-20171225150811353-538752400.png&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;410&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我眼中的工作环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我没在其他一线互联网公司呆过，我个人觉得微软（北京）的工作环境是相当不错的。公司大楼靠近北四环，丹棱街5号，周边街道基本不怎么堵车，地铁有四号线和十号线，开车的话直接走四环，到亚洲最大的居民区天通苑大约也就40来分钟。&lt;/p&gt;
&lt;p&gt;上下班比较自由，公司没有这方面的考核制度。我一般早上11点到公司，晚上8点离开公司，如果有事就会更晚一点。有的同事下午需要早走，所以上午来得比较早，但是工作时间这些都没有明文规定，各人视情况而定。&lt;/p&gt;
&lt;p&gt;平时如果有什么事情需要请假也比较简单，一般跟leader说一声就行，回头在系统里面补一下即可。每人每年有15天带薪年假，我觉得一般人基本用不完。如果半天的话，大部分都不需要在系统里申请，直接说一下即可。微软关于假期这方面的福利还是比较好的，每人还有3天志愿者假，15天病假，女同事120天产假，男同事有6周的陪产假，没错是陪产假，我前段时间刚修完42天的陪产假。&lt;/p&gt;
&lt;p&gt;公司内部环境不错，比较空旷，各种小的focus room，meeting room，一周七天随时都有保洁在上班，至于免费的水果、饮料这些当然是必备的了，相信一般好点的公司都有这个福利。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我做过的项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在微软呆两年，做过的东西不算少。如果让我给我做过的项目评一个分，10分制的话，大概在6分左右。我觉得我比较客观，不存在我在这里呆过所以吹嘘，也不存在我即将要离开了所以去故意抹黑。&lt;/p&gt;
&lt;p&gt;刚进来的时候做过一段时间的UWP，具体是什么我就不说了。整个team都比较卖力，可能微软上层领导早已看透了一切，早已知道Windows 10 Mobile命数已尽，所以高层老大基本不重视这块的工作。要知道那还是16年初，微软还并没有官方宣布放弃Windows 10 Mobile。当时只有我们Manager支持以及他手下一帮子兄弟在埋头苦干，最终的结果大家都知道了，微软宣布停止更新Windows 10 Mobile。我不知道没有移动端这块，UWP存在还有什么价值，体验不如传统win32，又不能跨平台到Android和iOS。HoloLens、Hub和Xbox？这个用户能有多少？个人以为UWP的初衷是相当好的，只可惜微软并没有翻盘。&lt;/p&gt;
&lt;p&gt;做了差不多四五个月的UWP，16年下半年开始接触Cortana的开发工作。Cortana是Windows 10默认自带的一款智能助手，不知道有多少人用过这个智能助手，认为她到底智不智能。Team大约花了4个月做了一个Vision的feature，大概就是让Cortana不仅能够说、听，还能够看，能够识别图片中的文字信息，自动为你设置提醒，为你安排会议，个人觉得这个feature还是非常实用的。可能你就要问了，这个东西看似很简单，为什么要花这么长时间，因为整个Cortana的代码结构超级复杂，前端涉及到Windows 10操作系统的Code，后台涉及到Bing的Code，你不花个把月根本不清楚你应该动哪块的东西。再加上Cortana整个项目的Owner在美国，你往里面check in一行Code，都得需要别人Review，跨国的开发工作效率尤其低下，这个后面我会说到。由于各种原因，最终这个feature并没有在RS3中对外开放。听说RS4会上？后来我转到其他项目中，所以也就没有再关注这个事情。&lt;/p&gt;
&lt;p&gt;今年5月开始，进了新的项目，也就是我目前正在做的，Edge for Android。当然Edge for iOS也是我们team另外一部分人在做。说它是Edge，其实跟Windows 10上的Edge没有任何关系，Android上是基于Chromium开发的，iOS是基于Control弄的。Android这边的dev最开始大约有16个人，dev全在中国，design在美国，从项目开始到最终Publish一共花了将近6个月的时间。Android版目前可以在Google Play上下载，国内Android市场也有同步过来的，感兴趣的可以下来用用，自认为跟国内几个主流浏览器还是有一定差距。相比前两个项目，可以看到这个项目很受公司重视，所以相对来讲还是比较有前途的。当然还是有几个地方需要吐槽的，公司内部已经吐槽过，所以我把它写在这里：&lt;/p&gt;
&lt;p&gt;1） 公司组织结构太大，一个芝麻小的改动可能涉及到的人全世界都有。沟通全靠邮件，今天发的邮件可能明天后天才能回。因此沟通不畅是经常的事，design改一遍又改一遍很常见；&lt;/p&gt;
&lt;p&gt;2） 由于微软公司的Policy，出于各种Security的考虑，Chromium版本需要不断地升级，从一开始53，5个月的时间连续升级4次一直到63。可以想象，每次merge需要消耗的人力，由此产生的bug又是多少；&lt;/p&gt;
&lt;p&gt;3） 不得不说，微软对App的design真不如国内大厂，UX不够好，不多说了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我对项目的反思&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿着SDE2的钱，操着CVP的心。我这种级别也只够在底层写Code。事实上，大部分都是我这样的人。还是那句话，公司组织结构大，做一件事情牵扯到的人太多。而且不在一个地方，沟通起来相当困难。想象一下，小团队作战，出现一个问题，马上就能面对面开会，可能当天就能高效解决。虽然微软在中国的的研发人数全球第二，但我所在的部门而言，很多东西都没有拿到话语权，国内的团队没有得到美国那边足够的信任。我很肯定的说，我身边的同事都是比较优秀的，Coding Skill、思维以及沟通表达都是超出平均值的。但是就是这么一群人，做出来的东西很多都没能取得成功，作为一个搞技术的，可以想象，做出来的东西没有被认可是一种怎么样的体验。另外，有人的地方就是江湖，哈哈。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我眼中的微软面试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;来微软面试的SDE（据我所知包括SDE1、SDE2以及Senior SDE），面试官基本都只会问你数据结构算法相关的问题，其他的东西几乎不问或者不是Hire你的标准。虽然我理解这其中的原因，一般这种面试如果能过，基本说明这人靠谱。但是，从我微软两年的实际经验来看，招一些熟悉具体技术、业务的人进来或许更适合。我也参加过公司的一些面试，面试官的Feedback中只有以下几项：&lt;/p&gt;
&lt;p&gt;1） Coding Skill. 大概就是让你在纸上写code，比如写一个链表反转，看看怎么样。至于拿什么语言写随意；&lt;/p&gt;
&lt;p&gt;2） Data Structure &amp;amp; Algorithm. 问一些算法数据结构的题目，看你的答案；&lt;/p&gt;
&lt;p&gt;3） OOP &amp;amp; Design Pattern. 问一些常见的OO和设计模式之类的问题;&lt;/p&gt;
&lt;p&gt;4） Hire or No Hire. 要不要你？&lt;/p&gt;
&lt;p&gt;可以看到，面试官的问题跟你申请的职位一点关系都没有，至少从面试官来看是这样的。之前有个Google拒绝Homebrew的作者的新闻，详细可以看这里&lt;a href=&quot;https://www.quora.com/Whats-the-logic-behind-Google-rejecting-Max-Howell-the-author-of-Homebrew-for-not-being-able-to-invert-a-binary-tree/answer/Max-Howell?srid=uYCZ&quot; target=&quot;_blank&quot;&gt;作者本人的回答&lt;/a&gt;。 可以看到，算法、软件工程以及产品之间的不同。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于离职&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择一个公司，我觉得应该全方位去考虑，不仅仅是能做的项目，其他比如待遇、文化、发展、福利以及自身条件限制等等。综合来看，我呆过的部门还是不错的，我之所以选择离开，完全出于自身原因。在北京的同学，如果有希望加入微软的，还是不错的选择。也非常感谢我来微软的第一任Manager，是他招我进来，在我离开的时候，又非常热心地托人给我在武汉介绍新的工作，哈哈。感谢微软，加入微软也是我学生时代的梦想。希望以上这些对想加入微软的同学有帮助。&lt;/p&gt;

</description>
<pubDate>Mon, 25 Dec 2017 07:26:00 +0000</pubDate>
<dc:creator>周见智</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaozhi_5638/p/8109517.html</dc:identifier>
</item>
<item>
<title>前端MVC Vue2学习总结（一）——MVC与vue2概要、模板、数据绑定与综合示例 - 张果</title>
<link>http://www.cnblogs.com/best/p/8109600.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/best/p/8109600.html</guid>
<description>&lt;h2&gt;1.1、库与框架的区别&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161225225352886-1700108308.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;框架是一个软件的半成品，在全局范围内给了大的约束。库是工具，在单点上给我们提供功能。框架是依赖库的。Vue是框架而jQuery则是库。&lt;/p&gt;
&lt;h2&gt;1.2、AMD与CMD&lt;/h2&gt;
&lt;p&gt;在传统的非模块化JavaScript开发中有许多问题：命名冲突、文件依赖、跨环境共享模块、性能优化、职责单一、模块的版本管理、jQuery等前端库层出不穷，前端代码日益膨胀&lt;/p&gt;
&lt;p&gt;AMD规范及其代表：RequireJS&lt;br/&gt;异步模块定义（Asynchronous Module Definition），它是依赖前置 (因为依赖必须一开始就写好)会先尽早地执行(依赖)模块 , 相当于所有的require都被提前了&lt;/p&gt;
&lt;p&gt;CMD规范及其代表：SeaJS&lt;br/&gt;（Common Module Definition）模块定义规范&lt;br/&gt;一个模块就是一个文件；它推崇依赖就近想什么时候require就什么时候加载，实现了 懒加载， 延迟执行 (as lazy as possible)&lt;/p&gt;
&lt;h2&gt;1.2、前端MVC概要&lt;/h2&gt;
&lt;p&gt;MVC的核心理念是：你应该把管理数据的代码（Model）、业务逻辑的代码（Controller）、以及向用户展示数据的代码（View）清晰的分离开&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;模型：代表应用当前的状态&lt;/li&gt;
&lt;li&gt;视图：用于展示数据，用于接口&lt;/li&gt;
&lt;li&gt;控制器：用来管理模型和视图之间的关系&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161225225620792-1636001245.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过MVC框架又衍生出了许多其它的架构，统称MV*，最常见的是MVP与MVVM&lt;/p&gt;
&lt;p&gt;MVVM（Model-View-ViewModel）框架的由来便是MVP（Model-View-Presenter）模式与WPF结合的应用方式时发展演变过来的一种新型架构框架。&lt;/p&gt;
&lt;p&gt;Vue与Angular就是一个MVVM框架，MVVM与MVC最大的区别是模型与视图实现了双向绑定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222123309740-831987773.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.3、React&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161225225803870-1863849821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。支持虚拟DOM（Virtual DOM）和组件化的开发。&lt;/p&gt;
&lt;p&gt;ReactJS官网地址： &lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot;&gt;http://facebook.github.io/react/&lt;/a&gt;&lt;br/&gt;Github地址： &lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot;&gt;https://github.com/facebook/react&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1.4、AngularJS简介&lt;/h2&gt;
&lt;p&gt;AngularJS是一个前端MVVM框架。&lt;/p&gt;
&lt;p&gt;angular的英文字面意思是：有角的; 用角测量的&lt;/p&gt;
&lt;p&gt;AngularJS是协助搭建单页面工程（SPA）的开源前端框架。它通过MVC模式使得开发与测试变得更容易。&lt;/p&gt;
&lt;p&gt;AngularJS试图成为WEB应用中的一种端对端的解决方案。它将指导开发整个应用。&lt;/p&gt;
&lt;p&gt;AngularJS于2009年发布第一个版本，由Google进行维护，压缩版94k。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161225231206932-2122860141.png&quot; alt=&quot;&quot; width=&quot;226&quot; height=&quot;226&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.3版后不再支持IE8&lt;br/&gt;1.3版后不支持全局控制器&lt;br/&gt;2.0版 alpha&lt;/p&gt;
&lt;p&gt;git仓库： &lt;a href=&quot;https://github.com/angular/&quot; target=&quot;_blank&quot;&gt;https://github.com/angular/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网： &lt;a href=&quot;https://www.angularjs.org/&quot; target=&quot;_blank&quot;&gt;https://www.angularjs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;http://www.angularjs.cn/中文社区&lt;/p&gt;
&lt;p&gt;http://www.apjs.net/ 中文网&lt;/p&gt;
&lt;p&gt;a web framework for modern web apps&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161225231155745-983644604.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.5、Vue.js&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161225230059667-596669627.png&quot; alt=&quot;&quot; width=&quot;238&quot; height=&quot;203&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Vue.js是一个轻巧、高性能、可组件化的MVVM库，同时拥有非常容易上手的API，作者是尤雨溪是中国人。&lt;/p&gt;
&lt;p&gt;官网： &lt;a href=&quot;http://cn.vuejs.org/&quot; target=&quot;_blank&quot;&gt;http://cn.vuejs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仓库： &lt;a href=&quot;https://github.com/vuejs&quot; target=&quot;_blank&quot;&gt;https://github.com/vuejs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222134343537-1595876250.png&quot; alt=&quot;&quot; width=&quot;545&quot; height=&quot;277&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;易用&lt;/strong&gt;&lt;br/&gt;已经会了HTML,CSS,JavaScript？即刻阅读指南开始构建应用！&lt;br/&gt;&lt;strong&gt;灵活&lt;/strong&gt;&lt;br/&gt;简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。&lt;br/&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;br/&gt;17kb min+gzip 运行大小、超快虚拟 DOM 、最省心的优化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当前三大前端MVC框架的对比：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222123023834-916052736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222134239178-200663056.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;259&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;1.5.1、Vue2.JS简介&lt;/h3&gt;
&lt;p&gt;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与 &lt;a href=&quot;https://cn.vuejs.org/v2/guide/single-file-components.html&quot;&gt;现代化的工具链&lt;/a&gt;以及各种 &lt;a href=&quot;https://github.com/vuejs/awesome-vue#libraries--plugins&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;支持类库&lt;/a&gt;结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;
&lt;p&gt;如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看 &lt;a href=&quot;https://cn.vuejs.org/v2/guide/comparison.html&quot;&gt;对比其它框架&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;不适合SEO、交互频繁的，如游戏之类交互体验网站&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161225231347839-751417189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;浏览器支持：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222124347709-2139484943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Vue.js 不支持 IE8 及其以下版本，因为 Vue.js 使用了 IE8 不能模拟的 ECMAScript 5 特性。Vue.js 支持所有 &lt;a href=&quot;http://caniuse.com/#feat=es5&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;兼容 ECMAScript 5 的浏览器&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;1.6、vue2入门示例&lt;/h2&gt;
&lt;p&gt;文章中的许多内容都是来自vue官网，因为没有其它更加合适的教程。&lt;/p&gt;
&lt;h3&gt;1.6.1、获取vue2&lt;/h3&gt;
&lt;p&gt;如果要开发基于angularJS的项目，则先要添加对angularJS的引用，有如下几个方法：&lt;/p&gt;
&lt;p&gt;1)、去vue2官网或git下载，地址： &lt;a href=&quot;https://github.com/vuejs/vue&quot; target=&quot;_blank&quot;&gt;https://github.com/vuejs/vue&lt;/a&gt; &lt;a href=&quot;https://github.com/angular/&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2)、使用cdn&lt;/p&gt;
&lt;p&gt;3)、安装node.js，使用npm获取&lt;/p&gt;
&lt;p&gt;具体的安装细节： &lt;a href=&quot;https://cn.vuejs.org/v2/guide/installation.html&quot; target=&quot;_blank&quot;&gt;https://cn.vuejs.org/v2/guide/installation.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在本文的示例中已经包含了运行环境与帮助文件chm&lt;/p&gt;
&lt;h3&gt;1.6.2、声明式渲染&lt;/h3&gt;
&lt;p&gt;Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;vue2介绍&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            {{message}}
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-bind:title&lt;/span&gt;&lt;span&gt;=&quot;message&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                把鼠标放到这里试试
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;vue应用对象&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    message: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello Vue2!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定属性&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    message: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;页面加载时间是：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().toLocaleDateString()
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222151557975-1484606083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我们遇到了一点新东西。你看到的 &lt;code&gt;v-bind&lt;/code&gt; 特性被称为指令。指令带有前缀 &lt;code&gt;v-&lt;/code&gt;，以表示它们是 Vue 提供的特殊特性。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 &lt;code&gt;title&lt;/code&gt; 特性和 Vue 实例的 &lt;code&gt;message&lt;/code&gt; 属性保持一致”。&lt;/p&gt;
&lt;p&gt;如果你再次打开浏览器的 JavaScript 控制台，输入 &lt;code&gt;app2.message = '新消息'&lt;/code&gt;，就会再一次看到这个绑定了 &lt;code&gt;title&lt;/code&gt; 特性的 HTML 已经进行了更新。&lt;/p&gt;
&lt;p&gt;我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 &lt;code&gt;app.message&lt;/code&gt; 的值，你将看到上例相应地更新。&lt;/p&gt;
&lt;h3&gt; 1.6.3、条件与循环&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;vue2介绍&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;isShow&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                isShow为true时你可以看到我
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;isShow&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;50%&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;序号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;名称&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;价格&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;(obj,index) in fruits&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{index+1}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{obj.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{obj.price}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;if指令&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app3 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    isShow: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
                }
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环指令&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app4 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    isShow:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    fruits: [{
                        name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;苹果&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        price: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6.8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }, {
                        name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;橙子&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        price: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }, {
                        name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;香蕉&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        price: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }]
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222152804615-468912091.png&quot; alt=&quot;&quot; width=&quot;599&quot; height=&quot;176&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个例子演示了我们不仅可以把数据绑定到 DOM 文本或特性，还可以绑定到 DOM 结构。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用 &lt;a href=&quot;https://cn.vuejs.org/v2/guide/transitions.html&quot;&gt;过渡效果&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;1.6.4、事件、处理用户输入与计算&lt;/h3&gt;
&lt;p&gt;为了让用户和你的应用进行交互，我们可以用 v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;vue2介绍&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;v-on:click&lt;/span&gt;&lt;span&gt;=&quot;showMe&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{message}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;message&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;v-on:click&lt;/span&gt;&lt;span&gt;=&quot;n1+=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;+&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;n1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;+    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;n2&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;=    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;sum&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;事件&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app5 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    message:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vue2事件&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                },
                methods:{
                    showMe:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.message&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.message.split(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;).reverse().join(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
                    }
                }
            });
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;计算&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app6 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    n1:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                    n2:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
                },
                computed:{
                    sum:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; parseInt(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n1)&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;parseInt(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n2);
                    }
                }
            });
            

        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222160554584-1149451051.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意在 showMe方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注逻辑层面即可。&lt;br/&gt;Vue 还提供了 v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定。&lt;/p&gt;

&lt;p&gt;组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cn.vuejs.org/images/components.png&quot; alt=&quot;Component Tree&quot; width=&quot;987&quot; height=&quot;382&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.1、普通组件&lt;/h2&gt;
&lt;p&gt;在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义名为 todo-item 的新组件&lt;/span&gt;
Vue.component('todo-item'&lt;span&gt;, {
  template: &lt;/span&gt;'&amp;lt;li&amp;gt;这是个待办项&amp;lt;/li&amp;gt;'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在你可以用它构建另一个组件模板：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 创建一个 todo-item 组件的实例 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;vue2介绍&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;todo-item &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;item in items&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在vue中添加一个名为todo-item组件&lt;/span&gt;
&lt;span&gt;            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{
                template:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;li&amp;gt;这是一个li单项&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            });
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构件&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data:{
                    items:[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;]
                }
            });
            
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171225093023647-272825347.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.2、带属性的组件&lt;/h2&gt;
&lt;p&gt;但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个  &lt;a href=&quot;https://cn.vuejs.org/v2/guide/components.html#Props&quot;&gt;prop&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Vue.component('todo-item'&lt;span&gt;, {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; todo-item 组件现在接受一个&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;prop&quot;，类似于一个自定义特性。&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个 prop 名为 todo。&lt;/span&gt;
  props: ['todo'&lt;span&gt;],
  template: &lt;/span&gt;'&amp;lt;li&amp;gt;{{ todo.text }}&amp;lt;/li&amp;gt;'&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，我们可以使用 &lt;code&gt;v-bind&lt;/code&gt; 指令将待办项传到循环输出的每个组件中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app-7&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
      现在我们为每个 todo-item 提供 todo 对象
      todo 对象是变量，即其内容可以是动态的。
      我们也需要为每个组件提供一个“key”，稍后再
      作详细解释。
    &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;todo-item
      &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;item in groceryList&quot;&lt;/span&gt;&lt;span&gt;
      v-bind:todo&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt;
      v-bind:key&lt;/span&gt;&lt;span&gt;=&quot;item.id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;js:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
Vue.component('todo-item'&lt;span&gt;, {
  props: [&lt;/span&gt;'todo'&lt;span&gt;],
  template: &lt;/span&gt;'&amp;lt;li&amp;gt;{{ todo.text }}&amp;lt;/li&amp;gt;'&lt;span&gt;
})

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app7 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#app-7'&lt;span&gt;,
  data: {
    groceryList: [
      { id: &lt;/span&gt;0, text: '蔬菜'&lt;span&gt; },
      { id: &lt;/span&gt;1, text: '奶酪'&lt;span&gt; },
      { id: &lt;/span&gt;2, text: '随便其它什么人吃的东西'&lt;span&gt; }
    ]
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;.蔬菜
&lt;/span&gt;2&lt;span&gt;.奶酪
&lt;/span&gt;3.随便其它什么人吃的东西
&lt;/pre&gt;&lt;/div&gt;
&lt;div id=&quot;app-7&quot; class=&quot;demo&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;vue2介绍&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;todo-item &lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;=&quot;Hello Component&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;student-item &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;item in students&quot;&lt;/span&gt;&lt;span&gt; v-bind:stu&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt; v-bind:key&lt;/span&gt;&lt;span&gt;=&quot;item.name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;student-item&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在vue中添加一个名为todo-item组件&lt;/span&gt;
&lt;span&gt;            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{
                props:[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vtitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
                template:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;li&amp;gt;{{info||'empty'}}&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            });
            
            Vue.component(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;student-item&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{
                props:[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
                template:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;li&amp;gt;{{stu.name}} - {{stu.age}}&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            });
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构件&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data:{
                    students:[
                        {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;},{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rose&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;},{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lucy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;}
                    ]
                }
            });
            
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171225095003116-1928767750.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;尽管这只是一个刻意设计的例子，但是我们已经设法将应用分割成了两个更小的单元。子单元通过 prop 接口与父单元进行了良好的解耦。我们现在可以进一步改进 &lt;code&gt;&amp;lt;todo-item&amp;gt;&lt;/code&gt; 组件，提供更为复杂的模板和逻辑，而不会影响到父单元。&lt;/p&gt;
&lt;p&gt;在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2.3、与自定义元素的关系&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;你可能已经注意到 Vue 组件非常类似于自定义元素——它是  &lt;a href=&quot;https://www.w3.org/wiki/WebComponents/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Web 组件规范&lt;/a&gt;的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了  &lt;a href=&quot;https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Slot API&lt;/a&gt; 与 &lt;code&gt;is&lt;/code&gt; 特性。但是，还是有几个关键差别：&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Web 组件规范仍然处于草案阶段，并且未被所有浏览器原生实现。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过一个综合示例来快速了解Vue2，会使用到模板、过滤器、计算，表达式、组件等等，要求实现一个简单的购物车，运行时的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171225110531381-38195394.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 参考代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;购物车&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            .bg&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;dodgerblue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;购物车&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; cellspacing&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; cellpadding&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; width&lt;/span&gt;&lt;span&gt;=&quot;100%&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;序号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;名称&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;单价&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;数量&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;小计&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;(pdt,index) in products&quot;&lt;/span&gt;&lt;span&gt; v-bind:class&lt;/span&gt;&lt;span&gt;=&quot;{bg:index%2==0}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{index+1}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{pdt.title}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{pdt.price}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; v-on:click&lt;/span&gt;&lt;span&gt;=&quot;pdt.quantity&amp;lt;=0?0:(pdt.quantity-=1)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;-&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;pdt.quantity&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;width: 80px;&quot;&lt;/span&gt;&lt;span&gt; v-on:keyup&lt;/span&gt;&lt;span&gt;=&quot;pdt.quantity=(pdt.quantity&amp;lt;0?0:pdt.quantity)&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; v-on:click&lt;/span&gt;&lt;span&gt;=&quot;pdt.quantity+=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;+&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{pdt.quantity*pdt.price | currency(1)}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; v-on:click&lt;/span&gt;&lt;span&gt;=&quot;remove(index)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;移除&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td &lt;/span&gt;&lt;span&gt;colspan&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt; align&lt;/span&gt;&lt;span&gt;=&quot;right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {{total|currency}}
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../js/vue.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            Vue.filter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;currency&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(v, n) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;v) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;￥&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; v.toFixed(n &lt;/span&gt;&lt;span&gt;||&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
            });
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; app1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
                el: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#app1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data: {
                    orderby:&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                    isAsc:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    products: [{
                        title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;paint pot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        quantity: &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;,
                        price: &lt;/span&gt;&lt;span&gt;3.95&lt;/span&gt;&lt;span&gt;
                    }, {
                        title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;polka dots&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        quantity: &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;,
                        price: &lt;/span&gt;&lt;span&gt;12.3&lt;/span&gt;&lt;span&gt;
                    }, {
                        title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pebbles&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        quantity: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
                        price: &lt;/span&gt;&lt;span&gt;6.71&lt;/span&gt;&lt;span&gt;
                    }, {
                        title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mi Note5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        quantity: &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
                        price: &lt;/span&gt;&lt;span&gt;2985.6&lt;/span&gt;&lt;span&gt;
                    }, {
                        title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iPhone XS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        quantity: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                        price: &lt;/span&gt;&lt;span&gt;8906.72&lt;/span&gt;&lt;span&gt;
                    }]
                },
                computed: {
                    total: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; sum &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.products.length; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {
                            sum &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.products[i].price &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.products[i].quantity);
                        }
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum;
                    }
                },
                methods:{
                    remove:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(i){
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(confirm(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;您确定要移除吗？&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)){
                            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.products.splice(i,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                        }
                    }
                }
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 思考：如果这里还要实现排序应该怎样做？&lt;/p&gt;

&lt;p&gt;因为上面的示例中需要用到对象数组与排序，这里单独讲讲：&lt;/p&gt;
&lt;h2&gt;4.1、创建&lt;/h2&gt;
&lt;p&gt;var arrayObj = new Array();&lt;br/&gt;var arrayObj = new Array([size]);&lt;br/&gt;var arrayObj = new Array([element0[, element1[, ...[, elementN]]]]);&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; array11 = &lt;span&gt;new&lt;/span&gt; Array();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;空数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array12 = &lt;span&gt;new&lt;/span&gt; Array(5);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定长度，可越界&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array13 = &lt;span&gt;new&lt;/span&gt; Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,1,2,3,&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;false&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义并赋值&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array14=[];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;空数组，语法糖&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array15=[1,2,3,&quot;x&quot;,&quot;y&quot;];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义并赋值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.2、访问与修改&lt;/h2&gt;
&lt;p&gt;var testGetArrValue=arrayObj[1]; &lt;/p&gt;
&lt;p&gt;arrayObj[1]= &quot;值&quot;;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.2、访问与修改&lt;/span&gt;
            array12[8]=&quot;hello array12&quot;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;赋值或修改&lt;/span&gt;
            console.log(array12[8]);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取值&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; array13.length; i++&lt;span&gt;) {
                console.log(&lt;/span&gt;&quot;arrayl3[&quot;+i+&quot;]=&quot;+&lt;span&gt;array13[i]);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;枚举&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; array15){ 
                console.log(i&lt;/span&gt;+&quot;=&quot;+array15[i]);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处的i是下标&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161227104548070-562630450.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.3、添加元素&lt;/h2&gt;
&lt;p&gt;将一个或多个新元素添加到数组&lt;span&gt;未尾&lt;/span&gt;，并返回数组新长度&lt;/p&gt;
&lt;p&gt;arrayObj. push([item1 [item2 [. . . [itemN ]]]]);&lt;/p&gt;
&lt;p&gt;将一个或多个新元素添加到数组&lt;span&gt;开始&lt;/span&gt;，数组中的元素自动后移，返回数组新长度&lt;/p&gt;
&lt;p&gt;arrayObj.unshift([item1 [item2 [. . . [itemN ]]]]);&lt;/p&gt;
&lt;p&gt;将一个或多个新元素插入到数组的&lt;span&gt;指定位置&lt;/span&gt;，插入位置的元素自动后移，返回被删除元素数组，deleteCount要删除的元素个数&lt;/p&gt;
&lt;p&gt;arrayObj.splice(insertPos,deleteCount,[item1[, item2[, . . . [,itemN]]]])&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.3、添加元素&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array31=[5,8&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到末尾&lt;/span&gt;
            array31.push(9&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; len=array31.push(10,11&lt;span&gt;);
            console.log(&lt;/span&gt;&quot;长度为：&quot;+len+&quot;——&quot;+&lt;span&gt;array31);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到开始&lt;/span&gt;
            array31.unshift(4&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; len=array31.unshift(1,2,3&lt;span&gt;);
            console.log(&lt;/span&gt;&quot;长度为：&quot;+len+&quot;——&quot;+&lt;span&gt;array31);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到中间&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; len=array31.splice(5,1,6,7);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从第5位开始插入，删除第5位后的1个元素，返回被删除元素&lt;/span&gt;
            console.log(&quot;被删除：&quot;+len+&quot;——&quot;+array31);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161227105906867-1460931226.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.4、删除&lt;/h2&gt;
&lt;p&gt;移除&lt;span&gt;最后&lt;/span&gt;一个元素并返回该元素值&lt;/p&gt;
&lt;p&gt;arrayObj.pop();&lt;/p&gt;
&lt;p&gt;移除&lt;span&gt;最前&lt;/span&gt;一个元素并返回该元素值，数组中元素自动前移&lt;/p&gt;
&lt;p&gt;arrayObj.shift(); &lt;/p&gt;
&lt;p&gt;删除从&lt;span&gt;指定位置&lt;/span&gt;deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素&lt;/p&gt;
&lt;p&gt;arrayObj.splice(deletePos,deleteCount); &lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.4、删除&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array41=[1,2,3,4,5,6,7,8&lt;span&gt;];
            console.log(&lt;/span&gt;&quot;array41：&quot;+&lt;span&gt;array41);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除最后一个元素，并返回&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; e=&lt;span&gt;array41.pop();
            console.log(&lt;/span&gt;&quot;被删除：&quot;+e+&quot;——&quot;+&lt;span&gt;array41);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除首部元素，并返回&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; e=&lt;span&gt;array41.shift();
            console.log(&lt;/span&gt;&quot;被删除：&quot;+e+&quot;——&quot;+&lt;span&gt;array41);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除指定位置与个数&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; e=array41.splice(1,4);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从索引1开始删除4个&lt;/span&gt;
            console.log(&quot;被删除：&quot;+e+&quot;——&quot;+array41);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161227110548492-1666959205.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.5、截取和合并&lt;/h2&gt;
&lt;p&gt;以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素&lt;/p&gt;
&lt;p&gt;arrayObj.slice(start, [end]); &lt;/p&gt;
&lt;p&gt;将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组&lt;/p&gt;
&lt;p&gt;arrayObj.concat([item1[, item2[, . . . [,itemN]]]]); &lt;/p&gt;
&lt;p&gt;示例： &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.5、截取和合并&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array51=[1,2,3,4,5,6&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; array52=[7,8,9,0,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;截取，切片&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array53=array51.slice(2);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从第3个元素开始截取到最后&lt;/span&gt;
            console.log(&quot;被截取：&quot;+array53+&quot;——&quot;+&lt;span&gt;array51);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; array54=array51.slice(1,4);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从第3个元素开始截取到索引号为3的元素&lt;/span&gt;
            console.log(&quot;被截取：&quot;+array54+&quot;——&quot;+&lt;span&gt;array51);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array55=array51.concat(array52,[&quot;d&quot;,&quot;e&quot;],&quot;f&quot;,&quot;g&quot;&lt;span&gt;);
            console.log(&lt;/span&gt;&quot;合并后：&quot;+array55);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161227111518648-1646190534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.6、拷贝&lt;/h2&gt;
&lt;p&gt;返回数组的拷贝数组，注意是一个新的数组，不是指向&lt;/p&gt;
&lt;p&gt;arrayObj.slice(0); &lt;/p&gt;
&lt;p&gt;返回数组的拷贝数组，注意是一个新的数组，不是指向&lt;/p&gt;
&lt;p&gt;arrayObj.concat(); &lt;/p&gt;
&lt;p&gt;因为数组是引用数据类型，直接赋值并没有达到真正实现拷贝，地址引用，我们需要的是深拷贝。&lt;/p&gt;
&lt;h2&gt;4.7、排序&lt;/h2&gt;
&lt;p&gt;反转元素（最前的排到最后、最后的排到最前），返回数组地址&lt;/p&gt;
&lt;p&gt;arrayObj.reverse(); &lt;/p&gt;
&lt;p&gt;对数组元素排序，返回数组地址&lt;/p&gt;
&lt;p&gt;arrayObj.sort(); &lt;/p&gt;
&lt;p&gt;arrayObj.sort(function(obj1,obj2){}); &lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; array71=[4,5,6,1,2,3&lt;span&gt;];
            array71.sort();
            console.log(&lt;/span&gt;&quot;排序后：&quot;+&lt;span&gt;array71);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; array72=[{name:&quot;tom&quot;,age:19},{name:&quot;jack&quot;,age:20},{name:&quot;lucy&quot;,age:18&lt;span&gt;}];
            array72.sort(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(user1,user2){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; user1.age&amp;lt;&lt;span&gt;user2.age;
            });
            console.log(&lt;/span&gt;&quot;排序后：&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; array72) console.log(array72[i].name+&quot;，&quot;+array72[i].age);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161227113238617-2035497756.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.8、合并成字符&lt;/h2&gt;
&lt;p&gt;返回字符串，这个字符串将数组的每一个元素值连接在一起，中间用 separator 隔开。&lt;/p&gt;
&lt;p&gt;arrayObj.join(separator); &lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.8、合并成字符与将字符拆分成数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; array81=[1,3,5,7,9&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ids=array81.join(&quot;,&quot;&lt;span&gt;);
            console.log(ids);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拆分成数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; text=&quot;hello nodejs and angular&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; array82=text.split(&quot; &quot;&lt;span&gt;);
            console.log(array82);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161228145536570-2066558419.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c1548d13-ada4-439d-a638-a5be3613f8c8')&quot; readability=&quot;61.5&quot;&gt;&lt;img id=&quot;code_img_closed_c1548d13-ada4-439d-a638-a5be3613f8c8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c1548d13-ada4-439d-a638-a5be3613f8c8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c1548d13-ada4-439d-a638-a5be3613f8c8',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c1548d13-ada4-439d-a638-a5be3613f8c8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;118&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;数组操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.1、创建&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array11 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;空数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array12 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定长度，可越界&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array13 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义并赋值&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array14&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[];  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;空数组，语法糖&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array15&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义并赋值&lt;/span&gt;
            
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.2、访问与修改&lt;/span&gt;
&lt;span&gt;            array12[&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello array12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;赋值或修改&lt;/span&gt;
&lt;span&gt;            console.log(array12[&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;]);   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取值&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; array13.length; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(&quot;arrayl3[&quot;+i+&quot;]=&quot;+array13[i]);&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;枚举&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; array15){ 
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(i+&quot;=&quot;+array15[i]);  //此处的i是下标&lt;/span&gt;
&lt;span&gt;            }
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.3、添加元素&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array31&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到末尾&lt;/span&gt;
&lt;span&gt;            array31.push(&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; len&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array31.push(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;);
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;长度为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;len&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array31);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到开始&lt;/span&gt;
&lt;span&gt;            array31.unshift(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; len&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array31.unshift(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;长度为：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;len&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array31);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到中间&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; len&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array31.splice(&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从第5位开始插入，删除第5位后的1个元素，返回被删除元素&lt;/span&gt;
&lt;span&gt;            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;被删除：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;len&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array31);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.4、删除&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array41&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;array41：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array41);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除最后一个元素，并返回&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array41.pop();
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;被删除：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array41);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除首部元素，并返回&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array41.shift();
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;被删除：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array41);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除指定位置与个数&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; e&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array41.splice(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从索引1开始删除4个&lt;/span&gt;
&lt;span&gt;            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;被删除：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array41);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.5、截取和合并&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array51&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; array52&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;截取，切片&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array53&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array51.slice(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从第3个元素开始截取到最后&lt;/span&gt;
&lt;span&gt;            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;被截取：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array53&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array51);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; array54&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array51.slice(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从第3个元素开始截取到索引号为3的元素&lt;/span&gt;
&lt;span&gt;            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;被截取：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array54&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array51);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array55&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array51.concat(array52,[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;合并后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array55);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.7、排序&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array71&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;];
            array71.sort();
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;排序后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array71);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; array72&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[{name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,age:&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;&lt;span&gt;},{name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jack&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,age:&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;},{name:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lucy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,age:&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;}];
            array72.sort(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(user1,user2){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; user1.age&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;user2.age;
            });
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;排序后：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; array72) console.log(array72[i].name&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;array72[i].age);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.8、合并成字符与将字符拆分成数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; array81&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; ids&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;array81.join(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            console.log(ids);
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拆分成数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; text&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello nodejs and angular&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; array82&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;text.split(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            console.log(array82);
            
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;5.1、概要&lt;/h2&gt;
&lt;p&gt;javascript内置的sort函数是多种排序算法的集合，数组在原数组上进行排序，不生成副本。&lt;/p&gt;
&lt;p&gt;JavaScript实现多维数组、对象数组排序，其实用的就是原生的sort()方法，用于对数组的元素进行排序。&lt;/p&gt;
&lt;p&gt;sort() 方法用于对数组的元素进行排序。语法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ArrayObject.sort(order); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回值为对数组的引用&lt;/p&gt;
&lt;h2&gt;5.2、简单排序&lt;/h2&gt;
&lt;p&gt;如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;排序&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; numbers&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
            numbers.sort();
            console.log(numbers.join(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认按升序排列&lt;/span&gt;
&lt;span&gt;            numbers.reverse();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;反转&lt;/span&gt;
&lt;span&gt;            console.log(numbers.join(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将元素用逗号连接成一个字符串&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/63651/201712/63651-20171225135738728-2109847794.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5.3、简单数组自定义排序&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
默认升序： &lt;br/&gt;a&amp;gt;b 返回1&lt;br/&gt;a=b 返回0&lt;br/&gt;a&amp;lt;b 返回-1
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：a&amp;gt;b 升序，a&amp;lt;b降序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;排序&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; numbers&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当a&amp;gt;b的结果为正数时则为升序&lt;/span&gt;
&lt;span&gt;            numbers.sort(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(a,b){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;b){&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;}
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(a&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;b){&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;}
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            });
            console.log(numbers.join(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;简化，注意类型&lt;/span&gt;
&lt;span&gt;            numbers.sort(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(a,b){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; a&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;b;
            });
            console.log(numbers.join(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;降序&lt;/span&gt;
&lt;span&gt;            numbers.sort(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(a,b){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;a;
            });
            console.log(numbers.join(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/63651/201712/63651-20171225140737822-1513939860.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5.4、简单对象List自定义属性排序&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;排序&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; pdts &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [{
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;z-paint pot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;3.95&lt;/span&gt;&lt;span&gt;
            },{
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iPhone XS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;8906.72&lt;/span&gt;&lt;span&gt;
            },{
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;polka dots&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;12.3&lt;/span&gt;&lt;span&gt;
            }, {
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pebbles&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;6.71&lt;/span&gt;&lt;span&gt;
            }, {
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mi Note5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;2985.6&lt;/span&gt;&lt;span&gt;
            }];
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按价格升序&lt;/span&gt;
&lt;span&gt;            pdts.sort(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(x,y){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; x.price&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;y.price;
            });
            document.write(JSON.stringify(pdts));
            
            document.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按名称排序&lt;/span&gt;
&lt;span&gt;            pdts.sort(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(x,y){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(x.title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;y.title) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(x.title&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;y.title) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            });
            document.write(JSON.stringify(pdts));
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/63651/201712/63651-20171225141657619-599100554.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5.5、封装通用的排序函数&lt;/h2&gt;
&lt;p&gt;如果排序的条件要不断变化，将反复写简单的排序函数，封装可以带来方便：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;排序&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; pdts &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [{
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;z-paint pot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;3.95&lt;/span&gt;&lt;span&gt;
            }, {
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iPhone XS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;8906.72&lt;/span&gt;&lt;span&gt;
            }, {
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;polka dots&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;12.3&lt;/span&gt;&lt;span&gt;
            }, {
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pebbles&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;6.71&lt;/span&gt;&lt;span&gt;
            }, {
                title: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mi Note5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                quantity: &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
                price: &lt;/span&gt;&lt;span&gt;2985.6&lt;/span&gt;&lt;span&gt;
            }];
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据排序关键字与是否为升序产生排序方法&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; sortExp &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(key, isAsc) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(x, y) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(isNaN(x[key])) { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果当前排序的不是数字&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(x[key] &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; y[key]) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;(isAsc&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(x[key] &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; y[key]) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;(isAsc&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (x[key]&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;y[key])&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;(isAsc&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                    }
                }
            };

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按价格升序&lt;/span&gt;
&lt;span&gt;            pdts.sort(sortExp(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
            document.write(JSON.stringify(pdts));
            document.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br/&amp;gt;------------------------------&amp;lt;br/&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            pdts.sort(sortExp(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;));
            document.write(JSON.stringify(pdts));
            document.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br/&amp;gt;------------------------------&amp;lt;br/&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            pdts.sort(sortExp(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
            document.write(JSON.stringify(pdts));
            document.write(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;br/&amp;gt;------------------------------&amp;lt;br/&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            pdts.sort(sortExp(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;));
            document.write(JSON.stringify(pdts));
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/63651/201712/63651-20171225143235150-1861390527.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当使用 Vue 时，我们推荐同时在你的浏览器上安装 Vue Devtools，它允许你在一个更加友善的界面中审查和调试你的 Vue 应用。&lt;/p&gt;
&lt;p&gt;Vue Devtools是一个内嵌在Google Chrome浏览器中的插件，用于更好的调试Vue应用程序&lt;/p&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://github.com/vuejs/vue-devtools#vue-devtools&quot; target=&quot;_blank&quot;&gt;https://github.com/vuejs/vue-devtools#vue-devtools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载：&lt;a href=&quot;https://files.cnblogs.com/files/best/vuetools_316.zip&quot; target=&quot;_blank&quot;&gt;https://files.cnblogs.com/files/best/vuetools_316.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装方法：&lt;/p&gt;
&lt;p&gt;下载后解压，在chrome地址栏中输入：chrome://extensions/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/63651/201712/63651-20171225145600665-2123726076.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;直接将crx文件插入浏览器，确认就安装成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/63651/201712/63651-20171225145703165-1804120831.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;插件会自动检测当前是否使用了vue，如果使用了图标会亮起，在开发者工具中有一个调试界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/63651/201712/63651-20171225145931587-1906450512.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;a)、请实现一个购物车&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、双向绑定集合中的数据&lt;/li&gt;
&lt;li&gt;2、执行移除事件&lt;/li&gt;
&lt;li&gt;3、隔行换色、使用vue2完成&lt;/li&gt;
&lt;li&gt;4、点击数量与小计时进行排序（选作）&lt;/li&gt;
&lt;li&gt;5、实现实时统计功能&lt;/li&gt;
&lt;li&gt;6、实现添加与编辑功能&lt;/li&gt;
&lt;li&gt;7、实现排序功能&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/63651/201612/63651-20161226160123773-1014108052.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;296&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/63651/201712/63651-20171222161230600-1542628200.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git.coding.net/zhangguo5/vue2.git&quot; target=&quot;_blank&quot;&gt;https://git.coding.net/zhangguo5/vue2.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av17503637/&quot; target=&quot;_blank&quot;&gt;https://www.bilibili.com/video/av17503637/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 07:26:00 +0000</pubDate>
<dc:creator>张果</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/best/p/8109600.html</dc:identifier>
</item>
<item>
<title>在Laravel中使用swoole来取代nginx作为http服务器 - JohnsonChung</title>
<link>http://www.cnblogs.com/johnson108178/p/8109596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/johnson108178/p/8109596.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.是什么限制Laravel框架的速度？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Laravel框架启动的时候需要加载很多文件，再加上其出了名的生态环境好，所以在开发过程中我们就会发现有非常多的已经造好的轮子，这也就使得Laravel的一次启动的磁盘IO特别高（就是要加载很多文件嘛），博主之前的一遍博客&lt;a href=&quot;http://www.cnblogs.com/johnson108178/p/7803729.html&quot; target=&quot;_blank&quot;&gt;Laravel5框架性能优化技巧&lt;/a&gt;中也提到过一些优化，但是并没有实质的解决磁盘IO高的问题。&lt;/p&gt;
&lt;p&gt;既然已经知道了问题所在，那就很容易解决了，只要每次启动Laravel的时候不都重新加载这些文件就好了，这时候大名鼎鼎的swoole就登场了。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.Swoole&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Swoole号称重新定义了PHP，它是一个PHP扩展，使得PHP可以使用异步的方式执行，就像node一样，而且还能使用socket，为PHP提供了一系列异步IO、事件驱动、并行数据结构功能。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。它可以大大提升项目的性能。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.使用Swoole提升Laravel的性能&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在现有的轮子中，感觉下面这两个还是非常不错的，可以自行选择&lt;/span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;博主选择了第一个，不要问我为什么，任性！然后我们就开始吧！&lt;/p&gt;
&lt;p&gt;使用composer安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
composer require swooletw/laravel-swoole
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你使用的是laravel，那么在 &lt;span class=&quot;cnblogs_code&quot;&gt;config/app.php&lt;/span&gt; 的 &lt;span class=&quot;cnblogs_code&quot;&gt;providers&lt;/span&gt; 数组中加上&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
SwooleTW\Http\LaravelServiceProvider::&lt;span&gt;class&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你使用的是lumen，那么在 &lt;span class=&quot;cnblogs_code&quot;&gt;bootstrap/app.php&lt;/span&gt; 中加入如下代码&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;$app-&amp;gt;register(SwooleTW\Http\LumenServiceProvider::&lt;span&gt;class&lt;/span&gt;);&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;将配置文件导出到 &lt;span class=&quot;cnblogs_code&quot;&gt;config&lt;/span&gt; 目录下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 php artisan vendor:publish --provider=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SwooleTW\Http\HttpServiceProvider&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后可以去 &lt;span class=&quot;cnblogs_code&quot;&gt;config/swoole_http.php&lt;/span&gt; 中配置信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt;&lt;span&gt; [
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; env(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SWOOLE_HTTP_HOST&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; env(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SWOOLE_HTTP_PORT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1215&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;options&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt;&lt;span&gt; [
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pid_file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; env(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SWOOLE_HTTP_PID_FILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, base_path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;storage/logs/swoole_http.pid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log_file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; env(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SWOOLE_HTTP_LOG_FILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, base_path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;storage/logs/swoole_http.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;daemonize&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; env(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SWOOLE_HTTP_DAEMONIZE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
        ],
],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;host和post不用多说，options里面的具体配置可以去&lt;a href=&quot;https://wiki.swoole.com/wiki/page/274.html&quot; target=&quot;_blank&quot;&gt;swoole官网&lt;/a&gt;查看详细参数信息。&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;swoole_http.php&lt;/span&gt; 里还提供配置 &lt;span class=&quot;cnblogs_code&quot;&gt;providers&lt;/span&gt; 数组，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;providers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; App\Providers\AuthServiceProvider::class,&lt;/span&gt;
]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为使用swoole作为http后，这些providers会被存到内存中，所以这里配置的是每次请求都想要重新注册和重新启动的providers。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Artisan Commands&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个轮子完全使用artisan命令来操作。&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;php artisan swoole:http start|stop|restart|reload&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;依次是，启动/停止/重启/重载。&lt;/p&gt;
&lt;p&gt;所以我们可以通过以下命令来启动&lt;strong&gt;swoole_http_server&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
php artisan swoole:http start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在可以通过配置文件里的host和port去访问Laravel了，例如我的配置是： &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;1215&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：该拓展是不支持热启动的，所以每次有代码更新都要重启服务 &lt;span class=&quot;cnblogs_code&quot;&gt;php artisan swoole:http restart&lt;/span&gt; 。当然你也可以在linux上写一个脚本，让 &lt;span class=&quot;cnblogs_code&quot;&gt;git pull&lt;/span&gt; 代码后自动重启服务。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.性能测试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面让我们来看两张图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用swoole前：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1264945/201712/1264945-20171225150548259-1597621651.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用swoole后：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1264945/201712/1264945-20171225150609384-1337745202.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这里是使用Apache的ab测试工具&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ab -n1000 -c10 http://127.0.0.1:1215
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以惊奇的发现， &lt;span class=&quot;cnblogs_code&quot;&gt;Request per second&lt;/span&gt; 从原来的20多，提升到了600多。将近提升了30倍左右。啊，多么痛的领悟！！&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.使用Nginx代理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;swoole在官网也提到过：swoole_http_server对Http协议的支持并不完整，建议仅作为应用服务器。并且在前端增加Nginx作为代理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么，我们就增加需要配置nginx.conf里的server：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server {
    listen &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;;
    server_name your.domain.com;
    root &lt;/span&gt;/path/to/laravel/&lt;span&gt;public&lt;/span&gt;&lt;span&gt;;
    index index.php;

    location &lt;/span&gt;= /&lt;span&gt;index.php {
        # Ensure that there &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; no such file named &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;not_exists&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        # &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; your &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; directory.
        try_files &lt;/span&gt;/&lt;span&gt;not_exists @swoole;
    }

    location &lt;/span&gt;/&lt;span&gt; {
        try_files $uri $uri&lt;/span&gt;/&lt;span&gt; @swoole;
    }

    location @swoole {
        &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; $suffix &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ($uri = /&lt;span&gt;index.php) {
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; $suffix &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }

        proxy_set_header Host $host;
        proxy_set_header SERVER_PORT $server_port;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header X&lt;/span&gt;-Forwarded-&lt;span&gt;For $proxy_add_x_forwarded_for;

        # IF https
        # proxy_set_header HTTPS &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        proxy_pass http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:1215$suffix;&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，大功告成，你可以像平常一样访问你的网站了。&lt;/p&gt;

</description>
<pubDate>Mon, 25 Dec 2017 07:25:00 +0000</pubDate>
<dc:creator>JohnsonChung</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/johnson108178/p/8109596.html</dc:identifier>
</item>
<item>
<title>关于React组件之间如何优雅地传值的探讨 - _糊一笑</title>
<link>http://www.cnblogs.com/rynxiao/p/8109546.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rynxiao/p/8109546.html</guid>
<description>&lt;p&gt;闲话不多说，开篇撸代码，你可以会看到类似如下的结构：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 父组件&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Parent &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Component &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'red'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Child1 &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; ...&lt;span class=&quot;va&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// 子组件1&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;const Child1 = props =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    return &amp;lt;Child2 { ...props } /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 子组件2&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Child2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; props &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Child3 &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; ...&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;// 子组件3&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;const Child3 = props =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    return &amp;lt;div style={{ color: props.color }}&amp;gt;Red&amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码看这里：&lt;a href=&quot;https://codepen.io/rynxiao/pen/vpyaLO&quot; class=&quot;uri&quot;&gt;https://codepen.io/rynxiao/pen/vpyaLO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当一个组件嵌套了若干层子组件时，而想要在特定的组件中取得父组件的属性，就不得不将&lt;code&gt;props&lt;/code&gt;一层一层地往下传，我这里只是简单的列举了3个子组件，而当子组件嵌套过深的时候，&lt;code&gt;props&lt;/code&gt;的维护将成噩梦级增长。因为在每一个子组件上你可能还会对传过来的&lt;code&gt;props&lt;/code&gt;进行加工，以至于你最后都不确信你最初的&lt;code&gt;props&lt;/code&gt;中将会有什么东西。&lt;/p&gt;
&lt;p&gt;那么&lt;code&gt;React&lt;/code&gt;中是否还有其他的方式来传递属性，从而改善这种层层传递式的属性传递。答案肯定是有的，主要还有以下两种形式：&lt;/p&gt;
&lt;h2 id=&quot;redux等系列数据仓库&quot;&gt;Redux等系列数据仓库&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;Redux&lt;/code&gt;相当于在全局维护了整个应用数据的仓库，当数据改变的时候，我们只需要去改变这个全局的数据仓库就可以了。类似这样的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// index1.js&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// index2.js&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然这只是一种非常简单的形式解析，&lt;code&gt;Reudx&lt;/code&gt;中的实现逻辑远比这个要复杂得多，有兴趣可以去深入了解，或者看我之前的文章：&lt;a href=&quot;http://blog.csdn.net/yuzhongzi81/article/details/51880577&quot;&gt;用react+redux编写一个页面小demo&lt;/a&gt;以及&lt;a href=&quot;http://www.cnblogs.com/rynxiao/p/7933113.html&quot;&gt;react脚手架改造&lt;/a&gt;，下面大致列举下代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// actions.js&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;getA&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; GET_DATA_A
  &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// reducer.js&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;reducer&lt;/span&gt;(state&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; action) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;GET_DATA_A&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; reducer&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// Test.js&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Test &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;componentDidMount&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getA&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;connect&lt;/span&gt;(state &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;reducer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; dispatch &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;getA&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; dispatch &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;getA&lt;/span&gt;()) &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)(Test)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样当在&lt;code&gt;Test&lt;/code&gt;中的&lt;code&gt;componentDidMount&lt;/code&gt;中调用了&lt;code&gt;getA()&lt;/code&gt;之后，就会发送一个&lt;code&gt;action&lt;/code&gt;去改变&lt;code&gt;store&lt;/code&gt;中的状态，此时的a已经由原先的1变成了2。&lt;/p&gt;
&lt;p&gt;这只是一个任一组件的大致演示，这就意味着你可以在任何组件中来改变&lt;code&gt;store&lt;/code&gt;中的状态。关于什么时候引入&lt;code&gt;redux&lt;/code&gt;我觉得也要根据项目来，如果一个项目中大多数时候只是需要跟组件内部打交道，那么引入&lt;code&gt;redux&lt;/code&gt;反而造成了一种资源浪费，更多地引来的是学习成本和维护成本，因此并不是说所有的项目我都一定要引入&lt;code&gt;redux&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;context&quot;&gt;context&lt;/h2&gt;
&lt;p&gt;关于&lt;code&gt;context&lt;/code&gt;的讲解，&lt;code&gt;React&lt;/code&gt;文档中将它放在了进阶指引里面。具体地址在这里：&lt;a href=&quot;https://reactjs.org/docs/context.html&quot; class=&quot;uri&quot;&gt;https://reactjs.org/docs/context.html&lt;/a&gt;。主要的作用就是为了解决在本文开头列举出来的例子，为了不让&lt;code&gt;props&lt;/code&gt;在每层的组件中都需要往下传递，而可以在任何一个子组件中拿到父组件中的属性。&lt;/p&gt;
&lt;p&gt;但是，好用的东西往往也有副作用，官方也给出了几点不要使用&lt;code&gt;context&lt;/code&gt;的建议，如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果你想你的应用处于稳定状态，不要用&lt;code&gt;context&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果你不太熟悉&lt;code&gt;Redux&lt;/code&gt;或者&lt;code&gt;MobX&lt;/code&gt;等状态管理库，不要用&lt;code&gt;context&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果你不是一个资深的&lt;code&gt;React&lt;/code&gt;开发者，不要用&lt;code&gt;context&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;鉴于以上三种情况，官方更好的建议是老老实实使用&lt;code&gt;props&lt;/code&gt;和&lt;code&gt;state&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面主要大致讲一下&lt;code&gt;context&lt;/code&gt;怎么用，其实在官网中的例子已经十分清晰了，我们可以将最开始的例子改一下，使用&lt;code&gt;context&lt;/code&gt;之后是这样的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Parent &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'red'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;getChildContext&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Child1 /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Child1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Child2 /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Child2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Child3 /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Child3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; children &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; context) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'context'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; context)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;op&quot;&gt;={{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;context&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}}&amp;gt;&lt;/span&gt;Red&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;Parent.childContextTypes = {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    color: PropTypes.string&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;Child3.contextTypes = {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    color: PropTypes.string&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;};  &lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;ReactDOM.render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;Parent /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'container'&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，在子组件中，所有的&lt;code&gt;{ ...props }&lt;/code&gt;都不需要再写，只需要在&lt;code&gt;Parent&lt;/code&gt;中定义&lt;code&gt;childContextTypes&lt;/code&gt;的属性类型，以及定义&lt;code&gt;getChildContext&lt;/code&gt;钩子函数，然后再特定的子组件中使用&lt;code&gt;contextTypes&lt;/code&gt;接收即可。&lt;/p&gt;
&lt;p&gt;代码请看这里：&lt;a href=&quot;https://codepen.io/rynxiao/pen/vpyzBm&quot; class=&quot;uri&quot;&gt;https://codepen.io/rynxiao/pen/vpyzBm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样做貌似十分简单，但是你可能会遇到这样的问题：当改变了&lt;code&gt;context&lt;/code&gt;中的属性，但是由于并没有影响父组件中上一层的中间组件的变化，那么上一层的中间组件并不会渲染，这样即使改变了&lt;code&gt;context&lt;/code&gt;中的数据，你期望改变的子组件中并不一定能够发生变化，例如我们在上面的例子中再来改变一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// Parent&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setState&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'green'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;change color to green&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;Child1 /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加一个按钮来改变&lt;code&gt;state&lt;/code&gt;中的颜色&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// Child2&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Child2 &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    
      &lt;span class=&quot;at&quot;&gt;shouldComponentUpdate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Child3 /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加&lt;code&gt;shouldComponentUpdate&lt;/code&gt;来决定这个组件是否渲染。当我在&lt;code&gt;shouldComponentUpdate&lt;/code&gt;中返回&lt;code&gt;true&lt;/code&gt;的时候，一切都是那么地正常，但是当我返回&lt;code&gt;false&lt;/code&gt;的时候，颜色将不再发生变化。&lt;/p&gt;
&lt;p&gt;在这里看效果：&lt;a href=&quot;https://codepen.io/rynxiao/pen/eyBLgY&quot; class=&quot;uri&quot;&gt;https://codepen.io/rynxiao/pen/eyBLgY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既然发生了这样的情况，那是否意味着我们不能再用&lt;code&gt;context&lt;/code&gt;，没有绝对的事情，在这篇文章&lt;a href=&quot;https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076&quot;&gt;How to safely use React context&lt;/a&gt;中给出了一个解决方案，我们再将上面的例子改造一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 重新定义一个发布对象，每当颜色变化的时候就会发布新的颜色信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 这样在订阅了颜色改变的子组件中就可以收到相关的颜色变化讯息了&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Theme &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(color) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; color&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;setColor&lt;/span&gt;(color) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; color&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;subscriptions&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;(f &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;f&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;subscribe&lt;/span&gt;(f) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;subscriptions&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(f)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Parent &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(props) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(props)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Theme&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'red'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;changeColor&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;changeColor&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;getChildContext&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;theme&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;changeColor&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;theme&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setColor&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'green'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;changeColor&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;change color to green&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;              &amp;lt;Child1 /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;const Child1 = &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    return &amp;lt;Child2 /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Child2 &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;at&quot;&gt;shouldComponentUpdate&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Child3 /&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 子组件中订阅颜色改变的信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 调用forceUpdate强制自己重新渲染&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Child3 &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;at&quot;&gt;componentDidMount&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;context&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;theme&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;subscribe&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forceUpdate&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;op&quot;&gt;={{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;context&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;theme&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}}&amp;gt;&lt;/span&gt;Red&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;Parent.childContextTypes = {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    theme: PropTypes.object&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;Child3.contextTypes = {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    theme: PropTypes.object&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;};  &lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;ReactDOM.render&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;Parent /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'container'&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看上面的例子，其实就是一个订阅发布者模式，一旦父组件颜色发生了改变，我就给子组件发送消息，强制调用子组件中的&lt;code&gt;forceUpdate&lt;/code&gt;进行渲染。&lt;/p&gt;
&lt;p&gt;代码在这里：&lt;a href=&quot;https://codepen.io/rynxiao/pen/QaGVgo&quot; class=&quot;uri&quot;&gt;https://codepen.io/rynxiao/pen/QaGVgo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但在开发中，一般是不会推荐使用&lt;code&gt;forceUpdate&lt;/code&gt;这个方法的，因为你改变的有时候并不是仅仅一个状态，但状态改变的数量只有一个，但是又会引起其他属性的渲染，这样会变得得不偿失。&lt;/p&gt;
&lt;p&gt;另外基于此原理实现的有一个库： &lt;a href=&quot;http://mobxjs.github.io/mobx&quot;&gt;MobX&lt;/a&gt;，有兴趣的可以自己去了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总体建议是：能别用&lt;code&gt;context&lt;/code&gt;就别用，一切需要在自己的掌控中才可以使用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这是自己在使用&lt;code&gt;React&lt;/code&gt;时的一些总结，本意是朝着偷懒的方向上去了解&lt;code&gt;context&lt;/code&gt;的，但是在使用的基础上，必须知道它使用的场景，这样才能够防范于未然。&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 07:16:00 +0000</pubDate>
<dc:creator>_糊一笑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rynxiao/p/8109546.html</dc:identifier>
</item>
<item>
<title>一步一步完成一个聚会摇色子游戏 - 花生哒哒</title>
<link>http://www.cnblogs.com/CallmeYhz/p/8109456.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CallmeYhz/p/8109456.html</guid>
<description>&lt;p&gt;      出去聚会想玩摇色子，奈何身边没有色子，网上也没找到，自己写一个吧&lt;/p&gt;
&lt;h3&gt;一、画界面&lt;/h3&gt;
&lt;p&gt;      色子要大明显字要大，摇动最好有特效和声音，前端使用layui布局&lt;/p&gt;
&lt;p&gt;1.引用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;/plugin/layui/css/layui.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/Scripts/jquery-1.8.2.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.布局&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mybody&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;padding-top:100px&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs-offset4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs-offset4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;btnAll&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;layui-btn layui-btn-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;一键全部摇&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.适应手机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;renderer&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;webkit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;IE=edge,chrome=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/785912/201712/785912-20171225143944931-323818590.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先用按钮实现点击就摇动色子，产生结果&lt;/p&gt;
&lt;h3&gt;二、摇动特效&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;色子摇动特效,设置点数&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; startJump(index) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dice = $(&quot;.dice&quot;&lt;span&gt;).eq(index);
        $(&lt;/span&gt;&quot;.wrap&quot;).append(&quot;&amp;lt;div id='dice_mask'&amp;gt;&amp;lt;/div&amp;gt;&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加遮罩&lt;/span&gt;
        dice.attr(&quot;class&quot;, &quot;dice&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清除上次动画后的点数&lt;/span&gt;
        dice.css('cursor', 'default'&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num = Math.floor(Math.random() * 6 + 1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;产生随机数1-6&lt;/span&gt;
        dice.animate({ left: '+2px' }, 100, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            dice.addClass(&lt;/span&gt;&quot;dice_t&quot;&lt;span&gt;);
        }).delay(&lt;/span&gt;200).animate({ top: '-2px' }, 100, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            dice.removeClass(&lt;/span&gt;&quot;dice_t&quot;).addClass(&quot;dice_s&quot;&lt;span&gt;);
        }).delay(&lt;/span&gt;200).animate({ opacity: 'show' }, 600, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            dice.removeClass(&lt;/span&gt;&quot;dice_s&quot;).addClass(&quot;dice_e&quot;&lt;span&gt;);
        }).delay(&lt;/span&gt;100).animate({ left: '-2px', top: '2px' }, 100, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            dice.removeClass(&lt;/span&gt;&quot;dice_e&quot;).addClass(&quot;dice_&quot; +&lt;span&gt; num);
            $(&lt;/span&gt;&quot;#result&quot;).html(&quot;您掷得点数是&amp;lt;span&amp;gt;&quot; + num + &quot;&amp;lt;/span&amp;gt;&quot;&lt;span&gt;);
            dice.css(&lt;/span&gt;'cursor', 'pointer'&lt;span&gt;);
            $(&lt;/span&gt;&quot;#dice_mask&quot;).remove();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;移除遮罩&lt;/span&gt;

            &lt;span&gt;if&lt;/span&gt; (index == 4&lt;span&gt;)
            {
                isJumping &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        });
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为index是索引，一共5个封装一个函数&lt;/p&gt;
&lt;p&gt;先实现一个色子摇动&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/785912/201712/785912-20171225144238681-1602534874.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5个色子同时摇动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;            startJump(0);
            startJump(1);
            startJump(2);
            startJump(3);
            startJump(4);    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/785912/201712/785912-20171225144555790-88100333.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;三、监听手机摇动事件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; SHAKE_THRESHOLD &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;4500&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义触发动作的阈值&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; last_update &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上一次触发的时间&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; z &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; last_x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; last_y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; last_z &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;x,y,z当前加速度,last_z,last_x,last_y上次加速度&amp;lt;span style=&quot;font-size:18px;&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; isJumping &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;摇一摇内置脚本&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; deviceMotionHandler(eventData) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; acceleration &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; eventData.accelerationIncludingGravity;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; curTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ((curTime &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_update) &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; diffTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; curTime &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_update;
            last_update &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; curTime;
            x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; acceleration.x;
            y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; acceleration.y;
            z &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; acceleration.z;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; speed &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Math.abs(x &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; y &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; z &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_x &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_y &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_z) &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; diffTime &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
           
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (speed &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; SHAKE_THRESHOLD) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(&quot;speed:&quot;+speed);&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(&quot;SHAKE_THRESHOLD&quot; + SHAKE_THRESHOLD);&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;摇动成功触发这个函数&lt;/span&gt;
&lt;span&gt;                handelShakingMotion();              
            }
            last_x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; x;
            last_y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; y;
            last_z &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; z;
        }
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听摇一摇的动作&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; listenPhoneShake() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (window.DeviceMotionEvent) {
            window.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;devicemotion&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, deviceMotionHandler, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;addEventListener devicemotion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;抱歉，你的手机配置实在有些过不去，考虑换个新的再来试试吧&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;手机页面$(function(){})执行 listenPhoneShake()函数 赋予事件，其中&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
SHAKE_THRESHOLD 这个变量是摇动的震动值 如果该值越大那么要很用力摇手机才会触发自定义函数&lt;p&gt;部署到IIS用手机测试可以了变量isJumping设置摇动时候不能并发摇动防止不停摇动出现BUG 在index=4中处理
&lt;/p&gt;&lt;/pre&gt;
&lt;h3&gt;四、色子滚动时候添加声音&lt;/h3&gt;
&lt;p&gt;1.添加标签&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;audio &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/css/Mobile/Images/music.mp3&quot;&lt;/span&gt;&lt;span&gt; preload&lt;/span&gt;&lt;span&gt;=&quot;preload&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;shakingAudio&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.播放&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 $('#shakingAudio').get(0).play();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.兼容性处理（Android下直接播放没问题,IOS添加如下代码）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理iphone不能自动播放  &lt;/span&gt;
        document.addEventListener('WeixinJSBridgeReady', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            $(&lt;/span&gt;'#shakingAudio').get(0&lt;span&gt;).play();
        }, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;五、完整html代码&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@{
    ViewBag.Title = &quot;摇色子&quot;;
    Layout = &quot;~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml&quot;;
}

&lt;/span&gt;&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;~/css/Mobile/sezi.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;audio &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;/css/Mobile/Images/music.mp3&quot;&lt;/span&gt;&lt;span&gt; preload&lt;/span&gt;&lt;span&gt;=&quot;preload&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;shakingAudio&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;audio&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mybody&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;padding-top:100px&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs-offset4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dice&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;dice dice_1 sezi5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-col-xs-offset4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;btnAll&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;layui-btn layui-btn-danger&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;一键全部摇&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;定义全局变量&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; SHAKE_THRESHOLD &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;4500&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义触发动作的阈值&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; last_update &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上一次触发的时间&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; z &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; last_x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; last_y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; last_z &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;x,y,z当前加速度,last_z,last_x,last_y上次加速度&amp;lt;span style=&quot;font-size:18px;&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; isJumping &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;摇一摇内置脚本&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; deviceMotionHandler(eventData) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; acceleration &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; eventData.accelerationIncludingGravity;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; curTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ((curTime &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_update) &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; diffTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; curTime &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_update;
            last_update &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; curTime;
            x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; acceleration.x;
            y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; acceleration.y;
            z &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; acceleration.z;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; speed &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Math.abs(x &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; y &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; z &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_x &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_y &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; last_z) &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; diffTime &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
           
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (speed &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; SHAKE_THRESHOLD) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(&quot;speed:&quot;+speed);&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;alert(&quot;SHAKE_THRESHOLD&quot; + SHAKE_THRESHOLD);&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;摇动成功触发这个函数&lt;/span&gt;
&lt;span&gt;                handelShakingMotion();              
            }
            last_x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; x;
            last_y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; y;
            last_z &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; z;
        }
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听摇一摇的动作&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; listenPhoneShake() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (window.DeviceMotionEvent) {
            window.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;devicemotion&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, deviceMotionHandler, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;addEventListener devicemotion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            alert(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;抱歉，你的手机配置实在有些过不去，考虑换个新的再来试试吧&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;自定义脚本&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;摇动后执行的事件&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; handelShakingMotion() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isJumping) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#shakingAudio&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).get(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;).play();
        isJumping &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        startJump(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        startJump(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        startJump(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
        startJump(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
        startJump(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化&lt;/span&gt;
&lt;span&gt;    $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        listenPhoneShake();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理iphone不能自动播放  &lt;/span&gt;
&lt;span&gt;        document.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;WeixinJSBridgeReady&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#shakingAudio&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).get(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;).play();
        }, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

      
        $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#btnAll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一般android机都能自动播放  &lt;/span&gt;
&lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#shakingAudio&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).get(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;).play();          
            startJump(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            startJump(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            startJump(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
            startJump(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
            startJump(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
        })
    });

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;色子摇动特效,设置点数&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; startJump(index) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; dice &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.dice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).eq(index);
        $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.wrap&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;div id='dice_mask'&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加遮罩&lt;/span&gt;
&lt;span&gt;        dice.attr(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清除上次动画后的点数&lt;/span&gt;
&lt;span&gt;        dice.css(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cursor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; num &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Math.floor(Math.random() &lt;/span&gt;&lt;span&gt;*&lt;/span&gt; &lt;span&gt;6&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;产生随机数1-6&lt;/span&gt;
&lt;span&gt;        dice.animate({ left: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+2px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; }, &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            dice.addClass(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dice_t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }).delay(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;).animate({ top: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-2px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; }, &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            dice.removeClass(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dice_t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).addClass(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dice_s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }).delay(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;).animate({ opacity: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; }, &lt;/span&gt;&lt;span&gt;600&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            dice.removeClass(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dice_s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).addClass(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dice_e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }).delay(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;).animate({ left: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-2px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, top: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; }, &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            dice.removeClass(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dice_e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).addClass(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dice_&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; num);
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#result&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您掷得点数是&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; num &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            dice.css(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cursor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pointer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#dice_mask&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).remove();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;移除遮罩&lt;/span&gt;

            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (index &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
            {
                isJumping &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
        });
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义手机摇色子就完成了，部署到自己的服务器上就可以使用了&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 07:01:00 +0000</pubDate>
<dc:creator>花生哒哒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CallmeYhz/p/8109456.html</dc:identifier>
</item>
<item>
<title>Struts2学习笔记整理(三) - 熬过今夜还有明天</title>
<link>http://www.cnblogs.com/daweige/p/8109167.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/daweige/p/8109167.html</guid>
<description>&lt;p&gt;&lt;span&gt;Struts2的输入校验&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;之前对请求参数的输入校验一般分为两部分:1.客户端校验,也就是我们写js代码去对客户的误操作进行过滤  2.服务端校验, 这是整个应用组织非法数据的最后防线.&lt;/p&gt;
&lt;p&gt;Struts2的校验方式与其很大不同.Struts2是手动完成输入校验,可以编写自己的校验规则,基于Annotation的输入校验.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一.手工验证&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;比如说我们要验证如下: jsp界面用户输入的用户名不能为null,密码不能为null,且长度必须是6-12位.&lt;/p&gt;
&lt;p&gt;那么在我们所的action中有两步是必须做的:&lt;span&gt;1.action类必须继承ActionSuppprt 2.重写Validateable接口的validate()方法,在该方法中完成验证&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;过程如下:   &lt;strong&gt;validate()方法会在其他业务方法之前执行.&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;                  如果验证出错怎么办? 这就需要我们在struts.xml中配置出错转向的页面.&lt;/strong&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;result name=&quot;input&quot;&amp;gt;/validate/login.jsp&amp;lt;/result&amp;gt;  其中input转向是在action中已经定义好的.public static final String INPUT = &quot;input&quot;;      &lt;/p&gt;
&lt;p&gt;                  &lt;strong&gt;那什么时候才叫验证出错呢?&lt;/strong&gt;有一个方法 this.addFieldError(&quot;sss&quot;,&quot;错误信息&quot;):方法只向一个集合,当集合不为空的时候是验证出错.&lt;/p&gt;
&lt;p&gt; , 如果系统的fieldErrors包含失败信息,Struts2会将请求转发名为input的result.在视图中通过&amp;lt;s:fieldError/&amp;gt;显示失败信息.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码举例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RegistAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport 
{ 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该请求包含的四个请求参数 &lt;/span&gt;
&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name; 
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pass; 
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age; 
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date birth; 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;name属性的setter和getter方法 &lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) 
{ 
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name; 
} 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() 
{ 
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name); 
} 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;pass属性的setter和getter方法 &lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPass(String pass) 
{ 
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pass =&lt;span&gt; pass; 
} 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPass() 
{ 
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pass); 
} 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;age属性的setter和getter方法 &lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAge(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; age) 
{ 
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age; 
} 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getAge() 
{ 
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.age); 
} 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;birth属性的setter和getter方法 &lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setBirth(Date birth) 
{ 
&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.birth =&lt;span&gt; birth; 
} 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Date getBirth() 
{ 
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.birth); 
} 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重写validate方法，进行数据校验 &lt;/span&gt;
&lt;span&gt;  @Override 
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; validate() 
{ 
System.out.println(&lt;/span&gt;&quot;进入validate方法进行校验&quot;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果用户名不为空，且不匹配长度为4～25的字母和数字组成的字符串。 &lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;(name != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !Pattern.matches(&quot;\\w{4,25}&quot;&lt;span&gt;, name.trim())) 
{ 
addFieldError(&lt;/span&gt;&quot;user&quot;&lt;span&gt; , 
&lt;/span&gt;&quot;您输入用户名必须是字母和数字，且长度必须是4到25之间！&quot;&lt;span&gt;); 
} 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果密码不为空，且不匹配长度为4～25的字母和数字组成的字符串。 &lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (pass != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !Pattern.matches(&quot;\\w{4,25}&quot;&lt;span&gt;, pass.trim())) 
{ 
addFieldError(&lt;/span&gt;&quot;pass&quot;&lt;span&gt; , 
&lt;/span&gt;&quot;您输入密码必须是字母和数字，且长度必须是4到25之间！&quot;&lt;span&gt;); 
} 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果年龄不在有效的年龄段内 &lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (age &amp;gt; 150 || age &amp;lt;= 0&lt;span&gt;) 
{ 
addFieldError(&lt;/span&gt;&quot;age&quot; , &quot;您输入的年龄必须是一个有效的年龄！&quot;&lt;span&gt;); 
} 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得有效生日的最后期限 &lt;/span&gt;
  Calendar end =&lt;span&gt; Calendar.getInstance(); 
end.set(&lt;/span&gt;2050 , 2 , 21&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得有效生日的最早期限 &lt;/span&gt;
  Calendar start =&lt;span&gt; Calendar.getInstance(); 
start.set(&lt;/span&gt;1900 , 1 , 1&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果生日不为空，且生日不是一个有效的生日。 &lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (birth != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (birth.after(end.getTime()) ||&lt;span&gt; birth.before(start.getTime()))) 
{ 
addFieldError(&lt;/span&gt;&quot;birth&quot; , &quot;您输入的生日必须在一个有效的时间段内&quot;&lt;span&gt;); 
} 
} 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可见手工验证还是要写大量的代码,虽然相比servlet节省了类型转换,但是我们不想写代码~!所以我们一般会用配置文件的方式进行校验&lt;/span&gt;&lt;br/&gt;&lt;span&gt;二.基于XML配置方式实现输入校验&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同上依然是对用户名不能为null,密码非空且长度在6-12位进行校验.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;步骤: 1需要建立jsp页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;         2.定义action  要注意action必须继承actionSupport或者实现Validateable接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;         3.配置Struts_validate.xml文件 定义错误执行页面&lt;img src=&quot;http://images2017.cnblogs.com/blog/1280275/201712/1280275-20171225105351756-738097802.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &lt;/strong&gt;  4. 该文件需要和action类放在同一个包下,配置验证文件的xml文件  文件命名格式为 &lt;span&gt;ActionClassName-validation.xml ,  &lt;span&gt;ActionClassName为简单类名&lt;/span&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;validators&amp;gt;&lt;span&gt;: 根元素
&lt;/span&gt;&amp;lt;field&amp;gt;&lt;span&gt;:指定action中要校验的属性，name属性指定将被验证的表单字段的名字
&lt;/span&gt;&amp;lt;field-validator&amp;gt;&lt;span&gt;:指定校验器， type 指定验证规则
     上面指定的校验器requiredstring是由系统提供的，系统提供了能满足大部分验证需求
      的校验器，这些校验器的定义可以在xwork&lt;/span&gt;-2&lt;span&gt;.x.jar中的
      com.opensymphony.xwork2.validator.validators下的default.xml中找到。
&lt;/span&gt;&amp;lt;param&amp;gt;&lt;span&gt;:子元素可以向验证程序传递参数
&lt;/span&gt;&amp;lt;message&amp;gt;&lt;span&gt;:子元素为校验失败后的提示信息,如果需要国际化，可以为message
                   指定key属性，key的值为属性文件中的key。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;常见校验器&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;系统提供的校验器如下：
required (必填校验器,要求被校验的属性值不能为null)
requiredstring (必填字符串校验器,要求被校验的属性值不能为null，并且长度大于0,默认情况下会对字符串去前后空格)
stringlength(字符串长度校验器，要求被校验的属性值必须在指定的范围内，否则校验失败,minLength参数指定最小长度，maxLength参数指定最大长度，trim参数指定校验field之前是否去除字符串前后的空格)
regex(正则表达式校验器，检查被校验的属性值是否匹配一个正则表达式，expression参数指定正则表达式，caseSensitive参数指定进行正则表达式匹配时，是否区分大小写,默认值为true)
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;(整数校验器，要求field的整数值必须在指定范围内，min指定最小值，max指定最大值)
&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;(双精度浮点数校验器,要求field的双精度浮点数必须在指定范围内,min指定最小值,max指定最大值)
fieldexpression(字段OGNL表达式校验器,要求field满足一个ognl表达式，expression参数指定ognl表达式,该逻辑表达式基于ValueStack进行求值,返回true时校验通过，否则不通过)
email(邮件地址校验器，要求如果被校验的属性值非空，则必须是合法的邮件地址)
url(网址校验器,要求如果被校验的属性值非空,则必须是合法的url地址)
date(日期校验器,要求field的日期值必须在指定范围内,min指定最小值,max指定最大值)
conversion(转换校验器，指定在类型转换失败时，提示的错误信息)
visitor(用于校验action中复合类型的属性，它指定一个校验文件用于校验复合类型属性中的属性)
expression(OGNL表达式校验器，它是一个非字段校验器， expression参数指定ognl表达式,该逻辑表达式基于ValueStack进行求值,返回true时校验通过，否则不通过，该校验器不可用在字段校验器风格的配置中)&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;比如我们要对ValidateXmlAction类进行校验,xml应该是ValidateXmlAction-validation.xml&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;GBK&quot;?&amp;gt;
&amp;lt;!-- 指定校验配置文件的DTD信息 --&amp;gt;
&amp;lt;!&lt;span&gt;DOCTYPE validators PUBLIC 
    &lt;/span&gt;&quot;-//OpenSymphony Group//XWork Validator 1.0.3//EN&quot;
    &quot;http://www.opensymphony.com/xwork/xwork-validator-1.0.3.dtd&quot;&amp;gt;
&amp;lt;!-- 校验文件的根元素 --&amp;gt;
&amp;lt;validators&amp;gt;
    &amp;lt;!-- 校验Action的name属性 --&amp;gt;
    &amp;lt;field name=&quot;name&quot;&amp;gt;
        &amp;lt;!-- 指定name属性必须满足必填规则 --&amp;gt;
        &amp;lt;field-validator type=&quot;requiredstring&quot;&amp;gt;
            &amp;lt;param name=&quot;trim&quot;&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/param&amp;gt;
            &amp;lt;message&amp;gt;必须输入名字&amp;lt;/message&amp;gt;
        &amp;lt;/field-validator&amp;gt;
        &amp;lt;!-- 指定name属性必须匹配正则表达式 --&amp;gt;
        &amp;lt;field-validator type=&quot;regex&quot;&amp;gt;
            &amp;lt;param name=&quot;expression&quot;&amp;gt;&amp;lt;![CDATA[(\w{4,25})]]&amp;gt;&amp;lt;/param&amp;gt;
            &amp;lt;message&amp;gt;&lt;span&gt;您输入的用户名只能是字母和数字
                ，且长度必须在4到25之间&lt;/span&gt;&amp;lt;/message&amp;gt;
        &amp;lt;/field-validator&amp;gt;
    &amp;lt;/field&amp;gt;
    &amp;lt;!-- 校验Action的pass属性 --&amp;gt;
    &amp;lt;field name=&quot;pass&quot;&amp;gt;
        &amp;lt;!-- 指定pass属性必须满足必填规则 --&amp;gt;
        &amp;lt;field-validator type=&quot;requiredstring&quot;&amp;gt;
            &amp;lt;param name=&quot;trim&quot;&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/param&amp;gt;
            &amp;lt;message&amp;gt;必须输入密码&amp;lt;/message&amp;gt;
        &amp;lt;/field-validator&amp;gt;
        &amp;lt;!-- 指定pass属性必须满足匹配指定的正则表达式 --&amp;gt;
        &amp;lt;field-validator type=&quot;regex&quot;&amp;gt;
            &amp;lt;param name=&quot;expression&quot;&amp;gt;&amp;lt;![CDATA[(\w{4,25})]]&amp;gt;&amp;lt;/param&amp;gt;
            &amp;lt;message&amp;gt;&lt;span&gt;您输入的密码只能是字母和数字
                ，且长度必须在4到25之间&lt;/span&gt;&amp;lt;/message&amp;gt;
        &amp;lt;/field-validator&amp;gt;
    &amp;lt;/field&amp;gt;
    &amp;lt;!-- 指定age属性必须在指定范围内--&amp;gt;
    &amp;lt;field name=&quot;age&quot;&amp;gt;
        &amp;lt;field-validator type=&quot;int&quot;&amp;gt;
            &amp;lt;param name=&quot;min&quot;&amp;gt;1&amp;lt;/param&amp;gt;
            &amp;lt;param name=&quot;max&quot;&amp;gt;150&amp;lt;/param&amp;gt;
            &amp;lt;message&amp;gt;年纪必须在1到150之间&amp;lt;/message&amp;gt;
        &amp;lt;/field-validator&amp;gt;
    &amp;lt;/field&amp;gt;
    &amp;lt;!-- 指定birth属性必须在指定范围内--&amp;gt;
    &amp;lt;field name=&quot;birth&quot;&amp;gt;
        &amp;lt;field-validator type=&quot;date&quot;&amp;gt;
            &amp;lt;!-- 下面指定日期字符串时，必须使用本Locale的日期格式 --&amp;gt;
            &amp;lt;param name=&quot;min&quot;&amp;gt;1900-01-01&amp;lt;/param&amp;gt;
            &amp;lt;param name=&quot;max&quot;&amp;gt;2050-02-21&amp;lt;/param&amp;gt;
            &amp;lt;message&amp;gt;生日必须在${min}到${max}之间&amp;lt;/message&amp;gt;
        &amp;lt;/field-validator&amp;gt;
    &amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;关系图如下:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1280275/201712/1280275-20171225114445834-1102209979.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;检验器实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;required  必填校验器&lt;/span&gt;
&amp;lt;field-validator type=&quot;required&quot;&amp;gt;
       &amp;lt;message&amp;gt;性别不能为空!&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;requiredstring  必填字符串校验器&lt;/span&gt;
&amp;lt;field-validator type=&quot;requiredstring&quot;&amp;gt;
       &amp;lt;param name=&quot;trim&quot;&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/param&amp;gt;
       &amp;lt;message&amp;gt;用户名不能为空!&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;stringlength：字符串长度校验器&lt;/span&gt;
&amp;lt;field-validator type=&quot;stringlength&quot;&amp;gt;
    &amp;lt;param name=&quot;maxLength&quot;&amp;gt;10&amp;lt;/param&amp;gt;
    &amp;lt;param name=&quot;minLength&quot;&amp;gt;2&amp;lt;/param&amp;gt;
    &amp;lt;param name=&quot;trim&quot;&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/param&amp;gt;
    &amp;lt;message&amp;gt;&amp;lt;![CDATA[产品名称应在2-10个字符之间]]&amp;gt;&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int：整数校验器&lt;/span&gt;
&amp;lt;field-validator type=&quot;int&quot;&amp;gt;
    &amp;lt;param name=&quot;min&quot;&amp;gt;1&amp;lt;/param&amp;gt;
    &amp;lt;param name=&quot;max&quot;&amp;gt;150&amp;lt;/param&amp;gt;
    &amp;lt;message&amp;gt;年龄必须在1-150之间&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;date: 日期校验器&lt;/span&gt;
&amp;lt;field-validator type=&quot;date&quot;&amp;gt;
    &amp;lt;param name=&quot;min&quot;&amp;gt;1900-01-01&amp;lt;/param&amp;gt;
    &amp;lt;param name=&quot;max&quot;&amp;gt;2050-02-21&amp;lt;/param&amp;gt;
    &amp;lt;message&amp;gt;生日必须在${min}到${max}之间&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;url:  网络路径校验器&lt;/span&gt;
&amp;lt;field-validator type=&quot;url&quot;&amp;gt;
    &amp;lt;message&amp;gt;传智播客的主页地址必须是一个有效网址&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;email：邮件地址校验器&lt;/span&gt;
&amp;lt;field-validator type=&quot;email&quot;&amp;gt;
    &amp;lt;message&amp;gt;电子邮件地址无效&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;regex：正则表达式校验器&lt;/span&gt;
&amp;lt;field-validator type=&quot;regex&quot;&amp;gt;
     &amp;lt;param name=&quot;expression&quot;&amp;gt;&amp;lt;![CDATA[^13\d{9}$]]&amp;gt;&amp;lt;/param&amp;gt;
     &amp;lt;message&amp;gt;手机号格式不正确!&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;fieldexpression : 字段表达式校验&lt;/span&gt;
&amp;lt;field-validator type=&quot;fieldexpression&quot;&amp;gt;
       &amp;lt;param name=&quot;expression&quot;&amp;gt;&amp;lt;![CDATA[(password==repassword)]]&amp;gt;&amp;lt;/param&amp;gt;
       &amp;lt;message&amp;gt;两次密码输入不一致&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;指定action方法的XML配置方式&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;当校验文件的取名为&lt;span&gt;ActionClassName-validation.xml&lt;span&gt;时，会对 &lt;span&gt;action&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;中的所有处理方法实施输入验证。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果你只需要对action中的某个action方法实施校验，那么，校验文件的取名应为:ActionClassName-ActionName-validation.xml，其中ActionName为struts.xml中action的名称。例如：在实际应用中，常有以下配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;action name=&quot;user_*&quot; &lt;span&gt;class&lt;/span&gt;=&quot;cn.itcast.action.UserAction&quot; method=&quot;{1}&quot;&amp;gt;
    &amp;lt;result name=&quot;success&quot;&amp;gt;/WEB-INF/page/message.jsp&amp;lt;/result&amp;gt;
    &amp;lt;result name=&quot;input&quot;&amp;gt;/WEB-INF/page/addUser.jsp&amp;lt;/result&amp;gt;
&amp;lt;/action&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UserAction中有以下两个处理方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; String add() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
   ....
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String update() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
   ....
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要对add()方法实施验证，校验文件的取名为： UserAction-user_add-validation.xml&lt;/p&gt;
&lt;p&gt;要对update()方法实施验证，校验文件的取名为： UserAction-user_update-validation.xml&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基于XML校验的一些特点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当为某个action提供了ActionClassName-validation.xml和ActionClassName-ActionName-validation.xml两种规则的校验文件时，系统按下面顺序寻找校验文件：&lt;/p&gt;
&lt;p&gt;1 AconClassName-validation.xml&lt;/p&gt;
&lt;p&gt;2 ActionClassName-ActionName-validation.xml&lt;/p&gt;
&lt;p&gt;系统寻找到第一个校验文件时还会继续搜索后面的校验文件，当搜索到所有校验文件时，会把校验文件里的所有校验规则汇总，然后全部应用于处理方法的校验。如果两个校验文件中指定的校验规则冲突，则只使用后面文件中的校验规则。&lt;/p&gt;
&lt;p&gt;当action继承了另一个action，父类action的校验文件会先被搜索到。假设UserAction继承BaseAction， UserAction在struts.xml的配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;action name=&quot;user&quot; &lt;span&gt;class&lt;/span&gt;=&quot;cn.itcast.action.UserAction&quot; method=&quot;{1}&quot;&amp;gt;&lt;span&gt;

  .....

&lt;/span&gt;&amp;lt;/action&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问上面名为user的action，系统先搜索到BaseAction-validation.xml， BaseAction-user-validation.xml，接着搜索到UserAction-validation.xml， UserAction-user-validation.xml。校验规则是这四个文件的总和。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;自定义验证规则&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;6.5&quot;&gt;&lt;li&gt; 自定义验证程序必须实现Validator接口&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt; Validation 拦截器负责加载和执行各种验证程序. 在加载了一个验证程序之后, 这个拦截器将调用那个验证程序的 setValidatorContext 方法, 把当前的 ValidatorContext 对象传递给它, 这使程序员可以访问当前 Action. 接下来, Validation 拦截器将调用 validate 方法并把需要验证的对象传递给它. validate 方法是编写一个自定义的验证程序时需要覆盖的方法.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;ValidatorSupport 和 FieldValidatorSupport 实现了 Validator 接口     1.若需要普通的验证程序, 可以继承 ValidatorSupport 类 2.若需要字段验证程序, 可以继承 FieldValidatorSupport 类  3.若验证程序需要接受一个输入参数, 需要为这个参数增加一个相应的属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;注册验证程序: 自定义验证器需要在类路径里的某个&lt;br/&gt;validators.xml 文件里注册:验证框架首先在根目录src下找validators.xml文件,没找到validators.xml文件, 验证框架将调用默认的验证设置,即default.xml里面的配置信息.&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;位于com.opensymphony.xwork2.validator.validators 包下&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;举例:自定义一个 age 的验证器, 使 age 不能小于 0&lt;/p&gt;
&lt;p&gt;1 首先在jsp界面增加一个组件     &amp;lt;s:textfield name=&quot;age&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2 &lt;/span&gt;&lt;/span&gt;在action中增加private Integer age属性&lt;/p&gt;
&lt;p&gt;3 自定义验证规则&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AgeValidate &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FieldValidatorSupport {
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * object 表示当前执行的action对象
 *     object  cn.itcast.validate.ValidateXmlAction@12dcb8c
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; validate(Object object) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ValidationException {
  System.out.println(&lt;/span&gt;&quot;object  &quot;+&lt;span&gt;object);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取字段的名称  age&lt;/span&gt;
  String fieldName=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getFieldName();
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取字段的值&lt;/span&gt;
  Object fieldValue=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getFieldValue(fieldName, object);
  System.out.println(fieldName  &lt;/span&gt;+&quot;  &quot;+&lt;span&gt;fieldValue);
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(fieldValue &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Integer){
  Integer age&lt;/span&gt;=&lt;span&gt;(Integer)fieldValue;
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(age&amp;lt;0&lt;span&gt;){
         &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.addFieldError(fieldName, object);
  } }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4 在工程的src下新建validators.xml文件,在文件中增加如下内容   该xml文件采用的规范在xwork-core-2.1.6.jar包下的xwork-validator-config-1.0.dtd&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1280275/201712/1280275-20171225141328806-1221668672.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5 在ValidateXmlAction-validation.xml文件中增加如下内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1280275/201712/1280275-20171225141503665-299038469.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 25 Dec 2017 06:18:00 +0000</pubDate>
<dc:creator>熬过今夜还有明天</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/daweige/p/8109167.html</dc:identifier>
</item>
<item>
<title>C# 函数式编程 —— 使用 Lambda 表达式编写递归函数 - 不如隐茶去</title>
<link>http://www.cnblogs.com/JacZhu/p/8109162.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JacZhu/p/8109162.html</guid>
<description>&lt;p&gt;最近看了赵姐夫的这篇博客&lt;a href=&quot;http://blog.zhaojie.me/2009/08/recursive-lambda-expressions.html&quot; class=&quot;uri&quot;&gt;http://blog.zhaojie.me/2009/08/recursive-lambda-expressions.html&lt;/a&gt;，主要讲的是如何使用 Lambda 编写递归函数。其中提到了不动点组合子这个东西，这个概念来自于函数式编程的世界，直接理解起来可能有些困难，所以我们可以一起来尝试使用 Lambda 来编写递归函数，以此来探索不动点组合子的奥秘。在阅读过程中，我们可以使用“C# 交互窗口”或者 Xamarin WorkBook 来运行给出的代码，因为 Lambda 表达式中的变量，类型大多会被省略掉，直接阅读起来可能有些难懂。&lt;/p&gt;
&lt;p&gt;首先用常规手段写一个递归形式的阶乘&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;int facRec (int n)
{
    return n == 1 ? 1 : n * facRec(n - 1);
}
facRec(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么如何使用 Lambda 表示阶乘的递归形式呢？Lambda 是匿名函数，那么就不能直接在内部调用自己，不过函数的参数是可以有名字的，那么可以给这个 Lambda 添加一个函数参数，在调用的时候，就把这个 Lambda 自己作为参数传入，从而实现递归的效果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delegate Func&amp;lt;int, int&amp;gt; F(F self);

F fac = (F f) =&amp;gt; (int n) =&amp;gt; n == 1 ? 1 : n * f(f)(n - 1);

fac(fac)(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;您可能已经发现了，我没有把 F 定义为接受两个参数，第一个接受一个函数作为参数，第二个是要求阶乘的值，返回一个 int 结果的形式。这其实是一种函数式编程的做法——任何包含多个参数的函数都可以写成多个只包含一个参数的函数的组合的形式，我们把这种操作叫做“&lt;a href=&quot;https://baike.baidu.com/item/%E6%9F%AF%E9%87%8C%E5%8C%96&quot;&gt;柯里化&lt;/a&gt;”，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;int sum(int a, int b, int c)
{
    return a + b +c;
}
Func&amp;lt;int, Func&amp;lt;int ,int&amp;gt;&amp;gt; fSum(int a)
{
    return (int b) =&amp;gt;
    {
        return (int c) =&amp;gt;
        {
            return a + b + c;
        };
    };
}
sum(1,2,3) == fSum(1)(2)(3)
//true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然fSum的返回值类型看起来有些鬼畜，但是完全是 C# 自己的原因——不能自动推断方法的返回值类型。&lt;/p&gt;
&lt;p&gt;接着回到我们的探索过程，注意到第3行出现了&lt;code&gt;f(f)&lt;/code&gt;这样的东西，那么可以把这种表达式提取出来，作为参数传入。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fac = (F f) =&amp;gt; (int n) =&amp;gt;
{
    Func&amp;lt;Func&amp;lt;int,int&amp;gt;, Func&amp;lt;int,int&amp;gt;&amp;gt; tmp = (Func&amp;lt;int,int&amp;gt; g) =&amp;gt;
    {
        return (int h) =&amp;gt;
        {
            if(h == 1)
                return 1;
            else
            {
                return h * g(h - 1);
            }
        };
    };
    return tmp(f(f))(n);
};

fac(fac)(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在，可以看到第 5 行返回的函数看起来挺像我们最开始定义的普通形式的递归阶乘，何不尝试将其提取出来，然后在 fac 中调用。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Func&amp;lt;Func&amp;lt;int, int&amp;gt;, Func&amp;lt;int, int&amp;gt;&amp;gt; fac0 = (Func&amp;lt;int, int&amp;gt; g) =&amp;gt;
{
    return (int h) =&amp;gt;
    {
        if(h == 1)
            return 1;
        else    
        {
            return h * g(h - 1);
        }
    };
};
fac = (F f) =&amp;gt; (int n) =&amp;gt;
{
    return fac0(f(f))(n);
};
fac(fac)(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这下我们的 fac 函数就变得简短了很多，但是其中仍引用了一个在外部定义的函数，这让他变得不够“&lt;a href=&quot;https://www.h5jun.com/post/pure-function.html&quot;&gt;纯&lt;/a&gt;”，所以可以把这个函数作为参数传入&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delegate F NewF(Func&amp;lt;Func&amp;lt;int, int&amp;gt;, Func&amp;lt;int, int&amp;gt;&amp;gt;  g);

NewF newFac = g =&amp;gt;
{
    return (F f) =&amp;gt; (int n) =&amp;gt; g( f(f) )(n);
};

// 等价于
newFac = g =&amp;gt; f =&amp;gt; n =&amp;gt; g(f(f))(n);

newFac(fac0)(newFac(fac0))(5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重复的东西又出现了，可以把&lt;code&gt;newFac(fac0)&lt;/code&gt;提取出来，这样的话就需要一个接受 &lt;code&gt;F&lt;/code&gt; 类型函数并返回一个 &lt;code&gt;Func&amp;lt;int, int&amp;gt;&lt;/code&gt; 类型函数的东西——其实就是前面定义的 &lt;code&gt;F&lt;/code&gt; 啦~&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;F sF = f =&amp;gt; f(f);

sF(newFac(fac0))(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在接着尝试把&lt;code&gt;fac0&lt;/code&gt;从两层括号中解放出来，以实现柯里化。所以首先就需要定义一个接受跟&lt;code&gt;newFac&lt;/code&gt;类型相同的委托作为参数，并返回一个委托，这个返回的委托接受一个参数，参数类型与 &lt;code&gt;fac0&lt;/code&gt; 相同。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delegate Func&amp;lt;Func&amp;lt;Func&amp;lt;int, int&amp;gt;, Func&amp;lt;int, int&amp;gt;&amp;gt;, Func&amp;lt;int,int&amp;gt;&amp;gt; NewSF(NewF newF);

NewSF newSF = newF =&amp;gt;
{
    return (Func&amp;lt;Func&amp;lt;int, int&amp;gt;, Func&amp;lt;int, int&amp;gt;&amp;gt; g) =&amp;gt;
    {
        var f = newF(g);
        return f(f);
    };
};

newSF(newFac)(fac0)(5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;newF&lt;/code&gt; 是一个 &lt;code&gt;NewF&lt;/code&gt; 类型的委托，返回值的类型是 &lt;code&gt;F&lt;/code&gt;。注意到 &lt;code&gt;newFac = g =&amp;gt; f =&amp;gt; n =&amp;gt; g(f(f))(n)&lt;/code&gt;，这是一个纯函数，可以直接代入到&lt;code&gt;newSF&lt;/code&gt;之中，所以上面的&lt;code&gt;newSF&lt;/code&gt;可以进一步化简。首先用泛型化简 &lt;code&gt;g&lt;/code&gt; 的类型，在泛型的特例化之后，&lt;code&gt;g&lt;/code&gt; 的类型跟上面的 &lt;code&gt;newSF&lt;/code&gt; 里面的 &lt;code&gt;g&lt;/code&gt; 的类型其实是一样的。&lt;code&gt;newSF&lt;/code&gt;的参数 &lt;code&gt;newF&lt;/code&gt; 可以代换为 &lt;code&gt;newFac&lt;/code&gt;，&lt;code&gt;newFac(g)&lt;/code&gt; 的结果类型是 &lt;code&gt;F&lt;/code&gt; ，也就是上面的 &lt;code&gt;f&lt;/code&gt;，因为 &lt;code&gt;f&lt;/code&gt; 需要把自身作为参数，所以就重新把 &lt;code&gt;newFac(g)&lt;/code&gt; 作为参数传给 &lt;code&gt;newFac(g)&lt;/code&gt; 返回的委托。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delegate T Y&amp;lt;T&amp;gt;(Func&amp;lt;T, T&amp;gt; g);

Y&amp;lt;Func&amp;lt;int, int&amp;gt;&amp;gt; y = g =&amp;gt;
{
    return n =&amp;gt;
    {
        return newFac(g)(newFac(g))(n);
    };
};

y(fac0)(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还记得我们得出 &lt;code&gt;sF&lt;/code&gt; 的过程吗？接着把上面的 &lt;code&gt;y&lt;/code&gt; 化简一下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;y = g =&amp;gt;
{
    return n =&amp;gt;
    {
        return sF(newFac(g))(n);
    };
};
y(fac0)(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后写的紧凑一些&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;y = g =&amp;gt; n =&amp;gt; sF(newFac(g))(n);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看看我们现在得到的成果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sF = f =&amp;gt; f(f);
newFac = g =&amp;gt; f =&amp;gt; n =&amp;gt; g(f(f))(n);
y = g =&amp;gt; n =&amp;gt; sF(newFac(g))(n);
y(fac0)(5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于 C# 并不是一门函数式的语言，Lambda 表达式不能直接调用，必须要转换成委托类型才可以直接调用，所以导致了 &lt;code&gt;y&lt;/code&gt; 函数依赖另外两个函数，不过由于依赖的两个函数都是纯函数，所以没啥影响。但是上面的式子仍可继续简化，下面我把 &lt;code&gt;newFac&lt;/code&gt; 定义在 y 表达式的内部：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;y = g =&amp;gt;
{
    return n =&amp;gt;
    {
        NewF localNewFac = localG =&amp;gt; f =&amp;gt; localN =&amp;gt; localG(f(f))(localN);
        return sF(localNewFac(g))(n);
    };
};
y(fac0)(5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到 &lt;code&gt;localNewFac&lt;/code&gt; 接受一个 &lt;code&gt;localG&lt;/code&gt; 作为参数，然后返回一个 lambda 表达式，然后在第6行把 &lt;code&gt;g&lt;/code&gt; 作为了实参传递给 &lt;code&gt;localNewFac&lt;/code&gt;，这么看来，&lt;code&gt;localNewFac&lt;/code&gt; 其实没必要接受一个 &lt;code&gt;localG&lt;/code&gt; 作为参数，只要在闭包中捕获外部的变量 &lt;code&gt;g&lt;/code&gt; 就好了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;y = g =&amp;gt;
{
    return n =&amp;gt;
    {
        F localF = f =&amp;gt; localN =&amp;gt; g(f(f))(localN);
        return sF(localF)(n);
    };
};
y(fac0)(5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于有 &lt;code&gt;sF&lt;/code&gt; 的存在，编译器就有能力推断 &lt;code&gt;sF&lt;/code&gt; 的参数类型，上面的代码就可以简化为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;y = g =&amp;gt;
{
    return n =&amp;gt;
    {
        return sF(f =&amp;gt; localN =&amp;gt; g(f(f))(localN))(n);
    };
};
y(fac0)(5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在，我们就可以得到下面两个式子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sF = f =&amp;gt; f(f);
y = g =&amp;gt; n =&amp;gt; sF (f =&amp;gt; m =&amp;gt; g(f(f)) (m)) (n);
y(fac0)(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在来重新审视一下 &lt;code&gt;fac0&lt;/code&gt; 的类型，可以将其定义为下面的样子&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delegate T FT&amp;lt;T&amp;gt;(T f);

FT&amp;lt;Func&amp;lt;int, int&amp;gt;&amp;gt; newFac0 = (Func&amp;lt;int, int&amp;gt; f) =&amp;gt; n =&amp;gt; n == 1 ? 1 : n * f(n - 1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;忽略类型不看的话，这个 &lt;code&gt;newFac0&lt;/code&gt; 跟最开始定义的 &lt;code&gt;fac&lt;/code&gt; 简直一模一样！接下来就重新定义一下 &lt;code&gt;Y&lt;/code&gt; 的类型，使其能与 &lt;code&gt;FT&lt;/code&gt; 类型兼容：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delegate T YT&amp;lt;T&amp;gt; (FT&amp;lt;T&amp;gt; f);
delegate T SFT&amp;lt;T&amp;gt; (SFT&amp;lt;T&amp;gt; f);
SFT&amp;lt;Func&amp;lt;int, int&amp;gt;&amp;gt; sFT = f =&amp;gt; f(f);
YT&amp;lt;Func&amp;lt;int, int&amp;gt;&amp;gt; yt = g =&amp;gt; n =&amp;gt; sFT (f =&amp;gt; m =&amp;gt; g(f(f)) (m)) (n);

yt(newFac0)(5)
// 120&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SFT&lt;/code&gt; 是一个辅助类型，因为 C# 里面不能直接调用 &lt;code&gt;f =&amp;gt; f(f)&lt;/code&gt; 这样的表达式。&lt;code&gt;FT&lt;/code&gt; 是一个泛型的递归表达式的类型，可以用来定义任意的有递归能力的 Lambda。&lt;code&gt;YT&lt;/code&gt; 定义了一个高阶函数的类型，可以用来递归调用一个匿名函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yt(f =&amp;gt; n =&amp;gt; n == 1 ? 1 : n * f(n - 1))(5)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再回过头去看最开始 &lt;code&gt;fac&lt;/code&gt; 的使用方式： &lt;code&gt;fac(fac)(5)&lt;/code&gt;，如果我们把 &lt;code&gt;fac&lt;/code&gt; 跟 &lt;code&gt;newFac0&lt;/code&gt; 表示的 Lambda 表达式叫做 &lt;code&gt;fn(f)&lt;/code&gt;，其中 &lt;code&gt;f = fn(f)&lt;/code&gt;，这里出现了递归的定义，毕竟 &lt;code&gt;fac&lt;/code&gt; 表示的是一个递归函数。也就是说 &lt;code&gt;f&lt;/code&gt; 被 &lt;code&gt;fn&lt;/code&gt; 这个函数映射到了自身，这在数学上叫做“不动点”，例如 &lt;code&gt;f(x) = x^2&lt;/code&gt;, 那么 &lt;code&gt;x = 1&lt;/code&gt; 时，&lt;code&gt;f(1) = 1&lt;/code&gt;，那么 &lt;code&gt;x&lt;/code&gt; 就是函数 &lt;code&gt;f&lt;/code&gt; 的一个不动点。&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;yt(fn(f)) = fn(fn(f)) = fn(f) = f&lt;/code&gt; &lt;em&gt;好吧，其实这里我也有些混乱了&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;yt(fn)&lt;/code&gt; 这个函数计算出了函数 &lt;code&gt;fn(x)&lt;/code&gt; 一个不动点，也就是 &lt;code&gt;f&lt;/code&gt; ，人们就把 &lt;code&gt;yt&lt;/code&gt; 称为 不动点算子(factor) 也就是 Y Combinator。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cassite.net/2017/09/09/y-combinator-derivation/&quot; class=&quot;uri&quot;&gt;https://blog.cassite.net/2017/09/09/y-combinator-derivation/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 06:17:00 +0000</pubDate>
<dc:creator>不如隐茶去</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JacZhu/p/8109162.html</dc:identifier>
</item>
<item>
<title>thinkphp5基础 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8107815.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8107815.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　ThinkPHP是一个免费开源的，快速、简单的面向对象的轻量级PHP开发框架，是为了敏捷WEB应用开发和简化企业应用开发而诞生的。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。遵循&lt;code&gt;Apache2&lt;/code&gt;开源许可协议发布，意味着可以免费使用ThinkPHP，甚至允许把基于ThinkPHP开发的应用开源或商业产品发布/销售。ThinkPHP5.0版本是一个颠覆和重构版本，采用全新的架构思想，引入了更多的PHP新特性，优化了核心，减少了依赖，实现了真正的惰性加载，支持composer，并针对API开发做了大量的优化，包括路由、日志、异常、模型、数据库、模板引擎和验证等模块都已经重构，不适合原有3.2项目的升级，但绝对是新项目的首选&lt;/p&gt;

&lt;h3&gt;目录结构&lt;/h3&gt;
&lt;p&gt;　　thinkphp5安装完成后，初始目录结构如下所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;www  WEB部署目录（或者子目录）
├─application           应用目录
│  ├─common             公共模块目录（可以更改）
│  ├─module_name        模块目录
│  │  ├─config.php      模块配置文件
│  │  ├─common.php      模块函数文件
│  │  ├─controller      控制器目录
│  │  ├─model           模型目录
│  │  ├─view            视图目录
│  │  └─ ...            更多类库目录
│  │
│  ├─command.php        命令行工具配置文件
│  ├─common.php         公共函数文件
│  ├─config.php         公共配置文件
│  ├─route.php          路由配置文件
│  ├─tags.php           应用行为扩展定义文件
│  └─database.php       数据库配置文件
│
├─&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;                WEB目录（对外访问目录）
│  ├─index.php          入口文件
│  ├─router.php         快速测试文件
│  └─.htaccess          用于apache的重写
│
├─thinkphp              框架系统目录
│  ├─lang               语言文件目录
│  ├─library            框架类库目录
│  │  ├─think           Think类库包目录
│  │  └─traits          系统Trait目录
│  │
│  ├─tpl                系统模板目录
│  ├─&lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.php           基础定义文件
│  ├─console.php        控制台入口文件
│  ├─convention.php     框架惯例配置文件
│  ├─helper.php         助手函数文件
│  ├─phpunit.xml        phpunit配置文件
│  └─start.php          框架入口文件
│
├─extend                扩展类库目录
├─runtime               应用的运行时目录（可写，可定制）
├─vendor                第三方类库目录（Composer依赖库）
├─build.php             自动生成定义文件（参考）
├─composer.json         composer 定义文件
├─LICENSE.txt           授权说明文件
├─README.md             README 文件
├─think                 命令行入口文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;开发规范&lt;/h3&gt;
&lt;p&gt;【目录和文件】&lt;/p&gt;
&lt;p&gt;　　1、目录不强制规范，驼峰和小写+下划线模式均支持&lt;/p&gt;
&lt;p&gt;　　2、类库、函数文件统一以&lt;code&gt;.php&lt;/code&gt;为后缀&lt;/p&gt;
&lt;p&gt;　　3、类的文件名均以命名空间定义，并且命名空间的路径和类库文件所在路径一致&lt;/p&gt;
&lt;p&gt;　　4、类名和类文件名保持一致，统一采用驼峰法命名（首字母大写）&lt;/p&gt;
&lt;p&gt;【函数和类、属性命名】&lt;/p&gt;
&lt;p&gt;　　1、类的命名采用驼峰法，并且首字母大写，例如 &lt;code&gt;User&lt;/code&gt;、&lt;code&gt;UserType&lt;/code&gt;，默认不需要添加后缀，例如&lt;code&gt;UserController&lt;/code&gt;应该直接命名为&lt;code&gt;User&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　2、函数的命名使用小写字母和下划线（小写字母开头）的方式，例如 &lt;code&gt;get_client_ip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　3、方法的命名使用驼峰法，并且首字母小写，例如 &lt;code&gt;getUserName&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　4、属性的命名使用驼峰法，并且首字母小写，例如 &lt;code&gt;tableName&lt;/code&gt;、&lt;code&gt;instance&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　5、以双下划线“__”打头的函数或方法作为魔法方法，例如 &lt;code&gt;__call&lt;/code&gt; 和 &lt;code&gt;__autoload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;【常量和配置】&lt;/p&gt;
&lt;p&gt;　　1、常量以大写字母和下划线命名，例如 &lt;code&gt;APP_PATH&lt;/code&gt;和 &lt;code&gt;THINK_PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　2、配置参数以小写字母和下划线命名，例如 &lt;code&gt;url_route_on&lt;/code&gt; 和&lt;code&gt;url_convert&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;【数据表和字段】&lt;/p&gt;
&lt;p&gt;　　1、数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 &lt;code&gt;think_user&lt;/code&gt; 表和 &lt;code&gt;user_name&lt;/code&gt;字段，不建议使用驼峰和中文作为数据表字段命名&lt;/p&gt;

&lt;h3&gt;常见概念&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;　　ThinkPHP5.0&lt;/code&gt;应用基于&lt;code&gt;MVC&lt;/code&gt;（模型-视图-控制器）的方式来组织。下面是一些常见概念&lt;/p&gt;
&lt;p&gt;【入口文件】&lt;/p&gt;
&lt;p&gt;　　用户请求的PHP文件，负责处理一个请求（注意，不一定是URL请求）的生命周期，最常见的入口文件就是&lt;code&gt;index.php&lt;/code&gt;，有时候也会为了某些特殊的需求而增加新的入口文件，例如给后台模块单独设置的一个入口文件&lt;code&gt;admin.php&lt;/code&gt;或者一个控制器程序入口&lt;code&gt;think&lt;/code&gt;都属于入口文件&lt;/p&gt;
&lt;p&gt;【应用】&lt;/p&gt;
&lt;p&gt;　　应用在&lt;code&gt;ThinkPHP&lt;/code&gt;中是一个管理系统架构及生命周期的对象，由系统的 &lt;code&gt;\think\App&lt;/code&gt;类完成，应用通常在入口文件中被调用和执行，具有相同的应用目录（&lt;code&gt;APP_PATH&lt;/code&gt;）的应用我们认为是同一个应用，但一个应用可能存在多个入口文件。应用具有自己独立的配置文件、公共（函数）文件&lt;/p&gt;
&lt;p&gt;【模块】&lt;/p&gt;
&lt;p&gt;　　一个典型的应用是由多个模块组成的，这些模块通常都是应用目录下面的一个子目录，每个模块都有自己独立的配置文件、公共文件和类库文件&lt;/p&gt;
&lt;p&gt;【控制器】&lt;/p&gt;
&lt;p&gt;　　每个模块拥有独立的&lt;code&gt;MVC&lt;/code&gt;类库及配置文件，一个模块下面有多个控制器负责响应请求，而每个控制器其实就是一个独立的控制器类。&lt;/p&gt;
&lt;p&gt;　　控制器主要负责请求的接收，并调用相关的模型处理，并最终通过视图输出。严格来说，控制器不应该过多的介入业务逻辑处理&lt;/p&gt;
&lt;p&gt;　　一个典型的&lt;code&gt;Index&lt;/code&gt;控制器类如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function index()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello,thinkphp!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【操作】&lt;/p&gt;
&lt;p&gt;　　一个控制器包含多个操作（方法），操作方法是一个URL访问的最小单元。&lt;/p&gt;
&lt;p&gt;　　下面是一个典型的&lt;code&gt;Index&lt;/code&gt;控制器的操作方法定义，包含了两个操作方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function index()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function hello($name)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.$name;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　操作方法可以不使用任何参数，如果定义了一个非可选参数，则该参数必须通过用户请求传入，如果是URL请求，则通常是&lt;code&gt;$_GET&lt;/code&gt;或者&lt;code&gt;$_POST&lt;/code&gt;方式传入&lt;/p&gt;
&lt;p&gt;【模型】&lt;/p&gt;
&lt;p&gt;　　模型类通常完成实际的业务逻辑和数据封装，并返回和格式无关的数据&lt;/p&gt;
&lt;p&gt;【视图】&lt;/p&gt;
&lt;p&gt;　　控制器调用模型类后返回的数据通过视图组装成不同格式的输出。视图根据不同的需求，来决定调用模板引擎进行内容解析后输出还是直接输出。&lt;/p&gt;
&lt;p&gt;　　视图通常会有一系列的模板文件对应不同的控制器和操作方法，并且支持动态设置模板目录&lt;/p&gt;
&lt;p&gt;【驱动】&lt;/p&gt;
&lt;p&gt;　　系统很多的组件都采用驱动式设计，从而可以更灵活的扩展，驱动类的位置默认是放入核心类库目录下面，也可以重新定义驱动类库的命名空间而改变驱动的文件位置&lt;/p&gt;
&lt;p&gt;【行为】&lt;/p&gt;
&lt;p&gt;　　行为（Behavior）是在预先定义好的一个应用位置执行的一些操作。类似于&lt;code&gt;AOP&lt;/code&gt;编程中的“切面”的概念，给某一个切面绑定相关行为就成了一种类&lt;code&gt;AOP&lt;/code&gt;编程的思想。所以，行为通常是和某个位置相关，行为的执行时间依赖于绑定到了哪个位置上。&lt;/p&gt;
&lt;p&gt;　　要执行行为，首先要在应用程序中进行行为侦听，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在app_init位置侦听行为&lt;/span&gt;
\think\Hook::listen(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app_init&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后对某个位置进行行为绑定：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绑定行为到app_init位置&lt;/span&gt;
\think\Hook::add(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app_init&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\app\index\behavior\Test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　一个位置上如果绑定了多个行为的，按照绑定的顺序依次执行，除非遇到中断&lt;/p&gt;
&lt;p&gt;【命名空间】&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　ThinkPHP5&lt;/code&gt;采用了&lt;code&gt;PHP&lt;/code&gt;的命名空间进行类库文件的设计和规划，并且符合&lt;code&gt;PSR-4&lt;/code&gt;的自动加载规范、&lt;/p&gt;

&lt;h3&gt;入口文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;　　ThinkPHP5.0&lt;/code&gt;版本的默认自带的入口文件位于&lt;code&gt;public/index.php&lt;/code&gt;（实际部署的时候&lt;code&gt;public&lt;/code&gt;目录为应用对外访问目录），入口文件内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义应用目录&lt;/span&gt;
define(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;APP_PATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, __DIR__ . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/../application/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加载框架引导文件&lt;/span&gt;
require __DIR__ . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/../thinkphp/start.php&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这段代码的作用就是定义应用目录&lt;code&gt;APP_PATH&lt;/code&gt;和加载&lt;code&gt;ThinkPHP&lt;/code&gt;框架的入口文件，这是所有基于&lt;code&gt;ThinkPHP&lt;/code&gt;开发应用的第一步&lt;/p&gt;
&lt;p&gt;　　官方提供的默认应用的实际目录结构和说明如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;├─application           应用目录（可设置）
│  ├─index              模块目录(可更改)
│  │  ├─config.php      模块配置文件
│  │  ├─common.php      模块公共文件
│  │  ├─controller      控制器目录
│  │  ├─model           模型目录
│  │  └─view            视图目录
│  │
│  ├─command.php        命令行工具配置文件
│  ├─common.php         应用公共文件
│  ├─config.php         应用配置文件
│  ├─tags.php           应用行为扩展定义文件
│  ├─database.php       数据库配置文件
│  └─route.php          路由配置文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;　　5.0&lt;/code&gt;版本采用模块化的设计架构，默认的应用目录下面只有一个&lt;code&gt;index&lt;/code&gt;模块目录，如果要添加新的模块可以使用控制台命令来生成。&lt;/p&gt;
&lt;p&gt;　　切换到命令行模式下，进入到应用根目录并执行如下指令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
php think build --module demo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　就会生成一个默认的demo模块，包括如下目录结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;├─demo   
│  ├─controller      控制器目录
│  ├─model           模型目录
│  ├─view            视图目录
│  ├─config.php      模块配置文件
│  └─common.php      模块公共文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　同时也会生成一个默认的&lt;code&gt;Index&lt;/code&gt;控制器文件&lt;/p&gt;

&lt;h3&gt;资源访问&lt;/h3&gt;
&lt;p&gt;　　网站的资源文件访问不会影响正常的操作访问，只有当访问的资源文件不存在的时候才会解析到入口文件，一般就会提示模块不存在的错误。&lt;/p&gt;
&lt;p&gt;　　网站的资源文件一般放入&lt;code&gt;public&lt;/code&gt;目录的子目录下面，例如下面是一个建议规范：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt;
├─index.php       应用入口文件
├─&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt;                静态资源目录   
│  ├─css      样式目录
│  ├─js         脚本目录
│  └─img      图像目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　访问资源文件的URL路径是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/static/css/style.css&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/static/js/common.js&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/static/img/picture.jpg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果没有设置域名绑定，而是使用子目录方式访问的话，那么可能的资源访问地址是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/public/static/css/style.css&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/public/static/js/common.js&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/public/static/img/picture.jpg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;调试模式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;　　ThinkPHP&lt;/code&gt;支持调试模式，默认情况下是开启状态（&lt;code&gt;5.0.10+&lt;/code&gt;版本开始，默认关闭调试模式，需要自己开启）。调试模式以除错方便优先，而且在异常的时候可以显示尽可能多的信息，所以对性能有一定的影响。&lt;/p&gt;
&lt;p&gt;　　强烈建议开发者在使用&lt;code&gt;ThinkPHP&lt;/code&gt;开发的过程中使用调试模式，&lt;code&gt;5.0&lt;/code&gt;默认情况下可以捕获到任何细微的错误并抛出异常，这样可以更好的获取错误提示和避免一些问题和隐患，不要畏惧错误，要勇敢面对，并消除隐患。&lt;/p&gt;
&lt;p&gt;　　开发完成后，实际进行项目部署的时候，修改应用配置文件（&lt;code&gt;application/config.php&lt;/code&gt;）中的&lt;code&gt;app_debug&lt;/code&gt;配置参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭调试模式&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app_debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt;  &lt;span&gt;false&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;控制器&lt;/h3&gt;
&lt;p&gt;　　找到&lt;code&gt;index&lt;/code&gt;模块的&lt;code&gt;Index&lt;/code&gt;控制器（文件位于&lt;code&gt;application/index/controller/Index.php&lt;/code&gt; 注意大小写），把&lt;code&gt;Index&lt;/code&gt;控制器类的&lt;code&gt;index&lt;/code&gt;方法修改为&lt;code&gt;Hello,World！&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function index()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,World！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　访问URL地址时，就会看到&lt;code&gt;Hello,World！&lt;/code&gt;的输出结果&lt;/p&gt;
&lt;p&gt;　　如果要访问一个驼峰命名的控制器，例如我们把上面的例子改成一个&lt;code&gt;HelloWorld&lt;/code&gt;控制器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloWorld
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; function index($name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　默认情况下正确的方法是使用下面的URL进行访问&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/hello_world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面的访问地址是错误的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/HelloWorld&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因为默认的URL访问是不区分大小写的，全部都会转换为小写的控制器名，除非在应用配置文件中，设置了关闭url自动转换如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;url_convert&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; =&amp;gt; &lt;span&gt;false&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　那么就可以正常访问&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/HelloWorld&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果要继承一个公共的控制器类，可以使用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;

use app\index\controller\Base;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index extends Base
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function index()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,World！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以为操作方法定义参数，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; function index($name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; . $name . &lt;span&gt;'&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当带&lt;code&gt;name&lt;/code&gt;参数访问入口文件地址（例如 &lt;code&gt;http://tp5.com?name=ThinkPHP&lt;/code&gt;）的时候，在浏览器中可以看到如下输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
Hello,ThinkPHP！
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　控制器类可以包括多个操作方法，但如果操作方法是&lt;code&gt;protected&lt;/code&gt;或者&lt;code&gt;private&lt;/code&gt;类型的话，是无法直接通过URL访问到该操作的，也就是说只有&lt;code&gt;public&lt;/code&gt;类型的操作方法才是可以通过URL访问的。&lt;/p&gt;
&lt;p&gt;　　下面来验证下，把&lt;code&gt;Index&lt;/code&gt;控制器类的方法修改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function hello()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello,thinkphp!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function test()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;这是一个测试方法!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; function hello2()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;只是protected方法!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; function hello3()
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;这是private方法!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当我们访问如下URL地址的时候，前面两个是正常访问，后面两个则会显示异常&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/test&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello2&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;视图&lt;/h3&gt;
&lt;p&gt;　　现在我们在给控制器添加视图文件功能，我们在&lt;code&gt;application/index&lt;/code&gt;目录下面创建一个&lt;code&gt;view&lt;/code&gt;目录，然后添加模板文件&lt;code&gt;view/index/hello.html&lt;/code&gt;（注意大小写），我们添加模板内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;hello {$name}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&lt;span&gt;
    hello, {$name}&lt;/span&gt;!
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　要输出视图，必须在控制器方法中进行模板渲染输出操作，现在修改控制器类如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;

use think\Controller;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index extends Controller
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; function hello($name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    {
        $&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;-&amp;gt;assign(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, $name);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;fetch();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　[注意]如果没有使用&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;use &lt;span class=&quot;hljs-title&quot;&gt;think\&lt;span class=&quot;hljs-title&quot;&gt;Controller;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;就必须使用&lt;code&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;Index &lt;span class=&quot;hljs-keyword&quot;&gt;extends &lt;span class=&quot;hljs-title&quot;&gt;\think\Controller&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　Index&lt;/code&gt;控制器类继承了 &lt;code&gt;think\Controller&lt;/code&gt;类之后，我们可以直接使用封装好的&lt;code&gt;assign&lt;/code&gt;和&lt;code&gt;fetch&lt;/code&gt;方法进行模板变量赋值和渲染输出。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　fetch&lt;/code&gt;方法中我们没有指定任何模板，所以按照系统默认的规则（视图目录/控制器/操作方法）输出了&lt;code&gt;view/index/hello.html&lt;/code&gt;模板文件。&lt;/p&gt;
&lt;p&gt;　　接下来，我们在浏览器访问&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;tp5.com/index.php/index/index/hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
hello,thinkphp!
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;读取数据&lt;/h3&gt;
&lt;p&gt;　　在开始之前，我们首先在数据库&lt;code&gt;demo&lt;/code&gt;中创建一个&lt;code&gt;think_data&lt;/code&gt;数据表（这里以&lt;code&gt;mysql&lt;/code&gt;数据库为例）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE IF NOT EXISTS `think_data`(
    `id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;8&lt;/span&gt;&lt;span&gt;) unsigned NOT NULL AUTO_INCREMENT,
    `data` varchar(&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;&lt;span&gt;) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE&lt;/span&gt;=MyISAM  DEFAULT CHARSET=&lt;span&gt;utf8 ;

INSERT INTO `think_data`(`id`,`data`) VALUES
(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;thinkphp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;php&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;framework&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先我们需要在应用的数据库配置文件&lt;code&gt;application/database.php&lt;/code&gt;中添加数据库的连接信息如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库类型&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;        =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 服务器地址&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hostname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库名&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;database&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库用户名&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库密码&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    =&amp;gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库连接端口&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hostport&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    =&amp;gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库连接参数&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;params&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;      =&amp;gt;&lt;span&gt; [],
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库编码默认采用utf8&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库表前缀&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;      =&amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;think_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据库调试模式&lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;       =&amp;gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来，我们修改下控制器方法，添加读取数据的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; app\index\controller;

use think\Controller;
use think\Db;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Index extends Controller
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; function index()
    {
        $data &lt;/span&gt;= Db::name(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)-&amp;gt;&lt;span&gt;find();
        $&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;-&amp;gt;assign(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, $data);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;fetch();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　定义好控制器后，我们修改模板文件，添加数据输出标签如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&lt;span&gt;
{$result.id}&lt;/span&gt;--&lt;span&gt;{$result.data}
&lt;/span&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　模板标签的用法和&lt;code&gt;Smarty&lt;/code&gt;类似，就是用于输出数据的字段，这里就表示输出&lt;code&gt;think_data&lt;/code&gt;表的&lt;code&gt;id&lt;/code&gt;和&lt;code&gt;data&lt;/code&gt;字段的值。&lt;/p&gt;
&lt;p&gt;　　我们访问会输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;--thinkphp
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 25 Dec 2017 06:10:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8107815.html</dc:identifier>
</item>
<item>
<title>C#设计模式之二十一职责链模式（Chain of Responsibility Pattern）【行为型】 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/8109100.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/8109100.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   今天我们开始讲“行为型”设计模式的第八个模式，该模式是【职责链模式】，英文名称是：Chain of Responsibility Pattern。让我们看看现实生活中的例子吧，理解起来可能更容易。我们看看某公司的采购流程吧。某公司的规章制度规定，采购原材料的总价在5万之内，只需要经理级别的人批准即可，采购总价大于5万小于10万的则需要财务经理进行批准，总价大于10万小于30万的需要总经理批准，而总价大于30万的则需要通过董事会会议讨论决定。对于这样一个需求，最直接的方法就是设计一个方法，该方法接受的参数是采购的总价，然后在这个方法内对价格进行判断，然后针对不同的条件交给不同级别的角色去处理，如果情况就是这样，不变了，这样做很好，没问题。如果我们又有新的条件要增加该怎么办呢？我们不得不去修改原来设计的方法来再添加一个条件判断，让本已多重if-else判断语句更多了，这样的设计显然违背了“开放-关闭”原则。这时候，我们可以采用职责链模式来解决这样的问题。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;二、职责链模式的详细介绍&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.1、动机（Motivate）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   在软件构建过程中，一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接受者，如果显示指定，将必不可少地带来请求发送者与接受者的紧耦合。如何使请求的发送者不需要指定具体的接受者，让请求的接受者自己在运行时决定来处理请求，从而使两者解耦。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2、意图（Intent）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   避免请求发送者与接收者耦合在一起，让多个对象都有可能接受请求，将这些对象连接成一条链，并且沿着这条链传递请求，知道有对象处理它为止。　　　　　　                                ——《设计模式》GoF&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.3、结构图（Structure）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;      &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201712/1048776-20171225140403040-197033143.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.4、模式的组成&lt;/strong&gt;&lt;br/&gt;    &lt;br/&gt;    可以看出，在职责链模式的结构图有以下角色：&lt;/p&gt;&lt;p&gt;    &lt;strong&gt;（1）、抽象处理者角色（Handler）&lt;/strong&gt;：抽象处理者定义了一个处理请求的接口，它一般设计为抽象类，由于不同的具体处理者处理请求的方式不同，因此在其中定义了抽象请求处理方法。因为每一个处理者的下家还是一个处理者，因此在抽象处理者中定义了一个自类型的对象，作为其对下家的引用。通过该引用，处理者可以连成一条链。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;    （2）、具体处理者角色（ConcreteHandler）&lt;/strong&gt;：具体处理者是抽象处理者的子类，它可以处理用户请求，在具体处理者类中实现了抽象处理者中定义的抽象处理方法，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者；在具体处理者中可以访问链中下一个对象，以便请求的转发。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.5、职责链模式的代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    在现实生活中，职责链模式的例子也是很多的，例如：公司的请假流程就是一个很好的职责链模式的例子，如果请假半天，只要告诉本部门经理就可以了；如果请假7天或者以上必须人事总监批准；如果请假15天以上，那就要经过总裁批准了。还有类似的例子就是采购的流程，其流程也是职责链模式很好的体现，采购的金额不同，需要批准的人员也不同，比如：部门采购1万元的纸品，只要部门领导签批就可以，如果要采购大于1万小于5万的物品，那就需要财务经理签批了，如果采购30万的原材料或者物品，那就需要总裁或者类似角色才能审批了。接下来我们就以采购的实例来说明职责链模式。实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ChainOfResponsibility
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 采购请求&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PurchaseRequest
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 金额&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; Amount { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 产品名字&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ProductName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; PurchaseRequest(&lt;span&gt;double&lt;/span&gt; amount, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; productName)
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;             Amount =&lt;span&gt; amount;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;             ProductName =&lt;span&gt; productName;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;  
&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;抽象审批人,Handler---相当于“抽象处理者角色”&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Approver
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;下一位审批人，由此形成一条链&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Approver NextApprover { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;审批人的名称&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Approver(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name)
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.Name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理请求&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ProcessRequest(PurchaseRequest request);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;  
&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;部门经理----相当于“具体处理者角色” ConcreteHandler&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Manager : Approver
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Manager(&lt;span&gt;string&lt;/span&gt; name): &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(name){ }
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;  
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ProcessRequest(PurchaseRequest request)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (request.Amount &amp;lt;= &lt;span&gt;10000.0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;                 Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0} 部门经理批准了对原材料{1}的采购计划！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Name, request.ProductName);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (NextApprover != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;                NextApprover.ProcessRequest(request);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;  
&lt;span&gt; 55&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;财务经理---相当于“具体处理者角色”ConcreteHandler&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FinancialManager : Approver
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; FinancialManager(&lt;span&gt;string&lt;/span&gt; name): &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(name){ }
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ProcessRequest(PurchaseRequest request)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (request.Amount &amp;gt; &lt;span&gt;10000.0&lt;/span&gt; &amp;amp;&amp;amp; request.Amount &amp;lt;= &lt;span&gt;50000.0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                 Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0} 财务经理批准了对原材料{1}的采购计划！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Name, request.ProductName);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (NextApprover != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;                NextApprover.ProcessRequest(request);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;  
&lt;span&gt; 73&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;总裁---相当于“具体处理者角色” ConcreteHandler&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CEO :Approver
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; CEO(&lt;span&gt;string&lt;/span&gt; name): &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(name){ }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ProcessRequest(PurchaseRequest request)
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (request.Amount &amp;gt; &lt;span&gt;50000.0&lt;/span&gt; &amp;amp;&amp;amp; request.Amount &amp;lt; &lt;span&gt;300000.0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0} 总裁批准了对原材料 {1} 的采购计划！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Name, request.ProductName);
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                 Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这个采购计划的金额比较大，需要一次董事会会议讨论才能决定！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;  
&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             PurchaseRequest requestDao = &lt;span&gt;new&lt;/span&gt; PurchaseRequest(&lt;span&gt;8000.0&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;单刀5把&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             PurchaseRequest requestHuaJi = &lt;span&gt;new&lt;/span&gt; PurchaseRequest(&lt;span&gt;10000.0&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10把方天画戟&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;             PurchaseRequest requestJian = &lt;span&gt;new&lt;/span&gt; PurchaseRequest(&lt;span&gt;80000.0&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5把金丝龙鳞闪电劈&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;  
&lt;span&gt; 99&lt;/span&gt;             Approver manager = &lt;span&gt;new&lt;/span&gt; Manager(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;黄飞鸿&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             Approver financial = &lt;span&gt;new&lt;/span&gt; FinancialManager(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;黄麒英&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             Approver ceo = &lt;span&gt;new&lt;/span&gt; CEO(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;十三姨&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;  
&lt;span&gt;103&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置职责链&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;             manager.NextApprover =&lt;span&gt; financial;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             financial.NextApprover =&lt;span&gt; ceo;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;  
&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 处理请求&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            manager.ProcessRequest(requestDao);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            manager.ProcessRequest(requestHuaJi);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;            manager.ProcessRequest(requestJian);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            Console.ReadLine();
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;   模式的代码如上，很简单，备注很清楚，慢慢品味一下就知道其中道理了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三、职责链模式的实现要点：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;        Chain of Responsibility模式的应用场合在于“一个请求可能有多个接受者，但是最后真正的接受者只有一个”，只有这时候请求发送者与接受者的耦合才有可能出现“变化脆弱”的症状，职责链的目的就是将二者解耦，从而更好地应对变化。&lt;/p&gt;&lt;p&gt;　　应用了Chain of Responsibility模式后，对象的职责分派将更具灵活性。我们可以在运行时动态添加/修改请求的处理职责。&lt;/p&gt;&lt;p&gt;　　当我们要新增一个DHandler处理请求，就不需再改原来的代码了，遵从了开放封闭原则。这样我们的程序就更赋予变化，更有变化的抵抗力。Handler类本身继承自BaseHandler类型，又包含了一个BaseHandler类型的对象，这点类似Decorator模式。&lt;/p&gt;&lt;p&gt;　　如果请求传递到职责链的末尾仍得不到处理，应该有一个合理的缺省机制。这也是每一个接受对象的责任，而不是发出请求的对象的责任。&lt;/p&gt;&lt;p&gt;    &lt;span&gt;&lt;strong&gt;（1）、职责链模式的主要优点有：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        1】、降低耦合度：职责链模式使得一个对象无需知道是其他哪一个对象处理其请求。对象仅需知道该请求会被处理即可，接受者和发送者都没有对方的明确信息，且链中的对象不需要知道链的结构，有客户端负责链的创建。&lt;/p&gt;&lt;p&gt;        2】、可简化对象的相互连接：接受者对象仅需维持一个指向其后继者的引用，而不需维持它对所有的候选处理者的引用。&lt;/p&gt;&lt;p&gt;        3】、增强给对象指派职责的灵活性：在给对象分派职责时，职责链可以给我们带来更多的灵活性。可以通过在运行时对该连进行动态的增加或修改处理一个请求的职责。&lt;/p&gt;&lt;p&gt;        4】、增加新的请求处理类很方便：在系统中增加一个新的请求处理者无需修改原有系统的代码，只需要在客户端重新建链即可，从这一点看来是符合“开闭原则”的。&lt;/p&gt;&lt;p&gt;　&lt;span&gt;&lt;strong&gt;（2）、职责链模式的主要缺点有：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        1】、在找到正确的处理对象之前，所有的条件判定都要执行一遍，当责任链过长时，可能会引起性能的问题。&lt;/p&gt;&lt;p&gt;        2】、可能导致某个请求不被处理。&lt;/p&gt;&lt;p&gt;        3】、客户端需要组装这个链条，耦合了客户端和链条的组成结构，可以把这个在客户端的组合动作提到外面，通过配置来做，会更好点。&lt;/p&gt;&lt;p&gt;    &lt;span&gt;&lt;strong&gt;（3）、在下面的情况下可以考虑使用职责链模式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        1】、一个系统的审批需要多个对象才能完成处理的情况下，例如请假系统等。&lt;/p&gt;&lt;p&gt;        2】、代码中存在多个if-else语句的情况下，此时可以考虑使用责任链模式来对代码进行重构&lt;/p&gt;&lt;p&gt;        3】、有多个对象可以处理同一个请求，具体哪个对象处理该请求有运行时刻自动确定。客户端只需将请求提交到链上，无须关心请求的处理对象是谁以及它是如何处理的。&lt;/p&gt;&lt;p&gt;        4】、不明确指定接受者的情况下，向多个对象中的一个提交一个请求。请求的发送者与请求者解耦，请求将沿着链进行传递，寻求响应的处理者。&lt;/p&gt;&lt;p&gt;        5】、可动态指定一组对象处理请求。客户端可以动态创建职责链来处理请求，还可以动态改变链中处理者之间的先后次序&lt;/p&gt;&lt;p&gt;&lt;strong&gt;四、.NET 职责链模式的实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;     这个模式在Net框架中的实现不多，我感觉这个模式的使用场景更多的是在业务系统总才会有更大的用处。这种模式在处理UI的消息时很常用，但实际上Windows消息循环还是硬编码的结构。因为效率上的考虑，Windows消息循环是哪个对象有一个请求，则直接到达处理函数的地址。如果链条上的对象多了，而真正处理的函数在链条后部分，效率会很低下。因此我们在使用这种模式的时候更适合业务流程，即对性能要求不是特别高的情况更加常用。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;五、总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    终于写完了，这个模式并不是很难，在现实生活中也能很容易的找到对应的实例。这个模式也是为了解耦，解耦请求的发送者和接受者，当有新的需求的时候更容易变化，让我们的代码更符合面向对象OO的设计。&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 06:05:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/8109100.html</dc:identifier>
</item>
<item>
<title>Janus 二元神漏洞测试 - 小文字</title>
<link>http://www.cnblogs.com/avenwu/p/8109060.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/avenwu/p/8109060.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://7u2jir.com1.z0.glb.clouddn.com/img/2017-12-25-01.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同步发表于：&lt;a href=&quot;http://blog.hacktons.cn/2017/12/25/janus-demo/&quot; class=&quot;uri&quot;&gt;http://blog.hacktons.cn/2017/12/25/janus-demo/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;12月9号，Andorid对外曝光了一个名为&lt;code&gt;Janus&lt;/code&gt;的重量级系统漏洞&lt;code&gt;CVE-2017-13156)&lt;/code&gt;, 由安全研究公司&lt;a href=&quot;https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures&quot;&gt;Guard Square&lt;/a&gt;发现。&lt;br/&gt;&lt;code&gt;Janus&lt;/code&gt;原意是神话中的二元身，用于描述这个漏洞还真是贴切。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7u2jir.com1.z0.glb.clouddn.com/img/Apk_Dex_Dual.png&quot; alt=&quot;Apk_Dex_Dual&quot;/&gt;&lt;/p&gt;
&lt;p&gt;整个漏洞其实建立在文件校验规则之上：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;一个文件即是APK，又是DEX，在安装APK和执行阶段的校验规则差异，导致可以在APK头部附加一个恶意DEX来欺骗系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们从市场上随意下载一个apk来做测试。&lt;/p&gt;
&lt;h2 id=&quot;测试apk&quot;&gt;测试APK&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;本文涉及的测试APK，只用于单击研究之用，请勿恶意散播或上传，由此引发的纠纷与作者无关&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以从豌豆荚，应用宝等市场下一个测试用的APK,为了方便，我们需要选用一些体积较小的apk，如果apk较大很有可能经过了分包，替换工作会麻烦点。&lt;br/&gt;&lt;img src=&quot;http://7u2jir.com1.z0.glb.clouddn.com/img/%E6%B5%8B%E8%AF%95apk.png&quot; alt=&quot;快看漫画&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里比较恶心的是，下载到的apk并不是我们选取的安装包，而是豌豆荚市场，既然豌豆荚这么强势要入镜，那么姑且直接分析豌豆荚市场吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7u2jir.com1.z0.glb.clouddn.com/img/%E8%B1%8C%E8%B1%86%E8%8D%9Aapk.png&quot; alt=&quot;快看漫画&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;MD5 (Wandoujia_224660_web_inner_referral_binded.apk) = d3c1d9b2a74a3f8fd9fce38d38423c58&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;签名检查&quot;&gt;签名检查&lt;/h2&gt;
&lt;p&gt;首先检查下豌豆荚的这个apk是不是v2签名的，因为我们要测试的&lt;code&gt;Janus&lt;/code&gt;只能在v1下验证&lt;/p&gt;
&lt;p&gt;检查签名信息可以通过*.SF来确认，根据公开信息，如果v2签名的话，会在SF文件内写入一个字段&lt;code&gt;X-Android-APK-Signed:2&lt;/code&gt;；&lt;br/&gt;&lt;code&gt;豌豆荚&lt;/code&gt;的SF文件名字是&lt;code&gt;META-INF/DEAMON2.SF&lt;/code&gt;, 比较幸运啊，可以确认其使用的就是v1签名。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;aven$ unzip -l Wandoujia_224660_web_inner_referral_binded.apk |grep META-INF
   120009  12-15-17 14:38   META-INF/MANIFEST.MF
   120130  12-15-17 14:38   META-INF/DEAMON2.SF
      891  12-15-17 14:38   META-INF/DEAMON2.RSA&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;aven$ unzip -p Wandoujia_224660_web_inner_referral_binded.apk META-INF/DEAMON2.SF|less
Signature-Version: 1.0
SHA1-Digest-Manifest-Main-Attributes: jq/6qzaCk3O+H4OBJsDhMXm+FvE=
Created-By: 1.6.0_30 (Sun Microsystems Inc.)
SHA1-Digest-Manifest: Dts4zfEM9pZstNDahVfVh4e4jGA=

Name: res/drawable-xhdpi-v4/il.png
SHA1-Digest: QCves3Cr/wm3X2w4PR4ESXGMBOw=

Name: res/layout/dh.xml
SHA1-Digest: DCuKb0PRLuNV6jTEbSDGMTEW174=&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;包名确认&quot;&gt;包名确认&lt;/h2&gt;
&lt;p&gt;接下来我们需要构造一个新的dex，嫁接到豌豆荚的apk前面；这里需要确认豌豆荚使用的包名：&lt;code&gt;com.wandoujia.phoenix2&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package: name='com.wandoujia.phoenix2' versionCode='16861' versionName='5.68.21'
sdkVersion:'14'
targetSdkVersion:'16'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另外值得一提的是，豌豆荚的权限还是比较&lt;code&gt;流氓&lt;/code&gt;的会要求大量敏感权限，因此在使用该市场的时候注意权限的问题，否则很有可能裸奔了：&lt;/p&gt;
&lt;p&gt;比如读/写短信，读/写通讯录等等，还有一些第三方权限&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;uses-permission:'android.permission.READ_SMS'
uses-permission:'android.permission.RECEIVE_SMS'
uses-permission:'android.permission.MANAGE_ACCOUNTS'
uses-permission:'android.permission.AUTHENTICATE_ACCOUNTS'
uses-permission:'android.permission.USE_CREDENTIALS'
uses-permission:'android.permission.READ_SETTINGS'
uses-permission:'android.permission.READ_EXTERNAL_STORAGE'
uses-permission:'android.permission.SEND_SMS'
uses-permission:'android.permission.WRITE_EXTERNAL_STORAGE'
uses-permission:'android.permission.MOUNT_UNMOUNT_FILESYSTEMS'
uses-permission:'android.permission.INTERNET'
uses-permission:'android.permission.ACCESS_NETWORK_STATE'
uses-permission:'android.permission.ACCESS_WIFI_STATE'
uses-permission:'android.permission.CHANGE_WIFI_STATE'
uses-permission:'android.permission.CHANGE_WIFI_MULTICAST_STATE'
uses-permission:'android.permission.SET_WALLPAPER'
uses-permission:'android.permission.SET_WALLPAPER_HINTS'
uses-permission:'android.permission.WRITE_SETTINGS'
uses-permission:'android.permission.CAMERA'
uses-permission:'android.permission.FLASHLIGHT'
uses-permission:'com.android.launcher.permission.INSTALL_SHORTCUT'
uses-permission:'com.android.launcher.permission.UNINSTALL_SHORTCUT'
uses-permission:'android.permission.READ_PHONE_STATE'
uses-permission:'android.permission.MODIFY_AUDIO_SETTINGS'
uses-permission:'android.permission.SYSTEM_ALERT_WINDOW'
uses-permission:'android.permission.ACCESS_SUPPERUSER'
uses-permission:'android.permission.GET_PACKAGE_SIZE'
uses-permission:'android.permission.KILL_BACKGROUND_PROCESSES'
uses-permission:'android.permission.CLEAR_APP_CACHE'
uses-permission:'android.permission.DISABLE_KEYGUARD'
uses-permission:'com.android.launcher.permission.READ_SETTINGS'
uses-permission:'com.android.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.android.launcher3.permission.READ_SETTINGS'
uses-permission:'com.android.launcher3.permission.WRITE_SETTINGS'
uses-permission:'com.meizu.flyme.launcher.permission.READ_SETTINGS'
uses-permission:'com.meizu.flyme.launcher.permission.WRITE_SETTINGS'
uses-permission:'org.adw.launcher.permission.READ_SETTINGS'
uses-permission:'org.adw.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.qihoo360.launcher.permission.READ_SETTINGS'
uses-permission:'com.qihoo360.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.lge.launcher.permission.READ_SETTINGS'
uses-permission:'com.lge.launcher.permission.WRITE_SETTINGS'
uses-permission:'net.qihoo.launcher.permission.READ_SETTINGS'
uses-permission:'net.qihoo.launcher.permission.WRITE_SETTINGS'
uses-permission:'org.adwfreak.launcher.permission.READ_SETTINGS'
uses-permission:'org.adwfreak.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.huawei.launcher3.permission.READ_SETTINGS'
uses-permission:'com.huawei.launcher3.permission.WRITE_SETTINGS'
uses-permission:'com.fede.launcher.permission.READ_SETTINGS'
uses-permission:'com.fede.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.sec.android.app.twlauncher.settings.READ_SETTINGS'
uses-permission:'com.sec.android.app.twlauncher.settings.WRITE_SETTINGS'
uses-permission:'com.anddoes.launcher.permission.READ_SETTINGS'
uses-permission:'com.anddoes.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.lenovo.launcher.permission.READ_SETTINGS'
uses-permission:'com.lenovo.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.google.android.launcher.permission.READ_SETTINGS'
uses-permission:'com.google.android.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.oppo.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.oppo.launcher.permission.READ_SETTINGS'
uses-permission:'com.yulong.android.launcher3.permission.WRITE_SETTINGS'
uses-permission:'com.yulong.android.launcher3.permission.READ_SETTINGS'
uses-permission:'com.huawei.android.launcher.permission.READ_SETTINGS'
uses-permission:'com.huawei.android.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.htc.launcher.permission.READ_SETTINGS'
uses-permission:'com.htc.launcher.permission.WRITE_SETTINGS'
uses-permission:'com.bbk.launcher2.permission.READ_SETTINGS'
uses-permission:'com.bbk.launcher2.permission.WRITE_SETTINGS'
uses-permission:'android.permission.WAKE_LOCK'
uses-permission:'android.permission.BROADCAST_PACKAGE_ADDED'
uses-permission:'android.permission.BROADCAST_PACKAGE_CHANGED'
uses-permission:'android.permission.BROADCAST_PACKAGE_INSTALL'
uses-permission:'android.permission.BROADCAST_PACKAGE_REPLACED'
uses-permission:'android.permission.RESTART_PACKAGES'
uses-permission:'android.permission.GET_TASKS'
uses-permission:'android.permission.RECEIVE_BOOT_COMPLETED'
uses-permission:'android.permission.CHANGE_NETWORK_STATE'
uses-permission:'android.permission.GET_ACCOUNTS'
uses-permission:'android.permission.VIBRATE'
uses-permission:'android.permission.BIND_ACCESSIBILITY_SERVICE'
uses-permission:'android.permission.READ_CONTACTS'
uses-permission:'android.permission.WRITE_CONTACTS'
uses-permission:'android.permission.CALL_PHONE'
uses-permission:'android.permission.WRITE_SMS'
uses-permission:'android.permission.WRITE_CALL_LOG'
uses-permission:'android.permission.READ_CALL_LOG'
uses-permission:'android.permission.AUTHENTICATE_ACCOUNTS'
uses-permission:'android.permission.WRITE_SYNC_SETTINGS'
uses-permission:'android.permission.MANAGE_ACCOUNTS'
uses-permission:'android.permission.ACCESS_FINE_LOCATION'
uses-permission:'android.permission.ACCESS_COARSE_LOCATION'
uses-permission:'com.wandoujia.phoenix2.permission.MIPUSH_RECEIVE'
uses-permission:'android.permission.PACKAGE_USAGE_STATS'
uses-permission:'android.permission.PERSISTENT_ACTIVITY'
uses-permission:'android.permission.ACCESS_MTK_MMHW'&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;hack&quot;&gt;Hack&lt;/h2&gt;
&lt;p&gt;接下来开始编码工作，明确下我们的目标：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;替换Application，并且在app进程启动时弹出一个toast；&lt;/li&gt;
&lt;li&gt;替换启动页，显示一个特殊文案；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因此首先安确认下豌豆荚的自定义application：&lt;code&gt;com.pp.assistant.PPApplication&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;aven$ aapt dump xmltree Wandoujia_224660_web_inner_referral_binded.apk AndroidManifest.xml|less

    E: application (line=155)
      A: android:theme(0x01010000)=@0x7f0a0001
      A: android:label(0x01010001)=@0x7f0c038a
      A: android:icon(0x01010002)=@0x7f02009d
      A: android:name(0x01010003)=&quot;com.pp.assistant.PPApplication&quot; (Raw: &quot;com.pp.assistant.PPApplication&quot;)
      A: android:stateNotNeeded(0x01010016)=(type 0x12)0xffffffff
      A: android:windowSoftInputMode(0x0101022b)=(type 0x11)0x3
      A: android:allowBackup(0x01010280)=(type 0x12)0xffffffff&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建同名的PPApplication的，然后加上toast即可，接下来编译得到新的apk，并将其中的dex抽离出来备用。&lt;/p&gt;
&lt;h2 id=&quot;插曲&quot;&gt;插曲&lt;/h2&gt;
&lt;p&gt;在实际插入dex的时候，遇到了一些小插曲，比如插入完后，启动崩溃，所以如果是插入全新的dex的话，需要确认和原有dex的关系，如果完全摒弃原有逻辑，那么需要手动补全manifest中声明的&lt;code&gt;ContentProvider&lt;/code&gt;和&lt;code&gt;BroadcastReceiver&lt;/code&gt;，Activity根据需要替换，Service可选替换&lt;/p&gt;
&lt;p&gt;另外合并apk和dex不是简单的字节叠加，需要修改最终apk的偏移量，确保zip的正确性。笔者使用的是一个Python脚本&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;https://github.com/V-E-O/PoC/tree/master/CVE-2017-13156&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;效果&quot;&gt;效果&lt;/h2&gt;
&lt;p&gt;搞定之后，可以直接安装apk，也可以覆盖升级安装，接下来启动app就可以看到完全不同的效果；&lt;/p&gt;
&lt;p&gt;在这里我们出于实验性质，将豌豆荚市场的application和启动Activity做了整体替换，因此直接感受就是原有逻辑全部没有了，如果我们通过反编译后增量修改的方式来新增dex，纳闷可以实现和原app功能几乎一致的串改，这样可以恶意插入代码，同时不容易被用户发现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7u2jir.com1.z0.glb.clouddn.com/img/device-2017-12-25-130147.gif&quot; alt=&quot;效果&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;修复&quot;&gt;修复&lt;/h2&gt;
&lt;p&gt;这个bug看起来挺严重的，不过实际上影响有限，如果用户通过正规市场下载程序基本没什么问题，同时Android官方已经做fix，相信后续很快就会在新版本中生效。&lt;br/&gt;对于开发者来说比较被动，最好升级签名为V2，别的就没有屏蔽办法了，比较问题出在系统校验上面。&lt;/p&gt;
</description>
<pubDate>Mon, 25 Dec 2017 05:59:00 +0000</pubDate>
<dc:creator>小文字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/avenwu/p/8109060.html</dc:identifier>
</item>
</channel>
</rss>