<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【JAVA零基础入门系列】Day4 变量与常量 - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/7636484.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/7636484.html</guid>
<description>&lt;p&gt;　　这一篇主要讲解Java中的变量，什么是变量，变量的作用以及如何声明，使用变量。&lt;/p&gt;
&lt;p&gt;　　那么什么是变量？对于初学者而言，可以将变量理解为盒子，这些盒子可以用来存放数据，不同类型的数据需要放在对应类型的盒子里。那么，我们为什么要使用盒子呢？主要用于存放程序运行过程中需要临时存取和操作的数据，打个比方，我们做一顿番茄炒蛋，需要先把番茄洗一洗，然后切好放碗里，鸡蛋打好后要先放另一个碗里，然后加上料酒，加水搅拌，之后再放锅里一顿瞎操作后，一顿美味的番茄炒蛋便出来了，这个过程中，番茄炒蛋相当于我们的结果，番茄跟鸡蛋是我们需要处理的数据，我们先对番茄跟鸡蛋分别进行了处理，而处理的过程中，我们都需要一个容器来存放它们，碗，碟，锅或者杯，这些容器就相当于是变量，显然，如果没有变量，我们很难做出这顿美味来，变量存在的意义便是存放数据，让程序更清晰，让程序便于修改和维护。&lt;/p&gt;
&lt;p&gt;　　变量有四个要素，类型，变量名，值和作用范围。Java是强数据类型语言，每一个变量必须属于一种类型，一个int型数据需要存放在一个int型的变量中，同理，一个double类型的数据需要存放在一个double变量中。对于变量名的设置，也有一些规范，必须以一个字母开头，由字母或数字组成，这里说的字母包括大小写字母或者在某种语言中代表字母的Unicode字符，数字包括'0'~‘9’以及在某种语言中表示数字的Unicode字符和下划线_，以及美元符$（但不要使用），但Java保留字不能使用，此外，像'+','-'等符号是不允许出现在变量名中的，变量名中所有字符都是有意义的，并且大小写敏感，变量名的长度没有限制。为变量取一个有意义的名字是十分必要，当程序代码量增大时，这一点会显得越来越好重要。比如，age, name, sum, classNum等等&lt;/p&gt;
&lt;p&gt;　　为了规范起见，希望大家从一开始就养成好习惯，使用小驼峰命名法是一个不错的选择，所谓的小驼峰命名法，就是变量名除第一个单词以外其他单词首字母大写，其他字母均小写，如teacherName, vacationDays,classmatesNum等等。&lt;/p&gt;
&lt;p&gt;　　变量在使用之前，都需要声明，如：int num;  想要对一个变量赋值，就需要将变量名放在等号左侧，相应的值放在等号的右侧，如：int num; num =10; 也可以在声明变量的同时初始化变量，给变量赋初始值，如：int num = 10;声明可以出现在代码的任何地方，但在使用该变量之前必须先声明该变量。跟C与C++不同的是，在Java中，是不区分声明和定义的。&lt;/p&gt;
&lt;p&gt;　　至于作用范围，便是变量有效范围，出了这个范围，变量便不能使用，这一点具体到后面再结合代码做说明。&lt;/p&gt;
&lt;p&gt;　　给一个小栗子来理解一下变量的用法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　int&lt;/span&gt; length = 10&lt;span&gt;;
　　System.out.println(length);
　　length &lt;/span&gt;= 20&lt;span&gt;;
　　System.out.println(length);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里会依次输出10和20。&lt;/p&gt;
&lt;p&gt;　　除了变量之外，Java中还有一个叫常量的家伙，用关键字final来指示常量，例如：final double PI = 3.14;常量，顾名思义就是不变的量，一旦被声明后，它的值就不能被改变，也因此必须在声明的时候初始化，常量可以理解为其值不能被改变的变量。常量命名一般情况下全部字母都需要大写，如有多个单词则用下划线连接。既然不能改变，那常量存在的意义是什么呢？用PI代替3.14的意义何在？当然有它的意义，例如计算圆的面积的时候使用3.14*5*5 自然没有 PI*5*5这样看起来清晰。而且还有一个很重要的一点，如果常量的初始化值需要改变，比如一开始设置一个常量叫做 FULL_MARK，一开始你以为满分只有100分，可是程序写完之后，被告知满分是120分，于是你只需要在该常量定义的地方将100改成120，而不需要将代码中的每一个100改成120，不仅增加了可阅读性，也增加了可维护性。&lt;/p&gt;
&lt;p&gt;　　不要忽视代码的可阅读性，代码不仅仅是用来运行的，更多的是用来阅读的，而且读者不仅是你自己，还有可能是其他程序员，如果你写到最后，自己的看不下去了，那绝对算不上一份优秀的代码。&lt;/p&gt;
&lt;p&gt;　　希望大家能把代码当作一个艺术品去完成，去享受那些字母从你指尖敲打而出的快感，这样才能更好的收获程序顺利运行时的快乐。&lt;/p&gt;
&lt;p&gt;　　至此，本篇要介绍的内容就结束了。短小精悍系列。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 22:04:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/7636484.html</dc:identifier>
</item>
<item>
<title>简易RPC框架-过滤器机制 - min.jiang</title>
<link>http://www.cnblogs.com/ASPNET2008/p/7636276.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ASPNET2008/p/7636276.html</guid>
<description>&lt;p&gt;字面义上理解的过滤器类似下图，从一堆物品中筛选出符合条件的留下，不符合的丢弃。&lt;/p&gt;


&lt;p&gt;GOF中有一种设计模式叫职责链，或者叫责任链，常规的UML图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17071/201710/17071-20171007235216646-65251459.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正统的职责链是将一个请求发给第一个接收者，接收者判断是否属于自己能处理的，如果能处理则执行操作并中止请求下发，流程到此为止。如果不能处理则将请求下发给下一个接收者一直到最后一个接收者。&lt;/p&gt;

&lt;p&gt;上面提到正统的职责链有一个特点：当找到符合条件的执行者后流程中止并不会将请求继续下发给后续的执行者。这类场景比较适合比如审核操作，一个报销单由主管，经理，CTO一级一级的审批不能越权。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解耦合/细分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在实际项目中，往往会遇到非常复杂的业务场景，有可能是需要执行的方法特别多，也有可能是因为需要执行的方法有可能事先不知道，需要在运行时才能判断。如果将这些逻辑全部写在一个类或者一个方法中就会出现这样的问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;耦合度高，一个方法或者一个类需要关联所有业务方法以及相关类&lt;/li&gt;
&lt;li&gt;不易扩展，需要执行的业务经常发生变化，如果每次变化都去修改统一的方法或者类，不符合开闭原则，维护成本非常高&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以就有了下图，一堆需要执行的方法发给第一个接收者，接收者判断哪些方法是自己可以执行的，有执行的就执行，然后无论是否有可执行的方法在处理完成后都将请求继续下发给后面的接收者。每个接收者完成自己负责的内容，多个接收者完成了复杂任务的分解。&lt;/p&gt;


&lt;p&gt;RPC过滤器与Spring MVC中的Filter作用基本相同，其中很大一个作用就是动态的给客户端或者是服务端增加切面功能，比如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;权限控制&lt;/li&gt;
&lt;li&gt;加密解密&lt;/li&gt;
&lt;li&gt;访问日志&lt;/li&gt;
&lt;li&gt;限流控制&lt;/li&gt;
&lt;li&gt;并发控制&lt;/li&gt;
&lt;li&gt;......&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下图是我在RPC项目中实现过滤器机制的UML示意图&lt;/p&gt;
&lt;h2&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17071/201710/17071-20171007235321536-1025897645.png&quot; alt=&quot;&quot; width=&quot;665&quot; height=&quot;385&quot;/&gt;&lt;/h2&gt;
&lt;h2 id=&quot;toc_4&quot;&gt;RpcFilter&lt;/h2&gt;
&lt;p&gt;定义一个过滤器接口，只包含一个invoke方法。&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
public interface RpcFilter&amp;lt;T&amp;gt; {
    &amp;lt;T&amp;gt; T invoke(RpcInvoker invoker, RpcInvocation invocation);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;toc_5&quot;&gt;RpcInvoker&lt;/h2&gt;
&lt;p&gt;这是RPC客户端以及服务端执行服务端方法或者是将客户端请求发送给服务端时需要调用的方法接口。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这个角色在Netty中也可以叫Handle，这个接口与上面的RpcFilter有点类似，只是在RPC框架中体现的角色不同而已，具体看UML图可知道两者关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
public interface RpcInvoker {
    Object invoke(RpcInvocation invocation);
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;toc_6&quot;&gt;RpcServerInvoker&lt;/h2&gt;
&lt;p&gt;服务端的一个执行者实现，包含两个核心功能：&lt;/p&gt;
&lt;h3 id=&quot;toc_7&quot;&gt;构建职责链&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;this.filterMap，是通过注解获取到的一组过滤器，此处不详细讲因为与本文关系不大&lt;/li&gt;
&lt;li&gt;RpcInvoker的invoker方法实际调用的是RpcFilter的方法，并将自身实例传递给RpcFilter，目的是构建职责链的关联关系&lt;/li&gt;
&lt;/ul&gt;&lt;div readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
public RpcInvoker buildInvokerChain(final RpcInvoker invoker) {
    RpcInvoker last = invoker;
    List&amp;lt;RpcFilter&amp;gt; filters = Lists.newArrayList(this.filterMap.values());

    if (filters.size() &amp;gt; 0) {
        for (int i = filters.size() - 1; i &amp;gt;= 0; i --) {
            final RpcFilter filter = filters.get(i);
            final RpcInvoker next = last;
            last = new RpcInvoker() {
                @Override
                public Object invoke(RpcInvocation invocation) {
                    return filter.invoke(next, invocation);
                }
            };
        }
    }
    return last;
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;此处并没有考虑职责链的排序，可以通过过滤器的注解上增加排序数字来解决。目前我写的过滤器注解中并没有实现排序功能，可以增加一个order的属性，然后在需要指定顺序的过滤器上增加对应属性值来支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Component
public @interface ActiveFilter {
    String[] group() default {};
    String[] value() default {};
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;toc_8&quot;&gt;发请求给职责链&lt;/h3&gt;
&lt;p&gt;服务端在读取到客户端的请求后，首先通过构建职责链得到RpcInvoker，然后调用RpcInvoker的invoke方法将请求下发。&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@Override
    protected void channelRead0(ChannelHandlerContext channelHandlerContext, RpcMessage message) {

        this.executor.execute(new Runnable() {
            @Override
            public void run() {
                RpcInvoker rpcInvoker=....
                RpcResponse response=(RpcResponse) rpcInvoker.invoke......
    }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一般HTTP请求在不同网络角色中处理请求的能力会呈现为一个漏斗型，越上层职责越轻，越往下层职责越重，所对应的就是越上层处理请求量越大，越下层处理请求量越小。比如负载均衡器只负责请求转发而不负责具体的任务执行，而后端的Service服务器会执行大量的IO操作或者是消耗cpu的计算任务等，所以这两者在处理请求的量上往往是数量级的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17071/201710/17071-20171007235417443-933941821.png&quot; alt=&quot;&quot; width=&quot;412&quot; height=&quot;279&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当出现大量请求时，为了有效的保护后端服务的稳定性（尽量不出现宕机），除了横向扩展服务器外还可以通过一些软件手段缓解后端服务的压力，这就是通常说的限流，本文因为需要简单实现一个限制的过滤器，所以直接引用现成的限流算法：令牌桶。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17071/201710/17071-20171007235454490-1421078173.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是客户端请求限流的一个简单实现，客户端在给服务端发起请求之前需要获取令牌，如果获取到则发送请求，如果获取不到一直等待。当然为了防止死锁，可以调用带超时时间的获取令牌方法。&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-java&quot;&gt;@ActiveFilter(group = {ConstantConfig.CONSUMER})
public class AccessLimitFilter implements RpcFilter {

    private final static Logger logger = LoggerFactory.getLogger(AccessLimitFilter.class);

    @Override
    public Object invoke(RpcInvoker invoker, RpcInvocation invocation) {
        logger.info(&quot;before acquire&quot;);
        AccessLimitManager.acquire();

        Object rpcResponse=invoker.invoke(invocation);
        logger.info(&quot;after acquire&quot;);
        return rpcResponse;
    }

    static class AccessLimitManager{
        private final static RateLimiter rateLimiter=RateLimiter.create(2);

        public static void acquire(){
            rateLimiter.acquire();
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;实现的比较粗糙，桶的大小是写死的，应该实现为可配置型，后续抽空完善下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;https://github.com/jiangmin168168/jim-framework&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;文中代码是依赖上述项目的，如果有不明白的可下载源码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文中的图取自于网格&lt;/p&gt;

</description>
<pubDate>Sat, 07 Oct 2017 16:00:00 +0000</pubDate>
<dc:creator>min.jiang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ASPNET2008/p/7636276.html</dc:identifier>
</item>
<item>
<title>再起航，我的学习笔记之JavaScript设计模式30(简单模板模式) - 东城慕水</title>
<link>http://www.cnblogs.com/chen-jie/p/JavaScript-Simple-Template.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chen-jie/p/JavaScript-Simple-Template.html</guid>
<description>&lt;h2 id=&quot;简单模板模式&quot;&gt;简单模板模式&lt;/h2&gt;
&lt;h3 id=&quot;概念介绍&quot;&gt;概念介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;简单模板模式(Simple template):&lt;/strong&gt; 通过格式化字符串拼凑出视图避免创建视图时大量节点操作，优化内存开销。&lt;/p&gt;
&lt;h3 id=&quot;创建模板&quot;&gt;创建模板&lt;/h3&gt;
&lt;p&gt;在实际的业务中如果我们需要进行前后台交互，或多或少会遇到需要把后台数据，绑定到我们通过js生成的html里，然后再展示到页面上的需求，比如现在我要生成如下样式并展示到页面上。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/774226/201710/774226-20171007233036568-1301630227.png&quot;/&gt;&lt;br/&gt;首先我们肯定会分析这个页面的结构然后去创建相应的节点并在页面中展示，比如像下面这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//我们可以创建一个模板类的命名空间
var T=T||{};
//我们接着创建一个根节点，我们需要生成的模板会在这个节点下显示
T.root=document.getElementById('container');
//我们创建一个集合存储模板
T.TempFactory={
    'listTemp':function(data){
    //创建最外层的容器
    var d=document.createElement(&quot;div&quot;),
    //接着创建下级的标题容器
    h=document.createElement(&quot;h2&quot;),
    //标题下面的段落容器
    p=document.createElement(&quot;p&quot;),
    //向标题容器中添加内容
    ht=document.createTextNode(data.data.h2),
    //向段落容器中添加内容
    pt=document.createTextNode(data.data.p),
    //创建列表容器
    ul=document.createElement(&quot;ul&quot;),
    //获取数据中的li标签
    ldata=data.data.li,
    //依次是li元素，strong元素，span元素，填充strong内容，填充span内容
    li,strong,span,t,c;
    //如果数据里存在ID就给最外层容器赋值ID
    data.id&amp;amp;&amp;amp;(d.id=data.id);
    //向标题里追加内容
    h.appendChild(ht);
    //向段落里追加内容
    p.appendChild(pt);
    //把标题添加到最外层的容器里
    d.appendChild(h);
    //把段落添加到最外层的容器里
    d.appendChild(p);
    //循环添加数据中的列表
    for (var i=0;i&amp;lt;ldata.length;i++) {
        //创建li标签
        li=document.createElement(&quot;li&quot;);
        //创建strong标签
        strong=document.createElement(&quot;strong&quot;);
        //创建span标签
        span=document.createElement(&quot;span&quot;);
        //向strong标签中添加内容
        t=document.createTextNode(ldata[i].strong);
        //向span标签中添加内容
        c=document.createTextNode(ldata[i].span);
        //把内容追加进strong标签
        strong.appendChild(t);
        //把内容追加进span标签
        span.appendChild(c);
        //把strong标签追加进li标签
        li.appendChild(strong);
        //把span标签追加进li标签
        li.appendChild(span);
        //把li标签追加到ul标签下
        ul.appendChild(li);
    }
    //像我们最外层的容器中添加李彪
    d.appendChild(ul);
    //最后把创建的模板插入到我们之前创建的根节点下
    T.root.appendChild(d);
    }
}
//增加初始化方法
T.init=function(data){
    this.TempFactory[data.type](data);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好的我们创建好了模板试着模拟数据调用一下&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/774226/201710/774226-20171007233036568-1301630227.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var datas={id:&quot;test&quot;,type:&quot;listTemp&quot;,data:{h2:&quot;标题&quot;,p:&quot;内容&quot;,li:[{strong:&quot;加粗列表内容&quot;,span:&quot;列表内容&quot;},{strong:&quot;加粗列表内容2&quot;,span:&quot;列表内容2&quot;}]}}

T.init(datas);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好了，我们看到我们的功能实现了，但是我们发现我们创建一个这么简单页面就要创建这么多节点看上去相当复杂而且麻烦，那我们如何去优化呢？这个时候我们就可以去试着优化模板，来简化我们的操作，我们还可以用一些占位符代替模板中需要填充的内容，到时候利用正则我们可以把占位符替换成对应的内容。&lt;/p&gt;
&lt;h3 id=&quot;优化模板&quot;&gt;优化模板&lt;/h3&gt;
&lt;p&gt;首先我们需要添加一个方法把占位符变成我们的内容&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;T.formateString=function(str,data){
    return str.replace(/\{{(\w+)\}}/g,function(match,key){
        return typeof data[key]===undefined ? '' : data[key]
    })
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着我们开始修改我们之前臃肿的模板&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;'listTemp':function(data){
        var d=document.createElement(&quot;div&quot;),
        ul=&quot;&quot;,
        ldata=data.data.li,
        //前面的方式还是不变这里，我们把这个改成模板。用{{}}充当占位符
        tpl=[
        '&amp;lt;h2&amp;gt;{{h2}}&amp;lt;/h2&amp;gt;','&amp;lt;p&amp;gt;{{p}}&amp;lt;/p&amp;gt;','&amp;lt;p&amp;gt;{{ul}}&amp;lt;/p&amp;gt;'
        ].join(''),
        //这里也是一样的这里是ul里的标签
        liTpl=[
        '&amp;lt;li&amp;gt;','&amp;lt;strong&amp;gt;{{strong}}&amp;lt;/strong&amp;gt;','&amp;lt;span&amp;gt;{{span}}&amp;lt;/span&amp;gt;','&amp;lt;/li&amp;gt;'
        ].join('');
        data.id&amp;amp;&amp;amp;(d.id=data.id);
        //遍历列表数据
        for (var i=0;i&amp;lt;ldata.length;i++) {
            //如果列表有数据
            if (ldata[i].strong||ldata[i].span) {
                //列表字符串追加一项列表项
                ul+=T.formateString(liTpl,ldata[i]);
            }
        }
        //填充列表数据数据
        data.data.ul=ul;
        //用我们的替换方法渲染模块并插入我们的外层容器中
        d.innerHTML=T.formateString(tpl,data.data);
        //绑定到根节点下
        T.root.appendChild(d);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好了我们再来看看&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var datas={id:&quot;test&quot;,type:&quot;listTemp&quot;,data:{h2:&quot;标题&quot;,p:&quot;内容&quot;,li:[{strong:&quot;加粗列表内容&quot;,span:&quot;列表内容&quot;},{strong:&quot;加粗列表内容2&quot;,span:&quot;列表内容2&quot;}]}}

T.init(datas);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/774226/201710/774226-20171007233036568-1301630227.png&quot;/&gt;&lt;br/&gt;经过我们的优化是不是减少了很对对页面中节点的操作，但是我们发现我们这个模板还有相似之处我们还可以接着优化。&lt;/p&gt;
&lt;h3 id=&quot;再次优化模板&quot;&gt;再次优化模板&lt;/h3&gt;
&lt;p&gt;我们的模板虽然简化了很多，但是我们发现标签占位符的结构都很相似，那么我们就可以把他们提出来，再次优化&lt;/p&gt;
&lt;p&gt;我们可以把公共的地方提取出来创建一个模板生成器&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//模板生成器
T.view=function(name){
//如果参数是一个数组，则返回多行模板
    if(Object.prototype.toString.call(name)===&quot;[object Array]&quot;){
        //模板缓存器
        var tpl='';
        //遍历标识
        for(var i=0;i&amp;lt;name.length;i++){
        //模板缓存器追加模板
            tpl+=arguments.callee(name[i]);
        }
        //返回最终模板
        return tpl;
    }else{ 
        //返回建议模板
        return '&amp;lt;'+name+'&amp;gt;{{'+name+'}}&amp;lt;/'+name+'&amp;gt;';
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们在修改一下之前的模板&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;T.TempFactory={
    'listTemp':function(data){
    var d=document.createElement(&quot;div&quot;),
    ul=&quot;&quot;,
    ldata=data.data.li,
    //这里用我们的模板生成器修改一下
    tpl=T.view(['h2','p','ul']),
    liTpl=T.formateString(T.view('li'),{li:T.view(['strong','span'])});
    data.id&amp;amp;&amp;amp;(d.id=data.id);
    for (var i=0;i&amp;lt;ldata.length;i++) {
        if (ldata[i].em||ldata[i].span) {
            ul+=T.formateString(liTpl,ldata[i]);
        }
    }
    data.data.ul=ul;
    d.innerHTML=T.formateString(tpl,data.data);
    T.root.appendChild(d);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们在看看&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var datas={id:&quot;test&quot;,type:&quot;listTemp&quot;,data:{h2:&quot;标题&quot;,p:&quot;内容&quot;,li:[{strong:&quot;加粗列表内容&quot;,span:&quot;列表内容&quot;},{strong:&quot;加粗列表内容2&quot;,span:&quot;列表内容2&quot;}]}}

T.init(datas);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/774226/201710/774226-20171007233036568-1301630227.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;简单模板模式主要解决御用DOM操作创建视图时造成资源消耗大、性能底下、操作复杂等问题。用正则的方式去格式化字符串执行的性能高于DOM操作拼接视图的执行性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也谢谢大家看到这里：）如果你觉得我的分享还可以请点击推荐，分享给你的朋友让我们一起进步~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好了以上就是本次分享的全部内容，本次示例参考自JavaScript设计模式一书，让我们一点点积累一点点成长，希望对大家有所帮助。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎转载，转载请注明作者，原文出处。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 15:45:00 +0000</pubDate>
<dc:creator>东城慕水</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chen-jie/p/JavaScript-Simple-Template.html</dc:identifier>
</item>
<item>
<title>codeforces 8c Looking for Order - qrfkickit</title>
<link>http://www.cnblogs.com/kickit/p/7636236.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kickit/p/7636236.html</guid>
<description>&lt;p&gt;https://vjudge.net/problem/CodeForces-8C&lt;/p&gt;
&lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;一个平面上放着许多东西，每个东西都有一个坐标，最开始一个人在一个起始坐标，她出发去拿东西，一次要么拿一件东西，要么拿两件东西，拿了之后必须返回起始坐标。&lt;/p&gt;
&lt;p&gt;每次花费的时间是两个坐标距离的平方，问拿完所有的东西需要的最少的时间。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;由于数据范围比较小，所以可以考虑用状压dp来写。由于每次拿东西之后都要返回起点，那么其实拿东西的顺序是没有影响的，所以利用题目给定的顺序进行剪枝，即每次进行扩展的时候都考虑在前面的点已经取完了。&lt;/p&gt;
&lt;p&gt;然后每次记录的时候，非常巧妙的方法，如果一个点的话，直接记录这个点，如果有两个点的话，那么就用(i+1)*100 + (j+1)来记录，因为点数最多时只有24，输出的时候递归输出就行了，递归输出这里还是比较巧妙的。&lt;/p&gt;
&lt;p&gt;代码：（有详细的注释）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;  2&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;  3&lt;/span&gt; #include &amp;lt;vector&amp;gt;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; node
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x,y;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; } a[&lt;span&gt;30&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; mp[&lt;span&gt;30&lt;/span&gt;][&lt;span&gt;30&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; ans;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; cal(&lt;span&gt;int&lt;/span&gt; i,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; j)
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (a[i].x - a[j].x) * (a[i].x - a[j].x) + (a[i].y - a[j].y) * (a[i].y -&lt;span&gt; a[j].y);
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxn = (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;24&lt;/span&gt;)+&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; gg = &lt;span&gt;0x3f3f3f3f&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; dp[maxn],last[maxn],rec[maxn];
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; 
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; output(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; s)
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (~&lt;span&gt;last[s])
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;        output(last[s]);//递归输出
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (rec[s])
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (rec[s] &amp;gt; &lt;span&gt;100&lt;/span&gt;) ans.push_back(rec[s] / &lt;span&gt;100&lt;/span&gt;&lt;span&gt;);//第一个扩展的点
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt;         ans.push_back(rec[s] % &lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         ans.push_back(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);//每次都要返回起点
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; 
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;    node tmp;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;tmp.x,&amp;amp;&lt;span&gt;tmp.y);
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;a[i].x,&amp;amp;&lt;span&gt;a[i].y);
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;     a[n] =&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt;= n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt;;j &amp;lt;= n;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         mp[i][j] = mp[j][i] =&lt;span&gt; cal(i,j);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt;     memset(dp,gg,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dp));
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;     memset(last,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(last));
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;     dp[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; s = &lt;span&gt;0&lt;/span&gt;;s &amp;lt; (&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;n);s++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (dp[s] &amp;gt;= gg) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (((&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i) &amp;amp; s) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)//这个点没有被走过
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; val = dp[s] + mp[n][i] * &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (dp[s|(&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i)] &amp;gt;&lt;span&gt; val)
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                     dp[s|(&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i)] =&lt;span&gt; val;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                     last[s|(&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i)] =&lt;span&gt; s;//记录前驱，下同
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                     rec[s|(&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i)] = i+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt;;j &amp;lt; n;j++&lt;span&gt;)//从i+1开始枚举保证了不会有重复情况
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (((&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;j)&amp;amp;s) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                         &lt;span&gt;int&lt;/span&gt; tmp = dp[s] + mp[n][i] + mp[i][j] +&lt;span&gt; mp[j][n];
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (dp[s|(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i)|(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;j)] &amp;gt;&lt;span&gt; tmp)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                             dp[s|(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i)|(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;j)] =&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                             last[s|(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i)|(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;j)] =&lt;span&gt; s;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                             rec[s|(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;i)|(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;j)] = (i+&lt;span&gt;1&lt;/span&gt;) * &lt;span&gt;100&lt;/span&gt; + (j+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);//巧妙的记录
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; 
&lt;span&gt; 96&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;//强行顺序剪枝
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; 
&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;%d\n&quot;,dp[s]);&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    ans.clear();
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt;     output((&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;n)-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,dp[(&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;n)-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;i &amp;lt; ans.size();i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,ans[i],i == ans.size() - &lt;span&gt;1&lt;/span&gt; ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; :&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; 
&lt;span&gt;115&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 07 Oct 2017 15:39:00 +0000</pubDate>
<dc:creator>qrfkickit</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kickit/p/7636236.html</dc:identifier>
</item>
<item>
<title>看了180分钟的视频，写了半天的代码 - 易墨</title>
<link>http://www.cnblogs.com/morang/p/7636148.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/morang/p/7636148.html</guid>
<description>&lt;h2 id=&quot;观视频月薪4万的程序员有多强半小时原生js开发打气球游戏征服现场数万人&quot;&gt;观视频《月薪4万的程序员有多强?半小时原生JS开发打气球游戏，征服现场数万人!》&lt;/h2&gt;
&lt;p&gt;清晨，日常打开B站，被首页此视频的标题所吸引，虽一看就是标题党，但还是没能抑制住好奇心。&lt;br/&gt;视频共计60*3分钟，学习到了很多东西。其中后半部分有许多正三观的见解也非常认同。&lt;br/&gt;视频地址：&lt;a href=&quot;https://www.bilibili.com/video/av15152538/&quot; class=&quot;uri&quot;&gt;https://www.bilibili.com/video/av15152538/&lt;/a&gt;&lt;br/&gt;在线试玩：&lt;a href=&quot;http://sandbox.runjs.cn/show/luderhbq&quot; class=&quot;uri&quot;&gt;http://sandbox.runjs.cn/show/luderhbq&lt;/a&gt;&lt;br/&gt;参考视频写的demo:&lt;a href=&quot;https://coding.net/u/yimocoding/p/WeDemo/git/tree/%E6%B0%94%E7%90%83%E5%A4%A7%E6%88%98&quot; class=&quot;uri&quot;&gt;https://coding.net/u/yimocoding/p/WeDemo/git/tree/气球大战&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;看了视频自己来实现试试&quot;&gt;看了视频，自己来实现试试&lt;/h2&gt;
&lt;p&gt;花了半天的时间，人生中的第二个游戏终于完成了，想起第一次做拼图游戏也已经是3年前了~&lt;br/&gt;来吧，试玩一下，看能消灭多少个气球【笑哭】：&lt;a href=&quot;http://sandbox.runjs.cn/show/luderhbq&quot; class=&quot;uri&quot;&gt;http://sandbox.runjs.cn/show/luderhbq&lt;/a&gt;&lt;br/&gt;然后，一起来一步步构建自己的【气球大战】(文中代码为核心代码，后续有优化，故非完整代码)，可以在&lt;a href=&quot;http://runjs.cn/detail/luderhbq&quot;&gt;runjs中去查看&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;用css3画一个气球&quot;&gt;1.用css3画一个气球&lt;/h3&gt;
&lt;p&gt;看视频的时候觉得自己这个会那个也会，写代码的时候才发现没有智能提示啥都不会，打错单词的次数不是一次两次~&lt;/p&gt;
&lt;h4 id=&quot;气球效果预览&quot;&gt;气球效果预览&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-coding-net-production-pp.qbox.me/df87d63f-8be8-4b0e-8508-b9c9a14495bd.png&quot; alt=&quot;图片&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;css代码&quot;&gt;css代码&lt;/h4&gt;
&lt;p&gt;//html→→_→→&lt;code&gt;&amp;lt;div class=&quot;balloon&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;body&lt;span class=&quot;kw&quot;&gt;{margin:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;padding:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.balloon&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{width:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;height:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;position:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;left:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;top:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;background-color:&lt;/span&gt;pink&lt;span class=&quot;kw&quot;&gt;;border-radius:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10%&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;transform:&lt;/span&gt;rotate(&lt;span class=&quot;dt&quot;&gt;45deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;;box-shadow:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.balloon&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:after&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{width:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;height:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;content:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;display:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;background:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;position:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;right:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;-15px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;bottom:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;-15px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;border-left:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;border-top:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;.balloon&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{width:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;height:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;content:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;display:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;background:&lt;/span&gt;pink&lt;span class=&quot;kw&quot;&gt;;position:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;right:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;-10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;top:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;margin-top:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;-16px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;transform:&lt;/span&gt;rotate(&lt;span class=&quot;dt&quot;&gt;-45deg&lt;/span&gt;)&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;随机创建气球&quot;&gt;2.随机创建气球&lt;/h3&gt;
&lt;p&gt;首先定义了一些变量&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bnElements&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//存放所有气球&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; random&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//随机函数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; wW&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//窗口宽度&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; wH&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//窗口高度&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ballW&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//气球的宽度&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ballH&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//气球的宽度&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; minSpeed&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//最小速度，每次向上移动至少3px&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speedNum&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//速度的定量&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; defBnNumber&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//初始化气球&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先编写并调用初始化方法生成气球&lt;/p&gt;
&lt;h4 id=&quot;生成气球代码&quot;&gt;生成气球代码&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(defBnNumber)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//初始化气球&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(num)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//创建一个虚拟文档节点&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; docFragment&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createDocumentFragment&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;num&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bnElement&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'div'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'balloon'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//速度随机，限定最小值&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;(minSpeed&lt;span class=&quot;op&quot;&gt;,~~&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;speedNum))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'speed'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;speed)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//~~取整 移动速度&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'ball-'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//分散排列&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;~~&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;wW))&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;ballW&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            x&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;x)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;                
            &lt;span class=&quot;va&quot;&gt;bnElement&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;wH&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//露一点出来         &lt;/span&gt;
            
            &lt;span class=&quot;co&quot;&gt;//1.先将创建的气球放入创建的虚拟文档节点&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;docFragment&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(bnElement)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(bnElement)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//2.将虚拟文档节点添加到body中&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(docFragment)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;效果预览&quot;&gt;效果预览&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-coding-net-production-pp.qbox.me/de826a64-9bf2-4c7b-9579-6f9859889153.png&quot; alt=&quot;图片&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;气球向上移动&quot;&gt;3.气球向上移动&lt;/h3&gt;
&lt;p&gt;创建一个move方法并在初始化后调用&lt;/p&gt;
&lt;h4 id=&quot;气球移动代码&quot;&gt;气球移动代码&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;move&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//移动气球 只需要调用一次即可&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;move&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;bl&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; currentElement&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;bnElements[i]
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(currentElement&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; offsetTop&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;currentElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetTop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(offsetTop&lt;span class=&quot;op&quot;&gt;&amp;gt;-&lt;/span&gt;ballH)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//窗口中&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;currentElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'speed'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;currentElement&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;offsetTop&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;speed&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//移除dom节点&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;removeChild&lt;/span&gt;(currentElement)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//移除数组中&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;splice&lt;/span&gt;(i&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(move&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;效果预览-1&quot;&gt;效果预览&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-coding-net-production-pp.qbox.me/ae682951-2c51-4532-849e-8fec478dba11.gif&quot; alt=&quot;图片&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;点击气球气球消失&quot;&gt;4.点击气球，气球消失&lt;/h3&gt;
&lt;p&gt;发现颜色有点丑~~遂改。&lt;/p&gt;
&lt;h4 id=&quot;气球消失代码&quot;&gt;气球消失代码&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;bindClick&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//绑定点击气球事件&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;bindClick&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(e)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'balloon'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;boom&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;removeChild&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;splice&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;bnElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;boom&lt;/span&gt;(callback)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//var that=this; //替换了上下文，但是没有使用this的意义.&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'speed'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;(speed&lt;span class=&quot;op&quot;&gt;--&lt;/span&gt;)
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetWidth&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(speed&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            callback&lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;callback&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;效果预览-2&quot;&gt;效果预览&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-coding-net-production-pp.qbox.me/4b6fd500-19a2-4bb0-a1d6-52055934719e.gif&quot; alt=&quot;图片&quot;/&gt;&lt;br/&gt;核心代码终于写完，在我的&lt;a href=&quot;http://tools.yimo.link/#/qrcode&quot;&gt;纯静态工具站点生成二维码&lt;/a&gt;扫一扫，在我的小米手机上玩了玩，ok正常，然后再新入手的ipad中试了试。。。擦。坑爹呢，点了咋没反应啊。&lt;br/&gt;好吧，为了ipad能玩，强忍着泪水(饿的)解决了iOS的safari兼容问题~&lt;/p&gt;
&lt;h3 id=&quot;解决遇到的safari浏览器兼容问题&quot;&gt;5.解决遇到的safari浏览器兼容问题&lt;/h3&gt;
&lt;ul readability=&quot;0.82178217821782&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;问题一：Safari中单击事件不能绑定到document.body上~~,因为无效~&lt;br/&gt;解决方法：给元素加了个父级~，若click事件有问题则还需要将click换成touchend~&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.67420814479638&quot;&gt;
&lt;p&gt;问题二：transform变换z-index层级渲染异常&lt;br/&gt;解决方法：未变换的元素上添加样式：&lt;code&gt;transform: translateZ(120px);&lt;/code&gt;&lt;br/&gt;参考文章：&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2016/08/safari-3d-transform-z-index/&quot; class=&quot;uri&quot;&gt;http://www.zhangxinxu.com/wordpress/2016/08/safari-3d-transform-z-index/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;get了几个以前不知道没用过的新技能&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;文档片段&lt;br/&gt;当需要将一堆节点添加到dom中可以使用&lt;code&gt;document.createDocumentFragment();&lt;/code&gt;创建虚拟文档节点，让后将节点先添加到此虚拟节点中，再将此节点追加到指定元素，能够降低dom渲染次数&lt;/li&gt;
&lt;li&gt;使用位运算符取整&lt;br/&gt;取0-9的随机数 &lt;code&gt;~~(Math.random()*10)&lt;/code&gt; //&lt;code&gt;Math.random()&lt;/code&gt;大于等于 0.0 且小于 1.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.max()&lt;/code&gt; &lt;code&gt;Math.min()&lt;/code&gt; 可以用来限定边界值&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;setInterval问题：
&lt;ul&gt;&lt;li&gt;可能会丢帧(浏览器的刷新频率为60FPS，一秒最大可以重绘60次)，故理论上setinterval()间隔时间大于1000/60就不会参数丢帧的情况&lt;/li&gt;
&lt;li&gt;时间线偏移(甚至重叠没执行完就执行下一次任务了)，若需要每次都执行完才执行下次任务则使用&lt;code&gt;setTimeout+递归&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;this的传递（可以使用bind()去绑定this，不能使用call，会提示没有权限）&lt;br/&gt;传递this到&lt;code&gt;setInterval&lt;/code&gt;中：&lt;code&gt;setInterval(function(){}.bind(this),1000/30)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;值的相等判断使用&lt;code&gt;===&lt;/code&gt;会比&lt;code&gt;==&lt;/code&gt;性能好一点,大部分情况应当使用&lt;code&gt;===&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;判断回调函数并执行回调函数&lt;br/&gt;以前我是这样写的：if(typeof(callback)==='function')callback();&lt;br/&gt;视频中有用短路运算符实现即：&lt;code&gt;callback&amp;amp;&amp;amp;callback()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;踩了踩safari的坑&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;最可怕的事情,不是别人比你强,而是比你强的人比你还努力!!!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 07 Oct 2017 15:36:00 +0000</pubDate>
<dc:creator>易墨</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/morang/p/7636148.html</dc:identifier>
</item>
<item>
<title>关于个人密码安全管理的分析 - HateMath</title>
<link>http://www.cnblogs.com/hatemath/p/7636207.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hatemath/p/7636207.html</guid>
<description>&lt;p&gt;不管是否接受和喜欢，基于网络的数字化生活已经到来。&lt;/p&gt;
&lt;p&gt;在没人知道你是不是一条狗的网络上，密码极其重要。密码的安全也极其重要。&lt;/p&gt;
&lt;p&gt;不重视密码安全管理的人，早晚会交学费的。&lt;/p&gt;
&lt;p&gt;晚上嗑着瓜子分析了一下，并拟定了自己的密码安全管理方案。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;密码泄露的两大环境：&lt;/strong&gt;&lt;br/&gt; 　　 存储环境&lt;br/&gt; 　　 使用环境&lt;/p&gt;

&lt;p&gt;　　要想保证密码安全，必须同时保证上述两个环境的安全&lt;/p&gt;&lt;p&gt;&lt;strong&gt;密码泄露的几种途径：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;一次泄露&lt;br/&gt;　　电脑有木马，输入密码时被盗（键盘记录、截屏等）。&lt;br/&gt;　　电脑有木马，查看编辑密码文件时被盗（截屏））。&lt;br/&gt;　　电脑有木马，密码文件被上传并破解&lt;br/&gt;　　密码存手机，手机丢失并被解锁&lt;br/&gt;　　密码存专用手机或平板，手机或平板损坏&lt;br/&gt;　　密码太简单，被暴破&lt;br/&gt;　　手机密码泄露&lt;/p&gt;&lt;p&gt;二次泄露&lt;br/&gt;　　使用第三方密码管理软件或云平台。软件或平台有漏洞（还记得CSDN吗？害得我改了整整一个上午的密码，卧槽）。&lt;br/&gt;　　网站绑定了邮箱，邮箱被盗，密码被改&lt;br/&gt;　　绑定了手机号，手机丢失并被解锁&lt;br/&gt;　　绑定了手机号，手机卡被复制盗用&lt;br/&gt;　　不同网站共用一个密码，其中一个密码泄露，殃及其余&lt;/p&gt;&lt;p&gt;应对措施&lt;br/&gt;　　保证存储设备的安全&lt;br/&gt;　　保证密码使用环境的安全&lt;br/&gt;　　密码分级&lt;br/&gt;　　尽量不重复使用密码&lt;br/&gt;　　极重要的密码在输入时做人工转换&lt;br/&gt;　　定期更换密码&lt;br/&gt;　　密码找回（但要确保不引入新的隐患）&lt;/p&gt;&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;　　想知道我用的什么方案？&lt;/p&gt;










&lt;p&gt;　　嗯，打死我也不说。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 15:29:00 +0000</pubDate>
<dc:creator>HateMath</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hatemath/p/7636207.html</dc:identifier>
</item>
<item>
<title>.Neter玩转Linux系列之六：Linux下MySQL的安装、配置、使用 - 菠萝吹雪—Code</title>
<link>http://www.cnblogs.com/runningsmallguo/p/7634560.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/runningsmallguo/p/7634560.html</guid>
<description>

&lt;p&gt;（1）下载安装包：https://dev.mysql.com/downloads/mysql/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007172105349-73509698.png&quot; alt=&quot;&quot; width=&quot;662&quot; height=&quot;325&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）解压并安装&lt;/p&gt;
&lt;p&gt;命令：tar zxvf 文件名&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007220742927-1358075655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;解压完成之后，重名一下文件夹名字。&lt;/p&gt;
&lt;p&gt;命令：mv 文件名1  文件名2&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007191500646-28671019.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007191547646-175002847.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;由于MySQL运行需要libaio1库，所以需要运行以下命令进行安装：&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install libaio1
&lt;/pre&gt;

&lt;p&gt;（1）创建MySQL的组:mysql目的是方便管理MySQL数据库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007180928490-828429955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）创建mysql用户，并放入到mysql组&lt;/p&gt;
&lt;p&gt;命令：useradd   -g   mysql mysql&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007181042208-954093490.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （3）命令：sudo mkdir mysql-files  （新建一个目录）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007191842990-1992184712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007191928068-356037409.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）修改文件夹的权限&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; sudo chmod 750 mysql-files&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007192101818-153265310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;chown  -R   root .  (修改 文件的 所有者)  这样做的目的是为了安全，不是所有的人都能碰MySQL的文件的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007192608005-1874818435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;chgrp   -R  mysql .  (改变用户组)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007192702927-1687598947.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（5）安装初始化，注意：此部最后一行会有一个初始化密码，用于root账号的首次登录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007223710521-1709583549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 下面框主的就是生成的登录密码。&lt;/p&gt;
&lt;p&gt;（6）生成证书&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007193130927-375817104.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（7）把权限修改回来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007193554286-95918336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （8）启动MySQL数据库&lt;/p&gt;
&lt;p&gt;sudo bin/mysqld_safe --user=mysql &amp;amp;  [&amp;amp;表示以后台的方式启动]&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007193753396-534049098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007223028708-1004446667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（9）登录测试并修改root密码&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007223450552-1035856128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：在登录MySQL时，一定要切换到mysql的bin目录下面，然后再执行 ./mysql -u root -p&lt;/p&gt;
&lt;p&gt;提示输入密码，在输入上面自动生成的密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007224150786-361701502.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
增加一个'root'@'%'账号实现远程登录&lt;p&gt;mysql&amp;gt; grant all privileges on *.* to 'root'@'%' identified by '新密码' with grant option;
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007224456896-119112087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（10）配置服务自动启动&lt;/p&gt;
&lt;p&gt;#复制服务文件到/etc/init.d&lt;/p&gt;
&lt;p&gt;sudo cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql.server&lt;/p&gt;
&lt;p&gt;建议重开一个终端，不要关闭现有的终端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007224839833-1509406759.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装sysv-rc-conf&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install sysv-rc-conf
&lt;/pre&gt;
&lt;p&gt; 启动sysv-rc-conf&lt;/p&gt;
&lt;pre&gt;
sudo sysv-rc-conf
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007231358958-2085240567.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按空格键出现X，然后按Q退出。重启即可。&lt;/p&gt;
&lt;p&gt;服务的相关操作命令：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#服务状态&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;sudo service mysql.server status&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;#服务启动&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;sudo service mysql.server start&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;#服务停止&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;sudo service mysql.server stop&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; （11）配置环境变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007231905880-1320698010.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007231959693-643821890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;br/&gt;&lt;span&gt;到此MySQL的安装和配置全部OK，好了，本系列文章到此结束，如果后续有补充，我不会不定时更新上去，希望对你有帮助。觉得可以的话，希望点下推荐哈~你们的推荐是我的动力。&lt;/span&gt;&lt;p&gt;参考文章：http://www.cnblogs.com/EasonJim/p/7147787.html&lt;br/&gt;https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html
&lt;/p&gt;&lt;/pre&gt;

&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;作者：郭峥&lt;/p&gt;
&lt;p&gt;出处：http://www.cnblogs.com/runningsmallguo/&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 07 Oct 2017 15:26:00 +0000</pubDate>
<dc:creator>菠萝吹雪—Code</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/runningsmallguo/p/7634560.html</dc:identifier>
</item>
<item>
<title>Easyui后台管理角色权限控制 - 柯一</title>
<link>http://www.cnblogs.com/lzx2509254166/p/7636168.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzx2509254166/p/7636168.html</guid>
<description>&lt;p&gt;最近需要做一个粗略的后台管理的权限，根据用户的等级来加载相应的菜单，控制到子菜单。使用的是Easyui这个框架。&lt;/p&gt;
&lt;p&gt;1.我使用的mysql数据库。在这里我就建立四张表，角色表(tb_users),菜单表(tb_menu),用户权限表(tb_role),权限菜单表(tb_user_role).表结构如下：数据是我随便插的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007223224911-2099333520.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007223238036-1638074550.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007223302036-459543557.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007223310568-162090878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为两张权限表相当于辅助作用，所以实体层中只对角色表及菜单表进行构造与封装。&lt;/p&gt;
&lt;p&gt;2.建立一个login.jsp页面，实现登录功能。&lt;/p&gt;
&lt;p&gt;注意登录时查询到角色的rid(等级)，（使用多表连接查询）,然后将查询到的rid保存到session中。登录方法如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007224324974-1383390426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.登录后跳转到index.jsp。&lt;/p&gt;
&lt;p&gt;该页面整体为easyui的laypout布局，左边部分使用accordion做菜单栏，动态创建父菜单，其中子菜单用tree(树)来加载。点击子菜单后加载其相应的路径在layout中间部分动态添加tab页。&lt;/p&gt;
&lt;p&gt;1.首先要根据登陆时保存角色的rid来多表连接查询出相应父菜单，然后用jaon格式返回给index.jsp页面中。再根据父菜单查询到该角色拥有的子菜单，代码如下&lt;/p&gt;
&lt;p&gt;     查询父菜单&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007225533380-1003924360.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   查询子菜单&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007225901724-559251069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;返回json数据给页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230029271-1574522073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;页面加载菜单&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230218740-770909698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230232599-658028448.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/script&amp;gt;&lt;/p&gt;
&lt;p&gt;权限到这里就完了，效果图如下&lt;/p&gt;
&lt;p&gt;管理员登录图  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230458271-1599315268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;另一个角色如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230633318-1133105666.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为主要说明的是权限，其他的就不多说了。&lt;/p&gt;
&lt;p&gt;可联系本人哦。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 15:10:00 +0000</pubDate>
<dc:creator>柯一</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzx2509254166/p/7636168.html</dc:identifier>
</item>
<item>
<title>【JAVA零基础入门系列】Day3 Java基本数据类型 - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/7635658.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/7635658.html</guid>
<description>&lt;p&gt;　　前两篇已经将开发环境搭建完成，如果你已经按之前的教程按部就班的完成了部署，那么世界上最优秀的编程语言之一和世界上最优秀的IDE之一已经出现在你的电脑上（此处应有掌声），如果你还没入门，或者正在台阶上踱步，可能你还不能理解这个“最优秀”的含义，没有关系，这顿美味需要我们来细嚼慢咽才能品尝到它的独特之处。&lt;/p&gt;
&lt;p&gt;　　接下来，就让我们一起来正式揭开Java的面纱。&lt;/p&gt;
&lt;p&gt;　　Java是一门简单、面向对象、高性能、安全性高、健壮性强、移植性好的语言（一本正经的胡说八道中）。Java的语法跟C++很像，如果有过C++学习经验的人，学习Java上手会容易很多，Java一开始很多特性都跟C++相同，比如基本的程序结构、类、语法规则等等，但是删除了其中很多复杂的东西，比如头文件，结构，联合，操作符重载、虚基类等等，看到这里，学过C++的你可能会觉得很高兴，终于不用跟那些奇奇怪怪的东西打交道了。别高兴的太早，因为，还有让你更高兴的（手动滑稽），那最头疼的指针操作部分，也去掉了，可以说是一个纯净简化版的C++，但也添加了很多自己的特性，没有了多重继承，取而代之的是接口和内部类，由于不允许直接操作指针，所以就不会因为对指针的一顿瞎操作而出现神奇的bug，当然，也少了很多寻找bug的乐趣（尴尬），Java在安全性能上是可以信任的，因为永远不会存取一个坏的指针，而造成内存分配的错误，也不存在内存泄漏问题。所有那些因为指针引起的安全隐患，都不存在的。&lt;/p&gt;
&lt;p&gt;　　也许说了这么多，对于新手的你，看的云里雾里，不知所云，没关系，你只需要知道，Java上手并不难，只比绕操场跑上十来圈难那么一点点，但如果你只是想来散散步的话，那你可能没有机会享受到汗流浃背后的满足感了。&lt;/p&gt;
&lt;p&gt;　　言归正传，Java可以写桌面、可以写Android、可以写服务器、可以写企业级业务、可以写互联网业务。如果你以后想在安卓开发、服务器开发、网站后台开发和维护上有所发展，那Java将是你不错的选择。如果只是想来膜拜一下这门常年位居编程开发语言排行榜榜首的语言，那也可以来看看，俗话说的好，技多不压身嘛，以后见了不会编程的朋友，还可以装个X说我也是学过Java的人（憋笑）。&lt;/p&gt;
&lt;p&gt;　　简单介绍了Java的功能后，能坚持看到这说明你已经有点小心动，想要继续学下去，那就跟我一起来进行系统的学习吧。&lt;/p&gt;
&lt;p&gt;　　要学习Java，自然要从基本的数据类型说起，那么，什么是数据类型？顾名思义嘛，就是不同的数据有不同的类型，就像人按性别分男女，按年龄分老中少，按性情分攻受（咳咳，这里只是为了举个栗子），在java里，基本的数据类型有四种，整数型，浮点型，布尔型和字符型。下面来一一介绍。&lt;/p&gt;
&lt;p&gt;　　整型，自然就是用来存放整数的， 比如说：1,2,3,4,100，等等，一般的整数都可以用int型来存放和操作，整型还可以根据取值范围需求不同再细分成int型，short型，long型，byte型，这几个兄弟排个序，从大到小分别是long、int、short、byte。long型最大，占用8个字节（在java中，讨论最小的存储单元是bit，也就是位，byte是字节，跟位的换算是：1byte=8bit，1kb=1024bytes=2^10bytes），作为整型中的老大，占用8*8=64位，所以除去第一位用于储存符号位，其它63位可以用来表示数值大小，所以它的表示范围为：-2^63 — 2^63-1。大概是百亿亿的级别，所以要是用来存放你的银行卡余额的话，还是不要劳烦long型了（滑稽）。作为最常用的整数型老二，int型可谓是人尽皆知，几乎成了整型的代表人物，它只占用4个字节，取值范围为-2^31 — 2^31-1，比21亿稍微多一点。而老三short，顾名思义，比较“短”，不能跟18cm的long型相提并论，只占用2个字节，表示范围为-2^15 -- 2^15-1，也就是-32768 -- 32767，做小范围的加减乘除的话是够用的。最后介绍的老四，byte型，只占用一个字节，可谓是相当拮据，表示范围为 -128-127。所以存余额的话，byte，short型太短，long型太长，所以用int型最经济实惠。&lt;/p&gt;
&lt;p&gt;　　初学编程的人可能会问了，好好的整数型，还分那么细干嘛。这你就不懂了吧，举个栗子，因为用于存放数据的内存空间是以位为基本单位，可以理解为很多很多相同的小盒子，相同的数据类型需要用同样大小的空间，不然程序就不知道数据的开始和结束位置，用数据头部来存放大小长度信息显然有些浪费空间，那么现在的问题是，一个整数，用多大的空间合适？你可能会觉得，都用同样大小的空间不就好了，那都用8个字节来存储，用来存放大数值的时候很好用，但是用来存放你的年龄的时候，仿佛浪费的空间就有点多了，就好比现在你有一个篮球，一个网球，一个足球，一个乒乓球，都需要用同样大小的盒子来单独存放，那规格自然只能按最大的来算，当你往那个大盒子里放一个乒乓球的时候，不觉得很浪费空间吗。所以为了避免这样不必要的浪费，设计多种整数型是有必要的。当然，也没有必要对于内存太过斤斤计较，如果不是在搞算法研究，不是对时间跟空间效率要求很苛刻的条件下，基本上都用int型就好了。毕竟一般情况，运行效果比运行效率更重要。&lt;/p&gt;
&lt;p&gt;　　接下来说浮点类型，为什么叫浮点类型，自然是用来表示浮点数的（废话），那什么是浮点数，这。说来又要有一段文章了。在计算机中，表示小数有两种方法，一种叫定点，一种叫浮点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007214307146-1266782780.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　以32位程序为例，定点的意思是，小数点固定在 32 位中的某个位置，前面的是整数，后面的是小数。小数点具体固定在哪里，可以自己在程序中指定。例如上面的例子，小数点在 23 bit 处。无论你是124.25，是0.5， 还是100， 小数点都在 23 bit 的位置固定不变。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007214513115-868900610.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div readability=&quot;59&quot;&gt;
&lt;p&gt;　　浮点数是相对定点数而言的，浮点数的表示方法为：&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007214551115-1269636215.jpg&quot; alt=&quot;&quot;/&gt;最高的 1 位是符号位 s，接着的 8 位是指数E，剩下的 23 位为有效数字 M。例如：&lt;/p&gt;
&lt;p&gt;　　5 DEC = 101 BIN = 1.01 x 2^2&lt;/p&gt;
&lt;p&gt;　　100 DEC = ‭01100100‬ BIN = 1.100100 x 2^6&lt;/p&gt;
&lt;p&gt;　　0.125 DEC = 0.001 BIN = 1 x 2^-3&lt;/p&gt;
&lt;p&gt;　　现在，小数点的位置就漂浮不定了。如果想了解关于浮点数的存储问题，可以看看这篇文章，https://www.cnblogs.com/jillzhang/archive/2007/06/24/793901.html&lt;/p&gt;
&lt;p&gt;，当然，新手的话建议先别看了，免得被吓跑了，你只需要知道，浮点型就是用来存取带小数点的数就可以了。&lt;/p&gt;
&lt;p&gt;　　浮点数也分成两个类型，float和double，float占用四个字节，取值范围为-2^128 ~ +2^128，也即-3.40E+38 ~ +3.40E+38；double占用八个字节，取值范围为-2^1024 ~ +2^1024，也即-1.79E+308 ~ +1.79E+308。&lt;/p&gt;
&lt;p&gt;　　float：2^23 = 8388608，一共七位，这意味着最多能有7位有效数字，但绝对能保证的为6位，也即float的精度为6~7位有效数字；&lt;/p&gt;
&lt;p&gt;　　double：2^52 = 4503599627370496，一共16位，同理，double的精度为15~16位。&lt;/p&gt;
&lt;p&gt;　　你如果对于这两个类型傻傻分不清楚，那就只用double类型就好了，java里最常用的浮点类型就是double类型。&lt;/p&gt;
&lt;p&gt;　　扯的有点多了，布尔型都等不及了，别担心，布尔型（boolean）是最简单的，只有真（true）跟假（false）两种状态。&lt;/p&gt;
&lt;p&gt;　　最后就是字符型（char），用于存放字符的数据类型，占用2个字节，采用unicode编码，它的前128字节编码与ASCII兼容字符的存储范围在\u0000~\uFFFF，在定义字符型的数据时候要注意加' '，比如 '1'表示字符'1'而不是数值1。&lt;/p&gt;
&lt;p&gt;　　好了，基本数据类型就介绍这么多了，总的来说，整型用来存放整数，浮点型用来存放小数，布尔型用来存放真假，主要用于逻辑判断，字符型用来存放单个字符，比如：'a','b','c'等等。Java中整数默认为int型，小数默认为double型。&lt;/p&gt;
&lt;p&gt;　　最后再说一点，不同数据类型之间也是可以相互转换的。Java中也是有着弱肉强食的规则，谁占地多谁就大，一个整数型int跟一个浮点型double一起运算时，会自动转化为double型，这样就能无精度损失的进行数值运算了。下面是数据类型之间的合法转换：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007223515021-1701699356.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那我非要进行“非法转换”怎么办，一个占用8字节的double型非要转换成占用4字节的int型该怎么办，那就只能用强制类型转换了，但这样可能会造成精度的丢失。具体情况暂时不多做介绍了，不然又要说半天才能说的完了。&lt;/p&gt;
&lt;p&gt;　　好了，今天的内容到此结束，基本数据类型都看了个遍，如果还是有些不明白，也没有关系，一回生二回熟嘛。来日方长，日后再说吧。（溜了溜了）&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 07 Oct 2017 14:40:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/7635658.html</dc:identifier>
</item>
<item>
<title>一文为你详细讲解对象映射库【AutoMapper】所支持场景 - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/7635429.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/7635429.html</guid>
<description>&lt;p&gt;在AutoMapper未出世前，对象与对象之间的映射，我们只能通过手动为每个属性一一赋值，时间长了不仅是我们而且老外也觉得映射代码很无聊啊。这个时候老外的所写的强大映射库AutoMapper横空出世，AutoMapper是一个对象映射库， 它提供简单的类型配置，以及简单的映射测试。对象映射通过将一种类型的输入对象转换为不同类型的输出对象而起作用。项目之前有用过，但是对其了解不够透彻映射时有时候会抛异常，后来弃之，本节我们来详细了解下AutoMapper映射库。&lt;/p&gt;
&lt;h2&gt;AutoMapper基础版&lt;/h2&gt;
&lt;p&gt;在AutoMapper中创建映射配置有两种方式。一种是通过实例化MapperConfiguration类来配置，一种是通过类Mapper中的静态方法Initialize来配置，下面我们来看看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                Age &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; config = &lt;span&gt;new&lt;/span&gt; MapperConfiguration(cfg =&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者Mapper.Initialize(cfg =&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;());&lt;/span&gt;

            &lt;span&gt;var&lt;/span&gt; mapper =&lt;span&gt; config.CreateMapper();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者var mapper = new Mapper(config);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最终调用Map方法进行映射&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; userDTO = mapper.Map&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;(user);
            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Map映射方法中有两个参数，我们通俗讲则是从一个映射到另一个对象，在AutoMapper中将其称为映射源和映射目标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007191256130-540147555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于本节映射都通过如下静态方法来实现，简单粗暴。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
            Mapper.Initialize(cfg =&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = Mapper.Map&amp;lt;User, UserDTO&amp;gt;(user);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们再来看若映射源为空，那么是否会进行映射，还是抛异常呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            User user &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = Mapper.Map&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;(user);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007191701615-955671182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到此我们总结出一点：&lt;span&gt;AutoMapper将映射源映射到目标时，AutoMapper将忽略空引用异常。 这是AutoMapper默认设计。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;是不是到此关于AutoMapper就讲完了呢？童鞋想想所有场景嘛，这个只是最简单的场景，或者天马行空想想其他问题看看AutoMapper支持不，比如我想想，AutoMapper对属性大小写是否敏感呢？想完就开干啊。我们将User对象属性全部改为小写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                age &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = Mapper.Map&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;(user);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007192424443-1048389209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里我们又可以总结出一点：&lt;span&gt;AutoMapper从映射源到映射目标时不区分大小写。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;AutoMapper中级版 &lt;/h2&gt;
&lt;p&gt;我们讲完基础版，接下来来进入中级版看看AutoMapper到底有多强，磕不屎你哟。是否支持继承映射哎。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Base
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime CreatedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ModifiedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User : Base
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime CreatedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ModifiedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime CreatedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ModifiedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                Age &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                CreatedTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                ModifiedTime &lt;/span&gt;=&lt;span&gt; DateTime.Now
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = Mapper.Map&amp;lt;User, UserDTO&amp;gt;(user);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007193410724-1357240570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，看来也是支持的，我们总结来一个：&lt;span&gt;AutoMapper从映射源到映射目标支持继承。&lt;/span&gt;讲完关于类的继承，我们来看看复杂对象，这下AutoMapper想必要有点挑战了吧。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Address
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; City { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Country { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AuthorModel
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FirstName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LastName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Address Address { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AuthorDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FirstName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LastName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; City { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Country { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; author = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorModel()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                FirstName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                LastName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Address &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Address()
                {
                    City &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深圳&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    State &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Country &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中国&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;AuthorModel, AuthorDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; authorDTO = Mapper.Map&amp;lt;AuthorModel, AuthorDTO&amp;gt;&lt;span&gt;(author);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007194323161-119636576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;哇喔，我说AutoMapper还能有这么智能，那还要我们程序员干嘛，在AuthorDTO中我们将Address扁平化为简单属性，所以此时利用Map不再是万能的，我们需要手动在创建映射配置时通过ForMember方法来自定义指定映射属性来源，从映射源中的Address复杂对象属性到AuthorDTO中属性上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; author = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorModel()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                FirstName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                LastName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Address &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Address()
                {
                    City &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深圳&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    State &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Country &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中国&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;AuthorModel, AuthorDTO&amp;gt;&lt;span&gt;()
            .ForMember(d &lt;/span&gt;=&amp;gt; d.City, o =&amp;gt; o.MapFrom(s =&amp;gt;&lt;span&gt; s.Address.City))
            .ForMember(d &lt;/span&gt;=&amp;gt; d.State, o =&amp;gt; o.MapFrom(s =&amp;gt;&lt;span&gt; s.Address.State))
            .ForMember(d &lt;/span&gt;=&amp;gt; d.Country, o =&amp;gt; o.MapFrom(s =&amp;gt;&lt;span&gt; s.Address.Country))
            );
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; authorDTO = Mapper.Map&amp;lt;AuthorModel, AuthorDTO&amp;gt;(author);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上所给片段代码，对于AuthorDTO中的City属性，我们指定其值来源于映射源中复杂属性Address中的City，其余同理，同时对于其他在相同层次上的属性不会进行覆盖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007200308505-1970293655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认情况下AutoMapper会将同名且不区分大小写的属性进行映射，比如对于有些属性为了节省传输流量且完全不需要用到的属性，我们压根没必要进行映射，此时AutoMapper中有Ignore方法来忽略映射，如下代码片段将忽略对属性Id的映射。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  Mapper.Initialize(cfg =&amp;gt; cfg.CreateMap&amp;lt;AuthorModel, AuthorDTO&amp;gt;&lt;span&gt;()
            .ForMember(d &lt;/span&gt;=&amp;gt; d.Id, o =&amp;gt;&lt;span&gt; o.Ignore())
            );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到此我们又可以来一个总结：&lt;span&gt;AutoMapper支持从映射源到映射目标的扁平化&lt;/span&gt;。实际上AutoMapper支持扁平化映射，但是前提是遵守AutoMapper映射约定才行，我们走一个。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Company Company { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Company
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CompanyName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer()
            {
                Company &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Company()
                {
                    Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;腾讯&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;();
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customerDTO = Mapper.Map&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;(customer);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007204934193-1979803542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你看我们什么都没做，结果同样还是映射到了目标类中，不过是遵守了AutoMapper的映射约定罢了，看到这个想必大家就马上明白过来了。如果扁平化映射源类，若想AutoMapper依然能够自动映射，那么映射目标类中的属性必须是映射源中复杂属性名称加上复杂属性中的属性名称才行，因为AutoMapper会深度搜索目标类，直到找到匹配的属性为止。下面我们再来看看集合映射。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Order&amp;gt; Orders { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TradeNo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TotalFee { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;OrderDTO&amp;gt; OrderDTOs { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TradeNo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TotalFee { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述Customer对象中有Order的集合属性，所以怕AutoMapper是映射不了，我们手动配置一下，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Orders &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;Order&amp;gt;&lt;span&gt;()
                {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Order()
                    {
                        Id &lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                        TotalFee &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                        TradeNo &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20172021690326&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }
                }
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
            .ForMember(d &lt;/span&gt;=&amp;gt; d.OrderDTOs, o =&amp;gt; o.MapFrom(s =&amp;gt;&lt;span&gt; s.Orders))
            );
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customerDTO = Mapper.Map&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;(customer);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007202955693-148649630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;喔，抛出异常了，哈哈，果然AutoMapper还有不支持的，果断弃之（我们项目当时就是一直出这样的问题于是乎弃用了）。慢着，老铁。利用AutoMapper映射大部分情况下都会遇到如上异常，所以我们来分析下，在AutoMapper中，当它偶遇一个接口的目标对象时，它会自动生成动态代理类，怎么感觉好像说到EntityFramework了。 当映射到不存在的映射目标时，这就是内部设计的行为了。 然而然而，我们映射目标类却存在啊，于是乎我修改了AutoMapper映射，将Order到OrderDTO也进行映射配置，然后在配置映射Customer对象再指定Order集合属性，我们试试。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
            Mapper.Initialize(cfg =&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Order, OrderDTO&amp;gt;&lt;span&gt;();
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
               .ForMember(d &lt;/span&gt;=&amp;gt; d.OrderDTOs, o =&amp;gt; o.MapFrom(s =&amp;gt; Mapper.Map&amp;lt;IList&amp;lt;Order&amp;gt;, IList&amp;lt;OrderDTO&amp;gt;&amp;gt;&lt;span&gt;(s.Orders)));
            });
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customerDTO = Mapper.Map&amp;lt;Customer, CustomerDTO&amp;gt;(customer);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007204047146-1516349979.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;老铁妥妥没毛病，通过此种方式即使嵌套多层依然也是能够解析，只不过我们得手动多几个配置罢了不是，这里我们又来一个结论：&lt;span&gt;在映射复杂对象中的集合属性时，我们需要配置集合属性的映射，然后在复杂对象中再次映射集合属性&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;AutoMapper高级版&lt;/h2&gt;
&lt;p&gt;AutoMapper太强大了，我给跪了，强大到这篇幅不够，得手动下拉滚动条继续磕。废话少说，我们再来看看AutoMapper使用高级版，自定义值解析，动态对象映射、类型转换等。&lt;/p&gt;
&lt;h3&gt;自定义值解析&lt;/h3&gt;
&lt;p&gt;AutoMapper支持自定义解析，只不过我们需要实现IValueResolver接口才行，下面我们来看看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; VIP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; VIP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现IValueResolver接口，对映射源加以判断返回映射目标中的字符串。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; VIPResolver : IValueResolver&amp;lt;Customer, CustomerDTO, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Resolve(Customer source, CustomerDTO destination, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; destMember, ResolutionContext context)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; source.VIP ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在映射配置时使用ResolveUsing来实现上述自定义解析，使用方式有如下两种。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; customer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer()
            {
                VIP &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
                .ForMember(cv &lt;/span&gt;=&amp;gt; cv.VIP, m =&amp;gt; m.ResolveUsing&amp;lt;VIPResolver&amp;gt;&lt;span&gt;());
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Mapper.Initialize(cfg =&amp;gt;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    cfg.CreateMap&amp;lt;Customer, CustomerDTO&amp;gt;()
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    .ForMember(cv =&amp;gt; cv.VIP, m =&amp;gt; m.ResolveUsing(new VIPResolver()));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;});&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; customerDTO = Mapper.Map&amp;lt;Customer, CustomerDTO&amp;gt;(customer);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007211944802-1673707436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;动态对象映射 &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;dynamic&lt;/span&gt; customer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExpandoObject();
            customer.Id &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
            customer.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt;&lt;span&gt; { });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = Mapper.Map&amp;lt;Customer&amp;gt;&lt;span&gt;(customer);

            &lt;/span&gt;&lt;span&gt;dynamic&lt;/span&gt; foo2 = Mapper.Map&amp;lt;ExpandoObject&amp;gt;(result);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007214127896-589647692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;类型转换 &lt;/h3&gt;
&lt;p&gt;关于上述自定义值解析，我们同样可以用类型转换类实现，在AutoMapper中存在ConvertUsing方法，该方法类似于C#中的投影一样，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            Mapper.Initialize(cfg =&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
                .ConvertUsing(s &lt;/span&gt;=&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomerDTO()
                {
                    VIP &lt;/span&gt;= s.VIP ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                });
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomTypeConverter : ITypeConverter&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomerDTO Convert(Customer source, CustomerDTO destination, ResolutionContext context)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomerDTO
            {
                VIP &lt;/span&gt;= source.VIP ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            };
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            Mapper.Initialize(cfg =&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
                .ConvertUsing(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomTypeConverter());
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AutoMapper太强大了，上述已经给出大部分我们基本上会用到的场景，AutoMapper还支持依赖注入，同时最爽的是有了AutoMapper.QueryableExtensions扩展方法，这针对使用EF的童鞋简直是福音啊。 通过ProjectTo方法即可映射从数据库查询出的IQueryable类型数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            IQueryable&amp;lt;Customer&amp;gt; customers = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customersDTO = customers.&lt;span&gt;ProjectTo&lt;/span&gt;&amp;lt;CustomerDTO&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;AutoMapper强大到给跪了，目前该项目已被.NET基金会所支持，看过的，路过的，没用过的，赶紧走起用起来啊，有时间还会更新AutoMapper其他用途，想必上述场景已经够我们用了吧，如果你觉得不够用，请私信我，我再加上啊。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 14:05:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/7635429.html</dc:identifier>
</item>
</channel>
</rss>