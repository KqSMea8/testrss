<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>shiro标签 - MrChengs</title>
<link>http://www.cnblogs.com/Mrchengs/p/9995455.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mrchengs/p/9995455.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;有具体问题的可以参考之前的关于shiro的博文，关于shiro的博文均是一次工程的内容 ！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;shiro标签：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Shiro提供了JSTL标签用于在JSP页面进行权限控制：&lt;/p&gt;
&lt;p&gt;1.guest标签：用户&lt;strong&gt;&lt;span&gt;没有&lt;/span&gt;&lt;/strong&gt;身份&lt;strong&gt;&lt;span&gt;验证&lt;/span&gt;&lt;/strong&gt;时显示的信息，相当于游客模式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;shiro:guest&amp;gt;&lt;br/&gt;　　游客模式，请进行登陆：&amp;lt;a href=&quot;...&quot;&amp;gt;登陆&amp;lt;/a&amp;gt;&lt;br/&gt;&amp;lt;shiro:guest&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.user标签：用户&lt;strong&gt;&lt;span&gt;已经认&lt;/span&gt;&lt;/strong&gt;证登陆后的显示/&lt;span&gt;&lt;strong&gt;记住我&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;shiro:user&amp;gt;&lt;br/&gt;　　恭喜&amp;lt;shiro:principal/&amp;gt;已经成功登陆!&lt;br/&gt;&amp;lt;shiro:user&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.authenticated标签：用户已经验证通过，&lt;strong&gt;&lt;span&gt;不是记住我登陆的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;shiro:authenticated&amp;gt;&lt;span&gt;
　　恭喜&lt;/span&gt;&amp;lt;shiro:principal/&amp;gt;&lt;span&gt;已验证通过&lt;/span&gt;&lt;br/&gt;&amp;lt;shiro:authenticated&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.notAuthenticated:用户未进行身份验证，没有调用Subject.login进行登陆&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;包括记住我自动登陆&lt;/span&gt;&lt;/strong&gt;的也属于未进行身份验证&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;shiro:notAuthenticated&amp;gt;&lt;span&gt;
    未身份验证(包括&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;记住我&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;lt;/shiro:notAuthenticated&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.principal ：&lt;span&gt;&lt;strong&gt;显示用户身份信息&lt;/strong&gt;&lt;/span&gt;，默认调用Subject.getPrincipal(),即Primary Principal&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;shiro:principal property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 6.&lt;code class=&quot;html plain&quot;&gt;hasRole标签：如果当前Subject有角色将显示body体内的内容&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;line number26 index25 alt1&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;shiro:hashRole name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    用户[&lt;/span&gt;&amp;lt;shiro:principal/&amp;gt;&lt;span&gt;]拥有角色admin
&lt;/span&gt;&amp;lt;/shiro:hashRole&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;html plain&quot;&gt;7.hasAnyRoles标签：如果Subject有任意&lt;strong&gt;&lt;span&gt;一个&lt;/span&gt;&lt;/strong&gt;角色(&lt;strong&gt;&lt;span&gt;或的关系&lt;/span&gt;&lt;/strong&gt;)将显示body体里的内容&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;line number31 index30 alt2&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;shiro:hasAnyRoles name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin,user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    用户[&lt;/span&gt;&amp;lt;shiro:pricipal/&amp;gt;&lt;span&gt;]拥有角色admin 或者 user
&lt;/span&gt;&amp;lt;/shiro:hasAnyRoles&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 8.&lt;code class=&quot;html plain&quot;&gt;lacksRole:如果当前 Subjec没有角色将显示body体内的内容&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;line number36 index35 alt1&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;shiro:lacksRole name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    用户[&lt;/span&gt;&amp;lt;shiro:pricipal/&amp;gt;&lt;span&gt;]没有角色admin&amp;lt;/br&amp;gt;
&lt;/span&gt;&amp;lt;/shiro:lacksRole&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;html plain&quot;&gt;9.hashPermission:如果当前&lt;strong&gt;&lt;span&gt;Subjec&lt;/span&gt;&lt;/strong&gt;t&lt;strong&gt;&lt;span&gt;有权限将&lt;/span&gt;&lt;/strong&gt;显示body体内容&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;line number41 index40 alt2&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;shiro:hashPermission name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user:create&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    用户[&lt;/span&gt;&amp;lt;shiro:pricipal/&amp;gt;&lt;span&gt;] 拥有权限user:create
&lt;/span&gt;&amp;lt;/shiro:hashPermission&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;html plain&quot;&gt;10.lacksPermission:如果当前Subject没有权限将显示body体内容&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;line number46 index45 alt1&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;shiro:lacksPermission name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org:create&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
    用户[&lt;/span&gt;&amp;lt;shiro:pricipal/&amp;gt;&lt;span&gt;] 没有权限org:create
&lt;/span&gt;&amp;lt;/shiro:lacksPermission&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; 在list.jsp文件中：&lt;/p&gt;
&lt;div class=&quot;line number33 index32 alt2&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;&lt;span&gt;
    list.
    
    welcome:&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;shiro:principal&amp;gt;&amp;lt;/shiro:principal&amp;gt;&lt;/span&gt;&lt;/strong&gt;
    
    &lt;strong&gt;&lt;span&gt;&amp;lt;shiro:hasRole name=&quot;admin&quot;&amp;gt;&lt;/span&gt;&lt;/strong&gt;
    &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;TO Admin&amp;lt;/a&amp;gt;
    &amp;lt;/shiro:hasRole&amp;gt;
    
   &lt;strong&gt;&lt;span&gt; &amp;lt;shiro:hasRole name=&quot;user&quot;&amp;gt;&lt;/span&gt;&lt;/strong&gt;
    &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;TO User&amp;lt;/a&amp;gt;
    &amp;lt;/shiro:hasRole&amp;gt;
    

    &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shiro/logout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Logout&amp;lt;/a&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt; 使用user登陆：&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181121153537638-797678695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 使用admin登陆：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181121153544061-495274008.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 21 Nov 2018 07:37:00 +0000</pubDate>
<dc:creator>MrChengs</dc:creator>
<og:description>有具体问题的可以参考之前的关于shiro的博文，关于shiro的博文均是一次工程的内容 ！ shiro标签： Shiro提供了JSTL标签用于在JSP页面进行权限控制： 1.guest标签：用户没有身</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mrchengs/p/9995455.html</dc:identifier>
</item>
<item>
<title>文件上传oss服务器 - LH--Yu</title>
<link>http://www.cnblogs.com/LH--Yu/p/9995428.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LH--Yu/p/9995428.html</guid>
<description>&lt;p&gt;最近接到个需求，项目文件由原来上传至服务器本地改为上传至阿里oss服务器中。查看了官方相关文档后最终成功实现，在此记录一下相关经验。&lt;/p&gt;
&lt;p&gt;官网文档：&lt;a href=&quot;https://help.aliyun.com/document_detail/84781.html?spm=a2c4g.11186623.6.707.5a0c1bd4CT02Ig&quot; data-cke-saved-href=&quot;https://help.aliyun.com/document_detail/84781.html?spm=a2c4g.11186623.6.707.5a0c1bd4CT02Ig&quot;&gt;https://help.aliyun.com/document_detail/84781.html?spm=a2c4g.11186623.6.707.5a0c1bd4CT02Ig&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pom文件引用：&lt;/p&gt;

&lt;p&gt;上传工具类：&lt;/p&gt;

&lt;p&gt;关于链接有效时间：oss提供的bucket有三种类型：公共读写、公共读、私有，私有bucket下的链接会有有效时间最大为64800秒，如果只是用来存储一些无关紧要的图片等可以将bucket属性设置为公共读写。&lt;/p&gt;
</description>
<pubDate>Wed, 21 Nov 2018 07:34:00 +0000</pubDate>
<dc:creator>LH--Yu</dc:creator>
<og:description>最近接到个需求，项目文件由原来上传至服务器本地改为上传至阿里oss服务器中。查看了官方相关文档后最终成功实现，在此记录一下相关经验。 官网文档：https://help.aliyun.com/docu</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LH--Yu/p/9995428.html</dc:identifier>
</item>
<item>
<title>流式大数据计算实践（3）----高可用的Hadoop集群 - 未分配微服务</title>
<link>http://www.cnblogs.com/orange911/p/9994092.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/orange911/p/9994092.html</guid>
<description>&lt;h2&gt;一、前言&lt;/h2&gt;
&lt;p&gt;1、上文中我们已经搭建好了Hadoop和Zookeeper的集群，这一文来将Hadoop集群变得高可用&lt;/p&gt;
&lt;p&gt;2、由于Hadoop集群是主从节点的模式，如果集群中的namenode主节点挂掉，那么集群就会瘫痪，所以我们要改造成HA模式（&lt;span class=&quot;fontstyle0&quot;&gt;High Avaliable，高可用性&lt;/span&gt;）的集群，说白了就是设置一个备用的namenode节点，当线上使用的namenode挂掉后，会切换备用节点，让集群可以继续运行&lt;/p&gt;
&lt;h2&gt;二、HA模式配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;HA模式原理&lt;/strong&gt;：比如设置两个namenode节点，一个active，一个standby（同时只能active一个namenode），集群运行中通过JournalNode来同步两个namenode节点的数据，通过Zookeeper来做节点维护，Zookeeper与节点之间存在一个心跳机制，当Zookeeper检测不到某个节点的心跳时，则认为节点挂掉了，就会启动切换机制&lt;/p&gt;
&lt;p&gt;1、首先配置&lt;span class=&quot;fontstyle0&quot;&gt;journalnode集群 通信的超时时间，如果机器配置不好的情况下，连接时间会比较长，所以加大超时时间，生产环境尽量设置越小越好，这样检测故障也会更加及时&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vim /work/soft/hadoop-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/etc/hadoop/hdfs-&lt;span&gt;site.xml

  &lt;/span&gt;&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.qjournal.start-segment.timeout.ms&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;&lt;span&gt;60000&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、&lt;span class=&quot;fontstyle0&quot;&gt;failover配置----&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;hdfs-site.xml&lt;/span&gt;&lt;span class=&quot;fontstyle0&quot;&gt;配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（1）配置集群id&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（2）配置nodenode组的节点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（3、4）配置每个namenode节点的rpc地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（5、6）配置每个namenode节点的控制台地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（7）配置&lt;span class=&quot;fontstyle0&quot;&gt;journalnode集群的访问地址，由于我这里只有两台虚拟机，所以都加上去了，生产环境下，尽量将journalnode和namenode分开在不同的机器，因为一般namenode节点挂了，很可能是因为namenode所在的物理机本身存在一些问题导致，放在一起又会导致journalnode节点也挂掉&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（8）配置dfs客户端，用来判断哪个namenode是active的&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（9、10）配置结束namenode的方式：当检测到namenode挂掉并进行备用节点切换时，要将之前的namenode彻底干掉，因为要防止namenode的“假死”，比如namenode所在的机器可能由于网络不好被认为挂掉而切换了备用节点，当原namenode机器网络恢复，就会造成两个namenode同时工作，导致数据混乱，这就是所谓的“脑裂现象”。为了防止这个现象，当检测到namenode挂掉，那么就直接SSH连接到这台机器上，并将namenode直接kill掉，第10条配置就要指定当初配置SSH生成的私钥目录&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（11）配置journalnode的数据存放的文件夹（要记得去创建文件夹）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
vim /work/soft/hadoop-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/etc/hadoop/hdfs-&lt;span&gt;site.xml

  &lt;/span&gt;&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.nameservices&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;stormcluster&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.ha.namenodes.stormcluster&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;storm1,storm2&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.namenode.rpc-address.stormcluster.storm1&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;storm1:&lt;span&gt;8020&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.namenode.rpc-address.stormcluster.storm2&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;storm2:&lt;span&gt;8020&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.namenode.http-address.stormcluster.storm1&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;storm1:&lt;span&gt;50070&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.namenode.http-address.stormcluster.storm2&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;storm2:&lt;span&gt;50070&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.namenode.shared.edits.&lt;span&gt;dir&lt;/span&gt;&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;qjournal:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;storm1:8485;storm2:8485/stormcluster&amp;lt;/value&amp;gt;&lt;/span&gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.client.failover.proxy.provider.stormcluster&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.ha.fencing.methods&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;sshfence&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.ha.fencing.&lt;span&gt;ssh&lt;/span&gt;.private-key-files&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;/root/.&lt;span&gt;ssh&lt;/span&gt;/id_rsa&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.journalnode.edits.&lt;span&gt;dir&lt;/span&gt;&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;/work/hadoop/jn&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、&lt;span class=&quot;fontstyle0&quot;&gt;failover配置----&lt;span class=&quot;fontstyle0&quot;&gt;core-site.xml&lt;span class=&quot;fontstyle0&quot;&gt;配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;（1）将之前设置的defaultFS修改成我们刚刚配置的集群id&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vim /work/soft/hadoop-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/etc/hadoop/core-&lt;span&gt;site.xml

  &lt;/span&gt;&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;hdfs:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;stormcluster&amp;lt;/value&amp;gt;&lt;/span&gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、启动/停止journalnode&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
$HADOOP_PREFIX/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; start journalnode
&lt;/pre&gt;
&lt;pre&gt;
$HADOOP_PREFIX/sbin/hadoop-daemon.sh stop journalnode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5、启动后用jps命令看看journalnode节点是否存在&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121143609740-196188803.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6、将第一个namenode进行格式化&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
hdfs namenode -format
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7、将第二个namenode初始化作为备份&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hdfs namenode -bootstrapStandby
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8、将第一个namenode的&lt;span class=&quot;fontstyle0&quot;&gt;journode进行初始化&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hdfs namenode -initializeSharedEdits
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9、将两台机器的namenode启动&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$HADOOP_PREFIX/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --script hdfs start namenode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10、通过50070端口访问两台机的控制台，可以发现两个namenode都处于standby状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121145426663-55282871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121145434200-1809703342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;11、执行命令手动切换active节点，将storm1激活，storm2变成备份，刷新控制台，可以发现storm1变成了active，storm2依然是standby&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hdfs haadmin -failover storm2 storm1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121145639520-516843507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121145648074-1428494674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;12、配置zkfc自动化切换&lt;/p&gt;
&lt;p&gt;（1）首先配置Z&lt;span class=&quot;fontstyle0&quot;&gt;ookeeper的超时时间，生产环境尽量设置小一些，及时判断是否宕机&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vim /work/soft/hadoop-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/etc/hadoop/core-&lt;span&gt;site.xml

  &lt;/span&gt;&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;ha.zookeeper.session-timeout.ms&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;&lt;span&gt;30000&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）启动Zookeeper集群&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ZOOKEEPER_HOME/bin/zkServer.&lt;span&gt;sh&lt;/span&gt; start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）配置自动化切换和Zookeeper集群的地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
vim /work/soft/hadoop-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;/etc/hadoop/hdfs-&lt;span&gt;site.xml

  &lt;/span&gt;&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;dfs.ha.automatic-failover.enabled&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;ha.zookeeper.quorum&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;storm1:&lt;span&gt;2181&lt;/span&gt;,storm2:&lt;span&gt;2181&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）初始化Zookeeper集群&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$HADOOP_PREFIX/bin/hdfs zkfc -formatZK
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）进入Zookeeper命令行查看目录，可以看到多了一个hadoop-ha，说明配置正确&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ZOOKEEPER_HOME/bin/zkCli.&lt;span&gt;sh&lt;p&gt;ls /&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121151036085-77616351.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（6）我们把两台机的namenode都重启一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$HADOOP_PREFIX/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --&lt;span&gt;script hdfs stop namenode
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --script hdfs start namenode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（7）通过50070控制台可以看到两台都处于standby状态（如果namenode起不来，就格式化一下）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121145426663-55282871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121145434200-1809703342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（8）启动zkfc&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$HADOOP_PREFIX/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --script $HADOOP_PREFIX/bin/hdfs start zkfc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（9）用jps命令可以看到新的进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121151815915-875824279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（10）刷新50070控制台，可以发现有一台namenode已经变成了active&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121145639520-516843507.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1354244/201811/1354244-20181121145648074-1428494674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;三、总结&lt;/h2&gt;
&lt;p&gt;1、到此我们的Hadoop集群已经搭建完毕，终于可以开始使用HBash了，要注意当前集群节点的启动顺序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
zookeeper--&amp;gt;journalnode--&amp;gt;namenode--&amp;gt;zkfc--&amp;gt;datanode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、以下是按照启动顺序的启动命令总结&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
$ZOOKEEPER_HOME/bin/zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; start
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; start journalnode
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --&lt;span&gt;script hdfs start namenode
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --script $HADOOP_PREFIX/bin/&lt;span&gt;hdfs start zkfc
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --script hdfs start datanode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、以下是按照启动顺序的停止命令总结&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
$ZOOKEEPER_HOME/bin/zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; stop
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; stop journalnode
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --&lt;span&gt;script hdfs stop namenode
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --script $HADOOP_PREFIX/bin/&lt;span&gt;hdfs stop zkfc
$HADOOP_PREFIX&lt;/span&gt;/sbin/hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; --script hdfs stop datanode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 4、经常遇到namenode或者datanode起不来，可以删除数据目录，再执行格式化命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;rm&lt;/span&gt; -rf /work/hadoop/nn&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
rm -rf /work/hadoop/dn/*

hdfs namenode -format&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 21 Nov 2018 07:26:00 +0000</pubDate>
<dc:creator>未分配微服务</dc:creator>
<og:description>一、前言 1、上文中我们已经搭建好了Hadoop和Zookeeper的集群，这一文来将Hadoop集群变得高可用 2、由于Hadoop集群是主从节点的模式，如果集群中的namenode主节点挂掉，那么</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/orange911/p/9994092.html</dc:identifier>
</item>
<item>
<title>数据库（二） - Eurekaa</title>
<link>http://www.cnblogs.com/zuanzuan/p/9995253.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuanzuan/p/9995253.html</guid>
<description>[unable to retrieve full-text content]前言 本篇博客学习数据库的详细建表语句，数据库数据类型以及约束条件。 详细建表语句 在介绍建表语句之前需要了解一下存储引擎。 存储引擎 MySQL 支持的存储引擎有以下几种： 以后我们使用的就只有 InnoDB 引擎，可以看到默认情况下存储引擎就是 InnoDB，建立一个表的时候，可以看看在文件夹里</description>
<pubDate>Wed, 21 Nov 2018 07:14:00 +0000</pubDate>
<dc:creator>Eurekaa</dc:creator>
<dc:identifier>http://www.cnblogs.com/zuanzuan/p/9995253.html</dc:identifier>
</item>
<item>
<title>Git+Gitlab+Ansible剧本实现持续化一键部署--技术流ken - 技术流ken</title>
<link>http://www.cnblogs.com/kenken2018/p/9991475.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenken2018/p/9991475.html</guid>
<description>[unable to retrieve full-text content]前言 截止目前已经写了《Ansible基础认识及安装使用详解（一）--技术流ken》，《Ansible常用模块介绍及使用（二）--技术流ken》《Ansible剧本介绍及使用演示（三）--技术流ken》以及《Git介绍及常用操作演示（一）--技术流ken》，《Gitlab在linux/windows</description>
<pubDate>Wed, 21 Nov 2018 07:05:00 +0000</pubDate>
<dc:creator>技术流ken</dc:creator>
<dc:identifier>http://www.cnblogs.com/kenken2018/p/9991475.html</dc:identifier>
</item>
<item>
<title>C# 在PPT中绘制形状（shape） - E-iceblue</title>
<link>http://www.cnblogs.com/Yesi/p/9995150.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Yesi/p/9995150.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;本篇文章将介绍C# 在PPT幻灯片中操作形状（shape）的方法。这里主要涉及常规形状，如箭头、矩形、圆形、三角形、多边形、不规则形状等。下面的示例中，可以通过绘制形状，并设置相应格式等。示例包含以下要点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;绘制形状&lt;/li&gt;
&lt;li&gt;用图片填充形状&lt;/li&gt;
&lt;li&gt;在形状中添加文字&lt;/li&gt;
&lt;li&gt;设置形状单色、渐变色填充&lt;/li&gt;
&lt;li&gt;设置形状阴影效果&lt;/li&gt;
&lt;li&gt;组合多个形状为一个&lt;/li&gt;
&lt;li&gt;设置形状光边效果&lt;/li&gt;
&lt;li&gt;将形状保存为图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下载安装后，注意在程序中添加引用Spire.Presentation.dll到程序，dll文件可在安装路径下的Bin文件夹中获取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/706090/201811/706090-20181121145206001-257048478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;【示例1】绘制形状&lt;/h2&gt;
&lt;p&gt;步骤1：新建一个幻灯片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个幻灯片文档，并指定幻灯片大小&lt;/span&gt;
Presentation ppt = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Presentation();
ppt.SlideSize.Type &lt;/span&gt;= SlideSizeType.Screen16x9;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤2：获取第一张幻灯片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ISlide slide = ppt.Slides[&lt;span&gt;0&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤3：添加一个云朵形状，并填充渐变色，绘入文字&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个云朵形状，并填充渐变颜色&lt;/span&gt;
IAutoShape shape1 = slide.Shapes.AppendShape(ShapeType.CalloutCloud, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;160&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;80&lt;/span&gt;&lt;span&gt;));
shape1.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Gradient;
shape1.Fill.Gradient.GradientStops.Append(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Color.Blue);
shape1.Fill.Gradient.GradientStops.Append(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, Color.Azure);
shape1.Line.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.None;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在形状中绘制文本，并设置字体、字号、字体颜色等&lt;/span&gt;
shape1.AppendTextFrame(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HOW??&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
TextRange textRange &lt;/span&gt;= (shape1 &lt;span&gt;as&lt;/span&gt;&lt;span&gt; IAutoShape).TextFrame.TextRange;
textRange.FontHeight &lt;/span&gt;= &lt;span&gt;13&lt;/span&gt;&lt;span&gt;;
textRange.LatinFont &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; TextFont(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Arial&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
textRange.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
textRange.Fill.SolidColor.Color &lt;/span&gt;= Color.White;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤4：添加椭圆形状，并加载图片填充&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
IAutoShape shape2 = slide.Shapes.AppendShape(ShapeType.Ellipse, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;, &lt;span&gt;250&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; picPath = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sk.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;; 
shape2.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Picture;
shape2.Fill.PictureFill.Picture.Url &lt;/span&gt;=&lt;span&gt; picPath;
shape2.Fill.PictureFill.FillType &lt;/span&gt;=&lt;span&gt; PictureFillType.Stretch;
shape2.Line.FillType &lt;/span&gt;= FillFormatType.None;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤5：添加三角形，并设置边框效果，阴影效果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个三角形,填充颜色并设置边框样式&lt;/span&gt;
IAutoShape shape3 = slide.Shapes.AppendShape(ShapeType.Triangle, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;480&lt;/span&gt;, &lt;span&gt;180&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;&lt;span&gt;));
shape3.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
shape3.Fill.SolidColor.Color &lt;/span&gt;=&lt;span&gt; Color.Wheat;
shape3.Line.Width &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
shape3.Line.DashStyle &lt;/span&gt;=&lt;span&gt; LineDashStyleType.Dash;
shape3.ShapeStyle.LineColor.Color &lt;/span&gt;=&lt;span&gt; Color.Red;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置形状阴影效果&lt;/span&gt;
PresetShadow presetShadow = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PresetShadow();
presetShadow.Preset &lt;/span&gt;=&lt;span&gt; PresetShadowValue.BackRightPerspective;
presetShadow.ColorFormat.Color &lt;/span&gt;=&lt;span&gt; Color.LightGray;
shape3.EffectDag.PresetShadowEffect &lt;/span&gt;= presetShadow;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤6：添加一个带箭头的直线&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
IAutoShape shape4 = slide.Shapes.AppendShape(ShapeType.Line, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;660&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;span&gt;));
shape4.ShapeStyle.LineColor.Color &lt;/span&gt;=&lt;span&gt; Color.Red;
shape4.Line.LineEndType &lt;/span&gt;=&lt;span&gt; LineEndType.StealthArrow;
shape4.Rotation &lt;/span&gt;= -&lt;span&gt;90&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置形状旋转角度&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤7：绘制一个圆形、五角星，并设置光边效果，将拉个形状组合&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个圆形&lt;/span&gt;
IAutoShape shape5 = slide.Shapes.AppendShape(ShapeType.Ellipse, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;289&lt;/span&gt;, &lt;span&gt;166&lt;/span&gt;, &lt;span&gt;120&lt;/span&gt;, &lt;span&gt;120&lt;/span&gt;&lt;span&gt;));
shape5.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
shape5.Fill.SolidColor.Color &lt;/span&gt;=&lt;span&gt; Color.White;
shape5.Line.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
shape5.Line.SolidFillColor.Color &lt;/span&gt;=&lt;span&gt; Color.Red;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个五角星形状&lt;/span&gt;
IAutoShape shape6 = slide.Shapes.AppendShape(ShapeType.FivePointedStar, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;300&lt;/span&gt;, &lt;span&gt;170&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;span&gt;));
shape6.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
shape6.Fill.SolidColor.Color &lt;/span&gt;=&lt;span&gt; Color.Orange;
shape6.Line.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.None;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置五角星形状的光边效果&lt;/span&gt;
GlowEffect glow = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GlowEffect();
glow.ColorFormat.Color &lt;/span&gt;=&lt;span&gt; Color.Yellow;
glow.Radius &lt;/span&gt;= &lt;span&gt;7.0&lt;/span&gt;&lt;span&gt;;
shape6.EffectDag.GlowEffect &lt;/span&gt;=&lt;span&gt; glow;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将shape5和shape6两个形状组合&lt;/span&gt;
ArrayList list = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
list.Add(shape5);
list.Add(shape6);
ppt.Slides[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;].GroupShapes(list);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤8：保存文档&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ppt.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.pptx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, FileFormat.Pptx2010);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成代码后，调试运行程序，生成文档，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/706090/201811/706090-20181121145537537-1939224477.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;全部代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46.5&quot;&gt;&lt;img id=&quot;code_img_closed_4ef47522-3f29-4346-a959-d938a15bb64b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4ef47522-3f29-4346-a959-d938a15bb64b&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4ef47522-3f29-4346-a959-d938a15bb64b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;88&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Presentation;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Presentation.Drawing;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Drawing;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DrawShape_PPT
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个幻灯片文档，并指定幻灯片大小&lt;/span&gt;
            Presentation ppt = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Presentation();
            ppt.SlideSize.Type &lt;/span&gt;=&lt;span&gt; SlideSizeType.Screen16x9;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一张幻灯片&lt;/span&gt;
            ISlide slide = ppt.Slides[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个云朵形状，并填充渐变颜色&lt;/span&gt;
            IAutoShape shape1 = slide.Shapes.AppendShape(ShapeType.CalloutCloud, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;160&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;80&lt;/span&gt;&lt;span&gt;));
            shape1.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Gradient;
            shape1.Fill.Gradient.GradientStops.Append(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Color.Blue);
            shape1.Fill.Gradient.GradientStops.Append(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, Color.Azure);
            shape1.Line.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.None;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在形状中绘制文本，并设置字体、字号、字体颜色等&lt;/span&gt;
            shape1.AppendTextFrame(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HOW??&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            TextRange textRange &lt;/span&gt;= (shape1 &lt;span&gt;as&lt;/span&gt;&lt;span&gt; IAutoShape).TextFrame.TextRange;
            textRange.FontHeight &lt;/span&gt;= &lt;span&gt;13&lt;/span&gt;&lt;span&gt;;
            textRange.LatinFont &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; TextFont(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Arial&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            textRange.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
            textRange.Fill.SolidColor.Color &lt;/span&gt;=&lt;span&gt; Color.White;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个椭圆，并用图片填充形状&lt;/span&gt;
            IAutoShape shape2 = slide.Shapes.AppendShape(ShapeType.Ellipse, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;, &lt;span&gt;250&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; picPath = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sk.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;; 
            shape2.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Picture;
            shape2.Fill.PictureFill.Picture.Url &lt;/span&gt;=&lt;span&gt; picPath;
            shape2.Fill.PictureFill.FillType &lt;/span&gt;=&lt;span&gt; PictureFillType.Stretch;
            shape2.Line.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.None;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个三角形,填充颜色并设置形状边框样式&lt;/span&gt;
            IAutoShape shape3 = slide.Shapes.AppendShape(ShapeType.Triangle, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;480&lt;/span&gt;, &lt;span&gt;180&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;&lt;span&gt;));
            shape3.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
            shape3.Fill.SolidColor.Color &lt;/span&gt;=&lt;span&gt; Color.Wheat;
            shape3.Line.Width &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
            shape3.Line.DashStyle &lt;/span&gt;=&lt;span&gt; LineDashStyleType.Dash;
            shape3.ShapeStyle.LineColor.Color &lt;/span&gt;=&lt;span&gt; Color.Red;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置形状阴影效果&lt;/span&gt;
            PresetShadow presetShadow = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PresetShadow();
            presetShadow.Preset &lt;/span&gt;=&lt;span&gt; PresetShadowValue.BackRightPerspective;
            presetShadow.ColorFormat.Color &lt;/span&gt;=&lt;span&gt; Color.LightGray;
            shape3.EffectDag.PresetShadowEffect &lt;/span&gt;=&lt;span&gt; presetShadow;
         
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个带箭头的直线&lt;/span&gt;
            IAutoShape shape4 = slide.Shapes.AppendShape(ShapeType.Line, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;660&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;span&gt;));
            shape4.ShapeStyle.LineColor.Color &lt;/span&gt;=&lt;span&gt; Color.Red;
            shape4.Line.LineEndType &lt;/span&gt;=&lt;span&gt; LineEndType.StealthArrow;
            shape4.Rotation &lt;/span&gt;= -&lt;span&gt;90&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置形状旋转角度

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个圆形&lt;/span&gt;
            IAutoShape shape5 = slide.Shapes.AppendShape(ShapeType.Ellipse, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;289&lt;/span&gt;, &lt;span&gt;166&lt;/span&gt;, &lt;span&gt;120&lt;/span&gt;, &lt;span&gt;120&lt;/span&gt;&lt;span&gt;));
            shape5.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
            shape5.Fill.SolidColor.Color &lt;/span&gt;=&lt;span&gt; Color.White;
            shape5.Line.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
            shape5.Line.SolidFillColor.Color &lt;/span&gt;=&lt;span&gt; Color.Red;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加一个五角星形状&lt;/span&gt;
            IAutoShape shape6 = slide.Shapes.AppendShape(ShapeType.FivePointedStar, &lt;span&gt;new&lt;/span&gt; RectangleF(&lt;span&gt;300&lt;/span&gt;, &lt;span&gt;170&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;span&gt;));
            shape6.Fill.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.Solid;
            shape6.Fill.SolidColor.Color &lt;/span&gt;=&lt;span&gt; Color.Orange;
            shape6.Line.FillType &lt;/span&gt;=&lt;span&gt; FillFormatType.None;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置五角星形状的光边效果&lt;/span&gt;
            GlowEffect glow = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GlowEffect();
            glow.ColorFormat.Color &lt;/span&gt;=&lt;span&gt; Color.Yellow;
            glow.Radius &lt;/span&gt;= &lt;span&gt;7.0&lt;/span&gt;&lt;span&gt;;
            shape6.EffectDag.GlowEffect &lt;/span&gt;=&lt;span&gt; glow;
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将shape5和shape6两个形状组合&lt;/span&gt;
            ArrayList list = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
            list.Add(shape5);
            list.Add(shape6);
            ppt.Slides[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].GroupShapes(list);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存文档&lt;/span&gt;
            ppt.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.pptx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileFormat.Pptx2010);
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.pptx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;【示例2】将形状保存为图片&lt;/h2&gt;
&lt;p&gt;步骤1：加载测试文档&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Presentation ppt = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Presentation();
ppt.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.pptx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤2：将形状保存为图片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历第一张幻灯片中的所有图形&lt;/span&gt;
 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; ppt.Slides[&lt;span&gt;0&lt;/span&gt;].Shapes.Count; i++&lt;span&gt;)
 {
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取幻灯片中的图形，并保存为.png格式的图片&lt;/span&gt;
     Image image = ppt.Slides[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Shapes.SaveAsImage(i);
     image.Save(String.Format(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Picture-{0}.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i), System.Drawing.Imaging.ImageFormat.Png);
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/706090/201811/706090-20181121145620299-252259914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;全部代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_30baea55-ee59-414d-90eb-3622142d7f22&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_30baea55-ee59-414d-90eb-3622142d7f22&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_30baea55-ee59-414d-90eb-3622142d7f22&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Presentation;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Drawing;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SaveShapesAsImgs_PPT
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Presentation类的对象，并加载测试文档&lt;/span&gt;
            Presentation ppt = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Presentation();
            ppt.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.pptx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历第一张幻灯片中的所有图形&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; ppt.Slides[&lt;span&gt;0&lt;/span&gt;].Shapes.Count; i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取幻灯片中的图形，并保存为.png格式的图片&lt;/span&gt;
                Image image = ppt.Slides[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Shapes.SaveAsImage(i);
                image.Save(String.Format(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Picture-{0}.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i), System.Drawing.Imaging.ImageFormat.Png);
            }

        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;（本文完）&lt;/p&gt;
&lt;p&gt;转载请注明出处。&lt;/p&gt;
</description>
<pubDate>Wed, 21 Nov 2018 07:04:00 +0000</pubDate>
<dc:creator>E-iceblue</dc:creator>
<og:description>概述 本篇文章将介绍C# 在PPT幻灯片中操作形状（shape）的方法。这里主要涉及常规形状，如箭头、矩形、圆形、三角形、多边形、不规则形状等。下面的示例中，可以通过绘制形状，并设置相应格式等。示例包</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Yesi/p/9995150.html</dc:identifier>
</item>
<item>
<title>SpringBoot集成JWT 实现接口权限认证 - Other+</title>
<link>http://www.cnblogs.com/milicool/p/9993918.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/milicool/p/9993918.html</guid>
<description>&lt;pre&gt;
Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的， 特别适用于分布式站点的单点登录（`SSO`）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息， 以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。
&lt;/pre&gt;

&lt;ul&gt;&lt;li&gt;体积小、传输快&lt;/li&gt;
&lt;li&gt;支持跨域授权，因为跨域无法共享cookie&lt;/li&gt;
&lt;li&gt;分布式系统中，很好地解决了单点登录问题&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
因为JWT是无状态的，因此服务端无法控制已经生成的Token失效，是不可控的
&lt;/pre&gt;

&lt;pre&gt;
1. 认证，这是比较常见的使用场景，只要用户登录过一次系统，之后的请求都会包含签名出来的token，通过token也可以用来实现单点登录。&lt;br/&gt;2. 交换信息，通过使用密钥对来安全的传送信息，可以知道发送者是谁、放置消息被篡改。&lt;/pre&gt;
&lt;hr/&gt;
&lt;hr/&gt;&lt;pre readability=&quot;5&quot;&gt;
&lt;br/&gt;&lt;strong&gt;&lt;span&gt;项目克隆&lt;/span&gt;&lt;/strong&gt;&lt;p&gt;项目名称 springboot-jwt
&lt;/p&gt;&lt;/pre&gt;
&lt;pre&gt;
地址: &lt;a href=&quot;https://gitee.com/minili/springboot-demo.git&quot; target=&quot;_blank&quot;&gt;https://gitee.com/minili/springboot-demo.git&lt;/a&gt;&lt;br/&gt;如果觉得该项目对你有帮助或者有疑问的话, 欢迎加星, 评论&lt;/pre&gt;

&lt;pre&gt;
一个是管理员表, 一个是存放token表&lt;br/&gt;在项目下的db文件夹&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;SET&lt;/span&gt; FOREIGN_KEY_CHECKS&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `manager`;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `manager` (
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;   `managerId` &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;5&lt;/span&gt;) unsigned &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; AUTO_INCREMENT COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;管理员id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   `managerName` &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   `nickName` &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   `password` &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   `managerLevelId` &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`managerId`)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; ) ENGINE&lt;span&gt;=&lt;/span&gt;InnoDB AUTO_INCREMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8mb4 COMMENT&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;管理员表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `manager` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4297f44b13955235245b2497399d7a93&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; `manager` &lt;span&gt;VALUES&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cscscs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cscscs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4297f44b13955235245b2497399d7a93&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;DROP&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;IF&lt;/span&gt; &lt;span&gt;EXISTS&lt;/span&gt;&lt;span&gt; `managertoken`;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt;&lt;span&gt; `managertoken` (
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;   `managerId` &lt;span&gt;int&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;   `token` &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;50&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;   `expireTime` &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;15&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;过期时间yyyyMMddHHmmss&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;   `updateTime` &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;15&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;更新时间yyyyMMddHHmmss&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;   &lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`managerId`)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; ) ENGINE&lt;span&gt;=&lt;/span&gt;InnoDB &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8mb4;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_430f16e7-156b-4feb-a0c4-97bf2109abd5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_430f16e7-156b-4feb-a0c4-97bf2109abd5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_430f16e7-156b-4feb-a0c4-97bf2109abd5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mycom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;funfast&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;funfast&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;project for Spring Boot JWT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mysql-connector&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.38&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mysql-connector&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mybatis-plus-boot-starter.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.1.9&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mybatis-plus-boot-starter.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;druid.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.1.10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;druid.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;fastjson.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.39&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;fastjson.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jwt.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.7.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jwt.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-logging&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring Boot web依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; log4j2 依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-log4j2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring Boot Test 依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-configuration-processor&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt; 
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring Boot JDBC 依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; MySQL 连接驱动 依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${mysql-connector}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; druid 连接池 依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;druid-spring-boot-starter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${druid.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; shiro 权限控制 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.shiro&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiro-spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.4.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; shiro ehcache (shiro缓存)&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.shiro&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiro-ehcache&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.4.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;slf4j-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.slf4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; jwt &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;io.jsonwebtoken&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jjwt&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${jwt.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; 
&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; fastjson 依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;fastjson&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${fastjson.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8669882f-299d-4919-aeac-1d017fc91429&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8669882f-299d-4919-aeac-1d017fc91429&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8669882f-299d-4919-aeac-1d017fc91429&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;# server
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;server:
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;   tomcat:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        uri-encoding: UTF-8
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        max-threads: 1000
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        min-spare-threads: 30
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;   port: 8087
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;   servlet:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        context-path: /
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;spring:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    # 环境 dev|prod
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    profiles:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        active: dev
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    servlet:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        multipart:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            max-file-size: 100MB
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            max-request-size: 100MB
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            enabled: true
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    datasource:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;      type: com.alibaba.druid.pool.DruidDataSource
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;      driver-class-name: com.mysql.jdbc.Driver
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;      druid:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         url: jdbc:mysql://127.0.0.1:3306/fun-fast?useUnicode=true&lt;span&gt;&amp;amp;characterEncoding&lt;/span&gt;=UTF-8&lt;span&gt;&amp;amp;zeroDateTimeBehavior&lt;/span&gt;&lt;span&gt;=convertToNull
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        username: root
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        password: 123123
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        initial-size: 10
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        max-active: 100
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        min-idle: 10
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        max-wait: 60000
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        pool-prepared-statements: true
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        max-pool-prepared-statement-per-connection-size: 20
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        time-between-eviction-runs-millis: 60000
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        min-evictable-idle-time-millis: 300000
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        validation-query: SELECT 1
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        test-while-idle: true
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        test-on-borrow: true
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        test-on-return: false
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        stat-view-servlet:
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;          enabled: true
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;          url-pattern: /druid/*
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;          login-username: admin
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;          login-password: 123123
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        filter:
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;          stat:
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            log-slow-sql: true
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            slow-sql-millis: 1000
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            merge-sql: false
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;          wall:
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            config:
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;               multi-statement-allow: true
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;application.yml&lt;/span&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;主体有5个文件需要添加，分别是shiroConfig、OAuth2Filer配置、OAuth2Realm、OAuth2Token、TokenGenerator&lt;/strong&gt; &lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * Shiro配置
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ShiroConfig {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     @Bean(&quot;sessionManager&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SessionManager sessionManager(){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         DefaultWebSessionManager sessionManager = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSessionManager();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         sessionManager.setSessionValidationSchedulerEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         sessionManager.setSessionIdCookieEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionManager;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     @Bean(&quot;securityManager&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SecurityManager securityManager(OAuth2Realm oAuth2Realm, SessionManager sessionManager) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         DefaultWebSecurityManager securityManager = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        securityManager.setRealm(oAuth2Realm);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        securityManager.setSessionManager(sessionManager);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; securityManager;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     @Bean(&quot;shiroFilter&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean shirFilter(SecurityManager securityManager) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         ShiroFilterFactoryBean shiroFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        shiroFilter.setSecurityManager(securityManager);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;oauth过滤&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         Map&amp;lt;String, Filter&amp;gt; filters = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         filters.put(&quot;oauth2&quot;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OAuth2Filter());
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        shiroFilter.setFilters(filters);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;         Map&amp;lt;String, String&amp;gt; filterMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         filterMap.put(&quot;/druid/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         filterMap.put(&quot;/app/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         filterMap.put(&quot;/login&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         filterMap.put(&quot;/**&quot;, &quot;oauth2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        shiroFilter.setFilterChainDefinitionMap(filterMap);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; shiroFilter;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;     @Bean(&quot;lifecycleBeanPostProcessor&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         DefaultAdvisorAutoProxyCreator proxyCreator = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator();
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         proxyCreator.setProxyTargetClass(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; proxyCreator;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         AuthorizationAttributeSourceAdvisor advisor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        advisor.setSecurityManager(securityManager);
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; advisor;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个里面可以配置权限过滤的规则&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_68085642-a9ca-4aa6-b54d-db5cf472239d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_68085642-a9ca-4aa6-b54d-db5cf472239d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_68085642-a9ca-4aa6-b54d-db5cf472239d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * oauth2过滤器
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OAuth2Filter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthenticatingFilter {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; AuthenticationToken createToken(ServletRequest request, ServletResponse response) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取请求token&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         String token =&lt;span&gt; getRequestToken((HttpServletRequest) request);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(StringUtil.isBlank(token)){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OAuth2Token(token);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(((HttpServletRequest) request).getMethod().equals(RequestMethod.OPTIONS.name())){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; onAccessDenied(ServletRequest request, ServletResponse response) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取请求token，如果token不存在，直接返回401&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         HttpServletRequest httpServletRequest =&lt;span&gt; (HttpServletRequest) request;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         String token =&lt;span&gt; getRequestToken((HttpServletRequest) request);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(StringUtil.isBlank(token)){
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             HttpServletResponse httpResponse =&lt;span&gt; (HttpServletResponse) response;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             httpResponse.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             httpResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, httpServletRequest.getHeader(&quot;Origin&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;             JSONObject json = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JSONObject();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             json.put(&quot;code&quot;, &quot;401&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             json.put(&quot;msg&quot;, &quot;invalid token&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            httpResponse.getWriter().print(json);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; executeLogin(request, response);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         HttpServletResponse httpResponse =&lt;span&gt; (HttpServletResponse) response;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         HttpServletRequest httpServletRequest =&lt;span&gt; (HttpServletRequest) request;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         httpResponse.setContentType(&quot;application/json;charset=utf-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         httpResponse.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         httpResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, httpServletRequest.getHeader(&quot;Origin&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理登录失败的异常&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;             Throwable throwable = e.getCause() == &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; e : e.getCause();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;             JSONObject json = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JSONObject();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             json.put(&quot;code&quot;, &quot;401&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             json.put(&quot;msg&quot;&lt;span&gt;, throwable.getMessage());
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;            httpResponse.getWriter().print(json);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e1) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt; &lt;span&gt;     * 获取请求的token
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String getRequestToken(HttpServletRequest httpRequest){
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从header中获取token&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt;         String token = httpRequest.getHeader(&quot;token&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; 
&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果header中不存在token，则从参数中获取token&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(StringUtil.isBlank(token)){
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;             token = httpRequest.getParameter(&quot;token&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; 
&lt;span&gt;84&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; token;
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;OAuth2Filer&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;这个里面可以设置角色、权限和认证信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_652bcd9f-b6bf-403d-9274-847caf26ad1d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_652bcd9f-b6bf-403d-9274-847caf26ad1d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_652bcd9f-b6bf-403d-9274-847caf26ad1d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * 认证
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OAuth2Realm &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizingRealm {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ManagerService managerService;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; supports(AuthenticationToken token) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; token &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; OAuth2Token;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     * 授权(验证权限时调用, 控制role 和 permissins时使用)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         ManagerInfo manager =&lt;span&gt; (ManagerInfo)principals.getPrimaryPrincipal();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         Integer managerId =&lt;span&gt; manager.getManagerId();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         SimpleAuthorizationInfo info = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthorizationInfo();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模拟权限和角色&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         Set&amp;lt;String&amp;gt; permsSet = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         Set&amp;lt;String&amp;gt; roles = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (managerId == 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 超级管理员-权限&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             permsSet.add(&quot;delete&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             permsSet.add(&quot;update&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             permsSet.add(&quot;view&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;             roles.add(&quot;admin&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 普通管理员-权限&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;             permsSet.add(&quot;view&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;             roles.add(&quot;test&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        info.setStringPermissions(permsSet);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        info.setRoles(roles);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; info;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;     * 认证(登录时调用)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         String accessToken =&lt;span&gt; (String) token.getPrincipal();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据accessToken，查询用户信息&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;         ManagerToken managerToken =&lt;span&gt; managerService.queryByToken(accessToken);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;token失效&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;         SimpleDateFormat sm = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        Date expireTime;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             expireTime     =&lt;span&gt; sm.parse(managerToken.getExpireTime());
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             flag = managerToken == &lt;span&gt;null&lt;/span&gt; || expireTime.getTime() &amp;lt;&lt;span&gt; System.currentTimeMillis();
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ParseException e) {
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(flag){
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IncorrectCredentialsException(&quot;token失效，请重新登录&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; 
&lt;span&gt;71&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询用户信息&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt;         ManagerInfo managerInfo =&lt;span&gt; managerService.getManagerInfo(managerToken.managerId);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;账号锁定
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; if(managerInfo.getStatus() == 0){
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     throw new LockedAccountException(&quot;账号已被锁定,请联系管理员&quot;);
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt; 
&lt;span&gt;78&lt;/span&gt;         SimpleAuthenticationInfo info = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthenticationInfo(managerInfo, accessToken, getName());
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; 
&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; info;
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;OAuth2Realm&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_b91b4345-4c0c-4311-b04d-2bedd5544d7e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b91b4345-4c0c-4311-b04d-2bedd5544d7e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b91b4345-4c0c-4311-b04d-2bedd5544d7e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * token
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OAuth2Token &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; AuthenticationToken {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String token;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; OAuth2Token(String token){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.token =&lt;span&gt; token;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPrincipal() {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; token;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object getCredentials() {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; token;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_e19f5f1c-fb8a-4e43-a81d-f2c2b4cfa6c7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e19f5f1c-fb8a-4e43-a81d-f2c2b4cfa6c7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e19f5f1c-fb8a-4e43-a81d-f2c2b4cfa6c7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * 生成token
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TokenGenerator {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String generateValue() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; generateValue(UUID.randomUUID().toString());
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[] hexCode = &quot;0123456789abcdef&quot;&lt;span&gt;.toCharArray();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String toHexString(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] data) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (data == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         StringBuilder r = &lt;span&gt;new&lt;/span&gt; StringBuilder(data.length * 2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;byte&lt;/span&gt;&lt;span&gt; b : data) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             r.append(hexCode[(b &amp;gt;&amp;gt; 4) &amp;amp; 0xF&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             r.append(hexCode[(b &amp;amp; 0xF&lt;span&gt;)]);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; r.toString();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String generateValue(String param) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             MessageDigest algorithm = MessageDigest.getInstance(&quot;MD5&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            algorithm.reset();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            algorithm.update(param.getBytes());
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] messageDigest =&lt;span&gt; algorithm.digest();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; toHexString(messageDigest);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&quot;生成Token失败&quot;&lt;span&gt;, e);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WebController {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOGGER = LogManager.getLogger(WebController.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ManagerService managerService;

    @RequestMapping(&lt;/span&gt;&quot;/login&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; JSONObject login(@RequestParam(&quot;username&quot;&lt;span&gt;) String username,
                            @RequestParam(&lt;/span&gt;&quot;password&quot;&lt;span&gt;) String password) {
        JSONObject json &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JSONObject();
        json.put(&lt;/span&gt;&quot;result&quot;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        json.put(&lt;/span&gt;&quot;msg&quot;, &quot;账号或密码不正确&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户信息&lt;/span&gt;
        ManagerInfo managerInfo =&lt;span&gt; managerService.getManagerInfo(username);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 账号不存在、密码错误&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (managerInfo == &lt;span&gt;null&lt;/span&gt; || !&lt;span&gt;managerInfo.getPassword().equals(password)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; json;
        }

        ManagerToken managerToken &lt;/span&gt;=&lt;span&gt; managerService.saveToken(managerInfo.managerId);
        json.put(&lt;/span&gt;&quot;token&quot;&lt;span&gt;, managerToken.token);
        json.put(&lt;/span&gt;&quot;result&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        json.put(&lt;/span&gt;&quot;msg&quot;, &quot;登陆成功&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; json;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 必须带token请求, 否则返回401
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @GetMapping(&lt;/span&gt;&quot;/article&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResponse article() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BaseResponse(&lt;span&gt;true&lt;/span&gt;, &quot;article: You are already logged in&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 不必带token也能请求到内容, 因为在shiro中配置了过滤规则
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @GetMapping(&lt;/span&gt;&quot;/app/article&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResponse appArticle() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BaseResponse(&lt;span&gt;true&lt;/span&gt;, &quot;appArticle: You are already logged in&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 需要是超级管理员的token才能查看,
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @GetMapping(&lt;/span&gt;&quot;/require_role&quot;&lt;span&gt;)
    @RequiresRoles(&lt;/span&gt;&quot;admin&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResponse requireRole() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BaseResponse(&lt;span&gt;true&lt;/span&gt;, &quot;You are visiting require_role&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 需要有update权限才能访问
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @GetMapping(&lt;/span&gt;&quot;/require_permission&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @RequiresPermissions(logical = Logical.AND, value = {&quot;view&quot;, &quot;edit&quot;})&lt;/span&gt;
    @RequiresPermissions(logical = Logical.AND, value = {&quot;update&quot;&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BaseResponse requirePermission() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BaseResponse(&lt;span&gt;true&lt;/span&gt;, &quot;You are visiting permission require update&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48.5&quot;&gt;&lt;img id=&quot;code_img_closed_18d96a44-3472-4601-b8e5-3820b322f847&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_18d96a44-3472-4601-b8e5-3820b322f847&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_18d96a44-3472-4601-b8e5-3820b322f847&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ManagerService &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractService {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;12小时后过期&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; EXPIRE = 3600 * 12 * 1000&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ManagerInfo getManagerInfo(String managerName) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         String sql = &quot;select a.managerName, a.managerLevelId,a.managerId, a.password&quot;
&lt;span&gt; 8&lt;/span&gt;                 + &quot; from manager a where a.managerName=?&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         ManagerInfo manager = jdbcDao.queryForObject(sql, &lt;span&gt;new&lt;/span&gt; Object[] { managerName }, ManagerInfo.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; manager;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ManagerToken saveToken(Integer managerId) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         ManagerToken managerToken = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ManagerToken();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         managerToken.managerId =&lt;span&gt; managerId;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成一个token&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         managerToken.token =&lt;span&gt; TokenGenerator.generateValue();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;过期时间&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         Date expireTime = &lt;span&gt;new&lt;/span&gt; Date(System.currentTimeMillis() +&lt;span&gt; EXPIRE);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 更新时间/过期时间&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         SimpleDateFormat sm = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         Date systemDate = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         managerToken.updateTime =&lt;span&gt; sm.format(systemDate);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         managerToken.expireTime =&lt;span&gt; sm.format(expireTime);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         String sql = &quot;insert into managertoken (managerId, token, updateTime, expireTime) values (?,?,?,?)&quot;
&lt;span&gt;30&lt;/span&gt;                 + &quot; ON DUPLICATE KEY UPDATE token=?, updateTime=?, expireTime=?&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         jdbcDao.update(sql, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[]{managerToken.managerId, managerToken.token, managerToken.updateTime,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                managerToken.expireTime, managerToken.token, managerToken.updateTime, managerToken.expireTime});
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; managerToken;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     @Transactional(propagation= Propagation.REQUIRED, isolation= Isolation.DEFAULT, readOnly = &lt;span&gt;true&lt;/span&gt;, rollbackFor = Exception.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ManagerInfo getManagerInfo(Integer managerId) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (managerId == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         String sql = &quot;select a.managerId, a.managerName, a.managerLevelId from manager a &quot; +
&lt;span&gt;44&lt;/span&gt;                 &quot;where a.managerId=?&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         ManagerInfo manager = jdbcDao.queryForObject(sql, &lt;span&gt;new&lt;/span&gt; Object[]{managerId}, ManagerInfo.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; manager;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ManagerToken queryByToken(String token) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (token == &lt;span&gt;null&lt;/span&gt; || &quot;&quot;&lt;span&gt;.equals(token)) {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;         String sql = &quot;select managerid managerId, token, expireTime, updateTime from managertoken where token=?&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         ManagerToken managerToken = jdbcDao.queryForObject(sql, &lt;span&gt;new&lt;/span&gt; Object[]{token}, ManagerToken.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; managerToken;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;service&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;这里省略了一些基础的实体类、工具类，详见代码&lt;/p&gt;
&lt;hr/&gt;
&lt;pre&gt;
先登陆获取到token(localhost:8087/login?username=cscscs&amp;amp;password=4297f44b13955235245b2497399d7a93)&lt;br/&gt;这里测试的用户有两个一个admin(超级管理员), 一个是cscscs
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121120207154-1222816422.png&quot; alt=&quot;&quot; width=&quot;982&quot; height=&quot;398&quot;/&gt;&lt;/p&gt;


&lt;p&gt; 1.不带token访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121141143710-2044469481.png&quot; alt=&quot;&quot; width=&quot;1076&quot; height=&quot;456&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 2.带token访问&lt;/p&gt;
&lt;p&gt;注意是headers中添加参数token&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121141238601-955112993.png&quot; alt=&quot;&quot; width=&quot;1014&quot; height=&quot;391&quot;/&gt;&lt;/p&gt;


&lt;p&gt;在OAuth2Filter中我对，/app 路径下的接口不需要认证&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121142519693-1911447028.png&quot; alt=&quot;&quot; width=&quot;1135&quot; height=&quot;419&quot;/&gt;&lt;/p&gt;

&lt;p&gt;/require_role, 这个接口需要admin角色才能访问，在OAuth2Realm中我设置了admin用户为超级管理员角色, cscscs用户为test角色&lt;/p&gt;
&lt;p&gt;1. cscscs用户访问（选择cscscs用户的token）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121143006606-2117392084.png&quot; alt=&quot;&quot; width=&quot;936&quot; height=&quot;450&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.admin用户访问（选择admin用户的token）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121143101064-1656995021.png&quot; alt=&quot;&quot; width=&quot;986&quot; height=&quot;397&quot;/&gt;&lt;/p&gt;

&lt;p&gt;平时我们可以设置管理员是否有删除，更新记录的权限&lt;/p&gt;
&lt;p&gt;/require_permission在控制器中设置了只有拥有update权限的用户才能访问, 在OAuth2Realm中我给了admin用户update的权限, 给了cscscs用户view的权限&lt;/p&gt;
&lt;p&gt;1.使用cscscs用户的token访问&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121143611066-369027195.png&quot; alt=&quot;&quot; width=&quot;771&quot; height=&quot;385&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 使用admin用户访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121143648075-803098196.png&quot; alt=&quot;&quot; width=&quot;987&quot; height=&quot;394&quot;/&gt;&lt;/p&gt;


&lt;p&gt;1. 希望能给自己帮助、也给别人帮助，有任何疑问或者意见，在下方留言哦&lt;/p&gt;
&lt;p&gt;2, 有很多不足可以改进, 如缓存啊, 更准确的权限设置啊, 但他可以帮你构建一个完整可用的JWT&lt;/p&gt;
&lt;pre&gt;
   之前看了网上的例子, 理论很好, 例子却没跑通, aaaaa,,,
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165798/201811/1165798-20181121144222660-1916074532.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 21 Nov 2018 06:48:00 +0000</pubDate>
<dc:creator>Other+</dc:creator>
<og:description>JWT介绍 优点 体积小、传输快 支持跨域授权，因为跨域无法共享cookie 分布式系统中，很好地解决了单点登录问题 缺点 使用场景 springboot集成JWT过程（注意: 使用了数据库, 先建表</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/milicool/p/9993918.html</dc:identifier>
</item>
<item>
<title>Spring Cloud Bus实现自动更新配置 - 时间-海</title>
<link>http://www.cnblogs.com/wslook/p/9994915.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wslook/p/9994915.html</guid>
<description>&lt;h2&gt;一、概述&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. &lt;/strong&gt;配置环境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　版本：&lt;/strong&gt;Spring Boot版本2.0.3.RELEASE，Spring Cloud版本Finchley.SR1，RabbitMQ 3.7.7&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　说明：&lt;/strong&gt;本文章是在&lt;a title=&quot;Spring Cloud Config配置中心的使用&quot; href=&quot;https://www.cnblogs.com/wslook/p/9994251.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wslook/p/9994251.html&lt;/a&gt;的基础上完成，&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. 实现原理（如下图所示）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过消息队列MQ传递消息&lt;/li&gt;
&lt;li&gt;修改配置，对外暴露/actuator/bus-refresh接口&lt;/li&gt;
&lt;li&gt;手动访问/actuator/bus-refresh刷新配置；或者在git服务器（码云、GitHub等）上配置WebHooks，实现自动调用/actuator/bus-refresh接口，从而刷新配置（推荐）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121132404537-1633514946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;二、Config Server端配置&lt;/h2&gt;
&lt;p&gt;1. 添加依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-bus-amqp&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. 修改配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  # Rabbitmq配置
  rabbitmq:
    cache:
      channel:
        checkout&lt;/span&gt;-&lt;span&gt;timeout: 1s
    host: &lt;/span&gt;192.168.2.246&lt;span&gt;
    port: &lt;/span&gt;5672&lt;span&gt;
    username: admin
    password: admin

#暴露&lt;/span&gt;/actuator/bus-&lt;span&gt;refresh接口
management:
  endpoints:
    web:
      exposure:
        include: &lt;/span&gt;&quot;*&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3. 启动Config-Server，查看MQ，会多出来一个队列&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121135923730-482346534.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;三、Config Client端配置&lt;/h2&gt;
&lt;p&gt;1. 添加依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-bus-amqp&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. 添加RabbitMQ配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  # Rabbitmq配置
  rabbitmq:
    cache:
      channel:
        checkout&lt;/span&gt;-&lt;span&gt;timeout: 1s
    host: &lt;/span&gt;192.168.2.246&lt;span&gt;
    port: &lt;/span&gt;5672&lt;span&gt;
    username: admin
    password: admin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3. 在使用属性的地方，增加@RefreshScope注解，防止刷新后配置不生效----------&lt;strong&gt;&lt;span&gt;但测试发现，不添加@RefreshScope注解也能动态刷新配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@RefreshScope&lt;/span&gt;
&lt;span&gt;@Configuration
@ConfigurationProperties(&lt;/span&gt;&quot;aliyun&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OSSProperties {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 内网连接地址
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String endpoint;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 外网连接地址
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String outsideEndpoint;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String accessKeyId;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String accessKeySecret;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String bucketName;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 外网访问地址
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String url;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String roleArnPro;

    ...get set...          

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;四、测试（这里使用手动刷新的方式）&lt;/h2&gt;
&lt;p&gt;1. 启动Client端服务，使用postman请求测试接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121142156092-1629210331.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2. 修改git服务器上的配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121142332882-62804954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 调用Config Server的/actuator/bus-refresh接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121142451809-1594290548.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Config Server控制台日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121142722698-1662799262.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Config Client控制台日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121142816268-1889402587.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ管理页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121142957443-508430435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4. 重新请求测试接口，发现在没重启的情况下，配置已经改变&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1414161/201811/1414161-20181121143052991-1431292150.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 21 Nov 2018 06:37:00 +0000</pubDate>
<dc:creator>时间-海</dc:creator>
<og:description>一、概述 1. 配置环境 版本：Spring Boot版本2.0.3.RELEASE，Spring Cloud版本Finchley.SR1，RabbitMQ 3.7.7 说明：本文章是在ht</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wslook/p/9994915.html</dc:identifier>
</item>
<item>
<title>关于 物联网 和 互联网（一个小白的理解） - Mr.聂</title>
<link>http://www.cnblogs.com/pengfei-nie/p/9994226.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pengfei-nie/p/9994226.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、 序言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　之前一直听说 互联网时代 、 物联网 时代。。。其实我一直没有深入的去了解过他们，对这2个概念也是模糊的。最近进行了一些查阅，多了些认知。我们毕竟生在这个号称 互联网+物联网的时代，今天就跟大家讲讲，一个小白对他们的理解，以及他们对我们生活产生的影响。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、 目录&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、互联网、物联网 的概念&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2、二者的区别与关联&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3、对我们生活的影响（你如何利用它，它又怎么影响你的）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、 浅白的理解&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在我个人理解（个人观点，非喜勿喷）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　互联网： 就是信息时代，单纯的信息交流。比如：早上起来，打开手机看看今天的天气如何； 上班途中刷刷微博、新闻，了解一下今天的新鲜事； 又比如打开app，关注一下股市的走势； 然后经历过一阵心肌绞痛后，听听音乐、娱乐八卦放松自己。这些都属于互联网层面，我们人作为一个受体，主动的去感知着这些信息。所以，我觉得互联网就是地球人彼此之间互相交流，互相传递信息的渠道。互联网就是信息交流，而且主要是人参与其中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　物联网： 说的直白一点就是，世界万物都参与到互联网中。哪怕你是一棵树、一块小石头，又或是一个人，大家都参与到互联网当中。但是像小猫、小狗他还会叫，小石头它不是生物，不会动不会叫，它又怎么参与呢？这就涉及到物联网的核心了——传感器。人类通过制作大量各式各样的传感器等硬件设备，去采集世界万物的信息，石头不会说话，那我就用传感器采集他的数据，比如他的质量，他的硬度，并将这些数据制作成大家都能看懂的图表啦，这样小石头的一些属性就具备了信息量，就可以参与到我们互联网的信息大家庭中来。这也就是所谓的物联网。突破互联网人为主，进一步将物业参与其中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、 进一步的分析思考&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　现在我们对这2种概念有了比较清晰的认知了，那为什么要区分 互联网和物联网 ？这二者又有什么关联呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从他们的概念不难看出，互联网是物联网的基础。可以这样简单的理解，互联网将全世界的人都联系在了一起（请忽略那道墙的存在），二物联网是互联网的一个升华，他将世界万物包括人都联系在了一起。举个简单的例子，智能家居，窗户和墙壁是不会说话的，但是我们可以给他加硬件设备，让他具体智能化，该通风了，就让窗户打开；天气冷了就让墙壁加热。当然这需要一套系统去控制。但是从物理意义上，窗户、墙壁已经参与到我们的信息时代之中了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　物联网之所以叫物联网，没有直接划分到互联网之中去。是因为它产生的影响，他将世界万物融入到了互联网，互联网不再是简单的人与人之间的信息分享，它将互联网的定义变得更大，将互联网的作用更加的具体。以至于互联网的定义不能够更加清晰的表达他。说白了互联网太宽泛，万物的融入需要一个更加贴切的名字，故物联网应运而生。或者你可以把物联网名称的由来认为是人类科技革命的变革。就像春节一样，不是真理，只是大家觉得这一天很有纪念意义，就把它定义为春节，举国同庆，后来认同的人越来越多，就形同真理而已。但其实，物联网只是互联网的具体化。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;五、 他对我们的影响，我们作何适应&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　物联网发展到至今，已近很成熟 ，他已经深深的渗入到我们的生活 。蜂巢、外卖、智能家居等等，现在已经是离了互联网，人就变成瞎子一样。处处受节制。只不多，不思考就不会发现他的影响，大多数时间，我们只是在被动的享受他带来的便利。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　互联网的红利已经开始消退，物联网的兴起又是无数商机的源头。我们现在享受的便利都是资本家敛财的手段。倒不是说抵制资本，我们很乐意见成的享受这些服务。就像快递柜一样，给我们提供了很大的便利，而且成本反而比以前低廉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其实，细想一下，所谓物联网就是 自动化+远程控制 ， 我们解放人的双手，不需要谁去做这些复杂的工作，只需要随时随地用手机电脑遥控一下就好。这种理想的状态就是我们科技发展所追求的。举个简单的例子，人每天都要穿鞋子，但是鞋子很容脏，每天都要去清理，很麻烦，那商机来了，我们可以发明一款智能鞋柜，自动检测鞋子清洁程度，自动对鞋子进行杀菌、除尘等操作，当脏到一定程度无法清理时，报警提示该刷鞋了。大家别笑哈，这个是可以实现的，至少现在的科技做这点事还是很容易的。当然现在市面上也有，只不过low low的，没出现让人满意的产品，只是因为成本和技术的限制，没人搞罢了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　生活遍地是商机，互联网时代颠覆了传统的生活、生产、商业模式，希望这篇文档也能对大家有所启发，早出更多益于我们生活的好东西。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以上言论仅仅是个人观点，各位客官无聊打发时间即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 21 Nov 2018 06:12:00 +0000</pubDate>
<dc:creator>Mr.聂</dc:creator>
<og:description>一、 序言 之前一直听说 互联网时代 、 物联网 时代。。。其实我一直没有深入的去了解过他们，对这2个概念也是模糊的。最近进行了一些查阅，多了些认知。我们毕竟生在这个号称 互联网+物联网的时代，今天就</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pengfei-nie/p/9994226.html</dc:identifier>
</item>
<item>
<title>【Python3爬虫】微博用户爬虫 - TM0831</title>
<link>http://www.cnblogs.com/TM0831/p/9974718.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/TM0831/p/9974718.html</guid>
<description>&lt;p&gt;&lt;span&gt;此次爬虫要实现的是爬取某个微博用户的关注和粉丝的用户公开基本信息，包括用户昵称、id、性别、所在地和其粉丝数量，然后将爬取下来的数据保存在MongoDB数据库中，最后再生成几个图表来简单分析一下我们得到的数据。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;这里我们选取的爬取站点是&lt;a href=&quot;https://m.weibo.cn/&quot; target=&quot;_blank&quot;&gt;https://m.weibo.cn&lt;/a&gt;，此站点是微博移动端的站点，我们可以直接查看某个用户的微博，比如&lt;a href=&quot;https://m.weibo.cn/profile/5720474518&quot; target=&quot;_blank&quot;&gt;https://m.weibo.cn/profile/5720474518&lt;/a&gt;。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201811/1450803-20181117164445715-948285855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后查看其关注的用户，打开开发者工具，切换到XHR过滤器，一直下拉列表，就会看到有很多的Ajax请求。这些请求的类型是Get类型，返回结果是Json格式，展开之后就能看到有很多用户的信息。&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201811/1450803-20181119131656273-880039937.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这些请求有两个参数，containerid和page，通过改变page的数值，我们就能得到更多的请求了。获取其粉丝的用户信息的步骤是一样的，除了请求的链接不同之外，参数也不同，修改一下就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201811/1450803-20181119135655070-559493678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于这些请求返回的结果里只有用户的名称和id等信息，并没有包含用户的性别等基本资料，所以我们点进某个人的微博，然后查看其基本资料，比如&lt;a href=&quot;https://m.weibo.cn/p/index?containerid=2302836857214856_-_INFO&amp;amp;title=%E5%9F%BA%E6%9C%AC%E8%B5%84%E6%96%99&amp;amp;luicode=10000011&amp;amp;lfid=2302836857214856&amp;amp;featurecode=10000326&quot; target=&quot;_blank&quot;&gt;这个&lt;/a&gt;，打开开发者工具，可以找到下面这个请求：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201811/1450803-20181119133334483-1193393922.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于这个人的id是6857214856，因此我们可以发现当我们得到一个人的id的时候，就可以构造获取基本资料的链接和参数了，相关代码如下（uid就是用户的id）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; uid_str = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;230283&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; str(uid)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://m.weibo.cn/api/container/getIndex?containerid={}_-_INFO&amp;amp;title=%E5%9F%BA%E6%9C%AC%E8%B5%84%E6%96%99&amp;amp;luicode=10000011&amp;amp;lfid={}&amp;amp;featurecode=10000326&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(&lt;/span&gt;&lt;span&gt;uid_str, uid_str)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; data =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;containerid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}_-_INFO&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(uid_str),
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;基本资料&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;luicode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 10000011&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lfid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: int(uid_str),
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;featurecode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 10000326
 9 }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后这个返回的结果也是Json格式，提取起来就很方便，因为很多人的基本资料都不怎么全，所以我提取了用户昵称、性别、所在地和其粉丝数量。而且因为一些账号并非个人账号，就没有性别信息，对于这些账号，我选择将其性别设置为男性。不过在爬取的时候，我发现一个问题，就是&lt;span&gt;当页数超过250的时候，返回的结果就已经没有内容了，也就是说这个方法最多只能爬250页&lt;/span&gt;。对于爬取下来的用户信息，全都保存在MongoDB数据库中，然后在爬取结束之后，读取这些信息并绘制了几个图表，分别绘制了男女比例扇形图、用户所在地分布图和用户的粉丝数量柱状图。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;由于第一页返回的结果和其他页返回的结果格式是不同的，所以要分别进行解析，而且因为部分结果的json格式不同，所以可能报错，因此采用了try...except...把出错原因打印出来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;爬取第一页并解析的代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_and_parse1(url):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     res =&lt;span&gt; requests.get(url)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     cards = res.json()[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cards&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     info_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cards:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; i:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; i[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;card_group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][1][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     user_name = j[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;screen_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用户名&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;                     user_id = j[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用户id&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                     fans_count = j[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;followers_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 粉丝数量&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                     sex, add =&lt;span&gt; get_user_info(user_id)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     info =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: user_name,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;性别&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: sex,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;所在地&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: add,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;粉丝数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: fans_count,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    info_list.append(info)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; i[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;card_group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     user_name = j[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;screen_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用户名&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                     user_id = j[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用户id&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                     fans_count = j[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;followers_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 粉丝数量&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                     sex, add =&lt;span&gt; get_user_info(user_id)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     info =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: user_name,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;性别&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: sex,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;所在地&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: add,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;粉丝数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: fans_count,
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    info_list.append(info)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;followers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; url:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第1页关注信息爬取完毕...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第1页粉丝信息爬取完毕...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        save_info(info_list)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(e)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;爬取其他页并解析的代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_and_parse2(url, data):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     res = requests.get(url, headers=get_random_ua(), data=&lt;span&gt;data)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     info_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cards&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; res.json()[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             card_group = res.json()[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cards&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;card_group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             card_group = res.json()[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cardlistInfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cards&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;card_group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; card &lt;span&gt;in&lt;/span&gt;&lt;span&gt; card_group:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             user_name = card[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;screen_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用户名&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             user_id = card[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 用户id&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             fans_count = card[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;followers_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 粉丝数量&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             sex, add =&lt;span&gt; get_user_info(user_id)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             info =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: user_name,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;性别&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: sex,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;所在地&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: add,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;粉丝数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: fans_count,
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            info_list.append(info)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第{}页关注信息爬取完毕...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第{}页粉丝信息爬取完毕...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;since_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        save_info(info_list)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(e)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;在运行的时候可能会出现各种各样的错误，有的时候返回结果为空，有的时候解析出错，不过还是能成功爬取大部分数据的，这里就放一下最后生成的三张图片吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201811/1450803-20181119140439867-1519333766.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201811/1450803-20181119140448522-1345428747.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1450803/201811/1450803-20181119140455208-1422660172.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;完整代码已上传到GitHub：&lt;a href=&quot;https://github.com/QAQ112233/WeiBoUsers&quot; target=&quot;_blank&quot;&gt;https://github.com/QAQ112233/WeiBoUsers&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Wed, 21 Nov 2018 05:50:00 +0000</pubDate>
<dc:creator>TM0831</dc:creator>
<og:description>此次爬虫要实现的是爬取某个微博用户的关注和粉丝的用户公开基本信息，包括用户昵称、id、性别、所在地和其粉丝数量，然后将爬取下来的数据保存在MongoDB数据库中，最后再生成几个图表来简单分析一下我们得</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/TM0831/p/9974718.html</dc:identifier>
</item>
</channel>
</rss>