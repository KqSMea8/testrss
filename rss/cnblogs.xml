<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>我的第一个python web开发框架（24）——系统重构与ORM - AllEmpty</title>
<link>http://www.cnblogs.com/EmptyFS/p/9362615.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/EmptyFS/p/9362615.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　小白弄完代码版本管理和接口文档后，兴奋的找到老菜。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;小白：&lt;/span&gt;&lt;/strong&gt;老大，我已经按你讲的要求，将代码版本管理和接口文档都搞好了。从项目开始到现在，除了代码编写，感觉学会好多东西啊。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;老菜：&lt;/span&gt;&lt;/strong&gt;嗯嗯，实战确实需要掌握很多代码以外的东西。如果你只是想安静的做一位码农，别人安排什么你就做什么，其他事情别人搞定，那你只会写代码并没有什么问题。但是，如果你不安于现状，想要做的更好，熟悉开发整流程，从需求、产品、原型、文档、架构、数据库、编码、测试、服务器部署、调优......都有所了解，遇到问题都能信手拈来，那你就得多学学各种工具的应用与配置，去练手使用了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;小白：&lt;/span&gt;&lt;/strong&gt;是啊，这个项目开发过程中就遇到了太多的坑了，很多很简单的事情，由于没有经验花了大量的时间就是搞不定，好在有你帮忙指导，不然也不知能否交付了。为什么你能一眼就看出问题在哪里呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;老菜：&lt;/span&gt;&lt;/strong&gt;嘿嘿...因为这些坑多数我们这些工作多年的几乎都遇到过，碰多了自然就懂了。在遇到问题时，最好不要马上去问人，先自行研究解决，养成自行解决问题的能力，以后再遇到其他问题时就能轻松解决了。如果不是，下次遇到同样问题或类似问题，有可能还是解决不了，还得去请教别人，这样一方面你自己不会有多大的长进，另一方面别人的时间也是时间，别人也不欠你什么一定要为你解答是吧。所以说经历很重要，你对很多技术都不熟悉，需要去踩坑，去研究，找出你自己的答案与解决办法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;小白：&lt;/span&gt;&lt;/strong&gt;好的，我会继续努力的。现在系统要重写，还需要注意些什么？要怎么做呢？能否详情的讲解一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;老菜：&lt;/span&gt;&lt;/strong&gt;系统重构，对于新系统、旧系统，或者开发过程中，都是家常便饭，经常要做的事情。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　代码重构主要是为了提高代码的重用性，改善软件的质量，提升软件的性能，使软件架构或框架的设计更加合理，进而提高软件的可读性、可扩展性和可维护性。相关书籍都有很多介绍了，比如《重构：改善既有的代码的设计》、《大话重构》等，这里就不深入说明，只针对本系统简单讲解一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　正常来说，你在开发过程中发现存在重复代码时，就需要考虑将这部分代码重构了，而不是等升级版本或重大改造时才进行的，因为重复代码越多，维护起来就会越复杂，越有可能出错。比如说你有个功能是进行字段串转整形变量的，代码一开始并没有进行封装，然后很多地方都使用int()进行转换，有一天测试时发现，用户输入带小数的数字字符串，这时程序抛出异常，需要进行改造。你花了半天时间将所有转换的地方进行了修改，做了判断处理。过了一段时间又发现，有些客户不遵守规则，直接输出无意义的字符串，又出现了异常，你又得花时间进行改造，万一有些地方没有改到遗漏了，说不定那天又会蹦出一个异常来。如果你在开发过程中，有及时进行重构，将这个重复代码封装成一个转换函数，那么你只需要修改这个转换函数就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　除了重复代码需要进行封装外，对于一些类似的功能也需要重新进行改造，比如说小白你这个项目，对数据库操作这一块就可以看到好多差不多的代码，很多数据查询差别只是数据表不同或查询条件不同而已，这就需要进行重构，抽象出来写成ORM。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当然除了这些之外，针对功能需求的变更，对高并发、高可用、安全性、大数据、海量存储等不同的非功能需求时，有可能还需要对整个框架、架构进行重新设计，以适应新需求的需要。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在重构时必须遵循面向对象的七大原则，学好设计模式。具体可以多看看书，多研究别人写的源码，多学习多思考就明白了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;小白：&lt;/span&gt;&lt;/strong&gt;这个知识量有点大，听着有点晕...重复代码重构这个我明白了，工具包里的那些工具函数大多都是重构出来的吧。刚刚讲到数据库操作要重构，能讲讲什么是ORM吗？要怎么处理？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;老菜：&lt;/span&gt;&lt;/strong&gt;ORM（英文全称：Object Relational Mapping）简称对象关系映射，直白点说就是将对象（可以是dict、list、元组等各种对象）通过转换，生成对应的sql语句，从而实现对数据库的增、删、改、查等操作。也就是说，原来我们对数据库操作时，需要写sql语句的，我们会发现经常会出现重复的代码维护起来不方便，现在只需要将要操作的字段或内容，存储（赋值）到相关对象中（dict、list、元组），然后这些值扔给ORM类中，ORM类会对赋的值进行对应分析进处理，最终生成可执行的sql语句。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　ORM的优缺网上已经有各种描述了，你可以去查查。这里我想说的是，它对于我们开发人员来说最大的优点是可以极大的提升我们的开发效率，减少bug的发生，让代码更容易维护。相对于所谓的性能损耗，在当今的高性能硬件下，可以直接忽略不计。对于一个项目或公司的生命期与成本来说，人力成本、时间成本与机会成本才是最重要的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　python的ORM有很多成熟的包可以直接安装调用，不过我建议自己开发会好一点，一方面写一个简单的ORM非常简单，另一方面，自己开发的ORM要升级、开发、维护也会更加的得心应手，想怎么改就怎么改。你可以当它是sql的翻译模块就可以了，我们只需要处理好重复的、简单的语句翻译，对于复杂的就不需要使用ORM，直接写sql执行，这样既灵活，又方便可控。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　接下几个章节会详细介绍一个ORM是如何从0到1的。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;版权声明：本文原创发表于 &lt;a href=&quot;http://www.cnblogs.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;博客园&lt;/span&gt;&lt;/a&gt;，作者为 &lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/EmptyFS/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;AllEmpty&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt;本文欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则视为侵权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;python开发QQ群：669058475    作者博客：http://www.cnblogs.com/EmptyFS/&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Jul 2018 07:19:00 +0000</pubDate>
<dc:creator>AllEmpty</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/EmptyFS/p/9362615.html</dc:identifier>
</item>
<item>
<title>winserver的consul部署实践与.net core客户端使用（附demo源码） - 陈珙</title>
<link>http://www.cnblogs.com/skychen1218/p/9330870.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skychen1218/p/9330870.html</guid>
<description>&lt;p&gt;随着微服务兴起，服务的管理显得极其重要。都知道微服务就是”拆“，把臃肿的单块应用，拆分成多个轻量级的服务，每个服务可以在短周期内重构、迭代、交付。随着微服务的数量增多，因量变引起了质量，带来新的问题其中一个是服务的管理问题。随着业务发展微服务增多，可能技术负责人也无法清楚记着服务的部署情况，服务的健康也不能时刻关注着，因此服务治理系统的作用必不可少。&lt;/p&gt;
&lt;p&gt;本篇文章的源码：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SkyChenSky/Consul.Demo&quot; target=&quot;_blank&quot;&gt;demo:https://github.com/SkyChenSky/Consul.Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SkyChenSky/Sikiro.Tookits.Consul&quot; target=&quot;_blank&quot;&gt;封装：https://github.com/SkyChenSky/Sikiro.Tookits.Consul&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consul是一款简单、易用、可伸缩性强的服务治理系统。&lt;/p&gt;
&lt;p&gt;主要核心功能有：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;健康检查&lt;/li&gt;
&lt;li&gt;键值存储&lt;/li&gt;
&lt;li&gt;多数据中心&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;consul代理会每个一段时间对注册中心的服务节点进行访问，如果响应码为“20X&quot;认为是健康。&lt;/p&gt;
&lt;p&gt;键值存储可以认为是一个简易的k/v数据库，因此可以用此来存放配置信息。&lt;/p&gt;

&lt;p&gt;服务发现分服务注册和服务查找。&lt;/p&gt;
&lt;h2&gt;服务注册&lt;/h2&gt;
&lt;p&gt;将服务节点信息（地址+端口）添加（删除）到注册表，注册表会记录着服务的节点信息和状态&lt;/p&gt;
&lt;h2&gt;服务查找&lt;/h2&gt;
&lt;p&gt;由其他的服务或者系统通过注册表查询到指定可用服务的节点信息。&lt;/p&gt;

&lt;p&gt;服务发现的方式又分自主式和代理式。&lt;/p&gt;
&lt;h2&gt;自主式&lt;/h2&gt;
&lt;p&gt;由各个服务主动的将自己节点信息添加（删除）到注册中心。实现是通过统一封装或者程序库，由服务各个节点承担服务发现的功能，与代理式相比由各自节点分担的访问压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/488722/201807/488722-20180725101505527-478717231.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;代理式&lt;/h2&gt;
&lt;p&gt;由一个系统（负载均衡系统）或者服务（API网关）来完成服务发现。因为由一个系统或者服务完成，随着注册服务的增加会带来性能瓶颈，因此需要对此做集群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/488722/201807/488722-20180725101520269-2013711268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Consul有两种模式，Client和Server，无论各种模式都有一个consul agent。&lt;/p&gt;
&lt;h2&gt;Client模式&lt;/h2&gt;
&lt;p&gt;Client模式是一个轻量级的consul agent，只拥有注册服务、健康检查、转发查询等功能。&lt;/p&gt;
&lt;h2&gt;Server模式&lt;/h2&gt;
&lt;p&gt;Server模式与Client模式相比，除了拥有Client模式的功能还多出了数据存储，leader选举等。&lt;/p&gt;

&lt;p&gt;官方建议Server模式应保证3-5个，而且应该是奇数，为什么呢，因为少于3个无法保证高可用，多于5个又会给数据库同步的一致性带来压力，而Client数量控制则没有讲究。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/488722/201807/488722-20180724152414006-1320401198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下载consul &lt;a href=&quot;https://www.consul.io/downloads.html&quot; target=&quot;_blank&quot;&gt;https://www.consul.io/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在服务器A，打开cmd，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
consul agent -server -bootstrap-expect=&lt;span&gt;1&lt;/span&gt; -bind=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.80&lt;/span&gt; -client=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.80&lt;/span&gt; -join=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.80&lt;/span&gt; -datacenter=dc1 -data-dir=data -ui -node=consul-&lt;span&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在服务器B，打开cmd，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
consul agent -server -bind=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.81&lt;/span&gt; -client=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.81&lt;/span&gt; -join=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;20.80&lt;/span&gt; -data-dir=data -node=consul-&lt;span&gt;81&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开浏览器输入http://192.168.20.80:8500&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/488722/201807/488722-20180724134927995-511636873.png&quot; alt=&quot;&quot; width=&quot;887&quot; height=&quot;281&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;-server
&lt;ul&gt;&lt;li&gt;consul以server模式启动，不填则默认以client模式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-bootstrap-expect=&lt;span&gt;1&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;集群节点数，当集群节点数达到声明数量才会进行数据同步&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-bind=&lt;span&gt;192.168.&lt;span&gt;20.80&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;当前consul服务绑定地址&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-client=&lt;span&gt;192.168.&lt;span&gt;20.80&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;http接口绑定地址，客户端调用需要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-join=&lt;span&gt;192.168.&lt;span&gt;20.80&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;启动服务时加入目标集群&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-node=consul-&lt;span&gt;81&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;服务节点名称&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;-ui
&lt;ul&gt;&lt;li&gt;启动web管理后台&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装Consul&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/488722/201807/488722-20180725141202715-1140329792.png&quot; alt=&quot;&quot; width=&quot;887&quot; height=&quot;385&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;封装扩展&lt;/h2&gt;
&lt;p&gt;只贴部分核心代码，具体可以查看demo源码。&lt;/p&gt;
&lt;h3&gt;注入ConsulClient&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IServiceCollection AddConsul(&lt;span&gt;this&lt;/span&gt; IServiceCollection serviceCollection, Action&amp;lt;ConsulConfiguration&amp;gt;&lt;span&gt; optionAction)
        {
            _consulConfiguration &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConsulConfiguration();
            optionAction(_consulConfiguration);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; consulClient = &lt;span&gt;new&lt;/span&gt; ConsulClient(x =&amp;gt;&lt;span&gt;
                x.Address &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(_consulConfiguration.Host));

            serviceCollection.AddSingleton(consulClient);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; serviceCollection;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把当前服务注册到Consul&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ConsulConfiguration _consulConfiguration;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IApplicationBuilder UseConsul(&lt;span&gt;this&lt;/span&gt; IApplicationBuilder app, IApplicationLifetime lifetime, Action&amp;lt;ServerConfiguration&amp;gt;&lt;span&gt; optionAction)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; consulClient = app.ApplicationServices.GetService&amp;lt;ConsulClient&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (consulClient == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;please AddConsul first&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serverConfiguration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServerConfiguration();
            optionAction(serverConfiguration);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serviceRegistration =&lt;span&gt; GetServiceRegistration(serverConfiguration);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加注册&lt;/span&gt;
&lt;span&gt;            consulClient.Agent.ServiceRegister(serviceRegistration).Wait();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消注册&lt;/span&gt;
            lifetime.ApplicationStopping.Register(() =&amp;gt;&lt;span&gt;
            {
                consulClient.Agent.ServiceDeregister(serviceRegistration.ID).Wait();
            });
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; app;
        }
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Uri GetSelfUri(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; uristring)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(uristring);
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; AgentServiceRegistration GetServiceRegistration(ServerConfiguration serverConfiguration)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; localIp =&lt;span&gt; GetSelfUri(serverConfiguration.SelfHost);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serviceRegistration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgentServiceRegistration
            {
                Check &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgentServiceCheck//健康检查
                {
                    DeregisterCriticalServiceAfter &lt;/span&gt;= TimeSpan.FromSeconds(&lt;span&gt;60&lt;/span&gt;&lt;span&gt;),
                    Interval &lt;/span&gt;= TimeSpan.FromSeconds(&lt;span&gt;30&lt;/span&gt;&lt;span&gt;),
                    HTTP &lt;/span&gt;= $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://{localIp.Host}:{localIp.Port}/api/health&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Timeout &lt;/span&gt;= TimeSpan.FromSeconds(&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
                },
                ID &lt;/span&gt;= Guid.NewGuid().ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                Name &lt;/span&gt;=&lt;span&gt; serverConfiguration.ServerName,
                Address &lt;/span&gt;=&lt;span&gt; localIp.Host,
                Port &lt;/span&gt;=&lt;span&gt; localIp.Port,
                Tags &lt;/span&gt;=
                    &lt;span&gt;new&lt;/span&gt;&lt;span&gt;[]
                    {
                        serverConfiguration.ServerName
                    }
            };

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; serviceRegistration;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;添加健康检查接口&lt;/h3&gt;
&lt;p&gt;与上述封装可以在同一个库，避免每个web服务都要写一个&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/[Controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HealthController : Controller
    {
        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OkResult Get()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Ok();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;在Startup.cs对&lt;span&gt;Consul&lt;/span&gt;封装进行调用&lt;/h3&gt;
&lt;h3&gt;ConfigureServices&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
 {
      services.AddOptions().AddConsul(option &lt;/span&gt;=&amp;gt;&lt;span&gt;
      {
          option.WithHost(Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConsulConfiguration:Host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
      }).AddMvc();
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Configure&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
app.UseConsul(lifetime, option =&amp;gt;&lt;span&gt;
{
    option.WithSelfHost(Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SelfHost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
    option.WithServerName(Configuration[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConsulConfiguration:ServerName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;K/V扩展&lt;/h3&gt;
&lt;p&gt;只实现了put、get、delete，剩下可以自行按需添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsulKyExtensions
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; KvPutAsync(&lt;span&gt;this&lt;/span&gt; ConsulClient consulClient, &lt;span&gt;string&lt;/span&gt; key, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; kvPair = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; KVPair(key)
            {
                Value &lt;/span&gt;=&lt;span&gt; Encoding.UTF8.GetBytes(value)
            };
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; consulClient.KV.Put(kvPair);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (result.StatusCode ==&lt;span&gt; HttpStatusCode.OK)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result.Response;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; KvPut(&lt;span&gt;this&lt;/span&gt; ConsulClient consulClient, &lt;span&gt;string&lt;/span&gt; key, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; value)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; kvPair = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; KVPair(key)
            {
                Value &lt;/span&gt;=&lt;span&gt; Encoding.UTF8.GetBytes(value)
            };
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = consulClient.KV.Put(kvPair).ConfigureAwait(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;).GetAwaiter().GetResult();

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (result.StatusCode ==&lt;span&gt; HttpStatusCode.OK)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result.Response;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; KvGetAsync(&lt;span&gt;this&lt;/span&gt; ConsulClient consulClient, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; key)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; consulClient.KV.Get(key);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Encoding.UTF8.GetString(result.Response.Value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; KvGet(&lt;span&gt;this&lt;/span&gt; ConsulClient consulClient, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; key)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = consulClient.KV.Get(key).ConfigureAwait(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;).GetAwaiter().GetResult();

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Encoding.UTF8.GetString(result.Response.Value);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt; KvDeleteAsync(&lt;span&gt;this&lt;/span&gt; ConsulClient consulClient, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; key)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; consulClient.KV.Delete(key);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (result.StatusCode ==&lt;span&gt; HttpStatusCode.OK)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result.Response;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; KvDelete(&lt;span&gt;this&lt;/span&gt; ConsulClient consulClient, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; key)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = consulClient.KV.Delete(key).ConfigureAwait(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;).GetAwaiter().GetResult();

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (result.StatusCode ==&lt;span&gt; HttpStatusCode.OK)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result.Response;

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;修改appsettings.json，填写目标consul地址和本服务地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IncludeScopes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogLevel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  },
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConsulConfiguration&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://192.168.20.80:8500&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServerName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConsulWebDemo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20E2CFBB-95C0-496A-B70F-11111111&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  },
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SelfHost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:1495/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动后，如果服务正常则可以显示下图效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/488722/201807/488722-20180725142645641-1571583209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Jul 2018 07:10:00 +0000</pubDate>
<dc:creator>陈珙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skychen1218/p/9330870.html</dc:identifier>
</item>
<item>
<title>网站HTTP升级HTTPS完全配置手册 - 葡萄城技术团队</title>
<link>http://www.cnblogs.com/powertoolsteam/p/http2https.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/powertoolsteam/p/http2https.html</guid>
<description>&lt;blockquote readability=&quot;7.3846153846154&quot;&gt;
&lt;p&gt; 本文由葡萄城技术团队于博客园原创并首发&lt;/p&gt;
&lt;p&gt;转载请注明出处：&lt;a href=&quot;https://www.grapecity.com.cn/&quot; target=&quot;_blank&quot;&gt;葡萄城官网&lt;/a&gt;，葡萄城为开发者提供专业的开发工具、解决方案和服务，赋能开发者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天，所有使用Google Chrome稳定版的用户迎来了v68正式版首个版本的发布，详细版本号为v68.0.3440.75，上一个正式版v67.0.3396.99发布于6月13日，自Chrome 68起，当在加载非HTTPS站点时，都会在地址栏上明确标记为“Not Secure（不安全）”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725141637040-90747926.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Google很早就已经开始进行大力推广，但因为迁移至HTTPS比较困难存在一定的技术门槛，而且成本也比较高昂，其次就是当时没有任何行业在推动这项变革，所以当时响应支持的并不是很多。&lt;/p&gt;
&lt;p&gt;但现在情况不同了，在Google的坚持努力下，同时HTTPS也在安全性、搜索引擎友好方面具有不小的优势，目前Top 100的网站中已经有81家网站默认使用了HTTPS。&lt;/p&gt;
&lt;p&gt;那么Chrome在这次升级后，为了给用户带来更好的用户体验及更多的信任，网站升级HTTPS的进程可能会比之前更快，那么我们应该如何将自己的站点升级为HTTPS，以及如何配置平滑过渡。&lt;/p&gt;
&lt;p&gt;升级HTTPS，我们可以分为&lt;strong&gt;购买证书&lt;/strong&gt;、&lt;strong&gt;安装证书&lt;/strong&gt;、&lt;strong&gt;设置跳转&lt;/strong&gt;这三个步骤，下面我们展开来讲讲这三步详细的实施流程。&lt;/p&gt;
&lt;h3&gt;申请证书&lt;/h3&gt;
&lt;p&gt;证书类型分为DV、OV、EV这三种，这三种有什么区别？&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DV（域名型SSL）：个人站点、iOS应用分发站点、登陆等单纯https加密需求的链接；&lt;/li&gt;
&lt;li&gt;OV（企业型SSL）：企业官网；&lt;/li&gt;
&lt;li&gt;EV（增强型SSL）：对安全需求更强的企业官网、电商、互联网金融网站；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;SSL证书的部署类型又分为了单域名、多域名、通配符等类型， 这里以葡萄城官网为例，使用的是OV通配符证书，也就是一张证书可以保护 *.grapecity.com.cn 下的所有子域名。大家可以根据自己的需求来选择申请购买。&lt;/p&gt;
&lt;h3&gt;安装证书&lt;/h3&gt;
&lt;p&gt;证书购买完成后，你就可以下载对应域名的证书文件。根据你Web服务器的不同种类一般证书也会分为多种，请根据自己的实际情况下载安装，一般的常见的Web服务器分为Nginx、Apache、Tomcat、IIS 6、IIS 7/8这几种，下面我们来看一下，证书下载完成后，如何在服务器上安装/配置SSL证书。&lt;/p&gt;
&lt;h4&gt;Nginx&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;首先在Nginx的安装目录下创建cert目录，将下载的全部文件拷贝到cert目录中。&lt;/li&gt;
&lt;li&gt;打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件，找到“HTTPS server”部分。&lt;/li&gt;
&lt;li&gt;指定证书路径，为如下示意并保存：&lt;/li&gt;
&lt;li readability=&quot;-0.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
server {
    listen 443;
    server_name 你网站的域名;
    ssl on;
    root html;
    index index.html index.htm;
    ssl_certificate   cert/&lt;span&gt;你的证书文件名&lt;/span&gt;.pem;
    ssl_certificate_key  cert/&lt;span&gt;你的证书文件名&lt;/span&gt;.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    location / {
        root html;
        index index.html index.htm;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　5. 重启Nginx，这时候你的站点应该就已经可以通过https方式访问了&lt;/p&gt;
&lt;h4&gt;Apache&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;在Apache的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。&lt;/li&gt;
&lt;li&gt;打开 Apache 安装目录下的 conf 目录中的 httpd.conf 文件，找到以下内容并去掉“#”：&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#LoadModule ssl_module modules/mod_ssl.so 
#Include conf/extra/httpd-ssl.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　  4. 打开Apache安装目录下的conf/extra/httpd-ssl.conf文件（或conf.d/ssl.conf），在配置文件中找到以下语句并配置&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
# 添加 SSL 协议支持协议，去掉不安全的协议
SSLProtocol all -SSLv2 -SSLv3
# 修改加密套件如下
SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM
SSLHonorCipherOrder on
# 证书公钥配置
SSLCertificateFile cert/public.pem
# 证书私钥配置
SSLCertificateKeyFile cert/&lt;span&gt;你的证书文件名&lt;/span&gt;.key
# 证书链配置，如果该属性开头有 '#'字符，请删除掉
SSLCertificateChainFile cert/chain.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5. 重启 Apache&lt;/p&gt;
&lt;h4&gt;Tomcat&lt;/h4&gt;
&lt;p&gt;Tomcat 支持JKS格式证书，但从Tomcat7开始也支持PFX格式证书，两种格式任选其一&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在Tomcat的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。&lt;/li&gt;
&lt;li&gt;找到安装Tomcat目录下该文件server.xml，找到Connection port=&quot;8443&quot; 标签，并根据证书类型添加如下相应属性：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　　　&lt;strong&gt;如果是PFX证书&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
keystoreFile=&quot;cert/&lt;span&gt;你的证书文件名&lt;/span&gt;.pfx&quot;

keystoreType=&quot;PKCS12&quot;

keystorePass=&quot;&lt;span&gt;证书密码&lt;/span&gt;&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;strong&gt;如果是JKS证书&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
keystoreFile=&quot;cert/&lt;span&gt;你的证书文件名&lt;/span&gt;.jks&quot;

keystorePass=&quot;&lt;span&gt;证书密码&lt;/span&gt;&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;strong&gt;重启Tomcat&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;IIS 6&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;导入证书
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;开始 -〉运行 -〉MMC&lt;/li&gt;
&lt;li&gt;启动控制台程序，选择菜单“文件&quot;中的&quot;添加/删除管理单元”-&amp;gt; “添加”，从“可用的独立管理单元”列表中选择“证书”-&amp;gt; 选择“计算机帐户“&lt;/li&gt;
&lt;li&gt;在控制台的左侧显示证书树形列表，选择“个人”-&amp;gt;“证书”，右键单击，选择“所有任务&quot;-〉&quot;导入”, 根据&quot;证书导入向导”的提示，导入PFX文件（此过程当中有一步非常重要： “根据证书内容自动选择存储区”）&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725142415904-645309161.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725142423543-1816044906.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725142437878-1516337525.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;刷新后即可看到证书。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;为站点分配证书，打开IIS -〉目录安全性 -〉服务器证书 -〉分配现有证书 -〉指定访问端口为443&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725142500115-1188488961.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;重启站点&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;IIS 7/8&lt;/h4&gt;
&lt;ol readability=&quot;-1.5&quot;&gt;&lt;li&gt;导入证书（和IIS 6步骤相同）&lt;/li&gt;
&lt;li&gt;为站点分配证书，选择“绑定”-&amp;gt;“添加”-&amp;gt;“类型选择 https” -&amp;gt;“端口 443” -&amp;gt;“ssl 证书（选择导入的证书名称）” -&amp;gt;“确定”&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725142533588-886873720.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;如遇到主机名不能设置，请打开C:\Windows\system32\inetsrv\config\applicationHost.config 手动修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;重启站点&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;之后通过https://hostname 访问，并能够成功加载证书时，就已经算成功在服务器上安装证书了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725143730612-521131626.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;设置跳转&lt;/h3&gt;
&lt;p&gt;经过上面的步骤，相信各位的网站应该都能以&lt;a href=&quot;https://domainhost/&quot;&gt;https://domainhost&lt;/a&gt;的形式访问了，但细心的小伙伴可能已经发现，网站这个时候http和https同时都能够访问。这就需要设置跳转了，使http请求通过301 redirect到https上去。同样的，我们以不同Web服务类型来说明。&lt;/p&gt;
&lt;h4&gt;Nginx&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
server {

        listen 80;

        server_name &lt;span&gt;您的域名&lt;/span&gt;;

        return 301 https://$server_name$request_uri;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Apache&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;新建.htaccess&lt;/span&gt;

RewriteEngine On

RewriteCond %{SERVER_PORT} 80

RewriteRule ^(.*)$ https://%{HTTP_HOST}/$1 [R,L]　
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Tomcat&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;在conf/web.xml中的&amp;lt;/web-app&amp;gt;前加入&lt;/span&gt;

&amp;lt;login-config&amp;gt;

       &amp;lt;!-- Authorization setting for SSL --&amp;gt;

       &amp;lt;auth-method&amp;gt;CLIENT-CERT&amp;lt;/auth-method&amp;gt;

       &amp;lt;realm-name&amp;gt;Client Cert Users-only Area&amp;lt;/realm-name&amp;gt;

&amp;lt;/login-config&amp;gt;

&amp;lt;security-constraint&amp;gt;

       &amp;lt;!-- Authorization setting for SSL --&amp;gt;

       &amp;lt;web-resource-collection &amp;gt;

              &amp;lt;web-resource-name &amp;gt;SSL&amp;lt;/web-resource-name&amp;gt;

              &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;

       &amp;lt;/web-resource-collection&amp;gt;

       &amp;lt;user-data-constraint&amp;gt;

              &amp;lt;transport-guarantee&amp;gt;CONFIDENTIAL&amp;lt;/transport-guarantee&amp;gt;

       &amp;lt;/user-data-constraint&amp;gt;

&amp;lt;/security-constraint&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;IIS 6&lt;/h4&gt;
&lt;p&gt;打开IIS -〉站点属性 -〉主目录 -〉选择“重定向到URL” -〉填写&lt;a href=&quot;https://your-hostname/$S$Q&quot;&gt;https://your-hostname/$S$Q&lt;/a&gt;” -〉勾选“资源的永久重定向”　　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725142844524-1349886827.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span lang=&quot;EN-US&quot;&gt;IIS 7/8&lt;/span&gt;&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;安装Url Rewrite 扩展组件 &lt;a href=&quot;https://www.iis.net/downloads/microsoft/url-rewrite&quot;&gt;https://www.iis.net/downloads/microsoft/url-rewrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;反选“要求SSL&quot;&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/139239/201807/139239-20180725142911499-1362543869.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;站点的web.config内的&amp;lt;system.webServer&amp;gt;节中添加&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;rewrite&amp;gt;
     &amp;lt;rules&amp;gt;
       &amp;lt;rule name=&quot;HTTP2HTTPS&quot; stopProcessing=&quot;true&quot;&amp;gt;
         &amp;lt;match url=&quot;(.*)&quot; /&amp;gt;
         &amp;lt;conditions&amp;gt;
           &amp;lt;add input=&quot;{HTTPS}&quot; pattern=&quot;off&quot; ignoreCase=&quot;true&quot; /&amp;gt;
         &amp;lt;/conditions&amp;gt;
         &amp;lt;action type=&quot;Redirect&quot; redirectType=&quot;Found&quot; url=&quot;https://{HTTP_HOST}/{R:1}&quot; /&amp;gt;
       &amp;lt;/rule&amp;gt;
     &amp;lt;/rules&amp;gt;
   &amp;lt;/rewrite&amp;gt;　　
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;至此，网站HTTPS化的工作已经全部完成了，另外多啰嗦的内容就是，HTTPS化了之后还有一些收尾工作需要进行，那就是，请尽量将引用图片资源的路径改为相对路径，如果引用的有站外的js或css等资源，也请将http协议头删除，否则会给你带来一些“惊喜”。&lt;/p&gt;
</description>
<pubDate>Wed, 25 Jul 2018 06:39:00 +0000</pubDate>
<dc:creator>葡萄城技术团队</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/powertoolsteam/p/http2https.html</dc:identifier>
</item>
<item>
<title>Windows下安装Redis服务及安装PHP的Redis扩展 - 申文哲</title>
<link>http://www.cnblogs.com/wenzheshen/p/9365756.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wenzheshen/p/9365756.html</guid>
<description>&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;
&lt;p&gt;它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。&lt;/p&gt;

&lt;p&gt;实现PHP的缓存机制，需要首先在本地安装Redis服务&lt;/p&gt;
&lt;h3&gt;一、windows安装Redis步骤&lt;/h3&gt;
&lt;p&gt;1.在github官网上下载Redis，地址：&lt;a href=&quot;https://github.com/MicrosoftArchive/redis/releases/tag/win-3.2.100&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Redis下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（在这里可以下载安装版的双击安装即可，也可以下载非安装版的直接解压文件）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/949827/201807/949827-20180725123236918-810654474.png&quot; alt=&quot;&quot; width=&quot;653&quot; height=&quot;224&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.windows+R ,cmd打开命令窗口,切换到安装好的Redis目录（这里我的是默认安装，目录为：C:\Program Files\Redis），命令如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
redis-server redis.windows.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出现下图所示即安装成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/949827/201807/949827-20180725140858131-2081605426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.设置Redis在Windows本地开机自启动服务，命令窗口执行命令如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
redis-server --service-install redis.windows.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看本地服务是否启动，出现下图所示即自启动成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/949827/201807/949827-20180725141130844-1905625409.png&quot; alt=&quot;&quot; width=&quot;654&quot; height=&quot;291&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.开启、关闭、卸载Redis服务命令&lt;/p&gt;
&lt;p&gt;命令窗口执行开启命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
redis-server --service-start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令窗口执行停止命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
redis-server --service-stop
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 命令窗口执行卸载命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
redis-server --service-uninstall
&lt;/pre&gt;&lt;/div&gt;

&lt;hr/&gt;&lt;p&gt;注意点：&lt;/p&gt;
&lt;p&gt;当安装好Redis第一次启动测试是否安装成功时可能出现以下问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/949827/201807/949827-20180725141346452-427137346.png&quot; alt=&quot;&quot; width=&quot;631&quot; height=&quot;58&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解决办法:命令窗口按顺序执行以下命令:&lt;/p&gt;
&lt;p&gt;C:\Program Files\Redis&amp;gt;&lt;strong&gt;&lt;span&gt;redis-cli.exe&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;127.0.0.1:6379&amp;gt;&lt;strong&gt;&lt;span&gt;shutdown&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;not connected&amp;gt;&lt;strong&gt;&lt;span&gt;exit&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C:\Program Files\Redis&amp;gt;&lt;strong&gt;&lt;span&gt;redis-server.exe redis.windows.conf&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即可看到启动成功！&lt;/p&gt;
&lt;hr/&gt;
&lt;h3&gt;二、安装PHP的Redis扩展&lt;/h3&gt;
&lt;p&gt;1.查看PHP自己版本信息，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/949827/201807/949827-20180725143649988-357307587.png&quot; alt=&quot;&quot; width=&quot;627&quot; height=&quot;389&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.根据PHP版本号，编译器版本号和CPU架构，选择合适的Redis扩展&lt;/p&gt;
&lt;p&gt;这里的PHP版本为5.6.16，VC11 ，X86编译以及TS线程安全，所以，选下面的扩展版本：&lt;/p&gt;
&lt;p&gt;选择&lt;span&gt;php_redis-2.2.7-5.6-ts-vc11-x86.zip&lt;/span&gt;和&lt;span&gt;php_igbinary-2.0.7-5.6-ts-vc11-x86.zip&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;/p&gt;
&lt;p&gt;可以根据这两个链接来查找对应的版本：&lt;/p&gt;
&lt;p&gt;redis : &lt;a href=&quot;https://windows.php.net/downloads/pecl/releases/redis/&quot; target=&quot;_blank&quot;&gt;https://windows.php.net/downloads/pecl/releases/redis/&lt;/a&gt;&lt;br/&gt;igbinary: &lt;a href=&quot;https://windows.php.net/downloads/pecl/releases/igbinary/&quot; target=&quot;_blank&quot;&gt;https://windows.php.net/downloads/pecl/releases/igbinary/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 3.将以上两个文件下载解压缩后，将php_redis.dll和php_igbinary.dll拷贝至php环境的ext目录下&lt;/p&gt;
&lt;p&gt;4.在php.ini文件中任意位置增加以下代码（注意：extension=php_igbinary.dll一定要放在extension=php_redis.dll的前面，否则此扩展不会生效）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;; php_redis
extension&lt;/span&gt;=&lt;span&gt;php_igbinary.dll
extension&lt;/span&gt;=php_redis.dll
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.重新启动Apache，查看phpinfo()信息，如下图表示扩展安装成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/949827/201807/949827-20180725144617693-1941499545.png&quot; alt=&quot;&quot; width=&quot;618&quot; height=&quot;82&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;三、PHP简易Redis扩展应用实例&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接本地的 Redis 服务&lt;/span&gt;
&lt;span&gt;$redis&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Redis();
&lt;/span&gt;&lt;span&gt;$redis&lt;/span&gt;-&amp;gt;connect('127.0.0.1', 6379&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;Connection to server sucessfully&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br/&amp;gt;&quot;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置 redis 字符串数据&lt;/span&gt;
&lt;span&gt;$redis&lt;/span&gt;-&amp;gt;set(&quot;name&quot;, &quot;xiaoming&quot;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取存储的数据并输出&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &quot;Stored string in redis:: &quot; . &lt;span&gt;$redis&lt;/span&gt;-&amp;gt;get(&quot;name&quot;&lt;span&gt;);
&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt; 四、Redis可视化工具redis-desktop-manager管理查询缓存&lt;/h3&gt;
&lt;p&gt;redis-desktop-manager是一款基于Qt5的跨平台Redis桌面管理软件&lt;/p&gt;
&lt;p&gt;支持: Windows 7+, Mac OS X 10.10+, Ubuntu 14+&lt;/p&gt;
&lt;p&gt;特点： C++ 编写，响应迅速，性能好。但不支持数据库备份与恢复。&lt;/p&gt;
&lt;p&gt;软件下载地址：&lt;a href=&quot;http://redisdesktop.com/download&quot; target=&quot;_blank&quot;&gt;http://redisdesktop.com/download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github项目地址：&lt;a href=&quot;https://github.com/uglide/RedisDesktopManager&quot; target=&quot;_blank&quot;&gt;https://github.com/uglide/RedisDesktopManager&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Jul 2018 06:26:00 +0000</pubDate>
<dc:creator>申文哲</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wenzheshen/p/9365756.html</dc:identifier>
</item>
<item>
<title>大数据平台搭建-hbase集群的搭建 - molyeo</title>
<link>http://www.cnblogs.com/molyeo/p/9365668.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/molyeo/p/9365668.html</guid>
<description>&lt;p&gt;本系列文章主要阐述大数据计算平台相关框架的搭建，包括如下内容：&lt;/p&gt;
&lt;p&gt;本文主要讲解&lt;code&gt;hbase&lt;/code&gt;的分布式搭建过程。&lt;/p&gt;
&lt;h2 id=&quot;版本要求&quot;&gt;版本要求&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;java版本：&lt;code&gt;1.8.0_181&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;zookeeper版本:&lt;code&gt;zookeeper-3.4.10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;hadoop版本:&lt;code&gt;hadoop-2.7.6&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;hbase版本：&lt;code&gt;hbase-1.2.6.1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;前置条件&quot;&gt;前置条件&lt;/h2&gt;
&lt;h3 id=&quot;免密登录&quot;&gt;免密登录&lt;/h3&gt;
&lt;p&gt;见链接&lt;a href=&quot;http://www.cnblogs.com/molyeo/p/7007917.html&quot;&gt;免密登录&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;java安装&quot;&gt;java安装&lt;/h3&gt;
&lt;p&gt;见链接&lt;a href=&quot;http://www.cnblogs.com/molyeo/p/7007917.html&quot;&gt;java安装&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;zookeeper安装&quot;&gt;zookeeper安装&lt;/h3&gt;
&lt;p&gt;见链接&lt;a href=&quot;http://www.cnblogs.com/molyeo/p/7048867.html&quot;&gt;zookeeper安装&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;hadoop安装&quot;&gt;hadoop安装&lt;/h3&gt;
&lt;p&gt;见链接&lt;a href=&quot;https://www.cnblogs.com/molyeo/p/7484627.html&quot;&gt;hadoop安装&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;服务器资源和分配&quot;&gt;服务器资源和分配&lt;/h2&gt;
&lt;p&gt;本文服务器列表如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;192.168.220.200  bigdata1
192.168.220.201  bigdata2
192.168.220.202  bigdata3
192.168.220.203  bigdata4
192.168.220.204  bigdata5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中选用&lt;code&gt;bigdata1&lt;/code&gt;和&lt;code&gt;bigdata2&lt;/code&gt;作为&lt;code&gt;namenode&lt;/code&gt;,&lt;code&gt;bigdata3、bigdat4、bigdata5&lt;/code&gt;作为&lt;code&gt;dataNode&lt;/code&gt;，安装完成后各节点进程名如下：&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;主机名&lt;/td&gt;
&lt;td&gt;ip地址&lt;/td&gt;
&lt;td&gt;HMaster&lt;/td&gt;
&lt;td&gt;HRegionServer&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bigdata1&lt;/td&gt;
&lt;td&gt;192.168.220.200&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bigdata2&lt;/td&gt;
&lt;td&gt;192.168.220.201&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bigdata3&lt;/td&gt;
&lt;td&gt;192.168.220.202&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bigdata4&lt;/td&gt;
&lt;td&gt;192.168.220.203&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bigdata5&lt;/td&gt;
&lt;td&gt;192.168.220.204&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;解压安装&quot;&gt;解压安装&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;tar -zxvf hbase-1.2.6.1-bin.tar.gz
mv hbase-1.2.6.1-bin hbase&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;环境变量&quot;&gt;环境变量&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;vi ~/.bash_profile   
export JAVA_HOME=/wls/oracle/jdk      
export SCALA_HOME=/wls/oracle/scala   
export ZOOKEEPER_HOME=/wls/oracle/zookeeper   
export HADOOP_HOME=/wls/oracle/hadoop   
export HBASE_HOME=/wls/oracle/hbase   
export SPARK_HOME=/wls/oracle/spark   

export PATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$SCALA_HOME/bin:$SPARK_HOME/bin:$ZOOKEEPER_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin   
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar   

export PATH　CLASSPATH JAVA_HOME  SCALA_HOME  ZOOKEEPER_HOME HADOOP_HOME SPARK_HOME &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;
&lt;p&gt;hbase需要修改的配置主要包含如下文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hbase-env.sh
hbase-site.xml
regionservers&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hbase-env.sh&quot;&gt;hbase-env.sh&lt;/h3&gt;
&lt;p&gt;hbase-env.sh文件增加JAVA_HOME的配置即可&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export JAVA_HOME=/home/oracle/jdk&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hbase-site.xml&quot;&gt;hbase-site.xml&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;hbase.master&lt;/code&gt;:指定&lt;code&gt;master&lt;/code&gt;节点&lt;br/&gt;&lt;code&gt;hbase.rootdir&lt;/code&gt;:指定&lt;code&gt;hbase&lt;/code&gt;文件存储路径&lt;br/&gt;&lt;code&gt;hbase.zookeeper.quorum&lt;/code&gt;:指定&lt;code&gt;zookeeper&lt;/code&gt;地址&lt;br/&gt;&lt;code&gt;hbase.zookeeper.property.dataDir&lt;/code&gt;:指定在&lt;code&gt;zookeeper&lt;/code&gt;存储的目录&lt;br/&gt;完整配置如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;hbase.master&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;192.168.220.200:60000&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;hbase.master.maxclockskew&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;180000&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt; 
    &amp;lt;property&amp;gt;  
        &amp;lt;name&amp;gt;hbase.cluster.distributed&amp;lt;/name&amp;gt;  
        &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;      
    &amp;lt;/property&amp;gt;

    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;hbase.rootdir&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;hdfs://cluster/hbase&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;     
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;hbase.cluster.distributed&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt; 
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;hbase.zookeeper.quorum&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;192.168.220.200,192.168.220.201,192.168.220.202&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;     
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;hbase.zookeeper.property.dataDir&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;/hbase&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt; 
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;zookeeper.session.timeout&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;60000&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;
      &amp;lt;name&amp;gt;hbase.regionserver.lease.period&amp;lt;/name&amp;gt;
      &amp;lt;value&amp;gt;900000&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property&amp;gt;
      &amp;lt;name&amp;gt;hbase.rpc.timeout&amp;lt;/name&amp;gt;
      &amp;lt;value&amp;gt;900000&amp;lt;/value&amp;gt; 
    &amp;lt;/property&amp;gt; 
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;regionservers&quot;&gt;regionservers&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;bigdata2
bigdata3
bigdata4
bigdata5&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;启动&quot;&gt;启动&lt;/h2&gt;
&lt;p&gt;配置完成后,启动hbase&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/home/oracle/hbase/bin/start-hbase.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;停止hbase脚本如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/home/oracle/hbase/bin/stop-hbase.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;本文主要讲解分布hbase搭建的过程，后续将会说明hbase使用相关的问题。&lt;/p&gt;
</description>
<pubDate>Wed, 25 Jul 2018 06:12:00 +0000</pubDate>
<dc:creator>molyeo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/molyeo/p/9365668.html</dc:identifier>
</item>
<item>
<title>Abstractive Summarization - |浅お唱|≮</title>
<link>http://www.cnblogs.com/dtblog/p/9365601.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dtblog/p/9365601.html</guid>
<description>&lt;p&gt;seq2seq模型在2014年提出，这篇论文是将seq2seq模型应用在abstractive summarization任务上比较早期的论文。同组的人还发表了一篇NAACL2016（Sumit Chopra, Facebook AI Research_Abstractive sentence summarization with attentive recurrent neural networks）（作者都差不多），在这篇的基础上做了更多的改进，效果也更好。这两篇都是在abstractive summarization任务上使用seq2seq模型的经典baseline。&lt;/p&gt;
</description>
<pubDate>Wed, 25 Jul 2018 06:00:00 +0000</pubDate>
<dc:creator>|浅お唱|≮</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dtblog/p/9365601.html</dc:identifier>
</item>
<item>
<title>redis系列：通过共同好友案例学习set命令 - 云枭zd</title>
<link>http://www.cnblogs.com/fixzd/p/9365398.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fixzd/p/9365398.html</guid>
<description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;这一篇文章将讲述Redis中的set类型命令，同样也是通过demo来讲述，其他部分这里就不在赘述了。&lt;/p&gt;
&lt;p&gt;项目Github地址：&lt;a href=&quot;https://github.com/rainbowda/learnWay/tree/master/learnRedis/case-set&quot; class=&quot;uri&quot;&gt;https://github.com/rainbowda/learnWay/tree/master/learnRedis/case-set&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;案例&quot;&gt;案例&lt;/h3&gt;
&lt;p&gt;demo功能是共同好友，整个demo的大致页面如下。左边是存储到Redis中的数据，右边是从Redis中弹出的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/%E9%A1%B5%E9%9D%A2.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;准备工作&lt;/h3&gt;
&lt;p&gt;首先定义一个存储a、b好友的key&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private static final String A_FRIEND_KEY = &quot;friend:a&quot;;

private static final String B_FRIEND_KEY = &quot;friend:b&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;redis操作对象&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;private RedisTemplate redisTemplate;
//string 命令操作对象
private ValueOperations valueOperations;
//set 命令操作对象
private SetOperations setOperations;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;set在Redis中的结构可以看下图（图片来源于Redis in Action）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/%E7%BB%93%E6%9E%84.png?raw=true&quot; alt=&quot;图片来源于Redis in Action&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加好友&quot;&gt;添加好友&lt;/h3&gt;
&lt;h4 id=&quot;命令介绍&quot;&gt;命令介绍&lt;/h4&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;SADD&lt;/td&gt;
&lt;td&gt;SADD key member [member ...]&lt;/td&gt;
&lt;td&gt;添加一个或多个指定的member元素到集合的 key中&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;我们来看看demo中的新增功能，点击添加好友，往用户A里面添加一些好友。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B.gif?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;添加完毕后，A有好友1、2、3，B有好友2、3、4。&lt;/p&gt;
&lt;p&gt;后台java代码如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(value = &quot;/addFriend&quot;, method = RequestMethod.POST)
public Long addFriend(String user, String friend) {
    String currentKey = A_FRIEND_KEY;
    if (&quot;B&quot;.equals(user)) {
        currentKey = B_FRIEND_KEY;
    }
    //返回添加成功的条数
    return setOperations.add(currentKey, friend);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相同的redis命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SADD friend:a 1 2 3
SADD friend:b 2 3 4&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好友结构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/%E5%A5%BD%E5%8F%8B%E7%BB%93%E6%9E%84.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;删除好友&quot;&gt;删除好友&lt;/h3&gt;
&lt;h4 id=&quot;命令介绍-1&quot;&gt;命令介绍&lt;/h4&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;SREM&lt;/td&gt;
&lt;td&gt;SREM key member [member ...]&lt;/td&gt;
&lt;td&gt;在key集合中移除指定的元素&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;删除功能如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/%E5%88%A0%E9%99%A4%E5%A5%BD%E5%8F%8B.gif?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后台java代码如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(value = &quot;/delFriend&quot;, method = RequestMethod.DELETE)
public Long delFriend(String user, String friend) {
    String currentKey = A_FRIEND_KEY;
    if (&quot;B&quot;.equals(user)) {
        currentKey = B_FRIEND_KEY;
    }
    //返回删除成功的条数
    return setOperations.remove(currentKey, friend);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相同的redis命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SREM friend:b 5&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;列表查询&quot;&gt;列表查询&lt;/h3&gt;
&lt;h4 id=&quot;命令介绍-2&quot;&gt;命令介绍&lt;/h4&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SMEMBERS&lt;/td&gt;
&lt;td&gt;SMEMBERS key&lt;/td&gt;
&lt;td&gt;返回key集合所有的元素.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;后台java代码如下，分别查出A和B的好友，然后添加到map里&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(value = &quot;/getList&quot;, method = RequestMethod.GET)
public Map getList() {
    Map map = new HashMap();

    Set aFriend = setOperations.members(A_FRIEND_KEY);
    Set bFriend = setOperations.members(B_FRIEND_KEY);

    map.put(&quot;aFriend&quot;, aFriend);
    map.put(&quot;bFriend&quot;, bFriend);

    return map;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相同的redis命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SMEMBERS friend:a
SMEMBERS friend:b&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;共同好友&quot;&gt;共同好友&lt;/h3&gt;
&lt;h4 id=&quot;命令介绍-3&quot;&gt;命令介绍&lt;/h4&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SINTER&lt;/td&gt;
&lt;td&gt;SINTER key [key ...]&lt;/td&gt;
&lt;td&gt;返回指定所有的集合的成员的交集.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;7&quot;&gt;&lt;td&gt;SINTERSTORE&lt;/td&gt;
&lt;td&gt;SINTERSTORE destination key [key ...]&lt;/td&gt;
&lt;td&gt;这个命令与SINTER命令类似, 但是它并不是直接返回结果集,而是将结果保存在 destination集合中.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;页面如下，点击共同好友按钮，经过后台的数据获取，页面下方显示共同好友2、3。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/%E5%85%B1%E5%90%8C%E5%A5%BD%E5%8F%8B.gif?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;共同好友也就是好友A和好友B共有的好友，两个数据做交集即可得到共有的数据，即A好友∩B好友={1,2,3}∩{2,3,4}={2,3} 。红色部分就是交集的结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/AB%E5%A5%BD%E5%8F%8B%E4%BA%A4%E9%9B%86.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后台代码如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(value = &quot;/intersectFriend&quot;, method = RequestMethod.GET)
public Set intersectFriend() {
    return setOperations.intersect(A_FRIEND_KEY, B_FRIEND_KEY);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相同的redis命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SINTER friend:a friend:b&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;a独有的好友&quot;&gt;A独有的好友&lt;/h3&gt;
&lt;h4 id=&quot;命令介绍-4&quot;&gt;命令介绍&lt;/h4&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SDIFF&lt;/td&gt;
&lt;td&gt;SDIFF key [key ...]&lt;/td&gt;
&lt;td&gt;返回一个集合与给定集合的差集的元素.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;SDIFFSTORE&lt;/td&gt;
&lt;td&gt;SDIFFSTORE destination key [key ...]&lt;/td&gt;
&lt;td&gt;该命令类似于 SDIFF命令, 不同之处在于该命令不返回结果集，而是将结果存放在&lt;code&gt;destination&lt;/code&gt;集合中.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;页面如下，点击A独有的好友按钮，经过后台的数据获取，页面下方显示独有的好友1。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/A%E7%8B%AC%E6%9C%89%E7%9A%84%E5%A5%BD%E5%8F%8B.gif?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A独有的好友也就是取出A的好友在B好友中没有出现过的，也就是取差集，即A好友-B好友={1,2,3}-{2,3,4}={1}，下方图片中红色部分就是差集的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/AB%E5%A5%BD%E5%8F%8B%E5%B7%AE%E9%9B%86.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后台java代码如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(value = &quot;/differenceFriend&quot;, method = RequestMethod.GET)
public Set differenceFriend(String user) {
    return setOperations.difference(A_FRIEND_KEY, B_FRIEND_KEY);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相同的redis命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SDIFF friend:a friend:b&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;所有的好友&quot;&gt;所有的好友&lt;/h3&gt;
&lt;h4 id=&quot;命令介绍-5&quot;&gt;命令介绍&lt;/h4&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SUNION&lt;/td&gt;
&lt;td&gt;SUNION key [key ...]&lt;/td&gt;
&lt;td&gt;返回给定的多个集合的并集中的所有成员.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;7&quot;&gt;&lt;td&gt;SUNIONSTORE&lt;/td&gt;
&lt;td&gt;SUNIONSTORE destination key [key ...]&lt;/td&gt;
&lt;td&gt;该命令作用类似于SUNION命令,不同的是它并不返回结果集,而是将结果存储在destination集合中.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;页面如下，点击所有的好友按钮，经过后台的数据获取，页面下方显示共同好友1、2、3、4。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/%E6%89%80%E6%9C%89%E7%9A%84%E5%A5%BD%E5%8F%8B.gif?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有的好友就是A和B的好友,也就是A好友和B好友的并集，即A好友∪ B好友={1,2,3}∪ {2,3,4}={1,2,3,4}，图片如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/case-set/AB%E5%A5%BD%E5%8F%8B%E5%B9%B6%E9%9B%86.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后台java代码如下&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@RequestMapping(value = &quot;/unionFriend&quot;, method = RequestMethod.GET)
public Set unionFriend() {
    return setOperations.union(A_FRIEND_KEY, B_FRIEND_KEY);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相同的redis命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SUNION friend:a friend:b&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;其他命令&quot;&gt;其他命令&lt;/h3&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SCARD&lt;/td&gt;
&lt;td&gt;SCARD key&lt;/td&gt;
&lt;td&gt;返回集合存储的key的基数 (集合元素的数量).&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SISMEMBER&lt;/td&gt;
&lt;td&gt;SISMEMBER key member&lt;/td&gt;
&lt;td&gt;返回成员 member 是否是存储的集合 key的成员.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;SMOVE&lt;/td&gt;
&lt;td&gt;SMOVE source destination member&lt;/td&gt;
&lt;td&gt;将member从source集合移动到destination集合中&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SPOP&lt;/td&gt;
&lt;td&gt;SPOP key [count]&lt;/td&gt;
&lt;td&gt;返回移除的一个或者多个key中的元素&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SRANDMEMBER&lt;/td&gt;
&lt;td&gt;SRANDMEMBER key [count]&lt;/td&gt;
&lt;td&gt;随机返回key集合中的一个或者多个元素&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;SSCAN&lt;/td&gt;
&lt;td&gt;SSCAN key cursor [MATCH pattern][COUNT count]&lt;/td&gt;
&lt;td&gt;和scan类似&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;scard命令&quot;&gt;SCARD命令&lt;/h4&gt;
&lt;p&gt;返回集合存储的key的基数 (集合元素的数量).&lt;br/&gt;SCARD key&lt;br/&gt;返回值：集合的基数(元素的数量),如果key不存在,则返回 0.&lt;/p&gt;
&lt;p&gt;redis客户端执行的命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sadd sCardKey 1 2 3
scard sCardKey&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是java代码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Test
public void sCard() {
    jedis.sadd(&quot;sCardKey&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;);

    System.out.println(jedis.scard(&quot;sCardKey&quot;));

    //spring redisTemplate
    System.out.println(setOperations.size(&quot;sCardKey&quot;));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;sismember命令&quot;&gt;SISMEMBER命令&lt;/h4&gt;
&lt;p&gt;返回成员 member 是否是存储的集合 key的成员.&lt;br/&gt;SISMEMBER key member&lt;br/&gt;返回值：如果member元素是集合key的成员，则返回1。如果member元素不是key的成员，或者集合key不存在，则返回0&lt;/p&gt;
&lt;p&gt;redis客户端执行的命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; sadd sIsMemberKey hello
 sismember sIsMemberKey hello
 sismember sIsMemberKey redis&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是java代码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Test
public void sIsMember() {
    jedis.sadd(&quot;sIsMember&quot;, &quot;hello&quot;);

    System.out.println(jedis.sismember(&quot;sIsMember&quot;, &quot;hello&quot;));

    //spring redisTemplate
    System.out.println(setOperations.isMember(&quot;sIsMember&quot;, &quot;redis&quot;));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;smove命令&quot;&gt;SMOVE命令&lt;/h4&gt;
&lt;p&gt;将member从source集合移动到destination集合中. 对于其他的客户端,在特定的时间元素将会作为source或者destination集合的成员出现.&lt;br/&gt;如果source 集合不存在或者不包含指定的元素,这smove命令不执行任何操作并且返回0.&lt;br/&gt;否则对象将会从source集合中移除，并添加到destination集合中去，&lt;br/&gt;如果destination集合已经存在该元素，则smove命令仅将该元素充source集合中移除.&lt;br/&gt;如果source 和destination不是集合类型,则返回错误.&lt;br/&gt;SMOVE source destination member&lt;br/&gt;返回值：如果该元素成功移除,返回1。如果该元素不是 source集合成员,无任何操作,则返回0.&lt;/p&gt;
&lt;p&gt;redis客户端执行的命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sadd sMoveKeySrc 0 1 2 3 4
smove sMoveKeySrc sMoveKeyDst 5
smove sMoveKeySrc sMoveKeyDst 3
smembers sMoveKeyDst&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/set/smove%E5%91%BD%E4%BB%A4%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是java代码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Test
public void sMove() {
    jedis.sadd(&quot;sMoveKeySrc&quot;, &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;);

    System.out.println(&quot;移动一个不存在的元素,结果:&quot;+jedis.smove(&quot;sMoveKeySrc&quot;, &quot;sMoveKeyDst&quot;, &quot;5&quot;));

    //spring redisTemplate
    System.out.println(&quot;移动一个存在的元素,结果:&quot; + setOperations.move(&quot;sMoveKeySrc&quot;,&quot;3&quot;, &quot;sMoveKeyDst&quot;));

    System.out.println(jedis.smembers(&quot;sMoveKeyDst&quot;));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;spop命令&quot;&gt;SPOP命令&lt;/h4&gt;
&lt;p&gt;移除且返回一个或多个随机元素&lt;br/&gt;SPOP key [count]&lt;br/&gt;返回值：移除的元素，当key不存在时返回nil&lt;/p&gt;
&lt;p&gt;redis客户端执行的命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sadd sPopKey 0 1 2 3 4
spop sPopKey
spop sPopKey 2
smembers sPopKey&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/set/spop%E5%91%BD%E4%BB%A4%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是java代码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Test
public void sPop() {
    jedis.sadd(&quot;sPopKey&quot;, &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;);

    System.out.println(jedis.spop(&quot;sPopKey&quot;));

    //spring redisTemplate
    System.out.println(setOperations.pop(&quot;sPopKey&quot;, 2));

    System.out.println(jedis.smembers(&quot;sPopKey&quot;));

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;srandmember命令&quot;&gt;SRANDMEMBER命令&lt;/h4&gt;
&lt;p&gt;仅提供key参数,那么随机返回key集合中的一个元素.&lt;br/&gt;Redis 2.6开始, 可以接受 count 参数,&lt;br/&gt;如果count是整数且小于元素的个数，返回含有 count 个不同的元素的数组,&lt;br/&gt;如果count是个整数且大于集合中元素的个数时,仅返回整个集合的所有元素,&lt;br/&gt;当count是负数,则会返回一个包含count的绝对值的个数元素的数组，&lt;br/&gt;如果count的绝对值大于元素的个数,则返回的结果集里会出现一个元素出现多次的情况.&lt;br/&gt;仅提供key参数时,该命令作用类似于SPOP命令, 不同的是SPOP命令会将被选择的随机元素从集合中移除, 而SRANDMEMBER仅仅是返回该随记元素,而不做任何操作.&lt;/p&gt;
&lt;p&gt;SRANDMEMBER key [count]&lt;br/&gt;返回值：不使用count 参数的情况下该命令返回随机的元素,如果key不存在则返回nil.使用count参数,则返回一个随机的元素数组,如果key不存在则返回一个空的数组.&lt;/p&gt;
&lt;p&gt;redis客户端执行的命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sadd sRandMemberKey 0 1 2 3 4
srandmember sRandMemberKey 2
srandmember sRandMemberKey 9
srandmember sRandMemberKey -2
srandmember sRandMemberKey -9&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rainbowda/learnWay/blob/master/learnRedis/img/set/srandmember%E5%91%BD%E4%BB%A4%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png?raw=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是java代码&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Test
public void sRandMember() {
    jedis.sadd(&quot;sRandMemberKey&quot;, &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;);

    System.out.println(&quot;未加count参数:&quot; + jedis.srandmember(&quot;sRandMemberKey&quot;));
    System.out.println(&quot;count是整数且小于元素的个数:&quot; + jedis.srandmember(&quot;sRandMemberKey&quot;, 2));
    System.out.println(&quot;count是个整数且大于集合中元素的个数时:&quot; + jedis.srandmember(&quot;sRandMemberKey&quot;, 9));
    System.out.println(&quot;count是整数且小于元素的个数:&quot; + jedis.srandmember(&quot;sRandMemberKey&quot;, -2));
    System.out.println(&quot;count是个整数且大于集合中元素的个数时:&quot; + jedis.srandmember(&quot;sRandMemberKey&quot;, -9));

    //spring redisTemplate默认支持重复的元素
    System.out.println(&quot;count是负数,且绝对值大于元素的个数:&quot; + setOperations.randomMembers(&quot;sRandMemberKey&quot;, 9));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还是那句话建议学习的人最好每个命令都去敲下，加深印象。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行。————出自《冬夜读书示子聿》&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 25 Jul 2018 05:14:00 +0000</pubDate>
<dc:creator>云枭zd</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fixzd/p/9365398.html</dc:identifier>
</item>
<item>
<title>Guava 2:Basic utilities基本工具 - 只会一点java</title>
<link>http://www.cnblogs.com/dennyzhangdd/p/9356416.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dennyzhangdd/p/9356416.html</guid>
<description>&lt;h2&gt;一、引子&lt;/h2&gt;
&lt;p&gt;Guava的经典很大一部分原因来源于对于基础工具类的封装，使用这些类能够让我们的代码更加优雅且完善，这些类大部分都在com.google.common.base包下。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：JDK有很多借鉴guava的地方，本文只讲解guava,如果jdk中有类似的实现，不必疑虑。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、基本工具&lt;/h2&gt;
&lt;p&gt;按照官网介绍，Guava base包下有一些经典工具，如下：&lt;/p&gt;
&lt;h3&gt;2.1 Optional&amp;lt;T&amp;gt;&lt;/h3&gt;
&lt;h4&gt;1.作用&lt;/h4&gt;
&lt;p&gt;在构造对象的时候就明确申明该对象是否可能为null,快速失败拒绝null值,可以避免空指针异常。&lt;/p&gt;
&lt;h4&gt;2.简单使用&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * @Description Optional:一个指向值对象引用的对象实例，使得构造对象时就明确申明是否支持null
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; denny
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * @date 2018/7/24 下午2:23
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OptionalTest {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Integer a = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         Integer b = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 支持null、非null&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         Optional&amp;lt;Integer&amp;gt; optionalA1 =&lt;span&gt; Optional.&lt;span&gt;fromNullable&lt;/span&gt;(a);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         Optional&amp;lt;Integer&amp;gt; optionalA2 =&lt;span&gt; Optional.fromNullable(b);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不支持null,参数为null报错&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         Optional&amp;lt;Integer&amp;gt; optionalB =&lt;span&gt; Optional.&lt;span&gt;of&lt;/span&gt;(b);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不包含引用对象的实例()&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         Optional&amp;lt;Integer&amp;gt; optionalC =&lt;span&gt; Optional.&lt;span&gt;absent&lt;/span&gt;();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不存在实例，不进入&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(optionalA1.isPresent()){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             System.out.println(&quot; A1 get=&quot;+&lt;span&gt;optionalA1.&lt;span&gt;get&lt;/span&gt;());
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 存在实例，进入&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(optionalA2.isPresent()){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             System.out.println(&quot; A2 get=&quot;+&lt;span&gt;optionalA2.get());
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 存在实例，进入&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(optionalB.isPresent()){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             System.out.println(&quot; B get=&quot;+&lt;span&gt;optionalB.get());
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不存在实例，不进入&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(optionalC.isPresent()){
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             System.out.println(&quot; C get=&quot;+&lt;span&gt;optionalC.get());
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
 A2 get=1&lt;span&gt;
 B get&lt;/span&gt;=1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2 Preconditions&lt;/h3&gt;
&lt;h4&gt; 1.作用&lt;/h4&gt;
&lt;p&gt;前置条件校验，让方法中的条件检查更简单。&lt;/p&gt;
&lt;h4&gt;2.简单使用&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * @Description 前置条件校验
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; denny
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * @date 2018/7/24 下午3:14
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PreconditionsTest {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 1.空指针校验 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         Integer a = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接抛出空指针异常&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        Preconditions.checkNotNull(a);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 抛出指定错误消息的空指针异常&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         Preconditions.checkNotNull(a,&quot;a is null!&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 抛出指定错误消息(指定参数替换掉%s)的空指针异常&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         Preconditions.checkNotNull(a,&quot;a is null ,a=%s&quot;&lt;span&gt;,a);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 2.方法入参校验 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 方法入参校验：校验第一参是否true&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         Preconditions.checkArgument(a!=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; a&amp;gt;=0,&quot;参数a不满足条件! a=%s&quot;&lt;span&gt;,a);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 3.检查对象的状态 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模拟：订单号作为方法入参，修改订单状态为已完成。&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         Order order = Order.builder().id(1&lt;span&gt;).build();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 状态校验，非入参校验&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         Preconditions.checkState(order.getState()&amp;gt;0,&quot;订单状态非法! status=%s&quot;&lt;span&gt;,order.getState());
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 4.下标越界校验 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         List list = Lists.newArrayList(1,2,3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Preconditions.checkElementIndex(5,list.size(),&quot;下标非法！&quot;);&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 5.下标越界、start&amp;lt;end 校验 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         Preconditions.checkPositionIndexes(0,5&lt;span&gt;,list.size());
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.3 Objects（JDK7以上直接使用java.util.Objects）&lt;/h3&gt;
&lt;h4&gt; 1.作用&lt;/h4&gt;
&lt;p&gt;常见Object方法，简化Object方法实现，如hashCode()和toString()。&lt;/p&gt;
&lt;h4&gt;2.简单使用&lt;/h4&gt;
&lt;p&gt;4个典型方法：&lt;/p&gt;
&lt;p&gt;equal、hashcode、toString、compare/compareTo&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * @Description 简化对象的一些方法
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; denny
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * @date 2018/7/24 下午4:08
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ObjectsTest {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 1.equals &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         System.out.println(Objects.equal(&quot;a&quot;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         System.out.println(Objects.equal(&quot;a&quot;,&quot;b&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         System.out.println(Objects.equal(&quot;a&quot;,&quot;a&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         System.out.println(Objects.equal(&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 2.hashCode &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         Order order1 = Order.builder().id(1).state(2&lt;span&gt;).build();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         Order order2 = Order.builder().id(2).state(1&lt;span&gt;).build();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        System.out.println(Objects.hashCode(order1,order2));
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 2.toString &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         String str = MoreObjects.toStringHelper(order1).add(&quot;x&quot;,1&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        System.out.println(str);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt; 2.compare/compareTo &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里比较订单大小，比较顺序：id,状态,即先比较ID再比较状态，有一个不相等就立即返回结果&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result =&lt;span&gt; ComparisonChain.start()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            .compare(order1.getId(),order2.getId())
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            .compare(order1.getState(),order2.getState())
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            .result();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        System.out.println(result);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; 114363
&lt;span&gt;6&lt;/span&gt; Order{x=1&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; -1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;2.4 Ordering&amp;lt;T&amp;gt;（JDK8建议直接使用Stream,Comparator）&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt; 1.作用&lt;/h4&gt;
&lt;p&gt;排序,”流式风格比较器”。支持多重排序，并使用到集合中。这个类不在base包下，在collect包下.可能考虑到集合中元素排序吧...&lt;/p&gt;
&lt;h4&gt;2.简单使用&lt;/h4&gt;
&lt;p&gt;reverse() :获取语义相反的排序器&lt;br/&gt;nullsFirst():null值排到最前面。&lt;br/&gt;nullsLast():null值排到最后面。&lt;br/&gt;compound(Comparator):合成另一个比较器，以处理当前排序器中的相等情况。&lt;br/&gt;lexicographical():基于处理类型T的排序器，返回该类型的可迭代对象Iterable&amp;lt;T&amp;gt;的排序器。&lt;br/&gt;onResultOf(Function):对集合中元素调用Function，再按返回值用当前排序器排序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; guava.base;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.base.Function;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.collect.Lists;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.collect.Ordering;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; guava.base.domain.Order;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * @Description 排序
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; denny
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * @date 2018/7/24 下午6:01
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderingTest {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;自然排序: 数字升序，时间升序&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 简单数据排序&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         Ordering&amp;lt;Integer&amp;gt; integerOrdering =&lt;span&gt; Ordering.natural().nullsFirst();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         List&amp;lt;Integer&amp;gt; list = Lists.newArrayList(1,3,&lt;span&gt;null&lt;/span&gt;,5,4,2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自然排序，空前置&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         System.out.println(&quot;1.自然排序：&quot;+&lt;span&gt;integerOrdering.sortedCopy(list));
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         System.out.println(&quot;2.自然反转排序：&quot;+&lt;span&gt;integerOrdering.reverse().sortedCopy(list));
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据apply返回值排序&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         Ordering&amp;lt;Order&amp;gt; orderOrdering = Ordering.natural().onResultOf(&lt;span&gt;new&lt;/span&gt; Function&amp;lt;Order, Integer&amp;gt;&lt;span&gt;() {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer apply(Order order){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 订单ID自然排序 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; order.getId();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         List&amp;lt;Order&amp;gt; orders = Lists.newArrayList(&lt;span&gt;new&lt;/span&gt; Order(1,0),&lt;span&gt;new&lt;/span&gt; Order(3,1),&lt;span&gt;new&lt;/span&gt; Order(2,2&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         System.out.println(&quot;3.根据订单ID自然排序：&quot;+&lt;span&gt;orderOrdering.sortedCopy(orders));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         System.out.println(&quot;4.根据订单ID自然排序,求最大值：&quot;+&lt;span&gt;orderOrdering.max(orders));
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         System.out.println(&quot;5.根据订单ID自然排序,求最小值：&quot;+&lt;span&gt;orderOrdering.min(orders));
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         System.out.println(&quot;6.求ID最小的k个元素：&quot;+orderOrdering.leastOf(orders,2&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         System.out.println(&quot;7.求ID最大的k个元素：&quot;+orderOrdering.greatestOf(orders,2&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
1.自然排序：[&lt;span&gt;null&lt;/span&gt;, 1, 2, 3, 4, 5&lt;span&gt;]
&lt;/span&gt;2.自然反转排序：[5, 4, 3, 2, 1, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;3.根据订单ID自然排序：[Order(id=1, state=0), Order(id=2, state=2), Order(id=3, state=1&lt;span&gt;)]
&lt;/span&gt;4.根据订单ID自然排序,求最大值：Order(id=3, state=1&lt;span&gt;)
&lt;/span&gt;5.根据订单ID自然排序,求最小值：Order(id=1, state=0&lt;span&gt;)
&lt;/span&gt;6.求ID最小的k个元素：[Order(id=1, state=0), Order(id=2, state=2&lt;span&gt;)]
&lt;/span&gt;7.求ID最大的k个元素：[Order(id=3, state=1), Order(id=2, state=2)]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.5 Throwables（不推荐使用）&lt;/h3&gt;
&lt;h4&gt; 1.作用&lt;/h4&gt;
&lt;p&gt;异常支持，简化了异常和错误的传播与检查。&lt;/p&gt;
&lt;h4&gt;2.简单使用&lt;/h4&gt;
&lt;p&gt;目前JDK7已经是比较老的版本了，JDK7自带多重捕获，7以及以上都不推荐使用Throwables，这里就不写使用了。&lt;/p&gt;
&lt;h2&gt; 三、总结&lt;/h2&gt;
&lt;p&gt;guava虽然很经典，但是因为JDK一直在迭代完善，当JDK中有的东西时，建议就不要用guava了。&lt;span&gt;&lt;strong&gt;&lt;span&gt;基础工具中，Optional和Preconditions还是可以用用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;，其它的也就那样了，各位自己看着用吧，当然作为基础工具，想要看guava源码还是有必要了解下知道是干嘛的。&lt;/p&gt;

&lt;p&gt;==参考==&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/guava/wiki&quot; target=&quot;_blank&quot;&gt;Guava Github User Guide &lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 25 Jul 2018 04:50:00 +0000</pubDate>
<dc:creator>只会一点java</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dennyzhangdd/p/9356416.html</dc:identifier>
</item>
<item>
<title>spring cloud分布式健康检查 - IT高飞</title>
<link>http://www.cnblogs.com/itgaofei/p/9365020.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itgaofei/p/9365020.html</guid>
<description>&lt;p&gt;健康检查就是检查此服务是否是存活状态，但远不止此，下面会说到&lt;/p&gt;
&lt;p&gt;首先要在父类gradle.build加入必要的依赖：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;健康检查&lt;/span&gt;
        compile 'org.springframework.boot:spring-boot-starter-actuator'    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动该服务在控制台可以看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428154/201807/1428154-20180725104937555-231397557.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时候看到了/health，我们在浏览器运行一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428154/201807/1428154-20180725105126807-1531789764.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到status：UP代表服务是健康存活的，反之当status：down时，就代表它不是健康的&lt;/p&gt;
&lt;p&gt;其实有很多原因会导致它不健康，若不健康的话它就会告诉运维，运维也就可以做出相应的调整并回应&lt;/p&gt;
&lt;p&gt;除了/health还有：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428154/201807/1428154-20180725110617567-1390296927.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先来试一下/metrics：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428154/201807/1428154-20180725110741094-120934489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时候看到401，就代表没有权限访问呗&lt;/p&gt;
&lt;p&gt;为什么没有权限访问呢？&lt;/p&gt;
&lt;p&gt;其实运行它会看到很多的隐私问题，比如运行情况，以及运行内存，甚至有多少bean都可以看到，若没有相应的权限那么随意的打开不是相当的危险？&lt;/p&gt;
&lt;p&gt;这时候spring boot有一种策略，必须要在该服务加一个依赖组件并配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　//&lt;/span&gt;&lt;span&gt;安全检查组件&lt;/span&gt;
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;security:
  basic:
    enabled: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; #开启安全检查
  user:
    name: user #进行身份验证
    password: &lt;/span&gt;123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时候再访问：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428154/201807/1428154-20180725112534688-240360994.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入刚刚配置的用户名和密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428154/201807/1428154-20180725112551235-1921784601.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时候就可以访问了，除了/metrics还有/beans，试一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428154/201807/1428154-20180725112802904-953085793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 这时候就可以看到有多少bean了&lt;/p&gt;
&lt;p&gt;在使用中，若不用健康检查的话只需要把配置中开启健康检查true改为false就可以了&lt;/p&gt;
</description>
<pubDate>Wed, 25 Jul 2018 03:32:00 +0000</pubDate>
<dc:creator>IT高飞</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itgaofei/p/9365020.html</dc:identifier>
</item>
<item>
<title>PXC快速入门 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/9364877.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/9364877.html</guid>
<description>&lt;p&gt;实验环境：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Node1&lt;/td&gt;
&lt;td&gt;pxc1&lt;/td&gt;
&lt;td&gt;192.168.70.61&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Node2&lt;/td&gt;
&lt;td&gt;pxc2&lt;/td&gt;
&lt;td&gt;192.168.70.62&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Node3&lt;/td&gt;
&lt;td&gt;pxc3&lt;/td&gt;
&lt;td&gt;192.168.70.63&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;安装percona-xtradb-cluster&quot;&gt;1.1 安装Percona-XtraDb-Cluster&lt;/h2&gt;
&lt;p&gt;yum源：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[percona]
name=percona_repo
baseurl = https://mirrors.tuna.tsinghua.edu.cn/percona/release/$releasever/RPMS/$basearch
enabled = 1
gpgcheck = 0&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;yum -y install Percona-XtraDB-Cluster-57&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;提供配置文件&quot;&gt;1.2 提供配置文件&lt;/h2&gt;
&lt;p&gt;第一个节点配置文件/etc/my.cnf&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;wsrep_provider=/usr/lib64/galera3/libgalera_smm.so
wsrep_cluster_name=pxc-cluster
wsrep_cluster_address=gcomm://192.168.70.61,192.168.70.62,192.168.70.63
wsrep_node_name=pxc1               # 各节点不同
wsrep_node_address=192.168.70.61   # 各节点不同
wsrep_sst_method=xtrabackup-v2
wsrep_sst_auth=sstuser:passw0rd
pxc_strict_mode=ENFORCING
binlog_format=ROW
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二个节点配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;wsrep_provider=/usr/lib64/galera3/libgalera_smm.so
wsrep_cluster_name=pxc-cluster
wsrep_cluster_address=gcomm://192.168.70.61,192.168.70.62,192.168.70.63
wsrep_node_name=pxc2               # 各节点不同
wsrep_node_address=192.168.70.62   # 各节点不同
wsrep_sst_method=xtrabackup-v2
wsrep_sst_auth=sstuser:passw0rd
pxc_strict_mode=ENFORCING
binlog_format=ROW
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第三个节点配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;wsrep_provider=/usr/lib64/galera3/libgalera_smm.so
wsrep_cluster_name=pxc-cluster
wsrep_cluster_address=gcomm://192.168.70.61,192.168.70.62,192.168.70.63
wsrep_node_name=pxc3               # 各节点不同
wsrep_node_address=192.168.70.63   # 各节点不同
wsrep_sst_method=xtrabackup-v2
wsrep_sst_auth=sstuser:passw0rd
pxc_strict_mode=ENFORCING
binlog_format=ROW
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置文件各项配置意义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;wsrep_provider&lt;/strong&gt;：指定Galera库的路径&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wsrep_cluster_name&lt;/strong&gt;：Galera集群的名称&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wsrep_cluster_address&lt;/strong&gt;：Galera集群中各节点地址。地址使用组通信协议gcomm://(group communication)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wsrep_node_name&lt;/strong&gt;：本节点在Galera集群中的名称&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wsrep_node_address&lt;/strong&gt;：本节点在Galera集群中的通信地址&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wsrep_sst_method&lt;/strong&gt;：state_snapshot_transfer(SST)使用的传输方法，可用方法有mysqldump、rsync和xtrabackup，前两者在传输时都需要对Donor加全局只读锁(&lt;code&gt;FLUSH TABLES WITH READ LOCK&lt;/code&gt;)，xtrabackup则不需要(它使用percona自己提供的backup lock)。强烈建议采用xtrabackup&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wsrep_sst_auth&lt;/strong&gt;：在SST传输时需要用到的认证凭据，格式为：&quot;用户：密码&quot;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pxc_strict_mode&lt;/strong&gt;：是否限制PXC启用正在试用阶段的功能，ENFORCING是默认值，表示不启用&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;binlog_format&lt;/strong&gt;：二进制日志的格式。Galera只支持row格式的二进制日志&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_storage_engine&lt;/strong&gt;：指定默认存储引擎。Galera的复制功能只支持InnoDB&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;innodb_autoinc_lock_mode&lt;/strong&gt;：只能设置为2，设置为0或1时会无法正确处理死锁问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引导galera中的第一个节点&quot;&gt;1.3 引导Galera中的第一个节点&lt;/h2&gt;
&lt;p&gt;引导启动Galera集群。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/etc/init.d/mysql bootstrap-pxc
systemctl start mysql@bootstrap.service&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;引导后，查看状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysql@pxc1&amp;gt; show status like 'wsrep%';
+----------------------------+--------------------------------------+
| Variable_name              | Value                                |
+----------------------------+--------------------------------------+
| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |
| ...                        | ...                                  |
| wsrep_local_state          | 4                                    |
| wsrep_local_state_comment  | Synced                               |
| ...                        | ...                                  |
| wsrep_cluster_size         | 1                                    |
| wsrep_cluster_status       | Primary                              |
| wsrep_connected            | ON                                   |
| ...                        | ...                                  |
| wsrep_ready                | ON                                   |
+----------------------------+--------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述状态表示，该Galera集群中只有一个节点，状态为Synced(4)，表示数据已同步完成(因为是第一个引导节点，无数据需要同步)。角色为Primary，且已经完全连接并准备好，connected和ready状态决定了该节点是否是Galera中的正式成员，正式成员才能向外提供MySQL服务。&lt;/p&gt;
&lt;p&gt;正确引导了第一个节点后，需要在第一个节点(Galera的初始化引导节点)上创建SST的认证用户，注意这个用户名和密码需要和配置文件中的对应。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;create user 'sstuser'@'localhost' identified by 'passw0rd';
grant reload,lock tables,process,replication client on *.* to 'sstuser'@'localhost';
flush privileges;&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;向galera中加入第二第三个节点&quot;&gt;1.4 向Galera中加入第二、第三个节点&lt;/h2&gt;
&lt;p&gt;加入节点非常简单，只需正常启动MySQL服务即可，在启动时会读取配置文件，并根据配置自动加入到对应的Galera集群中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#### 在第二个节点上执行
/etc/init.d/mysql start

#### 在第三个节点上执行
/etc/init.d/mysql start&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看各节点状态：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysql@pxc3&amp;gt; show status like 'wsrep%';
+----------------------------+--------------------------------------+
| Variable_name              | Value                                |
+----------------------------+--------------------------------------+
| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |
| ...                        | ...                                  |
| wsrep_local_state          | 4                                    |
| wsrep_local_state_comment  | Synced                               |
| ...                        | ...                                  |
| wsrep_cluster_size         | 3                                    |
| wsrep_cluster_status       | Primary                              |
| wsrep_connected            | ON                                   |
| ...                        | ...                                  |
| wsrep_ready                | ON                                   |
+----------------------------+--------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见这两个节点已经完成了数据同步，且已经是Galera集群中的正式成员，可以向外提供MySQL服务。&lt;/p&gt;
&lt;p&gt;注意，一个节点加入到Galera集群有两种情况：新节点加入集群、暂时离组的成员再次加入集群。&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;新节点加入Galera集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新节点加入集群时，需要从当前集群中选择一个Donor节点来同步数据，也就是所谓的state_snapshot_tranfer(SST)过程。SST同步数据的方式由选项&lt;strong&gt;wsrep_sst_method&lt;/strong&gt;决定，一般选择的是xtrabackup。&lt;/p&gt;
&lt;p&gt;必须注意，新节点加入Galera时，会删除新节点上所有已有数据，再通过xtrabackup(假设使用的是该方式)从Donor处完整备份所有数据进行恢复。所以，如果数据量很大，新节点加入过程会很慢。而且，在一个新节点成为Synced状态之前，不要同时加入其它新节点，否则很容易将集群压垮。&lt;/p&gt;
&lt;p&gt;如果是这种情况，可以考虑使用&lt;strong&gt;wsrep_sst_method=rsync&lt;/strong&gt;来做增量同步，既然是增量同步，最好保证新节点上已经有一部分数据基础，否则和全量同步没什么区别，且这样会对Donor节点加上全局read only锁。&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;旧节点加入Galera集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果旧节点加入Galera集群，说明这个节点在之前已经在Galera集群中呆过，有一部分数据基础，缺少的只是它离开集群时的数据。这时加入集群时，会采用IST(incremental snapshot transfer)传输机制，即使用增量传输。&lt;/p&gt;
&lt;p&gt;但注意，这部分增量传输的数据源是Donor上缓存在GCache文件中的，这个文件有大小限制，如果缺失的数据范围超过已缓存的内容，则自动转为SST传输。如果旧节点上的数据和Donor上的数据不匹配(例如这个节点离组后人为修改了一点数据)，则自动转为SST传输。&lt;/p&gt;
&lt;p&gt;关于GCache以及Galera是如何判断数据状态的，本文不展开描述，可参见&lt;a href=&quot;https://severalnines.com/blog/understanding-gcache-galera&quot;&gt;Understanding GCache in Galera&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;验证galera集群是否正确工作&quot;&gt;1.5 验证Galera集群是否正确工作&lt;/h2&gt;
&lt;p&gt;可在不同节点上写入数据、不同节点上查询数据，看看个节点上数据能否同步。&lt;/p&gt;
</description>
<pubDate>Wed, 25 Jul 2018 03:13:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/9364877.html</dc:identifier>
</item>
</channel>
</rss>