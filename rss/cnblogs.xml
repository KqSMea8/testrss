<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>简易RPC框架-上下文 - min.jiang</title>
<link>http://www.cnblogs.com/ASPNET2008/p/7749242.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ASPNET2008/p/7749242.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17071/201710/17071-20171029015643664-2134145916.jpg&quot; alt=&quot;&quot; width=&quot;372&quot; height=&quot;298&quot;/&gt;&lt;/p&gt;
&lt;p&gt;记的学英语的时候，总是不记的某个词是什么意思，然后就看不下去了，只能问周围的同学或者老师或者去查词典，他们的建议是通过上下文去推测这个词大概的意思,反正我那会上学时没理解，所以英文一直比较差。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;现在英语水平也没提高多少，尽管有点领会。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后来慢慢理解了一些，因为有些词有很多种意思，放在某个场景下可能是一个意思，放在另外一个场景下又是其它的意思，这里不举例子了，上文有一定的相似度。&lt;/p&gt;
&lt;h2&gt;RPC客户端上下文&lt;/h2&gt;
&lt;p&gt;客户端由于是一个独立的环境，所以可以认为它处于一个属于自己的上下文中，与其它的端隔离。在上下文中可以指定一些公共的参数来提供给接口使用，比如：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;RPC版本号&lt;br/&gt;客户端请求ID&lt;br/&gt;各类自定义的公共参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;RPC服务端上下文&lt;/h2&gt;
&lt;p&gt;服务端同理，也处于一个属于自己的上下文中，与其它端隔离。&lt;/p&gt;
&lt;h2&gt;RPC上下文的作用&lt;/h2&gt;
&lt;p&gt;基本线程级别的访问，让客户端或者服务端能够像访问本地变量一样访问RPC框架级别的变量。比如我们想将客户端的一个请求ID传递给服务端，这个请求ID作用于所有接口，比如RPC的调用链追踪，有两种方式：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;接口中增加请求ID参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个方案显然是不能接受的，因为需要改的接口过多。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;接口不改的情况下，在RPC框架中提供一个上下文，其中包含请求ID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个方案显然成本最小，比如这种样调用：RpcContext.getRequestId();&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17071/201710/17071-20171029015709445-37809149.png&quot; alt=&quot;&quot; width=&quot;557&quot; height=&quot;181&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上图中的Context是指RPC框架级变量的一个本地副本，为了简化调用复杂度。&lt;/li&gt;
&lt;li&gt;上图中的Invocation是RPC框架级的变量，它与上面提到的Context相互配合，做到调用端与框架本身的解耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;定义上下文对象&lt;/h2&gt;
&lt;p&gt;在RpcContext对象中增加一个map类型的参数对象，可以存放任意扩展的参数。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;RpcContext&lt;/span&gt; {

    &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; contextParameters;

    &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;getContextParameters&lt;/span&gt;() {
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; contextParameters;
    }

    &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;setContextParameters&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;contextParameters&lt;/span&gt;) {
        &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;contextParameters &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; contextParameters;
    }

    &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;ThreadLocal&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt;&amp;gt;&lt;/span&gt; rpcContextThreadLocal&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;ThreadLocal&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt;&amp;gt;&lt;/span&gt;(){
        &lt;span class=&quot;pl-k&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;initialValue&lt;/span&gt;() {
            &lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt; context&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt;();
            context&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setContextParameters(&lt;span class=&quot;pl-smi&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;newHashMap());
            &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; context;
        }
    };

    &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;getContext&lt;/span&gt;() {
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; rpcContextThreadLocal&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;get();
    }

    &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;removeContext&lt;/span&gt;() {
        rpcContextThreadLocal&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;remove();
    }

    &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;RpcContext&lt;/span&gt;() {
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;RPC请求对象中增加上下文参数&lt;/h2&gt;
&lt;p&gt;RpcRequest增加如下字段,用于服务端调用。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; contextParameters;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;RpcInvocation接口中增加上下文参数&lt;/h2&gt;
&lt;p&gt;在后续新增加的过滤器使用。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; contextParameters;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;客户端代理&lt;/h2&gt;
&lt;p&gt;RpcProxy在组装RpcRequest对象时，从RpcContext中获取最新的参数传递给RpcReuest，从而传递给服务端。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; invoke(&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; proxy, &lt;span class=&quot;pl-smi&quot;&gt;Method&lt;/span&gt; method, &lt;span class=&quot;pl-k&quot;&gt;Object&lt;/span&gt;[] args) throws &lt;span class=&quot;pl-smi&quot;&gt;Throwable&lt;/span&gt; {

        &lt;span class=&quot;pl-smi&quot;&gt;RpcRequest&lt;/span&gt; request &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;RpcRequest&lt;/span&gt;();
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt;...&lt;/span&gt;

        request&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setContextParameters(&lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContext()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContextParameters());

        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt;...&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;客户端上下文过滤器&lt;/h2&gt;
&lt;p&gt;主要作用就是从本线线程变量中获取参数传递给RpcInvocation。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注解上的order属性文章后面详细介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;@ActiveFilter&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;pl-smi&quot;&gt;ConstantConfig&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;CONSUMER&lt;/span&gt;},&lt;span class=&quot;pl-c1&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;ClientContextFilter&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;RpcFilter&lt;/span&gt; {

    &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Logger&lt;/span&gt; logger &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getLogger(&lt;span class=&quot;pl-smi&quot;&gt;ClientContextFilter&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;class);

    &lt;span class=&quot;pl-k&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;invoke&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;RpcInvoker&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;invoker&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;RpcInvocation&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;invocation&lt;/span&gt;) {
        &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; contextParameters&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;invocation&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContextParameters();
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt;contextParameters){
            contextParameters&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;newHashMap();
        }
        &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; contextParametersFromRpcContext&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContext()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContextParameters();
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;!=&lt;/span&gt;contextParametersFromRpcContext) {
            contextParameters&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;putAll(contextParametersFromRpcContext);
        }
        &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; rpcResponse&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;invoker&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;invoke(invocation);
        logger&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;info(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;ClientContextFilter.invoke end&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; rpcResponse;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;服务端上下文过滤器&lt;/h2&gt;
&lt;p&gt;服务端上下文过滤器与客户端的作用相反，是从RpcInvocation中获取参数传递给本地线程变量RpcContext，后面在执行服务端方法时就可以方便的通过RpcContext获取指定变量。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;@ActiveFilter&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;pl-smi&quot;&gt;ConstantConfig&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;PROVIDER&lt;/span&gt;},&lt;span class=&quot;pl-c1&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;ServerContextFilter&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;RpcFilter&lt;/span&gt; {

    &lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Logger&lt;/span&gt; logger &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getLogger(&lt;span class=&quot;pl-smi&quot;&gt;ServerContextFilter&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;class);

    &lt;span class=&quot;pl-k&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;invoke&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;RpcInvoker&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;invoker&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;RpcInvocation&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;invocation&lt;/span&gt;) {
        &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; contextParameters&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;invocation&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContextParameters();
        &lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContext()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;setContextParameters(contextParameters);
        &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; rpcResponse&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;invoker&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;invoke(invocation);
        logger&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;info(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;ServerContextFilter.invoke end&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; rpcResponse;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;过滤器排序&lt;/h2&gt;
&lt;p&gt;因为我们的RpcContext是个本地线程变量，而且Rpc服务端是多线程处理业务，所以需要在请求结束后及时的清理掉相关本地线程变量信息。这就需要清理上下文的过滤动作在最后执行，否则有会出现服务端方法还没有执行就被清空了参数。创建一个工具类，专门用来处理获取客户端以及服务端过滤器。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;过滤器注解增加排序属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;增加order字段，升级排列。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;@Target&lt;/span&gt;({&lt;span class=&quot;pl-smi&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;TYPE&lt;/span&gt;})
&lt;span class=&quot;pl-k&quot;&gt;@Retention&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;RUNTIME&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;ActiveFilter&lt;/span&gt; {
    &lt;span class=&quot;pl-k&quot;&gt;String&lt;/span&gt;[] &lt;span class=&quot;pl-en&quot;&gt;group&lt;/span&gt;() default {};
    &lt;span class=&quot;pl-k&quot;&gt;String&lt;/span&gt;[] &lt;span class=&quot;pl-en&quot;&gt;value&lt;/span&gt;() default {};
    &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;order&lt;/span&gt;() default 999999999;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;过滤器工具类&lt;/h2&gt;
&lt;p&gt;创建ActiveFilterUtil，包含下面两个函数。&lt;/p&gt;
&lt;h3&gt;过滤器排序函数&lt;/h3&gt;
&lt;p&gt;获取特定注解的类，然后根据注解上的排序属性升序排序。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; getActiveFilter(){
    &lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; rpcFilterList&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Lists&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;newArrayList();
    &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; rpcFilterMapObject &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ApplicationContextUtils&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getApplicationContext()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getBeansWithAnnotation(&lt;span class=&quot;pl-smi&quot;&gt;ActiveFilter&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;class);
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;!=&lt;/span&gt;rpcFilterMapObject) {
        rpcFilterList &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Lists&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;newArrayList(rpcFilterMapObject&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;values());
        &lt;span class=&quot;pl-smi&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;sort(rpcFilterList, &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Comparator&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt;() {
            &lt;span class=&quot;pl-k&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;compare&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;o1&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;o2&lt;/span&gt;) {
                &lt;span class=&quot;pl-smi&quot;&gt;ActiveFilter&lt;/span&gt; activeFilterO1 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; o1&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getClass()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getAnnotation(&lt;span class=&quot;pl-smi&quot;&gt;ActiveFilter&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;class);
                &lt;span class=&quot;pl-smi&quot;&gt;ActiveFilter&lt;/span&gt; activeFilterO2 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; o2&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getClass()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getAnnotation(&lt;span class=&quot;pl-smi&quot;&gt;ActiveFilter&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;class);
                &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; activeFilterO1&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;order() &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; activeFilterO2&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;order() &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;
            }
        });
    }
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; rpcFilterList;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;获取RPC过滤器列表&lt;/h3&gt;
&lt;p&gt;提供给客户端以及服务端的一个协助方法，便于客户端以及服务构建过滤器职责链。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;RpcFilter&lt;/span&gt;&amp;gt;&lt;/span&gt; getFilterMap(&lt;span class=&quot;pl-k&quot;&gt;boolean&lt;/span&gt; isServer){
    &lt;span class=&quot;pl-k&quot;&gt;List&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; rpcFilterList&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;getActiveFilter();
    &lt;span class=&quot;pl-k&quot;&gt;Map&amp;lt;&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;RpcFilter&lt;/span&gt;&amp;gt;&lt;/span&gt; filterMap&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;HashMap&amp;lt;&amp;gt;&lt;/span&gt;();
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;Object&lt;/span&gt; filterBean &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; rpcFilterList) {
        &lt;span class=&quot;pl-k&quot;&gt;Class&amp;lt;?&amp;gt;&lt;/span&gt;[] interfaces &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; filterBean&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getClass()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getInterfaces();
        &lt;span class=&quot;pl-smi&quot;&gt;ActiveFilter&lt;/span&gt; activeFilter&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;filterBean&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getClass()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getAnnotation(&lt;span class=&quot;pl-smi&quot;&gt;ActiveFilter&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;class);
        &lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt; includeFilterGroupName&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;isServer&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;ConstantConfig&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;CONSUMER&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;ConstantConfig&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;PROVIDER&lt;/span&gt;;
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;!=&lt;/span&gt;activeFilter&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;group()&lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;stream(activeFilter&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;group())&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;filter(p&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;p&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;contains(includeFilterGroupName))&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;count()&lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;){
            &lt;span class=&quot;pl-k&quot;&gt;continue&lt;/span&gt;;
        }
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;Class&amp;lt;?&amp;gt;&lt;/span&gt; clazz&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt;interfaces) {
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(clazz&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;isAssignableFrom(&lt;span class=&quot;pl-smi&quot;&gt;RpcFilter&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;class)){
                filterMap&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;put(filterBean&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getClass()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getName(),(&lt;span class=&quot;pl-smi&quot;&gt;RpcFilter&lt;/span&gt;) filterBean);
            }
        }
    }
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; filterMap;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;客户端以及服务端初始化&lt;/h2&gt;
&lt;p&gt;获取过滤器map的逻辑改为调用上面ActiveFilterUtil.getFilterMap方法。&lt;/p&gt;


&lt;h2&gt;客户端设置参数&lt;/h2&gt;
&lt;p&gt;设置一个RPC版本号的参数。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;/{productId}&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    &lt;span class=&quot;pl-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Product&lt;/span&gt; getById(&lt;span class=&quot;pl-k&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;long&lt;/span&gt; productId) throws &lt;span class=&quot;pl-smi&quot;&gt;UnknownHostException&lt;/span&gt; {
        &lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContext()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;addContextParameter(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;rpc-version&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;1.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt;...&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;服务端获取参数&lt;/h2&gt;
&lt;p&gt;简单的在服务端打印出RPC版本号。&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-java&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
 logger&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;info(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;get context parameter from server,rpc-version={}&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;pl-smi&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;valueOf(&lt;span class=&quot;pl-smi&quot;&gt;RpcContext&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContext()&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;getContextParameter(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;rpc-version&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出日志如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17071/201710/17071-20171029015911258-1149087683.png&quot; alt=&quot;&quot; width=&quot;1029&quot; height=&quot;37&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;本文源码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jiangmin168168/jim-framework&quot;&gt;https://github.com/jiangmin168168/jim-framework&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;文中代码是依赖上述项目的，如果有不明白的可下载源码&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 28 Oct 2017 18:01:00 +0000</pubDate>
<dc:creator>min.jiang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ASPNET2008/p/7749242.html</dc:identifier>
</item>
<item>
<title>java版hdfs管理工具--HdfsBrowser - aj117</title>
<link>http://www.cnblogs.com/tibit/p/7748672.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tibit/p/7748672.html</guid>
<description>&lt;p&gt;&amp;#13;
                                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;&amp;#13;
                                    &lt;h4 class=&quot;modal-title&quot;&gt;&amp;#13;
                                        请完成人机识别验证&amp;#13;
                                    &lt;/h4&gt;&amp;#13;
                                &lt;/p&gt;
                                &lt;div class=&quot;modal-body&quot; readability=&quot;33&quot;&gt;
                                    
                                    &lt;p&gt;&amp;#13;
                                        &lt;span id=&quot;geetestLoading&quot;&gt; 验证码组件加载中,请稍后...&lt;/span&gt;&amp;#13;
                                    &lt;/p&gt;
                                &lt;/div&gt;
                            </description>
<pubDate>Sat, 28 Oct 2017 16:13:00 +0000</pubDate>
<dc:creator>aj117</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://passport.cnblogs.com/user/signin?ReturnUrl=http%3A%2F%2Fwww.cnblogs.com%2Ftibit%2Fp%2F7748672.html&amp;AspxAutoDetectCookieSupport=1</dc:identifier>
</item>
<item>
<title>Robot Framework自动化测试框架初探 - lovesoo</title>
<link>http://www.cnblogs.com/lovesoo/p/7748487.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lovesoo/p/7748487.html</guid>
<description>&lt;p&gt;&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;Robot Framework是一款python语言编写，通用的功能&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;自动化&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;测试框架。它使用了比较易用的表格数据语法，基于关键字驱动测试，主要用来验收测试和验收测试驱动开发（ATDD）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;Robot Framework在python2.7环境下的安装及一个&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;http接口&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;自动化测试demo。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;1.1 Robot Framework&lt;/h2&gt;
&lt;p&gt;使用pip命令安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip install robotframework
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.2 wx&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;Python&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;wx&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;Python是python下非常优秀的GUI图形库，这里安装是由于&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;RIDE需要用到。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;特别强调下，&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;RIDE GUI目前必须要用wx&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;Python 2.8.12.1版本。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;原文如下：&lt;/p&gt;
&lt;p&gt;&quot;RIDE's GUI is implemented using wxPython toolkit. Only wxPython 2.8.12.1 with Unicode support is officially supported. Possible new releases in wxPython 2.8 series ought to work fine too. wxPython 3.0 support is one of the priorities for future development.&quot;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a title=&quot;lovesoo&quot; href=&quot;http://sourceforge.net/projects/wxpython/files/wxPython/2.8.12.1/&quot; target=&quot;_blank&quot;&gt;http://sourceforge.net/projects/wxpython/files/wxPython/2.8.12.1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;百度网盘地址：&lt;a title=&quot;lovesoo&quot; href=&quot;http://pan.baidu.com/s/1dFc8M1z&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1dFc8M1z&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1.3 Robot framework-ride&lt;/h2&gt;
&lt;p&gt;RIDE是一个图形界面的用于创建、组织、运行测试的软件。&lt;/p&gt;
&lt;p&gt;使用pip命令安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip install robotframework-ride
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.4 robotframework-&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;httplibrary&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;看名字就知道，这是Robot Framework的内部HTTP测试库。&lt;/p&gt;
&lt;p&gt;使用pip命令安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip install robotframework-httplibrary
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2.1 运行RIDE&lt;/h2&gt;
&lt;p&gt;windows环境下打开命令提示符cmd，输入ride.py进入RIDE界面，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028225602664-1182191617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.2 新建测试项目&lt;/h2&gt;
&lt;p&gt;FILE-&amp;gt;NEW Project新建测试项目，可以填写项目名称、选择路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028225616445-95079763.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.3 导入http库&lt;/h2&gt;
&lt;p&gt;我们需要导入httplibrary库，选择Library,填写http库名称HttpLibrary.HTTP&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028225631351-767113371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.4 新建测试用例&lt;/h2&gt;
&lt;p&gt;选择测试项目demo，右键New Test Case,填写测试用例名称&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028225644445-1963050728.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.5 编写测试用例&lt;/h2&gt;
&lt;p&gt;每个库提供的API都不一样，我们可以在RIDE中按F5快捷键打开Search Keywords进行查找，这样可以获取API关键词的名称，参数及文档介绍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028225657164-2053201584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也可相关库的官方网站查看相关API及demo，如httplibrary库：&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;lovesoo&quot; href=&quot;http://peritus.github.io/robotframework-httplibrary/HttpLibrary.html&quot; target=&quot;_blank&quot;&gt;http://peritus.github.io/robotframework-httplibrary/HttpLibrary.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考官方提供的demo，我们编写一个简单的HTTP Get请求页面返回302后的跳转测试用例：&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;lovesoo&quot; href=&quot;https://github.com/peritus/robotframework-httplibrary/#usage&quot; target=&quot;_blank&quot;&gt;https://github.com/peritus/robotframework-httplibrary/#usage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;测试流程解析如下：&lt;/p&gt;
&lt;p&gt;新建http请求后发送Get /302请求，判断返回结果；然后进行页面跳转并验证页面是否包含&quot;generating different HTTP codes&quot;字符。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028225735976-1521354523.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.6 执行测试用例&lt;/h2&gt;
&lt;p&gt;在RIDE页面,按F8快捷键执行测试，可以看到执行结果为pass，同时生成了三个结果文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028225747758-1287301273.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.7 查看测试结果&lt;/h2&gt;
&lt;p&gt;在RIDE页面，按CTRL+R快捷键查看测试报告Report,CTRl+L查看测试日志Log&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028225801945-107073396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201710/445074-20171028230049898-1127505836.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此我们使用Robot Framework框架，跑完了一个http接口的自动化测试demo，很简单浅显，后续根据实际使用情况再继续更新。&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;lovesoo&quot; href=&quot;http://robotframework.org&quot; target=&quot;_blank&quot;&gt;http://robotframework.org&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 28 Oct 2017 15:01:00 +0000</pubDate>
<dc:creator>lovesoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lovesoo/p/7748487.html</dc:identifier>
</item>
<item>
<title>R语言进行机器学习方法及实例（一） - ywliao</title>
<link>http://www.cnblogs.com/ywliao/p/7182090.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ywliao/p/7182090.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;版权声明：本文为博主原创文章，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  机器学习的研究领域是发明计算机算法，把数据转变为智能行为。机器学习和数据挖掘的区别可能是机器学习侧重于执行一个已知的任务，而数据发掘是在大数据中寻找有价值的东西。&lt;/p&gt;
&lt;h3 id=&quot;机器学习一般步骤&quot;&gt;机器学习一般步骤&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;收集数据，将数据转化为适合分析的电子数据&lt;/li&gt;
&lt;li&gt;探索和准备数据，机器学习中许多时间花费在数据探索中，它要学习更多的数据信息，识别它们的微小差异&lt;/li&gt;
&lt;li&gt;基于数据训练模型，根据你要学习什么的设想，选择你要使用的一种或多种算法&lt;/li&gt;
&lt;li&gt;评价模型的性能，需要依据一定的检验标准&lt;/li&gt;
&lt;li&gt;改进模型的性能，有时候需要利用更高级的方法，有时候需要更换模型&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;机器学习算法&quot;&gt;机器学习算法&lt;/h3&gt;
&lt;h4 id=&quot;有监督学习算法&quot;&gt;有监督学习算法&lt;/h4&gt;
&lt;p&gt;用于分类：k近邻，朴素贝叶斯，决策树，规则学习，神经网络，支持向量机&lt;br/&gt;用于数值预测：线性回归，回归树，模型树，神经网络，支持向量机&lt;/p&gt;
&lt;h4 id=&quot;无监督学习算法&quot;&gt;无监督学习算法&lt;/h4&gt;
&lt;p&gt;用于模式识别（数据之间联系的紧密性）：关联规则&lt;br/&gt;用于聚类：k均值聚类&lt;/p&gt;
&lt;h3 id=&quot;r语言机器学习算法实现&quot;&gt;R语言机器学习算法实现&lt;/h3&gt;
&lt;h4 id=&quot;knnk-nearest-neighborsk近邻&quot;&gt;kNN(k-Nearest Neighbors,k近邻)&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;原理：计算距离，找到测试数据的k个近邻，根据k个近邻的分类预测测试数据的分类&lt;/li&gt;
&lt;li&gt;应用k近邻需要将各个特征转换为一个标准的范围（归一化处理），可以应用min-max标准化（所有值落在0~1范围，新数据=（原数据-最小值）/（最大值-最小值）），也可以应用z-score 标准化（新数据=（原数据-均值）/标准差）。&lt;/li&gt;
&lt;li&gt;对于名义变量（表示类别），可以进行哑变量编码，其中1表示一个类别，0表示其它类别，对于n个类别的名义变量，可以用n-1个特征进行哑变量编码，比如（高，中，低），可以用高、中两类的哑变量表示这三类（高：1是，0 其它，中：1是，0，其它）&lt;/li&gt;
&lt;li&gt;优点：简单且有效，对数据分布没有要求，训练阶段很快；&lt;/li&gt;
&lt;li&gt;缺点：不产生模型，在发现特征之间的关系上的能力有限，分类阶段很慢，需要大量的内存，名义变量和缺失数据需要额外处理&lt;/li&gt;
&lt;li&gt;R代码：&lt;br/&gt;使用class包的knn函数，对于测试数据中的每一个实例，该函数使用欧氏距离标识k个近邻，然后选出k个近邻中大多数所属的那个类，如果票数相等，测试实例会被随机分配。&lt;br/&gt;   &lt;span&gt;dt_pred &amp;lt;- knn(train = dt_train,test = dt_test,class = dt_train_labels,k = 3)&lt;/span&gt; #train：一个包含数值型训练数据的数据库；test:一个包含数值型测试数据的数据框；class训练数据每一行分类的一个因子变量；k:标识最近邻数据的一个整数（通常取实例数的平方根)； 该函数返回一个向量，该向量含有测试数据框中每一行的预测分类&lt;br/&gt;  尽管kNN是并没有进行任何学习的简单算法，但是却能处理及其复杂的任务，比如识别肿瘤细胞的肿块。&lt;/li&gt;
&lt;li&gt;对R自带iris数据用kNN进行训练、预测并与实际结果对比&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;{r}&quot;&gt;
&lt;code&gt;llibrary(class)
library(gmodels)

#prepare data
set.seed(12345) #set random seed in order to repeat the result
iris_rand &amp;lt;- iris[order(runif(150)),]
iris_z &amp;lt;- as.data.frame(scale(iris_rand[,-5])) #z score normalize
train &amp;lt;- iris_z[1:105,]
test &amp;lt;- iris_z[106:150,]
train.label &amp;lt;- iris_rand[1:105,5]
test.label &amp;lt;- iris_rand[106:150,5]

#kNN
pred &amp;lt;- knn(train,test,train.label,k=10)

#comfusion matrix 
CrossTable(pred,test.label,prop.r = F,prop.t = F,prop.chisq = F)

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/1093203/201707/1093203-20170722094135855-1859989789.png&quot;/&gt;&lt;br/&gt;  这个结果显示kNN对测试数据全部预测正确&lt;/p&gt;
&lt;h4 id=&quot;朴素贝叶斯分类&quot;&gt;朴素贝叶斯分类&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;原理：基于朴素贝叶斯定理，根据先验概率计算预测实例的属于不同类别的总似然，再将某类别的似然除以不同类别似然的和得到预测实例在某类别的概率&lt;/li&gt;
&lt;li&gt;应用朴素贝叶斯算法每个特征必须是分类变量，对于数值型变量，可以将数值型特征离散化（分段），可以根据直方图查看数据明显的分隔点，如果没有明显的分隔点，可以使用三分位数，四分位数，五分位数，分段太少会把重要信息丢失&lt;/li&gt;
&lt;li&gt;拉普拉斯估计：对于某些从来没有出现的概率为0的，会影响概率的估计，拉普拉斯估计本质上是在概率表的每个计数加上一个较小的数，这样保证每一类中每个特征发生的概率是非零的。&lt;/li&gt;
&lt;li&gt;优点：简单、快速、有效；能处理噪声数据和缺失数据；需要用来训练的例子相对较少，但同样能处理好大量的例子；很容易获得一个预测的估计概率值；&lt;/li&gt;
&lt;li&gt;缺点：依赖于一个常用的错误假设，即一样的重要性和独立特征；应用在大量数值特征的数据集时并不理想；概率的估计值相对于预测的类而言更加不可靠。&lt;/li&gt;
&lt;li&gt;R代码：&lt;br/&gt;使用维也纳理工大学统计系开发的e1071添加包中的naiveBayes&lt;br/&gt;  &lt;span&gt;m &amp;lt;- naiveBayes(train,class,laplace=0)&lt;/span&gt; #train：数据框或者包含训练数据的矩阵，class：包含训练数据每一行的分类的一个因子向量，laplace：控制拉普拉斯估计的一个数值，可以进行调节看是否会提高模型性能；该函数返回一个朴素贝叶斯模型对象，该对象能够用于预测&lt;br/&gt;   &lt;span&gt;p &amp;lt;- predict(m,test,type=&quot;class&quot;)&lt;/span&gt; #m:由函数naiveBays( )训练的一个模型 ，test：数据框或者包含测试数据的矩阵，包含与用来建立分类器的训练数据的相同特征；type:值为&quot;class&quot;或者&quot;raw&quot;，标识预测向量最可能的类别值或者原始预测的概率值&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;{r}&quot;&gt;
&lt;code&gt;library(e1071)
library(gmodels)

set.seed(12345) #set random seed in order to repeat the result
iris_rand &amp;lt;- iris[order(runif(150)),]
train &amp;lt;- iris_rand[1:105,-5]
test &amp;lt;- iris_rand[106:150,-5]
train.label &amp;lt;- iris_rand[1:105,5]
test.label &amp;lt;- iris_rand[106:150,5]

#tranform numerical variable to classified variable
conver_counts &amp;lt;- function(x){
  q &amp;lt;- quantile(x)
  sect1 &amp;lt;- which(q[1] &amp;lt;= x &amp;amp; x&amp;lt;= q[2])
  sect2 &amp;lt;- which(q[2 ]&amp;lt; x &amp;amp; x &amp;lt;= q[3])
  sect3 &amp;lt;- which(q[3]&amp;lt; x &amp;amp; x &amp;lt;= q[4])
  sect4 &amp;lt;- which(q[4]&amp;lt; x &amp;amp; x &amp;lt;= q[5])
  x[sect1] &amp;lt;- 1
  x[sect2] &amp;lt;- 2
  x[sect3] &amp;lt;- 3
  x[sect4] &amp;lt;- 4
  return(x)
}
train &amp;lt;- apply(train,2,conver_counts)

#naiveBayes
m &amp;lt;- naiveBayes(train,train.label,laplace=1)
pred &amp;lt;- predict(m,test,type=&quot;class&quot;) 

#comfusion matrix 
CrossTable(pred,test.label,prop.r = F,prop.t = F,prop.chisq = F)

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/1093203/201707/1093203-20170723211339815-1758438081.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可见对第一类（setosa）分类上预测错误率很高，这可能反映了朴素贝叶斯算法的缺点，对于处理大量数值特征数据集时并不理想&lt;/p&gt;
&lt;h4 id=&quot;决策树&quot;&gt;决策树&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;原理：以树形结构建立模型。使用一种称为递归划分的探索法。这种方法通常称为分而治之，因为它利用特征的值将数据分解为具有相似类的较小的子集。从代表整个数据集的数据结点开始，该算法选择最能预测目标类的特征，然后，这些案例将被划分到这一特征的不同值的组中，这一决定形成了第一组树枝。该算法继续分而治之其他结点，每次选择最佳的候选特征，直到达到停止的标准。如果一个节点停止，它可能具有下列情况：节点上所有（几乎所有）的案例都属于同一类，没有剩余的特征来分辩案例之间的区别，决策树已经达到了预先定义的大小限制。&lt;/li&gt;
&lt;li&gt;C5.0算法，时最知名的决策树算法之一，单线程版本的源代码是公开的，R中有编写好的该程序。C5.0算法已经成为生成决策树的行业标准，因为它适用于大多数类型的问题，并且可以直接使用。与其它先进的机器学习模型（神经网络和支持向量机）相比，一般表现的几乎一样，并且更容易理解和部署&lt;/li&gt;
&lt;li&gt;选择最佳的分割，需要确立分割的标准，有信息增益，基尼系数，卡方统计量，和增益比，C5.0算法使用信息增益&lt;/li&gt;
&lt;li&gt;修剪决策树：如果决策树增长过大，将会使决策过于具体，模型将会过度拟合训练数据，解决这个问题的一种方法是一旦达到一定数量的决策，或者决策节点仅含有少量的案例，我们就停止树的增长，这叫做提前停止法，或者预剪枝决策树法。分为预剪枝（提前规定树的大小）和后剪枝（一旦树生长的过大，就根据节点处的错误率使用修剪准则将决策树减少到更合适的大小，通常比预剪枝更有效）。&lt;/li&gt;
&lt;li&gt;自适应增强算法：进行许多次尝试，在决策树中是建立许多决策树，然后这些决策树通过投票表决的方法为每个案例选择最佳的分类。&lt;/li&gt;
&lt;li&gt;优点：一个适用于大多数问题的通用分类器；高度自动化的学习过程，可以处理数值型数据、名义特征以及缺失数据；只使用最重要的特征；可以用于只有相对较少训练案例的数据或者有相当多训练案例的数据；没有数学背景也可解释一个模型的结果（对于比较小的树）；比其他复杂的模型更有效&lt;/li&gt;
&lt;li&gt;缺点：决策树模型在根据具有大量水平的特征进行划分时往往是有偏的；很容易过度拟合或者不能充分拟合模型；因为依赖于轴平行分割，所以在对一些关系建立模型时会有困难；训练数据中的小变化可能导致决策逻辑的较大的变化；大的决策树可能难以理解，给出的决策可能看起来违反直觉。&lt;/li&gt;
&lt;li&gt;R代码：&lt;br/&gt;使用R包C50的函数C5.0&lt;br/&gt;  &lt;span&gt;m &amp;lt;- C5.0(train,class,trials=1,costs=NULL)&lt;/span&gt; #train:一个包含训练数据的数据框；class：包含训练数据每一行的分类的一个因子；trials：为一个可选数值，用于控制自适应增强循环的次数（默认值为1），一般用10，因为研究标明，这能降低关于测试数据大约25%的概率；costs：为一个可选矩阵，用于给出与各种类型错误相对应的成本，和混淆矩阵稍微不同，行用来表示预测值，列用来表示实际值）；函数返回一个C5.0模型对象，该对象能够用于预测&lt;br/&gt;  &lt;span&gt;p &amp;lt;- predict(m,test,type=&quot;class&quot;)&lt;/span&gt; #m：有函数C5.0()训练的一个模型；test：一个包含训练数据的数据框，该数据框和用来创建分类其的数据框有同样的特征；type：取值为&quot;class&quot;或者&quot;prob&quot;,表识预测是最可能的类别值或者是原始的预测概率；该函数返回一个向量，根据参数type的取值，该向量含有预测的类别值或者原始预测的概率值&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;{r}&quot;&gt;
&lt;code&gt;library(C50)
library(gmodels)

set.seed(12345) #set random seed in order to repeat the result
iris_rand &amp;lt;- iris[order(runif(150)),]
train &amp;lt;- iris_rand[1:105,-5]
test &amp;lt;- iris_rand[106:150,-5]
train.label &amp;lt;- iris_rand[1:105,5]
test.label &amp;lt;- iris_rand[106:150,5]

#C50
m &amp;lt;- C5.0(train,train.label,trials = 10)
pred &amp;lt;- predict(m,test,type=&quot;class&quot;) 

#comfusion matrix 
CrossTable(pred,test.label,prop.r = F,prop.t = F,prop.chisq = F)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/1093203/201707/1093203-20170724202027434-1049646427.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;规则学习分类&quot;&gt;规则学习分类&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;原理：规则学习算法使用了一种称为独立而治之的探索法。这个过程包括确定训练数据中覆盖一个案例子集的规则，然后再从剩余的数据中分离出该分区。随着规则的增加，更多的数据子集会被分离，直到整个数据集都被覆盖，不再有案例残留，独立而治之和决策树的分而治之区别很小，决策树的每个决策节点会受到过去决策历史的影响，而规则学习不存在这样的沿袭。随着规则的增加，更多的数据子集会被分离，知道整个数据集都被覆盖，不再有案例被保留&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;单规则1r算法&quot;&gt;单规则（1R）算法&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;ZeroR，一个规则学习算法，从字面上看没有规则学习，对于一个未标记的案例，不用考虑它的特征值就会把它预测为最常见的类&lt;/li&gt;
&lt;li&gt;单规则算法（1R或OneR）在ZeroR的基础上添加一个规则。像K近邻一样虽然简单，但是往往表现的比你预期的要好。&lt;/li&gt;
&lt;li&gt;优点：可以生成一个单一的、易于理解的、人类可读的经验法则（大拇指法则）；表现往往出奇的好；可以作为更复杂算法的一个基准；&lt;/li&gt;
&lt;li&gt;缺点：只使用了一个单一的特征；可能会过于简单&lt;/li&gt;
&lt;li&gt;R代码：&lt;br/&gt;使用R包RWeka中OneR()函数来实现1R算法&lt;br/&gt;  &lt;span&gt;m &amp;lt;- OneR(class ~ predictors,data = mydata)&lt;/span&gt; #class：是mydata数据框中需要预测的那一列；predictors：为一个公式，用来指定mydata数据框中用来进行预测的特征；data：为包含一个class和predictors所要求的数据的数据框；该函数返回一个1R模型对象，该对象能够用于预测&lt;br/&gt;  &lt;span&gt;p &amp;lt;- predict(m,test)&lt;/span&gt; #m:由函数OneR()训练的一个模型；test：一个包含测试数据的数据框，该数据框和用来创建分类器的训练数据有着相同的特征；该函数返回一个含有预测的类别的向量&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;library(RWeka)
library(gmodels)

set.seed(12345) #set random seed in order to repeat the result
iris_rand &amp;lt;- iris[order(runif(150)),]
train &amp;lt;- iris_rand[1:105,]
test &amp;lt;- iris_rand[106:150,-5]
test.label &amp;lt;- iris_rand[106:150,5]

m &amp;lt;- OneR(Species ~ .,data=train)
pred &amp;lt;- predict(m,test)
CrossTable(pred,test.label,prop.r = F,prop.t = F,prop.chisq = F)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看生成的规则，按照Petal的宽度，分成三类，正确分类了105个里面的101个&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201707/1093203-20170725213636810-881359308.png&quot;/&gt;&lt;br/&gt;对于测试数据的混合矩阵如下&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201707/1093203-20170725214049482-162164864.png&quot;/&gt;&lt;br/&gt;可见只使用了一个规则也能，也做到了不错的效果&lt;/p&gt;
&lt;h5 id=&quot;ripper算法&quot;&gt;RIPPER算法&lt;/h5&gt;
&lt;p&gt;  对于复杂的任务，只考虑单个规则可能过于简单，考虑多个因素的更复杂的规则学习算法可能会有用，但也可能因此会变得更加难以理解。早期的规则学习算法速度慢，并且对于噪声数据往往不准确，后来出现增量减少误差修剪算法（IREP），使用了生成复杂规则的预剪枝和后剪枝方法的组合，并在案例从全部数据集分离之前进行修剪。虽然这提高了性能，但是还是决策树表现的更好。直到1995年出现了重复增量修剪算法（RIPPER），它对IREP算法进行改进后再生成规则，它的性能与决策树相当，甚至超过决策树。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;原理：可以笼统的理解为一个三步过程：生长，修剪，优化。生长过程利用独立而治之技术，对规则贪婪地添加条件，直到该规则能完全划分出一个数据子集或者没有属性用于分割。与决策树类似，信息增益准则可用于确定下一个分割的属性，当增加一个特指的规则而熵值不再减少时，该规则需要立即修剪。重复第一步和第二步，直到达到一个停止准则，然后，使用各种探索法对整套的规则进行优化。&lt;/li&gt;
&lt;li&gt;优点：生成易于理解的、人类可读的规则；对大数据集和噪声数据有效；通常比决策树产生的模型更简单&lt;/li&gt;
&lt;li&gt;缺点：可能会导致违反常理或这专家知识的规则；处理数值型数据可能不太理想；性能有可能不如复杂的模型&lt;/li&gt;
&lt;li&gt;R代码：&lt;br/&gt;使用R包RWeka中JRip()函数，是基于Java实现的RIPPER规则学习算法&lt;br/&gt;  &lt;span&gt;m&amp;lt;JRip(class ~ predictors,data = my data)&lt;/span&gt; #class：是mydata数据框中需要预测的那一列；predictors：为一个R公式，用来指定mydata数据框中用来进行预测的特征；data：为包含class和predictors所要求的数据的数据框；该函数返回一个RIPPER模型对象，该对象能够用于预测。&lt;br/&gt;  &lt;span&gt;p &amp;lt;- predict(m , test)&lt;/span&gt; #m：由函数JRip()训练的一个模型；test：一个包含测试数据的数据框，该数据框和用来创建分类器的训练数据有同样的特征；该函数返回一个含有预测的类别值的向量。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;library(RWeka)
library(gmodels)

set.seed(12345) #set random seed in order to repeat the result
iris_rand &amp;lt;- iris[order(runif(150)),]
train &amp;lt;- iris_rand[1:105,]
test &amp;lt;- iris_rand[106:150,-5]
test.label &amp;lt;- iris_rand[106:150,5]

m &amp;lt;- JRip(Species ~ .,data=train)
pred &amp;lt;- predict(m,test)
CrossTable(pred,test.label,prop.r = F,prop.t = F,prop.chisq = F)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201707/1093203-20170726193645234-1476996667.png&quot;/&gt;&lt;br/&gt;这次使用了三个规则，(Petal.Width &amp;gt;= 1.8为virginica ，Petal.Length &amp;gt;= 3为versicolor，其它为setosa&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201707/1093203-20170726193713015-2054937063.png&quot;/&gt;&lt;br/&gt;可见虽然增加了规则但是并没有提高模型的性能&lt;/p&gt;
&lt;h4 id=&quot;预测数值型数据&quot;&gt;预测数值型数据&lt;/h4&gt;
&lt;h5 id=&quot;线性回归&quot;&gt;线性回归&lt;/h5&gt;
&lt;p&gt;  回归主要关注一个唯一的因变量（需要预测的值）和一个或多个数值型自变量之间的关系。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果只有一个自变量，称为一元线性回归或者简单线性回归，否则，称为多元回归。&lt;/li&gt;
&lt;li&gt;原理：对线性参数的估计使用最小二乘估计&lt;/li&gt;
&lt;li&gt;广义线性回归：它们对线性模型进行了两方面的推广：通过设定一个连接函数，将响应变量的期望与线性变量相联系，以及对误差的分布给出一个误差函数。这些推广允许许多线性的方法能够被用于一般的问题。比如逻辑回归可以用来对二元分类的结果建模；而泊松回归可以对整型的计数数据进行建模。&lt;/li&gt;
&lt;li&gt;优点：迄今为止，它是数值型数据建模最常用的方法；可适用于几乎所有的数据；提供了特征（变量）之间关系的强度和大小的估计&lt;/li&gt;
&lt;li&gt;缺点：对数据作出了很强的假设；该模型的形式必须由使用者事先指定；不能很好地处理缺失数据；只能处理数值特征，所以分类数据需要额外的处理；需要一些统计学知识来理解模型。&lt;/li&gt;
&lt;li&gt;LASSO回归算法：LASSO回归的特点是在拟合广义线性模型的同时进行变量筛选（只选择对因变量有显著影响的自变量）和复杂度调整（通过参数控制模型复杂度，避免过度拟合）。它通过惩罚最大似然来拟合广义线性模型，正则化路径是通过正则化参数lambda的值的网格上计算lasso或者弹性网络惩戒，lambda越大对变量较多的线性模型的惩罚力度就越大，从而最终获得一个变量较少的模型。&lt;/li&gt;
&lt;li&gt;R代码：&lt;br/&gt;使用R包glmnet中glmnet()函数拟合LASSO回归模型&lt;br/&gt;  &lt;span&gt;glmnet(x, y, family=c(&quot;gaussian&quot;,&quot;binomial&quot;,&quot;poisson&quot;,&quot;multinomial&quot;,&quot;cox&quot;,&quot;mgaussian&quot;),&lt;br/&gt;    weights, offset=NULL, alpha = 1, nlambda = 100,&lt;br/&gt;     lambda.min.ratio = ifelse(nobs&amp;lt;nvars,0.01,0.0001), lambda=NULL,&lt;br/&gt;     standardize = TRUE, intercept=TRUE, thresh = 1e-07, dfmax = nvars + 1,&lt;br/&gt;     pmax = min(dfmax * 2+20, nvars), exclude, penalty.factor = rep(1, nvars),&lt;br/&gt;    lower.limits=-Inf, upper.limits=Inf, maxit=100000,&lt;br/&gt;    type.gaussian=ifelse(nvars&amp;lt;500,&quot;covariance&quot;,&quot;naive&quot;),&lt;br/&gt;     type.logistic=c(&quot;Newton&quot;,&quot;modified.Newton&quot;),&lt;br/&gt;     standardize.response=FALSE, type.multinomial=c(&quot;ungrouped&quot;,&quot;grouped&quot;))&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  x: 输入矩阵，每列表示变量（特征），每行表示一个观察向量，也支持输入稀疏矩阵（Matrix中的稀疏矩阵类）；&lt;br/&gt;  y: 反应变量，对于gaussian或者poisson分布族，是相应的量；对于binomial分布族，要求是两水平的因子，或者两列的矩阵，第一列是计数或者是比例，第二列是靶向分类；对于因子来说，最后的水平是按照字母表排序的分类；对于multinomial分布族，能有超过两水平的因子。无论binomial或者是multinomial，如果y是向量的话，会强制转化为因子。对于cox分布族，y要求是两列，分别是time和status，后者是二进制变两，1表示死亡，0表示截尾，survival包带的Surv()函数可以产生这样的矩阵。对于mgaussian分布族，y是量化的反应变量的矩阵；&lt;br/&gt;  family: 反应类型，参数family规定了回归模型的类型:family=&quot;gaussian&quot;适用于一维连续因变量(univariate)family=&quot;mgaussian&quot;，适用于多维连续因变量(multivariate)，family=&quot;poisson&quot;适用于非负次数因变量(count),family=&quot;binomial&quot;适用于二元离散因变量(binary)，family=&quot;multinomial&quot;适用于多元离散因变量(category)&lt;br/&gt;  weights: 权重，观察的权重。如果反应变量是比例矩阵的话，权重是总计数；默认每个观察权重都是1；&lt;br/&gt;  offset: 包含在线性预测中的和观察向量同样长度的向量，在poisson分布族中使用(比如log后的暴露时间)，或者是对于已经拟合的模型的重新定义(将旧模型的因变量作为向量放入offset中)。默认是NULL，如果提供了值，该值也必须提供给predict函数；&lt;br/&gt;  alpha: 弹性网络混合参数，0 &amp;lt;= a &amp;lt;=1，惩罚定义为(1-α)/2||β||_2^2+α||β||_1.其中alpha等于1是lasso惩罚，alpha等于0是ridge（岭回归）的惩罚；&lt;br/&gt;  nlambda:lambda值个数；拟合出n个系数不同的模型&lt;br/&gt;  lambda.min.ratio：lambda的最小值，lambda.max的比例形式，比如全部系数都是0的时候的最小值。默认值依赖于观察的个数和特征的个数，如果观察个数大于特征个数，默认值是0.0001，接近0，如果观察个数小于特征个数，默认值是0.01。在观察值个数小于特征个数的情况下，非常小的lambda.min.ratio会导致过拟合，在binominal和multinomial分布族性，这个值未定义，如果解释变异百分比总是1的话程序会自动退出；&lt;br/&gt;  lambda：用户提供的lambda序列。一个典型的用法基于nlambada和lambda.min.ratio来计算自身lambda序列。如果提供lambda序列，提供的lambda序列会覆盖这个。需谨慎使用，不要提供单个值给lambda（对于CV步骤后的预测，应使用predict()函数替代）。glmnet依赖于缓慢开始，并且它用于拟合全路径比计算单个拟合更快；&lt;br/&gt;  standardize：对于x变量是否标准化的逻辑标志，倾向于拟合模型序列。 系数总是在原有规模返回，默认standardize=TRUE。如果变量已经是同一单位，你可能并不能得到想要的标准化结果。&lt;br/&gt;  intercept：是否拟合截距，默认TRUE，或者设置为0（FALSE）&lt;br/&gt;  thresh：坐标下降的收敛域值，每个内部坐标下降一直进行循环，直到系数更新后的最大改变值比thresh值乘以默认变异要小，默认thresh为1E-7；&lt;br/&gt;  dfmax：在模型中的最大变量数，对于大量的变量数的模型但我们只需要部分变量时可以起到作用；&lt;br/&gt;  pmax：限制非零变量的最大数目；&lt;br/&gt;  exclude：要从模型中排除的变量的索引，等同于一个无限的惩罚因子；&lt;br/&gt;  penalty.factor：惩罚因子，分开的惩罚因子能够应用到每一个系数。这是一个数字，乘以lambda来允许不同的收缩。对于一些变量来说可以是0，意味着无收缩，默认对全部变量是1，对于列在exlude里面的变量是无限大。注意：惩罚因子是内部对nvars（n个变量）的和进行重新调整，并且lambda序列将会影响这个改变；&lt;br/&gt;  lower.limits：对于每个系数的更低限制的向量，默认是无穷小。向量的每个值须非正值。也可以以单个值呈现（将会重复）,或者是（nvars长度）；&lt;br/&gt;  upper.limit：对于每个系数的更高限制的向量，默认是无穷大；&lt;br/&gt;  maxit：所有lambda值的数据最大传递数；&lt;br/&gt;  type.gaussian：支持高斯分布族的两种算法类型，默认nvar &amp;lt; 500使用&quot;covariance“，并且保留所有内部计算的结果。这种方式比&quot;naive&quot;快，&quot;naive&quot;通过对nobs（n个观察）进行循环，每次内部计算一个结果，对于nvar &amp;gt;&amp;gt; nobs或者nvar &amp;gt; 500的情况下，后者往往更高效；&lt;br/&gt;  type.logistic：如果是&quot;Newton“，会使用准确的hessian矩阵（默认），当用的是&quot;modified.Newton“时，只使用hession矩阵的上界，会更快；&lt;br/&gt;  standardize.response：这个参数时对于&quot;mgaussian“分布族来说的，允许用户标准化应答变量；&lt;br/&gt;  type.multinomial：如果是&quot;grouped&quot;，在多项式系数的变量使用分布lasso惩罚，这样能确保它们完全在一起，默认是&quot;ungrouped&quot;。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;glmnet返回S3类，&quot;glmnet&quot;,&quot;*&quot;，&quot;*&quot;可以是elnet，lognet，multnet，fishnet(poisson)，merlnet&lt;/span&gt;&lt;br/&gt;  call：产生这个对象的调用;&lt;br/&gt;  a0:截距；&lt;br/&gt;  beta:对于elnet, lognet, fishnet和coxnet模型，返回稀疏矩阵格式的系数矩阵(CsparseMatrix)，对于multnet和mgaussian模型，返回列表，包括每一类的矩阵；&lt;br/&gt;  lambda:使用的lambda值的实际序列；当alpha=0时，最大的lambda值并不单单等于0系数（原则上labda等于无穷大），相反使用alpha=0.01的lambda，由此导出lambda值；&lt;br/&gt;  dev.ratio：表示由模型解释的变异的百分比（对于elnet，使用R-sqare）。如果存在权重，变异计算会加入权重，变异定义为2x(loglike_sat-loglike)，loglike_sat是饱和模型（每个观察值具有自由参数的模型）的log似然。因此dev.ratio=1-dev/nulldev；越接近1说明模型的表现越好&lt;br/&gt;  nulldev：NULL变异（每个观察值），这个定义为2*（loglike_sat-loglike(Null)）；NULL模型是指截距模型，除了Cox（0 模型）；&lt;br/&gt;  df：对于每个lambda的非零系数的数量。对于multnet这是对于一些类的变量数目；&lt;br/&gt;  dfmat：仅适用于multnet和mrelnet。一个包括每一类的非零向量数目的矩阵；&lt;br/&gt;  dim：系数矩阵的维度；&lt;br/&gt;  nobs：观察的数量；&lt;br/&gt;  npasses：全部lambda值加和的数据的总的通量；&lt;br/&gt;  offset：逻辑变量，显示模型中是否包含偏移；&lt;br/&gt;  jerr：错误标记，用来警告和报错（很大部分用于内部调试验）&lt;br/&gt;  而直接显示的结果有三列，分别是df，%Dev (就是dev.ratio)，lambda是每个模型对应的λ值&lt;/p&gt;
&lt;p&gt;&lt;span&gt;predict(object,newx,s=NULL,type=c(&quot;link&quot;,&quot;reponse&quot;,&quot;coefficients&quot;,&quot;nonzero&quot;,&quot;class&quot;),exact=FALSE,offset,...)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;coef(object,s=NULL,exact=FALSE)&lt;/span&gt;&lt;br/&gt;  object：glmnet返回的对象；&lt;br/&gt;  newx：用来预测的矩阵，也可以是系数矩阵；这个参数不能用于type=c(&quot;&quot;coefficents&quot;,&quot;nonzero&quot;)；&lt;br/&gt;  s：惩罚参数lambda的值，默认是用来创建模型的全部lambda值；&lt;br/&gt;  type：预测值的类型；&quot;link”类型给&quot;binomial&quot;，“multinomial&quot;,&quot;poisson&quot;或者&quot;cov&quot;模型线性预测的值，对于&quot;gaussian”模型给拟合值。&quot;response&quot;类型，对于&quot;binominal“和&quot;multinomial”给拟合的概率，对于&quot;poisson“，给拟合的均值，对于&quot;cox&quot;，给拟合的相对未及；对于&quot;gaussion&quot;,response等同于&quot;link“类型。&quot;coefficients&quot;类型对于需求的s值计算系数。注意，对于&quot;binomial”模型来说，结果仅仅对因子应答的第二个水平的类返回。“class&quot;类型仅仅应用于&quot;binomial”和&quot;multinomial“模型，返回最大可能性的分类标签。&quot;nonzero”类型对每个s中的值返回一个列表，其中包含非0参数的索引；&lt;br/&gt;  exact：这个参数仅仅对于用于预测的s（lambda）值不同于原始模型的拟合的值时，这个参数起到作用。如果exact=FALSE(默认)，预测函数使用线性解释来对给的s（lambda）值进行预测。这时一个非常接近的结果，只是稍微有点粗糙。如果exact=TRUE,这些不同的s值和拟合对象的lambda值进行sorted和merged，在作出预测之前进行模型的重新拟合。在这种情况下，强烈建议提供原始的数据x=和y=作为额外的命名参数给perdict()或者coef()，predict.glmnet()需要升级模型，并且期望用于创建接近它的数据。尽管不提供这些额外的参数它也会运行的很好，在调用函数中使用嵌套序列很可能会中断。&lt;br/&gt;  offset：如果使用offset参数来拟合，必须提供一个offset参数来作预测。除了类型&quot;coefficients&quot;或者&quot;nonzero“&lt;br/&gt;  ...：可以提供参数其它参数的机制，比如x=when exact=TRUE,seeexact参数。&lt;/p&gt;
&lt;pre class=&quot;{r}&quot;&gt;
&lt;code&gt;library(glmnet )
library(psych)

#dummy variable encoding
iris$issetosa &amp;lt;- ifelse(iris$Species==&quot;setosa&quot;,1,0)
iris$isversicolor &amp;lt;- ifelse(iris$Species==&quot;versicolor&quot;,1,0)
iris_dt &amp;lt;- iris[,-5]
pairs.panels(iris_dt) #scatterplot matrix&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201708/1093203-20170801210855755-338180949.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  pairs.panel画出散点图矩阵，对角线上方显示的是变量之间的相关系数，每个散点图中呈椭圆形的对象称为相关椭圆，它提供一种变量之间是如何密切相关的可视化信息。位于椭圆中间的的点表示x轴变量和y轴变量的均值所确定的点。两个变量之间的相关性由椭圆的形状表示，椭圆越被拉伸，其相关性就越强。散点图中绘制的曲线称为局部回归平滑，它表示x轴和y轴变量之间的一般关系。iris数据画出的散点图矩阵中的相关系数和散点图曲线都可见Petal.Length和Petal.Width有着强的相关性，而从散点图曲线也可看出，似乎Sepal.Length超出一定阈值后，Sepal.Length增加，Petal.Length也增加，并且也和品种是setosa或者versicolor也有关系。以Petal.Width作为因变量作线性回归。&lt;/p&gt;
&lt;pre class=&quot;{r}&quot;&gt;
&lt;code&gt;library(glmnet )

#dummy variable encoding
iris$issetosa &amp;lt;- ifelse(iris$Species==&quot;setosa&quot;,1,0)
iris$isversicolor &amp;lt;- ifelse(iris$Species==&quot;versicolor&quot;,1,0)

#divided into training sets and test sets
set.seed(12345) #set random seed in order to repeat the result
iris_rand &amp;lt;- iris[order(runif(150)),]
train &amp;lt;- iris_rand[1:105,-c(4,5)]
test &amp;lt;- iris_rand[106:150,-c(4,5)]
train_value  &amp;lt;- iris_rand[1:105,4]
test_value  &amp;lt;- iris_rand[106:150,4]

#lasso
m_lasso &amp;lt;- glmnet(as.matrix(train),train_value,family = &quot;gaussian&quot;)

plot(data.frame(df=m_lasso$df,dev.ratio=m_lasso$dev.ratio),type=&quot;b&quot;,cex=0.6)
coef(m_lasso, s=0.0497000)  #min df
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028184317148-1956910094.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028165940758-357259915.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看变量个数与模型解释变异百分比的点图，发现在df=1时已经开始平缓，已经可以解释93%的变异。因此取df=1的可以解释最大变异的lambda，0.0452800，查看系数发现使用了两个特征，其中一个系数非常低，并不是我们需要的，因此lambda改为第二个解释最大变异的lambda，0.0497000.&lt;br/&gt;用coef取出参数如下&lt;br/&gt;lambda=0.0452800&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028170643305-896936093.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;lambda=0.0497000&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028170450805-1275067185.png&quot;/&gt;&lt;br/&gt;用选出的lambda值进行预测&lt;/p&gt;
&lt;pre class=&quot;{r}&quot;&gt;
&lt;code&gt;pred &amp;lt;- predict(m_lasso,newx=as.matrix(test),s=0.0497000)
summary(pred)
summary(test_value)
cor(test_value,pred)
MAE &amp;lt;- mean(abs(pred - test_value))
mean(abs(mean(train_value) - test_value))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发现预测值和真实值范围非常接近&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028181920430-1529698250.png&quot;/&gt;&lt;br/&gt;相关系数高&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028182257726-1895779805.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MAE(平均绝对误差，反映预测值和真实值的差距)仅为0.1981803，如果只是拿训练集的均值预测的话，MAE高达0.6551746）&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028182421961-1691544607.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;综合以上的度量标准，说明我们的模型预测的不错。&lt;/p&gt;
&lt;h5 id=&quot;回归树和模型树&quot;&gt;回归树和模型树&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;决策树用于数值预测分为两类，第一类称为回归树，第二类称为模型树。&lt;/li&gt;
&lt;li&gt;回归树作为分类回归树的一部分引入，回归树并没有使用线性回归的办法，而是基于到达节点的案例的平均值进行预测。&lt;/li&gt;
&lt;li&gt;模型树，比回归树晚几年引入，但是或许功能更加强大。模型树和回归树以大致相同的方式生长，但是在每个叶节点，根据到达该节点的案例建立多元线性回归模型。根据叶节点的数目，一棵模型树可能会建立几十个甚至几百个这样的模型，这可能会使模型树更加难以理解，但好处是它们也许能建立一个更加精确的模型。&lt;/li&gt;
&lt;li&gt;优点：将决策树的优点与数值型数据建立模型的能力相结合；能自动选择特征，允许该方法和大量特征一起使用；不需要使用者事先指定模型；拟合某些类型的数据可能会比线性回归好得多；不要求用统计的知识来解释模型。&lt;/li&gt;
&lt;li&gt;缺点：不像线性回归那样常用；需要大量的训练数据；难以确定单个特征对于结果的总体净影响；可能比回归模型更难解释。&lt;/li&gt;
&lt;li&gt;原理：用于数值预测的决策树的建立方式与用于分类的决策树的建立方式大致相同。从根节点开始，按照特征使用分而治之的策略对数据进行划分，在进行一次分割后，将会导致数据最大化的均匀增长。而在分类决策树中，一致性（均匀性）是由熵值来度量的，而对于数值型的数据是未定义的，对于数值型决策树，一致性可以通过统计量（比如方差、标准差或者平均绝对偏差）来度量。不同的决策树生长算法，一致性度量可能会有所不同，但原理是基本相同的。&lt;/li&gt;
&lt;li&gt;一种常见的分割标准是标准偏差减少，就是原始值的标准差减去分割后不同类的数据加权后的标准差，这里的加权就是该类的数目比上总的数目。决策树停止生长后，假如一个案例使用特征B进行分割，落入某一组B1中，那么该案例的预测值将取B1组的平均值。模型树要多走一步，使用落入B1组的训练案例和落入B2组的训练案例，建立一个相对于其它特征（特征A）的线性回归模型。&lt;/li&gt;
&lt;li&gt;R代码：&lt;br/&gt;  在R包rpart（递归划分）中提供了像CART（分类回归树）团队中所描述的最可靠的回归树的实现，&lt;br/&gt;  &lt;span&gt;m.rpart &amp;lt;- rpart(dv ~ iv, data = mydata)&lt;/span&gt; #dv 是mydata 数据框中需要建模的因变量；iv 为一个R公式，用来指定mydata数据框中的自变量；data：为包含变量dv和变量iv的数据框&lt;br/&gt;  &lt;span&gt;p &amp;lt;- predict(m,test,type=c(&quot;vector&quot;, &quot;prob&quot;, &quot;class&quot;, &quot;matrix&quot;))&lt;/span&gt; #m是有函数rpart训练的一个模型；test一个包含测试数据的数据框，该数据框和用来建立模型的数据具有相同的特征；type：给定返回的预测值的类型，prob返回预测的概率。matrix返回矩阵的形式包括各类的概率。class返回树的分类。否则返回一个向量的结果。&lt;br/&gt;  可以使用R包rpart.plot中rpart.plot函数对回归树结果可视化。&lt;br/&gt;  目前模型树中最先进的算法是M5'算法，可以通过R包Rweka中M5P函数实现；&lt;br/&gt;  &lt;span&gt;m &amp;lt;- M5P(dv ~ iv, data = mydata)&lt;/span&gt; #dv 是mydata 数据框中需要建模的因变量；iv 为一个R公式，用来指定mydata数据框中的自变量；data：为包含变量dv和变量iv的数据框&lt;br/&gt;  &lt;span&gt;p &amp;lt;- predict(m,test)&lt;/span&gt; #m是有函数rpart训练的一个模型；test一个包含测试数据的数据框，该数据框和用来建立模型的数据具有相同的特征&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;{r}&quot;&gt;
&lt;code&gt;library(rpart)
library(RWeka)
library(rpart.plot)

#dummy variable encoding
iris$issetosa &amp;lt;- ifelse(iris$Species==&quot;setosa&quot;,1,0)
iris$isversicolor &amp;lt;- ifelse(iris$Species==&quot;versicolor&quot;,1,0)

#divided into training sets and test sets
set.seed(12345) #set random seed in order to repeat the result
iris_rand &amp;lt;- iris[order(runif(150)),]
train_dt &amp;lt;- iris_rand[1:105,-5]
test &amp;lt;- iris_rand[106:150,-c(4,5)]
test_value  &amp;lt;- iris_rand[106:150,4]

#rpart
m.rpart &amp;lt;- rpart(Petal.Width ~ Sepal.Length+Sepal.Width+Petal.Length+issetosa+isversicolor,data = train_dt)
summary(m.rpart)
rpart.plot(m.rpart)
pred &amp;lt;- predict(m.rpart,test)
cor(test_value,pred)
mean(abs(pred - test_value)) #rpart MAE
mean(abs(mean(train_dt$Petal.Width) -  test_value)) #mean MAE

#M5P
m.M5P &amp;lt;- M5P(Petal.Width ~ Sepal.Length+Sepal.Width+Petal.Length+issetosa+isversicolor,data = train_dt)
summary(m.M5P)
pred &amp;lt;- predict(m.M5P,test)
cor(test_value,pred)
mean(abs(pred - test_value)) #rpart MAE
mean(abs(mean(train_dt$Petal.Width) -  test_value)) #mean MAE
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;回归树的结果如下&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171027214550226-989413842.png&quot;/&gt;&lt;br/&gt;rpart.plot结果&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028155949461-8915190.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  相关性到达0.9797762,回归树（MAF0.1242998）明显比直接用均值预测(MAF0.7255238)更接近于真实的Petal.Width&lt;br/&gt;模型树的结果如下&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093203/201710/1093203-20171028191959055-2139119258.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  相关系数到达0.9714331，MAF0.1410668，在这个模型树中，只有一个根节点，相应建立了一个线性模型，直接用Sepal.Length ，Sepal.Width ，Petal.Length三个特征进行预测，和lasso回归模型一样，特征前面的系数代表该特征对Petal.Width的静影响，注意，这里的净影响是指在当前节点这个线性模型中的净影响，在这个线性模型中，每增加一点Sepal.Width和Petal.Length，Petal.Width都会增加，而系数小于0的Sepal.Length ,意味着每增加一点Sepal.Length，Petal.Width就会减少。从结果可以看出，在这个案例中，模型树没有回归树的效果好。&lt;br/&gt;  此处模型树在没有生成多个树节点的情况下，只是对特征做了线性回归，MAF达到0.1410668，和之前对数据作线性回归的lasso模型结果(MAF0.1981803)相比，貌似做的更好，但其实之前的lasso回归模型我们限制了特征值个数来避免过拟合，如果增加特征值数量和调整labda参数，一样可以达到比较小的MAF。&lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;p&gt;  本文主要讲了机器学习的一些基本概念，还有部分机器学习方法的基本原理及R语言实现。包括用于分类的机器学习方法：k近邻，朴素贝叶斯，决策树，规则学习；用于数值预测的机器学习方法：lasso回归，回归树，模型树，它们都属于监督学习。下篇文章会说到监督学习中的神经网络和支持向量机，还有其他非监督学习的一些方法。&lt;br/&gt;  本文可以作为一个速查和简单的入门，一些函数只列举了部分重要的参数，具体的使用参数可以通过查看R里面的帮助获得。另外如果要用于实践，还需要了解一些K折交叉检验，kappa统计量，ROC曲线内容，以对模型的性能进行评价和对不同的模型进行对比。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;
&lt;p&gt;Brett Lantz：机器学习与R语言&lt;br/&gt;薛毅，陈立萍： 统计建模与R软件(下册）&lt;br/&gt;侯澄钧：热门数据挖掘模型应用入门（一）: LASSO : &lt;a href=&quot;https://cosx.org/2016/10/data-mining-1-lasso&quot; class=&quot;uri&quot;&gt;https://cosx.org/2016/10/data-mining-1-lasso&lt;/a&gt;&lt;br/&gt;slade_sha的博客 Lasso算法理论介绍 ：&lt;a href=&quot;http://blog.csdn.net/slade_sha/article/details/53164905&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/slade_sha/article/details/53164905&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 28 Oct 2017 14:08:00 +0000</pubDate>
<dc:creator>ywliao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ywliao/p/7182090.html</dc:identifier>
</item>
<item>
<title>开发手机APP的神器  ---   ionic - 换个影子</title>
<link>http://www.cnblogs.com/2502778498spw/p/7748294.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/2502778498spw/p/7748294.html</guid>
<description>&lt;blockquote data-mce-=&quot;&quot; readability=&quot;18&quot;&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;strong data-mce-=&quot;&quot;&gt;  前  言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot; data-mce-=&quot;&quot;&gt;        &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　&lt;span data-mce-=&quot;&quot;&gt;　在如今的生活中，手机已经与我们的生活紧紧的联系在了一起。而手机APP更是其中，重要的一环。今天，影子就为大家介绍一种开发手机APP的超级神器---ionic。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;ionic 是一个强大的 HTML5 应用程序开发框架(HTML5 Hybrid Mobile App Framework )。 可以帮助您使用 Web 技术，比如 HTML、CSS 和 Javascript 构建接近原生体验的移动应用程序。&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;ionic 主要关注外观和体验，以及和你的应用程序的 UI 交互，特别适合用于基于 Hybird 模式的 HTML5 移动应用程序开发。&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;ionic是一个轻量的手机UI库，具有速度快，界面现代化、美观等特点。为了解决其他一些UI库在手机上运行缓慢的问题，它直接放弃了IOS6和Android4.1以下的版本支持，来获取更好的使用体验。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table border=&quot;0&quot; data-mce-=&quot;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;1、 ionic 特点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;ul data-mce-=&quot;&quot;&gt;&lt;li data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;1.ionic 基于Angular语法，简单易学。&lt;/span&gt;&lt;/li&gt;
&lt;li data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;2.ionic 是一个轻量级框架。&lt;/span&gt;&lt;/li&gt;
&lt;li data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;3.ionic 完美的融合下一代移动框架，支持 Angularjs 的特性， MVC ，代码易维护。&lt;/span&gt;&lt;/li&gt;
&lt;li data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;4.ionic 提供了漂亮的设计，通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。&lt;/span&gt;&lt;/li&gt;
&lt;li data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;5.ionic 专注原生，让你看不出混合应用和原生的区别&lt;/span&gt;&lt;/li&gt;
&lt;li data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;6.ionic 提供了强大的命令行工具。&lt;/span&gt;&lt;/li&gt;
&lt;li data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;7.ionic 性能优越，运行速度快。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&quot;0&quot; data-mce-=&quot;&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;1、 学习ionic之前需要准备的基础知识&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;ul data-mce-=&quot;&quot;&gt;&lt;li&gt;html5&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;js&lt;/li&gt;
&lt;li&gt;Angularjs&lt;/li&gt;
&lt;/ul&gt;&lt;table border=&quot;0&quot; data-mce-=&quot;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;3、 ionic中的路由&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;当用户在你的app中浏览时，ionic能够检测到浏览历史。通过检测浏览历史，实现向左或向右滑动时可以正确转换视图。&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;采用AngularUI路由器模块等应用程序接口可以分为不同的$state(状态)。Angular的核心为路由服务，URLs可以用来控制视图。&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;AngularUI路由提供了一个更强大的状态管理，即状态可以被命名，嵌套， 以及合并视图，允许一个以上模板呈现在同一个页面。&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;此外，每个状态无需绑定到一个URL，并且数据可以更灵活地推送到每个状态。&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;简单点来说，就是一个窗口就是一个$state(状态)；&lt;/span&gt;&lt;/p&gt;
&lt;p data-mce-=&quot;&quot;&gt; &lt;/p&gt;

&lt;h2 data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot; data-mce-=&quot;&quot;&gt;3.1每个 $state之间的关系&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206202/201710/1206202-20171028204236851-144668466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot; data-mce-=&quot;&quot;&gt;3.2&lt;span data-mce-=&quot;&quot;&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot; data-mce-=&quot;&quot;&gt;实例讲解&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;  首先，页面的跳转可分为，同文件跳转和外部文件引入；&lt;/p&gt;
&lt;p&gt;同文件跳转：&lt;/p&gt;
&lt;p&gt;　　　　没一页的代码都写在一个&amp;lt;script&amp;gt;&amp;lt;/script?标签中&lt;/p&gt;
&lt;p&gt;外部文件引入：&lt;/p&gt;
&lt;p&gt;　　       将不同页面的代码写在一个独立的html文件中；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;创建 tab按钮，也就是主页&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;script &lt;span data-mce-=&quot;&quot;&gt;id&lt;span data-mce-=&quot;&quot;&gt;=&quot;templates/tabs.html&quot;&lt;span data-mce-=&quot;&quot;&gt; type&lt;span data-mce-=&quot;&quot;&gt;=&quot;text/ng-template&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
      &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;tabs class&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;tabs-icon-top tabs-positive&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;

        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;tab title&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;Home&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; icon&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;ion-home&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; href&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;#/tab/home&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;                        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;nav&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view name&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;home-tab&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-view&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-tab&amp;gt;

        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;tab title&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;About&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; icon&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;ion-ios-information&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; href&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;#/tab/about&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
          &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;nav&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view name&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;about-tab&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-view&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-tab&amp;gt;

        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;tab title&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;Contact&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; icon&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;ion-ios-world&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;  href&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;#/tab/contact&amp;gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;ui&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;sref&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;tabs.contact&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
          &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;nav&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view name&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;contact-tab&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-view&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-tab&amp;gt;

      &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-tabs&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;script&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt; 　1、　给&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;标签起一个id名，用于后面的路由配置；格式必须严格：&lt;/p&gt;
&lt;p&gt;　　　　　-------　&lt;span data-mce-=&quot;&quot;&gt;id&lt;span data-mce-=&quot;&quot;&gt;=&quot;templates/tabs.html&quot;；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     2、将href属性值写为路由格式： &quot;#/tab/标记&quot;；&lt;/p&gt;
&lt;p&gt;　 3、&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view &lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&lt;span data-mce-=&quot;&quot;&gt; &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-view&amp;gt;标签用于显示页面内容。相当于AngularJS中的&amp;lt;ng-view&amp;gt;&amp;lt;/ng-view&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;tab按钮对应页面的构建&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;script &lt;span data-mce-=&quot;&quot;&gt;id&lt;span data-mce-=&quot;&quot;&gt;=&quot;templates/home.html&quot;&lt;span data-mce-=&quot;&quot;&gt; type&lt;span data-mce-=&quot;&quot;&gt;=&quot;text/ng-template&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt; 
      &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view view&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;title&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;Home&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
       
      &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-view&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;script&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 注：&lt;/p&gt;
&lt;p&gt;　　同样的，id用于路由配置，、&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view &lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&lt;span data-mce-=&quot;&quot;&gt; &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-view&amp;gt;标签用于显示页面内容。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;路由配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span data-mce-=&quot;&quot;&gt;var app = angular.module('myApp', ['ionic']);
app.config(function($stateProvider) {
  $stateProvider
  .state('index', {
    url: '/',
    templateUrl: 'home.html'
  })
  .state('music', {
    url: '/music',
    templateUrl: 'music.html'
  });
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;在module中，&lt;span data-mce-=&quot;&quot;&gt;必须注入ionic文件，在ionic中，ionic文件时最基础的依赖文件，所有的代码实现，都是建立在此基础之上的；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;.state参数：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span data-mce-=&quot;&quot;&gt;　1、参数1： 路由的名字，表示tabs下的子视图。这个路由定义了，这个路由的视图是在‘home’或index“”这个tab的视图里面绘制的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　2、url：路由标记读取；如：href=&quot;#/tab/home&quot;  ---- 取 /home;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　　　注意：“/”: 表示主页；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;　　3、templateUrl：设置，当前页面的绘制代码位置；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;注意：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;　　上面的第一个.&lt;span data-mce-=&quot;&quot;&gt;state是设置主页；其中templateUrl：设置的是页面刷新时，显示的页面。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;　　上述三点中的名称必须相互对应，否则会出错；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;完整代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!&lt;span data-mce-=&quot;&quot;&gt;DOCTYPE html&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;html &lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;head&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;meta &lt;span data-mce-=&quot;&quot;&gt;charset&lt;span data-mce-=&quot;&quot;&gt;=&quot;UTF-8&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;title&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;share&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;title&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
            &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;meta &lt;span data-mce-=&quot;&quot;&gt;name&lt;span data-mce-=&quot;&quot;&gt;=&quot;viewport&quot;&lt;span data-mce-=&quot;&quot;&gt; content&lt;span data-mce-=&quot;&quot;&gt;=&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;link &lt;span data-mce-=&quot;&quot;&gt;rel&lt;span data-mce-=&quot;&quot;&gt;=&quot;stylesheet&quot;&lt;span data-mce-=&quot;&quot;&gt; type&lt;span data-mce-=&quot;&quot;&gt;=&quot;text/css&quot;&lt;span data-mce-=&quot;&quot;&gt; href&lt;span data-mce-=&quot;&quot;&gt;=&quot;css/ionic.min.css&quot;&lt;span data-mce-=&quot;&quot;&gt;/&amp;gt;
&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;        
                    tabs
                      ↙             ↘
                  tab   tab
                  ↓         ↓
                view……    view……
        
        1、做底导航
        2、添加跳转
            ①、给导航外加script标签
            ②、给相应页面写代码，script标签内
            ③、给相对应页面添加state
         3. 将href改写为路由格式。  --  &quot;#/tab/标记&quot;
         4. 在config配置阶段，注入$routeProvider，进行路由配置：
        &lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;head&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;body &lt;span data-mce-=&quot;&quot;&gt;ng-app&lt;span data-mce-=&quot;&quot;&gt;=&quot;app&quot;&lt;span data-mce-=&quot;&quot;&gt; ng-controller&lt;span data-mce-=&quot;&quot;&gt;=&quot;ctrl&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;自动将view-title的值，设为标题&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion-nav-bar &lt;span data-mce-=&quot;&quot;&gt;class&lt;span data-mce-=&quot;&quot;&gt;=&quot;bar-positive&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
            &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;返回按钮，默认在子页时显示&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
          &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion-nav-back-button&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-back-button&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-bar&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
             
     &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;
         不能省略，tabs显示区域
         默认范围为满屏
     &lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion-nav-view &lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-view&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;

&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;底部&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;没有写home页之前，不要写↓，在写了home也之后，再写↓。并且，写一个也，要相对应的写state&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;script &lt;span data-mce-=&quot;&quot;&gt;id&lt;span data-mce-=&quot;&quot;&gt;=&quot;templates/tabs.html&quot;&lt;span data-mce-=&quot;&quot;&gt; type&lt;span data-mce-=&quot;&quot;&gt;=&quot;text/ng-template&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
      &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;tabs class&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;tabs-icon-top tabs-positive&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;

        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;tab title&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;Home&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; icon&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;ion-home&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; href&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;#/tab/home&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt; &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;将href改写为路由格式。  &lt;span data-mce-=&quot;&quot;&gt;--  &lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;#/tab/标记&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
            &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;子视图显示区域&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
          &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;nav&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view name&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;home-tab&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-view&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-tab&amp;gt;

        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;tab title&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;About&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; icon&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;ion-ios-information&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; href&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;#/tab/about&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;
          &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;nav&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view name&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;about-tab&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-view&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-tab&amp;gt;

        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;tab title&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;Contact&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt; icon&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;ion-ios-world&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;  href&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;#/tab/contact&amp;gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;ui&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;sref&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;tabs.contact&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
          &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;nav&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view name&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;contact-tab&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-nav-view&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-tab&amp;gt;

      &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;/&lt;span data-mce-=&quot;&quot;&gt;ion-tabs&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;script&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;


&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;home页&lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
        &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;!--&lt;span data-mce-=&quot;&quot;&gt;
        跳转方式：    
        ①、同一文件跳转，将代码写在script标签中，并以 id=&quot;templates/home.html&quot;形式起id名，用作跳转路径
        ②、不同文件跳转，代码写在&amp;lt;ion-view title=&quot;Contact&quot;&amp;gt;&amp;lt;/ion-view&amp;gt;标签中
        &lt;span data-mce-=&quot;&quot;&gt;--&amp;gt;
    &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;script &lt;span data-mce-=&quot;&quot;&gt;id&lt;span data-mce-=&quot;&quot;&gt;=&quot;templates/home.html&quot;&lt;span data-mce-=&quot;&quot;&gt; type&lt;span data-mce-=&quot;&quot;&gt;=&quot;text/ng-template&quot;&lt;span data-mce-=&quot;&quot;&gt;&amp;gt; 
      &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ion&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;view view&lt;span data-mce-=&quot;&quot;&gt;-&lt;span data-mce-=&quot;&quot;&gt;title&lt;span data-mce-=&quot;&quot;&gt;=&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span data-mce-=&quot;&quot;&gt;Home&lt;span data-mce-=&quot;&quot;&gt;&quot;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Sat, 28 Oct 2017 14:08:00 +0000</pubDate>
<dc:creator>换个影子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/2502778498spw/p/7748294.html</dc:identifier>
</item>
<item>
<title>媲美jQuery的JS框架----AngularJS（二） - 白菜白</title>
<link>http://www.cnblogs.com/zxt-17862802783/p/7747256.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zxt-17862802783/p/7747256.html</guid>
<description>&lt;p&gt;对于AngularJS什么，小编在这就不多做介绍了。大家可以看小编的上一篇博客。&lt;/p&gt;
&lt;p&gt;言归正传，小编在上一篇博客中介绍了AngularJS中的指令、表达式还有非常实用的三种服务。接下来，带大家看一看AngularJS中的$http、表格、dom及事件，当然还有其动画以及极其重要的路由。&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、AngularJS中的$http&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;作为一个前端程序猿，明白与后台数据的传递是灰常重要的。要知道，在前端常用的向后台传递数据的方式有：原生JS的ajax，jQuery中的ajax、表单的提交过程也是一种向后台数据传递的过程。最后，还有就是今天要将的AngularJS中的$HTTP了。当然，肯定还有其他的 数据传递方式，小编以后会介绍给你们的。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;AngularJS中的$thhp&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;AngularJS中的$http的基本样式比较简单，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;$http({
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;method:&quot;get/post&quot;, /*请求的方法*/
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;url:&quot; &quot; /*请求的地址*/
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;}).then(function(classes){
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;/*请求成功的回调函数*/
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;},function(){
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;/*请求失败的回调函数*/
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;我们实现一个请求json文件的数据，并制作为一个表格。至于为什么是json文件，因为小编只是初步接触后台，而json则通常被我们前端作为后台的替代。当然了，只供作为小小的后台数据使用，并不是后台。&lt;/p&gt;
&lt;p&gt;直接上栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;400px&quot;&lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;border-collapse: collapse;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;兴趣&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;语文成绩&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;数学成绩&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;总分&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;ng-repeat&lt;/span&gt;&lt;span&gt;=&quot;item in classes|orderBy:'score.chinese+score.math'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.age}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.hobby}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.score.math}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.score.chinese}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.score.math+item.score.chinese}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope,$http){
            $http({
                method:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;请求的方法&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                url:&lt;/span&gt;&lt;span&gt;&quot;angularJs&lt;/span&gt;&lt;span&gt;.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;请求的地址&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            }).then(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(classes){
                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;请求成功的回调函数&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                $scope.classes&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;classes.data;
                
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                $scope.name = classes.data.name;&lt;/span&gt;
&lt;span&gt;                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            },&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;请求成功的回调函数&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            });
            
    　　});&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;json：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        &quot;name&quot;: &quot;张三&quot;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &quot;age&quot;: 17,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        &quot;hobby&quot;: [
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            &quot;吃&quot;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            &quot;喝&quot;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            &quot;玩&quot;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            &quot;乐&quot;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        ],
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        &quot;score&quot;:{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            &quot;math&quot;:48,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            &quot;chinese&quot;:59
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        &quot;name&quot;: &quot;张三&quot;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        &quot;age&quot;: 17,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        &quot;hobby&quot;: [
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            &quot;吃&quot;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            &quot;喝&quot;,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            &quot;玩&quot;,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            &quot;乐&quot;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        ],
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        &quot;score&quot;:{
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            &quot;math&quot;:88,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            &quot;chinese&quot;:99
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        &quot;name&quot;: &quot;张三&quot;,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        &quot;age&quot;: 17,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        &quot;hobby&quot;: [
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            &quot;吃&quot;,
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            &quot;喝&quot;,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            &quot;玩&quot;,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            &quot;乐&quot;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        ],
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        &quot;score&quot;:{
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            &quot;math&quot;:68,
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            &quot;chinese&quot;:89
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        &quot;name&quot;: &quot;张三&quot;,
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        &quot;age&quot;: 17,
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        &quot;hobby&quot;: [
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;            &quot;吃&quot;,
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            &quot;喝&quot;,
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            &quot;玩&quot;,
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            &quot;乐&quot;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        ],
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        &quot;score&quot;:{
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            &quot;math&quot;:78,
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            &quot;chinese&quot;:89
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; ]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028165547023-1166844422.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，他也有简写形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$http.get('/someUrl', config).then(successCallback, errorCallback);
$http.post('/someUrl', data, config).then(successCallback, errorCallback);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过需要注意，post的缩写格式会出现内部服务器错误，大家先了解这种方式，小编后续会解决这个问题 &lt;/p&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;            $http.get(&quot;angularJs.json&quot;,{/*需要传递到后台的参数*/}).then(function(){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;                alert(&quot;请求成功！&quot;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;                },function(){
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;                alert(&quot;请求失败！&quot;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         
&lt;/pre&gt;&lt;/div&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、AngularJS中的select和表格&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;因为AngularJS双向数据绑定的特性，AngularJS的获取数据也变得简单。接下来就带大家了解一下select和表格。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;AngularJS中的select&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 在AngularJS中，select下拉选项也分为两种，使用数组作为数据源和以对象作为数据源；&lt;/p&gt;
&lt;p&gt;一、使用作为数据源；&lt;/p&gt;
&lt;p&gt;1、item表示数组中的每一项！&lt;br/&gt;2、循环中的option中，value的值，默认为item&lt;br/&gt;3、option显示出的内容(&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;标签中的文字)是由item.site for 决定！！&lt;/p&gt;
&lt;p&gt;再举例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;site3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;ng-repeat&lt;/span&gt;&lt;span&gt;=&quot;item in options&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{site3}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            $scope.options &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王二麻子&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;赵六&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李胖&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028172724133-802303569.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 再再举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;site2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;ng-repeat&lt;/span&gt;&lt;span&gt;=&quot;item in sites&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;{{item.url}}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item.site}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{site2}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){

            
            $scope.sites &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [
                {site : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Google&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.google.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
                {site : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Runoob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.runoob.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
                {site : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Taobao&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.taobao.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
            ];

        })
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028173402633-669931892.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;二、以对象作为数据源&lt;br/&gt;1、 (key,value) 第一项表示对象的键，第二项表示对象的值；&lt;br/&gt;2、 option的value，永远都是对象的值！&lt;br/&gt;3、 option显示出的内容(&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;标签中的文字)是由...for 决定的！也就是说 for前面是什么，option标签中就是什么。&lt;br/&gt;再再再举个栗子！！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;site4&quot;&lt;/span&gt;&lt;span&gt; ng-options&lt;/span&gt;&lt;span&gt;=&quot;key for (key,value) in sitess&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{site4}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
　　　　　　$scope.sitess &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
                site01 : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Google&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                site02 : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Runoob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                site03 : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Taobao&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };
        })
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028173919367-1536318767.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上面两个例子中可以发现，在取到数组或对象中每个值得时候，使用了两种方式：ng-options 和 ng-repeat；&lt;/p&gt;
&lt;p&gt;那么，我们来分析一下两者之间的不同：&lt;/p&gt;
&lt;p&gt;1、ng-options使用时，是将指令添加在select上;&lt;br/&gt;ng-repeat使用时，是将指令添加到option上；&lt;/p&gt;&lt;p&gt;2、 ng-options使用时，必须同步给select标签绑定ng-model；&lt;br/&gt;ng-repeat使用时，不一定需要绑定ng-model&lt;/p&gt;&lt;p&gt;3、 ng-options使用时，我们只需要关心for前面的部分，即option标签中显示的文字；而option的value会自动分配，不由我们决定。 (使用数组作为数据源是，value就是数组的每一项；使用对象作为数据源是，value永远都是对象的值)&lt;br/&gt;ng-repeat使用，除了要指定option标签中显示的文字，还需要手动指定value中的内容，如果没有指定则默认没有value；&lt;br/&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;AngularJS中的表格&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 其实表格的制作和上述的select是一样的方法，只要明白如何取值，那么表格就只是样式的问题了。&lt;/p&gt;
&lt;p&gt;疯狂举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt;&lt;span&gt; border&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;序号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr &lt;/span&gt;&lt;span&gt;ng-repeat&lt;/span&gt;&lt;span&gt;=&quot;item in options&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;                 
&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ng-repeat遍历是，$index 表示当前的行索引！&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;                 
&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{$index + 1}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{item}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;         
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        $scope.options &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王二麻子&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;赵六&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李胖&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028174659758-652465004.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、AngularJS中的DOM与事件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;接下来给大家介绍一些AngularJS中的dom事件，在AngularJS中，大部分的dom事件都是通过其指令来实现；&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;AngularJS中的DOM&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;1、ng-disabled=&quot;true/false&quot;;&lt;br/&gt;传入true表示禁用，传入false表示可用；&lt;/p&gt;
&lt;p&gt;2、ng-hide：是否隐藏；true表示隐藏，false表示不隐藏&lt;/p&gt;
&lt;p&gt;3、ng-show：是否显示；true表示显示，false表示不显示&lt;/p&gt;
&lt;p&gt;所以因为我们通常遇见的是true表示通用，所以，在事件的前面加上“！”；这只是个人习惯问题，没有规定必须；&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;            ng-disabled=&quot;true/false&quot;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            传入true表示禁用，传入false表示可用
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;ng-disabled&lt;/span&gt;&lt;span&gt;=&quot;!myCheck&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;按钮&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;myCheck&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;是否同意
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{myCheck}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;myShow&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;是否显示
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;ng-show&lt;/span&gt;&lt;span&gt;=&quot;myShow&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;我显示出来啦！&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;myHide&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;是否隐藏
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;ng-hide&lt;/span&gt;&lt;span&gt;=&quot;myHide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;我显示出来啦！&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028204627398-2114477324.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4、ng-if：是否移除元素&lt;/p&gt;
&lt;p&gt;当传入true显示，传入false移除&lt;br/&gt;效果与ng-hide相同，但是ng-hide是将元素隐藏，而ng-if是将元素在DOM中移除！！！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 　　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;myIf&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;是否移除
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;ng-if&lt;/span&gt;&lt;span&gt;=&quot;!myIf&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;我显示出来啦！&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    })
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028205750898-702629155.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5、ng-checked:传入true当前的复选框被选中&lt;/p&gt;
&lt;p&gt;再次疯狂举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 　　　　　&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;all&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Check all&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; ng-checked&lt;/span&gt;&lt;span&gt;=&quot;all&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Volvo&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; ng-checked&lt;/span&gt;&lt;span&gt;=&quot;all&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Ford&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; ng-checked&lt;/span&gt;&lt;span&gt;=&quot;all&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Mercedes
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028210118086-1229840568.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;6、ng-class :用于设置给元素添加class类&lt;/p&gt;
&lt;p&gt;可选值有以下几种情况：&lt;br/&gt;①可以是字符串。表示直接给元素添加对应的class。多个class之间用空格分隔；&lt;br/&gt;②可以是对象，对象的键表示class名字，对象的值为true或false，当为true时表示添加对应的class&lt;br/&gt;③可以是数组，数组中的值可以是字符串或对象，判断同上&lt;/p&gt;
&lt;p&gt;举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            .div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; cadetblue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            .div1&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blueviolet&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            .div3&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-class&lt;/span&gt;&lt;span&gt;=&quot;'div'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这是一个div&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;myClass&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;给div添加样式？
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-class&lt;/span&gt;&lt;span&gt;=&quot;{'div':myClass,'div1':!myClass}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zheshi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-class&lt;/span&gt;&lt;span&gt;=&quot;[{'div':myClass,'div1':!myClass},'div3']&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;haha&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028210611461-1173498301.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7、ng-switch根据变量的值进行选择&lt;/p&gt;
&lt;p&gt;再次举例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;我喜欢的网站
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;myVar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;切换
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;runoob&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;www.runoob.com
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;google&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;www.google.com
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;taobao&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;www.taobao.com
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        ​
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-switch&lt;/span&gt;&lt;span&gt;=&quot;myVar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-switch-when&lt;/span&gt;&lt;span&gt;=&quot;runoob&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;哈哈&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;欢迎访问&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-switch-when&lt;/span&gt;&lt;span&gt;=&quot;google&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Google&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;欢迎访问Google&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-switch-when&lt;/span&gt;&lt;span&gt;=&quot;taobao&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;淘淘&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;欢迎访问淘淘&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;ng-switch-default&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;切换&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;              &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选择不同选项显示对应的值。&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028210946367-273096221.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.2&lt;/span&gt;AngularJS中的事件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;AngularJS中的事件有很多，小编只是给大家介绍一些比较常用的。&lt;/p&gt;
&lt;p&gt;1、ng-click 定义AngularJS的点击事件&lt;br/&gt;ng-click只能触发绑定在AngularJS的作用域上面的属性和方法；&lt;/p&gt;
&lt;p&gt;2、ng-foucus：获得焦点&lt;br/&gt;3、ng-blur ：失去焦点&lt;br/&gt;4、ng-change：内容改变&lt;/p&gt;
&lt;p&gt;再次举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;ng-click&lt;/span&gt;&lt;span&gt;=&quot;func()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点我弹窗&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;ng-mouseover&lt;/span&gt;&lt;span&gt;=&quot;func()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点我弹窗&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;ng-mouseout&lt;/span&gt;&lt;span&gt;=&quot;func()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点我弹窗&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; ng-keydown&lt;/span&gt;&lt;span&gt;=&quot;keydown()&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
            $scope.func &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;哈哈哈&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            $scope.keydown &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                console.log(event.keyCode &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;);
            }
        })
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028212242914-445818424.gif&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;228&quot;/&gt;&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、AngularJS中的表单验证及动画&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;4.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;表单验证&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1、表单中，常用的验证操作&lt;br/&gt;$dirty 表单有填写记录&lt;br/&gt;$valid 字段内容合法的&lt;br/&gt;$invalid 字段内容是非法的&lt;br/&gt;$pristine 表单没有填写记录&lt;br/&gt;$error 表单验证不通过的错误信息&lt;br/&gt;2、验证时，必须给form和input，设置name属性。&lt;br/&gt;给form和input设置name之后，回自动将表单信息绑定到￥scope作用域中。所以，可以直接使用formName.inputName验证&lt;br/&gt;操作，得到验证结果。&lt;br/&gt;例如：&lt;br/&gt;formName.inputName.$dirty = &quot;true&quot;;表示表单被填写过！&lt;br/&gt;formName.inputName.$invalid = &quot;true&quot;;表示表单输入内容不合法！&lt;br/&gt;formName.inputName.$error.required = &quot;true&quot;;表示设置了必填，但没有输入；&lt;br/&gt;注意：&lt;br/&gt;$error支持的验证：&lt;br/&gt;required/minlength/maxlength/partten(正则验证..)/eamil/number/date/url等。。。&lt;br/&gt;3、为了避免AngularJS的验证与HTML5的表单验证冲突；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;AngularJS中的表单验证&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;css/bootstrap.css&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            .row&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px 0px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         
&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;width: 400px;margin: 50px auto; padding: 0px;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-title&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;text-align: center;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                        用户注册
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-horizontal&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;form&quot;&lt;/span&gt;&lt;span&gt; novalidate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;user.name &quot;&lt;/span&gt;&lt;span&gt; required ng-minlength&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt; ng-maxlength&lt;/span&gt;&lt;span&gt;=&quot;12&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;margin: 0px;color: red;&quot;&lt;/span&gt;&lt;span&gt; ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.name .$invalid &amp;amp;&amp;amp; form.name .$dirty&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.name .$error.required&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名必须填写&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.name .$error.minlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名长度最小为6位&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.name .$error.maxlength&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名长度最大为12位&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;user.email&quot;&lt;/span&gt;&lt;span&gt; required&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;margin: 0px;color: red;&quot;&lt;/span&gt;&lt;span&gt; ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.email.$invalid &amp;amp;&amp;amp; form.email.$dirty&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.email.$error.required&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱必须填写&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.email.$error.email&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;邮箱不合法&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;密码：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;passward&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;pwd&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;user.pwd&quot;&lt;/span&gt;&lt;span&gt; pattern&lt;/span&gt;&lt;span&gt;=&quot;^\w{6,18}$&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;margin: 0px;color: red;&quot;&lt;/span&gt;&lt;span&gt; ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.pwd.$invalid &amp;amp;&amp;amp; form.pwd.$dirty&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.pwd.$error.pattern&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;密码只能由6-18位字母数字下划线组成&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;                                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;确认密码：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;passward&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;repwd&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;user.repwd&quot;&lt;/span&gt;&lt;span&gt; required &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;margin: 0px;color: red;&quot;&lt;/span&gt;&lt;span&gt; ng-show&lt;/span&gt;&lt;span&gt;=&quot;form.repwd.$dirty &amp;amp;&amp;amp; user.pwd!=user.repwd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;两次密码输入不一致&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;注册&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-success&quot;&lt;/span&gt;&lt;span&gt; ng-disabled&lt;/span&gt;&lt;span&gt;=&quot;form.$invalid||user.pwd!=user.repwd&quot;&lt;/span&gt;&lt;span&gt; required &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;                                 
&lt;span&gt;67&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;重置&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-warning&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt; 
&lt;span&gt;79&lt;/span&gt;         
&lt;span&gt;80&lt;/span&gt;         
&lt;span&gt;81&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt;     
&lt;span&gt;83&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[])
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;             
&lt;span&gt;88&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;90&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028212855305-543137857.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;4.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;AngularJS中的动画&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; AngularJS中的动画没有css、js及jQuery那么复杂；&lt;/p&gt;
&lt;p&gt;在AngularJS中使用动画：&lt;br/&gt;1、导入angular-animate.js&lt;br/&gt;2、如果页面中没有自定义app模块，则可以直接绑定系统模块ng-app=&quot;ngAnimate&quot;&lt;br/&gt;如果页面中有自定义的app模块，则可以在自定义模块的数组中，注入ngAnimate。&lt;br/&gt;eg：angular.module(&quot;app&quot;,[&quot;ngAnimate&quot;])&lt;br/&gt;3、当使用ng-show、ng-hide显示或隐藏元素的时候，系统会自动添加或移除.ng-hide这个class类&lt;br/&gt;4、当使用ng-if、ng-switch、ng-repeat等其他指令时，需要分别设置显示后和隐藏后的两种CS样式；&lt;br/&gt;.ng-enter-active,.ng-leave{} 显示后&lt;br/&gt;.ng-enter,.ng-leave-active{} 隐藏后&lt;/p&gt;
&lt;p&gt;再再举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            .div&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                transition&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; all 2s ease&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            .ng-hide&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; cadetblue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin-left: -100px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            .ng-enter-active,.ng-leave&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            .ng-enter,.ng-leave-active&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;margin-left: -200px;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;myCheck&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;是否隐藏div？
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;div&quot;&lt;/span&gt;&lt;span&gt;ng-hide&lt;/span&gt;&lt;span&gt;=&quot;myCheck&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hahaha&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt;ng-model&lt;/span&gt;&lt;span&gt;=&quot;myIf&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;是否隐藏div？
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;div&quot;&lt;/span&gt;&lt;span&gt;ng-if&lt;/span&gt;&lt;span&gt;=&quot;!myIf&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hahaha&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/angular-animate.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ngAnimate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        .controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028213759023-2059349146.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;五、AngularJS中的路由&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;路由算是AngularJS中最重要的功能之一，毕竟在前端网站中路由的应用十灰的常见：AngularJS 路由允许我们通过不同的 URL 访问不同的内容。通过 AngularJS 可以实现多视图的单页Web应用（single page web application，SPA）。&lt;/p&gt;
&lt;p&gt;一、在AngularJS中使用路由：&lt;br/&gt;    1. 导入路由文件：angular-route.js&lt;br/&gt;   &lt;br/&gt;   2. 在主模块中注入&quot;ngRoute&quot;。 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
angular.module(&quot;app&quot;,[&quot;ngRoute&quot;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    &lt;br/&gt;   3. 将超链接改写为路由格式。  --&amp;gt;  &quot;#/标记&quot;&lt;br/&gt;     &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
   &amp;lt;a href=&quot;#/&quot;&amp;gt;首页&amp;lt;/a&amp;gt;   //首页直接使用 #/ 表示
   &amp;lt;a href=&quot;#/page1&quot;&amp;gt;page1&amp;lt;/a&amp;gt;  //其他页面&quot;#/标记&quot; 表示
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        4. 在页面的合适位置，添加ng-view，用于承载路由打开的页面：       &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;div &lt;span data-mce-=&quot;&quot;&gt;ng-view&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;div&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&lt;span data-mce-=&quot;&quot;&gt; 
//或者 &lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;ng-view&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;ng-view&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span data-mce-=&quot;&quot;&gt;该 div 内的 HTML 内容会根据路由的变化而变化。&lt;br/&gt;    &lt;br/&gt;    5. 在config配置阶段，注入$routeProvider，进行路由配置：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
.config(function($routeProvider){
    $routeProvider
    .when(&quot;/&quot;,{template:'&amp;lt;h1 style=&quot;color:red;&quot;&amp;gt;这是首页&amp;lt;/h1&amp;gt;'})
    .when(&quot;/page1&quot;,{templateUrl:&quot;page.html&quot;,controller:&quot;ctrl1&quot;})
    .when(&quot;/page2&quot;,{templateUrl:&quot;page.html&quot;,controller:function($scope){
        $scope.text = &quot;这是ctrl不知道是几控制器！！&quot;
    }})
    .when(&quot;/page3&quot;,{templateUrl:&quot;page.html&quot;})
    .when(&quot;/page4&quot;,{})
    .otherwise({redirectTo:&quot;/&quot;})
})
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;二、AngularJS 路由也可以通过不同的模板来实现。&lt;/p&gt;
&lt;p&gt;$routeProvider.when 函数的第一个参数是 URL 或者 URL 正则规则，第二个参数为路由配置对象。&lt;/p&gt;

&lt;p&gt;路由配置对象语法规则如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;$routeProvider.when(url,{
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    template:string, //在ng-view中插入简单的html内容
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    templateUrl:string, //在ng-view中插入html模版文件
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    controller:string,function / array, //在当前模版上执行的controller函数
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    controllerAs:string, //为controller指定别名
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;    redirectTo:string,function, //重定向的地址
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     resolve:object&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;,function&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; //指定当前controller所依赖的其他模块
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt; 三、路由对象中接受的可选参数：&lt;/p&gt;
&lt;p&gt; ① template： 自定义HTML模板，会直接将这段HTML记载到ng-view中；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
.when(&quot;/page3&quot;,{templateUrl:&quot;page.html&quot;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;  ② templateUrl： 导入外部的HTML模板文件。 为了避免冲突，外部的HTML应该是一个代码片段，即只保留body以内的部分。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
.when(&quot;/page1&quot;,{templateUrl:&quot;page.html&quot;,controller:&quot;ctrl1&quot;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;  ③ controller： 在当前HTML模板上，执行的controller函数。会生出新的作用域$scope. 可以接受字符串(声明好的controller名字),也可以直接接受函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
.when(&quot;/page1&quot;,{templateUrl:&quot;page.html&quot;,controller:&quot;ctrl1&quot;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    &lt;br/&gt;　　注意： 使用ng-view打开的页面，controller中的作用域是属于当前页面作用域的子作用域！！ 依然符合Angular中父子作用域&quot;能读不能写&quot;的要求！&lt;br/&gt;  　　所以： 如果需要在ng-view中修改当前作用域的变量，必须把这个变量声明为对象的属性！！&lt;br/&gt;  　　&lt;br/&gt;  ④ redirectTo：重定向。一般用于.otherwise()中，用于重定向回首页！&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
.otherwise({redirectTo:&quot;/&quot;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;最后举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            ul&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            li&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                cursor&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; pointer&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            li a&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                text-decoration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; black&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            li:hover&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
            #div1&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
                width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 1000px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 500px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
                border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 2px solid red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
            &lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;ng-app&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; ng-controller&lt;/span&gt;&lt;span&gt;=&quot;ctrl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;首页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#/page1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;page1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#/page2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;page2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#/page3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;page3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#/page4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;page4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;test&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; ng-model&lt;/span&gt;&lt;span&gt;=&quot;obj.test&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        
        
            
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;div1&quot;&lt;/span&gt;&lt;span&gt; ng-view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
            
        
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/angular.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/angular-route.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;

angular.module(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ngRoute&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
.config(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($routeProvider){
    $routeProvider
    .when(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{template:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;h1 style=&quot;color:red;&quot;&amp;gt;这是首页&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
    .when(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/page1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{templateUrl:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;page.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,controller:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
    .when(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/page2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{templateUrl:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;page.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,controller:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
        $scope.text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是ctrl不知道是几控制器！！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }})
    .when(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/page3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{templateUrl:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;page.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
    .when(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/page4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{})
    .otherwise({redirectTo:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})
})
.controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
    $scope.test &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是一段测试文字！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    $scope.obj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
        test:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是一个测试对象！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
})
.controller(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ctrl1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;($scope){
    $scope.text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是ctrl1控制器！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
})







    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028214856836-1317150625.gif&quot; alt=&quot;&quot; width=&quot;668&quot; height=&quot;236&quot;/&gt;&lt;/p&gt;

&lt;p&gt;到此，AngularJS的基础知识基本已经结束了。要知道，在很多公司中，AngularJS的应用要比jQuery要重要的多。不过小编对AngularJS的学习也并没有结束。以后小编也会将更多的AngularJS以及其他的前端知识带给大家！！&lt;/p&gt;
</description>
<pubDate>Sat, 28 Oct 2017 14:07:00 +0000</pubDate>
<dc:creator>白菜白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zxt-17862802783/p/7747256.html</dc:identifier>
</item>
<item>
<title>Single linked list by cursor - 仪式黑刃</title>
<link>http://www.cnblogs.com/hongshijie/p/7748098.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hongshijie/p/7748098.html</guid>
<description>&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;有了指针实现看似已经足够了，那为什么还要有另外的实现方式呢？原因是诸如&lt;span lang=&quot;en-US&quot;&gt;BASIC&lt;span lang=&quot;en-US&quot;&gt;和&lt;span lang=&quot;en-US&quot;&gt;FORTRAN&lt;span lang=&quot;en-US&quot;&gt;等许多语言都不支持指针，如果需要链表而又不能使用指针，那么就必须使用另外的实现方法。还有一个原因，是在&lt;span lang=&quot;en-US&quot;&gt;ACM-ICPC&lt;span lang=&quot;zh-CN&quot;&gt;，OI等竞赛中，比赛时间有限，用指针写起来太费事，而且数量不多的情况下，用数组实现的脸变运行速度会更快。还有一些人觉得用指针写起来不优雅。嗯，不管怎么说，多掌握一种写法还是有必要的，说不定面试就会被问到&lt;span lang=&quot;en-US&quot;&gt;2333&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;下面我会先把游标实现的细节阐述清楚，然后给出一个例题，来辅助理解。&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;其实&lt;span lang=&quot;zh-CN&quot;&gt;游标在操作起来和普通链表并无太大不同，实际上两者的实现代码（特别是链表中函数的实现）差别不大，游标实现的链表效率会高一些，因为他是通过数组存储数据的，所以读写速度都是O&lt;span lang=&quot;en-US&quot;&gt;(1)&lt;span lang=&quot;en-US&quot;&gt;的，非常快。&lt;span lang=&quot;zh-CN&quot;&gt;但是它并不能像普通链表一样实现动态增长缩减，一旦定义了数组大小，则能存储的数据的个数便不可更改了，所以更适合事先知道最大数据个数的案例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;根据之前的知识，在链表的指针实现种有两个重要的特点&lt;/p&gt;
&lt;div&gt;
&lt;ul type=&quot;disc&quot;&gt;&lt;li lang=&quot;en-US&quot;&gt;数据存储在一组结构体中。每一个结构体包含有数据以及指向下一个结构体的指针。&lt;/li&gt;
&lt;li lang=&quot;en-US&quot;&gt;一个新的结构体可以通过调用malloc而从系统全局内存(global memory)得到，并可以通过调用free而被释放。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;那游标法就必须能够模拟这两条特性，因为这是指针的基础性质。满足条件1的逻辑方法是要有一个全局的结构体数组，这个数组用来干嘛的？应该很容易想到——一方面存数据，这是单元内容。另一方面，那么下标呢？对于这个数组的任何单元，它的下标用来代表一个地址。&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;先给出一些声明&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; typedef &lt;span&gt;int&lt;/span&gt; PtrToNode;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为现在不需要把数据和指针绑定，所以不再是结构体,而是数组下标&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;typedef PtrToNode List;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;typedef PtrToNode Position;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; SpaceSize 100
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Node{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Element;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    Position Next;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;  
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; Node CursorSpace[SpaceSize];
&lt;/pre&gt;&lt;/div&gt;

&lt;p lang=&quot;en-US&quot;&gt;这里的声明和之前的指针实现保持结构上的一致，这样就会形成一种对称的美感～&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;现在我们必须模拟条件&lt;span lang=&quot;en-US&quot;&gt;2&lt;span lang=&quot;zh-CN&quot;&gt;，让CursorSpace数组中的单元代行&lt;span lang=&quot;en-US&quot;&gt;malloc&lt;span lang=&quot;en-US&quot;&gt;和free的职能。为此，我们将保留一个数组（也就是free list），用slot命名，还挺形象2333，这个表由不在任何表中的单元构成。而且用0号单元作为表头，下面给出它的初始配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;div&gt;
&lt;table title=&quot;&quot; summary=&quot;&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Slot&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Element &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Next&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt; 这是一个初始化的CursorSpace&lt;span lang=&quot;zh-CN&quot;&gt;，对于Next，&lt;span lang=&quot;en-US&quot;&gt;0值等价于一个NULL指针。&lt;span lang=&quot;zh-CN&quot;&gt;上面的状态用链表形式表示为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CursorSpace[0]—&amp;gt;CursorSpace[1]—&amp;gt;CursorSpace[2]—&amp;gt;CursorSpace[3]—&amp;gt;CursorSpace[4]—&amp;gt;CursorSpace[5]—&amp;gt;CursorSpace[6]—&amp;gt;CursorSpace[7]—&amp;gt;CursorSpace[8]—&amp;gt;CursorSpace[9]—&amp;gt;CursorSpace[10]—&amp;gt;NULL.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1262741/201710/1262741-20171028215953711-1035672895.png&quot; alt=&quot;&quot; width=&quot;18&quot; height=&quot;27&quot;/&gt;而这个Slot的值，其实就是CursorSpace这个结构体数组的下标！！理解这点，下面的分配和返还函数的细节就容易理解了。&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;我们做什么操作都离不开第一步——初始化，这很简单，一个循环就够了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1262741/201710/1262741-20171028215953711-1035672895.png&quot; alt=&quot;&quot; width=&quot;18&quot; height=&quot;27&quot;/&gt;&lt;span lang=&quot;en-US&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;与此同时，为了执行malloc的功能，需要把表头后面的第一个元素从freelist中删除，为什么要这样做——因为这个slot数组模拟的是系统内存，你申请一块，他就少一块。为了执行 free的功能，我们把要删除的单元放在freelist的前面，下面给出内存分配和返还的游标实现。如果没有可用空间，我们就让P=0&lt;span lang=&quot;zh-CN&quot;&gt;，它表明没有空间可用，并且也可以使分配函数的第二行称为空操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p&gt;先说初始化一个游标空间 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Initial(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;SpaceSize-&lt;span&gt;1&lt;/span&gt;; i++)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历每一个单元&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         CursorSpace[i].Next=i+&lt;span&gt;1&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;依次对next升序编号&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     CursorSpace[&lt;span&gt;0&lt;/span&gt;].Element=&lt;span&gt;0&lt;/span&gt;;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始元素置空&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     CursorSpace[SpaceSize-&lt;span&gt;1&lt;/span&gt;].Next=&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把最后一个单元的next设为0，就类似指针链表的尾指针是NULL&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1262741/201710/1262741-20171028215953711-1035672895.png&quot; alt=&quot;&quot; width=&quot;18&quot; height=&quot;27&quot;/&gt;下面这两个是重中之重&lt;span lang=&quot;zh-CN&quot;&gt;，&lt;span lang=&quot;zh-CN&quot;&gt;各位要看仔细了&lt;span lang=&quot;zh-CN&quot;&gt;，&lt;span lang=&quot;zh-CN&quot;&gt;这两个基础操作理解透彻了&lt;span lang=&quot;zh-CN&quot;&gt;，&lt;span lang=&quot;zh-CN&quot;&gt;后面的都是&lt;span lang=&quot;en-US&quot;&gt;小菜一碟。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Position CursorAlloc(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    Position P;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     P=CursorSpace[&lt;span&gt;0&lt;/span&gt;].Next;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先从next的第0个单元获取一个数，这个数是第P个单元的地址&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     CursorSpace[&lt;span&gt;0&lt;/span&gt;].Next=CursorSpace[P].Next; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cursor 0后面本来接的是cursor P，但现在第P个单元被申请走了，所以顺接到P后面的位置。&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; P;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;这里的&lt;span lang=&quot;zh-CN&quot;&gt;CursorSpace&lt;span lang=&quot;zh-CN&quot;&gt;[&lt;span lang=&quot;zh-CN&quot;&gt;0&lt;span lang=&quot;zh-CN&quot;&gt;]&lt;span lang=&quot;zh-CN&quot;&gt;仅代表一般意义上的“第一个元素”，未必是真正的下标&lt;span lang=&quot;en-US&quot;&gt;0.这几句代码不太好理解，我一开始学的时候费了不少劲去弄懂，后来总结出一个状态转换的示意图，能很清晰地解释这个函数的运行过程：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span lang=&quot;en-US&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1262741/201710/1262741-20171028211142945-331460619.png&quot; alt=&quot;&quot; width=&quot;768&quot; height=&quot;189&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 因为malloc的时候要将第一个元素（表头之后的第一个）从freelist中删除。&lt;/p&gt;

&lt;p lang=&quot;en-US&quot;&gt; 释放内存：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; CursorFree(Position P){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     CursorSpace[P].Next=CursorSpace[&lt;span&gt;0&lt;/span&gt;].Next;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;cursor P后面接上原本是cursor 0所指的下一个&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     CursorSpace[&lt;span&gt;0&lt;/span&gt;].Next=P; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;cursor 0后面接上被删除的P，相当于返还给操作系统。&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;这两句代码的顺序不能反过来，不然的话，&lt;span lang=&quot;en-US&quot;&gt;cursor 0&lt;span lang=&quot;en-US&quot;&gt;里面存的&lt;span lang=&quot;en-US&quot;&gt;Next&lt;span lang=&quot;en-US&quot;&gt;值就会改变，顺序就乱了。不过——我们思考这个&lt;span lang=&quot;en-US&quot;&gt;free&lt;span lang=&quot;en-US&quot;&gt;过程的时候最好从下往上看，因为要返还&lt;span lang=&quot;en-US&quot;&gt;P&lt;span lang=&quot;en-US&quot;&gt;这个单元，所以从逻辑上，表头的下一位记录&lt;span lang=&quot;en-US&quot;&gt;P&lt;span lang=&quot;zh-CN&quot;&gt;，然后P记录“原本是表头的下一位”那个单元的序号——也就是下标。&lt;span lang=&quot;en-US&quot;&gt;记住！是从逻辑上，不是从代码细节上。实际写的时候要考虑边边角角，调整Next值的顺序一定要小心，就像用指针删除链表时的顺序问题（回想一下）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; 这个的运行过程如下：&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1262741/201710/1262741-20171028215929945-922750934.png&quot; alt=&quot;&quot; width=&quot;661&quot; height=&quot;196&quot;/&gt;&lt;/p&gt;

&lt;p lang=&quot;en-US&quot;&gt;因为free后要把该单元放在freelist的前端，放回去。&lt;/p&gt;
&lt;p&gt;有没有发现，这两个函数的操作是完全对称的！多么和谐的美感啊，无论顺序和具体的步骤，他们都是对称的，所以这个细节也会有利于我们去理解内存的分配和返还机制。这或许对我们理解后续课程有帮助。&lt;/p&gt;


&lt;p&gt;有了这些，链表的游标实现就简单了。为了前后一致我们将用一个头节点实现我们的链表。为了方便从整体架构上理解游标链表，给出一个例子：&lt;/p&gt;
&lt;div&gt;
&lt;table title=&quot;&quot; summary=&quot;&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Slot&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Element&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Next&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;-&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;Header&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;- &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;Header&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;-&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p lang=&quot;en-US&quot;&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;假设L=5&lt;span lang=&quot;zh-CN&quot;&gt;，M&lt;span lang=&quot;en-US&quot;&gt;=3&lt;span lang=&quot;zh-CN&quot;&gt;，那么L表示链表a&lt;span lang=&quot;en-US&quot;&gt;-&amp;gt;b-&amp;gt;e-&amp;gt;NULL&lt;span lang=&quot;zh-CN&quot;&gt;，M表示链表&lt;span lang=&quot;en-US&quot;&gt;c-&amp;gt;d-&amp;gt;f-&amp;gt;NULL&lt;span lang=&quot;zh-CN&quot;&gt;。&lt;span lang=&quot;en-US&quot;&gt;为了写出用游标实现链表的这些函数，必须传递和返回与指针实现时相同的参数。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;这节因为有了之前的基础，注释就不写那么冗长了。&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;判断是否为空表，也就是一个元素都没有的表。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Isempty(List L) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt; CursorSpace[L].Next==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p lang=&quot;en-US&quot;&gt;判断是否为末尾&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; IsLast(Position P) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; CursorSpace[P].Next==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然细节和判空相同，但是用作接口由于实际功能有细微差别，还是要区分开写的。&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;查找是这样的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; Position Find(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; X,List L) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    Position P;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     P=&lt;span&gt;CursorSpace[L].Next;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(P &amp;amp;&amp;amp; CursorSpace[L].Element!=X)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当后续的表还存在，并且还未找到给定的X时&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         P=CursorSpace[P].Next;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向后迭代，并逐个比对元素&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; P;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回X在L中的位置，当没有找到时，返回0&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们再说删除：&lt;/p&gt;
&lt;p&gt;和之前一样，删除要先找到前一个元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; Position FindPrevious(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; X,List L){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    Position P;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     P=&lt;span&gt;L;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (P &amp;amp;&amp;amp; CursorSpace[CursorSpace[P].Next].Element!=X) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;P没有走到末尾，同时还没找到给定的X时&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;       P=CursorSpace[P].Next; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;P向后走&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;  }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;走到这一步时，说明要么没找到，P=NULL（结尾处），要么找到了，P=前驱的位置&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; P;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来就要删除了，有了前面的基础，就容易理解了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Delete(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; X , List L){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    Position P,TempCell;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     P=&lt;span&gt;FindPrevious(X, L);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;IsLast(P)) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         TempCell=&lt;span&gt;CursorSpace[P].Next;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         CursorSpace[P].Next=CursorSpace[TempCell].Next;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相当于P-&amp;gt;Next=P-&amp;gt;Next-&amp;gt;Next&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        CursorFree(TempCell);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再说插入&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Insert(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; X,Position P){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    Position TempCell;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     TempCell=CursorAlloc(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;申请一块新内存&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;TempCell)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;        printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Out of space!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这是为了增强程序的健壮性，给出错误提示（俗称打出GG）&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     CursorSpace[TempCell].Element=&lt;span&gt;X;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     CursorSpace[TempCell].Next=&lt;span&gt;CursorSpace[P].Next;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     CursorSpace[P].Next=TempCell;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这三行作用和用指针极其类似，对比着看吧&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; }    
&lt;/pre&gt;&lt;/div&gt;

&lt;p lang=&quot;en-US&quot;&gt;哦对了，应该有不少人对之前的“freelist”感到疑惑吧hhhhh   它从字面上看表示了一种有趣的数据结构，从freelist删除的单元是刚刚由free放在那里的单元。因此，最后被放在freelist的单元是最先被拿走的单元。有一种数据结构也具有这种性质，叫做栈（stack），它是下一节要讨论的内容。&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;下面给出一个有趣的题目，emmmm有兴趣的or有能力的可以继续往下看——没人希望自己很弱吧，所以都接着往下看吧哈哈哈&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;破损的键盘（又名：悲剧文本），Uva OJ  11988&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;        你有一个破损的键盘，键盘上的所有键都可以正常工作，但有时Home或者End键会自动按下。你并不知道键盘存在这一问题，于是专心地打稿子，甚至连显示器都没打开。当你打开显示器后，展现在你面前的是一段悲剧的文本。你的任务是打开显示器之前，计算出这段悲剧文本。&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;    &lt;span lang=&quot;en-US&quot;&gt;    &lt;span lang=&quot;zh-CN&quot;&gt;输入包含多组数据，每组数据占一行，包含不超过100000个字母、下划线、字符“[”或者“]”。其中字符“[”表示Home键，“]”表示End键。输入结束标志为文件结束符（EOF）输入文件不超过5MB，对于每组数据，输出一行，即屏幕上的悲剧文本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;S&lt;span lang=&quot;en-US&quot;&gt;ample:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;Input&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;This_is_a_&lt;span lang=&quot;en-US&quot;&gt;[Beiju]_text [[]][]Happy_Birthday_to_Tsinghua_University&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;Output&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;BeijuThis_is_a__text&lt;span lang=&quot;en-US&quot;&gt; Happy_Birthday_to_Tsinghua_University&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;最简单的想法是用一个数组保存这段文本，然后用一个变量pos保存光标的位置。这样的话，输入一个字符相当于在数组中插入一个字符……那这就很尴尬了，每插入一个字符，需要把当前位置的所有元素向右移动，还要考虑是否存在溢出的问题。很不方便而且时间开销巨大，这样的代码妥妥TLE&lt;span lang=&quot;zh-CN&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;解决方案是用链表，每输入一个字符就把它存起来。假设输入的字符串是&lt;span lang=&quot;en-US&quot;&gt;s[1~n],&lt;span lang=&quot;en-US&quot;&gt;则可以用next[i]&lt;span lang=&quot;zh-CN&quot;&gt;表示在当前显示器中s&lt;span lang=&quot;en-US&quot;&gt;[i]右边的字符编号——也就是对应的下标。方便起见，假设字符串s的最前面有一个虚拟的s[0]&lt;span lang=&quot;zh-CN&quot;&gt;，则&lt;span lang=&quot;en-US&quot;&gt;next[0]就表示显示器中最左边的第一个有效字符。再用一个变量cur表示光标位置：当前光标位于s[cur]的右边。cur=0说明光标在虚拟字符的右边，也就是显示器的最左边、刚开始要输入的那个位置。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;为了移动光标，还需要用一个变量last表示显示器的最后一个字符是s[last]&lt;span lang=&quot;zh-CN&quot;&gt;。现在思路大概理顺了，实现如下：&lt;br/&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxn = &lt;span&gt;100000&lt;/span&gt;+&lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; last,cur,next[maxn],i;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;&lt;span&gt; s[maxn];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,s+&lt;span&gt;1&lt;/span&gt;)==&lt;span&gt;1&lt;/span&gt;) {       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次输入一个字符，存储地址向后偏移一位&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; n=strlen(s+&lt;span&gt;1&lt;/span&gt;);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;n为当前字符串长度&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         last=cur=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         next[&lt;span&gt;0&lt;/span&gt;]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;n+&lt;span&gt;1&lt;/span&gt;; i++) {     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历每一个字符&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;char&lt;/span&gt; ch=&lt;span&gt;s[i];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(ch==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) cur=&lt;span&gt;0&lt;/span&gt;;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遇到Home键就把光标移到最左边&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(ch==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) cur=last;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遇到End键就把光标移到最后的位置&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;{               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果是文本&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;                 next[i]=&lt;span&gt;next[cur];
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;                 next[cur]=&lt;span&gt;i;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(cur==last)last=i;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新最后一个字符的编号&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;                 cur=i;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;移动光标&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (i=next[&lt;span&gt;0&lt;/span&gt;];i!=&lt;span&gt;0&lt;/span&gt; ;i=next[i])   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于建立好的链表，通过next数组遍历整个处理后的字符串&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;             printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,s[i]);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有哪里感到疑惑的就直接写在评论里吧，我会积极参与讨论的2333&lt;/p&gt;

&lt;p&gt;下一篇写栈。&lt;/p&gt;

&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Sat, 28 Oct 2017 13:56:00 +0000</pubDate>
<dc:creator>仪式黑刃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hongshijie/p/7748098.html</dc:identifier>
</item>
<item>
<title>【JAVA零基础入门系列】Day11 Java中的类和对象 - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/7747587.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/7747587.html</guid>
<description>&lt;p&gt;　　今天要说的是Java中两个非常重要的概念——类和对象。&lt;/p&gt;
&lt;p&gt;　　什么是类，什么又是对象呢？类是对特定集合的概括描述，比如，人，这个类，外观特征上，有名字，有年龄，能说话，能吃饭等等，这是我们作为人类的相同特征，那么对象呢？我们口口声声说要面向对象编程，可是找了这么久也没找到对象，这还怎么编程（滑稽）。此对象非彼对象，Java中的对象是某个具体类的实例，就好比你和我都是人类这个大类的一个实例个体，也就是说，我们都是人类的一个具体对象，我们有各自的名字和年龄。&lt;/p&gt;
&lt;p&gt;　　那为什么要用类和对象这样的概念呢？&lt;/p&gt;
&lt;p&gt;　　这是一个好问题，类是从面向过程编程向面向对象编程转变的产物。以前的程序，用C语言为例子，设计程序是算法+数据结构的集合，先设计算法，然后再选择合适的数据结构去使用算法。而现在面向对象编程则刚好相反，先选择合适的数据结构，再设计相应的算法来解决问题。简单来说，面向过程注重考虑的是事情该怎么做，采用的是上帝视角来处理事情，而面向对象注重的是事情该谁来做，里面的主角是各钟类型的对象。面向过程是由上而下的解决问题，而面向对象则是由下而上&lt;/p&gt;
&lt;p&gt;　　来举一个生动形象的栗子，双十一快到了，该准备剁手了，那具体的剁手步骤呢？&lt;/p&gt;
&lt;p&gt;　　面向过程是这样的：先设置好预算budget，然后选择商品A,B,C,D，一个个加入收藏，等待双十一，付款，完成。一步一步有条不紊的进行。各个商品的名称价格信息分别用两个字符串数组进行存储和处理。&lt;/p&gt;
&lt;p&gt;　　而面向对象则是这样的：因为需要处理的商品数据，因此可以构建一个商品类Goods，商品类有名称，链接，价格等属性，此外还需要进行商品预算管理，因此可以构建一个购物车类Cart，对商品进行预算进行统计管理，添加商品，删除商品等方法，然后再设置一个Money类来对财务进行统一管理，有设置预算，支付等方法，构建好这几个类之后，需要做的就是新建商品对象，往购物车里添加商品对象，然后等待双十一，付款，完成。&lt;/p&gt;
&lt;p&gt;　　面向对象的思想中，主体是对象，通过对象与对象之间的交互来解决问题，就像上面那样，关注的是商品等对象，而面向过程则关注的是如何解决问题，即如何在预算范围内买到合适的商品。&lt;/p&gt;
&lt;p&gt;　　当然，你也许会说，这样一看，似乎面向对象更加复杂也更加麻烦，对于简单的问题，确实如此，因为面向对象的出现本身是为了解决那些复杂的项目，并提供更好的维护方法。所以往往越是复杂的问题，越能体现出面向对象的优越性。那问题来了，既然如此，我举上面那个栗子来打脸干嘛呢？？？切莫着急，等说完后面的内容，最后再来回过头看看这个问题，就知道怎么回事了。&lt;/p&gt;
&lt;p&gt;　　那现在来看看Java中的类到底是什么样的，按惯例先举个小栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
　　String title;
　　&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; price;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里定义了一个最简单的类，因为仅做示例用，它实际上并没有什么卵用，只是为了说明类的一般定义方式，即class+类名后面再接大括号，在大括号里面写上类的属性及方法。这里的title跟price都是在类中定义的，也叫做类成员变量，一般在类的最前端定义我们需要关注的数据变量或者对象，这一部分也称为类的实例域。类定义好了，我们需要使用的话怎么使用呢？这时候需要用到new关键字来创建类的实例，也就是对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Goods goodsA &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Goods();
        goodsA.price&lt;/span&gt;=1.1&lt;span&gt;;
        goodsA.title&lt;/span&gt;=&quot;123&quot;&lt;span&gt;;
        System.out.println(goodsA.price);
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
class Goods{&lt;br/&gt;String title;&lt;br/&gt;double price;&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里是在同一个文件下定义和使用类，而实际上，为了便于管理，通常把每个类放到单独的文件中，并用类名来定义文件名，比如Goods类放到Goods.java文件中，而Test则放在Test.java文件中，那一个文件中引用另一个文件中定义的类，会不会报错呢？答案是不会的，编译器会自动帮我们寻找，只要按规范书写类名及文件名即可。当然使用IDE的话，在开头会声明类所属的包，关于包的概念在之前已有阐述，这里就不做过多介绍了。编译器会自动在包中寻找相应的类。但是需要在Goods的定义前加上public关键字，表示可以被外部类调用。如果需要使用其他包中的类，则需要使用import关键字来导入类，如，import java.util.*；这里的*代表导入java.util下的所有类，导入之后就能像一般类一样正常使用了。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171028190317617-1167854011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171028190341211-1299109890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171028190420586-1489705900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　现在定义的类，只有属性，没有方法，看起来就像是一个将两个数据捆绑在一个类中而已，就像C语言中的struct。接下来，我们要扩展这个类。&lt;/p&gt;
&lt;p&gt;　　首先，我们需要初始化我们的商品标题和价格，这里为了用做介绍，强行使用了初始化块（滑稽）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
    String title;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; price;
    {
        title &lt;/span&gt;= &quot;&quot;&lt;span&gt;;
        price &lt;/span&gt;= 0.0&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　初始化块，顾名思义，就是专门用做初始化的代码块，会在类初始化的时候先于构造器运行，因为某些变量的初始化并不是赋值这么简单，需要经过一些骚操作才能实现，而如果放到构造器中，会显得臃肿，特别是有多个构造器的时候。所以这里的初始化块是大材小用系列。完全可以写成以下形式，这里只是为了介绍初始化块而强行加上的内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
    String title&lt;/span&gt;=&lt;span&gt;”“;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; price=0.0&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来加上一个构造器，什么是构造器？就是构造这个类的一个特殊方法，每个类都至少有一个构造器。那上面的栗子不是没有吗？事实上，如果没有显式的添加构造器方法，系统会提供一个默认的无参构造器，但是这个构造器什么也不做，所以才会毫无存在感。现在我们要赋予它神圣的使命，让它变得有价值起来。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
    String title&lt;/span&gt;=&quot;&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; price=0.0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(String aTitle,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
        price &lt;/span&gt;=&lt;span&gt; aPrice;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　构造器的名称跟类名一致，前面加上public修饰符，小括号内是参数列表，这里用了两个参数，分别用来指定类的title跟price信息。这样，之前Test类就可以这样写了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Goods goodsA &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(&quot;123&quot;,1.1&lt;span&gt;);
        System.out.println(goodsA.price);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样使用起来是不是更加简单粗暴，一般的简单初始化代码也会放到构造器中进行。我们还可以定义多个构造器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
    String title&lt;/span&gt;=&quot;&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; price=0.0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(String aTitle,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
        price &lt;/span&gt;=&lt;span&gt; aPrice;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        price &lt;/span&gt;=&lt;span&gt; aPrice;
        title &lt;/span&gt;= &quot;Goods&quot;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
public class Test{&lt;br/&gt;public static void main(String[] args) {&lt;br/&gt;Goods goodsA = new Goods(&quot;notebook&quot;,1.1);&lt;br/&gt;Goods goodsB = new Goods(2.2);&lt;br/&gt;System.out.println(&quot;goodsA title:&quot;+goodsA.title+&quot; price:&quot;+goodsA.price);&lt;br/&gt;System.out.println(&quot;goodsB title:&quot;+goodsB.title+&quot; price:&quot;+goodsB.price);&lt;br/&gt;}&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样既可以使用两个参数的构造器，也可以使用只有一个参数的构造器，会执行不同的构造器方法。&lt;/p&gt;
&lt;p&gt;　　构造器有了，接下来加上两个方法，用于读取价格和标题，以及设置价格和标题。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
    private String title&lt;/span&gt;=&quot;&quot;&lt;span&gt;;
    private &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; price=0.0&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(String aTitle,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
        price &lt;/span&gt;=&lt;span&gt; aPrice;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        price &lt;/span&gt;=&lt;span&gt; aPrice;
        title &lt;/span&gt;= &quot;Goods&quot;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getTitle(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; title; 
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getPrice(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTitle(String aTitle){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPrice(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        price &lt;/span&gt;=&lt;span&gt; aPrice;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样我们的类就已经很丰满，呸，饱满了。这里我们添加了四个方法，两个方法用于读取成员变量，两个方法用于设置成员变量，此外，我们还将两个成员变量设置成了private，这样这两个成员变量就只能在类的内部的方法中使用，在其他类中是禁止使用的。你可能会问，为什么要弄的这样复杂呢，两个数据直接操作不好吗？这就是封装的意义了，把数据完全封装在类里，只开放接口进行访问和修改，这样类就像一个插座一样，外部代码不需要知道插座里面是什么东西，只需要知道这是三孔插座还是两孔插座，知道怎样使用就可以了，这样的好处在于，可以很方便的进行维护，因为数据形式是容易改变的，但只要提供的接口不改变，其他代码就不需要改变，降低代码之间的依赖程度，这样就能实现模块化的效果。&lt;/p&gt;
&lt;p&gt;　　那现在Test类也需要做相应调整了，因为Goods类成员已经声明为private了，所以只能通过类方法来进行访问。通常把用与访问类成员的方法叫做访问器，设置类成员的方法叫做更改器。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Goods goodsA &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(&quot;notebook&quot;,1.1&lt;span&gt;);
        Goods goodsB &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(2.2&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;goodsA title:&quot;+goodsA.getTitle()+&quot; price:&quot;+&lt;span&gt;goodsA.getPrice());
        System.out.println(&lt;/span&gt;&quot;goodsB title:&quot;+goodsB.getTitle()+&quot; price:&quot;+&lt;span&gt;goodsB.getPrice());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　好了，现在我们的类变得有些厉害了，那如果现在需要将商品链接也加进去，该怎么办呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String title=&quot;&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; price=0.0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String link = &quot;&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(String aTitle,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice,String aLink){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
        price &lt;/span&gt;=&lt;span&gt; aPrice;
        link &lt;/span&gt;=&lt;span&gt; aLink;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(String aTitle,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
        price &lt;/span&gt;=&lt;span&gt; aPrice;
        link &lt;/span&gt;= &quot;www.baidu.com&quot;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        price &lt;/span&gt;=&lt;span&gt; aPrice;
        title &lt;/span&gt;= &quot;Goods&quot;&lt;span&gt;;
        link &lt;/span&gt;= &quot;www.baidu.com&quot;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getTitle(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; title;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getPrice(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLink() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; link;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTitle(String aTitle){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPrice(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        price &lt;/span&gt;=&lt;span&gt; aPrice;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLink(String aLink){
        link &lt;/span&gt;=&lt;span&gt; aLink;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　加上一个成员变量，再加上相应的访问器和更改器即可，当然，这里新增了一个构造器，这样的话，不仅之前的代码仍可以使用，还能使用新方法，骚出新高度。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Goods goodsA &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(&quot;notebook&quot;,1.1&lt;span&gt;);
        Goods goodsB &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(2.2&lt;span&gt;);
        Goods goodsC &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(&quot;Java class&quot;,233,&quot;www.cnblogs.com/mfrank/p/7747587.html&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;goodsA title:&quot;+goodsA.getTitle()+&quot; price:&quot;+goodsA.getPrice()+&quot; link:&quot;+&lt;span&gt;goodsA.getLink());
        System.out.println(&lt;/span&gt;&quot;goodsB title:&quot;+goodsB.getTitle()+&quot; price:&quot;+goodsB.getPrice()+&quot; link:&quot;+&lt;span&gt;goodsB.getLink());
        System.out.println(&lt;/span&gt;&quot;goodsC title:&quot;+goodsC.getTitle()+&quot; price:&quot;+goodsC.getPrice()+&quot; link:&quot;+&lt;span&gt;goodsC.getLink());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样就能输出三个对象的所有信息了，等等，不觉得输出的时候太麻烦了吗，重复三次及以上的地方就需要考虑用一个函数来代替。嗯，来给我们的Goods类加上一个输出方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Goods{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String title=&quot;&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; price=0.0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String link = &quot;&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(String aTitle,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice,String aLink){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
        price &lt;/span&gt;=&lt;span&gt; aPrice;
        link &lt;/span&gt;=&lt;span&gt; aLink;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(String aTitle,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
        price &lt;/span&gt;=&lt;span&gt; aPrice;
        link &lt;/span&gt;= &quot;www.baidu.com&quot;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Goods(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        price &lt;/span&gt;=&lt;span&gt; aPrice;
        title &lt;/span&gt;= &quot;Goods&quot;&lt;span&gt;;
        link &lt;/span&gt;= &quot;www.baidu.com&quot;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getTitle(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; title;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; getPrice(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; price;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getLink() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; link;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTitle(String aTitle){
        title &lt;/span&gt;=&lt;span&gt; aTitle;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPrice(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; aPrice){
        price &lt;/span&gt;=&lt;span&gt; aPrice;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLink(String aLink){
        link &lt;/span&gt;=&lt;span&gt; aLink;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; print(){
        System.out.println(&lt;/span&gt;&quot;title:&quot;+title+&quot; price:&quot;+price+&quot; link:&quot;+&lt;span&gt;link);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Goods goodsA &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(&quot;notebook&quot;,1.1&lt;span&gt;);
        Goods goodsB &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(2.2&lt;span&gt;);
        Goods goodsC &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Goods(&quot;Java class&quot;,233,&quot;www.cnblogs.com/mfrank/p/7747587.html&quot;&lt;span&gt;);
        goodsA.print();
        goodsB.print();
        goodsC.print();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　你看，我们的类定义好之后，主函数里的代码是不是就变得很简单了。这就是封装的好处，封装好以后只需要知道怎样使用就行了，不需要关注内部是怎样实现的。&lt;/p&gt;
&lt;p&gt;　　好了，关于类与对象的内容就说到这了，总结一下，类是某一特定集合的特征描述，对象是类的具体实例，在使用的时候类的时候，需要用new关键字来new一个对象，然后才能使用类方法来操作这个对象。类可以看作是对象的模版，就像一个工厂一样，可以生成衣服，但每件衣服的款式是可以不一样的。&lt;/p&gt;
&lt;p&gt;　　至此，本篇讲解结束，欢迎大家继续关注。&lt;/p&gt;
</description>
<pubDate>Sat, 28 Oct 2017 13:02:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/7747587.html</dc:identifier>
</item>
<item>
<title>UWP Popup 弹出提示框 - 5只猫</title>
<link>http://www.cnblogs.com/MzwCat/p/7748033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MzwCat/p/7748033.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一：需求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;做一个类似于安卓的弹出消息框，如图。当用户点击下载或者选择时，能够从底部弹出一个提示框，用于提示用户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/961655/201710/961655-20171028203149273-2069678668.png&quot; alt=&quot;&quot; width=&quot;825&quot; height=&quot;344&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二：Popup 类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不需要我们自己额外去写一个弹窗类，微软自己有一个Popup 弹窗类。当弹窗打开时，会自动放在当前应用页面的最顶层。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取或设置要在弹出项中承载的内容。&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; UIElement Child { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Popup类里有一个Child属性，用来存弹窗中的内容。&lt;/p&gt;
&lt;p&gt;child的类型是UIElement。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;selflink&quot;&gt;UIElement 是具有可视外观并可以处理基本输入的大多数对象的基类。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;selflink&quot;&gt;因此child属性可以存grid stackpannel 这些......&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//获取或设置弹出项当前是否显示在屏幕上。
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果当前显示了弹出项，则为 **true**；否则为 **false**。 默认值为 **false**。&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; IsOpen { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Popup类还有一个IsOpen属性，当会true的时候，弹窗是打开的。false则相反。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三：ps。。。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当创建一个popup的对象，并且将它的IsOpen属性设置为true的时候，代表将会有一个弹窗 显示在当前应用的最顶层。&lt;/p&gt;
&lt;p&gt;像上面图中的做法，看上去只有一小块是弹窗，其实我的做法是，最顶层的popup的child属性里放的是一个grid，在grid里才是我显示出来的那一小块提示框，因为grid如果没有背景颜色的话，底下一层是会显示的，所以没有什么问题。不会因为盖了一层grid，底下的内容会被盖住。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;四：直接上代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建一个用户控件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span&gt;UserControl
    x:Class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;One.UC.PopupNotice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    xmlns&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.microsoft.com/winfx/2006/xaml/presentation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:x&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.microsoft.com/winfx/2006/xaml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:local&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;using:One.UC&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:d&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.microsoft.com/expression/blend/2008&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:mc&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.openxmlformats.org/markup-compatibility/2006&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    mc:Ignorable&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    d:DesignHeight&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    d:DesignWidth&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;

    &amp;lt;UserControl.Resources&amp;gt;

        &amp;lt;Storyboard x:Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PopupIn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;DoubleAnimation From=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             To&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Duration&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00:00:00.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Storyboard.TargetName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PopupContainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Storyboard.TargetProperty&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Opacity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                             &amp;gt;
                &amp;lt;DoubleAnimation.EasingFunction&amp;gt;
                    &amp;lt;PowerEase EasingMode=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EaseOut&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/PowerEase&amp;gt;
                &amp;lt;/DoubleAnimation.EasingFunction&amp;gt;
            &amp;lt;/DoubleAnimation&amp;gt;
            &amp;lt;DoubleAnimation From=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             To&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Duration&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00:00:00.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Storyboard.TargetName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PopupContainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Storyboard.TargetProperty&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(UIElement.RenderTransform).(TranslateTransform.Y)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                             &amp;gt;
                &amp;lt;DoubleAnimation.EasingFunction&amp;gt;
                    &amp;lt;PowerEase EasingMode=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EaseOut&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/PowerEase&amp;gt;
                &amp;lt;/DoubleAnimation.EasingFunction&amp;gt;
            &amp;lt;/DoubleAnimation&amp;gt;
        &amp;lt;/Storyboard&amp;gt;

        &amp;lt;Storyboard x:Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PopupOut&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;DoubleAnimation From=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             To&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Duration&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00:00:00.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Storyboard.TargetName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PopupContainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Storyboard.TargetProperty&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Opacity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                             &amp;gt;
                &amp;lt;DoubleAnimation.EasingFunction&amp;gt;
                    &amp;lt;PowerEase EasingMode=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EaseOut&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/PowerEase&amp;gt;
                &amp;lt;/DoubleAnimation.EasingFunction&amp;gt;
            &amp;lt;/DoubleAnimation&amp;gt;
            &amp;lt;DoubleAnimation From=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             To&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Duration&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;00:00:00.5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Storyboard.TargetName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PopupContainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                             Storyboard.TargetProperty&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(UIElement.RenderTransform).(TranslateTransform.Y)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                             &amp;gt;
                &amp;lt;DoubleAnimation.EasingFunction&amp;gt;
                    &amp;lt;PowerEase EasingMode=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EaseOut&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/PowerEase&amp;gt;
                &amp;lt;/DoubleAnimation.EasingFunction&amp;gt;
            &amp;lt;/DoubleAnimation&amp;gt;
        &amp;lt;/Storyboard&amp;gt;

    &amp;lt;/UserControl.Resources&amp;gt;

    &amp;lt;Grid&amp;gt;
        
        &amp;lt;StackPanel Background=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#18C3D8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    Padding&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    HorizontalAlignment&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Center&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    VerticalAlignment&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bottom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    Name&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PopupContainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    Opacity&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            
            &amp;lt;!--改变Y轴和透明底--&amp;gt;
            &amp;lt;StackPanel.RenderTransform&amp;gt;
                &amp;lt;TranslateTransform Y=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TranslateTransform&amp;gt;
            &amp;lt;/StackPanel.RenderTransform&amp;gt;
            
            &amp;lt;TextBlock Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PopupContent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/TextBlock&amp;gt;
            
        &amp;lt;/StackPanel&amp;gt;
        
        
    &amp;lt;/Grid&amp;gt;
    
    
&amp;lt;/UserControl&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Runtime.InteropServices.WindowsRuntime;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.Foundation;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.Foundation.Collections;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.UI.Xaml;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.UI.Xaml.Controls;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.UI.Xaml.Controls.Primitives;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.UI.Xaml.Data;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.UI.Xaml.Input;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.UI.Xaml.Media;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Windows.UI.Xaml.Navigation;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The User Control item template is documented at &lt;/span&gt;&lt;span&gt;https://go.microsoft.com/fwlink/?LinkId=234236&lt;/span&gt;

&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; One.UC
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PopupNotice : UserControl
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存放弹出框中的信息&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _popupContent;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个popup对象&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; Popup _popup = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;


        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PopupNotice()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.InitializeComponent();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将当前的长和框 赋值给控件&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.Width =&lt;span&gt; Window.Current.Bounds.Width;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Height =&lt;span&gt; Window.Current.Bounds.Height;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将当前的控价赋值给弹窗的Child属性  Child属性是弹窗需要显示的内容 当前的this是一个Grid控件。&lt;/span&gt;
            _popup = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Popup();
            _popup.Child &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;给当前的grid添加一个loaded事件，当使用了ShowAPopup()的时候，也就是弹窗显示了，这个弹窗的内容就是我们的grid，所以我们需要将动画打开了。&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.Loaded +=&lt;span&gt; PopupNoticeLoaded;

        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 重载
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;popupContentString&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;弹出框中的内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; PopupNotice(&lt;span&gt;string&lt;/span&gt; popupContentString):&lt;span&gt;this&lt;/span&gt;&lt;span&gt;()
        {
            _popupContent &lt;/span&gt;=&lt;span&gt; popupContentString;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 显示一个popup弹窗 当需要显示一个弹窗时，执行此方法
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ShowAPopup()
        {
            _popup.IsOpen &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 弹窗加载好了
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;sender&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;e&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; PopupNoticeLoaded(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, RoutedEventArgs e)
        {
            PopupContent.Text &lt;/span&gt;=&lt;span&gt; _popupContent;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开动画&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.PopupIn.Begin();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当进入动画执行之后，代表着弹窗已经到指定位置了，再指定位置等一秒 就可以消失回去了&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.PopupIn.Completed +=&lt;span&gt; PopupInCompleted;
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 当进入动画完成后 到此
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;sender&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;e&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; PopupInCompleted(&lt;span&gt;object&lt;/span&gt; sender, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; e)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在原地续一秒&lt;/span&gt;
            &lt;span&gt;await&lt;/span&gt; Task.Delay(&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将消失动画打开&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.PopupOut.Begin();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;popout 动画完成后 触发&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.PopupOut.Completed +=&lt;span&gt; PopupOutCompleted;
        }


        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;弹窗退出动画结束 代表整个过程结束 将弹窗关闭&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; PopupOutCompleted(&lt;span&gt;object&lt;/span&gt; sender, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; e)
        {
            _popup.IsOpen &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }


       


    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在要显示一个弹窗的代码里调用ShowAPopup()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 PopupNotice popupNotice = &lt;span&gt;new&lt;/span&gt; PopupNotice(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;正在后台下载......&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
 popupNotice.ShowAPopup();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最终效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/961655/201710/961655-20171028205622367-1402748325.gif&quot; alt=&quot;&quot; width=&quot;698&quot; height=&quot;453&quot;/&gt;&lt;/p&gt;




&lt;p&gt;--------some words----------&lt;/p&gt;
&lt;p&gt;1.Popup  弹出&lt;/p&gt;
&lt;p&gt;2.UIElement  ui元素&lt;/p&gt;
&lt;p&gt;----------the   end------------&lt;/p&gt;

</description>
<pubDate>Sat, 28 Oct 2017 12:59:00 +0000</pubDate>
<dc:creator>5只猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MzwCat/p/7748033.html</dc:identifier>
</item>
<item>
<title>Vim - 常用配置 - Kavlez</title>
<link>http://www.cnblogs.com/kavlez/p/vimrc-tips.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kavlez/p/vimrc-tips.html</guid>
<description>&lt;h2 id=&quot;toc_0&quot;&gt;基本配置&lt;/h2&gt;
&lt;p&gt;不用任何插件的情况下，先按如下配置:&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;set nu
syntax on
set hlsearch

set tabstop=4
set shiftwidth=4
set expandtab
set smartcase
set ic

colorscheme srcery-drk&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;toc_1&quot;&gt;Vundle&lt;/h2&gt;
&lt;p&gt;Vundle是Vim的插件管理器，像NeoBundle也是基于Vundle实现。&lt;br/&gt;虽然Vim插件可以独立安装，但如果换了台机器，使用Vundle只需要copy一份.vimrc即可。&lt;/p&gt;
&lt;p&gt;安装方法并不复杂，先clone到~/.vim目录下:&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在~/.vimrc头部加上以下内容:&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'file:///home/gmarik/path/to/plugin'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

call vundle#end()            &quot; required
filetype plugin indent on    &quot; required&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存，在vim里执行&lt;code&gt;PluginInstall&lt;/code&gt;，等过程执行结束即可。&lt;br/&gt;或者在命令行执行以下命令也是相同的效果:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;vim +PluginInstall +qall&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看帮助:&lt;/p&gt;

&lt;p&gt;在~/.vimrc声明插件，例如:&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;Plugin 'scrooloose/nerdtree'
lugin 'shougo/vimshell.vim'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本命令:&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;&quot; :PluginList       - 列出所有插件
&quot; :PluginInstall    - 安装插件
&quot; :PluginInstall!    - 更新插件
&quot; :PluginSearch foo - 搜索foo插件
&quot; :PluginClean      - 移除未使用插件&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;toc_2&quot;&gt;NerdTree&lt;/h2&gt;
&lt;p&gt;目录树插件，没了这个&lt;/p&gt;
&lt;p&gt;前提安装了Vundle，在~/.vimrc声明了NerdTree:&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;Plugin 'scrooloose/nerdtree'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在vim中执行以下命令即可完成安装:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;:source %
:PluginInstall&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我的NerdTree配置如下:&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;&quot; ============ NERDTree ============
&quot; open NERDTree by default
autocmd vimenter * NERDTree

&quot; synchronize NERDTree with current opened file
autocmd BufEnter * lcd %:p:h

&quot; open NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 &amp;amp;&amp;amp; !exists(&quot;s:std_in&quot;) | NERDTree | endif

&quot; open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 &amp;amp;&amp;amp; isdirectory(argv()[0]) &amp;amp;&amp;amp; !exists(&quot;s:std_in&quot;) | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

&quot; open NERDTree with Ctrl+n
map &amp;lt;C-n&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;

&quot; view the current buffer in NERDTree
map &amp;lt;leader&amp;gt;r :NERDTreeFind&amp;lt;cr&amp;gt;
&quot; close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;amp;&amp;amp; exists(&quot;b:NERDTree&quot;) &amp;amp;&amp;amp; b:NERDTree.isTabTree()) | q | endif

&quot; change arrows
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

&quot; show hidden files by default
let NERDTreeShowHidden=1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NerdTree的常用快捷键:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看帮助&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;呼出菜单，对当前目录进行操作&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;刷新目录&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示、隐藏隐藏文件&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;目录树切全屏&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;go&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打开文件，光标停留在目录树上&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;i&lt;/code&gt;|&lt;code&gt;gi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;水平打开窗口&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;s&lt;/code&gt;|&lt;code&gt;gs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;垂直打开窗口&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt;+&lt;code&gt;h&lt;/code&gt;|&lt;code&gt;j&lt;/code&gt;|&lt;code&gt;k&lt;/code&gt;|&lt;code&gt;l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;方向键选择窗口&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切窗口&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;t&lt;/code&gt;|&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在tab打开窗口&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;gt&lt;/code&gt;|&lt;code&gt;gT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切tab&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br/&gt;如果用git，有个NerdTree的扩展插件，可以在目录树中显示文件的git status。&lt;br/&gt;安装仍然是通过Vundle，插件声明如下:&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;Plugin 'Xuyuanp/nerdtree-git-plugin'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;toc_3&quot;&gt;TagBar&lt;/h2&gt;
&lt;p&gt;个人阅读代码时，如果IDE打开的是另一个工程，一般不会将工程导入IDE再读，而是用Vim读代码。&lt;br/&gt;只是跳转到变量或者函数的功能只是通过&lt;code&gt;gD&lt;/code&gt;的话，跳转的位置并不是很准确。&lt;/p&gt;
&lt;p&gt;TagBar可以生成文件中的变量、函数列表。&lt;/p&gt;
&lt;p&gt;用Vundle安装，在~/.vimrc加上以下声明:&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;Plugin 'majutsushi/tagbar'&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存，执行&lt;code&gt;:PluginsInstall&lt;/code&gt;，等待过程结束。&lt;/p&gt;
&lt;p&gt;个人使用的配置如下:&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-none&quot;&gt;let g:tagbar_width = 30
nmap &amp;lt;F10&amp;gt; :TagbarToggle&amp;lt;CR&amp;gt;
let g:tagbar_autopreview = 1
let g:tagbar_sort = 0&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;source配置文件后，重新进入vim，按下&lt;code&gt;F10&lt;/code&gt;呼出TagBar。&lt;/p&gt;
&lt;p&gt;macOS可能出现以下提示:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Tagbar: Ctags doesn't seem to be Exuberant Ctags!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TagBar依赖Exuberant Ctags 5.5，这种情况&lt;code&gt;brew install ctags&lt;/code&gt;后重新进入vim即可。&lt;/p&gt;
</description>
<pubDate>Sat, 28 Oct 2017 12:27:00 +0000</pubDate>
<dc:creator>Kavlez</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kavlez/p/vimrc-tips.html</dc:identifier>
</item>
</channel>
</rss>