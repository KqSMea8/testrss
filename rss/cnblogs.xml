<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>创建mysql快捷登录方式 - 就听海吧丶</title>
<link>http://www.cnblogs.com/han3159/p/7863034.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/han3159/p/7863034.html</guid>
<description>&lt;p&gt;1.先找到mysql的bin目录,将Mysql.exe发送快捷方式到桌面,到这里还没有完成。&lt;/p&gt;

&lt;p&gt;2.然后右键选择属性，将目标后面添加上 -uroot -p&lt;/p&gt;

&lt;p&gt;我的完整目标如下:&lt;/p&gt;

&lt;p&gt;D:\install\mysql-5.7.20-winx64\bin\mysql.exe -uroot -p&lt;/p&gt;

&lt;p&gt;ps：双击发送到桌面的快捷方式出现窗口如图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1234478/201711/1234478-20171119235354671-650169722.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 15:55:00 +0000</pubDate>
<dc:creator>就听海吧丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/han3159/p/7863034.html</dc:identifier>
</item>
<item>
<title>如何开发一个chrome扩展 - wangmeijian</title>
<link>http://www.cnblogs.com/wangmeijian/p/7862979.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangmeijian/p/7862979.html</guid>
<description>&lt;p&gt;chrome是一个不错的浏览器，web开发者工作中一般都会使用chrome做为默认浏览器，它有很多扩展，给浏览器补充了各种功能，增强了用户体验。chrome具体能干什么？怎么做出来的呢？&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;chrome扩展是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;本质上是HTML+CSS+JavaScript组成的页面，所有文件打包成crx文件，安装到chrome，就可以使用&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;chrome扩展能干什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;chrome扩展可以操作浏览器的书签、cookie、历史记录、右键菜单、tab选项卡、浏览器窗口，甚至可以读取系统信息包括CPU、内存等，扩展借助这些开放的接口，改善网页的实用性，更多信息请戳&lt;a href=&quot;http://open.chrome.360.cn/extension_dev/overview.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;怎么做一个扩展出来？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;新建项目文件夹，在文件夹下新建配置文件manifest.json&lt;/p&gt;
&lt;p&gt;manifest.json配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 强制为数字2，http://open.chrome.360.cn/extension_dev/manifest.html#manifest_version&lt;/span&gt;
    &quot;manifest_version&quot;: 2&lt;span&gt;,
    &lt;/span&gt;&quot;name&quot;: &quot;扩展名称&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;description&quot;: &quot;扩展描述&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;version&quot;: &quot;版本号&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;author&quot;: &quot;作者&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;permissions&quot;: [&quot;需要的权限&quot;&lt;span&gt;],
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 各种尺寸的icon&lt;/span&gt;
    &quot;icons&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;16&quot;: &quot;icon路径&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;48&quot;: &quot;icon路径&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;128&quot;: &quot;icon路径&quot;&lt;span&gt;
    },
    &lt;/span&gt;&quot;browser_action&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;default_popup&quot;: &quot;点击扩展icon弹出的那个HTML页面&quot;&lt;span&gt;
    },
    &lt;/span&gt;&quot;options_page&quot;: &quot;右键扩展icon跳转到扩展的配置HTML页面&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;permissions就是要申请的权限，比如书签&quot;bookmarks&quot;&lt;/p&gt;
&lt;p&gt;之后就可以开始写扩展具体页面和具体功能了，如搜索书签&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
chrome.bookmarks.search(搜索关键字, (result) =&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 操作搜索结果result&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;做的书签复杂的化，可能需要对扩展进行一些个性化配置，比如设置搜索书签的方式是表单值变化立即搜索还是按搜索按钮再搜索，设置结果利用localStorage存储在本地即可，扩展功能页面利用localStorage.getItem读取&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;开发过程中怎么调试？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;打开chrome-更多工具-扩展程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/664733/201711/664733-20171119231948796-1118324124.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击“加载已解压的扩展程序”，选择上面新建的项目文件夹，扩展就自动载入到chrome，在地址栏右侧可以看到一个icon，右键它，选择“审查弹出内容”，找到扩展里的js文件夹就可以打断点调试了。&lt;/p&gt;
&lt;p&gt;扩展程序开发完了，可以打包成crx文件，点击上图“打包扩展程序”选择项目文件夹确定，打包完就可以将crx文件直接发送给身边的人安装体验，还可以发布到chrome网上商店，不过要先交5美元，是的，你提交免费的chrome扩展，还要收你钱，只收一次，不支持微信支付宝。&lt;/p&gt;
&lt;p&gt;希望大家做出好的扩展，参考样例：&lt;a href=&quot;https://github.com/wangmeijian/search_bookmark&quot; target=&quot;_blank&quot;&gt;一个书签搜索扩展&lt;/a&gt;，如果本文对你有帮助，可以给个star鼓励一下。&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 15:41:00 +0000</pubDate>
<dc:creator>wangmeijian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangmeijian/p/7862979.html</dc:identifier>
</item>
<item>
<title>Java8 ArrayList源码分析 - -Finley-</title>
<link>http://www.cnblogs.com/Finley/p/7862919.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Finley/p/7862919.html</guid>
<description>&lt;p&gt;&lt;code&gt;java.util.ArrayList&lt;/code&gt;是最常用的工具类之一, 它是一个线程不安全的动态数组. 本文将对JDK 1.8.0中ArrayList实现源码进行简要分析.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;底层采用&lt;code&gt;Object[]&lt;/code&gt;来存储, 每次添加元素前都会检查数组是否有足够空间容纳新的元素.&lt;/p&gt;
&lt;p&gt;若数组空间不足则会进行扩容操作, 即创建一个容量更大的数组 并将已有的元素复制到新数组中. 默认情况下新数组的容量是当前容量的1.5倍.&lt;/p&gt;
&lt;p&gt;ArrayList使用&lt;code&gt;Arrays.copyOf&lt;/code&gt;和&lt;code&gt;System.arraycopy&lt;/code&gt;调用原生(native)方法进行数组复制, 以提高效率.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;addAll&lt;/code&gt;, &lt;code&gt;removeAll&lt;/code&gt;等方法中通常使用&lt;code&gt;c.toArray&lt;/code&gt;方法来获取容器中所有元素.&lt;/p&gt;
&lt;p&gt;ArrayList提供了&lt;code&gt;iterator()&lt;/code&gt;和&lt;code&gt;listIterator()&lt;/code&gt;两种迭代器, 前者只能向后移动, 而后者可以双向移动.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iterator()&lt;/code&gt;只能删除上一个访问的元素, 而&lt;code&gt;listIterator()&lt;/code&gt;还可以在游标位置添加元素.&lt;/p&gt;
&lt;p&gt;两种迭代器都采用fail-fast机制, 即使用&lt;code&gt;modCount&lt;/code&gt;记录结构性改变(添加删除元素等)的次数, 迭代器在移动前会检查&lt;code&gt;modCount&lt;/code&gt;是否发生改变. 若&lt;code&gt;modCount&lt;/code&gt;改变, 则抛出异常中止迭代. 该方法是为了防止其它线程修改容器造成迭代结果不一致.&lt;/p&gt;
&lt;h2 id=&quot;数据结构与构造器&quot;&gt;数据结构与构造器&lt;/h2&gt;
&lt;p&gt;在介绍构造器之前, 首先介绍一下&lt;code&gt;ArrayList&lt;/code&gt;的数据结构:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 默认初始容量&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; DEFAULT_CAPACITY = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;;

&lt;span class=&quot;co&quot;&gt;/** &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * elementData是实际存储数据的缓冲区&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 其类型为Object[], 即在内部用Object类存储元素在取出时进行类型转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 访问控制为默认(包内访问)是为了便于内部类访问&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * transient关键字表示不对该域进行序列化, ArrayList内部重写了序列化/反序列化方法&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;transient&lt;/span&gt; Object[] elementData; 

&lt;span class=&quot;co&quot;&gt;// 当前元素数目&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; size;

&lt;span class=&quot;co&quot;&gt;// 用于表示空实例的数组 &lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Object[] EMPTY_ELEMENTDATA = {};

&lt;span class=&quot;co&quot;&gt;/** &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 默认构造器使用的空数组&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 当elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA时, 首次添加元素会使elementData扩容到DEFAULT_CAPACITY&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt; 
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来可以阅读&lt;code&gt;ArrayList&lt;/code&gt;的几个构造器:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 按照指定初始容量进行初始化&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ArrayList(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; initialCapacity) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (initialCapacity &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[initialCapacity];
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (initialCapacity == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;co&quot;&gt;// 指定容量为0时使用EMPTY_ELEMENTDATA, 而非重新初始化空数组&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt; = EMPTY_ELEMENTDATA;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// 不允许负容量&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;st&quot;&gt;&quot;Illegal Capacity: &quot;&lt;/span&gt; + initialCapacity);
    }
}

&lt;span class=&quot;co&quot;&gt;/** &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 按照DEFAULT_CAPACITY进行初始化&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 构造时并未实际建立缓冲区, 在首次添加元素时才会扩容到DEFAULT_CAPACITY&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ArrayList() {
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt; = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
}

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 根据其它集合对象创建&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 默认调用Collection.toArray方法, &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 若toArray方法返回类型不是Object[], 则利用Arrays.copyOf进行类型转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ArrayList(Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; E&amp;gt; c) {
    elementData = c.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((size = elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;) != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;co&quot;&gt;// c.toArray might (incorrectly) not return Object[] (see 6260652)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (elementData.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;() != Object[].&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
            elementData = Arrays.&lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(elementData, size, Object[].&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// replace with empty array.&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt; = EMPTY_ELEMENTDATA;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Arrays.copyOf&lt;/code&gt;用于复制数组, 其封装了原生(native)方法&lt;code&gt;System.arraycopy&lt;/code&gt;, 具有很高的效率.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;中广泛使用这两个方法用于扩容, 插入等操作.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &amp;lt;T,U&amp;gt; T[] &lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(U[] original, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; newLength, Class&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; T[]&amp;gt; newType) {
    &lt;span class=&quot;fu&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
    T[] copy = ((Object)newType == (Object)Object[].&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
        ? (T[]) &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[newLength]
        : (T[]) Array.&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;(newType.&lt;span class=&quot;fu&quot;&gt;getComponentType&lt;/span&gt;(), newLength);
    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(original, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, copy, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,
                     Math.&lt;span class=&quot;fu&quot;&gt;min&lt;/span&gt;(original.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;, newLength));
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; copy;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;添加元素&quot;&gt;添加元素&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;的底层数据结构为数组, 每次向其中添加元素前都会检查数组容量是否足够. 若数组已满则会进行扩容操作.&lt;/p&gt;
&lt;p&gt;首先阅读添加单个元素的方法&lt;code&gt;add(E)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 向数组末尾添加一个元素, 返回值代表数组是否改变&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(E e) {
    &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;co&quot;&gt;// Increments modCount!!&lt;/span&gt;
    elementData[size++] = e;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; minCapacity) {
    &lt;span class=&quot;co&quot;&gt;// 对于默认构造器创建的实例, 保证容量不小于DEFAULT_CAPACITY&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
        minCapacity = Math.&lt;span class=&quot;fu&quot;&gt;max&lt;/span&gt;(DEFAULT_CAPACITY, minCapacity);
    }
    &lt;span class=&quot;fu&quot;&gt;ensureExplicitCapacity&lt;/span&gt;(minCapacity);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ensureExplicitCapacity&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; minCapacity) {
    &lt;span class=&quot;co&quot;&gt;// modCount记录了实例发生结构性变化的次数, 用于迭代器的fail-fast机制&lt;/span&gt;
    modCount++;

    &lt;span class=&quot;co&quot;&gt;// overflow-conscious code&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (minCapacity - elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        &lt;span class=&quot;fu&quot;&gt;grow&lt;/span&gt;(minCapacity);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;grow&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; minCapacity) {
    &lt;span class=&quot;co&quot;&gt;// 计算扩容后新容量, 默认为原容量的1.5倍&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; oldCapacity = elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    
    &lt;span class=&quot;co&quot;&gt;// oldCapacity的1.5倍已经溢出, 所以出现反而变小的情况&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (newCapacity - minCapacity &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        newCapacity = minCapacity;
        
    &lt;span class=&quot;co&quot;&gt;// 若大于MAX_ARRAY_SIZE则由hugeCapacity取上限&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (newCapacity - MAX_ARRAY_SIZE &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        newCapacity = &lt;span class=&quot;fu&quot;&gt;hugeCapacity&lt;/span&gt;(minCapacity);

    &lt;span class=&quot;co&quot;&gt;// 创建新数组并把原有元素移动到新数组中        &lt;/span&gt;
    elementData = Arrays.&lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(elementData, newCapacity);
}
    
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hugeCapacity&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; minCapacity) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (minCapacity &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// overflow&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; OutOfMemoryError();
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (minCapacity &amp;gt; MAX_ARRAY_SIZE) ?
        Integer.&lt;span class=&quot;fu&quot;&gt;MAX_VALUE&lt;/span&gt; :
        MAX_ARRAY_SIZE;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在制定位置添加元素的&lt;code&gt;add(index, e)&lt;/code&gt;方法非常类似:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index, E element) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheckForAdd&lt;/span&gt;(index);

    &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;co&quot;&gt;// Increments modCount!!&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// elementData类型一定为Object[], 不用Arrays.copyOf进行类型检查直接调用System.arraycopy即可&lt;/span&gt;
    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, index, elementData, index + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,
                     size - index);
    elementData[index] = element;
    size++;
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;rangeCheckForAdd&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (index &amp;gt; size || index &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IndexOutOfBoundsException(&lt;span class=&quot;fu&quot;&gt;outOfBoundsMsg&lt;/span&gt;(index));
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;addAll&lt;/code&gt;方法调用&lt;code&gt;c.toArray&lt;/code&gt;获取c中所有元素:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; E&amp;gt; c) {
    Object[] a = c.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numNew = a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;;
    &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size + numNew);  &lt;span class=&quot;co&quot;&gt;// Increments modCount&lt;/span&gt;
    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(a, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, elementData, size, numNew);
    size += numNew;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; numNew != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index, Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; E&amp;gt; c) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheckForAdd&lt;/span&gt;(index);

    Object[] a = c.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numNew = a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;;
    &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size + numNew);  &lt;span class=&quot;co&quot;&gt;// Increments modCount&lt;/span&gt;

    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numMoved = size - index;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (numMoved &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, index, elementData, index + numNew,
                         numMoved);

    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(a, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, elementData, index, numNew);
    size += numNew;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; numNew != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;访问元素&quot;&gt;访问元素&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;get&lt;/code&gt;方法可以访问指定位置的元素:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheck&lt;/span&gt;(index);

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;(index);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;rangeCheck&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (index &amp;gt;= size)
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IndexOutOfBoundsException(&lt;span class=&quot;fu&quot;&gt;outOfBoundsMsg&lt;/span&gt;(index));
}

E &lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (E) elementData[index];
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;方法用于修改某位置的元素, 未发生结构性改变不会修改&lt;code&gt;modCount&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index, E element) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheck&lt;/span&gt;(index);

    E oldValue = &lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;(index);
    elementData[index] = element;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; oldValue;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toArray&lt;/code&gt;方法可以将&lt;code&gt;ArrayList&lt;/code&gt;中所有元素作为数组返回:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object[] &lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Arrays.&lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(elementData, size);
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T[] &lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;(T[] a) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &amp;lt; size)
        &lt;span class=&quot;co&quot;&gt;// Make a new array of a's runtime type, but my contents:&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (T[]) Arrays.&lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(elementData, size, a.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;());
    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, a, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, size);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &amp;gt; size)
        a[size] = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; a;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出于类型安全的原因, 建议使用第二个&lt;code&gt;toArray&lt;/code&gt;方法:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;List&amp;lt;String&amp;gt; list = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
&lt;span class=&quot;co&quot;&gt;// add sth in list&lt;/span&gt;
String[] arr = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[list.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;()];
arr = list.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;(arr);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;删除元素&quot;&gt;删除元素&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;remove(index)&lt;/code&gt;方法用于移除指定位置的元素:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheck&lt;/span&gt;(index);

    modCount++;
    E oldValue = &lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;(index);

    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numMoved = size - index - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (numMoved &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, index&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;, elementData, index,
                             numMoved);
    elementData[--size] = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// clear to let GC do its work&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; oldValue;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;System.arraycopy&lt;/code&gt;将index后面的元素向前移动一位, 覆盖被删除的元素.&lt;/p&gt;
&lt;p&gt;将最后位置上的元素设为null便于GC进行回收.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;remove(obj)&lt;/code&gt;方法会移除第一个与obj相同的元素, 相同关系使用&lt;code&gt;obj.equals&lt;/code&gt;方法来判断:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;(Object o) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; index &amp;lt; size; index++)
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (elementData[index] == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;fu&quot;&gt;fastRemove&lt;/span&gt;(index);
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            }
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; index &amp;lt; size; index++)
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(elementData[index])) {
                &lt;span class=&quot;fu&quot;&gt;fastRemove&lt;/span&gt;(index);
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            }
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fastRemove&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    modCount++;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numMoved = size - index - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (numMoved &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, index&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;, elementData, index,
                         numMoved);
    elementData[--size] = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// clear to let GC do its work&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;removeAll(c)&lt;/code&gt;方法移除所有包含在容器c中的元素, &lt;code&gt;retainAll(c)&lt;/code&gt;方法移除所有未包含在容器c中的元素.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;removeAll&lt;/span&gt;(Collection&amp;lt;?&amp;gt; c) {
     Objects.&lt;span class=&quot;fu&quot;&gt;requireNonNull&lt;/span&gt;(c);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;batchRemove&lt;/span&gt;(c, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;retainAll&lt;/span&gt;(Collection&amp;lt;?&amp;gt; c) {
    Objects.&lt;span class=&quot;fu&quot;&gt;requireNonNull&lt;/span&gt;(c);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;batchRemove&lt;/span&gt;(c, &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际完成该操作的是&lt;code&gt;batchRemove&lt;/code&gt;方法:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;batchRemove&lt;/span&gt;(Collection&amp;lt;?&amp;gt; c, &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; complement) {
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Object[] elementData = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; r = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, w = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; modified = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// 遍历ArrayList, 使用`c.contains`判断是否包含&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (; r &amp;lt; size; r++)
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (c.&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(elementData[r]) == complement)
                &lt;span class=&quot;co&quot;&gt;// 将需要保留的元素移动到数组前部&lt;/span&gt;
                elementData[w++] = elementData[r];
    } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// 保持与AbstractCollection的行为一致&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 即使c.contains抛出异常仍完成操作&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (r != size) {
            &lt;span class=&quot;co&quot;&gt;// r != size 说明发生了contains异常. &lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 将后部未判断的部分移动到前面予以保留&lt;/span&gt;
            System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, r,
                             elementData, w,
                             size - r);
            w += size - r;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (w != size) {
            &lt;span class=&quot;co&quot;&gt;// w != size 说明有元素被删除, 执行清理&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = w; i &amp;lt; size; i++)
                elementData[i] = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
            modCount += size - w;
            size = w;
            modified = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; modified;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;迭代器&quot;&gt;迭代器&lt;/h2&gt;
&lt;p&gt;ArrayList提供了两个迭代器: &lt;code&gt;iterator()&lt;/code&gt;和&lt;code&gt;listIterator()&lt;/code&gt;. 它们都采用fail-fast机制, 即当迭代器遍历过程中容器发生结构性改变时, next方法会抛出&lt;code&gt;ConcurrentModificationException&lt;/code&gt;异常, 终止迭代.&lt;/p&gt;
&lt;p&gt;所谓结构性改变是指&lt;code&gt;modCount&lt;/code&gt;发生改变的情况, 所有的add, removey操作以及&lt;code&gt;clear()&lt;/code&gt;方法都会修改&lt;code&gt;modCount&lt;/code&gt;. fail-fast机制主要为了应对其它线程修改容器导致的不一致问题.&lt;/p&gt;
&lt;p&gt;首先阅读&lt;code&gt;iterator()&lt;/code&gt;源码:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 获得迭代器实例&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Iterator&amp;lt;E&amp;gt; &lt;span class=&quot;fu&quot;&gt;iterator&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Itr&lt;/span&gt;();
}

&lt;span class=&quot;co&quot;&gt;// 迭代器内部实现类&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Itr &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Iterator&amp;lt;E&amp;gt; {
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; cursor;       &lt;span class=&quot;co&quot;&gt;// 下一个要返回元素的下标&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; lastRet = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// 上一个返回元素的下标, 默认为-1.&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; expectedModCount = modCount;

    &lt;span class=&quot;co&quot;&gt;// 检查是否可以继续遍历&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hasNext&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cursor != size;
    }

    &lt;span class=&quot;co&quot;&gt;// 返回cursor指向的元素, 并将cursor后移一个位置&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// 检查modCount是否一致&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = cursor;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;gt;= size)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NoSuchElementException();
        Object[] elementData = ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;gt;= elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        cursor = i + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (E) elementData[lastRet = i];
    }

    &lt;span class=&quot;co&quot;&gt;// 删除上一次返回的元素&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// 检查是否返回过元素(成功调用过next方法), 且该元素未被删除&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lastRet &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException();
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// 删除元素&lt;/span&gt;
            ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;(lastRet);
            &lt;span class=&quot;co&quot;&gt;// 修正游标位置&lt;/span&gt;
            cursor = lastRet;
            &lt;span class=&quot;co&quot;&gt;// 标记上次返回的元素已被删除, 避免误删&lt;/span&gt;
            lastRet = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;co&quot;&gt;// 更新expectedModCount, 保证迭代器可以继续执行&lt;/span&gt;
            expectedModCount = modCount;
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IndexOutOfBoundsException ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        }
    }
    
   &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;listIterator()&lt;/code&gt;可以双向移动, 除了删除元素外还可以在游标位置添加元素:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ListIterator&amp;lt;E&amp;gt; &lt;span class=&quot;fu&quot;&gt;listIterator&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ListItr&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ListItr &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Itr &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; ListIterator&amp;lt;E&amp;gt; {
    &lt;span class=&quot;fu&quot;&gt;ListItr&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;();
        cursor = index;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hasPrevious&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cursor != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;nextIndex&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cursor;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;previousIndex&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cursor - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;previous&lt;/span&gt;() {
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = cursor - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NoSuchElementException();
        Object[] elementData = ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;gt;= elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        cursor = i;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (E) elementData[lastRet = i];
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(E e) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lastRet &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException();
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(lastRet, e);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IndexOutOfBoundsException ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(E e) {
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = cursor;
            ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(i, e);
            cursor = i + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            lastRet = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            expectedModCount = modCount;
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IndexOutOfBoundsException ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;还有两个内部类用于处理子序列操作:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;SubList extends AbstractList&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrayListSpliterator&amp;lt;E&amp;gt; implements Spliterator&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;序列化&quot;&gt;序列化&lt;/h2&gt;
&lt;p&gt;ArrayList的序列化会写入&lt;code&gt;modCount&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;和实际的元素. 同样会检查&lt;code&gt;modCount&lt;/code&gt;是否一致, 以避免并发问题.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;writeObject&lt;/span&gt;(java.&lt;span class=&quot;fu&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ObjectOutputStream&lt;/span&gt; s)
    &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; java.&lt;span class=&quot;fu&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;IOException&lt;/span&gt;{
    &lt;span class=&quot;co&quot;&gt;// Write out element count, and any hidden stuff&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; expectedModCount = modCount;
    s.&lt;span class=&quot;fu&quot;&gt;defaultWriteObject&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;// Write out size as capacity for behavioural compatibility with clone()&lt;/span&gt;
    s.&lt;span class=&quot;fu&quot;&gt;writeInt&lt;/span&gt;(size);

    &lt;span class=&quot;co&quot;&gt;// Write out all elements in the proper order.&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i&amp;lt;size; i++) {
        s.&lt;span class=&quot;fu&quot;&gt;writeObject&lt;/span&gt;(elementData[i]);
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount) {
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义序列化机制的根本目的在于避免写入无意义的字段. &lt;code&gt;readObject&lt;/code&gt;也按照同样的策略进行重写:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(java.&lt;span class=&quot;fu&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ObjectInputStream&lt;/span&gt; s)
    &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; java.&lt;span class=&quot;fu&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;IOException&lt;/span&gt;, ClassNotFoundException {
    elementData = EMPTY_ELEMENTDATA;

    &lt;span class=&quot;co&quot;&gt;// Read in size, and any hidden stuff&lt;/span&gt;
    s.&lt;span class=&quot;fu&quot;&gt;defaultReadObject&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;// Read in capacity&lt;/span&gt;
    s.&lt;span class=&quot;fu&quot;&gt;readInt&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// ignored&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (size &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;co&quot;&gt;// be like clone(), allocate array based upon size not capacity&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size);

        Object[] a = elementData;
        &lt;span class=&quot;co&quot;&gt;// Read in all elements in the proper order.&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i&amp;lt;size; i++) {
            a[i] = s.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 19 Nov 2017 15:16:00 +0000</pubDate>
<dc:creator>-Finley-</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Finley/p/7862919.html</dc:identifier>
</item>
<item>
<title>漫淡面向对象——POJO对象 - 庄君祥</title>
<link>http://www.cnblogs.com/ansn001/p/7862470.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ansn001/p/7862470.html</guid>
<description>&lt;p&gt;产品或者服务由数据存储和数据计算组成。pojo对象就是用于数据存储。一旦确定后，整个应用或者产品的数据来源就确定。比如一个页面或者功能需要使用什么数据就可以快速找到对应的对象或者通过对象的关系找出来。&lt;/p&gt;
&lt;p&gt;pojo对象属于对系统的静态描述。它应该是名词，不应该是动词或者其他。动词、类型或者状态等应该是算法类型的对象，权限应该是AOP考虑的，在后面的漫谈里还会详细提到。&lt;/p&gt;

&lt;p&gt;对领域的客观描述反应。比如说：教育领域，农业领域，电商领域，零食领域等。这些只要领域背景没有变化，就会是客观稳定的。当然不同的产品的商业模式对同一个领域的理解也会不同，这些是会经常变化的，但是通常也只是体现在流程、类型、算法、功能等上面，这些并不影响pojo对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所有人在沟通的时候理解一致&lt;/li&gt;
&lt;li&gt;每个对象职责单一、明确、不可替代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了快速区分属性，并且快速找到真正的pojo对象和属性。这些属性可以在产品里的新增、详情、列表等功能里得到体现。&lt;/p&gt;
&lt;h2 id=&quot;自描述&quot;&gt;自描述&lt;/h2&gt;
&lt;p&gt;一般体现出来的就是手动输入。比如：名称，标题等。&lt;/p&gt;
&lt;h2 id=&quot;关联&quot;&gt;关联&lt;/h2&gt;
&lt;p&gt;有依赖来源，即在别的地方是手动输入，但是当前功能是选择。比如：选择地区，选择类型。&lt;/p&gt;
&lt;h2 id=&quot;冗余&quot;&gt;冗余&lt;/h2&gt;
&lt;p&gt;方便查询，减少复杂度。一般有以下情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一旦生成不会变化的，可以考虑冗余，因为这样可以减少复杂度。&lt;/li&gt;
&lt;li&gt;偏统计类。比如：视频里冗余评论数购买数。&lt;/li&gt;
&lt;li&gt;为了减少不同类型表的依赖。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;功能&quot;&gt;功能&lt;/h2&gt;
&lt;p&gt;个性化业务，纯粹是为了做功能&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;只留自描述，这个很难。需要深层次了解领域。通过领域驱动设计。这样可以通过面向对象，通过很少的关注点，对整个系统有个静态的认识。而且还可以判断出产品变更的时候对整个系统的结构（即数据存储）有什么影响。特别是出现新名词的时候。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;需要根据产品的实际情况来判断这些属性怎么规划。如果是想要快速、简单，但是4种类型都放到pojo上，开发是最快的，但是同时肯定也是扩展性最差的。也需要根据产品的真实需求来判断怎么处理后面3种类型的属性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多童鞋打着面向对象的幌子干着面向过程的事。在抽取名词的时候同时又考虑算法、流程、权限等。这样一来关注点几何倍数增长，本来应该用于考虑pojo对象是否合理的时间更没办法充分得到利用。&lt;/p&gt;
&lt;p&gt;很多童鞋想成一次就把对象抽取出来。实现上抽取比印象中还要复杂。所以建议的是分步骤，按部就班的去抽取才是最快的办法。&lt;/p&gt;
&lt;h2 id=&quot;枚举&quot;&gt;枚举&lt;/h2&gt;
&lt;p&gt;只是把产品里涉及到的所有名词枚举出来。&lt;br/&gt;下面是枚举时的陷阱：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;不要去通过自己的理解去修改名词叫法&lt;/li&gt;
&lt;li&gt;不要去忽略自己觉得不重要的名词&lt;/li&gt;
&lt;li&gt;不要考虑表怎么存储&lt;/li&gt;
&lt;li&gt;不要考虑非名词&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些陷阱很容易让后期返工。&lt;/p&gt;
&lt;h2 id=&quot;删除&quot;&gt;删除&lt;/h2&gt;
&lt;p&gt;删除和产品（领域）无关的名词。比如：文案可能出现了&lt;code&gt;故宫&lt;/code&gt;或者平台名等和本领域无关的名词。&lt;/p&gt;
&lt;h2 id=&quot;去重&quot;&gt;去重&lt;/h2&gt;
&lt;p&gt;必需确保每个名词都是职责单一，不可替代的。&lt;br/&gt;一般去重的特征如下：不同的名词体现出来的属性，功能和生命周期是一样的，只是描述不同。&lt;br/&gt;比如： 不同角色的人在对同一个名词描述不同，他们在新增的时候属性相似度非常高，流程也特别像。&lt;/p&gt;
&lt;p&gt;一般的反问自己或者产品：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;它们的不同点在哪？&lt;/li&gt;
&lt;li&gt;如果改一个地方，另一个地方会不会需要同时修改？&lt;/li&gt;
&lt;li&gt;如果把它们做成一样会有什么问题吗？&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;添加&quot;&gt;添加&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;在描述一个概念的时候，必须通过非常多其他对象，而且经常提。&lt;/li&gt;
&lt;li&gt;虽然产品没有提过，但是在实施的时候发生有很多对象有一样的特性。常见情况：
&lt;ul&gt;&lt;li&gt;一个列表涉及到非常多的名词，但是列表本身产品并没有体现概念。&lt;/li&gt;
&lt;li&gt;不同的名词，他们的属性很雷同，而且生命周期几乎是一样的，有种几条平行线的感觉。比如说：同样要新增、发布、审核等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;聚合&quot;&gt;聚合&lt;/h2&gt;
&lt;p&gt;把属性名词聚合到对象名词里。这里务必确认只放自描述属性。其他的属性暂时不考虑，因为可以很方便的通过关系来描述，而且这个也经常会变化。&lt;/p&gt;

&lt;p&gt;如果有以下的情况说明对象分析的不够合理，后面很容易返工，请务必重视。&lt;/p&gt;
&lt;h2 id=&quot;单方面描述&quot;&gt;单方面描述&lt;/h2&gt;
&lt;p&gt;有一方有一直在说，但是另一方从来不提。说明这里缺少重要名词。&lt;/p&gt;
&lt;h2 id=&quot;描述不一致&quot;&gt;描述不一致&lt;/h2&gt;
&lt;p&gt;在描述同一名词的时候，往往需求进一步翻译。&lt;br/&gt;这样可能会出现的问题是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;沟通和维护成本增加&lt;/li&gt;
&lt;li&gt;很可能缺少重要信息或者说关系理解的不对等。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;组合描述&quot;&gt;组合描述&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;用多个词来描述一个概念。需要一个新词。&lt;/li&gt;
&lt;li&gt;一个概念没有具体自描述，而是关系出来的，但是又是沟通描述时经常出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;《UML基础，应用与案例》&lt;/li&gt;
&lt;li&gt;《领域驱动设计》&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 19 Nov 2017 14:14:00 +0000</pubDate>
<dc:creator>庄君祥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ansn001/p/7862470.html</dc:identifier>
</item>
<item>
<title>记录一下通过分析Tomcat内部jar包找出request.getReader()所用的字符编码在哪里设置和起效的完整分析流程 - 孤竹牧歌</title>
<link>http://www.cnblogs.com/silentdoer/p/7862426.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/silentdoer/p/7862426.html</guid>
<description>&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;　　之前写Java服务端处理POST请求时遇到了请求体转换成字符流所用编码来源的疑惑，在doPost方法里通过request.getReader()获取的BufferedReader对象内部的&lt;/p&gt;
&lt;p&gt;Reader用的是什么编码将字节流转换成字符流的呢？又是在哪里设置呢和什么时候生效的呢？通过查找资料，我了解到通过HttpServletRequest对象获得请求体数据&lt;/p&gt;
&lt;p&gt;有三种方法，其中两种是不管HTTP请求头设置Content-Type为何值都能够在不重复获取输入流的前提下获取到数据的，一个是request.getInputStream()，一个是request.getReader()；&lt;/p&gt;
&lt;p&gt;对于前者我们可以在其上面套一个InputStreamReader并设置编码便能正确读取出字符数据，但是对于后者猜测是通过request.setCharacterEncoding(charsetName);来设置；但是当时&lt;/p&gt;
&lt;p&gt;挺想知道这两句代码是怎么关联起来的，于是就开始了读源码的过程。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;　　最开始的时候我是想通过request.getReader()来找出答案，于是通过打印request.getClass().toString()，知道了request对象真正的类是org.apache.catalina.connector.RequestFacade，&lt;/p&gt;
&lt;p&gt;通过名字最终找出这个类是Tomcat安装目录中lib目录下的catalina.jar，导入到项目找出RequestFacade.getReader()的源码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; BufferedReader getReader() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.request == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(sm.getString(&quot;requestFacade.nullRequest&quot;&lt;span&gt;));
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;span&gt;request.getReader();&lt;/span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后找出this.request的类是org.apache.catalina.connector.Request，通过RequestFacade构造方法初始化，接着找到org.apache.catalina.connector.Request.getReader()的代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; BufferedReader getReader() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.usingInputStream) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(sm.getString(&quot;coyoteRequest.getReader.ise&quot;&lt;span&gt;));
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.usingReader = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.inputBuffer.&lt;span&gt;checkConverter()&lt;/span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.reader == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.reader = &lt;span&gt;new&lt;/span&gt; CoyoteReader(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;span&gt;inputBuffer&lt;/span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.reader;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里注意this.inputBuffer.checkConverter();这里将会把request.setCharacter(charsetName)设置的编码应用在字节流转换为字符串的过程上，这个过程后面再讲。&lt;/p&gt;
&lt;p&gt;我们先看new CoyoteReader(this.inputBuffer);由于CoyoteBuffer是继承自BufferedReader，故真正将字节流转换为字符流的应该是this.inputBuffer，&lt;/p&gt;
&lt;p&gt;查看代码得知它的类型为：org.apache.catalina.connector.InputBuffer，类定义为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; InputBuffer &lt;span&gt;extends&lt;/span&gt; Reader &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ByteInputChannel, CharInputChannel, CharOutputChannel {
。。。。。
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于它和InputStreamReader有共同的父类Reader，故我猜测将字节流转换成字符流的应该就是InputBuffer类了，但是线索到了就断了我不知道接下来该看哪里了（后来理清思路后发现其实应该往上找看InputBuffer是在哪创建及赋值的），&lt;/p&gt;
&lt;p&gt;于是我回到最初的猜测，request.getReader()是通过request.setCharacterEncoding(charsetName)来实现的；通过查看request.setCharacterEncoding(charsetName)源码&lt;/p&gt;
&lt;p&gt;得知RequestFacade设置字符编码是通过内部的org.apache.catalina.connector.Request，而这个Request又是通过内部的org.apache.coyote.Request来实现的，导入所需jar包：tomcat-coyote.jar&lt;/p&gt;
&lt;p&gt;其中coyoteRequest.setCharacterEncoding(charsetName)的代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCharacterEncoding(String enc) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.charEncoding =&lt;span&gt; enc;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到了这里后线索又断了，我只知道最初RequestFacade设置的编码最终是保存在org.apache.catalina.connector.Request里，但是这个编码是什么时候用到了InputBuffer上就不知道了。&lt;/p&gt;
&lt;p&gt;趁着这阶段还弄清楚了RequestFacade无论是设置编码、获得编码、getContentLength()等方法本质上都是通过org.apache.coyote.Request来最终实现的。&lt;/p&gt;
&lt;p&gt;回到正题，线索断了以后我后来通过找到是哪里new了InputBuffer及是哪里给InputBuffer设置编码和字节流等思考继续回到了org.apache.catalina.connector.Request类的定义里，&lt;/p&gt;
&lt;p&gt;通过搜索发现org.apache.catalina.connector.Request内部的this.inputBuffer是在构造方法里创建的，但是只有一个空壳，而RequestFacade.getInputStream()最终也是以this.inputBuffer作为了&lt;/p&gt;
&lt;p&gt;字节流的参数new CoyoteInputStream(this.inputBuffer);故它可能本身既能读取字符流又能读取字节流，即它是存储着第一手的数据。&lt;/p&gt;
&lt;p&gt;接着找到了org.apache.catalina.connector.Request中的一个方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCoyoteRequest(org.apache.coyote.Request coyoteRequest) {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.coyoteRequest =&lt;span&gt; coyoteRequest;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.inputBuffer.setRequest(coyoteRequest);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我之前一直钻进找InputBuffer编码的巷道里，忘了找coyoteRequest这么重要的属性是从哪赋值的了，经过搜查org.apache.catalina.connector.Request里只有这个set方法可以给this.coyoteRequest赋值，故这个set方法&lt;/p&gt;
&lt;p&gt;一定会执行，也就是说this.inputBuffer.setRequest(coyoteRequest);会执行，而coyoteRequest里保存着RequestFacade设置的编码，故而InputBuffer里需要的编码来源有了。&lt;/p&gt;
&lt;p&gt;接着看InputBuffer里哪里会用到这个coyoteRequest，找了一下InputBuffer里一大堆方法都用到了coyoteRequest，经过一番思考想到外部程序是通过BufferedReader来读取字符流的，而BufferedReader读取字符流又是&lt;/p&gt;
&lt;p&gt;通过构造方法初加载的的Reader来读取的，即是通过InputBuffer的Read(char[]....)方法读取数据的，故找到InputBuffer中的这个方法，定义如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; read(&lt;span&gt;char&lt;/span&gt;[] cbuf, &lt;span&gt;int&lt;/span&gt; off, &lt;span&gt;int&lt;/span&gt; len) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.closed) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IOException(sm.getString(&quot;inputBuffer.streamClosed&quot;&lt;span&gt;));
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cb.substract(cbuf, off, len);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可见InputBuffer读取字符流又是通过this.cb的substract方法读取的，查找代码得知cb是CharChunk类，导入jar包：tomcat-util.jar，CharChunk.substract的源码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; substract(&lt;span&gt;char&lt;/span&gt;[] src, &lt;span&gt;int&lt;/span&gt; off, &lt;span&gt;int&lt;/span&gt; len) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.end - &lt;span&gt;this&lt;/span&gt;.start == 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.in == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
            }

            n &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.in.realReadChars(&lt;span&gt;this&lt;/span&gt;.buff, &lt;span&gt;this&lt;/span&gt;.end, &lt;span&gt;this&lt;/span&gt;.buff.length - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.end);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n &amp;lt; 0&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
            }
        }

        n &lt;/span&gt;=&lt;span&gt; len;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (len &amp;gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getLength()) {
            n &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getLength();
        }

        System.arraycopy(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.buff, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.start, src, off, n);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.start +=&lt;span&gt; n;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; n;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里面的this.in.realReadChars(...)很关键，从名字可以猜测这个是真正读取字符数组的方法，然后通过查找，this.in就是之前的InputBuffer对象。&lt;/p&gt;
&lt;p&gt;然后我通过看CharChunk的代码，发现this.start和this.end最初值为0，故第一次调用此方法时会执行this.in.realReadChars(...)，我们来看这个方法定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; realReadChars(&lt;span&gt;char&lt;/span&gt;[] cbuf, &lt;span&gt;int&lt;/span&gt; off, &lt;span&gt;int&lt;/span&gt; len) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.gotEnc) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setConverter();
        }

        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; eof = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.bb.getLength() &amp;lt;= 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; nRead = &lt;span&gt;this&lt;/span&gt;.realReadBytes(&lt;span&gt;this&lt;/span&gt;.bb.getBytes(), 0, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.bb.getBytes().length);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nRead &amp;lt; 0&lt;span&gt;) {
                eof &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.markPos == -1&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cb.setOffset(0&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cb.setEnd(0&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cb.makeSpace(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.bb.getLength());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.cb.getBuffer().length - &lt;span&gt;this&lt;/span&gt;.cb.getEnd() == 0 &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.bb.getLength() != 0&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cb.setOffset(0&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cb.setEnd(0&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.markPos = -1&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state = 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.conv.convert(&lt;span&gt;this&lt;/span&gt;.bb, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cb, eof);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.cb.getLength() == 0 &amp;amp;&amp;amp; eof ? -1 : &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cb.getLength();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过查看代码发现this.goEnc初始为false，只有this.setConverter()后才变为true，故第一次会执行setConverter()，再来看setConverter()的源码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setConverter() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.coyoteRequest != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.enc = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.coyoteRequest.getCharacterEncoding();
        }

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.gotEnc = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.enc == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.enc = &quot;ISO-8859-1&quot;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.conv = (B2CConverter)&lt;span&gt;this&lt;/span&gt;.encoders.get(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.enc);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.conv == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (SecurityUtil.isPackageProtectionEnabled()) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.conv = (B2CConverter)AccessController.doPrivileged(&lt;span&gt;new&lt;/span&gt; PrivilegedExceptionAction&amp;lt;B2CConverter&amp;gt;&lt;span&gt;() {
                        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; B2CConverter run() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; B2CConverter(InputBuffer.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.enc);
                        }
                    });
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (PrivilegedActionException var3) {
                    Exception e &lt;/span&gt;=&lt;span&gt; var3.getException();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; IOException) {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; (IOException)e;
                    }
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.conv = &lt;span&gt;new&lt;/span&gt; B2CConverter(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.enc);
            }

            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.encoders.put(&lt;span&gt;this&lt;/span&gt;.enc, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.conv);
        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有代码：this.enc = this.coyoteRequest.getCharacterEncoding();&lt;/p&gt;
&lt;p&gt;并且通过this.enc初始化了一个B2CConverter对象，从名字可猜测这个类是将字节流转换成字符流的转换器；&lt;/p&gt;
&lt;p&gt;我们回到realReadChars(...)的源码里有必执行的代码：this.conv.convert(this.bb, this.cb, eof);&lt;/p&gt;
&lt;p&gt;这个代码是将this.bb转换生成字符流数据到this.cb里（bb是ByteChunk对象），至此可知将字节流转换成字符流是通过InputBuffer的this.conv.convert(...)转换，而字符编码则是通过setConverter()来获取coyoteRequest的编码进行设置在this.conv里，且&lt;/p&gt;
&lt;p&gt;setConverter()只执行一次，因为setConverter()内部会将this.gotEnc = true;，故我们需要找出最早执行setConverter()地方，发现除了realReadChars()还有checkConverter()方法也会执行setConverter()方法，而&lt;/p&gt;
&lt;p&gt;checkConverter()方法在org.apache.catalina.connector.Request.getReader()方法里就会执行，故可以得知必需先调用RequestFacade.setCharacterEncoding(charsetName)方法再执行getReader()方法，顺序错了设置的编码将不会起效于Reader中，&lt;/p&gt;
&lt;p&gt;对于ResponseFacade.getWriter()也是一样。&lt;/p&gt;
</description>
<pubDate>Sun, 19 Nov 2017 14:08:00 +0000</pubDate>
<dc:creator>孤竹牧歌</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/silentdoer/p/7862426.html</dc:identifier>
</item>
<item>
<title>第二篇-FPGA学习之RoadMap - lobster1989</title>
<link>http://www.cnblogs.com/lobster89/p/7860170.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lobster89/p/7860170.html</guid>
<description>&lt;p&gt;古语云：知己知彼，百战不殆。那么既然选择了FPGA之路，欲练此功，必先……&lt;/p&gt;
&lt;p&gt;必先了解清楚，FPGA的特点，FPGA善于/不善于解决什么类型问题，以及FPGA应用的方向，FPGA学习的要素等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、FPGA的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;理论上，通用MCU/CPU和数字ASIC能够做的事，FPGA都能做，甚至可以利用FPGA内部资源实现一个CPU，也即是通常所说“软核”。但这几个既然能够共存，实际上都有各自适合和不适合的领域。CPU/MCU为通用任务设计，能够胜任大量常规的控制、计算任务，但是对一些特殊的任务，比如高速信号处理、大规模并行计算却是无能为力，这也是为什么机器学习基本要靠GPU或者FPGA。ASIC为特定应用设计，性能和功耗都非FPGA能及，但是功能固定，流片费用极高，通常用于非常大批量的场合。和CPU大哥相比，FPGA的特点是，可以利用并行实现更高速的计算和更大的吞吐量，也可以利用其灵活性作为CPU的协处理单元或扩展接口。和二哥ASIC相比，FPGA的优点主要是其灵活性极高，重复编程，在批量不够大或需重复修改的场合较ASIC更为优势。&lt;/p&gt;
&lt;p&gt;当然FPGA也有其相应的缺点以及不适合的工作。和MCU比价格相对高，和ASIC相比速度和功耗都望尘莫及（ASIC作为专用电路比通用电路更加高效）。另外FPGA不适合 1-大量顺序控制，2-大量存储要求的场合，这类工作通用MCU更为擅长也更经济。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、FPGA应用领域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些传统行业，比如电力、能源、医疗，有不少FPGA的需求，这主要是得益于FPGA灵活的特点。这些领域的设备通常 1-设备大，价格高昂（成本相对不敏感），2- 批量无法巨大（不适合定制ASIC），3-设备更新升级较快。这几个特点决定了需要FPGA来实现粘合、接口扩展、通讯实现的需求，也会包括一些较高速的数据采集处理的应用。当然反过来说，这些通常不是重型应用，通常是作为CPU或DSP的扩展和辅助，用到的FPGA基本是中低端型号。&lt;/p&gt;
&lt;p&gt;另一个FPGA广泛应用的领域是ASIC的验证。由于行业不同了解不深，仅从外行人的初步了解来看，这个领域 1-用到FPGA通常是逻辑量非常大的型号，2-因为不会产品化只是作为设计验证工具，批量不会大。&lt;/p&gt;
&lt;p&gt;相对上述两个行业领域，无线通信行业中FPGA的使用相对更为广泛。这主要因为FPGA的并行架构能够满足其高速信号处理的需求。&lt;/p&gt;
&lt;p&gt;仅仅从这些传统领域来看，FPGA的市场大小远不如CPU和ASIC这两位大哥，但目前高速发展的一些新兴领域给了FPGA新的机会，比如工业以太网、机器视觉、机器学习的兴起和实用化。一个典型的方向是机器视觉，图像和视频的底层处理本身需要及其庞大的重复性运算，如使用CPU会大大受制于内存读取瓶颈的限制。而这恰恰是FPGA作为硬件计算本身擅长的工作。相信随着越来越多需要高速信号处理、并行计算的新兴技术领域的日渐步入实用化阶段，FPGA会有更大的用武之地。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、FPGA学习路线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面这些算是对FPGA本身的介绍，下面这些就是FPGA学习路线方面的干货了。趁机会对目前我所了解的内容作个总结，也作为今后在FPGA之路上前进的路标参照。&lt;/p&gt;
&lt;p&gt;FPGA的学习基础是语言和各种工具的掌握，另外还需要最FPGA的架构和资源有必要的认识。亚稳态、跨时钟域问题个人感觉是验证一个人是否入门FPGA的试金石，也是能够开发FPGA的一个必要前提。其它的比如硬件思想、速度-面积互换这些需要不断在实际中运用体会。&lt;/p&gt;
&lt;p&gt;但做这么久FPGA，我的观点是FPGA的难点，全在FPGA之外。使用FPGA本身不难，难的是能够用FPGA做什么事。比如做通讯接口扩展要求对常用的并行/串行通讯时序有深入理解，做高速信号采集则要求对ADC、硬件、信号完整性这些方面都有认识，做图像处理、机器视觉这些更是要求对这些专业领域有比较深的建树 ----可见，FPGA学习本部仅仅是学习FPGA本身，作为一种工具，其能够实现多大的价值更要看对专业领域的认识。&lt;/p&gt;
&lt;p&gt;当然了，每个方向都是一个深坑，甚至是一个独立的专业，人生苦短，往往在其中一个方向有很深的建树就已经了不起了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/804652/201711/804652-20171119162347265-381772636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（码字不易，转载请注明出处，谢谢！）&lt;/p&gt;
</description>
<pubDate>Sun, 19 Nov 2017 13:17:00 +0000</pubDate>
<dc:creator>lobster1989</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lobster89/p/7860170.html</dc:identifier>
</item>
<item>
<title>那些年造的轮子，我们该为谁树墓碑？ - 闰土少年</title>
<link>http://www.cnblogs.com/running-runtu/p/7861658.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/running-runtu/p/7861658.html</guid>
<description>&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;1332&quot; data-height=&quot;746&quot;&gt;&lt;br class=&quot;Apple-interchange-newline&quot;/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7089995-cc17eeeddc605f38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/7089995-cc17eeeddc605f38.png&quot; data-original-width=&quot;1332&quot; data-original-height=&quot;746&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;914220&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;都已经2017年的11月份了，我们项目还打算用seajs？！没错，上周我们公司的一个项目启动了，开会的时候CTO要求用seajs + artTemplate的组合套餐来开发。在下来研究过后，我深觉此举不妙，遂和我们的CTO进行了第二轮沟通，最终选定了vuejs + webpack 的模块化开放模式。虽然是工作中的一件小事，但还是给我留下了不小的感悟。&lt;/p&gt;
&lt;p&gt;故事背景交代完毕，接下来，正文从这开始～&lt;/p&gt;
&lt;p&gt;记得前年（2015年）杭州D-DAY玉伯说过，能够亲眼看到seajs死掉也是一种幸福。一个大而全的前端框架，功能越做越多，迭代难度也会越来越大。其实小而美挺好的。&lt;/p&gt;
&lt;p&gt;为此，玉伯当时还特意发了一条微博，说是应该给seajs和kissy也树一块墓碑了。以下是微博截图：&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;1328&quot; data-height=&quot;1226&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7089995-b6f2644c1af3c638.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/7089995-b6f2644c1af3c638.png&quot; data-original-width=&quot;1328&quot; data-original-height=&quot;1226&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;946830&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;为什么感觉一直追赶的SeaJS已经死掉了呢？&lt;/p&gt;
&lt;p&gt;这里，闰土感觉有句话特别应景，鲜衣木马少年时，怎可死气沉沉如暮年？&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;“说人话，好吧？！”&lt;/p&gt;
&lt;p&gt;“呃......，因为它过时了呗。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里，闰土所说的过时，并不是指它现在就不能用了，而是说出现了明显更加先进的理念或者标准，这会导致未来它的使用场景大为减少，整体趋势已经步入衰落。&lt;/p&gt;
&lt;p&gt;随着Web相关标准的推进，有很多框架（库）都过时了。比如：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;JavaScript新的模块标准导致了SeaJS和RequireJS的过时；&lt;/p&gt;
&lt;p&gt;原生选择器的良好支持，导致人们对jQuery不再那么依赖；&lt;/p&gt;
&lt;p&gt;Array和Object上面一些新特性的出现，导致underscore和lodash的作用减弱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与此同时，一些专注于做shim或者polyfill的库反倒会比较时髦，因为它们的定位非常明确：扶上马，送一程（哈哈，这是一句玩笑话，不可当真）。&lt;/p&gt;
&lt;p&gt;然后，像Angular，Backbone，Knockout，这一大票东西，除非革自己的命，否则全部过时了（当然，angular1已经革了自己的命，大版本的API迭代，完成了ng2的救赎）。再来看看Kissy，这也是一个时代的产物，在同一个时期，有很多类似YUI或者jQuery UI的东西，然而，它们都衰落了，不再适应新的时代。&lt;/p&gt;
&lt;p&gt;我们将来不需要用那样的方式编写前端框架，不需要用那样的方式编写界面组件，永远不要停下自己的脚步。中堂大人教导我们：一代人做一代人的事情。上一代前端框架/库都已经基本完成使命了，让我们默默记住并怀念它们。&lt;/p&gt;
&lt;p&gt;什么，你不知道中堂大人的梗？好吧，那我来告诉你，算盘打得再精，也不如中堂大人，中堂大人已经把他们的所作所为了如指掌......（好吧，话题扯远了）。&lt;/p&gt;
&lt;p&gt;当然，花开两朵，各表一枝（一听这话，想必你们都能猜到，剧情要反转了）。再次强调，过时、衰落，都代表着下降趋势，而不是说你现在就不能用了，仍然会有合适的场景，比如你要支持ie6之类，在你的场景没有与时俱进之前，技术选型也是不能与时俱进的。&lt;/p&gt;
&lt;p&gt;俗话说，做人留一线，日后好相见。这回闰土的话说的够圆滑了吧，抨击seajs不能太绝，凡事都是相对的。在编程界没有绝对的事情，如果有，那就是抨击的还不够（呃，好吧，足见闰土老油条的功底）。&lt;/p&gt;
&lt;p&gt;其实， RequireJS 也好，Sea.js 也好，CommonJS、AMD 还是 CMD 也好，在当年的产生和流行，都不是为了推框架，目的都是为了模块化开发。现在 ES2015（俗称ES6） 规范已出，JS 模块已经得到标准化，早先的模块化方案的没落，和 webpack 与 babel 等转换工具的火爆，都是大势所趋。吾等螳臂挡车，并没有什么卵用。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;1326&quot; data-height=&quot;734&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7089995-e46c0df3b4d74d00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/7089995-e46c0df3b4d74d00.png&quot; data-original-width=&quot;1326&quot; data-original-height=&quot;734&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;433817&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;看到这里，知道前端圈的技术更迭是有多厉害了吧，那些一味鄙视前端技术含量不高的人人们，我只想送你们一句话，In this era, you will be abandoned。（不用百度翻译了，意思就是在这个时代，你会被抛弃。噗嗤～）&lt;/p&gt;
&lt;p&gt;如果你身边还有鄙视前端技术含量低的人，建议你将这篇小文怼到他脸上（开玩笑的老铁，快把手里的板砖放下～）。&lt;/p&gt;
&lt;p&gt;说了那么多，让我们来映射一下主旨：&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot; data-width=&quot;1334&quot; data-height=&quot;996&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7089995-ca4a309723a574a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/7089995-ca4a309723a574a9.png&quot; data-original-width=&quot;1334&quot; data-original-height=&quot;996&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;907272&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;前端造那么多东西，最终还是为产品服务，那么多人爱造轮子是个好事，对于小公司里的年轻人来说，造轮子是能力的锻炼。&lt;/p&gt;
&lt;p&gt;但是从坏的一方面来讲，就会导致产品需要不断的迭代更新，迭代就会带来更多的维护成本，这样的话，一个产品的开发周期相当于被无限拉长，只要技术一发生更新，项目就得重构。&lt;/p&gt;
&lt;p&gt;接着又从好的一方面来看，不断的重构会让前端岗位一直处于供需平衡状态，为了你不会下岗，就让他们造轮子的人折腾去吧。反正都是js，怎么折腾都逃不出前端工程师的手掌心。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;后记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最后，还是那句话：闻道有先后，术业有专攻。在从事前端的道路上，you are not alone.&lt;/p&gt;


&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;声明&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;欢迎转载，请注明出处和作者，同时保留声明。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://https//link.jianshu.com/?t=http://www.cnblogs.com/running-runtu/&quot; target=&quot;_blank&quot;&gt;闰土少年&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;出处：&lt;a href=&quot;https://https//link.jianshu.com/?t=http://www.cnblogs.com/running-runtu/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/running-runtu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本博客的文章如无特殊说明，均为原创，转载请注明出处。如未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;/p&gt;
&lt;p&gt;想了解我的更多动态？欢迎关注我的微信公众号：&lt;span&gt;&lt;strong&gt;闰土哥的前端路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;430&quot; data-height=&quot;430&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7089995-a20718cf0686a341.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/430&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/7089995-a20718cf0686a341.jpg&quot; data-original-width=&quot;430&quot; data-original-height=&quot;430&quot; data-original-format=&quot;image/jpeg&quot; data-original-filesize=&quot;28814&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 19 Nov 2017 12:44:00 +0000</pubDate>
<dc:creator>闰土少年</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/running-runtu/p/7861658.html</dc:identifier>
</item>
<item>
<title>掌握numpy(四) - Wanna_Go</title>
<link>http://www.cnblogs.com/wxshi/p/7861713.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wxshi/p/7861713.html</guid>
<description>&lt;h2 id=&quot;数组的累加拼接&quot;&gt;数组的累加(拼接)&lt;/h2&gt;
&lt;p&gt;在前面讲了使用切片方法能够对数组进行切分，使用&lt;code&gt;copy&lt;/code&gt;对切片的数组进行复制，那么数组该如何拼接呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a1 = np.full((2,3),1)#填充数组
a2 = np.full((3,3),2)
a3 = np.full((2,3),3)
&amp;gt;&amp;gt;a3
array([[ 3.,  3.,  3.],
       [ 3.,  3.,  3.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;vstack&quot;&gt;vstack&lt;/h3&gt;
&lt;p&gt;竖直方向拼接数组&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a4 = np.vstack((a1,a2,a3)) #a1,a2,a3必须有相同的列数
&amp;gt;&amp;gt; a4
[[ 1.  1.  1.]
 [ 1.  1.  1.]
 [ 2.  2.  2.]
 ..., 
 [ 2.  2.  2.]
 [ 3.  3.  3.]
 [ 3.  3.  3.]]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hstack&quot;&gt;hstack&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;hstack&lt;/code&gt;从水平方向拼接数组&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;try:
    a5 = np.hstack((a1,a2))#行数不匹配
except ValueError as e:
    &amp;gt;&amp;gt;print e
all the input array dimensions except for the concatenation axis must match exactly

a5 = np.hstack((a1,a3))#正确
&amp;gt;&amp;gt;a5
array([[ 1.,  1.,  1.,  3.,  3.,  3.],
       [ 1.,  1.,  1.,  3.,  3.,  3.]])
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;concatenate&quot;&gt;concatenate&lt;/h3&gt;
&lt;p&gt;是&lt;code&gt;vstack&lt;/code&gt;和&lt;code&gt;hstack&lt;/code&gt;的融合版本，通过指定&lt;code&gt;axis&lt;/code&gt;进行选择拼接方向&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a6 = np.concatenate((a1,a2),axis=0)#竖直方向
&amp;gt;&amp;gt;a6
array([[ 1.,  1.,  1.],
       [ 1.,  1.,  1.],
       [ 2.,  2.,  2.],
       [ 2.,  2.,  2.],
       [ 2.,  2.,  2.]])
a7 = np.concatenate((a1,a3),axis=1)
&amp;gt;&amp;gt;a7
array([[ 1.,  1.,  1.,  3.,  3.,  3.],
       [ 1.,  1.,  1.,  3.,  3.,  3.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;stack&quot;&gt;stack&lt;/h3&gt;
&lt;p&gt;上面介绍的三种方法都是按照某一维度进行拼接，&lt;code&gt;stack&lt;/code&gt;方法拼接是引入了一个新的维度&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a8=np.stack((a1,a3))
&amp;gt;&amp;gt;a8
array([[[ 1.,  1.,  1.],#a8[0]
        [ 1.,  1.,  1.]],

       [[ 3.,  3.,  3.],#a8[1]
        [ 3.,  3.,  3.]]])
&amp;gt;&amp;gt;a8.shape
(2L, 2L, 3L)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;数组的拆分split&quot;&gt;数组的拆分(split)&lt;/h2&gt;
&lt;p&gt;前面讲到了数组的拼接，相应的就是拆分。&lt;code&gt;vstack-&amp;gt;vsplit&lt;/code&gt;和&lt;code&gt;hstack-&amp;gt;hsplit&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;vsplit&quot;&gt;vsplit&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;c = np.arange(24).reshape(4, 6)
c1,c2 = np.vsplit(c,2)
&amp;gt;&amp;gt;c1
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hsplit&quot;&gt;hsplit&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;c3,c4 = np.hsplit(c,2)
&amp;gt;&amp;gt;c3
array([[ 0,  1,  2],
       [ 6,  7,  8],
       [12, 13, 14],
       [18, 19, 20]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;线性代数&quot;&gt;线性代数&lt;/h2&gt;
&lt;p&gt;Numpy的二维数组常用来表示线性代数中的矩阵，提供了一些便捷的矩阵操作方法,代数运算的方法主要是在&lt;code&gt;numpy.linalg&lt;/code&gt;模块中。&lt;/p&gt;
&lt;h3 id=&quot;矩阵的转置&quot;&gt;矩阵的转置&lt;/h3&gt;
&lt;p&gt;矩阵的转置使用&lt;code&gt;transpose&lt;/code&gt;或者&lt;code&gt;T&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;m = np.arange(24).reshape(4, 6)
&amp;gt;&amp;gt;m
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23]])
&amp;gt;&amp;gt;m.T
array([[ 0,  6, 12, 18],
       [ 1,  7, 13, 19],
       [ 2,  8, 14, 20],
       [ 3,  9, 15, 21],
       [ 4, 10, 16, 22],
       [ 5, 11, 17, 23]])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的例子是矩阵的rank&amp;gt;=2的时候，如果rank=1的时候呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;m1=np.arange(5)
 &amp;gt;&amp;gt;m1
array([0, 1, 2, 3, 4])
&amp;gt;&amp;gt;m1.T
array([0, 1, 2, 3, 4]) #并为发生变化&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出&lt;code&gt;T&lt;/code&gt;对于rank=1的数组是无效的。我们可以通过&lt;code&gt;reshape&lt;/code&gt;将1D数组转化为2D.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;m1r = m1.reshape(1,5)#array([[0, 1, 2, 3, 4]])
&amp;gt;&amp;gt;m1r.T
array([[0],
       [1],
       [2],
       [3],
       [4]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;矩阵的内积运算&quot;&gt;矩阵的内积运算&lt;/h3&gt;
&lt;p&gt;在做内积运算的时候，两个矩阵是有形状限制的，例如n1的形状为MxN,那么n2的形状必须为NxS&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;n1 = np.arange(10).reshape(2, 5)
n2 = np.arange(15).reshape(5,3)
&amp;gt;&amp;gt;n1.dot(n2)
array([[ 90, 100, 110],
       [240, 275, 310]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;矩阵的逆inverse&quot;&gt;矩阵的逆(inverse)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;inv&lt;/code&gt;方法是用来计算方阵的逆矩阵&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import numpy.linalg as linalg
m2 =  np.array([[1,2,3],[5,7,11],[21,29,31]])
&amp;gt;&amp;gt;m2
array([[ 1,  2,  3],
       [ 5,  7, 11],
       [21, 29, 31]])
&amp;gt;&amp;gt;linalg.inv(m2)
array([[-2.31818182,  0.56818182,  0.02272727],
       [ 1.72727273, -0.72727273,  0.09090909],
       [-0.04545455,  0.29545455, -0.06818182]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;单位矩阵&quot;&gt;单位矩阵&lt;/h3&gt;
&lt;p&gt;单位矩阵(identity matrix)是对角线上元素都为1的矩阵；原始矩阵与逆矩阵的内积为单位矩阵。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;m2.dot(linalg.inv(m))
array([[  1.00000000e+00,  -1.11022302e-16,  -6.93889390e-18],
       [ -1.33226763e-15,   1.00000000e+00,  -5.55111512e-17],
       [  2.88657986e-15,   0.00000000e+00,   1.00000000e+00]])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在前面我们讲到了使用&lt;code&gt;ones&lt;/code&gt;来创建全为1的矩阵，numpy也提供了单位矩阵的方法&lt;code&gt;eys&lt;/code&gt;，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;np.eye(3)
array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;矩阵的行列式&quot;&gt;矩阵的行列式&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;linalg.det(m2)
43.999999999999993#浮点数误差&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;特征值和特征向量&quot;&gt;特征值和特征向量&lt;/h3&gt;
&lt;p&gt;特征值(eigenvalues)和特征向量(eigenvectors)的求解在矩阵分解时常被用到。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;value,vector = linalg.eig(m2)
&amp;gt;&amp;gt;value
array([ 42.26600592,  -0.35798416,  -2.90802176])
&amp;gt;&amp;gt;vector
array([[-0.08381182, -0.76283526, -0.18913107],
       [-0.3075286 ,  0.64133975, -0.6853186 ],
       [-0.94784057, -0.08225377,  0.70325518]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;奇异矩阵分解&quot;&gt;奇异矩阵分解&lt;/h3&gt;
&lt;p&gt;奇异矩阵分解(Singular Value Decomposition)被广泛的应用在推荐系统和数据降维中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;m3=np.array([[1,0,0,0,2], [0,0,3,0,0], [0,0,0,0,0], [0,2,0,0,0]])
U, S_diag, V = linalg.svd(m3)
&amp;gt;&amp;gt;S_diag
array([ 3.        ,  2.23606798,  2.        ,  0.        ])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;svd&lt;/code&gt;将矩阵才分为三部分，&lt;code&gt;svd&lt;/code&gt;方法获得的&lt;code&gt;S_diag&lt;/code&gt;是特征向量，现在我们需要的是Σ矩阵，所以需要构建Σ矩阵。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;S = np.zeros((4, 5))
S[np.diag_indices(4)] = S_diag
&amp;gt;&amp;gt;S  # Σ
array([[ 3.        ,  0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  2.23606798,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  2.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;U、S和V三者的内积能够还原出原始矩阵&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;U.dot(S).dot(V)
array([[ 1.,  0.,  0.,  0.,  2.],
       [ 0.,  0.,  3.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  2.,  0.,  0.,  0.]])&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;存储和加载&quot;&gt;存储和加载&lt;/h2&gt;
&lt;p&gt;Numpy被广泛应用到机器学习领域，将一些处理后的数据持久能够有助于以后的使用。Numpy能够方便的存储和加载二进制文件和文本格式文件。&lt;/p&gt;
&lt;h3 id=&quot;二进制.npy格式&quot;&gt;二进制.npy格式&lt;/h3&gt;
&lt;p&gt;创建一个随机数组并将其存储。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = np.random.rand(2,3)
&amp;gt;&amp;gt;a
array([[ 0.37740913,  0.45913655,  0.87659924],
       [ 0.24951215,  0.04142309,  0.57092372]])
np.save(&quot;my_array&quot;, a)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在本地就生成了&lt;code&gt;my_array.npy&lt;/code&gt;文件，&lt;strong&gt;note:&lt;/strong&gt;虽然文件名并没有加后缀，NUmpy生成的文件名会自动的添加&lt;code&gt;.npy&lt;/code&gt;后缀。我们看一看文件内容&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with open('my_array.npy','rb') as f: #需要添加.npy后缀
    content =  f.read()
&amp;gt;&amp;gt;content
'\x93NUMPY\x01\x00F\x00{\'descr\': \'&amp;lt;f8\', \'fortran_order\': False, \'shape\': (2L, 3L), }        \n\xbb\xa99\xfe1\xab\xea?\xa4k\x04\x14\xdc&quot;\xda?\xe8\x95\x92\xc5:\xc4\xd6?\x98]\xed\x97\x07\x9e\xed?\xff\x9e\x97\xee\xa2\x16\xed?\xec\xd5\xc7\x8e\x8b\xaa\xcd?'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正确的加载方式是使用&lt;code&gt;load&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = np.load('my_array.npy')&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;文本格式&quot;&gt;文本格式&lt;/h3&gt;
&lt;p&gt;上面是以二进制格式存储，还可以文本格式存储。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;np.savetxt(&quot;my_array.csv&quot;, a)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的格式可以使用普通的文件读取方式读取，这里就不再赘述，下面说一下numpy的读取方式&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a = np.loadtxt(&quot;my_array.csv&quot;, delimiter=&quot;,&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;zipped-格式&quot;&gt;zipped 格式&lt;/h3&gt;
&lt;p&gt;numpy还支持将多个ndarray持久化到同一个文件中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;b = np.arange(24, dtype=np.uint8).reshape(2, 3, 4)
&amp;gt;&amp;gt;b
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]], dtype=uint8)
np.savez(&quot;my_arrays&quot;, my_a=a, my_b=b) #自动添加.npz后缀&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同&lt;code&gt;save&lt;/code&gt;，二进制格式读取读出来的为乱码，使用&lt;code&gt;load&lt;/code&gt;方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;my_arrays = np.load(&quot;my_arrays.npz&quot;)
&amp;gt;&amp;gt;my_arrays
&amp;lt;numpy.lib.npyio.NpzFile at 0xb2e39e8&amp;gt;
&amp;gt;&amp;gt;my_arrays.keys()
['my_b', 'my_a']
&amp;gt;&amp;gt;my_arrays['my_a']#字典方式读取
array([[ 0.75760441,  0.91559205,  0.42412305],
       [ 0.49412246,  0.60609836,  0.69437913]])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，掌握NumPy系列文章到此结束，想要了解更多请参考&lt;a href=&quot;http://docs.scipy.org/doc/numpy/reference/index.html&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 Nov 2017 12:43:00 +0000</pubDate>
<dc:creator>Wanna_Go</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wxshi/p/7861713.html</dc:identifier>
</item>
<item>
<title>编程语言 : Java的动态Web解决方案泛谈 - Rudolph_Browne</title>
<link>http://www.cnblogs.com/CARPE-DIEM-wu/p/7704488.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CARPE-DIEM-wu/p/7704488.html</guid>
<description>&lt;h3&gt;文章概述&lt;/h3&gt;
&lt;p&gt;最近发现很久前一股脑地学习框架,发觉越发迷糊.知道了框架只是暂时的,重点是基础的技术.该文大篇幅回顾Servlet技术栈和简要的MVC框架.&lt;/p&gt;
&lt;p&gt;至于为什么学J2EE,额,大家都用框架,可框架也是使用了标准的J2EE规范进行开发,比如SpringMVC的前端控制器是Servlet,Struts的Filter,Spring Boot项目内嵌了Tomcat 应用容器....&lt;/p&gt;
&lt;p&gt;该文是自我学习总结,比较适合接触Java Web编程不久的朋友阅读,如果读的没意思就请直接弃之 :)&lt;/p&gt;
&lt;h3&gt;MVC framework&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171114003322718-317142681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我知道,我明白你知道MVC框架,可是我还是叨唠一下.&lt;/p&gt;
&lt;p&gt;Model,Java普通类对象,用来作为信息存储对象的模块.&lt;/p&gt;
&lt;p&gt;View,服务器响应客户端请求后生成页面响应对象的模块.&lt;/p&gt;
&lt;p&gt;Controller,处理信息类型转换以及执行业务的模块.&lt;/p&gt;
&lt;p&gt;简单地说,就是将我们&lt;span&gt;上传的信息与类型数据进行匹配转换&lt;/span&gt;,之后都是琐碎的加些什么数据拦截器,过滤器之类的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171114004755327-3871511.png&quot; alt=&quot;&quot; width=&quot;626&quot; height=&quot;194&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为我们大多数情况下通过一张表单打到服务器,这时表单的数据都默认是String类型的数据,这时就不适应于类型数据工程语言(C++,PHP,Java,C#).&lt;/p&gt;
&lt;p&gt;所以,必须转换类型.&lt;/p&gt;
&lt;p&gt;那么,有什么技术可以让我们获取表单数据?以及获取后我们该处理? &lt;/p&gt;
&lt;h3&gt;HTTP协议说了什么&lt;/h3&gt;
&lt;p&gt;HTTP协议就是一种让我们获取和返回数据的技术&lt;/p&gt;
&lt;p&gt;关于这方面的知识建议你去看看《图解HTTP》,一本薄薄的书.这里只是作为引子做个简单的说明.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171114165154171-1074650570.png&quot; alt=&quot;&quot; width=&quot;686&quot; height=&quot;318&quot;/&gt;&lt;/p&gt;
&lt;p&gt;HTTP建立于TCP协议之上,但其实可以根据分层而选择忽略底层原理.&lt;/p&gt;
&lt;p&gt;HTTP规定了应用层的请求响应规则,客户端&amp;lt;--&amp;gt;服务端的信息必须满足HTTP格式.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;客户端浏览器请求,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务端响应请求,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;把HTML,CSS,Javascript等信息存储于HTTP对象载体,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;响应返回至客户端,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;客户端进行页面渲染显示.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Java动态web解决方案&lt;/h3&gt;
&lt;p&gt;Sun公司成为制定Java语言的先行者,使Java语言适用于多种领域开发,动态Web开发领域同样也给出了优秀的解决方案.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;动态web技术--服务器根据客户端不同的请求数据来生成不同的响应数据并作返回.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171114172956577-1604913239.png&quot; alt=&quot;&quot; width=&quot;612&quot; height=&quot;299&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Servlet体系&lt;/h3&gt;
&lt;p&gt;关于Servlet你需要弄清楚下面几个概念,你将在阅读完该文后掌握它们.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171114175533406-1009637869.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;270&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面这张图是Java Web体系的原型技术,也就是说其他技术基本都构建在这些技术之上,它们是根基.&lt;/p&gt;
&lt;p&gt;HTML,CSS,JavaScript三者作为页面渲染交互技术而存在;&lt;/p&gt;
&lt;p&gt;JDBC作为连接数据库的连接技术,这样可以进行数据库信息的获取和存储;&lt;/p&gt;
&lt;p&gt;Tomcat作为Servlet应用容器而存在,等待用户请求;&lt;/p&gt;
&lt;p&gt;Servlet作为动态信息的Java处理类,能够将对应的Java数据结构转化为String拼接到HTML之中去;&lt;/p&gt;
&lt;p&gt;JavaBean就是简单的Java类,它有固定的格式,很容易就能写出一个JavaBean;&lt;/p&gt;
&lt;p&gt;Session存在是因为HTTP是无状态协议,需要Session来作为状态标示;&lt;/p&gt;
&lt;p&gt;Request/Response是Servlet容器抽象出来的请求/响应对象,以它来获取数据和将数据写入HTTP响应;&lt;/p&gt;
&lt;h3&gt;JDBC&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;ava &lt;strong&gt;D&lt;/strong&gt;ata&lt;strong&gt;B&lt;/strong&gt;ase &lt;strong&gt;C&lt;/strong&gt;onnectivity是Java技术的核心之一,现在基本没有不连接数据库的web应用.&lt;/p&gt;
&lt;p&gt;JDBC是一套Java定义的数据库连接接口,实现部分由各大数据库厂商进行开发.&lt;span&gt;(你想要更大的市场,你就必须支持我)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;软件开发其中一项精髓是抽象,暂时搁置实现细节,拿来用就行了,除非你要去做该类产品的实现.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171114183921062-914770738.png&quot; alt=&quot;&quot; width=&quot;554&quot; height=&quot;326&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;JDBC编码步骤 &lt;/h4&gt;
&lt;p&gt;1.Java语言有接口,但是没有提供实现,所以我们必须先加载实现包.&lt;/p&gt;
&lt;p&gt;2.通过连接管理器注册驱动&lt;/p&gt;
&lt;p&gt;3.获取数据库连接&lt;/p&gt;
&lt;p&gt;4.得到代表SQL语句的对象&lt;/p&gt;
&lt;p&gt;5.执行语句和获取结果&lt;/p&gt;
&lt;p&gt;6.释放占用的资源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115083751515-2062787767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;JDBC关键接口&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;DriverManager&lt;/strong&gt;&lt;/span&gt;　　　　&lt;/p&gt;
&lt;p&gt;①注册驱动&lt;/p&gt;
&lt;p&gt;DriverManager.registerDriver(new com.mysql.jdbc.Driver());//依赖具体的驱动类,会导致驱动被注册两次&lt;/p&gt;
&lt;p&gt;Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//替代方案,在类被引入时自动注册.&lt;/p&gt;
&lt;p&gt;②获取数据库连接&lt;/p&gt;
&lt;p&gt;DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;password&quot;);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①获取数据库操作语句对象&lt;/p&gt;
&lt;p&gt;conn.createStatement();&lt;/p&gt;
&lt;p&gt;conn.prepareCall(sql);&lt;/p&gt;
&lt;p&gt;conn.prepareStatement(sql,columnNames);&lt;/p&gt;
&lt;p&gt;②事务处理&lt;/p&gt;
&lt;p&gt;conn.commit();&lt;/p&gt;
&lt;p&gt;conn.rollback();&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Statement&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①代表SQL语句&lt;/p&gt;
&lt;p&gt;Statement s = conn.createStatement();&lt;/p&gt;
&lt;p&gt;②执行语句,接收返回结果&lt;/p&gt;
&lt;p&gt;ResultSet rs = s.executeQuery(sql);&lt;/p&gt;
&lt;p&gt;s.executeUpdate(sql);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;ResultSet&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①查询SQL所返回的结果集对象,用来遍历操作&lt;/p&gt;
&lt;p&gt;rs.next();&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115090155484-242130548.png&quot; alt=&quot;&quot; width=&quot;504&quot; height=&quot;171&quot;/&gt;&lt;/p&gt;
&lt;p&gt;②遍历后是一条记录,可以获取记录上的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115090353734-618100907.png&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;128&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;PrepareStatement&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①优于Statement,指示SQL语句的预编译,提高数据库执行效率&lt;/p&gt;
&lt;p&gt;②防止SQL注入,直接对象对接语句&lt;/p&gt;
&lt;p&gt;③语句参数使用占位符?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115092109609-211956925.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;JDBC的代码规范&lt;/h4&gt;
&lt;p&gt;1.配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115090839937-1674682297.png&quot; alt=&quot;&quot; width=&quot;237&quot; height=&quot;75&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.工具类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115090951312-852991871.png&quot; alt=&quot;&quot; width=&quot;531&quot; height=&quot;235&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115091012812-225106109.png&quot; alt=&quot;&quot; width=&quot;544&quot; height=&quot;393&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.业务代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115091100562-1974196555.png&quot; alt=&quot;&quot; width=&quot;321&quot; height=&quot;209&quot;/&gt;&lt;/p&gt;
&lt;h4&gt; 分页&lt;/h4&gt;
&lt;p&gt; 在web开发中,数据量分页的情况数不胜数,不同数据库分页语句不同,但是逻辑是一样的.&lt;/p&gt;
&lt;p&gt;分页逻辑需要参数:数据总条数count(*),分页大小size,当前页面数current&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Oracle&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;oracle中数据表中隐含了一个rownum字段,标识了每条记录在表中的行号,利用它能获取特定行数据.&lt;/p&gt;
&lt;p&gt;select a1.* from (select student.*,rownum rn from student) a1 where rn between 3 and 5;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;MySQL中使用limit关键字来获取数据行数&lt;/p&gt;
&lt;p&gt;select * from customer limit 10,5;//第10行开始后的前5条数据&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Page类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115093602749-873385979.png&quot; alt=&quot;&quot; width=&quot;517&quot; height=&quot;248&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;分页逻辑实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115094132827-726605355.png&quot; alt=&quot;&quot; width=&quot;445&quot; height=&quot;380&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;JDBC的其他重点&lt;/h4&gt;
&lt;p&gt;JDBC还有其他一些重点知识,包括存储过程调用,事务控制,数据库连接池实现等.由于篇幅问题不作详述,用到的时候直接查一下资料就能找到.&lt;/p&gt;
&lt;h3&gt;Servlet技术窥探&lt;/h3&gt;
&lt;p&gt;前面理解了Servlet是一个特殊的Java类,通过应用服务器运行来处理请求信息,下面应该熟悉下面的两张图&lt;/p&gt;
&lt;p&gt;Servlet核心类:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171117230848327-1847084336.png&quot; alt=&quot;&quot; width=&quot;604&quot; height=&quot;377&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个类图在后面将反复使用,请查看手册,看一下方法名.&lt;/p&gt;
&lt;p&gt;下面看一下流程图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115100730562-1831358405.png&quot; alt=&quot;&quot; width=&quot;564&quot; height=&quot;401&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看4,7,8每次你访问服务器时,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tomcat查询web.xml,查找url-pattern.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务器会生成一个Request对象和一个Response对象来承接请求信息和响应信息,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每次访问会调用一次Servlet.service(),这个方法的逻辑就是整个响应请求的逻辑.&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;web应用配置&lt;/h4&gt;
&lt;p&gt;web app一般都会需要一些配置文件,在Java web应用中这个文件叫web.xml,它是用来配置该web app的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115183021609-1402860174.png&quot; alt=&quot;&quot; width=&quot;681&quot; height=&quot;496&quot;/&gt; &lt;/p&gt;
&lt;p&gt;Servlet声明及映射就是配置URL映射的标签,&lt;span&gt;服务器查询标签知道我调的url是Servlet A还是Servlet B处理&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115184136577-1378598245.png&quot; alt=&quot;&quot; width=&quot;686&quot; height=&quot;207&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;Servlet.service(req,resp)&lt;/h4&gt;
&lt;p&gt;Servlet可以由应用服务器生成,默认生成一个DefaultServlet,或者是开发者指定一个继承HttpServlet的类.&lt;/p&gt;
&lt;p&gt;所有HTML,CSS,JavaScript等没有指定Servlet的都将默认生成一个DefaultServlet来进行处理.&lt;/p&gt;
&lt;p&gt;每个访问都会调用一次Servlet.service(),&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Receives standard HTTP requests from the public
     * &amp;lt;code&amp;gt;service&amp;lt;/code&amp;gt; method and dispatches
     * them to the &amp;lt;code&amp;gt;do&amp;lt;/code&amp;gt;&amp;lt;i&amp;gt;Method&amp;lt;/i&amp;gt; methods defined in
     * this class. This method is an HTTP-specific version of the
     * {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; javax.servlet.Servlet#service} method. There's no
     * need to override this method.
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; req   the {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; HttpServletRequest} object that
     *                  contains the request the client made of
     *                  the servlet
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; resp  the {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; HttpServletResponse} object that
     *                  contains the response the servlet returns
     *                  to the client
     *
     * &lt;/span&gt;&lt;span&gt;@exception&lt;/span&gt;&lt;span&gt; IOException   if an input or output error occurs
     *                              while the servlet is handling the
     *                              HTTP request
     *
     * &lt;/span&gt;&lt;span&gt;@exception&lt;/span&gt;&lt;span&gt; ServletException  if the HTTP request
     *                                  cannot be handled
     *
     * &lt;/span&gt;&lt;span&gt;@see&lt;/span&gt;&lt;span&gt; javax.servlet.Servlet#service
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; service(HttpServletRequest req, HttpServletResponse resp)
        &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {

        String method &lt;/span&gt;=&lt;span&gt; req.getMethod();

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (method.equals(METHOD_GET)) {
            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; lastModified =&lt;span&gt; getLastModified(req);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (lastModified == -1&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; servlet doesn't support if-modified-since, no reason
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; to go through further expensive logic&lt;/span&gt;
&lt;span&gt;                doGet(req, resp);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;long&lt;/span&gt;&lt;span&gt; ifModifiedSince;
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    ifModifiedSince &lt;/span&gt;=&lt;span&gt; req.getDateHeader(HEADER_IFMODSINCE);
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IllegalArgumentException iae) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Invalid date header - proceed as if none was set&lt;/span&gt;
                    ifModifiedSince = -1&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ifModifiedSince &amp;lt; (lastModified / 1000 * 1000&lt;span&gt;)) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If the servlet mod time is later, call doGet()
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Round down to the nearest second for a proper compare
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A ifModifiedSince of -1 will always be less&lt;/span&gt;
&lt;span&gt;                    maybeSetLastModified(resp, lastModified);
                    doGet(req, resp);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                }
            }

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (method.equals(METHOD_HEAD)) {
            &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; lastModified =&lt;span&gt; getLastModified(req);
            maybeSetLastModified(resp, lastModified);
            doHead(req, resp);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (method.equals(METHOD_POST)) {
            doPost(req, resp);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (method.equals(METHOD_PUT)) {
            doPut(req, resp);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (method.equals(METHOD_DELETE)) {
            doDelete(req, resp);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (method.equals(METHOD_OPTIONS)) {
            doOptions(req,resp);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (method.equals(METHOD_TRACE)) {
            doTrace(req,resp);

        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Note that this means NO servlet supports whatever
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; method was requested, anywhere on this server.
            &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;
            String errMsg &lt;/span&gt;= lStrings.getString(&quot;http.method_not_implemented&quot;&lt;span&gt;);
            Object[] errArgs &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Object[1&lt;span&gt;];
            errArgs[&lt;/span&gt;0] =&lt;span&gt; method;
            errMsg &lt;/span&gt;=&lt;span&gt; MessageFormat.format(errMsg, errArgs);

            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据HTTP请求的方法不同,调用相应的处理方法,现在一般只会使用到两种请求方法,GET/POST&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115173916484-1359062573.png&quot; alt=&quot;&quot; width=&quot;401&quot; height=&quot;145&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对应这个请求的Servlet,将调用doGet(req,resp),以此类推.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;至此,我们知道了关键的一点,关于Servlet编程,我们只要继承HttpServlet,重写doGet和doPost方法等待调用就行了.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;该怎么重写呢?思路是,&lt;strong&gt;表单的提交信息一定是封装至HttpServletRequest对象中,我们通过获取信息后根据信息写入至HttpServletResponse对象&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;HttpServletRequest.getParameter(String name)可以&lt;span&gt;获取表单信息,处理信息&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;HttpServletResponse.getWriter()可以&lt;span&gt;获取到一个PrintWriter对象,可以将处理后相应的信息存储在这个对象中,然后由服务器处理写入HTTP报文主体中&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171115181745452-1115886903.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;JSP视图&lt;/h3&gt;
&lt;p&gt;PrintWriter是可以完成输出操作,但是内容很是繁琐,上图简单的页面就必须需要打一大堆代码.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyServlet &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HttpServlet{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doGet(HttpServletRequest request, HttpServletResponse response)&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
        response.setContentType(&lt;/span&gt;&quot;text/html&quot;&lt;span&gt;); 
        PrintWriter out &lt;/span&gt;=&lt;span&gt; response.getWriter(); 
        out.println(&lt;/span&gt;&quot;&amp;lt;!DOCTYPE HTML PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot;&amp;gt;&quot;&lt;span&gt;); 
        out.println(&lt;/span&gt;&quot;&amp;lt;HTML&amp;gt;&quot;&lt;span&gt;); 
        out.println(&lt;/span&gt;&quot;  &amp;lt;HEAD&amp;gt;&amp;lt;TITLE&amp;gt;A Servlet&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&quot;&lt;span&gt;); 
        out.println(&lt;/span&gt;&quot;  &amp;lt;BODY&amp;gt;&quot;&lt;span&gt;); 
        out.println(&lt;/span&gt;&quot;&amp;lt;/IMG src='hackr.gif' alt='hackr.jp&quot; width='240' height='84'/&amp;gt;&lt;span&gt;
        out.println(&lt;/span&gt;&quot;  &amp;lt;/BODY&amp;gt;&quot;&lt;span&gt;); 
        out.println(&lt;/span&gt;&quot;&amp;lt;/HTML&amp;gt;&quot;&lt;span&gt;); 
        out.flush(); 
        out.close() 
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以,Java官方推出了一个新的解决方案来替代前一方案,&lt;span&gt;Servlet的应用服务器必须实现JSP编译器,用来编译jsp文件,将其转换成Servlet文件&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171117165547437-772850167.png&quot; alt=&quot;&quot; width=&quot;632&quot; height=&quot;312&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同样采用Servlet来进行响应处理,只不过将处理结果存于JSP文件中然后让编译器编译成结果Servlet,结果Servlet来输出信息至HTTP响应报文主体中.&lt;/p&gt;
&lt;p&gt;这样就&lt;span&gt;将原本的Servlet职责(Controller,View)分给了Servlets(Controller)和JSPs(View)这两个模块&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;JSP编译后的文件存于tomcat/work目录下.&lt;/p&gt;
&lt;p&gt;新的解决方案就多出了许多新的问题,&lt;/p&gt;
&lt;p&gt;①一个Servlet怎么做到调用一个JSP文件(跳转);&lt;/p&gt;
&lt;p&gt;②JSP如何知晓自己需要显示什么数据;&lt;/p&gt;
&lt;p&gt;③JSP文件规范;&lt;/p&gt;
&lt;h3&gt;Servlet跳转&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171117224502187-48278729.png&quot; alt=&quot;&quot; width=&quot;679&quot; height=&quot;348&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Servlet跳转就是以上的两种方式进行,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方式一使用response.sendRedirect(url); &lt;span&gt;//直接输入跳转的url&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方式二使用request.getRequestDispatcher(url).forward(request,response);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;//输入跳转url作为定位,把request,response填入后进行跳转&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为JSP文件本质上会被编译成Servlet,所以可以使用Servlet与jsp进行跳转,只要把url填写为XXX.jsp即可.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Servlet数据存取&lt;/h3&gt;
&lt;p&gt;jsp需要获取信息来进行显示,获取的信息必定来自转换交接的Servlet那.所以Jsp显示什么数据的问题在于它能获取什么数据,Servlet存储了什么数据.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Servlet域对象指的是Servlet用来存储对象的区域,jsp可以在这些区域中获取数据&lt;/span&gt;&lt;/strong&gt;,Servlet有三大域对象.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;域对象存储方法{域}.setAttribute(&quot;objectName&quot;,Object);&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;域对象获取对象方法{域}.getAttribute(&quot;objectName&quot;);&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;ServletContext&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个域对象是所有Servlet的共用存储域,你保存的对象所有的Servlet都可以获取,jsp也是一种Servlet,所以它也可以获取.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118130931812-349283067.png&quot; alt=&quot;&quot; width=&quot;185&quot; height=&quot;164&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Request&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请求域对象,这个请求域在谁手里,谁就可以获取.只要通过转发这个Request,那么Servlet就可拿到这个域里面的对象.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118131921077-2137588603.png&quot; alt=&quot;&quot; width=&quot;340&quot; height=&quot;150&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Session&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当客户端进行第一次访问时,应用服务器会为你创建一个会话对象;&lt;/p&gt;
&lt;p&gt;并为你发送一个sessionID,这个SessionID会作为Cookie保存于你的浏览器中,作为访问这个会话域的凭证;&lt;/p&gt;
&lt;p&gt;你可以在Session域中存取对象(用户信息),直至Session被销毁(一般是超时销毁);&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118132646437-1006385384.png&quot; alt=&quot;&quot; width=&quot;382&quot; height=&quot;190&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;JSP文件规范&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;请注意,JSP文件规范很大成分参考引入&lt;a href=&quot;http://blog.csdn.net/zhongkelee/article/details/52474695&quot; target=&quot;_blank&quot;&gt;博文&lt;/a&gt;,非本人原创.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171117171406546-1063000218.png&quot; alt=&quot;&quot; width=&quot;628&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;　　　　Apache基金会发布的J2EE规范历史版本.&lt;/h5&gt;
&lt;p&gt;下面我们使用&lt;a href=&quot;http://download.csdn.net/download/li_bins/5685085&quot; target=&quot;_blank&quot;&gt;JSP2.3版本&lt;/a&gt;来看一下JSP的规范.&lt;/p&gt;
&lt;p&gt; JSP页面是动静结合来展示HTML页面内容的,静就是静态文件内容(HTML,CSS,JavaScript),动则是获取操作数据的JSP页面方法.&lt;/p&gt;
&lt;p&gt;关于JSP你需要掌握以下内容以满足开发&lt;/p&gt;
&lt;p&gt;&lt;span&gt;脚本元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;JSP指令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;JSP动作标签&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;内置对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;表达式语言EL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;JSTL标签库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为JSP被编译成Servlet,上述的动态语言元素都会被编译后写入静态文件中,我们通过编译前后文件来学习这些内容.&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;脚本元素&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;%! %&amp;gt; 声明:定义翻译后Servlet程序的 全局变量或全局方法.内部类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;%= %&amp;gt; 表达式 输出内容到浏览器 效果等同于&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;out.print&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;% %&amp;gt;  脚本代码块,嵌入java运行代码 ---- 不翻译&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;%-- --%&amp;gt;JSP注释,编译成Servlet后消失&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ca290285-64ce-453e-8bdb-20820c42df78')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ca290285-64ce-453e-8bdb-20820c42df78&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ca290285-64ce-453e-8bdb-20820c42df78&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ca290285-64ce-453e-8bdb-20820c42df78',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ca290285-64ce-453e-8bdb-20820c42df78&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;span&gt;  
    pageEncoding&lt;/span&gt;=&quot;UTF-8&quot;%&amp;gt;  
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;  
&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;h1&amp;gt;JSP脚本元素&amp;lt;/h1&amp;gt;  
&amp;lt;%!  
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; JSP声明 定义成员变量、成员方法 、内部类   &lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m(){}  
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A {}  
&lt;/span&gt;%&amp;gt;  
  
&amp;lt;!-- 表达式 等价于 会被翻译为 out.print --&amp;gt;  
&amp;lt;%=&quot;abcd&quot; %&amp;gt;  
  
&amp;lt;%  
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; JSP 脚本代码块，嵌入任何java代码  &lt;/span&gt;
    String s = &quot;abcdefg&quot;&lt;span&gt;;  
    s &lt;/span&gt;=&lt;span&gt; s.toUpperCase();  
    out.print(s);  
&lt;/span&gt;%&amp;gt;  

&amp;lt;%-- JSP注释 --%&amp;gt;  

&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demo.jsp&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ba30bcb1-dcc6-46ce-9b73-46a66878b18f')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_ba30bcb1-dcc6-46ce-9b73-46a66878b18f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ba30bcb1-dcc6-46ce-9b73-46a66878b18f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ba30bcb1-dcc6-46ce-9b73-46a66878b18f',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ba30bcb1-dcc6-46ce-9b73-46a66878b18f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 
 * Generated by the Jasper component of Apache Tomcat 
 * Version: Apache Tomcat/7.0.42 
 * Generated at: 2016-09-03 12:18:11 UTC 
 * Note: The last modified time of this file was set to 
 *       the last modified time of the source file after 
 *       generation to assist with modification tracking. 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;  
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.apache.jsp;  
  
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; javax.servlet.*&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; javax.servlet.http.*&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; javax.servlet.jsp.*&lt;span&gt;;  
  
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; demo1_jsp &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; org.apache.jasper.runtime.HttpJspBase  
    &lt;/span&gt;&lt;span&gt;implements&lt;/span&gt;&lt;span&gt; org.apache.jasper.runtime.JspSourceDependent {  
  
  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; JSP声明 定义成员变量、成员方法 、内部类   &lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; m(){}  
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; A {}  
  
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; javax.servlet.jsp.JspFactory _jspxFactory =&lt;span&gt;  
          javax.servlet.jsp.JspFactory.getDefaultFactory();  
  
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; java.util.Map&amp;lt;java.lang.String,java.lang.Long&amp;gt;&lt;span&gt; _jspx_dependants;  
  
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; javax.el.ExpressionFactory _el_expressionfactory;  
  &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; org.apache.tomcat.InstanceManager _jsp_instancemanager;  
  
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; java.util.Map&amp;lt;java.lang.String,java.lang.Long&amp;gt;&lt;span&gt; getDependants() {  
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _jspx_dependants;  
  }  
  
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; _jspInit() {  
    _el_expressionfactory &lt;/span&gt;=&lt;span&gt; _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();  
    _jsp_instancemanager &lt;/span&gt;=&lt;span&gt; org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());  
  }  
  
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; _jspDestroy() {  
  }  
  
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; _jspService(&lt;span&gt;final&lt;/span&gt; javax.servlet.http.HttpServletRequest request, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse response)  
        &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; java.io.IOException, javax.servlet.ServletException {  
  
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.PageContext pageContext;  
    javax.servlet.http.HttpSession session &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;  
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; javax.servlet.ServletContext application;  
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; javax.servlet.ServletConfig config;  
    javax.servlet.jsp.JspWriter out &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;  
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; java.lang.Object page = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;  
    javax.servlet.jsp.JspWriter _jspx_out &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;  
    javax.servlet.jsp.PageContext _jspx_page_context &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;  
  
  
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {  
      response.setContentType(&lt;/span&gt;&quot;text/html; charset=UTF-8&quot;&lt;span&gt;);  
      pageContext &lt;/span&gt;= _jspxFactory.getPageContext(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, request, response,  
                &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, 8192, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);  
      _jspx_page_context &lt;/span&gt;=&lt;span&gt; pageContext;  
      application &lt;/span&gt;=&lt;span&gt; pageContext.getServletContext();  
      config &lt;/span&gt;=&lt;span&gt; pageContext.getServletConfig();  
      session &lt;/span&gt;=&lt;span&gt; pageContext.getSession();  
      out &lt;/span&gt;=&lt;span&gt; pageContext.getOut();  
      _jspx_out &lt;/span&gt;=&lt;span&gt; out;  
  
      out.write(&lt;/span&gt;&quot;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;!DOCTYPE html PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot; \&quot;http://www.w3.org/TR/html4/loose.dtd\&quot;&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;html&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;head&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=UTF-8\&quot;&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;/head&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;body&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;h1&amp;gt;JSP脚本元素&amp;lt;/h1&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;!-- 表达式 等价于 会被翻译为 out.print --&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.print(&lt;/span&gt;&quot;abcd&quot;&lt;span&gt; );  
      out.write(&lt;/span&gt;&quot;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;\r\n&quot;&lt;span&gt;);  
  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; JSP 脚本代码块，嵌入任何java代码  &lt;/span&gt;
    String s = &quot;abcdefg&quot;&lt;span&gt;;  
    s &lt;/span&gt;=&lt;span&gt; s.toUpperCase();  
    out.print(s);  
  
      out.write(&lt;/span&gt;&quot;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;/body&amp;gt;\r\n&quot;&lt;span&gt;);  
      out.write(&lt;/span&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;span&gt;);  
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (java.lang.Throwable t) {  
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!(t &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.SkipPageException)){  
        out &lt;/span&gt;=&lt;span&gt; _jspx_out;  
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (out != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; out.getBufferSize() != 0&lt;span&gt;)  
          &lt;/span&gt;&lt;span&gt;try&lt;/span&gt; { out.clearBuffer(); } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (java.io.IOException e) {}  
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_jspx_page_context != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) _jspx_page_context.handlePageException(t);  
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServletException(t);  
      }  
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {  
      _jspxFactory.releasePageContext(_jspx_page_context);  
    }  
  }  
}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demo_jsp.java&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;JSP指令&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;语法:&amp;lt;%@ 指令名称 属性=值 属性=值 ... %&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;page&lt;/strong&gt;&lt;/span&gt;指令&lt;/p&gt;
&lt;p&gt;page指令用来定义JSP文件的全局属性 &amp;lt;%@ page 属性=值 %&amp;gt;&lt;/p&gt;
&lt;p&gt;在JSP页面中,只有import可以出现多次,其他属性都只能出现一次&lt;/p&gt;
&lt;p&gt;1.&lt;span&gt;&lt;strong&gt;language&lt;/strong&gt; &lt;/span&gt;只能为java&lt;br/&gt;2.&lt;span&gt;&lt;strong&gt;extends&lt;/strong&gt;&lt;/span&gt; 表示JSP翻译后的Servlet所继承的父类,这个属性一般不设置,因为服务器内部默认使jsp继承HttpJspBase类；如果非要设置,继承类必须是Servlet实现类 &lt;br/&gt;3.&lt;span&gt;&lt;strong&gt;session&lt;/strong&gt;&lt;/span&gt; 定义JSP中是否可以直接使用Session隐含对象,默认为true&lt;br/&gt;    如果属性设置为true,在JSP翻译Servlet时,生成以下两句代码:&lt;br/&gt;    HttpSession session = null;&lt;br/&gt;    session = pageContext.getSession();&lt;br/&gt;    * 如果jsp中想使用HttpSession对象,使用session属性默认值true &lt;br/&gt;4.&lt;span&gt;&lt;strong&gt;import&lt;/strong&gt; &lt;/span&gt;完成 JSP翻译后 Servlet 的导包&lt;br/&gt;    jsp在翻译为Servlet时,默认导入三个包:&lt;br/&gt;    import javax.servlet.*;&lt;br/&gt;    import javax.servlet.http.*;&lt;br/&gt;    import javax.servlet.jsp.*;&lt;br/&gt;    jre默认导入 java.lang &lt;br/&gt;    * 在jsp中如果使用类 不属于以上四个包,就需要导包&lt;br/&gt;5.buffer和autoFlush 设置 out隐含对象属性 &lt;br/&gt;   &lt;span&gt;&lt;strong&gt; buffer&lt;/strong&gt; &lt;/span&gt;设置缓冲区大小&lt;br/&gt;    &lt;span&gt;&lt;strong&gt;autoFlush&lt;/strong&gt;&lt;/span&gt; 设置当缓冲区满后,自动刷新&lt;br/&gt;6.&lt;span&gt;&lt;strong&gt;isELIgnored&lt;/strong&gt;&lt;/span&gt; 设置JSP是否执行EL表达式 &lt;br/&gt;    isELIgnored=&quot;false&quot; 不忽略---执行解析&lt;br/&gt;    isELIgnored=&quot;true&quot; 忽略 ---- 不解析 &lt;br/&gt;    * 一般就是默认值false &lt;/p&gt;
&lt;p&gt;7.通过contentType和pageEncoding 设置 JSP页面编码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;span&gt;pageEncoding&lt;/span&gt; &lt;/strong&gt;是 JSP文件源代码在硬盘上编码集,如果设置支持中文的编码集,那么服务器就能正确读取jsp中的中文,并将翻译好的中文字符读取进内存(注意内存中保存的不是字节)&lt;br/&gt;&lt;strong&gt;   &lt;span&gt;contentType&lt;/span&gt;&lt;/strong&gt; 在Servlet生成HTML.传递给浏览器时采用编码&lt;br/&gt;   * Java内存中,是没有编码集这一说的,存的都是字符&lt;br/&gt;   * 这两个属性设置成支持中文的编码集即可,互相之间不打架的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;pageEncoding和contentType区别&lt;/span&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160917200421384&quot; alt=&quot;&quot; width=&quot;696&quot; height=&quot;245&quot;/&gt;&lt;/p&gt;
&lt;p&gt;8.通过&lt;span&gt;&lt;strong&gt;errorPage&lt;/strong&gt;&lt;/span&gt;和&lt;strong&gt;&lt;span&gt;isErrorPage&lt;/span&gt;&lt;/strong&gt; 控制 JSP页面发生错误时跳转&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('826dc751-ac9d-4ed1-9f41-596a29e693de')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_826dc751-ac9d-4ed1-9f41-596a29e693de&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_826dc751-ac9d-4ed1-9f41-596a29e693de&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('826dc751-ac9d-4ed1-9f41-596a29e693de',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_826dc751-ac9d-4ed1-9f41-596a29e693de&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;span&gt;  
    pageEncoding&lt;/span&gt;=&quot;UTF-8&quot;%&amp;gt;  
&amp;lt;%--发生错误，想让用户看到友好页面 error.jsp--%&amp;gt;  
&amp;lt;%@ page errorPage=&quot;/demo4/error.jsp&quot; %&amp;gt;  
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;  
&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;!-- 制作错误 --&amp;gt;  
&amp;lt;%  
    &lt;span&gt;int&lt;/span&gt; d = 1/0&lt;span&gt;;  
&lt;/span&gt;%&amp;gt;  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;testErrorPage.jsp&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cecc5dee-90e0-4084-b3b6-1bf65f26567b')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_cecc5dee-90e0-4084-b3b6-1bf65f26567b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cecc5dee-90e0-4084-b3b6-1bf65f26567b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cecc5dee-90e0-4084-b3b6-1bf65f26567b',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cecc5dee-90e0-4084-b3b6-1bf65f26567b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;span&gt;  
    pageEncoding&lt;/span&gt;=&quot;UTF-8&quot;%&amp;gt;  
&amp;lt;%--当设置了当前页面是错误页面，则可以获得内置对象exception，从而获得错误信息  --%&amp;gt;  
&amp;lt;%@page isErrorPage=&quot;true&quot; %&amp;gt;  
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;  
&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;!-- 错误友好信息页面 --&amp;gt;  
&amp;lt;h4&amp;gt;对不起，服务器正在升级，请稍后访问！&amp;lt;/h4&amp;gt;  
&amp;lt;h5&amp;gt;错误原因：&amp;lt;%=exception.getMessage() %&amp;gt;&amp;lt;/h5&amp;gt;  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;testIsErrorPage.jsp&lt;/span&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;9.5&quot;&gt;
&lt;p&gt;关于错误页面配置,开发中比较常用的是在web.xml中配置&amp;lt;error-page&amp;gt;,一次配置即可.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;500&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/demo5/500.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;404&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/demo5/404.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;error-page&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;include&lt;/strong&gt;&lt;/span&gt;指令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用来&lt;span&gt;&lt;strong&gt;静态包含&lt;/strong&gt;&lt;/span&gt;页面 ----- 将页面公共部分提取出来,通过include完成页面布局。&lt;/p&gt;
&lt;p&gt;语法：&amp;lt;%@ include file=&quot;文件路径&quot; %&amp;gt;&lt;/p&gt;
&lt;p&gt;include包含的是目标页面的整个内容,所以被包含页面,不需要是一个完整HTML,只要编写HTML片段就可以了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('356874be-966f-44cb-afbd-bbd5ce07a8a7')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_356874be-966f-44cb-afbd-bbd5ce07a8a7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_356874be-966f-44cb-afbd-bbd5ce07a8a7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('356874be-966f-44cb-afbd-bbd5ce07a8a7',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_356874be-966f-44cb-afbd-bbd5ce07a8a7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
    pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Insert title here&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 主页面 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 通过 include 包含 logo.jsp &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ include file&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/demo6/logo.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;主页面其它内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;包含页面必须存在的&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;   
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ include file&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/demo6/footer.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;index.jsp&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5480bd2c-46e9-4ba4-b591-3b493f059f24')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_5480bd2c-46e9-4ba4-b591-3b493f059f24&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5480bd2c-46e9-4ba4-b591-3b493f059f24&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5480bd2c-46e9-4ba4-b591-3b493f059f24',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5480bd2c-46e9-4ba4-b591-3b493f059f24&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
    pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;这是系统LOGO&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;logo.jsp&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fe5a6b41-de74-487d-908d-9088d4286eeb')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_fe5a6b41-de74-487d-908d-9088d4286eeb&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fe5a6b41-de74-487d-908d-9088d4286eeb&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fe5a6b41-de74-487d-908d-9088d4286eeb',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fe5a6b41-de74-487d-908d-9088d4286eeb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
    pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;  
    &lt;span&gt;String&lt;/span&gt;&lt;span&gt; s &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;computer@mail.ustc.edu.cn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;      
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;s &lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;footer.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118154842484-30538756.png&quot; alt=&quot;&quot; width=&quot;668&quot; height=&quot;364&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;taglib&lt;/strong&gt;&lt;/span&gt;指令&lt;/p&gt;
&lt;p&gt;用来在jsp页面引用标签库文件&lt;/p&gt;
&lt;p&gt;* 定义标签作用为了简化 jsp页面开发&lt;br/&gt;* 通过taglib 指令引入 jstl标签库,语法： &amp;lt;%@ taglib uri=&quot;&quot; prefix=&quot;&quot; %&amp;gt;&lt;/p&gt;
&lt;p&gt;uri ---- 定义标签 唯一命名空间&lt;/p&gt;
&lt;p&gt;prefixt ---- 命名空间前缀 &lt;/p&gt;
&lt;p&gt;引用jstl时,在导入的jstl.jar中 META-INF/c.tld &lt;/p&gt;
&lt;p&gt;  &amp;lt;short-name&amp;gt;c&amp;lt;/short-name&amp;gt;   -------- 就是prefix属性 &lt;br/&gt;  &amp;lt;uri&amp;gt;http://java.sun.com/jsp/jstl/core&amp;lt;/uri&amp;gt; ----- 就是uri属性  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6115a10a-b186-4957-9417-12699fbf16df')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_6115a10a-b186-4957-9417-12699fbf16df&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6115a10a-b186-4957-9417-12699fbf16df&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6115a10a-b186-4957-9417-12699fbf16df',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6115a10a-b186-4957-9417-12699fbf16df&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
    pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;通过 taglib 指令 引用jstl ，必须导入jstl 的 jar包&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;在 javaee &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; libraries 存在 jstl&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1.2&lt;/span&gt;&lt;span&gt;.jar&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ taglib uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://java.sun.com/jsp/jstl/core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Insert title here&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;  
    request.setAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;${requestScope.a&amp;gt;8}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;a的值 大于8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demo.jsp&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;JSP动作标签&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;JSP标签也称之为Jsp Action (JSP动作) 元素，它用于在Jsp页面中提供业务逻辑功能，避免在JSP页面中直接编写java代码，造成jsp页面难以维护。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意，&lt;strong&gt;这些标签是默认存在的，不需要引入Jar包&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;jsp:include&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;效果等价于request.getRequestDispatcher().include,&lt;span&gt;原理是动态包含,区别于&amp;lt;%@ include file=&quot;文件路径&quot; %&amp;gt;的静态包含&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118182628749-2045754033.png&quot; alt=&quot;&quot; width=&quot;763&quot; height=&quot;309&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;jsp:forward&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;jsp:forward page=&quot;/demo11/b.jsp&quot;&amp;gt;&amp;lt;/jsp:forward&amp;gt; 等价于 request.getRequestDispatcher(&quot;/demo11/b.jsp&quot;).forward(request,response);&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7deb904c-4fe8-4062-90dd-c200ee5d6aaa')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_7deb904c-4fe8-4062-90dd-c200ee5d6aaa&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7deb904c-4fe8-4062-90dd-c200ee5d6aaa&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7deb904c-4fe8-4062-90dd-c200ee5d6aaa',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7deb904c-4fe8-4062-90dd-c200ee5d6aaa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
    pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Insert title here&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello A&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;  
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 看不到Hello A，因为在跳转之前，会清空response 缓冲区   
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; request.getRequestDispatcher(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/demo11/b.jsp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).forward(request,response);  
&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;  
    request.setAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lichunchun&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jsp:forward &lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;=&quot;/demo11/b.jsp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jsp:param &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;ustc&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;school&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jsp:forward&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demo.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注：&amp;lt;jsp:forward&amp;gt;之后的代码不会被执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;jsp:param &amp;gt; &lt;/span&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;绑定在&amp;lt;jsp:forward&amp;gt;中可以用来传递参数.&lt;/p&gt;
&lt;p&gt;&amp;lt;jsp:forward page=&quot;/demo11/b.jsp&quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &amp;lt;jsp:param value=&quot;ustc&quot; name=&quot;school&quot;/&amp;gt;&lt;br/&gt;&amp;lt;/jsp:forward&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;jsp:useBean&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;jsp:useBean&amp;gt;标签用来在jsp页面中创建一个Bean实例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;jsp:setProperty&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置bean的属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&amp;lt;jsp:getProperty&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;获取bean的属性&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1ce8cdc7-86b9-45bf-adec-ced0a3fd79e1')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_1ce8cdc7-86b9-45bf-adec-ced0a3fd79e1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1ce8cdc7-86b9-45bf-adec-ced0a3fd79e1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1ce8cdc7-86b9-45bf-adec-ced0a3fd79e1',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1ce8cdc7-86b9-45bf-adec-ced0a3fd79e1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot;  pageEncoding=&quot;gb2312&quot;%&amp;gt;
&amp;lt;jsp:useBean id=&quot;user&quot; scope=&quot;page&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.jsp.test.TestBean&quot;/&amp;gt;
&amp;lt;jsp:setProperty name=&quot;user&quot; property=&quot;*&quot;/&amp;gt;&lt;span&gt;
或者用以下,param可以不填写,其中param对应的是提交页面的表单name
&lt;/span&gt;&amp;lt;jsp:setProperty property=&quot;userName&quot; name=&quot;user&quot; param=&quot;userName&quot;/&amp;gt;
&amp;lt;jsp:setProperty property=&quot;password&quot; name=&quot;user&quot; param=&quot;password&quot;/&amp;gt;
&amp;lt;jsp:setProperty property=&quot;age&quot; name=&quot;user&quot; param=&quot;age&quot;/&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;&lt;span&gt; 
      注册成功:&lt;/span&gt;&amp;lt;br&amp;gt;
      &amp;lt;hr&amp;gt;&lt;span&gt;
      使用Bean的属性方法&lt;/span&gt;&amp;lt;br&amp;gt;&lt;span&gt;
      用户名: &lt;/span&gt;&amp;lt;%=user.getUserName()%&amp;gt;&amp;lt;br&amp;gt;&lt;span&gt;
      密码: &lt;/span&gt;&amp;lt;%=user.getPassword()%&amp;gt;&amp;lt;br&amp;gt;&lt;span&gt;
      年龄: &lt;/span&gt;&amp;lt;%=user.getAge()%&amp;gt;&amp;lt;br&amp;gt;
      &amp;lt;hr&amp;gt;&lt;span&gt;
      使用getProperty&lt;/span&gt;&amp;lt;br&amp;gt;&lt;span&gt;
      用户名:&lt;/span&gt;&amp;lt;jsp:getProperty name=&quot;user&quot; property=&quot;userName&quot;/&amp;gt;&amp;lt;br&amp;gt;&lt;span&gt;
      密码:  &lt;/span&gt;&amp;lt;jsp:getProperty name=&quot;user&quot; property=&quot;password&quot;/&amp;gt;&amp;lt;br&amp;gt;&lt;span&gt;
      年龄:  &lt;/span&gt;&amp;lt;jsp:getProperty name=&quot;user&quot; property=&quot;age&quot;/&amp;gt;&lt;span&gt;
      客户端名称:&lt;/span&gt;&amp;lt;%=request.getRemoteAddr() %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demo.jsp&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;内置对象&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;JSP编译为Servlet代码时,有些对象是默认已经创建好的,这类对象可以直接在jsp中使用,称之为&lt;span&gt;&lt;strong&gt;九大内置对象&lt;/strong&gt;&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118163335827-229888976.png&quot; alt=&quot;&quot; width=&quot;635&quot; height=&quot;341&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;page对象&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;page 代表当前jsp生成的Servlet对象&lt;/p&gt;
&lt;p&gt;* page 是 Object类型，只能使用Object中方法 ---- 这个对象在开发中不建议使用&lt;br/&gt;* 可以将page强制转换成HttpServlet对象&lt;br/&gt;&amp;lt;%&lt;br/&gt;      HttpServlet httpServlet = (HttpServlet)page;&lt;br/&gt;      out.print(httpServlet.getServletContext().getRealPath(&quot;/&quot;));&lt;br/&gt;%&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;JSP四种数据域对象&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面我们提到过,Servlet将数据存储于Request,ServletContext,Session三种域.&lt;/p&gt;
&lt;p&gt;JSP在以上基础扩充了page对象,&lt;span&gt;&lt;strong&gt;&lt;span&gt;共有四种域对象(request,application,session,page)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;,其中application是ServletContext的实现.&lt;/p&gt;
&lt;p&gt;* page数据范围存放数据，只在当前jsp内有效&lt;/p&gt;
&lt;p&gt;* 向page 范围保存数据，必须通过 pageContext对象 setAttribute方法&lt;/p&gt;
&lt;p&gt;*pageContext还可以获取其他八个隐式对象.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118164447765-1128210971.png&quot; alt=&quot;&quot; width=&quot;431&quot; height=&quot;204&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;out对象&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;out 功能向浏览器输出信息，是JspWriter类型，内部使用PrintWriter实现，拥有独立缓冲区。&lt;/p&gt;
&lt;p&gt;out创建：out对象通过pageContext对象获得，而在创建pageContext对象时，需指定out缓冲区大小以及是否自动flush &lt;br/&gt;* 通过 page指令 buffer autoFlush 设置out 缓存区大小 以及是否自动 flush，默认的缓冲区是&lt;strong&gt;8kb.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fd64ea58-b10b-4d2d-8add-dc72be3d7cd2')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_fd64ea58-b10b-4d2d-8add-dc72be3d7cd2&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd64ea58-b10b-4d2d-8add-dc72be3d7cd2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fd64ea58-b10b-4d2d-8add-dc72be3d7cd2',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd64ea58-b10b-4d2d-8add-dc72be3d7cd2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
    pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page isErrorPage&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;通过 buffer和autoFlush 设置out 对象缓冲区&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&amp;lt;&lt;/span&gt;&lt;span&gt;%@page buffer&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1kb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; autoFlush&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;&lt;span&gt;--%&amp;gt;  
&lt;/span&gt;&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-Type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Insert title here&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;JSP 九个内置对象&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;  
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 非要使用page对象  
    HttpServlet httpServlet &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (HttpServlet)page;  
    out.print(httpServlet.getServletContext().getRealPath(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));  
&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;  
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向四种数据范围保存数据  
    request.setAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
    session.setAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;session&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
    application.setAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
      
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 向page 范围保存数据，必须通过 pageContext对象  
    pageContext.setAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;request.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;session.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;application.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;pageContext.getAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
  
&lt;span&gt;&amp;lt;%&lt;/span&gt;  
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 想在四个数据范围查询 指定名称数据  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 顺序按照 page &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; request  &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; session &lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt; application   
    &lt;/span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;span&gt; value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; pageContext.findAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;查找name属性 ：&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;value &lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;通过EL 取得数据&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;  
${sessionScope.name }  
&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果直接写name  默认会调用 pageContext.findAttribute &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;  
${name  }   
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demo.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;观察JSP编译的Servlet文件可以查看这些隐式对象.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118165030968-586273966.png&quot; alt=&quot;&quot; width=&quot;705&quot; height=&quot;377&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;exception对象&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;exception对象是java.lang.Trowable类的实例 (&lt;strong&gt;使用前需要在jsp页面设置page指令 isErrorPage=“true”&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;exception对象用来处理JSP文件在执行时所有发生的错误和异常&lt;/p&gt;
&lt;p&gt;exception对象可以和page指令一起使用，通过指定某一个页面为错误处理页面，对错误进行处理&lt;/p&gt;
&lt;p&gt;&amp;lt;%@ page isErrorPage=&quot;true&quot;%&amp;gt;的页面内使用。（&lt;strong&gt;最好还是用第二种配置web.xml的方式&lt;/strong&gt;）&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;表达式语言EL&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;EL语言属于小团队开发,后来在Servlet2.4之后被并入了官方规范之中,目的是为了简化JSP代码开发.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;主要功能:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;获取JSP四个范围中保存的数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;${pageScope.属性名称}&lt;/p&gt;
&lt;p&gt;${requestScope.属性名称}&lt;/p&gt;
&lt;p&gt;${sessionScope.属性名称}&lt;/p&gt;
&lt;p&gt;${applicationScope.属性名}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果查找属性不存在，返回是一个 &quot;&quot; 空串，而不是null&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b5dc531d-dc6a-4341-b7ee-d1799a7889bf')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_b5dc531d-dc6a-4341-b7ee-d1799a7889bf&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b5dc531d-dc6a-4341-b7ee-d1799a7889bf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b5dc531d-dc6a-4341-b7ee-d1799a7889bf',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b5dc531d-dc6a-4341-b7ee-d1799a7889bf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;span&gt;  
    pageEncoding&lt;/span&gt;=&quot;UTF-8&quot;  isELIgnored=&quot;false&quot;%&amp;gt;  
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;  
&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;!-- 通过el 获得四个数据范围 数据  page request session application--&amp;gt;  
&amp;lt;%&lt;span&gt;  
    pageContext.setAttribute(&lt;/span&gt;&quot;city&quot;,&quot;合肥&quot;&lt;span&gt;);  
    request.setAttribute(&lt;/span&gt;&quot;name&quot;,&quot;李春春&quot;&lt;span&gt;);  
    session.setAttribute(&lt;/span&gt;&quot;school&quot;,&quot;中国科学技术大学&quot;&lt;span&gt;);  
    application.setAttribute(&lt;/span&gt;&quot;pnum&quot;,100&lt;span&gt;);  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
${pageScope.city }  
${requestScope.name }  
${sessionScope.school }  
${applicationScope.pnum }  
  
&lt;/span&gt;&amp;lt;h1&amp;gt;省略指定范围, 默认调用pageContext.findAttribute() 在四个范围依次查找&amp;lt;/h1&amp;gt;&lt;span&gt;  
${name }   
${city }  
  
&lt;/span&gt;&amp;lt;h1&amp;gt;EL找不到数据返回&quot;&quot;空串、传统表达式方式找不到数据返回null&amp;lt;/h1&amp;gt;  
&amp;lt;h3&amp;gt;abc: &amp;lt;%=request.getAttribute(&quot;abc&quot;) %&amp;gt;&amp;lt;/h3&amp;gt;  
&amp;lt;h3&amp;gt;abc: ${abc }&amp;lt;/h3&amp;gt;  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demo.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;获取JavaBean属性,数组,Collection,Map等数据集合&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('064609b9-cd81-46a5-8f52-2ca3e58e3704')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_064609b9-cd81-46a5-8f52-2ca3e58e3704&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_064609b9-cd81-46a5-8f52-2ca3e58e3704&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('064609b9-cd81-46a5-8f52-2ca3e58e3704',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_064609b9-cd81-46a5-8f52-2ca3e58e3704&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;span&gt;  
    pageEncoding&lt;/span&gt;=&quot;UTF-8&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;ustc.lichunchun.domain.Person&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;ustc.lichunchun.domain.City&quot;%&amp;gt;  
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;  
&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;!-- 通过EL 获得 存放在四个范围内的 java对象类型 --&amp;gt;  
&amp;lt;%&lt;span&gt;  
    Person person &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();  
    person.setName(&lt;/span&gt;&quot;李春春&quot;&lt;span&gt;);  
    person.setAge(&lt;/span&gt;24&lt;span&gt;);  
      
    City city &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; City();  
    city.setName(&lt;/span&gt;&quot;合肥&quot;&lt;span&gt;);  
    person.setCity(city);  
      
    pageContext.setAttribute(&lt;/span&gt;&quot;person&quot;&lt;span&gt;, person);  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
${pageScope.person.name }  
&lt;/span&gt;&amp;lt;!-- 上面写法等价于 pageContext.getAttribute(&quot;person&quot;).getName() --&amp;gt;&lt;span&gt;  
${pageScope.person.age }  
${pageScope.person[&lt;/span&gt;&quot;age&quot;&lt;span&gt;] }  
${pageScope[&lt;/span&gt;&quot;person&quot;][&quot;age&quot;&lt;span&gt;] }  
  
&lt;/span&gt;&amp;lt;!-- 获得person的city对象名称 --&amp;gt;&lt;span&gt;  
${pageScope.person.city.name }  
&lt;/span&gt;&amp;lt;!-- pageContext.getAttribute(&quot;person&quot;).getCity().getName() --&amp;gt;&lt;span&gt;  
${pageScope[&lt;/span&gt;&quot;person&quot;][&quot;city&quot;][&quot;name&quot;&lt;span&gt;] }  
&lt;/span&gt;&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;getFromJavaBean.jsp&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a60bdc9c-0afe-4c5f-b848-82530141e8b5')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_a60bdc9c-0afe-4c5f-b848-82530141e8b5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a60bdc9c-0afe-4c5f-b848-82530141e8b5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a60bdc9c-0afe-4c5f-b848-82530141e8b5',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a60bdc9c-0afe-4c5f-b848-82530141e8b5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;span&gt;  
    pageEncoding&lt;/span&gt;=&quot;UTF-8&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.List&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.ArrayList&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.Map&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.HashMap&quot;%&amp;gt;  
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;  
&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;!-- 通过EL 取得 List 或者 Map中数据 --&amp;gt;  
&amp;lt;%&lt;span&gt;  
    List list &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();  
    list.add(&lt;/span&gt;&quot;abc&quot;&lt;span&gt;);  
    list.add(&lt;/span&gt;&quot;bcd&quot;&lt;span&gt;);  
    list.add(&lt;/span&gt;&quot;efg&quot;&lt;span&gt;);  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将list 保存page范围  &lt;/span&gt;
    pageContext.setAttribute(&quot;list&quot;&lt;span&gt;,list);  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
${pageScope.list }  
取得list的第二个元素 ：${pageScope.list[&lt;/span&gt;1] }&amp;lt;br/&amp;gt;  
  
&amp;lt;%&lt;span&gt;  
    Map map &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashMap();  
    map.put(&lt;/span&gt;&quot;aaa&quot;,&quot;111&quot;&lt;span&gt;);  
    map.put(&lt;/span&gt;&quot;bbb&quot;,&quot;222&quot;&lt;span&gt;);  
    pageContext.setAttribute(&lt;/span&gt;&quot;map&quot;&lt;span&gt;,map);  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
取得 map 中 bbb对应 value : ${pageScope.map.bbb }、${pageScope.map[&lt;/span&gt;&quot;bbb&quot;] }&amp;lt;br/&amp;gt;  
  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;getFromList.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;上述代码获取数组,List,Map时,可以使用.或者[]获取&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;. &lt;/span&gt;和 &lt;span&gt;[ ] &lt;/span&gt;有什么区别 ？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;答案&lt;/strong&gt;：&lt;strong&gt;.&lt;/strong&gt; 和 &lt;strong&gt;[ ]&lt;/strong&gt; 都可以用来取得EL 属性值，&lt;strong&gt;.&lt;/strong&gt;可以实现的功能&lt;strong&gt;[ ] &lt;/strong&gt;也都可以！ &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;例如&lt;/strong&gt;： ${pageScope.user.name} 也可以写为 ${pageScope.user[&quot;name&quot;]}&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    [ ] 可以使用特殊标识信息，但是. 不可以 &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('04c6b23f-99b6-44dd-bb9c-4233cd303baf')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_04c6b23f-99b6-44dd-bb9c-4233cd303baf&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_04c6b23f-99b6-44dd-bb9c-4233cd303baf&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('04c6b23f-99b6-44dd-bb9c-4233cd303baf',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_04c6b23f-99b6-44dd-bb9c-4233cd303baf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;span&gt;  
    pageEncoding&lt;/span&gt;=&quot;UTF-8&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.List&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.ArrayList&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.Map&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.HashMap&quot;%&amp;gt;  
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;  
&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;!-- 通过EL 取得 List 或者 Map中数据 --&amp;gt;  
&amp;lt;%&lt;span&gt;  
    List list &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();  
    list.add(&lt;/span&gt;&quot;abc&quot;&lt;span&gt;);  
    list.add(&lt;/span&gt;&quot;bcd&quot;&lt;span&gt;);  
    list.add(&lt;/span&gt;&quot;efg&quot;&lt;span&gt;);  
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将list 保存page范围  &lt;/span&gt;
    pageContext.setAttribute(&quot;list&quot;&lt;span&gt;,list);  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
${pageScope.list }  
取得list的第二个元素 ：${pageScope.list[&lt;/span&gt;1] }&amp;lt;br/&amp;gt;  
  
&amp;lt;%&lt;span&gt;  
    Map map &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashMap();  
    map.put(&lt;/span&gt;&quot;aaa&quot;,&quot;111&quot;&lt;span&gt;);  
    map.put(&lt;/span&gt;&quot;bbb&quot;,&quot;222&quot;&lt;span&gt;);  
    pageContext.setAttribute(&lt;/span&gt;&quot;map&quot;&lt;span&gt;,map);  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
取得 map 中 bbb对应 value : ${pageScope.map.bbb }、${pageScope.map[&lt;/span&gt;&quot;bbb&quot;] }&amp;lt;br/&amp;gt;  
  
&amp;lt;h1&amp;gt;. 和 [] 区别&amp;lt;/h1&amp;gt;  
&amp;lt;%&lt;span&gt;  
    pageContext.setAttribute(&lt;/span&gt;&quot;0&quot;,&quot;itcast&quot;&lt;span&gt;);  
    pageContext.setAttribute(&lt;/span&gt;&quot;aa.bb&quot;,&quot;特殊标识信息&quot;&lt;span&gt;);  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
特殊字符0 属性值：${pageScope[&lt;/span&gt;&quot;0&quot;] } &amp;lt;br/&amp;gt;&lt;span&gt;  
特殊字符 aa.bb 属性值 ：${pageScope[&lt;/span&gt;&quot;aa.bb&quot;] } &amp;lt;br/&amp;gt;  
  
  
&amp;lt;%&lt;span&gt;  
    String ds &lt;/span&gt;= &quot;aa.bb&quot;&lt;span&gt;;  
    pageContext.setAttribute(&lt;/span&gt;&quot;s&quot;&lt;span&gt;,ds);  
&lt;/span&gt;%&amp;gt;  
&amp;lt;!-- 在使用[] 进行属性取值时，要加&quot;&quot; , 若不加&quot;&quot; 则认为是一个变量 --&amp;gt;&lt;span&gt;  
特殊字符 aa.bb 属性值 ：${pageScope[s] }&lt;/span&gt;&amp;lt;br/&amp;gt;&amp;lt;!-- 特殊标识信息 --&amp;gt;&lt;span&gt;  
特殊字符 aa.bb 属性值 ：${pageScope[&lt;/span&gt;&quot;s&quot;] }&amp;lt;!-- aa.bb --&amp;gt;  
  
&amp;lt;!-- 利用el表达式获取web应用的名称 --&amp;gt;  
&amp;lt;a href=&quot;${pageContext.request.contextPath }/demo1.jsp&quot;&amp;gt;点我&amp;lt;/a&amp;gt;  
  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;difference.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;算术,比较,逻辑运算&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在EL 执行运算时，运算语句必须写入 ${ }中 &lt;/p&gt;
&lt;p&gt;&lt;span&gt;* 在EL 获得属性值 执行算术运算，自动类型转换 ---- 执行算术运算时，进行运算参数，必须都是数字 &lt;br/&gt;${&quot;a&quot;+&quot;b&quot;} ---- 发生数字格式化错误 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;empty运算符&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1) 判断一个属性是否存在 ， 通常empty运算符都是结合c:if 一起使用&lt;br/&gt;2) 使用empty 判断List 或者 Map是否为空 (size==0)&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;二元表达式：${user!=null?user.name:&quot;&quot;}  ----- 三元运算符&lt;/p&gt;
&lt;p&gt;不能使用保留字存储属性，保留字有特殊意义&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EL表达式保留关键字：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160917224927467&quot; alt=&quot;&quot; width=&quot;608&quot; height=&quot;146&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('90f12fd8-ee57-426c-9b39-adcf2e2a6a76')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_90f12fd8-ee57-426c-9b39-adcf2e2a6a76&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_90f12fd8-ee57-426c-9b39-adcf2e2a6a76&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('90f12fd8-ee57-426c-9b39-adcf2e2a6a76',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_90f12fd8-ee57-426c-9b39-adcf2e2a6a76&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.HashMap&quot;%&amp;gt;  
&amp;lt;%@page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.ArrayList&quot;%&amp;gt;  
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;&lt;span&gt;  
    pageEncoding&lt;/span&gt;=&quot;UTF-8&quot;%&amp;gt;  
&amp;lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&amp;gt;  
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;  
&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;h2&amp;gt;EL 执行 运算&amp;lt;/h2&amp;gt;  
&amp;lt;%&lt;span&gt;  
    pageContext.setAttribute(&lt;/span&gt;&quot;a&quot;, &quot;10&quot;&lt;span&gt;);  
    pageContext.setAttribute(&lt;/span&gt;&quot;b&quot;, &quot;20&quot;&lt;span&gt;);  
    pageContext.setAttribute(&lt;/span&gt;&quot;10&quot;, &quot;30&quot;&lt;span&gt;);  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
${a&lt;/span&gt;+b }&amp;lt;!-- 30 --&amp;gt;  
&amp;lt;%--经典错误 ：${&quot;a&quot;+&quot;b&quot; }--%&amp;gt;&lt;span&gt;  
${pageScope.a }&lt;/span&gt;&amp;lt;!-- 10 --&amp;gt;&lt;span&gt;  
${pageScope[&lt;/span&gt;&quot;a&quot;] }&amp;lt;!-- 10 --&amp;gt;&lt;span&gt;  
${pageScope[a] }&lt;/span&gt;&amp;lt;!-- 30 --&amp;gt;&lt;span&gt;  
${a }&lt;/span&gt;&amp;lt;!-- 10 --&amp;gt;&lt;span&gt;  
${&lt;/span&gt;&quot;a&quot; }&amp;lt;!-- a --&amp;gt;  
  
&amp;lt;h2&amp;gt;empty运算符&amp;lt;/h2&amp;gt;&lt;span&gt;  
${empty name }&lt;/span&gt;&amp;lt;!-- 如果四个数据范围都没有name属性 返回true --&amp;gt;  
&amp;lt;c:&lt;span&gt;if&lt;/span&gt; test=&quot;${empty name }&quot;&amp;gt;  
    &amp;lt;h3&amp;gt;根本不存在 name数据&amp;lt;/h3&amp;gt;  
&amp;lt;/c:&lt;span&gt;if&lt;/span&gt;&amp;gt;  
  
&amp;lt;!-- 判断list 获得 map是否为空 --&amp;gt;  
&amp;lt;%&lt;span&gt;  
    pageContext.setAttribute(&lt;/span&gt;&quot;list&quot;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList());  
    pageContext.setAttribute(&lt;/span&gt;&quot;map&quot;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashMap());  
&lt;/span&gt;%&amp;gt;&lt;span&gt;  
${empty list }  
${empty map }  
  
&lt;/span&gt;&amp;lt;h2&amp;gt;二元表达式&amp;lt;/h2&amp;gt;&lt;span&gt;  
${(empty map)&lt;/span&gt;?&quot;map中没有任何元素&quot;:&quot;map不为空&quot;&lt;span&gt; }  
  
&lt;/span&gt;&amp;lt;%     
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不能使用保留字 存储属性，保留字有特殊意义  &lt;/span&gt;
    pageContext.setAttribute(&quot;empty&quot;,&quot;111&quot;&lt;span&gt;);  
&lt;/span&gt;%&amp;gt;  
&amp;lt;%--${pageContext[&quot;empty&quot;] }--%&amp;gt;  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;demo.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;内置11个对象(web开发常用对象)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118213515843-953080220.png&quot; alt=&quot;&quot; width=&quot;609&quot; height=&quot;525&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt;JSTL标签库&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;项目开发中,JSP开发基本都会约定引入JSTL标签库(Java Standard Tag Liberary),统一规范,简化代码开发.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下载jstl.jar和standard.jar,通过taglib指令引入jstl标签库对应的uri,也可以在web.xml中直接进行配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7af08b99-56df-4f93-a8a7-98edb21d212b')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7af08b99-56df-4f93-a8a7-98edb21d212b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7af08b99-56df-4f93-a8a7-98edb21d212b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7af08b99-56df-4f93-a8a7-98edb21d212b',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7af08b99-56df-4f93-a8a7-98edb21d212b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;web-app version=&quot;2.4&quot;&lt;span&gt; 
    xmlns&lt;/span&gt;=&quot;http://java.sun.com/xml/ns/j2ee&quot;&lt;span&gt; 
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://java.sun.com/xml/ns/j2ee 
        http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&amp;gt;&lt;/span&gt;
    &amp;lt;jsp-config&amp;gt;
    &amp;lt;taglib&amp;gt;
    &amp;lt;taglib-uri&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/jstl/fmt&amp;lt;/taglib-uri&amp;gt;&lt;/span&gt;
    &amp;lt;taglib-location&amp;gt;/WEB-INF/fmt.tld&amp;lt;/taglib-location&amp;gt;
    &amp;lt;/taglib&amp;gt;
    &amp;lt;taglib&amp;gt;
    &amp;lt;taglib-uri&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/jstl/fmt-rt&amp;lt;/taglib-uri&amp;gt;&lt;/span&gt;
    &amp;lt;taglib-location&amp;gt;/WEB-INF/fmt-rt.tld&amp;lt;/taglib-location&amp;gt;
    &amp;lt;/taglib&amp;gt;
    &amp;lt;taglib&amp;gt;
    &amp;lt;taglib-uri&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/jstl/core&amp;lt;/taglib-uri&amp;gt;&lt;/span&gt;
    &amp;lt;taglib-location&amp;gt;/WEB-INF/c.tld&amp;lt;/taglib-location&amp;gt;
    &amp;lt;/taglib&amp;gt;
    &amp;lt;taglib&amp;gt;
    &amp;lt;taglib-uri&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/jstl/core-rt&amp;lt;/taglib-uri&amp;gt;&lt;/span&gt;
    &amp;lt;taglib-location&amp;gt;/WEB-INF/c-rt.tld&amp;lt;/taglib-location&amp;gt;
    &amp;lt;/taglib&amp;gt;
    &amp;lt;taglib&amp;gt;
    &amp;lt;taglib-uri&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/jstl/sql&amp;lt;/taglib-uri&amp;gt;&lt;/span&gt;
    &amp;lt;taglib-location&amp;gt;/WEB-INF/sql.tld&amp;lt;/taglib-location&amp;gt;
    &amp;lt;/taglib&amp;gt;
    &amp;lt;taglib&amp;gt;
    &amp;lt;taglib-uri&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/jstl/sql-rt&amp;lt;/taglib-uri&amp;gt;&lt;/span&gt;
    &amp;lt;taglib-location&amp;gt;/WEB-INF/sql-rt.tld&amp;lt;/taglib-location&amp;gt;
    &amp;lt;/taglib&amp;gt;
    &amp;lt;taglib&amp;gt;
    &amp;lt;taglib-uri&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/jstl/x&amp;lt;/taglib-uri&amp;gt;&lt;/span&gt;
    &amp;lt;taglib-location&amp;gt;/WEB-INF/x.tld&amp;lt;/taglib-location&amp;gt;
    &amp;lt;/taglib&amp;gt;
    &amp;lt;taglib&amp;gt;
    &amp;lt;taglib-uri&amp;gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;java.sun.com/jstl/x-rt&amp;lt;/taglib-uri&amp;gt;&lt;/span&gt;
    &amp;lt;taglib-location&amp;gt;/WEB-INF/x-rt.tld&amp;lt;/taglib-location&amp;gt;
    &amp;lt;/taglib&amp;gt;
    &amp;lt;/jsp-config&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;web.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;JSTL由五种主要标签组成:&lt;strong&gt;&lt;br class=&quot;Apple-interchange-newline&quot;/&gt;&lt;/strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171118220045624-1656179687.png&quot; alt=&quot;&quot; width=&quot;90&quot; height=&quot;133&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体的&lt;a href=&quot;http://www.runoob.com/jsp/jsp-jstl.html&quot; target=&quot;_blank&quot;&gt;语法参考 &lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;过滤器,监听器&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;过滤器&lt;/strong&gt;&lt;/span&gt;可以对请求和响应做出拦截操作.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171119190059109-48951339.png&quot; alt=&quot;&quot; width=&quot;557&quot; height=&quot;336&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置多个filter:&lt;/p&gt;
&lt;p&gt;1.继承filter类,实现init,doFilter,destroy三个类方法.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ab9be48d-7d30-4b99-84d3-66f18890c5e1')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_ab9be48d-7d30-4b99-84d3-66f18890c5e1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ab9be48d-7d30-4b99-84d3-66f18890c5e1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ab9be48d-7d30-4b99-84d3-66f18890c5e1',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ab9be48d-7d30-4b99-84d3-66f18890c5e1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入必需的 java 库&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; javax.servlet.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现 Filter 类&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LogFilter &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Filter  {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;  init(FilterConfig config) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取初始化参数&lt;/span&gt;
        String site = config.getInitParameter(&quot;Site&quot;&lt;span&gt;); 

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出初始化参数&lt;/span&gt;
        System.out.println(&quot;网站名称: &quot; +&lt;span&gt; site); 
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;  doFilter(ServletRequest request, ServletResponse response, FilterChain chain) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; java.io.IOException, ServletException {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出站点名称&lt;/span&gt;
        System.out.println(&quot;站点网址：http://www.runoob.com&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把请求传回过滤链&lt;/span&gt;
&lt;span&gt;        chain.doFilter(request,response);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; destroy( ){
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 在 Filter 实例被 Web 容器从服务移除之前调用 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;logFilter.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2.在web.xml进行配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2a2fe347-7341-4cbf-bc61-72668bf018b8')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2a2fe347-7341-4cbf-bc61-72668bf018b8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2a2fe347-7341-4cbf-bc61-72668bf018b8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2a2fe347-7341-4cbf-bc61-72668bf018b8',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2a2fe347-7341-4cbf-bc61-72668bf018b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;LogFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.runoob.test.LogFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test-param&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Initialization Paramter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;AuthenFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.runoob.test.AuthenFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test-param&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Initialization Paramter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;LogFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;AuthenFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;web.xml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;监听器&lt;/strong&gt;&lt;/span&gt;顾名思义,用来观察对象的状态.在Servlet规范中提供了8个监听器接口.&lt;/p&gt;
&lt;p&gt;创建、销毁监听器3个&lt;/p&gt;
&lt;p&gt;ServletContextListener&lt;span&gt;：监听&lt;/span&gt;&lt;span&gt;ServletContext&lt;/span&gt;&lt;span&gt;的创建和销毁的监听器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;HttpSessionListener:&lt;span&gt;监听&lt;/span&gt;&lt;span&gt;HttpSession&lt;/span&gt;&lt;span&gt;的创建和销毁的监听器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ServletRequestListener&lt;span&gt;：监听&lt;/span&gt;&lt;span&gt;ServletRequest&lt;/span&gt;&lt;span&gt;的创建和销毁的监听器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;属性变化监听器3个&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ServletContextAttributeListener:&lt;/span&gt;&lt;span&gt;监听放到应用范围中的数据变化（新添加、修改的、删除的）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;HttpSessionAttributeListener:&lt;span&gt;（统计登录用户列表）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ServletRequestAttributeListener&lt;/p&gt;
&lt;p&gt;感知型监听器2个&lt;/p&gt;
&lt;p&gt;HttpSessionBindingListener：谁实现这个接口，就能感知自己何时被HttpSession&lt;span&gt;绑定和解绑了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;HttpSessionActivationListener：谁实现这个接口，就能感知自己何时随着HttpSession&lt;span&gt;对象钝化和激活&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;web.xml中&lt;/span&gt;&lt;span&gt;配置监听器&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        com.journaldev.listener.AppContextListener
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;文件上传下载&lt;/h3&gt;
&lt;h4&gt;上传&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意,这里代码是搬运苍狼大神的&lt;a href=&quot;https://www.cnblogs.com/xdp-gacl/p/4200090.html&quot; target=&quot;_blank&quot;&gt;博文&lt;/a&gt;,用于模仿学习.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件的上传下载是使用流来进行传输,java web一般使用的是apache的file-upload组件.&lt;/p&gt;
&lt;p&gt;1.引入commons-fileupload.jar和commons-io.jar&lt;/p&gt;
&lt;p&gt;2.表单中需要&amp;lt;input&amp;gt;的type标为file,&lt;/p&gt;
&lt;p&gt;    enctype标为multipart/form-data,&lt;/p&gt;
&lt;p&gt;    method标为post&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/818555/201711/818555-20171119194439906-1728286183.png&quot; alt=&quot;&quot; width=&quot;718&quot; height=&quot;146&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3. 编写Servlet&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; me.gacl.web.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileOutputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServlet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.FileItem;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.disk.DiskFileItemFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.servlet.ServletFileUpload;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UploadHandleServlet &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HttpServlet {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doGet(HttpServletRequest request, HttpServletResponse response)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到上传文件的保存目录，将上传的文件存放于WEB-INF目录下，不允许外界直接访问，保证上传文件的安全&lt;/span&gt;
                String savePath = &lt;span&gt;this&lt;/span&gt;.getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;&lt;span&gt;);
                File file &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(savePath);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断上传文件的保存目录是否存在&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!file.exists() &amp;amp;&amp;amp; !&lt;span&gt;file.isDirectory()) {
                    System.out.println(savePath&lt;/span&gt;+&quot;目录不存在，需要创建&quot;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建目录&lt;/span&gt;
&lt;span&gt;                    file.mkdir();
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息提示&lt;/span&gt;
                String message = &quot;&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用Apache文件上传组件处理文件上传步骤：
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、创建一个DiskFileItemFactory工厂&lt;/span&gt;
                    DiskFileItemFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DiskFileItemFactory();
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、创建一个文件上传解析器&lt;/span&gt;
                    ServletFileUpload upload = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServletFileUpload(factory);
                     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解决上传文件名的中文乱码&lt;/span&gt;
                    upload.setHeaderEncoding(&quot;UTF-8&quot;&lt;span&gt;); 
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、判断提交上来的数据是否是上传表单的数据&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;ServletFileUpload.isMultipartContent(request)){
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按照传统方式获取数据&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、使用ServletFileUpload解析器解析上传数据，解析结果返回的是一个List&amp;lt;FileItem&amp;gt;集合，每一个FileItem对应一个Form表单的输入项&lt;/span&gt;
                    List&amp;lt;FileItem&amp;gt; list =&lt;span&gt; upload.parseRequest(request);
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(FileItem item : list){
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果fileitem中封装的是普通输入项的数据&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item.isFormField()){
                            String name &lt;/span&gt;=&lt;span&gt; item.getFieldName();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解决普通输入项的数据的中文乱码问题&lt;/span&gt;
                            String value = item.getString(&quot;UTF-8&quot;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;value = new String(value.getBytes(&quot;iso8859-1&quot;),&quot;UTF-8&quot;);&lt;/span&gt;
                            System.out.println(name + &quot;=&quot; +&lt;span&gt; value);
                        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果fileitem中封装的是上传文件
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到上传的文件名称，&lt;/span&gt;
                            String filename =&lt;span&gt; item.getName();
                            System.out.println(filename);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(filename==&lt;span&gt;null&lt;/span&gt; || filename.trim().equals(&quot;&quot;&lt;span&gt;)){
                                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                            }
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，如：  c:\a\b\1.txt，而有些只是单纯的文件名，如：1.txt
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理获取到的上传文件的文件名的路径部分，只保留文件名部分&lt;/span&gt;
                            filename = filename.substring(filename.lastIndexOf(&quot;\\&quot;)+1&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取item中的上传文件的输入流&lt;/span&gt;
                            InputStream in =&lt;span&gt; item.getInputStream();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个文件输出流&lt;/span&gt;
                            FileOutputStream out = &lt;span&gt;new&lt;/span&gt; FileOutputStream(savePath + &quot;\\&quot; +&lt;span&gt; filename);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个缓冲区&lt;/span&gt;
                            &lt;span&gt;byte&lt;/span&gt; buffer[] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[1024&lt;span&gt;];
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断输入流中的数据是否已经读完的标识&lt;/span&gt;
                            &lt;span&gt;int&lt;/span&gt; len = 0&lt;span&gt;;
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环将输入流读入到缓冲区当中，(len=in.read(buffer))&amp;gt;0就表示in里面还有数据&lt;/span&gt;
                            &lt;span&gt;while&lt;/span&gt;((len=in.read(buffer))&amp;gt;0&lt;span&gt;){
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用FileOutputStream输出流将缓冲区的数据写入到指定的目录(savePath + &quot;\\&quot; + filename)当中&lt;/span&gt;
                                out.write(buffer, 0&lt;span&gt;, len);
                            }
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭输入流&lt;/span&gt;
&lt;span&gt;                            in.close();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭输出流&lt;/span&gt;
&lt;span&gt;                            out.close();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除处理文件上传时生成的临时文件&lt;/span&gt;
&lt;span&gt;                            item.delete();
                            message &lt;/span&gt;= &quot;文件上传成功！&quot;&lt;span&gt;;
                        }
                    }
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                    message&lt;/span&gt;= &quot;文件上传失败！&quot;&lt;span&gt;;
                    e.printStackTrace();
                    
                }
                request.setAttribute(&lt;/span&gt;&quot;message&quot;&lt;span&gt;,message);
                request.getRequestDispatcher(&lt;/span&gt;&quot;/message.jsp&quot;&lt;span&gt;).forward(request, response);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doPost(HttpServletRequest request, HttpServletResponse response)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {

        doGet(request, response);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.web.xml注册Servlet&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;UploadHandleServlet&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;me.gacl.web.controller.UploadHandleServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;
&amp;lt;/servlet&amp;gt;

&amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;UploadHandleServlet&amp;lt;/servlet-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/servlet/UploadHandleServlet&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.改进&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;1、为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于WEB-INF目录下。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2、为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　3、为防止一个目录下面出现太多文件，要使用hash算法打散存储。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　4、要限制上传文件的最大值。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　5、要&lt;/strong&gt;限制&lt;/span&gt;上传文件的类型，在收到上传文件名时，判断后缀名是否合法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; me.gacl.web.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileOutputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.UUID;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServlet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.FileItem;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.FileUploadBase;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.ProgressListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.disk.DiskFileItemFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.fileupload.servlet.ServletFileUpload;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* @ClassName: UploadHandleServlet
* @Description: TODO(这里用一句话描述这个类的作用)
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt;: 孤傲苍狼
* @date: 2015-1-3 下午11:35:50
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UploadHandleServlet &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HttpServlet {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doGet(HttpServletRequest request, HttpServletResponse response)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到上传文件的保存目录，将上传的文件存放于WEB-INF目录下，不允许外界直接访问，保证上传文件的安全&lt;/span&gt;
                String savePath = &lt;span&gt;this&lt;/span&gt;.getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上传时生成的临时文件保存目录&lt;/span&gt;
                String tempPath = &lt;span&gt;this&lt;/span&gt;.getServletContext().getRealPath(&quot;/WEB-INF/temp&quot;&lt;span&gt;);
                File tmpFile &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(tempPath);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;tmpFile.exists()) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建临时目录&lt;/span&gt;
&lt;span&gt;                    tmpFile.mkdir();
                }
                
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息提示&lt;/span&gt;
                String message = &quot;&quot;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用Apache文件上传组件处理文件上传步骤：
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、创建一个DiskFileItemFactory工厂&lt;/span&gt;
                    DiskFileItemFactory factory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DiskFileItemFactory();
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置工厂的缓冲区的大小，当上传的文件大小超过缓冲区的大小时，就会生成一个临时文件存放到指定的临时目录当中。&lt;/span&gt;
                    factory.setSizeThreshold(1024*100);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置缓冲区的大小为100KB，如果不指定，那么缓冲区的大小默认是10KB
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置上传时生成的临时文件的保存目录&lt;/span&gt;
&lt;span&gt;                    factory.setRepository(tmpFile);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、创建一个文件上传解析器&lt;/span&gt;
                    ServletFileUpload upload = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServletFileUpload(factory);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听文件上传进度&lt;/span&gt;
                    upload.setProgressListener(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProgressListener(){
                        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; update(&lt;span&gt;long&lt;/span&gt; pBytesRead, &lt;span&gt;long&lt;/span&gt; pContentLength, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; arg2) {
                            System.out.println(&lt;/span&gt;&quot;文件大小为：&quot; + pContentLength + &quot;,当前已处理：&quot; +&lt;span&gt; pBytesRead);
                            &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
                             * 文件大小为：14608,当前已处理：4096
                                文件大小为：14608,当前已处理：7367
                                文件大小为：14608,当前已处理：11419
                                文件大小为：14608,当前已处理：14608
                             &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
                        }
                    });
                     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解决上传文件名的中文乱码&lt;/span&gt;
                    upload.setHeaderEncoding(&quot;UTF-8&quot;&lt;span&gt;); 
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3、判断提交上来的数据是否是上传表单的数据&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;ServletFileUpload.isMultipartContent(request)){
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按照传统方式获取数据&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }
                    
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置上传单个文件的大小的最大值，目前是设置为1024*1024字节，也就是1MB&lt;/span&gt;
                    upload.setFileSizeMax(1024*1024&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置上传文件总量的最大值，最大值=同时上传的多个文件的大小的最大值的和，目前设置为10MB&lt;/span&gt;
                    upload.setSizeMax(1024*1024*10&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、使用ServletFileUpload解析器解析上传数据，解析结果返回的是一个List&amp;lt;FileItem&amp;gt;集合，每一个FileItem对应一个Form表单的输入项&lt;/span&gt;
                    List&amp;lt;FileItem&amp;gt; list =&lt;span&gt; upload.parseRequest(request);
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(FileItem item : list){
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果fileitem中封装的是普通输入项的数据&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(item.isFormField()){
                            String name &lt;/span&gt;=&lt;span&gt; item.getFieldName();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解决普通输入项的数据的中文乱码问题&lt;/span&gt;
                            String value = item.getString(&quot;UTF-8&quot;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;value = new String(value.getBytes(&quot;iso8859-1&quot;),&quot;UTF-8&quot;);&lt;/span&gt;
                            System.out.println(name + &quot;=&quot; +&lt;span&gt; value);
                        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果fileitem中封装的是上传文件
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到上传的文件名称，&lt;/span&gt;
                            String filename =&lt;span&gt; item.getName();
                            System.out.println(filename);
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(filename==&lt;span&gt;null&lt;/span&gt; || filename.trim().equals(&quot;&quot;&lt;span&gt;)){
                                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                            }
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的文件名是带有路径的，如：  c:\a\b\1.txt，而有些只是单纯的文件名，如：1.txt
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理获取到的上传文件的文件名的路径部分，只保留文件名部分&lt;/span&gt;
                            filename = filename.substring(filename.lastIndexOf(&quot;\\&quot;)+1&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到上传文件的扩展名&lt;/span&gt;
                            String fileExtName = filename.substring(filename.lastIndexOf(&quot;.&quot;)+1&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要限制上传的文件类型，那么可以通过文件的扩展名来判断上传的文件类型是否合法&lt;/span&gt;
                            System.out.println(&quot;上传的文件的扩展名是：&quot;+&lt;span&gt;fileExtName);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取item中的上传文件的输入流&lt;/span&gt;
                            InputStream in =&lt;span&gt; item.getInputStream();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到文件保存的名称&lt;/span&gt;
                            String saveFilename =&lt;span&gt; makeFileName(filename);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到文件的保存目录&lt;/span&gt;
                            String realSavePath =&lt;span&gt; makePath(saveFilename, savePath);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个文件输出流&lt;/span&gt;
                            FileOutputStream out = &lt;span&gt;new&lt;/span&gt; FileOutputStream(realSavePath + &quot;\\&quot; +&lt;span&gt; saveFilename);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个缓冲区&lt;/span&gt;
                            &lt;span&gt;byte&lt;/span&gt; buffer[] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[1024&lt;span&gt;];
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断输入流中的数据是否已经读完的标识&lt;/span&gt;
                            &lt;span&gt;int&lt;/span&gt; len = 0&lt;span&gt;;
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环将输入流读入到缓冲区当中，(len=in.read(buffer))&amp;gt;0就表示in里面还有数据&lt;/span&gt;
                            &lt;span&gt;while&lt;/span&gt;((len=in.read(buffer))&amp;gt;0&lt;span&gt;){
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用FileOutputStream输出流将缓冲区的数据写入到指定的目录(savePath + &quot;\\&quot; + filename)当中&lt;/span&gt;
                                out.write(buffer, 0&lt;span&gt;, len);
                            }
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭输入流&lt;/span&gt;
&lt;span&gt;                            in.close();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭输出流&lt;/span&gt;
&lt;span&gt;                            out.close();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除处理文件上传时生成的临时文件
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;item.delete();&lt;/span&gt;
                            message = &quot;文件上传成功！&quot;&lt;span&gt;;
                        }
                    }
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (FileUploadBase.FileSizeLimitExceededException e) {
                    e.printStackTrace();
                    request.setAttribute(&lt;/span&gt;&quot;message&quot;, &quot;单个文件超出最大值！！！&quot;&lt;span&gt;);
                    request.getRequestDispatcher(&lt;/span&gt;&quot;/message.jsp&quot;&lt;span&gt;).forward(request, response);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (FileUploadBase.SizeLimitExceededException e) {
                    e.printStackTrace();
                    request.setAttribute(&lt;/span&gt;&quot;message&quot;, &quot;上传文件的总的大小超出限制的最大值！！！&quot;&lt;span&gt;);
                    request.getRequestDispatcher(&lt;/span&gt;&quot;/message.jsp&quot;&lt;span&gt;).forward(request, response);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                    message&lt;/span&gt;= &quot;文件上传失败！&quot;&lt;span&gt;;
                    e.printStackTrace();
                }
                request.setAttribute(&lt;/span&gt;&quot;message&quot;&lt;span&gt;,message);
                request.getRequestDispatcher(&lt;/span&gt;&quot;/message.jsp&quot;&lt;span&gt;).forward(request, response);
    }
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
    * @Method: makeFileName
    * @Description: 生成上传文件的文件名，文件名以：uuid+&quot;_&quot;+文件的原始名称
    * @Anthor:孤傲苍狼
    * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; filename 文件的原始名称
    * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; uuid+&quot;_&quot;+文件的原始名称
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
    &lt;span&gt;private&lt;/span&gt; String makeFileName(String filename){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.jpg
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; UUID.randomUUID().toString() + &quot;_&quot; +&lt;span&gt; filename;
    }
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 为防止一个目录下面出现太多文件，要使用hash算法打散存储
    * @Method: makePath
    * @Description: 
    * @Anthor:孤傲苍狼
    *
    * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; filename 文件名，要根据文件名生成存储目录
    * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; savePath 文件存储路径
    * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; 新的存储目录
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String makePath(String filename,String savePath){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到文件名的hashCode的值，得到的就是filename这个字符串对象在内存中的地址&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; hashcode =&lt;span&gt; filename.hashCode();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; dir1 = hashcode&amp;amp;0xf;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0--15&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; dir2 = (hashcode&amp;amp;0xf0)&amp;gt;&amp;gt;4;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0-15
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造新的保存目录&lt;/span&gt;
        String dir = savePath + &quot;\\&quot; + dir1 + &quot;\\&quot; + dir2;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;upload\2\3  upload\3\5
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;File既可以代表文件也可以代表目录&lt;/span&gt;
        File file = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(dir);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果目录不存在&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;file.exists()){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建目录&lt;/span&gt;
&lt;span&gt;            file.mkdirs();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dir;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doPost(HttpServletRequest request, HttpServletResponse response)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {

        doGet(request, response);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;下载&lt;/h4&gt;
&lt;p&gt;1.下载文件页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; import&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java.util.*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; pageEncoding&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@taglib prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://java.sun.com/jsp/jstl/core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;下载文件显示页面&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 遍历Map集合 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:forEach &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;=&quot;me&quot;&lt;/span&gt;&lt;span&gt; items&lt;/span&gt;&lt;span&gt;=&quot;${fileNameMap}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:url &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;/servlet/DownLoadServlet&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;downurl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:param &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;filename&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${me.key}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        ${me.value}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;${downurl}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;下载&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:forEach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.执行下载操作的Servlet&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; me.gacl.web.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.OutputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.URLEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServlet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DownLoadServlet &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HttpServlet {

    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doGet(HttpServletRequest request, HttpServletResponse response)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到要下载的文件名&lt;/span&gt;
        String fileName = request.getParameter(&quot;filename&quot;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;23239283-92489-阿凡达.avi&lt;/span&gt;
        fileName = &lt;span&gt;new&lt;/span&gt; String(fileName.getBytes(&quot;iso8859-1&quot;),&quot;UTF-8&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上传的文件都是保存在/WEB-INF/upload目录下的子目录当中&lt;/span&gt;
        String fileSaveRootPath=&lt;span&gt;this&lt;/span&gt;.getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过文件名找出文件的所在目录&lt;/span&gt;
        String path =&lt;span&gt; findFileSavePathByFileName(fileName,fileSaveRootPath);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到要下载的文件&lt;/span&gt;
        File file = &lt;span&gt;new&lt;/span&gt; File(path + &quot;\\&quot; +&lt;span&gt; fileName);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果文件不存在&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;file.exists()){
            request.setAttribute(&lt;/span&gt;&quot;message&quot;, &quot;您要下载的资源已被删除！！&quot;&lt;span&gt;);
            request.getRequestDispatcher(&lt;/span&gt;&quot;/message.jsp&quot;&lt;span&gt;).forward(request, response);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理文件名&lt;/span&gt;
        String realname = fileName.substring(fileName.indexOf(&quot;_&quot;)+1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置响应头，控制浏览器下载该文件&lt;/span&gt;
        response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(realname, &quot;UTF-8&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取要下载的文件，保存到文件输入流&lt;/span&gt;
        FileInputStream in = &lt;span&gt;new&lt;/span&gt; FileInputStream(path + &quot;\\&quot; +&lt;span&gt; fileName);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建输出流&lt;/span&gt;
        OutputStream out =&lt;span&gt; response.getOutputStream();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建缓冲区&lt;/span&gt;
        &lt;span&gt;byte&lt;/span&gt; buffer[] = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[1024&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len = 0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环将输入流中的内容读取到缓冲区当中&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt;((len=in.read(buffer))&amp;gt;0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出缓冲区的内容到浏览器，实现文件下载&lt;/span&gt;
            out.write(buffer, 0&lt;span&gt;, len);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭文件输入流&lt;/span&gt;
&lt;span&gt;        in.close();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭输出流&lt;/span&gt;
&lt;span&gt;        out.close();
    }
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
    * @Method: findFileSavePathByFileName
    * @Description: 通过文件名和存储上传文件根目录找出要下载的文件的所在路径
    * @Anthor:孤傲苍狼
    * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; filename 要下载的文件名
    * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; saveRootPath 上传文件保存的根目录，也就是/WEB-INF/upload目录
    * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; 要下载的文件的存储目录
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String findFileSavePathByFileName(String filename,String saveRootPath){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hashcode =&lt;span&gt; filename.hashCode();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; dir1 = hashcode&amp;amp;0xf;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0--15&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; dir2 = (hashcode&amp;amp;0xf0)&amp;gt;&amp;gt;4;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0-15&lt;/span&gt;
        String dir = saveRootPath + &quot;\\&quot; + dir1 + &quot;\\&quot; + dir2;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;upload\2\3  upload\3\5&lt;/span&gt;
        File file = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(dir);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;file.exists()){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建目录&lt;/span&gt;
&lt;span&gt;            file.mkdirs();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dir;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doPost(HttpServletRequest request, HttpServletResponse response)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
        doGet(request, response);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.web.xml配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DownLoadServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;me.gacl.web.controller.DownLoadServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DownLoadServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/servlet/DownLoadServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 19 Nov 2017 12:15:00 +0000</pubDate>
<dc:creator>Rudolph_Browne</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CARPE-DIEM-wu/p/7704488.html</dc:identifier>
</item>
<item>
<title>通过游戏认识 ---   JQuery与原生JS的差异 - 换个影子</title>
<link>http://www.cnblogs.com/2502778498spw/p/7860854.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/2502778498spw/p/7860854.html</guid>
<description>&lt;p&gt;jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（ &lt;em&gt;或JavaScript框架&lt;/em&gt;）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。&lt;/p&gt;
&lt;p&gt;今天，影子就通过一个小游戏，剪刀石头布，来给大家介绍下，两者之间的区别。&lt;/p&gt;


&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、原生JS实现游戏&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; HTML：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt; 1 &lt;span&gt;&amp;lt;&lt;span&gt;body&lt;span&gt;&amp;gt;
&lt;span&gt; 2         
&lt;span&gt; 3         &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;id&lt;span&gt;=&quot;body&quot;&lt;span&gt;&amp;gt;
&lt;span&gt; 4             &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;id&lt;span&gt;=&quot;tips&quot;&lt;span&gt;&amp;gt;
&lt;span&gt; 5 &lt;span&gt;                请选择
&lt;span&gt; 6             &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt; 7             
&lt;span&gt; 8             &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;id&lt;span&gt;=&quot;imgs&quot;&lt;span&gt;&amp;gt;
&lt;span&gt; 9                 &lt;span&gt;&amp;lt;&lt;span&gt;img &lt;span&gt;src&lt;span&gt;=&quot;插件/img/jiandao.png&quot;&lt;span&gt; id&lt;span&gt;=&quot;jiandao&quot;&lt;span&gt; onclick&lt;span&gt;=&quot;jianDao()&quot;&lt;span&gt;class&lt;span&gt;=&quot;img1&quot;&lt;span&gt;/&amp;gt;
&lt;span&gt;10                 &lt;span&gt;&amp;lt;&lt;span&gt;img &lt;span&gt;src&lt;span&gt;=&quot;插件/img/shitou.png&quot;&lt;span&gt; id&lt;span&gt;=&quot;shitou&quot;&lt;span&gt; onclick&lt;span&gt;=&quot;shiTou()&quot;&lt;span&gt;class&lt;span&gt;=&quot;img1&quot;&lt;span&gt;/&amp;gt;
&lt;span&gt;11                 &lt;span&gt;&amp;lt;&lt;span&gt;img &lt;span&gt;src&lt;span&gt;=&quot;插件/img/bu.png&quot;&lt;span&gt; id&lt;span&gt;=&quot;bu&quot;&lt;span&gt; onclick&lt;span&gt;=&quot;bU()&quot;&lt;span&gt; class&lt;span&gt;=&quot;img1&quot;&lt;span&gt;/&amp;gt;
&lt;span&gt;12             &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;13             
&lt;span&gt;14             &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;id&lt;span&gt;=&quot;jieguo&quot;&lt;span&gt;&amp;gt;
&lt;span&gt;15                 &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;class&lt;span&gt;=&quot;jieguo&quot;&lt;span&gt;&amp;gt;
&lt;span&gt;16                     &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;span&gt;&amp;gt;您选择了&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;17                     &lt;span&gt;&amp;lt;&lt;span&gt;img &lt;span&gt;src&lt;span&gt;=&quot;插件/img/daiding.png&quot;&lt;span&gt; id&lt;span&gt;=&quot;myImg&quot; &lt;span&gt;/&amp;gt;
&lt;span&gt;18                 &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;19                 
&lt;span&gt;20                 &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;class&lt;span&gt;=&quot;pk&quot;&lt;span&gt;&amp;gt;PK&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;21                 
&lt;span&gt;22                 &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;class&lt;span&gt;=&quot;jieguo&quot;&lt;span&gt;&amp;gt;
&lt;span&gt;23                     &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;span&gt;&amp;gt;系统选择了&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;24                     &lt;span&gt;&amp;lt;&lt;span&gt;img &lt;span&gt;src&lt;span&gt;=&quot;插件/img/daiding.png&quot;&lt;span&gt; id&lt;span&gt;=&quot;computer&quot; &lt;span&gt;/&amp;gt;
&lt;span&gt;25                 &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;26             &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;27             
&lt;span&gt;28             &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;id&lt;span&gt;=&quot;score&quot;&lt;span&gt;&amp;gt;
&lt;span&gt;29 &lt;span&gt;                等待结果中....
&lt;span&gt;30             &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;31             
&lt;span&gt;32             &lt;span&gt;&amp;lt;&lt;span&gt;div &lt;span&gt;id&lt;span&gt;=&quot;scoreFen&quot;&lt;span&gt;&amp;gt;
&lt;span&gt;33                 &lt;span&gt;&amp;lt;&lt;span&gt;span&lt;span&gt;&amp;gt;00&lt;span&gt;&amp;lt;/&lt;span&gt;span&lt;span&gt;&amp;gt;：&lt;span&gt;&amp;lt;&lt;span&gt;span&lt;span&gt;&amp;gt;00&lt;span&gt;&amp;lt;/&lt;span&gt;span&lt;span&gt;&amp;gt;
&lt;span&gt;34             &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;35         &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;span&gt;&amp;gt;
&lt;span&gt;36 &lt;span&gt;&amp;lt;/&lt;span&gt;body&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;css:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt; 1 &lt;span&gt;&amp;lt;&lt;span&gt;style &lt;span&gt;type&lt;span&gt;=&quot;text/css&quot;&lt;span&gt;&amp;gt;
&lt;span&gt; 2 &lt;span&gt;            *&lt;span&gt;{
&lt;span&gt; 3 &lt;span&gt;                margin&lt;span&gt;:&lt;span&gt; 0px&lt;span&gt;;
&lt;span&gt; 4 &lt;span&gt;                padding&lt;span&gt;:&lt;span&gt; 0px&lt;span&gt;;
&lt;span&gt; 5             &lt;span&gt;}
&lt;span&gt; 6             
&lt;span&gt; 7 &lt;span&gt;            #body&lt;span&gt;{
&lt;span&gt; 8 &lt;span&gt;                width&lt;span&gt;:&lt;span&gt; 100%&lt;span&gt;;
&lt;span&gt; 9 &lt;span&gt;                height&lt;span&gt;:&lt;span&gt; 700px&lt;span&gt;;
&lt;span&gt;10 &lt;span&gt;                max-width&lt;span&gt;:&lt;span&gt; 500px&lt;span&gt;;
&lt;span&gt;11 &lt;span&gt;                margin&lt;span&gt;:&lt;span&gt; 0 auto&lt;span&gt;;
&lt;span&gt;12 &lt;span&gt;                background-color&lt;span&gt;:&lt;span&gt; #FAE738&lt;span&gt;;
&lt;span&gt;13 &lt;span&gt;                overflow&lt;span&gt;:&lt;span&gt; hidden&lt;span&gt;;
&lt;span&gt;14             &lt;span&gt;}
&lt;span&gt;15             
&lt;span&gt;16 &lt;span&gt;            #tips&lt;span&gt;{
&lt;span&gt;17 &lt;span&gt;                margin-top&lt;span&gt;:&lt;span&gt; 40px&lt;span&gt;;
&lt;span&gt;18 &lt;span&gt;                text-align&lt;span&gt;:&lt;span&gt; center&lt;span&gt;;
&lt;span&gt;19 &lt;span&gt;                color&lt;span&gt;:&lt;span&gt; white&lt;span&gt;;
&lt;span&gt;20 &lt;span&gt;                font-size&lt;span&gt;:&lt;span&gt; 36px&lt;span&gt;;
&lt;span&gt;21 &lt;span&gt;                font-weight&lt;span&gt;:&lt;span&gt; bold&lt;span&gt;;
&lt;span&gt;22             &lt;span&gt;}
&lt;span&gt;23             
&lt;span&gt;24 &lt;span&gt;            #imgs&lt;span&gt;{
&lt;span&gt;25 &lt;span&gt;                width&lt;span&gt;:&lt;span&gt; 90%&lt;span&gt;;
&lt;span&gt;26 &lt;span&gt;                margin&lt;span&gt;:&lt;span&gt; 20px auto&lt;span&gt;;
&lt;span&gt;27 &lt;span&gt;                display&lt;span&gt;:&lt;span&gt; flex&lt;span&gt;;
&lt;span&gt;28 &lt;span&gt;                justify-content&lt;span&gt;:&lt;span&gt; space-around&lt;span&gt;;
&lt;span&gt;29             &lt;span&gt;}
&lt;span&gt;30             
&lt;span&gt;31 &lt;span&gt;            #jieguo&lt;span&gt;{
&lt;span&gt;32 &lt;span&gt;                width&lt;span&gt;:&lt;span&gt; 90%&lt;span&gt;;
&lt;span&gt;33 &lt;span&gt;                margin&lt;span&gt;:&lt;span&gt; 30px auto&lt;span&gt;;
&lt;span&gt;34 &lt;span&gt;                display&lt;span&gt;:&lt;span&gt; flex&lt;span&gt;;
&lt;span&gt;35 &lt;span&gt;                justify-content&lt;span&gt;:&lt;span&gt; space-around&lt;span&gt;;
&lt;span&gt;36             &lt;span&gt;}
&lt;span&gt;37             
&lt;span&gt;38 &lt;span&gt;            #jieguo .jieguo div&lt;span&gt;{
&lt;span&gt;39 &lt;span&gt;                height&lt;span&gt;:&lt;span&gt; 30px&lt;span&gt;;
&lt;span&gt;40 &lt;span&gt;                width&lt;span&gt;:&lt;span&gt; 89px&lt;span&gt;;
&lt;span&gt;41 &lt;span&gt;                line-height&lt;span&gt;:&lt;span&gt; 30px&lt;span&gt;;
&lt;span&gt;42 &lt;span&gt;                text-align&lt;span&gt;:&lt;span&gt; center&lt;span&gt;;
&lt;span&gt;43 &lt;span&gt;                color&lt;span&gt;:&lt;span&gt; white&lt;span&gt;;
&lt;span&gt;44             &lt;span&gt;}
&lt;span&gt;45             
&lt;span&gt;46 &lt;span&gt;            #jieguo .jieguo img&lt;span&gt;{
&lt;span&gt;47 &lt;span&gt;                height&lt;span&gt;:&lt;span&gt; 89px&lt;span&gt;;
&lt;span&gt;48             &lt;span&gt;}
&lt;span&gt;49             
&lt;span&gt;50 &lt;span&gt;            #jieguo .pk&lt;span&gt;{
&lt;span&gt;51 &lt;span&gt;                height&lt;span&gt;:&lt;span&gt; 120px&lt;span&gt;;
&lt;span&gt;52 &lt;span&gt;                line-height&lt;span&gt;:&lt;span&gt; 120px&lt;span&gt;;
&lt;span&gt;53 &lt;span&gt;                font-size&lt;span&gt;:&lt;span&gt; 48px&lt;span&gt;;
&lt;span&gt;54 &lt;span&gt;                font-weight&lt;span&gt;:&lt;span&gt; bold&lt;span&gt;;
&lt;span&gt;55             &lt;span&gt;}
&lt;span&gt;56             
&lt;span&gt;57 &lt;span&gt;            #score,#scoreFen&lt;span&gt;{
&lt;span&gt;58 &lt;span&gt;                text-align&lt;span&gt;:&lt;span&gt; center&lt;span&gt;;
&lt;span&gt;59 &lt;span&gt;                font-size&lt;span&gt;:&lt;span&gt; 24px&lt;span&gt;;
&lt;span&gt;60 &lt;span&gt;                color&lt;span&gt;:&lt;span&gt; red&lt;span&gt;;
&lt;span&gt;61 &lt;span&gt;                padding-top&lt;span&gt;:&lt;span&gt; 10px&lt;span&gt;;
&lt;span&gt;62             &lt;span&gt;}
&lt;span&gt;63             
&lt;span&gt;64         &lt;span&gt;&amp;lt;/&lt;span&gt;style&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;js:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 &lt;span&gt;&amp;lt;&lt;span&gt;script &lt;span&gt;src&lt;span&gt;=&quot;JS/jquery-3.1.1.js&quot;&lt;span&gt; type&lt;span&gt;=&quot;text/javascript&quot;&lt;span&gt;&amp;gt;&amp;lt;/&lt;span&gt;script&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt; 1 　　&lt;span&gt;&amp;lt;&lt;span&gt;script &lt;span&gt;type&lt;span&gt;=&quot;text/javascript&quot;&lt;span&gt;&amp;gt;
&lt;span&gt; 2         
&lt;span&gt; 3         &lt;span&gt;var&lt;span&gt; jiandao &lt;span&gt;=&lt;span&gt; document.getElementById(&lt;span&gt;&quot;&lt;span&gt;jiandao&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt; 4         &lt;span&gt;var&lt;span&gt; shitou &lt;span&gt;=&lt;span&gt; document.getElementById(&lt;span&gt;&quot;&lt;span&gt;shitou&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt; 5         &lt;span&gt;var&lt;span&gt; bu &lt;span&gt;=&lt;span&gt; document.getElementById(&lt;span&gt;&quot;&lt;span&gt;bu&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt; 6         &lt;span&gt;var&lt;span&gt; myImg &lt;span&gt;=&lt;span&gt; document.getElementById(&lt;span&gt;&quot;&lt;span&gt;myImg&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt; 7         &lt;span&gt;var&lt;span&gt; computer &lt;span&gt;=&lt;span&gt; document.getElementById(&lt;span&gt;&quot;&lt;span&gt;computer&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt; 8         &lt;span&gt;var&lt;span&gt; score &lt;span&gt;=&lt;span&gt; document.getElementById(&lt;span&gt;&quot;&lt;span&gt;score&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt; 9         &lt;span&gt;var&lt;span&gt; scoreFen &lt;span&gt;=&lt;span&gt; document.getElementById(&lt;span&gt;&quot;&lt;span&gt;scoreFen&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt;10         
&lt;span&gt;11         &lt;span&gt;var&lt;span&gt; myScore&lt;span&gt;=&lt;span&gt;0&lt;span&gt;,comScore&lt;span&gt;=&lt;span&gt;0&lt;span&gt;;
&lt;span&gt;12         
&lt;span&gt;13         &lt;span&gt;var&lt;span&gt; imgs &lt;span&gt;=&lt;span&gt; [&lt;span&gt;&quot;&lt;span&gt;插件/img/jiandao.png&lt;span&gt;&quot;&lt;span&gt;,&lt;span&gt;&quot;&lt;span&gt;插件/img/shitou.png&lt;span&gt;&quot;&lt;span&gt;,&lt;span&gt;&quot;&lt;span&gt;插件/img/bu.png&lt;span&gt;&quot;&lt;span&gt;];
&lt;span&gt;14 &lt;span&gt;        console.log(imgs[&lt;span&gt;0&lt;span&gt;]);
&lt;span&gt;15 &lt;span&gt;        jiandao.onclick &lt;span&gt;= &lt;span&gt;function&lt;span&gt;(){
&lt;span&gt;16             &lt;span&gt;var&lt;span&gt; imgSrc &lt;span&gt;=&lt;span&gt; jiandao.getAttribute(&lt;span&gt;&quot;&lt;span&gt;src&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt;17         
&lt;span&gt;18 &lt;span&gt;            myImg.setAttribute(&lt;span&gt;&quot;&lt;span&gt;src&lt;span&gt;&quot;&lt;span&gt;,imgSrc);
&lt;span&gt;19 &lt;span&gt;            checkImg(imgSrc);
&lt;span&gt;20 &lt;span&gt;        }
&lt;span&gt;21         
&lt;span&gt;22 &lt;span&gt;        shitou.onclick &lt;span&gt;= &lt;span&gt;function&lt;span&gt;(){
&lt;span&gt;23             &lt;span&gt;var&lt;span&gt; imgSrc &lt;span&gt;=&lt;span&gt; shitou.getAttribute(&lt;span&gt;&quot;&lt;span&gt;src&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt;24 &lt;span&gt;            myImg.setAttribute(&lt;span&gt;&quot;&lt;span&gt;src&lt;span&gt;&quot;&lt;span&gt;,imgSrc);
&lt;span&gt;25 &lt;span&gt;            checkImg(imgSrc);
&lt;span&gt;26 &lt;span&gt;        }
&lt;span&gt;27         
&lt;span&gt;28 &lt;span&gt;        bu.onclick &lt;span&gt;= &lt;span&gt;function&lt;span&gt;(){
&lt;span&gt;29             &lt;span&gt;var&lt;span&gt; imgSrc &lt;span&gt;=&lt;span&gt; bu.getAttribute(&lt;span&gt;&quot;&lt;span&gt;src&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt;30 &lt;span&gt;            myImg.setAttribute(&lt;span&gt;&quot;&lt;span&gt;src&lt;span&gt;&quot;&lt;span&gt;,imgSrc);
&lt;span&gt;31 &lt;span&gt;            checkImg(imgSrc);
&lt;span&gt;32 &lt;span&gt;        }
&lt;span&gt;33         
&lt;span&gt;34         
&lt;span&gt;35         &lt;span&gt;function&lt;span&gt; checkImg(imgSrc){
&lt;span&gt;36             &lt;span&gt;var&lt;span&gt; myIndex &lt;span&gt;=&lt;span&gt; imgs.indexOf(imgSrc);
&lt;span&gt;37             &lt;span&gt;var&lt;span&gt; intervalId &lt;span&gt;=&lt;span&gt; setInterval(&lt;span&gt;function&lt;span&gt;(){
&lt;span&gt;38                 &lt;span&gt;var&lt;span&gt; num &lt;span&gt;=&lt;span&gt; parseInt(Math.random()&lt;span&gt;*&lt;span&gt;3&lt;span&gt;);
&lt;span&gt;39 &lt;span&gt;                computer.setAttribute(&lt;span&gt;&quot;&lt;span&gt;src&lt;span&gt;&quot;&lt;span&gt;,imgs[num]);
&lt;span&gt;40 
&lt;span&gt;41 &lt;span&gt;            },&lt;span&gt;20&lt;span&gt;);
&lt;span&gt;42             
&lt;span&gt;43 &lt;span&gt;            setTimeout(&lt;span&gt;function&lt;span&gt;(){
&lt;span&gt;44 &lt;span&gt;                clearInterval(intervalId);
&lt;span&gt;45                 &lt;span&gt;var&lt;span&gt; comSrc &lt;span&gt;=&lt;span&gt; computer.getAttribute(&lt;span&gt;&quot;&lt;span&gt;src&lt;span&gt;&quot;&lt;span&gt;);
&lt;span&gt;46                 &lt;span&gt;var&lt;span&gt; comIndex &lt;span&gt;=&lt;span&gt; imgs.indexOf(comSrc);
&lt;span&gt;47                 &lt;span&gt;if&lt;span&gt;(myIndex&lt;span&gt;==&lt;span&gt;comIndex){
&lt;span&gt;48 &lt;span&gt;                    score.innerHTML &lt;span&gt;= &lt;span&gt;&quot;&lt;span&gt;平局！再战一轮吧！&lt;span&gt;&quot;&lt;span&gt;;
&lt;span&gt;49 &lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Sun, 19 Nov 2017 12:13:00 +0000</pubDate>
<dc:creator>换个影子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/2502778498spw/p/7860854.html</dc:identifier>
</item>
</channel>
</rss>