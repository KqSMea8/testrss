<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>设计抗住千万级流量的架构思路 - 袋🐴饲养员</title>
<link>http://www.cnblogs.com/GodHeng/p/8834810.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GodHeng/p/8834810.html</guid>
<description>&lt;p&gt;&lt;span&gt;                                                                                                              &lt;span&gt;设计抗住千万级流量的架构思路&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;随着互联网的发展，各项软件的客户量日益增多，当客户量达到一定峰值时，当数以万计的流量来临时，程序的顺利运行以及即时响应则显得尤为重要，就像双11那天的淘宝一样。那么，如何设计架构才能够抗住这千万级的流量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;首先，要在我们架构设计的时候建立一些原则。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　1.实现高并发&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;strong&gt;服务拆分&lt;/strong&gt;：将整个项目拆分成多个子项目或者模块，分而治之，将项目进行水平扩展。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;strong&gt;服务化&lt;/strong&gt;：解决服务调用复杂之后的服务的注册发现问题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;strong&gt;消息队列&lt;/strong&gt;：解耦，异步处理&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;strong&gt;缓存&lt;/strong&gt;：各种缓存带来的并发&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　2.实现高可用 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;strong&gt;集群、限流、降级&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　3.业务设计&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;strong&gt;幂等&lt;/strong&gt;：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用，就像数学里的数字1，多少次幂的结果都是1。举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录也变成了两条．．．&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;详细内容参考  《分布式中的幂等性&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;》&lt;a href=&quot;https://www.cnblogs.com/vveiliang/p/6643874.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/vveiliang/p/6643874.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;strong&gt;防重&lt;/strong&gt;：防止同样的数据同时提交&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　除了在业务方向判断和按钮点击之后不能继续点击的限制以外，在服务器端也可以做到防重：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　在服务器端生成一个唯一的随机标识号(Token&amp;lt;令牌&amp;gt;)同事在当前用户的Session域中保存这个令牌，然后将令牌发送到客户端的form表单中，在form表单中使用隐藏域来存储这个Token，表单提交的时候联通这个Token一起提交到服务器，然后在服务器端判断客户提交上来的Token与服务器端生成的Token是否一致，如果不一致，那就重复提交了，此时服务器端就可以不处理重复提交的表单，如果相同则处理表单，处理完后清楚当前用户的Session域中存储的标识号。 &lt;br/&gt;在下列情况中，服务器程序将拒绝处理用户提交的表单请求： &lt;br/&gt;1）存储Session域中的Token与表单提交的Token不一致 &lt;br/&gt;2）当前用户的Session中不存在Token &lt;br/&gt;3）用户提交的表单数据中没有Token。 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;strong&gt;状态机&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;软件设计中的状态机概念，一般是指有限状态机（英语：finite-state machine，缩写：FSM）又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;这里着重讲一下&lt;span&gt;&lt;strong&gt;&lt;span&gt;限流&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;的概念和例子&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;限流的目的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;限流的目的是通过对并发访问/请求进行限速或者一个时间窗口内的请求进行限速来保护系统的可用性，一旦达到限制速率就可以拒绝服务。就像手机预售一样，假如要卖出3万台，只需要接收3万用户的请求就可以，其他的用户请求可以选择过滤，可以提示&quot;当前服务器过忙，请稍后再试&quot;的提示。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;限流方式：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1.   限制瞬时并发数 ： 比如在入口层（nginx添加nginx_http_limit_conn_module）来限制同一个ip来源的连接数，防止恶意攻击访问的情况。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2，限制总并发数：通过配置数据库连接池、线程池大小来约束总并发数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.  限制时间窗口内的平均速率：在接口层面，通过限制访问速率来控制接口的并发请求。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;4.  其他方式：限制远程接口的调用速率、限制MQ的消费速率。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;常用限流算法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;1.滑动窗口协议：一种常见的流量控制技术，用来改善吞吐量的技术。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;滑动窗口协议的由来：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;滑动窗口（sliding window）是一种流量控制技术。早期的网络通讯中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发送不了数据，所以就有了滑动窗口机制来解决此问题。   发送和接收方都会维护一个数据帧的序列，这个序列被称为窗口。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;定义：滑动窗口协议（Sliding Window Protocol），属于TCP协议的一种应用，用于网络数据传输时的流量控制，以避免拥塞的发生。该协议允许发送方在停止并等待确认前发送多个数据分组。由于发送方不必每发一个分组就停下来等待确认，因此该协议可以加速数据的传输，提高网络吞吐量。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;发送窗口：就是发送端允许连续发送的帧的序号表。发送端可以不等待应答而连续发送数据（可以通过设置窗口的尺寸来控制）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;接收窗口：接收方允许接收的帧的序列表，凡是落在接收窗口内的帧，接收方都必须处理，落在接收窗口外的帧将被丢弃。接收方每次允许接收的帧数称为接收窗口的尺寸　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1372758/201804/1372758-20180414191345851-1700576512.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;254&quot;/&gt;演示地址：&lt;a href=&quot;https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html&quot; target=&quot;_blank&quot;&gt;https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/selective-repeat-protocol/index.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;2.漏桶：漏桶算法能强行限制数据的&lt;span&gt;传输速率&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;漏桶算法思路很简单，请求先进入到漏桶里，漏桶以一定的速度出水。当水请求过大会直接溢出，可以看出漏桶算法能强行限制数据的传输速率。进入端无需考虑出水端的速率，就像mq消息队列一样，provider只需要将消息传入队列中，而不需要关心Consumer是否接收到了消息。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;对于溢出的水，就是被过滤的数据，可以直接被丢弃，也可以通过某种方式暂时保存，如加入队列之中，像线程池里对溢出数据的4种处理机制一样&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1372758/201804/1372758-20180414192500523-1102174520.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;3.令牌桶：属于控制&lt;span&gt;速率类型&lt;/span&gt;的限流算法。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;对于很多应用场景来说，除了要求能够限制数据的平均传输速率外，还要求允许某种程度的突发传输。这时候漏桶算法可能就不合适了，令牌桶算法更为适合。令牌桶算法的原理是系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;设置 Rate = 2 ：每秒放入令牌的个数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;桶的大小：100&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1372758/201804/1372758-20180414195255234-667640768.png&quot; alt=&quot;&quot; width=&quot;460&quot; height=&quot;260&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;4.计数器：最简单的一种。通过控制时间段内的请求次数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;未完待续。。。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 17:49:00 +0000</pubDate>
<dc:creator>袋&amp;#128052;饲养员</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GodHeng/p/8834810.html</dc:identifier>
</item>
<item>
<title>HTTP首部扫盲 - 喜欢天黑却怕鬼</title>
<link>http://www.cnblogs.com/songwenjie/p/8839782.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songwenjie/p/8839782.html</guid>
<description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;之前在做web开发时使用到HTTP首部的时候遇到不熟悉的都是现用现查，时间一长印象就不深刻了。最近在重读《图解HTTP》，其中有一章是专门讲解HTTP首部的，讲解的HTTP首部很多，在这里总结了一些平常使用比较多的首部。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP的请求和响应报文必定包含HTTP首部&lt;/strong&gt;。首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180414/4JdHjHhIFA.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;http请求报文&quot;&gt;1.1 HTTP请求报文&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;HTTP请求报文由方法、URI、HTTP版本、HTTP首部字段等部分构成&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180414/8Jm11291mH.png?imageslim&quot; alt=&quot;mark&quot;/&gt;我们可以自己通过浏览器查看请求首部信息，浏览器F12控制台选择Network,下面是我访问图灵社区网站的请求头部信息：&lt;/p&gt;
&lt;pre class=&quot;http&quot;&gt;
&lt;code&gt;Request URL: http://www.ituring.com.cn/
Request Method: GET
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: max-age=0
Connection: keep-alive
Host: www.ituring.com.cn
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;http响应报文&quot;&gt;1.2 HTTP响应报文&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;HTTP响应报文由HTTP版本、状态码、HTTP首部字段3部分构成&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180414/dI0755de1j.png?imageslim&quot; alt=&quot;mark&quot;/&gt;访问图灵社区网站的响应头部信息：&lt;/p&gt;
&lt;pre class=&quot;http&quot;&gt;
&lt;code&gt;Status Code: 200 OK
Cache-Control: private
Content-Encoding: gzip
Content-Length: 25620
Content-Type: text/html; charset=utf-8
Date: Sat, 14 Apr 2018 15:07:28 GMT
Server: Microsoft-IIS/8.5
Vary: Accept-Encoding
X-AspNet-Version: 4.0.30319
X-AspNetMvc-Version: 5.2
X-Powered-By: ASP.NET&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;通用首部字段&quot;&gt;2.1 通用首部字段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;请求报文和响应报文两方都会使用的首部&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;connection&quot;&gt;2.1.1 Connection&lt;/h3&gt;
&lt;p&gt;Connection首部字段具备如下两个作用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;控制不再转发给代理的首部字段&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;请求报文和响应报文可以通过&lt;code&gt;Connection:不再转发的首部字段名&lt;/code&gt;控制不再转发的首部字段&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180414/ifdcgLA2L1.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;管理持久连接&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;HTTP/1.1版本的默认连接都是持久连接，客户端会在持久连接上连续发送请求。当服务器想要断开连接时则指定Connection值为Close。HTTP/1.1版本之前的HTTP版本的默认连接都是非持久连接，因此如果想要在旧版本的HTTP协议上维持持久连接，则需要显式指定Connection首部字段值为keep-alive。&lt;/p&gt;
&lt;p&gt;Connection:keep-alive&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180414/CBgJ25hgEE.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Connection:Close&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180414/9D11B3lCGh.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;upgrade&quot;&gt;2.1.2 Upgrade&lt;/h3&gt;
&lt;p&gt;Upgrade字段用于检测HTTP协议以及其他协议是否可使用更高的版本进行通信，或者是否可以切换到其他协议进行通信。Upgrade字段产生作用的Upgrade对象仅限于客户端和邻接服务器之间，因此使用首部字段Upgrade时，需要额外指定Connection:Upgrade，此时Connection起到的作用就是前面提到的“控制不再转发给代理的首部字段”。对于附有首部字段Upgrade的请求，服务器可用101状态码作为响应返回。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180414/dc119bD9hH.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于Upgrade字段，最常用的场景就是由HTTP协议升级为Websock协议时，之前我还对这个过程进行了抓包分析，感兴趣的同学或者对Websock协议不是很了解的同学可以移步我之前的一篇博客&lt;a href=&quot;http://www.cnblogs.com/songwenjie/p/8575579.html&quot;&gt;原来你是这样的Websocket--抓包分析&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;请求首部字段&quot;&gt;2.2 请求首部字段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;从客户端向服务器发送请求报文时使用的首部&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;accept&quot;&gt;2.2.1 Accept&lt;/h3&gt;
&lt;p&gt;Accept首部字段可通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级。可以使用type/subtype这种形式，一次指定多种媒体类型。若想要给媒体类型显式增加优先级，则使用q=来额外表示权重值，用（；）进行分隔。权重范围为0~1，默认权重为q=1.0。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/igDjF4F0eD.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;authorization&quot;&gt;2.2.2 Authorization&lt;/h3&gt;
&lt;p&gt;首部字段Authorization是用来告知服务器，用户代理的认证信息（证书值）。通常在需要认证的网络资源中，没有附加Authorization字段或Authorization字段值错误的请求，会被认为是非法请求，响应状态码为401。在Token认证方式下，客户端就是通过Authorization字段将Token值告知服务器的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/L24l2ED670.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;host&quot;&gt;2.2.3 Host&lt;/h3&gt;
&lt;p&gt;首部字段Host会告知服务器，请求的资源所处的互联网主机名和端口号。&lt;strong&gt;Host首部字段在HTTP/1.1规范内是唯一一个必须被包含在请求内的首部字段&lt;/strong&gt;。首部字段Host和单台服务器分配多个域名的虚拟主机的工作机制有很密切的联系，这是首部字段Host必须存在的意义。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/iD12iFB2dk.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;referer&quot;&gt;2.2.4 Referer&lt;/h3&gt;
&lt;p&gt;首部字段Referer会告知服务器请求的原始资源的URI。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/amcFDGmJhI.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;user-agent&quot;&gt;2.2.5 User-Agent&lt;/h3&gt;
&lt;p&gt;首部字段User-Agent会将创建请求的浏览器和用户代理名称等信息传达给服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/1jlBmbJDAb.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;响应首部字段&quot;&gt;2.3 响应首部字段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;从服务器向客户端返回响应报文时使用的首部&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;location&quot;&gt;2.3.1 Location&lt;/h3&gt;
&lt;p&gt;使用首部字段Location可以将响应接收方引导至某个与请求URI位置不同的资源。该字段会配合3XX:Redirection的响应，提供重定向的URI。几乎所有的浏览器接收到包含首部字段Location的响应后，都会强制性的尝试对已提示的重定向资源的访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/1gK39AFF4E.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;server&quot;&gt;2.3.2 Server&lt;/h3&gt;
&lt;p&gt;首部字段告知客户端当前服务器上安装的HTTP服务器应用程序的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/Ggf07lHbi8.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;www-authenticate&quot;&gt;2.3.3 WWW-Authenticate&lt;/h3&gt;
&lt;p&gt;首部字段WWW-Authenticate用于HTTP的访问认证。它会告知客户端用于访问请求的URI所指定资源的认证方案（Basic或Digest）和带参数提示的质询。&lt;strong&gt;状态码401 Unauthorized响应中，肯定带有首部字段WWW-Authenticate&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/4kKKCAG7hF.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;实体首部字段&quot;&gt;2.4 实体首部字段&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;请求报文和响应报文的实体部分使用的首部&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;allow&quot;&gt;2.4.1 Allow&lt;/h3&gt;
&lt;p&gt;首部字段Allow用于通知客户端能够支持Request-URI指定资源的所有HTTP方法。当服务器收到不支持的HTTP方法时，会以状态码405 Method Not Allowed 作为响应返回。与此同时，还会把所有能支持的HTTP方法写入首部字段Allow后返回。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/hGHAJkjf5c.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;content-length&quot;&gt;2.4.2 Content-Length&lt;/h3&gt;
&lt;p&gt;首部字段Content-Length表明了实体主体部分的大小（单位是字节）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/jab0G9GI9e.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;content-location&quot;&gt;2.4.3 Content-Location&lt;/h3&gt;
&lt;p&gt;首部字段Content-Location给出与报文主体部分相对应的URI。和首部字段Location不同，Content-Location表示的是报文主体返回资源对应的URI。目的是为了当返回的页面内容和实际请求的对象不同时，Content-Location内会写明URI。&lt;/p&gt;
&lt;h3 id=&quot;content-type&quot;&gt;2.4.3 Content-Type&lt;/h3&gt;
&lt;p&gt;首部字段Content-Type说明了实体主体内对象的媒体类型。字段值采用type/subtype形式赋值。&lt;/p&gt;
&lt;p&gt;这个字段我们实际接触是比较多的，当使用网络接口调试工具调试接口时就需要选择Content-Type，例如指定使用json媒体格式&lt;code&gt;Content-Type:Application/json;charset=UTF-8&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180415/G0kem3IE1K.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本文为博主学习感悟总结，水平有限，如果不当，欢迎指正。&lt;/p&gt;
&lt;p&gt;如果您认为还不错，不妨点击一下下方的&lt;span onclick=&quot;Digg();&quot;&gt;【&lt;span&gt;推荐&lt;/span&gt;】&lt;/span&gt;按钮，谢谢支持。&lt;/p&gt;
&lt;p&gt;转载与引用请注明出处。&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 17:07:00 +0000</pubDate>
<dc:creator>喜欢天黑却怕鬼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songwenjie/p/8839782.html</dc:identifier>
</item>
<item>
<title>iOS 同一个workspace下创建多个项目编程 - 滴水微澜</title>
<link>http://www.cnblogs.com/zhou--fei/p/8838078.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhou--fei/p/8838078.html</guid>
<description>&lt;p&gt;在iOS开发中，相关联的多个项目可能会放在同一个workspace下进行开发，那习惯了一个项目在一个工作空间下的同学该怎么快速开撸呢?&lt;/p&gt;
&lt;p&gt;只需要三步而已！&lt;/p&gt;
&lt;p&gt;第一步，先用Xcode在目标目录下创建一个workspace文件。见图说话。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/826860/201804/826860-20180415001736532-2042449238.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;第二步，用Xcode打开workspace文件，然后在该workspace下创建多个Project文件。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/826860/201804/826860-20180415001857730-512321689.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;在创建工程的过程中有个主意点：将新建Project添加的目标和组 都是workspace。如图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/826860/201804/826860-20180415002103981-312669976.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;第三步，多个工程间文件互相引用问题：多个工程间的文件引用方法：在工程A的Setting选项下的Header Search Paths 下添加“$(SRCROOT)/../B”，这个工程A中即可引用工程B的文件，不过导入文件的方式是：#import &amp;lt;Person.m&amp;gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/826860/201804/826860-20180415002223042-916998055.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;如上设置，多个工程间的类就可以共享使用了。&lt;/p&gt;


</description>
<pubDate>Sat, 14 Apr 2018 16:25:00 +0000</pubDate>
<dc:creator>滴水微澜</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhou--fei/p/8838078.html</dc:identifier>
</item>
<item>
<title>关于OpenAuth.Net被攻击 - 李玉宝</title>
<link>http://www.cnblogs.com/yubaolee/p/8837836.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yubaolee/p/8837836.html</guid>
<description>&lt;p&gt;距离上次写博客应该是1年多以前的事情了，看过我博客的人都知道，我从来不在博客园发技术无关的贴子，除了上次离职。但这次我是实在忍不住了。&lt;/p&gt;
&lt;p&gt;今天我个人开源项目OpenAuth.Net发布了最新版（有兴趣戳一下：&lt;a href=&quot;http://openauth.me/&quot; target=&quot;_blank&quot;&gt;http://openauth.me/&lt;/a&gt;），本来是比较高兴的事情。但下午在外面的时候，有人QQ私信我说官网打不开，当时没在意，以为是哪个应用出问题了，回来搞搞就可以了。晚上21点左右回来的时候，熟练的敲上这个网址。等~~等~~好久（不好的预感！！）耶~~~真不一样！！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42655/201804/42655-20180414235141283-1524351207.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;nginx没挂，网站挂了~~~这怎么可能？？？要挂也是一起挂啊&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42655/201804/42655-20180414235602791-1988457565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;xshell连服务器，等~~~~~再等~~~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42655/201804/42655-20180414235816833-1149543901.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;没反应！！！！！！！远程连不上，这问题不小啊！！！直接阿里云后台。不看不知道，一看吓一跳：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42655/201804/42655-20180414234133152-648541594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;本来就买的阿里乞丐版1M的服务器，结果长时间出网108K（截图时间22：25左右，22：40左右强行关服务器）。如果从我收到QQ信息20点多算起，差不多2个多小时。这只有一个解释，有人在恶意访问！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/42655/201804/42655-20180415000428163-1346046118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关停服务器5分钟左右，启动。到现在为止正常。我不知道何人出于何种目的做这种恶心人的事情。OpenAuth.Net纯属个人业余爱好，所有的服务器都是自费搭建。虽说star数已过千人，但我想这对那些大项目应该没有任何影响。我沟通了阿里云的工作人员，那边回复最好加防火墙产品，巴拉巴拉~~~~&lt;/p&gt;
&lt;p&gt;从没想过攻击会来的如此之快，再次强烈谴责一下，也希望网络安全方面的高人指导一下处理方式！&lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 16:21:00 +0000</pubDate>
<dc:creator>李玉宝</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yubaolee/p/8837836.html</dc:identifier>
</item>
<item>
<title>文件预览——一路躺过来的那些坑 - JackieZheng</title>
<link>http://www.cnblogs.com/bigdataZJ/p/FilePreviewTour.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigdataZJ/p/FilePreviewTour.html</guid>
<description>&lt;p&gt;因为最近项目比较紧，所以dubbo源码系列是顾不上了。&lt;/p&gt;
&lt;p&gt;恰巧这周花了几天在做文件预览这块，两三天的时间下来，有过一些走弯路的经验教训（准确说，全都是弯路），在这里给大家分享下~&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;
&lt;p&gt;基于产品需求，需要支持文件预览的功能。顾名思义，要支持类似word、excel、TXT、PDF等格式文件的在线预览。&lt;/p&gt;
&lt;p&gt;业界对于文件预览功能的实现也是各显神通。大体主要分为两种，一种是自主研发，另外就是购买成熟预览服务提供商的服务。&lt;/p&gt;
&lt;p&gt;既然说到躺坑，那自然是属于第一种自主研发的情况。&lt;/p&gt;
&lt;p&gt;自主研发主要还是借用现有的软件和类库组合，加上编码实现。网上搜罗一通，资料相对老旧，很多组件也有超过5年没有更新迭代了。解决方案大致分为两种：&lt;/p&gt;
&lt;p&gt;1、以Openoffice + swftools + Flexmapper + jodconverter技术组合的预览实现&lt;/p&gt;
&lt;p&gt;大体思路是将如doc等文件格式转为pdf格式，再将pdf经过swftools工具转为swf格式，有flexmapper负责最后的预览。&lt;/p&gt;
&lt;p&gt;上面这四个组件，没有一个是好惹的，各个脾气古怪，稍不顺心，就给你报个错，让你折腾半天。&lt;/p&gt;
&lt;p&gt;2、以https://github.com/kekingcn/kkFileView（下面简称kkFileView）该项目为首的基于jodconverter-core + Openoffice的解决方案&lt;/p&gt;
&lt;p&gt;大体思路是借助jodconverter-core和Openoffice将doc等文件转为pdf格式，再由前端通过第三方预览组件如pdf.js负责预览展示。&lt;/p&gt;
&lt;h3 id=&quot;调研&quot;&gt;调研&lt;/h3&gt;
&lt;p&gt;既然市面上提供多种可行性的方案，那么就需要调研对比具体的效果。&lt;/p&gt;
&lt;h4 id=&quot;kkfileview&quot;&gt;kkFileView&lt;/h4&gt;
&lt;p&gt;首先调用的是kkFileView，相信只要找文档格式转换和预览相关的，最终都会看到这个项目。&lt;/p&gt;
&lt;p&gt;该项目托管在GitHub上，使用&lt;strong&gt;spring boot&lt;/strong&gt;打造文件文档在线预览项目解决方案，支持doc、docx、ppt、pptx、xls、xlsx、zip、rar、mp4，mp3以及众多类文本如txt、html、xml、java、properties、sql、js、md、json、conf、ini、vue、php、py、bat、gitignore等文件在线预览。&lt;/p&gt;
&lt;p&gt;看上去完美，但是对接也并非一帆风顺。一些具体细节问题可以到QQ群咨询，在Github上有提供加入方式。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;环境配置&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该项目的思路是将如doc、xls等格式转为pdf格式供前端展示。但是应该是考虑到文件转换耗时较长的问题，所以使用了Redis做缓存，如果发现缓存中已经有转换过的记录就不再执行耗时的转换操作。所以需要配置Redis环境。&lt;/p&gt;
&lt;p&gt;该项目同样依赖Openoffice服务，所以要安装Openoffice软件。安装完成需要在项目的配置文件中配置安装软件路径。&lt;/p&gt;
&lt;p&gt;最后kkFileView项目application-dev.properties配置如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;

#redis连接
spring.redisson.address = 127.0.0.1:6379
##资源映射路径
file.dir = downloadfile/
#spring.redisson.password=123
spring.resources.static-locations = classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:${file.dir}
## openoffice home路径
office.home = /Applications/OpenOffice.app/Contents
server.tomcat.uri-encoding = UTF-8
converted.file.charset = GBK
#文件上传限制
spring.http.multipart.max-file-size=10000MB
##文本类型
simText = txt,html,xml,java,properties,mp3,mp4,sql
#多媒体类型
media=mp3,mp4,flv,rmvb
logging.level.root=debug

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果Redis设置密码，需要配置“spring.redisson.password”属性&lt;/p&gt;
&lt;p&gt;另外，本机系统环境是macOS，所以启动Openoffice需要执行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
cd /Applications/OpenOffice.app/Contents/program

./soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard 
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;文件转换&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本地搭建环境后，启动服务，测试各种常见文档如word、excel、ppt等，发现仍然存在一些问题。&lt;/p&gt;
&lt;p&gt;当上传word或其他文档过大时，预览翻页的时候会有明显的阴影和卡顿的情况，而且翻页速度变快时，会出现反复加载的情况。&lt;/p&gt;
&lt;p&gt;对于ppt文档的支持较差，尤其包含动画的ppt页，只是简单的叠加，导致内容失真。同时可能是电脑本地字体库的原因，有些文件在转换后预览的时候会出现乱码的情况。&lt;/p&gt;
&lt;h4 id=&quot;openoffice-swftools-flexmapper-jodconverter方案&quot;&gt;Openoffice + swftools + Flexmapper + jodconverter方案&lt;/h4&gt;
&lt;p&gt;为了运行起该方案，走了太多弯路。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;环境配置&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;安装swftools之前，一切都还顺利。但是对于macOS环境安装swftools安装各种报错。&lt;/p&gt;
&lt;p&gt;主要受影响的是需要使用的pdf2swf没有安装，通过http://blog.chinaunix.net/uid-21374062-id-3031316.html等资料解决了安装时不抱这个错。同时也换过使用brew直接安装的方式，但是最终结果都是一致的让人绝望，那就是pdf2swf一直没有成功安装。&lt;/p&gt;
&lt;p&gt;后来只能在虚拟机的Windows环境中安装swftools，安装过程中也会弹出一个错误，只需要以管理员的身份重新安装即可。&lt;/p&gt;
&lt;p&gt;最终在Windows环境下成功实现从doc-&amp;gt;pdf-&amp;gt;swf的转换。&lt;/p&gt;
&lt;p&gt;如需代码，请留下邮箱~~~&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;文件转换&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;该模式与上面方案存在同样的问题，如果需要支持高版本office文档的转换，也需要jodconverter-core的支持。&lt;/p&gt;
&lt;p&gt;而且，该方案，文件转换繁琐，需要转为pdf，再由pdf转为swf，最后进行预览。swf已经是极为过时的技术。&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;kkFileView&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;刚开始仅仅依赖com.artofsolving.jodconverter的jar包完成文档转换。但是实际操作发现，该工具包不支持较高版本的office文档如docx、xlsx和pptx等。&lt;/p&gt;
&lt;p&gt;所以后来找了相关资料，发现要么重写BaseDocumentFormatRegistry类（参见https://blog.csdn.net/make_a_difference/article/details/53771136）或者引用jodconverter-core的jar包（参见http://huangronaldo.iteye.com/blog/1628339）。&lt;/p&gt;
&lt;p&gt;其实这里的orgartofsolving.jodconverter-core就是我们提到的kkFileView项目中的jodconverter-core子项目。&lt;/p&gt;
&lt;p&gt;关于引用jodconverter-core按照网上添加denpendency无法下载，后来根据下面的线索访问http://maven.jahia.org/maven2找到可用的版本是3.0-beta-4-jahia4&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/619240/201804/619240-20180415000240589-267890922.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为本地的setting.xml文件没有添加这个repository，所以在当前项目的pom.xml文件中添加&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
&amp;lt;repositories&amp;gt;
    &amp;lt;repository&amp;gt;
        &amp;lt;id&amp;gt;org.artofsolving.jodconverter&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;Maven jahia Mirror&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://maven.jahia.org/maven2/&amp;lt;/url&amp;gt;
        &amp;lt;releases&amp;gt;
            &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
        &amp;lt;/releases&amp;gt;
        &amp;lt;snapshots&amp;gt;
            &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
        &amp;lt;/snapshots&amp;gt;
    &amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;我本地有一个测试的完整项目代码，如果需要，下方留下你的邮箱。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实测效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将一个近10M的xls文件转为pdf文档，本地耗时约为&lt;strong&gt;5分钟&lt;/strong&gt;左右（不能忍）。&lt;/p&gt;
&lt;p&gt;总体，该项目考虑较为完整，但是仍然有不少细节需要优化和处理。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Openoffice + swftools + Flexmapper + jodconverter方案&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从实际转换后得到的swf文件可以看出，对于doc和xls的预览效果要比上面的好，不会出现卡顿的情况，但是对于ppt格式的支持仍然不理想，只是简单的叠加覆盖。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;整体对比下来，这两种方案都存在问题&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;都依赖相对较多的第三方库和软件Openoffice、swftools等&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;库和jar的版本没有持续维护，jodconverter的版本最新的是2008年，jodconverter-core最新版本是2012年。swftools最新版本是2012年。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;效率较低，从上面测试效果发现，在文档转换过程中占用资源较多，时间比较长，不能很好的满足用户的需求，只能通过一些补偿机制做补充，如添加缓存或落盘转换后的文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;经过调研，协调运维和全后端开发人员，决定采用市面上较为成熟的预览服务提供商，这里就不说名称了，以免有打广告之嫌。&lt;/p&gt;
&lt;p&gt;通过对接后发现，只需要完成注册+配置域名+拼装http请求即可，同时预览同等大小的文件仅需5秒左右。&lt;/p&gt;
&lt;p&gt;毕竟，人民币玩家就是强！&lt;/p&gt;
&lt;p&gt;如果您觉得阅读本文对您有帮助，请点一下“&lt;strong&gt;推荐&lt;/strong&gt;”按钮，您的“&lt;strong&gt;推荐&lt;/strong&gt;”将是我最大的写作动力！如果您想持续关注我的文章，请扫描二维码，关注JackieZheng的微信公众号，我会将我的文章推送给您，并和您一起分享我日常阅读过的优质文章。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4459384-f166f03afb66b79f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 16:09:00 +0000</pubDate>
<dc:creator>JackieZheng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bigdataZJ/p/FilePreviewTour.html</dc:identifier>
</item>
<item>
<title>推荐系统——online（上） - redbear</title>
<link>http://www.cnblogs.com/redbear/p/8628687.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/redbear/p/8628687.html</guid>
<description>&lt;h2&gt;框架介绍&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;       &lt;a href=&quot;http://www.cnblogs.com/redbear/p/8594939.html&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;从总体上介绍了推荐系统，推荐系统online和offline是两个组成部分，其中offline负责数据的收集，存储，统计，模型的训练等工作；online部分负责处理用户的请求，模型数据的使用，online learning等。&lt;/span&gt;&lt;span&gt;本篇因为online中有比较复杂的ranking，ranking又分为离线训练和online learning，本篇&lt;/span&gt;主要介绍online部分的reall，ranking部分下篇介绍。先从整体流程图开始绍，数据流分为两部分：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;用户请求数据，一般是由用户下拉刷新或APP发送的默认请求，通过连接网关，请求发送到推进引擎；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;用户产生[隐式反馈或显示反馈]&lt;sup&gt;1&lt;/sup&gt;，这部分数据是由APP从后台收集，通过网关进入flume，然后进入kafka为后面模块使用做准备。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1341759/201804/1341759-20180408105711378-1931879164.png&quot; alt=&quot;&quot; height=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面会根据这两部分展开讨论。&lt;/p&gt;
&lt;h2&gt;流量分配&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这部分包括流量分配和ABTest两个模块，流量分配模块主要是根据需求来动态进行流量的分配，需要做到线上实时修改实时响应；ABTest是为Web和App的页面或流程设计两个版本（A/B）或多个版本（A/B/n），同时随机的分别让一定比例的客户访问，然后通过统计学方法进行分析，比较各版本对于给定目标的转化效果。你们可能觉得这两个模块功能有些冗余，其实并非如此，有一些单纯营运的需求是不需要进ABTest的。以视频推荐为例解释一下 这个问题，假设营运有这样的需求：“他们根据数据发现，iOS用户观看视频更喜欢购买会员进行免除广告，Andriod用户更倾向于观看网剧”（当然这只是一种假设），所以iOS在进行流量分配的时候会把付费视频比例提高，而Andriod会把原创网剧比例提高。然后新的一种算法或者UI希望知道是否会表现更好，这种情况就需要进行ABTest了，对照组和实验组里面iOS和Android都是包含的。这个部分并非是推荐系统的重点，以后有机会再开专题讲ABTest，所以这里就不再详细介绍了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;推荐引擎&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;推荐引擎主要就包括，gateway，recall（match），ranking，其中reall主要offline通过各种算法，最经典的就是基于用户行为的矩阵分解，包括itemCF、userCF、ALS，还有基于深度学习的wise&amp;amp;&amp;amp;deep等方法，后面讲offline的时候会着重说各种算法如何使用和适合的场景。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在我们就默认为，各种算法已经训练完毕，然后会生成一些二进制文件，如下图，这些就是offline算法收敛后的权重向量结果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1341759/201804/1341759-20180414215558138-1023642998.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;文件格式都是二进制，打开我们也看不懂，这里就不打开了，如果有人好奇可以私信我。这些产生后，如何到线上使用呢？用最土的办法，通过脚本每天定时cp到线上的server。也可以通过sql或者nosql数据库等方法，但是这个文件一般比较大，图里展示的只是我其中一个实验，日活大约百万级用户的训练结果数据，如果后面用户更多，item更丰富这个文件也就越大，使用数据库是不是好方式有待商榷。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;gateway&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;这个模块只要负责用户请求的处理，主要功能包括请求参数检查，参数解析，结果组装返回。gateway业务比较轻量级，其中只有一个问题就是“假曝光”，假曝光是相对真曝光而言的，真曝光是指推送给用户的内容且用户看到了，假曝光就是指，推送给用户，但是未向用户展示的内容。推荐系统为了避免重复推荐，所以基于UUID存储推荐历史，存储时间是几小时，或者1天，再或几天，这个需要根据各自的业务情况，也要考虑资源库的大小。假曝光的处理可以在gateway中，把推送的message_id在gateway写入到nosql中，然后根据真曝光数据在离线pipeline中可以获取到，在离线pipeline定时运行时把假曝光的message_id的数据归还到recall队列中。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;recall&lt;/h3&gt;
&lt;p&gt;用户请求到recall引擎后，会根据用户行为和相关配置，启动不同的召回器，下发召回任务，用户行为只要是看是否为新用户进冷启动，相关配置可能就是地区，国家等差异。用户的userprofile如果少于几个行为，一般建议为5-10个点击行为，少于这个标准属于冷启动用户，那么在recall manager的队列里只有冷启动召回器和热门召回器。热门召回器是为了保证推荐内容的热门度，而冷启动召回器是保证推荐结果的新鲜度。recall引擎还要负责任务分配，根据推荐场景，按召回源进行任务拆分，关键是让分布式任务到达负载均衡。&lt;/p&gt;
&lt;p&gt;在各个召回器返回后recall manager收集返回结果，也就是各个召回器的返回的message_id的倒排队列，然后再进行一次整体的ranking。&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1341759/201804/1341759-20180414212312814-435697055.png&quot; alt=&quot;&quot; height=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面再展开介绍一下召回器内部框架&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1341759/201804/1341759-20180414231708544-1462589098.png&quot; alt=&quot;&quot; height=&quot;320&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;召回阶段，获取候选集，一般从基于用户画像、用户偏好、热门label等维度进行召回，如果是用户画像中点击少于10个会使用冷启动服务进行召回；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;过滤阶段，对人工规则，涉黄，政治明感，政策因素，例如最近的未成年孕妇等进行过滤，总之计算保留合法的，合乎运营需要的结果；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;特征计算阶段，结合用户实时行为、用户画像、知识图谱，计算出召回的候选集的特征向量；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;排序阶段，使用算法模型对召回候选集进行粗排序，因为一般用户请求10条数据，召回样本大概在200-400个所以在召回器的排序内会进行序列重新调整。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span&gt;调整阶段，在我们系统中调整策略有几十种，需要配合不同的运营需要，例如新闻内网比例要70%，头条的资源占10%，视频推荐中付费比例占40%等，调整可以理解为精细控制的过滤。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;现在阶段召回，排序的都是message_id，并没有包含文章内容或是视频信息，这些内容会在ranking后，在detial服务中对推荐的返回结果的进行拼装，detail服务后还会有一层对整体结果的调整，下篇会详细介绍。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;PS：最近小红和小熊都在忙着修改冷启动部分，后面会把我们的实践经验分享出来，经过了一个清明假期，更新有些晚了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        我们的文章只会迟到，从不缺席。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 16:07:00 +0000</pubDate>
<dc:creator>redbear</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/redbear/p/8628687.html</dc:identifier>
</item>
<item>
<title>有些ES6方法极简,但是性能不够好 - gxlself</title>
<link>http://www.cnblogs.com/gxlself/p/8837093.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gxlself/p/8837093.html</guid>
<description>&lt;p&gt;So,也许你觉得ES6让你视野大开,但是并不是性能也能跟得上~&lt;/p&gt;
&lt;p&gt;首先,让我们先来一个简单的性能测试:&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;数组去重&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;es5写法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function delSame(arr){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; n =&lt;span&gt; [];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i++&lt;span&gt;){ 
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (n.indexOf(arr[i]) == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) n.push(arr[i]); 
    } 
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; n;  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　es6极简写法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function es6DelSame(arr){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Array.&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Set(arr))  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　测试性能的方法当然是用console.time();函数;console.endTime;进行运行默认时间来判断&lt;/p&gt;
&lt;p&gt;　　打开浏览器的控制台,&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333487/201804/1333487-20180407234423413-1893645543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333487/201804/1333487-20180407234341455-111691472.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看出es5默认的执行时间是  0.68212890625ms&lt;/p&gt;
&lt;p&gt;　　接下来是对es6方法的测试:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333487/201804/1333487-20180407234626984-1053202605.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　很明显,此时es6极简的写法性能要差好多,是es5执行时间的将近三倍&lt;/p&gt;
&lt;p&gt;　　这里用到了es6的两种方法,一种是Array对象的from方法,一种则是es6新增的额Set数据结构,&lt;/p&gt;
&lt;p&gt;　　Array.from()是一种将处理伪数组或者可迭代的对象来创建新的数组实例,所以它实现原理是也是内部迭代,MDN给出不支持Array.from()方法时的替代方案,&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Production steps of ECMA-262, Edition 6, 22.1.2.1
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Reference: &lt;/span&gt;&lt;span&gt;https://people.mozilla.org/&lt;/span&gt;&lt;span&gt;~jorendorff/es6-draft.html#sec-array.from&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (!Array.&lt;span&gt;from&lt;/span&gt;&lt;span&gt;) {
  Array.&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; =&lt;span&gt; (function () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; toStr =&lt;span&gt; Object.prototype.toString;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; isCallable =&lt;span&gt; function (fn) {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;typeof&lt;/span&gt; fn === &lt;span&gt;'&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; || toStr.call(fn) === &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[object Function]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    };
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; toInteger =&lt;span&gt; function (value) {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; number =&lt;span&gt; Number(value);
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (isNaN(number)) { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; }
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (number === &lt;span&gt;0&lt;/span&gt; || !isFinite(number)) { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; number; }
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (number &amp;gt; &lt;span&gt;0&lt;/span&gt; ? &lt;span&gt;1&lt;/span&gt; : -&lt;span&gt;1&lt;/span&gt;) *&lt;span&gt; Math.floor(Math.abs(number));
    };
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxSafeInteger = Math.pow(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;53&lt;/span&gt;) - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; toLength =&lt;span&gt; function (value) {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; len =&lt;span&gt; toInteger(value);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Math.min(Math.max(len, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;), maxSafeInteger);
    };

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The length property of the from method is 1.&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; function &lt;span&gt;from&lt;/span&gt;(arrayLike&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;, mapFn, thisArg &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1. Let C be the this value.&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; C = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2. Let items be ToObject(arrayLike).&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; items =&lt;span&gt; Object(arrayLike);

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3. ReturnIfAbrupt(items).&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; (arrayLike == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; TypeError(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Array.from requires an array-like object - not null or undefined&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
      }

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4. If mapfn is undefined, then let mapping be false.&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; mapFn = arguments.length &amp;gt; &lt;span&gt;1&lt;/span&gt; ? arguments[&lt;span&gt;1&lt;/span&gt;] : &lt;span&gt;void&lt;/span&gt;&lt;span&gt; undefined;
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; T;
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; mapFn !== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5. else      
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5. a If IsCallable(mapfn) is false, throw a TypeError exception.&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isCallable(mapFn)) {
          &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; TypeError(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Array.from: when provided, the second argument must be a function&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (arguments.length &amp;gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {
          T &lt;/span&gt;= arguments[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
        }
      }

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 10. Let lenValue be Get(items, &quot;length&quot;).
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 11. Let len be ToLength(lenValue).&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; len =&lt;span&gt; toLength(items.length);

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 13. If IsConstructor(C) is true, then
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 13. a. Let A be the result of calling the [[Construct]] internal method 
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; of C with an argument list containing the single item len.
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 14. a. Else, Let A be ArrayCreate(len).&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; A = isCallable(C) ? Object(&lt;span&gt;new&lt;/span&gt; C(len)) : &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Array(len);

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 16. Let k be 0.&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; k = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 17. Repeat, while k &amp;lt; len… (also steps a - h)&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt;&lt;span&gt; kValue;
      &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (k &amp;lt;&lt;span&gt; len) {
        kValue &lt;/span&gt;=&lt;span&gt; items[k];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mapFn) {
          A[k] &lt;/span&gt;= &lt;span&gt;typeof&lt;/span&gt; T === &lt;span&gt;'&lt;/span&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ?&lt;span&gt; mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
          A[k] &lt;/span&gt;=&lt;span&gt; kValue;
        }
        k &lt;/span&gt;+= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
      }
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 18. Let putStatus be Put(A, &quot;length&quot;, len, true).&lt;/span&gt;
      A.length =&lt;span&gt; len;
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 20. Return A.&lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt;&lt;span&gt; A;
    };
  }());
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从这可以看出,为什么Array.from效率会比es5的方法慢了,它内部实现的逻辑确实需要一定的执行时间,相对于es5简单的for循环,效率很明显&lt;/p&gt;
&lt;p&gt;当然,那个数组去重也可以通过其他方法优化,但是就不是简易写法了,甚至更多的人会觉得这个写法更优雅,更有档次~嗯哼,我也用了好多次,不过自己总结的方法库却是两个方法都保留了.&lt;/p&gt;
&lt;p&gt;最近上班状态不是很好,好多有用的东西都忘了,再加上最近折腾公众号和小程序,希望自己越来越努力~~&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 16:00:00 +0000</pubDate>
<dc:creator>gxlself</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gxlself/p/8837093.html</dc:identifier>
</item>
<item>
<title>拿来主义：layPage分页插件的使用 - 陈本布衣</title>
<link>http://www.cnblogs.com/chenbenbuyi/p/8836420.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenbenbuyi/p/8836420.html</guid>
<description>&lt;h3&gt;　　&lt;span&gt;布衣之谈&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;所谓插件，大概就是项目中可插可拔的比较小功能化的组件；这些功能组件若能力可及，自己也可以完成——也即自己造轮子，但翻看各种技术社区，相关领域的神人们&lt;span&gt;往往会&lt;/span&gt;有更好的实现方案贡献出来，这个时候你只需要满怀崇敬之心、感激之情，在遵循别人的使用约定的前提下拿过来应用在自己的项目中即可，省却了很多自造车轮的成本。就像苹果造机，虽名苹果，但其零部件全都是世界各地各个功能厂商共同贡献的结果。编程亦是此理，博主入编程的坑稍晚，但也越发的感觉到，在各种功能组件以及技术框架越来越普遍且适用的今天，正是依靠技术互助共享的精神力量，编程才变得越来越简单、快捷的。瞎哔哔了这么多，博主只想说，我虽没有造轮子的能力，但力所能及的，就是尽量将自己的技术积累以博客的形式记录、分享，自己成长为大菜鸟的同时，也期望能帮到更多的小菜鸟——造车轮子咱不会，但告诉别人如何使用，也算是功德一件。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;layPage分页插件使用&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　分页是项目中比价常见的功能，所以网上分页插件也很多，功能都大同小异，也都很好用，只是页面风格不同而已，在实际项目中根据自己项目的界面风格选择合适的一款就好。本篇主要介绍前端框架Layui中众多功能组件之一的分页组件——layPage的使用。废话已多说完毕，直接进入正题。页面插件的使用离不开js和css的支持，所以先去&lt;a href=&quot;http://www.layui.com/&quot; target=&quot;_blank&quot;&gt;官网下载&lt;/a&gt;压缩包，解压获取其中的js和css导入自己的前端页面。博主测试的页面因为同时引用了bootstrap的样式，和layui的样式有些冲突，会对插件的渲染效果有些微的影响。我们在使用第三方插件时，肯定先要根据官方文档结合&lt;a href=&quot;http://www.layui.com/demo/laypage.html&quot; target=&quot;_blank&quot;&gt;demo&lt;/a&gt;去学习,这些样例包含有各种样式可供选择，总有一款适合你——&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180414225255992-1764045773.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　结合官方的示例代码，我们就可以根据自己的界面效果来应用插件了。先上简单的前端页面——&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Plugins/layui/css/layui.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Plugins/bootstrap/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;link&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Plugins/jquery/jquery-1.12.4.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Plugins/layui/js/layui.all.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;${BASE_PATH}/Themes/Default/js/test.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    .table th, .table td&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        text-align &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        vertical-align &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; middle!improtant&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    .container &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        width &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;container content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-green margin-bottom-40&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;layPage测试&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table table-bordered table-striped&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;                                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;                                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;序号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;                                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;                                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;年龄&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;                                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                                     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 表格数据加载 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;                                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;tab_list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;                                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;                             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 存放分页的容器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;layui&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　&lt;span&gt;上面的前端页面很简单，根据官方文档，我们需在合适的位置提供一个存放分页控件的 div 容器。然后是 js 页面——&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; $(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    initLayPage();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * 初始化layui分页
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; initLayPage(pageConf) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;pageConf){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         pageConf =&lt;span&gt;{};
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         pageConf.pageSize = 10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         pageConf.currentPage = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     $.post(&quot;/test/query&quot;, pageConf, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         layui.use(['laypage', 'layer'], &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; page =&lt;span&gt; layui.laypage;  
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            page.render({
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 elem: 'layui'&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                count: data.total,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                curr: pageConf.currentPage,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                limit: pageConf.pageSize,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 first:&quot;首页&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 last:&quot;尾页&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 layout: ['count', 'prev', 'page', 'next', 'limit', 'skip'&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 jump: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (obj, first) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;first) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                         pageConf.currentPage =&lt;span&gt; obj.curr;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                         pageConf.pageSize =&lt;span&gt; obj.limit;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                        initLayPage(pageConf);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             fillTable(data.list,(pageConf.currentPage - 1) * pageConf.pageSize); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;页面填充&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        })
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充表格数据&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; fillTable(data,num) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; info = ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     $.each(data, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (index, obj) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; id 很多时候并不是连续的，如果为了显示比较连续的记录数，可以这样根据当前页和每页条数动态的计算记录序号&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         index = index +num+1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         info += '&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;' + index + '&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;' + obj.name + '&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;' + obj.age + '&amp;lt;/td&amp;gt;' +
&lt;span&gt;46&lt;/span&gt;             '&amp;lt;td style=&quot;text-align: center;&quot;&amp;gt;&amp;lt;button name=&quot;btnModify&quot; type=&quot;button&quot; class=&quot;btn btn-success btn-xs&quot; &amp;gt;修改&amp;lt;/button&amp;gt;' +
&lt;span&gt;47&lt;/span&gt;             '&amp;lt;button name=&quot;btnDelete&quot; type=&quot;button&quot; class=&quot;btn btn-danger btn-xs&quot; onclick=&quot;remove(' + obj.id + ')&quot;&amp;gt;删除&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     $(&quot;#tab_list&quot;&lt;span&gt;).html(info);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;对于上面的 js,咋一看有点懵，但我们看一下官方给出的基础参数选项就比较好理解了——&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180414234002056-1632423083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;上面js 中要重点利用的就是切换分页的回调函数 jump ,该函数在分页或者每页显示条数发生改变时触发，函数返回两个参数：&lt;em&gt;obj&lt;/em&gt;（当前分页的所有选项值）、first（是否首次，一般用于初始加载的判断）。当分页发生改变时，可以根据obj获取到改变后的当前页或者每页显示条数，带着这些参数便可以继续发送ajax请求后台获取数据。对于一些溢出情况，layPage已经做了很好的封装，比如，每页显示20条时当前正在最后一页（5），当切换到每页40条的时候，总共只有3页了，那么layPage会自动计算并切换到当前的最后一页第3页，无需我们自己再去判断处理。下面就是博主做好的分页效果—&lt;img src=&quot;https://images2018.cnblogs.com/blog/1231169/201804/1231169-20180414234914135-1011124530.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;一切，就是这么简单，就像初恋般的感觉。。。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 15:56:00 +0000</pubDate>
<dc:creator>陈本布衣</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenbenbuyi/p/8836420.html</dc:identifier>
</item>
<item>
<title>【基础】在css中绘制三角形及相关应用 - 毛三十</title>
<link>http://www.cnblogs.com/ifat3/p/8837025.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ifat3/p/8837025.html</guid>
<description>&lt;h2 id=&quot;简言&quot;&gt;简言&lt;/h2&gt;
&lt;p&gt;本文简要阐述了用CSS边框的方法在页面上绘制三角形，包括几种典型的三角形绘制，还介绍了几个简单的应用场景。利用边框绘制三角形方法只是众多方案中的一种，大家根据项目实际，选用最适宜项目的方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/galdm3f2.jpg&quot; alt=&quot;CSS与三角形&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本原理&quot;&gt;1 基本原理&lt;/h2&gt;
&lt;p&gt;在CSS中，我们可以利用border-top、border-left、border-bottom、border-left四个属性来绘制三角形。实现的基本原理参见下面的演示代码及其运行结果。&lt;/p&gt;
&lt;h4 id=&quot;核心代码&quot;&gt;核心代码：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;运行结果&quot;&gt;运行结果：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/oujckrbe.jpg&quot; alt=&quot;边框基本原理&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/108&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从以上代码及运行结果不难想出绘制三角形的办法，我们只要将 &lt;code&gt;.box&lt;/code&gt; 的长度和宽度都设成0，就可以得到四个等腰三角形。再将不想保留的三角形边框颜色设置成透明色（即：&lt;code&gt;border-color : transparent&lt;/code&gt;）就可以隐藏掉不想保留的三角形。从而完成三角形的绘制。&lt;/p&gt;
&lt;h2 id=&quot;绘制三角形&quot;&gt;2 绘制三角形&lt;/h2&gt;
&lt;h3 id=&quot;等边三角形&quot;&gt;2.1 等边三角形&lt;/h3&gt;
&lt;p&gt;等边三角形（又称正三边形），为三边相等的三角形，其三个内角相等，均为60°，它是锐角三角形的一种。等边三角形也是最稳定的结构。&lt;/p&gt;
&lt;h4 id=&quot;尖角向上&quot;&gt;2.1.1 尖角向上：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-up&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/c4yb00g9.jpg&quot; alt=&quot;尖角向上等边三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/109&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;尖角向下&quot;&gt;2.1.2 尖角向下：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-down&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/y3ry0nms.jpg&quot; alt=&quot;尖角向下等边三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/110&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;尖角向左&quot;&gt;2.1.3 尖角向左：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-left&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/gwt7dtp0.jpg&quot; alt=&quot;尖角向左等边三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/111&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;尖角向右&quot;&gt;2.1.4 尖角向右：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;57.735px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/lj5ltbtm.jpg&quot; alt=&quot;尖角向右等边三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/112&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;等腰直角三角形&quot;&gt;2.2 等腰直角三角形&lt;/h3&gt;
&lt;p&gt;等腰直角三角形是特殊的等腰三角形，它的两底角相等，都是45°；它的两腰长度相等。&lt;/p&gt;
&lt;h4 id=&quot;左上直角&quot;&gt;2.2.1 左上直角：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-top-left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/bunrzsne.jpg&quot; alt=&quot;左上直角等腰直角三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/113&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;右上直角&quot;&gt;2.2.2 右上直角：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-top-right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/c67pnnpj.jpg&quot; alt=&quot;右上直角等腰直角三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/114&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;左下直角&quot;&gt;2.2.3 左下直角：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-bottom-left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/rkvltzdj.jpg&quot; alt=&quot;左下直角等腰直角三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/115&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;右下直角&quot;&gt;2.2.4 右下直角：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode css&quot;&gt;
&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fl&quot;&gt;.triangle-bottom-right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;border-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/jcsnzymg.jpg&quot; alt=&quot;右下直角等腰直角三角形&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/116&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关应用&quot;&gt;3 相关应用&lt;/h2&gt;
&lt;h3 id=&quot;弹出框popover组件&quot;&gt;3.1 弹出框(popover)组件&lt;/h3&gt;
&lt;p&gt;弹出框(popover)或提示框(tooltip)一般都会用到三角形，三角形明确并加强了指向作用。类似于Bootstrap的Popover和Tooltip组件都用到了边框三角形的实现方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/wzyi5whz.jpg&quot; alt=&quot;弹出框(popover)组件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/117&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上述演示只是实现了顶部弹出框，其它方向弹出框参考上述实现方式即可。&lt;/p&gt;
&lt;h3 id=&quot;视频播放按钮&quot;&gt;3.2 视频播放按钮&lt;/h3&gt;
&lt;p&gt;视频播放按钮(Play button)可以采用边框三角形的实现方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://res.42du.cn/up/201804/8ckjqjws.jpg&quot; alt=&quot;视频播放按钮组件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.42du.cn/run/118&quot;&gt;演示代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三角形的应用场景还有很多，比如下拉菜单(dropdown menu)中，或者是“顶”及“踩”按钮等。&lt;/p&gt;
&lt;p&gt;边框实现三角形只是众多方案之一，大家可以根据项目实际，选择小图标方案或选用SVG方案。&lt;/p&gt;
</description>
<pubDate>Sat, 14 Apr 2018 15:53:00 +0000</pubDate>
<dc:creator>毛三十</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ifat3/p/8837025.html</dc:identifier>
</item>
<item>
<title>关于jsp页面加载时报错500的问题 - 糖拌西红柿</title>
<link>http://www.cnblogs.com/TheGCC/p/8836997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/TheGCC/p/8836997.html</guid>
<description>&lt;p&gt;先说一下，问题的发生，个人做了个小系统，成品以后运行了几次，没有问题，结果最后一次测试时，发现登陆页面报错了：&lt;/p&gt;
&lt;p&gt;    &lt;span&gt; &lt;span&gt;账号密码输入正确，经过后台登陆后，按理说是应该进入登陆成功后的jsp页面，然而结果却是：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201804/1368510-20180414233301808-85662811.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201804/1368510-20180414233311715-1440553911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;关于&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;报错，多是因为list的取值出问题，测试后发现我的登录后页面有段代码是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201804/1368510-20180414233529681-381600132.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将&amp;lt;s:iterator&amp;gt;标签注释掉或者将里面的  begin  end 属性删掉，页面就能跳转成功！！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;span&gt;在这里附上Strust2里的迭代标签  s:iterator  的使用方法&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          迭代标签&lt;/span&gt;：用于遍历集合(java.util.Collection)或者枚举值(java.util.Iterator)类型的对象,&lt;span&gt;&lt;span&gt;value属性&lt;/span&gt;&lt;/span&gt;表示集合或枚举对象,&lt;span&gt;&lt;span&gt;status属性&lt;/span&gt;&lt;/span&gt;表示当前循环的对象,在循环体内部可以引用该           对象的属性&lt;/p&gt;
&lt;p&gt;       &amp;lt;s:iterator value=&quot;userList&quot; status=&quot;user&quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;         姓名：&amp;lt;s:property value=&quot;#user.userName&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;        年龄：&amp;lt;s:property value=&quot;#user.age&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;      &amp;lt;/s:iterator&amp;gt;&lt;/p&gt;
&lt;p&gt;               其中begin 和end 是用来控制数组中要迭代的个数，起始下标和结束下标。&lt;/p&gt;
&lt;p&gt;      而我的报错，是因为要迭代的数据的值不足 0~3了，也就是整个要迭代的list集合里的数据不够4个，所以报错……&lt;/p&gt;

</description>
<pubDate>Sat, 14 Apr 2018 15:52:00 +0000</pubDate>
<dc:creator>糖拌西红柿</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/TheGCC/p/8836997.html</dc:identifier>
</item>
</channel>
</rss>