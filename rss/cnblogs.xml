<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>使用神经网络预测航班起飞准点率 - 牛云杰</title>
<link>http://www.cnblogs.com/NosenLiu/p/9733765.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NosenLiu/p/9733765.html</guid>
<description>&lt;p&gt;前些日子，参加了一个解放号的行业大数据创新应用大赛，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://1024.jfh.com/question/detail?contestId=6&quot;&gt;https://1024.jfh.com/question/detail?contestId=6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;一.问题描述&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　赛题是根据西安机场上半年的航班起降信息，建立适当预测模型，预测未来七天的航班准点率，(航班实际起飞时间-航班计划起飞时间)&amp;lt; 15 分钟即为准点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二.问题分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　为解决这个问题，首先需要对比赛数据进行深入了解。赛会提供的数据是一个csv文件，由15万条航班起降数据组成。每条记录包含如下九种属性：[航班号,出发地,到达地,机型,计划起飞时间,计划到达时间,实际起飞时间,实际到达时间,进出港类型]。&lt;/p&gt;
&lt;p&gt;下面是几条数据示例：&lt;/p&gt;
&lt;p&gt;HV2380,XIY,KUL,A330,2018/1/1 0:30,2018/1/1 5:40,2018/1/1 0:39,2018/1/1 5:59,出港&lt;/p&gt;
&lt;p&gt;IU6364,XIY,DMK,B737,2018/1/1 1:35,2018/1/1 5:30,2018/1/1 1:40,2018/1/1 5:17,出港&lt;/p&gt;
&lt;p&gt;IU5438,XIY,HKT,B737,2018/1/1 1:35,2018/1/1 6:35,2018/1/1 3:18,2018/1/1 7:51,出港&lt;/p&gt;
&lt;p&gt;其中，可以用于预测的特征只有 航班号、机型、出发地、到达地、计划起飞时间这5种特征，仅使用这些特征来建立预测模型的话是不够充分的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.1 特征补充——爬取天气数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　为此，我们额外收集了西安机场半年以来的天气数据，根据日常经验可知，天气对于航班起降的影响是巨大的。在给定的数据文件中，仅有2018年1月1日到2018年6月30日的数据，因此，我们在网上爬取了这些日期的天气情况。经过浏览网页，决定使用”逍遥天气”网站的数据，对每天天气新闻进行爬取(如：http://www.xaoyo.com/news/xian/20180629.html)。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930230039572-975886417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;图1.天气网站示例&lt;/p&gt;
&lt;p&gt; 　　我们使用selenium+phantomJS的框架来对网站的标题进行爬取，发现每天的新闻的URL格式相对固定，仅后方的日期略有差别；此外，每天的新闻标题都存储在&amp;lt;div class=’hed_tit’&amp;gt;中的&amp;lt;h1&amp;gt;标签下，可以使用BeautifulSoup将其解析出来。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; title = BeautifulSoup(driver.page_source,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;html.parser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,class_=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hed_tit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).text
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　获取了标题字符串之后，我们对其进行解析切分，使用python自带的split()函数，将三种属性：天气、气温、风力 解析出来。经过粗略分析，感觉气温属性对航班的准点率影响不大，便仅留下天气与风力属性，保存在weather.csv文件中。&lt;/p&gt;
&lt;p&gt;　　这里爬虫的具体实现我就不再进行细致讲解，对爬虫没有太多基础的同学可以看我之前的博文(基于selenium+phantomJS的动态网站全站爬取)。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.2非线性特征数据处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　现在，我们有了航班号、机型、出发地、到达地、计划起飞时间、天气、风力这7种属性。&lt;/p&gt;
&lt;p&gt;　　第一个问题是，神经往往要求我们的输入在[0~1]之间，但航班号、机型、出发地、到达地、天气这5个属性并不是线性的，我们无法使用算数计算的方式将其归一化。为了解决这个问题，直觉上想到One-Hot Vector编码。即将该特征编码成一条N*1的向量，该特征所处的位置赋值为1，向量中的其他位置赋值为0。One-Hot Vector 在网上已有丰富的资料可供查阅，这里我们就简单举例说明一下。&lt;/p&gt;
&lt;p&gt;　　假设现在一共有“HV2380”，“IW5079”，“SY6658”，“WJ5723”，“VQ9535”共5种航班，那么对于数据文件中的第一条数据：&lt;/p&gt;
&lt;p&gt;HV2380,XIY,KUL,A330,2018/1/1 0:30,2018/1/1 5:40,2018/1/1 0:39,2018/1/1 5:59,出港&lt;/p&gt;
&lt;p&gt;可以将航班号这个特征编码为 [1, 0, 0, 0, 0]。 对于另一条数据：&lt;/p&gt;
&lt;p&gt;WJ5723,XIY,TGO,B737,2018/1/1 13:50,2018/1/1 16:30,2018/1/1 13:58,2018/1/1 16:04,出港&lt;/p&gt;
&lt;p&gt;可以将航班号这个特征编码为 [0, 0, 0, 1, 0]。&lt;/p&gt;
&lt;p&gt;为了准确的对所有航班号属性进行One-Hot编码，我们遍历所有数据条目，统计出一共有1266中不同的航班。也就是说，对于这一种特征来说，就会产生一个1266*1的One-Hot向量，这会导致在神经网络训练的时候产生一个相当大的稀疏矩阵。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;三.基于数据统计的多步预测模型建立&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1数据统计及特征提取&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　上文讲到直接对航班进行One-Hot编码，会产生一个较大的稀疏向量，进而在搭建网络的过程中会出现一个相当大的稀疏矩阵。直观上我会怀疑模型能否可以正确的对其进行训练，达到理想的效果。&lt;/p&gt;
&lt;p&gt;　　因为稀疏矩阵的存在，看起来对每一条航班信息进行准点率预测的模型不是那么好实现。等等，我们再重新审一下题~~赛题的要求是： &lt;strong&gt;预测未来七天的航班准点率！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　即，我们不是预测每个航班的起降准点率，而是预测每日所有航班的准点率：(准点航班数量/当日航班总数)*100%。也就是说，对于给定数据文件中的数据，我们没有必要对每一条航班信息建模训练，我们完全可以统计出每一天的航班起降情况，并以天为单位来进行建模预测。&lt;/p&gt;
&lt;p&gt;　　因此，我们着手开始进行数据统计的工作。首先，就是以天为单位，统计每天的航班起降总数与准点航班数目。为达到这个目的，我先初始化了两个长度为181的全0向量(赛题数据一共包含有181天)，分别表示第n天的航班总数与准点航班数目。之后开始对数据文档中的15万条数据进行一次遍历，对于每条数据，计算其所属的日期，与其是否准点，分别在对应向量的位置中+=1。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; count_list = list(np.zeros(day_num))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 计算每天有多少班次飞机的list&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; accurate_num_list = list(np.zeros(day_num))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每天准点的飞机数量list&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(len(fin))[1:]:      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 首行是标注，非数据&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         plan_fly_time = time.mktime(time.strptime(fin[4][i],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y/%m/%d%H:%M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         day_index = int((plan_fly_time-begin_stamp)/(3600*24&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         count_list[day_index] += 1  
&lt;span&gt;7&lt;/span&gt;         actual_fly_time = time.mktime(time.strptime(fin[6][i],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y/%m/%d %H:%M&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; actual_fly_time-plan_fly_time &amp;lt; 15*60&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;             accurate_num_list[day_index] += 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在进行统计的过程中，还会遇见一些有问题的数据，例如说有部分数据的机型一项为NULL，有一部分数据的起飞、降落时间为NULL：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930231225084-747125305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3.1 值为NA的脏数据示例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930231250252-1195865769.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图3.2 值为#NA的脏数据示例&lt;/p&gt;
&lt;p&gt;在数据处理的过程中，我们选择对这些数据条目进行删除。整体删除量较小(总共删除&amp;lt;20条数据)，对建模不会产生任何影响。&lt;/p&gt;
&lt;p&gt;         在统计完每日航班数目与每日准点率之后，画出其图像，来对其关系进行直观的对比：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930231317594-246012223.png&quot; alt=&quot;&quot; width=&quot;1212&quot; height=&quot;626&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3.3 每日起降航班数目与准点率关系统计图&lt;/p&gt;
&lt;p&gt;　　根据图像，我们可以得出，航班准点率整体趋于一个稳定序列，即没有明显上升、下降趋势的序列，平均准点率大概在60%左右；此外，可以略微的看出每日起降数量与准点率呈反比(如第45~75日)，这也与我们的直觉相契合，即航运压力大的时候飞机准点率不高。我们对前两个准点率低谷进行分析，发现在1月3日和1月24日有降雪，降雪不但对当天的航班准点率有影响，还会继续影响后续几天的航班，尤其是降雪过后第二日，航班准点率会比降雪当天还要低。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930231409157-947628795.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930231415021-1867085348.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3.4 降雪会明显影响后续几日航班准点率&lt;/p&gt;
&lt;p&gt;　　此外，继续观察天气数据与航班准点率统计图，可以发现气温对航班准点率几乎没有影响(数据从冬天到夏天，准点率没有明显上升、下降趋势)。因此，在对气象特征进行提取的时候，我们仅仅对天气和风力进行建模。&lt;/p&gt;
&lt;p&gt;　　对于天气建模，我们使用One-Hot编码的方式，将天气分为3类，第一类是{阴，晴，多云}，第二类是{小雨，中雨，大雨，暴雨}，第三类是{雨夹雪，小雪，中雪，大雪，暴雪}。最终生成一个形状为3*1的向量。如某日天气为“中雨”，特征向量为[0,1,0]，某日天气为“多云”，其特征向量为[1,0,0]。而对于风力，我们将其风力的级别提取出来，根据其级别0~12级将其归一化到[0,1]之间。此时，我们就可以将统计数据抽象提取出6个特征，即航班数，准点率，阴晴，雨，雪，风力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;   /*  接下来对剩下来的航班号、机型、出发地、降落地进行筛选，考虑到航班号确定时，其机型，出发地，将落地也将是确定的，在构造模型时，我们仅仅保留航班号这一个特征。最终，我们的预测模型拥有。 */&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.2多步预测模型建立&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　Nguyen Hoang An曾对神经网络进行多步预测的策略进行过总结[1]， 包括直接预测策略、迭代策略，MIMO策略，DirREC策略以及DirMO策略。其中，直接预测策略、DirREC策略和DirMO策略都需要建立多个预测模型，训练开销比较大。而MIMO策略的预测效果并不好，因此我们使用迭代策略来进行多步预测。国内也有学者对传统Airline Passenger数据进行多步预测[2]，取得了不错的效果。迭代策略就是训练出一个预测模型，预测出下一个时间节点的数据，之后将预测输出作为输入，对第二个时间节点进行预测，如此迭代反复，获得多步预测结果。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　在上一节的处理中，我们最终留下了航班数，准点率，阴晴，雨，雪，风力6个特征用于预测。其中，模型并不能预测天气情况，仅仅能对航班数、准点率两个特征进行预测，&lt;strong&gt;在这次建模中，假设我们可以获得第二天准确的天气情况。每次将预测得到的航班数和准点率与已知的天气数据进行拼接，迭代的预测后续的航班数和准点率，预测得到未来7天的航班起降准点率&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　预测模型搭建如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; model =&lt;span&gt; Sequential()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; model.add(LSTM(128, input_shape=(self.window_len,6),return_sequences=False))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; TODO: input_shape=(timesteps ,data_dim)&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; model.add(Dropout(0.2&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; model.add(Dense(2&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; model.add(Activation(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sigmoid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; model.compile(loss=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;binary_crossentropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,optimizer=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rmsprop&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,metrics=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里使用keras的序贯模型来构造训练模型。考虑到天气会对准点率有持续的影响，这里使用LSTM循环神经网络来进行预测，时间窗口(self.window_len)设置为6，输入特征数目也是6(即input_shape中的第二个参数)。尤其注意最后一层一定要使用Dense(2)，使我们的输出模型可以输出两个结果，第一个结果是第二天航班数的预测效果，第二个结果是第二天准点率的预测结果。&lt;/p&gt;
&lt;p&gt;         本次数据共有181天，排除掉最后7天的数据(最后七天的仅仅包含入港的数据、没有出港的数据)，再减去时间窗口6，得到168个样本。其中划出10个样本作为测试集，158个样本作为训练集。使用这158个样本进行训练，训练2000个epoch，获得模型并保存。&lt;/p&gt;
&lt;p&gt;使用这个模型来对10个测试样本进行预测，每次仅预测第二天的航班数和准点率：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930232026706-1258777702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3.5 航班数目预测结果（单点预测）&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930232115315-366975568.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图3.6 航班准点率预测结果（单点预测）&lt;/p&gt;
&lt;p&gt;　　使用倒数第7天的样本输出作为初始样本，使用迭代策略来对未来7天的航班数目和准点率进行预测(假设已有未来7天准确的天气预报)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930232235366-1168036965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3.7 航班数目预测结果（连续预测7天）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1463653/201809/1463653-20180930232309263-73921536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3.8 准点率预测结果（连续预测7天）&lt;/p&gt;
&lt;p&gt;　　通过上图可以看出，不论是对航班数目还是准点率，模型都可以对其趋势进行较好的把握，7天准点率预测结果的均方根误差约为5.3%。&lt;/p&gt;
&lt;p&gt;　　当然，在模型训练的时候，我们还可以对其窗口大小、训练次数、批处理大小、dropout比例等进行调整。时间充裕的情况下可以反复调整模型，获得更好的预测效果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference：&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;Default&quot;&gt;[1] NH An, DT Anh. Comparison of Strategies for Multi-step-Ahead Prediction of Time Series Using Neural Network[C]. &lt;em&gt;2015 International Conference on Advanced Computing and Applications (ACOMP)&lt;/em&gt;, Ho Chi Minh City, 2015, pp. 142-149.&lt;/p&gt;
&lt;p class=&quot;Default&quot;&gt;[2] Liu YP, Hou D, Bao JP, et al. Multi-step Ahead Time Series Forecasting for Different Data Patterns Based on LSTM Recurrent Neural Network[C]. &lt;em&gt;2017 14th Web Information Systems and Applications Conference (WISA)&lt;/em&gt;, Liuzhou, Guangxi Province, China, 2017, pp. 305-310.&lt;/p&gt;

&lt;p&gt;后记：此次也有尝试已知未来7日每天航班计划(即已知每日航班数)来仅对航班准点率这一个属性进行预测。但预测效果不如上述模型理想。也许是因为数据较少(仅181天的数据，包括最后7日的残缺数据)的原因，可以后续对该模型继续留待观察。&lt;/p&gt;

</description>
<pubDate>Sun, 30 Sep 2018 15:34:00 +0000</pubDate>
<dc:creator>牛云杰</dc:creator>
<og:description>前些日子，参加了一个解放号的行业大数据创新应用大赛， https://1024.jfh.com/question/detail?contestId=6 一.问题描述 赛题是根据西安机场上半年的航班起降</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NosenLiu/p/9733765.html</dc:identifier>
</item>
<item>
<title>Windows应用程序进程级别统一监控实践 - 静若清池</title>
<link>http://www.cnblogs.com/liugh/p/9733637.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liugh/p/9733637.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;        一般的系统级别指标监控，更多关注CPU、内存、磁盘、网络等运行情况，对应用程序运行时的进程指标关注不够，导致不能深入了解系统运行状态。本文根据笔者应用实践，探讨一下进程级别监控涉及到的监控内容以及监控方式，供感兴趣的同行做参考。 &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/380081/201809/380081-20180930224732064-1792555053.png&quot; alt=&quot;&quot; width=&quot;553&quot; height=&quot;347&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一、监控内容&lt;/p&gt;
&lt;p&gt;        众所周知，应用软件最终表现为应用程序，程序是指令、数据及其组织形式的描述，其本身没有任何运行的含义，是一个静态的概念；进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是程序的实体，是一个动态的概念。&lt;/p&gt;
&lt;p&gt;进程的主要属性有：进程ID、进程名称、进程用户名称、进程状态、进程优先级、进程启动时间、包含的线程、使用的CPU时间、使用的内存、句柄等。进程的属性虽多，但根据笔者的应用实践，只要重点监控几个关键指标即可抓住进程的运行状态，进而对应用程序的健康状况做出正确的判断，并在发生故障前快速采取止损措施。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;CPU&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;        CPU描述了进程占用的计算资源，监控主要关注进程级别CPU的两种场景：High CPU、Low CPU。&lt;/p&gt;
&lt;p&gt;        当进程长时间处于High CPU状态时，除了正常负载高的情况，程序内部可能：&lt;/p&gt;
&lt;p&gt;        a.在不断产生大量异常&lt;/p&gt;
&lt;p&gt;        b.发生了死循环&lt;/p&gt;
&lt;p&gt;        c.在频繁做垃圾回收（Garbage Collection，GC）&lt;/p&gt;
&lt;p&gt;        当进程长时间处于Low CPU状态时，程序内部可能：&lt;/p&gt;
&lt;p&gt;        a.发生了死锁&lt;/p&gt;
&lt;p&gt;        b.发生了阻塞&lt;/p&gt;
&lt;p&gt;      2.内存&lt;/p&gt;
&lt;p&gt;        内存描述了进程占用的存储资源，由于Windows资源分为托管资源和非托管资源，因此监控进程级别的内存，应该关注同时包含这两种资源的提交内存（Commit Size）。&lt;/p&gt;
&lt;p&gt;监控主要关注进程级别High Memory场景，当进程长时间处于High Memory状态时，程序内部可能:&lt;/p&gt;
&lt;p&gt;        a.发生了内存泄漏，对象一直被使用，无法及时释放&lt;/p&gt;
&lt;p&gt;        b.产生了内存碎片，导致内存溢出（Out Of Memory，OOM）&lt;/p&gt;
&lt;p&gt;        3.端口数&lt;/p&gt;
&lt;p&gt;        端口数描述了进程占用的网络资源，通过命令“netstat -ano”可以获得整个机器的网络端口数占用情况，但无法直接获得每个进程的网络端口数占用情况，因此需要对“netstat -ano”输出的进程ID做分组汇总，以便获得每个进程占用的端口数，从而对进程的监控深入一个层次。&lt;/p&gt;
&lt;p&gt;当进程占用的端口数过高时，程序内部可能发生了端口泄漏。&lt;/p&gt;
&lt;p&gt;        4.活跃线程数&lt;/p&gt;
&lt;p&gt;        进程是线程的容器，一个进程可以包括多个线程，进程和线程都是CPU工作时间段的描述。线程具有生命周期，因此具有很多状态（新建、就绪、运行、阻塞、死亡），从Windows任务管理器看到的某个进程包含的线程数，是所有状态的线程数，监控粒度比较粗。&lt;/p&gt;
&lt;p&gt;        进程级别的线程监控，应该关注活跃线程数，也就是真正在运行的线程数，这可以通过如下方法得到：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;18.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;636&quot; readability=&quot;20&quot;&gt;
&lt;p&gt;private int GetActiveThreadCount()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;int MaxWorkerThreads, miot, AvailableWorkerThreads, aiot;&lt;/p&gt;
&lt;p&gt;ThreadPool.GetMaxThreads(out MaxWorkerThreads, out miot);&lt;/p&gt;
&lt;p&gt;AvailableWorkerThreads = aiot = 0;&lt;/p&gt;
&lt;p&gt;    ThreadPool.GetAvailableThreads(out AvailableWorkerThreads, out aiot);&lt;/p&gt;
&lt;p&gt;    return MaxWorkerThreads - AvailableWorkerThreads;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;        当进程包含的活跃线程数过高时，程序内部可能发生了线程泄漏。&lt;/p&gt;
&lt;p&gt;        5.同一进程组流量分布&lt;/p&gt;
&lt;p&gt;        前面的几个指标关注的是单一进程，当不同机器上的进程组成一个集群时，需要同时关注这些进程组间的指标，比如流量分布。&lt;/p&gt;
&lt;p&gt;当一个集群负载均衡的处理请求时，流量应该是均分到每一个处理进程的，如果监控到某一个进程处理的TPS远小于整个集群的平均TPS时，该进程很可能发生了阻塞或宕机&lt;/p&gt;
&lt;p&gt;        6.可用性指标&lt;/p&gt;
&lt;p&gt;        可用性指标是指可以作为度量系统死活点（Dead Live Point，DLP）的指标，一般关注两个方面：进程可用性、进程上运行的服务可用性。&lt;/p&gt;
&lt;p&gt;        进程可用性主要判断进程是否仍然存活，可以通过调用系统接口判断进程是否存在，也可以通过进程埋点上报心跳信息。&lt;/p&gt;
&lt;p&gt;        进程上运行的服务可用性主要关注服务运行的成功率或失败率，因此涉及到的业务因素比较多，限于篇幅不再展开。如果整个系统基于微服务框架，比如高速服务框架（High Speed Framework，HSF），则可以对服务调用进行统一监控，从而可以统一计算服务可用性。&lt;/p&gt;
&lt;p&gt;二、监控方式&lt;/p&gt;
&lt;p&gt;        对进程级别的监控由于比较底层，一般采用两种手段：监控主动收集、进程埋点上报。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;监控主动收集&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;        主动收集又分为两种方式：通过系统接口获得机器上所有进程信息、通过性能计数器获得进程级别监控指标，两种方式都是非侵入式的，不会影响进程的正常运行，是首要考虑的监控方式。&lt;/p&gt;
&lt;p&gt;        2.进程埋点上报&lt;/p&gt;
&lt;p&gt;        埋点是一种常见的数据采集方式，在要精准获得进程级别监控数据时，代码埋点可能是最好的选择。比如前面提到的获得进程包含的活跃线程数，以及可用性指标，都需要进程埋点上报才能获得比较精确的监控指标。当然进程埋点并不需要对每个进程都做埋点开发，可以在框架层面进行统一埋点，从而降低埋点开发及实施成本。&lt;/p&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;        只有深刻认识到进程级别监控涉及的监控内容及监控方式，才能更深入的掌握系统运行状态，并在系统开始恶化前针对不同进程指标快速做出点杀动作（比如通过自动运维进行有顺序的进程重启），从而做到及时止损。&lt;/p&gt;
&lt;p&gt;四、特来电云计算与大数据微信公众号&lt;/p&gt;
&lt;p&gt;1.微信公众号名称：特来电云计算与大数据&lt;/p&gt;
&lt;p&gt; 2.二维码：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/380081/201805/380081-20180531163346171-1799422996.png&quot; alt=&quot;&quot; width=&quot;214&quot; height=&quot;214&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 30 Sep 2018 14:51:00 +0000</pubDate>
<dc:creator>静若清池</dc:creator>
<og:description>一般的系统级别指标监控，更多关注CPU、内存、磁盘、网络等运行情况，对应用程序运行时的进程指标关注不够，导致不能深入了解系统运行状态。本文根据笔者应用实践，探讨一下进程级别监控涉及到的监控内容以及监控</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liugh/p/9733637.html</dc:identifier>
</item>
<item>
<title>【数据科学】Python数据可视化概述 - 昕-2008</title>
<link>http://www.cnblogs.com/Belter/p/9650433.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Belter/p/9650433.html</guid>
<description>&lt;p&gt;&lt;span&gt;注&lt;/span&gt;：很早之前就打算专门写一篇与Python数据可视化相关的博客，对一些基本概念和常用技巧做一个小结。今天终于有时间来完成这个计划了！&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;0. Python中常用的可视化工具&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;Python在数据科学中的地位，不仅仅是因为numpy, scipy, pandas, scikit-learn这些高效易用、接口统一的科学计算包，其强大的数据可视化工具也是重要组成部分。在Python中，使用的最多的数据可视化工具是matplotlib，除此之外还有很多其他可选的可视化工具包，主要包括以下几大类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;matplotlib以及基于matplotlib开发的工具包：pandas中的封装matplotlib API的画图功能，seaborn，networkx等；&lt;/li&gt;
&lt;li&gt;基于JavaScript和d3.js开发的可视化工具：plotly等，这类工具可以显示动态图且具有一定的交互性；&lt;/li&gt;
&lt;li&gt;其他提供了Python调用接口的可视化工具：OpenGL, GraphViz等，这一类工具各有特点且在特定领域应用广泛.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于数据科学，用的比较多的是matplotlib和seaborn，对数据进行动态或交互式展示时会用到plotly.&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;1. matplotlib与MATLAB&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;Matplotlib是建立在NumPy数组基础上的多平台数据可视化程序库，John Hunter在2002年提出了matplotlib的初步构想——在Python中画出类似MATLAB风格的交互式图形。鉴于此种渊源，类似MATLAB风格的画图接口是matplotlib的两种画图接口之一。这类接口直观、便捷，许多语法与MATLAB类似，也是初学者常用的方式。&lt;/p&gt;
&lt;p&gt;这种接口最重要的特性是有状态的（stateful）：它会持续跟踪&quot;当前的&quot;图形和坐标轴，所有&lt;span&gt;plt&lt;/span&gt;命令都可以应用。可以用&lt;span&gt;plt.gcf()&lt;/span&gt;（获取当前图形）和&lt;span&gt;plt.gca()&lt;/span&gt;（获取当前坐标轴）来查看具体信息。&lt;/p&gt;
&lt;p&gt;matplotlib画图的基本设置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib as mpl
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; mpl.rcParams[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;axes.linewidth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 1.5 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;set the value globally, 设置坐标轴线宽&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; seaborn as sns
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; sns.set()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用seaborn设置绘图风格&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多自定义设置可以参考官方文档：&lt;a href=&quot;https://matplotlib.org/users/customizing.html&quot; target=&quot;_blank&quot;&gt;Customizing matplotlib&lt;/a&gt;&lt;a href=&quot;https://matplotlib.org/api/matplotlib_configuration_api.html&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面使用MATLAB风格画图，对一组分类变量（categorical variables）进行可视化&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; names = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;group_a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;group_b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;group_c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不同分类的名称&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; values = [1, 10, 100]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不同分类对应的值&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; plt.figure(1, figsize=(9, 3))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置图片大小&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; plt.subplot(131)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1x3, 第一个子图&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; plt.bar(names, values)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 柱状图&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; plt.subplot(132)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1x3, 第二个子图&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; plt.scatter(names, values)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 散点图&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; plt.subplot(133)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1x3, 第三个子图&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; plt.plot(names, values)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 折线图&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; plt.suptitle(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Categorical Plotting&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 图片的标题&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; w_pad设置子图之间的间隔宽度;rect设置整个图像部分（矩形）的左上点坐标和右下点坐标，默认值为[0, 0, 1, 1]&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; plt.tight_layout(w_pad=0.1, rect=[0, 0.03, 1, 0.95&lt;span&gt;]) 
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; plt.savefig(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;demo1.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, dpi=200)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存图片&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图片如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1035701/201809/1035701-20180928192846728-1456663118.png&quot; alt=&quot;&quot; width=&quot;807&quot; height=&quot;269&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 图1：分类变量的可视化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 这种方式画图非常直观，每一步都对&quot;&lt;span&gt;plt&lt;/span&gt;&quot;对象有一个特定的操作，画图的过程至上而下，画好之后保存图片。其他命令说明如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;subplot(131)&lt;/span&gt;表示设置子图为1行3列，且当前为第1个子图；&lt;/li&gt;
&lt;li&gt;在保存图片之前调用&lt;span&gt;tight_layout()&lt;/span&gt;函数可以使图片更加紧凑，边框更窄，更多关于该函数的用法可参考&lt;a href=&quot;https://matplotlib.org/users/tight_layout_guide.html&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;保存图片是可以使用参数&lt;span&gt;dpi&lt;/span&gt;设置图片的分辨率.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在官方文档中，这种风格的API被称为&quot;&lt;span&gt;pyplot API&lt;/span&gt;&quot;.&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2. matplotlib的第二种风格——面向对象的画图接口&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;在面向对象编程中有一句口号：&quot;一切皆对象&quot;，Python既然是一种面向对象的编程语言，画图也自然可以使用面向对象的方式。MATLAB风格的画图接口直观易用，但是遇到一些精细操作时，就会比较麻烦。面向对象的画图接口可以适应更复杂的场景，更精细的控制需要展示的图形。&lt;/p&gt;
&lt;p&gt;在面向对象接口中，画图函数不再受到当前&quot;活动&quot;图形或坐标轴的限制，而变成了显式的&lt;span&gt;Figure&lt;/span&gt;和&lt;span&gt;Axes&lt;/span&gt;的方法。在画图的过程中，实际操作的是这两个类的实例：figure和axes.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;figure&lt;/span&gt;（&lt;span&gt;plt.Figure&lt;/span&gt;类的一个实例）可以被看成是一个能够容纳各种坐标轴、图形、文字和标签的容器。&lt;span&gt;axes&lt;/span&gt;（&lt;span&gt;plt.Axes&lt;/span&gt;类的一个实例）是一个带有刻度和标签的矩形，最终会包含所有可视化的图形元素。通常使用变量&lt;span&gt;fig&lt;/span&gt;表示一个图形实例，用变量&lt;span&gt;ax&lt;/span&gt;表示一个坐标轴实例或一组坐标轴实例。&lt;/p&gt;
&lt;p&gt;下面是一个使用面向对象的API画图的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; %&lt;span&gt;matplotlib inline
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; example data&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; x = np.arange(0.1, 4, 0.5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; y = np.exp(-&lt;span&gt;x)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置error bar的(单侧)长度&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; error = 0.1 + 0.2 *&lt;span&gt; x
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用subplots返回fig和ax实例&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True, figsize=(8, 6))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 两个子图，返回两个Axes实例&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第一个子图，对称的error bar&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; ax0.errorbar(x, y, yerr=error, fmt=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; ax0.set_title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;variable, symmetric error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 分别设置error bar两侧的长度&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; lower_error = 0.4 *&lt;span&gt; error
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; upper_error =&lt;span&gt; error
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; asymmetric_error =&lt;span&gt; [lower_error, upper_error]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第二个子图，不对称的error&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; ax1.errorbar(x, y, xerr=asymmetric_error, fmt=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; ax1.set_title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;variable, asymmetric error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; ax1.set_yscale(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;fig.tight_layout()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; fig.savefig(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;demo2.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, dpi=200)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存图片&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1035701/201809/1035701-20180928203444912-22905744.png&quot; alt=&quot;&quot; width=&quot;842&quot; height=&quot;632&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图2：error bar的可视化 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如上面的例子显示的那样，可以使用函数&lt;span&gt;plt.subplots()&lt;/span&gt;返回&lt;span&gt;fig&lt;/span&gt;和&lt;span&gt;ax&lt;/span&gt;实例，也可以直接使用&lt;span&gt;plt.Figure&lt;/span&gt;和&lt;span&gt;plt.Axes&lt;/span&gt;这两个类来返回各自的实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; plt.style.use(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-whitegrid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; %&lt;span&gt;matplotlib inline
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; fig = plt.figure(figsize=(8, 6&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; ax =&lt;span&gt; plt.axes()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; x = np.linspace(0, 10, 100&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;ax.plot(x, np.sin(x))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; ax.set_xlabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, size=14&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; ax.set_ylabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sin x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, size=14&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; ax.set_title(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sin plot&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, size=16&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;fig.tight_layout()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; fig.savefig(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;demo3.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, dpi=200)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1035701/201809/1035701-20180928205225435-1634113408.png&quot; alt=&quot;&quot; width=&quot;706&quot; height=&quot;530&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图3：sin函数图像&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;当我们获取&lt;span&gt;fig&lt;/span&gt;和&lt;span&gt;ax&lt;/span&gt;实例后，就可以直接操作这两个实例来完成想要可视化效果。操作这两个实例的方法众多，可参考下面的官方文档：&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3. 统计作图以及图片的风格&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;除了matplotlib之外，&lt;a href=&quot;https://seaborn.pydata.org/index.html&quot; target=&quot;_blank&quot;&gt;seaborn&lt;/a&gt;是专门为统计制图开发的可视化工具。除了直接用于数据的可视化之外，还能够完成一些常见的统计功能来辅助画图，例如误差线的估计，密度估计，箱形图分位数的计算等。此外，与matplotlib相比，seborn画图的风格更美观。因此该可视化工具在数据分析中也用的比较多。&lt;/p&gt;
&lt;p&gt;按照文档中对&lt;a href=&quot;https://seaborn.pydata.org/api.html&quot; target=&quot;_blank&quot;&gt;API的介绍&lt;/a&gt;，seaborn主要将统计制图分为下面几类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;关系图&lt;/li&gt;
&lt;li&gt;分类图&lt;/li&gt;
&lt;li&gt;分布图&lt;/li&gt;
&lt;li&gt;回归图&lt;/li&gt;
&lt;li&gt;矩阵图：heatmap或聚类图&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;使用seaborn画图的例子可以参考：&lt;a href=&quot;http://www.cnblogs.com/Belter/p/Example%20gallery&quot; target=&quot;_blank&quot;&gt;Example gallery&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面例子中涉及到两次对画图风格的设置，风格主要包括对图的配色，背景色、坐标轴、字体、透明度等的设置。在matplotlib中主要有以下风格可选：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre readability=&quot;29&quot;&gt;
&lt;span&gt;&amp;gt; print&lt;/span&gt;&lt;span&gt;(plt.style.available)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;---output---#&lt;/span&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dark_background&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-notebook&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-darkgrid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_classic_test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ggplot&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-bright&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;classic&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;p&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Solarize_Light2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fast&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;fivethirtyeight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-dark-palette&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tableau-colorblind10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-muted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;/p&gt;&lt;p&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-whitegrid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-ticks&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-dark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-white&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;grayscale&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-deep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-poster&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;/p&gt;&lt;p&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-talk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-colorblind&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;bmh&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-pastel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;seaborn-paper&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考上面的Customizing matplotlib链接，各种不同样式的比较可以参考：&lt;a href=&quot;https://tonysyu.github.io/raw_content/matplotlib-style-gallery/gallery.html&quot; target=&quot;_blank&quot;&gt;Matplotlib Style Gallery&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;4. 常见的作图类型及功能&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;matplotlib可以画大部分常见的图，例如柱状图、折线图、饼图、直方图等。&lt;/p&gt;
&lt;p&gt;更多详情可以参考：&lt;a href=&quot;https://matplotlib.org/api/axes_api.html#plotting&quot; target=&quot;_blank&quot;&gt;Plotting-basic&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;https://tonysyu.github.io/raw_content/matplotlib-style-gallery/gallery.html&lt;/p&gt;
&lt;p&gt;https://jakevdp.github.io/PythonDataScienceHandbook/&lt;/p&gt;
&lt;p&gt;https://seaborn.pydata.org/index.html&lt;/p&gt;
&lt;p&gt;https://matplotlib.org/index.html&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/8248467/matplotlib-tight-layout-doesnt-take-into-account-figure-suptitle&lt;/p&gt;

</description>
<pubDate>Sun, 30 Sep 2018 14:50:00 +0000</pubDate>
<dc:creator>昕-2008</dc:creator>
<og:description>注：很早之前就打算专门写一篇与Python数据可视化相关的博客，对一些基本概念和常用技巧做一个小结。今天终于有时间来完成这个计划了！ 0. Python中常用的可视化工具 Python在数据科学中的地</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Belter/p/9650433.html</dc:identifier>
</item>
<item>
<title>【Unity Shader】（五） ------ 透明效果之半透明效果的实现及原理 - 爱喝柠檬的二哈</title>
<link>http://www.cnblogs.com/BFXYMY/p/9717734.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BFXYMY/p/9717734.html</guid>
<description>&lt;p&gt;笔者使用的是 Unity 2018.2.0f2 + VS2017，建议读者使用与 Unity 2018 相近的版本，避免一些因为版本不一致而出现的问题&lt;/p&gt;

&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;相信读者对透明效果都不陌生，因为透明效果是游戏中经常使用的一种效果。要实现透明效果，通常会在渲染模型时控制它的&lt;strong&gt;透明通道&lt;/strong&gt;。而其透明度则控制是其是否会显示，0 表示完全不显示，1 表示完全显示。&lt;/p&gt;
&lt;p&gt;Unity 中通常使用两种方法来实现透明效果：&lt;strong&gt;透明度测试（Alpha Test）&lt;/strong&gt;和 &lt;strong&gt;透明度混合（Alpha Blending）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;透明度测试。透明度测试是一种十分 “简单粗暴” 的机制，当有一个片元的透明度不符合条件时，就直接舍弃，不再任何处理（不会对颜色缓冲有影响）；如果符合，就进行正常的处理（深度测试，深度写入等）；所以这带来的效果也是两极分化的，要么完全透明，要么完全不透明。&lt;/li&gt;
&lt;li&gt;透明度混合。透明度混合可以得到真正的半透明效果。它会使用当前片元的透明度作为混合因子，与颜色缓冲中的值进行混合，得到新的颜色。&lt;strong&gt;需要注意的是，此方法需要关闭深度写入，而因此带来的问题就是要 十分十分十分 地注意渲染顺序。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了方便读者理解，先解释一下深度缓冲，深度测试和深度写入&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;深度缓冲。用于解决可见性问题的强大存在。决定了哪个物体的哪些部分会被渲染，哪些部分会被遮挡&lt;/li&gt;
&lt;li&gt;深度测试。开启后，当渲染一个片元时，根据它的深度值判断该片元距离摄像机的距离，然后将它的深度值和深度缓冲中的值进行比较&lt;/li&gt;
&lt;li&gt;深度写入。开启后，当一个片元进行了深度测试后，如果它的值距离更远，则说明有物体挡在了它前面，那么它就不会被渲染，如果更近，那么这个片元就应该覆盖掉颜色缓冲中的值，并把它的深度值更新到深度缓冲中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能会有读者会问：为什么透明度混合需要关闭深度写入呢？我们可以同过一张图来解释&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/01.png&quot; alt=&quot;&quot; width=&quot;604&quot; height=&quot;465&quot;/&gt;&lt;/p&gt;
&lt;p&gt;平面 1 和 平面 2 都是在摄像机视线上，平面 1 是透明的而平面 2 是不透明的且平面 1 挡住了平面 2。理论上我们应该可以透过平面 1 来看到平面 2。事实上，如果没有关闭深度写入，平面 1 和 平面 2在渲染时进行深度测试，测试结果为平面 2更远，所以平面 2不会被渲染到屏幕上，即我们看不到平面 2。这很显然是不符合我们所要的。&lt;/p&gt;

&lt;h2&gt;一. 渲染顺序&lt;/h2&gt;

&lt;h3&gt;1.1 渲染顺序的重要性&lt;/h3&gt;
&lt;p&gt;前文说过，关闭了深度写入后，渲染顺序就变得十分重要，为什么这么说呢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/02.png&quot; alt=&quot;&quot; width=&quot;678&quot; height=&quot;272&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如图，A 和 B渲染顺序不一样。有两种情况&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;先渲染 B 再 渲染 A。此时深度缓冲中没有数据，B 直接写入它的颜色缓冲和深度缓冲；然后渲染 A，A进行深度测试，结果为 A 更近，所以此时会用 A 的透明度与颜色缓冲中值进行混合，得到正确的半透明效果。&lt;/li&gt;
&lt;li&gt;先渲染 A 再 渲染 B。此时深度缓冲中并没有数据，&lt;strong&gt;A 会写入颜色缓冲，但不会写入深度缓冲（因为关闭了深度写入）&lt;/strong&gt;；然后渲染 B ，&lt;strong&gt;B 进行深度测试，而此时深度缓冲中并没有数据，所以  B 会直接写进颜色缓冲和深度缓冲，就会覆盖掉颜色缓冲中 A 的颜色&lt;/strong&gt;，所以最终渲染出来，从视觉上是 B 在 A 的前面&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;1.2 渲染队列&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Unity 中提供了 &lt;strong&gt;渲染队列，&lt;/strong&gt;并用整数索引表示渲染队列，&lt;strong&gt;索引越小，越早渲染&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/03.png&quot; alt=&quot;&quot; width=&quot;363&quot; height=&quot;137&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;也可以使用 SubShader 中的 Queue 标签来决定该模型属于哪个渲染队列&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;名称&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;队列索引号&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;描述&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;Background&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;1000&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;这个队列会在任何队列 之前被渲染，通常用来渲染绘制在背景的物体&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;Geometry&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;2000&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;默认的队列，非透明物体使用此队列&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;Alpha Test&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;2450&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;进行透明度测试的物体使用的队列&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;Overlay&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;3000&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;按后往前顺序渲染，使用透明度混合的物体应该使用此队列&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;span&gt;4000&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;在最后渲染的物体使用此队列&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;二. 透明度测试&lt;/h2&gt;
&lt;p&gt;新建一个工程，去掉天空盒；新建一个Material 和 shader ，命名为 Alpha Test；新建一个 cube&lt;/p&gt;

&lt;p&gt;需要提前了解的是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; ZWrite Off 用于关闭深度写入，可以写在 Pass里面，也可以写在 SubShader 里，如果是后者，那么就会对所有的 Pass 产生效果，即所有的 Pass 都会关闭深度写入。&lt;/li&gt;
&lt;li&gt;我们在后面的代码将会使用 clip 函数进行透明度测试。参数为裁剪时使用的标量或矢量，如果参数的任一分量为负数，就舍弃当前像素的输出颜色。我们同样可以在MSDN上找到它的定义&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://github.com/BFXYMY/ShaderPictureForBlog/blob/master/%E9%80%8F%E6%98%8E/04.png?raw=true&quot; alt=&quot;&quot; width=&quot;848&quot; height=&quot;647&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/05.png&quot; alt=&quot;&quot; width=&quot;840&quot; height=&quot;156&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I. 创建一个场景，去掉天空盒；新建一个 Material 和 shader ，命名为 Alpha Test；创建一个 Cube；准备一张不同区域透明度不同的透明纹理（读者可以在本文最下方下载）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;II. 定义 Propreties 语义块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/06.png&quot; alt=&quot;&quot; width=&quot;423&quot; height=&quot;107&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Properites 语义块并没有什么特别的属性，_Cutoff 属性用来控制透明度，范围为【0,1】，因为纹理像素的透明度范围就在此范围。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;III.  指定渲染队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/07.png&quot; alt=&quot;&quot; width=&quot;814&quot; height=&quot;28&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 SubShader 中定义一个 Tags，IgnoreProjector 决定 shader 是否会受投影器的影响，RenderType 可以让 shader 归入提前定义的组（这里是 TransparentCutout）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IV. 定义与 Properties 中相匹配的变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/08.png&quot; alt=&quot;&quot; width=&quot;213&quot; height=&quot;102&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;V. 定义输入输出结构体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/09.png&quot; alt=&quot;&quot; width=&quot;335&quot; height=&quot;305&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VI. 定义顶点着色器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/10.png&quot; alt=&quot;&quot; width=&quot;524&quot; height=&quot;271&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; TRANSFORM_TEX 函数我们在之前已经解释过了，如果读者对此不太了解，可以翻看我的上一篇文章&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VII. 定义片元着色器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/11.png&quot; alt=&quot;&quot; width=&quot;798&quot; height=&quot;321&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;这些代码相信读者都不陌生，这里 clip 函数对不符合条件的片元舍弃了，即不渲染了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VIII. 最后设置 FallBack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/12.png&quot; alt=&quot;&quot; width=&quot;381&quot; height=&quot;44&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;完整代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; Shader &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unity/01-AlphaTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    Properties {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         _Color (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main Tint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Color) = (&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         _MainTex (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main Tex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 2D) = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         _Cutoff(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alpha Cutoff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Range(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;)) = &lt;span&gt;0.5&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    SubShader {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Tags{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Queue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AlphaTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IgnoreProjector&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RenderType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TransparentCutout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        Cull Off
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        Pass
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             Tags{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LightMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ForwardBase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            CGPROGRAM
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; vertex vert
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; fragment frag
&lt;span&gt;17&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lighting.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UnityCG.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            fixed4 _Color;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            sampler2D _MainTex;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            float4 _MainTex_ST;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;fixed&lt;/span&gt;&lt;span&gt; _Cutoff;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; a2v
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                float4 vertex : POSITION;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                float3 normal : NORMAL;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; v2f
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                float4 pos : SV_POSITION;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                float3 worldNormal : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                float3 worldPos : TEXCOORD1;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                float2 uv : TEXCOORD2;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            v2f vert(a2v v)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                v2f o;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 o.pos =&lt;span&gt; UnityObjectToClipPos(v.vertex);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                 o.worldNormal =&lt;span&gt; UnityObjectToWorldNormal(v.normal);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                 o.worldPos =&lt;span&gt; mul(unity_ObjectToWorld,v.vertex).xyz;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;                 o.uv =&lt;span&gt; TRANSFORM_TEX(v.texcoord,_MainTex);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; o;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            fixed4 frag(v2f i) : SV_TARGET0
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 fixed3 worldNormal =&lt;span&gt; normalize(i.worldNormal);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 fixed3 worldLightDir =&lt;span&gt; normalize(UnityWorldSpaceLightDir(i.worldPos));
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;                 fixed4 texcolor =&lt;span&gt; tex2D(_MainTex,i.uv);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;                 clip(texcolor.a -&lt;span&gt; _Cutoff);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt;                 fixed3 albedo = texcolor.rgb *&lt;span&gt; _Color.rgb;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz *&lt;span&gt; albedo;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                 fixed3 diffues = _LightColor0.rgb * albedo * max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,dot(worldNormal,worldLightDir));
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; fixed4(ambient + diffues,&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;            ENDCG
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;         FallBack &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Transparent/Cutout/VertexLit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;IX. 保存，回到Unity，查看效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同 Cutoff 的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/13.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到通过透明度测试实现的效果在边界处并不理想，有锯齿，而为了解决这个问题，我们就应该使用透明度混合，来得到更柔和的效果。&lt;/p&gt;


&lt;h2&gt;三. 透明度混合&lt;/h2&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;3.1 透明度混合的实现&lt;/h3&gt;
&lt;p&gt;回想一下，我们前面所说的透明度混合的原理：&lt;strong&gt;把自身的颜色和颜色缓冲中的颜色进行混合，得到新的颜色&lt;/strong&gt;。既然要混合，那就需要混合命令 &lt;strong&gt;Blend&lt;/strong&gt;。混合语义有许多，我们稍后会具体地介绍，在这里，我们使用 &lt;strong&gt;Blend SrcFactor DstFactor&lt;/strong&gt; 这条语义，其中 Blend 是操作，SrcFactor，DstFactor 是因子；我们把 SrcFactor 设为 SrcAlpha，DstFactor 设为 OneMinusSrcAlpha。即我们即将使用的混合语义代码为 &lt;strong&gt;Blend SrcAlpha OneMinusSrcAlpha，&lt;/strong&gt;这相当于，混合后颜色为：&lt;/p&gt;
&lt;p&gt;               &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cdpi%7B150%7D%20%7B%5Ccolor%7BBlue%7D%20%5C%20DstColor_%7Bnew%7D%20%3D%20%5C%20SrcAlpha%20%5Ctimes%20%5C%20SrcColor%20&amp;amp;plus;%20%281%20-%20SrcAlpha%29%20%5Ctimes%20DstColor_%7Bold%7D%7D&quot; alt=&quot;{\color{Blue} \ DstColor_{new} = \ SrcAlpha \times \ SrcColor + (1 - SrcAlpha) \times DstColor_{old}}&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不明白这条公式的读者不用着急，我们稍后会具体解释，这里先知道我们即将使用这条式子便可。&lt;/p&gt;
&lt;p&gt; 代码和透明度测试类似，所以这里只列出需要注意的修改的地方。&lt;/p&gt;



&lt;p&gt;I. 新建一个 Material 和 shader ，命名为 Alpha Blend；创建一个 Cube；使用同一张透明纹理。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;II.修改 Properties 语义块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/14.png&quot; alt=&quot;&quot; width=&quot;461&quot; height=&quot;111&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中 _AlphaScale 用来控制整体的透明度。当然也要在CG代码片中定义与其对应的变量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;III. 修改 Tags&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/15.png&quot; alt=&quot;&quot; width=&quot;775&quot; height=&quot;34&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;IV. 关闭深度写入和开启混合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/16.png&quot; alt=&quot;&quot; width=&quot;359&quot; height=&quot;113&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;V.修改片元着色器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/17.png&quot; alt=&quot;&quot; width=&quot;801&quot; height=&quot;275&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 我们用透明纹理的透明通道和 _AlphaScale 来控制整体透明度&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VI. 修改 FallBack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/18.png&quot; alt=&quot;&quot; width=&quot;316&quot; height=&quot;52&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;完整代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; Shader &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unity/02-AlphaBlend&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    Properties {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         _Color (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main Tint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Color) = (&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         _MainTex (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main Tex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 2D) = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         _AlphaScale(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alpha Scale&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Range(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;)) = &lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    SubShader {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Tags{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Queue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IgnoreProjector&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RenderType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        Pass
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             Tags{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LightMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ForwardBase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            ZWrite Off
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            Blend SrcAlpha OneMinusSrcAlpha
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            CGPROGRAM
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; vertex vert
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; fragment frag
&lt;span&gt;20&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lighting.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UnityCG.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            fixed4 _Color;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            sampler2D _MainTex;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            float4 _MainTex_ST;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;fixed&lt;/span&gt;&lt;span&gt; _AlphaScale;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; a2v
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                float4 vertex : POSITION;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                float3 normal : NORMAL;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; v2f
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                float4 pos : SV_POSITION;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                float3 worldNormal : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                float3 worldPos : TEXCOORD1;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                float2 uv : TEXCOORD2;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            v2f vert(a2v v)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                v2f o;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 o.pos =&lt;span&gt; UnityObjectToClipPos(v.vertex);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                 o.worldNormal =&lt;span&gt; UnityObjectToWorldNormal(v.normal);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 o.worldPos =&lt;span&gt; mul(unity_ObjectToWorld,v.vertex).xyz;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;                 o.uv =&lt;span&gt; TRANSFORM_TEX(v.texcoord,_MainTex);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; o;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            fixed4 frag(v2f i) : SV_TARGET0
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                 fixed3 worldNormal =&lt;span&gt; normalize(i.worldNormal);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                 fixed3 worldLightDir =&lt;span&gt; normalize(UnityWorldSpaceLightDir(i.worldPos));
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;                 fixed4 texcolor =&lt;span&gt; tex2D(_MainTex,i.uv);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;                 fixed3 albedo = texcolor.rgb *&lt;span&gt; _Color.rgb;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                 fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz *&lt;span&gt; albedo;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 fixed3 diffues = _LightColor0.rgb * albedo * max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,dot(worldNormal,worldLightDir));
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; fixed4(ambient + diffues,texcolor.a *&lt;span&gt; _AlphaScale);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;            ENDCG
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         FallBack &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Transparent/VertexLit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; &lt;strong&gt;VII. 保存，回到Unity，查看效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 不同  _AlphaScale 的效果：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/19.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 对比透明度测试，我们可以看到透明度混合更加柔和平滑。&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt; 3.2 混合命令&lt;/strong&gt;&lt;/h3&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;1&quot; cellpadding=&quot;1&quot;&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;Blend SrcFactor DstFactor&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;strong&gt;开启混合，设置因子。源颜色 x ScrFacor  + 目标颜色 x DstFactor，结构存入颜色缓冲&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;Blend SrcFactor DstFactor，SrcFactorA DstFactorA&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;strong&gt;和上面类似，只是混合透明通道的因子不同&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; 混合有两个操作数：&lt;strong&gt;源颜色（source color）&lt;/strong&gt;和 &lt;strong&gt;目标颜色（destination color）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;源颜色。指片元着色器产生的颜色值，用 S 表示。&lt;/li&gt;
&lt;li&gt;目标颜色。指颜色缓冲中的值，用 D 表示。&lt;/li&gt;
&lt;li&gt;两者混合后，得到的新颜色用 O 表示。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;而上面三者都包含了 &lt;strong&gt;RGBA&lt;/strong&gt; 通道。&lt;/p&gt;
&lt;p&gt;除了 &lt;strong&gt;Blend Off&lt;/strong&gt; 以外&lt;strong&gt;，&lt;/strong&gt;使用Blend 命令，Unity 会为我们开启混合，因为只有开启了混合，混合命令才起效。&lt;/p&gt;
&lt;p&gt;混合命令由 &lt;strong&gt;操作&lt;/strong&gt; 和 &lt;strong&gt;因子&lt;/strong&gt; 组成，操作默认是使用 &lt;strong&gt;加操作，&lt;/strong&gt;而为了混合RGB 通道 和 A通道，所以我们需要 4 个因子&lt;/p&gt;
&lt;p&gt;以混合命令 Blend SrcFactor DstFactor 为例，&lt;strong&gt;默认为加操作，SrcFactor 为源颜色， DstFactor 为目标颜色&lt;/strong&gt;，然后计算&lt;/p&gt;
&lt;p&gt;                              &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cdpi%7B150%7D%20%7B%5Ccolor%7BBlue%7D%20%5C%20O_%7Brgb%7D%20%3D%20SrcFactor%20%5Ctimes%20S_%7Brgb%7D%20&amp;amp;plus;%20DstFactor%20%5Ctimes%20D_%7Brgb%7D%7D&quot; alt=&quot;{\color{Blue} \ O_{rgb} = SrcFactor \times S_{rgb} + DstFactor \times D_{rgb}}&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                              &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cdpi%7B150%7D%20%7B%5Ccolor%7BBlue%7D%20%5C%20O_%7Ba%7D%20%3D%20SrcFactor%20%5Ctimes%20S_%7Ba%7D%20&amp;amp;plus;%20DstFactor%20%5Ctimes%20D_%7Ba%7D%7D&quot; alt=&quot;{\color{Blue} \ O_{a} = SrcFactor \times S_{a} + DstFactor \times D_{a}}&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 下面是 ShaderLab 支持的一些混合因子：&lt;/p&gt;
&lt;p&gt; 混合有两个操作数：&lt;strong&gt;源颜色（source color）&lt;/strong&gt;和 &lt;strong&gt;目标颜色（destination color）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;源颜色。指片元着色器产生的颜色值，用 S 表示。&lt;/li&gt;
&lt;li&gt;目标颜色。指颜色缓冲中的值，用 D 表示。&lt;/li&gt;
&lt;li&gt;两者混合后，得到的新颜色用 O 表示。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;而上面三者都包含了 &lt;strong&gt;RGBA&lt;/strong&gt; 通道。&lt;/p&gt;
&lt;p&gt;除了 &lt;strong&gt;Blend Off&lt;/strong&gt; 以外&lt;strong&gt;，&lt;/strong&gt;使用Blend 命令，Unity 会为我们开启混合，因为只有开启了混合，混合命令才起效。&lt;/p&gt;
&lt;p&gt;混合命令由 &lt;strong&gt;操作&lt;/strong&gt; 和 &lt;strong&gt;因子&lt;/strong&gt; 组成，操作默认是使用 &lt;strong&gt;加操作，&lt;/strong&gt;而为了混合RGB 通道 和 A通道，所以我们需要 4 个因子&lt;/p&gt;
&lt;p&gt;以混合命令 Blend SrcFactor DstFactor 为例，&lt;strong&gt;默认为加操作，SrcFactor 为源颜色， DstFactor 为目标颜色&lt;/strong&gt;，然后计算&lt;/p&gt;
&lt;p&gt;                              &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cdpi%7B150%7D%20%7B%5Ccolor%7BBlue%7D%20%5C%20O_%7Brgb%7D%20%3D%20SrcFactor%20%5Ctimes%20S_%7Brgb%7D%20&amp;amp;plus;%20DstFactor%20%5Ctimes%20D_%7Brgb%7D%7D&quot; alt=&quot;{\color{Blue} \ O_{rgb} = SrcFactor \times S_{rgb} + DstFactor \times D_{rgb}}&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                              &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cdpi%7B150%7D%20%7B%5Ccolor%7BBlue%7D%20%5C%20O_%7Ba%7D%20%3D%20SrcFactor%20%5Ctimes%20S_%7Ba%7D%20&amp;amp;plus;%20DstFactor%20%5Ctimes%20D_%7Ba%7D%7D&quot; alt=&quot;{\color{Blue} \ O_{a} = SrcFactor \times S_{a} + DstFactor \times D_{a}}&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 下面是 ShaderLab 支持的一些混合因子：&lt;/p&gt;

&lt;p&gt; 混合有两个操作数：&lt;strong&gt;源颜色（source color）&lt;/strong&gt;和 &lt;strong&gt;目标颜色（destination color）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;源颜色。指片元着色器产生的颜色值，用 S 表示。&lt;/li&gt;
&lt;li&gt;目标颜色。指颜色缓冲中的值，用 D 表示。&lt;/li&gt;
&lt;li&gt;两者混合后，得到的新颜色用 O 表示。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;而上面三者都包含了 &lt;strong&gt;RGBA&lt;/strong&gt; 通道。&lt;/p&gt;
&lt;p&gt;除了 &lt;strong&gt;Blend Off&lt;/strong&gt; 以外&lt;strong&gt;，&lt;/strong&gt;使用Blend 命令，Unity 会为我们开启混合，因为只有开启了混合，混合命令才起效。&lt;/p&gt;
&lt;p&gt;混合命令由 &lt;strong&gt;操作&lt;/strong&gt; 和 &lt;strong&gt;因子&lt;/strong&gt; 组成，操作默认是使用 &lt;strong&gt;加操作，&lt;/strong&gt;而为了混合RGB 通道 和 A通道，所以我们需要 4 个因子&lt;/p&gt;
&lt;p&gt;以混合命令 Blend SrcFactor DstFactor 为例，&lt;strong&gt;默认为加操作，SrcFactor 为源颜色， DstFactor 为目标颜色&lt;/strong&gt;，然后计算&lt;/p&gt;
&lt;p&gt;                              &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cdpi%7B150%7D%20%7B%5Ccolor%7BBlue%7D%20%5C%20O_%7Brgb%7D%20%3D%20SrcFactor%20%5Ctimes%20S_%7Brgb%7D%20&amp;amp;plus;%20DstFactor%20%5Ctimes%20D_%7Brgb%7D%7D&quot; alt=&quot;{\color{Blue} \ O_{rgb} = SrcFactor \times S_{rgb} + DstFactor \times D_{rgb}}&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                              &lt;img class=&quot;mathcode&quot; src=&quot;https://private.codecogs.com/gif.latex?%5Cdpi%7B150%7D%20%7B%5Ccolor%7BBlue%7D%20%5C%20O_%7Ba%7D%20%3D%20SrcFactor%20%5Ctimes%20S_%7Ba%7D%20&amp;amp;plus;%20DstFactor%20%5Ctimes%20D_%7Ba%7D%7D&quot; alt=&quot;{\color{Blue} \ O_{a} = SrcFactor \times S_{a} + DstFactor \times D_{a}}&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 下面是 ShaderLab 支持的一些混合因子：&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;1&quot; cellpadding=&quot;1&quot; data-cke-table-faked-selection-table=&quot;&quot;&gt;&lt;thead readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;th class=&quot;cke_table-faked-selection&quot; scope=&quot;col&quot;&gt;参数&lt;/th&gt;
&lt;th class=&quot;cke_table-faked-selection&quot; scope=&quot;col&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;One&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;因子为1&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;Zero&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;因子为0&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;SrcColor&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;源颜色值&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;SrcAlpha&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;源颜色的透明通道的值&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;DstColor&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;目标颜色值&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;DstAlpha&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;目标颜色的透明通道的值&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;OneMinusSrcColor&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;1-源颜色值&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;OneMinusSrcAlpha&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;1-源颜色的透明通道的值&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;OneMinusDstColor&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;1-目标颜色值&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;OneMinusDstAlpha&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;cke_table-faked-selection&quot;&gt;&lt;span&gt;1-目标颜色的透明通道的值&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;
&lt;p&gt;读者可以自行选择因子来试试效果&lt;/p&gt;


&lt;h2&gt;四. 双面渲染&lt;/h2&gt;
&lt;p&gt;一般来说，如果一个物体是透明的，要么我们应该可以看到它的内部和它的任一个面，但前面我们实现的透明中并没有实现这个效果，因为 Unity 在默认引擎下剔除了物体背面（&lt;strong&gt;是相对于摄像机方向的背面，而不是世界坐标中前后左右的背面&lt;/strong&gt;），不渲染。而剔除的指令为&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cull Back | Front | Off&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了实现双面渲染，我们可以这样实现：设置两个 &lt;strong&gt;Pass ，&lt;/strong&gt;一个只渲染前面，一个只渲染背面。不过需要注意的是，由于开启了深度测试，所以要注意渲染顺序，&lt;strong&gt;要先渲染背面，再渲染正面，&lt;/strong&gt;这样就能确保背面会被渲染出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/20.png&quot; alt=&quot;&quot; width=&quot;823&quot; height=&quot;350&quot;/&gt; &lt;/p&gt;
&lt;p&gt;两个 Pass 中，除了 Cull 指令不一样外，其余代码都是和透明度混合中的代码一样，所以，这里直接给出完整代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; Shader &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unity/04-AlphaBlendBothSide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    Properties {
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;         _Color (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main Tint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Color) = (&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;         _MainTex (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main Tex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 2D) = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         _AlphaScale(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alpha Scale&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Range(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;)) = &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;    SubShader {
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         Tags{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Queue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AlphaTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IgnoreProjector&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RenderType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;        Pass
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;             Tags{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LightMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ForwardBase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;            Cull Front
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;            ZWrite Off
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;            Blend SrcAlpha OneMinusSrcAlpha
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;            CGPROGRAM
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; vertex vert
&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; fragment frag
&lt;span&gt; 25&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lighting.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UnityCG.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;            fixed4 _Color;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;            sampler2D _MainTex;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;            float4 _MainTex_ST;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;fixed&lt;/span&gt;&lt;span&gt; _AlphaScale;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; a2v
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;                float4 vertex : POSITION;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;                float3 normal : NORMAL;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;                float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; v2f
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;                float4 pos : SV_POSITION;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;                float3 worldNormal : TEXCOORD0;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;                float3 worldPos : TEXCOORD1;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;                float2 uv : TEXCOORD2;
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;            v2f vert(a2v v)
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;                v2f o;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 o.pos =&lt;span&gt; UnityObjectToClipPos(v.vertex);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                 o.worldNormal =&lt;span&gt; UnityObjectToWorldNormal(v.normal);
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                 o.worldPos =&lt;span&gt; mul(unity_ObjectToWorld,v.vertex).xyz;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; 
&lt;span&gt; 55&lt;/span&gt;                 o.uv =&lt;span&gt; TRANSFORM_TEX(v.texcoord,_MainTex);
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; o;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;            fixed4 frag(v2f i) : SV_TARGET0
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                 fixed3 worldNormal =&lt;span&gt; normalize(i.worldNormal);
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                 fixed3 worldLightDir =&lt;span&gt; normalize(UnityWorldSpaceLightDir(i.worldPos));
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt;                 fixed4 texcolor =&lt;span&gt; tex2D(_MainTex,i.uv);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;                 fixed3 albedo = texcolor.rgb *&lt;span&gt; _Color.rgb;
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                 fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz *&lt;span&gt; albedo;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                 fixed3 diffues = _LightColor0.rgb * albedo * max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,dot(worldNormal,worldLightDir));
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; 
&lt;span&gt; 72&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; fixed4(ambient + diffues,texcolor.a *&lt;span&gt; _AlphaScale);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt; 
&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt; 
&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;            ENDCG
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;        Pass
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             Tags{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LightMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ForwardBase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;            Cull Back
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;            ZWrite Off
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;            Blend SrcAlpha OneMinusSrcAlpha
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;            CGPROGRAM
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; vertex vert
&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; fragment frag
&lt;span&gt; 96&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lighting.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UnityCG.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;            fixed4 _Color;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;            sampler2D _MainTex;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;            float4 _MainTex_ST;
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;             &lt;span&gt;fixed&lt;/span&gt;&lt;span&gt; _AlphaScale;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; a2v
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;                float4 vertex : POSITION;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;                float3 normal : NORMAL;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;                float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; 
&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; v2f
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;                float4 pos : SV_POSITION;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;                float3 worldNormal : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;                float3 worldPos : TEXCOORD1;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;                float2 uv : TEXCOORD2;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;            v2f vert(a2v v)
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;                v2f o;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                 o.pos =&lt;span&gt; UnityObjectToClipPos(v.vertex);
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                 o.worldNormal =&lt;span&gt; UnityObjectToWorldNormal(v.normal);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                 o.worldPos =&lt;span&gt; mul(unity_ObjectToWorld,v.vertex).xyz;
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt;                 o.uv =&lt;span&gt; TRANSFORM_TEX(v.texcoord,_MainTex);
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; o;
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;            fixed4 frag(v2f i) : SV_TARGET0
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                 fixed3 worldNormal =&lt;span&gt; normalize(i.worldNormal);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;                 fixed3 worldLightDir =&lt;span&gt; normalize(UnityWorldSpaceLightDir(i.worldPos));
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt;                 fixed4 texcolor =&lt;span&gt; tex2D(_MainTex,i.uv);
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; 
&lt;span&gt;139&lt;/span&gt;                 fixed3 albedo = texcolor.rgb *&lt;span&gt; _Color.rgb;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                 fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz *&lt;span&gt; albedo;
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                 fixed3 diffues = _LightColor0.rgb * albedo * max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,dot(worldNormal,worldLightDir));
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; fixed4(ambient + diffues,texcolor.a *&lt;span&gt; _AlphaScale);
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt; &lt;span&gt;            ENDCG
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; 
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;         FallBack &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Transparent/VertexLit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt; 
&lt;span&gt;152&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 现在来查看下效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/21.gif&quot; alt=&quot;&quot; width=&quot;326&quot; height=&quot;280&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 现在我们可以清楚地看到物体的内部了。&lt;/p&gt;


&lt;h2&gt;五. 总结&lt;/h2&gt;
&lt;p&gt;透明效果是十分常见且有用的一种实现，我们可以利用它来实现很多有趣的效果。要实现透明，更多地是对渲染的一种理解。本文只是对Unity中渲染的一些基础解释，希望能对读者有所帮助。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BFXYMY/Shaders/blob/master/Alpha.zip&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;本文所用透明纹理及shader&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E9%80%8F%E6%98%8E/22.png&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;299&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 30 Sep 2018 13:35:00 +0000</pubDate>
<dc:creator>爱喝柠檬的二哈</dc:creator>
<og:description>笔者使用的是 Unity 2018.2.0f2 + VS2017，建议读者使用与 Unity 2018 相近的版本，避免一些因为版本不一致而出现的问题 前言 相信读者对透明效果都不陌生，因为透明效果是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/BFXYMY/p/9717734.html</dc:identifier>
</item>
<item>
<title>基础排序算法详解与优化 - GodBMW</title>
<link>http://www.cnblogs.com/geyouneihan/p/9733206.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/geyouneihan/p/9733206.html</guid>
<description>&lt;p&gt;&lt;strong&gt;文章图片存储在&lt;code&gt;GitHub&lt;/code&gt;，网速不佳的朋友，请看&lt;a href=&quot;https://godbmw.com/passage/56&quot;&gt;《基础排序算法详解与优化》&lt;/a&gt; 或者 来我的技术小站 &lt;a href=&quot;https://godbmw.com/&quot;&gt;godbmw.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;谈谈基础排序&quot;&gt;1. 谈谈基础排序&lt;/h2&gt;
&lt;p&gt;常见的基础排序有选择排序、冒泡排序和插入排序。众所周知，他们的时间复杂度是 O(n*n)。&lt;/p&gt;
&lt;p&gt;但是，现在要重新认识一下基础排序算法，尤其是“插入排序”：在近乎有序的情况下，插入排序的时间复杂度可以降低到 O(n)的程度。&lt;/p&gt;
&lt;p&gt;因此，在处理系统日志的任务中，因为日志记录是按照时间排序，但偶尔会有几条是乱序，此时使用插入排序再好不过。而对于高级排序算法，一个常见的优化就是利用插入排序做局部数据排序优化。&lt;/p&gt;
&lt;h2 id=&quot;算法实现&quot;&gt;2. 算法实现&lt;/h2&gt;
&lt;p&gt;排序算法被封装在了&lt;code&gt;SortBase.h&lt;/code&gt;中的&lt;code&gt;SortBase&lt;/code&gt;命名空间中，以实现模板化和防止命名冲突。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dongyuanxin/markdown-static/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%B8%8E%E4%BC%98%E5%8C%96/1.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;选择排序&quot;&gt;2.1 选择排序&lt;/h3&gt;
&lt;p&gt;假设从小到大排序，那么，刚开始指针指向第一个数据，选择从当前指针所指向数据到最后一个数据间最小的数据，将它放在指针位置。&lt;/p&gt;
&lt;p&gt;指针后移一位，重复上述步骤，直到指针移动到最后一个数据。&lt;/p&gt;
&lt;p&gt;这种重复保证了每次，指针前面的数据都是从小到大排好顺序的数据。所以，从头到尾扫描一遍，自然排好序了。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;template &amp;lt;typename T&amp;gt;
void selectionSort(T arr[], int n) {
  int minIndex = -1;
  for(int i = 0; i &amp;lt; n; i++) {
    minIndex = i;
    for(int j = i+1; j &amp;lt; n; ++j) {
      if(arr[j] &amp;lt; arr[minIndex]) {
        minIndex = j;
      }
    }
    swap(arr[i], arr[minIndex]);
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;冒泡排序&quot;&gt;2.2 冒泡排序&lt;/h3&gt;
&lt;p&gt;假设排序是从小到大排序。&lt;/p&gt;
&lt;p&gt;我一直感觉冒泡排序是和选择排序反过来了（如果说错请指正）。因为选择排序是每次选择最小的数据，放到当前指针位置；而冒泡排序是把不停交换相邻数据，直到把最大的数据“冒泡”到应该到的位置。&lt;/p&gt;
&lt;p&gt;优化的地方是：记录每次交换的最后位置，在此之后的元素在下一轮扫描中均不考虑。因为交换的最后位置之后的元素已经是从小到大排序好了的。&lt;/p&gt;
&lt;p&gt;在实现过程中，因为需要不停交换相邻两个数据，因此，消耗了很多额外时间。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;template &amp;lt;typename T&amp;gt;
void bubbleSort(T arr[], int n) {
  int newn;
  do {
    newn = 0;
    for(int i = 1; i &amp;lt; n; i++) {
      if(arr[i-1] &amp;gt; arr[i]) {
        swap(arr[i-1], arr[i]);
        // 优化
        newn = i;
      }
    }
    n = newn; // 不再考虑 newn 后的数据
  } while (newn &amp;gt; 0);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;插入排序&quot;&gt;2.3 插入排序&lt;/h3&gt;
&lt;p&gt;插入排序容易和上面两个算法搞混。可以类比打扑克牌时候的对扑克牌进行排序：我们会先排序前 1 张、然后是前 2 张、前 3 张 ... 一直到前 n 张。算法实现显然是双重循环，如下所示：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;template &amp;lt;typename T&amp;gt;
void insertionSort(T arr[], int n) {
  for(int i = 1; i &amp;lt; n; i++) {
    for(int j = i ; j &amp;gt; 0; j--) {
      if(arr[j - 1] &amp;gt; arr[j]) {
        swap(arr[j], arr[j - 1]);
      } else {
        break; // 优化：已经保证之前都是正常排序，直接跳出即可
      }
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，插入排序也能在局部排好序的情况下跳出循环（代码中的优化），以减少算法消耗时间。&lt;/p&gt;
&lt;p&gt;然而上述算法其实跑分并比不上选择排序，因为&lt;code&gt;swap(arr[j], arr[j - 1]);&lt;/code&gt;这行代码交换了一次，相当于赋值 3 次，在大数据量情况下，比较消耗时间。&lt;/p&gt;
&lt;p&gt;优化: 内层循环，每次保存&lt;code&gt;arr[i]&lt;/code&gt;, 在检测到当前数据大于&lt;code&gt;arr[i]&lt;/code&gt;的时候，后移一位当前元素&lt;code&gt;arr[j] = arr[j-1];&lt;/code&gt;。当跳出内层循环时，直接将保存的&lt;code&gt;arr[i]&lt;/code&gt;赋值给&lt;code&gt;arr[j]&lt;/code&gt;即可。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;template &amp;lt;typename T&amp;gt;
void insertionSort(T arr[], int n) {
  for(int i = 1; i &amp;lt; n; i++) {
    T e = arr[i];
    int j = i ;
    for(; j &amp;gt; 0 &amp;amp;&amp;amp; arr[j-1] &amp;gt; e; j--) {
      arr[j] = arr[j-1];
    }
    arr[j] = e;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;性能测试&quot;&gt;3. 性能测试&lt;/h2&gt;
&lt;p&gt;首先利用 &lt;code&gt;SortTestHelper::generateRandomArray&lt;/code&gt;函数生成大量无序随机数据，然后进行排序和时间测定。代码如下：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &quot;SortHelper.h&quot;
#include &quot;SortBase.h&quot;
#include &quot;SortAdvance.h&quot;

using namespace std;

int main() {
  int n = 50000, left = 0, right = n;

  int *arr = SortTestHelper::generateRandomArray&amp;lt;int&amp;gt;(n, left, right);
  int *brr = SortTestHelper::copyArray&amp;lt;int&amp;gt;(arr, n);
  int *crr = SortTestHelper::copyArray&amp;lt;int&amp;gt;(arr, n);
  SortTestHelper::testSort&amp;lt;int&amp;gt;(arr, n, SortBase::selectionSort&amp;lt;int&amp;gt;, &quot;selection sort&quot;);
  SortTestHelper::testSort&amp;lt;int&amp;gt;(brr, n, SortBase::insertionSort&amp;lt;int&amp;gt;, &quot;insertion sort&quot;);
  SortTestHelper::testSort&amp;lt;int&amp;gt;(crr, n, SortBase::bubbleSort&amp;lt;int&amp;gt;, &quot;bubble sort&quot;);
  delete[] brr;
  delete[] arr;
  delete[] crr;

  return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dongyuanxin/markdown-static/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%B8%8E%E4%BC%98%E5%8C%96/2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除了大量无序随机数据，类似于系统日志的数据就是基本有序的大量数据。此时，测试代码如下：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &quot;SortHelper.h&quot;
#include &quot;SortBase.h&quot;
#include &quot;SortAdvance.h&quot;

using namespace std;

int main() {

  int n = 50000, left = 0, right = n;
  int *arr = SortTestHelper::generateNearlyOrderedArray&amp;lt;int&amp;gt;(n, 10);
  int *brr = SortTestHelper::copyArray&amp;lt;int&amp;gt;(arr, n);
  int *crr = SortTestHelper::copyArray&amp;lt;int&amp;gt;(arr, n);
  SortTestHelper::testSort&amp;lt;int&amp;gt;(arr, n, SortBase::selectionSort&amp;lt;int&amp;gt;, &quot;selection sort&quot;);
  SortTestHelper::testSort&amp;lt;int&amp;gt;(brr, n, SortBase::insertionSort&amp;lt;int&amp;gt;, &quot;insertion sort&quot;);
  SortTestHelper::testSort&amp;lt;int&amp;gt;(crr, n, SortBase::bubbleSort&amp;lt;int&amp;gt;, &quot;bubble sort&quot;);
  delete[] brr;
  delete[] arr;
  delete[] crr;

  return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如图所示，插入排序的只用了 0.002 秒。在这种数据情况下，插入排序的时间复杂度近似 O(N)，绝对快于高级排序的 O(NlogN)。除此之外，还保证了稳定性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dongyuanxin/markdown-static/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%B8%8E%E4%BC%98%E5%8C%96/3.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;感谢&quot;&gt;4. 感谢&lt;/h2&gt;
&lt;p&gt;本篇博客是总结于慕课网的&lt;a href=&quot;https://coding.imooc.com/class/chapter/71.html&quot;&gt;《学习算法思想 修炼编程内功》&lt;/a&gt;的笔记，liuyubobobo 老师人和讲课都很 nice，欢迎去买他的课程。&lt;/p&gt;
&lt;h2 id=&quot;更多内容&quot;&gt;5. 更多内容&lt;/h2&gt;
</description>
<pubDate>Sun, 30 Sep 2018 12:05:00 +0000</pubDate>
<dc:creator>GodBMW</dc:creator>
<og:description>常见的基础排序有选择排序、冒泡排序和插入排序。众所周知，他们的时间复杂度是 O(n\*n)。 但是，现在要重新认识一下基础排序算法，尤其是“插入排序”：在近乎有序的情况下，插入排序的时间复杂度可</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/geyouneihan/p/9733206.html</dc:identifier>
</item>
<item>
<title>Git rebase命令实战 - 小眼儿</title>
<link>http://www.cnblogs.com/hujunzheng/p/9732936.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hujunzheng/p/9732936.html</guid>
<description>&lt;h2&gt;一、前言&lt;/h2&gt;
&lt;p&gt;　　一句话，git rebase 可以帮助项目中的提交历史干净整洁！！！&lt;/p&gt;
&lt;h2&gt;二、避免合并出现分叉现象&lt;/h2&gt;
&lt;h3&gt;git merge操作&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　1、新建一个 develop 分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930151838517-1344331270.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 　　2、在develop分支上新建两个文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930151946409-1081878905.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;199&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　3、然后分别执行 add、commit、push&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930152144677-2087290203.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;112&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 　　4、接着切换到master分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　分别添加c.txt 和 d.txt两个文件，分别进行add、commit、push&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930152602072-1604684802.png&quot; alt=&quot;&quot; width=&quot;551&quot; height=&quot;223&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　5、现在想把develop分支上开发的部分合并到master分支上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930152812405-995332912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　6、git merge 会将master和develop合并的过程通过如下形式展示出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　借助 gitk 命令&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930153605130-453696890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　借助sourceTree工具&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930153220185-543474970.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;git rebase操作&lt;/h3&gt;
&lt;p&gt;　　如果master和develop分支上的这些开发部分都是同一个人操作，在合并的时候不想产生这种分叉的结果，怎么办呢？&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;git-rebase命令简介&lt;/strong&gt;：用在从上游分支获取最新commit信息，并有机的将当前分支和上游分支进行合并。因为develop分支是在master分支基础上建立的，所以master称为topic的上游分支。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;1、首先通过 git reset 恢复到master合并之前的状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2、切换到develop分支，执行如下操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930160458545-540131555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930160708848-859943279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 　　3、如果你想把 rebase 之后的 master 分支推送到远程仓库，Git 会阻止你这么做，因为两个分支包含冲突。但你可以传入 –force 标记来强行推送。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930161704008-207568265.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　4、查看一下develop分支合并的效果，如下。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930161851702-270116753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930160620856-90233648.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　看一下rebase的结果，就像是develop先把自己的提交保存起来，然后将master中的提交合并过来，最后在加上自身分支的提交，这样就不存在分支的合并效果了。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;5、接着切换到master分支，执行git merge 操作就可以了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930162905102-1748986896.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930162916645-2086782293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这时候，master和develop分支已经同步了。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt; 其他异常情况&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用&quot;git-add&quot;命令去更新这些内容的索引(index)，然后你无需执行 git-commit，只要执行 git rebase --continue。这样git会继续应用(apply)余下的补丁。在任何时候，你可以用--abort参数来终止rebase的行动，并且&quot;mywork&quot; 分支会回到rebase开始前的状态。即git rebase --abort。&lt;/p&gt;
&lt;h2&gt;手动合并多个commit记录&lt;/h2&gt;
&lt;h3&gt;rebase -i 命令介绍&lt;/h3&gt;
&lt;p&gt; 　　git rebase -i [startpoint] [endpoint]&lt;/p&gt;
&lt;p&gt;　　其中-i的意思是--interactive，即弹出交互式的界面让用户编辑完成合并操作，[startpoint] [endpoint]则指定了一个编辑区间，如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向的commit(注：该区间指定的是一个前开后闭的区间)。&lt;br/&gt;在查看到了log日志后，我们运行以下命令：&lt;br/&gt;　　git rebase -i 0bb85c 582db9&lt;br/&gt;　　或者&lt;br/&gt;　　git rebase -i HEAD~3&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930164505754-1611470792.png&quot; alt=&quot;&quot; width=&quot;555&quot; height=&quot;432&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上面未被注释的部分列出的是我们本次rebase操作包含的所有提交，下面注释部分是git为我们提供的命令说明。每一个commit id 前面的pick表示指令类型，git 为我们提供了以下几个命令:&lt;/p&gt;
&lt;p&gt;　　pick：保留该commit（缩写:p）&lt;br/&gt;　　reword：保留该commit，但我需要修改该commit的注释（缩写:r）&lt;br/&gt;　　edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）&lt;br/&gt;　　squash：将该commit和前一个commit合并（缩写:s）&lt;br/&gt;　　fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）&lt;br/&gt;　　exec：执行shell命令（缩写:x）&lt;br/&gt;　　drop：我要丢弃该commit（缩写:d）&lt;/p&gt;
&lt;h3&gt;rebase -i命令执行&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;1、git rebase -i HEAD~3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　   &lt;strong&gt;2、编辑合并信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930171337623-2141571857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 　  3、修改commit信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930171437960-1362774518.png&quot; alt=&quot;&quot; width=&quot;541&quot; height=&quot;279&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;strong&gt;4、commit信息预览&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930171550879-1510778943.png&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;471&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;strong&gt;　5、commit合并结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930171607902-666179381.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 　　6、可以看到master上之后又1条提交记录了，而develop上还有3个提交记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930171835394-1155094425.png&quot; alt=&quot;&quot; width=&quot;530&quot; height=&quot;646&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　还是要通过 git push -f 命令将合并的commit结果提交的远程仓库中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　如果develop分支也想要变成master分支这种合并效果，记住不要使用git merge 命令，还时会出现分叉的情况。&lt;span&gt;继续使用 git rebase master命令&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930172455308-1611708819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;自动合并多个commit记录&lt;/h2&gt;
&lt;h3&gt;命令介绍&lt;/h3&gt;
&lt;p&gt;　　git commit –fixup 自动在commit消息前添加fixup!关键字。&lt;/p&gt;
&lt;p&gt;　　git rebase -i –autosquash 使用rebase自动合并被标记为fixup!的commit，其实是根据sha值来的。&lt;/p&gt;
&lt;h3&gt;命令操作&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;1.继续修复如下图所示对应的bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930184016532-294063160.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;strong&gt;2、修改完之后执行 git commit --fixup 需要合并的commit id&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930184530573-1689510167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　3、commit fixup 之后的效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930184616905-550333246.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;strong&gt;　4、执行git rebase -i --autosquash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　或者 git rebase -i --autosquash &lt;span&gt;需要合并commit id的父级commit id&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930184946583-778174181.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;5、执行rebase autosquash结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201809/640632-20180930185135783-590228581.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 30 Sep 2018 11:07:00 +0000</pubDate>
<dc:creator>小眼儿</dc:creator>
<og:description>一、前言 一句话，git rebase 可以帮助项目中的提交历史干净整洁！！！ 二、避免合并出现分叉现象 git merge操作 1、新建一个 develop 分支 2、在develop分支上新建两个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hujunzheng/p/9732936.html</dc:identifier>
</item>
<item>
<title>一套代码小程序&amp;Web&amp;Native运行的探索04——数据更新 - 叶小钗</title>
<link>http://www.cnblogs.com/yexiaochai/p/9713519.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yexiaochai/p/9713519.html</guid>
<description>&lt;p&gt;接上文：&lt;a href=&quot;https://www.cnblogs.com/yexiaochai/p/9699698.html&quot;&gt;一套代码小程序&amp;amp;Web&amp;amp;Native运行的探索03&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对应Git代码地址请见：&lt;a href=&quot;https://github.com/yexiaochai/wxdemo/tree/master/mvvm&quot; target=&quot;_blank&quot;&gt;https://github.com/yexiaochai/wxdemo/tree/master/mvvm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;https://github.com/fastCreator/MVVM（极度参考，十分感谢该作者，直接看Vue会比较吃力的，但是看完这个作者的代码便会轻易很多，可惜这个作者没有对应博客说明，不然就爽了）&lt;/p&gt;
&lt;p&gt;https://www.tangshuang.net/3756.html&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/kidney/p/8018226.html&lt;/p&gt;
&lt;p&gt;http://www.cnblogs.com/kidney/p/6052935.html&lt;/p&gt;
&lt;p&gt;https://github.com/livoras/blog/issues/13&lt;/p&gt;
&lt;p&gt;之前我们完成了简陋的从模板到虚拟DOM从虚拟DOM到HTML的代码，我们这里图简单没有对属性和样式做特殊处理，还是按照一般的模板方式进行的解析，后续看看这块怎么处理吧，今天我们的任务是完成setData时候同步更新我们的HTML的操作，这里首先我们来看看一般的MVVM中数据变化更新是怎么完成的，在这个基础上进行后续的代码可能各位看得更清晰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般的MVVM双向绑定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说，我们数据变化的时候都是一个发布订阅模式，我们调用setData的时候会执行类似这样的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; setData(data) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;做下数据变更&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;会通知对应数据对象数据发生变化了,这个数据对应的所有dom节点都会发生改变&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;   &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.notifyAll();
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而在vue中我们是直接做这种操作，dom就发生了变化：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.name = '叶小钗';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个是因为，他使用了访问器属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; { };
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为obj定义一个名为 name 的访问器属性&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; Object.defineProperty(obj, &quot;name&quot;&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;   get: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     console.log('get'&lt;span&gt;, arguments);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   set: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (val) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     console.log('set'&lt;span&gt;, arguments);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; obj.name = '叶小钗'
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;console.log(obj, obj.name)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt; set Arguments [&quot;叶小钗&quot;, callee: ƒ, Symbol(Symbol.iterator): ƒ]
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; get Arguments [callee: ƒ, Symbol(Symbol.iterator): ƒ]
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果这里写这样的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;a&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;b&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; setData(data) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;做下数据变更&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;会通知对应数据对象数据发生变化了,这个数据对应的所有dom节点都会发生改变&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.notifyAll();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getElById(id) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt;&lt;span&gt; document.getElementById(id);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;&lt;span&gt; obj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为obj定义一个名为 name 的访问器属性&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;Object.defineProperty(obj, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;  set: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (val) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    getElById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; val;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    getElById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; val;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;getElById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;  obj.name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e.target.value;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201809/294743-20180929155417514-772967293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文本框中的字符串和div的便会同步更新，这个便是最简化的双向绑定代码了，真实情况下我们的代码可能是这样的：&lt;/p&gt;
&lt;p&gt;① 将data中的数据（这里是name属性），与两个dom对象进行映射一个是input另一个是空字符串（可以想象为span）&lt;/p&gt;
&lt;p&gt;② 当data中name字段发生变化，或者view中导致name发生变化（控制台或者事件监听）&lt;/p&gt;
&lt;p&gt;③ data数据变化时，文本节点同步发生变化（不管是控制台js脚本导致还是输入变化）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PS：我们这里与小程序保持一致，真正做更新时候采用setData方法进行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里便开始引入编译过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;  {{name}}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getElById(id) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; document.getElementById(id);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这块代码仅做功能说明,不用当真&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; compile(node, vm) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    let reg &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;/&lt;/span&gt;&lt;span&gt;\{\{(.*)\}\}&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点类型&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(node.nodeType &lt;/span&gt;&lt;span&gt;===&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;      let attrs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; node.attributes;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析属性&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;       &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(let i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, l &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; attrs.length; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; l; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(attrs[i].nodeName &lt;/span&gt;&lt;span&gt;===&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;          let name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; attrs[i].nodeValue;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;          node.value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; vm.data[name] &lt;/span&gt;&lt;span&gt;||&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处不做太多判断,直接绑定事件&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;          node.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;赋值操作&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            let newObj &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            newObj[name] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; e.target.value;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            vm.setData(newObj);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;          });
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;           &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(node.nodeType &lt;/span&gt;&lt;span&gt;===&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(reg.test(node.nodeValue)) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;          let name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; RegExp.$&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取匹配到的name&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;          name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; name.trim();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;          node.nodeValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; vm.data[name] &lt;/span&gt;&lt;span&gt;||&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取节点&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; nodeToFragment(node, vm) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    let flag &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.createDocumentFragment();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    let child;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; (child &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; node.firstChild) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;      compile(child, vm);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;      flag.appendChild(child);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; MVVM(options) {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.data &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; options.data;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    let el &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; getElById(options.el);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$dom &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; nodeToFragment(el, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$el &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; el.appendChild(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$dom);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    this.$bindEvent();&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;  MVVM.prototype.setData &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(let k &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; data) {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.data[k] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; data[k];
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行更新逻辑&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; 
&lt;span&gt;74&lt;/span&gt; &lt;span&gt;  let mvvm &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MVVM({
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;    data: {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;      name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;叶小钗&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;  })
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; 
&lt;span&gt;81&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候input输入更改，对应属性也会发生变化，但是我们属性发生变化并没有引起所有的dom发生变化，这个是不对的，这里我们便需要劫持所有的数据对象，这里引入发布订阅模式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;div id=&quot;app&quot;&amp;gt;
&lt;span&gt;  2&lt;/span&gt;   &amp;lt;input type=&quot;text&quot; v-model=&quot;name&quot;&amp;gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;  {{name}}
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot; &amp;gt;
&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getElById(id) {
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; document.getElementById(id);
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;主体对象,存储所有的订阅者&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Dep () {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.subs =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通知所有订阅者数据变化&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;   Dep.prototype.notify = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(let i = 0, l = &lt;span&gt;this&lt;/span&gt;.subs.length; i &amp;lt; l; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.subs[i].update();
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; 
&lt;span&gt; 24&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加订阅者&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;   Dep.prototype.addSub = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (sub) {
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.subs.push(sub);
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt;   let globalDataDep = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dep();
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;观察者,框架会接触data的每一个与node相关的属性,&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果data没有与任何节点产生关联,则不予理睬&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实际的订阅者对象&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意,只要一个数据对象对应了一个node对象就会生成一个订阅者,所以真实通知的时候应该需要做到通知到对应数据的dom,这里不予关注&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Watcher(vm, node, name) {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.node =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.vm =&lt;span&gt; vm;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(node.nodeType === 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.node.value = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.vm.data[name];
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(node.nodeType === 3&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.node.nodeValue = &lt;span&gt;this&lt;/span&gt;.vm.data[name] || ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;     globalDataDep.addSub(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt;   Watcher.prototype.update = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.node.nodeType === 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.node.value = &lt;span&gt;this&lt;/span&gt;.vm.data[&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name ];
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.node.nodeType === 3&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.node.nodeValue = &lt;span&gt;this&lt;/span&gt;.vm.data[&lt;span&gt;this&lt;/span&gt;.name ] || ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这块代码仅做功能说明,不用当真&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; compile(node, vm) {
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     let reg = /\{\{(.*)\}\}/&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;节点类型&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(node.nodeType === 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;       let attrs =&lt;span&gt; node.attributes;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析属性&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;       &lt;span&gt;for&lt;/span&gt;(let i = 0, l = attrs.length; i &amp;lt; l; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(attrs[i].nodeName === 'v-model'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;           let name =&lt;span&gt; attrs[i].nodeValue;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt;(node.value === vm.data[name]) &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;          node.value = vm.data[name] || '';&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;           &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Watcher(vm, node, name)
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; 
&lt;span&gt; 72&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此处不做太多判断,直接绑定事件&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;           node.addEventListener('input', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;赋值操作&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;             let newObj =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;             newObj[name] =&lt;span&gt; e.target.value;
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             vm.setData(newObj, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;          });
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;           &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(node.nodeType === 3&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(reg.test(node.nodeValue)) {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;           let name = RegExp.$1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取匹配到的name&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;           name =&lt;span&gt; name.trim();
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;          node.nodeValue = vm.data[name] || '';&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;           &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Watcher(vm, node, name)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; 
&lt;span&gt; 94&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取节点&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; nodeToFragment(node, vm) {
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;     let flag =&lt;span&gt; document.createDocumentFragment();
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    let child;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (child =&lt;span&gt; node.firstChild) {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;      compile(child, vm);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;      flag.appendChild(child);
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt;   &lt;span&gt;function&lt;/span&gt;&lt;span&gt; MVVM(options) {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.data =&lt;span&gt; options.data;
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;     let el =&lt;span&gt; getElById(options.el);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.$dom = nodeToFragment(el, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.$el = el.appendChild(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$dom);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    this.$bindEvent();&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt;   MVVM.prototype.setData = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data, noNotify) {
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(let k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data) {
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.data[k] =&lt;span&gt; data[k];
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行更新逻辑&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    if(noNotify) return;&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt; &lt;span&gt;    globalDataDep.notify();
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt;   let mvvm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MVVM({
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;     el: 'app'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;    data: {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;       name: '叶小钗'
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;  })
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/294743/201809/294743-20180929172059091-1019174018.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mvvm.setData({name: 'hello world'})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段短短的代码，基本将数据变化如何引起的dom变化说的比较清楚了，几个关键流程是：&lt;/p&gt;
&lt;p&gt;① 设置全局的发布订阅模式&lt;/p&gt;
&lt;p&gt;② 在模板编译的时候，一旦碰到数据节点与dom节点发生关系时，则新增一个订阅者，我们这里的发布者没有状态概念，真实的情况应该是以data为一个集合的分组，这样可以做到安data进行更新&lt;/p&gt;
&lt;p&gt;③ 数据变化时候执行setData，底层调用发布者除非对应订阅者更新数据，这里只是简单的属性&amp;amp;文本更新，真实情况会复杂的多，我们这里为保持小程序逻辑，没有实现访问器属性部分代码&lt;/p&gt;
&lt;p&gt;有了以上代码的理解，我们再回到我们昨天的代码继续完成这个流程便会清晰的多&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;完成setData代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据之前的学习，我们知道添加订阅者一定是发生在编译时期，data跟node产生关联的时候，但是我们这里需要发布订阅者相关代码，由于我们这里的诉求还要简单一些并不想去考虑属性样式这些特殊性，所以我们对TextParser做点改造，先实现之：&lt;/p&gt;
&lt;p&gt;注意这里的核心是，每次数据改变的时候都会触发观察者的update，这样会引起重新生成虚拟树（vnode），但是到底要不要重新渲染，怎么渲染后面会直接由snabbdom接手，我们只是将这种关系完成，代码比较分散大家可以到github上面看：&lt;a href=&quot;https://github.com/yexiaochai/wxdemo/tree/master/mvvm&quot; target=&quot;_blank&quot;&gt;https://github.com/yexiaochai/wxdemo/tree/master/mvvm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后今天的学习到此为止，我们明天开始处理事件部分的代码，感觉代码逐渐有些慢了，等组件部分完成后我们画点流程图重新梳理下逻辑&lt;/p&gt;
</description>
<pubDate>Sun, 30 Sep 2018 10:20:00 +0000</pubDate>
<dc:creator>叶小钗</dc:creator>
<og:description>接上文：一套代码小程序&amp;Web&amp;Native运行的探索03 对应Git代码地址请见：https://github.com/yexiaochai/wxdemo/tree/master/m</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yexiaochai/p/9713519.html</dc:identifier>
</item>
<item>
<title>ElasticSearch实践系列（三）：探索数据 - 范存威</title>
<link>http://www.cnblogs.com/fancunwei/p/9732982.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fancunwei/p/9732982.html</guid>
<description>&lt;p&gt;经过前两篇文章得实践，我们已经了解了ElasticSearch的基础知识，本篇文章让我来操作一些更真实的数据集。&lt;br/&gt;我们可以利用&lt;a href=&quot;http://www.json-generator.com/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;www.json-generator.com/&lt;/code&gt;&lt;/a&gt;生成如下的文档结构：&lt;/p&gt;
&lt;pre class=&quot;hljs json&quot;&gt;
&lt;code class=&quot;json&quot;&gt;  {
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;account_number&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;balance&quot;: &lt;span class=&quot;hljs-number&quot;&gt;39225,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;firstname&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Amber&quot;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;lastname&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Duke&quot;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;age&quot;: &lt;span class=&quot;hljs-number&quot;&gt;32,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;gender&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;M&quot;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;880 Holmes Lane&quot;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;employer&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pyrami&quot;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;email&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;amberduke@pyrami.com&quot;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;city&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Brogan&quot;,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;state&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;IL&quot;
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;我们可以下载es提供的数据集&lt;a href=&quot;https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;accounts.json&lt;/a&gt;，然后推送到ES集群&lt;/p&gt;
&lt;blockquote readability=&quot;0.3125&quot;&gt;
&lt;p&gt;wget &lt;a href=&quot;https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;curl -H &quot;Content-Type: application/json&quot; -XPOST &quot;localhost:9200/bank/_doc/_bulk?pretty&amp;amp;refresh&quot; --data-binary &quot;@accounts.json&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;curl &quot;localhost:9200/_cat/indices?v&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以看到1000个文档已经索引到bank索引下了。&lt;/p&gt;
&lt;pre class=&quot;hljs cpp&quot;&gt;
&lt;code class=&quot;cpp&quot;&gt;[root@XXXXX cusD]&lt;span class=&quot;hljs-meta&quot;&gt;# curl &lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;localhost:9200/_cat/indices?v&quot;
health status index     uuid                   pri rep docs.count docs.deleted store.size pri.store.size
yellow open   index     &lt;span class=&quot;hljs-number&quot;&gt;3BGZ895tTNa8qtM_nA3YmA   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;1            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;4.4kb          &lt;span class=&quot;hljs-number&quot;&gt;4.4kb
green  open   .kibana   qCbYeswVT2WCogz_E9Y3Ag   &lt;span class=&quot;hljs-number&quot;&gt;1   &lt;span class=&quot;hljs-number&quot;&gt;0          &lt;span class=&quot;hljs-number&quot;&gt;2            &lt;span class=&quot;hljs-number&quot;&gt;0     &lt;span class=&quot;hljs-number&quot;&gt;13.7kb         &lt;span class=&quot;hljs-number&quot;&gt;13.7kb
yellow open   customer  x57uWBR3Rg-w2_Dz7Djduw   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;1            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;4.5kb          &lt;span class=&quot;hljs-number&quot;&gt;4.5kb
yellow open   customerb &lt;span class=&quot;hljs-number&quot;&gt;80DoY8e3RtinVNV4VGU4Cg   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;1            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;4.5kb          &lt;span class=&quot;hljs-number&quot;&gt;4.5kb
yellow open   best3     DPh-_bOLQBimS9jqWVyyjw   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;3            &lt;span class=&quot;hljs-number&quot;&gt;0     &lt;span class=&quot;hljs-number&quot;&gt;10.9kb         &lt;span class=&quot;hljs-number&quot;&gt;10.9kb
yellow open   best1     oD5uUlCbSnqevbRfLvl2Iw   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;1            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;5.5kb          &lt;span class=&quot;hljs-number&quot;&gt;5.5kb
yellow open   customer2 VyIXSBK6R9yHNYNDlsni3A   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;0            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;1.2kb          &lt;span class=&quot;hljs-number&quot;&gt;1.2kb
yellow open   customerc Nbglz5hbRO28jyt_XyPNTA   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;1            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;4.5kb          &lt;span class=&quot;hljs-number&quot;&gt;4.5kb
yellow open   cust      xuYth97RShixNtgNpbyxBA   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;1            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;4.4kb          &lt;span class=&quot;hljs-number&quot;&gt;4.4kb
yellow open   customerf osKgtSLxTPKblJW7mrmO0Q   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;1            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;5.1kb          &lt;span class=&quot;hljs-number&quot;&gt;5.1kb
yellow open   bank      Wrk49iM6TjGItiZKWdnzJA   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1       &lt;span class=&quot;hljs-number&quot;&gt;1000            &lt;span class=&quot;hljs-number&quot;&gt;0    &lt;span class=&quot;hljs-number&quot;&gt;474.7kb        &lt;span class=&quot;hljs-number&quot;&gt;474.7kb
yellow open   customer3 &lt;span class=&quot;hljs-number&quot;&gt;101ZzeNmRuCn9d_NOx5oZg   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;0            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;1.2kb          &lt;span class=&quot;hljs-number&quot;&gt;1.2kb
yellow open   customere p2BWLci9Qz&lt;span class=&quot;hljs-number&quot;&gt;-1VnOh0vSSQA   &lt;span class=&quot;hljs-number&quot;&gt;5   &lt;span class=&quot;hljs-number&quot;&gt;1          &lt;span class=&quot;hljs-number&quot;&gt;2            &lt;span class=&quot;hljs-number&quot;&gt;0      &lt;span class=&quot;hljs-number&quot;&gt;7.6kb          &lt;span class=&quot;hljs-number&quot;&gt;7.6kb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;让我们开始运行一些简单的搜索api,有两种方式：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;GET /bank/_search?q=*&amp;amp;sort=account_number:asc&amp;amp;pretty&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们分析下这个搜索请求。我们正在用_search搜索 bank索引。q=&lt;em&gt;代表Es会匹配索引内的全部文档。&lt;/em&gt;&lt;em&gt;sort=account_number:asc&lt;/em&gt;&lt;em&gt;代表每个文档的字段以account_number升序对结果进行排序。&lt;/em&gt;&lt;em&gt;pretty&lt;/em&gt;*代表结果以漂亮的json格式输出。&lt;br/&gt;这里摘选部分结果&lt;/p&gt;
&lt;pre class=&quot;hljs json&quot;&gt;
&lt;code class=&quot;json&quot;&gt;{
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;took&quot;: &lt;span class=&quot;hljs-number&quot;&gt;53,
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;timed_out&quot;: &lt;span class=&quot;hljs-literal&quot;&gt;false,
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;_shards&quot;: {
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;total&quot;: &lt;span class=&quot;hljs-number&quot;&gt;5,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;successful&quot;: &lt;span class=&quot;hljs-number&quot;&gt;5,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;skipped&quot;: &lt;span class=&quot;hljs-number&quot;&gt;0,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;failed&quot;: &lt;span class=&quot;hljs-number&quot;&gt;0
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;hits&quot;: {
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;total&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1000,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;max_score&quot;: &lt;span class=&quot;hljs-literal&quot;&gt;null,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;hits&quot;: [
      {
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;_index&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bank&quot;,
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;_type&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;_doc&quot;,
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;_id&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;,
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;_score&quot;: &lt;span class=&quot;hljs-literal&quot;&gt;null,
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;_source&quot;: {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;account_number&quot;: &lt;span class=&quot;hljs-number&quot;&gt;0,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;balance&quot;: &lt;span class=&quot;hljs-number&quot;&gt;16623,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;firstname&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bradshaw&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;lastname&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mckenzie&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;age&quot;: &lt;span class=&quot;hljs-number&quot;&gt;29,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;gender&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;F&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;244 Columbus Place&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;employer&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Euron&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;email&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bradshawmckenzie@euron.com&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;city&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hobucken&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;state&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;CO&quot;
        },
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;sort&quot;: [
          &lt;span class=&quot;hljs-number&quot;&gt;0
        ]
      },
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;took - Elasticsearch执行搜索的时间（以毫秒为单位）&lt;/li&gt;
&lt;li&gt;timed_out - 告诉我们搜索是否超时&lt;/li&gt;
&lt;li&gt;_shards - 告诉我们搜索了多少个分片，以及搜索成功/失败分片的计数&lt;/li&gt;
&lt;li&gt;hits - 搜索结果&lt;/li&gt;
&lt;li&gt;hits.total - 符合我们搜索条件的文档总数&lt;/li&gt;
&lt;li&gt;hits.hits - 实际的搜索结果数组（默认为前10个文档）&lt;/li&gt;
&lt;li&gt;hits.sort - 对结果进行排序（如果按分数排序则丢失）&lt;/li&gt;
&lt;li&gt;hits._score并max_score- 暂时忽略这些字段&lt;br/&gt;也可以用Request Body方式执行搜索,格式如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match_all&quot;: {} },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;sort&quot;: [
    { &lt;span class=&quot;hljs-string&quot;&gt;&quot;account_number&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;asc&quot; }
  ]
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Elasticsearch提供了一种JSON样式的特定于域的语言，可用于执行查询。这被称为&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/query-dsl.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;查询DSL&lt;/a&gt;。查询语言非常全面，乍一看可能令人生畏，但实际学习它的最佳方法是从一些基本示例开始。&lt;br/&gt;回到上面的例子，我们执行查询：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match_all&quot;: {} }
}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解析上面的内容，该query部分告诉我们查询定义是什么，match_all部分只是我们想要运行的查询类型。该match_all查询仅仅是在指定索引的所有文件进行搜索。&lt;br/&gt;除了query参数，我们还可以传递其他参数来影响搜索结果。在上面我们传入的部分的示例中 sort，我们传入size：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt; GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match_all&quot;: {} },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;: 1
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;请注意，如果size未指定，则默认为10。&lt;br/&gt;此示例执行一个 match_all并返回文档10到19：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt; GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match_all&quot;: {} },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;from&quot;: 10,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;: 10
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;from规定文档开始的索引，size指定了查询文档的大小。在实现分页时，这两个参数非常有用。from如果不传，默认为0。&lt;/p&gt;
&lt;p&gt;下面的示例执行一个 match_all并按帐户余额降序对结果进行排序，返回前10个（默认大小）文档。&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match_all&quot;: {} },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;sort&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;balance&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;order&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;desc&quot; } }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上面我们已经看到了一些基本的查询示例，让我们再深入了解下&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/query-dsl.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;QueryDSL&lt;/a&gt;。让我们来看下返回的json文档的字段。默认情况下会返回命中文档的所有字段。这被称为源（_source代表命中的字段）。有些情况下，我们只需要部分字段，如下：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt; GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match_all&quot;: {} },
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;_source&quot;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;account_number&quot;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;balance&quot;]
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面我们来说说查询部分。之前我们讲过match_all是匹配所有文档，现在让我们了解一个&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/query-dsl-match-query.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;match&lt;/code&gt; query&lt;/a&gt;，它能针对特定字段或字段集进行搜索。&lt;br/&gt;下面这个示例能搜索account_number为20的数据：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt; GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;account_number&quot;: 20 } }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此示例返回地址中包含术语“mill”或“lane”的所有帐户，这里格外注意【空格隔开的两个单词是or查询】：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;mill lane&quot; } }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此示例演示地址种包含“mill lane”的所有账户，【用match_phrase查询时，空格隔开的依然是一个单词】&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match_phrase&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;mill lane&quot; } }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们继续介绍下 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/query-dsl-bool-query.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;bool&lt;/code&gt; query&lt;/a&gt;，它允许我们使用布尔查询将更小的查询组合成更大的查询。&lt;br/&gt;must 同时满足条件此示例组成两个match查询并返回地址中包含“mill”和“lane”的所有帐户：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;bool&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;must&quot;: [
        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;mill&quot; } },
        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;lane&quot; } }
      ]
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的示例中，该bool must子句指定必须为true才能将文档视为匹配的所有查询。&lt;/p&gt;
&lt;p&gt;should或满足一个即可 此示例组成两个match查询并返回地址中包含“mill”或“lane”的所有帐户:&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;bool&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;should&quot;: [
        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;mill&quot; } },
        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;lane&quot; } }
      ]
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的示例中，该bool should子句指定了一个查询列表，其中任何一个查询都必须为true，才能将文档视为匹配项。&lt;/p&gt;
&lt;p&gt;must_not都不包含 此示例组成两个match查询并返回地址中既不包含“mill”也不包含“lane”的所有帐户：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;bool&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;must_not&quot;: [
        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;mill&quot; } },
        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;lane&quot; } }
      ]
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以在查询中同时组合must，should和must_not子句bool。此外，我们可以bool在任何这些bool子句中组合查询来模仿任何复杂的多级布尔逻辑。&lt;br/&gt;此示例返回任何40岁但不住在ID（aho）的人的所有帐户&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;bool&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;must&quot;: [
        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;40&quot; } }
      ],
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;must_not&quot;: [
        { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ID&quot; } }
      ]
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;上面的示例中，我们跳过了一个称为文档分数的小细节（_score搜索结果中的字段）。分数是一个数值，它是文档与我们指定的搜索查询匹配程度的相对度量。分数越高，文档越相关，分数越低，文档的相关性越低。&lt;br/&gt;但是查询并不总是需要产生分数，特别是当它们仅用于“过滤”文档集时。Elasticsearch会检测这些情况并自动优化查询执行，以便不计算无用的分数。&lt;/p&gt;
&lt;p&gt;我们在上面示例介绍的&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/query-dsl-bool-query.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;bool&lt;/code&gt;查询&lt;/a&gt;还支持&lt;code&gt;filter&lt;/code&gt;允许使用查询来限制将与其他子句匹配的文档的子句，而不会更改计算得分的方式。作为示例，让我们介绍一下&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/query-dsl-range-query.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;range&lt;/code&gt;查询&lt;/a&gt;，它允许我们按一系列值过滤文档。一般数字或日期会用到range。&lt;br/&gt;此示例使用bool查询返回余额大于或等于20000且小于或等于30000的帐户。&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;query&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;bool&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;must&quot;: { &lt;span class=&quot;hljs-string&quot;&gt;&quot;match_all&quot;: {} },
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;filter&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;range&quot;: {
          &lt;span class=&quot;hljs-string&quot;&gt;&quot;balance&quot;: {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;gte&quot;: 20000,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;lte&quot;: 30000
          }
        }
      }
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解析上面的内容，bool查询包含match_all查询（查询部分）和range查询（过滤部分）。我们可以将任何其他查询替换为查询和过滤器部分。&lt;br/&gt;除了match_all，match，bool，和range查询，有很多可用的其他查询类型的,这里暂时不讲了，我们了解了大致的工作原理后，将这些知识应用于学习和试验其他查询类型应该不会太困难。&lt;/p&gt;

&lt;p&gt;聚合提供了从数据中分组和提取统计信息的功能。考虑聚合的最简单方法是将其大致等同于SQL GROUP BY和SQL聚合函数。在Elasticsearch中，您可以执行返回匹配的搜索，同时在一个响应中返回与命中相关的聚合结果。这是非常强大和高效的，因为您可以运行查询和多个聚合，并一次性获取两个（或任一）操作的结果，避免使用简洁和简化的API进行网络往返。&lt;br/&gt;首先，此示例按state对所有帐户进行分组，然后返回按计数降序排序的前10个（默认）states（也是默认值），（这里的group_by_state可理解成自定义的聚合名称，可以自定义改变）：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;: 0,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;group_by_state&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;terms&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;state.keyword&quot;
      }
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在SQL中，上面的聚合类似：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT state, COUNT(&lt;em&gt;) FROM bank GROUP BY state ORDER BY COUNT(&lt;/em&gt;) DESC LIMIT 10;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回结果如下。&lt;/p&gt;
&lt;pre class=&quot;hljs json&quot;&gt;
&lt;code class=&quot;json&quot;&gt;{
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;took&quot;: &lt;span class=&quot;hljs-number&quot;&gt;0,
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;timed_out&quot;: &lt;span class=&quot;hljs-literal&quot;&gt;false,
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;_shards&quot;: {
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;total&quot;: &lt;span class=&quot;hljs-number&quot;&gt;5,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;successful&quot;: &lt;span class=&quot;hljs-number&quot;&gt;5,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;skipped&quot;: &lt;span class=&quot;hljs-number&quot;&gt;0,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;failed&quot;: &lt;span class=&quot;hljs-number&quot;&gt;0
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;hits&quot;: {
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;total&quot;: &lt;span class=&quot;hljs-number&quot;&gt;1000,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;max_score&quot;: &lt;span class=&quot;hljs-number&quot;&gt;0,
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;hits&quot;: []
  },
  &lt;span class=&quot;hljs-attr&quot;&gt;&quot;aggregations&quot;: {
    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;group_by_state&quot;: {
      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count_error_upper_bound&quot;: &lt;span class=&quot;hljs-number&quot;&gt;20,
      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;sum_other_doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;770,
      &lt;span class=&quot;hljs-attr&quot;&gt;&quot;buckets&quot;: [
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ID&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;27
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;TX&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;27
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;AL&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;25
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;MD&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;25
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;TN&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;23
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;MA&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;21
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;NC&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;21
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ND&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;21
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ME&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;20
        },
        {
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;key&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;MO&quot;,
          &lt;span class=&quot;hljs-attr&quot;&gt;&quot;doc_count&quot;: &lt;span class=&quot;hljs-number&quot;&gt;20
        }
      ]
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以看到key为ID的有27个账户，TX也是27个账户，AL的是25个账户，以此类推。&lt;br/&gt;请注意，我们设置size=0为不显示搜索匹配，因为我们只希望在响应中看到聚合结果。&lt;br/&gt;在前一个聚合的基础上，此示例按州计算平均帐户余额（同样仅针对按降序排序的前10个州）：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;: 0,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;group_by_state&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;terms&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;state.keyword&quot;
      },
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;average_balance&quot;: {
          &lt;span class=&quot;hljs-string&quot;&gt;&quot;avg&quot;: {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;balance&quot;
          }
        }
      }
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;请注意我们如何嵌套average_balance聚合内的group_by_state聚合。这是所有聚合的常见模式。您可以在聚合中任意嵌套聚合，以从数据中提取所需的轮转摘要。&lt;/p&gt;
&lt;p&gt;在前一个聚合的基础上，我们现在按降序排列平均余额：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;: 0,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;group_by_state&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;terms&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;state.keyword&quot;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;order&quot;: {
          &lt;span class=&quot;hljs-string&quot;&gt;&quot;average_balance&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;desc&quot;
        }
      },
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;average_balance&quot;: {
          &lt;span class=&quot;hljs-string&quot;&gt;&quot;avg&quot;: {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;balance&quot;
          }
        }
      }
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此示例演示了我们如何按年龄段（20-29岁，30-39岁和40-49岁）进行分组，然后按性别分组，最后得到每个年龄段的平均帐户余额：&lt;/p&gt;
&lt;pre class=&quot;hljs bash&quot;&gt;
&lt;code class=&quot;bash&quot;&gt;GET /bank/_search
{
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;: 0,
  &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;group_by_age&quot;: {
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;range&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;,
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;ranges&quot;: [
          {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;from&quot;: 20,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;to&quot;: 30
          },
          {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;from&quot;: 30,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;to&quot;: 40
          },
          {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;from&quot;: 40,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;to&quot;: 50
          }
        ]
      },
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;group_by_gender&quot;: {
          &lt;span class=&quot;hljs-string&quot;&gt;&quot;terms&quot;: {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;gender.keyword&quot;
          },
          &lt;span class=&quot;hljs-string&quot;&gt;&quot;aggs&quot;: {
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;average_balance&quot;: {
              &lt;span class=&quot;hljs-string&quot;&gt;&quot;avg&quot;: {
                &lt;span class=&quot;hljs-string&quot;&gt;&quot;field&quot;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;balance&quot;
              }
            }
          }
        }
      }
    }
  }
}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还有许多其他聚合功能，我们在此不再详述。如果您想进行进一步的实验，&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.4/search-aggregations.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;聚合参考指南&lt;/a&gt;是一个很好的起点。&lt;/p&gt;

&lt;p&gt;本篇文章依据官方文档，实践了查询和聚合命令，前面查询的部分还是很简单的，聚合这块有些复杂。&lt;br/&gt;本篇到此结束，感谢观看。有兴趣的可以通过 &lt;a href=&quot;http://www.weixinhe.cn:5601/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://www.weixinhe.cn:5601&lt;/a&gt; 演示上述命令。&lt;/p&gt;
</description>
<pubDate>Sun, 30 Sep 2018 10:11:00 +0000</pubDate>
<dc:creator>范存威</dc:creator>
<og:description>前言 经过前两篇文章得实践，我们已经了解了ElasticSearch的基础知识，本篇文章让我来操作一些更真实的数据集。我们可以利用www.json-generator.com/生成如下的文档结构： 加</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fancunwei/p/9732982.html</dc:identifier>
</item>
<item>
<title>记一次与iframe之间的抗争 - 一步一步向上爬</title>
<link>http://www.cnblogs.com/z937741304/p/9728160.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/z937741304/p/9728160.html</guid>
<description>&lt;p&gt;　　iframe这个标签之前了解过这个东西，知道它可以引入外来的网页，但是实际开发中没有用到过。这一次有一个需求是说准备要在网页中嵌套另外一个网站，用iframe这个标签，让我测试一下这个可不可以在自己的网页中对引入进来的iframe框架进行操作，操作dom和css的一些东西。让我做出一个小案例看看可不可以，我信誓旦旦保证说可以的，我试过！！！&lt;/p&gt;
&lt;p&gt;　　就这样交代给我之后信心满满的就开始了我的验证。&lt;/p&gt;
&lt;h3&gt;　　什么是同源？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　同域名、 同端口、 同协议  &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　&lt;/strong&gt;　网上是有好多这个的解释的，给出一张图片。 看下面这张图片。 引用来自  &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&quot; target=&quot;_blank&quot;&gt;浏览器的同源策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930172906229-1905976741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　我直接新建了一个文件夹，在里面写了两个html页面的文件，举例说明是a.html和b.html，然后让其中的一个a.html文件中用iframe标签的src去引入b.html文件，在里面去互相操作他们的css样式和DOM元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　a.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        html,body{
            height: 100%;
        }
        body{
            background: pink;
        }
        #iframe1{
            width: 400px;
            height: 400px;
            margin: auto;
            background: blue;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

这里是父文档
&amp;lt;input type=&quot;button&quot; id=&quot;btn1&quot; value=&quot;改变子文档的颜色&quot;&amp;gt;
&amp;lt;input type=&quot;button&quot; id=&quot;btn2&quot; value=&quot;删除span1&quot;&amp;gt;
&amp;lt;input type=&quot;button&quot; id=&quot;btn3&quot; value=&quot;改变span2的颜色&quot;&amp;gt;

&amp;lt;input type=&quot;button&quot; id=&quot;btn4&quot; value=&quot;修改子文档中的link标签&quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;hr /&amp;gt;
&amp;lt;iframe id=&quot;iframe1&quot; src=&quot;b.html&quot; frameborder=&quot;0&quot;&amp;gt;

&amp;lt;/iframe&amp;gt;

&amp;lt;script&amp;gt;
    // 只有同服务器下 同域名下才可以操作 不能更改别人的网页。。
    var oBtn1 = document.getElementById('btn1');
    var oIframe1 = document.getElementById('iframe1');


    function fn(){
        document.body.style.background = 'green';
    }


    oBtn1.onclick = function () {
        console.log(oIframe1.contentWindow);  // ---这个东西是子文档中的window对象
        console.log(oIframe1.contentDocument);  // ---- 这个东西是子文档中的document对象
        oIframe1.contentWindow.document.body.style.background = 'yellow';

    };

    btn2.onclick = function () {
        var span1 =oIframe1.contentWindow.document.querySelector('.span1');
        console.log(span1);
        span1.parentNode.removeChild(span1);
    };

    btn3.onclick = function () {
        var span2 =oIframe1.contentWindow.document.querySelector('.span2');
        span2.style.color = 'red';
    };
    btn4.onclick = function () {
        var iFrameWindow = oIframe1.contentWindow;
        console.log(iFrameWindow.document.getElementsByTagName('link'));
        var link0 = iFrameWindow.document.getElementsByTagName('link')[0];
        console.log(link0.parentNode.removeChild(link0));
    }

&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;b.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        body{
            background: yellowgreen;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;2.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1 id=&quot;h1&quot;&amp;gt;这里是子文档1&amp;lt;/h1&amp;gt;
    &amp;lt;span class=&quot;span1&quot;&amp;gt;span1标签&amp;lt;/span&amp;gt; &amp;lt;br&amp;gt;
    &amp;lt;br&amp;gt;
    &amp;lt;span class=&quot;span2&quot;&amp;gt;span2标签&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;span3&quot;&amp;gt;span3标签&amp;lt;/span&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;hr /&amp;gt;
    &amp;lt;input type=&quot;button&quot; id=&quot;btn1&quot; value=&quot;改变父文档的颜色&quot;&amp;gt;

    &amp;lt;script&amp;gt;
        var oH1 = document.getElementById('h1');
        var oBtn1 = document.getElementById('btn1');
        oH1.onclick = function () {
            alert('子文档中的点击事件,我可以改变父文档');
            console.log(window.parent);  // -----这个parent对象是父文档中的 window对象

        };

        oBtn1.onclick = function () {
            (function (window,document) {
                document.body.style.background = 'skyblue';
            })(window.parent, window.parent.document);
        };

    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　样式如下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930144348791-267353087.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上面的两个代码中用到了一个东西，在&lt;strong&gt;a.html文件&lt;/strong&gt;中 用到了iframe标签元素的  .&lt;strong&gt;contentWindow&lt;/strong&gt; 和 &lt;strong&gt;.contentDocument&lt;/strong&gt; 这两个东西，它们两个分别是子文档也就是b.html中的window对象和document对象，那么你说知道了这两个东西要去操作它里面的东西还不简单吗。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;b.html文件&lt;/strong&gt;中的  &lt;strong&gt;window.parent&lt;/strong&gt; 这个东西是a.html的window对象，那么它同样也可以去操作a.html中的元素了。所以交给我的任务我感觉完成了，就去问他，这样可以。然后我给他看了一下这个东西，后来了解到这两个不是同一个域名下的，这两个网站不是在一起的，然后我就回来又来调试。&lt;/p&gt;

&lt;h3&gt;不同端口下的调试&lt;/h3&gt;
&lt;p&gt;　　我经常用的编辑器是webstrom，它这个东西会自启动一个 127.0.0.1:63342的端口，我又用node做了一个简单的监听 3000端口的服务器，在网页上面打开了。&lt;/p&gt;
&lt;p&gt;　　还是同样的代码吧，只不过把ifreme上面的src改为了我3000端口的网页。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930145636444-500300466.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　但是这次浏览器给了我一个惊喜，因为我感觉吧只有后端才会存在跨域什么的问题，没有想过前端的这些东西。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930172920729-1075481174.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　它的打印出来的window对象都变了，好多都是false了，和之前在同一个页面下面的东西都不一样了~~&lt;/p&gt;
&lt;p&gt;因为一看到 origin  cross-origin就感觉是跨域的那种问题。&lt;/p&gt;
&lt;p&gt;　　得了吧，去百度，google查到底怎么办吧。我一直相信以我现在的水平遇到的问题其他的人同样也有人会遇到过。&lt;/p&gt;
&lt;p&gt;　　这一查不要紧，感觉看得好多文章开辟除了新的天地，真的是，在文章底部会给出参考文章，昨天我只看到了一种解决方案，并且将它付诸于实践了，但是由于想要搞明白今天又找到了几种解决方案，但是并没有去试验。&lt;/p&gt;

&lt;h3&gt;　　还是要讲一讲同源对哪些行为有限制？&lt;/h3&gt;
&lt;p&gt;　　随着互联网的发展，同源策略 越来越严格。目前，如果非同源，共有三种行为受到限制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1. Cookie、localStorage和 IndexDB无法读取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　2. DOM无法获得&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　3. AJAX 请求不能发送&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　虽然这些限制是必要的，但是有时很不方便，合理的用途也会受到影响。&lt;/p&gt;

&lt;p&gt;　　这个问题难道就没有办法解决了吗？有的&lt;/p&gt;

&lt;h3&gt;Cookie解决方法&lt;/h3&gt;
&lt;p&gt;　　Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置&lt;code&gt;document.domain&lt;/code&gt;共享 Cookie。&lt;/p&gt;
&lt;p&gt;　　举例来说，A网页是&lt;code&gt;http://w1.example.com/a.html&lt;/code&gt;，B网页是&lt;code&gt;http://w2.example.com/b.html&lt;/code&gt;，那么只要设置相同的&lt;code&gt;document.domain&lt;/code&gt;，两个网页就可以共享Cookie。&lt;/p&gt;
&lt;p&gt;　　document.domain = 'example.com';&lt;/p&gt;&lt;p&gt;　　现在，A网页通过脚本设置一个 Cookie。&lt;br/&gt;　　document.cookie = &quot;test1=hello&quot;;&lt;/p&gt;&lt;p&gt;　　B网页就可以读到这个 Cookie。&lt;br/&gt;　　var allCookie = document.cookie;&lt;br/&gt;　　注意，这种方法只适用于 Cookie 和 iframe 窗口，LocalStorage 和 IndexDB 无法通过这种方法，规避同源政策，而要使用下文介绍的PostMessage API。&lt;/p&gt;&lt;p&gt;　　另外，服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名，比如.example.com。&lt;br/&gt;　　Set-Cookie: key=value; domain=.example.com; path=/&lt;br/&gt;　　这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。&lt;/p&gt;
&lt;p&gt;　　上面这种方法暂时还没有去试验，等试验过后再来修改一下这里，因为自己都不知道行不行。&lt;/p&gt;

&lt;h3&gt;iframe&lt;/h3&gt;
&lt;p&gt;　　如果两个网页不同源，就无法拿到对方的DOM，上面的第二个例子我已经去试验过了，也看到报错信息了。&lt;/p&gt;
&lt;p&gt;　　就是父窗口运行下面的命令，如果iframe窗口不是同源，就会报错。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
document.getElementById(&quot;myIFrame&quot;).contentWindow.document
// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面命令中，父窗口想获取子窗口的DOM，因为跨域资源导致报错。&lt;/p&gt;
&lt;p&gt;　　反之亦然，子窗口获取主窗口的DOM也会报错。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
window.parent.document.body
// 报错
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　前面讲的这些实际上我第二个例子试验过了，下面也就是我遇到问题的几种解决方法。&lt;/p&gt;
&lt;p&gt;　　参考的他人的文章找到的，对于完全不同源的网站，目前有三种方法，来解决我遇到的问题。&lt;/p&gt;

&lt;h3&gt;1. 片段标识符&lt;/h3&gt;
&lt;p&gt;　　片段标识符呢也就是哈希值#，我们都知道当网址资源#前面不变，后面的部分变化的时候网页是不会刷新的，如果不清楚的话，可以看一下我之前写过的一篇文章  &lt;a href=&quot;https://www.cnblogs.com/z937741304/p/9637074.html&quot; target=&quot;_blank&quot;&gt;浅谈SPA&lt;/a&gt;  ，里面有详细的介绍#。&lt;/p&gt;
&lt;p&gt;　　就是父文档和子文档之间要交互时，就去改变hash值 也就是#后面的部分，然后两者再相互去监听hash变化的事件，再去自己做一些处理就好了&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
window.location.hash;  // 这个是可以获取hash值的

window.onhashchange = function(){
   // 这个是hash值改变会触发这个函数  
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　举一个小例子可以去试验一下&lt;/p&gt;
&lt;p&gt;父窗口可以把信息，写入到子窗口的片段标识符&lt;/p&gt;
&lt;p&gt;父窗口中的代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930154019463-1021711862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了好看吧，就不用博客园自带的那个代码了，就这样把子文档的url地址给改变了吧，因为#不会刷新网页，而子文档中也可以监听到这个#值的改变，所以子文档中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930154135508-426026666.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;浏览器中打印的东西&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930173859208-2133758063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在这里可以看到了，我们传递过去的数据信息为 #changeColor，在子页面中可以判断#后面的带的东西，再去执行自己的逻辑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;同样的子文档给父文档传递数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　&lt;/strong&gt;　我们不是可以拿到父文档的那个 &lt;strong&gt;window.parent&lt;/strong&gt;吗，就用这个去改变就可以了，但是  BUT！！！&lt;/p&gt;
&lt;p&gt;　　我在子页面中使用的时候&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
btn1.onclick = function () {
    console.log(parent.location);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930173707646-544474713.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 这是什么嘛，你父文档都可以改子文档了，问什么这个还是要 block frame with啥啥啥的，我本来以为可以成功的，这个有知道解决方法的大佬可以帮帮忙吗。嘿嘿，暂时先这样吧，父文档已经可以给子文档传递信息了，我的解决方法也不是这种，暂时先把这个错误问题放一放，以后有解决方法了，会来这里修改的。&lt;/p&gt;

&lt;h3&gt;2. window.name&lt;/h3&gt;
&lt;p&gt;　　浏览器窗口有window.name属性，这个属性最大的特点是，无论是否同源，只要在同一个窗口里面，前一个窗口设置了这个属性后，后一个网页可以读取它。&lt;/p&gt;
&lt;p&gt;　　父窗口先打开一次子窗口，载入一个不同源的网页，将网页信息写入window.name属性。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
window.name = data;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接着，子窗口跳回一个与主窗口同域的网址&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
location = 'http://parent.url.com/xxx.html'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后主窗口就可以读取子窗口的window.name了&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
var data = document.getElementById('myFrame').contentWindow.name;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这种方法的优点是，&lt;code&gt;window.name&lt;/code&gt;容量很大，可以放置非常长的字符串；缺点是必须监听子窗口&lt;code&gt;window.name&lt;/code&gt;属性的变化，影响网页性能。&lt;/p&gt;
&lt;h3&gt;3.跨文档通信API  postMessage&lt;/h3&gt;
&lt;p&gt; 　　我用到的解决方法是这种方法，感觉它和Vue之间的组件传值一样，不说话了，直接上代码，测试吧，记得那个子文档是 3000端口的页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父文档&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        body{
            background: pink;
        }
        #iframe1{
            width: 100%;
            height: 400px;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;input type=&quot;button&quot; id=&quot;btn1&quot; value=&quot;改变子文档的东西&quot;&amp;gt;
&amp;lt;input type=&quot;button&quot; id=&quot;btn2&quot; value=&quot;删除span1的颜色&quot;&amp;gt;
&amp;lt;input type=&quot;button&quot; id=&quot;btn3&quot; value=&quot;改变span2的颜色&quot;&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;hr /&amp;gt;
&amp;lt;!--&amp;lt;iframe id=&quot;iframe1&quot; src=&quot;http://localhost:3000&quot; frameborder=&quot;0&quot;&amp;gt;&amp;lt;/iframe&amp;gt;--&amp;gt;
&amp;lt;iframe id=&quot;iframe1&quot; src=&quot;http://localhost:3000&quot; frameborder=&quot;0&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;script&amp;gt;
    var oIframe1 = document.getElementById('iframe1');


    var a = function fn(){
        document.body.style.background = 'green';
    };

    btn1.onclick = function () {
        console.log('传递的数据是','messageInfo');
        oIframe1.contentWindow.postMessage('changeColor',&quot;http://localhost:3000&quot;);

    };
    btn2.onclick = function () {
        //oIframe1.contentWindow.postMessage('changeSpan2Color',&quot;http://localhost:3000&quot;);
        oIframe1.contentWindow.postMessage('deleteSpan1',&quot;http://localhost:3000&quot;)
    };
    btn3.onclick = function () {
        oIframe1.contentWindow.postMessage('changeSPan2Color',&quot;http://localhost:3000&quot;)
    };


    window.addEventListener('message',function (res) {
        console.log(`这里是父文档`);
        if(res.data == 'GetWhiteLabel')
        document.body.style.background = 'yellow';
    })

&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　子文档&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot;
          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&amp;gt;
    &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        body{
            background: skyblue;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;这里是我的html页面呢&amp;lt;/h1&amp;gt;
    &amp;lt;span class=&quot;span1&quot;&amp;gt;span1标签&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;span2&quot;&amp;gt;span2标签&amp;lt;/span&amp;gt; &amp;lt;br&amp;gt;
    &amp;lt;input type=&quot;button&quot; id=&quot;btn1&quot; value=&quot;改变父文档的东西&quot;&amp;gt;
    &amp;lt;script&amp;gt;
    &amp;lt;!----&amp;gt;
       window.onload = function () {
           let parent = window.parent;
           window.addEventListener('message',function (res) {
               console.log(`******************这里是子页面的接收到的消息*************`);
               console.log(res);
               switch (res.data) {
                   case 'changeColor':
                       document.body.style.background = 'green';
                       break;
                   case 'deleteSpan1':
                       var oSpan1 = document.querySelector('.span1');
                       oSpan1.parentNode.removeChild(oSpan1);
                       break;
                   case 'changeSPan2Color':
                       var oSpan2 = document.querySelector('.span2');
                       oSpan2.style.color = 'red';
                       break;

               }

           });
           btn1.onclick = function () {
               parent.postMessage(&quot;GetWhiteLabel&quot;,&quot;*&quot;);
           }
       }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　还是同样的页面吧，实现一样的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1250927/201809/1250927-20180930173224737-1587155678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 上面有的地方写的不太好，存在一些安全问题，这个正是我现在正在做的地方，&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
oframe.contentWindow.postMessage(data,origin,false);  //这个是postMessage的API
// 发送的数据  子文档地址  false

// 在子文档中去监听那个message的变化
window.addEventListener(&quot;message&quot;,function(res){
    console.log(res.data);  //这个东西就是发送过去的数据
    // 去根据传过来的不同的数据 再去做相应的判断
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;子文档给父文档传数据的方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
parent.postMessage('message',origin,false);  // 同样也是类似的
    
    // 在父文档中去监听那个message的值
    window.addEventListener(&quot;message&quot;,function(res){
        console.log(res.data);  //这个东西就是发送过去的数据
        // 去根据传过来的不同的数据 再去做相应的判断
    });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这样做可以实现，就是有一些安全问题，就是所有人如果查看你网站的源码的话肯定会看到这个东西的，你写的这么随意，其他任何网站只要引入你的子文档，然后就可以通过自己去写一些东西去改变你的子文档。&lt;/p&gt;
&lt;p&gt;另外的一个缺点就感觉是 拓展性不好，你还需要去拿到子文档的网站，还需要再去修改它的源代码，感觉特别麻烦，如果有好几十个页面还要写好几十个吗。&lt;/p&gt;
&lt;p&gt;所以想到了一种传值的方法，不穿那个要判断的东西，把要修改的元素的html代码的函数给传过去，就是子文档去定义一个接口去接收，父文档把要执行的事件都传过去，然后子文档写一个执行事件的接口。这里就会出现刚才第一个那个安全问题了，更为严重，因为你不知道要执行的是什么事件。&lt;/p&gt;

&lt;p&gt;　　现在有一个想法就是后台做一个认证，就像微信的那个access_token认证一样的东西，加密，每次去操作子文档的时候，都要去请求，然后在子页面监听到这个事件之后解密再两个之间去对比，如果一样了才去执行，这个暂时还不知道如何去下手。&lt;/p&gt;

&lt;p&gt; 　　本文感觉特别有用的解决办法和参考的文章有如下还有更多的没有发，如果你遇到了同样的问题，看了我的解决不了问题，可以去看看下面的文章，当然还可以给我留言，必回复。&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://stackoverflow.com/questions/25098021/securityerror-blocked-a-frame-with-origin-from-accessing-a-cross-origin-frame&quot; target=&quot;_blank&quot;&gt;stackoverflow网页中的问答&lt;/a&gt;     博客园园友的文章 &lt;a href=&quot;https://www.cnblogs.com/webbest/p/7161174.html&quot; target=&quot;_blank&quot;&gt;关于iframe的实践&lt;/a&gt;     阮一峰大佬的  &lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html&quot; target=&quot;_blank&quot;&gt;浏览器同源政策及其规避方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　如果有更好的解决办法还望可以告知，谢谢！&lt;/p&gt;
&lt;p&gt;　　如果你阅读了本文章有了一些收获，我会感到非常开心，由于能力有限，文章有的部分解释的不到位，希望在以后的日子里能慢慢提高自己能力，如果不足之处，还望指正。&lt;/p&gt;
</description>
<pubDate>Sun, 30 Sep 2018 09:44:00 +0000</pubDate>
<dc:creator>一步一步向上爬</dc:creator>
<og:description>iframe这个标签之前了解过这个东西，知道它可以引入外来的网页，但是实际开发中没有用到过。这一次有一个需求是说准备要在网页中嵌套另外一个网站，用iframe这个标签，让我测试一下这个可不可以在自己的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/z937741304/p/9728160.html</dc:identifier>
</item>
<item>
<title>dubbo入门--原理、应用、实例 - 翔飞0520</title>
<link>http://www.cnblogs.com/lixiangfei/p/9732800.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lixiangfei/p/9732800.html</guid>
<description>
&lt;p&gt;最近想学习一下dubbo，看了很多前辈们的文章和资料，现对自己的理解做个总结：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;要说dubbo就先了解一下RPC：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;概念：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;RPC（Remote Procedure Call）：远程过程调用，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。&lt;strong&gt;它使得在本地调用远端的程序就好像是在调用本地的程序一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RPC协议&lt;strong&gt;假定&lt;/strong&gt;某些传输协议是存在的，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型（七层模型）中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;RPC调用过程：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1222808/201809/1222808-20180929113023430-1904658468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;客户端以本地服务方式调用服务&lt;/li&gt;
&lt;li&gt;client stub作为代理，然后处理调用与调用的参数&lt;/li&gt;
&lt;li&gt;client stub发送调用到远端的系统，通过TCP或UDP&lt;/li&gt;
&lt;li&gt;server stub处理client stub发过来的调用与参数&lt;/li&gt;
&lt;li&gt;server stub调用真正提供的服务&lt;/li&gt;
&lt;li&gt;server stub处理回复，然后发送给客户端&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Dubbo&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、什么是dubbo ：Dubbo是阿里巴巴SOA服务化治理方案的核心框架，是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。&lt;/p&gt;
&lt;p&gt;　　 &lt;em&gt;soa：“面向服务架构”，它提供的是一种架构风格和理念，而并非是一种技术或者产品。SOA提倡将不同应用程序的业务功能封装成“服务”并宿主起来，通常以接口和契约的形式暴露并提供给外界应用访问（通过交换消息），达到不同系统可重用的目的。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; 2、Dubbo的技术架构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1222808/201809/1222808-20180930154814978-1722769251.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们解释一下这个架构图：&lt;/p&gt;
&lt;p&gt;a、Consumer服务消费者（花钱的），Provider服务提供者（给钱的），Container服务容器（领钱的地方）。&lt;/p&gt;
&lt;p&gt;b、服务提供者先启动，然后注册服务（registry）。&lt;/p&gt;
&lt;p&gt;c、Monitor这是一个监控，图中虚线表明Consumer 和Provider通过异步的方式发送消息至Monitor，Consumer和Provider会将信息存放在本地磁盘，平均1min会发送一次信息。Monitor在整个架构中是可选的。&lt;/p&gt;
&lt;p&gt;d、Monitor功能需要单独配置，不配置或者配置以后，Monitor挂掉并不会影响服务的调用。&lt;/p&gt;

&lt;p&gt;3、Dubbo服务消费者调用过程&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1222808/201809/1222808-20180930172709434-1829203131.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是服务消费的主过程：&lt;/p&gt;
&lt;p&gt;首先通过 &lt;code&gt;ReferenceConfig&lt;/code&gt; 类的 &lt;code&gt;private void init()&lt;/code&gt; 方法会先检查初始化所有的配置信息后，调用 &lt;code&gt;private T createProxy(Map map)&lt;/code&gt; 创建代理，消费者最终得到的是服务的代理， 在 &lt;code&gt;createProxy&lt;/code&gt; 接着调用 &lt;code&gt;Protocol&lt;/code&gt; 接口实现的 &lt;code&gt;Invoker refer(Class type, URL url)&lt;/code&gt; 方法生成 &lt;code&gt;Invoker&lt;/code&gt; 实例(如上图中的红色部分)，这是服务消费的关键。接下来把 &lt;code&gt;Invoker&lt;/code&gt; 通过 &lt;code&gt;ProxyFactory&lt;/code&gt; 代理工厂转换为客户端需要的接口(如： &lt;code&gt;HelloWorld&lt;/code&gt; )，创建服务代理并返回。&lt;/p&gt;
&lt;h2&gt;消费端的初始化过程&lt;/h2&gt;
&lt;p&gt;1、把服务引用的信息封装成URL并注册到zk注册中心;&lt;/p&gt;
&lt;p&gt;2、监听注册中心的服务的上下线;&lt;/p&gt;
&lt;p&gt;3、连接服务提供端，创建NettyClient对象;&lt;/p&gt;
&lt;p&gt;4、将这些信息包装成DubboInvoker消费端的调用链，创建消费端Invoker实例的服务代理并返回;&lt;/p&gt;
&lt;h2&gt;消费端的服务引用过程&lt;/h2&gt;
&lt;p&gt;1、经过负载均衡策略，调用提供者;&lt;/p&gt;
&lt;p&gt;2、选择其中一个服务的URL与提供者netty建立连接，使用ProxyFactory 创建远程通信，或者本地通信的，Invoker发到netty服务端;&lt;/p&gt;
&lt;p&gt;3、服务器端接收到该Invoker信息后，找到对应的本地Invoker，处理Invocation请求;&lt;/p&gt;
&lt;p&gt;4、获取异步，或同步处理结果;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;异步 不需要返回值：直接调用ExchangeClient.send()方法;&lt;/li&gt;
&lt;li&gt;同步 需要返回值：使用ExchangeClient.request()方法，返回一个ResponseFuture，一直阻塞到服务端返回响应结果;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 4、最简单的dubbo实例&lt;/p&gt;
&lt;h3 id=&quot;1-服务提供方和消费方都需要的包这里我新建的maven工程为pom工程将共同的项目依赖写到pomxml中&quot;&gt;1. 服务提供方和消费方都需要的包（这里我新建的maven工程为pom工程，将共同的项目依赖写到pom.xml中）&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;总的项目结构为&lt;/strong&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://img-blog.csdn.net/20171226145658830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamluZ3lhbmdWNTg3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pom.xml文件内容为&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs xml has-numbering&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;project &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot; &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &lt;span class=&quot;hljs-attribute&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;4.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;com.test&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;dubbo-demo&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;0.0.1-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;pom&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;

   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;properties&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;motan.version&amp;gt;0.3.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;motan.version&amp;gt;
        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</description>
<pubDate>Sun, 30 Sep 2018 09:33:00 +0000</pubDate>
<dc:creator>翔飞0520</dc:creator>
<og:description>最近想学习一下dubbo，看了很多前辈们的文章和资料，现对自己的理解做个总结： 要说dubbo就先了解一下RPC： 概念： RPC（Remote Procedure Call）：远程过程调用，是一种通</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lixiangfei/p/9732800.html</dc:identifier>
</item>
</channel>
</rss>