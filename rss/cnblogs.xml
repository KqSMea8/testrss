<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Mysql基础1-基础语法-字段类型 - young67</title>
<link>http://www.cnblogs.com/yangp67/p/9278338.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangp67/p/9278338.html</guid>
<description>&lt;p&gt;主要：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;基础&lt;/li&gt;
&lt;li&gt;字段类型&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a onclick=&quot;window.open('https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180707234859564-1850854996.png','','resizable=yes,left='+(screen.availWidth/2-0)+',top='+(screen.availHeight/2-0)+'');return false;&quot; href=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180707234859564-1850854996.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180707234859564-1850854996.png&quot; alt=&quot;&quot; width=&quot;855&quot; height=&quot;348&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a onclick=&quot;window.open('https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180707235329760-291712194.png','','resizable=yes,left='+(screen.availWidth/2-0)+',top='+(screen.availHeight/2-0)+'');return false;&quot; href=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180707235329760-291712194.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180707235329760-291712194.png&quot; alt=&quot;&quot; width=&quot;928&quot; height=&quot;483&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;基础&lt;/h2&gt;
&lt;h3&gt;　　基本概念&lt;/h3&gt;
&lt;p&gt;　&lt;strong&gt;&lt;span&gt;　1） 数据库分类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　层次数据库，网状数据库，关系数据库&lt;/p&gt;
&lt;p&gt;　　　　常见：SQL Server, Oracle,infomix,sybase,ibmDB2,Mysql&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;2）数据库存储的本质和表现:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　存储本质： 将 数据值 &lt;strong&gt;通过数据管理系统&lt;/strong&gt;进行有序的存储&lt;/p&gt;
&lt;p&gt;　　　　存储表现：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;span&gt;&lt;strong&gt;每个数据库对应一个文件夹&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;span&gt;&lt;strong&gt;每个数据表对应一个或多个文件&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　&lt;span&gt;&lt;strong&gt;3）mysql数据库的各层次关系：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　1个数据库系统包含有多个数据库&lt;/p&gt;
&lt;p&gt;　　　　1个数据库可以有多张数据表&lt;/p&gt;
&lt;p&gt;　　　　 一个数据表可以有多个字段（数据项）和多行数据（记录）&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;4)基本概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　sql ：是关系数据库的　语言标准。　Struct Query Language 结构化查询语言&lt;/p&gt;
&lt;p&gt;　　　　数据库database： 存储各种数据data&lt;/p&gt;
&lt;p&gt;　　　　数据库管理系统dbms： Database Management system&lt;/p&gt;
&lt;p&gt;　　　　数据表table,字段field,列column,行row,记录record&lt;/p&gt;
&lt;h3&gt;　　数据库操作的基本模式（流程）&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ce3fddda-7e2e-4282-8f5a-b64c6bd9c0bd')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_ce3fddda-7e2e-4282-8f5a-b64c6bd9c0bd&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ce3fddda-7e2e-4282-8f5a-b64c6bd9c0bd&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ce3fddda-7e2e-4282-8f5a-b64c6bd9c0bd',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ce3fddda-7e2e-4282-8f5a-b64c6bd9c0bd&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
step 1:　建立连接：身份认证

step ２:　客户端发送sql命令

step ３:　服务端执行命令，返回结果

step ４:　客户端接收结果并显示

step ５:　断开连接
                    
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【点击查看】数据库操作的基本模式（流程）&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　mysql系统级操作&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　安装与配置 【略】&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;　　启动与停止mysql数据库服务&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;span&gt;&lt;strong&gt;命令模式【管理员】：&lt;/strong&gt;&lt;/span&gt;　-- 非管理员才做可能发生 提示 “发生系统错误 5”&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;启动：net start mysql

停止：net stop mysql&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　&lt;span&gt;&lt;strong&gt;　服务模式：通过服务来启动或停止&lt;/strong&gt;&lt;/span&gt;     控制面板》管理工具》服务》mysql   启动/停止&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;　　登录与退出：&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　　　　首先设置mysql环境变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
登录：  
    形式1： mysql -h 服务器地址 -u  用户名 -p -P 端口号

    形式2： mysql --host=服务器地址 --user=登录名 --port=端口号 --password&lt;br/&gt;　　　　　　默认端口： 3306

退出： 
    exit 或 quit
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;&lt;strong&gt;　　备份与恢复数据&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　　　通常是用于数据库的“&lt;strong&gt;迁移&lt;/strong&gt;”：将&lt;strong&gt;某台数据库服务器中的某个库&lt;/strong&gt;，“搬迁”到另一个数据库服务器中去&lt;/p&gt;
&lt;p&gt;　　　　　　也常用于数据的“&lt;strong&gt;安全备份&lt;/strong&gt;”：就是数据库实际运行中，防止数据库系统崩溃，防止数据库被黑客入侵&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('15cb88f8-0398-43e1-9557-330ab8f81525')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_15cb88f8-0398-43e1-9557-330ab8f81525&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_15cb88f8-0398-43e1-9557-330ab8f81525&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('15cb88f8-0398-43e1-9557-330ab8f81525',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_15cb88f8-0398-43e1-9557-330ab8f81525&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
备份 【管理员身份】： 
    mysqldump -h 服务器地址 -u 登录名 -P 端口号 -p 数据库名&amp;gt;完整路径的文件名

恢复： 
    未登录恢复：      
        mysql -h 服务器地址  -u 登录名 -P 端口号 -p  数据库名&amp;lt;完整路径的sql文件名

    登录后恢复：
        source '备份数据文件的完整路径'        
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【点击查看】备份与恢复形式&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　基础语法&lt;/h3&gt;
&lt;p&gt;　　　　1)  注释：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('579658b5-4ee6-4a67-a452-fd2695188078')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_579658b5-4ee6-4a67-a452-fd2695188078&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_579658b5-4ee6-4a67-a452-fd2695188078&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('579658b5-4ee6-4a67-a452-fd2695188078',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_579658b5-4ee6-4a67-a452-fd2695188078&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
单行注释: 
    #注释内容        

    -- 注释内容（-- 与注释之间有一个空格）

多行注释
    /*注释内容*/
        注(经过测试)： 如果是  /*! 语句 */; 这个仍然会执行   如 /*!show tables */;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【点击查看】单行注释与多行注释&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　2）语句行&lt;/p&gt;
&lt;p&gt;　　　　　　结束符： 分号（默认） &lt;/p&gt;
&lt;p&gt;　　　　　&lt;span&gt;&lt;strong&gt;　修改结束符：   delimiter 结束符&lt;/strong&gt;&lt;/span&gt;   如： delimiter //&lt;/p&gt;
&lt;p&gt;　　　　3）大小写&lt;/p&gt;
&lt;p&gt;　　　　　　不区分大小写&lt;/p&gt;
&lt;p&gt;　　　　　　但&lt;span&gt;&lt;strong&gt;对于区分大小写的系统中，生成文件或文件夹的操作是区分大小写的&lt;/strong&gt;&lt;/span&gt;  如： 创建库，表会生成对应目录和文件&lt;/p&gt;
&lt;p&gt;　　　　　　　　文件或目录在Linux，Unix中严格区分大小写。 windows中不区分大小写&lt;/p&gt;
&lt;p&gt;　　　　4） 命名规则&lt;/p&gt;
&lt;p&gt;　　　　　　    字母和下划线，不用数字开头。&lt;/p&gt;
&lt;p&gt;　　　　　　　如果是&lt;strong&gt;非常规字符，要使用反引号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　   数据库名，表名，视图名，字段名，函数名，过程名&lt;strong&gt;&lt;span&gt;通常使用小写，并使用下划线分割法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;字段类型&lt;/h2&gt;
&lt;p&gt;　　1) 形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
字段名  类型名 [(M)] [unsigned] [zerofill]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　 M：&lt;span&gt;&lt;strong&gt;显示长度&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;与zerofil结合使用  不够长度左侧自动补0&lt;/span&gt;&lt;br/&gt;                设置zerofill, 则表示该字段同时具备unsigned。&lt;/p&gt;
&lt;p&gt;　　2） 主要分3类&lt;/p&gt;
&lt;p&gt;　　　　数值型，字符型，时间型&lt;/p&gt;
&lt;h3&gt;　　数值型&lt;/h3&gt;
&lt;p&gt;　　　　1） 整数型：　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
类型　　　　　　　　　　　　　　　 所占字节数&lt;br/&gt;tinyint                       　　　　 1字节
smallint                        2字节
mediumint                       3字节
int                             4字节
bigint                          8字节        
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b40d944c-ee24-489d-af77-512277c425c2')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_b40d944c-ee24-489d-af77-512277c425c2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b40d944c-ee24-489d-af77-512277c425c2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b40d944c-ee24-489d-af77-512277c425c2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b40d944c-ee24-489d-af77-512277c425c2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; tab_int(
    f1 &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; unsigned,
    f2 &lt;/span&gt;&lt;span&gt;tinyint&lt;/span&gt;&lt;span&gt; zerofill,
    f3 &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;) zerofill
);
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; tab_int (f1,f2,f3) &lt;span&gt;values&lt;/span&gt;( &lt;span&gt;15&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;  &lt;span&gt;from&lt;/span&gt; tab_int;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【点击查看】整数型测试Demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　2)  小数型&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;strong&gt;单精度浮点型float&lt;/strong&gt;: （单精度 4个字节，&lt;span&gt;精度6~7位&lt;/span&gt;有效数字）   &lt;/p&gt;
&lt;p&gt;　　　　　　&lt;strong&gt;双精度double:&lt;/strong&gt; （双精度 8个字节，约20个有效数字，&lt;span&gt;别名：real&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;strong&gt;定点型&lt;/strong&gt;： decimal (&lt;span&gt;别名： dec numeric fixed&lt;/span&gt;, 整数&lt;span&gt;最大65位，小数最多30位&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;　　　　　　　　 如果整数部分超过最大设定的位数，则会自动设置为最大值。 如 decimal(5,2),   插入数据1234.11 则结果为 999.99&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;decimal&lt;/span&gt;(总的位数，小数位数)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1869c012-4296-43f0-a81e-77fe8933480f')&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_1869c012-4296-43f0-a81e-77fe8933480f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1869c012-4296-43f0-a81e-77fe8933480f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1869c012-4296-43f0-a81e-77fe8933480f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1869c012-4296-43f0-a81e-77fe8933480f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; tab_float(
    f1 &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;,
    f2 &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;,
    f3 &lt;/span&gt;&lt;span&gt;decimal&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;)  &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 总数10位数， 小数3位&lt;/span&gt;
&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; tab_float (f1, f2, f3) &lt;span&gt;values&lt;/span&gt;&lt;span&gt; 
    (&lt;/span&gt;&lt;span&gt;123.456789&lt;/span&gt;, &lt;span&gt;123.456789&lt;/span&gt;, &lt;span&gt;123.456789&lt;/span&gt;&lt;span&gt;),
    (&lt;/span&gt;&lt;span&gt;123456789&lt;/span&gt;, &lt;span&gt;123456789&lt;/span&gt;, &lt;span&gt;1234567&lt;/span&gt;&lt;span&gt;),
    (&lt;/span&gt;&lt;span&gt;123456789&lt;/span&gt;, &lt;span&gt;123456789&lt;/span&gt;, &lt;span&gt;1234567.11&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tab_float;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【点击查看】浮点型测试Demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180707225236165-923502004.png&quot; alt=&quot;&quot; width=&quot;480&quot; height=&quot;155&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;　字符型&lt;/h3&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;字符型要使用引号引起来&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;　　vachar类型：&lt;/h4&gt;
&lt;p&gt;　　　　概念： &lt;strong&gt;变长字符串，使用时必须设定其长度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　　　最大长度： 理论最大65535个字符，实际最大只能是65533个字符   &lt;/p&gt;
&lt;p&gt;　　　　　　原因： 一个表格的一行 的数据存储最大容量限制： 65535&lt;/p&gt;
&lt;p&gt;　　　　　　编码不同则最大长度也不同：&lt;/p&gt;
&lt;p&gt;　　　　　　　　存储中文 gbk： 最大长度是 65533/2 个  &lt;/p&gt;
&lt;p&gt;　　　　　　　　存储中文 utf8： 最大长度是 65533/3 个&lt;/p&gt;
&lt;p&gt;　　　　实际存储： 存储长度由存储内容决定，设置值为最多可存储的字符个数&lt;/p&gt;
&lt;h4&gt;　　char类型&lt;/h4&gt;
&lt;p&gt;　　　　概念： 定长字符串 , 使用时一般需要设置其长度。 &lt;strong&gt;不设置长度，则默认是1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　最大长度： 255个&lt;/p&gt;
&lt;p&gt;　　　　实际存储： 如果少于设定长度， 会以空格填满&lt;/p&gt;
&lt;p&gt;　　　　适用于： 存储的数据长度是固定长度的字符。 如： 邮编， 手机号码等&lt;/p&gt;
&lt;h4&gt;　　enum 类型&lt;/h4&gt;
&lt;p&gt;　　　　概念： (枚举)单选项字符串数据类型， 使用时，需要给定 固定的几个选项。 存储的时候，只存储其中一个值&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;&lt;strong&gt;　形式：  enum(&quot;选项1&quot;, &quot;选项2&quot;,....)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　实际存储： 字符串选项值&lt;span&gt;&lt;strong&gt;对应数字： 1,2,3，4,5，..   最多65535个选项&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　写入数据形式： 可以是该选项字符串本身，也可以用对应的数字&lt;/p&gt;
&lt;p&gt;　　　　适用于： 存储表单界面中的 “单选项值”&lt;/p&gt;
&lt;h4&gt;　　set 类型&lt;/h4&gt;
&lt;p&gt;　　　　概念： &lt;strong&gt;多选项字符串数据类型&lt;/strong&gt;， 使用时，需要给定 固定的几个选项。 存储的时候，存储其中若干个值&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&lt;strong&gt;形式： set(&quot;选项1&quot;, &quot;选项2&quot;,....)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　实际存储： 字符串选项值&lt;span&gt;对应数字 1,2,4,8,16&lt;/span&gt;... &lt;strong&gt;&lt;span&gt;最多64个选项&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　写入数据形式： 可以用选项字符串并用逗号隔开， 也可以使用对应的“数字的和”&lt;/p&gt;
&lt;p&gt;　　　　适用于： 存储表单界面中的 “多选项值”&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e284537a-3b28-4abd-9410-fdef1f8ca131')&quot; readability=&quot;44&quot;&gt;&lt;img id=&quot;code_img_closed_e284537a-3b28-4abd-9410-fdef1f8ca131&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e284537a-3b28-4abd-9410-fdef1f8ca131&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e284537a-3b28-4abd-9410-fdef1f8ca131',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e284537a-3b28-4abd-9410-fdef1f8ca131&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;83&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; enum  set 使用Demo&lt;/span&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; enum_set(
   id &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; unsigned auto_increment &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;,
   gender enum(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
   fav &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;篮球&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;足球&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;跑步&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;读书&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;写字&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   
);

&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; enum_set (id, gender, fav) &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;篮球&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;); &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 两行enum字段一致&lt;/span&gt;

&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; enum_set (id, gender, fav) &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;篮球,跑步,写字&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;19&lt;/span&gt;); &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 两行set字段一致&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt;  篮球=1 跑步=2 写字=16  ==&amp;gt; 对应的和19&lt;/span&gt;

&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; enum_set;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【点击查看】set与enum操作Demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180708004236121-2008109957.png&quot; alt=&quot;&quot; width=&quot;378&quot; height=&quot;158&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　text 类型&lt;/h4&gt;
&lt;p&gt;　　概念： 长文本字符类型。其中存储的数据不占表格中的数据容量限制&lt;/p&gt;
&lt;p&gt;　　其他同类型： &lt;strong&gt;smalltext  tinytext  longtext&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;　　其他类型&lt;/h4&gt;
&lt;p&gt;　　&lt;strong&gt;binary类型&lt;/strong&gt;： 定长二进制字符串类型。 存储二进制值&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;varbinary 类型&lt;/strong&gt;：  变长二进制字符串类型。存储二进制值&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;blob 类型&lt;/strong&gt;：二进制数据类型。　存储二进制值。　适用于存储图片，视频，其他文件等。&lt;/p&gt;
&lt;h3&gt;　时间型&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;时间类型： 要用引号引起来&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1) &lt;strong&gt;datetime 类型&lt;/strong&gt;： 时间日期类型&lt;/p&gt;
&lt;p&gt;　　2) &lt;strong&gt;date类型&lt;/strong&gt;： 日期类型&lt;/p&gt;
&lt;p&gt;　　3) &lt;strong&gt;time 类型&lt;/strong&gt;：时间类型&lt;/p&gt;
&lt;p&gt;　　4) &lt;strong&gt;year 类型&lt;/strong&gt;：年份类型&lt;/p&gt;
&lt;p&gt;　　5) &lt;strong&gt;timestamp&lt;/strong&gt; 类型： 时间戳类型。 是一个数字。　　 不需要手动插入数据，系统自动填入&lt;/p&gt;
&lt;p&gt;　　　　js中获取事件戳： gettime() ; 单位是毫秒 &lt;/p&gt;
&lt;p&gt;　　　　php中获取时间戳： time(); 单位是秒&lt;/p&gt;
&lt;p&gt;　　　　mysql中： 自动获得时间戳的数据值，既 now()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3d6cd835-5705-4958-8cec-29a51e1d6f4c')&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_3d6cd835-5705-4958-8cec-29a51e1d6f4c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3d6cd835-5705-4958-8cec-29a51e1d6f4c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3d6cd835-5705-4958-8cec-29a51e1d6f4c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3d6cd835-5705-4958-8cec-29a51e1d6f4c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt; 时间类型数据表&lt;/span&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; tab_time(
  dt &lt;/span&gt;&lt;span&gt;datetime&lt;/span&gt;&lt;span&gt;,
   d date,
   t time, 
   y &lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;,
   ts &lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;    &lt;span&gt;--&lt;/span&gt;&lt;span&gt; 该字段不需要插入数据，系统自动填入&lt;/span&gt;
&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; tab_time (dt,d,t,y) &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-07-07 24:24:24&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018-07-07&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;24:24:24&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),(now(),now(),now(),now());

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tab_time;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;【点击查看】时间类型Demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180708010109998-1014098802.png&quot; alt=&quot;&quot; width=&quot;462&quot; height=&quot;120&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;其他类型&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;1） 位类型 bit&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　使用形式： bit[(M)]       其中M是1-64的数字。 表示使用多少二进制数字来存储数据&lt;/p&gt;
&lt;p&gt;　　　　插入形式：  b 'value'   如 b '101'&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;2) 序列类型 serial&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　实质是  bigint  unsigned not null auto_increment unique 的一个别名&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;3） 布尔类型 bool&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　实质是 tinyint(1) 的一个同义词。 其值为0表示false, 否则表示true&lt;/p&gt;
</description>
<pubDate>Sat, 07 Jul 2018 17:11:00 +0000</pubDate>
<dc:creator>young67</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangp67/p/9278338.html</dc:identifier>
</item>
<item>
<title>Redis Codis 部署安装 - jyzhou</title>
<link>http://www.cnblogs.com/zhoujinyi/p/9249873.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhoujinyi/p/9249873.html</guid>
<description>&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;关于Redis的高可用除了只身的&lt;a href=&quot;https://www.cnblogs.com/zhoujinyi/p/5585723.html&quot; target=&quot;_blank&quot;&gt;Sentinel&lt;/a&gt;和&lt;a href=&quot;https://www.cnblogs.com/zhoujinyi/p/6477133.html&quot; target=&quot;_blank&quot;&gt;Cluster&lt;/a&gt;之外，还有一个用的比较多的是&lt;a href=&quot;https://github.com/CodisLabs/codis&quot; target=&quot;_blank&quot;&gt;Codis&lt;/a&gt;，由于公司的Redis大部分都使用Codis，本文就针对Codis进行相关的安装部署进行说明，来好好的学习Codis。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有显著区别 (&lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/unsupported_cmds.md&quot; target=&quot;_blank&quot;&gt;不支持的命令列表&lt;/a&gt;), 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务。与&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/twitter/twemproxy&quot; target=&quot;_blank&quot;&gt;Twemproxy&lt;/a&gt; 和 Redis Cluster 对比：&lt;/span&gt; &lt;/p&gt;
&lt;table&gt;&lt;tbody readability=&quot;3.9047619047619&quot;&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt; &lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;Codis&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;Twemproxy&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;Redis Cluster&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;resharding without restarting cluster&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;No&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;pipeline&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;No&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;hash tags for multi-key operations&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.7454545454545&quot;&gt;&lt;td&gt;&lt;span&gt;multi-key operations while resharding&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;-&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;No(&lt;a href=&quot;http://redis.io/topics/cluster-spec#multiple-keys-operations&quot; rel=&quot;nofollow&quot;&gt;details&lt;/a&gt;)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;Redis clients supporting&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Any clients&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Any clients&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Clients have to support cluster protocol&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;br/&gt;环境&lt;/h2&gt;
&lt;table class=&quot;confluenceTable&quot;&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr&gt;&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;机器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;服务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;端口&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;端口说明&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;依赖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;confluenceTd&quot; rowspan=&quot;4&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;192.168.163.131/132/133(Ubuntu 16.04)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; rowspan=&quot;4&quot;&gt;
&lt;p&gt;&lt;span&gt;Codis&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;7021/7022&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;server端口:主/从（三台）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; rowspan=&quot;4&quot;&gt;
&lt;p&gt;&lt;span&gt;GO&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;11080&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;proxy管理端口（三台）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;18080&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;dashboard管理端口（一台）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;10890&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;fe管理端口（一台）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;confluenceTd&quot; rowspan=&quot;3&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;192.168.163.131/132/133(Ubuntu 16.04)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; rowspan=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;2181&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;zk客户端监听端口（三台）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; rowspan=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;JDK&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;2888&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;zk内部通讯端口（三台）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;confluenceTd&quot;&gt;
&lt;p&gt;&lt;span&gt;3888&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;zk选举端口（三台）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Codis 组件说明&lt;/h2&gt;
&lt;ul readability=&quot;5.4443319838057&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;Codis Server：基于 redis-3.2.8 分支开发。增加了额外的数据结构，以支持 slot 有关的操作以及数据迁移指令。具体的修改可以参考文档 &lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/redis_change_zh.md&quot;&gt;redis 的修改&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Codis Proxy：客户端连接的 Redis 代理服务, 实现了 Redis 协议。 除部分命令不支持以外，表现的和原生的 Redis 没有区别（就像 Twemproxy）。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;对于同一个业务集群而言，可以同时部署多个 codis-proxy 实例；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;不同 codis-proxy 之间由 codis-dashboard 保证状态同步。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Codis Dashboard：集群管理工具，支持 codis-proxy、codis-server 的添加、删除，以及据迁移等操作。在集群状态发生改变时，codis-dashboard 维护集群下所有 codis-proxy 的状态的一致性。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;对于同一个业务集群而言，同一个时刻 codis-dashboard 只能有 0个或者1个；(单点？）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;所有对集群的修改都必须通过 codis-dashboard 完成。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Codis Admin：集群管理的命令行工具。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;可用于控制 codis-proxy、codis-dashboard 状态以及访问外部存储。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Codis FE：集群管理界面。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;多个集群实例共享可以共享同一个前端展示页面；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;通过配置文件管理后端 codis-dashboard 列表，配置文件可自动更新。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Storage：为集群状态提供外部存储。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;提供 Namespace 概念，不同集群的会按照不同 product name 进行组织；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;目前仅提供了 Zookeeper、Etcd、Fs 三种实现，但是提供了抽象的 interface 可自行扩展。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; 各个组件之间的关系：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703212324845-1586187945.png&quot; alt=&quot;&quot; width=&quot;770&quot; height=&quot;383&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;客户端通过zk提供的信息访问Proxy，Proxy是无状态的，按照需要可以部署多个。通过Proxy访问多个Group（Server），Server的HA通过Sentinel来保证。更多的信息可以参考&lt;a href=&quot;https://github.com/CodisLabs/codis/tree/release3.2&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Codis主要由以下特点&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;可以无缝迁移到codis，自带迁移工具&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可以动态扩容和缩容&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;多业务完全透明，业务不知道运行的是codis&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持多核心CPU，twemproxy只能单核&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;codis是中心基于proxy的设计，是客户端像连接单机一样操作proxy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;有部分命令不能支持，比如keys *等&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持group划分，组内可以设置一个主多个从，通过sentinel 监控redis主从，当主down了自动将从切换为主&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;设置的进程要最大等于CPU的核心，不能超过CPU的核心数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;其依赖于zookeeper，里面保存的key是redis主机位置，因此zookeeper要做高可用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;监控可以使用接口和dashboard&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;下载安装&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;安装包下载：&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#go：
&lt;/span&gt;&lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dl.google.com/go/go1.10.3.linux-amd64.tar.gz&lt;/span&gt;
&lt;span&gt;
#zookeeper：
&lt;/span&gt;&lt;span&gt;wget&lt;/span&gt; http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.12/zookeeper-3.4.12.tar.gz&lt;/span&gt;
&lt;span&gt;
#codis：
git clone https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/CodisLabs/codis.git -b release3.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;安装：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;安装依赖包：apt-get install gcc make autoconf libtool automake&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1）&lt;a href=&quot;https://www.jianshu.com/p/de90172ea680&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;zookeeper安装&lt;/span&gt;&lt;/a&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;zookeeper依赖JDK，需要先安装JDK：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#jdk：
&lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; add-apt-repository ppa:webupd8team/&lt;span&gt;java
&lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; apt-&lt;span&gt;get update
&lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; oracle-java8-installer
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;：解压：
&lt;/span&gt;&lt;span&gt;tar&lt;/span&gt; -xf zookeeper-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;12&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz 
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; zookeeper-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;12&lt;/span&gt; /usr/local/&lt;span&gt;zookeeper

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;：编辑配置文件：
cd &lt;/span&gt;/usr/local/zookeeper/&lt;span&gt;conf
&lt;/span&gt;&lt;span&gt;cp&lt;/span&gt;&lt;span&gt; zoo_sample.cfg zoo.cfg

配置文件(zoo.cfg)见下面&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;zoo.cfg：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5f7c86d8-7250-4a65-b4f0-19918adef964')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_5f7c86d8-7250-4a65-b4f0-19918adef964&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5f7c86d8-7250-4a65-b4f0-19918adef964&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5f7c86d8-7250-4a65-b4f0-19918adef964',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5f7c86d8-7250-4a65-b4f0-19918adef964&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# The number of milliseconds of each tick
tickTime&lt;/span&gt;=&lt;span&gt;2000&lt;/span&gt;&lt;span&gt;
# The number of ticks that the initial 
# synchronization phase can take
initLimit&lt;/span&gt;=&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
# The number of ticks that can pass between 
# sending a request and getting an acknowledgement
syncLimit&lt;/span&gt;=&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
# the directory where the snapshot is stored.
# &lt;/span&gt;&lt;span&gt;do&lt;/span&gt; not use /tmp &lt;span&gt;for&lt;/span&gt; storage, /&lt;span&gt;tmp here is just 
# example sakes.
dataDir&lt;/span&gt;=/tmp/&lt;span&gt;zookeeper
# the port at &lt;/span&gt;&lt;span&gt;which&lt;/span&gt;&lt;span&gt; the clients will connect
clientPort&lt;/span&gt;=&lt;span&gt;2181&lt;/span&gt;&lt;span&gt;
# the maximum number of client connections.
# increase this &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; you need to handle &lt;span&gt;more&lt;/span&gt;&lt;span&gt; clients
#maxClientCnxns&lt;/span&gt;=&lt;span&gt;60&lt;/span&gt;&lt;span&gt;
#
# Be sure to read the maintenance section of the 
# administrator guide before turning on autopurge.
#
# http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance&lt;/span&gt;
&lt;span&gt;#
# The number of snapshots to retain &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; dataDir
#autopurge.snapRetainCount&lt;/span&gt;=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
# Purge task interval &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; hours
# Set to &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; to disable auto purge feature
#autopurge.purgeInterval&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;配置文件说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;tickTime: ZooKeeper 中使用的基本时间单元, 以毫秒为单位, 默认值是 2000。它用来调节心跳和超时。例如, 默认的会话超时时间是两倍的 tickTime。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;initLimit: 默认值是 10, 即 tickTime 属性值的 10 倍。它用于配置允许 followers 连接并同步到 leader 的最大时间。如果 ZooKeeper 管理的数据量很大的话可以增加这个值。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;syncLimit: 默认值是 5, 即 tickTime 属性值的 5 倍。它用于配置leader 和 followers 间进行心跳检测的最大延迟时间。如果在设置的时间内 followers 无法与 leader 进行通信, 那么 followers 将会被丢弃。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;dataDir: ZooKeeper 用来存储内存数据库快照的目录, 并且除非指定其它目录, 否则数据库更新的事务日志也将会存储在该目录下。建议配置 dataLogDir 参数来指定 ZooKeeper 事务日志的存储目录。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;dataLogDir：log目录，不设置则默认和数据目录相同&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;clientPort: 服务器监听客户端连接的端口, 也即客户端尝试连接的端口, 默认值是 2181。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;maxClientCnxns: 在 socket 级别限制单个客户端与单台服务器之前的并发连接数量, 可以通过 IP 地址来区分不同的客户端。它用来防止某种类型的 DoS 攻击, 包括文件描述符耗尽。默认值是 60。将其设置为 0 将完全移除并发连接数的限制。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;autopurge.snapRetainCount: 配置 ZooKeeper 在自动清理的时候需要保留的数据文件快照的数量和对应的事务日志文件, 默认值是 3。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;autopurge.purgeInterval: 和参数 autopurge.snapRetainCount 配套使用, 用于配置 ZooKeeper 自动清理文件的频率, 默认值是 1, 即默认开启自动清理功能, 设置为 0 则表示禁用自动清理功能。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;创建需要的目录：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; -p /data/zookeeper/&lt;span&gt;data
&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; -p /data/zookeeper/log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;设置环境变量：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vim /etc/&lt;span&gt;profile
#添加
# ZooKeeper Env
export ZOOKEEPER_HOME&lt;/span&gt;=/usr/local/&lt;span&gt;zookeeper
export PATH&lt;/span&gt;=$PATH:$ZOOKEEPER_HOME/&lt;span&gt;bin

#应用环境变量
source &lt;/span&gt;/etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;① 单机模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;zoo.cfg配置文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
tickTime=&lt;span&gt;2000&lt;/span&gt;&lt;span&gt;
initLimit&lt;/span&gt;=&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
syncLimit&lt;/span&gt;=&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
dataDir&lt;/span&gt;=/data/zookeeper/&lt;span&gt;data
dataLogDir&lt;/span&gt;=/data/zookeeper/&lt;span&gt;log
clientPort&lt;/span&gt;=&lt;span&gt;2181&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;启动：zkServer.sh start&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
root@test1:~# &lt;strong&gt;zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; start&lt;/strong&gt;
ZooKeeper JMX enabled by default
Using config: &lt;/span&gt;/usr/local/zookeeper/bin/../conf/&lt;span&gt;zoo.cfg
Starting zookeeper ... STARTED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查看状态：zkServer.sh status&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
root@test1:~# &lt;strong&gt;zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; status&lt;/strong&gt;
ZooKeeper JMX enabled by default
Using config: &lt;/span&gt;/usr/local/zookeeper/bin/../conf/&lt;span&gt;zoo.cfg
Mode: &lt;strong&gt;standalone&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;关闭：zkServer.sh stop&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
root@test1:~# &lt;strong&gt;zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; stop&lt;/strong&gt;
ZooKeeper JMX enabled by default
Using config: &lt;/span&gt;/usr/local/zookeeper/bin/../conf/&lt;span&gt;zoo.cfg
Stopping zookeeper ... STOPPED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;在单机模式中, Mode 的值是 &quot;standalone&quot;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;② 集群模式(3台）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;zoo.cfg配置文件：对比单机模式多了&lt;strong&gt;&lt;code class=&quot;javascript&quot;&gt;server.ID&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
tickTime=&lt;span&gt;2000&lt;/span&gt;&lt;span&gt;
initLimit&lt;/span&gt;=&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
syncLimit&lt;/span&gt;=&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
dataDir&lt;/span&gt;=/data/zookeeper/&lt;span&gt;data
dataLogDir&lt;/span&gt;=/data/zookeeper/&lt;span&gt;log
clientPort&lt;/span&gt;=&lt;span&gt;2181&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;#要是一台装三个zk，可以按照端口区分：192.168.163.131:2887:3887/192.168.163.132:2887:3887/192.168.163.133:2887:3887
server.&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;:&lt;span&gt;2888&lt;/span&gt;:&lt;span&gt;3888&lt;/span&gt;&lt;span&gt;
server.&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.132&lt;/span&gt;:&lt;span&gt;2888&lt;/span&gt;:&lt;span&gt;3888&lt;/span&gt;&lt;span&gt;
server.&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.133&lt;/span&gt;:&lt;span&gt;2888&lt;/span&gt;:&lt;span&gt;3888&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;2888表示zookeeper监听端口，3888表示zookeeper选举通信端口；以上server.1 server.2 server.3都要配置到三台zookeeper的zoo.cfg文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;配置说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;19&quot;&gt;
&lt;ul readability=&quot;9.5&quot;&gt;&lt;li readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;span&gt;集群模式中, 集群中的每台机器都需要感知其它机器, 在 zoo.cfg 配置文件中, 可以按照如下格式进行配置, 每一行代表一台服务器配置:&lt;code&gt; &lt;span&gt;&lt;strong&gt;server.id=host:port:port&lt;/strong&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;id 被称为 Server ID, 用来标识服务器在集群中的序号。同时每台 ZooKeeper 服务器上, 都需要在数据目录(即 dataDir 指定的目录) 下创建一个 myid 文件, 该文件只有一行内容, 即对应于每台服务器的Server ID。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;ZooKeeper 集群中, 每台服务器上的 zoo.cfg 配置文件内容一致。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;server.1 的 myid 文件内容就是 &quot;1&quot;。每个服务器的 myid 内容都不同, 且需要保证和自己的 zoo.cfg 配置文件中 &quot;server.id=host:port:port&quot; 的 id 值一致。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;id 的范围是 1 ~ 255。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;创建myid文件：设置zookeeper的id，和server.ID对应。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 dataDir 指定的目录下 (即 /data/zookeeper/data 目录) 创建名为 myid 的文件, 文件内容和 zoo.cfg 中当前机器的 id 一致。根据上述配置, master 的 myid 文件内容为 1。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;按照相同步骤, 为 132 和 133 配置 zoo.cfg 和 myid 文件。zoo.cfg文件内容相同, 132 的 myid 文件内容为 2, 133 的 myid 文件内容为 3。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
#在第1台zookeeper（&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;）上设置id=&lt;span&gt;1&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;/data/zookeeper/data/&lt;span&gt;myid

#在第2台zookeeper（&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.132&lt;/span&gt;）上设置id=&lt;span&gt;2&lt;/span&gt; 

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;/data/zookeeper/data/&lt;span&gt;myid

#在第3台zookeeper（&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.133&lt;/span&gt;）上设置id=&lt;span&gt;3&lt;/span&gt;

&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;/data/zookeeper/data/myid
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;三台启动：&lt;strong&gt;zkServer.sh start&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
root@test1:~# zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; start
ZooKeeper JMX enabled by default
Using config: &lt;/span&gt;/usr/local/zookeeper/bin/../conf/&lt;span&gt;zoo.cfg
Starting zookeeper ... STARTED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;三台查看状态：&lt;strong&gt;zkServer.sh status&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
root@test1:~# zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; status
ZooKeeper JMX enabled by default
Using config: &lt;/span&gt;/usr/local/zookeeper/bin/../conf/&lt;span&gt;zoo.cfg
Mode: &lt;strong&gt;leader&lt;/strong&gt;

root@test2:&lt;/span&gt;~# zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; status
ZooKeeper JMX enabled by default
Using config: &lt;/span&gt;/usr/local/zookeeper/bin/../conf/&lt;span&gt;zoo.cfg
Mode: &lt;strong&gt;follower&lt;/strong&gt;

root@test3:&lt;/span&gt;~# zkServer.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt; status
ZooKeeper JMX enabled by default
Using config: &lt;/span&gt;/usr/local/zookeeper/bin/../conf/&lt;span&gt;zoo.cfg
Mode: &lt;strong&gt;follower&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;关闭：&lt;strong&gt;zkServer.sh stop&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
root@test2:~# &lt;strong&gt;zkServer.sh&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; stop&lt;/strong&gt;
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper/bin/../conf/&lt;span&gt;zoo.cfg
Stopping zookeeper ... STOPPED&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;到此Zookeeper安装完毕。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2）Codis安装：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装go环境，codis基于go开发：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#解压：
sudo &lt;/span&gt;&lt;span&gt;tar&lt;/span&gt; -C /usr/local -xzf go1.&lt;span&gt;10.3&lt;/span&gt;.linux-amd64.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz 
设置环境变量：
vim &lt;/span&gt;/etc/&lt;span&gt;profile
添加：
##go
export GOROOT&lt;/span&gt;=/usr/local/&lt;span&gt;go
export PATH&lt;/span&gt;=$PATH:$GOROOT/&lt;span&gt;bin
#用于安装codis的目录
export GOPATH&lt;/span&gt;=/opt/gowork ##&lt;span&gt;mkdir&lt;/span&gt; -p /opt/&lt;span&gt;gowork

生效环境变量：
source &lt;/span&gt;/etc/&lt;span&gt;profile

验证：
root@test2:&lt;/span&gt;~&lt;span&gt;# go version
go version go1.&lt;/span&gt;&lt;span&gt;10.3&lt;/span&gt; linux/amd64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;创建需要的文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; /opt/gowork
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;以上go的依赖环境已经安装完毕，开始安装Codis。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#创建目录
&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; -p /opt/gowork/src/github.com/&lt;span&gt;CodisLabs
#git clone迁移
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; codis /opt/gowork/src/github.com/CodisLabs/&lt;span&gt;
#进入目录
cd &lt;/span&gt;/opt/gowork/src/github.com/CodisLabs/&lt;span&gt;codis

#编译
&lt;/span&gt;&lt;span&gt;make&lt;/span&gt;
&lt;span&gt;make&lt;/span&gt; gotest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;编译安装完毕之后先设置一个软连接：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ln&lt;/span&gt; -s /opt/gowork/src/github.com/CodisLabs/codis/ /usr/local/codis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;再设置环境变量：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
vim /etc/&lt;span&gt;profile
#添加
# Codis
export CODIS_HOME&lt;/span&gt;=/usr/local/&lt;span&gt;codis
export PATH&lt;/span&gt;=$PATH:$CODIS_HOME/&lt;span&gt;bin


#应用环境变量
source &lt;/span&gt;/etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;配置启动Codis&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;① 新建目录专门存放codis的配置（包括在一台上安装（131）dashboard、proxy、fe等相关服务进程的配置）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; -p /etc/codis/codis-&lt;span&gt;dashboard

&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; -p /etc/codis/codis-&lt;span&gt;proxy （三台）

&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; -p /etc/codis/codis-&lt;span&gt;server （一台）

&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; -p /etc/codis/codis-&lt;span&gt;fe

&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; –p /etc/codis/codis-ha 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;② 新建codis-server（redis）：三台上都安装&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cp&lt;/span&gt; /usr/local/codis/extern/redis-&lt;span&gt;3.2&lt;/span&gt;.&lt;span&gt;11&lt;/span&gt;/redis.conf /etc/codis/codis-server/redis7021.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;修改redis7021.conf：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
# bind &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;protected-mode no&lt;/strong&gt;
port &lt;/span&gt;&lt;span&gt;7021&lt;/span&gt;&lt;span&gt;
daemonize yes
pidfile &lt;/span&gt;/var/lib/redis_7021/&lt;span&gt;redis_7021.pid
logfile &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/redis_7021/redis_7021.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
dbfilename 7021dump.rdb
&lt;/span&gt;&lt;span&gt;dir&lt;/span&gt; /var/lib/redis_7021/&lt;span&gt;
appendfilename &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;7021appendonly.aof&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;创建配置文件里所需的目录：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; /var/lib/redis_7021
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;再新建一个codis-server：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd /etc/codis/codis-&lt;span&gt;server

&lt;/span&gt;&lt;span&gt;cp&lt;/span&gt;&lt;span&gt; redis7021.conf redis7022.conf 

&lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;s/7021/7022/g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; redis7022.conf 

&lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt; /var/lib/redis_7022
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;开启codis-server：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
codis-server /etc/codis/codis-server/&lt;span&gt;redis7021.conf 
codis&lt;/span&gt;-server /etc/codis/codis-server/redis7022.conf 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;说明：每台机器上有2个codis-server实例，端口为：7021、7022，没有做主从。为了防止单点的问题，可以交错的设置主从，防止一台服务器挂掉，codis-server不可用。&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Group&lt;/td&gt;
&lt;td&gt;主&lt;/td&gt;
&lt;td&gt;从&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;192.168.163.131:7021&lt;/td&gt;
&lt;td&gt;192.168.163.132:7022&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;192.168.163.132:7021&lt;/td&gt;
&lt;td&gt;192.168.163.133:7022&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;192.168.163.133:7021&lt;/td&gt;
&lt;td&gt;192.168.163.131:7022&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;&lt;span&gt;通过codis-fe添加各个Group节点：需要先开启codis-dashboard和codis-fe，在&lt;strong&gt;⑤&lt;/strong&gt;之后操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;③ 配置&lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#21-codis-dashboard&quot; target=&quot;_blank&quot;&gt;codis-dashboard&lt;/a&gt;（一台）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd /etc/codis/codis-dashboard/
&lt;span&gt;cp&lt;/span&gt; /usr/local/codis/config/dashboard.toml /etc/codis/codis-dashboard/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;修改配置：vim /etc/codis/codis-dashboard/dashboard.toml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;##################################################
#                                                #
#                  Codis&lt;/span&gt;-&lt;span&gt;Dashboard               #
#                                                #
##################################################

# Set Coordinator, only accept &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;filesystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.
# &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; zookeeper/etcd, coorinator_auth accept &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user:password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
# Quick Start
#coordinator_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;filesystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#coordinator_addr &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/tmp/codis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
coordinator_name &lt;/span&gt;&lt;/strong&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
coordinator_addr &lt;/span&gt;&lt;/strong&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;192.168.163.131:2181,192.168.163.132:2181,192.168.163.133:2181&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&quot;  #zk地址，多个逗号隔开&lt;/span&gt;&lt;span&gt;
#coordinator_auth &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;

# Set Codis Product Name&lt;/span&gt;/&lt;span&gt;Auth.
&lt;strong&gt;product_name &lt;/strong&gt;&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;codis-testX&lt;/span&gt;&lt;span&gt;&quot; #集群名称&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
product_auth &lt;/span&gt;&lt;/strong&gt;= &lt;span&gt;&quot;&quot;  #集群密码&lt;/span&gt;&lt;span&gt;

# Set bind address &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; admin(rpc), tcp only.
&lt;strong&gt;admin_addr &lt;/strong&gt;&lt;/span&gt;= &lt;span&gt;&quot;192.168.163.131&lt;/span&gt;&lt;span&gt;:18080&lt;/span&gt;&lt;span&gt;&quot; restful api地址，&lt;/span&gt;&lt;span&gt;

# Set arguments &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; data migration (only accept &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sync&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;amp; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;semi-async&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).
migration_method &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;semi-async&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
migration_parallel_slots &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;
migration_async_maxbulks &lt;/span&gt;= &lt;span&gt;200&lt;/span&gt;&lt;span&gt;
migration_async_maxbytes &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;32mb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
migration_async_numkeys &lt;/span&gt;= &lt;span&gt;500&lt;/span&gt;&lt;span&gt;
migration_timeout &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

# Set configs &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; redis sentinel.
sentinel_client_timeout &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
sentinel_quorum &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
sentinel_parallel_syncs &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
sentinel_down_after &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
sentinel_failover_timeout &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
sentinel_notification_script &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
sentinel_client_reconfig_script &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#212-%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E&quot; target=&quot;_blank&quot;&gt;参数说明&lt;/a&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;coordinator_name&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;外部存储类型，接受 zookeeper/etcd&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;coordinator_addr&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;外部存储地址&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;product_name&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;集群名称，满足正则 &lt;code&gt;\w[\w\.\-]*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;product_auth&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;集群密码，默认为空&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;admin_addr&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;RESTful API 端口&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;创建codis日志目录（存放codis所有log）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; /usr/local/codis/logs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#211-%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4&quot; target=&quot;_blank&quot;&gt;启动&lt;/a&gt;codis-dashboard服务：（一台）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38.872180451128&quot;&gt;
&lt;pre&gt;
codis-dashboard --ncpu=&lt;span&gt;1&lt;/span&gt; --config=/etc/codis/codis-dashboard/dashboard.toml --log=/usr/local/codis/logs/dashboard.log --log-level=warn &amp;amp;&lt;span&gt;&lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#212-%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E&quot; target=&quot;_blank&quot;&gt;

参数说明：&lt;/a&gt;
##&lt;/span&gt;--ncpu=&lt;span&gt;N 最大使用 CPU 个数;

##&lt;/span&gt;-c  CONF, --config=&lt;span&gt;CONF 指定启动配置文件;

##&lt;/span&gt;-l   FILE, --log=&lt;span&gt;FILE 设置 log 输出文件;

##&lt;/span&gt;--log-level=&lt;span&gt;LEVEL 设置 log 输出等级：INFO,WARN,DEBUG,ERROR；默认INFO，推荐WARN;

##对于同一个业务集群而言，可以同时部署多个codis&lt;/span&gt;-&lt;span&gt;proxy 实例;

##不同 codis&lt;/span&gt;-proxy 之间由 codis-dashboard 保证状态同步。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;关闭&lt;/strong&gt;codis-dashboard服务：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
codis-admin --dashboard=&lt;span&gt;192.168.163.131&lt;/span&gt;:&lt;span&gt;18080&lt;/span&gt; --shutdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;④：配置&lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#22-codis-proxy&quot; target=&quot;_blank&quot;&gt;codis-proxy&lt;/a&gt;（三台）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;每台配置一个Proxy，也可以一台配置多个Proxy。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意参数：proxy_max_clients&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd /etc/codis/codis-proxy/
&lt;span&gt;cp&lt;/span&gt; /usr/local/codis/config/proxy.toml /etc/codis/codis-proxy/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;修改配置：vim /etc/codis/codis-proxy/proxy.toml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;##################################################
#                                                #
#                  Codis&lt;/span&gt;-&lt;span&gt;Proxy                   #
#                                                #
##################################################

# Set Codis Product Name&lt;/span&gt;/&lt;span&gt;Auth.
&lt;strong&gt;product_name &lt;/strong&gt;&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;codis-testX&lt;/span&gt;&lt;span&gt;&quot;  #和dashboard对应&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
product_auth &lt;/span&gt;&lt;/strong&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;

# Set auth &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; client session
#   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;. product_auth is used &lt;span&gt;for&lt;/span&gt; auth validation among codis-&lt;span&gt;dashboard,
#      codis&lt;/span&gt;-proxy and codis-&lt;span&gt;server.
#   &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;. session_auth is different from product_auth, it requires clients
#      to issue AUTH &lt;/span&gt;&amp;lt;PASSWORD&amp;gt;&lt;span&gt; before processing any other commands.
&lt;strong&gt;session_auth &lt;/strong&gt;&lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;

# Set bind address &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; admin(rpc), tcp only.
&lt;strong&gt;admin_addr &lt;/strong&gt;&lt;/span&gt;= &lt;span&gt;&quot;192.168.163.131&lt;/span&gt;&lt;span&gt;:11080&lt;/span&gt;&lt;span&gt;&quot;  &lt;strong&gt;#同一台服务器可以根据端口创建多个Proxy&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;

# Set bind address &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; proxy, proto_type can be &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tcp4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tcp6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; or &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unixpacket&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.
proto_type &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tcp4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
proxy_addr &lt;/span&gt;&lt;/strong&gt;= &lt;span&gt;&quot;192.168.163.131&lt;/span&gt;&lt;span&gt;:19000&lt;/span&gt;&lt;span&gt;&quot;  &lt;strong&gt;#同一台服务器可以根据端口创建多个Proxy&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;

# Set jodis address &lt;/span&gt;&amp;amp;&lt;span&gt; session timeout
#   &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;. jodis_name is &lt;span&gt;short&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; jodis_coordinator_name, only accept &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.
#   &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;. jodis_addr is &lt;span&gt;short&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; jodis_coordinator_addr
#   &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;. jodis_auth is &lt;span&gt;short&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; jodis_coordinator_auth, &lt;span&gt;for&lt;/span&gt; zookeeper/etcd, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user:password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; is accepted.
#   &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;. proxy will be registered as node:
#        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; jodis_compatible = &lt;span&gt;true&lt;/span&gt;&lt;span&gt; (not suggested):
#          &lt;/span&gt;/zk/codis/db_{PRODUCT_NAME}/proxy-{HASHID} (compatible with Codis2.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
#        or &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
#          &lt;/span&gt;/jodis/{PRODUCT_NAME}/proxy-&lt;span&gt;{HASHID}
&lt;strong&gt;jodis_name &lt;/strong&gt;&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
jodis_addr &lt;/span&gt;&lt;/strong&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.163.131:2181,192.168.163.132:2181,192.168.163.133:2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
jodis_auth &lt;/span&gt;&lt;/strong&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
jodis_timeout &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
jodis_compatible &lt;/span&gt;&lt;/strong&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;

...
...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;参数说明：&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;12&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;product_name&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;集群名称，参考 dashboard 参数说明&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;product_auth&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;集群密码，默认为空&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;admin_addr&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;RESTful API 端口&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;proto_type&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Redis 端口类型，接受 tcp/tcp4/tcp6/unix/unixpacket&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;proxy_addr&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Redis 端口地址或者路径&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;jodis_addr&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Jodis 注册 zookeeper 地址&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;jodis_timeout&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Jodis 注册 session timeout 时间，单位 second&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;jodis_compatible&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Jodis 注册 zookeeper 的路径&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;backend_ping_period&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;与 codis-server 探活周期，单位 second，0 表示禁止&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;session_max_timeout&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;与 client 连接最大读超时，单位 second，0 表示禁止&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;session_max_bufsize&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;与 client 连接读写缓冲区大小，单位 byte&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;session_max_pipeline&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;与 client 连接最大的 pipeline 大小&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;session_keepalive_period&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;与 client 的 tcp keepalive 周期，仅 tcp 有效，0 表示禁止&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/zhoujinyi/p/codis-proxy%20--ncpu=1%20--config=/etc/codis/codis-proxy/proxy.toml%20--log=/usr/local/codis/logs/proxy.log%20--log-level=warn%20&amp;amp;&quot; target=&quot;_blank&quot;&gt;启动&lt;/a&gt;codis-proxy服务（三台）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
codis-proxy --ncpu=&lt;span&gt;1&lt;/span&gt; --config=/etc/codis/codis-proxy/proxy.toml --log=/usr/local/codis/logs/proxy.log --log-level=warn &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;codis-proxy 启动后，处于 &lt;code&gt;waiting&lt;/code&gt; online 状态(日志查询)，监听 &lt;code&gt;proxy_addr&lt;/code&gt; 地址，但是不会 &lt;code&gt;accept&lt;/code&gt; 连接，添加到集群并完成集群状态的同步，才能改变状态为 &lt;code&gt;online&lt;/code&gt;。添加的方法有以下两种：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;通过 codis-fe 添加：通过 &lt;code&gt;Add Proxy&lt;/code&gt; 按钮，将 &lt;code&gt;admin_addr&lt;/code&gt; 加入到集群中；⑤之后。&lt;/span&gt;&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;&lt;span&gt;&lt;span&gt;通过 codis-admin 命令行工具添加，方法如下：&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
codis-admin --dashboard=&lt;span&gt;192.&lt;/span&gt;&lt;span&gt;168.163.131&lt;/span&gt;:&lt;span&gt;18080&lt;/span&gt; --create-proxy -x &lt;span&gt;192.168.163.131&lt;/span&gt;:&lt;span&gt;11080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;其中 &lt;code&gt;192.168.163.131:18080&lt;/code&gt; 以及 &lt;code&gt;192.168.163.131:11080&lt;/code&gt; 分别为 dashboard 和 proxy 的 &lt;code&gt;admin_addr&lt;/code&gt; 地址；可以在后面的codis-fe里看到&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加过程中，dashboard 会完成如下一系列动作：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;获取 proxy 信息，对集群 name 以及 auth 进行验证，并将其信息写入到外部存储中（zookeeper）；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;同步 slots 状态；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;标记 proxy 状态为 &lt;code&gt;online&lt;/code&gt;，此后 proxy 开始 &lt;code&gt;accept&lt;/code&gt; 连接并开始提供服务；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;停止codis-proxy服务：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 codis-admin --proxy=&lt;span&gt;192.168.163.131&lt;/span&gt;:&lt;span&gt;11080&lt;/span&gt; --shutdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：直接kill Proxy进程zk的codis3里会有残留数据，建议codis-admin方式停codis-proxy服务 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;⑤：配置&lt;/strong&gt;&lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#24-codis-fe%E5%8F%AF%E9%80%89%E7%BB%84%E4%BB%B6&quot; target=&quot;_blank&quot;&gt;codis-fe&lt;/a&gt;（一台）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置文件 codis.json 可以手动编辑，也可以通过 codis-admin 从外部存储中拉取：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd /etc/codis/codis-fe/&lt;span&gt;

codis&lt;/span&gt;-admin --dashboard-list --zookeeper=&lt;span&gt;192.168.163.131&lt;/span&gt;:&lt;span&gt;2181&lt;/span&gt; | &lt;span&gt;tee&lt;/span&gt; codis.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#24-codis-fe%E5%8F%AF%E9%80%89%E7%BB%84%E4%BB%B6&quot; target=&quot;_blank&quot;&gt;启动&lt;/a&gt;codis-fe：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
codis-fe --ncpu=&lt;span&gt;1&lt;/span&gt; --dashboard-list=/etc/codis/codis-fe/codis.json --listen=&lt;span&gt;192.168.163.131&lt;/span&gt;:&lt;span&gt;18090&lt;/span&gt; --log=/usr/local/codis/logs/fe.log --log-level=warn --assets-&lt;span&gt;dir&lt;/span&gt;=/usr/local/codis/bin/assets/ &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;关闭codis-fe：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ps&lt;/span&gt; -ef|&lt;span&gt;grep&lt;/span&gt; codis-fe|&lt;span&gt;grep&lt;/span&gt; -v &lt;span&gt;grep&lt;/span&gt;|&lt;span&gt;awk&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{print $2}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;|&lt;span&gt;xargs&lt;/span&gt; &lt;span&gt;kill&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;通过codis-fe进行web操作管理：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;注意在fe上添加的时候需要保证这些进程存在，fe不会自动开启，只是对这些已有进程进行相关操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）添加proxy&lt;/strong&gt;：地址是配置文件中配置的admin_addr信息，需要先开启codis-proxy（处于waiting online）。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703112519443-729930605.png&quot; alt=&quot;&quot; width=&quot;930&quot; height=&quot;171&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中SYNC表示：更新同步Proxy中的Slots信息，日志如下：&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
fill slot &lt;span&gt;0000&lt;/span&gt;, backend.addr = &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.133&lt;/span&gt;:&lt;span&gt;7021&lt;/span&gt;, locked = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
fill slot &lt;/span&gt;&lt;span&gt;0001&lt;/span&gt;, backend.addr = &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.133&lt;/span&gt;:&lt;span&gt;7021&lt;/span&gt;, locked = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
fill slot &lt;/span&gt;&lt;span&gt;0002&lt;/span&gt;, backend.addr = &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.133&lt;/span&gt;:&lt;span&gt;7021&lt;/span&gt;, locked = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
fill slot &lt;/span&gt;&lt;span&gt;0003&lt;/span&gt;, backend.addr = &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.133&lt;/span&gt;:&lt;span&gt;7021&lt;/span&gt;, locked = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
...
...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;strong&gt;2）添加Group&lt;/strong&gt;：本文说明的Group就是一主一从的环境，当然也可以一主多从。在上面介绍codis-server中，只是开启了实例，没有做主从关系。现在通过codis-fe来进行主从关系的创建，&lt;/span&gt;&lt;span&gt;添加group：&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Group&lt;/td&gt;
&lt;td&gt;主&lt;/td&gt;
&lt;td&gt;从&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;192.168.163.131:7021&lt;/td&gt;
&lt;td&gt;192.168.163.132:7022&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;span&gt;需要注意的是在fe上添加，&lt;strong&gt;组内默认第一个Server是master&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703115154724-1048729357.png&quot; alt=&quot;&quot; width=&quot;921&quot; height=&quot;227&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;点了PROMOTE之后，slave会被提升为master，但是老的master需要手动点&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703115905872-794915221.png&quot; alt=&quot;&quot; width=&quot;35&quot; height=&quot;27&quot;/&gt;才能对新主进行同步。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;按照上面继续添加GROUP 2和3，最终图的结果为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703120429648-2076162430.png&quot; alt=&quot;&quot; width=&quot;938&quot; height=&quot;389&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过codis-fe已经把codis-server（redis）已经添加并自动做了主从复制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3）初始化Slots：进行到这步的时候整个codis集群已经搭建完毕，最后只需要把Slots初始和分配下就可以使用了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703124325367-756832241.png&quot; alt=&quot;&quot; width=&quot;877&quot; height=&quot;228&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;把0~300的slots分配给Group1，301~800的slots分配给Group2，801~1023的slots分配给Group3，最终结果图如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703124606225-1775582856.png&quot; alt=&quot;&quot; width=&quot;869&quot; height=&quot;224&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面的图可以看到slots的分布信息，也可以通过condis-admin进行查询：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
codis-admin --dashboard=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;:&lt;span&gt;18080&lt;/span&gt; --slots-status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;迁移&lt;/strong&gt;Slots：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703125458801-559057598.png&quot; alt=&quot;&quot; width=&quot;788&quot; height=&quot;275&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从Group1迁移10个slots到Group3，操作完之后的结果图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703125637725-165073389.png&quot; alt=&quot;&quot; width=&quot;724&quot; height=&quot;185&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在迁移Slots时候的zk的操作信息如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;2018&lt;/span&gt;/&lt;span&gt;07&lt;/span&gt;/&lt;span&gt;03&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt; zkclient.go:&lt;span&gt;272&lt;/span&gt;: [DEBUG] zkclient update node /codis3/codis-testX/slots/slot-&lt;span&gt;0008&lt;/span&gt;
&lt;span&gt;2018&lt;/span&gt;/&lt;span&gt;07&lt;/span&gt;/&lt;span&gt;03&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt; zkclient.go:&lt;span&gt;280&lt;/span&gt;: [DEBUG] zkclient update OK
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;到这里，codis的集群安装和初始化完毕，可以正常提供服务器了，不过这里还有个情况就是主Codis-Server挂了：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模拟Group1的主挂掉，通过Proxy连上去看看查询到整个Group的Slots会怎么样：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
root@test1:~# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.132&lt;/span&gt; -p &lt;span&gt;19000&lt;/span&gt;&lt;span&gt; #随便连一个Proxy
&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.133&lt;/span&gt;:&lt;span&gt;19000&lt;/span&gt;&amp;gt;&lt;span&gt; get age
(error) &lt;strong&gt;ERR handle response&lt;/strong&gt;, backend conn reset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;HA如何保证？那就继续HA的部署说明。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;⑥：配置启动codis-ha&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
codis-ha --log=/usr/local/codis/logs/ha.log --log-level=warn --dashboard=&lt;span&gt;192.168.163.131&lt;/span&gt;:&lt;span&gt;18080&lt;/span&gt;&amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;codis-ha启动之后，主挂掉虽然可以把从切换成主，但是老主再次启动会被codis-ha关闭（开不起来，除非关掉codis-ha），关闭掉codis-ha之后，还需要重新在codis-fe上添加这个老主进行同步，这个对于主从非常不友好，不推荐使用。还是使用Sentinel来替代codis-ha。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;⑦：配置Sentinel 3个节点（三台都安装），来替换codis-ha。&lt;/strong&gt;sentinel的说明可以参考&lt;/span&gt;&lt;span&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/zhoujinyi/p/5570024.html&quot;&gt;Redis 复制、Sentinel的搭建和原理说明&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;codis是通过sentinel来保证每个group下的Redis主从高可用，并且在codis-fe上配置的Sentinel是监控所有主机的，不需要单独配置监控的主，codis集群会自动添加。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;建立所需的目录：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; -p /var/lib/sentinel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;修改配置文件：cp /usr/local/codis/extern/redis-3.2.11/sentinel.conf /etc/codis/codis-server/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vim /etc/codis/codis-server/sentinel.conf&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
port &lt;span&gt;10086&lt;/span&gt;

&lt;span&gt;dir&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/sentinel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

logfile &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/lib/sentinel/sentinel.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

daemonize yes

protected&lt;/span&gt;-mode no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;不需要启用其他的Sentinel开头的这些参数，codis-fe会自动发现处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;开启&lt;/strong&gt;Sentinel，三台保持一致即可：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
codis-server /etc/codis/codis-server/sentinel.conf --sentinel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;添加到集群（dashboard）：命令行模式&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
codis-admin --dashboard=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;:&lt;span&gt;18080&lt;/span&gt; --sentinel-add --addr=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;:&lt;span&gt;10086&lt;/span&gt;&lt;span&gt;

codis&lt;/span&gt;-admin --dashboard=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;:&lt;span&gt;18080&lt;/span&gt; --sentinel-add --addr=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.132&lt;/span&gt;:&lt;span&gt;10086&lt;/span&gt;&lt;span&gt;

codis&lt;/span&gt;-admin --dashboard=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;:&lt;span&gt;18080&lt;/span&gt; --sentinel-add --addr=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.133&lt;/span&gt;:&lt;span&gt;10086&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;通过codis-fe添加：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703135049227-931134505.png&quot; alt=&quot;&quot; width=&quot;823&quot; height=&quot;241&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;该3个节点的Sentinel，监听着三组Group，即三个主从。最后一列表示从codis-fe上删除。添加完毕之后，在codis-fe上的Group中可以看到状态发生了改变：主上多了一个[HA]标识。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/163084/201807/163084-20180703135710651-1196560573.png&quot; alt=&quot;&quot; width=&quot;996&quot; height=&quot;407&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模拟Group1的主挂掉，通过Proxy连上去看看查询到整个Group的Slots会怎么样：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;:&lt;span&gt;19000&lt;/span&gt;&amp;gt;&lt;span&gt; get age
(error) ERR handle response, backend conn reset
&lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;163.131&lt;/span&gt;:&lt;span&gt;19000&lt;/span&gt;&amp;gt;&lt;span&gt; get age
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1233&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;说明：&lt;/strong&gt;当Group1的主被shutdown之后，Sentinel经过选举，选择新主（选举时间可配置）提供服务，选举期间该Group不可访问。老主启动后，Sentinel会自动的把老主slaveof 到新的主，形式主从集群，codis-fe不需要做主从同步的操作。最后出现“OUT OF SYNC”的标志，只需要手动SYNC下就可以了。另外说明下，如果codis-server添加了密码，则需要在codis相关组件的配置文件中的&lt;strong&gt;auth&lt;/strong&gt;相关参数里添加密码&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;到这里，redis codis 的高可用集群已经搭建完毕，从文中的介绍说明来看，Codis实现了Redis的高可用、&lt;/span&gt;&lt;span&gt;动态扩展、对业务层透明以及如何连接。后续进行相关的测试说明。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Jul 2018 16:30:00 +0000</pubDate>
<dc:creator>jyzhou</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhoujinyi/p/9249873.html</dc:identifier>
</item>
<item>
<title>【python】10分钟教你用python如何正确把妹 - 短短的路走走停停</title>
<link>http://www.cnblogs.com/infroad/p/9278934.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/infroad/p/9278934.html</guid>
<description>&lt;h3 id=&quot;h&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;今天没妹子约，刚好朋友研究一下python。让他教大家如何用神奇的python打造一个把妹神器吧。看完这个，你们就能走向人生巅峰，迎娶白富美啦。&lt;/p&gt;
&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;我知道你们想看看效果&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ZgarDAQeKokYJ6hL3hAqQH6h6nzAPqDkicSHgJsxDLSicenjOReV9IuK9XboaoBIugNQibAhibqfqPtZnJmic0sALRA/640?wx_fmt=jpeg&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;/&gt;&lt;p&gt;当然啦，这只是测试版的效果，真正的版本可比这个厉害多啦。不过作为一个直男，另一个男的给小编发这个测试感觉还是有点怪怪的哈。&lt;/p&gt;
&lt;h3 id=&quot;h-2&quot;&gt;&lt;span&gt;文：吉柏言&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;暑假来了，各位又不得不和男女朋友暂时分开2个月了！！长达两个月的时间里不能相见，你可知我多想你啊，想知道你的城市下雨了吗，想知道你带伞了吗，想知道你长什么样，想知道你叫啥，咳咳，单身汪小编表示情绪稳定。&lt;/p&gt;
&lt;p&gt;没关系，虽然不能见面，但是云关怀还是要到的嘛，每天查一查你那里的天气如何，送上作为男朋友的关切问候，再配上一张爱你的图片，噫~~。但是作为绝地鸡王那必须每晚吃鸡呀，早上醒来忘了打卡怎么办？？ 能让机器干的活我们何必自己动手呢？当然可以走一波python大法好啦！&lt;/p&gt;
&lt;p&gt;今天的代码我们要做得就是定点打卡，每天向亲爱的女票送去温暖的祝福~~，单身汪小编表示情绪稳定。&lt;/p&gt;
&lt;h3 id=&quot;h-3&quot;&gt;&lt;span&gt;环境准备&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;首先，安装我们需要的库：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; requests&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; email.mime.image &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; MIMEImage&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; email.mime.multipart &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; MIMEMultipart&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; email.mime.text &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; MIMEText&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; email.header &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Header&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; smtplib&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们用requests + bs4 库进行爬取当日的天气状况以及我们需要的图片，用email库和smtplib库来发邮件，当中我们还需要os库对其他文件进行操作。&lt;/p&gt;
&lt;h3 id=&quot;h-4&quot;&gt;&lt;span&gt;开始搞事&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;首先爬取天气状况和图片资源，我选择的是对中国气象台和豆瓣上一位名为名为“狼魄乾坤”的网友的豆瓣相册进行爬取，首先本着盗亦有道的原则，先查看robots协议。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZgarDAQeKokYJ6hL3hAqQH6h6nzAPqDk0GSTouVkZYQoa0wrSdmDr3icBRvDAwZGYLJibvtzAGg8HCea2MFh0obw/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;/&gt;&lt;img title=&quot;&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZgarDAQeKokYJ6hL3hAqQH6h6nzAPqDkuGMHCQiauibE25zXpDFQiaaX5R2JOyJXbqwLVZ8g8m50k2cMkyuO3jTpg/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;/&gt;&lt;p&gt;很好，中央气象站没有robots协议，豆瓣也没有对相册加以限制，那么我们可以放心大胆地爬取了。&lt;/p&gt;
&lt;p&gt;进入网站，查找一下她所在的城市，本汪没有女票就以自己所在的城市为例子了。&lt;/p&gt;
&lt;p&gt;http://www.nmc.cn/publish/forecast/AHB/wuhan.html 。分析一下这个地址，发现对于城市的分类命名规则是A+省份简写如湖北（HB）以及城市拼音，对于一些比较模糊的省份简写小编附在下图的代码中：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    province = &lt;span class=&quot;hljs-string&quot;&gt;&quot;HB&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;    city = &lt;span class=&quot;hljs-string&quot;&gt;&quot;wuhan&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;    url = &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.nmc.cn/publish/forecast/A&quot;&lt;/span&gt; + province + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt; + city + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;    html = getHTMLText(url)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;    url = &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://www.douban.com/photos/album/157693223/&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;    image = getHTMLText(url)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;请忽略小编的辣鸡英文。&lt;/p&gt;
&lt;p&gt;getHTMLText(url)是自定义方法，为的是获取网页的源代码，返回值为包含整个源代码的字符串：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getHTMLText&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(url)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;        r = requests.get(url)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;        print(r.raise_for_status)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;        r.encoding = r.apparent_encoding&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r.text&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们用requests.get(url)向网站提出爬取申请，用raise_for_status查看状态码，如果为200则说明爬取成功，然后我们用apparent_encoding替换掉encoding，这是让程序自己识别编码方式，保证返回的不是乱码。倘若爬取过程没有出错，就把爬下来的新鲜的天气信息素材返回给变量html。用同样的方法，我们获取新鲜的图片库的素材也用同样的方法，返回给变量image。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;    imagLink = []&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;    whetherInfo = parserHTMLWeather(html)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;    name = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; image &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; imagLink:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;        print(image)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; image &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; imagLink:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;        downloadPicture(image,name)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;        name += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;回到main方法，我们要声明一个imagLink的列表，用来存放每个图库中每个图的地址，whetherInfo用来存储解析后的html的信息。打印image确定地址返回无误，因为在图库的源码中有豆瓣自己的大图地址和图片的地址，我们需要的是图片地址，确定无误后就可以逐个进行下载图片资源了。&lt;/p&gt;
&lt;p&gt;先来看解析天气信息的parserHTMLWeather方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parserHTMLWeather&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(html)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;        dirt = {}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;        soup = BeautifulSoup(html,&lt;span class=&quot;hljs-string&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;        place = soup.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;).find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;        dirt[&lt;span class=&quot;hljs-string&quot;&gt;&quot;place&quot;&lt;/span&gt;] = str(place.string).split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;        AnnoceTime = soup.find(name = &lt;span class=&quot;hljs-string&quot;&gt;'div'&lt;/span&gt;, attrs = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;class&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;btitle&quot;&lt;/span&gt;}).find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;span&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;        dirt[&lt;span class=&quot;hljs-string&quot;&gt;&quot;AnnoceTime&quot;&lt;/span&gt;] = str(AnnoceTime.string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;        Everyday = AnnoceTime.find_parent().find_next_sibling().find_all(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;detail&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; eachday &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Everyday:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;            info = eachday.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;day&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;            thisDay = {}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;            date = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;            week = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;week&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;            wdesc = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;wdesc&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;            temp = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;temp&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;            direct = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;direct&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;            wind = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;wind&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;] = date&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;week&quot;&lt;/span&gt;] = week&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;wdesc&quot;&lt;/span&gt;] = wdesc&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;temp&quot;&lt;/span&gt;] = temp&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;direct&quot;&lt;/span&gt;] = direct&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;wind&quot;&lt;/span&gt;] = wind&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;            dirt[thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;]] = thisDay&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dirt&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先先声明dirt为一个字典，然后把html用beautifulSoup库对其进行解析，解析后的soup对象可以调用它的find方法和find_all方法开始寻找我们需要的信息所对应的标签。至于哪个信息对应哪个标签，可以在浏览器中用ctrl + F的快捷键调出搜索框。获取到我们需要的信息后，我们可以把它进行加工保存在每天的thisDay字典里，然后再把7天的thisDay字典加入dirt字典里，最后返回dirt字典。具体的加工方法就是用split方法切片、提取。当然也可以选择正则表达式，需要额外再引用re库。&lt;/p&gt;
&lt;p&gt;然后是解析图片：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parserHTMLPicture&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(imag,imagLink)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;        soup = BeautifulSoup(imag,&lt;span class=&quot;hljs-string&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;        imagAddress = soup.find(name=&lt;span class=&quot;hljs-string&quot;&gt;'div'&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;'photolst clearfix'&lt;/span&gt;).find_all(name = &lt;span class=&quot;hljs-string&quot;&gt;'img'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; image &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; imagAddress:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;            imagLink.append(image[&lt;span class=&quot;hljs-string&quot;&gt;'src'&lt;/span&gt;])&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; imagLink&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解析图片我们只需要把图片的地址获取到imagLink列表中即可。然后我们遍历这个列表，并且下载这些图片：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;downloadPicture&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(url,name)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;    root = &lt;span class=&quot;hljs-string&quot;&gt;'C:\\Users\\10990\\Pictures\\'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    path = root + str(name) + &lt;span class=&quot;hljs-string&quot;&gt;'.jpg'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; os.path.exists(root):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;            os.mkdir(root)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; os.path.exists(path):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;            r = requests.get(url)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; open(path,&lt;span class=&quot;hljs-string&quot;&gt;'wb'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;                f.write(r.content)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                f.close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;                print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;文件保存成功&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;            print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;文件已存在&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;        print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;爬取失败&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在下载前我们要注意判断路径是否存在，若不存在要建立一个，在开始爬之前要留意是否已经爬取过，若已经存在则跳过。命名我是以数字顺序命名的，在后续调用中也更方便。&lt;/p&gt;
&lt;p&gt;然后我们需要新建一个txt文件，用来保存本次发送的照片名字，注意该文件应该和代码的py文件保存在同一路径下。&lt;/p&gt;
&lt;p&gt;回到main()方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;hljs-string&quot;&gt;'pictureName.txt'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'r'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;        name = eval(f.read())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;        f.close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;hljs-string&quot;&gt;'pictureName.txt'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'w'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;        newName = str(name + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;        f.write(newName)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;        f.close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;8&lt;/span&gt;    msgRoot = makeMessage(whetherInfo,name)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;9&lt;/span&gt;sendMsg(msgRoot)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们读取当前的图片名，赋给name，再把name名加一后重新保存下来，这样每天发给女票的就是一张新的图片了。然后要把我们的天气信息和我们每天想说的话以及图片打包成一个email对象发送出去就行啦。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;makeMessage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dirt,image)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;    print(dirt)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;    message = dirt[&lt;span class=&quot;hljs-string&quot;&gt;&quot;place&quot;&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;' 今天 '&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    items = {&lt;span class=&quot;hljs-string&quot;&gt;'wdesc'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'temp'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'direct'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'wind'&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;        message += dirt[&lt;span class=&quot;hljs-string&quot;&gt;&quot;\n        今天\n       &quot;&lt;/span&gt;][item].strip(&lt;span class=&quot;hljs-string&quot;&gt;'\n        '&lt;/span&gt;)+&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; temp &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; message.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; temp.find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;℃&quot;&lt;/span&gt;) != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; eval(temp.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;℃&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;                message += &lt;span class=&quot;hljs-string&quot;&gt;&quot;今天很热,尽量别出门啦&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; eval(temp.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;℃&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;                message += &lt;span class=&quot;hljs-string&quot;&gt;&quot;今天很冷,注意保暖&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; message.find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;雨&quot;&lt;/span&gt;) != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;        message += &lt;span class=&quot;hljs-string&quot;&gt;&quot; 出门的话记得带伞&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;    print(message)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;    msgRoot = MIMEMultipart(&lt;span class=&quot;hljs-string&quot;&gt;'related'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;    msgRoot[&lt;span class=&quot;hljs-string&quot;&gt;'From'&lt;/span&gt;] = Header(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我是发信人&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;    msgRoot[&lt;span class=&quot;hljs-string&quot;&gt;'To'&lt;/span&gt;] = Header(&lt;span class=&quot;hljs-string&quot;&gt;'我是收信人'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'utf-8'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;    subject = &lt;span class=&quot;hljs-string&quot;&gt;'赴戍登程口占示家人'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;    msgRoot[&lt;span class=&quot;hljs-string&quot;&gt;'Subject'&lt;/span&gt;] = Header(subject,&lt;span class=&quot;hljs-string&quot;&gt;'utf-8'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;    msgAlternative = MIMEMultipart(&lt;span class=&quot;hljs-string&quot;&gt;'alternative'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;    msgRoot.attach(msgAlternative)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;    mail_msg = &lt;span class=&quot;hljs-string&quot;&gt;'''&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;    &amp;lt;p&amp;gt; 力微任重久神疲，再竭衰庸定不支。&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;        苟利国家生死以，岂因祸福避趋之？&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;        谪居正是君恩厚，养拙刚于戍卒宜。&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;        戏与山妻谈故事，试吟断送老头皮。&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;    &amp;lt;/p&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;    &amp;lt;p&amp;gt;'''&lt;/span&gt;+message+&lt;span class=&quot;hljs-string&quot;&gt;'''&amp;lt;/p&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;    &amp;lt;p&amp;gt;&amp;lt;img src = &quot;cid:image1&quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;'''&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;    msgAlternative.attach(MIMEText(mail_msg,&lt;span class=&quot;hljs-string&quot;&gt;'html'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'utf-8'&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;    catalog = &lt;span class=&quot;hljs-string&quot;&gt;'C:\\Users\\10990\\Pictures\\'&lt;/span&gt; + str(image) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.jpg&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; open(catalog,&lt;span class=&quot;hljs-string&quot;&gt;'rb'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; fp:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;        msgImage = MIMEImage(fp.read())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;        fp.close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;    msgImage.add_header(&lt;span class=&quot;hljs-string&quot;&gt;'Content-ID'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'&amp;lt;image1&amp;gt;'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;    msgRoot.attach(msgImage)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;48&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; msgRoot&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sendMsg&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(message)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;51&lt;/span&gt;    mail_host = &lt;span class=&quot;hljs-string&quot;&gt;&quot;smtp.qq.com&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;52&lt;/span&gt;    mail_user = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*******&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;53&lt;/span&gt;    mail_pass = &lt;span class=&quot;hljs-string&quot;&gt;&quot;********&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;54&lt;/span&gt;    sender = &lt;span class=&quot;hljs-string&quot;&gt;'********'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;55&lt;/span&gt;    receivers = [&lt;span class=&quot;hljs-string&quot;&gt;'*******'&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;56&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;57&lt;/span&gt;        smtpObj = smtplib.SMTP()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;58&lt;/span&gt;        smtpObj.connect(mail_host)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;59&lt;/span&gt;        smtpObj.ehlo()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;60&lt;/span&gt;        smtpObj.starttls()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;61&lt;/span&gt;        smtpObj.login(mail_user,mail_pass)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;62&lt;/span&gt;        smtpObj.sendmail(sender,receivers,message.as_string())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;63&lt;/span&gt;        print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;邮件发送成功&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;64&lt;/span&gt;        smtpObj.quit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;65&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; smtplib.SMTPException:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;66&lt;/span&gt;        print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error:无法发送邮件&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;往后都是可以从网上找到的代码，当然了各位也可以更进一步，从网上爬取各种骚话，用同样的方式解析并加入email对象中，为了不吃狗粮小编决定交给各位自己发掘（其实就是懒）需要注意，图片我们只爬取了一页的图片，各位还可以自行添加代码，完成自动换页之后的爬取，因为图片有限，当我们的txt文件数大于18，即自动发送18天后，需要另外爬取第二页的图片。&lt;/p&gt;
&lt;p&gt;另外，推荐把程序挂到服务器上面，做个定时发送。每天准点发送。这样妹子就可以天天收到你的云关怀啦。&lt;/p&gt;
&lt;p&gt;记得让女票把你加入白名单，否则你发过去的邮件都会被投进垃圾箱的。&lt;/p&gt;
&lt;h3 id=&quot;h-5&quot;&gt;&lt;span&gt;完整代码&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;python language-python hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; requests&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  2&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; email.mime.image &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; MIMEImage&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  4&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; email.mime.multipart &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; MIMEMultipart&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  5&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; email.mime.text &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; MIMEText&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  6&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; email.header &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Header&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  7&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; smtplib&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  9&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getHTMLText&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(url)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 10&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 11&lt;/span&gt;        r = requests.get(url)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 12&lt;/span&gt;        print(r.raise_for_status)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 13&lt;/span&gt;        r.encoding = r.apparent_encoding&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 14&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r.text&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 15&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 16&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 18&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parserHTMLWeather&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(html)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 19&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 20&lt;/span&gt;        dirt = {}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 21&lt;/span&gt;        soup = BeautifulSoup(html,&lt;span class=&quot;hljs-string&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 22&lt;/span&gt;        place = soup.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;).find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;title&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 23&lt;/span&gt;        dirt[&lt;span class=&quot;hljs-string&quot;&gt;&quot;place&quot;&lt;/span&gt;] = str(place.string).split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 24&lt;/span&gt;        AnnoceTime = soup.find(name = &lt;span class=&quot;hljs-string&quot;&gt;'div'&lt;/span&gt;, attrs = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;class&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;btitle&quot;&lt;/span&gt;}).find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;span&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 25&lt;/span&gt;        dirt[&lt;span class=&quot;hljs-string&quot;&gt;&quot;AnnoceTime&quot;&lt;/span&gt;] = str(AnnoceTime.string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 26&lt;/span&gt;        Everyday = AnnoceTime.find_parent().find_next_sibling().find_all(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;detail&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 27&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; eachday &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Everyday:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 28&lt;/span&gt;            info = eachday.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;day&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 29&lt;/span&gt;            thisDay = {}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 30&lt;/span&gt;            date = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 31&lt;/span&gt;            week = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;week&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 32&lt;/span&gt;            wdesc = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;wdesc&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 33&lt;/span&gt;            temp = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;temp&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 34&lt;/span&gt;            direct = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;direct&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 35&lt;/span&gt;            wind = str(info.find(name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;div&quot;&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;wind&quot;&lt;/span&gt;).string)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 37&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;] = date&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 38&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;week&quot;&lt;/span&gt;] = week&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 39&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;wdesc&quot;&lt;/span&gt;] = wdesc&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 40&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;temp&quot;&lt;/span&gt;] = temp&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 41&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;direct&quot;&lt;/span&gt;] = direct&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 42&lt;/span&gt;            thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;wind&quot;&lt;/span&gt;] = wind&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 43&lt;/span&gt;            dirt[thisDay[&lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;]] = thisDay&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 45&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dirt&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 46&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 47&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 49&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parserHTMLPicture&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(imag,imagLink)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 50&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 51&lt;/span&gt;        soup = BeautifulSoup(imag,&lt;span class=&quot;hljs-string&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 52&lt;/span&gt;        imagAddress = soup.find(name=&lt;span class=&quot;hljs-string&quot;&gt;'div'&lt;/span&gt;,class_ = &lt;span class=&quot;hljs-string&quot;&gt;'photolst clearfix'&lt;/span&gt;).find_all(name = &lt;span class=&quot;hljs-string&quot;&gt;'img'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 53&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; image &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; imagAddress:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 54&lt;/span&gt;            imagLink.append(image[&lt;span class=&quot;hljs-string&quot;&gt;'src'&lt;/span&gt;])&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 56&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; imagLink&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 57&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 58&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 60&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;downloadPicture&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(url,name)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 61&lt;/span&gt;    root = &lt;span class=&quot;hljs-string&quot;&gt;'C:\\Users\\10990\\Pictures\\'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 62&lt;/span&gt;    path = root + str(name) + &lt;span class=&quot;hljs-string&quot;&gt;'.jpg'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 63&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 64&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; os.path.exists(root):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 65&lt;/span&gt;            os.mkdir(root)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 66&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; os.path.exists(path):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 67&lt;/span&gt;            r = requests.get(url)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 68&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; open(path,&lt;span class=&quot;hljs-string&quot;&gt;'wb'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 69&lt;/span&gt;                f.write(r.content)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 70&lt;/span&gt;                f.close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 71&lt;/span&gt;                print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;文件保存成功&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 72&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 73&lt;/span&gt;            print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;文件已存在&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 74&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 75&lt;/span&gt;        print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;爬取失败&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 77&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;makeMessage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dirt,image)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 78&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 79&lt;/span&gt;    print(dirt)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 80&lt;/span&gt;    message = dirt[&lt;span class=&quot;hljs-string&quot;&gt;&quot;place&quot;&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;' 今天 '&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 81&lt;/span&gt;    items = {&lt;span class=&quot;hljs-string&quot;&gt;'wdesc'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'temp'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'direct'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'wind'&lt;/span&gt;}&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 82&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 83&lt;/span&gt;        message += dirt[&lt;span class=&quot;hljs-string&quot;&gt;&quot;\n        今天\n       &quot;&lt;/span&gt;][item].strip(&lt;span class=&quot;hljs-string&quot;&gt;'\n        '&lt;/span&gt;)+&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 84&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; temp &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; message.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;):&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 85&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; temp.find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;℃&quot;&lt;/span&gt;) != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 86&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; eval(temp.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;℃&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 87&lt;/span&gt;                message += &lt;span class=&quot;hljs-string&quot;&gt;&quot;今天很热,尽量别出门啦&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 88&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; eval(temp.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;℃&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 89&lt;/span&gt;                message += &lt;span class=&quot;hljs-string&quot;&gt;&quot;今天很冷,注意保暖&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 90&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; message.find(&lt;span class=&quot;hljs-string&quot;&gt;&quot;雨&quot;&lt;/span&gt;) != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 91&lt;/span&gt;        message += &lt;span class=&quot;hljs-string&quot;&gt;&quot; 出门的话记得带伞&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 92&lt;/span&gt;    print(message)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 93&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 94&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 95&lt;/span&gt;    msgRoot = MIMEMultipart(&lt;span class=&quot;hljs-string&quot;&gt;'related'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 96&lt;/span&gt;    msgRoot[&lt;span class=&quot;hljs-string&quot;&gt;'From'&lt;/span&gt;] = Header(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我是发信人&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 97&lt;/span&gt;    msgRoot[&lt;span class=&quot;hljs-string&quot;&gt;'To'&lt;/span&gt;] = Header(&lt;span class=&quot;hljs-string&quot;&gt;'我是收信人'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'utf-8'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 98&lt;/span&gt;    subject = &lt;span class=&quot;hljs-string&quot;&gt;'赴戍登程口占示家人'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 99&lt;/span&gt;    msgRoot[&lt;span class=&quot;hljs-string&quot;&gt;'Subject'&lt;/span&gt;] = Header(subject,&lt;span class=&quot;hljs-string&quot;&gt;'utf-8'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;101&lt;/span&gt;    msgAlternative = MIMEMultipart(&lt;span class=&quot;hljs-string&quot;&gt;'alternative'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;102&lt;/span&gt;    msgRoot.attach(msgAlternative)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;103&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;104&lt;/span&gt;    mail_msg = &lt;span class=&quot;hljs-string&quot;&gt;'''&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;105&lt;/span&gt;    &amp;lt;p&amp;gt; 力微任重久神疲，再竭衰庸定不支。&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;106&lt;/span&gt;        苟利国家生死以，岂因祸福避趋之？&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;107&lt;/span&gt;        谪居正是君恩厚，养拙刚于戍卒宜。&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;108&lt;/span&gt;        戏与山妻谈故事，试吟断送老头皮。&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;109&lt;/span&gt;    &amp;lt;/p&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;110&lt;/span&gt;    &amp;lt;p&amp;gt;'''&lt;/span&gt;+message+&lt;span class=&quot;hljs-string&quot;&gt;'''&amp;lt;/p&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;111&lt;/span&gt;    &amp;lt;p&amp;gt;&amp;lt;img src = &quot;cid:image1&quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;112&lt;/span&gt;'''&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;113&lt;/span&gt;    msgAlternative.attach(MIMEText(mail_msg,&lt;span class=&quot;hljs-string&quot;&gt;'html'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'utf-8'&lt;/span&gt;))&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;114&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;115&lt;/span&gt;    catalog = &lt;span class=&quot;hljs-string&quot;&gt;'C:\\Users\\10990\\Pictures\\'&lt;/span&gt; + str(image) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.jpg&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;116&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;117&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; open(catalog,&lt;span class=&quot;hljs-string&quot;&gt;'rb'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; fp:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;118&lt;/span&gt;        msgImage = MIMEImage(fp.read())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;119&lt;/span&gt;        fp.close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;120&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;121&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;122&lt;/span&gt;    msgImage.add_header(&lt;span class=&quot;hljs-string&quot;&gt;'Content-ID'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'&amp;lt;image1&amp;gt;'&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;123&lt;/span&gt;    msgRoot.attach(msgImage)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;124&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; msgRoot&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;125&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;126&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sendMsg&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(message)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;127&lt;/span&gt;    mail_host = &lt;span class=&quot;hljs-string&quot;&gt;&quot;smtp.qq.com&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;128&lt;/span&gt;    mail_user = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*******&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;129&lt;/span&gt;    mail_pass = &lt;span class=&quot;hljs-string&quot;&gt;&quot;********&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;130&lt;/span&gt;    sender = &lt;span class=&quot;hljs-string&quot;&gt;'********'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;131&lt;/span&gt;    receivers = [&lt;span class=&quot;hljs-string&quot;&gt;'*******'&lt;/span&gt;]&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;132&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;133&lt;/span&gt;        smtpObj = smtplib.SMTP()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;134&lt;/span&gt;        smtpObj.connect(mail_host)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;135&lt;/span&gt;        smtpObj.ehlo()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;136&lt;/span&gt;        smtpObj.starttls()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;137&lt;/span&gt;        smtpObj.login(mail_user,mail_pass)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;138&lt;/span&gt;        smtpObj.sendmail(sender,receivers,message.as_string())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;139&lt;/span&gt;        print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;邮件发送成功&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;140&lt;/span&gt;        smtpObj.quit()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;141&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; smtplib.SMTPException:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;142&lt;/span&gt;        print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error:无法发送邮件&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;143&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;144&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;145&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;146&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;147&lt;/span&gt;    province = &lt;span class=&quot;hljs-string&quot;&gt;&quot;HB&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;148&lt;/span&gt;    city = &lt;span class=&quot;hljs-string&quot;&gt;&quot;wuhan&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;149&lt;/span&gt;    url = &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.nmc.cn/publish/forecast/A&quot;&lt;/span&gt; + province + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt; + city + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;150&lt;/span&gt;    html = getHTMLText(url)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;151&lt;/span&gt;    url = &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://www.douban.com/photos/album/157693223/&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;152&lt;/span&gt;image = getHTMLText(url)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;153&lt;/span&gt;imagLink = []&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;154&lt;/span&gt;    whetherInfo = parserHTMLWeather(html)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;155&lt;/span&gt;    name = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;156&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; image &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; imagLink:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;157&lt;/span&gt;        print(image)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;158&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; image &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; imagLink:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;159&lt;/span&gt;        downloadPicture(image,name)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;160&lt;/span&gt;        name += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;hljs-string&quot;&gt;'pictureName.txt'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'r'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;162&lt;/span&gt;        name = eval(f.read())&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;163&lt;/span&gt;        f.close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;164&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;hljs-string&quot;&gt;'pictureName.txt'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'w'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;165&lt;/span&gt;        newName = str(name + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;166&lt;/span&gt;        f.write(newName)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;167&lt;/span&gt;        f.close()&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;168&lt;/span&gt;    msgRoot = makeMessage(whetherInfo,name)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;169&lt;/span&gt;sendMsg(msgRoot)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;170&lt;/span&gt;main()&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;欲获取代码，请关注我们的微信公众号【程序猿声】，在后台回复：&lt;strong&gt;pylove&lt;/strong&gt;。即可下载。&lt;/p&gt;
&lt;img title=&quot;微信公众号&quot; src=&quot;http://upload-images.jianshu.io/upload_images/10386940-546ac15b9d7add56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;微信公众号&quot;/&gt;&lt;p&gt;推荐文章：&lt;a href=&quot;https://www.cnblogs.com/infroad/p/9260954.html&quot;&gt;10分钟教你用Python做个打飞机小游戏超详细教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐文章：&lt;a href=&quot;https://www.cnblogs.com/infroad/p/9269158.html&quot;&gt;10分钟教你用python下载和拼接微信好友头像图片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐文章：&lt;a href=&quot;https://www.cnblogs.com/infroad/p/9275903.html&quot;&gt;10分钟教你用python一行代码搞点大新闻&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐文章：&lt;a href=&quot;https://www.cnblogs.com/infroad/p/9241267.html&quot;&gt;10分钟教你用python打造贪吃蛇超详细教程&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Jul 2018 16:24:00 +0000</pubDate>
<dc:creator>短短的路走走停停</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/infroad/p/9278934.html</dc:identifier>
</item>
<item>
<title>SpringBoot集成Apache Shiro - 沐璟</title>
<link>http://www.cnblogs.com/sankt/p/9278886.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sankt/p/9278886.html</guid>
<description>&lt;p&gt;笔者因为项目转型的原因，对Apache Shiro安全框架做了一点研究工作，故想写点东西以便将来查阅。之所以选择Shiro也是看了很多人的推荐，号称功能丰富强大，而且易于使用。实践下来的确如大多数人所说简约优美，小巧精悍。&lt;/p&gt;
&lt;p&gt;介绍demo项目前，简单说明一下Shiro框架的特性。&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;1.  Apache Shiro Features&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/373479/201807/373479-20180707233656169-1250233800.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;p&gt;从上图可以看出Shiro具备应用程序安全框架的四大基石”：身份验证、授权、会话管理和密码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;有时被称为‘登录’，这是需要明确用户是谁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;访问控制，即确定‘谁’对‘什么’有访问权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session Management&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;管理特定用户的会话，即使在非web或EJB应用程序中也是如此。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cryptography&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;使用加密算法保持数据安全，但易于使用。&lt;/p&gt;

&lt;p&gt;在不同的应用程序环境中，还有更多的特性来支持和增强这些关注点，特别是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web Support&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;Shiro的Web支持API帮助轻松地保护web应用程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;缓存是ApacheShiro的API中的第一等公民，以确保安全操作同时保持快速和高效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;ApacheShiro支持具有并发特性的多线程应用程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;提供测试支持，以帮助编写单元和集成测试，并确保代码如预期的安全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run as&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;允许用户假定另一个用户的身份(如果允许的话)的特性，有时在管理场景中很有用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember Me&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;记住用户在会话中的身份，这样他们就只需要在强制的情况下输入口令登录。&lt;/p&gt;

&lt;h3&gt;2. High-Level Overview&lt;/h3&gt;
&lt;p&gt;Shiro的体系结构有三个主要概念：Subject、SecurityManager和Realms。下图展现了它的运行原理，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/373479/201807/373479-20180707233938087-1456178911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主题&lt;/strong&gt;：主题本质上是当前正在执行的用户。虽然“用户”这个词通常意味着一个人，一个主题可以是一个人，但它也可以代表一个第三方服务、守护进程帐户、cron作业或任何类似的东西-基本上是任何当前与软件交互的东西。Subject实例都绑定到(并且需要)一个SecurityManager。当与主题交互时，这些交互转化为与SecurityManager的特定主题交互。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityManager&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;SecurityManager是Shiro体系结构的核心，它将其内部安全组件协调在一起形成一个对象图。然而，一旦为应用程序配置了SecurityManager及其内部对象图，它通常会被单独使用，应用程序开发人员将几乎所有的时间都花在Subject API上。当与一个主题交互时，实际上是幕后的SecurityManager为任何主题安全操作做了所有繁重的工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;领域：&lt;/strong&gt;领域充当Shiro和应用程序安全数据之间的“桥梁”或“连接器”。当涉及到实际与用户帐户等安全相关的数据交互以执行身份验证(登录)和授权(访问控制)时，Shiro从一个或多个为应用程序配置的领域中查找数据。从这个意义上说，领域本质上是一个特定于安全的DAO：它封装数据源的连接细节，并根据需要将相关数据提供给Shiro。配置Shiro时，必须指定至少一个用于身份验证和/或授权的域。SecurityManager可以配置多个Realm，但至少需要一个。Shiro提供了开箱即用的领域，以连接到许多安全数据源(也称为目录)，如LDAP、关系数据库(JDBC)、INI和属性文件等文本配置源。&lt;/p&gt;

&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;3. Detailed Architecture&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/373479/201807/373479-20180707234136962-1290278670.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;4. 过滤器&lt;/h3&gt;
&lt;p&gt;当 Shiro 被运用到 web 项目时，Shiro 会自动创建一些默认的过滤器对客户端请求进行过滤。以下是 Shiro 内置过滤器：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;过滤器简称&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;对应的 Java 类&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;anon&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authc.AnonymousFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;authc&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authc.FormAuthenticationFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;authcBasic&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;perms&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;port&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authz.PortFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;rest&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;roles&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authz.RolesAuthorizationFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;ssl&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authz.SslFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;user&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authc.UserFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;logout&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;org.apache.shiro.web.filter.authc.LogoutFilter&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br/&gt;项目中常用的解释一下， &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/test/**=anon&lt;/strong&gt; ~~所有url 可以匿名访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/test/**=authc&lt;/strong&gt; ~~url需要认证才能访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/test/**=perms[user:add] &lt;/strong&gt; ~~url需要认证用户拥有 user:add 权限才能访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/test/**=roles[admin]&lt;/strong&gt;  ~~url需要认证用户拥有 admin 角色才能访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/test/**=user&lt;/strong&gt; ~~url 需要认证或通过记住我认证才能访问&lt;/p&gt;

&lt;h3&gt;5. DEMO&lt;/h3&gt;
&lt;p&gt;开发工具为&lt;strong&gt;Eclipse+Maven&lt;/strong&gt;,新建&lt;strong&gt;Springboot&lt;/strong&gt;项目，版本号为1.5.14&lt;/p&gt;
&lt;p&gt;模板引擎使用&lt;strong&gt;Thymeleaf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了突出shiro，数据访问层略过，服务层模拟查询数据，Realm里面硬编码权限和角色信息简化代码。&lt;/p&gt;
&lt;p&gt;整个系统的核心在于两个class(MyShiroRealm + ShiroConfiguration), 项目结构如下，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/373479/201807/373479-20180707234501525-2105486368.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.1 在pom.xml里面添加好shiro-core, shiro-spring&lt;/strong&gt;&lt;strong&gt;，&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;

         &amp;lt;groupId&amp;gt;org.apache.shiro&amp;lt;/groupId&amp;gt;

         &amp;lt;artifactId&amp;gt;shiro-core&amp;lt;/artifactId&amp;gt;

         &amp;lt;version&amp;gt;1.4.0&amp;lt;/version&amp;gt;

&amp;lt;/dependency&amp;gt;

&amp;lt;!-- shiro权限控制框架 --&amp;gt;

&amp;lt;dependency&amp;gt;

         &amp;lt;groupId&amp;gt;org.apache.shiro&amp;lt;/groupId&amp;gt;

         &amp;lt;artifactId&amp;gt;shiro-spring&amp;lt;/artifactId&amp;gt;

         &amp;lt;version&amp;gt;1.4.0&amp;lt;/version&amp;gt;

&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5.2 &lt;strong&gt;显示层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模板引擎Thymeleaf&lt;/strong&gt;&lt;strong&gt;，故application&lt;/strong&gt;&lt;strong&gt;配置文件如下：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; spring.thymeleaf.cache=&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; spring.thymeleaf.prefix=classpath:/templates/
&lt;span&gt;3&lt;/span&gt; spring.thymeleaf.suffix=&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; spring.thymeleaf.mode=&lt;span&gt;HTML5
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; spring.thymeleaf.encoding=UTF-8
&lt;span&gt;6&lt;/span&gt; spring.thymeleaf.content-type=text/html
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;5.3 显示层静态页面如下：&lt;/h3&gt;
&lt;p&gt;403.html&lt;/p&gt;
&lt;p&gt;add.html&lt;/p&gt;
&lt;p&gt;delete.html&lt;/p&gt;
&lt;p&gt;details.html&lt;/p&gt;
&lt;p&gt;edit.html&lt;/p&gt;
&lt;p&gt;index.html&lt;/p&gt;
&lt;p&gt;login.html&lt;/p&gt;
&lt;p&gt;logout.html&lt;/p&gt;

&lt;h3&gt;5.4 几乎所有静态页面就是一个空壳，大体如add.html&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_9f7e6938-c3cf-495d-b0b7-a3c72460d48b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9f7e6938-c3cf-495d-b0b7-a3c72460d48b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9f7e6938-c3cf-495d-b0b7-a3c72460d48b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&amp;lt;/meta&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;title&amp;gt;Add Page&amp;lt;/title&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;h1&amp;gt;Add Page&amp;lt;/h1&amp;gt;
&lt;span&gt; 9&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;10&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;add.html&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7f281962-86b2-4817-8796-c4aac3548b5e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7f281962-86b2-4817-8796-c4aac3548b5e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7f281962-86b2-4817-8796-c4aac3548b5e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&amp;lt;/meta&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;title&amp;gt;Login Page&amp;lt;/title&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;style type=&quot;text/css&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;table {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    width: 360px;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     min-&lt;span&gt;height: 25px;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     line-&lt;span&gt;height: 25px;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     text-&lt;span&gt;align: center;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     border-&lt;span&gt;color: #b6ff00;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     border-&lt;span&gt;collapse: collapse;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &amp;lt;/style&amp;gt;
&lt;span&gt;17&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;18&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;div&amp;gt;
&lt;span&gt;20&lt;/span&gt;         &amp;lt;form action=&quot;/home/check&quot; method=&quot;post&quot;&amp;gt;
&lt;span&gt;21&lt;/span&gt;             &amp;lt;table border=&quot;1&quot;&amp;gt;
&lt;span&gt;22&lt;/span&gt;                 &amp;lt;tr&amp;gt;
&lt;span&gt;23&lt;/span&gt;                     &amp;lt;th&amp;gt;User Name&amp;lt;/th&amp;gt;
&lt;span&gt;24&lt;/span&gt;                     &amp;lt;th&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; /&amp;gt;&amp;lt;/th&amp;gt;
&lt;span&gt;25&lt;/span&gt;                 &amp;lt;/tr&amp;gt;
&lt;span&gt;26&lt;/span&gt;                 &amp;lt;tr&amp;gt;
&lt;span&gt;27&lt;/span&gt;                     &amp;lt;td&amp;gt;Password&amp;lt;/td&amp;gt;
&lt;span&gt;28&lt;/span&gt;                     &amp;lt;td&amp;gt;&amp;lt;input type=&quot;password&quot; name=&quot;password&quot; /&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;29&lt;/span&gt;                 &amp;lt;/tr&amp;gt;
&lt;span&gt;30&lt;/span&gt;                 &amp;lt;tr&amp;gt;
&lt;span&gt;31&lt;/span&gt;                     &amp;lt;td&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;32&lt;/span&gt;                     &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
&lt;span&gt;33&lt;/span&gt;                 &amp;lt;/tr&amp;gt;
&lt;span&gt;34&lt;/span&gt;             &amp;lt;/table&amp;gt;
&lt;span&gt;35&lt;/span&gt;         &amp;lt;/form&amp;gt;
&lt;span&gt;36&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;37&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;38&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;login.html&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_b5a64d41-64a0-4269-a229-59c0a46190c6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b5a64d41-64a0-4269-a229-59c0a46190c6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b5a64d41-64a0-4269-a229-59c0a46190c6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&amp;lt;/meta&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;title&amp;gt;Index Page&amp;lt;/title&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;style type=&quot;text/css&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;p {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     font-family: Times, TimesNR, 'New Century Schoolbook'&lt;span&gt;, Georgia,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         'New York'&lt;span&gt;, serif;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     font-&lt;span&gt;size: 20px;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &amp;lt;/style&amp;gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;15&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;16&lt;/span&gt;     &amp;lt;h1&amp;gt;This is index page.&amp;lt;/h1&amp;gt;
&lt;span&gt;17&lt;/span&gt;     &amp;lt;p&amp;gt;
&lt;span&gt;18&lt;/span&gt;         Customer Name: &amp;lt;span th:text=&quot;${name}&quot;&amp;gt;&amp;lt;/span&amp;gt; --- Role: &amp;lt;&lt;span&gt;span
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             th:text=&quot;${role}&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;/p&amp;gt;
&lt;span&gt;21&lt;/span&gt;     &amp;lt;table border=&quot;1&quot;&amp;gt;
&lt;span&gt;22&lt;/span&gt;         &amp;lt;tr&amp;gt;
&lt;span&gt;23&lt;/span&gt;             &amp;lt;th&amp;gt;角色&amp;lt;/th&amp;gt;
&lt;span&gt;24&lt;/span&gt;             &amp;lt;th&amp;gt;权限&amp;lt;/th&amp;gt;
&lt;span&gt;25&lt;/span&gt;         &amp;lt;/tr&amp;gt;
&lt;span&gt;26&lt;/span&gt;         &amp;lt;tr&amp;gt;
&lt;span&gt;27&lt;/span&gt;             &amp;lt;td&amp;gt;admin&amp;lt;/td&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;td&amp;gt;增加，删除，编辑，查看&amp;lt;/td&amp;gt;
&lt;span&gt;29&lt;/span&gt;         &amp;lt;/tr&amp;gt;
&lt;span&gt;30&lt;/span&gt;         &amp;lt;tr&amp;gt;
&lt;span&gt;31&lt;/span&gt;             &amp;lt;td&amp;gt;operator&amp;lt;/td&amp;gt;
&lt;span&gt;32&lt;/span&gt;             &amp;lt;td&amp;gt;编辑，查看&amp;lt;/td&amp;gt;
&lt;span&gt;33&lt;/span&gt;         &amp;lt;/tr&amp;gt;
&lt;span&gt;34&lt;/span&gt;         &amp;lt;tr&amp;gt;
&lt;span&gt;35&lt;/span&gt;             &amp;lt;td&amp;gt;viewer&amp;lt;/td&amp;gt;
&lt;span&gt;36&lt;/span&gt;             &amp;lt;td&amp;gt;查看&amp;lt;/td&amp;gt;
&lt;span&gt;37&lt;/span&gt;         &amp;lt;/tr&amp;gt;
&lt;span&gt;38&lt;/span&gt;     &amp;lt;/table&amp;gt;
&lt;span&gt;39&lt;/span&gt;     &amp;lt;ul&amp;gt;
&lt;span&gt;40&lt;/span&gt;         &amp;lt;li&amp;gt;&amp;lt;a th:href=&quot;@{/customer/index}&quot;&amp;gt;Index&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;41&lt;/span&gt;         &amp;lt;li&amp;gt;&amp;lt;a th:href=&quot;@{/customer/details}&quot;&amp;gt;Details&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;42&lt;/span&gt;         &amp;lt;li&amp;gt;&amp;lt;a th:href=&quot;@{/customer/add}&quot;&amp;gt;Add&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;43&lt;/span&gt;         &amp;lt;li&amp;gt;&amp;lt;a th:href=&quot;@{/customer/edit}&quot;&amp;gt;Edit&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;44&lt;/span&gt;         &amp;lt;li&amp;gt;&amp;lt;a th:href=&quot;@{/customer/delete}&quot;&amp;gt;Delete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;45&lt;/span&gt;     &amp;lt;/ul&amp;gt;
&lt;span&gt;46&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;47&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;index.html&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;5.5 Model&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_466cd7f9-9403-4620-94f6-3d049d1752b5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_466cd7f9-9403-4620-94f6-3d049d1752b5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_466cd7f9-9403-4620-94f6-3d049d1752b5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Customer &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 7429292944316962328L&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String role;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getRole() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; role;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRole(String role) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.role =&lt;span&gt; role;
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Customer(String name, String password, String role) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.role =&lt;span&gt; role;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Name : --- &quot; + name + &quot;, Password : --- &quot; + password + &quot;, Role : *** &quot; +&lt;span&gt; role;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Customer.java&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;5.6 Service&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_8ce3688f-1c88-4ae0-948b-f4f67218032d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8ce3688f-1c88-4ae0-948b-f4f67218032d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8ce3688f-1c88-4ae0-948b-f4f67218032d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerService {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Customer findByName(String name) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模拟查询数据库
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tom is admin, alice is operator, lucy is viewer&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (name.equals(&quot;alice&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Customer(name, &quot;123&quot;, &quot;operator&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;CustomerService.java&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;5.7 Controller&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_c15e422f-246f-47e4-8218-1d3f2f9cbf43&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c15e422f-246f-47e4-8218-1d3f2f9cbf43&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c15e422f-246f-47e4-8218-1d3f2f9cbf43&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
@RequestMapping(&lt;/span&gt;&quot;customer&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerController {    
    @RequestMapping(&lt;/span&gt;&quot;/index&quot;&lt;span&gt;)
    @RequiresPermissions(&lt;/span&gt;&quot;customer:index&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;权限管理; &lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String index(Model model) {    
        Subject subject &lt;/span&gt;=&lt;span&gt; SecurityUtils.getSubject();
        Customer customer &lt;/span&gt;=&lt;span&gt; (Customer)subject.getPrincipal();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(customer != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            model.addAttribute(&lt;/span&gt;&quot;name&quot;&lt;span&gt;, customer.getName());
            model.addAttribute(&lt;/span&gt;&quot;role&quot;&lt;span&gt;, customer.getRole());
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;index&quot;&lt;span&gt;;
    }
    
    @RequestMapping(&lt;/span&gt;&quot;/details&quot;&lt;span&gt;)
    @RequiresPermissions(&lt;/span&gt;&quot;customer:details&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;权限管理; &lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String details() {    
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;details&quot;&lt;span&gt;;
    }
    
    @RequestMapping(&lt;/span&gt;&quot;/add&quot;&lt;span&gt;)    
    @RequiresRoles(&lt;/span&gt;&quot;admin&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String add() {    
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;add&quot;&lt;span&gt;;
    }
    
    @RequestMapping(&lt;/span&gt;&quot;/edit&quot;&lt;span&gt;)
    @RequiresPermissions(&lt;/span&gt;&quot;customer:edit&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;权限管理; &lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String edit() {    
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;edit&quot;&lt;span&gt;;
    }
    
    @RequestMapping(&lt;/span&gt;&quot;/delete&quot;&lt;span&gt;)
    @RequiresPermissions(&lt;/span&gt;&quot;customer:delete&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;权限管理;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String delete() {    
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;delete&quot;&lt;span&gt;;
    }    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;CustomerController.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_7584dfd7-9187-4535-b940-601f935c9b1e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7584dfd7-9187-4535-b940-601f935c9b1e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7584dfd7-9187-4535-b940-601f935c9b1e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
@RequestMapping(&lt;/span&gt;&quot;home&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeController {
    @RequestMapping(&lt;/span&gt;&quot;/login&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;login&quot;&lt;span&gt;;
    }

    @RequestMapping(&lt;/span&gt;&quot;/check&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String check(HttpServletRequest request) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        System.out.println(&lt;/span&gt;&quot;HomeController.check()&quot;&lt;span&gt;);

        String name &lt;/span&gt;= request.getParameter(&quot;name&quot;&lt;span&gt;);
        String password &lt;/span&gt;= request.getParameter(&quot;password&quot;&lt;span&gt;);
        UsernamePasswordToken token &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UsernamePasswordToken(name, password);
        Subject subject &lt;/span&gt;=&lt;span&gt; SecurityUtils.getSubject();

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            subject.login(token);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
            System.out.println(ex.getMessage());
            System.out.println(ex.getStackTrace());
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;login&quot;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;redirect:/customer/index&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;HomeController.java&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;5.8 最重要的两个类如下:&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_08cfbf22-7b2d-4785-936b-e2a80eb671ce&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_08cfbf22-7b2d-4785-936b-e2a80eb671ce&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_08cfbf22-7b2d-4785-936b-e2a80eb671ce&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.demo.config;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedHashMap;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.mgt.SecurityManager;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.LifecycleBeanPostProcessor;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.spring.web.ShiroFilterFactoryBean;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.web.mgt.DefaultWebSecurityManager;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ShiroConfiguration {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean shirFilter(SecurityManager securityManager) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         System.out.println(&quot;ShiroConfiguration.shirFilter()&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         ShiroFilterFactoryBean shiroFilterFactoryBean = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ShiroFilterFactoryBean();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        shiroFilterFactoryBean.setSecurityManager(securityManager);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 过滤器.&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         Map&amp;lt;String, String&amp;gt; filterChainDefinitionMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置不会被拦截的链接 顺序判断&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/static/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/home/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/test/**&quot;, &quot;anon&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         filterChainDefinitionMap.put(&quot;/customer/**&quot;, &quot;authc&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         shiroFilterFactoryBean.setLoginUrl(&quot;/home/login&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 登录成功后要跳转的链接&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         shiroFilterFactoryBean.setSuccessUrl(&quot;/customer/index&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; shiroFilterFactoryBean;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyShiroRealm myShiroRealm() {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         MyShiroRealm myShiroRealm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyShiroRealm();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; myShiroRealm;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SecurityManager securityManager() {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         DefaultWebSecurityManager securityManager = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultWebSecurityManager();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        securityManager.setRealm(myShiroRealm());
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; securityManager;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启Shiro AOP注解支持.&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         System.out.println(&quot;OPNE AOP......&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationAttributeSourceAdvisor();
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; authorizationAttributeSourceAdvisor;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultAdvisorAutoProxyCreator();
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; 
&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 管理shiro生命周期&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    @Bean
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LifecycleBeanPostProcessor();
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;ShiroConfiguration.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;因为在Shiro中，最终是通过Realm来获取应用程序中的用户、角色及权限信息的。通常情况下，在Realm中会直接从我们的数据源中获取Shiro需要的验证信息。可以说，Realm是专用于安全框架的DAO.&lt;/p&gt;
&lt;p&gt;Shiro的认证过程最终会交由Realm执行，这时会调用Realm的getAuthenticationInfo(token)方法。&lt;/p&gt;
&lt;p&gt;该方法主要执行以下操作:&lt;/p&gt;

&lt;p&gt;1)         根据口令信息检查标识主体(帐户标识信息)&lt;/p&gt;
&lt;p&gt;2)         在数据源中查找相应的帐户信息&lt;/p&gt;
&lt;p&gt;3)         确保令牌提供的凭据与存储在数据存储中的凭据匹配&lt;/p&gt;
&lt;p&gt;4)         如果凭证匹配，则返回一个AuthenticationInfo实例，该实例将帐户数据封装为Shiro理解的格式&lt;/p&gt;
&lt;p&gt;5)         如果凭证不匹配，则引发身份验证异常&lt;/p&gt;

&lt;p&gt;在应用程序中需要自定义一个Realm类，继承AuthorizingRealm抽象类，覆盖doGetAuthenticationInfo()，重写获取用户信息的方法。&lt;/p&gt;

&lt;p&gt;shiro的权限授权是通过继承AuthorizingRealm抽象类，覆盖doGetAuthorizationInfo()。当访问到页面的时候，URL配置了相应的权限或者shiro标签才会执行此方法否则不会执行，所以如果只是简单的身份认证没有权限的控制的话，那么这个方法可以不进行实现，直接返回null即可。&lt;/p&gt;
&lt;p&gt;在这个方法中主要是使用类：SimpleAuthorizationInfo进行角色的添加和权限的添加。SecurityManager将权限或角色检查的任务委托给Authorizer，默认为ModularRealmAuthorizer。&lt;/p&gt;
&lt;p&gt;应用程序则可以通过角色或者权限进行访问控制。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_0ae1432a-cc9f-4c8b-a4da-22c6224406e6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0ae1432a-cc9f-4c8b-a4da-22c6224406e6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0ae1432a-cc9f-4c8b-a4da-22c6224406e6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.example.demo.config;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashSet;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authc.AuthenticationException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authc.AuthenticationInfo;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authc.AuthenticationToken;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authc.SimpleAuthenticationInfo;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authz.AuthorizationInfo;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.authz.SimpleAuthorizationInfo;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.realm.AuthorizingRealm;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.subject.PrincipalCollection;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.demo.model.Customer;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.example.demo.service.CustomerService;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyShiroRealm &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizingRealm {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; CustomerService customerService;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         System.out.println(&quot;MyShiroRealm.doGetAuthenticationInfo()&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取用户的输入的账号.&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         String name =&lt;span&gt; (String) token.getPrincipal();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        System.out.println(token.getCredentials());
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         Customer c =&lt;span&gt; customerService.findByName(name);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         System.out.println(&quot;Customer info : &quot; +&lt;span&gt; c);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (c == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         SimpleAuthenticationInfo authenticationInfo = &lt;span&gt;new&lt;/span&gt; SimpleAuthenticationInfo(c, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户名&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;                 c.getPassword(), &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 密码&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;                 getName() &lt;span&gt;//&lt;/span&gt;&lt;span&gt; realm name&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; authenticationInfo;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;         System.out.println(&quot;权限管理--&amp;gt;MyShiroRealm.doGetAuthorizationInfo()&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         SimpleAuthorizationInfo authorizationInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthorizationInfo();
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         Customer customer =&lt;span&gt; (Customer) principals.getPrimaryPrincipal();
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         System.out.println(&quot;Customer is : &quot; +&lt;span&gt; customer);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 权限单个添加;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加一个角色,不是配置意义上的添加,而是证明该用户拥有admin角色
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模拟查询数据库，得到用户角色为admin或者operator或者viewer
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; admin有所有权限，operator有查看和编辑权限，没有添加和删除权限
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; viewer只有查看权限&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;         authorizationInfo.addRole(&quot;operator&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加权限&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;         Set&amp;lt;String&amp;gt; permissionSet = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;String&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         permissionSet.add(&quot;customer:details&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         permissionSet.add(&quot;customer:index&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         permissionSet.add(&quot;customer:edit&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;permissionSet.add(&quot;customer:add&quot;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;permissionSet.add(&quot;customer:delete&quot;);&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;         
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        authorizationInfo.setStringPermissions(permissionSet);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; authorizationInfo;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MyShiroRealm&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;6. 参考资料&lt;/h3&gt;
&lt;p&gt;http://shiro.apache.org/introduction.html&lt;/p&gt;

</description>
<pubDate>Sat, 07 Jul 2018 16:02:00 +0000</pubDate>
<dc:creator>沐璟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sankt/p/9278886.html</dc:identifier>
</item>
<item>
<title>Python学习：13.Python正则表达式 - BD-ld-2017</title>
<link>http://www.cnblogs.com/liudi2017/p/9278885.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liudi2017/p/9278885.html</guid>
<description>&lt;p&gt;&lt;span&gt;一、正则表达式简介&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。 Python 自1.5版本起增加了re 模块，它提供 Perl 风格的正则表达式模式。&lt;/p&gt;
&lt;p&gt;　　就其本质而言，正则表达式（或 RE）是一种小型的、高度专业化的编程语言， （在Python中）它内嵌在Python中，并通过 re 模块实现。正则表达式模式被 编译成一系列的字节码，然后由用 C 编写的匹配引擎执行。&lt;/p&gt;
&lt;p&gt;　　re 模块使 Python 语言拥有全部的正则表达式功能。 compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。 re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二、字符匹配&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1.普通字符：大多数字符和字母都会和自身匹配&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gtuanalesxalexselericapp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gtuanalesxalexswxericapp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gtuanalesxalexselwupeiqialexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;2.元字符： .   ^   $   *   +   ?   { }   [ ]   |   ( )  \&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;.&lt;/strong&gt;   :匹配一个除了换行符任意一个字符　　　　&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel.w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexselaw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexselaw&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;一个点只能匹配一个字符&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;^&lt;/strong&gt;  :只有后面跟的字符串在开头，才能匹配上&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^alexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gtuanalesxalexselgeappalexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^alexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexselgtuanalesxalexselwgtappqialexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&quot;^&quot;这个符号控制开头，所以写在开头&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;$&lt;/strong&gt;  :只有它前面的字符串在检测的字符串的最后，才能匹配上&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexselseguanalesxalexselganapp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexselgtaanalesxalexsssiqialexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;*&lt;/strong&gt;  ：它控制它前面那个字符，他前面那个字符出现0到多个都可以匹配上&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexse&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alex*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexsellllll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsellllll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]    
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; ：匹配前面那个字符1到多次&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexselll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aleselll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;？ &lt;/strong&gt;：匹配前面那个字符0到1个，多余的只匹配一个&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ale&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexsel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexsellll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;{} &lt;/strong&gt; :控制它前面一个字符的匹配个数，可以有区间（闭区间），有区间的情况下按照多的匹配&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel{3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexselllll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexselll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel{3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexsell&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel{3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel{3}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexselll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexselll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel{3,5}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexsellllllll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexselllll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel{3,5}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexselll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexselll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexsel{3,5}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaalexsell&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　后面跟元字符去除特殊功能，&lt;br/&gt;　　后面跟普通字符实现特殊功能。&lt;br/&gt;　　引用序号对应的字组所匹配的字符串 （一个括号为一个组）。&lt;br/&gt;　　在开头加上 r 表示不转义。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;\2 就相当于第二个组(eric)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(alexsel)(eric)com\2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexselericcomeric&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexselericcomeric&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(alexsel)(eric)com\1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexselericcomalex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexselericcomalex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(alexsel)(eric)com\1\2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alexselericcomalexseleric&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexselericcomalexeric&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　\d&lt;/strong&gt;  :匹配任何十进制数；它相当于类[0-9]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d\d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;\D &lt;/strong&gt; :匹配任何非数字字符；它相当于类[^0-9]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\D\D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;az&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\D\d\D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\D\d\D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1z111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;z1z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;\s  &lt;/strong&gt;:匹配任何空白字符；它相当于类[ \t\n\r\f\v]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aazz1 z11..34c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;\S  &lt;/strong&gt;:匹配任何非空白字符；它相当于类[^ \t\n\r\f\v]&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;\w  &lt;/strong&gt;:匹配任何字母数字字符；他相当于类[a-zA-Z0-9_]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aazz1z11..34c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;\W&lt;/strong&gt;  :匹配任何非字母数字字符；它相当于类[^a-zA-Z0-9_]&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;\b&lt;/strong&gt;  :匹配一个单词边界，也就是指单词和空格间的位置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\babc\b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc sdsadasabcasdsadasdabcasdsa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\balexsel\b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc alexsel abcasdsadasdabcasdsa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\balexsel\\b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc alexsel abcasdsadasdabcasdsa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexsel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\balexsel\b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc alexsel abcasdsadasdabcasdsa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　&lt;strong&gt;()  &lt;/strong&gt;:把括号内字符作为一个整体去处理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\d+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a222bz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a222&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(ab)*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aabz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将括号里的字符串作为整和后面字符逐个进行匹配，在这里就首先将后面字符串里的a和ab进&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;行匹配，开头匹配成功，在看看后面是a，和ab中的第二个不匹配，然后就看后面字符串中的第二个a，和ab匹配，首先a匹配成功，b也匹配成功，拿到匹配&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;然后在看后面字符串中的第三个是b，开头匹配失败，到第四个，后面依次&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\d+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a222bz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a222&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\d+?)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a222bz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).group() +&lt;span&gt;的最小次数为1
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\d*?)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a222bz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).group() *&lt;span&gt;的最小次数为0
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;非贪婪匹配模式 加？ ,但是如果后面还有匹配字符，就无法实现非贪婪匹配&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;（如果前后均有匹配条件，则无法实现非贪婪模式）&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\d+?)b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aa2017666bz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017666&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\d*?)b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a222bz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a222b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\d+?)b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a277722bz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a277722b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 元字符在字符集里就代表字符，没有特殊意义（有几个例外）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a[.]d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaacd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a[.]d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaa.d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;strong&gt;[&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;例外&lt;/strong&gt;&lt;br/&gt;[-] [^] [\]&lt;/p&gt;
&lt;p&gt;[-]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;匹配单个字符，a到z所有的字符&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[a-z]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaa.d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[a-z]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazzzzzaaccc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[1-3]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[^]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;匹配除了这个范围里的字符，(^在这里有 非 的意思)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[^1-3]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[^1-4]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaazz1111344444c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[\]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[\d]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aazz1144c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　我们首先考察的元字符是&quot;[&quot; 和 &quot;]&quot;。它们常用来指定一个字符类别，所谓字符类 别就是你想匹配的一个字符集。字符可以单个列出，也可以用“-”号分隔的两个给定 字符来表示一个字符区间。例如，[abc] 将匹配&quot;a&quot;, &quot;b&quot;, 或 &quot;c&quot;中的任意一个字 符；也可以用区间[a-c]来表示同一字符集，和前者效果一致。如果你只想匹配小写 字母，那么 RE 应写成 [a-z]，元字符在类别里并不起作用。例如，[akm$]将匹配字符&quot;a&quot;, &quot;k&quot;, &quot;m&quot;, 或 &quot;$&quot; 中 的任意一个；&quot;$&quot;通常用作元字符，但在字符类别里，其特性被除去，恢复成普通字符。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;三、Python正则表达式各种函数以及参数解析&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;match: re.match(pattern,string,flags=0)&lt;/p&gt;
&lt;p&gt;flags 编译标志位，用于修改正则表达式的匹配方式，如：是否区别大小写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;comwww.runcomoob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()&lt;br/&gt;'com'
re.match(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Comwww.runComoob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,re.I).group()&lt;br/&gt;'Com'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;flags 编译标志位&lt;/p&gt;
&lt;p&gt;re.I 使匹配对大小写不敏感&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;COM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,re.I).group()
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;COM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;re.L 做本地化识别（locale-aware）匹配&lt;/p&gt;
&lt;p&gt;re.M 多行匹配，影响^和$&lt;/p&gt;
&lt;p&gt;re.S 使.匹配包括换行在内的所有字符&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc\nde&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc\nde&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,re.S)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;re.U 根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B&lt;/p&gt;
&lt;p&gt;re.X 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。&lt;/p&gt;

&lt;p&gt;search:re.search(pattern,string,flags=0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\dcom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www.4comrunoob.5com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).group()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;re.match与re.search的区别&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。&lt;/p&gt;
&lt;p&gt;　　match和search一旦匹配成功，就是一个match object对象，而match object对象有以下方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;group() 　　 返回被RE匹配的字符串&lt;/li&gt;
&lt;li&gt;start() 　　    返回匹配开始的位置&lt;/li&gt;
&lt;li&gt;end() 　　     返回匹配结束的位置&lt;/li&gt;
&lt;li&gt;span() 　　   返回一个元组包含匹配（开始，结束）的位置&lt;/li&gt;
&lt;li&gt;group() 　　 返回re整体匹配的字符串，可以一次输入多个组号，对应组号匹配的字符串,获取匹配到的所有结果（无论是否有组）&lt;/li&gt;
&lt;li&gt;a. group ()　 返回re整体匹配的字符串，&lt;/li&gt;
&lt;li&gt;b. group (n,m)  　　返回组号为n，m所匹配的字符串，如果组号不存在，则返回indexError异常&lt;/li&gt;
&lt;li&gt;c. groups() 　　groups() 方法返回一个包含正则表达式中所有小组字符串的元组，从 1 到所含的小组号，通常groups()不需要参数，返回一个元组，元组中的元就是正则表达式中定义的组。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
a = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123abc456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
re.search(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;([0-9]*)([a-z]*)([0-9]*)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,a).group(0)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;123abc456,返回整体&lt;/span&gt;
re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;([0-9]*)([a-z]*)([0-9]*)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,a).group(1)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;
re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;([0-9]*)([a-z]*)([0-9]*)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,a).group(2)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;
re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;([0-9]*)([a-z]*)([0-9]*)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,a).group(3)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;456&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上面的代码练习中，我们看到很多代码后面加有group，在这我们就针对这个group进行解析。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
m = re.match(&quot;([abc])+&quot;, &quot;abc&quot;&lt;span&gt;)&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　一般，m.group(N) 返回第N组括号匹配的字符。 而m.group() == m.group(0) == 所有匹配的字符，与括号无关，这个是&lt;a class=&quot;baidu-highlight&quot; href=&quot;https://www.baidu.com/s?wd=API&amp;amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;amp;rsv_dl=gh_pc_zhidao&quot; target=&quot;_blank&quot;&gt;API&lt;/a&gt;规定的。 m.groups() 返回所有括号匹配的字符，以tuple格式。m.groups() == (m.group(0), m.group(1), ...)&lt;/p&gt;

&lt;h3&gt;sub subn：&lt;/h3&gt;
&lt;p&gt;re.sub(pattern, repl, string, max=0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;g.t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;have&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I get A, I got B, I gut C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;匹配g.t字符，用have替换(.匹配一个除了换行符任意一个字符)&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I have A, I have B, I have C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;got&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;have&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I get A, I got B, I gut C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I get A, I have B, I gut C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;g.t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;have&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I get A, I got B, I gut C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,2)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;替换两个&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I have A, I have B, I gut C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;g.t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;have&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I get A, I got B, I gut C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I have A, I got B, I gut C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.subn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;g.t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;have&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I get A, I got B, I gut C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用re.subn显示替换里多少个&lt;/span&gt;
(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;I have A, I have B, I have C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 3)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;re.compile(strPattern[, flag]):&lt;/h3&gt;
&lt;p&gt;　　这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。&lt;/p&gt;
&lt;p&gt;　　第二个参数flag是 匹配模式，取值可以使用按位或运算符‘|‘表示同时生效，比如re.I | re.M可以把正则表达式编译成一个正则表达式对象。可以把那些经常使用的正则表达式编译成正则表达式对象，这样可以提高一定的效率。&lt;/p&gt;
&lt;p&gt;　　一个正则表达式对象的一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; text = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;JGood is a handsome boy, he is cool, clever, and so on...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; regex = re.compile(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\w*oo\w*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt; regex.findall(text)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JGood&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cool&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;split:&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
p = re.compile(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;+：匹配前面那个字符1到多次&lt;/span&gt;
p.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;one1two2three3four4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;spilt分割&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; p = re.compile(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;one1two2three3four4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;three&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;four&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;]

re.split(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;one1two2three3four4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;one1two2three3four4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;three&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;four&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;]

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4one1two2three3four4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;one&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;two&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;three&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;four&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果分割时左边或者右边已经被分过&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; re.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[bc]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;或者是无字符的情况下，就分出一个空字符&lt;/span&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;finditer():&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; p = re.compile(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; iterator = p.finditer(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12 drumm44ers drumming, 11 ... 10 ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; iterator
&lt;/span&gt;&amp;lt;callable-iterator object at 0x02626990&amp;gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;for&lt;/span&gt; match &lt;span&gt;in&lt;/span&gt;&lt;span&gt; iterator:
...      match.group() , match.span()&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;每个数字以及它们出现的位置&lt;/span&gt;
&lt;span&gt;...
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, (0, 2&lt;span&gt;))
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, (8, 10&lt;span&gt;))
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, (24, 26&lt;span&gt;))
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, (31, 33))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于我们是在python下使用的正则表达式，所以特殊字符需要多次转意，而使用了rawstring之后，就不用在多次转意仅仅就使用正则的规则就可以。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www4dd6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www4dd6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;www4dd6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在这里\d成功的原因是因为\d在ascii码中没有特殊含义，所以在这里就自动转意了，不过正规的写法就是前两个&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;单词边界&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; re.findall(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\babc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcsd abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc\b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcsd abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc\b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abcsd abc*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\babc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*abcsd*abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;检测单词边界不一定就是空格，还可以是除了字母以外的特殊字符&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 07 Jul 2018 16:01:00 +0000</pubDate>
<dc:creator>BD-ld-2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liudi2017/p/9278885.html</dc:identifier>
</item>
<item>
<title>Java基础（四）线程快速了解 - python修行路</title>
<link>http://www.cnblogs.com/zhaof/p/9278865.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/9278865.html</guid>
<description>&lt;p data-source-line=&quot;3&quot;&gt;开始整理线程之前，之前有个命令忘记整理了，先整理一下jar命令的使用&lt;/p&gt;

&lt;h2 id=&quot;toc_1&quot;&gt;Jar包&lt;/h2&gt;
&lt;p&gt;其实可以理解是java的压缩包&lt;br/&gt;方便使用，只要在classpath设置jar路径即可&lt;br/&gt;数据库驱动，ssh框架等都是以jar包体现的&lt;/p&gt;
&lt;p&gt;打包方式一：将指定的class文件打入到jar包中&lt;br/&gt;jar cvf xxx.jar Xxx.class yyy.class&lt;/p&gt;
&lt;p&gt;打包方式二：将某个目录下的所有文件打入到jar包中&lt;br/&gt;jar cvf xxx.jar -C xxx/.&lt;/p&gt;
&lt;p&gt;查看jar文件：&lt;br/&gt;jar -tf xxx.jar&lt;/p&gt;
&lt;p&gt;运行jar包中的类：&lt;br/&gt;java -cp xxx.jar xx.xx.xx(完整的类名)&lt;/p&gt;
&lt;p&gt;常用的jar命令参数：&lt;br/&gt;c：创建压缩文件&lt;br/&gt;f:指定存档名称&lt;br/&gt;v:显示详细信息&lt;br/&gt;m:加入自定义清单&lt;/p&gt;
&lt;p&gt;指定清单文件（xxx.jar/META-INF/MNIFEST.MF）的入口类&lt;br/&gt;jar cvfe classess.jar com.zhaofan.PackagDemo1 classes/.&lt;br/&gt;这样我们就可以通过java -jar xxx.jar直接执行&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;线程&lt;/h2&gt;
&lt;p&gt;进程：运行时概念，运行的应用程序&lt;br/&gt;线程：应用程序内部并发执行的代码段，共享内存&lt;/p&gt;
&lt;p&gt;这里几个关键词&lt;br/&gt;yield: 放弃cpu抢占权&lt;br/&gt;join:等待指定的线程执行完&lt;br/&gt;sleep:静态方法，让线程休眠毫秒数&lt;br/&gt;daemo:守护线程&lt;/p&gt;
&lt;p&gt;最简单的线程代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex9;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ThreadDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Mythread t1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Mythread();
        t1.start();
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Mythread &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            System.out.println(&lt;/span&gt;&quot;MyThread&quot;&lt;span&gt;);
        }

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;join的一个简单实用例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex9;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ThreadDemo2 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Player p1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Player(&quot;aa&quot;,5000&lt;span&gt;);
        Player p2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Player(&quot;bb&quot;,8000&lt;span&gt;);
        Player p3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Player(&quot;cc&quot;,2000&lt;span&gt;);
        Player p4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Player(&quot;dd&quot;,3000&lt;span&gt;);
        p1.start();
        p2.start();
        p3.start();
        p4.start();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            p1.join();
            p2.join();
            p3.join();
            p3.join();
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){

        }


        System.out.println(&lt;/span&gt;&quot;人到了，开始玩游戏&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Player &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; time;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Player(String name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; time){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.time =&lt;span&gt; time;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        System.out.println(&lt;/span&gt;&quot;玩家：&quot;+name + &quot;出发了&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            Thread.sleep(time);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){

        }
        System.out.println(&lt;/span&gt;&quot;玩家：&quot;+name + &quot;到了&quot;&lt;span&gt;);


    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;守护线程的一个使用例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex9;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ThraedDemo3 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Room r1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Room(&quot;no1&quot;,15000&lt;span&gt;);
        Waiter w1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Waiter();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;w1.setDaemon(true); 设置守护线程&lt;/span&gt;
&lt;span&gt;        r1.start();
        w1.start();
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Room &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String no;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; time;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Room(String no, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; time){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.no =&lt;span&gt; no;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.time =&lt;span&gt; time;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        System.out.println(&lt;/span&gt;&quot;no&quot; + &quot;号房间正在唱歌&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            Thread.sleep(time);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){

        }
        System.out.println(&lt;/span&gt;&quot;no&quot; + &quot;买单&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Waiter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Waiter(){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setDaemon(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            System.out.println(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; java.util.Date());
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                Thread.sleep(&lt;/span&gt;1000&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){

            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;任何一个对象都可以是锁，信号灯，其实就是一个参照物&lt;br/&gt;一个锁的代码例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex9;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ThreadDemo4 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Saler s1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Saler(&quot;a1&quot;&lt;span&gt;);
        Saler s2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Saler(&quot;a2&quot;&lt;span&gt;);
        s1.start();
        s2.start();
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Saler &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 锁&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; Object lock = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object();

    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; tickts = 100&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Saler(String name){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; tick =&lt;span&gt; getTickts();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tick &amp;gt; 0&lt;span&gt;){
                System.out.println(name&lt;/span&gt;+&quot;:&quot;+&lt;span&gt; tick);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取票&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getTickts(){
        &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (lock){
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; currTicket =&lt;span&gt; tickts;
            tickts &lt;/span&gt;--&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; currTicket;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有一种方法是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getTickts(){
   &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; currTicket =&lt;span&gt; tickts;
   tickts &lt;/span&gt;--&lt;span&gt;;
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; currTicket;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样也能实现锁的机制，但是注意这里必须是static&lt;/p&gt;
&lt;p&gt;我们整理一个新的写法，把票池单独写出来&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ThreadDemo2 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        TicketPool pool &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TicketPool();
        Saler s1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Saler(&quot;s1&quot;&lt;span&gt;,pool);
        Saler s2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Saler(&quot;s2&quot;&lt;span&gt;,pool);
        s1.start();
        s2.start();
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 票池&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TicketPool {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; tickets = 100&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从票池取票&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getTickets(){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ticket =&lt;span&gt; tickets;
        tickets &lt;/span&gt;-= 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ticket;
    }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 售票员&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; Saler &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; TicketPool pool = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Saler(String name, TicketPool tp){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pool =&lt;span&gt; tp;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; no =&lt;span&gt; pool.getTickets();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (no &amp;gt; 0&lt;span&gt; ){
                System.out.println(name &lt;/span&gt;+ &quot;:&quot; +&lt;span&gt; no);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两个小的练习熟悉上面知识点的使用：&lt;br/&gt;车过山洞的问题，山洞同时只允许一个车通过，现在有多辆车，不同的车通过的时间不同，代码实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex11;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CarCave {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Cave cave &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Cave();
        Car car1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Car(cave,10000,&quot;奥迪&quot;&lt;span&gt;);
        Car car2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Car(cave,8000,&quot;奔驰&quot;&lt;span&gt;);
        Car car3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Car(cave,6000,&quot;宝马&quot;&lt;span&gt;);
        Car car4 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Car(cave,2000,&quot;悍马&quot;&lt;span&gt;);
        car1.start();
        car2.start();
        car3.start();
        car4.start();

    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cave{

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; crossCar(Car car){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            System.out.println(car.name&lt;/span&gt;+&quot;：开始过山洞了&quot;&lt;span&gt;);
            Thread.sleep(car.time);
            System.out.println(car.name&lt;/span&gt;+&quot;：开始出山洞了&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){

        }


    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Car &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Cave cave;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; time;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String name;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Car(Cave cave ,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; time,String name){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.cave =&lt;span&gt; cave;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.time =&lt;span&gt; time;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        cave.crossCar(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二个小练习是我们经常遇到的场景，取票问题，现在有一个取票机，但是有五十个人要取票，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex11;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TicketDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        TicketMachine m &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TicketMachine();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;50;i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Person(m,&quot;tom&quot;+&lt;span&gt;i).start();
        }
    }
}


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取票机&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TicketMachine{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ticketNo = 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印票号&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; printTicktNo(){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; currTicketNo =&lt;span&gt; ticketNo;
        ticketNo &lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; currTicketNo;
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Person &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TicketMachine m;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Person(TicketMachine m,String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.m =&lt;span&gt; m;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; no =&lt;span&gt; m.printTicktNo();
        System.out.println(name&lt;/span&gt;+ &quot;:&quot; +&lt;span&gt; no);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;生产者消费者模型&lt;/h3&gt;
&lt;p&gt;通过上面的知识点，写一个生产者好消费者模型&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex11;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PCDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        MyList myList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyList();

        Productor p &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Productor(myList);
        Consumer c &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Consumer(myList);
        Consumer c2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Consumer(myList);
        Consumer c3 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Consumer(myList);
        p.start();
        c.start();
        c2.start();
        c3.start();
    }

}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyList{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Max = 100&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Integer&amp;gt; list = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;Integer&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;  &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addLast(Integer i){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (list){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (list.size() &amp;lt;&lt;span&gt; Max){
                    list.add(i);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }
            }
        }


    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;  Integer removeFirst(){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (list){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;list.isEmpty()){
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; list.remove(0&lt;span&gt;);
                }
            }
        }
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Productor &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MyList myList;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Productor(MyList myList){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.myList =&lt;span&gt; myList;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = 1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            myList.addLast(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Integer(i));
            System.out.println(&lt;/span&gt;&quot;生产者生产了&quot;+i+&quot;号&quot;&lt;span&gt;);
            i&lt;/span&gt;++&lt;span&gt;;
        }
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Consumer &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MyList myList;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Consumer(MyList myList){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.myList =&lt;span&gt; myList;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; no =&lt;span&gt; myList.removeFirst();
            System.out.println(&lt;/span&gt;&quot;消费者消费了&quot;+no+&quot;号&quot;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生产者消费者而改进版本：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex11;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PCDemo5 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Pool pool &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Pool();
        Producter p1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Producter(pool);
        Consumer c1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Consumer(pool);
        p1.start();
        c1.start();

    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Pool{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Integer&amp;gt; list = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;Integer&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Max = 100&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addLast(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n){
        &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (list.size() &amp;gt;=&lt;span&gt; Max){
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.wait();
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
                    e.printStackTrace();
                }
            }
            list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Integer(n));

            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.notifyAll();
        }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; remove(){
        &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (list.size() == 0&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.wait();
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
                    e.printStackTrace();
                }

            }
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; no = list.remove(0&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.notifyAll();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; no;
        }
    }

}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生产者&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; Producter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Pool pool;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; i = 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Producter(Pool pool){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pool =&lt;span&gt; pool;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            pool.addLast(i&lt;/span&gt;++&lt;span&gt;);
            System.out.println(&lt;/span&gt;&quot;生产者生产了&quot;+i+&quot;号&quot;&lt;span&gt;);
        }
    }

}


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 消费者&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; Consumer &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Pool pool;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Consumer(Pool pool){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pool =&lt;span&gt; pool;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; no =&lt;span&gt; pool.remove();
            System.out.println(&lt;/span&gt;&quot;消费者消费了&quot;+no+&quot;号&quot;&lt;span&gt;);
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wait()：让当前线程进入到锁对象的等待队列里，同时释放锁旗标。这个方法是当前锁对象的方法&lt;br/&gt;wait这里还可以添加参数wait(int n) :等待指定的时间片,等待队列中的线程最多等待n毫秒&lt;/p&gt;
&lt;p&gt;notify():这个方法是当前锁对象的方法,注意这里并不会释放锁&lt;br/&gt;notifyAll():通知等待队列中的所有线程都可以抢占cpu运行，通知需要获得对象的监控权&lt;/p&gt;
&lt;p&gt;sleep:当前CPU的抢占权，和锁对象的监控权无关。&lt;br/&gt;Thread.currentThread().getName():获取当前线程名字&lt;br/&gt;Thread.currentThread().setName():设置当前线程名字&lt;/p&gt;
&lt;p&gt;priority:1-10从低到高，默认是5&lt;br/&gt;Thread.currentThread().getPriority():设置当前线程优先级&lt;/p&gt;
&lt;p&gt;线程状态：&lt;br/&gt;BLOCKED: 阻塞&lt;br/&gt;NEW:新建&lt;br/&gt;RUNNABL:执行&lt;br/&gt;TERMINATED:已经终止&lt;br/&gt;TIMED_WAITING:限时等待&lt;br/&gt;WAITING:等待&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/997599/201807/997599-20180707234935082-972628071.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;创建一个线程的另外一种方式：&lt;br/&gt;实现Runnable接口&lt;br/&gt;1. 子类覆盖接口中的run方法&lt;br/&gt;2. 通过Thread类创建线程，并将实现了Runnable接口的子类对象作为参数传递给Thread类的构造函数&lt;br/&gt;3. Thread类对象调用start方法开启线程&lt;/p&gt;
&lt;p&gt;代码例子如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex11;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RunnableDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        MyRunnabl m &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyRunnabl();
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(m).start();
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; MyRunnabl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Runnable{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
        System.out.println(&lt;/span&gt;&quot;hello world&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;toc_4&quot;&gt;同步（synchronized）&lt;/h3&gt;
&lt;p&gt;synchronized(对象)&lt;br/&gt;{&lt;br/&gt;需要同步的代码&lt;br/&gt;}&lt;br/&gt;同步的特点：&lt;br/&gt;同步的前提是：&lt;br/&gt;需要两个或者两个以上的线程&lt;br/&gt;多个线程使用的同一个锁&lt;/p&gt;
&lt;p&gt;同步的弊端：&lt;br/&gt;当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的额运行效率&lt;/p&gt;

</description>
<pubDate>Sat, 07 Jul 2018 15:51:00 +0000</pubDate>
<dc:creator>python修行路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaof/p/9278865.html</dc:identifier>
</item>
<item>
<title>MySQL中间件之ProxySQL(2)：初试读写分离 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/9278839.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/9278839.html</guid>
<description>&lt;p&gt;这里通过一个简单的示例实现ProxySQL的读写分离功能，算是ProxySQL的快速入门。即使是快速入门，需要配置的内容也很多，包括：后端MySQL配置、监控配置、发送SQL语句的用户、SQL语句的路由规则。所以，想要实现一个ProxySQL+MySQL，即使只实现最基本的功能，步骤也是挺多的，不过配置的逻辑都很简单。&lt;/p&gt;
&lt;p&gt;实验环境：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Proxysql&lt;/td&gt;
&lt;td&gt;192.168.100.21&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;192.168.100.22&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;刚安装的全新MySQL实例&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Slave1&lt;/td&gt;
&lt;td&gt;192.168.100.23&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;刚安装的全新MySQL实例&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Slave2&lt;/td&gt;
&lt;td&gt;192.168.100.24&lt;/td&gt;
&lt;td&gt;130&lt;/td&gt;
&lt;td&gt;刚安装的全新MySQL实例&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201807/733013-20180707232048823-185148.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了演示完整的过程，这里把后端MySQL主从复制的基本配置步骤也列出来了。如了解配置过程，可跳过主从配置的部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意点：slave节点需要设置&lt;/strong&gt;&lt;code&gt;read_only=1&lt;/code&gt;。如果后端是PXC/MGR/MariaDB Galera，则无需手动设置，因为会自动设置。&lt;/p&gt;

&lt;h2 id=&quot;配置后端的主从复制&quot;&gt;1.1 配置后端的主从复制&lt;/h2&gt;
&lt;p&gt;提供3个MySQL节点的配置文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 以下是Master的配置文件
[mysqld]
datadir=/data
socket=/data/mysql.sock
server-id=110            
log-bin=/data/master-bin 
sync-binlog=1            
log-error=/data/error.log
pid-file=/data/mysqld.pid


# 以下是slave1的配置文件
[mysqld]
datadir=/data
socket=/data/mysql.sock  
server-id=120            
relay_log=/data/relay-log
log-error=/data/error.log
pid-file=/data/mysqld.pid
read_only=1

# 以下是slave2的配置文件
[mysqld]
datadir=/data
socket=/data/mysql.sock
server-id=130            
relay_log=/data/relay-log
log-error=/data/error.log
pid-file=/data/mysqld.pid
read_only=1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为3个MySQL节点提供数据目录/data&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;mkdir /data
chown -R mysql.mysql /data&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;初始化三个MySQL节点。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;mysqld --initialize-insecure --user=mysql --datadir=/data&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动3个MySQL节点的mysqld服务。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;systemctl start mysqld&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;连上master，修改root密码，创建用于复制的用户repl。&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;# 以下在master上执行
mysql&amp;gt; alter user root@localhost identified by 'P@ssword1!';

mysql&amp;gt; create user repl@'192.168.100.%' identified by 'P@ssword1!';
mysql&amp;gt; grant replication slave on *.* to repl@'192.168.100.%';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;连上两个slave，开启复制线程。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 以下在两个slave节点上都执行
change master to 
    master_host='192.168.100.22',
    master_user='repl',
    master_password='P@ssword1!',
    master_port=3306,
    master_log_file='master-bin.000001',
    master_log_pos=4;

start slave;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如此配置之后，3个MySQL节点就保持了同步。&lt;/p&gt;

&lt;h2 id=&quot;向proxysql中添加mysql节点&quot;&gt;1.2 向ProxySQL中添加MySQL节点&lt;/h2&gt;
&lt;p&gt;首先启动ProxySQL。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;service proxysql start&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动后会监听两个端口，默认为6032和6033。6032端口是ProxySQL的管理端口，6033是ProxySQL对外提供服务的端口。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[root@s1 ~]# netstat -tnlp
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address  Foreign Address  State   PID/Program name
tcp        0      0 0.0.0.0:6032   0.0.0.0:*        LISTEN  1231/proxysql   
tcp        0      0 0.0.0.0:6033   0.0.0.0:*        LISTEN  1231/proxysql   
tcp        0      0 0.0.0.0:22     0.0.0.0:*        LISTEN  1152/sshd       
tcp        0      0 127.0.0.1:25   0.0.0.0:*        LISTEN  2151/master     
tcp6       0      0 :::22          :::*             LISTEN  1152/sshd       
tcp6       0      0 ::1:25         :::*             LISTEN  2151/master  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后使用mysql客户端连接到ProxySQL的管理接口(admin interface)，该接口的默认管理员用户和密码都是admin。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[root@s1 ~]# mysql -uadmin -padmin -P6032 -h127.0.0.1 --prompt 'admin&amp;gt; '&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我这里重新设置了提示符。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; show databases;
+-----+---------------+-------------------------------------+
| seq | name          | file                                |
+-----+---------------+-------------------------------------+
| 0   | main          |                                     |
| 2   | disk          | /var/lib/proxysql/proxysql.db       |
| 3   | stats         |                                     |
| 4   | monitor       |                                     |
| 5   | stats_history | /var/lib/proxysql/proxysql_stats.db |
+-----+---------------+-------------------------------------+
5 rows in set (0.00 sec)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ProxySQL提供了几个库，每个库都有各自的意义。本文只是快速入门文章，不会详细介绍每个库中的每个表以及每个字段，不过在接下来的文章中，我会详细介绍到每个字段，因为每个字段都重要。&lt;/p&gt;
&lt;p&gt;在本文，主要修改main和monitor数据库中的表。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; show tables from main;
+--------------------------------------------+
| tables                                     |
+--------------------------------------------+
| global_variables                           |
| mysql_collations                           |
| mysql_group_replication_hostgroups         |
| mysql_query_rules                          |
| mysql_query_rules_fast_routing             |
| mysql_replication_hostgroups               |
| mysql_servers                              |
| mysql_users                                |
| proxysql_servers                           |
| runtime_checksums_values                   |
| runtime_global_variables                   |
| runtime_mysql_group_replication_hostgroups |
| runtime_mysql_query_rules                  |
| runtime_mysql_query_rules_fast_routing     |
| runtime_mysql_replication_hostgroups       |
| runtime_mysql_servers                      |
| runtime_mysql_users                        |
| runtime_proxysql_servers                   |
| runtime_scheduler                          |
| scheduler                                  |
+--------------------------------------------+

admin&amp;gt; show tables from monitor;
+------------------------------------+
| tables                             |
+------------------------------------+
| mysql_server_connect_log           |
| mysql_server_group_replication_log |
| mysql_server_ping_log              |
| mysql_server_read_only_log         |
| mysql_server_replication_lag_log   |
+------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;runtime_&lt;/code&gt;开头的是运行时的配置，这些是不能修改的。要修改ProxySQL的配置，需要修改了非&lt;code&gt;runtime_&lt;/code&gt;表，修改后必须执行&lt;code&gt;LOAD ... TO RUNTIME&lt;/code&gt;才能加载到RUNTIME生效，执行&lt;code&gt;save ... to disk&lt;/code&gt;才能将配置持久化保存到磁盘。具体操作见后文。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;insert into mysql_servers(hostgroup_id,hostname,port) values(10,'192.168.100.22',3306);
insert into mysql_servers(hostgroup_id,hostname,port) values(10,'192.168.100.23',3306);
insert into mysql_servers(hostgroup_id,hostname,port) values(10,'192.168.100.24',3306);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注：上面语句中没有先切换到main库也执行成功了，因为ProxySQL内部使用的SQLite3数据库引擎，和MySQL的解析方式是不一样的。即使执行了&lt;code&gt;USE main&lt;/code&gt;语句也是无任何效果的，但不会报错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看这3个节点是否插入成功，以及它们的状态。请认真读一读每个字段的名称，混个眼熟。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; select * from mysql_servers\G
*************************** 1. row ***************************
       hostgroup_id: 10
           hostname: 192.168.100.22
               port: 3306
             status: ONLINE
             weight: 1
        compression: 0
    max_connections: 1000
max_replication_lag: 0
            use_ssl: 0
     max_latency_ms: 0
            comment: 
*************************** 2. row ***************************
       hostgroup_id: 10
           hostname: 192.168.100.23
               port: 3306
             status: ONLINE
             weight: 1
        compression: 0
    max_connections: 1000
max_replication_lag: 0
            use_ssl: 0
     max_latency_ms: 0
            comment: 
*************************** 3. row ***************************
       hostgroup_id: 10
           hostname: 192.168.100.24
               port: 3306
             status: ONLINE
             weight: 1
        compression: 0
    max_connections: 1000
max_replication_lag: 0
            use_ssl: 0
     max_latency_ms: 0
            comment: 
3 rows in set (0.00 sec)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改后，加载到RUNTIME，并保存到disk。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;load mysql servers to runtime;
save mysql servers to disk;&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;监控后端mysql节点&quot;&gt;1.3 监控后端MySQL节点&lt;/h2&gt;
&lt;p&gt;添加节点之后，还需要监控后端节点。对于后端是主从复制的环境来说，这是必须的，因为ProxySQL需要通过每个节点的&lt;code&gt;read_only&lt;/code&gt;值来自动调整它们是属于读组还是写组。&lt;/p&gt;
&lt;p&gt;首先在后端master节点上创建一个用于监控的用户名(只需在master上创建即可，因为会复制到slave上)，这个用户名只需具有&lt;code&gt;USAGE&lt;/code&gt;权限即可。如果还需要监控复制结构中slave是否严重延迟于master(先混个眼熟：这个俗语叫做&quot;拖后腿&quot;，术语叫做&quot;replication lag&quot;)，则还需具备&lt;code&gt;replication client&lt;/code&gt;权限。这里直接赋予这个权限。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;# 在master上执行：
mysql&amp;gt; create user monitor@'192.168.100.%' identified by 'P@ssword1!';
mysql&amp;gt; grant replication client on *.* to monitor@'192.168.100.%';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后回到ProxySQL上配置监控。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;set mysql-monitor_username='monitor';
set mysql-monitor_password='P@ssword1!';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上设置实际上是在修改global_variables表，它和下面两个语句是等价的：&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;UPDATE global_variables SET variable_value='monitor'
 WHERE variable_name='mysql-monitor_username';

UPDATE global_variables SET variable_value='P@ssword1!'
 WHERE variable_name='mysql-monitor_password';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改后，加载到RUNTIME，并保存到disk。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;load mysql variables to runtime;
save mysql variables to disk;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;验证监控结果：ProxySQL监控模块的指标都保存在monitor库的log表中。&lt;/p&gt;
&lt;p&gt;以下是连接是否正常的监控(对connect指标的监控)：(在前面可能会有很多connect_error，这是因为没有配置监控信息时的错误，配置后如果connect_error的结果为NULL则表示正常)&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; select * from mysql_server_connect_log;
+----------------+------+------------------+-------------------------+---------------+
| hostname       | port | time_start_us    | connect_success_time_us | connect_error |
+----------------+------+------------------+-------------------------+---------------+
| 192.168.100.22 | 3306 | 1530968712977867 | 4174                    | NULL          |
| 192.168.100.23 | 3306 | 1530968712988986 | 4908                    | NULL          |
| 192.168.100.24 | 3306 | 1530968713000074 | 3044                    | NULL          |
| 192.168.100.22 | 3306 | 1530968772978982 | 3407                    | NULL          |
| 192.168.100.23 | 3306 | 1530968772989627 | 3404                    | NULL          |
| 192.168.100.24 | 3306 | 1530968773000778 | 3444                    | NULL          |
+----------------+------+------------------+-------------------------+---------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是对心跳信息的监控(对ping指标的监控)：&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; select * from mysql_server_ping_log;       
+----------------+------+------------------+----------------------+-------------+
| hostname       | port | time_start_us    | ping_success_time_us | ping_error  |
+----------------+------+------------------+----------------------+-------------+
| 192.168.100.22 | 3306 | 1530968712666540 | 452                  | NULL        |
| 192.168.100.23 | 3306 | 1530968712668779 | 458                  | NULL        |
| 192.168.100.24 | 3306 | 1530968712671541 | 324                  | NULL        |
| 192.168.100.22 | 3306 | 1530968722667071 | 1190                 | NULL        |
| 192.168.100.23 | 3306 | 1530968722669574 | 1162                 | NULL        |
| 192.168.100.24 | 3306 | 1530968722673162 | 1380                 | NULL        |
| 192.168.100.22 | 3306 | 1530968732668840 | 1065                 | NULL        |
| 192.168.100.23 | 3306 | 1530968732670709 | 1054                 | NULL        |
| 192.168.100.24 | 3306 | 1530968732672703 | 1040                 | NULL        |
+----------------+------+------------------+----------------------+-------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是，read_only和replication_lag的监控日志都为空。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; select * from mysql_server_read_only_log;
Empty set (0.00 sec)

admin&amp;gt; select * from mysql_server_replication_lag_log;
Empty set (0.00 sec)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是因为还没有对ProxySQL中的节点分组：writer_hostgroup、reader_hostgroup。设置分组信息，需要修改的是main库中的mysql_replication_hostgroups表，该表只有3个字段：第一个字段名为writer_hostgroup，第二个字段为reader_hostgroup，第三个字段为注释字段，可随意写。&lt;/p&gt;
&lt;p&gt;例如，指定写组的id为10，读组的id为20。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;insert into mysql_replication_hostgroups values(10,20);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在该配置加载到RUNTIME生效之前，先查看下各mysql server所在的组。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; select hostgroup_id,hostname,port,status,weight from mysql_servers; 
+--------------+----------------+------+--------+--------+
| hostgroup_id | hostname       | port | status | weight |
+--------------+----------------+------+--------+--------+
| 10           | 192.168.100.22 | 3306 | ONLINE | 1      |
| 10           | 192.168.100.23 | 3306 | ONLINE | 1      |
| 10           | 192.168.100.24 | 3306 | ONLINE | 1      |
+--------------+----------------+------+--------+--------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3个节点都在hostgroup_id=10的组中。&lt;/p&gt;
&lt;p&gt;现在，将刚才&lt;code&gt;mysql_replication_hostgroups&lt;/code&gt;表的修改加载到RUNTIME生效。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;load mysql servers to runtime;
save mysql servers to disk;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;一加载，Monitor模块就会开始监控后端的read_only值，当监控到read_only值后，就会按照read_only的值将某些节点自动移动到读/写组。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，此处所有节点都在&lt;code&gt;id=10&lt;/code&gt;的写组，slave1和slave2都是slave，它们的read_only=1，这两个节点将会移动到&lt;code&gt;id=20&lt;/code&gt;的组。如果一开始这3节点都在&lt;code&gt;id=20&lt;/code&gt;的读组，那么移动的将是Master节点，会移动到&lt;code&gt;id=10&lt;/code&gt;的写组。&lt;/p&gt;
&lt;p&gt;看结果：&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; select hostgroup_id,hostname,port,status,weight from mysql_servers;
+--------------+----------------+------+--------+--------+
| hostgroup_id | hostname       | port | status | weight |
+--------------+----------------+------+--------+--------+
| 10           | 192.168.100.22 | 3306 | ONLINE | 1      |
| 20           | 192.168.100.23 | 3306 | ONLINE | 1      |
| 20           | 192.168.100.24 | 3306 | ONLINE | 1      |
+--------------+----------------+------+--------+--------+&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; select * from mysql_server_read_only_log;
+----------------+------+------------------+-----------------+-----------+--------+
| hostname       | port | time_start_us    | success_time_us | read_only | error  |
+----------------+------+------------------+-----------------+-----------+--------+
| 192.168.100.22 | 3306 | 1530970372197917 | 8487            | 0         | NULL   |
| 192.168.100.23 | 3306 | 1530970372198992 | 7907            | 1         | NULL   |
| 192.168.100.24 | 3306 | 1530970372199835 | 8064            | 1         | NULL   |
| 192.168.100.22 | 3306 | 1530970373698824 | 10078           | 0         | NULL   |
| 192.168.100.23 | 3306 | 1530970373699825 | 9845            | 1         | NULL   |
| 192.168.100.24 | 3306 | 1530970373700786 | 10745           | 1         | NULL   |
+----------------+------+------------------+-----------------+-----------+--------+&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;配置mysql_users&quot;&gt;1.4 配置mysql_users&lt;/h2&gt;
&lt;p&gt;上面的所有配置都是关于后端MySQL节点的，现在可以配置关于SQL语句的，包括：发送SQL语句的用户、SQL语句的路由规则、SQL查询的缓存、SQL语句的重写等等。&lt;/p&gt;
&lt;p&gt;本小节是SQL请求所使用的用户配置，例如root用户。这要求我们需要先在后端MySQL节点添加好相关用户。这里以root和sqlsender两个用户名为例。&lt;/p&gt;
&lt;p&gt;首先，在master节点上执行：(只需master执行即可，会复制给两个slave)&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;grant all on *.* to root@'192.168.100.%' identified by 'P@ssword1!';
grant all on *.* to sqlsender@'192.168.100.%' identified by 'P@ssword1!';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后回到ProxySQL，配置mysql_users表，将刚才的两个用户添加到该表中。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;insert into mysql_users(username,password,default_hostgroup) values('root','P@ssword1!',10);
insert into mysql_users(username,password,default_hostgroup) values('sqlsender','P@ssword1!',10);
load mysql users to runtime;
save mysql users to disk;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;mysql_users表有不少字段，最主要的三个字段为&lt;code&gt;username&lt;/code&gt;、&lt;code&gt;password&lt;/code&gt;和&lt;code&gt;default_hostgroup&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;username&lt;/strong&gt;：前端连接ProxySQL，以及ProxySQL将SQL语句路由给MySQL所使用的用户名。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password&lt;/strong&gt;：用户名对应的密码。可以是明文密码，也可以是hash密码。如果想使用hash密码，可以先在某个MySQL节点上执行&lt;code&gt;select password(PASSWORD)&lt;/code&gt;，然后将加密结果复制到该字段。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_hostgroup&lt;/strong&gt;：该用户名默认的路由目标。例如，指定root用户的该字段值为10时，则使用root用户发送的SQL语句默认情况下将路由到&lt;code&gt;hostgroup_id=10&lt;/code&gt;组中的某个节点。&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; select * from mysql_users\G
*************************** 1. row ***************************
              username: root
              password: P@ssword1!
                active: 1            #  注意本行
               use_ssl: 0
     default_hostgroup: 10
        default_schema: NULL
         schema_locked: 0
transaction_persistent: 1            #  注意本行
          fast_forward: 0
               backend: 1
              frontend: 1
       max_connections: 10000
*************************** 2. row ***************************
              username: sqlsender
              password: P@ssword1!
                active: 1
               use_ssl: 0
     default_hostgroup: 10
        default_schema: NULL
         schema_locked: 0
transaction_persistent: 1
          fast_forward: 0
               backend: 1
              frontend: 1
       max_connections: 10000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然本文不详细介绍mysql_users表，但上面标注了&quot;注意本行&quot;的两个字段必须要引起注意。&lt;/p&gt;
&lt;p&gt;只有&lt;code&gt;active=1&lt;/code&gt;的用户才是有效的用户。&lt;/p&gt;
&lt;p&gt;至于&lt;code&gt;transaction_persistent&lt;/code&gt;字段，当它的值为1时，表示事务持久化：当某连接使用该用户开启了一个事务后，那么在事务提交/回滚之前，所有的语句都路由到同一个组中，避免语句分散到不同组。在以前的版本中，默认值为0，不知道从哪个版本开始，它的默认值为1。我们期望的值为1，所以在继续下面的步骤之前，先查看下这个值，如果为0，则执行下面的语句修改为1。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;update mysql_users set transaction_persistent=1 where username='root';
update mysql_users set transaction_persistent=1 where username='sqlsender';
load mysql users to runtime;
save mysql users to disk;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后，另开一个终端，分别使用root用户和sqlsender用户测试下它们是否能路由到默认的&lt;code&gt;hostgroup_id=10&lt;/code&gt;(它是一个写组)读、写数据。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[root@s1 ~]# mysql -uroot -pP@ssword1! -P6033 -h127.0.0.1 -e &quot;select @@server_id&quot;
+-------------+
| @@server_id |
+-------------+
|         110 |
+-------------+

[root@s1 ~]# mysql -uroot -pP@ssword1! -P6033 -h127.0.0.1 -e &quot;create database proxy_test&quot;

[root@s1 ~]# mysql -uroot -pP@ssword1! -P6033 -h127.0.0.1 -e &quot;show databases;&quot;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| proxy_test         |
| sys                |
+--------------------+

[root@s1 ~]# mysql -usqlsender -pP@ssword1! -P6033 -h127.0.0.1 -e '\
                        use proxy_test;\
                        create table t(id int);' 

[root@s1 ~]# mysql -usqlsender -pP@ssword1! -P6033 -h127.0.0.1 -e 'show tables from proxy_test;'
+-------------------------+
| Tables_in_proxy_test    |
+-------------------------+
| t                       |
+-------------------------+&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;读写分离配置路由规则&quot;&gt;1.5 读写分离：配置路由规则&lt;/h2&gt;
&lt;p&gt;ProxySQL的路由规则非常灵活，可以基于用户、基于schema以及基于每个语句实现路由规则的定制。&lt;/p&gt;
&lt;p&gt;本文作为入门文章，实现一个最简单的语句级路由规则，从而实现读写分离。&lt;strong&gt;必须注意，这只是实验，实际的路由规则绝不应该仅根据所谓的读、写操作进行分离，而是从各项指标中找出压力大、执行频繁的语句单独写规则、做缓存等等&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;和查询规则有关的表有两个：&lt;code&gt;mysql_query_rules&lt;/code&gt;和&lt;code&gt;mysql_query_rules_fast_routing&lt;/code&gt;，后者是前者的扩展表，1.4.7之后才支持该快速路由表。本文只介绍第一个表。&lt;/p&gt;
&lt;p&gt;插入两个规则，目的是将select语句分离到&lt;code&gt;hostgroup_id=20&lt;/code&gt;的读组，但由于select语句中有一个特殊语句&lt;code&gt;SELECT...FOR UPDATE&lt;/code&gt;它会申请写锁，所以应该路由到&lt;code&gt;hostgroup_id=10&lt;/code&gt;的写组。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply)
VALUES (1,1,'^SELECT.*FOR UPDATE$',10,1),
       (2,1,'^SELECT',20,1);

load mysql query rules to runtime;
save mysql query rules to disk;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;select ... for update&lt;/code&gt;规则的rule_id必须要小于普通的select规则的rule_id，因为ProxySQL是根据rule_id的顺序进行规则匹配的。&lt;/p&gt;
&lt;p&gt;再来测试下，读操作是否路由给了&lt;code&gt;hostgroup_id=20&lt;/code&gt;的读组。&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[root@s1 ~]# mysql -uroot -pP@ssword1! -P6033 -h127.0.0.1 -e 'select @@server_id'
mysql: [Warning] Using a password on the command line interface can be insecure.
+-------------+
| @@server_id |
+-------------+
|         120 |
+-------------+

[root@s1 ~]# mysql -uroot -pP@ssword1! -P6033 -h127.0.0.1 -e 'select @@server_id'
mysql: [Warning] Using a password on the command line interface can be insecure.
+-------------+
| @@server_id |
+-------------+
|         130 |
+-------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;读操作已经路由给读组，再看看写操作。这里以事务持久化进行测试。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@s1 ~]# mysql -uroot -pP@ssword1! -P6033 -h127.0.0.1 -e '\
                        start transaction;\
                        select @@server_id;\
                        commit;\
                        select @@server_id;'

+-------------+
| @@server_id |
+-------------+
|         110 |
+-------------+
+-------------+
| @@server_id |
+-------------+
|         120 |
+-------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，一切都按照预期进行。&lt;/p&gt;
&lt;p&gt;最后，如果想查看路由的信息，可查询stats库中的&lt;code&gt;stats_mysql_query_digest&lt;/code&gt;表。以下是该表的一个输出格式示例(和本文无关)。&lt;/p&gt;
&lt;pre class=&quot;mysql&quot;&gt;
&lt;code&gt;admin&amp;gt; SELECT hostgroup hg,
              sum_time,
              count_star,
              digest_text 
       FROM stats_mysql_query_digest
       ORDER BY sum_time DESC;
+----+----------+------------+-------------------------------------------------------------+
| hg | sum_time | count_star | digest_text                                                 |
+----+----------+------------+-------------------------------------------------------------+
| 2  | 14520738 | 50041      | SELECT c FROM sbtest1 WHERE id=?                            |
| 1  | 3142041  | 5001       | COMMIT                                                      |
| 1  | 2270931  | 5001       | SELECT c FROM sbtest1 WHERE id BETWEEN ? AND ?+? ORDER BY c |
| 1  | 2021320  | 5003       | SELECT c FROM sbtest1 WHERE id BETWEEN ? AND ?+?            |
| 1  | 1768748  | 5001       | UPDATE sbtest1 SET k=k+? WHERE id=?                         |
| 1  | 1697175  | 5003       | SELECT SUM(K) FROM sbtest1 WHERE id BETWEEN ? AND ?+?       |
| 1  | 1346791  | 5001       | UPDATE sbtest1 SET c=? WHERE id=?                           |
| 1  | 1263259  | 5001       | DELETE FROM sbtest1 WHERE id=?                              |
| 1  | 1191760  | 5001       | INSERT INTO sbtest1 (id, k, c, pad) VALUES (?, ?, ?, ?)     |
| 1  | 875343   | 5005       | BEGIN                                                       |
+----+----------+------------+-------------------------------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，MySQL的读写分离尝鲜结束。该系列后面的文章将详细介绍ProxySQL的各个方面。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Jul 2018 15:36:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/9278839.html</dc:identifier>
</item>
<item>
<title>聊一个自己写的MVC框架 - jolivan</title>
<link>http://www.cnblogs.com/Jolivan/p/9275459.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jolivan/p/9275459.html</guid>
<description>&lt;p&gt;　　也有个一周没有更新博客了，其实我没有偷懒，因为之前一直在看Spring源码，所以想着去写一个类Spring的框架，也没有给自己定什么高的要求，简单实现MVC、AOP、IOC等功能就行。现在这个框架基本上已经成型了，自己也测试过了，因此拿出来和大家分享一下。&lt;/p&gt;
&lt;p&gt;　　我本文就不写标题了，因为自己的思路是跟着代码走的，所以可能说着说着MVC就跳到DI那一块了。首先我在开始的时候，也是跟随着大部分人的思路，先从DispatcherServlet入手。因为为DispatcherServlet是和用户交互的。和DispatcherServlet交互的有四个模块，分别是：HandlerMapping、HandlerAdapter、ViewResolver、ModelAndView，我定义了四个类分别对应着这四个模块，先不说他们是怎么工作的，先聊一下DispatcherServlet。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1204324/201807/1204324-20180706200335527-544316209.png&quot; alt=&quot;&quot; width=&quot;646&quot; height=&quot;476&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　它和HandlerMapping先进行交互，然后HandlerMapping处理拿到对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initHandlerMappings(LusheApplicationContext context) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按照我们通常的理解应该是一个Map，Map&amp;lt;String,Method&amp;gt; map;map.put(url,Method)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先从容器中取到所有的实例&lt;/span&gt;
        String [] beanNames =&lt;span&gt; context.getBeanDefinitionNames();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String beanName : beanNames) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;到了MVC层，对外提供的方法只有一个getBean方法&lt;/span&gt;
                Object proxy =&lt;span&gt; context.getBean(beanName);
                Object originObject &lt;/span&gt;=&lt;span&gt; LusheAopProxyUtils.getOriginObject(proxy);

                Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz =&lt;span&gt; originObject.getClass();

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!clazz.isAnnotationPresent(Controller.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                }

                String baseUrl &lt;/span&gt;= &quot;&quot;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (clazz.isAnnotationPresent(RequestMapping.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
                    RequestMapping requestMapping &lt;/span&gt;= clazz.getAnnotation(RequestMapping.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                    baseUrl &lt;/span&gt;=&lt;span&gt; requestMapping.value();
                }

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;扫描所有的public方法&lt;/span&gt;
                Method[] methods =&lt;span&gt; clazz.getMethods();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Method method : methods) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!method.isAnnotationPresent(RequestMapping.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
                        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    }

                    RequestMapping requestMapping &lt;/span&gt;= method.getAnnotation(RequestMapping.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                    String regex &lt;/span&gt;= (&quot;/&quot; + baseUrl + requestMapping.value().replaceAll(&quot;\\*&quot;, &quot;.*&quot;)).replaceAll(&quot;/+&quot;, &quot;/&quot;&lt;span&gt;);
                    Pattern pattern &lt;/span&gt;=&lt;span&gt; Pattern.compile(regex);
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.handlerMappings.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LusheHandlerMapping(pattern, originObject, method));
                    System.out.println(&lt;/span&gt;&quot;Mapping: &quot; + regex + &quot; , &quot; +&lt;span&gt; method);
                }
            }
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            e.printStackTrace();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我是这么处理的，我只给Servlet获得实例的接口，然后再让它来解析这些实例，放到定义好的HandlerMapping数组中。那么这里就要考虑给getBean的类了，之前在Spring中他们是在一个终极父类里定义到了这个方法，我的处理是简化，直接定义一个ApplicationContext，把它当做BeanFactory，所有的处理都在这里面进行，对外给出getBean方法。那么来看一下ApplicationContext这个类。按照Spring的思想，首先是定义一个refresh方法，它的作用就是：根据XML文件定义的属性来进行IOC容器的初始化。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; refresh(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定位&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.reader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanDefinitionReader(configureLocations);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载&lt;/span&gt;
        List&amp;lt;String&amp;gt; beanDefinitions = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.reader.loadBeanDefinitions();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册&lt;/span&gt;
&lt;span&gt;        doRegisty(beanDefinitions);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;依赖注入(lazy-init = false),自动调用getBean方法&lt;/span&gt;
&lt;span&gt;        doDependencyInjection();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我按照定位、加载、注册和依赖注入四部分来处理。首先是定位，就是对配置文件进行定位读取解析，这里自己定义了一个BeanDefinitionReader的类，把配置文件存放在它内部一个Properties变量中。并且把配置文件中划好的包中的类给拿出来，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doScanner(String packName) {
        URL url &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.getClass().getClassLoader().getResource(&quot;/&quot; + packName.replaceAll(&quot;\\.&quot;,&quot;/&quot;&lt;span&gt;));

        File classDir &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(url.getFile());

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(File file : classDir.listFiles()) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(file.isDirectory()) {
                doScanner(packName &lt;/span&gt;+ &quot;.&quot; +&lt;span&gt; file.getName());
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                registyBeanClasses.add(packName &lt;/span&gt;+ &quot;.&quot; + file.getName().replace(&quot;.class&quot;,&quot;&quot;&lt;span&gt;));
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后是加载，在BeanDefinitionReader里，我将属性和类名做成一个Map，存放起来。之后就是注册，还是在BeanDefinitionReader中，因为我之前已经将属性和名称做成了一个Map，这样我可以通过类名就能得到它对应的BeanDefinition。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LusheBeanDefinition registerBean(String className) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.registyBeanClasses.contains(className)) {
            LusheBeanDefinition lusheBeanDefinition &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LusheBeanDefinition();
            lusheBeanDefinition.setBeanClassName(className);
            lusheBeanDefinition.setFactoryBeanName(StringUtils.lowerFirstCase(className.substring(className.lastIndexOf(&lt;/span&gt;&quot;.&quot;) + 1&lt;span&gt;)));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lusheBeanDefinition;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　回到ApplicationContext的refresh方法，把我们所有定义好的BeanDefinition放到BeanDefinitionMap中，也就是Spring的Cache里。因为之前只是将所有的BeanDefinition放进去，还没有做进一步的处理，因此就在这一块进行处理了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doRegisty(List&amp;lt;String&amp;gt;&lt;span&gt; beanDefinitions){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String className : beanDefinitions) {
                Class&lt;/span&gt;&amp;lt;?&amp;gt; beanClass =&lt;span&gt; Class.forName(className);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是不是接口，如果是接口，则用其实现类来实现&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(beanClass.isInterface()) {
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;beanName 为类名首字母小写
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义beanName&lt;/span&gt;
                LusheBeanDefinition lusheBeanDefinition = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.reader.registerBean(className);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(lusheBeanDefinition != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    beanDefinitionMap.put(lusheBeanDefinition.getFactoryBeanName(), lusheBeanDefinition);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;接口注入&lt;/span&gt;
                Class&amp;lt;?&amp;gt;[] interfaces =&lt;span&gt; beanClass.getInterfaces();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(Class&amp;lt;?&amp;gt;&lt;span&gt; interf : interfaces) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多个接口功能相同
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果多个属性类只能覆盖，因为Spring没有那么智能&lt;/span&gt;
                    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanDefinitionMap.put(interf.getName(), lusheBeanDefinition);
                }
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先看看是不是个接口，如果是，就直接跳过，因为我会在后面给每个类的每个接口赋予相同的BeanDefinition，这里的确有一点瑕疵，但是我也在思考更好地处理办法。最后我得到的BeanDefinitionMap，这里注册的功能就完成了。&lt;/p&gt;
&lt;p&gt;　　然后就是依赖注入这块，我是这么做的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; populateBean(String beanName, Object instance) {
        Class clazz &lt;/span&gt;=&lt;span&gt; instance.getClass();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(clazz.isAnnotationPresent(Controller.&lt;span&gt;class&lt;/span&gt;) || clazz.isAnnotationPresent(Service.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取所有字段&lt;/span&gt;
            Field[] fields =&lt;span&gt; clazz.getDeclaredFields();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Field field : fields) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(field.isAnnotationPresent(AutoWried.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
                    AutoWried autoWried &lt;/span&gt;= field.getAnnotation(AutoWried.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                    String autoWriedBeanName &lt;/span&gt;=&lt;span&gt; autoWried.value().trim();

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(autoWriedBeanName.equals(&quot;&quot;&lt;span&gt;)) {
                        autoWriedBeanName &lt;/span&gt;=&lt;span&gt; field.getType().getName();
                    }

                    field.setAccessible(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        field.set(instance,&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanWrapperMap.get(autoWriedBeanName).getWrapperInstance());
                    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                }
            }
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　先不说这个，因为这里我们还没有得到Instance，我是通过反射获得的这个实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Object instantionBean(LusheBeanDefinition lusheBeanDefinition) {
        String className &lt;/span&gt;=&lt;span&gt; lusheBeanDefinition.getBeanClassName();
        Object beanInstance &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;beanCacheMap.containsKey(className)) {
                    Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz =&lt;span&gt; Class.forName(className);
                    beanInstance &lt;/span&gt;=&lt;span&gt; clazz.newInstance();
                    beanCacheMap.put(className, beanInstance);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    beanInstance &lt;/span&gt;=&lt;span&gt; beanCacheMap.get(className);
                }
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; beanInstance;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　然后再看一下依赖注入这一块，也就是populateBean，会传入一个bean的实例并拿到它的类，如果这个类已经声明为Controller或者Service类，那么就把它所有的字段拿出来，如果某个字段被标注为AutoWried，那么就从包装Map中把实例给拿出来，具体的实现就是这样的。&lt;/p&gt;
&lt;p&gt;　　上面提到包装类BeanWrapper,它的作用就是方便对其进行功能拓展，比如说增加AOP切点之类的。我是这么构造一个包装类实例的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LusheBeanWrapper(Object Instance) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加动态代理&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.wrapperInstance =&lt;span&gt; aopProxy.getProxy(Instance);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原始对象&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.originalInstance =&lt;span&gt; Instance;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我包装类的构造函数是传入一个原始类实例，然后并将这个实例保存起来，然后通过AOP模块的动态代理拿到包装类实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里传入原始对象，Spring中传入的事ClassLoader&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object getProxy(Object object) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.target =&lt;span&gt; object;
        Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.target.getClass();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Proxy.newProxyInstance(clazz.getClassLoader(),clazz.getInterfaces(), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Spring中在Aop动态代理创建的时候传入的是ClassLoader，而我这里为了简便直观，传入的是原始类实例，然后拿到这个实例的类，并调用Proxy的newProxyInstance方法获得这个被代理对象。接下来就是讨论AOP是如何实现的，也就是如何对原始方法进行增强的。下面是我AopProxy类中invoke方法，它的作用就是对被代理对象切入点方法进行增强。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;之前&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(aopConfigure.contains(method)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于某个方法，看看是不是切入点&lt;/span&gt;
            LusheAopConfigure.LusheAspect aspect =&lt;span&gt; aopConfigure.get(method);

            aspect.getPoints()[&lt;/span&gt;0&lt;span&gt;].invoke(aspect.getAspect(),args);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;反射调用原始方法&lt;/span&gt;
        Object obj = method.invoke(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.target, args);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;之后&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(aopConfigure.contains(method)) {
            LusheAopConfigure.LusheAspect aspect &lt;/span&gt;=&lt;span&gt; aopConfigure.get(method);

            aspect.getPoints()[&lt;/span&gt;1&lt;span&gt;].invoke(aspect.getAspect(),args);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以考虑一下为什么这么写
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里面用到了循环&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; obj;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先来解释一下AopConfigure这个类的作用，它是对ApplicationContext中expression的封装，对目标代理对象的一个方法增强，增强的方法就是自己定义逻辑。配置文件告诉我们哪些类哪些方法需要增强和需要增强的内容，我用一个Map去存放这些信息，key是目标对象的方法名，value是我自己定义的一个实体Bean，存放的用来增强的类和它的方法（这里我只是简单的定义了两个：before和after）。之后再回到上面的那个invoke方法，这里是这么处理的，首先看一下这个方法是不是一个需要增强的方法，如果是，那么先搞定before方法增强，然后这个方法的执行，最后执行方法后增强。&lt;/p&gt;
&lt;p&gt;　　最后再回到getBean，当我们使用到这个方法的时候，默认已经完成了IOC容器的初始化和AOP切面方法增强，最后getBean返回给DispatcherServlet的，并不是原始的BeanInstance，而是一个BeanWrapper的实例，换句话说，getBean的作用就是传入一个Bean的类名，然后读取BeanDefinition的信息，通过反射机制创建实例并返回。在这个框架中，用到了Spring中用到的思想，它用BeanMapper把原始Bean包装起来（具体怎么包装我在上面已经说了），然后作用是不仅保存了之前的OP关系，而且方便了之后的拓展和增强。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object getBean(String beanName) {
        LusheBeanPostProcessor lusheBeanPostProcessor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LusheBeanPostProcessor();

        LusheBeanDefinition lusheBeanDefinition &lt;/span&gt;=&lt;span&gt; beanDefinitionMap.get(beanName);
        Object beanInstance &lt;/span&gt;=&lt;span&gt; instantionBean(lusheBeanDefinition);
        lusheBeanPostProcessor.postProcessBeforeInitialization(beanInstance,beanName);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(beanInstance == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        LusheBeanWrapper lusheBeanWrapper &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LusheBeanWrapper(beanInstance);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成通知事件&lt;/span&gt;

        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            lusheBeanWrapper.setAopConfigure(instantionAopConfigure(lusheBeanDefinition));
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }

        lusheBeanWrapper.setLusheBeanPostProcessor(lusheBeanPostProcessor);

        beanWrapperMap.put(beanName, lusheBeanWrapper);

        lusheBeanPostProcessor.postProcessAfterInitialization(beanInstance,beanName);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;populateBean(beanName,beanInstance);&lt;/span&gt;

        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; beanWrapperMap.get(beanName).getWrapperInstance();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先从已经初始化好的BeanDefinitionMap中拿到BeanDefinition，然后调用instantionBean方法拿到实例Bean（这个方法的介绍在上面），如果这个实例存在，那我们就对它进行包装并进行AOP方法切入点的增强（前提是有），并将生成的包装实例放在Map中保存，并返回包装器中的包装实例，可以肯定的说，实例的类不是原始类，而是一个动态代理生成的类，类似以$Proxy0这种。&lt;/p&gt;
&lt;p&gt;　　回到DispatcherServlet的initHandlerMapping方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initHandlerMappings(LusheApplicationContext context) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按照我们通常的理解应该是一个Map，Map&amp;lt;String,Method&amp;gt; map;map.put(url,Method)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先从容器中取到所有的实例&lt;/span&gt;
        String [] beanNames =&lt;span&gt; context.getBeanDefinitionNames();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String beanName : beanNames) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;到了MVC层，对外提供的方法只有一个getBean方法&lt;/span&gt;
                Object proxy =&lt;span&gt; context.getBean(beanName);
                Object originObject &lt;/span&gt;=&lt;span&gt; LusheAopProxyUtils.getOriginObject(proxy);

                Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz =&lt;span&gt; originObject.getClass();

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!clazz.isAnnotationPresent(Controller.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                }

                String baseUrl &lt;/span&gt;= &quot;&quot;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (clazz.isAnnotationPresent(RequestMapping.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
                    RequestMapping requestMapping &lt;/span&gt;= clazz.getAnnotation(RequestMapping.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                    baseUrl &lt;/span&gt;=&lt;span&gt; requestMapping.value();
                }

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;扫描所有的public方法&lt;/span&gt;
                Method[] methods =&lt;span&gt; clazz.getMethods();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Method method : methods) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!method.isAnnotationPresent(RequestMapping.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
                        &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                    }

                    RequestMapping requestMapping &lt;/span&gt;= method.getAnnotation(RequestMapping.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
                    String regex &lt;/span&gt;= (&quot;/&quot; + baseUrl + requestMapping.value().replaceAll(&quot;\\*&quot;, &quot;.*&quot;)).replaceAll(&quot;/+&quot;, &quot;/&quot;&lt;span&gt;);
                    Pattern pattern &lt;/span&gt;=&lt;span&gt; Pattern.compile(regex);
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.handlerMappings.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LusheHandlerMapping(pattern, originObject, method));
                    System.out.println(&lt;/span&gt;&quot;Mapping: &quot; + regex + &quot; , &quot; +&lt;span&gt; method);
                }
            }
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            e.printStackTrace();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们通过getBean拿到实例，然后拿到他的原始类实例，我是这么处理的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 找到代理对象的原始对象
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; proxy
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Object getOriginObject(Object proxy) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不是代理对象&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;isProxy(proxy)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; proxy;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; getProxyTargetObject(proxy);
        }
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isProxy(Object object) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Proxy.isProxyClass(object.getClass());
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Object getProxyTargetObject(Object proxy) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在代理模式中看到过，原始类的信息就被存放在类型为InvocationHandler的变量中，名字就叫h&lt;/span&gt;
        Field h = proxy.getClass().getSuperclass().getDeclaredField(&quot;h&quot;&lt;span&gt;);
        h.setAccessible(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        LusheAopProxy  aopProxy &lt;/span&gt;=&lt;span&gt; (LusheAopProxy)h.get(proxy);
        Field target &lt;/span&gt;= aopProxy.getClass().getDeclaredField(&quot;target&quot;&lt;span&gt;);
        target.setAccessible(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; target.get(proxy);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因为在动态代理的过程中，原始类的信息就已经被存放在InvocationHandler中了，所以就很方便的拿到了。&lt;/p&gt;
&lt;p&gt;　　再回来，我首先判断一下这个类是不是Controller，不是就走了，是的话，再看一下它的方法中，哪个是RequestMapping方法，将他存放起来。&lt;/p&gt;
&lt;p&gt;　　然后是调用initHandlerAdapters方法，完成存放的方法的参数的处理。&lt;/p&gt;
&lt;p&gt;　　最后再说一下类是怎么和AOP配置匹配起来的，这里我建立了一个instantionAopConfigure方法，在建立BeanWrapper的时候调用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; LusheAopConfigure instantionAopConfigure(LusheBeanDefinition beanDefinition) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        LusheAopConfigure aopConfigure &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LusheAopConfigure();
        String expression &lt;/span&gt;= reader.getConfigure().getProperty(&quot;pointCut&quot;&lt;span&gt;);

        String[] before &lt;/span&gt;= reader.getConfigure().getProperty(&quot;aspectBefore&quot;).split(&quot;\\#&quot;&lt;span&gt;);
        String[] after &lt;/span&gt;= reader.getConfigure().getProperty(&quot;aspectAfter&quot;).split(&quot;\\#&quot;&lt;span&gt;);

        String className &lt;/span&gt;=&lt;span&gt; beanDefinition.getBeanClassName();

        Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz =&lt;span&gt; Class.forName(className);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析成正则去匹配&lt;/span&gt;
        Pattern pattern =&lt;span&gt; Pattern.compile(expression);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指出切面类,因为我们在上面已经将切面方法的位置分成了两部分，第一部分是包类名，第二部分是方法名
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因此我们这里就取第一部分就可以了，然后因为两个切面方法属于一个类，为了方便，就拿第一个就可以了。&lt;/span&gt;
        Class&amp;lt;?&amp;gt; aspectClass = Class.forName(before[0&lt;span&gt;]);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拿出被代理类的所有方法
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;举例：com.spring.test.LusheMVC.framework.context.LusheApplication.getBean(java.lang.String)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;而我们的正则是：
             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;public.* com\.spring\.test\.LusheMVC\.demo\.service\..*ServiceImpl\..*\(.*\)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个肯定匹配不上 而
             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;com.spring.test.LusheMVC.demo.service.impl.DemoServiceImpl.get(java.lang.String)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个就匹配上了&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Method method : clazz.getMethods()) {
            Matcher matcher &lt;/span&gt;=&lt;span&gt; pattern.matcher(method.toString());

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果匹配上了&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(matcher.matches()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把能满足切面规则的类添加到AOP配置中&lt;/span&gt;
&lt;span&gt;                aopConfigure.put(method,clazz.newInstance()
                        ,&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Method[]{aspectClass.getMethod(before[1]),aspectClass.getMethod(after[1&lt;span&gt;])});
            }
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; aopConfigure;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先拿到切点类的定义，用来做正则判断，格式类似于&lt;span&gt;public.* com\.spring\.test\.LusheMVC\.demo\.service\..*ServiceImpl\..*\(.*\)，&lt;span&gt;然后拿出增强内容方法的信息（就是before和after的信息），并将它们处理到String数组里，第一个位置放的是类名，第二个是方法名。然后将BeanDefinition中存放的类名拿出来生成这个类的Class，将起所有方法拿出来进行正则匹配，如果匹配到了，说明这个方法是个切入点，需要被增强，那么就将这个信息存起来，处理完所有的之后，将这些内容给BeanWrapper，它会在AOP的时候用到。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　差不多就说这些吧，如果有补充我会更新的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 07 Jul 2018 14:56:00 +0000</pubDate>
<dc:creator>jolivan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jolivan/p/9275459.html</dc:identifier>
</item>
<item>
<title>补习系列-springboot项目基础搭建课 - 美码师</title>
<link>http://www.cnblogs.com/littleatp/p/9278686.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/littleatp/p/9278686.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;springboot 最近火的不行，目前几乎已经是 spring 家族最耀眼的项目了。抛开微服务、技术社区这些推广因素不说，框架本身的确有非常多的优点。比如&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;更简化的配置，摒除了许多繁杂的xml配置(事实证明，越简单的东西越容易让人记住)；&lt;/li&gt;
&lt;li&gt;内置Servlet容器，不再依赖外部环境&lt;/li&gt;
&lt;li&gt;大量的starter模块，随手拈来&lt;/li&gt;
&lt;li&gt;支持热部署&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;作为一名老程序员来说，仍然需要保持一个积极学习的态度。&lt;br/&gt;哎，简单点说就是少点伤感，认清现实。你曾经引以为傲的某某EE 技术已经被颠覆了，赶紧换车道 .....&lt;/p&gt;
&lt;p&gt;废话不多说，以下内容主要讲的是怎么利用springboot 这个脚手架搭建一个最精简的项目。&lt;br/&gt;其中几个模块会非常实用，这包括结构、配置、日志、部署..&lt;/p&gt;
&lt;h2 id=&quot;一基础结构&quot;&gt;一、基础结构&lt;/h2&gt;
&lt;p&gt;springboot 项目仍然是使用maven 进行初始化及构建，下面是一个典型的结构：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;pom.xml&lt;/td&gt;
&lt;td&gt;依赖文件&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;src/main/java&lt;/td&gt;
&lt;td&gt;代码目录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;src/main/resources&lt;/td&gt;
&lt;td&gt;配置目录，包含application.properties、log4j2.xml&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;src/main/build&lt;/td&gt;
&lt;td&gt;定义构建文件目录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;src/test/java&lt;/td&gt;
&lt;td&gt;测试代码&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;src/test/resources&lt;/td&gt;
&lt;td&gt;测试配置&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;大致看一下就行了，不了解maven的话，&lt;a href=&quot;https://www.w3cschool.cn/maven/u7oe1ht0.html&quot;&gt;点击这里&lt;/a&gt;先学习入门，项目的构建工具是一定要先了解的。&lt;br/&gt;可以通过eclipse 或idea 创建一个maven项目，再引入springboot依赖，pom文件的定义参考如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;project
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;
    xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;
   &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
   &amp;lt;groupId&amp;gt;org.zales&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;dmo-boot&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;spring-boot.version&amp;gt;1.5.1.RELEASE&amp;lt;/spring-boot.version&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;!-- springboot application dependencies --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- springweb --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;!-- exclude the default logging module --&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;spring-boot-starter-logging&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- log4j2 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-log4j2&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- springboot test --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- used for livereload --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- used for template --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;${java.version}&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;${java.version}&amp;lt;/target&amp;gt;
                    &amp;lt;encoding&amp;gt;${project.build.sourceEncoding}&amp;lt;/encoding&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;springboot 官方的示例是让你继承一个spring-boot-parent，但这个很鸡肋，通常的项目都会有自己的继承结构。&lt;br/&gt;所以我们间接利用spring-boot-dependencies将所有依赖引入，其他模块的引入都是按需。&lt;br/&gt;&lt;strong&gt;maven-compiler-plugin&lt;/strong&gt;的定义用于将项目指定为&lt;a href=&quot;(https://www.cnblogs.com/littleatp/p/5812767.html)&quot;&gt;Java1.8的编译级别&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他途径&lt;/strong&gt;&lt;br/&gt;你还可以利用spring的在线网站初始化一个springboot项目，&lt;a href=&quot;https://start.spring.io/&quot;&gt;点击这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二添加代码&quot;&gt;二、添加代码&lt;/h2&gt;
&lt;p&gt;启动代码非常简单，新建一个名为&quot;DemoBoot**的类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * 入口类
 *
 */
@SpringBootApplication
public class DemoBoot {

    public static void main(String[] args) throws Exception {
        SpringApplication app = new SpringApplication(DemoBoot.class);

        // 指定PID生成，默认输出到application.pid
        app.addListeners(new ApplicationPidFileWriter());
        app.run(args);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再创建一个&lt;strong&gt;DemoController&lt;/strong&gt;类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Controller
public class DemoController {
    
    @RequestMapping(&quot;/&quot;)
    @ResponseBody
    String home() {
        return &quot;Hello World! &quot;;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，我们已经完成了框架代码！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热部署&lt;/strong&gt;&lt;br/&gt;我们在定义项目依赖时添加了springboot-devtools，该模块可以实现热部署的功能，即在开发过程中可以不重启应用令代码生效，非常方便&lt;br/&gt;livereload 组件会定时扫描类路径下的class，一旦发现变更即重启服务，默认1000毫秒检测一次。&lt;br/&gt;在定义依赖时指定optional 选项使得该模块仅在开发时启用。&lt;br/&gt;livereload 在扫描会自动忽略以下范围的变更：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;META-INF/maven/**
META-INF/resources/**
resources/**,static/**
public/**
templates/**
**/*Test.class
**/*Tests.class
git.properties
META-INF/build-info.properties &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三应用配置&quot;&gt;三、应用配置&lt;/h2&gt;
&lt;p&gt;在src/main/resources/下新建一个application.properties文件，内容如下：&lt;br/&gt;&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server.address=0.0.0.0
server.port=8090&lt;/code&gt;
&lt;/pre&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;server.address&lt;/td&gt;
&lt;td&gt;监听地址，不配置或0.0.0.0即不限制&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;server.port&lt;/td&gt;
&lt;td&gt;监听端口&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;此时在IDE执行&quot;DemoBoot&quot;，你应该可以看到一些描述程序启动的日志信息，访问本机的8090端口能看到&quot;HelloWorld“输出。&lt;/p&gt;
&lt;p&gt;application.properties可包含大量的配置，你可以在&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&quot;&gt;这里&lt;/a&gt;找到全部的配置&lt;/p&gt;
&lt;h2 id=&quot;四日志配置&quot;&gt;四、日志配置&lt;/h2&gt;
&lt;p&gt;接下来需要为应用准备一个日志配置用于定制，springboot 默认是使用logback的，但由于更加熟悉log4j的缘故，我们选用了log4j2.x&lt;br/&gt;在src/main/resources/下新建一个log4j2.xml文件，内容如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;log4j2.xml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;Configuration status=&quot;INFO&quot; monitorInterval=&quot;300&quot;&amp;gt;  
    &amp;lt;properties&amp;gt;  
        &amp;lt;property name=&quot;LOG_ROOT&quot;&amp;gt;log&amp;lt;/property&amp;gt;  
        &amp;lt;property name=&quot;FILE_NAME&quot;&amp;gt;application&amp;lt;/property&amp;gt;  
    &amp;lt;/properties&amp;gt;  
    &amp;lt;Appenders&amp;gt;  
        &amp;lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&amp;gt;  
            &amp;lt;PatternLayout pattern=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS}–[%t] %-5level -%l - %msg%n&quot; /&amp;gt;  
        &amp;lt;/Console&amp;gt;  
        &amp;lt;RollingRandomAccessFile name=&quot;MainFile&quot;  
            fileName=&quot;${LOG_ROOT}/${FILE_NAME}.log&quot;  
            filePattern=&quot;${LOG_ROOT}/$${date:yyyy-MM}/${FILE_NAME}-%d{yyyy-MM-dd HH}-%i.log&quot;&amp;gt;  
            &amp;lt;PatternLayout  
                pattern=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS}–[%t] %-5level -%l - %msg%n&quot; /&amp;gt;  
            &amp;lt;Policies&amp;gt;  
                &amp;lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; /&amp;gt;  
                &amp;lt;SizeBasedTriggeringPolicy size=&quot;50 MB&quot; /&amp;gt;  
            &amp;lt;/Policies&amp;gt;  
            &amp;lt;DefaultRolloverStrategy max=&quot;20&quot; /&amp;gt;  
        &amp;lt;/RollingRandomAccessFile&amp;gt;  
    &amp;lt;/Appenders&amp;gt;  

    &amp;lt;Loggers&amp;gt;  
        &amp;lt;Logger name=&quot;org.zales&quot; level=&quot;info&quot; additivity=&quot;true&quot;&amp;gt;  
            &amp;lt;AppenderRef ref=&quot;MainFile&quot; /&amp;gt;  
        &amp;lt;/Logger&amp;gt;  
        &amp;lt;Root level=&quot;info&quot;&amp;gt;  
            &amp;lt;AppenderRef ref=&quot;Console&quot; /&amp;gt;  
            &amp;lt;AppenderRef ref=&quot;MainFile&quot; /&amp;gt;  
        &amp;lt;/Root&amp;gt;  
    &amp;lt;/Loggers&amp;gt;  
&amp;lt;/Configuration&amp;gt;  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里配置了两个日志记录方式，Console是控制台打印，RollingRandomAccessFile 指向一个日志文件，我们为该日志文件设定了滚动的规则：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;当大小超过50M时会生成新的日志；&lt;/li&gt;
&lt;li&gt;每小时生成一个新的日志；&lt;br/&gt;指定了最多存在20个日志文件。&lt;br/&gt;之后，我们为主模块(这里是org.zales，你可以定义自己的包名)和ROOT都分别做了关联和日志级别定义。&lt;br/&gt;关于log4j2的用法，可以&lt;a href=&quot;https://www.cnblogs.com/littleatp/p/9260784.html&quot;&gt;参考这个文章&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;五打包部署&quot;&gt;五、打包部署&lt;/h2&gt;
&lt;p&gt;应用最终需要发布到某个环境，那么我们怎么对springboot应用进行打包呢？&lt;br/&gt;利用&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/maven-plugin/repackage-mojo.html&quot;&gt;spring-boot-maven-plugin&lt;/a&gt;可以将springboot项目达成jar包。&lt;br/&gt;随后执行&lt;strong&gt;&lt;em&gt;java -jar xxx.jar&lt;/em&gt;&lt;/strong&gt;的方式即可以启动应用。&lt;br/&gt;这看起来好像很美好，但真实的项目发布并非这么简单。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先是配置，springboot的maven插件会将所有配置文件都打进jar包内，而某些配置可能与环境相关。&lt;br/&gt;比如应用端口，安全证书、或是日志配置等，这时我们希望在jar包外部存放这些文件；&lt;/li&gt;
&lt;li&gt;其次是执行脚本，在云环境上发布应用，通常需要提供启停脚本，包括一些监控功能脚本，这些需要作为项目打包的一部分&lt;/li&gt;
&lt;li&gt;最后，将应用程序发布为tgz或zip格式的压缩包会更加灵活，你可以添加更多的东西。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;为实现灵活的打包方式，我们需要同时引用spring-boot-maven-plugin和maven-assembly-plugin两个插件，如下：&lt;br/&gt;&lt;strong&gt;pom.xml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;!-- build for springboot jar --&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;repackage&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
            &amp;lt;/plugin&amp;gt;
            &amp;lt;!-- build for application package --&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;id&amp;gt;bundle&amp;lt;/id&amp;gt;
                        &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                        &amp;lt;configuration&amp;gt;
                            &amp;lt;descriptors&amp;gt;
                                &amp;lt;descriptor&amp;gt;${basedir}/src/main/build/assembly.xml&amp;lt;/descriptor&amp;gt;
                            &amp;lt;/descriptors&amp;gt;
                        &amp;lt;/configuration&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;plugin可以实现在maven的某个生命周期绑定一组动作，如上面的两个插件都绑定到了package阶段，执行顺序由声明的先后决定。&lt;br/&gt;于是项目在执行&lt;strong&gt;&lt;em&gt;mvn package&lt;/em&gt;&lt;/strong&gt;这样的命令时，会先执行springboot插件的repackage动作，将程序打包成jar文件；随后通过assembly插件执行bundle任务，&lt;br/&gt;再作最终的组装。&lt;br/&gt;&lt;strong&gt;&lt;em&gt;/src/main/build/assembly.xml&lt;/em&gt;&lt;/strong&gt;定义了程序包的结构，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;assembly xmlns=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2&quot;
          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
          xsi:schemaLocation=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd&quot;&amp;gt;
    &amp;lt;id&amp;gt;bundle&amp;lt;/id&amp;gt;
    &amp;lt;formats&amp;gt;
        &amp;lt;format&amp;gt;tar.gz&amp;lt;/format&amp;gt;
    &amp;lt;/formats&amp;gt;
    &amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt; &amp;lt;!-- disable the creation of root's distribution dir in the archive --&amp;gt;

     &amp;lt;fileSets&amp;gt;  
        &amp;lt;!-- config files --&amp;gt;
        &amp;lt;fileSet&amp;gt;  
            &amp;lt;directory&amp;gt;${basedir}/src/main/build/config&amp;lt;/directory&amp;gt;  
            &amp;lt;excludes&amp;gt;&amp;lt;/excludes&amp;gt;  
             &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;application*.properties&amp;lt;/include&amp;gt;
                &amp;lt;include&amp;gt;log4j2.xml&amp;lt;/include&amp;gt; 
            &amp;lt;/includes&amp;gt;
            &amp;lt;fileMode&amp;gt;0644&amp;lt;/fileMode&amp;gt;
            &amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt;  
        &amp;lt;/fileSet&amp;gt;  
        &amp;lt;!-- scripts --&amp;gt;
        &amp;lt;fileSet&amp;gt;
            &amp;lt;directory&amp;gt;${basedir}/src/main/build/bin&amp;lt;/directory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;*.sh&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
            &amp;lt;fileMode&amp;gt;0755&amp;lt;/fileMode&amp;gt;
            &amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt;
        &amp;lt;/fileSet&amp;gt;
        &amp;lt;!-- executable jar --&amp;gt;
         &amp;lt;fileSet&amp;gt;
            &amp;lt;directory&amp;gt;${project.build.directory}&amp;lt;/directory&amp;gt;
            &amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;${project.artifactId}-${project.version}.jar&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
            &amp;lt;fileMode&amp;gt;0755&amp;lt;/fileMode&amp;gt;
        &amp;lt;/fileSet&amp;gt;
    &amp;lt;/fileSets&amp;gt;  

&amp;lt;/assembly&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;assembly文件的定义比较简单，目标程序包中除了jar文件之外，还会包含几个脚本和配置文件。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;启动脚本&lt;br/&gt;&lt;strong&gt;&lt;em&gt;/src/main/build/bin/start.sh&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;nohup java -jar dmo-boot-0.0.1-SNAPSHOT.jar &amp;gt; console.log &amp;amp;
tail -n100 -f console.log&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;停止脚本&lt;br/&gt;&lt;strong&gt;&lt;em&gt;/src/main/build/bin/stop.sh&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;kill `cat application.pid`
rm application.pid&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;配置文件&lt;br/&gt;&lt;strong&gt;&lt;em&gt;/src/main/build/application.properties&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;em&gt;/src/main/build/log4j2.xml&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最终执行&quot;mvn package&quot;打包，会输出压缩包文件，结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dmo-boot.0.0.1-SNAPSHOT.jar
application.properties
log4j2.xml
start.sh
stop.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文将一个springboot项目从初始化、开发、配置、打包的整个流程进行了详细介绍，希望读者对该框架能产生整体性的了解。&lt;br/&gt;由于篇幅有限，部分章节仅做了简单说明。springboot是一个优秀的脚手架，借助于框架可以快速的完成各种特性的实现。&lt;br/&gt;在随后的文章里，将会跟大家一起继续深入学习，欢迎随时关注&quot;美码师的补习系列-springboot篇&quot;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Jul 2018 14:36:00 +0000</pubDate>
<dc:creator>美码师</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/littleatp/p/9278686.html</dc:identifier>
</item>
<item>
<title>iOS11.2-11.3.1进行越狱及问题 - WillkYang</title>
<link>http://www.cnblogs.com/yate1996/p/9278682.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yate1996/p/9278682.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;设备环境：Electra、iOS11.13.1&lt;br/&gt;PS:Electra最新版本进行越狱只支持11.14以下的版本、同时这是不完美越狱，每次重启手机都需要重新越狱，最后，由于Electra版本推出仓促，一次成功率较低。仅建议喜欢瞎折腾的童鞋尝试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;越狱结果截图&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/459563-bcfea6aaa489b018.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;进入&lt;a href=&quot;https://coolstar.org/electra/&quot;&gt;Electra&lt;/a&gt;官网下载Electra ipa文件，注意官网有两种方法，笔者此次使用的是第二个版本(Non Dev Accont)的文件&lt;br/&gt;&lt;img src=&quot;http://ou0bp2mrg.bkt.clouddn.com/2018-07-07-15309740484873.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下载完后安装到手机上，方法很多&lt;br/&gt;iOS开发者可直接进行重签名安装&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;codesign -f -s ‘iPhone Developer: xxx(xxx)’ —entitlements xxx.entitlements xxx.app&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;没有开发者账号的可以使用工具&lt;a href=&quot;http://www.cydiaimpactor.com/&quot;&gt;Cydia Impactor&lt;/a&gt;辅助安装，下载安装后打开，设备连接电脑，直接将ipa文件拉入软件中即可，或者菜单栏选择install package，之后需要输入apple账号密码。&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/459563-a6dfd19f9a653401.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装后打开Electra，建议手机先重启等待一分钟，开启飞行模式，关闭Siri，然后开始越狱，理想情况下，第一次开始后手机自动重启完会多了一个Cydia，此时手机还未越狱成功，Cydia打开会闪退。当然这一步成功装上cydia的概率不高，要么直接报错，要么在1/3进度处手机立即被重启，这些都属于失败的情况，此时需要重启（也许可以不用），等待一分钟以上，再次重新点击越狱，直接看到cydia。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/459563-99892d8619f548c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;如果在此处重启，大概率本次操作失败，需要重来&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里，你需要能看到cydia，否则请回到步骤3继续。重新打开Electra，再次按下按钮，情况基本和步骤上一致，也是如果在1/3处重启则视为失败，能走到2/3基本就成功了，手机自动重启后，cydia可以打开，不闪退。&lt;/p&gt;
&lt;p&gt;此时，如果cydia正常打开并使用，那么恭喜，越狱过程已经结束。可直接忽略下面的步骤。&lt;/p&gt;
&lt;p&gt;如果打开的cydia没有连接到网络，如下图。则断开WIFI，在打开的cydia页面上，上拉控制中心，开启飞行模式，关闭，打开，这时候应该会有提醒，接着到手机设置重的移动数据网络打开cydia的联网权限即可使用。&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/459563-f9bd9c74764ff6e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;再一次温馨提示：当前Electra越狱成功率较低，基本需要很多次尝试后才能越狱成功，要有耐心，如果能一次成功，那你肯定是被选中的人～&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 07 Jul 2018 14:33:00 +0000</pubDate>
<dc:creator>WillkYang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yate1996/p/9278682.html</dc:identifier>
</item>
</channel>
</rss>