<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>箱线图(boxplot)简介与举例 - Splace</title>
<link>http://www.cnblogs.com/space-place/p/7643480.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/space-place/p/7643480.html</guid>
<description>&lt;p&gt;&lt;br/&gt;&lt;h2&gt;&lt;span&gt;简述：&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　盒图是在1977年由美国的统计学家约翰·图基(John Tukey)发明的。它由五个数值点组成：&lt;span&gt;最小值(min)，下四分位数(Q1)，中位数(median)，上四分位数(Q3)，最大值(max)。也可以往盒图里面加入平均值(mean)&lt;/span&gt;。如上图。下四分位数、中位数、上四分位数组成一个“带有隔间的盒子”。上四分位数到最大值之间建立一条延伸线，这个延伸线成为“胡须(whisker)”。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://www.blogjava.net/images/blogjava_net/norvid/44484/o_boxplot.png&quot; alt=&quot;&quot; width=&quot;393&quot; height=&quot;311&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　由于现实数据中总是存在各式各样地“脏数据”，也成为“离群点”，于是为了不因这些少数的离群数据导致整体特征的偏移，将这些离群点单独汇出，而盒图中的胡须的两级修改成最小观测值与最大观测值。这里有个经验，就是最大(最小)观测值设置为与四分位数值间距离为1.5个IQR(中间四分位数极差)。即：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/884095/201710/884095-20171009221403902-824833776.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;

&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;IQR = Q3-Q1，即上四分位数与下四分位数之间的差，也就是盒子的长度。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;最小观测值为min = Q1 - 1.5*IQR，如果存在离群点小于最小观测值，则胡须下限为最小观测值，离群点单独以点汇出。如果没有比最小观测值小的数，则胡须下限为最小值。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;最大观测值为max = Q3 -1.5*IQR，如果存在离群点大于最大观测值，则胡须上限为最大观测值，离群点单独以点汇出。如果没有比最大观测值大的数，则胡须上限为最大值。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;通过盒图，在分析数据的时候，盒图能够有效地帮助我们识别数据的特征：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;54.334370677732&quot;&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt; 直观地识别数据集中的异常值(查看离群点)。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; 判断数据集的数据离散程度和偏向(观察盒子的长度，上下隔间的形状，以及胡须的长度)。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;实例：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;12位商学院毕业生月起薪的样本在这里按升序重复如下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2710 2755 2850 | 2880 2880 2890 | 2920 2940 2950 | 3050 3130 3325&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = 2865　&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; = 2905(中位数)　&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; = 3000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　中位数是2 905，第一个四分位数&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = 2865，第三个四分位数&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; = 3000。检查这些数据，最小值为2710，最大值为3325。因此，薪水数据的五数概括数据为2710、2865、2905、3000、3325。大约1／4或25％的观察值在五数概括的相邻两个数字之间。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　箱线图是在五数概括的基础上对数据进行描述的图形方法。绘制箱线图的关键是计算中位数、四分位数&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;和&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;。也可以使用四分位数全距&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;I&lt;/em&gt;&lt;em&gt;Q&lt;/em&gt;&lt;em&gt;R&lt;/em&gt; = &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; − &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;。图1是月起薪数据的箱线图。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　绘制箱线图的步骤如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1．画一只箱子，箱子两端分别位于第一个和第三个四分位数上。对于薪水数据来说,&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = 2865以及&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; = 3000。这个箱子包括中间50％的数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2．在箱子中位数(薪水数据是2905)的位置画一条垂直线。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3．用四分位数全距&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;I&lt;/em&gt;&lt;em&gt;Q&lt;/em&gt;&lt;em&gt;R&lt;/em&gt; = &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; − &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;，确定限制线的位置。箱线图的上、下限制线分别在比&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;低1.5(IQR)和比&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;高1.5(IQR)的位置上。对于薪水数据来说，&lt;span class=&quot;texhtml&quot;&gt;&lt;em&gt;I&lt;/em&gt;&lt;em&gt;Q&lt;/em&gt;&lt;em&gt;R&lt;/em&gt; = &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; − &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = 3000 − 2865 = 135。因此，限制线的位置在&lt;span class=&quot;texhtml&quot;&gt;2865 − 1.5(135) = 2662.5和&lt;span class=&quot;texhtml&quot;&gt;3000 + 1.5(135) = 3202.5处。两条限制线以外的数据可以认为是异常值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4．图1中的虚线称为触须线。触须线从箱子两端开始绘制，直至第3步中计算的限制线内的最小值和最大值。因此，薪水数据的触须线分别在2 710和3 130处结束。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　5．最后，每个异常值的位置都用星号“*”表示出来。在图1中，我们可以看到一个异常值，即3325。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a class=&quot;image&quot; title=&quot;Image:图1 起薪数据带有上下限制线的箱线图.jpg&quot; href=&quot;http://wiki.mbalib.com/wiki/Image:%E5%9B%BE1_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E5%B8%A6%E6%9C%89%E4%B8%8A%E4%B8%8B%E9%99%90%E5%88%B6%E7%BA%BF%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot;&gt;&lt;img src=&quot;http://wiki.mbalib.com/w/images/6/69/%E5%9B%BE1_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E5%B8%A6%E6%9C%89%E4%B8%8A%E4%B8%8B%E9%99%90%E5%88%B6%E7%BA%BF%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot; alt=&quot;Image:图1 起薪数据带有上下限制线的箱线图.jpg&quot; longdesc=&quot;/wiki/Image:%E5%9B%BE1_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E5%B8%A6%E6%9C%89%E4%B8%8A%E4%B8%8B%E9%99%90%E5%88%B6%E7%BA%BF%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot; width=&quot;562&quot; height=&quot;236&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在图1中，我们画出了表示上下界限位置的直线。画这些线是为了说明如何计算薪水数据的限制线并标出其位置。虽然限制线通常要计算出来，但是在箱线图中一般并不标示出来。图2显示了薪水数据的常见箱线图的形状。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a class=&quot;image&quot; title=&quot;Image:图2 起薪数据的箱线图.jpg&quot; href=&quot;http://wiki.mbalib.com/wiki/Image:%E5%9B%BE2_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot;&gt;&lt;img src=&quot;http://wiki.mbalib.com/w/images/0/0d/%E5%9B%BE2_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot; alt=&quot;Image:图2 起薪数据的箱线图.jpg&quot; longdesc=&quot;/wiki/Image:%E5%9B%BE2_%E8%B5%B7%E8%96%AA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%B1%E7%BA%BF%E5%9B%BE.jpg&quot; width=&quot;520&quot; height=&quot;189&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;seaborn(sns)调用举例：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; seaborn as sns
sns.set_style(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;whitegrid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
tips &lt;/span&gt;= sns.load_dataset(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tips&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 绘制箱线图&lt;/span&gt;
ax = sns.boxplot(x=tips[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;total_bill&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 竖着放的箱线图，也就是将x换成y&lt;/span&gt;
ax = sns.boxplot(y=tips[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;total_bill&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ref:&lt;/p&gt;
&lt;p&gt;1.&lt;a id=&quot;viewpost1_TitleUrl&quot; class=&quot;singleposttitle&quot; href=&quot;http://www.blogjava.net/norvid/articles/317235.html&quot;&gt;盒图(boxplot)&lt;/a&gt;: http://www.blogjava.net/norvid/articles/317235.html&lt;/p&gt;
&lt;p&gt;2. 箱线图: http://wiki.mbalib.com/wiki/%E7%AE%B1%E7%BA%BF%E5%9B%BE#_ref-1&lt;/p&gt;
&lt;p&gt;3. Seaborn(sns)官方文档学习笔记（第五章 分类数据的绘制） https://zhuanlan.zhihu.com/p/27683042&lt;/p&gt;
&lt;p&gt;4. &lt;span class=&quot;link_title&quot;&gt;&lt;a href=&quot;http://blog.csdn.net/suzyu12345/article/details/69029106&quot;&gt;python seaborn画图&lt;/a&gt;&lt;/span&gt; : http://blog.csdn.net/suzyu12345/article/details/69029106&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 09 Oct 2017 15:05:00 +0000</pubDate>
<dc:creator>Splace</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/space-place/p/7643480.html</dc:identifier>
</item>
<item>
<title>详解斯坦纳点及斯坦纳树及模版归纳总结 - Angel_Kitty</title>
<link>http://www.cnblogs.com/ECJTUACM-873284962/p/7643445.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ECJTUACM-873284962/p/7643445.html</guid>
<description>&lt;h2&gt;①&lt;span&gt;什么是斯坦纳点？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　假设原来已经给定了个点，库朗等指出需要引进的点数至多为，此种点称为斯坦纳点。过每一斯坦纳点，至多有三条边通过。若为三条边，则它们两两交成120°角；若为两条边，则此斯坦纳点必为某一已给定的点，且此两条边交成的角必大于或等于120°。其中最小的网络称为已给定点的集合的最小斯坦纳树，记作SMT。若此SMT的斯坦纳点中有等于给定点的点，则称此SMT为退化的，此给定点称为退化点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;构造方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100338/201710/1100338-20171009223317824-1951787591.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;已知B，C，D，E可知B点为转轴线段BC绕B顺时针旋转60度得到正三角形，再以顶点F为转轴，FD构成的线段逆时针旋转得到新的正三角形顶点G，劣弧DF上任意一点都能和D，F构成三个，相同的，劣弧CB上的点也是。&lt;/p&gt;
&lt;p&gt;故将第四点E与G相连接在劣弧上得到一个交点，再由交点与F连接交劣弧CB于一点，即构成了非退化情况下的两斯坦纳点，枚举得到斯坦纳最小生成树，当与顶点连线不与劣弧有交点时则为该种结构的退化点情况.&lt;/p&gt;
&lt;h2&gt;②&lt;span&gt;什么是斯坦纳树？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;       斯坦纳树问题是组合优化学科中的一个问题。将指定点集合中的所有点连通，且边权总和最小的生成树称为最小斯坦纳树（Minimal Steiner Tree），其实最小生成树是最小斯坦纳树的一种特殊情况。而&lt;span&gt;斯坦纳树可以理解为使得指定集合中的点连通的树，但不一定最小。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;③&lt;span&gt;如何求解最小斯坦纳树？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;      可以用DP求解，dp[i][state]表示以i为根，指定集合中的点的连通状态为state的生成树的最小总权值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      转移方程有两重：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      第一重，先通过连通状态的子集进行转移。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      dp[i][state]=min{ dp[i][subset1]+dp[i][subset2] } &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      枚举子集的技巧可以用 for(sub=(state-1)&amp;amp;state;sub;sub=(sub-1)&amp;amp;state)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      第二重，在当前枚举的连通状态下，对该连通状态进行松弛操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      dp[i][state]=min{ dp[i][state], dp[j][state]+e[i][j] }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      为什么只需对该连通状态进行松弛？因为更后面的连通状态会由先前的连通状态通过第一重转移得到，所以无需对别的连通状态松弛。松弛操作用SPFA即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      复杂度 O(n*3^k+cE*&lt;span&gt;2^k)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      c为SPFA复杂度中的常数，E为边的数量，但几乎达不到全部边的数量，甚至非常小。3^k来自于子集的转移sum{C(i,n)*2^i} (1&amp;lt;=i&amp;lt;=n)，用二项式展开求一下和。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模版如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; *  Steiner Tree：求，使得指定K个点连通的生成树的最小总权值
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; *  st[i] 表示顶点i的标记值，如果i是指定集合内第m(0&amp;lt;=m&amp;lt;K)个点，则st[i]=1&amp;lt;&amp;lt;m 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; *  endSt=1&amp;lt;&amp;lt;K
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; *  dptree[i][state] 表示以i为根，连通状态为state的生成树值
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; CLR(x,a) memset(x,a,sizeof(x))
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; dptree[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;K],st[N],endSt;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; vis[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;K];
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; que;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; input()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;    &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    *    输入，并且返回指定集合元素个数K
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    *    因为有时候元素个数需要通过输入数据处理出来，所以单独开个输入函数。
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; initSteinerTree()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     CLR(dptree,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     CLR(st,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) CLR(vis[i],&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     endSt=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;input();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         dptree[i][st[i]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; update(&lt;span&gt;int&lt;/span&gt; &amp;amp;a,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     a=(a&amp;gt;x || a==-&lt;span&gt;1&lt;/span&gt;)?&lt;span&gt; x : a;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SPFA(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; state)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;que.empty()){
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; u=&lt;span&gt;que.front();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        que.pop();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         vis[u][state]=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=p[u];i!=-&lt;span&gt;1&lt;/span&gt;;i=&lt;span&gt;e[i].next){
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; v=&lt;span&gt;e[i].vid;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(dptree[v][st[v]|state]==-&lt;span&gt;1&lt;/span&gt; || 
&lt;span&gt;45&lt;/span&gt;                 dptree[v][st[v]|state]&amp;gt;dptree[u][state]+&lt;span&gt;e[i].w){
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;                 dptree[v][st[v]|state]=dptree[u][state]+&lt;span&gt;e[i].w;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(st[v]|state!=state ||&lt;span&gt; vis[v][state]) 
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                     &lt;span&gt;continue&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只更新当前连通状态&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;                 vis[v][state]=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                que.push(v);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; steinerTree()
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;1&lt;/span&gt;;j&amp;lt;endSt;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(st[i] &amp;amp;&amp;amp; (st[i]&amp;amp;j)==&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; sub=(j-&lt;span&gt;1&lt;/span&gt;)&amp;amp;j;sub;sub=(sub-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;j){
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; x=st[i]|sub,y=st[i]|(j-&lt;span&gt;sub);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(dptree[i][x]!=-&lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; dptree[i][y]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                     update(dptree[i][j],dptree[i][x]+&lt;span&gt;dptree[i][y]);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(dptree[i][j]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) 
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                 que.push(i),vis[i][j]=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        SPFA(j);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;④&lt;span&gt;学习心得&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　参考09年姜碧野神牛写的论文《SPFA的优化与应用》，里面提到了一道题——[WC2008]游览计划。这题让我立刻联想到了去年北京赛区的E题，差不多的模型，大概就是在一个图中求给定的k个点的斯坦纳生成树，给定点的个数k&amp;lt;=10。&lt;/p&gt;
&lt;div class=&quot;bct fc05 fc11 nbw-blog ztag&quot; readability=&quot;49&quot;&gt;
&lt;p&gt;       首先我们知道，最优解必然是一棵树，然后这棵树又是由若干棵子树合并成的，于是我们可以状态压缩，把k个节点的连通状态用一个二进制数j表示，dp[i][j]表示以i为根和对应状态为j的节点连通的子树的最小权值。有两种转移方法：&lt;/p&gt;
&lt;p&gt;       枚举子树的形态：dp[ i ][ j ]=min{ dp[ i ][ j ]，dp[ i ][ k ]+dp[ i ][ l ] }，其中k和l是对j的一个划分。&lt;/p&gt;
&lt;p&gt;       按照边进行松弛：dp[ i ][ j ]=&lt;span&gt;min{ dp[ i ][ j ]，dp[ i' ][ j ]+w[ i ][ i' ] }，其中i和i'之间有边相连。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       对于第一种转移，我们直接枚举子集就行了。对于第二种转移，我们仔细观察可以发现这个方程和最短路的约束条件是很类似的，于是我们可以用spfa或者dij来进行状态转移。枚举子集的复杂度=n*sum{C(k，i)*2^i，0&amp;lt;i=k}=n*3^k，spfa的复杂度为n*2^k。所以总复杂度为O(n*3^k)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       具体实现的时候我试了好几种不同的方法，一开始是直接把两种转移都看成图中的边，一遍spfa得出结果，大概如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;bct fc05 fc11 nbw-blog ztag&quot; readability=&quot;47.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; spfa(){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x=Q.front()/&lt;span&gt;10000&lt;/span&gt;,y=Q.front()%&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        Q.pop();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(edge *i=Adj[x];i;i=i-&amp;gt;nxt)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对当前节点的每条边都进行松弛操作&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             update(i-&amp;gt;v,s[i-&amp;gt;v]|y,d[x][y]+i-&amp;gt;&lt;span&gt;w);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; t=nn-&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=t;i;i=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;t)            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;枚举补集的所有子集，进行松弛操作&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             update(x,y|i,d[x][y]+d[x][i|&lt;span&gt;s[x]]);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     这么做的复杂度是没有变的，但是常数非常大，hdu上跑了2500ms才过，仔细一想，我们发现第二松弛操作其实做了很多无用功，考虑能不能进行优化。&lt;/p&gt;
&lt;p&gt;       第二种松弛操作非常的耗时间，所以我们就不把它加到spfa里面进行转移，直接在外面进行枚举，实现更新，避免大量的重复计算。先枚举连通性j，对于所有的1&amp;lt;=i&amp;lt;=n，我们先进行第一种转移，既枚举子集进行更新。如果dp[i][j]被更新了，我们就把它加到队列里，最后再进行spfa()，这样按j分层的进行转移，大概如下：&lt;/p&gt;
&lt;div readability=&quot;22&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; y=&lt;span&gt;0&lt;/span&gt;;y&amp;lt;nn;y++)                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;枚举连通性&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;1&lt;/span&gt;;x&amp;lt;=n;x++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                 &lt;span&gt;bool&lt;/span&gt; flag=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=(y-&lt;span&gt;1&lt;/span&gt;)&amp;amp;y;i;i=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;y)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;枚举所有子集，进行第一种转移&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;                     flag|=update(x,y,d[x][i|s[x]]+d[x][(y-i)|&lt;span&gt;s[x]]);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(flag) Q.push(x*&lt;span&gt;10000&lt;/span&gt;+y);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果节点被更新则加入队列&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;                 spfa();       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;spfa进行第二种转移&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;             }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       我本来以为这样会更快一些，结果跑了4700ms = =！顿时吐槽无力。&lt;/p&gt;
&lt;p&gt;       为啥这样会更慢呢？我觉的大概是由于spfa()的次数过多，所以导致很多节点被重复的更新了很多次，又产生了大量了重复计算，所以反而更慢了。那么就没有什么好办法吗？仔细一想，我发现进行spfa的时候只需要对当前层的节点进行spfa就行了，不需要整个图完全松弛一遍，因为更高的层都可以通过枚举子集而变成若干个更低的层，这样一次spfa的复杂度一下就降了下来，变成了O(n)级别，大概如下：&lt;/p&gt;
&lt;div readability=&quot;24.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(edge *i=Adj[x];i;i=i-&amp;gt;&lt;span&gt;nxt)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(update(i-&amp;gt;v,y|s[i-&amp;gt;v],d[x][y]+i-&amp;gt;w)&amp;amp;&amp;amp;y==(y|s[i-&amp;gt;v])&amp;amp;&amp;amp;!&lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只把处于相同层的节点加到队列中&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]=&lt;span&gt;1&lt;/span&gt;,Q.push(i-&amp;gt;v*&lt;span&gt;10000&lt;/span&gt;+y); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样修改以后效果果然非常明显，1000ms就AC了。但还是不够快，别人最快的能够达到500ms。于是我baidu了一下，发现他们没有用spfa！大概就是把第二种转移表示成了另外一种形式：&lt;/p&gt;
&lt;p&gt;       dp[ i ][ j ]=min{ dp[ i ][ j ] , dp[ k ][ j ]+d[ k ][ i ] }，其中d[ k ][ i ]表示k到i的最短路。&lt;/p&gt;

&lt;p&gt;       很容易就能证明这样写方程也是对的，于是我们就可以先用floyed预处理出任意两点间的最短路，然后直接DP。这样做的总复杂度为O(n^3+n^2*2^k+n*3^k)，这个复杂度并不比上面的方法低，但由于hdu4085的n比较小，所以这样写反而比上一种方法要快上不少。但对于 &lt;span&gt;[WC2008]游览计划、ZOJ 3613 Wormhole Transport这两道题就不行了，n都达到了100甚至200的大小，这种方法要比前面一种慢。所以最后得出结论，还是前一种方法最稳定 = ^ =&lt;/span&gt;
&lt;h2&gt;⑤&lt;span&gt;更多习题分享&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;HDU 4085 Peach Blossom Spring&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       11年北京赛区的E题，这题有点不同的地方在于，最后的答案可能是一个森林，所以我们要先求出斯坦纳树后进行DP。转移的时候要注意一点，只有人的个数和房子的个数相等的时候才算合法状态，所以我们要加一个check()函数进行检查。&lt;/p&gt;
&lt;div readability=&quot;41.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;vector&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;queue&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include&amp;lt;algorithm&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; N 60
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; INF 2000000
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; edge{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; v,w;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     edge *&lt;span&gt;nxt;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }E[&lt;span&gt;2009&lt;/span&gt;],*Adj[N],*&lt;span&gt;cur;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,m,K,nn;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; s[N],&lt;span&gt;in&lt;/span&gt;[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; d[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;10&lt;/span&gt;],dp[&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; Q;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addedge(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt; v,&lt;span&gt;int&lt;/span&gt; w){cur-&amp;gt;v=v,cur-&amp;gt;w=w,cur-&amp;gt;nxt=Adj[u],Adj[u]=cur++&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; check(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; r=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;x;i++,x&amp;gt;&amp;gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         r+=(x&amp;amp;&lt;span&gt;1&lt;/span&gt;)*(i&amp;lt;K?&lt;span&gt;1&lt;/span&gt;:-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; r==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; inline &lt;span&gt;bool&lt;/span&gt; update(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; w){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(w&amp;lt;d[x][y]) &lt;span&gt;return&lt;/span&gt; d[x][y]=w,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; spfa(){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x=Q.front()/&lt;span&gt;10000&lt;/span&gt;,y=Q.front()%&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        Q.pop();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(edge *i=Adj[x];i;i=i-&amp;gt;&lt;span&gt;nxt)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(update(i-&amp;gt;v,y|s[i-&amp;gt;v],d[x][y]+i-&amp;gt;w)&amp;amp;&amp;amp;y==(y|s[i-&amp;gt;v])&amp;amp;&amp;amp;!&lt;span&gt;in&lt;/span&gt;[i-&amp;gt;&lt;span&gt;v][y])
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]=&lt;span&gt;1&lt;/span&gt;,Q.push(i-&amp;gt;v*&lt;span&gt;10000&lt;/span&gt;+&lt;span&gt;y);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init(){
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     cur=&lt;span&gt;E;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     memset(Adj,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(Adj));
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     memset(s,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(s));    
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;m,&amp;amp;&lt;span&gt;K);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     nn=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(&lt;span&gt;2&lt;/span&gt;*&lt;span&gt;K);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;nn;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             d[i][j]=&lt;span&gt;INF;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(m--&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; u,v,w;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;u,&amp;amp;v,&amp;amp;&lt;span&gt;w);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        addedge(u,v,w);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        addedge(v,u,w);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    }    
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=K;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         s[i]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(i-&lt;span&gt;1&lt;/span&gt;),d[i][s[i]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;                
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         s[n-i+&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(K+i-&lt;span&gt;1&lt;/span&gt;),d[n-i+&lt;span&gt;1&lt;/span&gt;][s[n-i+&lt;span&gt;1&lt;/span&gt;]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;        
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    }    
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){    
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; T;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;T);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(T--&lt;span&gt;){        
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        init();
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; y=&lt;span&gt;0&lt;/span&gt;;y&amp;lt;nn;y++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;1&lt;/span&gt;;x&amp;lt;=n;x++&lt;span&gt;){                
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=(y-&lt;span&gt;1&lt;/span&gt;)&amp;amp;y;i;i=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;y)
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                     d[x][y]=min(d[x][y],d[x][i|s[x]]+d[x][(y-i)|&lt;span&gt;s[x]]);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(d[x][y]&amp;lt;INF) Q.push(x*&lt;span&gt;10000&lt;/span&gt;+y),&lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            spfa();
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;nn;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             dp[j]=&lt;span&gt;INF;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) dp[j]=&lt;span&gt;min(dp[j],d[i][j]);
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;nn;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(check(i))
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=i&amp;amp;(i-&lt;span&gt;1&lt;/span&gt;);j;j=(j-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(check(j))
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;                         dp[i]=min(dp[i],dp[j]+dp[i-&lt;span&gt;j]);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(dp[nn-&lt;span&gt;1&lt;/span&gt;]&amp;gt;=INF) puts(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No solution&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,dp[nn-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[WC2008]游览计划&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       这题要求一棵满足要求的斯坦纳树，基本上按照上面的做法写就行了，不过有一点恶心的就是要输出一组可行方案，所以DP的时候还要记录一下路径。&lt;/p&gt;
&lt;div readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;vector&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;queue&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include&amp;lt;algorithm&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; INF 2000000
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; N 10
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; dx[]={&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     dy[]={&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max_s,n,m;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; mat[N][N],st[N][N],vis[N][N],cnt;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; d[N][N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;N],pre[N][N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;N];
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;[N][N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;N];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; Q;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; spfa(){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x,y,s,tx,ty,ts;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         x=Q.front()/&lt;span&gt;100000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         y=(Q.front()-x*&lt;span&gt;100000&lt;/span&gt;)/&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         s=Q.front()-x*&lt;span&gt;100000&lt;/span&gt;-y*&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        Q.pop();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[x][y][s]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;4&lt;/span&gt;;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             tx=x+dx[i],ty=y+&lt;span&gt;dy[i];
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(tx&amp;gt;=n||ty&amp;gt;=m||tx&amp;lt;&lt;span&gt;0&lt;/span&gt;||ty&amp;lt;&lt;span&gt;0&lt;/span&gt;) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             ts=s|&lt;span&gt;st[tx][ty];
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(d[x][y][s]+mat[tx][ty]&amp;lt;&lt;span&gt;d[tx][ty][ts]){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 d[tx][ty][ts]=d[x][y][s]+&lt;span&gt;mat[tx][ty];
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 pre[tx][ty][ts]=x*&lt;span&gt;100000&lt;/span&gt;+y*&lt;span&gt;10000&lt;/span&gt;+&lt;span&gt;s;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;in&lt;/span&gt;[tx][ty][ts]&amp;amp;&amp;amp;s==ts) &lt;span&gt;in&lt;/span&gt;[tx][ty][ts]=&lt;span&gt;1&lt;/span&gt;,Q.push(tx*&lt;span&gt;100000&lt;/span&gt;+ty*&lt;span&gt;10000&lt;/span&gt;+&lt;span&gt;ts);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            }                
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; go(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; s){
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     vis[x][y]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; t=&lt;span&gt;pre[x][y][s],tx,ty,ts;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!t) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     tx=t/&lt;span&gt;100000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     ty=(t-tx*&lt;span&gt;100000&lt;/span&gt;)/&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     ts=t-tx*&lt;span&gt;100000&lt;/span&gt;-ty*&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    go(tx,ty,ts);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(x==tx&amp;amp;&amp;amp;y==ty) go(x,y,(s-ts)|&lt;span&gt;st[x][y]);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;freopen(&quot;in.in&quot;,&quot;r&quot;,stdin);&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;&lt;span&gt;m);    
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;m;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;mat[i][j]);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(!mat[i][j]) st[i][j]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(cnt++&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }    
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     max_s=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;cnt;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;m;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; k=&lt;span&gt;0&lt;/span&gt;;k&amp;lt;max_s;k++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                 d[i][j][k]=&lt;span&gt;INF;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(st[i][j]) d[i][j][st[i][j]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; k=&lt;span&gt;1&lt;/span&gt;;k&amp;lt;max_s;k++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;m;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(st[i][j]&amp;amp;&amp;amp;!(st[i][j]&amp;amp;k)) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;                
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=(k-&lt;span&gt;1&lt;/span&gt;)&amp;amp;k;x;x=(x-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;k){
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; t=d[i][j][x|st[i][j]]+d[i][j][(k-x)|st[i][j]]-&lt;span&gt;mat[i][j];
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(t&amp;lt;d[i][j][k]) d[i][j][k]=t,pre[i][j][k]=i*&lt;span&gt;100000&lt;/span&gt;+j*&lt;span&gt;10000&lt;/span&gt;+(x|&lt;span&gt;st[i][j]);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(d[i][j][k]&amp;lt;INF) Q.push(i*&lt;span&gt;100000&lt;/span&gt;+j*&lt;span&gt;10000&lt;/span&gt;+k),&lt;span&gt;in&lt;/span&gt;[i][j][k]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        spfa();
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;m;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(st[i][j]){
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;                 printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,d[i][j][max_s-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;                 go(i,j,max_s-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;0&lt;/span&gt;;x&amp;lt;n;x++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; y=&lt;span&gt;0&lt;/span&gt;;y&amp;lt;m;y++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;(st[x][y]) putchar(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(vis[x][y]) putchar(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt; putchar(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;                     puts(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;ZOJ 3613 Wormhole Transport&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       ZOJ Monthly, June 2012的C题。和HDU 4085差不多，有一点不同的是一个星球可能有很多个工厂，但是含有资源和含有工厂的星球个数都不超过4。还是先状态压缩，然后DP求出斯坦纳树。最优的方案有可能是森林，所以我们还要DP，dp[ i ]表示对应的工厂节点和资源节点组成的斯坦树森林的最优值。那么：&lt;/p&gt;
&lt;p&gt;       dp[ i ]=min{ dp[ i ]，dp[ j ]+dp[ k ] }，其中j和k为i的一个划分。&lt;/p&gt;
&lt;p&gt;       这里要注意一点，所有的状态i、j、k都要满足一个条件，就是连通的星球上工厂的个数要大于等于资源的个数，这样才是一个合法的状态，所以要加一个check()函数。最后再找到所含资源最多，花费最小的合法方案就是答案。&lt;/p&gt;
&lt;div readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;90&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;queue&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;vector&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include&amp;lt;algorithm&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; N 209
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; edge{&lt;span&gt;int&lt;/span&gt; v,w;edge *nxt;}E[&lt;span&gt;10009&lt;/span&gt;],*Adj[N],*&lt;span&gt;cur;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,m,nn;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; d[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;8&lt;/span&gt;],dp[&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;[N][&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; S[N],P[N],st[N],fac[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;],cf,cs;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; Q;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addedge(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt; v,&lt;span&gt;int&lt;/span&gt; w){cur-&amp;gt;v=v,cur-&amp;gt;w=w,cur-&amp;gt;nxt=Adj[u],Adj[u]=cur++&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; up(&lt;span&gt;int&lt;/span&gt; &amp;amp;a,&lt;span&gt;int&lt;/span&gt; b){&lt;span&gt;if&lt;/span&gt;(a==-&lt;span&gt;1&lt;/span&gt;||a&amp;gt;b) a=&lt;span&gt;b;}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; spfa(){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x=Q.front()/&lt;span&gt;1000&lt;/span&gt;,y=Q.front()%&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        Q.pop();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(edge *i=Adj[x];i;i=i-&amp;gt;&lt;span&gt;nxt)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(d[i-&amp;gt;v][y|st[i-&amp;gt;v]]==-&lt;span&gt;1&lt;/span&gt;||d[x][y]+i-&amp;gt;w&amp;lt;d[i-&amp;gt;v][y|st[i-&amp;gt;&lt;span&gt;v]]){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 d[i-&amp;gt;v][y|st[i-&amp;gt;v]]=d[x][y]+i-&amp;gt;&lt;span&gt;w;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(y==(y|st[i-&amp;gt;v])&amp;amp;&amp;amp;!&lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]) &lt;span&gt;in&lt;/span&gt;[i-&amp;gt;v][y]=&lt;span&gt;1&lt;/span&gt;,Q.push(i-&amp;gt;v*&lt;span&gt;1000&lt;/span&gt;+&lt;span&gt;y);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }                
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; check(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; t=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;x;i++,x&amp;gt;&amp;gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         t+=(x&amp;amp;&lt;span&gt;1&lt;/span&gt;)*(i&amp;lt;cf?fac[i]:-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; t&amp;gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; cnt(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; r=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;x;i++,x&amp;gt;&amp;gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         r+=(x&amp;amp;&lt;span&gt;1&lt;/span&gt;)*(i&amp;lt;cf?&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n)+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         cur=&lt;span&gt;E;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         cf=cs=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         memset(Adj,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(Adj));
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         memset(st,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(st));
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         memset(d,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(d));
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         memset(dp,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dp));        
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; ans=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){            
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,P+i,S+&lt;span&gt;i);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(S[i]&amp;amp;&amp;amp;P[i]) P[i]--,S[i]=&lt;span&gt;0&lt;/span&gt;,ans++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(P[i]) st[i]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;cf,fac[cf++]=P[i],d[i][st[i]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        }        
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(S[i])
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                 st[i]=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(cf+cs++),d[i][st[i]]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         nn=&lt;span&gt;1&lt;/span&gt;&amp;lt;&amp;lt;(cf+&lt;span&gt;cs);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         
&lt;span&gt;60&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;m);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(m--&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; u,v,w;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;u,&amp;amp;v,&amp;amp;&lt;span&gt;w);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;            addedge(u,v,w);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;            addedge(v,u,w);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         
&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; y=&lt;span&gt;1&lt;/span&gt;;y&amp;lt;nn;y++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;1&lt;/span&gt;;x&amp;lt;=n;x++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(st[x]&amp;amp;&amp;amp;!(st[x]&amp;amp;y)) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=(y-&lt;span&gt;1&lt;/span&gt;)&amp;amp;y;i;i=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;y)
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(d[x][i|st[x]]!=-&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;d[x][(y-i)|st[x]]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;                         up(d[x][y],d[x][i|st[x]]+d[x][(y-i)|&lt;span&gt;st[x]]);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(d[x][y]!=-&lt;span&gt;1&lt;/span&gt;) Q.push(x*&lt;span&gt;1000&lt;/span&gt;+y),&lt;span&gt;in&lt;/span&gt;[x][y]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;            spfa();
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;nn;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(d[i][j]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;                    up(dp[j],d[i][j]);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; num=&lt;span&gt;0&lt;/span&gt;,cost=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;nn;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(check(i)){
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=(i-&lt;span&gt;1&lt;/span&gt;)&amp;amp;i;j;j=(j-&lt;span&gt;1&lt;/span&gt;)&amp;amp;&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(check(j)&amp;amp;&amp;amp;check(i-j)&amp;amp;&amp;amp;dp[j]!=-&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;dp[i-j]!=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;                         up(dp[i],dp[j]+dp[i-&lt;span&gt;j]);
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; t=&lt;span&gt;cnt(i);
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(dp[i]!=-&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;(t&amp;gt;num||(t==num&amp;amp;&amp;amp;dp[i]&amp;lt;&lt;span&gt;cost)))
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;                     num=t,cost=&lt;span&gt;dp[i];
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,num+&lt;span&gt;ans,cost);
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 09 Oct 2017 14:54:00 +0000</pubDate>
<dc:creator>Angel_Kitty</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ECJTUACM-873284962/p/7643445.html</dc:identifier>
</item>
<item>
<title>云计算---OpenStack Neutron详解 - 姚红</title>
<link>http://www.cnblogs.com/yaohong/p/7643424.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaohong/p/7643424.html</guid>
<description>&lt;h2&gt;简介:&lt;/h2&gt;
&lt;p&gt;neutron是openstack核心项目之一，提供云计算环境下的虚拟网络功能&lt;/p&gt;
&lt;p&gt;OpenStack网络（neutron）管理OpenStack环境中&lt;span&gt;所有虚拟网络基础设施&lt;/span&gt;（VNI），&lt;span&gt;物理网络基础设施&lt;span&gt;（PNI）的&lt;span&gt;接入层&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;网络结构：&lt;/h2&gt;
&lt;p class=&quot;p0&quot;&gt;Neutron网络结构图，管理员创建和管理Neutron外部网络，是租户虚拟机与互联网信息交互的桥梁。更具体的，外部网络会分出一个子网，它是一组在互联网上可寻址的IP地址。一般情况下，外部网络只有一个（neutron是支持多个外部网络的），且由管理员创建。租户虚拟机创建和管理租户网络，每个网络可以根据需要划分成多个子网。诸多子网通过路由器与Neutron外部网络(图中具体是子网A)连接。路由器的gateway网关端连接外部网络的子网，interfaces接口端有多个，连接租户网络的子网。路由器及interface接口端连接的网络都是由租户根据需要自助创建，管理者只创建和管理Neutron外部网络部分。&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;总结来看，创建一个Neutron网络的过程如下：&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;       1 、首先管理员拿到一组可以在互联网上寻址的IP地址，并且创建一个外部网络和子网&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;       2、 租户创建一个网络和子网&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;       3、 租户创建一个路由器并且连接租户子网和外部网络&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;       4、 租户创建虚拟机&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;      &lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009224559824-1526517172.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;网络类型：&lt;/h2&gt;
&lt;p&gt;　　1：管理网络---用于 OpenStack 各组件之间的内部通信。&lt;/p&gt;
&lt;p&gt;　　2：数据网络---用于云部署中虚拟数据之间的通信。&lt;/p&gt;
&lt;p&gt;　　3：外部网络---公共网络，外部或 internet 可以访问的网络。&lt;/p&gt;
&lt;p&gt;　　4：API 网络---暴露所有的 OpenStack APIs,包括 OpenStack 网络 API 给租户们。 &lt;/p&gt;
&lt;p&gt;    　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009204323527-1439597966.png&quot; alt=&quot;&quot; width=&quot;567&quot; height=&quot;387&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; 网络模式：&lt;/h2&gt;
&lt;p&gt;　　　　1：Flat模式---网桥模式，所有的都需要手工配置，属于平面网络，所以实例属于同一网络&lt;/p&gt;
&lt;p&gt;　　　　2：Flat DHCP模式---网桥模式，在网关处单独取了一个DHCP的进程，可以辅助用户进行网络配置&lt;/p&gt;
&lt;p&gt;　　　　3：VLAN模式---为每个不同的租户设置了不同的虚拟子网，在这个虚拟子网中，用户可以有自己的ip&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;    详解：&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1：Flat模式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　　　　　1）指定一个子网，规定虚拟机能使用的ip范围，也就是一个ip池（分配ip不会超过这个范围，也就是配置里面的fixed_range，比如10.0.0.1/27，那么可用ip就有32 个）；&lt;/p&gt;
&lt;p&gt;　　　　　　2）创建实例时，从有效ip地址池接取一个IP，为虚拟机实例分配，然后在虚拟机启动时候注入虚拟机镜像（文件系统）；&lt;/p&gt;
&lt;p&gt;　　　　　　3）必须手动配置好网桥（br100），所有的系统实例都是和同一个网桥连接；网桥与连到网桥的实例组成一个虚拟网络，nova-network所在的节点作为默认网关。&lt;/p&gt;
&lt;p&gt;　　　　　　　　比如flat_interface=eth1;eth1的ip为10.0.0.1，其它网络ip在10.0.0.1/27内。flat interface--&amp;gt;br100--&amp;gt;flat network&lt;/p&gt;
&lt;p&gt;　　　　　　4）此后，网络控制器（nova-network节点）对虚拟机实例进行NAT转换，实现与外部的通信。&lt;/p&gt;
&lt;p&gt;　　　　　　注意：目前好像配置注入只能够对Linux类型的操作系统实例正常工作，网络配置保存在/etc/network/interfaces文件。&lt;/p&gt;
&lt;p&gt;                                  &lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009224349715-1428046779.png&quot; alt=&quot;&quot; width=&quot;425&quot; height=&quot;391&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2：&lt;strong&gt;Flat DHCP模式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　　　　　与Flat模式一样，从ip池取出ip分配给虚拟机实例，所有的实例都在计算节点中和一个网桥相关。不过，在这个模式里，控制节点做了更多一些的配置，尝试和以太网设备(默认为eth0)建立网桥，&lt;/p&gt;
&lt;p&gt;　　　　　　通过dhcp自动为实例分配flat网络的固定ip，可以回收释放ip。&lt;/p&gt;
&lt;p&gt;　　　　　　1）网络控制器（运行nova-network服务的节点）运行dusmasq作为DHCP服务器监听这个网桥；&lt;/p&gt;
&lt;p&gt;　　　　　　2）实例做一次dhcp discover操作，发送请求；&lt;/p&gt;
&lt;p&gt;　　　　　　3）网络控制器把从一个指定的子网中获得的IP地址响应给虚拟机实例；&lt;/p&gt;
&lt;p&gt;　　　　　　4）实例通过网络控制器与外部实现互相访问。&lt;/p&gt;
&lt;p&gt;                                    &lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009224419996-1012340113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;3：&lt;strong&gt;VLAN网络模式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　　　　　OpenStack的默认网络管理模式，没有设置&lt;span class=&quot;pun&quot;&gt;--&lt;span class=&quot;pln&quot;&gt;network_manager&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;pln&quot;&gt;nova&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;network&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;manager&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;typ&quot;&gt;FlatDHCPManager或者FlatManager的时候默认为vlan。为了实现多台机器的安装，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;typ&quot;&gt;　　　　　　VLAN网络模式需要一个支持VLAN标签(IEEE 802.1Q)的交换机（switch）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　在这个模式里，为每个项目创建了VLAN和网桥。所有属于某个项目的实例都会连接到同一个VLAN，必要的时候会创建Linux网桥和VLAN。&lt;/p&gt;
&lt;p&gt;　　　　　　每个项目获得一些只能从VLAN内部访问的私有IP地址，即私网网段。每个项目拥有它自己的VLAN，Linux网桥还有子网。被网络管理员所指定的子网都会在需要的时候动态地分配给一个项目。&lt;/p&gt;
&lt;p&gt;　　　　　　1）网络控制器上的DHCP服务器为所有的VLAN所启动，从被分配到项目的子网中获取IP地址并传输到虚拟机实例。&lt;/p&gt;
&lt;p&gt;　　　　　　2）为了实现用户获得项目的实例，访问私网网段，需要创建一个特殊的VPN实例（代码名为cloudpipe，用了创建整数、key和vpn访问实例）。&lt;/p&gt;
&lt;p&gt;　　　　　　3）计算节点为用户生成了证明书和key，使得用户可以访问VPN，同时计算节点自动启动VPN。&lt;/p&gt;
&lt;p&gt;　　　　　　4）vpn访问。&lt;/p&gt;
&lt;p&gt;                                              &lt;img src=&quot;http://images2017.cnblogs.com/blog/1024482/201710/1024482-20171009224223371-443117131.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;3：Flat与vLAN的比较&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　　　　　在两种Flat模式里，网络控制器扮演默认网关的角色，实例都被分配了公共的IP地址（扁平式结构，都在一个桥接网络里）。&lt;/p&gt;
&lt;p&gt;　　　　　　vLAN模式功能丰富，很适合提供给企业内部部署使用。但是，需要支持vLAN的switches来连接，而且相对比较复杂，在小范围实验中常采用FlatDHCP模式。&lt;/p&gt;

</description>
<pubDate>Mon, 09 Oct 2017 14:48:00 +0000</pubDate>
<dc:creator>姚红</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaohong/p/7643424.html</dc:identifier>
</item>
<item>
<title>机器学习之概率与统计（三）- 极大似然估计 - tanv</title>
<link>http://www.cnblogs.com/tan-v/p/7643166.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tan-v/p/7643166.html</guid>
<description>&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;     目录&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;一、参数估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;二、极大释然估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．似然函数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．极大似然估计（MLE&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．log&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;似然函数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．损失函数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．求极大似然估计的一般步骤&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;三、常见分布的参数估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．高斯分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Bernoulli&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;二项分布（Binomia&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;多项分布（Multinoull&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;四、机器学习模型的参数估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;回归&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．线性回归&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;2.1&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;线性回归的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．Logistic&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;回归&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;3.1 Logistic&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;回归的&lt;span lang=&quot;EN-US&quot;&gt;极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;朴素贝叶斯(Naive Bayes Classifier, NBC)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;定义&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span&gt;4.2&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;朴素贝叶斯的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;五、估计的评价&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;估计量的评价标准&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;偏差&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;方差分解&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;监督学习模型的偏差&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;方差分解&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;11&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;估计的抽样分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;11&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;参数&lt;/span&gt;&lt;/span&gt;Bootstrap&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.2&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;非参数&lt;/span&gt;&lt;/span&gt;Bootstrap&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;12&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;　　参数估计，即估计模型的参数：给定模型&lt;span lang=&quot;EN-US&quot;&gt;p(&lt;strong&gt;x&lt;/strong&gt;|&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;span&gt;和数据&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;，选择与数据最匹配的参数&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　　常用估计模型参数的方法：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;　　(1)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;矩方法，比如一阶矩，二阶矩，&lt;span lang=&quot;EN-US&quot;&gt;…&lt;/span&gt;，&lt;span lang=&quot;EN-US&quot;&gt;K&lt;/span&gt;阶矩；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;　　(2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;极大释然估计：频率学派&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;　　(3)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;贝叶斯估计：贝叶斯学派&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．似然函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;似然（&lt;span lang=&quot;EN-US&quot;&gt;likelihood&lt;/span&gt;，可能性的意思），描述的是事件发生可能性的大小。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;似然函数的定义：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;设数据&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;D=X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;,…,X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;N&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;为独立同分布（&lt;span lang=&quot;EN-US&quot;&gt;IID&lt;/span&gt;），其概率密度函数（&lt;span lang=&quot;EN-US&quot;&gt;pdf&lt;/span&gt;）为&lt;span lang=&quot;EN-US&quot;&gt;p(&lt;strong&gt;x&lt;/strong&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则似然函数定义为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214228793-33578755.png&quot;&gt;&lt;img title=&quot;clip_image001&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214229246-175657021.png&quot; alt=&quot;clip_image001&quot; width=&quot;268&quot; height=&quot;65&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;即为在给定数据&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;&lt;/strong&gt;的情况下，参数为&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的函数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．极大似然估计（&lt;span lang=&quot;EN-US&quot;&gt;MLE&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;定义：使得似然函数&lt;span lang=&quot;EN-US&quot;&gt;L(&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;span&gt;最大的&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的估计：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt; &lt;span&gt; &lt;/span&gt; &lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214229465-131927398.png&quot;&gt;&lt;img title=&quot;clip_image002&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214229668-859172599.png&quot; alt=&quot;clip_image002&quot; width=&quot;243&quot; height=&quot;71&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;定义：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214229934-2000770523.png&quot;&gt;&lt;img title=&quot;clip_image003&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214230246-130040136.png&quot; alt=&quot;clip_image003&quot; width=&quot;192&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214230512-395874002.png&quot;&gt;&lt;img title=&quot;clip_image004&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214230871-221772368.png&quot; alt=&quot;clip_image004&quot; width=&quot;191&quot; height=&quot;60&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;性质：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;它和似然函数在相同的位置取极大值&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;在不引起混淆的情况下，有时记&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然函数为似然函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;相差常数倍也不影响似然函数取极大值的位置，因此似然函数中的常数项也可以抛弃&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（4）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;在分类中&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然有时亦称为交叉熵&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(cross-entropy)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．损失函数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;损失函数 &lt;span lang=&quot;EN-US&quot;&gt;=&lt;/span&gt; 负&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然函数，即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;损失函数 &lt;span lang=&quot;EN-US&quot;&gt;= - log p(&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;|D)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．求极大似然估计的一般步骤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;）选择模型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;）得到密度函数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;p(x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;）求似然函数&lt;span lang=&quot;EN-US&quot;&gt;L =&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Ʃ&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;log.p(x)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;4&lt;/span&gt;）对似然函数求极值（求导），得到参数估计&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;高斯分布&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;,…,X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;N&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;~ N (μ, δ&lt;/span&gt;&lt;sup&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，参数为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;μ, δ&lt;/span&gt;&lt;sup&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;，则高斯分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231059-768347394.png&quot;&gt;&lt;img title=&quot;clip_image005&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231293-100690424.png&quot; alt=&quot;clip_image005&quot; width=&quot;621&quot; height=&quot;73&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;的似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231512-1829102701.png&quot;&gt;&lt;img title=&quot;clip_image006&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231699-680366730.png&quot; alt=&quot;clip_image006&quot; width=&quot;563&quot; height=&quot;229&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;样本均值：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214231918-1428906291.png&quot;&gt;&lt;img title=&quot;clip_image007&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214232105-1009416432.png&quot; alt=&quot;clip_image007&quot; width=&quot;142&quot; height=&quot;76&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;样本方差：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214232324-1966061548.png&quot;&gt;&lt;img title=&quot;clip_image008&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214232621-1123394201.png&quot; alt=&quot;clip_image008&quot; width=&quot;243&quot; height=&quot;74&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;    　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;因为有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;               &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214232871-1530789014.png&quot;&gt;&lt;img title=&quot;clip_image009&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214233324-1466927999.png&quot; alt=&quot;clip_image009&quot; width=&quot;559&quot; height=&quot;70&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;高斯分布的似然函数化简为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214233715-960168608.png&quot;&gt;&lt;img title=&quot;clip_image010&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234043-1383323512.png&quot; alt=&quot;clip_image010&quot; width=&quot;550&quot; height=&quot;73&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;求最大值（求梯度，解方程）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234293-2076499281.png&quot;&gt;&lt;img title=&quot;clip_image011&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234512-2051494385.png&quot; alt=&quot;clip_image011&quot; width=&quot;311&quot; height=&quot;151&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;　　得到极值点（一阶导数为&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234699-320853089.png&quot;&gt;&lt;img title=&quot;clip_image012[4]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214234902-1773362397.png&quot; alt=&quot;clip_image012[4]&quot; width=&quot;422&quot; height=&quot;148&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;     说明，使用样本的均值和方差作为高斯分布的参数估计，是极大似然的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;2．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分布的密度函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235090-895707257.png&quot;&gt;&lt;img title=&quot;clip_image013&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235324-1640487760.png&quot; alt=&quot;clip_image013&quot; width=&quot;282&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235527-1258940892.png&quot;&gt;&lt;img title=&quot;clip_image014&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235730-1341080070.png&quot; alt=&quot;clip_image014&quot; width=&quot;594&quot; height=&quot;158&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;为试验结果为&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;的次数，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sub&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;为试验结果为&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;的次数，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214235902-261273663.png&quot;&gt;&lt;img title=&quot;clip_image015&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236121-2130630508.png&quot; alt=&quot;clip_image015&quot; width=&quot;178&quot; height=&quot;146&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;求极大似然有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236309-682651014.png&quot;&gt;&lt;img title=&quot;clip_image016&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236496-698867589.png&quot; alt=&quot;clip_image016&quot; width=&quot;535&quot; height=&quot;78&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即样本实验结果为&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;的比率，是&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布的参数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的极大释然估计。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;3．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;二项分布（&lt;span lang=&quot;EN-US&quot;&gt;Binomia&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Binomia&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分布的密度函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236730-1867938549.png&quot;&gt;&lt;img title=&quot;clip_image017&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214236934-402153994.png&quot; alt=&quot;clip_image017&quot; width=&quot;352&quot; height=&quot;89&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214237121-369330338.png&quot;&gt;&lt;img title=&quot;clip_image018&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214237309-1919436714.png&quot; alt=&quot;clip_image018&quot; width=&quot;430&quot; height=&quot;160&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其极大释然估计和&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布一样：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;求极大似然有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214237496-1819535251.png&quot;&gt;&lt;img title=&quot;clip_image016[1]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214253605-1404196741.png&quot; alt=&quot;clip_image016[1]&quot; width=&quot;535&quot; height=&quot;78&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即样本实验结果为&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;的比率，是 &lt;span lang=&quot;EN-US&quot;&gt;Binomia&lt;/span&gt;分布的参数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的极大释然估计。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;4．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;多项分布（&lt;span lang=&quot;EN-US&quot;&gt;Multinoull&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Multinoull&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分布的密度函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214253996-285238575.png&quot;&gt;&lt;img title=&quot;clip_image019&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214254355-1393798162.png&quot; alt=&quot;clip_image019&quot; width=&quot;495&quot; height=&quot;90&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其似然函数为（其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sub&gt;&lt;span&gt;K&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;表示&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;次试验中出现&lt;span lang=&quot;EN-US&quot;&gt;k&lt;/span&gt;的次数）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214254715-983586747.png&quot;&gt;&lt;img title=&quot;clip_image020&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214255043-1296320017.png&quot; alt=&quot;clip_image020&quot; width=&quot;366&quot; height=&quot;83&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;约束条件为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214255449-2078292665.png&quot;&gt;&lt;img title=&quot;clip_image021&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214256168-1628156031.png&quot; alt=&quot;clip_image021&quot; width=&quot;99&quot; height=&quot;63&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;采用拉格朗日乘子法求极值：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214256559-1433477019.png&quot;&gt;&lt;img title=&quot;clip_image022&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214256934-138982292.png&quot; alt=&quot;clip_image022&quot; width=&quot;369&quot; height=&quot;76&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;分别对λ和θ&lt;/span&gt;&lt;sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;求偏导并令其等于&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214257277-686585986.png&quot;&gt;&lt;img title=&quot;clip_image023&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214257684-683487492.png&quot; alt=&quot;clip_image023&quot; width=&quot;601&quot; height=&quot;146&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即为θ的最大释然参数估计。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;回归&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;正态分布可用于回归系统噪声建模&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;回归是监督学习问题，是输入到输出的映射的学习。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;回归问题的模型：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214258230-1395595123.png&quot;&gt;&lt;img title=&quot;clip_image024&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214258590-1051831832.png&quot; alt=&quot;clip_image024&quot; width=&quot;191&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设残差服从正态分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214258793-1043560598.png&quot;&gt;&lt;img title=&quot;clip_image025&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214258965-222015851.png&quot; alt=&quot;clip_image025&quot; width=&quot;162&quot; height=&quot;48&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;因此，回归问题的模型可以记为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214259152-958397199.png&quot;&gt;&lt;img title=&quot;clip_image026&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214259418-1937524994.png&quot; alt=&quot;clip_image026&quot; width=&quot;288&quot; height=&quot;50&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt; &lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;回归即预测其输出：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214259730-510722610.png&quot;&gt;&lt;img title=&quot;clip_image027&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214259902-1205436565.png&quot; alt=&quot;clip_image027&quot; width=&quot;129&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．线性回归&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;线性回归：输入与输出呈线性关系。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;相信回归的模型：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214300277-1575567142.png&quot;&gt;&lt;img title=&quot;clip_image028&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214300512-261879635.png&quot; alt=&quot;clip_image028&quot; width=&quot;213&quot; height=&quot;160&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214300934-2141197816.png&quot;&gt;&lt;img title=&quot;clip_image029&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214301309-1735705920.png&quot; alt=&quot;clip_image029&quot; width=&quot;269&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;W&lt;/span&gt;&lt;sub&gt;&lt;span&gt;0&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;是截距，&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;W&lt;/span&gt;&lt;/strong&gt;为权重向量，&lt;span lang=&quot;EN-US&quot;&gt;ε&lt;/span&gt;为预测值和真值之间的残差。模型的参数为&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;（&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;W&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;, δ&lt;/span&gt;&lt;sup&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1 &lt;/span&gt;&lt;span&gt;&lt;span&gt;线性回归的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1.1 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;线性回归的似然函数&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;线性回归的似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214301699-149380031.png&quot;&gt;&lt;img title=&quot;clip_image030&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214301965-1810476946.png&quot; alt=&quot;clip_image030&quot; width=&quot;586&quot; height=&quot;221&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中，&lt;span lang=&quot;EN-US&quot;&gt;RSS&lt;/span&gt;表示残差平方和&lt;span lang=&quot;EN-US&quot;&gt;(residual sum of squares)&lt;/span&gt;，即残差向量的&lt;span lang=&quot;EN-US&quot;&gt;L2&lt;/span&gt;模：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214302215-1839397149.png&quot;&gt;&lt;img title=&quot;clip_image031&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214302449-2014258970.png&quot; alt=&quot;clip_image031&quot; width=&quot;470&quot; height=&quot;62&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;注：平均平方误差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(MSE)&lt;span&gt; &lt;/span&gt; = RSS/N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h4 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1.2 &lt;/span&gt;&lt;span&gt;&lt;span&gt;负&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;似然函数求参数估计&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;极大似然等价为极小负&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然损失&lt;span lang=&quot;EN-US&quot;&gt;(negative log likelihood&lt;/span&gt;，&lt;span lang=&quot;EN-US&quot;&gt;NLL)&lt;/span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214302668-1053131590.png&quot;&gt;&lt;img title=&quot;clip_image032&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214302934-1460044527.png&quot; alt=&quot;clip_image032&quot; width=&quot;616&quot; height=&quot;150&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;只取与&lt;span lang=&quot;EN-US&quot;&gt;w&lt;/span&gt;有关的项，得到：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214303184-598841890.png&quot;&gt;&lt;img title=&quot;clip_image033&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214303418-755815926.png&quot; alt=&quot;clip_image033&quot; width=&quot;444&quot; height=&quot;54&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;因为有矩阵求导：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214303684-614612168.png&quot;&gt;&lt;img title=&quot;clip_image034&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214303980-738008719.png&quot; alt=&quot;clip_image034&quot; width=&quot;257&quot; height=&quot;138&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;所以&lt;span lang=&quot;EN-US&quot;&gt;NLL&lt;/span&gt;求导有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214304184-1700413218.png&quot;&gt;&lt;img title=&quot;clip_image035&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214304449-1199153885.png&quot; alt=&quot;clip_image035&quot; width=&quot;425&quot; height=&quot;73&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;求解得到：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214304762-1469760570.png&quot;&gt;&lt;img title=&quot;clip_image036[4]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214305012-416025163.png&quot; alt=&quot;clip_image036[4]&quot; width=&quot;241&quot; height=&quot;41&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即为&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;W&lt;/span&gt;&lt;/strong&gt;的极大似然估计，把其代入&lt;span lang=&quot;EN-US&quot;&gt;NLL&lt;/span&gt;，则有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214305340-1710232410.png&quot;&gt;&lt;img title=&quot;clip_image037&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214305652-2054779250.png&quot; alt=&quot;clip_image037&quot; width=&quot;656&quot; height=&quot;69&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;求导有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214305965-333425291.png&quot;&gt;&lt;img title=&quot;clip_image038&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214306199-1112959219.png&quot; alt=&quot;clip_image038&quot; width=&quot;565&quot; height=&quot;72&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;求解得：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214306449-464595241.png&quot;&gt;&lt;img title=&quot;clip_image039&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214307199-1713966089.png&quot; alt=&quot;clip_image039&quot; width=&quot;580&quot; height=&quot;72&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;以上便是线性回归参数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;（&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;W&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;, δ&lt;/span&gt;&lt;sup&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;）的极大似然估计。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h4 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1.3 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;计算机求解线性回归的解极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）当样本数目&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;较小时，可采用&lt;span lang=&quot;EN-US&quot;&gt;OLS&lt;/span&gt;结论，用矩阵&lt;span lang=&quot;EN-US&quot;&gt;QR&lt;/span&gt;分解分解得到优化解。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）当样本数目&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;较大时，可采用随机梯度下降方法优化求解：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;目标函数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214307496-1190032193.png&quot;&gt;&lt;img title=&quot;clip_image040&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214307715-1898880836.png&quot; alt=&quot;clip_image040&quot; width=&quot;506&quot; height=&quot;84&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;梯度下降法步骤：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）给定初值&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;sup&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;ii)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;更新&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;w&lt;/span&gt;&lt;/strong&gt;，使得&lt;span lang=&quot;EN-US&quot;&gt;J(&lt;strong&gt;W&lt;/strong&gt;)&lt;/span&gt;越来越小&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214307996-1034900163.png&quot;&gt;&lt;img title=&quot;clip_image041&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214308230-751528066.png&quot; alt=&quot;clip_image041&quot; width=&quot;383&quot; height=&quot;145&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;iii) &lt;strong&gt;w&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的各维同时更新&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214308480-720287760.png&quot;&gt;&lt;img title=&quot;clip_image042&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214308715-920560574.png&quot; alt=&quot;clip_image042&quot; width=&quot;213&quot; height=&quot;52&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;iv)&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;直到收敛到某个&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;w&lt;/span&gt;&lt;/strong&gt;值，使得&lt;span lang=&quot;EN-US&quot;&gt;J(&lt;strong&gt;W&lt;/strong&gt;)&lt;/span&gt;最小&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;span lang=&quot;EN-US&quot;&gt;α&lt;/span&gt;称为学习率，控制下降速度的大小。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．&lt;span lang=&quot;EN-US&quot;&gt;Logistic&lt;/span&gt;回归&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;）&lt;span lang=&quot;EN-US&quot;&gt;Logistic&lt;/span&gt;回归是线性回归的扩展，用于分类任务（&lt;span lang=&quot;EN-US&quot;&gt;0, 1&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;）分类目标为二值变量，因此服从&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt; &lt;span&gt; &lt;/span&gt;&lt;span&gt;  &lt;/span&gt; P(y|θ)&lt;span&gt; &lt;/span&gt; =&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214308934-1170611262.png&quot;&gt;&lt;img title=&quot;clip_image044&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214309168-963412220.png&quot; alt=&quot;clip_image044&quot; width=&quot;76&quot; height=&quot;24&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;为类别输入（&lt;span lang=&quot;EN-US&quot;&gt;0,1&lt;/span&gt;）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;假设输入为&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;的线性组合，即输入为&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;的函数&lt;span&gt;μ&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(x)&lt;/span&gt;，则&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分布的密度函数可以写为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt; P(y|&lt;/span&gt;&lt;span&gt;μ&lt;span lang=&quot;EN-US&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;)&lt;span&gt; &lt;/span&gt; =&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214309387-2025803618.png&quot;&gt;&lt;img title=&quot;clip_image046&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214309621-660886721.png&quot; alt=&quot;clip_image046&quot; width=&quot;124&quot; height=&quot;24&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中：&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;≤μ&lt;span lang=&quot;EN-US&quot;&gt;(x)&lt;/span&gt;≤&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;在&lt;span lang=&quot;EN-US&quot;&gt;Logistic&lt;/span&gt;回归中，输入的&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;的函数&lt;span lang=&quot;EN-US&quot;&gt;(&lt;/span&gt;概率密度函数&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;μ(x) = &lt;span&gt;&lt;span&gt;&lt;span&gt;sigm&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;(&lt;/span&gt;&lt;strong&gt;&lt;span&gt;w&lt;/span&gt;&lt;/strong&gt;&lt;sup&gt;&lt;span&gt;T&lt;/span&gt;&lt;/sup&gt;&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中&lt;span lang=&quot;EN-US&quot;&gt;sigm()&lt;/span&gt;为&lt;span lang=&quot;EN-US&quot;&gt;sigmoid&lt;/span&gt;函数，或&lt;span lang=&quot;EN-US&quot;&gt;logistic&lt;/span&gt;函数：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214309855-283739979.png&quot;&gt;&lt;img title=&quot;clip_image047&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214310105-1458411893.png&quot; alt=&quot;clip_image047&quot; width=&quot;322&quot; height=&quot;61&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（4）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;logistic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;回归的概率密度函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214310324-595061672.png&quot;&gt;&lt;img title=&quot;clip_image048&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214310543-851347737.png&quot; alt=&quot;clip_image048&quot; width=&quot;326&quot; height=&quot;38&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.1 Logistic&lt;/span&gt;&lt;span&gt;&lt;span&gt;回归的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(1)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;负&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;似然函数求参数估计&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Logistic&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;回归的似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214310840-333767294.png&quot;&gt;&lt;img title=&quot;clip_image049&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214311074-1977824479.png&quot; alt=&quot;clip_image049&quot; width=&quot;475&quot; height=&quot;119&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;μ&lt;/span&gt;&lt;sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;μ&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;) = sigm(&lt;/span&gt;&lt;strong&gt;&lt;span&gt;w&lt;/span&gt;&lt;/strong&gt;&lt;sup&gt;&lt;span&gt;T&lt;/span&gt;&lt;/sup&gt;&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt; y&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;分类标签（&lt;span lang=&quot;EN-US&quot;&gt;0,1&lt;/span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;梯度下降法求解&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;对似然函数进行求导&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214311293-1709943933.png&quot;&gt;&lt;img title=&quot;clip_image050&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214311527-580161076.png&quot; alt=&quot;clip_image050&quot; width=&quot;635&quot; height=&quot;367&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214311762-741939104.png&quot;&gt;&lt;img title=&quot;clip_image051&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312012-97218087.png&quot; alt=&quot;clip_image051&quot; width=&quot;771&quot; height=&quot;319&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;以上用到的矩阵求导：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312262-31310798.png&quot;&gt;&lt;img title=&quot;clip_image052&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312465-1574764187.png&quot; alt=&quot;clip_image052&quot; width=&quot;260&quot; height=&quot;57&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;得到梯度函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312699-2014412721.png&quot;&gt;&lt;img title=&quot;clip_image053&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214312949-1364836533.png&quot; alt=&quot;clip_image053&quot; width=&quot;259&quot; height=&quot;68&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;使用梯度进行迭代&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214313168-290028151.png&quot;&gt;&lt;img title=&quot;clip_image054&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214313387-1460845065.png&quot; alt=&quot;clip_image054&quot; width=&quot;362&quot; height=&quot;169&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214313605-118862499.png&quot;&gt;&lt;img title=&quot;clip_image055&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214313824-495804474.png&quot; alt=&quot;clip_image055&quot; width=&quot;375&quot; height=&quot;177&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214314027-1821538874.png&quot;&gt;&lt;img title=&quot;clip_image056&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214314230-1697824850.png&quot; alt=&quot;clip_image056&quot; width=&quot;172&quot; height=&quot;66&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;牛顿法求解&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;牛顿法也叫牛顿&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;拉夫逊（&lt;span lang=&quot;EN-US&quot;&gt;Newton-Raphson&lt;/span&gt;）方法，也叫二阶梯度下降法。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;原理：使用函数&lt;span lang=&quot;EN-US&quot;&gt;f(x)&lt;/span&gt;的泰勒级数的前面几项来寻找方程&lt;span lang=&quot;EN-US&quot;&gt;f(x)=0&lt;/span&gt;的根&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;步骤：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;i)&lt;/span&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;将导数&lt;span lang=&quot;EN-US&quot;&gt;g(&lt;strong&gt;w&lt;/strong&gt;)&lt;/span&gt;在&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;w&lt;/span&gt;&lt;sup&gt;&lt;span&gt;t&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;处进行&lt;span lang=&quot;EN-US&quot;&gt;Taylor&lt;/span&gt;展开&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214314918-545626882.png&quot;&gt;&lt;img title=&quot;clip_image057&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214315137-613694111.png&quot; alt=&quot;clip_image057&quot; width=&quot;645&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;ii)&lt;/span&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;由上式得到：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214315449-141716266.png&quot;&gt;&lt;img title=&quot;clip_image058&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214315684-713415670.png&quot; alt=&quot;clip_image058&quot; width=&quot;321&quot; height=&quot;55&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;iii)&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;迭代式为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214315934-137851477.png&quot;&gt;&lt;img title=&quot;clip_image059&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214316199-1661567135.png&quot; alt=&quot;clip_image059&quot; width=&quot;343&quot; height=&quot;51&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;4.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;朴素贝叶斯&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(Naive Bayes Classifier, NBC)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.1&lt;/span&gt;&lt;span&gt;&lt;span&gt;定义&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;假设共有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C&lt;/span&gt;&lt;span&gt;个类别&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;&lt;span&gt;∈&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(1,2,…,C)&lt;/span&gt;&lt;span&gt;，每个类别有特征&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;=(x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;,x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;,…x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;),&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;则朴素贝叶斯为假设各维特征在给定类别标签的情况下条件独立：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214316590-1211129379.png&quot;&gt;&lt;img title=&quot;clip_image060&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214316918-1997021201.png&quot; alt=&quot;clip_image060&quot; width=&quot;393&quot; height=&quot;99&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;概率密度函数：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214317324-728998815.png&quot;&gt;&lt;img title=&quot;clip_image061&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214317590-2143997503.png&quot; alt=&quot;clip_image061&quot; width=&quot;352&quot; height=&quot;173&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，π、θ分别为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的先验分布和类条件分布的参数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.2&lt;/span&gt;&lt;span&gt;&lt;span&gt;朴素贝叶斯的极大似然估计&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;）似然函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214317777-2006724509.png&quot;&gt;&lt;img title=&quot;clip_image062&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214317980-416323865.png&quot; alt=&quot;clip_image062&quot; width=&quot;717&quot; height=&quot;91&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sub&gt;&lt;span&gt;c&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;为&lt;span lang=&quot;EN-US&quot;&gt;y=c&lt;/span&gt;的样本数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果服从&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214318246-1161607384.png&quot;&gt;&lt;img title=&quot;clip_image063&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214318480-1081190817.png&quot; alt=&quot;clip_image063&quot; width=&quot;255&quot; height=&quot;59&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则参数估计：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214318730-2105333796.png&quot;&gt;&lt;img title=&quot;clip_image064&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214318980-183684268.png&quot; alt=&quot;clip_image064&quot; width=&quot;115&quot; height=&quot;78&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214319262-2024121413.png&quot;&gt;&lt;img title=&quot;clip_image065&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214319574-595340807.png&quot; alt=&quot;clip_image065&quot; width=&quot;627&quot; height=&quot;65&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果服从多值分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214319887-539130317.png&quot;&gt;&lt;img title=&quot;clip_image066&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214320137-1409264545.png&quot; alt=&quot;clip_image066&quot; width=&quot;213&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;则参数估计：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214320402-1323616812.png&quot;&gt;&lt;img title=&quot;clip_image067&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214320668-1176784685.png&quot; alt=&quot;clip_image067&quot; width=&quot;256&quot; height=&quot;81&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214320965-834081128.png&quot;&gt;&lt;img title=&quot;clip_image068&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214321293-1244340058.png&quot; alt=&quot;clip_image068&quot; width=&quot;345&quot; height=&quot;54&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（4）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果服从正泰分布&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214321590-1761255775.png&quot;&gt;&lt;img title=&quot;clip_image069&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214321918-816218160.png&quot; alt=&quot;clip_image069&quot; width=&quot;261&quot; height=&quot;60&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则参数估计：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214322152-1037325651.png&quot;&gt;&lt;img title=&quot;clip_image070&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214322418-1099594372.png&quot; alt=&quot;clip_image070&quot; width=&quot;309&quot; height=&quot;218&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（5）&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;使用朴素贝叶斯进行预测&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;将给定数据条件&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;换成参数的&lt;span lang=&quot;EN-US&quot;&gt;MLE&lt;/span&gt;插入，得到：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214322652-409339990.png&quot;&gt;&lt;img title=&quot;clip_image071&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214322855-1739688309.png&quot; alt=&quot;clip_image071&quot; width=&quot;544&quot; height=&quot;81&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;例如&lt;span lang=&quot;EN-US&quot;&gt;Bernoulli&lt;/span&gt;分布的预测：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214323043-1930217042.png&quot;&gt;&lt;img title=&quot;clip_image072&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214323277-1889067048.png&quot; alt=&quot;clip_image072&quot; width=&quot;340&quot; height=&quot;171&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;估计量的评价标准&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;一个好的估计具有的性质：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;无偏性：估计量的期望等于真值的期望：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即估计的偏差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(bias)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214323543-1763087500.png&quot;&gt;&lt;img title=&quot;clip_image073&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214323887-2057338072.png&quot; alt=&quot;clip_image073&quot; width=&quot;234&quot; height=&quot;56&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;等于&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;0。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;相容性&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;若：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214324137-2144465178.png&quot;&gt;&lt;img title=&quot;clip_image074&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214324512-916609638.png&quot; alt=&quot;clip_image074&quot; width=&quot;109&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则该估计是相容&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(consistent)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;有效性&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;无偏估计中，方差较小的一个更有效（收敛速度更快）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;偏差&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;方差分解&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;点估计的性能通过均方误差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(MSE, mean squared error)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;来评价：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214324762-992177958.png&quot;&gt;&lt;img title=&quot;clip_image075&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214325043-200649088.png&quot; alt=&quot;clip_image075&quot; width=&quot;187&quot; height=&quot;54&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;可分解为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214325277-231928485.png&quot;&gt;&lt;img title=&quot;clip_image076&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214325543-1793630838.png&quot; alt=&quot;clip_image076&quot; width=&quot;240&quot; height=&quot;54&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;估计的偏差为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214325809-1628169081.png&quot;&gt;&lt;img title=&quot;clip_image077&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214326074-334117165.png&quot; alt=&quot;clip_image077&quot; width=&quot;248&quot; height=&quot;57&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;估计的变化程度&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(&lt;/span&gt;&lt;span&gt;精度&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214326324-2051161515.png&quot;&gt;&lt;img title=&quot;clip_image078&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214326574-284664788.png&quot; alt=&quot;clip_image078&quot; width=&quot;48&quot; height=&quot;40&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;bias = 0&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;称其为无偏估计&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;为了使估计的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;MSE&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;小，估计的偏差和方差到要小。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;监督学习模型的偏差&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;方差分解&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;在回归任务中，学习算法&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的平方预测误差期望为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214326855-1425183674.png&quot;&gt;&lt;img title=&quot;clip_image079&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214327121-1244175011.png&quot; alt=&quot;clip_image079&quot; width=&quot;755&quot; height=&quot;467&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;偏差：学习算法的预测的期望与真实结果的偏离程度&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即刻画了学习算法本身的拟合能力。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;方差：同样大小的训练集的变动所导致的学习性能的变化&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即刻画了数据扰动所造成的影响。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;噪声：在当前任务上任何学习算法所能达到的期望泛化误差的下界&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt; &lt;span&gt;即刻画了学习问题本身的&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;难度。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;估计的抽样分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;解决的问题：分布的参数真值未知，无法产生真实的模拟数据。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;如何解决？：估计的抽样分布&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;估计的抽样分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设从真实分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214327340-1520461135.png&quot;&gt;&lt;img title=&quot;clip_image080&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214327543-1451938298.png&quot; alt=&quot;clip_image080&quot; width=&quot;190&quot; height=&quot;56&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;中进行&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;S&lt;/span&gt;&lt;span&gt;次抽样，每次的样本集的大小均为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;N,&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;得到数据集合&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214327730-967915860.png&quot;&gt;&lt;img title=&quot;clip_image081&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214328074-560836117.png&quot; alt=&quot;clip_image081&quot; width=&quot;420&quot; height=&quot;71&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;根据每次抽样得到的数据&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D(s)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，都会得到一个估计：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214328324-1785697001.png&quot;&gt;&lt;img title=&quot;clip_image082&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214328543-626935081.png&quot; alt=&quot;clip_image082&quot; width=&quot;101&quot; height=&quot;41&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;当&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;S -&amp;gt; ∞&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;时，使用估计的参数代替真实的参数，称为估计的抽样分布。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.1 &lt;/span&gt;&lt;span&gt;&lt;span&gt;参数&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bootstrap&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bootstrap&lt;/span&gt;&lt;span&gt;（一种重采样技术），用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214328887-1285908964.png&quot;&gt;&lt;img title=&quot;clip_image084&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214329387-226190665.png&quot; alt=&quot;clip_image084&quot; width=&quot;13&quot; height=&quot;29&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;代替&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214329730-1183862755.png&quot;&gt;&lt;img title=&quot;clip_image086[4]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214329887-1123471270.png&quot; alt=&quot;clip_image086[4]&quot; width=&quot;19&quot; height=&quot;21&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，从分布&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214330105-979049297.png&quot;&gt;&lt;img title=&quot;clip_image088[4]&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171009214330293-381075116.png&quot; alt=&quot;clip_image088[4]&quot; width=&quot;53&quot; height=&quot;32&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;中产生样本。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.2 &lt;/span&gt;&lt;span&gt;&lt;span&gt;非参数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Bootstrap&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;从原始数据中进行&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;&lt;span&gt;次有放回地采样&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;个数据，用经验分布近似真正的分布&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;               - tany 2017年10月9日于杭州&lt;/p&gt;
</description>
<pubDate>Mon, 09 Oct 2017 14:04:00 +0000</pubDate>
<dc:creator>tanv</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tan-v/p/7643166.html</dc:identifier>
</item>
<item>
<title>详谈字符编码[二]代码页是什么 - painterQ</title>
<link>http://www.cnblogs.com/painterQ/p/7642797.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/painterQ/p/7642797.html</guid>
<description>&lt;p&gt;        上一篇关于字符编码的随笔介绍了编码，输入码，机内码，字形码，字形库等概念。除此之外，还有一些其他的概念我们不得不了解，它们已经不属于现在，但是却时常影响着现在。代码页，正是这些有历史感的概念之一。这篇博文带你了解代码页和当前Windows对Unicode和ANSI编码的支持情况，末尾分析了一个乱码的案例，出于某知名软件，你一定不想错过。&lt;/p&gt;
&lt;h2&gt;Windows的默认编码？&lt;/h2&gt;
&lt;p&gt;        偶尔在知乎看到这样的问题：为什么中文Windows选择GBK作为默认编码？其实会有这样的误解也难怪，为什么这么说呢？大家都从控制台的Helloworld开始，后来想要输出中文时自然先想到printf(&quot;你好，世界&quot;);运行发现真的出现了中文，仿佛英文和中文没什么区别，世界很美好的感觉。但学习更多之后发现Windows下的strlen(&quot;你好，世界&quot;)的值竟然是10（严格说是MinGW下使用GBK作源编码时或者使用VS时才是10），第一次感觉到了英文字母与汉字的区别，于是我们去寻找原因，终于得知GBK编码之类的各种编码，也知道了代码页这个令人疑惑的名词。你好世界，世界却是灰色的。&lt;/p&gt;
&lt;p&gt;        实际上微软早就声明：&lt;strong&gt;“UTF-16Little-endian是Microsoft以及Windows操作系统中的编码标准”&lt;/strong&gt;。在Windows2000以前的操作系统上，内码的编码是和语言相关的（ANSI编码）。那时候简体中文版的Windows使用GBK，所有的中文的软件中的字符串也都是GBK，所以在window上运行也不会乱码。但是可想而至，这二者一旦不匹配就会出现乱码。不同语言国家的Windows编码都不一样，因此微软使用了代码页来解释字符编码，比如简体中文版的Windows默认代码页就是GBK，这意味着默认使用GBK来解释字符串，所以能显示中文是必然的，显示其他的语言（比如日语）是乱码也是必然的。&lt;/p&gt;
&lt;p&gt;        Windows2000之后（严格说是Windows NT 3.1之后）默认使用UTF-16作为编码标准。这是什么意思呢，意思就是全世界的字符你都可以处理，如果安装了相应的字体，你还可以显示全部字符，如果安装了相关输入法你还可以输入任意一种语言。但是哪些不是UTF-16编码的程序还能在新平台下运行吗？可以的，在这一方面微软还是负责任的，毕竟当初是自己提出的代码页方案，不能把软件开发商们都得罪了。所以直到今天（Windows 10）微软都是兼容二者，但是提倡使用UTF-16。那么Windows的默认编码是什么呢？事实是最好不要使用”默认编码“这个词，因为根本没有什么默认的编码（你可以决定使用任何一种编码，只不过别人不认识而已），推荐使用官方的说法“编码标准”，而且微软的编码标准是UTF-16L。&lt;/p&gt;
&lt;p&gt;　　之所以很多初学者有误解，是因为一开始的程序基本都是控制台程序，而控制台的默认代码页确实是GBK。使用chcp命令可以查看当前代码页，可以看到回显Active code page: 936，这正是代表GBK。可以使用命令“chcp 65001”切换到UTF-8。控制台为了兼容性默认代码页是936，不代表Windows的编码标准是GBK，下面的试验都在对话框上显示，因为这是最简单的检验GUI编码方式的方法。&lt;/p&gt;
&lt;h2&gt;Windows对两种机制的兼容&lt;/h2&gt;
&lt;p&gt;那么具体Windows是怎样同时兼容二者：既支持UTF-16，又可以使用ANSI编码的呢？使用一个MessageBox做一下试验。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #include&amp;lt;windows.h&amp;gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     MessageBox(NULL, L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好，世界&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, L&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好，世界&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果是下面图1这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1146242/201710/1146242-20171009192203387-1923791024.png&quot; alt=&quot;&quot;/&gt;     &lt;img src=&quot;http://images2017.cnblogs.com/blog/1146242/201710/1146242-20171009192631902-131373929.png&quot; alt=&quot;&quot; width=&quot;322&quot; height=&quot;73&quot;/&gt;&lt;/p&gt;
&lt;p&gt;           图1                                             图2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1146242/201710/1146242-20171009200114699-471499216.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;351&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         图3&lt;/p&gt;
&lt;p&gt;        但大家都知道，这里是使用了&lt;strong&gt;宏&lt;/strong&gt;（如图2），调用&lt;strong&gt;MessageBox()&lt;/strong&gt;实际上是调用了&lt;strong&gt;MessageBoxW()&lt;/strong&gt;，&lt;strong&gt;MessageBoxW()&lt;/strong&gt;的参数是wchar_t类型的，wchar_t*的字符串字面量一般被实现成UTF-16编码。与之对应的是&lt;strong&gt;MessageBoxA()&lt;/strong&gt;，&lt;strong&gt;MessageBoxA()&lt;/strong&gt;接受的参数是char*类型的，char*的字符串字面量被实现成ANSI编码。我说的字符串字面量被实现成某某编码是什么意思呢？用图片解释一下（图3），两个字符串虽然都是“你好，世界”但是运行时的样子完全不同。要强调机器只认识二进制，所以对机器来说这俩个字符串没有任何相同点。我们如果就是调用&lt;strong&gt;MassageBoxA()&lt;/strong&gt;，传入char*会显示什么呢。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
#include&amp;lt;windows.h&amp;gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
    MessageBoxA(NULL, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好，世界&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你好，世界&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       很意外，结果竟然和图1完全一样。两个完全不同的二进制串竟然显示了相同的正确结果。其实这就是所谓的Windows兼容两种编码（UTF-16与ANSI编码），虽然推荐使用UTF-16但是，使用GBK也能正常在Windows的GUI中显示，但是你的应用程序已经被Windows归类为“&lt;strong&gt;非Unicode程序&lt;/strong&gt;”。这里大家可以打开控制面板--时钟语言和区域--区域--管理，可以找到一个设置项：&lt;strong&gt;非Unicode程序的语言&lt;/strong&gt;。可以选择中文或者其他语言，那它有什么影响呢？你不妨尝试一下改成日语或者韩语什么的，再运行第二段代码，你就能看到乱码了。但是除此之外几乎感受不到影响，程序们还是正常的运行着，没有出现乱码，这说明现在的绝大多数程序都是使用的UTF-16编码，所以这一个设置对他们根本没有影响。&lt;/p&gt;
&lt;p&gt;        但也并不绝对，在笔者把这一项设置修改为“日语（日本）”一周后（我已经忘了自己没有改回来，因为确实没有什么影响）看到一个奇怪的文件夹，他的名字是：ﾑｸﾀﾗﾏﾂﾔﾘ。是哪一个程序搞出了这样的乱码呢？文件夹名字原来是什么呢（不要指望这是日语，这只是日语字符组成的乱码，不能看出含义）？下一节我们来分析这个例子，揭开这个还在使用ANSI编码的程序的羞耻的面纱。&lt;/p&gt;
&lt;h2&gt;一个乱码的例子分析&lt;/h2&gt;
&lt;p&gt;        日本的ANSI编码是Shift_JIS，它是在有Unicode之前日本国内计算机的编码方式。可想而知，之所以出现ﾑｸﾀﾗﾏﾂﾔﾘ这一段乱码，就是因为我把&lt;strong&gt;非Unicode程序的语言&lt;/strong&gt;设定成了日语（日本），所以导致某个想要用GBK字符串命名文件夹的程序创建了乱码的名称。现在能够查到这些字符的Unicode编码（复制粘贴后，他已经变成了Unicode），所以把Unicode转换成的Shift_JIS二进制串解释为GBK就得到文件夹本来的名字了。&lt;/p&gt;
&lt;p&gt;ff fe 91 ff 78 ff 80 ff 97 ff 8f ff 82 ff 94 ff 98 ff&amp;lt;--这是UTF16小端编码,开头的0xfffe是BOM，不知道BOM是什么的可以查看详解字符编码[一]&lt;/p&gt;
&lt;p&gt;d1 b8 c0 d7 cf c2 d4 d8&amp;lt;--这是对应的Shift_JIS&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1146242/201710/1146242-20171009211705418-470543695.png&quot; alt=&quot;&quot; width=&quot;536&quot; height=&quot;194&quot;/&gt;&lt;/p&gt;
&lt;p&gt;把上面的二进制翻译成GBK就是答案：迅雷下载&lt;/p&gt;
&lt;p&gt;我用的正是最新版本的迅雷：9.1.41.914。迅雷的一个小Bug就这样被我发现了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日志：&lt;/strong&gt;在把&lt;strong&gt;非Unicode程序的语言&lt;/strong&gt;改为日语后，只有一个MFC的上古程序和最新版的迅雷出现了乱码，2017年10月9日。&lt;/p&gt;
&lt;p&gt; 下一篇会介绍C/C++程序避免乱码的方法并介绍怎样在Java中处理UTF-16的代理对。喜欢请给个推荐，再见。&lt;/p&gt;

</description>
<pubDate>Mon, 09 Oct 2017 13:49:00 +0000</pubDate>
<dc:creator>painterQ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/painterQ/p/7642797.html</dc:identifier>
</item>
<item>
<title>C#实现基于ffmpeg加虹软的人脸识别 - sweetwxh</title>
<link>http://www.cnblogs.com/sweetwxh/p/face_recognization.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sweetwxh/p/face_recognization.html</guid>
<description>&lt;h2 id=&quot;关于人脸识别&quot;&gt;关于人脸识别&lt;/h2&gt;
&lt;p&gt;目前的人脸识别已经相对成熟，有各种收费免费的商业方案和开源方案，其中OpenCV很早就支持了人脸识别，在我选择人脸识别开发库时，也横向对比了三种库，包括在线识别的百度、开源的OpenCV和商业库虹软（中小型规模免费）。&lt;/p&gt;
&lt;p&gt;百度的人脸识别，才上线不久，文档不太完善，之前联系百度，官方也给了我基于Android的Example，但是不太符合我的需求，一是照片需要上传至百度服务器（这个是最大的问题），其次，人脸的定位需要自行去实现（捕获到人脸后上传进行识别）。&lt;/p&gt;
&lt;p&gt;OpenCV很早以前就用过，当时做人脸+车牌识别时，最先考虑的就是OpenCV，但是识别率在当时不算很高，后来是采用了一个电子科大的老师自行开发的识别库（相对易用，识别率也还不错），所以这次准备做时，没有选择OpenCV。&lt;/p&gt;
&lt;p&gt;虹软其实在无意间发现的，当时正在寻找开发库，正在测试Python的一个&lt;a href=&quot;http://blog.csdn.net/zchang81/article/details/76251001&quot;&gt;方案&lt;/a&gt;，就发现有新闻说虹软的识别库全面开放并且可以免费使用，而且是离线识别，所以就下载尝试了一下，发现识别率还不错，所以就暂定了采用虹软的识别方案。这里主要就给大家分享一下开发过程当中的一些坑和使用心得，顺便开源识别库的C# Wrapper。&lt;/p&gt;
&lt;h2 id=&quot;sdk的c-wrapper&quot;&gt;SDK的C# Wrapper&lt;/h2&gt;
&lt;p&gt;由于虹软的库是采用C++开发的，而我的应用程序采用的是C#，所以，需要对库进行包装，便于C#的调用，包装的主要需求是可以在C#中快速方便的调用，无需考虑内存、指针等问题，并且具备一定的容错性。Wrapper库目前已经开源，大家可以到Github上进行下载，&lt;a href=&quot;https://github.com/steponteam/FaceRecognization&quot;&gt;地址点击这里&lt;/a&gt;。Wrapper库基本上没有什么可以说的，无非是对PInvoke的包装，只是里面做了比较多的细节处理，屏蔽了调用细节，提供了相对高层的函数。有兴趣的可以看看源代码。&lt;/p&gt;
&lt;h2 id=&quot;wrapper库的使用例子&quot;&gt;Wrapper库的使用例子&lt;/h2&gt;
&lt;h3 id=&quot;基本使用&quot;&gt;基本使用&lt;/h3&gt;
&lt;p&gt;人脸检测（静态图片）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using (var detection = LocatorFactory.GetDetectionLocator(&quot;appId&quot;, &quot;sdkKey&quot;))
{
    var image = Image.FromFile(&quot;test.jpg&quot;);
    var bitmap = new Bitmap(image);

    var result = detection.Detect(bitmap, out var locateResult);
    //检测到位置信息在使用完毕后，需要释放资源，避免内存泄露
    using (locateResult)
    {
        if (result == ErrorCode.Ok &amp;amp;&amp;amp; locateResult.FaceCount &amp;gt; 0)
        {
            using (var g = Graphics.FromImage(bitmap))
            {
                var face = locateResult.Faces[0].ToRectangle();
                g.DrawRectangle(new Pen(Color.Chartreuse), face.X, face.Y, face.Width, face.Height);
            }

            bitmap.Save(&quot;output.jpg&quot;, ImageFormat.Jpeg);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;人脸跟踪（人脸跟踪一般用于视频的连续帧识别，相较于检测，又更高的执行效率，这里用静态图片做例子，实际使用和检测没啥区别）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using (var detection = LocatorFactory.GetTrackingLocator(&quot;appId&quot;, &quot;sdkKey&quot;))
{
    var image = Image.FromFile(&quot;test.jpg&quot;);
    var bitmap = new Bitmap(image);

    var result = detection.Detect(bitmap, out var locateResult);
    using (locateResult)
    {
        if (result == ErrorCode.Ok &amp;amp;&amp;amp; locateResult.FaceCount &amp;gt; 0)
        {
            using (var g = Graphics.FromImage(bitmap))
            {
                var face = locateResult.Faces[0].ToRectangle();
                g.DrawRectangle(new Pen(Color.Chartreuse), face.X, face.Y, face.Width, face.Height);
            }

            bitmap.Save(&quot;output.jpg&quot;, ImageFormat.Jpeg);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;人脸对比：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using (var proccesor = new FaceProcessor(&quot;appid&quot;,
                &quot;locatorKey&quot;, &quot;recognizeKey&quot;, true))
{
    var image1 = Image.FromFile(&quot;test2.jpg&quot;);
    var image2 = Image.FromFile(&quot;test.jpg&quot;);

    var result1 = proccesor.LocateExtract(new Bitmap(image1));
    var result2 = proccesor.LocateExtract(new Bitmap(image2));
    
    //FaceProcessor是个整合包装类，集成了检测和识别，如果要单独使用识别，可以使用FaceRecognize类
    //这里做演示，假设图片都只有一张脸
    //可以将FeatureData持久化保存，这个即是人脸特征数据，用于后续的人脸匹配
    //File.WriteAllBytes(&quot;XXX.data&quot;, feature.FeatureData);FeatureData会自动转型为byte数组

    if ((result1 != null) &amp;amp; (result2 != null))
        Console.WriteLine(proccesor.Match(result1[0].FeatureData, result2[0].FeatureData, true));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用注意事项&quot;&gt;使用注意事项&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LocateResult&lt;/code&gt;（检测结果）和&lt;code&gt;Feature&lt;/code&gt;（人脸特征）都包含需要释放的内存资源，在使用完毕后，记得需要释放，否则会引起内存泄露。&lt;code&gt;FaceProcessor&lt;/code&gt;和&lt;code&gt;FaceRecognize&lt;/code&gt;的&lt;code&gt;Match&lt;/code&gt;函数，在完成比较后，可以自动释放，只需要最后两个参数指定为&lt;code&gt;true&lt;/code&gt;即可，如果是用于人脸匹配（1:N），则可以采用默认参数，这种情况下，第一个参数指定的特征数据不会自动释放，用于循环和特征库的特征进行比对。&lt;/p&gt;
&lt;h2 id=&quot;整合的完整例子&quot;&gt;整合的完整例子&lt;/h2&gt;
&lt;p&gt;在Github上，有完整的&lt;a href=&quot;https://github.com/steponteam/FaceRecognization/tree/master/Stepon.FaceRecognization/FaceDemo&quot;&gt;FaceDemo&lt;/a&gt;例子，里面主要实现了通过ffmpeg采集RTSP协议的图像（使用海康的摄像机），然后进行人脸匹配。在开发过程中遇到不少的坑。&lt;/p&gt;
&lt;p&gt;人脸识别的首要工作就是捕获摄像机视频帧，这一块上是坑的最久的，因为最开始采用的是OpenCV的包装库，Emgu.CV，在开发过程中，捕获USB摄像头时，倒是问题不大，没有出现过异常。在捕获RTSP视频流时，会不定时的出现&lt;code&gt;AccessviolationException&lt;/code&gt;异常，短则几十分钟，长则几个小时，总之就是不稳定。在官方Github地址上，也提了&lt;a href=&quot;https://github.com/emgucv/emgucv/issues/48&quot;&gt;Issue&lt;/a&gt;，他们给出的答复是屏蔽的我业务逻辑，仅捕获视频流试试，结果问题依然，所以，我基本坑定了试Emgu.CV上面的问题。后来经过反复的实验，最终确定了选择ffmpeg。&lt;/p&gt;
&lt;p&gt;ffmepg主要采用&lt;code&gt;ProcessStartInfo&lt;/code&gt;进行调用，我采用的是&lt;code&gt;NReco.VideoConverter&lt;/code&gt;（一个ffmpeg调用的包装，可以通过nuget搜索安装），虽然ffmpeg解决了稳定性问题，但是实际开发时，也遇到了不少坑，其中，最主要的是&lt;code&gt;NReco.VideoConverter&lt;/code&gt;没有任何文档和例子（实际有，需要75刀购买），所以，自己研究了半天，如何捕获视频流并转换为Bitmap对象。只要实现这一步，后续就是调用Wrapper就行了。&lt;/p&gt;
&lt;h3 id=&quot;facedemo详解&quot;&gt;FaceDemo详解&lt;/h3&gt;
&lt;p&gt;上面说到了，通过ffmpeg捕获视频流并转换Bitmap是重点，所以，这里也主要介绍这一块。&lt;/p&gt;
&lt;p&gt;首先是ffmpeg的调用参数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var setting =
new ConvertSettings
{
    CustomOutputArgs = &quot;-an -r 15 -pix_fmt bgr24 -updatefirst 1&quot;
}; //-s 1920x1080 -q:v 2 -b:v 64k

task = ffmpeg.ConvertLiveMedia(&quot;rtsp://admin:12qwaszxA@192.168.1.64:554/h264/ch1/main/av_stream&quot;, null,
outputStream, Format.raw_video, setting);
task.OutputDataReceived += DataReceived;
task.Start();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;-an表示不捕获音频流，-r表示帧率，根据需求和实际设备调整此参数，&lt;code&gt;-pix_fmt&lt;/code&gt;比较重要，一般情况下，指定为bgr24不会有太大问题（还是看具体设备），之前就是用成了rgb24，结果捕获出来的图像，人都变成阿凡达了，颜色是反的。最后一个参数，坑的我差点放弃这个方案。本身，ffmpeg在调用时，需要指定一个文件名模板，捕获到的输出会按照模板生成文件，如果要将数据输出到控制台，则最后传入一个&lt;code&gt;-&lt;/code&gt;即可，最开始没有指定updatefirst，ffmpeg在捕获了第一帧后就抛出了异常，最后查了半天ffmpeg说明（完整参数说明非常多，输出到文本有1319KB），发现了这个参数，表示持续更新第一个文件。最后，在调用视频捕获是，需要指定输出格式，必须指定为&lt;code&gt;Format.raw_video&lt;/code&gt;，实际上这个格式名称有些误导人，按道理将应该叫做raw_image，因为最终输出的是每帧原始的位图数据。&lt;/p&gt;
&lt;p&gt;到此为止，还并没有解决视频流数据的捕获，因为又来一个坑，&lt;code&gt;ProcessStartInfo&lt;/code&gt;的控制台缓冲区大小只有32768 bytes，即，每一次的输出，实际上并不是一个完整的位图数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//完整代码参加Github源代码
//代码片段1
private Bitmap _image;
private IntPtr _pImage;

{
    _pImage = Marshal.AllocHGlobal(1920 * 1080 * 3);
    _image = new Bitmap(1920, 1080, 1920 * 3, PixelFormat.Format24bppRgb, _pImage);
}

//代码片段2
private MemoryStream outputStream;

private void DataReceived(object sender, EventArgs e)
{
    if (outputStream.Position == 6220800)
        lock (_imageLock)
        {
            var data = outputStream.ToArray();

            Marshal.Copy(data, 0, _pImage, data.Length);

            outputStream.Seek(0, SeekOrigin.Begin);
        }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;花了不少时间摸索（不要看只有几行，人都整崩溃了），得出了上述代码。首先，我捕获的图像数据是24位的，并且图像大小是1080p的，所以，实际上，一个原始位图数据的大小为&lt;code&gt;stride * height&lt;/code&gt;，即&lt;code&gt;width * 3 * height&lt;/code&gt;，大小为6220800 bytes。所以，在判断了捕获数据到达这个大小后，就进行Bitmap转换处理，然后将MemoryStream的位置移动到最开始。需要注意的时，由于捕获到的是原始数据（不包含bmp的HeaderInfo），所以注意看Bitmap的构造方式，是通过一个指向原始数据位置的指针就行构造的，更新该图像时，也仅需要更新指针指向的位置数据即可，无需在建立新的Bitmap实例。&lt;/p&gt;
&lt;p&gt;位图数据获取到了，就可以进行识别处理了，高高兴兴的加上了识别逻辑，但是现实总是充满了意外和惊喜，没错，坑又来了。没有加入识别逻辑的时候，捕获到的图像在PictureBox上显示非常正常，清晰、流畅，加上识别逻辑后，开始出现花屏（捕获到的图像花屏）、拖影、显示延迟（至少会延迟10-20秒以上）、程序卡顿，总之就是各种问题。最开始，我的识别逻辑写到&lt;code&gt;DataReceived&lt;/code&gt;方法里面的，这个方法是运行于主线程外的另一个线程中的，其实按道理将，捕获、识别、显示位于一个线程中，应该是不会出现问题，我估计（不确定，没有去深入研究，如果谁知道实际原因，可以留言告诉我），是因为ffmpeg的原因，因为ffmpeg是单独的一个进程在跑，他的数据捕获是持续在进行的，而识别模块的处理时间大于每一帧的采集时间，所以，缓冲区中的数据没有得到及时处理，ffmpeg接收到的部分图像数据（大于32768的数据）被丢弃了，然后就出现了各种问题。最后，又是一次耗时不短的探索之旅。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void Render()
{
    while (_renderRunning)
    {
        if (_image == null)
            continue;

        Bitmap image;

        lock (_imageLock)
        {
            image = (Bitmap) _image.Clone();
        }

        if (_shouldShot){
            WriteFeature(image);
            _shouldShot = false;
        }

        Verify(image);

        if (videoImage.InvokeRequired)
            videoImage.Invoke(new Action(() =&amp;gt; { videoImage.Image = image; }));
        else
            videoImage.Image = image;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上代码所述，我单独开了一个线程，用于图像的识别处理和显示，每次都从已捕获到的图像中克隆出新的Bitmap实例进行处理。这种方式的缺点在于，有可能会导致丢帧的现象，因为上面说到了，识别时间（如果检测到新的人脸，那么加上匹配，大约需要130ms左右）大于每帧时间，但是并不影响识别效果和需求的实现，基本丢弃的帧可以忽律。最后，运行，稳定了、完美了，实际也感觉不到丢帧。&lt;/p&gt;
&lt;p&gt;Demo程序，我运行了大约4天左右，中间没有出现过任何异常和识别错误。&lt;/p&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;虽然虹软官方表示，免费识别库适用于1000人脸库以下的识别，实际上，做一定的工作（工作量其实也不小），也是可以实现较大规模的人脸搜索滴。例如，采用多线程进行匹配，如果人脸库人脸数量大于1000，则可以考虑每个线程分别进行处理，人脸特征数据做缓存（一个人脸的特征数据是22KB，对内存要求较高），以提升程序的识别搜索效率。或者人脸库特别大的情况下，可以采用分布式处理，人脸特征加载到Redis数据库当中，多个进程多个线程读取处理，每个线程上传自己的识别结果，然后主进程做结果合并判断工作，主要的挑战就在于多线程的工作分配一致性和对单点故障的容错性。&lt;/p&gt;
</description>
<pubDate>Mon, 09 Oct 2017 13:14:00 +0000</pubDate>
<dc:creator>sweetwxh</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sweetwxh/p/face_recognization.html</dc:identifier>
</item>
<item>
<title>搭建LAMP环境示例 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/7642992.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/7642992.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a&gt;&lt;span&gt;本文目录&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog1&quot;&gt;&lt;span&gt;1. 编译apache httpd&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog2&quot;&gt;&lt;span&gt;2. 编译php&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog2.1&quot;&gt;&lt;span&gt;2.1 php编译选项说明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog2.2&quot;&gt;&lt;span&gt;2.2 php编译过程&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog2.3&quot;&gt;&lt;span&gt;2.3 配置httpd使其转发动态请求给php-fpm&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog3&quot;&gt;&lt;span&gt;3. 为php安装xcache&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog3.1&quot;&gt;&lt;span&gt;3.1 基本安装&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog3.2&quot;&gt;&lt;span&gt;3.2 设置管理员后台&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog4&quot;&gt;&lt;span&gt;4 安装MySQL(MariaDB)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog4.1&quot;&gt;&lt;span&gt;4.1 初始化实例&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog4.2&quot;&gt;&lt;span&gt;4.2 安装后的规范化操作&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html#blog5&quot;&gt;&lt;span&gt;5 测试LAMP——搭建discuz论坛&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本文给出搭建LAMP的步骤，其中php使用的是php-fpm管理方式，php和MySQL(MariaDB)交互使用的是mysqlnd方式(另一种是libmysql)。最后给出一个php+mysql的论坛程序discuz的布置过程。&lt;/p&gt;


&lt;p&gt;此处只简单给出编译httpd的步骤，具体的编译细节知识点见&lt;span&gt;&lt;a title=&quot;编译httpd细节&quot; href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7605563.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;编译httpd细节&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;httpd相关资源下载地址：&lt;span&gt;&lt;a href=&quot;http://archive.apache.org/dist/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://archive.apache.org/dist/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;安装依赖包。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum -y &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; pcre pcre-devel expat-devel&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译apr和apr-util。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tar xf apr-&lt;span class=&quot;hljs-number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;.tar.gz
tar xf arp-&lt;span class=&quot;hljs-number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.tar.gz
&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; apr-&lt;span class=&quot;hljs-number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
./configure --prefix=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/apr 
make
make install
&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; ../apr-util-&lt;span class=&quot;hljs-number&quot;&gt;1.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
./configure --prefix=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/apr-util --with-apr=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/apr
make
make install
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编译httpd。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tar xf httpd-&lt;span class=&quot;hljs-number&quot;&gt;2.4&lt;/span&gt;.27.tar.gz
cd httpd-&lt;span class=&quot;hljs-number&quot;&gt;2.4&lt;/span&gt;.27
./configure --prefix=&lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;local/apache --sysconfdir=&lt;span class=&quot;hljs-regexp&quot;&gt;/etc/&lt;/span&gt;apache --&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt;-z --&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt;-pcre --&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt;-apr=&lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;local/apr --&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt;-apr-util=&lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;local/apr-util --&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt;-mpm=event --enable-mpms-shared=all
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;-&quot;&gt;编译后的规范化操作：&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;MANPATH /usr/local/apache/man&quot;&lt;/span&gt; &amp;gt;&amp;gt;/etc/man.config


&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'PATH=/usr/local/apache/bin:$PATH'&lt;/span&gt; &amp;gt;/etc/profile.d/apache.sh
&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt; /etc/profile.d/apache.sh


ln &lt;span class=&quot;hljs-operator&quot;&gt;-s&lt;/span&gt; /usr/include /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/apache/include
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;-&quot;&gt;提供服务启动脚本：&lt;/h3&gt;
&lt;p&gt;提供不提供没多大所谓，因为apachectl或httpd命令自身可以管理进程的启停，但自身管理启停时不提供lock文件。&lt;/p&gt;
&lt;p&gt;如果要提供的话，从yum安装的httpd提供的/usr/lib/systemd/system/httpd.service(systemd)或/etc/init.d/httpd(sysV)拷贝后稍作修改就可以了。以下是按照我上面编译的环境做了修改后的systemd和sysV服务管理脚本。&lt;/p&gt;
&lt;p&gt;以下是httpd的systemd服务管理脚本/usr/lib/systemd/system/httpd.service。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[Unit]
&lt;span class=&quot;hljs-constant&quot;&gt;Description&lt;/span&gt;=The Apache HTTP Server
&lt;span class=&quot;hljs-constant&quot;&gt;After&lt;/span&gt;=network.target remote-fs.target nss-lookup.target
&lt;span class=&quot;hljs-constant&quot;&gt;Documentation&lt;/span&gt;=man:httpd(8)
&lt;span class=&quot;hljs-constant&quot;&gt;Documentation&lt;/span&gt;=man:apachectl(8)

[Service]
&lt;span class=&quot;hljs-constant&quot;&gt;Type&lt;/span&gt;=notify
&lt;span class=&quot;hljs-constant&quot;&gt;EnvironmentFile&lt;/span&gt;=/etc/sysconfig/httpd
&lt;span class=&quot;hljs-constant&quot;&gt;ExecStart&lt;/span&gt;=/usr/local/apache/bin/httpd $OPTIONS -DFOREGROUND
&lt;span class=&quot;hljs-constant&quot;&gt;ExecReload&lt;/span&gt;=/usr/local/apache/bin/httpd $OPTIONS -k graceful
&lt;span class=&quot;hljs-constant&quot;&gt;ExecStop&lt;/span&gt;=/bin/kill -WINCH ${MAINPID}





&lt;span class=&quot;hljs-constant&quot;&gt;KillSignal&lt;/span&gt;=SIGCONT
&lt;span class=&quot;hljs-constant&quot;&gt;PrivateTmp&lt;/span&gt;=true

[Install]
&lt;span class=&quot;hljs-constant&quot;&gt;WantedBy&lt;/span&gt;=multi-user.target
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是httpd的sysV服务管理脚本/etc/rc.d/init.d/httpd。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-shebang&quot;&gt;#!/bin/bash&lt;/span&gt;











. /etc/rc.d/init.d/&lt;span class=&quot;hljs-built_in&quot;&gt;functions&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; /etc/sysconfig/httpd ]; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
        . /etc/sysconfig/httpd
&lt;span class=&quot;hljs-keyword&quot;&gt;fi&lt;/span&gt;


HTTPD_LANG=&lt;span class=&quot;hljs-variable&quot;&gt;${HTTPD_LANG-&quot;C&quot;}&lt;/span&gt;



INITLOG_ARGS=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;






apachectl=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/apache/bin/apachectl
httpd=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/apache/bin/apachectl
prog=httpd
pidfile=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/apache/logs/httpd.pid
lockfile=/var/lock/subsys/httpd
RETVAL=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
STOP_TIMEOUT=&lt;span class=&quot;hljs-variable&quot;&gt;${STOP_TIMEOUT-10}&lt;/span&gt;
config=/etc/apache/httpd.conf





&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;start&lt;/span&gt;&lt;/span&gt;() {
        &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n $&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting &lt;span class=&quot;hljs-variable&quot;&gt;$prog&lt;/span&gt;: &quot;&lt;/span&gt;
        LANG=&lt;span class=&quot;hljs-variable&quot;&gt;$HTTPD_LANG&lt;/span&gt; daemon --pidfile=&lt;span class=&quot;hljs-variable&quot;&gt;${pidfile}&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$httpd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$OPTIONS&lt;/span&gt;
        RETVAL=$?
        &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt;
        [ &lt;span class=&quot;hljs-variable&quot;&gt;$RETVAL&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ] &amp;amp;&amp;amp; touch &lt;span class=&quot;hljs-variable&quot;&gt;${lockfile}&lt;/span&gt;
        &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$RETVAL&lt;/span&gt;
}




&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;stop&lt;/span&gt;&lt;/span&gt;() {
    status -p &lt;span class=&quot;hljs-variable&quot;&gt;${pidfile}&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$httpd&lt;/span&gt; &amp;gt; /dev/null
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; [[ $? = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ]]; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n $&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stopping &lt;span class=&quot;hljs-variable&quot;&gt;$prog&lt;/span&gt;: &quot;&lt;/span&gt;
        killproc -p &lt;span class=&quot;hljs-variable&quot;&gt;${pidfile}&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${STOP_TIMEOUT}&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$httpd&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n $&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stopping &lt;span class=&quot;hljs-variable&quot;&gt;$prog&lt;/span&gt;: &quot;&lt;/span&gt;
        success
    &lt;span class=&quot;hljs-keyword&quot;&gt;fi&lt;/span&gt;
    RETVAL=$?
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt;
    [ &lt;span class=&quot;hljs-variable&quot;&gt;$RETVAL&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ] &amp;amp;&amp;amp; rm &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${lockfile}&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${pidfile}&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;reload&lt;/span&gt;&lt;/span&gt;() {
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n $&lt;span class=&quot;hljs-string&quot;&gt;&quot;Reloading &lt;span class=&quot;hljs-variable&quot;&gt;$prog&lt;/span&gt;: &quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ! LANG=&lt;span class=&quot;hljs-variable&quot;&gt;$HTTPD_LANG&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$httpd&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$OPTIONS&lt;/span&gt; -t &amp;gt;&amp;amp;/dev/null; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
        RETVAL=&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;
        &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; $&lt;span class=&quot;hljs-string&quot;&gt;&quot;not reloading due to configuration syntax error&quot;&lt;/span&gt;
        failure $&lt;span class=&quot;hljs-string&quot;&gt;&quot;not reloading &lt;span class=&quot;hljs-variable&quot;&gt;$httpd&lt;/span&gt; due to configuration syntax error&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;
        
        LSB=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; killproc -p &lt;span class=&quot;hljs-variable&quot;&gt;${pidfile}&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$httpd&lt;/span&gt; -HUP
        RETVAL=$?
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;hljs-variable&quot;&gt;$RETVAL&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; ]; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
            failure $&lt;span class=&quot;hljs-string&quot;&gt;&quot;httpd shutdown&quot;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;fi&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;fi&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt;
}


&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
        status -p &lt;span class=&quot;hljs-variable&quot;&gt;${pidfile}&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$httpd&lt;/span&gt;
    RETVAL=$?
    ;;
  restart)
    stop
    start
    ;;
  condrestart|try-restart)
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; status -p &lt;span class=&quot;hljs-variable&quot;&gt;${pidfile}&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$httpd&lt;/span&gt; &amp;gt;&amp;amp;/dev/null; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
        stop
        start
    &lt;span class=&quot;hljs-keyword&quot;&gt;fi&lt;/span&gt;
    ;;
  force-reload|reload)
        reload
    ;;
  graceful|&lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt;|configtest|fullstatus)
    &lt;span class=&quot;hljs-variable&quot;&gt;$apachectl&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$@&lt;/span&gt;
    RETVAL=$?
    ;;
  *)
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; $&lt;span class=&quot;hljs-string&quot;&gt;&quot;Usage: &lt;span class=&quot;hljs-variable&quot;&gt;$prog&lt;/span&gt; {start|stop|restart|condrestart|try-restart|force-reload|reload|status|fullstatus|graceful|help|configtest}&quot;&lt;/span&gt;
    RETVAL=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$RETVAL&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后启动httpd。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;service httpd &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;三种工作模式：CGI、作为模块加入到apache、fastcgi。最简单的是以模块方式加入到apache，此处演示的是php-fpm管理php-cgi方式。其他两种方式见&lt;span&gt;&lt;a title=&quot;php-cgi和httpd交互的方式&quot; href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7627035.html#blog3&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;php-cgi和httpd交互的方式&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;fastcgi模式的php-cgi，由php-fpm提供服务管理，它会根据配置文件启动一定数量的cgi进程，其默认监听的端口为9000，该服务正常工作需要配置文件。也就是说fastcgi模式的php有两个配置文件，一个是php的配置文件，一个是php-fpm的配置文件。&lt;/p&gt;
&lt;p&gt;虽然此处演示的是php-fpm管理方式，但有必要说明下，在Linux中如果模块化安装php，不推荐在使用Apache 2.x中使用线程化MPM(worker和event)，而是使用prefork模式的mpm，因为Linux系统的线程设计并不那么完美。所以，如果php和apache在同一台主机上(cgi或者模块化方式安装php的时候)，建议httpd使用prefork模型，而不在同一台主机中，建议将php设计为fastcgi的工作模式。而在windows平台中则无需考虑这些问题，因为windows系统是真正意义上的多线程系统。&lt;/p&gt;
&lt;p&gt;下载相关文件:&lt;br/&gt;php下载地址：&lt;span&gt;&lt;a href=&quot;http://php.net/downloads&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://php.net/downloads&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;php手册地址：&lt;span&gt;&lt;a href=&quot;http://php.net/manual/zh/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://php.net/manual/zh/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;手册下载地址：&lt;span&gt;&lt;a href=&quot;http://php.net/download-docs.php&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://php.net/download-docs.php&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-1-php-&quot;&gt;2.1 php编译选项说明&lt;/h2&gt;
&lt;p&gt;编译安装php有非常非常多的选项，比httpd还多。可以在解压php后的目录下使用&lt;code&gt;./configure --help&lt;/code&gt;查看。以下是部分选项，其中给出&quot;--enable-XXXX&quot;的选项表示默认是disable的，若要开启，需要在此处手动enable，如果给出的是&quot;--disable-XXXX&quot;表示默认是enable的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--prefix=PREFIX
【SAPI &lt;span class=&quot;hljs-attribute&quot;&gt;modules&lt;/span&gt;:】
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-apxs2=FILE       Build shared Apache &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt; Handler &lt;span class=&quot;hljs-built_in&quot;&gt;module&lt;/span&gt;. FILE &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; the optional
                          pathname to the Apache apxs tool apxs
--enable-fpm            Enable building &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the fpm SAPI executable

【General &lt;span class=&quot;hljs-attribute&quot;&gt;settings&lt;/span&gt;:】
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-config-file-path=PATH      Set the path &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; which to look &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; php.ini [PREFIX/lib]
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-config-file-scan-dir=PATH  Set the path where to scan &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; configuration files

【&lt;span class=&quot;hljs-attribute&quot;&gt;Extensions&lt;/span&gt;:】
      
      
      
      
      
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-openssl=DIR      Include OpenSSL support (requires OpenSSL &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;.6)
--enable-mbstring       Enable multibyte string support
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-zlib=DIR         Include ZLIB support
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-bz2=DIR          Include BZip2 support
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-mhash=DIR        Include mhash support
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-mcrypt=DIR       Include mcrypt support
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-freetype-dir=DIR  &lt;span class=&quot;hljs-attribute&quot;&gt;GD&lt;/span&gt;: Set the path to FreeType &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; install prefix
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-jpeg-dir=DIR     &lt;span class=&quot;hljs-attribute&quot;&gt;GD&lt;/span&gt;: Set the path to libjpeg install prefix
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-png-dir=DIR      &lt;span class=&quot;hljs-attribute&quot;&gt;GD&lt;/span&gt;: Set the path to libpng install prefix
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-libxml-dir=DIR   &lt;span class=&quot;hljs-attribute&quot;&gt;SimpleXML&lt;/span&gt;: libxml2 install prefix
--enable-sockets        Enable sockets support
--disable-xml           Disable XML support (不写时默认--enable-xml)

【连接数据库:】
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-mysql=DIR        Include MySQL support.  DIR &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; the MySQL base
                          directory, &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;no&lt;/span&gt; DIR &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; passed &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; the value &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt;
                          mysqlnd the MySQL &lt;span class=&quot;hljs-reserved&quot;&gt;native&lt;/span&gt; driver will be used
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-mysqli=FILE      Include MySQLi support.  FILE &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; the path
                          to mysql_config.  If &lt;span class=&quot;hljs-literal&quot;&gt;no&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; mysqlnd &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; passed
                          as FILE, the MySQL &lt;span class=&quot;hljs-reserved&quot;&gt;native&lt;/span&gt; driver will be used
--&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-pdo-mysql=DIR    &lt;span class=&quot;hljs-attribute&quot;&gt;PDO&lt;/span&gt;: MySQL support. DIR &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; the MySQL base directory
                          If &lt;span class=&quot;hljs-literal&quot;&gt;no&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; mysqlnd &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; passed as DIR, the
                          MySQL &lt;span class=&quot;hljs-reserved&quot;&gt;native&lt;/span&gt; driver will be used
--enable-mysqlnd        Enable mysqlnd explicitly, will be done implicitly
                          &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; required &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; other extensions
【&lt;span class=&quot;hljs-attribute&quot;&gt;Zend&lt;/span&gt;:】
--enable-maintainer-zts    Enable thread safety - &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; code maintainers only!!
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;部分选项说明：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在【zend】扩展部分的选项&quot;--enable-maintainer-zts&quot;是为了让php支持多线程MPM的，即php以模块化方式或cgi模式安装时且httpd配置为worker或event时需要启用该项。而如果php以fastcgi模式安装时，由于php有独立的服务和进程，所以该项是多余的。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;&quot;--with-apxs2&quot;是让php以模块化的方式安装到其他程序中，&quot;--enable-fpm&quot;是让php以fastcgi模式工作的选项。所以此处采用后者，而以模块方式和httpd交互时采用前者。&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&quot;--with-config-file-path&quot;和&quot;--with-config-file-scan-dir&quot;分别是php配置文件php.ini的存放位置以及其他加载的配置文件路径，scan-dir类的目录就像/etc/profile.d、/etc/httpd/conf.d这样的目录路径。&lt;/li&gt;
&lt;li&gt;&quot;--with-openssl&quot;选项让php支持ssl；&quot;--enable-mbstring&quot;选项是让php支持多字节字符的，例如中文一个字符两个字节，也就是说让php支持国际化的；&quot;--with-zlib&quot;、&quot;--with-bz2&quot;、&quot;--with-mhash&quot;和&quot;--with-mcrypt&quot;选项让php支持这些压缩和加密机制。&lt;/li&gt;
&lt;li&gt;&quot;--with-freetype-dir&quot;、&quot;--with-jpeg-dir&quot;和&quot;--with-png-dir&quot;分别是让php支持多种文字样式、支持jpeg、支持png的选项。&lt;/li&gt;
&lt;li&gt;php连接mysql有两种方式，一种是以libmysql的驱动方式连接mysql，一种是以mysqlnd方式驱动连接mysql。以下列出了libmysql和mysqlnd这两种驱动方式的编译模式。
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-2-php-&quot;&gt;2.2 php编译过程&lt;/h2&gt;
&lt;p&gt;由于是配置fastcgi的模式，所以在&lt;code&gt;./configure&lt;/code&gt;的时候将apxs2功能换为&quot;--enable-fpm&quot;，并且由于此模式下的php由自己独立的服务来控制进程的生成，所以对于为了支持httpd线程的选项&quot;--enable-maintainer-zts&quot;也去掉。以下是编译安装过程：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum install -y bzip2-level libmcrypt-devel openssl-devel libxml2-devel

tar xf php-&lt;span class=&quot;hljs-number&quot;&gt;5.5&lt;/span&gt;.38.tar.bz2 -C /tmp
cd /tmp/php-&lt;span class=&quot;hljs-number&quot;&gt;5.5&lt;/span&gt;.38
./configure --prefix=/usr/local/php --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-openssl --enable-mbstring --enable-sockets --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-freetype-dir --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-jpeg-dir --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-png-dir --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-libxml-dir=/usr --enable-xml --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-zlib --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-mcrypt --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-bz2 --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-mhash --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-config-file-path=/etc --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-config-file-scan-dir=/etc/php.d --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-mysql=mysqlnd --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-mysqli=mysqlnd --&lt;span class=&quot;hljs-reserved&quot;&gt;with&lt;/span&gt;-pdo-mysql=mysqlnd --enable-fpm

make
make install
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;
cp php.ini-production /etc/php.ini


cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpmd
&lt;span class=&quot;hljs-keyword&quot;&gt;chmod&lt;/span&gt; +&lt;span class=&quot;hljs-keyword&quot;&gt;x&lt;/span&gt; /etc/init.d/phpfpmd


cd /usr/&lt;span class=&quot;hljs-keyword&quot;&gt;local&lt;/span&gt;/php/
cp etc/php-fpm.conf.default etc/php-fpm.conf


vim etc/php-fpm.conf
pm.max_children = &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;
pm.start_servers = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;
pm.min_spare_servers = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
pm.max_spare_servers = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;


service php-fpmd start
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;2-3-httpd-php-fpm&quot;&gt;2.3 配置httpd使其转发动态请求给php-fpm&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;LoadModule&lt;/span&gt;&lt;/span&gt; proxy_module modules/mod_proxy.so
&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;LoadModule&lt;/span&gt;&lt;/span&gt; proxy_fcgi_module modules/mod_proxy_fcgi.so


&lt;span class=&quot;hljs-keyword&quot;&gt;AddType&lt;/span&gt; application/x-httpd-php .php
&lt;span class=&quot;hljs-keyword&quot;&gt;AddType&lt;/span&gt; application/x-httpd-php-source .phps


&lt;span class=&quot;hljs-keyword&quot;&gt;DirectoryIndex&lt;/span&gt; index.php index.html



&lt;span class=&quot;hljs-keyword&quot;&gt;Include&lt;/span&gt; /etc/apache/extra/httpd-vhosts.conf




&lt;span class=&quot;hljs-keyword&quot;&gt;ProxyRequests&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;off&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;ProxyPassMatch&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(?i)^/(.*\.php)$&quot;&lt;/span&gt; fcgi://127.0.0.1:9000/var/www/a.com/&lt;span class=&quot;hljs-number&quot;&gt;$1&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;提供主页测试文件index.php。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mkdir -p /var/www/a.com

vim /var/www/a.com/index.php
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;a.com&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;
    phpinfo();
&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重启httpd，浏览器中进行站点访问测试。&lt;/p&gt;


&lt;p&gt;php是一种解释型语言，意味着php脚本在执行时不需要事先编译，而是像shell脚本一样直接执行。但事实上它还是会编译的，只不过是执行时&quot;偷偷地&quot;编译，它会将代码编译成字节码(opcode)然后运行。编译是一个很消耗时间的操作，因此需要为编译好的opcode提供缓存以提高性能，降低负载。目前最流行的opcode缓存工具是XCache，它是一个开源的工具。&lt;/p&gt;
&lt;p&gt;下载路径：&lt;span&gt;&lt;a href=&quot;http://xcache.lighttpd.net/pub/Releases/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://xcache.lighttpd.net/pub/Releases/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-1-&quot;&gt;3.1 基本安装&lt;/h2&gt;
&lt;p&gt;安装xcache。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;tar xf xcache-&lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.tar.bz2 -C /tmp
&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /tmp/xcache-&lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;/


/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/php/bin/phpize
./configure --enable-xcache --with-php-config=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/php/bin/php-cofig
make &amp;amp;&amp;amp; make install
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在安装完成之后有一行，这一行很重要，因为这个路径要添加到配置文件中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;Installing&lt;/span&gt; shared extensions:     /usr/local/php/lib/php/extensions/no-&lt;span class=&quot;hljs-built_in&quot;&gt;debug&lt;/span&gt;-zts-&lt;span class=&quot;hljs-number&quot;&gt;20121212&lt;/span&gt;/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在解压xcache的目录下，有xcache的配置文件xcache.ini，将其追加到php的配置文件中，或者将其复制到php的配置文件扫描目录/etc/php.d下(该目录是之前编译php时&lt;code&gt;./configure&lt;/code&gt;配置选项&quot;--with-config-file-scan-dir&quot;指定的项)。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; /etc/php.d
cp xcache.ini /etc/php.d/
vim /etc/php.d/xcache.ini
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在该文件中加上一行，该行必须在该文件中的所有extension指令的最前面。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;zend_extension=&lt;span class=&quot;hljs-regexp&quot;&gt;/usr/local&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/php/lib&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/php/extensions&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/no-debug-zts-20121212/xcache&lt;/span&gt;.so
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实对于xcache 3.0版本和以后版本，可以不用复制xcache模块的路径到配置文件中，因为可以自动找到php路径下的模块路径，甚至添加了可能还会出错。&lt;/p&gt;

&lt;h2 id=&quot;3-2-&quot;&gt;3.2 设置管理员后台&lt;/h2&gt;
&lt;p&gt;设置了管理员后台，管理员可以查看xcache相关的信息和加速的情况。做法很简单。修改配置文件中的xcache.admin.user和xcache.admin.pass两项，分别为管理员账号和密码。注意该密码只能是md5加密的密码。&lt;/p&gt;
&lt;p&gt;例如，user设置为Admin，密码为&quot;123456&quot;：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@toystory&lt;/span&gt; xcache-&lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
e10adc3949ba59abbe56e057f20f883e  -
[root&lt;span class=&quot;hljs-variable&quot;&gt;@toystory&lt;/span&gt; xcache-&lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
xcache.admin.user = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Admin&quot;&lt;/span&gt;
xcache.admin.pass = &lt;span class=&quot;hljs-string&quot;&gt;&quot;e10adc3949ba59abbe56e057f20f883e&quot;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;保存退出。复制xcache解压路径下的htdocs目录(有些版本的xcache是admin目录)到httpd的DocumentRoot下。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cp &lt;span class=&quot;hljs-operator&quot;&gt;-a&lt;/span&gt; htdocs /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/apache/htdocs/
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后重启httpd，在浏览器中输入&lt;code&gt;http://IP/htdocs&lt;/code&gt;，会弹出xcache的管理员验证，输入用户名Admin和密码123456，即可查看管理员页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733013/201710/733013-20171009204510668-2033645346.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733013/201710/733013-20171009204524762-1065610676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;此处以MySQL通用二进制包安装为例，它相当于windows中的便携版软件，解压后稍微配置下进行初始化就可以直接使用，不用安装。其他方法、安装细节、多实例以及MariaDB等见&lt;span&gt;&lt;a title=&quot;mysql &amp;amp; mariadb安装细节&quot; href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7590376.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;mysql &amp;amp; mariadb安装细节&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;mysql通用二进制版官方下载地址:&lt;/p&gt;
&lt;p&gt;MySQL 5.6通用二进制包下载: &lt;span&gt;&lt;a href=&quot;https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.35-linux-glibc2.12-x86_64.tar.gz&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.35-linux-glibc2.12-x86_64.tar.gz&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;MySQL 5.7通用二进制包下载: &lt;span&gt;&lt;a href=&quot;https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.17-linux-glibc2.12-x86_64.tar.gz&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.17-linux-glibc2.12-x86_64.tar.gz&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中文件中的glibc2.12表示的是Linux系统的glibc版本要比2.12新，可以使用ldd --version查看glibc版本。在CentOS 6上glibc默认就是2.12的，所以无需顾虑。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;shell&amp;gt; tar xf mysql-&lt;span class=&quot;hljs-number&quot;&gt;5.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;-linux-glibc2.&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;-x86_64.tar.gz -C /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/
shell&amp;gt; ln &lt;span class=&quot;hljs-operator&quot;&gt;-s&lt;/span&gt; /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mysql-&lt;span class=&quot;hljs-number&quot;&gt;5.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;-linux-glibc2.&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;-x86_64 /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mysql
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;4-1-&quot;&gt;4.1 初始化实例&lt;/h2&gt;
&lt;p&gt;初始化前先进行一些配置。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;shell&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; -p /mydata/data   
shell&amp;gt; useradd -r -&lt;span class=&quot;hljs-keyword&quot;&gt;s&lt;/span&gt; /sbin/nologin mysql
shell&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;chown&lt;/span&gt; -R mysql.mysql /usr/&lt;span class=&quot;hljs-keyword&quot;&gt;local&lt;/span&gt;/mysql
shell&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;chown&lt;/span&gt; -R mysql.mysql /mydata/data
shell&amp;gt; cd /usr/&lt;span class=&quot;hljs-keyword&quot;&gt;local&lt;/span&gt;/mysql
shell&amp;gt; scripts/mysql_install_db --datadir=&lt;span class=&quot;hljs-regexp&quot;&gt;/mydata/data&lt;/span&gt; --user=mysql
shell&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;chown&lt;/span&gt; -R root.root /usr/&lt;span class=&quot;hljs-keyword&quot;&gt;local&lt;/span&gt;/mysql
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行mysql_install_db初始化时会在/tmp下创建临时表，所以mysql用户需要对/tmp有写权限，否则执行实例初始化脚本时可能会报类似下面的错误：&lt;br/&gt;ERROR: 1 Can't create/write to file '/tmp/#sql_7a0e_0.MYI' (Errcode: 13)&lt;br/&gt;这说明没有写权限，所以需要修改/tmp目录的权限：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1777&lt;/span&gt; /tmp
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以使用下面的方法初始化，事实上&lt;code&gt;mysql_install_db&lt;/code&gt;已经作为废弃的工具，在执行时很可能会提示该工具已废弃。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bin/mysqld 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;初始化完成后，提供配置文件和服务启动脚本。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;shell&amp;gt; cp -a support-files/mysql.server /etc/init.d/mysqld
shell&amp;gt; cp -a support-files/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-default.cnf /etc/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;.cnf  


shell&amp;gt; vim /etc/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;.cnf 
[mysqld]
datadir=&lt;span class=&quot;hljs-regexp&quot;&gt;/mydata/data&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果是centos7，则提供如下服务启动脚本(如有必要，修改pid文件路径)。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;shell&amp;gt; cat /usr/lib/systemd/system/mysqld.service
[Unit]
&lt;span class=&quot;hljs-constant&quot;&gt;Description&lt;/span&gt;=MySQL Server
&lt;span class=&quot;hljs-constant&quot;&gt;Documentation&lt;/span&gt;=man:mysqld(8)
&lt;span class=&quot;hljs-constant&quot;&gt;Documentation&lt;/span&gt;=http://dev.mysql.com/doc/refman/en/using-systemd.html
&lt;span class=&quot;hljs-constant&quot;&gt;After&lt;/span&gt;=network.target
&lt;span class=&quot;hljs-constant&quot;&gt;After&lt;/span&gt;=syslog.target

[Install]
&lt;span class=&quot;hljs-constant&quot;&gt;WantedBy&lt;/span&gt;=multi-user.target

[Service]
&lt;span class=&quot;hljs-constant&quot;&gt;User&lt;/span&gt;=mysql
&lt;span class=&quot;hljs-constant&quot;&gt;Group&lt;/span&gt;=mysql

&lt;span class=&quot;hljs-constant&quot;&gt;Type&lt;/span&gt;=forking

&lt;span class=&quot;hljs-constant&quot;&gt;PIDFile&lt;/span&gt;=/var/run/mysqld/mysqld.pid


&lt;span class=&quot;hljs-constant&quot;&gt;TimeoutSec&lt;/span&gt;=0


&lt;span class=&quot;hljs-constant&quot;&gt;ExecStart&lt;/span&gt;=/usr/local/mysql-5.7.19/bin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS


&lt;span class=&quot;hljs-constant&quot;&gt;EnvironmentFile&lt;/span&gt;=-/etc/sysconfig/mysql


&lt;span class=&quot;hljs-constant&quot;&gt;LimitNOFILE&lt;/span&gt; = 5000

&lt;span class=&quot;hljs-constant&quot;&gt;Restart&lt;/span&gt;=on-failure

&lt;span class=&quot;hljs-constant&quot;&gt;RestartPreventExitStatus&lt;/span&gt;=1

&lt;span class=&quot;hljs-constant&quot;&gt;PrivateTmp&lt;/span&gt;=false
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改&quot;root@localhost&quot;密码。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;shell&amp;gt; mysql
mysql&amp;gt; alter user &lt;span class=&quot;hljs-string&quot;&gt;'root'&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;'localhost'&lt;/span&gt; identified &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'123456'&lt;/span&gt;;
mysql&amp;gt; \q
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;4-2-&quot;&gt;4.2 安装后的规范化操作&lt;/h2&gt;
&lt;p&gt;编译安装或通用二进制安装后，一般都需要做一些额外的操作，包括设置环境变量、输出头文件和库文件、设置man路径。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;export PATH=/usr/local/mysql/bin:&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;/etc/profile.d/mysql.sh
chmod +x /etc/profile.d/mysql.sh
&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt; /etc/profile.d/mysql.sh
&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;MANPATH /usr/local/mysql/man&quot;&lt;/span&gt; &amp;gt;&amp;gt;/etc/man.config

&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/local/mysql/lib&quot;&lt;/span&gt; &amp;gt; /etc/ld.so.conf.d/mysql.conf
ldconfig
ln &lt;span class=&quot;hljs-operator&quot;&gt;-s&lt;/span&gt; /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mysql/include /usr/include/mysql
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733013/201710/733013-20171009204415527-582092741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;discuz是论坛软件系统，基于php+MySQL平台。基本配置很简单，更多的配置和个性化定制在官方主页查看教程。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;span&gt;&lt;a href=&quot;http://www.discuz.net/forum.php&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.discuz.net/forum.php&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;discuz下载地址：&lt;span&gt;&lt;a href=&quot;http://www.discuz.net/thread-3570835-1-1.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://www.discuz.net/thread-3570835-1-1.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;简单布置它们的过程很简单，只需复制相关文件到对应的网站根目录下，然后在浏览器中输入对应的目录名即可打开程序。中间测试过程中如果出现问题，再对应修改即可。&lt;/p&gt;
&lt;p&gt;首先配置httpd，提供一个虚拟主机。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;



&lt;span class=&quot;hljs-keyword&quot;&gt;vim&lt;/span&gt; /etc/apache/extra/httpd-vhosts.conf
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;VirtualHost 192.168.100.61:80&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;DocumentRoot&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/var/www/a.com/&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;ServerName&lt;/span&gt;&lt;/span&gt; www.a.com
    &lt;span class=&quot;hljs-keyword&quot;&gt;ErrorLog&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;logs/error_log&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;CustomLog&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;logs/access_log&quot;&lt;/span&gt; combined
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;Directory &quot;/var/www/a.com/&quot;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;Options&lt;/span&gt;&lt;/span&gt; None
        &lt;span class=&quot;hljs-keyword&quot;&gt;AllowOverride&lt;/span&gt; None
        &lt;span class=&quot;hljs-keyword&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;all&lt;/span&gt; granted
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将解压后discuz中的upload目录复制到对应虚拟主机的DocumentRoot目录下。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; Discuz
cp &lt;span class=&quot;hljs-operator&quot;&gt;-a&lt;/span&gt; upload/ /var/www/a.com
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重启httpd服务。测试discuz。不过得先在客户端的hosts文件中添加解析记录，例如此处为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;192.168.100.61 www.a.com。
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在浏览器中输入&lt;code&gt;http://www.a.com/upload&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733013/201710/733013-20171009204351324-1218884734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在安装前会自动检查是否符合安装条件。将以下所有不符合条件的全部修改成符合条件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733013/201710/733013-20171009204323059-760740153.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd /var/www/a.com/upload
touch config/config_{global,ucenter}.php
chmod a+w config/config_{global,ucenter}.php
chmod a+w  data config data/{&lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;cache&lt;/span&gt;,avatar,plugindata,download,addonmd5,template,threadcache,attachment,&lt;span class=&quot;hljs-keyword&quot;&gt;log&lt;/span&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;/attachment/{album,forum,&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt;}
chmod a+w uc_client/&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;cache&lt;/span&gt;
chmod a+w uc_server/&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; uc_server/&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;/{&lt;span class=&quot;hljs-keyword&quot;&gt;cache&lt;/span&gt;,avatar,&lt;span class=&quot;hljs-keyword&quot;&gt;backup&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;logs&lt;/span&gt;,tmp,&lt;span class=&quot;hljs-keyword&quot;&gt;view&lt;/span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;刷新下，条件满足。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733013/201710/733013-20171009204300496-1206571461.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733013/201710/733013-20171009204219730-1155875010.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;卸载的方法是删除upload目录，删除mysql中的discuz数据库。&lt;/p&gt;
&lt;p&gt;如果乱码，则修改httpd的配置文件中的AddDefaultCharset指令。如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;AddDefaultCharset&lt;/span&gt; UTF-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;以上为LAMP相关的内容，布置过程稍显死板 ，作为实验示例，这也是没办法的事情。熟悉相关知识点之后，很容易就明白该如何搭建。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7048359.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到Linux系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7048359.html&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到网站架构系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7586194.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到数据库系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7586194.html&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7642992.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;转载请注明出处：http://www.cnblogs.com/f-ck-need-u/p/7642992.html&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/h3&gt;
</description>
<pubDate>Mon, 09 Oct 2017 13:04:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/7642992.html</dc:identifier>
</item>
<item>
<title>Redis “瘦身”指南 - 枕边书</title>
<link>http://www.cnblogs.com/zhenbianshu/p/7642682.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenbianshu/p/7642682.html</guid>
<description>&lt;p&gt;Redis 应该是开发者最常用的缓存服务器了，它丰富的数据结构，快速高效的内存操作能帮助开发者迅速完成复杂功能的设计，可以说让人一旦使用过后很难再离开它了，甚至在一些业务中，完全可以用 Redis 替代传统的关系型数据库 Mysql。&lt;/p&gt;
&lt;p&gt;作为一个内存型数据库，Redis 经常会遇到内存问题，今天我们来谈一下 Redis 常见的内存满的问题，介绍一下给 Redis “瘦身”的通用方式。&lt;/p&gt;
&lt;p&gt;文章经常被人爬，而且还不注明原地址，我在这里的更新和纠错没法同步，这里注明一下原文地址：http://www.cnblogs.com/zhenbianshu/p/7642682.html 以防误人子弟。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Redis 服务器的最大占用内存量由配置项 &lt;code&gt;maxmemory&lt;/code&gt; 决定，我们可以通过 &lt;code&gt;config set maxmemory 2GB&lt;/code&gt; 的格式来配置。一旦 Redis 内存满，所有引起内存增加的操作都会被返回 error。作为专业 Redis 服务器我们通常将此项设置为&lt;code&gt;0&lt;/code&gt;，以服务器系统内存来作为限制；&lt;/p&gt;
&lt;p&gt;那么 Redis 使用内存达到了上限怎么办？Redis 为我们提供了几种选项以自动回收内存，可以通过配置项 &lt;code&gt;maxmemory-policy&lt;/code&gt; 来配置；&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;noeviction&lt;/code&gt; 不回收；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allkeys-lru&lt;/code&gt; 从所有键中删除最近最少使用的键；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile-lru&lt;/code&gt; 从设置了过期时间的键中删除最近最少使用的键；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allkeys-random&lt;/code&gt; 从所有键中随机删除；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile-random&lt;/code&gt; 从设置了过期时间的键中随机删除；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile-ttl&lt;/code&gt; 从设置了过期时间的键中选择存活时间最短的键删除；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最大内存回收策略需要根据业务来配置，如果纯粹做缓存，&lt;code&gt;allkeys-lru&lt;/code&gt;无疑是最合适的。如果存储了稍微重要的数据，为了防止 Redis 误删一些重要键，则需要选用 &lt;code&gt;noeviction&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;allkeys-lru&lt;/code&gt;、&lt;code&gt;allkeys-random&lt;/code&gt; 在内存满时都有键可删，可以腾出内存，但如果配置了其他的策略，数据库用久了（根据业务量），随着业务发展和数据积累，通常会累积到到服务器内存占用率高，利用率低的情况，则可能会遇到内存占用满的问题。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;产生问题的原因有：&lt;/p&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;持久键废弃&lt;/h3&gt;
&lt;p&gt;这是导致此问题的最常见情况。&lt;/p&gt;
&lt;p&gt;有时候是开发人员的锅，开发不规范，未给有时效性的键设置过期时间，后续又不进行手动删除，键就成为无人管的孤儿键了。&lt;/p&gt;
&lt;p&gt;还可能是整个业务慢慢被废弃，不知道哪一天起，业务整体已不再维护了，一批键自然也就没用了。比这更严重的是，如果使用 List 传递数据，消费进程已被停止，但生产进程未同步停止，还在往 Redis 里写数据。&lt;/p&gt;
&lt;h3 id=&quot;toc_4&quot;&gt;过期键未回收&lt;/h3&gt;
&lt;p&gt;这个原因首先要谈到 Redis 的两种过期键删除策略：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;惰性删除：在读取键时发现键已过期，则将其删除。&lt;/li&gt;
&lt;li&gt;定期删除：Redis 会从所有设置了过期时间的键中选取 100 个，删除已过期的键，如果已过期的键超过 25 个，则再次进行此操作。 此删除操作由配置项 &lt;code&gt;hz&lt;/code&gt; 决定，Redis 默认每秒进行 10 次；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果我们产生过期键的速度很快，最多可导致 Redis 25% 的过期键没有被及时删除。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;由上，明白了问题产生的原因，解决 Redis 内存满的方法就明确了：清除这些垃圾键。 于是就面临着两个问题：&lt;/p&gt;
&lt;h3 id=&quot;toc_6&quot;&gt;如何遍历键&lt;/h3&gt;
&lt;p&gt;对于查找键，我们首先想到的是 &lt;code&gt;KEYS&lt;/code&gt;，但 &lt;code&gt;KEYS&lt;/code&gt; 的时间复杂度是&lt;code&gt;O(n)&lt;/code&gt;，n 是 Redis 内键的总数，如果 Redis 内键很多还是会有性能问题，导致其他命令被阻塞的。&lt;/p&gt;
&lt;p&gt;这里介绍一个键遍历命令： &lt;code&gt;SCAN&lt;/code&gt;。&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;
&lt;code class=&quot;language-none&quot;&gt;SCAN cursor：

0 =&amp;gt; cursor, // cursor = 0 遍历结束
1 =&amp;gt; array(key1, key2...)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是 SCAN 命令是在版本&lt;code&gt;2.8.0&lt;/code&gt; 加入的，如果是之前的版本，可以考虑解析 Redis 的 RDB 文件来获取所有的键。有坑，参见我之前的文章：&lt;a href=&quot;http://www.cnblogs.com/zhenbianshu/p/7486530.html&quot;&gt;扩充你的工具箱 - 大行文件的处理&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;toc_7&quot;&gt;如何判断键是否垃圾&lt;/h3&gt;
&lt;p&gt;我们有三种异常键需要处理：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;过期键：这些键会在被 SCAN 到时被自动删除，不再考虑。如果是解析 RDB 文件获取到的键，在查询时也会被自动删除；&lt;/li&gt;
&lt;li&gt;长时间未读写的键，很可能是业务不再需要的键；&lt;/li&gt;
&lt;li&gt;占用大量内存的键，有可能是在不停地写，但未消费。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里介绍 Redis 的另一个命令 &lt;code&gt;OBJECT&lt;/code&gt;，使用它可以从内部查看 key 对象的状态。使用 &lt;code&gt;OBJECT IDLETIME key&lt;/code&gt; 来获取 key 的闲置时间，我们可以判断 key 闲置时间大于一个时间段（根据业务自定）的为已废弃。&lt;/p&gt;
&lt;p&gt;此外还能使用 &lt;code&gt;OBJECT REFCOUNT key&lt;/code&gt;获取 key 引用所储存的值的次数，&lt;code&gt;OBJECT ENCODING key&lt;/code&gt; 获取 key 储存的值所使用的内部表示。&lt;/p&gt;
&lt;h3 id=&quot;toc_8&quot;&gt;获取键大小&lt;/h3&gt;
&lt;p&gt;而获取 Redis 某键占用内存大小，则通过另一个命令 &lt;code&gt;DEBUG OBJECT&lt;/code&gt; 来获取，此命令会返回比&lt;code&gt;OBJECT&lt;/code&gt;命令更详细的内部数据。&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;
&lt;code class=&quot;language-none&quot;&gt;DEBUG OBJECT test
Value at:0x7fb0ee16ebd0 refcount:1 encoding:embstr serializedlength:6 lru:12362780 lru_seconds_idle:4&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果包括内存地址、引用数、内部编码表示、序列化后的长度、最近最少使用标识值，闲置时间，我们可以解析此结果串来获取对应的数据。&lt;/p&gt;
&lt;p&gt;需要注意，&lt;code&gt;key 作为复合键拥有大量字段时使用 DEBUG 命令计算内存会使 Redis 阻塞较长时间，且 Redis 官方并不建议在客户端使用此命令&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们也可以先使用 &lt;code&gt;TYPE key&lt;/code&gt; 获取键的类型，再根据类型获取其键的大小，如对字符串使用&lt;code&gt;LEN&lt;/code&gt;，对 哈希表使用&lt;code&gt;HLEN&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要注意在删除特别大的复合键时，建议先逐步清空键内的字段，防止因字段过多，Redis 阻塞较长时间。&lt;/p&gt;
&lt;h3 id=&quot;toc_9&quot;&gt;管道加速&lt;/h3&gt;
&lt;p&gt;Redis 支持 &lt;code&gt;pipeline&lt;/code&gt; 管道技术，一次 请求/响应 服务器能实现处理并响应多个请求。这样就可以将多个命令同时发送到服务器，不等待回复，直接在最后获取多个结果。&lt;/p&gt;
&lt;p&gt;PHP 中使用 &lt;code&gt;MULTI(Redis::PIPELINE)&lt;/code&gt; 和 &lt;code&gt;EXEC()&lt;/code&gt; 命令来实现管道；&lt;/p&gt;
&lt;h3 id=&quot;toc_10&quot;&gt;脚本实现&lt;/h3&gt;
&lt;p&gt;下面是个简单的脚本：&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;
&lt;code class=&quot;language-none&quot;&gt;$redis = new Redis();
$redis-&amp;gt;connect('127.0.0.1');
do {
    $keys = $redis-&amp;gt;scan($cursor);

    $pipeline = $redis-&amp;gt;multi(Redis::PIPELINE);
    foreach ($keys as $key) {
        $idle_time = $redis-&amp;gt;object('idletime', $key);
        if ($idle_time &amp;gt; 180 * 24 * 3600) {
            $pipeline-&amp;gt;del($key);
        }
        // todo 判断类型进而判断占用内存大小，再删除
    }
    $pipeline-&amp;gt;exec();
} while ($cursor != 0);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;以上的脚本肯定也会在删除键时影响 Redis 的效率，最好的情况还是从根源就避免此类情况，以下是一些建议：&lt;/p&gt;
&lt;ul readability=&quot;5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;规范化开发；&lt;/p&gt;
&lt;p&gt;首先是键命名要规范，让人见名知义，这样在人工排错或删除时也有判断依据，然后最好有完善的 Redis 键文档，以保证业务在很长时间，经手多人后也能资料可查。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;使用 &lt;code&gt;HashSet&lt;/code&gt; 替代 &lt;code&gt;Key-Value&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;将业务中某一族的键以 HashSet 的方式存储，以替代普通的 key-value 类型。不仅可以省去为每个键设置前缀以节约内存，也便于统一管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;有时效性的键注意设置过期时间；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;合理设置定时清除过期键频率 &lt;code&gt;hz&lt;/code&gt;，在 Redis 不做多余操作的情况下，使过期键尽量能被删除；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;做好 Redis 内存的监控，在达到某个阈值时查找问题并解决。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;最后多絮叨两句经验：&lt;/p&gt;
&lt;h3 id=&quot;toc_13&quot;&gt;Redis假死&lt;/h3&gt;
&lt;p&gt;我在使用守护进程时 Redis 有假死情况，PHP 和 Redis 都不报错，但命令都返回 false，这种情况可以使用 Redis 的 ping() 命令，来探测 Redis 连接是否还在，如果不在则再建立新的连接。此问题很可能是由服务器配置引起的，如果您有知道此问题的原由或有好的解决办法，烦请指点一二。&lt;/p&gt;
&lt;h3 id=&quot;toc_14&quot;&gt;危险命令&lt;/h3&gt;
&lt;p&gt;不要在没看文档的情况下在线上使用 Redis 命令，例如 &lt;code&gt;debug segfault&lt;/code&gt;，别问我怎么知道的。&lt;/p&gt;
&lt;p&gt;嗯，希望大家都能处理好跟 Redis 这个好朋友的关系。&lt;/p&gt;
&lt;p&gt;关于本文有什么问题可以在下面留言交流，如果您觉得本文对您有帮助，可以点击下面的 &lt;strong&gt;&lt;code&gt;推荐&lt;/code&gt;&lt;/strong&gt; 支持一下我。博客一直在更新，欢迎 &lt;strong&gt;&lt;code&gt;关注&lt;/code&gt;&lt;/strong&gt; 。&lt;/p&gt;
</description>
<pubDate>Mon, 09 Oct 2017 11:48:00 +0000</pubDate>
<dc:creator>枕边书</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenbianshu/p/7642682.html</dc:identifier>
</item>
<item>
<title>用MXNet实现mnist的生成对抗网络(GAN) - Thaurun</title>
<link>http://www.cnblogs.com/heguanyou/p/7642608.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/heguanyou/p/7642608.html</guid>
<description>&lt;p&gt;生成式对抗网络（Generative Adversarial Network，简称GAN）由一个生成网络与一个判别网络组成。生成网络从潜在空间（latent space）中随机采样作为输入，其输出结果需要尽量模仿训练集中的真实样本。判别网络的输入则为真实样本或生成网络的输出，其目的是将生成网络的输出从真实样本中尽可能分辨出来。而生成网络则要尽可能地欺骗判别网络。两个网络相互对抗、不断调整参数，最终目的是使判别网络无法判断生成网络的输出结果是否真实。从数据的分布来看就是使得生成的数据分布&lt;span class=&quot;math inline&quot;&gt;\(P_z(z)\)&lt;/span&gt;与原来的数据&lt;span class=&quot;math inline&quot;&gt;\(P_{data}(x)\)&lt;/span&gt;十分接近，理想的情况下为&lt;span class=&quot;math inline&quot;&gt;\(P_z(z)=P_{data}(x)\)&lt;/span&gt;。本文给出了GAN的Loss函数、说明GAN的训练原理，再结合最简单的例子mnist，用MXNet来实现GAN。&lt;/p&gt;
&lt;h2 id=&quot;gan的基本概念&quot;&gt;GAN的基本概念&lt;/h2&gt;
&lt;p&gt;在一样样本中加入一些精心编制的噪声，会使得原来的分类器失效。图1是一个广为流传的示例，左边的分类器得到的是熊猫而右边被分类为了长臂猿。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1191997/201710/1191997-20171009191913637-1546562256.jpg&quot; alt=&quot;wrong&quot;/&gt;&lt;/p&gt;
&lt;center&gt;图1 误分类的示例&lt;/center&gt;
&lt;p&gt;为什么会有这样的结果？图像分类器本质上是多维空间中的决策边界，当训练的样本不足时，可能会使得分类器过拟合。当向原样本中加入一些L2范数很小的噪声时，人类的视觉是无法分别这些细微的差别，所以依然会认为和原样本的分类没什么区别。但对过拟合的分类器来说，输入样本的小偏差可能使得最后的决策点越过了原来的决策边界，进入到其它分类中了。这就导致了错误的分类。&lt;/p&gt;
&lt;p&gt;对于生成网络设为G，&lt;span class=&quot;math inline&quot;&gt;\(G(Z)\)&lt;/span&gt;为生成的对抗样本，理想条件下&lt;span class=&quot;math inline&quot;&gt;\(G(z)\)&lt;/span&gt;随机生成的样本分布与真实样本分布是一样。对于判别网络设为D，&lt;span class=&quot;math inline&quot;&gt;\(D(x)\)&lt;/span&gt;为判别样本是真实的概率，理想条件下对真实样本有&lt;span class=&quot;math inline&quot;&gt;\(G(x)=1\)&lt;/span&gt;，对生成样本有&lt;span class=&quot;math inline&quot;&gt;\(D(G(z))=0\)&lt;/span&gt;。为了达到效果，设计了如图2所示的网络结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1191997/201710/1191997-20171009191949402-1737926145.png&quot; alt=&quot;net&quot;/&gt;&lt;/p&gt;
&lt;center&gt;图2 GAN的网络结构&lt;/center&gt;
&lt;p&gt;Loss函数如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ V(G,D)=E_{x-p_{data}(x)}[\log(D(x))] + E_{z-p_{z}(z)}[1-\log(D(G(z)))] \tag{1.1} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个Loss函数的优化方法与EM算法的思想是相似的：在G是固定的情况下，判别网络D的精确率越高，那么V就越大；在D固定的条件下，生成网络G的生成的样本越像实际样本，那么V就越小。所有V(G,D)进行了极小极大化博弈：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \min_G \max_D V(G,D)=E_{x-p_{data}(x)}[\log(D(x))] + E_{z-p_{z}(z)}[1-\log(D(G(z)))] \tag{1.2} \]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现mnist的gan&quot;&gt;实现mnist的GAN&lt;/h2&gt;
&lt;p&gt;MXNet的源码给出了mnsit的GAN实现（见&lt;a href=&quot;https://github.com/apache/incubator-mxnet/blob/master/example/gan/dcgan.py&quot;&gt;dcgan.py&lt;/a&gt;），但是没有给出详细的说明，我在这里详细解释下，源文件在装了相关的python包之后是能正确运行的。DCGAN是指Deep Convolution Generative Adversarial Netword（深度卷积生成式对抗网格）。&lt;/p&gt;
&lt;p&gt;mnist的网络相对来说比较简单，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1191997/201710/1191997-20171009192014043-1308182263.png&quot; alt=&quot;D_G&quot;/&gt;&lt;/p&gt;
&lt;center&gt;图3 D是判别式网络，G是生成式网络，可以看到两个网络输出的数据大致成反向对称&lt;/center&gt;
&lt;p&gt;生成网络G的结构与判别网络D的结果是反向对称的（虽然两个网络的开头或者结尾有所不同，但这是为了与结果相对应），这里有一个很重要但被很多文章忽略的假设：&lt;strong&gt;判别网络从潜在空间（latent space）是可逆的&lt;/strong&gt;。不是说从最后的结果是可逆的，但从原始图片映射到潜在空间这个过程（比如说从全连接层的n（n一般比较大）维向量）是可逆的，这里说的可逆不是严格意义上的反函数，而是从视觉判别结果上区别不大，比如说在G与D理想的情况下数字9通过判别网络得到一个100维的向量，再将这个100维向量通过生成网络G得到一张图片，这张图片在人类看来也是9。&lt;/p&gt;
&lt;p&gt;代码实现如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;143&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; make_dcgan_sym(ngf, ndf, nc, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, fix_gamma&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, eps&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;1e-5&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1e-12&lt;/span&gt;):
    BatchNorm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.BatchNorm
    &lt;span class=&quot;co&quot;&gt;# 生成网络G&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;# 输入生成网络G的变量，这个是潜在空间&lt;/span&gt;
    rand &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Variable(&lt;span class=&quot;st&quot;&gt;'rand'&lt;/span&gt;)

    g1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Deconvolution(rand, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'g1'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ngf&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    gbn1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; BatchNorm(g1, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gbn1'&lt;/span&gt;, fix_gamma&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;fix_gamma, eps&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;eps)
    gact1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Activation(gbn1, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gact1'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;)

    g2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Deconvolution(gact1, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'g2'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), stride&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), pad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ngf&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    gbn2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; BatchNorm(g2, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gbn2'&lt;/span&gt;, fix_gamma&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;fix_gamma, eps&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;eps)
    gact2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Activation(gbn2, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gact2'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;)

    g3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Deconvolution(gact2, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'g3'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), stride&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), pad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ngf&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    gbn3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; BatchNorm(g3, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gbn3'&lt;/span&gt;, fix_gamma&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;fix_gamma, eps&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;eps)
    gact3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Activation(gbn3, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gact3'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;)

    g4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Deconvolution(gact3, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'g4'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), stride&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), pad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ngf, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    gbn4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; BatchNorm(g4, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gbn4'&lt;/span&gt;, fix_gamma&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;fix_gamma, eps&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;eps)
    gact4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Activation(gbn4, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gact4'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relu'&lt;/span&gt;)

    g5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Deconvolution(gact4, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'g5'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), stride&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), pad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;nc, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    &lt;span class=&quot;co&quot;&gt;# 生成网络G最后得到一张相片&lt;/span&gt;
    gout &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Activation(g5, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'gact5'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'tanh'&lt;/span&gt;)

    &lt;span class=&quot;co&quot;&gt;# 判别网络D，这里里的结构与一般的分类网络区别不大&lt;/span&gt;
    data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Variable(&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;)
    label &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Variable(&lt;span class=&quot;st&quot;&gt;'label'&lt;/span&gt;)

    d1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Convolution(data, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'d1'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), stride&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), pad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ndf, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    dact1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.LeakyReLU(d1, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'dact1'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'leaky'&lt;/span&gt;, slope&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.2&lt;/span&gt;)

    d2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Convolution(dact1, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'d2'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), stride&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), pad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ndf&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    dbn2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; BatchNorm(d2, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'dbn2'&lt;/span&gt;, fix_gamma&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;fix_gamma, eps&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;eps)
    dact2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.LeakyReLU(dbn2, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'dact2'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'leaky'&lt;/span&gt;, slope&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.2&lt;/span&gt;)

    d3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Convolution(dact2, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'d3'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), stride&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), pad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ndf&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    dbn3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; BatchNorm(d3, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'dbn3'&lt;/span&gt;, fix_gamma&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;fix_gamma, eps&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;eps)
    dact3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.LeakyReLU(dbn3, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'dact3'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'leaky'&lt;/span&gt;, slope&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.2&lt;/span&gt;)

    d4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Convolution(dact3, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'d4'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), stride&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), pad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ndf&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    dbn4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; BatchNorm(d4, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'dbn4'&lt;/span&gt;, fix_gamma&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;fix_gamma, eps&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;eps)
    dact4 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.LeakyReLU(dbn4, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'dact4'&lt;/span&gt;, act_type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'leaky'&lt;/span&gt;, slope&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.2&lt;/span&gt;)

    d5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Convolution(dact4, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'d5'&lt;/span&gt;, kernel&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), num_filter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, no_bias&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;no_bias)
    d5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.Flatten(d5)
    &lt;span class=&quot;co&quot;&gt;# 用逻辑回归计算最后的loss&lt;/span&gt;
    dloss &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.sym.LogisticRegressionOutput(data&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;d5, label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;label, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'dloss'&lt;/span&gt;)
    &lt;span class=&quot;co&quot;&gt;# 返回这G与D这两个网络&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; gout, dloss&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在训练的过程中，所有的原样本的label为1，生成网络G生成的样本的label为0，用这样来区别原样本与生成的对抗样本。生成网络输入的潜在空间样本是100维的，训练过程如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用生成网络G生成对抗样本gout&lt;/li&gt;
&lt;li&gt;对抗样本的label设为0，因为要先用这个训练判别网络D&lt;/li&gt;
&lt;li&gt;用gout来训练判别网络D，得到梯度，但不更新&lt;/li&gt;
&lt;li&gt;对原样本的label设为1，再用之来训练判别网络D&lt;/li&gt;
&lt;li&gt;得到梯度后合入gout得到的梯度，更新D的参数&lt;/li&gt;
&lt;li&gt;下面的过程是为了得到生成网络G的loss
&lt;ul&gt;&lt;li&gt;设gout的label为1，因为生成网络G的目标就是要生成label为1的样本，所以训练G的label为1。反之，如果训练D，为了区别原样本与生成样本所以label为0。&lt;/li&gt;
&lt;li&gt;用判别网络D来得输入的梯度dgout，这个梯度就是生成网络G的loss。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;用这个loss反向传播生成网络G，并更新参数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这里面的关键就是&lt;strong&gt;用判别网络D来得到生成网络G的loss&lt;/strong&gt;，之所以可以这样，是因为这两个网络是可逆的。训练的代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;86&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'__main__'&lt;/span&gt;:
    logging.basicConfig(level&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;logging.DEBUG)

    &lt;span class=&quot;co&quot;&gt;# =============setting============&lt;/span&gt;
    dataset &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mnist'&lt;/span&gt;
    imgnet_path &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./train.rec'&lt;/span&gt;
    ndf &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;
    ngf &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;
    nc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
    batch_size &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;
    Z &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;
    lr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.0002&lt;/span&gt;
    beta1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;
    ctx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.gpu(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
    check_point &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;

    symG, symD &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; make_dcgan_sym(ngf, ndf, nc)
    &lt;span class=&quot;co&quot;&gt;#mx.viz.plot_network(symG, shape={'rand': (batch_size, 100, 1, 1)}).view()&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;#mx.viz.plot_network(symD, shape={'data': (batch_size, nc, 64, 64)}).view()&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;# ==============data==============&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; dataset &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mnist'&lt;/span&gt;:
        X_train, X_test &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; get_mnist()
        train_iter &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.io.NDArrayIter(X_train, batch_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;batch_size)
    &lt;span class=&quot;cf&quot;&gt;elif&lt;/span&gt; dataset &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'imagenet'&lt;/span&gt;:
        train_iter &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ImagenetIter(imgnet_path, batch_size, (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;))
    rand_iter &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; RandIter(batch_size, Z)
    label &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.nd.zeros((batch_size,), ctx&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ctx)

    &lt;span class=&quot;co&quot;&gt;# =============module G=============&lt;/span&gt;
    modG &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.mod.Module(symbol&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;symG, data_names&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'rand'&lt;/span&gt;,), label_names&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;, context&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ctx)
    modG.bind(data_shapes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;rand_iter.provide_data)
    modG.init_params(initializer&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;mx.init.Normal(&lt;span class=&quot;fl&quot;&gt;0.02&lt;/span&gt;))
    modG.init_optimizer(
        optimizer&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'adam'&lt;/span&gt;,
        optimizer_params&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;{
            &lt;span class=&quot;st&quot;&gt;'learning_rate'&lt;/span&gt;: lr,
            &lt;span class=&quot;co&quot;&gt;'wd'&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,
            &lt;span class=&quot;co&quot;&gt;'beta1'&lt;/span&gt;: beta1,
        })
    mods &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [modG]

    &lt;span class=&quot;co&quot;&gt;# =============module D=============&lt;/span&gt;
    modD &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.mod.Module(symbol&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;symD, data_names&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;,), label_names&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'label'&lt;/span&gt;,), context&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ctx)
    modD.bind(data_shapes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;train_iter.provide_data,
              label_shapes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[(&lt;span class=&quot;st&quot;&gt;'label'&lt;/span&gt;, (batch_size,))],
              inputs_need_grad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
    modD.init_params(initializer&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;mx.init.Normal(&lt;span class=&quot;fl&quot;&gt;0.02&lt;/span&gt;))
    modD.init_optimizer(
        optimizer&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'adam'&lt;/span&gt;,
        optimizer_params&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;{
            &lt;span class=&quot;st&quot;&gt;'learning_rate'&lt;/span&gt;: lr,
            &lt;span class=&quot;co&quot;&gt;'wd'&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;.,
            &lt;span class=&quot;co&quot;&gt;'beta1'&lt;/span&gt;: beta1,
        })
    mods.append(modD)


    &lt;span class=&quot;co&quot;&gt;# ============printing==============&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; norm_stat(d):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; mx.nd.norm(d)&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;np.sqrt(d.size)
    mon &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.mon.Monitor(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, norm_stat, pattern&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;.*output|d1_backward_data&quot;&lt;/span&gt;, sort&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
    mon &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; mon &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; mod &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; mods:
            &lt;span class=&quot;cf&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; facc(label, pred):
        pred &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pred.ravel()
        label &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; label.ravel()
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; ((pred &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; label).mean()

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; fentropy(label, pred):
        pred &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pred.ravel()
        label &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; label.ravel()
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;(label&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;np.log(pred&lt;span class=&quot;fl&quot;&gt;+1e-12&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;label)&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;np.log(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;pred&lt;span class=&quot;fl&quot;&gt;+1e-12&lt;/span&gt;)).mean()

    mG &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.metric.CustomMetric(fentropy)
    mD &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.metric.CustomMetric(fentropy)
    mACC &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; mx.metric.CustomMetric(facc)

    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Training...'&lt;/span&gt;)
    stamp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;  datetime.now().strftime(&lt;span class=&quot;st&quot;&gt;'%Y_%m_&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;-%H_%M'&lt;/span&gt;)

    &lt;span class=&quot;co&quot;&gt;# =============train===============&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; epoch &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;):
        train_iter.reset()
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; t, batch &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;enumerate&lt;/span&gt;(train_iter):
            rbatch &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; rand_iter.&lt;span class=&quot;bu&quot;&gt;next&lt;/span&gt;()

            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; mon &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
                mon.tic()

            &lt;span class=&quot;co&quot;&gt;# 首先生成对抗样本&lt;/span&gt;
            modG.forward(rbatch, is_train&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
            outG &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; modG.get_outputs()

            &lt;span class=&quot;co&quot;&gt;# update discriminator on fake&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;# 这里的负样本label为0，正样本label为1，不像普遍的mnist一样。那么modG就想生成样本label为1的，modD要将modG生成的数据判定为0&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;#　train_iter(真实样本)中的数据判定为1。&lt;/span&gt;
            label[:] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
            modD.forward(mx.io.DataBatch(outG, [label]), is_train&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
            modD.backward()
            &lt;span class=&quot;co&quot;&gt;#modD.update()&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;# 先Copy得到的对抗样本的梯度，要注意是复制不是引用。&lt;/span&gt;
            gradD &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [[grad.copyto(grad.context) &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; grad &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; grads] &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; grads &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; modD._exec_group.grad_arrays]

            modD.update_metric(mD, [label])
            modD.update_metric(mACC, [label])

            &lt;span class=&quot;co&quot;&gt;# update discriminator on real&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;# 对真实样本的数据训练&lt;/span&gt;
            label[:] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
            batch.label &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [label]
            modD.forward(batch, is_train&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
            modD.backward()
            &lt;span class=&quot;co&quot;&gt;# 对抗样本与真实样本的梯度合到一起建行梯度更新&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; gradsr, gradsf &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;zip&lt;/span&gt;(modD._exec_group.grad_arrays, gradD):
                &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; gradr, gradf &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;zip&lt;/span&gt;(gradsr, gradsf):
                    gradr &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; gradf
            modD.update()

            modD.update_metric(mD, [label])
            modD.update_metric(mACC, [label])

            &lt;span class=&quot;co&quot;&gt;# update generator&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;# 更新modG的参数，这里要注意的是，modG想要生成的样本label是1的，所以在modD中用了这个label，就是想生成的样本向label=1靠近。&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;# 前向和向后生成输入数据的梯度diffD&lt;/span&gt;
            label[:] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
            modD.forward(mx.io.DataBatch(outG, [label]), is_train&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)
            modD.backward()
            diffD &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; modD.get_input_grads()
            &lt;span class=&quot;co&quot;&gt;# diffD就是modG的loss产生的梯度，用它来向后传播并更新参数。&lt;/span&gt;
            modG.backward(diffD)
            modG.update()

            mG.update([label], modD.get_outputs())


            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; mon &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
                mon.toc_print()

            t &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:
                &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'epoch:'&lt;/span&gt;, epoch, &lt;span class=&quot;st&quot;&gt;'iter:'&lt;/span&gt;, t, &lt;span class=&quot;st&quot;&gt;'metric:'&lt;/span&gt;, mACC.get(), mG.get(), mD.get())
                mACC.reset()
                mG.reset()
                mD.reset()

                visual(&lt;span class=&quot;st&quot;&gt;'gout'&lt;/span&gt;, outG[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].asnumpy())
                diff &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; diffD[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].asnumpy()
                diff &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (diff &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; diff.mean())&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;diff.std()
                visual(&lt;span class=&quot;st&quot;&gt;'diff'&lt;/span&gt;, diff)
                visual(&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;, batch.data[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].asnumpy())

        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; check_point:
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Saving...'&lt;/span&gt;)
            modG.save_params(&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;_G_&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%04d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.params'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;(dataset, stamp, epoch))
            modD.save_params(&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;_D_&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%04d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.params'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;(dataset, stamp, epoch))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;训练的结果部分结果如下，gout是生成的样本，data是原样本，diff是它们的差。可以从后面生成的gout中看到，结果缺少一些数字，比如2、3等，这是因为我们没有对各个数字的潜在空间进行生成样本而是用统一的空间，这个统一的空间中对应的数字可能没有2、3等或者说它们点的比例相对来说比较小，样例用到的空间只是保证生成样本是数字，但并不保证每个数字都会有，如果我保证生成每个数字的样本，那么得重新设计程序，但原理和例程相差不大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1191997/201710/1191997-20171009192058137-386473266.png&quot; alt=&quot;data_gout_diff&quot;/&gt;&lt;/p&gt;
&lt;center&gt;图4 输出的图像结果：data是原始数据，gout是G生成的对搞样本，diff是两者的差。&lt;/center&gt;
&lt;p&gt;过程打印的输出如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;epoch&lt;/span&gt;: 99 iter: 930 metric: (&lt;span class=&quot;st&quot;&gt;'facc'&lt;/span&gt;, 1.0) &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'fentropy'&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;8.3449375152587884)&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'fentropy'&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;0.00077932097192388026)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://files.cnblogs.com/files/heguanyou/wechatpay.bmp&quot; alt=&quot;pay&quot;/&gt;&lt;/p&gt;
&lt;p&gt;【防止爬虫转载而导致的格式问题——链接】：&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/heguanyou/p/7642608.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/heguanyou/p/7642608.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Oct 2017 11:22:00 +0000</pubDate>
<dc:creator>Thaurun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/heguanyou/p/7642608.html</dc:identifier>
</item>
<item>
<title>JavaWeb（五）之JSTL标签库 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7640282.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7640282.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　前面介绍了EL表达式，其实EL表达式基本上是和JSTL核心标签库搭配一起使用才能发挥效果的。接下来让我们一起来认识一下吧！&lt;/p&gt;
&lt;p&gt;　　在之前我们学过在JSP页面上为了不使用脚本，所以我们有了&lt;span&gt;JSP内置的行为、行为只能提供一小部分的功能&lt;/span&gt;，大多数的时候还是会用java脚本，接着就使用了&lt;span&gt;EL表达式&lt;/span&gt;，基本上EL表达式看似能满足我们的要求，&lt;/p&gt;
&lt;p&gt;　　它能&lt;span&gt;够获取各种对象，各种值，并且还不会抛出NullPointerException之类的错误&lt;/span&gt;，但是EL表达式功能还是有限，例如不能遍历集合等，因此为了完善JSP，让其完全不使用java代码，就有了jstl标签库，&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;使用jstl和EL的配合使用，基本上可以实现所有的功能，显示数据，遍历数据&lt;/span&gt;等。&lt;/p&gt;

&lt;h2&gt;1.1、JSTL标签库简介&lt;/h2&gt;
&lt;p class=&quot;1&quot;&gt;　　JSP虽然为我们&lt;span&gt;提供了EL表达式用来替代JSP表达式&lt;/span&gt;，但是由于&lt;span&gt;EL表达式仅仅具有输出功能，而不替代页面中的JSP脚本片段&lt;/span&gt;。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　为了方便开发使用Sun公司又定义了一套通用的标签库名为JSTL(JSP Tag Standard Tag Library)，里面定义很多我们开发中常用的方法，方便我们使用。JSTL的标准由Sun公司定制，Apache的Jakarta小组负责实现。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　JSP标准标签库（JSTL）是&lt;span&gt;一个JSP标签集合，它封装了JSP应用的通用核心功能&lt;/span&gt;。　　  &lt;/p&gt;
&lt;h2 class=&quot;1&quot;&gt;1.2、为什么要使用标签&lt;/h2&gt;
&lt;p class=&quot;1&quot;&gt;　　JSP是用来&lt;span&gt;显示数据的&lt;/span&gt;，前面我们在JSP中的&lt;span&gt;HTML中嵌入java代码，与&amp;lt;%%&amp;gt;等混在一起，可读性和可维护性都很差，而且使用java脚本不便于代码重用&lt;/span&gt;，要实现比较复杂的显示功能，&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　也不方便，而J&lt;span&gt;SP标签和HTML代码很类似，使用JSP标签显得JSP整洁而干净，可读性好，标签能够重复使用&lt;/span&gt;，所以就像我们上面说的，我们慢慢意识到不足，就自然在一步步改进，&lt;span&gt;从使用JSP行为，&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;&lt;span&gt;　　使用EL，在使用标签，都是为了一个目的，让JSP更加完全，方便，只显示数据，而不嵌入逻辑代码&lt;/span&gt;。这个涉及到了分层思想，后面说讲解到。&lt;/p&gt;
&lt;h2 class=&quot;1&quot;&gt;1.3、使用JSTL&lt;/h2&gt;
&lt;p class=&quot;1&quot;&gt;　　使用JSTL必须在项目中导入两个jar包：　&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　 taglibs-standard-impl-1.2.1.jar&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　 taglibs-standard-spec-1.2.5.jar　&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　然后还需要在JSP页面中通过taglib标签引入标签库：&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　 &amp;lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&amp;gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　prefix用来&lt;span&gt;指定前缀名，我们通过该名来使用JSTL&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　uri相当于库的唯一标识，因为&lt;span&gt;JSTL由多个不同的库组成，使用该属性指定要导入哪个库&lt;/span&gt;。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　使用JSTL&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　 &amp;lt;c:out value=&quot;hello&quot;&amp;gt;&amp;lt;/c:out&amp;gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　 这个例子标识，调用前缀为c的标签的out方法，向页面中输出value属性中的字符串。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　 JSTL的使用非常像html标签。&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　注意：在MyEclipse中使用java5.0版本以上会自动导入jar包&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009141830434-405066051.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009142002230-1809702301.png&quot; alt=&quot;&quot; width=&quot;681&quot; height=&quot;218&quot;/&gt;　　&lt;/p&gt;
&lt;p&gt;　　　　打开c.tld可以查到uri的地址：http://java.sun.com/jsp/jstl/core&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pun&quot;&gt;　　　　在JSP中使用JSTL添加这段代码来引包：&amp;lt;%@&lt;span class=&quot;pln&quot;&gt; taglib prefix&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;str&quot;&gt;&quot;c&quot;&lt;span class=&quot;pln&quot;&gt; uri&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;str&quot;&gt;&quot;http://java.sun.com/jsp/jstl/core&quot;&lt;span class=&quot;pln&quot;&gt; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;1.4、JSTL标签库组成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;　　JSTL由五个不同功能的标签库组成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;pun&quot;&gt;&lt;span class=&quot;str&quot;&gt;&lt;span class=&quot;pln&quot;&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009142330418-434641009.png&quot; alt=&quot;&quot; width=&quot;518&quot; height=&quot;163&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　介绍JSTL各个标签库：&lt;/p&gt;
&lt;p&gt;　　　　1）核心标签库中包含了&lt;span&gt;实现WEB应用中的通用操作的标签&lt;/span&gt;。例如，用于输出一个变量内容的&amp;lt;c:out&amp;gt;标签、用于条件判断的&amp;lt;c:if&amp;gt;标签、用于迭代循环的&amp;lt;c:forEach&amp;gt;标签。&lt;br/&gt;　　　　2）国际化/格式化标签库中包含&lt;span&gt;实现WEB应用程序的国际化的标签&lt;/span&gt;。例如，设置JSP页面的本地信息、设置JSP页面的时区、绑定资源文件，使本地敏感的数据（例如数值、日期等）按照JSP页面中设置的本地格式显示。&lt;br/&gt;　　　　3）数据库标签库中包含&lt;span&gt;用于访问数据库和对数据库中的数据进行操作的标签&lt;/span&gt;。例如，从数据源中获得数据库连接、从数据库表中检索数据等。由于在软件分层的开发模型中，JSP页面仅用作表现层，&lt;/p&gt;
&lt;p&gt;　　　　　     我们一般不在JSP页面中直接操作数据库，而是在业务逻辑层或数据访问层操作数据库，所以，JSTL中提供的这套数据库标签库没有多大的实用价值。&lt;br/&gt;　　　　4）XML标签库中包含对&lt;span&gt;XML文档中的数据进行操作的标签&lt;/span&gt;。例如，解析XML文档、输出XML文档中的内容，以及迭代处理XML文档中的元素。&lt;/p&gt;
&lt;p&gt;　　　　　　 因为XML广泛应用于WEB开发，对XML文档的处理非常重要，XML标签库使处理XML文档变得简单方便，这也是JSTL的一个重要特征。 &lt;br/&gt;　　　　5）JSTL中提供的&lt;span&gt;一套EL自定义函数包含了JSP页面制作者经常要用到的字符串操作&lt;/span&gt;。例如，提取字符串中的子字符串、获取字符串的长度和处理字符串中的空格等。&lt;/p&gt;

&lt;p&gt;&amp;lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&amp;gt;&lt;/p&gt;
&lt;p&gt;讲解&amp;lt;c:out/&amp;gt;、&amp;lt;c:set/&amp;gt;、&amp;lt;c:remove/&amp;gt;、&amp;lt;c:if  test=&quot;&quot;/&amp;gt;、&amp;lt;c:choose  /&amp;gt;、&amp;lt;c:forTokens /&amp;gt;、&amp;lt;c:catch /&amp;gt; 、&amp;lt;c:url  /&amp;gt;、 &amp;lt;c:redirect /&amp;gt;、&amp;lt;c:forEach/&amp;gt;&lt;/p&gt;
&lt;h2&gt;2.1、&amp;lt;c:out/&amp;gt;标签&lt;/h2&gt;
&lt;p&gt;　　out ：将&lt;span&gt;指定内容输出到浏览&lt;/span&gt;器，默认支持el表达式。&lt;/p&gt;
&lt;p&gt;　　格式：　&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;c:out value=&quot;&quot; default=&quot;&quot; escapeXml /&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　value:输出的值，可以为EL表达式&lt;/p&gt;
&lt;p&gt;　　　　　　default：如果value属性的值不存在，会输出default属性值&lt;/p&gt;
&lt;p&gt;　　　　　　excapeXml：如果为&lt;span&gt;true，则会为value中的特殊字符进行转义，默认为true。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &amp;lt;c:&lt;span&gt;out&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;faker&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/c:&lt;span&gt;out&lt;/span&gt;&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;c:&lt;span&gt;out&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${empty eng}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/c:&lt;span&gt;out&lt;/span&gt;&amp;gt;&amp;lt;br /&amp;gt;    
    &amp;lt;c:&lt;span&gt;out&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${eng}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;default&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;没有eng对象&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/c:&lt;span&gt;out&lt;/span&gt;&amp;gt;    &amp;lt;br /&amp;gt;
    &amp;lt;c:&lt;span&gt;out&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;a&amp;gt;我是妞妞妞&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; escapeXml=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/c:&lt;span&gt;out&lt;/span&gt;&amp;gt;&amp;lt;br /&amp;gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结果：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009143903996-1909015798.png&quot; alt=&quot;&quot; width=&quot;326&quot; height=&quot;115&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.2、&amp;lt;c:set/&amp;gt;和&amp;lt;c:remove/&amp;gt;标签&lt;/h2&gt;
&lt;p&gt;　　1）&amp;lt;c:set/&amp;gt;&lt;/p&gt;
&lt;p&gt;　　set标签：给指定作用域设置内容&lt;/p&gt;
&lt;p&gt;　　格式一：&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;c:set   value=&quot; &quot;  var=&quot; &quot;   scope=&quot; &quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　value：设置值&lt;/p&gt;
&lt;p&gt;　　　　　　var：设置属性&lt;/p&gt;
&lt;p&gt;　　　　　　scope：设置作用域（page、reqeust、session、application）&lt;/p&gt;
&lt;p&gt;　　注：其实作用就相当于pageContext.setAttribute(var,value,scope);&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009145323043-609370632.png&quot; alt=&quot;&quot; width=&quot;613&quot; height=&quot;95&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结果：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009145359762-400673179.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　图中只介绍set标签的一种用法，其中&lt;span&gt;var不能接受EL表达式，只能是字符.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　格式二：　&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;c:set target=&quot;&quot; property=&quot;&quot; value=&quot;&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　target:跟var类似，但是它&lt;span&gt;能够接受EL表达式，可以是一个对象，一个map&lt;/span&gt;等，和var进行互补。（要修改的域对象的属性名（&lt;span&gt;必须是JavaBean或者Map&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;　　　　　　property:对象中的属性名　&lt;/p&gt;
&lt;p&gt;　　　　　　value:属性赋值&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009145525480-985013687.png&quot; alt=&quot;&quot; width=&quot;712&quot; height=&quot;65&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　使用哪种set标签，就看自己的需求了。&lt;/p&gt;
&lt;p&gt;　　2）&amp;lt;c:remove/&amp;gt;标签&lt;/p&gt;
&lt;p&gt;　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009145849855-224503610.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.3、&amp;lt;c:if  test=&quot;&quot;/&amp;gt;标签&lt;/h2&gt;
&lt;p&gt;　　&amp;lt;c:if&amp;gt;用于实现if语句的判断功能&lt;/p&gt;
&lt;p&gt;　　格式：&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;c:if test=&quot; &quot; var=&quot; &quot; scope=&quot; &quot;&amp;gt;&amp;lt;/c:if&amp;gt;　　　　&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　　　test：设置if判断的条件，用于判断标签体是否被执行（参数类型：boolean）&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　　　var：用于指定接收判断结果的变量名（参数类型：boolean）&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　　　　　scope：指定判断结果保存到哪个域（参数类型：String）&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　举例：　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &amp;lt;c:&lt;span&gt;set&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loginUser&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;angelbaby&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; scope=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;session&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/c:&lt;span&gt;set&lt;/span&gt;&amp;gt;
    &amp;lt;c:&lt;span&gt;if&lt;/span&gt; test=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${not empty sessionScope.loginUser }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; &amp;lt;%--当loginUser不为空时返回true--&amp;gt;&lt;span&gt;
        欢迎angelbaby
    &lt;/span&gt;&amp;lt;/c:&lt;span&gt;if&lt;/span&gt;&amp;gt;
    &amp;lt;c:&lt;span&gt;if&lt;/span&gt; test=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${empty sessionScope.loginUser }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;a href=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;登录&amp;lt;/a&amp;gt;
    &amp;lt;/c:&lt;span&gt;if&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;1&quot;&gt;2.4、&amp;lt;c:choose  /&amp;gt;、&amp;lt;c:when&amp;gt;、&amp;lt;c:otherwise&amp;gt;标签　&lt;/h2&gt;
&lt;p class=&quot;1&quot;&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009151547340-1504994305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　&amp;lt;c:choose&amp;gt;、&amp;lt;c:when&amp;gt;、&amp;lt;c:otherwise&amp;gt;三个标签配合使用，功能类似于Java中的if/else&lt;/p&gt;
&lt;p class=&quot;1&quot;&gt;　　 &amp;lt;c:choose&amp;gt;是&amp;lt;c:when&amp;gt;和&amp;lt;c:otherwise&amp;gt;的父标签&lt;/p&gt;
&lt;p&gt;　　 &amp;lt;c:when&amp;gt;的属性&lt;/p&gt;
&lt;p&gt;　　　　test：用于&lt;span&gt;设置判断条件，若正确则c:when中的代码执行，否则不执行&lt;/span&gt;（参数类型：boolean）&lt;/p&gt;
&lt;p&gt;　　 &amp;lt;c:otherwise&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　作用：如果所有的&amp;lt;c:when&amp;gt;都没有执行则执行&amp;lt;c:otherwise&amp;gt;的标签体&lt;/p&gt;
&lt;p&gt;　　举例1：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009151652012-943478660.png&quot; alt=&quot;&quot; width=&quot;366&quot; height=&quot;193&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　举例2：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;c:choose&amp;gt;
　　&amp;lt;c:when test=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${param.age&amp;gt;=18 }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
　　　　　　您已经成年
&lt;/span&gt;　　&amp;lt;/c:when&amp;gt;
　　&amp;lt;c:otherwise&amp;gt;&lt;span&gt;
　　　　　　您未成年
&lt;/span&gt;　　&amp;lt;/c:otherwise&amp;gt;
&amp;lt;/c:choose&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 2.5、&amp;lt;c:forEach/&amp;gt;标签&lt;/h2&gt;
&lt;p&gt;　　&amp;lt;c:forEach&amp;gt;用于&lt;span&gt;对多个对象的集合进行迭代，重复执行标签体，或者重复迭代固定的次数&lt;/span&gt;。（增强的for循环）&lt;/p&gt;
&lt;p&gt;　　格式：&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;c:forEach items=&quot;&quot; var=&quot;&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　&lt;span&gt;　var：&lt;/span&gt;用于存放遍历的每一项内容，存放在page作用域，只能在循环体中使用（也就是设置遍历出对象的名称）（参数类型：String）&lt;/p&gt;
&lt;p&gt;　　　　　&lt;span&gt;　items：&lt;/span&gt;需要遍历的对象（参数类型：数组、字符串和各种集合）&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　1）items为字符串或字符串数组&lt;/p&gt;
&lt;p&gt;　　　　　　为字符串，直接输出。为字符串数组，遍历输出&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009153356980-78502721.png&quot; alt=&quot;&quot; width=&quot;516&quot; height=&quot;203&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009153513684-366530431.png&quot; alt=&quot;&quot; width=&quot;316&quot; height=&quot;74&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　2）items为list集合&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009154203762-359915193.png&quot; alt=&quot;&quot; width=&quot;427&quot; height=&quot;216&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009154230871-1574359367.png&quot; alt=&quot;&quot; width=&quot;244&quot; height=&quot;85&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　3）items为map集合&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009154753559-232462237.png&quot; alt=&quot;&quot; width=&quot;427&quot; height=&quot;163&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009154816824-1700847201.png&quot; alt=&quot;&quot; width=&quot;261&quot; height=&quot;78&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　4）普通for循环&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009154930996-1394292190.png&quot; alt=&quot;&quot; width=&quot;487&quot; height=&quot;109&quot;/&gt;　　&lt;/p&gt;
&lt;p&gt;　　　　　　　　begin：从1开始&lt;/p&gt;
&lt;p&gt;　　　　　　　　end：到10结束&lt;/p&gt;
&lt;p&gt;　　　　　　　　step:每次加2&lt;/p&gt;
&lt;p&gt;　　　　　　　　var：循环的变量&lt;/p&gt;
&lt;h2&gt;2.6、&amp;lt;c:forTokens &amp;gt; 标签&lt;/h2&gt;
&lt;p&gt;　　将&lt;span&gt;自定义字符串，按照指定字符进行分割，并遍历输出&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　格式：&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;c:forTokens items=&quot;&quot; delims=&quot;&quot; var=&quot;&quot;&amp;gt;&amp;lt;/c:forTokens&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　items：自定义字符串&lt;/p&gt;
&lt;p&gt;　　　　　　delims：指定字符&lt;/p&gt;
&lt;p&gt;　　　　　　var：遍历的变量名。&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009155418262-526073201.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009155444574-1793390368.png&quot; alt=&quot;&quot; width=&quot;250&quot; height=&quot;75&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.7、&amp;lt;c:catch &amp;gt; 标签&lt;/h2&gt;
&lt;p&gt;　　相当于try catch&lt;/p&gt;
&lt;p&gt;　　格式：&lt;/p&gt;
&lt;p&gt;　　　　var：捕捉后的异常对象&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009155613746-672358845.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;117&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009155658840-810651873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.8、&amp;lt;c:url  /&amp;gt;标签&lt;/h2&gt;
&lt;p&gt;　　记得讲session的时候，&lt;span&gt;如果cookie禁用了，那么只能将url进行重写才能让session继续生效&lt;/span&gt;，而使用的api是&lt;span&gt;response.encodeURL();就是将SESSIONID当作参数带过来，而url标签的作用就是实现类似功能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　格式：&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;c:url value=&quot;&quot; var=&quot;&quot; scope=&quot;&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　value：设置要处理的URI地址，注意这里要以/开头（可接受参数：String）　　&lt;/p&gt;
&lt;p&gt;　　　　　　var：如果&lt;span&gt;写了该变量，那么就会将其重写后的url存入page作用域中&lt;/span&gt;，如果scope没有的话，默认就是page，否则以scope属性值为准，在&lt;span&gt;作用域范围内就可以直接拿着这个变量使用了&lt;/span&gt;。（修改后存储到域对象中的uri属性名）&lt;/p&gt;
&lt;p&gt;　　　　　　scope:作用域范围，默认是page。（ 可接受参数：String）&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009160611902-1758588360.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　测试：&lt;/p&gt;
&lt;p&gt;　　　　　　访问后点击超链接&lt;/p&gt;
&lt;p&gt;　　　　　　没有关闭cookie，所以不会将SESSIONID写入url中 。&lt;/p&gt;
&lt;p&gt;　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009160658246-588783892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.9、&amp;lt;c:redirect /&amp;gt;标签&lt;/h2&gt;
&lt;p&gt;　　 &amp;lt;c:redirect&amp;gt;主要用于&lt;span&gt;将请求重定向到另一个资源地址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　格式：&lt;/p&gt;
&lt;p&gt;　　　　uri：指定要重定向到的目标地址，注意这里指定绝对路径会自动加上项目名（ 参数类型：String）&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009161111230-264128148.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.10、&amp;lt;c:import /&amp;gt;标签&lt;/h2&gt;
&lt;p&gt;　　类似于JSP的include行为和include指令，JSTL也提供了include功能的标签&amp;lt;c:import/&amp;gt;，不过import标签功能更强大，甚至可以把Internet上的网页包含进来。&lt;/p&gt;
&lt;p&gt;　　&amp;lt;c:import url=&quot;http://www.baidu.com&quot; charEncoding=&quot;utf-8&quot;/&amp;gt;&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009161256980-1135585134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结果：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171009161500465-1090799942.png&quot; alt=&quot;&quot; width=&quot;613&quot; height=&quot;160&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.1、fmt标签库概述&lt;/h2&gt;
&lt;p&gt;　　为了简化WEB应用的国际化开发，JSTL中提供了&lt;span&gt;一个用于实现国际化和格式化功能的标签库&lt;/span&gt;，我们将其简称为国际化标签库，J&lt;span&gt;SP规范为国际化标签库建议的前缀名为fmt&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　国际化标签库中包括了一组用于实现WEB国际化功能的标签，这组标签封装了Java语言中java.util和java.text这两个包中与国际化相关的API类的功能。&lt;/p&gt;
&lt;p&gt;　　国际化标签库中提供了绑定资源包和从资源包中的本地资源文件内读取文本内容的标签，也提供了对数值和日期等本地敏感的数据按本地化信息进行显示和解析的标签，还提供了按本地特定的时区来调整时间的标签。　　&lt;/p&gt;
&lt;h2&gt;3.2、fmt的使用&lt;/h2&gt;
&lt;p&gt;　　使用前：&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix=&quot;fmt&quot;%&amp;gt;&lt;/p&gt;
&lt;p&gt;　　这个标签库其实用的不多，我们就简单介绍一下&lt;/p&gt;
&lt;p&gt;　　1）&amp;lt;fmt:requestEncoding/&amp;gt;设置编码&lt;/p&gt;
&lt;p&gt;　　　　标签只有一个属性，value&lt;/p&gt;
&lt;p&gt;　　　　相当于Java中的request.setCharacterEncoding(&quot;&quot;);&lt;/p&gt;
&lt;p&gt;　　　　post&lt;span&gt;提交中文参数，使用&amp;lt;fmt:requestEncoding value=&quot;utf-8&quot;/&amp;gt;来设置编码，就不会出现中文乱码了&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　get提交中文参数，该标签就会失效，除非到TOMCAT的server.xml中，将URLEncoding设置为UTF-8(默认为ISO-8859-1)。&lt;/p&gt;
&lt;p&gt;　　2）&amp;lt;fmt:setLocale/&amp;gt;显示所有地区的数据格式&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;大概就讲这些了，如果要用的话，到时候在详细查资料！喜欢 就点个“推荐”哦！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 09 Oct 2017 10:49:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7640282.html</dc:identifier>
</item>
</channel>
</rss>