<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【被玩坏的博客园】之canvas装饰博客园侧边栏 - 落花落雨不落叶</title>
<link>http://www.cnblogs.com/hongrunhui/p/7856380.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hongrunhui/p/7856380.html</guid>
<description>

&lt;p&gt;最近抽空学了学canvas,然后用canvas做了个小球运动的demo,大致的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/726124/201711/726124-20171118114732843-479829127.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然网上已经有很多这样的demo,但是还是想根据自己的思路来写一个，下面先跟大家讲解一下源代码，先看html代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;ie=edge&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      html, body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
          padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
          margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
          width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
          height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
      &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
      canvas &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        background-image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; linear-gradient(-50deg,RGB(255, 106, 100),RGB(71, 0, 182))&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;对canvas做背景颜色渐变处理，第一个参数是角度，后面2个是起始颜色，这个我就不细讲了，查查就知道&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;}&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;canvas &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;canvas&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./index.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;html很简单，没啥讲的，就是css那块兼容性你们注意下就好（我懒，没写兼容），再看看canvas的js处理代码，就是上面引入的index.js(讲解都写在注释里了，写的比较基础，方便没多少基础的人看)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
window.onload = &lt;span&gt;function&lt;/span&gt;(){&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 页面加载完了之后再处理&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; canvas = document.getElementById('canvas'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; body = document.getElementsByTagName('body')[0];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;getElementsByTagName是以标签名获取元素，返回是一个数组，所以用[0]&lt;/span&gt;
    canvas.width = body.clientWidth;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取body的【客户端宽度】，这个时候body已经加载完成了，页面大小已经形成。&lt;/span&gt;
    canvas.height =&lt;span&gt; body.clientHeight;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bound = canvas.getBoundingClientRect();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个叫做获取边界客户端矩形，可以用来获取canvas的长宽&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; ctx = canvas.getContext('2d');&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取canvas的上下文环境（可以理解为买下一个画笔）&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; width = bound.width, height =&lt;span&gt; bound.height;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; circleConfig = {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置信息&lt;/span&gt;
        ballNums: 300,&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的数量&lt;/span&gt;
        fillColor: 'rgba(255, 255, 255, .5)',&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的填充颜色&lt;/span&gt;
        radius: 1&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的半径&lt;/span&gt;
&lt;span&gt;    };
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; circle = &lt;span&gt;new&lt;/span&gt; Circle(circleConfig);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化球&lt;/span&gt;
    circle.init();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; zoom=&lt;span&gt;function&lt;/span&gt;(e){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个函数是用来缩放球的大小的，简单做了个缩放改变球的效果，目前可能就在chrome下有用&lt;/span&gt;
          &lt;span&gt;var&lt;/span&gt; e = e ||&lt;span&gt; window.event; 
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!e.deltaX) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 缩放的时候这个值是为0或-0的&lt;/span&gt;
              &lt;span&gt;if&lt;/span&gt; (e.deltaY &amp;lt; 0) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 小于0好像是放大吧&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (circleConfig.radius) {
                    circleConfig.radius &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; circle = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Circle({
                        ballNums: &lt;/span&gt;300&lt;span&gt;,
                        fillColor: &lt;/span&gt;'rgba(255, 255, 255, .5)'&lt;span&gt;,
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; radius: 1&lt;/span&gt;
&lt;span&gt;                    });
                    circle.init();
                }
                
              }
              &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;circleConfig.radius) {
                    circleConfig.radius &lt;/span&gt;= 1&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; circle = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Circle({
                        ballNums: &lt;/span&gt;300&lt;span&gt;,
                        fillColor: &lt;/span&gt;'rgba(255, 255, 255, .5)'&lt;span&gt;,
                        radius: &lt;/span&gt;1&lt;span&gt;
                    });
                    circle.init();
                }
              }
          }
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(e.wheelDelta &amp;amp;&amp;amp; event.ctrlKey){&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 禁止网页缩放&lt;/span&gt;
               event.returnValue = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
          }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(e.detail){
              
               event.returnValue &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
          } 
    }  
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(document.addEventListener){ 
        document.addEventListener(&lt;/span&gt;'DOMMouseScroll' , zoom , &lt;span&gt;false&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 兼容火狐&lt;/span&gt;
&lt;span&gt;    }
    window.onmousewheel &lt;/span&gt;= document.onmousewheel = zoom;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 除火狐之外的浏览器&lt;/span&gt;
    &lt;span&gt;function&lt;/span&gt; Circle(o) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 好了，这里才是故事真正开始的地方&lt;/span&gt;
        o = o ||&lt;span&gt; {};
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.instance = [];&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以理解为实例数组，用来存球的&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.maxLineLength = o.maxLineLength || 100;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最大线长度，就是2个球在这个距离内会在之间画根线&lt;/span&gt;
        &lt;span&gt;function&lt;/span&gt;&lt;span&gt; Ball() {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.radius = o.radius || (o.MaxRadius || 20) *&lt;span&gt; Math.random();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.startDeg = 0;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开始角度&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.endDeg = Math.PI * 2;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 终结角度&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.clockWay = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 顺时针还是逆时针&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.fillColor = o.fillColor || randomColor();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 填充颜色&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.borderColor = 'transparent';&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的border设置为透明的不然难看&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.dirX = 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的水平方向（控制正反）&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.dirY = 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如上&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.speed = o.speed || 1 * Math.random() - 0.3;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的移动速度&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.X = getRandom(width);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里是初始化球的起始位置，值是0-width&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.Y =&lt;span&gt; getRandom(height);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.resetDir = &lt;span&gt;function&lt;/span&gt;() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制方向&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; X的位置如果小于半径或者大于canvas的宽度-半径就改变方向，Y同理&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.X &amp;lt; &lt;span&gt;this&lt;/span&gt;.radius || &lt;span&gt;this&lt;/span&gt;.X &amp;gt; width - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.radius) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dirX = -&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dirX;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Y &amp;lt; &lt;span&gt;this&lt;/span&gt;.radius || &lt;span&gt;this&lt;/span&gt;.Y &amp;gt; height - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.radius) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dirY = -&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dirY;
                }  
            };
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.init = &lt;span&gt;function&lt;/span&gt;() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的初始化&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.move();
            };
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.move = &lt;span&gt;function&lt;/span&gt;() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这个就是移动球，每执行一次就检查方向和改变XY的带系喔啊&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.resetDir();
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.X += &lt;span&gt;this&lt;/span&gt;.dirX * &lt;span&gt;this&lt;/span&gt;.speed;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 移动&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;.Y += &lt;span&gt;this&lt;/span&gt;.dirY * &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.speed;
            };
            
        }
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.ball =&lt;span&gt; {

        };
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.arc = &lt;span&gt;function&lt;/span&gt;() {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 画圆函数&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ctx.translate(this.X, this.Y);&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.instance.length; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ball = &lt;span&gt;this&lt;/span&gt;.instance[i];&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从实例数组中取出来&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ctx.save();// 保存状态&lt;/span&gt;
                ctx.fillStyle = ball.fillColor;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的填充颜色 (准备好填充颜料)&lt;/span&gt;
                ctx.strokeStyle = ball.borderColor;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的线就是border（理解为准备好颜料）&lt;/span&gt;
                ctx.beginPath();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开始路径，可以理解为拿起画笔&lt;/span&gt;
                ctx.arc(ball.X, ball.Y, ball.radius, ball.startDeg, ball.endDeg, &lt;span&gt;this&lt;/span&gt;.clockWay);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 画圆&lt;/span&gt;
                ctx.fill(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 填充圆（就相当于给圆上色）&lt;/span&gt;
                ctx.closePath();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 放下笔&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ctx.restore();&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j = i + 1; j &amp;lt; &lt;span&gt;this&lt;/span&gt;.instance.length; j++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; s = Math.pow(ball.X - &lt;span&gt;this&lt;/span&gt;.instance[j].X, 2) + Math.pow(ball.Y - &lt;span&gt;this&lt;/span&gt;.instance[j].Y, 2&lt;span&gt;);
                        s &lt;/span&gt;= Math.sqrt(s);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取圆与圆之间的距离，x的平方加y的平方然后开根号，初中数学知识&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (s &amp;lt; &lt;span&gt;this&lt;/span&gt;.maxLineLength) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 判断什么时候可以画线&lt;/span&gt;
&lt;span&gt;                        ctx.beginPath();
                        ctx.moveTo(ball.X, ball.Y);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把笔移动到&lt;/span&gt;
                        ctx.lineTo(&lt;span&gt;this&lt;/span&gt;.instance[j].X, &lt;span&gt;this&lt;/span&gt;.instance[j].Y);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 画线到这个位置&lt;/span&gt;
                        ctx.strokeStyle = 'rgba(255, 255, 255, ' + (&lt;span&gt;this&lt;/span&gt;.maxLineLength - s) / (&lt;span&gt;this&lt;/span&gt;.maxLineLength * 1.3)+')'&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上面是调整线的颜色&lt;/span&gt;
                        ctx.strokeWidth = 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 线宽&lt;/span&gt;
                        ctx.stroke();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 画&lt;/span&gt;
&lt;span&gt;                        ctx.closePath();
                    }
                }
            }
        };
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.draw = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            ctx.clearRect(&lt;/span&gt;0,0,width,height);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 你要是把这个给注了你会发现不一样的世界&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.arc();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行画圆函数&lt;/span&gt;
&lt;span&gt;        };
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.move = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.instance.length; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ball = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.instance[i];
                ball.init();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 球的初始化函数，其实跟ball.move()是一样的，就是改变球的位置&lt;/span&gt;
&lt;span&gt;                
            }
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.draw();
            requestAnimationFrame(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.move.bind(&lt;span&gt;this&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里用bind是强行改变move函数的上下文环境，不然在requestAnimationFrame中的this会变得&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; requestAnimationFrame 请求动画帧，可以理解为控制函数执行的频率（本来这里可以用递归执行，但是递归控制不了频率，会卡死页面的，setTimeout也可以实现类似的效果）&lt;/span&gt;
&lt;span&gt;        };
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.init = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; o.ballNums; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.instance.push(&lt;span&gt;new&lt;/span&gt; Ball()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化球               &lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.move();
        };
        
    }
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getRandom(s) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Math.ceil(Math.random() * s);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取0 -（s-1）之间的值&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; randomColor() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'rgba('+getRandom(255)+','+getRandom(255)+','+getRandom(255)+','+Math.random()+')'&lt;span&gt;;
    };
  };
  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;写完之后，还是想把他应用起来的，所以我就想用来他装饰博客园的侧边栏，所以进到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/726124/201711/726124-20171118122259718-1314099751.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;把上面的js改了改，插入到博客园页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/726124/201711/726124-20171118122359796-96710216.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;完整代码如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;
&lt;span&gt;var&lt;/span&gt; sideBar = document.getElementById('home'&lt;span&gt;);
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas = document.createElement('canvas'&lt;span&gt;);
      canvas.id &lt;/span&gt;= 'canvas'&lt;span&gt;;
      sideBar.appendChild(canvas);
window.onload &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas = document.getElementById('canvas'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; var body = document.getElementById('home');&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; body = document.getElementsByTagName('html')[0&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; header = document.getElementById('header'&lt;span&gt;);
    canvas.width &lt;/span&gt;=&lt;span&gt; header.clientWidth;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; canvas.height = body.clientHeight;&lt;/span&gt;
    canvas.height =&lt;span&gt; window.screen.height;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bound =&lt;span&gt; canvas.getBoundingClientRect();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = canvas.getContext('2d'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; width = bound.width, height =&lt;span&gt; bound.height;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; submit = document.getElementById('btn_comment_submit'&lt;span&gt;);
    submit &lt;/span&gt;&amp;amp;&amp;amp; submit.addEventListener('click', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
body &lt;/span&gt;= document.getElementsByTagName('html')[0&lt;span&gt;];
canvas.height &lt;/span&gt;=&lt;span&gt; window.screen.height;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; circle = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Circle({
        ballNums: &lt;/span&gt;100&lt;span&gt;,
        fillColor: &lt;/span&gt;'rgba(255, 255, 255, .5)'&lt;span&gt;,
radius:&lt;/span&gt;1&lt;span&gt;
    });
    circle.init();
},&lt;/span&gt;1000&lt;span&gt;);
});
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; circle = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Circle({
        ballNums: &lt;/span&gt;100&lt;span&gt;,
        fillColor: &lt;/span&gt;'rgba(255, 255, 255, .5)'&lt;span&gt;,
radius: &lt;/span&gt;1&lt;span&gt;
    });
    circle.init();
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Circle(o) {
        o &lt;/span&gt;= o ||&lt;span&gt; {};
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.instance =&lt;span&gt; [];
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.maxLineLength = o.maxLineLength || 100&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Ball() {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.radius = o.radius || (o.MaxRadius || 20) *&lt;span&gt; Math.random();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.startDeg = 0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.endDeg = Math.PI * 2&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.clockWay = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fillColor = o.fillColor ||&lt;span&gt; randomColor();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.borderColor = 'transparent'&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dirX = 1&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dirY = 1&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.speed = o.speed || 1 * Math.random() - 0.3&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.X =&lt;span&gt; getRandom(width);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Y =&lt;span&gt; getRandom(height);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.resetDir = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.X &amp;lt; &lt;span&gt;this&lt;/span&gt;.radius || &lt;span&gt;this&lt;/span&gt;.X &amp;gt; width - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.radius) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dirX = -&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dirX;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.Y &amp;lt; &lt;span&gt;this&lt;/span&gt;.radius || &lt;span&gt;this&lt;/span&gt;.Y &amp;gt; height - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.radius) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dirY = -&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dirY;
                }  
            };
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.init = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.move();
            };
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.move = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.resetDir();
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.X += &lt;span&gt;this&lt;/span&gt;.dirX * &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.speed;
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Y += &lt;span&gt;this&lt;/span&gt;.dirY * &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.speed;
            };
            
        }
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.ball =&lt;span&gt; {

        };
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.arc = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ctx.translate(this.X, this.Y);&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.instance.length; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ball = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.instance[i];
                ctx.save();
                ctx.fillStyle &lt;/span&gt;=&lt;span&gt; ball.fillColor;
                ctx.strokeStyle &lt;/span&gt;=&lt;span&gt; ball.borderColor;
                ctx.beginPath();
                ctx.arc(ball.X, ball.Y, ball.radius, ball.startDeg, ball.endDeg, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.clockWay);
                ctx.fill(); 
                ctx.closePath();
                ctx.restore();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j = i + 1; j &amp;lt; &lt;span&gt;this&lt;/span&gt;.instance.length; j++&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; s = Math.pow(ball.X - &lt;span&gt;this&lt;/span&gt;.instance[j].X, 2) + Math.pow(ball.Y - &lt;span&gt;this&lt;/span&gt;.instance[j].Y, 2&lt;span&gt;);
                        s &lt;/span&gt;=&lt;span&gt; Math.sqrt(s);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (s &amp;lt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.maxLineLength) {
                        ctx.beginPath();
                        ctx.moveTo(ball.X, ball.Y);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把笔移动到&lt;/span&gt;
                        ctx.lineTo(&lt;span&gt;this&lt;/span&gt;.instance[j].X, &lt;span&gt;this&lt;/span&gt;.instance[j].Y);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 画线到这个位置&lt;/span&gt;
                        ctx.strokeStyle = 'rgba(255, 255, 255, ' + (&lt;span&gt;this&lt;/span&gt;.maxLineLength - s) / (&lt;span&gt;this&lt;/span&gt;.maxLineLength * 1.3)+')'&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 上面是调整线的颜色&lt;/span&gt;
                        ctx.strokeWidth = 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 线宽&lt;/span&gt;
                        ctx.stroke();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 画&lt;/span&gt;
&lt;span&gt;                        ctx.closePath();
                    }
                }
            }
        };
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.draw = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            ctx.clearRect(&lt;/span&gt;0,0&lt;span&gt;,width,height);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.arc();
        };
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.move = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; &lt;span&gt;this&lt;/span&gt;.instance.length; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ball = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.instance[i];
                ball.init();
                
            }
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.draw();
            requestAnimationFrame(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.move.bind(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;));
        };
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.init = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; o.ballNums; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.instance.push(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ball());                
            }
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.move();
        };
        
    }
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getRandom(s) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Math.ceil(Math.random() *&lt;span&gt; s);
    }
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; randomColor() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 'rgba('+getRandom(255)+','+getRandom(255)+','+getRandom(255)+','+Math.random()+')'&lt;span&gt;;
    };
  };
  
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后再调整下CSS代码，就可以达到我博客的左边侧边栏动画效果，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/726124/201711/726124-20171118122647640-1125633020.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;canvas的源代码：&lt;a title=&quot;https://github.com/lhlybly/canvas-circle&quot; href=&quot;https://github.com/lhlybly/canvas-circle&quot; target=&quot;_blank&quot;&gt;https://github.com/lhlybly/canvas-circle&lt;/a&gt;，欢迎star&lt;/p&gt;

&lt;p&gt;写在这里只是希望更多的人一起来学习，一起享受代码的作用，项目代码中还有很多优化的地方，欢迎大牛拍砖，也希望刚入门的人你呢个看懂，不懂可以留言问我。&lt;/p&gt;
&lt;p&gt;PS: 抽空我会优化刚进页面左边白屏的问题 &lt;/p&gt;
</description>
<pubDate>Sat, 18 Nov 2017 04:43:00 +0000</pubDate>
<dc:creator>落花落雨不落叶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hongrunhui/p/7856380.html</dc:identifier>
</item>
<item>
<title>MarkdownPad2使用代码高亮插件 - 伪代码</title>
<link>http://www.cnblogs.com/freezyh/p/7855051.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/freezyh/p/7855051.html</guid>
<description>&lt;p&gt;&lt;span&gt;MarkdownPad 2有插入代码块的功能，但样式却不尽人意，但又不想换个编辑器，找了挺多相关资料，最后在MarkdownPad 2集成prettify高亮插件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下相关资料：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://blog.csdn.net/qiujuer/article/details/41413059&quot; target=&quot;_blank&quot;&gt;[HTML] Prettify 代码高亮使用总结&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;link_title&quot;&gt;&lt;a href=&quot;http://blog.csdn.net/u011127019/article/details/77165062&quot;&gt;Google Code Prettify，代码高亮的JS库&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.csweigou.com/article/565.html&quot; target=&quot;_blank&quot;&gt;详解Google Code Prettify代码高亮Prettify.js库使用及其应用&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.bootcdn.cn/prettify/&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;link_title&quot;&gt;prettify的bootcdn&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/code-prettify&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;prettify的github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;你可以下载后引用，也可以直接引用bootcdn。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体步骤：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.打开MarkdownPad2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118105353656-723114330.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.打开链接http://www.bootcdn.cn/prettify/ 分别复制这两个文件标签&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118105631984-334879818.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.在MarkdownPad2中的菜单中，点击【工具】——【选项】或者直接F7可以看到如下图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118105949624-1518605911.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.点击【高级】——【HTML Head编辑器】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118110200077-725597707.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;5.分别将复制的引用的标签粘贴上去，并且加上片段代码，保存并关闭&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118110321687-2025773536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.现在加入代码块的要求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pre &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;prettyprint lang-javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;  
function getNowDate() {
    var date = new Date();
    var split = &quot;-&quot;;
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var strDate = date.getDate();
    if (month &amp;gt;= 1 &amp;amp;&amp;amp; month &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;= 9&lt;/span&gt;&lt;span&gt;) {
        month &lt;/span&gt;&lt;span&gt;= &quot;0&quot;&lt;/span&gt;&lt;span&gt; + month;
    }
    if (strDate &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;= 0 &amp;amp;&amp;amp; strDate &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;= 9&lt;/span&gt;&lt;span&gt;) {
        strDate &lt;/span&gt;&lt;span&gt;= &quot;0&quot;&lt;/span&gt;&lt;span&gt; + strDate;
    }
    var currentdate &lt;/span&gt;&lt;span&gt;= year &lt;/span&gt;&lt;span&gt;+ split + month + split + strDate;
    return currentdate;
}
&amp;lt;/pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 插入的代码必须放到&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;pre class=&quot;prettyprit lang-指定样式&quot;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在看下效果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118114335952-906207593.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们都知道MarkdownPad2是实时预览，跟浏览器是有区别的，我们按F6浏览器查看&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118114610546-1084480001.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;或许这不是实时预览的效果，但我们没必要非得编辑的时候看到高亮效果，比如说我们每次去阅读自己的写md笔记，每次都得打开&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MarkdownPad2来查看，我们把代码高亮配置好了，直接插入代码就行了，写完以后我们可以导出html,导出pdf是没有效果的，这里说下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为我引用的是线上的链接，所以导出来的html要有网络才能看到高亮效果，如果没网络，可以下载下来，添加css和javascript&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面改下高亮主题：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打开github https://github.com/google/code-prettify/tree/master/styles&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;里面有多个主题，相关资料也有提到，这里我就直接用sunburst.css的主题样式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;步骤如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.按F7，点击【样式表】，添加sunburst.css，把样式粘贴，点击保存并关闭&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Pretty printing styles. Used with prettify.js. &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Vim sunburst theme by David Leibovic &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

pre .str, code .str &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #65B042&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; string  - green &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .kwd, code .kwd &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #E28964&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; keyword - dark pink &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .com, code .com &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #AEAEAE&lt;/span&gt;;&lt;span&gt; font-style&lt;/span&gt;:&lt;span&gt; italic&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; comment - gray &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .typ, code .typ &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #89bdff&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; type - light blue &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .lit, code .lit &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #3387CC&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; literal - blue &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .pun, code .pun &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; punctuation - white &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .pln, code .pln &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; plaintext - white &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .tag, code .tag &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #89bdff&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; html/xml tag    - light blue &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .atn, code .atn &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #bdb76b&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; html/xml attribute name  - khaki &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .atv, code .atv &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #65B042&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; html/xml attribute value - green &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pre .dec, code .dec &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #3387CC&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; decimal - blue rgb(47, 54, 64) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

pre.prettyprint, code.prettyprint &lt;/span&gt;{&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; #000&lt;/span&gt;;&lt;span&gt;
    border-radius&lt;/span&gt;:&lt;span&gt; 8px&lt;/span&gt;;
}&lt;span&gt;

pre.prettyprint &lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 95%&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 1em auto&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 1em&lt;/span&gt;;&lt;span&gt;
    white-space&lt;/span&gt;:&lt;span&gt; pre-wrap&lt;/span&gt;;
}


&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Specify class=linenums on a pre to get line numbering &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
ol.linenums &lt;/span&gt;{&lt;span&gt; margin-top&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt; margin-bottom&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #AEAEAE&lt;/span&gt;; } &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; IE indents via margin-left &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8 &lt;/span&gt;{&lt;span&gt; list-style-type&lt;/span&gt;:&lt;span&gt; none &lt;/span&gt;}
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Alternate shading for lines &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
li.L1,li.L3,li.L5,li.L7,li.L9 &lt;/span&gt;{ }&lt;span&gt;

@media print &lt;/span&gt;{&lt;span&gt;
  pre .str, code .str { color&lt;/span&gt;:&lt;span&gt; #060&lt;/span&gt;; }&lt;span&gt;
  pre .kwd, code .kwd &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #006&lt;/span&gt;;&lt;span&gt; font-weight&lt;/span&gt;:&lt;span&gt; bold&lt;/span&gt;; }&lt;span&gt;
  pre .com, code .com &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #600&lt;/span&gt;;&lt;span&gt; font-style&lt;/span&gt;:&lt;span&gt; italic&lt;/span&gt;; }&lt;span&gt;
  pre .typ, code .typ &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #404&lt;/span&gt;;&lt;span&gt; font-weight&lt;/span&gt;:&lt;span&gt; bold&lt;/span&gt;; }&lt;span&gt;
  pre .lit, code .lit &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #044&lt;/span&gt;; }&lt;span&gt;
  pre .pun, code .pun &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #440&lt;/span&gt;; }&lt;span&gt;
  pre .pln, code .pln &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #000&lt;/span&gt;; }&lt;span&gt;
  pre .tag, code .tag &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #006&lt;/span&gt;;&lt;span&gt; font-weight&lt;/span&gt;:&lt;span&gt; bold&lt;/span&gt;; }&lt;span&gt;
  pre .atn, code .atn &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #404&lt;/span&gt;; }&lt;span&gt;
  pre .atv, code .atv &lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt; #060&lt;/span&gt;; }&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实时效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118115944452-538950446.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;浏览器效果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1100424/201711/1100424-20171118120028952-278476813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们不能总是实时看到的代码块乌漆嘛黑，总得能看到代码嘛，所以改下样式&lt;br/&gt;前面我们插入的主题样式代码&lt;/span&gt;&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
pre.prettyprint, code.prettyprint {
    background-color: #000;
    border-radius: 8px;
}&lt;br/&gt;&lt;span readability=&quot;5&quot;&gt;把背景色#000改为：rgb(47, 54, 64)，再看效果。&lt;p&gt;此次代码高亮只能改善下导出html能高亮（浏览器查看），至于其他能实时看到高亮效果的办法目前没有找到，其他&lt;br/&gt;md编辑器或许有实时高亮这里就不再累赘，喜欢用MarkdownPad2的朋友还是不错的，当然也可以自定义自己喜欢的高亮样式。&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 18 Nov 2017 04:12:00 +0000</pubDate>
<dc:creator>伪代码</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/freezyh/p/7855051.html</dc:identifier>
</item>
<item>
<title>Python——网络爬虫 - 闪电gogogo</title>
<link>http://www.cnblogs.com/wwf828/p/7657218.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wwf828/p/7657218.html</guid>
<description>&lt;p&gt;&lt;span&gt;此篇文章继续跟着小甲鱼的视频来初学网络爬虫，除了小甲鱼的网站上可下载视频，发现b站上也有全套的视频哦，会比下载来的更方便些。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;网络爬虫，又称为网页蜘蛛（WebSpider），非常形象的一个名字。如果你把整个互联网想象成类似于蜘蛛网一样的构造，那么我们这只爬虫，就是要在上边爬来爬去，顺便获得我们需要的资源。我们之所以能够通过百度或谷歌这样的搜索引擎检索到你的网页，靠的就是他们大量的爬虫每天在互联网上爬来爬去，对网页中的每个关键词进行索引，建立索引数据库。在经过复杂的算法进行排序后，这些结果将按照与搜索关键词的相关度高低，依次排列。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1 urllib模块&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;urllib模块实际上是综合了url和lib的一个包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;url的一般格式为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protocol://hostname[:port]/path/[;parameters][?query]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;fragment&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;URL 由三部分组成：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一部分是协议：http,https,ftp,file,ed2k…&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二部分是存放资源的服务器的域名系统或IP地址（有时候要包含端口号，各种传输协议都有默认的端口，如http的默认端口是80）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三部分是资源的具体地址，如目录或者文件名等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;举一个例子说明：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
response &lt;/span&gt;= urllib.request.urlopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.fishc.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
html &lt;/span&gt;=&lt;span&gt; response.read()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;二进制数据&lt;/span&gt;
&lt;span&gt;
html &lt;/span&gt;= html.decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;对二进制数据解码&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(html)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;当遇到不了解的模块时，可通过IDLE中Help中打开Python的文档进行搜索查看，也可以使用print(模块名.__doc__)或者help(模块名)进行属性和使用方法的查看。如下为文档中urlopen的用法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171012173855715-1462757980.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实例1：在placekitten网站下载一只猫的图片&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
response &lt;/span&gt;= urllib.request.urlopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://placekitten.com/g/300/300&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;urlopen返回一个对象&lt;/span&gt;
cat_img = response.read()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;对象均可用print()打印出来  # response.geturl() 得到url  #response.getcode() 返回值200，说明网站正常响应  response.info()得到文件信息&lt;/span&gt;
with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_300_300.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
    f.write(cat_img)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可看到在当前运行目录下已成功下载了图片。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;urlopen的url参数既可以是字符串也可以是一个request对象，则我们还可以将代码写成如下形式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
req &lt;/span&gt;= urllib.request.Request(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://placekitten.com/g/300/300&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
response &lt;/span&gt;=&lt;span&gt; urllib.request.urlopen(req)

cat_img &lt;/span&gt;=&lt;span&gt; response.read()
with open(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_500_600.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
    f.write(cat_img)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;实例2：利用百度翻译进行翻译&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;小甲鱼的视频中的实例是有道翻译，运行结果如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171012220606809-158444705.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看弹幕说是有道翻译加了反爬虫机制，所以自己用百度翻译做了一个，研究了好一会儿，新手还是懵懵懂懂的，不过做出来了还是很开心的。代码如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.parse
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
    content &lt;/span&gt;= input(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入需要翻译的内容(退出q)：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; content &lt;span&gt;in&lt;/span&gt;[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:

        url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://fanyi.baidu.com/v2transapi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

        data&lt;/span&gt;=&lt;span&gt;{}
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zh&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; content
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;transtype&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;translang&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple_means_flag&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 3&lt;span&gt;

        data &lt;/span&gt;= urllib.parse.urlencode(data).encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


        response &lt;/span&gt;=&lt;span&gt; urllib.request.urlopen(url,data)
        html &lt;/span&gt;= response.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        target &lt;/span&gt;=&lt;span&gt; json.loads(html)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;翻译结果为：%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(target[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;trans_result&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dst&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;打开翻译首页，点击翻译，在Network中找打方法为post的项，各个浏览器可能有差异，可尝试在Network里的XHR中查找。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码中的url和data是复值表头中的url和Form Data，在IE浏览器中我找了好久，下面分别为360浏览器和IE浏览器的截图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;360：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171012221258559-1983112496.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IE：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171012221438309-1119792678.png&quot; alt=&quot;&quot; width=&quot;1409&quot; height=&quot;307&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接着我们解释此行代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data = urllib.parse.urlencode(data).encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171012223010590-763128958.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当data未赋值时，是以GET的方式提交，当data赋值后，POST将会取代GET将数据提交。如上图所示，data必须基于某一模式，我们使用urllib.parse.urlencode()即可将字符串转换为需要的模式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码中使用了josen模块，因为直接打印出html出来的是json格式的数据不利于直接观看。最终运行结果如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171012223715887-940031497.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2 隐藏&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;为什么要进行隐藏操作？因为如果一个IP在一定时间访问过于频繁，那么就会被被访问网站进行反爬虫拦截，无法进行我们爬虫的后续工作了，所以要给爬虫披上一层神秘的面纱，从而瞒天过海喽~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;两种方法隐藏（修改）headers：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）通过Request的headers参数修改&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）通过Request.add_header(key,val)方法修改&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;文档中说到headers必须是字典的形式，所以方法（1）直接通过增加字典键和对应值的方式来进行隐藏，如下所示，找到Request Headers中的User-Agent对应的值进行添加。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.parse
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
    content &lt;/span&gt;= input(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入需要翻译的内容(退出q)：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; content &lt;span&gt;in&lt;/span&gt;[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:

        url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://fanyi.baidu.com/v2transapi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

        head &lt;/span&gt;=&lt;span&gt; {}
        head[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

        data&lt;/span&gt;=&lt;span&gt;{}
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zh&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; content
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;transtype&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;translang&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple_means_flag&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 3&lt;span&gt;

        data &lt;/span&gt;= urllib.parse.urlencode(data).encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

        req &lt;/span&gt;=&lt;span&gt; urllib.request.Request(url,data,head)
        response &lt;/span&gt;=&lt;span&gt; urllib.request.urlopen(req)
        html &lt;/span&gt;= response.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        
        target &lt;/span&gt;=&lt;span&gt; json.loads(html)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;翻译结果为：%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(target[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;trans_result&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dst&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;运行结果及headers是否正确输入的检查：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;请输入需要翻译的内容(退出q)：love
翻译结果为：爱
请输入需要翻译的内容(退出q)：q
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; req.headers &lt;span&gt;#&lt;/span&gt;&lt;span&gt;检查&lt;/span&gt;
{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;第二种方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.parse
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
    content &lt;/span&gt;= input(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入需要翻译的内容(退出q)：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; content &lt;span&gt;in&lt;/span&gt;[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:

        url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://fanyi.baidu.com/v2transapi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;#        head = {}&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;#        head['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'&lt;/span&gt;
&lt;span&gt;
        data&lt;/span&gt;=&lt;span&gt;{}
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zh&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; content
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;transtype&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;translang&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        data[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple_means_flag&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = 3&lt;span&gt;

        data &lt;/span&gt;= urllib.parse.urlencode(data).encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;#        req = urllib.request.Request(url,data,head)#替换成下一句，因为不再引用上面的head所以去掉head&lt;/span&gt;
        req =&lt;span&gt; urllib.request.Request(url,data)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用add_header(key,value)&lt;/span&gt;
        req.add_header(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

        response &lt;/span&gt;=&lt;span&gt; urllib.request.urlopen(req)
        html &lt;/span&gt;= response.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        
        target &lt;/span&gt;=&lt;span&gt; json.loads(html)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;翻译结果为：%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(target[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;trans_result&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dst&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]))
&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;第三种方法是引入休息时间，调用time模块的time.sleep来延长时间以避免网站认为是爬虫非法访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第四种方法是引入代理，代理把看到的内容返回给你，所以可以达到同样的效果。使用代理的步骤如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 参数是一个字典 {‘类型’:‘代理ip:端口号’}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;proxy_support = urllib.request.ProxyHandler({})&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 定制、创建一个 opener&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;opener = urllib.request.build_opener(proxy_support)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3a. 安装 opener&lt;/span&gt;&lt;br/&gt;&lt;span&gt;urllib.request.install_opener(opener)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3b. 调用 opener&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;opener.open(url)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request

url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.whatismyip.com.tw&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;#iplist=['']&lt;/span&gt;
&lt;span&gt;
proxy_support &lt;/span&gt;= urllib.request.ProxyHandler({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;115.46.123.180:8123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;proxy_support = urllib.request.ProxyHandler({'http':random.choice(iplist)})&lt;/span&gt;
&lt;span&gt;
opener&lt;/span&gt;=&lt;span&gt;urllib.request.build_opener(proxy_support)
opener.addheaders&lt;/span&gt;=[(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
urllib.request.install_opener(opener)

response&lt;/span&gt;=&lt;span&gt;urllib.request.urlopen(url)
html&lt;/span&gt;=response.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;运行结果如下所示，返回的IP地址是你的代理IP地址。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171013102406059-591716163.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;3 爬虫抓取煎蛋妹子图&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;跟着小甲鱼的视频去煎蛋网抓取妹子图啦，下述内容将自动进行和谐咔咔咔...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;思路：新建本地保存图片文件夹→打开网站→记住图片的地址→保存图片到相应的文件夹&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如图为煎蛋网妹子图网页显示，图片是按照页码来放置的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171013162513715-631890066.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们发现点击不同的页码，url改变的只是页码处的数字。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;http://jandan.net/ooxx/page-190#comments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;首先我们要获取页码，在页码处右键点击审查元素，如下所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171013163122121-1055297228.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;则我们可以读取到网页的html，然后使用find函数来找到[190]中的数字190，也就是当前页码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接着我们要获取当前页码下每张图片的url，同样在图片点击右键选择审查元素，可看到图片的地址如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212449/201710/1212449-20171013163511277-873752114.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;嘻嘻，是gakki。以上是准备工作，接着我们就可以写出大概的框架来，其余的内容由函数封装实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;def&lt;/span&gt; download_mm(folder = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ooxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pages = 10&lt;span&gt;):
    os.mkdir(folder)
    os.chdir(folder)
    
    url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://jandan.net/ooxx/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    page_num &lt;/span&gt;=&lt;span&gt; int(get_page(url))

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(pages):
        page_num &lt;/span&gt;-=&lt;span&gt; i
        page_url &lt;/span&gt;= url + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(page_num) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#comments&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        img_addrs &lt;/span&gt;=&lt;span&gt; find_imgs(page_url)
        save_imgs(folder,img_addrs)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;完整实现代码如下所示：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; url_open(url):
    req &lt;/span&gt;=&lt;span&gt; urllib.request.Request(url)
    req.add_header(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    response &lt;/span&gt;=&lt;span&gt; urllib.request.urlopen(req)
    html &lt;/span&gt;=&lt;span&gt; response.read()

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; html

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_page(url):
    html &lt;/span&gt;= url_open(url).decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    a &lt;/span&gt;= html.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current-comment-page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + 23&lt;span&gt;
    b &lt;/span&gt;= html.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,a)
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; html[a:b]
    
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; find_imgs(url):
    html &lt;/span&gt;= url_open(url).decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    img_addrs &lt;/span&gt;=&lt;span&gt; []

    a &lt;/span&gt;= html.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;img src=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; a != -1&lt;span&gt;:
        b &lt;/span&gt;= html.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,a,a+255&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; b != -1&lt;span&gt;:
            img_addrs.append(html[a&lt;/span&gt;+9:b+4&lt;span&gt;])
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            b &lt;/span&gt;= a + 9&lt;span&gt;
        a &lt;/span&gt;= html.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;img src=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,b)

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; img_addrs

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; save_imgs(folder,img_addrs):
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; each &lt;span&gt;in&lt;/span&gt;&lt;span&gt; img_addrs:
        filename &lt;/span&gt;= each.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-1&lt;span&gt;]
        with open(filename, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
            img &lt;/span&gt;= url_open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;each)
            f.write(img)
    
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; download_mm(folder = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ooxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,pages = 10&lt;span&gt;):
    os.mkdir(folder)
    os.chdir(folder)
    
    url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://jandan.net/ooxx/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    page_num &lt;/span&gt;=&lt;span&gt; int(get_page(url))

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(pages):
        page_num &lt;/span&gt;-=&lt;span&gt; i
        page_url &lt;/span&gt;= url + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(page_num) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#comments&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        img_addrs &lt;/span&gt;=&lt;span&gt; find_imgs(page_url)
        save_imgs(folder,img_addrs)

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; ==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    download_mm()
&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;成功在本地新建的文件夹中获取到了jpg的图片。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;4 异常处理&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;（1）URLError&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当urlopen无法处理一个响应的时候，就会引发URLError异常。 通常，没有网络连接或者对方服务器压根儿不存在的情况下，就会引发这个异常。同时，这个URLError会伴随一个reason属性，用于包含一个由错误编码和错误信息组成的元组。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）HTTPError&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HTTPError是URLError的子类，服务器上每一个HTTP的响应都包含一个数字的“状态码”。有时候状态码会指出服务器无法完成的请求类型，一般情况下Python会帮你处理一部分这类响应（例如，响应的是一个“重定向”，要求客户端从别的地址来获取文档，那么urllib会自动为你处理这个响应。）；但是呢，有一些无法处理的，就会抛出HTTPError异常。这些异常包括典型的：404（页面无法找到），403（请求禁止）和401（验证请求）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下述举例说明Python处理异常的两种方法：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;from&lt;/span&gt; urllib.request &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Request,urlopen
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; urllib.error &lt;span&gt;import&lt;/span&gt;&lt;span&gt; URLError,HTTPError
req &lt;/span&gt;=&lt;span&gt; Request(someurl)
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    response &lt;/span&gt;=&lt;span&gt; urlopen(req)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; HTTPError as e:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;The server coudln\'t fulfill the request.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Error code:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,e.code)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; URLError as e:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;We failed to reach a server.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Reason:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,e.reason)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;do something&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;注意HTTPError要在URLError前面。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;from&lt;/span&gt; urllib.request &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Request,urlopen
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; urllib.error &lt;span&gt;import&lt;/span&gt;&lt;span&gt; URLError,HTTPError
req &lt;/span&gt;=&lt;span&gt; Request(someurl)
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    response &lt;/span&gt;=&lt;span&gt; urlopen(req)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; HTTPError as e:
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; hasattr(e,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reason&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;We failed to reach a server.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Reason:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,e.reason)
    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; hasattr(e,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;The server coudln\'t fulfill the request.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Error code:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,e.code)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;do something&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 18 Nov 2017 03:17:00 +0000</pubDate>
<dc:creator>闪电gogogo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wwf828/p/7657218.html</dc:identifier>
</item>
<item>
<title>重构手法之Replace Temp with Query（以查询取代临时变量） - NaYoung</title>
<link>http://www.cnblogs.com/liuyoung/p/7840722.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuyoung/p/7840722.html</guid>
<description>&lt;hr/&gt;&lt;p&gt; &lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/liuyoung/p/7819380.html%20&quot; target=&quot;_blank&quot;&gt;返回总目录&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;你的程序以一个临时变量保存某一表达式的运算结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;将这个表达式提炼到一个独立函数中。将这个临时变量的所有引用点替换为对函数的调用。此后，新函数就可以被其他函数使用。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;动机&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;临时变量的问题在于：只在当前函数可见。如果你在同类的别的地方访问这个变量，你就必须重新写表达式来获取这个变量，这样的话你就会在不经意间让你的函数变得复杂起来。如果将临时变量替换为一个查询，那么同类中所有函数都可以获得这份信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以如果你想要使用&lt;a href=&quot;http://www.cnblogs.com/liuyoung/p/7834652.html#Extract&quot; target=&quot;_blank&quot;&gt;Extract Method,&lt;/a&gt;那么Replace Temp with Query是必不可少的一个步骤。而我们前面介绍的&lt;a href=&quot;http://www.cnblogs.com/liuyoung/p/7834652.html#Temp&quot; target=&quot;_blank&quot;&gt;Inline Temp&lt;/a&gt;其实是这个手法的一部分，两者的区别在于&lt;a href=&quot;http://www.cnblogs.com/liuyoung/p/7834652.html#Temp&quot; target=&quot;_blank&quot;&gt;Inline Temp&lt;/a&gt;&lt;strong&gt;已经有了表达式自身&lt;/strong&gt;，只需要做简单的替换就可以，&lt;strong&gt;需要用表达式本身把临时变量给去掉&lt;/strong&gt;。而Replace Temp with Query更加全面，里面包含了提炼表达式到函数本身，然后替换引用点（Inline Temp）。如果你把所有的临时变量都替换为一个查询，你的类的结构和逻辑将非常清晰，这样将更加有利于你的重构和进行优化。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;范例&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;假设有以下简单函数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;double&lt;/span&gt;&lt;span&gt; GetPrice()
{
   &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; basePrice = _quantity *&lt;span&gt; _itemPrice;
   &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; discountFactor;
   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (basePrice &amp;gt; &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;)
   {
       discountFactor &lt;/span&gt;= &lt;span&gt;0.95&lt;/span&gt;&lt;span&gt;;
   }
   &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
   {
       discountFactor &lt;/span&gt;= &lt;span&gt;0.98&lt;/span&gt;&lt;span&gt;;
   }
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; basePrice *&lt;span&gt; discountFactor;
}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们现在将basePrice 和discountFactor这两个临时变量都替换掉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先来替换basePrice，将basePrice右侧表达式提炼出来，然后使用&lt;a href=&quot;http://www.cnblogs.com/liuyoung/p/7834652.html#Temp&quot; target=&quot;_blank&quot;&gt;Inline Temp&lt;/a&gt;将basePrice的所有引用点都替换掉，并且把basePrice临时变量的声明去掉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在代码变成这样：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;double&lt;/span&gt;&lt;span&gt; GetPrice()
{
   &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; discountFactor;
   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;strong&gt;GetBasePrice()&lt;/strong&gt; &amp;gt; &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;)
   {
      discountFactor &lt;/span&gt;= &lt;span&gt;0.95&lt;/span&gt;&lt;span&gt;;
   }
   &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
   {
      discountFactor &lt;/span&gt;= &lt;span&gt;0.98&lt;/span&gt;&lt;span&gt;;
   }
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;strong&gt;GetBasePrice()&lt;/strong&gt; *&lt;span&gt; discountFactor;
 }

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; GetBasePrice()
{
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _quantity *&lt;span&gt; _itemPrice;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;再以类似的方法提炼出GetDiscountFactor();&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; GetDiscountFactor()
{
   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (GetBasePrice() &amp;gt; &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;)
   {
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0.95&lt;/span&gt;&lt;span&gt;;
   }
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0.98&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最终代码是这样的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;double&lt;/span&gt;&lt;span&gt; GetPrice()
{
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; GetBasePrice() *&lt;span&gt; GetDiscountFactor();
}

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; GetDiscountFactor()
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (GetBasePrice() &amp;gt; &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0.95&lt;/span&gt;&lt;span&gt;;
    }
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0.98&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; GetBasePrice()
{
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _quantity *&lt;span&gt; _itemPrice;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以明显的看到，这个重构手法对于函数本身来说，提高了清晰度，也让我们进行后期重构能够更加便捷。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我们常常在循环中用临时变量保存累加信息。如果是这种情况的话，我们可以将整个循环都提炼出来。如果在循环中要累加好几个值，那么就应该针对每个累加值重复一遍循环。这样，就可以很方便的将所有临时变量都替换为查询。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然，这样一来，我们可能担心性能问题。本来我定义一个临时变量只需要查询一次，现在我每次都要去做查询。这个我们完全不必担心。重构的目的是让程序更加清晰，有了更加清晰的程序之后再具体做优化也不迟，况且根据二八原则，仅仅这条查询语句倘若你系统真的出现了性能问题也不大可能，如果实在是因为这条语句，你也可以把变量再放回去。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;To Be Continued...&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 18 Nov 2017 03:02:00 +0000</pubDate>
<dc:creator>NaYoung</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuyoung/p/7840722.html</dc:identifier>
</item>
<item>
<title>Linux系列教程（二十二）——Linux的bash变量 - YSOcean</title>
<link>http://www.cnblogs.com/ysocean/p/7821337.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ysocean/p/7821337.html</guid>
<description>&lt;p&gt;　　上篇博客我们介绍了bash的一些基本功能，这是我们平时操作最频繁的。本篇博客我们介绍bash的变量，为后面编写shell脚本做铺垫。&lt;/p&gt;
&lt;h3&gt;1、什么是变量&lt;/h3&gt;
&lt;p&gt;　　变量是计算机内存的单元，其中存放的值可以改变。&lt;/p&gt;
&lt;p&gt;　　当 shell 脚本需要保存一些信息时，如一个文件名或者一个数字，就把它放在一个变量里。每个变量都有一个名字，可以根据名字来引用变量。&lt;/p&gt;
&lt;p&gt;　　使用变量可以保存有用信息，使系统获知用户的相关设置，变量也可以保存暂时信息。&lt;/p&gt;
&lt;h3&gt;2、变量的声明规则&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112122923747-225628836.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112122936778-2134831340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112122945513-1403878965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112123220966-1589017948.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3、变量的分类&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112130350200-1302940686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4、用户自定义变量的用法&lt;/h3&gt;
&lt;p&gt;　　用户自定义变量也就是本地变量。只在当前 shell 中生效。&lt;/p&gt;
&lt;h4&gt;　　①、变量定义&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
变量名=变量值
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112130643919-2110571868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　②、变量调用&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
$变量名
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112130739247-1817015915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　③、变量查看&lt;/h4&gt;

&lt;p&gt;　　set 是查看当前系统中定义的所有变量。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112130958466-348248015.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　④、变量删除&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
unset 变量名
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;5、环境变量的用法&lt;/h3&gt;
&lt;p&gt;　　环境变量主要保存的是和系统操作环境相关的变量。&lt;/p&gt;
&lt;p&gt;　　前面讲的用户自定义变量（本地变量）只在当前shell 中生效，而环境变量会在当前shell和这个shell的所有子shell当中生效，如果把环境变量写入相应的配置文件中，那么这个环境变量就会在所有的shell中生效。&lt;/p&gt;
&lt;h4&gt;　　①、通过 pstree 命令区分当前shell 的级别是父还是子&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112132643684-305676483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　②、声明环境变量&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
export 变量名=变量值
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　③、查询所有环境变量&lt;/h4&gt;

&lt;p&gt;　　前面讲的 set 命令是查看所有变量，而 env 是查看环境变量。&lt;/p&gt;
&lt;h4&gt;　　④、查看、删除指定环境变量&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
$变量名          #查看环境变量
unset 变量名   #删除环境变量
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这两个和本地变量一样。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112133521778-842472881.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　⑤、系统查找命令的路径环境变量 $PATH&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我们知道调用命令必须要是在当前目录，或者是用绝对路径进行。但是实际上我们调用某个命令直接使用命令名就可以了，比如cd,ls等等这些常用的，这是为什么呢？&lt;/p&gt;
&lt;p&gt;　　原因就是在 $PATH 里面我们已经定义好了，我们执行某个名称的命令，系统会首先去$PATH里面查找，如果找不到才会报找不到命令错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;首先看一下$PATH:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112133720122-1932926843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，$PATH 里面都是保存的一些路径，然后通过:分隔。&lt;/p&gt;
&lt;p&gt;　　前面我们写过一个 hello.sh 的脚本，我们知道要想执行它，必须首先赋予可执行权限，然后要么在当前目录通过./hello.sh来执行，要么通过绝对路径/tmp/hello.sh来执行。如果我们想直接通过 hello.sh 来执行呢？&lt;/p&gt;
&lt;p&gt;　　解决办法就将hello.sh的所在路径添加到 $PATH 变量中，如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112134507513-195121172.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　⑥、定义系统提示符的变量 $PS1&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112134907450-993315773.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112135158372-533843341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;6、位置参数变量的用法&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112135449341-2037651397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112140253184-1242488290.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;7、预定义变量的用法&lt;/h3&gt;
&lt;p&gt;　　其实预定义变量也是位置参数变量的一种，有如下几种用法：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112140543388-735649821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 8、声明变量类型 declare&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112173129559-536377578.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;9、数值运算的三种方法&lt;/h3&gt;
&lt;h4&gt;　　①、declare -i &lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112173752981-136659089.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　②、expr 或 let 数值运算工具&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112174012434-448493311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　③、$((运算式)) 或 $[运算式]&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112174157028-996336088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;10、运算符及其优先级顺序&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112174259981-209324465.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112174950075-571050199.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;11、变量测试与替换&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112174846684-513903891.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;12、环境变量配置文件&lt;/h3&gt;
&lt;p&gt;　　前面我们在将环境变量的时候，我们将脚本的路径加入到 $PATH 路径中，然后就可以直接通过脚本的名称来执行脚本。但是如果系统重启之后，发现又必须要重新加入到 $PATH 变量中才可以。那么有没有让它一直生效的方法呢？&lt;/p&gt;
&lt;p&gt;　　解决办法就是在环境变量配置文件中加入脚本的路径。&lt;/p&gt;
&lt;p&gt;　　环境变量配置文件中主要定义对系统的操作环境生效的系统默认环境变量，比如 PATH,HISTSIZE,PS1，HOSTNAME等默认环境变量。分别有以下配置文件：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112180429903-1599689557.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　下图是环境变量文件的读取顺序：（用户每次重新登录的时候就会重新读取下面的配置文件）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112181538450-941956236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们知道 $PATH 变量，用户每次登录，就会从上面的文件读取顺序读取所有配置文件，最后得到 $PATH 变量的值。&lt;/p&gt;
&lt;p&gt;　　注意：越往后面的配置文件，里面配置的变量内容优先级越高。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112182401841-5900562.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112182417669-1344067402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112182432122-1214353553.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171112182449403-241421431.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



</description>
<pubDate>Sat, 18 Nov 2017 01:42:00 +0000</pubDate>
<dc:creator>YSOcean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ysocean/p/7821337.html</dc:identifier>
</item>
<item>
<title>iOS开发中获取视图在屏幕上显示的位置 - 残无殇</title>
<link>http://www.cnblogs.com/zhanbaocheng/p/7855937.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanbaocheng/p/7855937.html</guid>
<description>&lt;p&gt;在iOS开发中，我们会经常遇到一个问题，例如，点击一个按钮，弹出一个遮罩层，上面显示一个弹框，弹框显示的位置在按钮附近。如果这个按钮的位置相对于屏幕边缘的距离是固定的，那就容易了，可以直接写死位置。可是，如果按钮是在UITableView的cell上呢？随着UITableView的滚动，按钮可能在顶部，也可能在底部，还可能在中间，左侧、右侧都有可能，那么，这个时候，怎么去计算按钮所在的位置呢？如果按钮所在的UITabelView是在另外一个UIScrollView的一个cell上呢？如果外面再有一个滚动层呢？这种布局确实很复杂。&lt;/p&gt;
&lt;p&gt;最近公司的项目中有一个需求，所使用的层级就是一个UITableView中嵌套了一个UITableView和一个UICollectionView，而且还有一个点击按钮，效果就类似于头条资讯列表的小叉号，点击在按钮旁边弹出一个视图，对资讯进行屏蔽等操作。我在点击按钮的时候弹出一个顶级的遮罩层，在遮罩上面增加了一个操作的区域，但是，操作区域的位置需要根据按钮的位置进行确定，所以，花了点时间写了个方法，用来找到按钮在屏幕上的位置，相对于屏幕来说的；&lt;/p&gt;
&lt;p&gt;其实代码并不多，只需要写一个UIView的扩展方法就行&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;extension UIView {
    func zhmfPositionInScreen() -&amp;gt; CGPoint {
        /// 先判断是否有父视图，如果没有父视图，直接返回视图的位置就行
        if let superView = self.superview {
            /**
            判断父视图是否是UIScrollView或者继承自UIScrollView
             
            先使用视图在屏幕上的位置使用视图的位置与父视图的位置X与Y分别相加
            
             如果父视图不是UIScrollView并且不继承自UIScrollView，则直接返回结果
            
             如果父视图是UIScrollView或者继承自UIScrollView

             还需要分别减去UIScrollView的scrollViewOffset.x和scrollViewOffset.y，然后返回结果
            */
            if let scrollView = superView as? UIScrollView {
                let position = CGPoint.init(x: self.frame.origin.x, y: self.frame.origin.y)
                let superPosition = superView.zhmfPositionInScreen()
                let scrollViewOffset = scrollView.contentOffset
                return CGPoint.init(x: superPosition.x + position.x - scrollViewOffset.x , y: superPosition.y + position.y - scrollViewOffset.y)
            } else {
                let superPosition = superView.zhmfPositionInScreen()
                let position = self.frame.origin
                return CGPoint.init(x: superPosition.x + position.x, y: superPosition.y + position.y)
            }
        } else {
            return self.frame.origin
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取视图在屏幕上位置的扩展方法已经写好了，只需要在使用的使用调一下就好了&lt;/p&gt;
&lt;pre class=&quot;swift&quot;&gt;
&lt;code&gt;button.zhmfPositionInScreen()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;虽然代码量不大，但当时也花了一点时间想逻辑，没有去百度等搜索，能自己写的，还是自己花时间想吧，不然，脑子懒了，就真的只能是码农了。&lt;/p&gt;
&lt;p&gt;iOS开发，专注swift，如果想交流，随时欢迎，期待一起进步！！！&lt;/p&gt;
</description>
<pubDate>Sat, 18 Nov 2017 01:26:00 +0000</pubDate>
<dc:creator>残无殇</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhanbaocheng/p/7855937.html</dc:identifier>
</item>
<item>
<title>初识Redux-Saga - Mr 布鲁斯</title>
<link>http://www.cnblogs.com/sunshine-anycall/p/7855882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-anycall/p/7855882.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://redux-saga.js.org/&quot;&gt;Redus-saga&lt;/a&gt;是一个redux的中间件，主要用来简便而优雅的处理redux应用里的副作用（side effect相对于pure function这类概念而言的）。它之所以可以做到这一点主要是使用了ES6里的一个语法：&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;Generator&lt;/a&gt;。使用Generator可以像写同步的代码一样编写异步代码，这样更加容易测试。&lt;/p&gt;
&lt;p&gt;在我们更深入之前，“saga”这个名字在计算机科学的历史上早已存在，并不是只用于javascript里的。Saga可以简要的概括为一种处理长时间运行的事务，并且这种事务会有副作用或者失败的可能。每一个我们希望完成的事务，都需要一个反事务在出错的时候把事务恢复到当前事务发生之前的样子。如果有兴趣了解更多Sage，我（作者）推荐你看看Caitie McCaffrey的这段&lt;a href=&quot;https://youtu.be/xDuwrtwYHu8&quot;&gt;演讲&lt;/a&gt;,演讲的题目是《实践Saga模式》。另外可以参阅Roman Liutikov的博客，叫做&lt;a href=&quot;https://medium.com/@roman01la/confusion-about-saga-pattern-bbaac56e622&quot;&gt;《Saga模式的迷惑之处》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;我们为什么要用redux-saga&quot;&gt;我们为什么要用Redux-saga&lt;/h2&gt;
&lt;p&gt;现在我们可以创建一个新的react-redux应用，我们会使用&lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt;和redux-saga处理异步的action。所以我们为什么要用redux-saga呢？&lt;/p&gt;
&lt;p&gt;正如文档里所说：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;与redux-thunk相反，你不会跌入回调地狱，你可以很容易的测试你的异步流程而且action一直保持pure（纯的状态）。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来对比一下saga和thunk的用法来更深入的理解上面那句话的内容。假设场景为：用户点击按钮，发出一个http请求来获取数据。&lt;br/&gt;Redux thunk的写法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  API_BUTTON_CLICK&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  API_BUTTON_CLICK_SUCCESS&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  API_BUTTON_CLICK_ERROR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./actions/consts'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; getDataFromAPI &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./api'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; getDataStarted &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; API_BUTTON_CLICK&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; getDataSuccess &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; API_BUTTON_CLICK_SUCESS&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; getDataError &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; message &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; API_BUTTON_CLICK_ERROR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; message&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; getDataFromAPI &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; dispatch &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;getDataStarted&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;getDataFromAPI&lt;/span&gt;()
      .&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(data &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;getUserSucess&lt;/span&gt;(data))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;fail&lt;/span&gt;(err &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;dispatch&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;getDataError&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;err&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;message&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我们有一个叫做&lt;code&gt;getDataFromAPI()&lt;/code&gt;的方法来创建action。当用户点击按钮开始了异步流程的时候“&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先触发一个action让我们的store知道我们要发起一个异步请求（&lt;code&gt;dispatch(getDataStarted()&lt;/code&gt;)了。&lt;/li&gt;
&lt;li&gt;接着我们实际发出了API请求，这个请求会返回一个promise。&lt;/li&gt;
&lt;li&gt;然后我们会在成功接受到请求数据的时候触发成功的action，有错误的时候触发错误的action。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Redux saga的写法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; call&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; put&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; takeEvery &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux-saga/effects'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    API_BUTTON_CLICK&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    API_BUTTON_CLICK_SUCCESS&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    API_BUTTON_CLICK_ERROR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./actoins/consts'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; getDataFromAPI &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./api'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;apiSideEffect&lt;/span&gt;(action) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(getDataFromaAPI)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; API_BUTTON_CLICK_SUCESS&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;catch&lt;/span&gt;(e) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; API_BUTTON_CLICK_ERROR&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// the 'watcher' -on every `API_BUTTON_CLICK` action, run our side effect &lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;apiSaga&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;takeEvery&lt;/span&gt;(API_BUTTON_CLICK&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; apiSideEffect)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;   &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;流程基本上都是一样的，只是代码看起来略有不同：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;与thunk例子不同的是，我们没有使用&lt;code&gt;dispatch&lt;/code&gt;而是用了&lt;code&gt;put&lt;/code&gt;（我们可以认为两者是等价的）。&lt;/li&gt;
&lt;li&gt;我们有一个监听方法一直监听着“start”方法。它只会在按钮点击之后触发一个类型为&lt;code&gt;API_BUTTON_CLICK&lt;/code&gt;的redux action。&lt;/li&gt;
&lt;li&gt;我们用redux-saga的&lt;code&gt;call&lt;/code&gt; effect（专有名词，效果的意思。与side effect的effect同意）来从异步的方法（promise，不同的saga等）里面获取数据。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;非常简单，对吧。在某些按钮的点击事件里，我们会请求某些终端来获取数据。如果成功了，就发起一个新的，payload就是数据的action。否则就发出一个带有error消息的action。&lt;/p&gt;
&lt;p&gt;同时，需要注意认真的理解上面的例子非常重要。不是说thunk的例子难以理解，但是我们却摆脱了返回方法或者promise链的麻烦。我们还可以只简单用一个try-catch来处理任何的异步错误。然后&lt;code&gt;put&lt;/code&gt;（或者&lt;code&gt;dispatch&lt;/code&gt;)一个action来通知reducer。&lt;/p&gt;
&lt;p&gt;其次，更重要的是，我们的saga side effect（saga副作用）是纯的（pure）。这是因为&lt;code&gt;call(getDataFromAPI)&lt;/code&gt;并不实际执行API请求，它只是返回一个纯对象：&lt;code&gt;{type: 'CALL', func, args}&lt;/code&gt;。实际的请求已经由redux-saga中间件执行，并且会把返回值带到generator里（所以需要用&lt;code&gt;yeild&lt;/code&gt;关键字）或者抛出一个异常，如果有的话。&lt;/p&gt;
&lt;p&gt;掌握了以上概念以后，你就会明白下面的测试为什么这么简单：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; call&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; put &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'redux-saga/effects'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; API_BUTTON_CLICK_SUCCESS&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./actions/consts'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; getDataFromAPI &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./api'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;it&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'apiSideEffect - fetches data from API and dispatches a success action'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; generator &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;apiSideEffect&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;generator&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toEqual&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(getDataFromAPI))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;generator&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toEqual&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; API_BUTTON_CLICK_SUCCESS &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;generator&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;()).&lt;span class=&quot;at&quot;&gt;toEqual&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然而上面的测试代码有一点点小问题。我们需要模拟&lt;code&gt;getDataFromAPI&lt;/code&gt;方法的调用，其他在上面语句块的方法也需要模拟出来。这也许不是什么大的工作量，但是随着我们的action数量的增长，复杂度也会增加，类似上面的测试最好避免。&lt;/p&gt;
&lt;p&gt;本文希望讲清楚redux-saga三个要点。我们不会再遇到回调地狱，我们的action是纯的，而且我们的异步流程很容易测试。如果你要学到更多，下面的资源会有帮助：&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1&quot; class=&quot;uri&quot;&gt;https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 18 Nov 2017 00:43:00 +0000</pubDate>
<dc:creator>Mr 布鲁斯</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-anycall/p/7855882.html</dc:identifier>
</item>
<item>
<title>8. 理解ZooKeeper的内部工作原理 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/7854114.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/7854114.html</guid>
<description>&lt;p&gt;到目前为止，我们已经讨论了ZooKeeper服务的基础知识，并详细了解了数据模型及其属性。 我们也熟悉了ZooKeeper 监视（watch）的概念，监视就是在ZooKeeper命名空间中的znode发生任何变化时完成的事件机制。 我们通过公开一组与znodes相关联的ACL来读取身份验证和基本安全模型。&lt;/p&gt;
&lt;p&gt;在本节中，我们将通过介绍ZooKeeper session的概念来讨论和了解客户端与ZooKeeper服务交互的生命周期。 我们还将详细阅读ZooKeeper如何在内部描述协议。 了解以及深入理解内部工作原理非常重要，这有助于使用ZooKeeper设计分布式应用程序，并了解与之相关的错综复杂的事情。&lt;/p&gt;
&lt;p&gt;我们先来看看客户端如何与ZooKeeper服务进行交互。 为了使分布式应用程序能够使用ZooKeeper服务，他们必须通过客户端类库来使用API。 ZooKeeper客户端库对几乎所有流行的编程语言都有语言绑定。 客户端库类库负责应用程序与ZooKeeper服务的交互。&lt;/p&gt;
&lt;p&gt;下图显示了应用程序与ZooKeeper服务的交互过程：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-8587987121b4ef55.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;应用程序通过客户端类库与ZooKeeper服务进行交互&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ZooKeeper服务可以以两种模式运行：独立（standalone）模式和仲裁（quorum）模式。 在独立模式下，有一个ZooKeeper服务器。 另一方面，quorum模式意味着ZooKeeper以复制模式运行在一组机器上，也称为ensemble。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Note&lt;br/&gt;独立模式仅用于评估和测试应用程序代码，但不能在生产中使用，因为这是潜在的单点故障。 在仲裁模式下，ZooKeeper通过复制实现高可用性，只要ensemble中大部分机器启动，都可以提供服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一-quorum模式&quot;&gt;一 quorum模式&lt;/h3&gt;
&lt;p&gt;ZooKeeper quorum构成了复制节点的大部分，这些复制节点将ZooKeeper服务的最新状态存储在ensemble中的所有服务器中。 这基本上是必须启动并运行的服务器节点的最小数量，并且可用于客户端请求。 客户端对ZooKeeper树进行的任何更新都必须永久存储在此quorum的节点中，以便事务成功完成。&lt;/p&gt;
&lt;p&gt;例如，在一个五个节点ensemble中，任何两台机器都可能失败，并且我们可以拥有三台服务器的quorum，ZooKeeper服务仍然可以工作。 稍后，如果其他两个失败节点出现，则可以通过从现有quorum中获取最新状态来同步ZooKeeper服务状态。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;调整ZooKeeper服务中服务器节点的数量对于ZooKeeper正确运行非常重要。 由于所有的事务提交都依赖于多数共识的概念，所以建议ZooKeeper集合中应该有奇数个机器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们来看一个例子，看看为什么这是有道理的。 假设我们有一个由五台服务器组成的ZooKeeper ensemble。 如果任何两台服务器发生故障，ensemble仍然可以运行，因为可以在其余三个节点之外形成quorum。 因此，五节点ZooKeeper ensemble可以容忍多达两个节点的故障。&lt;/p&gt;
&lt;p&gt;现在，对于六节点ensemble，ZooKeeper服务可以容忍最多只有两个节点的故障。 这是因为有三个节点失败，无法形成quorum。 在那里不能达到多数的共识。 同样，ZooKeeper quorum必须保证任何成功承认客户端的事务都应该是持久的，并在形成quorum的节点上可见。&lt;/p&gt;
&lt;p&gt;如果ZooKeeper quorum不是由ensemble中的大多数节点组成的，ZooKeeper命名空间的状态可能会有不一致，从而导致错误的结果。 除了节点故障之外，集合中节点之间的网络分区可能会导致不一致的操作，因为quorum成员之间将无法传递更新。 这导致在分布式群集中出现的共同问题，称为脑裂（split-brain）。&lt;/p&gt;
&lt;p&gt;脑裂是ensemble中的两个服务器子集独立运作的场景。 这会导致整个ZooKeeper服务中的状态不一致，并且不同的客户端根据相同的请求获得不同的结果，具体取决于它们所连接的服务器。 通过使用奇数个节点运行ZooKeeper集群，我们可以将此类错误的概率降至概率最小。&lt;/p&gt;
&lt;h3 id=&quot;二-客户端与zookeeper服务建立session会话&quot;&gt;二 客户端与ZooKeeper服务建立session会话&lt;/h3&gt;
&lt;p&gt;连接到ZooKeeper的客户端可以配置一个构成ZooKeeper ensemble的服务器列表。 客户端尝试通过从列表中选择一个随机服务器来连接到列表中的服务器。 如果连接失败，则尝试连接到下一个服务器，依此类推。 此过程直到列表中的所有服务器都被尝试或建立了成功的连接。&lt;/p&gt;
&lt;p&gt;一旦客户端和ZooKeeper服务器之间建立连接，就在客户端和服务器之间建立一个会话（session），表示为分配给客户端的64位数字。 会话的概念对于ZooKeeper的运行非常重要。 会话与客户在ZooKeeper服务中执行的每个操作相关联。&lt;/p&gt;
&lt;p&gt;会话在ZooKeeper中扮演着非常重要的角色。 例如，ephemeral节点的整个概念是基于客户端和ZooKeeper服务器之间会话的概念。 ephemeral znode在客户端和ZooKeeper之间有会话的生命周期; 当这个会话结束时，这些节点将被ZooKeeper服务自动删除。&lt;/p&gt;
&lt;p&gt;会话有一个超时期限，在连接到ZooKeeper服务时由应用程序或客户端指定。 客户端发送一个请求的超时作为创建连接调用中的参数来创建一个以毫秒为单位指定的ZooKeeper。 如果连接保持空闲超过超时时间，则会话可能会过期。 会话到期由ZooKeeper集群本身管理，而不是由客户端管理。 当前的实现要求超时至少是tickTime的两倍，最多为tickTime的20倍。&lt;/p&gt;
&lt;p&gt;指定正确的会话超时取决于各种因素，如网络拥塞，应用程序逻辑的复杂性，甚至ZooKeeper ensemble的大小。 例如，在一个非常繁忙和拥挤的网络中，如果延迟很高，那么会话超时会非常低，会导致会话过期。 同样，如果你的ensemble很大，建议有一个更大的超时时间。 此外，如果应用程序看到频繁的连接丢失，增加会话超时可能会有用。 然而，另一个警告是它不应该对应用程序的核心逻辑产生不经意的影响。&lt;/p&gt;
&lt;p&gt;客户端通过向ZooKeeper服务发送ping请求（心跳）来保持活动。 这些心跳是由客户端类库自动发送的，因此，应用程序员不必担心会话保持活跃状态。 客户端和ZooKeeper服务器之间的会话使用TCP连接进行维护。 两个连续的心跳之间的间隔应该保持低，这样客户端和ZooKeeper服务器之间的连接失败可以很早被检测到，并且可以进行重新连接尝试。 重新连接到另一个ZooKeeper服务器通常由客户端类库以透明方式完成。 当重新连接到同一个ensemble的不同服务器时，客户端创建的现有会话和关联的ephemeral znode仍然有效。 对于在客户端和服务器之间维护的单个会话，ZooKeeper保证通常按照FIFO顺序的排序。&lt;/p&gt;
&lt;p&gt;如前一节所述，应用程序使用客户端类库与ZooKeeper服务建立会话。 表示连接对象的句柄由ZooKeeper客户端API返回给应用程序。 这个ZooKeeper连接对象在其创建和结束之间的时间内通过不同的状态转换。 连接对象会持续到客户端程序的连接正常关闭或会话由于超时而终止。&lt;/p&gt;
&lt;p&gt;一旦连接对象被创建，它就从&lt;code&gt;CONNECTING&lt;/code&gt;状态开始，客户端库尝试连接到ZooKeeper ensemble中的一个服务器。 当连接到ZooKeeper服务时，对象转换到&lt;code&gt;CONNECTED&lt;/code&gt;状态。 由于事件（如会话到期和身份验证失败），或者应用程序正常关闭使用库调用的连接，对象的状态将转到&lt;code&gt;CLOSED&lt;/code&gt;状态。&lt;/p&gt;
&lt;p&gt;下图显示了ZooKeeper客户端会话的状态转换：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-ed4e22e6f51d6432.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ZooKeeper客户端状态转换&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;三-zookeeper事务的实现&quot;&gt;三 ZooKeeper事务的实现&lt;/h3&gt;
&lt;p&gt;在前面的章节中，我们看到了ZooKeeper如何在服务器上运行，以及客户端如何连接到这些服务器，建立会话并在ZooKeeper服务中执行操作。 在服务器ensemble中，服务器被选为领导者，剩下的所有服务器都成为追随者。 领导处理所有更改ZooKeeper服务的请求。 追随者收到领导者的更新，并通过多数共识机制，在整个ensemble中保持一致的状态。 ZooKeeper服务负责替换失败的领导者，并将跟随者与领导者同步，整个过程对于客户端应用程序是完全透明的。&lt;/p&gt;
&lt;p&gt;该服务依靠复制机制来确保所有更新在构成ensemble的所有服务器中都是永久的。 每个服务器都维护着一个核心数据库，它代表了ZooKeeper命名空间的整个状态。 为了确保更新是持久的，并在服务器崩溃时可以恢复，更新记录到本地磁盘。 此外，写入操作在序列化到磁盘之后才会应用到内存数据库。&lt;/p&gt;
&lt;p&gt;ZooKeeper使用一个称为 ZooKeeper Atomic Broadcast (ZAB)的特定原子消息广播协议。 该协议确保ensemble中的本地副本永不分离。 此外，ZAB协议是原子的，所以协议保证更新要不全部成功，或者全部失败。&lt;/p&gt;
&lt;p&gt;复制的数据库、ZAB协议与领导者选举机制一起构成了ZooKeeper服务实现的核心。 ZooKeeper服务名称空间中的更新或写入以及读取操作由这些核心组件处理，如下图所示，也可以在&lt;a href=&quot;http://zookeeper.apache.org/doc/r3.4.6/zookeeperOver.html#fg_zkComponents&quot; class=&quot;uri&quot;&gt;http://zookeeper.apache.org/doc/r3.4.6/zookeeperOver.html#fg_zkComponents&lt;/a&gt;中找到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-95e7b6b639bc534c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ZooKeeper服务组件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在ZooKeeper实现中，读取请求（如&lt;code&gt;exists&lt;/code&gt;，&lt;code&gt;getData&lt;/code&gt;和&lt;code&gt;getChildren&lt;/code&gt;）由客户端连接的ZooKeeper服务器本地处理。 这使得ZooKeeper中的读操作非常快。 写入或更新请求，例如&lt;code&gt;create&lt;/code&gt;，&lt;code&gt;delete&lt;/code&gt;和&lt;code&gt;setData&lt;/code&gt;被转发给ensemble中的领导者。 领导者执行客户请求作为一个事务。 这个事务类似于数据库管理系统中事务的概念。&lt;/p&gt;
&lt;p&gt;ZooKeeper事务也包含成功执行请求所需的所有步骤作为单个工作单元，并且以原子方式应用更新。 此外，事务满足隔离性，这意味着任何事务都不会受到任何其他事务的干扰。 ZooKeeper服务中的事务是幂等的。 事务通过一个事务标识符（zxid）来标识，它是一个64位整数，分为两部分：纪元和计数器，每个部分都是32位。&lt;/p&gt;
&lt;p&gt;事务处理包括ZooKeeper的两个步骤：领导选举和原子消息广播协议。 这类似于两阶段提交协议，也包括领导者选举和原子消息广播协议。&lt;/p&gt;
&lt;h3 id=&quot;四-第一阶段领导者选举&quot;&gt;四 第一阶段——领导者选举&lt;/h3&gt;
&lt;p&gt;ensemble中的服务器经过一个选举主服务器的过程，称为领导者。 ensemble中的其他服务器被称为追随者。&lt;/p&gt;
&lt;p&gt;参与领导选举算法的每个服务器都有一个名为“LOOKING”的状态。如果一个领导者已经存在于整个系统中，那么对等服务器将通知新的参与者服务器关于现有的领导者。在了解领导者后，新的服务器与领导者保持同步状态。&lt;/p&gt;
&lt;p&gt;一个领导者不存在于ensemble中时，ZooKeeper在服务器ensemble中运行领导者选举算法。 在这种情况下，首先，所有服务器都处于LOOKING状态。 该算法指示服务器交换消息以选举领导者。 当参与者服务器汇聚在一个特定服务器的共同选择上时，该算法就会停止，这个服务器就成为领导者。 赢得这次选举的服务器进入LEADING状态，而ensemble中的其他服务器进入FOLLOWING状态。&lt;/p&gt;
&lt;p&gt;参与者服务器与他们的对等服务器交换的消息，包含服务器的标识符(sid)和它所执行的最近事务ID(zxid)。每个参与服务器在接收到对等服务器的消息后，将自己的sid和zxid与它所接收的消息进行比较。如果接收到的zxid大于服务器所持有的zxid，则服务器接受接收到的zxid，否则，它将自己的zxid设置并将其自己的zxid设置为ensemble中的对等服务器。&lt;/p&gt;
&lt;p&gt;在这个算法的最后，拥有最近事务ID(zxid)的服务器赢得了领导选举算法。在算法完成之后，追随者服务器将其状态与所选出的领导者同步。&lt;/p&gt;
&lt;p&gt;领导者选举的下一步是领导者激活。 新当选的领导者提出了&lt;code&gt;NEW_LEADER&lt;/code&gt;建议，并且只有在&lt;code&gt;NEW_LEADER&lt;/code&gt;提案被ensemble中的大多数服务器（quorum）确认之后，领导才会被激活。在新领导人的&lt;code&gt;NEW_LEADER&lt;/code&gt;提议被提交之前，新领导人不会接受新提议。&lt;/p&gt;
&lt;h3 id=&quot;五-第二阶段原子消息广播协议&quot;&gt;五 第二阶段——原子消息广播协议&lt;/h3&gt;
&lt;p&gt;ZooKeeper中的所有写入请求都被转发给领导者。 领导者向ensemble的追随者广播其更新。 只有在大多数追随者承认他们坚持这个变化之后，领导者才会进行更新。 ZooKeeper使用ZAB协议来实现共识，这被设计为原子的。 因此，更新成功或失败。 在领导失败时，ensemble中的其他服务器进入领导者选举算法，以选出其中的新领导者。&lt;/p&gt;
&lt;blockquote readability=&quot;12.986206896552&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;ZAB: High-performance broadcast for primary-backup systems by Junqueira, F.P; Reed, &amp;gt; B.C; Serafini. M&lt;/p&gt;
&lt;p&gt;(LADIS 2008, in: Proceedings of the 2nd Workshop on Large-Scale Distributed Systems &amp;gt; and Middleware)&lt;/p&gt;
&lt;p&gt;可以通过以下链接访问IEEE Xplore上的ZAB文章：&lt;a href=&quot;http://bit.ly/1v3N1NN&quot; class=&quot;uri&quot;&gt;http://bit.ly/1v3N1NN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ZAB保证了在递送事务和提交事务时的严格顺序。通过原子消息处理事务可以如下图所示:&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-f72bb1368851dbc2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ZooKeeper的事务提交协议&quot;/&gt;&lt;/p&gt;
&lt;p&gt;两阶段提交保证了事务的顺序。 在协议中，一旦quorum确认一个事务，领导者就提交，而追随者将其确认记录在磁盘上。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;除了领导者和追随者之外，ZooKeeper ensemble中的服务器还有第三个特征，称为观察者。 观察者和追随者在概念上是相似的，因为他们都承诺领导者的建议。 然而，与追随者不同，观察者不参与两阶段提交过程的投票过程。 观察者有助于ZooKeeper服务中读取请求的可伸缩性，并有助于在跨越多个数据中心的ZooKeeper集成中传播更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;六-本地存储和快照&quot;&gt;六 本地存储和快照&lt;/h3&gt;
&lt;p&gt;ZooKeeper服务器使用本地存储来保存事务。 事务记录到事务日志中，类似于在数据库系统中使用的顺序附加日志文件的方法。 ZooKeeper服务器使用预先分配的文件将事务刷新到磁盘介质上。 在ZooKeeper事务处理的两阶段协议中，只有在强制将事务写入事务日志后，服务器才会确认提议。 由于ZooKeeper事务日志的写入速度很快，所以在一个与服务器的引导设备分开的磁盘中配置事务日志是非常重要的。&lt;/p&gt;
&lt;p&gt;ZooKeeper服务中的服务器还保存ZooKeeper树或命名空间的时间点副本或快照到本地文件系统。 服务器不需要与ensemble的其他成员协调来保存这些快照。 此外，快照处理与ZooKeeper服务器的正常运行进行异步操作。&lt;/p&gt;
&lt;p&gt;ZooKeeper快照文件和事务日志能够在发生灾难性故障或用户错误时恢复数据。 数据目录由ZooKeeper配置文件中的dataDir参数指定，数据日志目录由dataLogDir参数指定。&lt;/p&gt;
</description>
<pubDate>Fri, 17 Nov 2017 15:03:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/7854114.html</dc:identifier>
</item>
<item>
<title>【原创】Unity3D跨平台动态库编译---记kcp基于CMake的各平台构建实践 - SChivas</title>
<link>http://www.cnblogs.com/SChivas/p/7854100.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/SChivas/p/7854100.html</guid>
<description>&lt;p&gt;　　1）提供原生代码（native code）的支持，也叫原生插件，但是我实践的是c/cpp跨平台动态库，这里不具体涉及安卓平台java库和ios平台的objectc库构建。&lt;/p&gt;
&lt;p&gt;　　2）某些开源库是c/cpp编写，没有对应c#版本&lt;/p&gt;
&lt;p&gt;　　3）或者有c#版本实现，但是效率或者gc达不到期望效果，特别是GC，一般的开源库c#版本的作者，对gc优化得大多不好&lt;/p&gt;
&lt;p&gt;　　4）追求效率，比如A*寻路等开销比较大的算法，想做下优化&lt;/p&gt;
&lt;p&gt;　　5）某些模块，如网络模块，需要Unity客户端和后端跑一份相同的逻辑代码，而不想维护两份语言的实现&lt;/p&gt;

&lt;p&gt;　　前阵子由于项目需要，编译了一下kcp库，这里拿kcp编译到Unity的各平台动态库来做一次总结，kcp的github地址：&lt;span&gt;&lt;a href=&quot;https://github.com/skywind3000/kcp&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/skywind3000/kcp&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;有关这个库的其它信息这里不做介绍，它本质就是一个可靠UDP的网络库，我们项目是用在了一款多人实时射击类游戏中。&lt;/p&gt;


&lt;p&gt;　　这里使用的是CMake，官网地址为：&lt;a href=&quot;https://cmake.org/&quot; target=&quot;_blank&quot;&gt;https://cmake.org/&lt;/a&gt;。有关CMake的使用资料自行网络获取，我这里只说一点，这是一个跨平台的构建工具，针对不同的平台，只需要一份描述文件，很方便，不需要每个平台去写makefile。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1278213/201711/1278213-20171117213001718-1595756581.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　其中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　1）cmke目录：包含CMake在安卓、iOS平台进行构建时需要要到的两个文件：android.toolchain.cmake、iOS.cmake&lt;/p&gt;
&lt;p&gt;　　　　2）Plugins目录：各平台构建的输出目录，构建完成后可以直接放置到Unity项目Assdets目录下使用&lt;/p&gt;
&lt;p&gt;　　　　3）CMakeLists.txt文件：主要要由我们自己编写的一个文件，cmake根据CMakeLists生成各个平台编译的中间文件以及makefile文件&lt;/p&gt;
&lt;p&gt;　　　　4）目标库源代码：kcp.h、kcp.c&lt;/p&gt;
&lt;p&gt;　　　　5）make_xxx：各平台执行构建脚本文件，这些文件基本是固定的，不需要做什么修改&lt;/p&gt;


&lt;h2&gt;　　1、kcp项目需要做的调整&lt;/h2&gt;
&lt;p&gt;　　　　kcp.c不需要动，kcp.h修改部分如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#ifdef DLL_EXPORTS
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; KCPDLL _declspec(dllexport)
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; KCPDLL
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;---------------------------------------------------------------------
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; interface
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;---------------------------------------------------------------------
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; create a new kcp control object, 'conv' must equal in two endpoint
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; from the same connection. 'user' will be passed to the output callback
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; output callback can be setup like this: 'kcp-&amp;gt;output = my_udp_output'&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     KCPDLL ikcpcb* ikcp_create(IUINT32 conv, &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;user);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;其它导出接口省略&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;　　2、CMakeLists文件编写&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; cmake_minimum_required(VERSION &lt;span&gt;2.8&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ( WIN32 AND NOT CYGWIN AND NOT ( CMAKE_SYSTEM_NAME STREQUAL &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WindowsStore&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ) )
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     set(CMAKE_C_FLAGS_RELEASE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${CMAKE_C_FLAGS_RELEASE} /MT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; CACHE STRING &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     set(CMAKE_C_FLAGS_DEBUG &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${CMAKE_C_FLAGS_DEBUG} /MTd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; CACHE STRING &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     set(CMAKE_CXX_FLAGS_RELEASE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${CMAKE_CXX_FLAGS_RELEASE} /MT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; CACHE STRING &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     set(CMAKE_CXX_FLAGS_DEBUG &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${CMAKE_CXX_FLAGS_DEBUG} /MTd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; CACHE STRING &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;endif ()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;project(kcp)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( IOS )
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         set(CMAKE_CXX_FLAGS &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${CMAKE_CXX_FLAGS} -fembed-bitcode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         set(CMAKE_C_FLAGS &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${CMAKE_C_FLAGS} -fembed-bitcode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;endif ()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;find_path(KCP_PROJECT_DIR NAMES SConstruct
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    PATHS 
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    ${CMAKE_SOURCE_DIR}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    NO_DEFAULT_PATH
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;MARK_AS_ADVANCED(KCP_PROJECT_DIR)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;set ( KCP_CORE
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    kcp.c
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;macro(source_group_by_dir proj_dir source_files)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(MSVC OR APPLE)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        get_filename_component(sgbd_cur_dir ${proj_dir} ABSOLUTE)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        foreach(sgbd_file ${${source_files}})
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            get_filename_component(sgbd_abs_file ${sgbd_file} ABSOLUTE)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;file&lt;/span&gt;&lt;span&gt;(RELATIVE_PATH sgbd_fpath ${sgbd_cur_dir} ${sgbd_abs_file})
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt;(REGEX REPLACE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\(.*\)/.*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; \\&lt;span&gt;1&lt;/span&gt;&lt;span&gt; sgbd_group_name ${sgbd_fpath})
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt;&lt;span&gt;(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt;(REPLACE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; sgbd_group_name ${sgbd_group_name})
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(sgbd_nogroup)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 set(sgbd_group_name &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            endif(sgbd_nogroup)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            source_group(${sgbd_group_name} FILES ${sgbd_file})
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        endforeach(sgbd_file)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    endif(MSVC OR APPLE)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;endmacro(source_group_by_dir)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} KCP_CORE)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (APPLE)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (IOS)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         set(CMAKE_OSX_ARCHITECTURES &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(ARCHS_STANDARD)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        add_library(kcp STATIC
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;           ${KCP_CORE}
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt; ()
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         set(CMAKE_OSX_ARCHITECTURES &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(ARCHS_STANDARD_32_64_BIT)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        add_library(kcp MODULE
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            ${KCP_CORE}
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        )
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        set_target_properties ( kcp PROPERTIES BUNDLE TRUE )
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        #set_target_properties ( kcp PROPERTIES FRAMEWORK TRUE )
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;        #set_target_properties ( kcp PROPERTIES MACOSX_RPATH TRUE )
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;    endif ()
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;else&lt;/span&gt;&lt;span&gt; ( )
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    add_library(kcp SHARED
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        ${KCP_CORE}
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;endif ( )
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( WIN32 AND NOT CYGWIN )
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    target_compile_definitions (kcp PRIVATE DLL_EXPORTS)
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; endif ( )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　1）第10行：指定项目名称为kcp&lt;/p&gt;
&lt;p&gt;　　　　2）第26行：指定要编译的c/cpp文件&lt;/p&gt;
&lt;p&gt;　　　　3）第70行：指定预定义宏DLL_EXPORTS，这个宏只有在window平台编译dll动态库才需要，其它平台不需要&lt;/p&gt;
&lt;p&gt;　　　　4）其它没什么好说的，在构建你自己的项目时，只需要注意的带有“kcp”字样的地方替换为你自己对应的项目名称即可。&lt;/p&gt;
&lt;h2&gt;　　3、各平台构建脚本&lt;/h2&gt;
&lt;p&gt;　　　　1）window32位系统：make_win32.bat&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; build32 &amp;amp;&lt;span&gt; pushd build32
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; cmake -G &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Visual Studio 14 2015&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ..
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;popd
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; cmake --build build32 --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;md Plugins\x86
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; copy /&lt;span&gt;Y build32\Release\kcp.dll Plugins\x86\kcp.dll
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;rmdir&lt;/span&gt; /S /&lt;span&gt;Q build32
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; pause
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　2）windows64位系统：make_win64.bat&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; build64 &amp;amp;&lt;span&gt; pushd build64
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; cmake -G &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Visual Studio 14 2015 Win64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ..
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;popd
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; cmake --build build64 --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;md Plugins\x86_64
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; copy /&lt;span&gt;Y build64\Release\kcp.dll Plugins\x86_64\kcp.dll
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;rmdir&lt;/span&gt; /S /&lt;span&gt;Q build64
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; pause
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　3）linux32位系统：make_linux32.sh&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p build_linux32 &amp;amp;&amp;amp;&lt;span&gt; cd build_linux32
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; cmake -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_SHARED_LINKER_FLAGS=-m32 ../
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;cd ..
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; cmake --build build_linux32 --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; build_linux32/kcp.so Plugins/x86/&lt;span&gt;kcp.so
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;rm&lt;/span&gt; -rf build_linux32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　4）linux64位系统：make_linux64.sh&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p build_linux64 &amp;amp;&amp;amp;&lt;span&gt; cd build_linux64
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; cmake ../
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;cd ..
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; cmake --build build_linux64 --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; build_linux64/kcp.so Plugins/x86_64/&lt;span&gt;kcp.so
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;rm&lt;/span&gt; -rf build_linux64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　5）Mac系统：make_osx.sh&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p build_osx &amp;amp;&amp;amp;&lt;span&gt; cd build_osx
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; cmake -GXcode ../
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;cd ..
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; cmake --build build_osx --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p Plugins/kcp.bundle/Contents/MacOS/
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; build_osx/Release/kcp.bundle/Contents/MacOS/kcp Plugins/kcp.bundle/Contents/MacOS/&lt;span&gt;kcp
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;rm&lt;/span&gt; -rf build_osx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　6）android系统：make_android.sh&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; [ -z &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$ANDROID_NDK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     export ANDROID_NDK=~/android-ndk-&lt;span&gt;r10e
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;fi&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p build_v7a &amp;amp;&amp;amp;&lt;span&gt; cd build_v7a
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; cmake -DANDROID_ABI=armeabi-v7a -DCMAKE_TOOLCHAIN_FILE=../cmake/android.toolchain.cmake -DANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-clang3.&lt;span&gt;6&lt;/span&gt; -DANDROID_NATIVE_API_LEVEL=android-&lt;span&gt;9&lt;/span&gt; ../
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;cd ..
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; cmake --build build_v7a --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p Plugins/Android/libs/armeabi-v7a/
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; build_v7a/libkcp.so Plugins/Android/libs/armeabi-v7a/&lt;span&gt;libkcp.so
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;rm&lt;/span&gt; -&lt;span&gt;rf build_v7a
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p build_x86 &amp;amp;&amp;amp;&lt;span&gt; cd build_x86
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; cmake -DANDROID_ABI=x86 -DCMAKE_TOOLCHAIN_FILE=../cmake/android.toolchain.cmake -DANDROID_TOOLCHAIN_NAME=x86-clang3.&lt;span&gt;5&lt;/span&gt; -DANDROID_NATIVE_API_LEVEL=android-&lt;span&gt;9&lt;/span&gt; ../
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;cd ..
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; cmake --build build_x86 --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p Plugins/Android/libs/x86/
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;cp&lt;/span&gt; build_x86/libkcp.so Plugins/Android/libs/x86/&lt;span&gt;libkcp.so
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;rm&lt;/span&gt; -rf build_x86
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　7）iOS系统：make_ios.sh&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p build_ios &amp;amp;&amp;amp;&lt;span&gt; cd build_ios
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/iOS.cmake  -GXcode ../
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;cd ..
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; cmake --build build_ios --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; -p Plugins/iOS/
&lt;span&gt; 6&lt;/span&gt; exist_armv7=`lipo -&lt;span&gt;info&lt;/span&gt; build_ios/Release-iphoneos/libkcp.a | &lt;span&gt;grep&lt;/span&gt; armv7 | &lt;span&gt;wc&lt;/span&gt; -&lt;span&gt;l`
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; exist_arm64=`lipo -&lt;span&gt;info&lt;/span&gt; build_ios/Release-iphoneos/libkcp.a | &lt;span&gt;grep&lt;/span&gt; arm64 | &lt;span&gt;wc&lt;/span&gt; -&lt;span&gt;l`
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; [ $[exist_armv7] -eq &lt;span&gt;0&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;** ERROR **: No support for armv7, maybe XCode version is to high, use manual_build_ios instead!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;elif&lt;/span&gt; [ $[exist_arm64] -eq &lt;span&gt;0&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;** ERROR ** : No support for arm64, maybe XCode version is to high, use manual_build_ios instead!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;cp&lt;/span&gt; build_ios/Release-iphoneos/libkcp.a Plugins/iOS/&lt;span&gt;libkcp.a
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;rm&lt;/span&gt; -&lt;span&gt;rf build_io
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　8）Windows Phone系统：make_uwp.bat&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; build_uwp &amp;amp;&lt;span&gt; pushd build_uwp
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; cmake -G &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Visual Studio 14 2015&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt; ..
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;popd
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; cmake --build build_uwp --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;md Plugins\WSA\x86
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; copy /&lt;span&gt;Y build_uwp\Release\kcp.dll Plugins\WSA\x86\kcp.dll
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;rmdir&lt;/span&gt; /S /&lt;span&gt;Q build_uwp
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; build_uwp64 &amp;amp;&lt;span&gt; pushd build_uwp64
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; cmake -G &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Visual Studio 14 2015 Win64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt; ..
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;popd
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; cmake --build build_uwp64 --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;md Plugins\WSA\x64
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; copy /&lt;span&gt;Y build_uwp64\Release\kcp.dll Plugins\WSA\x64\kcp.dll
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;rmdir&lt;/span&gt; /S /&lt;span&gt;Q build_uwp64
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;mkdir&lt;/span&gt; build_uwp_arm &amp;amp;&lt;span&gt; pushd build_uwp_arm
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; cmake -G &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Visual Studio 14 2015 ARM&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=&lt;span&gt;10.0&lt;/span&gt;&lt;span&gt; ..
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;popd
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; cmake --build build_uwp_arm --&lt;span&gt;config Release
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;md Plugins\WSA\ARM
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; copy /&lt;span&gt;Y build_uwp_arm\Release\kcp.dll Plugins\WSA\ARM\kcp.dll
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;rmdir&lt;/span&gt; /S /&lt;span&gt;Q build_uwp_arm
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; pause
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　9）这些脚本都很简单明了，像需要的VS版本、安卓的NDK版本等等，一看便知。要移植到你自己的构建项目也很简单，基本只需要修改项目名称即可。&lt;/p&gt;


&lt;p&gt;　　1）以下各平台，均需要安装CMake，安装教程，包括各平台环境变量等的配置自行谷歌，很多相关帖子。&lt;/p&gt;
&lt;p&gt;　　2）window系统和windows phone系统：在window系统中执行对应的.bat脚本即可，windows phone的编译需要相关SDK。本帖使用VS2015，windows phone暂时不需要，所以没有构建测试过。&lt;/p&gt;
&lt;p&gt;　　3）linux系统：在linux系统中执行对应的.sh脚本即可&lt;/p&gt;
&lt;p&gt;　　4）mac系统：在mac系统中执行对应的.sh脚本即可&lt;/p&gt;
&lt;p&gt;　　5）iOS系统：在mack系统中执行对应的.sh脚本即可。需要xcode版本8.1，版本太高会有问题，可以进行手动构建，参考博文：&lt;a href=&quot;http://blog.csdn.net/dreamermjs/article/details/52127530&quot; target=&quot;_blank&quot;&gt;iOS代码封装成.a文件(封装SDK)&lt;/a&gt;。真机上的.a动态库需要同时支持armv7,ram64架构，查看你编译出来的.a是否是正确架构可使用lipo -info kcp.a&lt;/p&gt;
&lt;p&gt;　　6）android系统：安卓系统可以在各个平台编译，我这里是在linux系统中编译的，执行对应的.sh脚本即可，andorid SDK版本为：android-ndk-r10e。关于SDK安装以及环境变量配置自行谷歌。&lt;/p&gt;
&lt;p&gt;　　7）可能根据各位自己的情况，编译过程会遇到各种小问题，但是这些问题几乎都是出在环境上，如环境变量、SDK版本、xcode版本等，我这里已经对环境信息给了足够的说明，如果你实践当中问题解决不了，可以参考我这里列举的环境。&lt;/p&gt;
&lt;p&gt;　　8）.sh文件在window下编辑可能会存在文件结束符问题，使用doc2unix命令转换就好，遇到权限问题使用chmod命令就好，其它可能遇到的细节问题自己耐心多多摸索，问题都不大。&lt;/p&gt;


&lt;h2&gt;　　1、输出目录结构&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1278213/201711/1278213-20171117223819327-1201351315.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　　　由于我们公司全部在window下开发，所以没有编译linux下的动态库，如果你们需要，将在x86、x86_64目录下存在libkcp.so文件。同样，window phone平台也没实测。&lt;/p&gt;

&lt;h2&gt;　　2、window平台&lt;/h2&gt;
&lt;p&gt;　　　　x86、x86_64下的.dll文件：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1278213/201711/1278213-20171117224301765-831522313.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;　　3、Mac平台&lt;/h2&gt;
&lt;p&gt;　　　　kcp.bundle，配置时选择osx系统，任意cpu&lt;/p&gt;
&lt;h2&gt;　　4、linux平台&lt;/h2&gt;
&lt;p&gt;　　　　x86、x86_64下的.so文件，相应配置&lt;/p&gt;
&lt;h2&gt;　　5、andorid平台&lt;/h2&gt;
&lt;p&gt;　　　　Android子目录下的.so文件，选择Android Platform，cpu架构做对应勾选，很简单，不再截图&lt;/p&gt;
&lt;h2&gt;　　6、iOS平台&lt;/h2&gt;
&lt;p&gt;　　　　&lt;span&gt;&lt;span&gt;选择iOS Platform&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;　　编写对应kcp.cs文件，声明外部函数，脚本如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; KCP
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Runtime.InteropServices;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; kcp
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; UNITY_IPHONE &amp;amp;&amp;amp; !UNITY_EDITOR
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; KcpDLL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__Internal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; KcpDLL = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;kcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         [DllImport(KcpDLL, CallingConvention=&lt;span&gt;CallingConvention.Cdecl)]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;extern&lt;/span&gt; &lt;span&gt;uint&lt;/span&gt; ikcp_check(IntPtr kcp, &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; current);、
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;其它接口省略&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1）函数调用约定指明为cdecl&lt;/p&gt;
&lt;p&gt;　　2）所有接口以静态外部函数导出&lt;/p&gt;
&lt;p&gt;　　3）DllIport在iOS上和其它平台导出使用的参数不一样&lt;/p&gt;
&lt;p&gt;　　4）在构建你自己的动态库时依葫芦画瓢就好，没啥太多要说的&lt;/p&gt;


&lt;p&gt;　　github地址：&lt;a href=&quot;https://github.com/smilehao/kcp_bulild&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/smilehao/kcp_bulild&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 17 Nov 2017 14:58:00 +0000</pubDate>
<dc:creator>SChivas</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/SChivas/p/7854100.html</dc:identifier>
</item>
<item>
<title>比特币区块结构Merkle树及简单支付验证分析 - Tiny熊</title>
<link>http://www.cnblogs.com/tinyxiong/p/7854079.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tinyxiong/p/7854079.html</guid>
<description>&lt;p&gt;在比特币网络中，不是每个节点都有能力储存完整的区块链数据，受限于存储空间的的限制，很多节点是以SPV（Simplified Payment Verification简单支付验证）钱包接入比特币网络，通过简单支付验证可以在不必存储完整区块链下对交易进行验证，本文将分析区块结构Merkle树及如何进行交易验证。&lt;/p&gt;
&lt;h2 id=&quot;区块结构&quot;&gt;区块结构&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;https://learnblockchain.cn/2017/11/04/bitcoin-pow/&quot;&gt;工作量证明&lt;/a&gt;中出现过一个区块信息截图：&lt;br/&gt;&lt;img src=&quot;https://learnblockchain.cn/images/block_info_493050.jpg&quot; alt=&quot;区块#493050&quot;/&gt;&lt;/p&gt;
&lt;p&gt;细心的同学一定已经在里面发现了很多未讲的其他信息，如：时间戳，版本号，交易次数，二进制哈希树根(Merkle根)等。&lt;/p&gt;
&lt;p&gt;我们来看看一个区块结构到底是怎样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learnblockchain.cn/images/block_structure.jpeg&quot; alt=&quot;区块结构图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图（下文称：区块结构图）所示：每个数据区块包含区块头和区块体。&lt;br/&gt;区块头封装了当前版本号、前一区块哈希值、当前区块PoW要求的随机数(Nonce)、时间戳、以及Merkle根信息。&lt;br/&gt;区块体则包括当前区块经过验证的、 区块创建过程中生成的所有交易记录。这些记录通过 Merkle树的哈希过程生成唯一的Merkle根并记入区块头.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;区块哈希值实际上并不包含在区块的数据结构里，其实区块打包时只有区块头被用于计算哈希（从网络被接收时由每个节点计算出来），常说的区块哈希值实际是区块头哈希值，它可以用来唯一、明确地标识一个区块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;区块头是80字节，而平均每个交易至少是250字节，而且平均每个区块包含2000个交易。因此，包含完整交易的区块比区块头的4千倍还要大。&lt;br/&gt;SPV节点只下载区块头，不下载包含在每个区块中的交易信息。这样的不含交易信息的区块链，大小只有完整区块链的几千分之1，那SPV节点是如何验证交易的呢？&lt;/p&gt;
&lt;h2 id=&quot;哈希验证&quot;&gt;哈希验证&lt;/h2&gt;
&lt;p&gt;上面先留一个引子，先来回顾下哈希函数，&lt;a href=&quot;https://learnblockchain.cn/2017/10/25/whatbc/&quot;&gt;记账原理&lt;/a&gt;我们知道原始信息任何微小的变化都会哈希完全不同的哈希值。&lt;/p&gt;
&lt;h3 id=&quot;简单文件验证&quot;&gt;简单文件验证&lt;/h3&gt;
&lt;p&gt;我们通常用哈希来检验下载的文件是否完整，我经常看到这样的下载页面：&lt;br/&gt;&lt;img src=&quot;https://learnblockchain.cn/images/ex_check_file.jpeg&quot; alt=&quot;下载hash&quot;/&gt;&lt;br/&gt;可以看到下载链接后面提供了一个MD5（MD5也是一种Hash算法），这样我们可以在下载之后对文件计算MD5，如果MD5与提供的MD5相等，说明文件有没有被损坏，这个验证过程相信大家都能理解。&lt;/p&gt;
&lt;h3 id=&quot;多点文件验证哈希列表&quot;&gt;多点文件验证(哈希列表)&lt;/h3&gt;
&lt;p&gt;现在复杂度提高一点，在P2P网络中下载时，会把大文件切成小文件，同时从多个机器上下载数据，这个时候怎么验证数据呢？&lt;/p&gt;
&lt;p&gt;以BT下载为例，在下载真正的数据之前，我们会先下载一个哈希列表的（每个下小块计算出一个哈希），如果有一个小块数据在传输过程中损坏了，那我只要重新下载这一个数据块就行了，这时有一个问题就出现了，那么多的哈希，怎么保证它们本身(哈希列表中的哈希值)都是正确地呢？&lt;/p&gt;
&lt;p&gt;答案是把每个小块数据的哈希值拼到一起，然后对这个长字符串在作一次哈希运算，得到哈希列表的根哈希。只要根哈希校对比一样就说明验哈希列表是正确的，再通过哈希列表校验小数据块，如果所有的小数据块验证通过则说明大文件没有被损坏。&lt;/p&gt;
&lt;h2 id=&quot;merkle树&quot;&gt;Merkle树&lt;/h2&gt;
&lt;p&gt;验证交易的过程和文件验证很相似，可以人为每个交易是一个小数据块，但比特币使用Merkle树的方式进行验证，相对于哈希列表，Merkle树是一种哈希二叉树，它的明显的一个好处是可以单独拿出一个分支来（作为一个小树）对部分数据进行校验，更加高效。&lt;/p&gt;
&lt;p&gt;我们回看下上面的区块结构图，区块体就包含这样一个Merkle树,Merkle树被用来归纳一个区块中的所有交易。&lt;/p&gt;
&lt;p&gt;每个叶子节点是每个交易信息的哈希，往上对相邻的两个哈希合并成字符串再哈希，继续类似的操作直到只剩下顶部的一个节点，即Merkle根，存入区块头。&lt;/p&gt;
&lt;p&gt;因为Merkle树是二叉树，所以它需要偶数个叶子节点。如果仅有奇数个交易需要归纳，那最后的交易就会被复制一份以构成偶数个叶子节点，这种偶数个叶子节点的树也被称为平衡树。&lt;/p&gt;
&lt;h3 id=&quot;简化支付验证&quot;&gt;简化支付验证&lt;/h3&gt;
&lt;p&gt;SPV节点不保存所有交易也不会下载整个区块，仅仅保存区块头，我们来看看它是如何对交易数据进行验证的。&lt;/p&gt;
&lt;p&gt;假如要验证区块结构图中交易6，SPV节点会通过向相邻节点索要（通过Merkleblock消息）包括从交易6哈希值沿Merkle树上溯至区块头根哈希处的哈希序列 (即哈希节点6, 5, 56, 78, 5678, 1234 1~8 - 称为认证路径) 来确认交易的存在性和正确性。（在N个交易组成的区块中确认任一交易只需要计算log2(N)个字节的哈希值，非常快速高效）&lt;/p&gt;
&lt;p&gt;大家明白了吗？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learnblockchain.cn/&quot;&gt;深入浅出区块链&lt;/a&gt; - 系统学习区块链，打造最好的区块链技术博客&lt;/p&gt;
</description>
<pubDate>Fri, 17 Nov 2017 14:52:00 +0000</pubDate>
<dc:creator>Tiny熊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tinyxiong/p/7854079.html</dc:identifier>
</item>
</channel>
</rss>