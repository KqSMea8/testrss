<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>二分查找算法实现（图解）与实例 - IDreamo</title>
<link>http://www.cnblogs.com/idreamo/p/9000762.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/idreamo/p/9000762.html</guid>
<description>&lt;p&gt;现在我们来玩一个猜数的游戏，假设有一个人要我们猜0-99之间的一个数。那么最好的方法就是从0-99的中间数49开始猜。如果要猜的数小于49，就猜24（0-48的中间数）；如果要猜的数大于49，就猜74（50-99的中间数）。重复这个过程来缩小猜测的范围，直到猜出正确的数字。二分查找的工作方法类似于此。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二分查找操作的数据集是一个有序的数据集&lt;/strong&gt;。开始时，先找出有序集合中间的那个元素。如果此元素比要查找的元素大，就接着在较小的一个半区进行查找；反之，如果此元素比要找的元素小，就在较大的一个半区进行查找。在每个更小的数据集中重复这个查找过程，直到找到要查找的元素或者数据集不能再分割。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二分查找能应用于任何类型的数据，只要能将这些数据按照某种规则进行排序&lt;/strong&gt;。然而，正因为它依赖于一个有序的集合，这使得它在处理那些频繁插入和删除操作的数据集时不太高效。这是因为，对于插入和操作来说，为了保证查找过程正常进行，必须保证数据集始终有序。相对于查找来说，维护一个有序数据集的代价更高。此外，元素必须存储在连续的空间中。&lt;strong&gt;因此，当待搜索的集合是相对静态的数据集时，此时使用二分查找是最好的选择&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;二分查找的接口定义&lt;/h3&gt;
&lt;p&gt;bisearch&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;int bisearch(void *sorted, void *target, int size, int esize, int (compare *)(const void *key1, const void *key2);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;：如果查找成功返回目标的索引值；否则返回-1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：利用二分查找定位有序元素数组sorted中target。数组中的元素个数由size决定，每个元素的大小由esize决定。函数指针compare指向一个用户自定义的比较函数。如果key1大于key2，函数返回1，如果key1=key2，函数返回0，如果key1小于key2，函数返回-1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复杂度&lt;/strong&gt;：O（lg n），n为要查找的元素个数。&lt;/p&gt;
&lt;h3&gt;二分查找的实现与分析&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;二分查找法实质上是不断地将有序数据集进行对半分割，并检查每个分区的中间元素&lt;/strong&gt;。在以下介绍的实现方法中，有序数据集存放在sorted中，sorted是一块连续的存储空间。参数target是要查找的数据。&lt;/p&gt;
&lt;p&gt;此实现过程的实施是通过变量left和right控制一个循环来查找元素（其中left和right是正在查找的数据集的两个边界值）。首先，将left和right分别设置为0和size-1。在循环的每次迭代过程中，将middle设置为left和right之间区域的中间值。如果处于middle的元素比目标值小，将左索引值移动到middle后的一个元素的位置上。即下一组要搜索的区域是当前数据集的上半区。如果处于middle的元素比目标元素大，将右索引值移动到middle前一个元素的位置上。即下一组要搜索的区域是当前数据集的下半区。随着搜索的不断进行，left从左向右移，right从右向左移。一旦在middle处找到目标，查找将停止；如果没有找到目标，left和right将重合。下图显示了此过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201805/1281268-20180509063436446-1450605939.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二分查找的时间复杂度取决于查找过程中分区数可能的最大值。对于一个有n个元素的数据集来说，最多可以进行lg n次分区。对于二分查找，这表示最终可能在最坏的情况下执行的检查的次数：例如，在没有找到目标时。所以二分查找的时间复杂度为O（lg n）。&lt;/p&gt;
&lt;h4&gt;示例：二分查找的实现&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdlib.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;&lt;span&gt;

#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;bisearch 二分查找函数&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; bisearch(&lt;span&gt;void&lt;/span&gt; *sorted, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *target, &lt;span&gt;int&lt;/span&gt; size, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; esize,
             &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; (*compare)(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *key1, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; key2))
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; left, middle, right;
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;初始化left和right为边界值&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    left &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    right &lt;/span&gt;= size - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;; 
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;循环查找，直到左右两个边界重合&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(left&amp;lt;=&lt;span&gt;right)
    {
        middle &lt;/span&gt;= (left + right) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;(compare(((&lt;span&gt;char&lt;/span&gt; *)sorted + (esize *&lt;span&gt; middle)),target))
        {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;: &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;middle小于目标值&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;移动到middle的右半区查找&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        left &lt;/span&gt;= middle + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;:  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;middle大于目标值&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;移动到middle的左半区查找&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        right &lt;/span&gt;= middle - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;:  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;middle等于目标值&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;返回目标的索引值middle&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; middle;
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;目标未找到，返回-1&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二分查找的例子：拼写检查器&lt;/h3&gt;
&lt;p&gt;拼写检查器在各种各样的文档中已经成为一种默认的工具。从计算机的角度来看，一个基本的拼写检查器的工作原理就是简单地将文本字符串中的单词与字典中的单词进行比对。字典包含可接受的单词集合。&lt;/p&gt;
&lt;p&gt;在些介绍的一个例子，它包含一个函数spell。spell一次检查一个文本字符串中的单词。它接受三个参数：dictionary是一个可接受的有序字符串数组；size是字典中字符串的个数；word是将要被检查的单词。此函数调用bisearch在dictionary中查找word。如果单词找到，那么拼写正确。&lt;/p&gt;
&lt;p&gt;函数spell的时间复杂度为O（lg n），与bisearch相同，其中n是dictionary中的单词的个数。检查整个文档的时间复杂度是O（m lg n），m是文档中要检查的单词个数。&lt;/p&gt;
&lt;h4&gt;示例：拼写检查器的头文件&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;spell.h&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#ifdef SPELL_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; SPELL_H
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;定义字典单词的最大字节数&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; SPELL_SIZE 31

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;公共接口&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; spell(&lt;span&gt;char&lt;/span&gt;(*dictionary)[SPELL_SIZE],&lt;span&gt;int&lt;/span&gt; size, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;word);
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; SPELL_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;示例：拼写检查器的实现&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
#include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spell.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;字义字符串比较函数&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; compare_str(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *str1, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;str2)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; retval;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((retval = strcmp((&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)str1,(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;*)str2))&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(retval&amp;lt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;spell 函数&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; spell(&lt;span&gt;char&lt;/span&gt;(*dictionary)[SPELL_SIZE],&lt;span&gt;int&lt;/span&gt; size,&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;word)
{
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;查找单词&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(bisearch(dictionary, word, size, SPELL_SIZE, compare_str)&amp;gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; 
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 08 May 2018 22:39:00 +0000</pubDate>
<dc:creator>IDreamo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/idreamo/p/9000762.html</dc:identifier>
</item>
<item>
<title>微软黑科技强力注入，.NET C#全面支持人工智能 - dncNew</title>
<link>http://www.cnblogs.com/dncNew/p/dncAI.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dncNew/p/dncAI.html</guid>
<description>&lt;p&gt;微软黑科技强力注入，.NET C#全面支持人工智能，AI编程领域开始C#、Py……百花齐放&lt;/p&gt;
&lt;p&gt;就像武侠小说中，一个普通人突然得到绝世高手的几十年内力注入，招式还没学，一身内力有点方&lt;/p&gt;

&lt;p&gt;Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/&quot; target=&quot;_blank&quot;&gt;https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;微软 正式开源 C#人工智能框架：&lt;a href=&quot;https://github.com/dotnet/machinelearning&quot; target=&quot;_blank&quot;&gt;https://github.com/dotnet/machinelearning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open-Source Machine Learning in Azure&lt;/p&gt;


&lt;p&gt;Today at //Build 2018, we are excited to announce the preview of &lt;strong&gt;ML.NET, a cross-platform, open source machine learning framework&lt;/strong&gt;. ML.NET will allow .NET developers to develop their own models and infuse custom ML into their applications without prior expertise in developing or tuning machine learning models.&lt;/p&gt;

&lt;p&gt;ML.NET was originally developed in Microsoft Research and evolved into a significant framework over the last decade; it is used across many product groups in Microsoft like &lt;strong&gt;Windows, Bing, Azure, and more&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;With this first preview release, ML.NET enables ML tasks like classification (e.g. text categorization and sentiment analysis) and regression (e.g. forecasting and price prediction). Along with these ML capabilities, this first release of ML.NET also brings the first draft of .NET APIs for training models, using models for predictions, as well as the core components of this framework, such as learning algorithms, transforms, and core ML data structures.&lt;/p&gt;

&lt;p&gt;ML.NET is first and foremost a framework, which means that it can be extended to add popular ML Libraries like TensorFlow, Accord.NET, and CNTK. We are committed to bringing the full experience of ML.NET’s internal capabilities to ML.NET in open source.&lt;/p&gt;
&lt;p&gt;To sum it all up, ML.NET is our commitment to &lt;span&gt;make ML great in .NET&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The table below describes the entire list of components that are being released as a part of ML.NET 0.1.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/2018/05/POSTS.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-17575&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/2018/05/POSTS.png&quot; alt=&quot;&quot; width=&quot;587&quot; height=&quot;294&quot;/&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;We aim to make ML.NET’s APIs generic, such that other frameworks like CNTK, Accord.NET, TensorFlow and other libraries can become usable through one shared API.&lt;/p&gt;

&lt;p&gt;Over time, ML.NET will enable other ML scenarios like recommendation systems, anomaly detection, and other approaches, like deep learning, by leveraging popular deep learning libraries like TensorFlow, Caffe2, and CNTK, and general machine learning libraries like Accord.NET.&lt;/p&gt;
&lt;p&gt;ML.NET also complements the experience that Azure Machine Learning and Cognitive Services provides by allowing for a code-first approach, supports app-local deployment and the ability to build your own models.&lt;/p&gt;
&lt;p&gt;The rest of this blog post provides more details about ML.NET; feel free to jump to the one that interests you the most.&lt;/p&gt;

&lt;p&gt;以上转载自微软官方博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/&quot; target=&quot;_blank&quot;&gt;https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;------------------------------------------ &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;代号：dnc 2018&lt;/li&gt;
&lt;li&gt;亮点：去中心化、社区驱动 开源峰会&lt;/li&gt;
&lt;li&gt;时间：2018年5月20日 周日&lt;/li&gt;
&lt;li&gt;地点：在线峰会、远程参与&lt;/li&gt;
&lt;li&gt;官网：dncNew.com&lt;/li&gt;
&lt;li&gt;形式：每个主题5分钟-15分钟闪电演讲 &lt;/li&gt;
&lt;li&gt;dnc开源峰会直播QQ群 779699538 &lt;a href=&quot;https://github.com/dncNew/dncNew/blob/master/qq.md&quot;&gt;申请加入群的步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dnc开源峰会直播微信群 &lt;a href=&quot;https://github.com/dncNew/dncNew/blob/master/qq.md&quot;&gt;申请加入群的步骤&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 08 May 2018 19:03:00 +0000</pubDate>
<dc:creator>dncNew</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dncNew/p/dncAI.html</dc:identifier>
</item>
<item>
<title>RESTful规范建议 - 编程玩家</title>
<link>http://www.cnblogs.com/Erik_Xu/p/9011013.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Erik_Xu/p/9011013.html</guid>
<description>&lt;p&gt;RESTful是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。&lt;/p&gt;
&lt;p&gt;REST是&lt;strong&gt;&lt;span&gt;Re&lt;/span&gt;&lt;/strong&gt;presentational &lt;strong&gt;&lt;span&gt;S&lt;/span&gt;&lt;/strong&gt;tate &lt;strong&gt;&lt;span&gt;T&lt;/span&gt;&lt;/strong&gt;ransfer的缩写，是Roy Thomas Fielding在他2000年的博士论文中提出的。其提出的设计概念和准则为：&lt;/p&gt;
&lt;p&gt;1. 网络上的所有事物都可以抽象为资源&lt;/p&gt;
&lt;p&gt;2. 每个资源都应该有唯一的标识（identifier），对资源的操作不会改变标识&lt;/p&gt;
&lt;p&gt;3. 所有的操作都是无状态的&lt;/p&gt;
&lt;p&gt;4. 使用标准方法（GET、POST、PUT、PATCH、DELETE）操作资源&lt;/p&gt;


&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;HTTP方法&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;URI&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;幂等&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;安全&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; GET&lt;/td&gt;
&lt;td&gt; /api/members&lt;/td&gt;
&lt;td&gt; 获取成员列表&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; GET&lt;/td&gt;
&lt;td&gt; /api/members/{id} &lt;/td&gt;
&lt;td&gt; 获取指定成员&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; POST&lt;/td&gt;
&lt;td&gt; /api/members&lt;/td&gt;
&lt;td&gt; 创建一个成员&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; PUT&lt;/td&gt;
&lt;td&gt; /api/members/{id} &lt;/td&gt;
&lt;td&gt; 更新成员所有信息&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; PATCH&lt;/td&gt;
&lt;td&gt; /api/members/{id} &lt;/td&gt;
&lt;td&gt; 更新成员部分信息&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; DELETE&lt;/td&gt;
&lt;td&gt; /api/members/{id} &lt;/td&gt;
&lt;td&gt; 删除指定成员&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;HTTP方法&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;URI&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;幂等&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;安全&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; GET&lt;/td&gt;
&lt;td&gt; /api/groups&lt;/td&gt;
&lt;td&gt; 获取群组列表&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; GET&lt;/td&gt;
&lt;td&gt; /api/groups/{id}&lt;/td&gt;
&lt;td&gt; 获取指定群组&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; POST&lt;/td&gt;
&lt;td&gt; /api/groups&lt;/td&gt;
&lt;td&gt; 创建一个群组&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; PUT&lt;/td&gt;
&lt;td&gt; /api/groups/{id}&lt;/td&gt;
&lt;td&gt; 更新群组所有信息&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; PATCH&lt;/td&gt;
&lt;td&gt; /api/groups/{id}&lt;/td&gt;
&lt;td&gt; 更新群组部分信息&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; DELETE&lt;/td&gt;
&lt;td&gt; /api/groups/{id}&lt;/td&gt;
&lt;td&gt; 删除指定群组&lt;/td&gt;
&lt;td&gt; 是&lt;/td&gt;
&lt;td&gt; 否&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt; GET&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt; /api/groups/{id}/members&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt; 获取指定群组下的成员&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt; 是&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt; 是&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt; GET&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt; /api/groups/{id}/members/{memberId}&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt; 获取指定群组下的指定成员&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt; 是 &lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt; 是&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;幂等性：同一个RESTful接口的多次访问，得到的资源状态是相同的。&lt;/p&gt;
&lt;p&gt;安全性：对该RESTful接口访问，不会使服务端资源的状态发生改变。&lt;/p&gt;


&lt;p&gt;1. API尽量采用通过安全通道的HTTPS协议（https）。&lt;/p&gt;

&lt;p&gt;2. 请求体与响应体统一通过json格式来承载，json使用Camel的命名规则，媒体类型需设置为“application/json”。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;Request&lt;/p&gt;
&lt;p&gt;　　Accept: application/json&lt;/p&gt;
&lt;p&gt;　　Content-Type: application/json&lt;/p&gt;

&lt;p&gt;Response&lt;/p&gt;
&lt;p&gt;　　Content-Type: application/json&lt;/p&gt;

&lt;p&gt;3. 请求体与响应体统一采用UTF-8编码格式，时间统一使用UTC格式：yyyy-MM-dd'T'HH:mm:ss[.SSS]'Z'。&lt;/p&gt;

&lt;p&gt;4. URI模版：/{domain}/{service or module}/api/{version}/{resource}，URI应全为小写字母，短语单词使用“-”分隔。&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt; domain&lt;/td&gt;
&lt;td&gt; 领域名称，不需要区分领域时，可以不指定&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt; education(教育领域)&lt;/p&gt;
&lt;p&gt; finance(金融领域)&lt;/p&gt;
&lt;p&gt; game(游戏领域)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; service or module&lt;/td&gt;
&lt;td&gt; 服务或模块名&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; account(账户模块)&lt;/p&gt;
&lt;p&gt; order(订单服务)&lt;/p&gt;
&lt;p&gt; storage(库存服务)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; version&lt;/td&gt;
&lt;td&gt; 版本号&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; v1&lt;/p&gt;
&lt;p&gt; v2&lt;/p&gt;
&lt;p&gt; v3&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt; resource&lt;/td&gt;
&lt;td&gt; 服务或模块内资源&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; users(用户)&lt;/p&gt;
&lt;p&gt; products（产品）&lt;/p&gt;
&lt;p&gt; members（成员）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;5. 资源增、删、改、查外的操作，采用模板：/{domain}/{service or module}/api/{version}/{resource}/action/{action}。&lt;/p&gt;
&lt;p&gt;示例：/common/account/api/v1/users/action/login&lt;/p&gt;


&lt;p&gt;1. 获取资源列表成功返回&lt;strong&gt;&lt;span&gt;200&lt;/span&gt;&lt;/strong&gt;，响应消息体中包含记录总条数、当前页码、每页记录，以及对应的资源。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;Response Body&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;　　&quot;total&quot;: xxx,&lt;/p&gt;
&lt;p&gt;　　&quot;pageIndex&quot;: xxx,&lt;/p&gt;
&lt;p&gt;　　&quot;pageSize&quot;:xxx,&lt;/p&gt;
&lt;p&gt;　　&quot;records&quot;:[&lt;/p&gt;
&lt;p&gt;　　　　{ &quot;id&quot;: xxx, &quot;name&quot;:&quot;xxx&quot; },&lt;/p&gt;
&lt;p&gt;　　　　{ &quot;id&quot;: xxx, &quot;name&quot;:&quot;xxx&quot; }&lt;/p&gt;
&lt;p&gt;　　]&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;2. 获取指定资源成功返回&lt;span&gt;&lt;strong&gt;200&lt;/strong&gt;&lt;/span&gt;，响应消息体中包含该资源的信息。&lt;/p&gt;

&lt;p&gt;3. 创建资源成功返回&lt;strong&gt;&lt;span&gt;201&lt;/span&gt;&lt;/strong&gt;，并在响应消息头中包含定位该资源的地址。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;Response Headers&lt;/p&gt;
&lt;p&gt;{&lt;br/&gt;　　&quot;pragma&quot;: &quot;no-cache&quot;,&lt;br/&gt;　　&quot;server&quot;: &quot;xxx&quot;,&lt;br/&gt;　　&quot;content-type&quot;: &quot;application/json; charset=utf-8&quot;,&lt;br/&gt;　　&quot;location&quot;: &quot;https://xxx/api/users/xxx&quot;, //资源访问地址&lt;br/&gt;　　&quot;content-length&quot;: &quot;xxx&quot;&lt;br/&gt;}&lt;/p&gt;

&lt;p&gt;4. 资源更新成功返回&lt;strong&gt;&lt;span&gt;200&lt;/span&gt;&lt;/strong&gt;，并在响应消息中体返回更新后的资源内容。&lt;/p&gt;

&lt;p&gt;5. 资源删除成功返回&lt;strong&gt;&lt;span&gt;204&lt;/span&gt;&lt;/strong&gt;，响应消息体无内容。&lt;/p&gt;

&lt;p&gt;6. 针对&lt;strong&gt;&lt;span&gt;400 Bad Request&lt;/span&gt;&lt;/strong&gt;客户端错误，可以在响应消息体中扩展状态码。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;Response Code&lt;/p&gt;
&lt;p&gt;401 Bad Request&lt;/p&gt;
&lt;p&gt;Response Body&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;　　&quot;code&quot;: 400001,&lt;/p&gt;
&lt;p&gt;　　&quot;message&quot;: &quot;用户名或密码错误&quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------&lt;/p&gt;
&lt;p&gt;Response Code&lt;/p&gt;
&lt;p&gt;401 Bad Request&lt;/p&gt;
&lt;p&gt;Response Body&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;　　&quot;code&quot;: 400002,&lt;/p&gt;
&lt;p&gt;　　&quot;message&quot;: &quot;邮箱已存在&quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------&lt;/p&gt;
&lt;p&gt;Response Code&lt;/p&gt;
&lt;p&gt;401 Bad Request&lt;/p&gt;
&lt;p&gt;Response Body&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;　　&quot;code&quot;: 400003,&lt;/p&gt;
&lt;p&gt;　　&quot;message&quot;: &quot;邮箱地址错误&quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;7. 针对&lt;strong&gt;&lt;span&gt;5XX&lt;/span&gt;&lt;/strong&gt;的服务端错误，只在响应消息体中提供简单提示，不可打印错误日志信息。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;Response Body&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;　　&quot;message&quot;: &quot;内部错误，请稍后再试或联系管理员&quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;7. 其他客户端错误的响应码，只在响应消息体中提供相应提示。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;Response Code&lt;/p&gt;
&lt;p&gt;401 Unauthorized&lt;/p&gt;
&lt;p&gt;Response Body&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;　　&quot;message&quot;: &quot;用户未登录&quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------&lt;/p&gt;
&lt;p&gt;Response Code&lt;/p&gt;
&lt;p&gt;403 Forbidden&lt;/p&gt;
&lt;p&gt;Response Body&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;　　&quot;message&quot;: &quot;权限不足&quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------&lt;/p&gt;
&lt;p&gt;Response Code&lt;/p&gt;
&lt;p&gt;404 Not Found&lt;/p&gt;
&lt;p&gt;Response Body&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;　　&quot;message&quot;: &quot;请求资源不存在或已被删除&quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;


&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;响应码&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; 200 OK&lt;/td&gt;
&lt;td&gt; 请求已成功&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; 201 Created&lt;/td&gt;
&lt;td&gt; 资源已创建&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 204 No Content&lt;/td&gt;
&lt;td&gt; 请求已成功，但无返回内容&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; 304 Not Modified&lt;/td&gt;
&lt;td&gt; 缓存有效&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 400 Bad Request&lt;/td&gt;
&lt;td&gt; 语义有误，当前请求无法被服务器理解，请求参数错误&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 401 Unauthorized&lt;/td&gt;
&lt;td&gt; 当前请求需要用户认证（登录）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 403 Forbidden&lt;/td&gt;
&lt;td&gt; 用户已认证（登录），但权限不足&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 404 Not Found&lt;/td&gt;
&lt;td&gt; 请求源未在服务器上被发现&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; 405 Method Not Allowed&lt;/td&gt;
&lt;td&gt; 请求方法不能被用于请求相应的资源，如使用PUT方法访问只接受POST方法的API&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 500 Internal Server Error&lt;/td&gt;
&lt;td&gt; 服务端内部错误&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; 502 Bad Gateway&lt;/td&gt;
&lt;td&gt; 网关错误&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; 504 Gateway Timeout&lt;/td&gt;
&lt;td&gt; 网关超时&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Tue, 08 May 2018 17:56:00 +0000</pubDate>
<dc:creator>编程玩家</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Erik_Xu/p/9011013.html</dc:identifier>
</item>
<item>
<title>Apache Flink 流处理实例 - wander4096</title>
<link>http://www.cnblogs.com/wander4096/p/9011989.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wander4096/p/9011989.html</guid>
<description>&lt;p&gt;维基百科在 IRC 频道上记录 Wiki 被修改的日志，我们可以通过监听这个 IRC 频道，来实时监控给定时间窗口内的修改事件。Apache Flink 作为流计算引擎，非常适合处理流数据，并且，类似于 Hadoop MapReduce 等框架，Flink 提供了非常良好的抽象，使得业务逻辑代码编写非常简单。我们通过这个简单的例子来感受一下 Flink 的程序的编写。&lt;/p&gt;

&lt;p&gt;Flink 提供了 &lt;code&gt;flink-quickstart-java&lt;/code&gt; 和 &lt;code&gt;flink-quickstart-scala&lt;/code&gt; 插件，允许使用 Maven 的开发者创建统一的项目模版，应用项目模板可以规避掉很多部署上的坑。&lt;/p&gt;
&lt;p&gt;构建这次工程的命令如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ mvn archetype:generate \
    -DarchetypeGroupId=org.apache.flink \
    -DarchetypeArtifactId=flink-quickstart-java \
    -DarchetypeCatalog=https://repository.apache.org/content/repositories/snapshots/ \
    -DarchetypeVersion=1.6-SNAPSHOT \
    -DgroupId=wiki-edits \
    -DartifactId=wiki-edits \
    -Dversion=0.1 \
    -Dpackage=wikiedits \
    -DinteractiveMode=false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意高版本的 Maven 不支持 &lt;code&gt;-DarchetypeCatalog&lt;/code&gt; 参数，可以将第一行改为 &lt;code&gt; mvn org.apache.maven.plugins:maven-archetype-plugin:2.4::generate \&lt;/code&gt; 或者去掉 &lt;code&gt;-DarchetypeCatalog&lt;/code&gt; 行，并将 &lt;code&gt;.m2/settings.xml&lt;/code&gt; 修改如下，其中主要是在 &lt;code&gt;//profiles/profile/repositories&lt;/code&gt; 下设置好搜索 &lt;code&gt;archetype&lt;/code&gt; 的仓库地址&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;settings&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;  xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;  xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                      http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;acme&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;archetype&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Apache Development Snapshot Repository&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://repository.apache.org/content/repositories/snapshots/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/releases&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;activeProfiles&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;activeProfile&amp;gt;&lt;/span&gt;acme&lt;span class=&quot;kw&quot;&gt;&amp;lt;/activeProfile&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/activeProfiles&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功下载项目模板后，在当前目录下应当能看到 &lt;code&gt;wiki-edit&lt;/code&gt; 目录。执行命令 &lt;code&gt;rm wiki-edits/src/main/java/wikiedits/*.java&lt;/code&gt; 清除模板自带的 Java 文件。&lt;/p&gt;
&lt;p&gt;为了监听维基百科的 IRC 频道，在 &lt;code&gt;pom.xml&lt;/code&gt; 文件下添加如下依赖，分别是 Flink 的客户端和 WikiEdit 的连接器&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.flink&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;flink-clients_${scala.binary.version}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${flink.version}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.flink&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;flink-connector-wikiedits_${scala.binary.version}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${flink.version}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来的代码编写工作假定你是在 IDE 下编写的，主要是为了避免啰嗦的 &lt;code&gt;import&lt;/code&gt; 语句。包含 &lt;code&gt;import&lt;/code&gt; 等模板代码的全部代码在末尾给出。&lt;/p&gt;
&lt;p&gt;首先我们创建用于运行的主程序代码 &lt;code&gt;src/main/java/wikiedits/WikipediaAnalysis.java&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package wikiedits;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; WikipediaAnalysis {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {

    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;流处理的 Flink 程序的第一步是创建流处理执行上下文 &lt;code&gt;StreamExecutionEnvironment&lt;/code&gt;，它类似于其他框架内的 Configuration 类，用于配制 Flink 程序和运行时的各个参数，对应的语句如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;StreamExecutionEnvironment see = StreamExecutionEnvironment.&lt;span class=&quot;fu&quot;&gt;getExecutionEnvironment&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下一步我们以维基百科 IRC 频道的日志作为数据源创建连接&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;DataStream&amp;lt;WikipediaEditEvent&amp;gt; edits = see.&lt;span class=&quot;fu&quot;&gt;addSource&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;WikipediaEditsSource&lt;/span&gt;());&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个语句创建了填充 &lt;code&gt;WikipediaEditEvent&lt;/code&gt; 的 &lt;code&gt;DataStream&lt;/code&gt;，拿到数据流之后我们就可以对它做进一步的操作了。&lt;/p&gt;
&lt;p&gt;我们的目标是统计给定时间窗口内，比如说五秒内，用户对维基百科的修改字节数。因此我们对每个 &lt;code&gt;WikipediaEditEvent&lt;/code&gt; 以用户名作为键来标记（keyed）。Flink 兼容 Java 1.6 版本，因此古老的版本中 Flink 提供 &lt;code&gt;KeySelector&lt;/code&gt; 函数式接口来标记&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;KeyedStream&amp;lt;WikipediaEditEvent, String&amp;gt; keyedEdits = edits
    .&lt;span class=&quot;fu&quot;&gt;keyBy&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; KeySelector&amp;lt;WikipediaEditEvent, String&amp;gt;() {
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getKey&lt;/span&gt;(WikipediaEditEvent event) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; event.&lt;span class=&quot;fu&quot;&gt;getUser&lt;/span&gt;();
        }
    });&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当前版本的 Flink 主要支持的是 Java 8 版本，因此我们也可以用 Lambda 表达式来改写这段较为繁琐的代码&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;KeyedStream&amp;lt;WikipediaEditEvent, String&amp;gt; keyedEdits = edits
        .&lt;span class=&quot;fu&quot;&gt;keyBy&lt;/span&gt;(WikipediaEditEvent::getUser);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个语句定义了 &lt;code&gt;keyedEdits&lt;/code&gt; 变量，它是一个概念上形如&lt;code&gt;(String, WikipediaEditEvent)&lt;/code&gt; 的数据流，即以字符串（用户名）为键，&lt;code&gt;WikipediaEditEvent&lt;/code&gt; 为值的数据的流。这一步骤类似于 MapReduce 的 Shuffle 过程，针对 &lt;code&gt;keyedEdits&lt;/code&gt; 的处理将自动按照键分组，因此我们可以直接对数据进行 &lt;code&gt;fold&lt;/code&gt; 操作以折叠聚合同一用户名的修改字节数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;DataStream&amp;lt;Tuple2&amp;lt;String, Long&amp;gt;&amp;gt; result = keyedEdits
    .&lt;span class=&quot;fu&quot;&gt;timeWindow&lt;/span&gt;(Time.&lt;span class=&quot;fu&quot;&gt;seconds&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;))
    .&lt;span class=&quot;fu&quot;&gt;fold&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Tuple2&amp;lt;&amp;gt;(&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;, 0L), &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; FoldFunction&amp;lt;WikipediaEditEvent, Tuple2&amp;lt;String, Long&amp;gt;&amp;gt;() {
        &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Tuple2&amp;lt;String, Long&amp;gt; &lt;span class=&quot;fu&quot;&gt;fold&lt;/span&gt;(Tuple2&amp;lt;String, Long&amp;gt; acc, WikipediaEditEvent event) {
            acc.&lt;span class=&quot;fu&quot;&gt;f0&lt;/span&gt; = event.&lt;span class=&quot;fu&quot;&gt;getUser&lt;/span&gt;();
            acc.&lt;span class=&quot;fu&quot;&gt;f1&lt;/span&gt; += event.&lt;span class=&quot;fu&quot;&gt;getByteDiff&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; acc;
        }
    });&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在新版的 Flink 中，&lt;code&gt;FoldFunction&lt;/code&gt; 因为无法支持部分聚合被废弃了，如果对程序有强迫症，我们可以采用类似于 MapReduce 的办法来改写上边的代码，各个方法调用的作用与它们的名字一致，其中，为了绕过类型擦除导致的问题使用了 &lt;code&gt;returns&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;DataStream&amp;lt;Tuple2&amp;lt;String, Long&amp;gt;&amp;gt; result = keyedEdits
        .&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;((event) -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Tuple2&amp;lt;&amp;gt;(event.&lt;span class=&quot;fu&quot;&gt;getUser&lt;/span&gt;(), Long.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(event.&lt;span class=&quot;fu&quot;&gt;getByteDiff&lt;/span&gt;())))
        .&lt;span class=&quot;fu&quot;&gt;returns&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; TypeHint&amp;lt;Tuple2&amp;lt;String, Long&amp;gt;&amp;gt;(){})
        .&lt;span class=&quot;fu&quot;&gt;timeWindowAll&lt;/span&gt;(Time.&lt;span class=&quot;fu&quot;&gt;seconds&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;))
        .&lt;span class=&quot;fu&quot;&gt;reduce&lt;/span&gt;((acc, a) -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Tuple2&amp;lt;&amp;gt;(a.&lt;span class=&quot;fu&quot;&gt;f0&lt;/span&gt;, acc.&lt;span class=&quot;fu&quot;&gt;f1&lt;/span&gt;+a.&lt;span class=&quot;fu&quot;&gt;f1&lt;/span&gt;));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过处理后的数据流 &lt;code&gt;result&lt;/code&gt; 中就包含了我们所需要的信息，具体地说是填充了 &lt;code&gt;Tuple2&amp;lt;String, Long&amp;gt;&lt;/code&gt;，即（用户名，修改字节数）元组的流，我们可以使用 &lt;code&gt;result.print()&lt;/code&gt; 来打印它。&lt;/p&gt;
&lt;p&gt;程序至此主要处理逻辑就写完了，但是 Flink 还需要在 &lt;code&gt;StreamExecutionEnvironment&lt;/code&gt; 类型的变量上调用 &lt;code&gt;execute&lt;/code&gt; 方法以实际执行整个 Flink 程序，该方法执行时将整个 Flink 程序转化为任务图并提交到 Flink 集群中。&lt;/p&gt;
&lt;p&gt;整个程序的代码，包括模板代码，如下所示&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package wikiedits;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.apache.flink.api.common.typeinfo.TypeHint;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.flink.streaming.api.datastream.DataStream;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.flink.streaming.api.datastream.KeyedStream;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.flink.streaming.api.windowing.time.Time;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.flink.streaming.connectors.wikiedits.WikipediaEditEvent;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.flink.streaming.connectors.wikiedits.WikipediaEditsSource;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.flink.api.java.tuple.Tuple2;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; WikipediaAnalysis {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
        StreamExecutionEnvironment see = StreamExecutionEnvironment.&lt;span class=&quot;fu&quot;&gt;getExecutionEnvironment&lt;/span&gt;();
        DataStream&amp;lt;WikipediaEditEvent&amp;gt; edits = see.&lt;span class=&quot;fu&quot;&gt;addSource&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;WikipediaEditsSource&lt;/span&gt;());
        KeyedStream&amp;lt;WikipediaEditEvent, String&amp;gt; keyedEdits = edits
                .&lt;span class=&quot;fu&quot;&gt;keyBy&lt;/span&gt;(WikipediaEditEvent::getUser);
        DataStream&amp;lt;Tuple2&amp;lt;String, Long&amp;gt;&amp;gt; result = keyedEdits
                .&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;((event) -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Tuple2&amp;lt;&amp;gt;(event.&lt;span class=&quot;fu&quot;&gt;getUser&lt;/span&gt;(), Long.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(event.&lt;span class=&quot;fu&quot;&gt;getByteDiff&lt;/span&gt;())))
                .&lt;span class=&quot;fu&quot;&gt;returns&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; TypeHint&amp;lt;Tuple2&amp;lt;String, Long&amp;gt;&amp;gt;(){})
                .&lt;span class=&quot;fu&quot;&gt;timeWindowAll&lt;/span&gt;(Time.&lt;span class=&quot;fu&quot;&gt;seconds&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;))
                .&lt;span class=&quot;fu&quot;&gt;reduce&lt;/span&gt;((acc, a) -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Tuple2&amp;lt;&amp;gt;(a.&lt;span class=&quot;fu&quot;&gt;f0&lt;/span&gt;, acc.&lt;span class=&quot;fu&quot;&gt;f1&lt;/span&gt;+a.&lt;span class=&quot;fu&quot;&gt;f1&lt;/span&gt;));
        result.&lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt;();
        see.&lt;span class=&quot;fu&quot;&gt;execute&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 IDE 运行程序，在控制台看到类似下面格式的输出，每一行前面的数字代表了这是由 &lt;code&gt;print&lt;/code&gt; 的并行实例中的编号为几的实例运行的结果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1&amp;gt; (LilHelpa,1966)
2&amp;gt; (1.70.80.5,2066)
3&amp;gt; (Beyond My Ken,-6550)
4&amp;gt; (Aleksandr Grigoryev,725)
1&amp;gt; (6.77.155.31,1943)
2&amp;gt; (Serols,1639)
3&amp;gt; (ClueBot NG,1907)
4&amp;gt; (GSS,3155)&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 08 May 2018 17:35:00 +0000</pubDate>
<dc:creator>wander4096</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wander4096/p/9011989.html</dc:identifier>
</item>
<item>
<title>《不懂说话你怎么带团队》读书笔记 - 大道方圆</title>
<link>http://www.cnblogs.com/xdecode/p/9007535.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xdecode/p/9007535.html</guid>
<description>&lt;h3&gt; &lt;span&gt;目录&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;基本原则&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;场景一: 批评时&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;场景二: 鼓励时&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;场景三: 委托任务时&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;场景四: 表扬时&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;场景五: 汇报和交流&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;场景六: 辅导与评价&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span&gt;基本原则&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;以积极的心态引导别人, 发掘组内成员闪光点.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;主动积极时&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;我决定去&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;我可以控制自己的感受&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;我们试试其他的可能性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;我可以想出更好的方案&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;我可以选择不同的风格&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;被动&lt;strong&gt;消极时&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;我不得不去&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;他令我生气无语&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;我无能无力&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;他们不会接受这个提案的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;我就这样了&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下文会从六个场景举例如何激励引导组员, 注意避免说一些令人反感的话, &lt;/p&gt;
&lt;p&gt;防止引起组员刺猬心理, 听不进去, 产生逃避想法.&lt;/p&gt;
&lt;p&gt;下文&lt;strong&gt;&lt;span&gt;正面&lt;/span&gt;&lt;/strong&gt;表示推荐用语, &lt;strong&gt;&lt;span&gt;负面&lt;/span&gt;&lt;/strong&gt;表示容易引起反感的管理用语.&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;场景一: 批评时&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用铺垫语句减少刺猬防御&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;不得不批评.&lt;/li&gt;
&lt;li&gt;自己不确定的时候想和下属确认.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;边夸奖边批评&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;批评最大目的是促使下属改善行动.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 先给予表扬, 指出改进方向, 着眼未来.&lt;/li&gt;
&lt;li&gt;负面: 突然批评, 对下属不认同, 着眼过去.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;专职项目而耽误日常工作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;疏忽日常业务固然不好, 要对下属努力表示认可.&lt;/li&gt;
&lt;li&gt;询问具体困难, 也许是超负荷工作&lt;/li&gt;
&lt;li&gt;决定多个任务优先级, 合理分配时间&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对下属批评过重&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巧用工作转移情绪&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 我刚刚话说错了, 情绪有点大.&lt;/li&gt;
&lt;li&gt;负面: 刚刚对不住, 我们出去喝一杯.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;心怀抵触的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下属需要被认可感, 当领导宣布新方案, 下属漏出不满时: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 让下属发表个人意见, 重复下属的话承接下来, 提问如何求同存异.&lt;/li&gt;
&lt;li&gt;负面: 禁止顶嘴, 责问有什么不满.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;批评毫无改变的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 寻找原因, 是不知道如何做, 还是不想做, 还是做不到.&lt;/li&gt;
&lt;li&gt;负面: 责怪不努力, 只会哼哈答应, 不知道怎么做事的.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对抗打击能力差的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;给予糖果, 每次只对一件事进行批评, 小事不批评.&lt;/li&gt;
&lt;li&gt;明确批评标准, 以提问的形式交谈.&lt;/li&gt;
&lt;li&gt;不要过分夸大给下属贴屡教屡不改的标签&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对于迟迟不动手的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;寻找没开始的原因&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果患得患失, 没有踏出第一步的勇气, 开头部门和他一起做, 然后放手.&lt;/li&gt;
&lt;li&gt;不知道如何行动, 可能是纸上谈兵, 需要引导, 不可以一句&quot;你自己想&quot;给怼回去.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;认死理的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多用假设性提问, 可能对之前发生过的某件事存在不满.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对上司不满: 上次说话不是有理有据, 用职位压人.&lt;/li&gt;
&lt;li&gt;对现状不满: 上次不认可自己, 不让自己挑战重要工作.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;喜欢推卸责任的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能是因为部门绩效主义, 或者担心上司只看缺点不看优点.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 如果你有责任, 应该是哪方面; 为了避免下次发生, 该如何做?&lt;/li&gt;
&lt;li&gt;负面: xx你不要把责任推给别人, 自己反思.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;场景二: 鼓励时&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;提案被上级否定时&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 积极寻找原因改进.&lt;/li&gt;
&lt;li&gt;负面: 算了, 反正部长说不行, 就这样吧.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;失误沮丧时&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;讲讲自己失败经历.&lt;/li&gt;
&lt;li&gt;讲讲未来目标.&lt;/li&gt;
&lt;li&gt;表示安慰, 一起思考改进对策.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;拼命努力却失败时&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 努力的过程很了不起, 着眼未来, 这次失败也许会让你下次成功.&lt;/li&gt;
&lt;li&gt;负面: 耿耿于怀没有卵用, 这点小事算了.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;说泄气话时&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 从最坏的情况考虑, 最害怕什么事情? 寻找泄气根源.&lt;/li&gt;
&lt;li&gt;负面: 不要找借口, 怕什么事吗?&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;场景三: 委托任务时&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;临时事务让下属乐于委托&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意营造公平感, 避免让别人觉得各种事都交给其中一个成员做.&lt;/p&gt;
&lt;p&gt;记录各类长时间事务, 平均分配到每个成员, 对所有人统一称呼.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: xx, 总是麻烦你, 这次客户很重要, 希望你能搞定.&lt;/li&gt;
&lt;li&gt;负面: xx, 来处理这个.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;紧急工作委托下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 有紧急工作, 真的没有时间, 能不能帮我们一起, 要表明为什么要现在, 强调一起做.&lt;/li&gt;
&lt;li&gt;负面: 有紧急工作, 拜托了.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;委托对方制作材料&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 能不能周三12点之前, 把周五会议材料弄出来, 切忌模糊表达.&lt;/li&gt;
&lt;li&gt;负面: 周三之前, 把客户要的材料看情况搞出来.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;委托不自信的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 哪方面没自信, 区分整体场景没自信和部分场景没自信&lt;/li&gt;
&lt;li&gt;负面: 我是为你好, 你没有干劲吗? 我以前什么都做过, 你想不想进步?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;想让下属积累经验&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;想让下属成长, 就要面对新的挑战.&lt;/li&gt;
&lt;li&gt;不要害怕失败, 我来承担责任.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;场景四: 表扬时&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;边提问边夸奖&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;直接夸奖, 别人会说没有这回事.&lt;/li&gt;
&lt;li&gt;要用提问语句, 怎么像你一样擅长xxx.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;贴标签夸奖&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;要说到xx功能研究, 当然要问yyy这个人&lt;/li&gt;
&lt;li&gt;满足下属的认可欲求, 提高积极性&lt;/li&gt;
&lt;li&gt;加快下属成长, 树立技术成员的自我品牌.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;三角式夸奖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将第三方的夸奖转述给下属&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;昨天会上, 部长表扬了你, 说最近进步很大.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当着第三方面, 对不在场人予以夸奖, 忌说不在场人的坏话, 尤其团队两人存在关系时:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对A说, B的技术方案实现的很好.&lt;/li&gt;
&lt;li&gt;对B说, A说他的技术方案, 很多借鉴你的.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;场景五: 汇报和交流&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;营造畅谈气氛&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;配合对方语速, 用&quot;对, 恩, 啊&quot;营造氛围.&lt;/li&gt;
&lt;li&gt;不要连续重复使用同一个词.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;既不赞同也不反对, 让下属多说一些&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;原来如此&lt;/li&gt;
&lt;li&gt;接下来呢&lt;/li&gt;
&lt;li&gt;然后呢&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;赞同下属观点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;很有意思&lt;/li&gt;
&lt;li&gt;太对了&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;下属发牢骚, 倾诉烦恼, 讲述失败经历&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可能只是口头发泄.&lt;/li&gt;
&lt;li&gt;我能理解你的心情, 那种情况不好处理.&lt;/li&gt;
&lt;li&gt;太遗憾了, 的确令人沮丧.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;当下属意见与你不同&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 将下属核心观点重复一遍, 求同存异.&lt;/li&gt;
&lt;li&gt;负面: 我早说过不行, 你没有实际成果吧, 胡说 + 不可能 + 怎么会.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对汇报不能要领的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;避免全盘否定, 非常危险, 除非的确听不懂在说什么或者废话太多.&lt;/p&gt;
&lt;p&gt;建议使用&lt;a href=&quot;https://baike.baidu.com/item/5W1H%E5%88%86%E6%9E%90%E6%B3%95/10091536?fr=aladdin&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;5W1H&lt;/strong&gt;&lt;/a&gt;分析法, 从What, Where, When, Who, Why, How几个问题入手.&lt;/p&gt;
&lt;p&gt;正面&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;谢谢你的发扬, 我想再整理一下, 能不能再说一遍.&lt;/li&gt;
&lt;li&gt;原来如此, 这部分我不太明白, 能不能说的更详细点&lt;/li&gt;
&lt;li&gt;能不能从结论开始讲起&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;负面&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;总之你想说什么?&lt;/li&gt;
&lt;li&gt;根本搞不懂你在说什么&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对汇报坏消息的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先让他把话说完, 如果需要批评, 则站在对方角度, 督促改进, 而不是自我发泄情绪.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 辛苦了, 谢谢汇报, 可以详细说说吗?&lt;/li&gt;
&lt;li&gt;负面: 你怎么做事的, 为什么搞成这样?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对提不出意见的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 比方说, 举个例子好了, 如果站在我的立场, 你怎么做?&lt;/li&gt;
&lt;li&gt;负面: 你一点想法都没有吗?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对跑题下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 我想说明总结一下前面内容&lt;/li&gt;
&lt;li&gt;负面: 总之, 你想说什么?&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;场景六: 辅导与评价&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;对于业绩差的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正面:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;寻找亮点, 先表扬, 你的文案做的不错.&lt;/li&gt;
&lt;li&gt;提出问题, 你的业绩和其他同期相比不是很好.&lt;/li&gt;
&lt;li&gt;引导回答, 我知道你很努力, 有思考过为什么这样吗?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;负面:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;你业绩太差, 有没有干劲.&lt;/li&gt;
&lt;li&gt;别光嘴上道歉, 客户投诉了, 赶紧处理掉&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对于进步缓慢的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 用其本人过去和现在对比, 不用全面否定, 部分认可.&lt;/li&gt;
&lt;li&gt;负面: 全面否定下属一切, 和别人对比.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对于业绩不好抱着老经验的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 以身作则, 鼓励与时俱进, 做出来更优秀的成果.&lt;/li&gt;
&lt;li&gt;负面: 你过去的做法行不通的, 请与时俱进.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;关键时刻缺乏魄力的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如实施过程中不敢逼单, PK过程中找不到关键人.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 我知道你性格温和, 有时说不来强势话.&lt;/li&gt;
&lt;li&gt;负面: 你在做什么啊, 不觉得惭愧吗?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;忙到崩溃的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正面: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;培养其全局思考能力, 不要认为做所有事情理所当然, 有些事务是可以砍掉的.&lt;/li&gt;
&lt;li&gt;战术的勤奋不能掩盖战略的懒惰&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;负面: &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;xx功能完成开发了吗, 为什么还没有完成.&lt;/li&gt;
&lt;li&gt;怎么做事的, 不能再快一点吗.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;延误交工的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推测延期原因, 可能是:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;本来工作以及很忙了, 不敢拒绝上司新任务.&lt;/li&gt;
&lt;li&gt;工作时间安排不合理.&lt;/li&gt;
&lt;li&gt;能力不足, 需要提升.&lt;/li&gt;
&lt;li&gt;追求完美, 面面俱到, 额外花费了时间.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;因追求完美而延期的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 指出来不按期可能白白浪费, 不可用追求完美来否定对方人格.&lt;/li&gt;
&lt;li&gt;负面: 再不提交代码就没意义了, 你太追求完美了, 没意思.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对多次犯同样错误的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正面:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;确认事实.&lt;/li&gt;
&lt;li&gt;把为什么改成什么, 有什么影响, 什么原因造成的.&lt;/li&gt;
&lt;li&gt;引导改进, 今后怎么办, 具体怎么做.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;负面:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;又有人吐槽功能使用报错, 怎么回事.&lt;/li&gt;
&lt;li&gt;为什么每次都犯同样的错误, 为什么不仔细检查.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;只提意见不行动的下属&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正面:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;寻找不行动的原因, 可能是怕担责任, 强调一起做, 以他为主, 说明理由.&lt;/li&gt;
&lt;li&gt;可能行动门槛开的太高了, 缩减范围, 强调只要花几小时就好了.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;负面:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;你要多花时间在这个上面, 不要说没有空, 你来做这个事, 不能纸上谈兵.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;缺乏提案依据的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 好提案, 什么启发了你, 提出来具体某个方面需要改进.&lt;/li&gt;
&lt;li&gt;负面: 回去想好了再拿来; 创意不错, 不太现实, 有点草率.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;只会反对而不提建设性意见的下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 如果采取行动, 你会怎么做?&lt;/li&gt;
&lt;li&gt;负面: 你想好了再说, 不要只会反对, 不提意见怎么行?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;缺乏团队合作的老下属&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;正面: 激发优秀员工关心团队, 引导其给大家分享方法论, 给团队树立榜样.&lt;/li&gt;
&lt;li&gt;负面: xx, 你要多指导别人啊, 以后推荐你当经理. &lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 08 May 2018 16:31:00 +0000</pubDate>
<dc:creator>大道方圆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xdecode/p/9007535.html</dc:identifier>
</item>
<item>
<title>NewLife.Net——构建可靠的网络服务 - 大石头</title>
<link>http://www.cnblogs.com/nnhy/p/newlife_net_agent.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nnhy/p/newlife_net_agent.html</guid>
<description>&lt;p&gt;网络程序应该注册成为系统服务，以保证其自启动以及稳定可靠运行！&lt;/p&gt;
&lt;p&gt;这一场，讲讲怎么建立一个生产级别的网络服务。&lt;/p&gt;
&lt;p&gt;老规矩，先上源码：https://github.com/nnhy/NewLife.Net.Tests&lt;/p&gt;
&lt;p&gt;系统服务功能，由网络库的兄弟框架，X组件的Agent来支撑，以前也叫XAgent，网上搜索 NewLife XAgent 可以找到不少文章。&lt;/p&gt;
&lt;p&gt;XAgent在X组件里面很年轻，才10年，设计于2008年，上海陆家嘴。&lt;/p&gt;

&lt;p&gt;先来看看最终效果，大家也可以telnet net.newlifex.com 1234 来看效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/19592/201805/19592-20180508235644999-967001800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;左边窗口就是这次要讲的网络服务程序，工作在调试模式。&lt;/p&gt;
&lt;p&gt;右边窗口是上一次的EchoTest客户端，连接左边网络服务。&lt;/p&gt;

&lt;p&gt;建立一个控制台项目，通过nuget引用NewLife.Core&lt;/p&gt;
&lt;p&gt;新建一个服务类 MyService，继承自泛型基类 AgentServiceBase&amp;lt;MyService&amp;gt;&lt;/p&gt;
&lt;p&gt;Program.Main里面增加一行引导程序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
{
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Main(String[] args)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 引导进入我的服务控制类&lt;/span&gt;
&lt;span&gt;        MyService.ServiceMain();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 下面就开始慢慢完善我们的服务类MyService&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyService()
{
    ServiceName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EchoAgent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    DisplayName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;回声服务&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    Description &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这是NewLife.Net的一个回声服务示例！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 准备两个工作线程，分别负责输出日志和向客户端发送时间&lt;/span&gt;
    ThreadCount = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
    Intervals &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt; };
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指定一些基本参数，看效果图可以猜到用途&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/19592/201805/19592-20180509000134016-1019571496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;服务名、显示名、描述，就这么多！&lt;/p&gt;

&lt;p&gt;ThreadCount = 2指定两个工作线程，Intervals指定它们的轮询周期分别是1秒和5秒&lt;/p&gt;

&lt;p&gt;系统服务的标准动作就是启动和停止&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;MyNetServer _Server;
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;开始服务&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;reason&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; StartWork(String reason)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化服务端，指定端口，同时在Tcp/Udp/IPv4/IPv6上监听&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; svr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyNetServer
    {
        Port &lt;/span&gt;= &lt;span&gt;1234&lt;/span&gt;&lt;span&gt;,
        Log &lt;/span&gt;=&lt;span&gt; XTrace.Log
    };
    svr.Start();

    _Server &lt;/span&gt;=&lt;span&gt; svr;

    &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.StartWork(reason);
}

&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;停止服务&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;reason&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; StopWork(String reason)
{
    _Server.TryDispose();
    _Server &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.StopWork(reason);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们重载启动函数，初始化网络服务，并重启停止函数来销毁网络服务。&lt;/p&gt;
&lt;p&gt;这里的MyNetServer从上一个例程拷贝过来。&lt;/p&gt;
&lt;p&gt;网络服务做一个成员资源，避免被GC回收。&lt;/p&gt;

&lt;p&gt;XAgent默认带来多线程任务调度，其核心是 Work(Int32 index)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;调度器让每个任务线程定时执行Work，index标识任务&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;index&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt;&lt;span&gt; Boolean Work(Int32 index)
{
    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (index)
    {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;: ShowStat(_Server); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;: SendTime(_Server); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String _last;
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;显示服务端状态&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ns&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ShowStat(NetServer ns)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; msg =&lt;span&gt; ns.GetStat();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (msg == _last) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;

    _last &lt;/span&gt;=&lt;span&gt; msg;

    WriteLog(msg);
}

&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;span&gt;向所有客户端发送时间&lt;/span&gt;&lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;ns&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SendTime(NetServer ns)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = DateTime.Now.ToFullString() +&lt;span&gt; Environment.NewLine;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buf =&lt;span&gt; str.GetBytes();
    ns.SendAllAsync(buf);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;XAgent内部设计有一个任务调度器，它会实际创建2个线程（ThreadCount指定），每个线程定时执行Work(Int32 index)函数，index参数用于标识哪一个任务线程。&lt;/p&gt;
&lt;p&gt;我们这只需要一个很简单的switch，0号线程负责输出服务端状态，每秒一次，1号线程负责给连接到服务端的所有会话发送服务器当前时间。&lt;/p&gt;

&lt;p&gt;多说几句XAgent：&lt;/p&gt;
&lt;p&gt;1，任务线程具有较高线程优先级，比一般线程有更多机会得到CPU时间&lt;/p&gt;
&lt;p&gt;2，调度器有个最高优先级的管理线程，负责监管所有任务线程，如果任务线程崩溃或者超时，它会干掉并新建&lt;/p&gt;
&lt;p&gt;3，管理线程还负责监控线程数、句柄数、内存占用等&lt;/p&gt;


&lt;p&gt; 既然是控制台项目，先跑起来看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/19592/201805/19592-20180509001605814-1260318347.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;红色字体显示重要信息，黄色字体显示菜单，常用功能是235。&lt;/p&gt;
&lt;p&gt;我们选择5，循环调试，其实就是在控制台里面模拟服务工作流程，让网络服务跑起来。&lt;/p&gt;
&lt;p&gt;底下日志可以看到，它监听了4个套接字。&lt;/p&gt;

&lt;p&gt;2是安装服务，也就是把当前应用安装成为Windows服务，这里特别注意，一般需要管理员权限，才能安装成功，除非关闭系统UAC。&lt;/p&gt;
&lt;p&gt;3是启动服务，只有在安装了服务之后，才能看到。&lt;/p&gt;

&lt;p&gt;所以，XAgent程序，既是开发调试控制台程序，也是安装卸载、启动停止服务的操作台，更是Windows服务程序本身！&lt;/p&gt;
&lt;p&gt;细心的同学可以发现，安装好的Windows服务实质上就是 EchoAgent.exe -s，带有-s参数。&lt;/p&gt;


&lt;p&gt; 最后，我们把它安装到一台公网服务器上，tcp://net.newlifex.com:1234，telnet上去看看效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/19592/201805/19592-20180509002453253-1497363125.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/19592/201805/19592-20180509002503783-349413397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从日志文件可以看到，它的应用类型 ApplicationType 是 Service，也就是Windows Service。&lt;/p&gt;
&lt;p&gt;下面的日志，在A0线程（也就是0号任务线程）输出服务端状态。&lt;/p&gt;
&lt;p&gt;在线1/1，当前在线/最大在线&lt;/p&gt;
&lt;p&gt;发送 2/20/0，共发送2次，最大速度每秒20字节，当前速度每秒0字节&lt;/p&gt;

&lt;p&gt;既然有A0线程，同样也会有A1，还会有An（ThreadCount&amp;gt;n），可用于区分不同任务线程输出的日志。&lt;/p&gt;

&lt;p&gt;至此，我们的Windows网络服务程序开发完成，并安装到公网服务器上，持续对外提供Echo服务！&lt;/p&gt;
</description>
<pubDate>Tue, 08 May 2018 16:30:00 +0000</pubDate>
<dc:creator>大石头</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nnhy/p/newlife_net_agent.html</dc:identifier>
</item>
<item>
<title>一个简单的PHP模板引擎 - 菜花wp</title>
<link>http://www.cnblogs.com/wp1996/p/9011892.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wp1996/p/9011892.html</guid>
<description>&lt;p&gt;PHP早期开发中通常是PHP代码和HTML代码混写，这也使代码中充斥着数据库操作，逻辑处理等。当项目不大时，这样的代码还可以接受，但是随着项目不断扩大，我们就会发现同一个文件中同时存在前端逻辑和后端处理，当逻辑越来越复杂时，代码的可读性和可维护性都会变得非常差，以至于后来不得不进行大规模的代码重构。所以后来就出现了代码分层的思想，尽量拆分开前端代码和后端代码。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PHP模板引擎能解决这种混乱吗？&lt;/span&gt;当然可以。但是呢，即使你不用专门的模板引擎也可以写出逻辑清晰的代码，重点是要有分层的思想，有专门的脚本去进行数据获取，数据处理，逻辑处理等，在展示页面只进行尽可能简单的逻辑处理即可。既然这样，&lt;span&gt;那还有使用PHP模板引擎的必要吗？&lt;/span&gt;毫无疑问当然有，因为模板引擎的功能不仅于此。&lt;/p&gt;
&lt;p&gt;那接下来就说一下PHP模板引擎的主要作用：&lt;/p&gt;
&lt;p&gt;1、它实现了一些自定义标签，用于展示层的简单逻辑处理，相较于不适用引擎的好处是代码看起来不像是PHP代码了，感觉上HTML代码和PHP代码完全分开了，但这只是假象，坏处是效率降低了，因为这样的页面需要专门的脚本解析后才能正确显示，解析的方法就是使用正则表达式替换，这明显降低了效率。到现在来看感觉PHP模板引擎有还不如没有呢，那为什么还要用它呢，重点是他的下一个功能。&lt;/p&gt;
&lt;p&gt;2、文件缓存，这是模板引擎在生产环境中提高效率的非常好的手段。可以用在页面加载时所用数据量很大但不经常变或者不需要实时更新，即使延迟一会也无妨的页面。我个人感觉文件缓存是PHP模板引擎的最重要的部分。&lt;/p&gt;
&lt;p&gt;接下来我们就写一个简易的模板引擎（&lt;span&gt;最后有完整文件代码&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;首先我们先要计划好我们的所需要的基础类，有Template类和Compile类。&lt;/p&gt;
&lt;p&gt;在我们具体实现编译功能之前先搭好一个空的骨架，具体如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
* 模板引擎基础类
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Template
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$config&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;(
        &lt;/span&gt;'suffix' =&amp;gt; '.m',      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置模板文件的后缀&lt;/span&gt;
        'templateDir' =&amp;gt; 'template/',    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置模板所在的文件夹&lt;/span&gt;
        'compileDir' =&amp;gt; 'cache/',    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置编译后存放的目录&lt;/span&gt;
        'cache_html' =&amp;gt; &lt;span&gt;true&lt;/span&gt;,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否需要编译成静态的HTML文件&lt;/span&gt;
        'suffix_cache' =&amp;gt; '.html',    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置编译文件的后缀&lt;/span&gt;
        'cache_time' =&amp;gt; 7200,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  多长时间自动更新，单位秒&lt;/span&gt;
        'php_turn' =&amp;gt; &lt;span&gt;true&lt;/span&gt;,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否支持原生PHP代码&lt;/span&gt;
        'cache_control' =&amp;gt; 'control.dat',
        'debug' =&amp;gt; &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;
    );
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 值栈&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$compileTool&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译器&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;$file&lt;/span&gt;;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模板文件名，不带路径&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;$debug&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调试信息&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$controlData&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$config&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['begin'] = &lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config = &lt;span&gt;$config&lt;/span&gt; + &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_dir&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['templateDir'&lt;span&gt;])) {
            &lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;(&quot;模板目录不存在！&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_dir&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'&lt;span&gt;])) {
            &lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'], 0770&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;getPath();
        &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; './Compile.php'&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *获取绝对路径
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getPath() {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['templateDir'] = &lt;span&gt;strtr&lt;/span&gt;(&lt;span&gt;realpath&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['templateDir']), '\\', '/').'/'&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'] = &lt;span&gt;strtr&lt;/span&gt;(&lt;span&gt;realpath&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir']), '\\', '/').'/'&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *取得模板引擎的实例
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getInstance() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;is_null&lt;/span&gt;(self::&lt;span&gt;$instance&lt;/span&gt;&lt;span&gt;)) {
            self&lt;/span&gt;::&lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; self();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self::&lt;span&gt;$instance&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置模板引擎参数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; setConfig(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;is_array&lt;/span&gt;(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config = &lt;span&gt;$key&lt;/span&gt; + &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config[&lt;span&gt;$key&lt;/span&gt;] = &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 获取当前模板引擎配置，仅供调试使用 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; getConfig(&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config[&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;];
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config;
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *注入单个变量
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; assign(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;value[&lt;span&gt;$key&lt;/span&gt;] = &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *注入数组变量
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; assignArray(&lt;span&gt;$array&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;is_array&lt;/span&gt;(&lt;span&gt;$array&lt;/span&gt;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;$array&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$k&lt;/span&gt; =&amp;gt; &lt;span&gt;$v&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;value[&lt;span&gt;$k&lt;/span&gt;] = &lt;span&gt;$v&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 获取模板文件完整路径
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; path() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['templateDir'].&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;file&lt;/span&gt;.&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['suffix'&lt;span&gt;];
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *判断是否开启了缓存
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; needCache() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['cache_html'&lt;span&gt;];
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *显示模板
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; show(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;) {
        
    }
}

&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上边的代码中我们能发现对于模板文件不存在和编译文件不存在处理方式不同，这也很容易理解，如果你连模板文件都没有有啥好编译的，但是你有模板文件没编译文件这也很正常，正常进行编译即可。&lt;/p&gt;
&lt;p&gt;如上所示，我们首先想好了这个模板引擎需要什么配置，还有一些设置配置的方法和检查配置的方法等，而我们的核心方法show()还没有实现呢，先不着急，我们先去写编译类Compile，如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Compile
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$template&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 待编译的文件&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$content&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 需要替换的文件&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$comfile&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译后的文件&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$left&lt;/span&gt; = '{';   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左定界符&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$right&lt;/span&gt; = '}';   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 右定界符&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 值栈&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$phpTurn&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$T_P&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 匹配正则数组&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$T_R&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 替换数组&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$template&lt;/span&gt;, &lt;span&gt;$compileFile&lt;/span&gt;, &lt;span&gt;$config&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;template = &lt;span&gt;$template&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;comfile = &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;content = &lt;span&gt;file_get_contents&lt;/span&gt;(&lt;span&gt;$template&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; compile() {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;c_var();
        &lt;/span&gt;&lt;span&gt;file_put_contents&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;comfile, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;content);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; c_var() {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;content = &lt;span&gt;preg_replace&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;content);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __set(&lt;span&gt;$name&lt;/span&gt;, &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;$name&lt;/span&gt; = &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __get(&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;;
    }
}

&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面Compile类的构造函数我们可以看出，他需要模板文件路径，编译文件路径，和具体编译时的配置参数，但是在这这个配置参数吗，没有用到。之前说过模板引擎主要使用的正则表达式来进行匹配替换，将模板文件编译成能正确执行的PHP文件，这里使用数组存放正则匹配数组和替换数组来进行整体替换。&lt;/p&gt;
&lt;p&gt;接下来我们就简单实现几个常用的标签，先看怎么替换简单变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; \x7f-\xff表示ASCII字符从127到255，其中\为转义，作用是匹配汉字&lt;/span&gt;
&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{\\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\}#&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php echo \$this-&amp;gt;value['\\1']; ?&amp;gt;&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正如我们看到的，上边的那个是正则匹配，下边的是替换。但是我们没有给编译类的value变量赋值，那这个替换能找到正确的值吗？答案是能，因为他用的不是这个类的value用的是模板类的value，接下来一会会讲到。&lt;/p&gt;
&lt;p&gt;然后我们在看看怎么实现foreach标签，这个很常用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{(loop|foreach)\s+\\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\s*\}#i&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{\/(loop|foreach)\}#&quot;&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;  $this-&amp;gt;T_P[] = &quot;#\{([k|v])\}#&quot;;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php foreach ((array)\$this-&amp;gt;value['\\2'] as \$k =&amp;gt; \$v) { ?&amp;gt;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php } ?&amp;gt;&quot;;
&lt;/pre&gt;
&lt;p&gt;　$this-&amp;gt;T_R[] = &quot;&amp;lt;?php echo \$\\1?&amp;gt;&quot;;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里用到的主要正则表达式的知识有：元组、反向引用等，这些只要稍微看一下正则表达式基础就能理解了。&lt;/p&gt;
&lt;p&gt;我们再来一个if else标签：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{\/(loop|foreach|if)\}#&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{if (.*?)\}#&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{(else if|elseif) (.*?)\}#&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{else\}#&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php } ?&amp;gt;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php if(\\1){ ?&amp;gt;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php }elseif(\\2){ ?&amp;gt;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php }else{ ?&amp;gt;&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们将if的闭合标签和foreach的闭合标签放一块了。&lt;/p&gt;
&lt;p&gt;现在我们已经能编译一些标签了我们就再转回模板类，现在我们想一想要怎么展示呢，这个才是我们的根本目的。写代码之前先理一下思路：&lt;/p&gt;
&lt;p&gt;1、判断是否开启了缓存，如果是进行第二步，否则直接进行编译输出。&lt;/p&gt;
&lt;p&gt;2、判断是否需要更新缓存（判断方式主要是缓存时间和编译文件和模板文件的修改时间的关系），如果是就进行第三步，否则直接读取缓存文件输出。&lt;/p&gt;
&lt;p&gt;3、重新编译模板文件，并将编译后的PHP文件输出保存到静态缓存文件中。&lt;/p&gt;
&lt;p&gt;简单来说就是上边的那三个步骤，具体实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *是否需要重新生成静态文件
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; reCache(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$flag&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$cacheFile&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'].&lt;span&gt;md5&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;).&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['suffix_cache'&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['cache_html'] === &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$timeFlag&lt;/span&gt; = (&lt;span&gt;time&lt;/span&gt;() - @&lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;)) &amp;lt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['cache_time'] ? &lt;span&gt;true&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;is_file&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;filesize&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;) &amp;gt; 1 &amp;amp;&amp;amp; &lt;span&gt;$timeFlag&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) &amp;gt;= &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;path())) {
                &lt;/span&gt;&lt;span&gt;$flag&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;$flag&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$flag&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *显示模板
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; show(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;file&lt;/span&gt; = &lt;span&gt;$file&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_file&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;path())) {
            &lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;('找不到对应的模板！'&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;$compileFile&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'].&lt;span&gt;md5&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;).'.php'&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$cacheFile&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'].&lt;span&gt;md5&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;).&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['suffix_cache'&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;extract&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;value,&lt;span&gt; EXTR_OVERWRITE);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['cache_html'] === &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;reCache(&lt;span&gt;$file&lt;/span&gt;) === &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['cached'] = 'false'&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool = &lt;span&gt;new&lt;/span&gt; Compile(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;path(), &lt;span&gt;$compileFile&lt;/span&gt;, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;needCache()) {&lt;span&gt;ob_start&lt;/span&gt;&lt;span&gt;();}
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_file&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) || &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) &amp;lt; &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;path())) {
                    &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool-&amp;gt;value = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;value;
                    &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool-&amp;gt;&lt;span&gt;compile();
                    &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;needCache()) {
                    &lt;/span&gt;&lt;span&gt;$message&lt;/span&gt; = &lt;span&gt;ob_get_contents&lt;/span&gt;&lt;span&gt;();
                    &lt;/span&gt;&lt;span&gt;file_put_contents&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;, &lt;span&gt;$message&lt;/span&gt;&lt;span&gt;);
                }
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;readfile&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['cached'] = 'true'&lt;span&gt;;
            }
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_file&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) || &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) &amp;lt; &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;path())) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool = &lt;span&gt;new&lt;/span&gt; Compile(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;path(), &lt;span&gt;$compileFile&lt;/span&gt;, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config);
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool-&amp;gt;value = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;value;
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool-&amp;gt;&lt;span&gt;compile();
                &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['spend'] = &lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;) - &lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['begin'&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['count'] = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;value);&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上边的代码基本是按照上述的三个步骤来进行的，好好看一下不难理解。&lt;/p&gt;
&lt;p&gt;接下来就是模板文件了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;&lt;span&gt;
{&lt;/span&gt;&lt;span&gt;$data&lt;/span&gt;},{&lt;span&gt;$person&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;br/&amp;gt;列表一：&amp;lt;br/&amp;gt;
&amp;lt;ul&amp;gt;&lt;span&gt;
{&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; &lt;span&gt;$arr1&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;li&amp;gt;&lt;span&gt;$v&lt;/span&gt;&amp;lt;/li&amp;gt;&lt;span&gt;
{&lt;/span&gt;/&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;/ul&amp;gt;
&amp;lt;br/&amp;gt;列表二：&amp;lt;br/&amp;gt;
&amp;lt;ul&amp;gt;&lt;span&gt;
{loop &lt;/span&gt;&lt;span&gt;$arr2&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;li&amp;gt;&lt;span&gt;$v&lt;/span&gt;&amp;lt;/li&amp;gt;&lt;span&gt;
{&lt;/span&gt;/&lt;span&gt;loop}
&lt;/span&gt;&amp;lt;/ul&amp;gt;&lt;span&gt;
{&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;$a&lt;/span&gt; == '1'&lt;span&gt;}a等于1
{&lt;/span&gt;&lt;span&gt;elseif&lt;/span&gt; &lt;span&gt;$a&lt;/span&gt; == '2'&lt;span&gt;}a等于2
{&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;}a不等于1也不等于2
{&lt;/span&gt;/&lt;span&gt;if&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个模板文件主要测试了之前我们事先的模板标签。&lt;/p&gt;
&lt;p&gt;下面写一个测试文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;include_once&lt;/span&gt; './Template.php'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Template();
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('data', 'hello'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('person', 'world!'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('arr1', &lt;span&gt;array&lt;/span&gt;('123','456','789'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('arr2', &lt;span&gt;array&lt;/span&gt;('abc', 'def', 'ghi'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('a', '2'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;show('member'&lt;span&gt;);

&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是一个简单的测试我们的模板引擎能不能用的测试用例。&lt;/p&gt;
&lt;p&gt;下面我们看看完整代码吧：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
* 模板引擎基础类
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Template
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$config&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;(
        &lt;/span&gt;'suffix' =&amp;gt; '.m',      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置模板文件的后缀&lt;/span&gt;
        'templateDir' =&amp;gt; 'template/',    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置模板所在的文件夹&lt;/span&gt;
        'compileDir' =&amp;gt; 'cache/',    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置编译后存放的目录&lt;/span&gt;
        'cache_html' =&amp;gt; &lt;span&gt;true&lt;/span&gt;,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否需要编译成静态的HTML文件&lt;/span&gt;
        'suffix_cache' =&amp;gt; '.html',    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置编译文件的后缀&lt;/span&gt;
        'cache_time' =&amp;gt; 7200,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  多长时间自动更新，单位秒&lt;/span&gt;
        'php_turn' =&amp;gt; &lt;span&gt;true&lt;/span&gt;,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否支持原生PHP代码&lt;/span&gt;
        'cache_control' =&amp;gt; 'control.dat',
        'debug' =&amp;gt; &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;
    );
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 值栈&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$compileTool&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译器&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;$file&lt;/span&gt;;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模板文件名，不带路径&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;$debug&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调试信息&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$controlData&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$config&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;())
    {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['begin'] = &lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config = &lt;span&gt;$config&lt;/span&gt; + &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_dir&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['templateDir'&lt;span&gt;])) {
            &lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;(&quot;模板目录不存在！&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_dir&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'&lt;span&gt;])) {
            &lt;/span&gt;&lt;span&gt;mkdir&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'], 0770&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;getPath();
        &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; './Compile.php'&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *获取绝对路径
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getPath() {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['templateDir'] = &lt;span&gt;strtr&lt;/span&gt;(&lt;span&gt;realpath&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['templateDir']), '\\', '/').'/'&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'] = &lt;span&gt;strtr&lt;/span&gt;(&lt;span&gt;realpath&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir']), '\\', '/').'/'&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *取得模板引擎的实例
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getInstance() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;is_null&lt;/span&gt;(self::&lt;span&gt;$instance&lt;/span&gt;&lt;span&gt;)) {
            self&lt;/span&gt;::&lt;span&gt;$instance&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; self();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self::&lt;span&gt;$instance&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置模板引擎参数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; setConfig(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;is_array&lt;/span&gt;(&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config = &lt;span&gt;$key&lt;/span&gt; + &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config[&lt;span&gt;$key&lt;/span&gt;] = &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 获取当前模板引擎配置，仅供调试使用 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; getConfig(&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config[&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;];
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config;
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *注入单个变量
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; assign(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;value[&lt;span&gt;$key&lt;/span&gt;] = &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *注入数组变量
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; assignArray(&lt;span&gt;$array&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;is_array&lt;/span&gt;(&lt;span&gt;$array&lt;/span&gt;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;$array&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$k&lt;/span&gt; =&amp;gt; &lt;span&gt;$v&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;value[&lt;span&gt;$k&lt;/span&gt;] = &lt;span&gt;$v&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * 获取模板文件完整路径
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; path() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['templateDir'].&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;file&lt;/span&gt;.&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['suffix'&lt;span&gt;];
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *判断是否开启了缓存
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; needCache() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['cache_html'&lt;span&gt;];
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *是否需要重新生成静态文件
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; reCache(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$flag&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$cacheFile&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'].&lt;span&gt;md5&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;).&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['suffix_cache'&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['cache_html'] === &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$timeFlag&lt;/span&gt; = (&lt;span&gt;time&lt;/span&gt;() - @&lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;)) &amp;lt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['cache_time'] ? &lt;span&gt;true&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;is_file&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span&gt;filesize&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;) &amp;gt; 1 &amp;amp;&amp;amp; &lt;span&gt;$timeFlag&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) &amp;gt;= &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;path())) {
                &lt;/span&gt;&lt;span&gt;$flag&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;$flag&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$flag&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *显示模板
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; show(&lt;span&gt;$file&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;file&lt;/span&gt; = &lt;span&gt;$file&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_file&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;path())) {
            &lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;('找不到对应的模板！'&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;$compileFile&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'].&lt;span&gt;md5&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;).'.php'&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$cacheFile&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'].&lt;span&gt;md5&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;).&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['suffix_cache'&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;extract&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;value,&lt;span&gt; EXTR_OVERWRITE);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['cache_html'] === &lt;span&gt;true&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开启缓存的处理逻辑&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;reCache(&lt;span&gt;$file&lt;/span&gt;) === &lt;span&gt;true&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 需要更新缓存的处理逻辑&lt;/span&gt;
                &lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['cached'] = 'false'&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool = &lt;span&gt;new&lt;/span&gt; Compile(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;path(), &lt;span&gt;$compileFile&lt;/span&gt;, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;needCache()) {&lt;span&gt;ob_start&lt;/span&gt;();} &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打开输出控制缓冲&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_file&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) || &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) &amp;lt; &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;path())) {
                    &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool-&amp;gt;value = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;value;
                    &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool-&amp;gt;&lt;span&gt;compile();
                    &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;needCache()) {
                    &lt;/span&gt;&lt;span&gt;$message&lt;/span&gt; = &lt;span&gt;ob_get_contents&lt;/span&gt;(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取输出缓冲中的内容（在include编译文件的时候就有输出了）&lt;/span&gt;
                    &lt;span&gt;file_put_contents&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;, &lt;span&gt;$message&lt;/span&gt;&lt;span&gt;);
                }
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;readfile&lt;/span&gt;(&lt;span&gt;$cacheFile&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['cached'] = 'true'&lt;span&gt;;
            }
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (! &lt;span&gt;is_file&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) || &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$compileFile&lt;/span&gt;) &amp;lt; &lt;span&gt;filemtime&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;path())) {
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool = &lt;span&gt;new&lt;/span&gt; Compile(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;path(), &lt;span&gt;$compileFile&lt;/span&gt;, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;config);
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool-&amp;gt;value = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;value;
                &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;compileTool-&amp;gt;&lt;span&gt;compile();
                &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;include&lt;/span&gt; &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['spend'] = &lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;) - &lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['begin'&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['count'] = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;value);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$this-&amp;gt;debug_info();&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; debug_info() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['debug'] === &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;PHP_EOL&lt;/span&gt;, '---------debug info---------', &lt;span&gt;PHP_EOL&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;程序运行日期：&quot;, &lt;span&gt;date&lt;/span&gt;(&quot;Y-m-d H:i:s&quot;), &lt;span&gt;PHP_EOL&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;模板解析耗时：&quot;, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['spend'], '秒', &lt;span&gt;PHP_EOL&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; '模板包含标签数目：', &lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['count'], &lt;span&gt;PHP_EOL&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; '是否使用静态缓存：', &lt;span&gt;$this&lt;/span&gt;-&amp;gt;debug['cached'], &lt;span&gt;PHP_EOL&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; '模板引擎实例参数：', &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;getConfig());
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
    *清理缓存的HTML文件
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; clean(&lt;span&gt;$path&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$path&lt;/span&gt; === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$path&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;$path&lt;/span&gt; = &lt;span&gt;glob&lt;/span&gt;(&lt;span&gt;$path&lt;/span&gt;.'* '.&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['suffix_cache'&lt;span&gt;]);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;$path&lt;/span&gt; = &lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['compileDir'].&lt;span&gt;md5&lt;/span&gt;(&lt;span&gt;$path&lt;/span&gt;).&lt;span&gt;$this&lt;/span&gt;-&amp;gt;config['suffix_cache'&lt;span&gt;];
        }
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;((&lt;span&gt;array&lt;/span&gt;)&lt;span&gt;$path&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$v&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;unlink&lt;/span&gt;(&lt;span&gt;$v&lt;/span&gt;&lt;span&gt;);
        }
    }
}

&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Compile
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$template&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 待编译的文件&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$content&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 需要替换的文件&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$comfile&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译后的文件&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$left&lt;/span&gt; = '{';   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 左定界符&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$right&lt;/span&gt; = '}';   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 右定界符&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 值栈&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$phpTurn&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;$T_P&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 匹配正则数组&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$T_R&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 替换数组&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __construct(&lt;span&gt;$template&lt;/span&gt;, &lt;span&gt;$compileFile&lt;/span&gt;, &lt;span&gt;$config&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;template = &lt;span&gt;$template&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;comfile = &lt;span&gt;$compileFile&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;content = &lt;span&gt;file_get_contents&lt;/span&gt;(&lt;span&gt;$template&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;$config&lt;/span&gt;['php_turn'] === &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#&amp;lt;\?(=|php|)(.+?)\?#is&quot;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;amp;lt;?\1\2?&amp;amp;gt;&quot;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 变量匹配
        // \x7f-\xff表示ASCII字符从127到255，其中\为转义，作用是匹配汉字&lt;/span&gt;
        &lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{\\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\}#&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; foreach标签盘匹配&lt;/span&gt;
        &lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{(loop|foreach)\s+\\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)\s*\}#i&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{\/(loop|foreach|if)\}#&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{([k|v])\}#&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; if else标签匹配&lt;/span&gt;
        &lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{if (.*?)\}#&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{(else if|elseif) (.*?)\}#&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{else\}#&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P[] = &quot;#\{(\#|\*)(.*?)(\#|\*)\}#&quot;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php echo \$this-&amp;gt;value['\\1']; ?&amp;gt;&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php foreach ((array)\$this-&amp;gt;value['\\2'] as \$k =&amp;gt; \$v) { ?&amp;gt;&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php } ?&amp;gt;&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php echo \$\\1?&amp;gt;&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php if(\\1){ ?&amp;gt;&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php }elseif(\\2){ ?&amp;gt;&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&amp;lt;?php }else{ ?&amp;gt;&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R[] = &quot;&quot;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; compile() {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;c_var();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$this-&amp;gt;c_staticFile();&lt;/span&gt;
        &lt;span&gt;file_put_contents&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;comfile, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;content);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; c_var() {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;content = &lt;span&gt;preg_replace&lt;/span&gt;(&lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_P, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;T_R, &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;content);
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 对引入的静态文件进行解析，应对浏览器缓存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; c_staticFile() {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;content = &lt;span&gt;preg_replace&lt;/span&gt;('#\{\!(.*?)\!\}#', '&amp;lt;script src=\1'.'?t='.&lt;span&gt;time&lt;/span&gt;().'&amp;gt;&amp;lt;/script&amp;gt;', &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;content);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __set(&lt;span&gt;$name&lt;/span&gt;, &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;$name&lt;/span&gt; = &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; __get(&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;$this&lt;/span&gt;-&amp;gt;&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;;
    }
}

&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模板文件member.m代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;&lt;span&gt;
{&lt;/span&gt;&lt;span&gt;$data&lt;/span&gt;},{&lt;span&gt;$person&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;br/&amp;gt;列表一：&amp;lt;br/&amp;gt;
&amp;lt;ul&amp;gt;&lt;span&gt;
{&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; &lt;span&gt;$arr1&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;li&amp;gt;&lt;span&gt;$v&lt;/span&gt;&amp;lt;/li&amp;gt;&lt;span&gt;
{&lt;/span&gt;/&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;/ul&amp;gt;
&amp;lt;br/&amp;gt;列表二：&amp;lt;br/&amp;gt;
&amp;lt;ul&amp;gt;&lt;span&gt;
{loop &lt;/span&gt;&lt;span&gt;$arr2&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;li&amp;gt;&lt;span&gt;$v&lt;/span&gt;&amp;lt;/li&amp;gt;&lt;span&gt;
{&lt;/span&gt;/&lt;span&gt;loop}
&lt;/span&gt;&amp;lt;/ul&amp;gt;&lt;span&gt;
{&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;$a&lt;/span&gt; == '1'&lt;span&gt;}a等于1
{&lt;/span&gt;&lt;span&gt;elseif&lt;/span&gt; &lt;span&gt;$a&lt;/span&gt; == '2'&lt;span&gt;}a等于2
{&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;}a不等于1也不等于2
{&lt;/span&gt;/&lt;span&gt;if&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试用例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php

&lt;/span&gt;&lt;span&gt;include_once&lt;/span&gt; './Template.php'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Template();
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('data', 'hello'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('person', 'world!'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('arr1', &lt;span&gt;array&lt;/span&gt;('123','456','789'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('arr2', &lt;span&gt;array&lt;/span&gt;('abc', 'def', 'ghi'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;assign('a', '2'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$tpl&lt;/span&gt;-&amp;gt;show('member'&lt;span&gt;);

&lt;/span&gt;?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本文内容大部分来自于《PHP核心技术与最佳实践》的第六章。&lt;/p&gt;
</description>
<pubDate>Tue, 08 May 2018 16:12:00 +0000</pubDate>
<dc:creator>菜花wp</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wp1996/p/9011892.html</dc:identifier>
</item>
<item>
<title>【Java入门提高篇】Day16 Java异常处理（上） - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/9005999.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/9005999.html</guid>
<description>&lt;p&gt;　　当当当当当当，各位看官，好久不见，甚是想念。&lt;/p&gt;
&lt;p&gt;　　今天我们来聊聊Java里的一个小妖精，那就是异常。&lt;/p&gt;
&lt;h2&gt;什么是异常？什么是异常处理？&lt;/h2&gt;
&lt;p&gt;　　异常嘛，顾名思义就是不正常，（逃），是Java程序运行时，发生的预料之外的事情，它阻止了程序按照程序员的预期正常执行。&lt;/p&gt;
&lt;p&gt;　　异常处理，应该说异常处理机制，就是专门用来制服这个小妖精的法宝。Java中的异常处理机制能让程序在异常发生时，按照代码的预先设定的异常处理逻辑，针对性地处理异常，让程序尽最大可能恢复正常并继续执行，且保持代码的清晰。&lt;/p&gt;
&lt;p&gt;　　简而言之，Java异常处理就是能让我们主动迎击可能到来的异常，并将它们以圆润的方式处理掉。&lt;/p&gt;
&lt;p&gt;　　还是先来看个小栗子，看看java里的异常长什么样。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = 0 / 0&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;i = &quot; +&lt;span&gt; i);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1043143/201805/1043143-20180507234526007-1444372879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　别慌别慌，不要看到红色提示就内心崩溃只想关掉IDE，来，抓紧我的手，带你看清“异常”这个磨人的小妖精的真面目（滑稽）。&lt;/p&gt;
&lt;p&gt;　　代码里将0作为了分母，因此程序会发生算术异常，抛出一个异常后，如果没有任何处理，默认会终止程序，所以后面的打印内容并没有输出。在异常内容里，有说明异常类型为：java.lang.ArithmeticException，也就是算术异常，后面跟着的是异常原因: / by zero，也就是说异常出现的原因是将0作为了分母，而且后面还有堆栈信息，指出了异常抛出的位置是在com.frank.chapter16.main.Test.main这个包下，Test类的第11行（这个行数如果跟你想的不一样，不要在意，因为我的代码开始之前还有一些不可描述的说明信息），因为只有一次方法调用，所以没有很长的堆栈信息，看起来也很简洁明了。&lt;/p&gt;
&lt;p&gt;　　所以你看，其实异常也没那么可怕吧，不仅给了异常原因，还告诉了你这个bug是出在第几行，所以好好利用它，可以帮助你写出更难以发现的bug，呸，说错了，可以帮助你更容易找到bug（手动滑稽）。&lt;/p&gt;
&lt;p&gt;　　如果不希望抛出异常后程序就结束，而是希望它继续运行呢？那么就捕获它。&lt;/p&gt;
&lt;h2&gt;如何使用异常处理&lt;/h2&gt;
&lt;p&gt;　　我们来把上面那个栗子改改：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = 0 / 0&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.println(&lt;/span&gt;&quot;好像发生异常了，但是我不管，我还要继续运行&quot;&lt;span&gt;);
        }
        System.out.println(&lt;/span&gt;&quot;运行完毕!&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;好像发生异常了，但是我不管，我还要继续运行
运行完毕&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　好的，很强势，现在即使抛出了异常，程序也继续运行了。异常就像是一头野兽，但你一旦捕获它，驯服它，就可以为你所用，为所欲为了。&lt;/p&gt;
&lt;p&gt;　　try...catch...是常用的异常处理搭配，如果在try语句块中发生了异常，如果刚好这个异常被捕获到了，那么会直接跳到catch语句块中，执行catch语句中的代码，像上面的栗子里，因为对Exception类进行了捕获处理，所以当它的子类异常java.lang.ArithmeticException被抛出来的时候，也能捕获它。关于Exception类的结构层次关系，后面再做详细介绍。&lt;/p&gt;
&lt;p&gt;　　还有另外一种搭配方式，那就是try...catch...finally，finally语句块比catch要强势的多，前面说了catch语句块必须要捕获到了特定的Exception才会执行里面的代码，如果catch的是ArithmeticException但是抛出的却是空指针异常，那就不会被捕获了，异常也就逃之夭夭了。这个时候，finally的优势就展示出来了，不管抛出什么样的异常，也不管是否抛出了异常，finally中的代码都会被执行。所以一般的用法是在finally语句块里释放掉那些需要被释放的资源，如socket连接，关闭io流，关闭数据库连接等等。也就是说一般在finally中收拾try中抛出的烂摊子，心疼一秒finally，果然能者多劳啊。&lt;/p&gt;
&lt;p&gt;　　当然，try...finally这样的搭配也是ok的，需要注意的是，当try语句中发生了异常之后，在发生异常处之后的代码将不会再执行，而是跳到相应的catchu或者finally中去。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = 0 / 0&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (NullPointerException e) {
            System.out.println(&lt;/span&gt;&quot;这里捕获空指针异常&quot;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ArithmeticException e){
            System.out.println(&lt;/span&gt;&quot;这里捕获算术异常&quot;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            System.out.println(&lt;/span&gt;&quot;这里是finally&quot;&lt;span&gt;);
        }
        System.out.println(&lt;/span&gt;&quot;运行完毕!&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;这里捕获算术异常
这里是finally
运行完毕&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在上面的代码中，catch语句块是可以同时使用多个的，第一个catch语句块捕获的是空指针异常，但由于抛出的是算术异常，所以没有捕获住，但被第二个catch捕获到了，所以第二个catch语句块中的代码执行了。异常匹配是按照从上到下的顺序进行匹配的，最后才执行finally中的代码块。关于try...catch...finally，还有一个很有趣的return问题，如果三个语句块里都有return，最终返回结果会是怎样呢？这里做了详细的说明，http://www.cnblogs.com/mfrank/p/7895660.html 有兴趣的话可以看一看。&lt;/p&gt;
&lt;p&gt;　　绝大多数情况下，finally中的代码都是会被执行的，只有一种情况下，finally中的代码不会被执行，那就是在try语句块中结束掉了虚拟机（如：使用 System.exit(0); ）。&lt;/p&gt;
&lt;p&gt;　　关于异常，还有一个关键字需要介绍，那就是throw，使用throw可以主动抛出一个异常。看到这你也许会一脸懵逼，主动抛出？？？嫌异常不够多，凑热闹不嫌事大？？别急别急，中间一定有什么误会，把刀放下，有话好好说。&lt;/p&gt;
&lt;p&gt;　　throw关键字确实是用来抛出异常的，你可以这样使用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]){
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NullPointerException(&quot;听说你很闲，给你抛个异常。&quot;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (NullPointerException e) {
            System.out.println(&lt;/span&gt;&quot;这里捕获空指针异常，提示内容：&quot; +&lt;span&gt; e.getMessage());
            e.printStackTrace();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;这里捕获空指针异常，提示内容：听说你很闲，给你抛个异常。
java.lang.NullPointerException: 听说你很闲，给你抛个异常。
    at com.frank.chapter16.main.Test.main(Test.java:&lt;/span&gt;11)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　用throw关键字可以抛出任意类型的异常，当然，你想的话，还有抛Error，至于什么是Error，已经跟Exception的关系，将在下一篇里进行讲解。暂时不用深究。&lt;/p&gt;
&lt;p&gt;　　在throw异常的时候，可以加上抛出异常的原因，这样可以更方便定位问题所在，当然，一般来说不会像栗子中这样使用的，这里只是为了简单起见。&lt;/p&gt;
&lt;p&gt;　　到此为止，异常的上半篇已经讲解完毕，在这一篇里，说明了什么是异常，什么是异常处理，以及如何使用异常处理机制。相信大家对这个小妖精有了初步的认识，下一篇中，将会讲解Exception家族都有哪些成员，如何使用自定义异常，已经异常处理的实际使用中的正确姿势。欢迎大家继续关注，之后计划每周两篇以上的更新，如果有讲解遗漏或者不好的地方，欢迎大家及时指出，共同进步！&lt;/p&gt;

</description>
<pubDate>Tue, 08 May 2018 15:48:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/9005999.html</dc:identifier>
</item>
<item>
<title>使用Navicat for MySQL把本地数据库上传到服务器 - 雪落忆海</title>
<link>http://www.cnblogs.com/xuepangzi/p/9011826.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuepangzi/p/9011826.html</guid>
<description>&lt;h2 title=&quot;linux如何查看mysql是否启动&quot;&gt;　　服务器系统基本都是基于linux的，这个数据库上传的方式适用于linux的各种版本，比如Ubuntu和Centos（尽管这两个版本各种大坑小坑，但至少在数据库传输上保持了一致性）&lt;/h2&gt;
&lt;h2&gt;　　当然本地数据库上传到服务器的前提是，服务器也已经安装好了MySQL数据库&lt;/h2&gt;

&lt;h2 title=&quot;linux如何查看mysql是否启动&quot;&gt;1.linux如何查看mysql是否启动&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
service mysqld status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mysqld is stopped 那就说明mysql服务是停止状态&lt;/p&gt;
&lt;p&gt;mysqld is running 那就说明mysql服务是启动状态 &lt;/p&gt;

&lt;h2&gt;2.重启mysql&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
service mysqld restart
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.登录mysql&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果是刚刚安装了mysql，密码为空，直接按Enter键（回车）就进去了，如果已经设置了密码，就填写密码登录&lt;/span&gt;
mysql -uroot -p
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4.给远程访问设置权限&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;其中123456是用于连接的密码，读者可以将其设置得更加复杂一些&lt;/span&gt;
GRANT ALL PRIVILEGES ON *.* TO &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; IDENTIFIED BY &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; WITH GRANT OPTION;

FLUSH PRIVILEGES;

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置密码，如果是新安装的mysql需要在这里把密码设置了，如果已经有密码了就不用了&lt;/span&gt;
set password =password(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
flush privileges;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5.退出mysql&lt;/h2&gt;


&lt;h2&gt;1.安装Navicat&lt;/h2&gt;
&lt;p&gt;　　虽然这个软件是收费的，但是给了20天试用期，所以可以放心大胆的用正版，毕竟，上传数据库这种事儿，只在项目上线部署的时候用一次，20天怎么也够用了。&lt;/p&gt;
&lt;h2&gt;2.建立连接&lt;/h2&gt;
&lt;h3&gt;1.先新建连接，跟本地数据库连上，连接名随便起一个就可以，如图&lt;/h3&gt;
&lt;p&gt;图1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508232234684-1286027701.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508232526306-1092687796.png&quot; alt=&quot;&quot; width=&quot;610&quot; height=&quot;478&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508232725823-684455099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.再新建连接，跟服务器数据库连上，连接名也随便起一个就可以，如图&lt;/h3&gt;
&lt;p&gt;图1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508233336230-1031165498.png&quot; alt=&quot;&quot; width=&quot;595&quot; height=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508233404808-663892391.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.数据传输，如图&lt;/h3&gt;
&lt;p&gt;图1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508233604890-1805995381.png&quot; alt=&quot;&quot; width=&quot;420&quot; height=&quot;371&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508234118218-1284811614.png&quot; alt=&quot;&quot; width=&quot;675&quot; height=&quot;520&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508234339746-1370258325.png&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;524&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;可以到服务器端，进入mysql查看一下，是否已经上传成功：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180508234559565-984976539.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 08 May 2018 15:47:00 +0000</pubDate>
<dc:creator>雪落忆海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuepangzi/p/9011826.html</dc:identifier>
</item>
<item>
<title>spring cloud 入门系列六：使用Zuul 实现API网关服务 - JAVA开发老菜鸟</title>
<link>http://www.cnblogs.com/sam-uncle/p/9011400.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sam-uncle/p/9011400.html</guid>
<description>
&lt;p&gt;通过前面几次的分享，我们了解了微服务架构的几个核心设施，通过这些组件我们可以搭建简单的微服务架构系统。比如通过Spring Cloud Eureka搭建高可用的服务注册中心并实现服务的注册和发现；&lt;/p&gt;
&lt;p&gt;通过Spring Cloud Ribbon或Feign进行负载均衡；通过Spring Cloud Hystrix进行服务容错保护以避免故障蔓延。微服务搭建好了之后我们肯定会提供给外部系统一些统一的RESTFul API服务接口进行调用，&lt;/p&gt;
&lt;p&gt;但是当外部系统调用我们的RESTful API的时候，怎么确定它需要的功能具体是哪个服务提供的呢？这个就涉及到一个路由规则和服务实例列表的维护问题。&lt;/p&gt;
&lt;p&gt;这就引入了我们今天的主角--Spring Cloud Zuul，它是基于Netflix Zuul实现的API网关组件。它可以解决两个大问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;就是我们上面提到的路由规则和服务实例的维护问题&lt;/li&gt;
&lt;li&gt;对于一些校验（比如登录校验等）冗余问题。 按照我们的习惯的做法，是在每个服务中都需要加入这些校验，但是这样会导致代码冗余并且维护也比较麻烦，有了Spring Cloud Zuul这个网关服务之后，我们可以将这些共通的校验放到网关里面统一维护。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;好，接下来我们就来看下怎么实现这个网关服务。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、构建网关，配置路由&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 这里我们还是需要使用到前面的hello-service和feign-consumer服务。我们之前把feign-consumer作为服务消费者，但是别忘了在eureka体系里面，每个服务既是服务提供者又是服务消费者，所以feign-consumer也是一个服务提供者，并且http://localhost:9001/feign-consumer等接口就是它提供的服务。&lt;/p&gt;
&lt;p&gt;接下来我们构建一个网关服务，代码结构如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508222811624-1161645768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码实现步骤：&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;新建maven工程api-gateway&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;修改POM文件
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.sam&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;api-gateway&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.5.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;javaVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;javaVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 使用dependencyManagement进行版本管理 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Camden.SR6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入zuul依赖 , 它依赖了spring-boot-starter-actuator/spring-boot-starter-hystrix/spring-boot-starter-ribbon&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-zuul&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.5&quot;&gt;新建启动类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @EnableZuulProxy 开启Zuul 的API网关服务功能
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@EnableZuulProxy
@SpringCloudApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GateWayApp {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(GateWayApp.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.5&quot;&gt;新建application.properties
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
server.port=5555&lt;span&gt;
spring.application.name&lt;/span&gt;=api-&lt;span&gt;gateway

#增加路由规则的配置
#通过zuul.routes.&lt;/span&gt;&amp;lt;route&amp;gt;.path和zuul.routes.&amp;lt;route&amp;gt;&lt;span&gt;.url进行配置，&amp;lt;route&amp;gt;为路由的名字，可以任意指定，但是一组path和url的路由名要相同
&lt;/span&gt;&lt;span&gt;#如下面的例子：所有满足/api-a/** 规则的访问都会被路由转发到//localhost:9001的地址
#也就是说，我们访问http://localhost:5555/api-a/hello的时候，API网关服务就会将该请#求路由到 &lt;span&gt;http://localhost&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;:9001/hello提供的微服务接口上&lt;/span&gt;
&lt;span&gt;zuul.routes.api-a.path=/api-a/**
zuul.routes.api-a.url=&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;http://localhost&lt;/span&gt;:9001


zuul.routes.api-b.path=/api-b/**
zuul.routes.api-b.url=&lt;span&gt;http://localhost&lt;/span&gt;:9090&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;测试，启动eureka、hello-service、feign-consumer以及本次新加的api-gateway服务，然后访问http://localhost:5555/api-a/feign-consumer&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508224438023-1759131459.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;成功访问到了feign-consumer的服务接口--feign-consonsumer。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以上步骤实现了&lt;strong&gt;传统路由&lt;/strong&gt;的配置，这种配置有个大的缺点，就是需要手工在application.properties文件中进行路由规则的配置，当服务很多的时候，维护工作量就会很大。为了减小维护成本，还有另外一种路由--面向服务的路由。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、面向服务的路由&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud Zuul和Eureka进行整合，我们可以让路由的path不是映射具体的url，而是具体的某个服务，而服务的url则交给Eureka服务发现机制自动维护,这类路由就是面向服务的路由。具体代码配置如下：&lt;/p&gt;
&lt;ol readability=&quot;-1.5&quot;&gt;&lt;li readability=&quot;-1.5&quot;&gt;修改POM文件，引入Eureka依赖
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入eureka依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-eureka&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;修改application.properties配置文件
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span readability=&quot;2&quot;&gt;server.port=5555
spring.application.name=api-gateway

zuul.routes.api-a.path=/api-a/**

#这里用serviceId代替url，用服务名代替ip+端口号
zuul.routes.api-a.&lt;span&gt;serviceId&lt;/span&gt;=hello-service&lt;p&gt;eureka.client.service-url.defaultZone=http://localhost:1111/eureka&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：zuul.routes.api-a.&lt;span&gt;url&lt;/span&gt;=hello-service也能实现功能，但是它不能进行正常的负载均衡和容错保护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;测试,访问http://localhost:5555/api-a/hello
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508230113051-1284832277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; 三、服务路由的默认规则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在面向服务的路由中，由于&amp;lt;route&amp;gt;名字是随意起的，那么是不是可以这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;zuul.routes.hello-service.path=/hello-service/**
zuul.routes.hello-service.serviceId=hello-service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;route&amp;gt;名字就是服务名，其实在实际的应用中，我们往往就是这样命名的。如果有这样的规则的话，那Zuul就可以帮我们默认实现这样的功能，进一步省去了配置的麻烦。&lt;/p&gt;
&lt;p&gt;我们来做个实验，将配置文件改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server.port=5555
spring.application.name=api-gateway

eureka.client.service-url.defaultZone=http://localhost:1111/eureka&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后页面访问验证&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508231031970-1208438850.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508231047718-929529456.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问成功。&lt;/p&gt;

&lt;p&gt;但是由于默认情况下，Eureka上的服务都会被Zuul创建默认的映射关系来进行路由，使得我们不想对外开放的服务也被外部访问到，这个时候可以通过配置zuul.ignored-services来进行配置不需要自动创建路由的规则。当zuul.ignored-services=*的时候，所有的服务都不会自动创建路由规则，这个时候需要通过前面的配置进行相关路由配置了。&lt;/p&gt;
&lt;p&gt;================华丽的分割线===================&lt;/p&gt;
&lt;p&gt;前面说了那么多都是围绕一个问题展开的：路由规则和服务实例的维护问题，那么怎么解决第二个问题（校验冗余问题）呢？&lt;/p&gt;
&lt;p&gt; &lt;span&gt;&lt;strong&gt;四、请求过滤&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了在API网关中实现对客户端请求的校验，我们可以通过过滤器来实现对请求的拦截和过滤，实现方法比较简单，只需要继承ZuulFilter抽象类并实现其四个方法就行了。&lt;/p&gt;
&lt;p&gt;修改api-gateway：&lt;/p&gt;
&lt;ol&gt;&lt;li readability=&quot;0.5&quot;&gt;新增过滤器类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 继承ZuulFilter，并且实现其4个接口
 *
 * 用来进行请求过滤
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AccessFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ZuulFilter {
    Logger logger &lt;/span&gt;= LoggerFactory.getLogger(AccessFilter.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 
     * shouldFilter 判断该过滤器是否需要被执行
     * 
     * 这里直接返回true，表示该过滤器对所有请求都会生效。
     * 实际运用中我们可以利用该函数指定过滤器的有效范围
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; shouldFilter() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
     * 过滤器的具体逻辑
     * 
     * 这里我们通过ctx.setSendZuulResponse(false)让zuul过来请求，不对其进行路由
     * 然后通过ctx.setResponseStatusCode(401)设置了返回的错误码
     * 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object run() {
        RequestContext context &lt;/span&gt;=&lt;span&gt; RequestContext.getCurrentContext();
        HttpServletRequest request &lt;/span&gt;=&lt;span&gt; context.getRequest();
        Object accessToken &lt;/span&gt;= request.getParameter(&quot;accessToken&quot;&lt;span&gt;);
        
        logger.info(&lt;/span&gt;&quot;send {} request to {}&quot;&lt;span&gt;, request.getMethod(),request.getRequestURL().toString());
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(accessToken == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            context.setSendZuulResponse(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            context.setResponseStatusCode(&lt;/span&gt;401&lt;span&gt;);
        }
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; filterType 返回过滤器类型
     * 他决定了过滤器在请求的哪个生命周期中执行。这里定义为pre，代表会在请求被路由前执行。
     * 
     * pre:请求执行之前filter 
     * route: 处理请求，进行路由 
     * post: 请求处理完成后执行的filter 
     * error:出现错误时执行的filter
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String filterType() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;pre&quot;&lt;span&gt;;
    }
    
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 
     * filterOrder 返回过滤器的执行顺序
     * 
     * 当请求在一个阶段有多个过滤器是，需要根据该方法的返回值来一次执行
     * 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; filterOrder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;修改启动类
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * @EnableZuulProxy 开启Zuul 的API网关服务功能
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@EnableZuulProxy
@SpringCloudApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GateWayApp {

    &lt;/span&gt;&lt;span&gt;&lt;strong&gt;//追加bean的是实现
    @Bean
    public AccessFilter accessFilter() {
        return new AccessFilter();
    }
    
    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(GateWayApp.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;测试
&lt;ol&gt;&lt;li&gt;)访问http://localhost:5555/hello-service/hello，访问失败
&lt;ol&gt;&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508232532086-1960092636.png&quot; alt=&quot;&quot;/&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;)访问http://localhost:5555/hello-service/hello&lt;span&gt;&lt;span&gt;?accessToken=token&lt;span&gt;，正常访问&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508232630363-453480664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改后的代码结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180508232231004-146242086.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 五、拓展延伸&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其实路由功能在真正运行时，他的路由映射和请求转发都是由几个不同的过滤器完成的。&lt;/p&gt;
&lt;p&gt;路由映射主要通过pre类型的过滤器完成，他将请求路径与配置的路由规则进行匹配，找到需要转发的目标地址。&lt;/p&gt;
&lt;p&gt;而请求转发的部分则是由route类型的过滤器完成的，对pre类型过滤器获取的路由地址进行转发。&lt;/p&gt;
&lt;p&gt;所以，过滤器可以说是Zuul实现API网关功能最为核心的部件，每一个进入Zuul的HTTP请求都会经过一系列的过滤器处理链得到请求响应并返回给客户端。&lt;/p&gt;

</description>
<pubDate>Tue, 08 May 2018 15:34:00 +0000</pubDate>
<dc:creator>JAVA开发老菜鸟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sam-uncle/p/9011400.html</dc:identifier>
</item>
</channel>
</rss>