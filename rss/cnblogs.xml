<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>day52_BOS项目_04 - 黑泽明军</title>
<link>http://www.cnblogs.com/chenmingjun/p/9749033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/9749033.html</guid>
<description>&lt;ul&gt;&lt;li&gt;今天内容安排：
&lt;ul&gt;&lt;li&gt;1、区域数据批量导入功能
&lt;ul&gt;&lt;li&gt;&lt;span&gt;jQuery OCUpload（一键上传插件）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用apache POI解析Excel文件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用Pinyin4J生成简码和城市编码&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2、实现区域的分页查询&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3、对分页代码重构&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;4、添加分区（使用combobox下拉框）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;5、分区的组合条件分页查询&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;6、分区数据导出功能&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h1&quot;&gt;&lt;span&gt;&lt;strong&gt;1、区域数据批量导入功能&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h11jqueryocupload&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1、jQuery OCUpload（一键上传插件）&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ajax不能做文件上传。&lt;/code&gt;&lt;br/&gt;第一步：在jsp页面中引入插件的js文件&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath }/js/jquery.ocupload-1.1.2.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二步：在页面中提供任意一个元素&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs lua&quot;&gt;     &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;but1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;上传&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第三步：调用该插件提供的upload方法，动态修改页面html代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;br/&gt;$(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#but1&quot;&lt;/span&gt;).upload({&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'abc'&lt;/span&gt;,  &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'myFile'&lt;/span&gt;&lt;br/&gt;});&lt;br/&gt;});&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;动态修改页面html代码效果如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXqXR.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h12apachepoiexcel&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2、使用apache POI解析Excel文件&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。&lt;br/&gt;第一步：导入poi-3.9-20121203.jar包&lt;br/&gt;第二步：测试代码如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre readability=&quot;9&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;12&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.mytest;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.hssf.usermodel.HSSFSheet;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.hssf.usermodel.HSSFWorkbook;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.ss.usermodel.Row;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;POITest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; FileNotFoundException, IOException&lt;/span&gt;{&lt;br/&gt;HSSFWorkbook workbook = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HSSFWorkbook(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;E:\\test\\abc.xls&quot;&lt;/span&gt;)));&lt;br/&gt;HSSFSheet sheet = workbook.getSheetAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Row row : sheet) {&lt;br/&gt;String v1 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String v2 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String v3 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String v4 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String v5 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).getStringCellValue();&lt;br/&gt;System.out.println(v1 + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + v2 + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + v3 + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + v4 + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + v5);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;控制台输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;区域编号 省份 城市 区域 邮编&lt;br/&gt;QY001 北京市 北京市 东城区 110101&lt;br/&gt;QY002 北京市 北京市 西城区 110102&lt;br/&gt;QY003 北京市 北京市 朝阳区 110105&lt;br/&gt;QY004 北京市 北京市 丰台区 110106&lt;br/&gt;QY005 北京市 北京市 石景山区 110107&lt;br/&gt;QY006 北京市 北京市 海淀区 110108&lt;br/&gt;QY007 北京市 北京市 门头沟区 110109&lt;br/&gt;QY008 北京市 北京市 房山区 110111&lt;br/&gt;QY009 北京市 北京市 通州区 110112&lt;br/&gt;QY010 北京市 北京市 顺义区 110113&lt;br/&gt;QY011 北京市 北京市 昌平区 110114&lt;br/&gt;QY012 北京市 北京市 大兴区 110115&lt;br/&gt;QY013 北京市 北京市 怀柔区 110116&lt;br/&gt;QY014 北京市 北京市 平谷区 110117&lt;br/&gt;QY015 北京市 北京市 密云县 110228&lt;br/&gt;QY016 北京市 北京市 延庆县 110229&lt;br/&gt;......&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第三步：在RegionAction中提供批量导入方法&lt;/p&gt;
&lt;pre readability=&quot;20&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;34&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.bos.web.action;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.hssf.usermodel.HSSFSheet;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.hssf.usermodel.HSSFWorkbook;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.ss.usermodel.Row;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.struts2.ServletActionContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Scope;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Controller;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.domain.Region;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.service.IRegionService;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.web.action.base.BaseAction;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Scope&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;prototype&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RegionAction&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseAction&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Region&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; IRegionService regionService;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; File myFile;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setMyFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(File myFile)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.myFile = myFile;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;importXls&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;String flag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;HSSFWorkbook workbook = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HSSFWorkbook(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileInputStream(myFile));&lt;br/&gt;HSSFSheet sheet = workbook.getSheetAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;List&amp;lt;Region&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Region&amp;gt;();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Row row : sheet) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; rowNum = row.getRowNum();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rowNum == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;String id = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String province = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String city = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String district = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String postcode = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).getStringCellValue();&lt;/p&gt;&lt;p&gt;Region region = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Region(id, province, city, district, postcode, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);&lt;br/&gt;list.add(region);&lt;br/&gt;}&lt;br/&gt;regionService.saveBatch(list);          &lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;flag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;ServletActionContext.getResponse().setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;ServletActionContext.getResponse().getWriter().print(flag);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第四步：浏览器根据服务器响应回来的状态码，进行判断并给出提示信息&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;br/&gt;$(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#button-import&quot;&lt;/span&gt;).upload({&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'${pageContext.request.contextPath}/regionAction_importXls.action'&lt;/span&gt;,  &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'myFile'&lt;/span&gt;,&lt;br/&gt;onComplete: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data == &lt;span class=&quot;hljs-string&quot;&gt;'1'&lt;/span&gt;) {&lt;br/&gt;$.messager.alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;提示信息&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;区域数据导入成功！&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;info&quot;&lt;/span&gt;);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;$.messager.alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;提示信息&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;区域数据导入失败！&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;warning&quot;&lt;/span&gt;);&lt;br/&gt;} &lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;});&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h13pinyin4j&quot;&gt;&lt;span&gt;&lt;strong&gt;1.3、使用Pinyin4J生成简码和城市编码&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;第一步：导入pinyin4j-2.5.0.jar包，拷贝PinYin4jUtils.java工具类至utils包中&lt;br/&gt;第二步：测试类代码如下：&lt;/p&gt;
&lt;pre readability=&quot;13&quot;&gt;
&lt;code class=&quot;hljs dart&quot; readability=&quot;20&quot;&gt;package com.itheima.mytest;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.lang3.StringUtils;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.utils.PinYin4jUtils;&lt;/p&gt;&lt;p&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Pinyin4JTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; test1(){&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; province = &lt;span class=&quot;hljs-string&quot;&gt;&quot;河北省&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; city = &lt;span class=&quot;hljs-string&quot;&gt;&quot;石家庄市&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; district = &lt;span class=&quot;hljs-string&quot;&gt;&quot;长安区&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;city  = city.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, city.length() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;[] stringToPinyin = PinYin4jUtils.stringToPinyin(city);&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; citycode = StringUtils.join(stringToPinyin, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(citycode);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;province  = province.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, province.length() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;district  = district.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, district.length() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; info = province + city + district; &lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;[] headByString = PinYin4jUtils.getHeadByString(info);&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; shortcode = StringUtils.join(headByString, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(shortcode);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h2&quot;&gt;&lt;span&gt;&lt;strong&gt;2、实现区域的分页查询&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;代码同取派员的分页查询。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h3&quot;&gt;&lt;span&gt;&lt;strong&gt;3、对分页代码重构&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在BaseAction中抽取PageBean对象，在BaseAction中提供setPage和setRows方法，并注入给PageBean对象&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; PageBean pageBean = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PageBean();&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setPage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; page)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;pageBean.setCurrentPage(page);&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setRows&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; rows)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;pageBean.setPageSize(rows);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在BaseAction中抽取条件查询对象&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;    &lt;br/&gt;DetachedCriteria detachedCriteria = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;在BaseAction的构造方法中创建条件查询对象，并注入给PageBean对象&lt;br/&gt;如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXgce.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;在BaseAction中抽取将PageBean对象转为json的方法&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;7&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;writePageBean2Json&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(PageBean pageBean, String[] excludes)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;JsonConfig jsonConfig = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonConfig();&lt;br/&gt;jsonConfig.setExcludes(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;});&lt;p&gt;JSONObject jsonObject = JSONObject.fromObject(pageBean, jsonConfig);&lt;br/&gt;String json = jsonObject.toString();&lt;/p&gt;&lt;p&gt;ServletActionContext.getResponse().setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/json;charset=UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;ServletActionContext.getResponse().getWriter().print(json);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在RegionAction中使用分页方法&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;pageBean&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;regionService.pageBean(pageBean); &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.writePageBean2Json(pageBean, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;}); &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h4jqueryeasyuicombobox&quot;&gt;&lt;span&gt;&lt;strong&gt;4、使用jQuery EasyUI 下拉框combobox&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXRQq.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;第一步：在subarea.jsp中使用&lt;code&gt;combobox下拉框&lt;/code&gt;展示区域数据到下拉框中
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;选择区域&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;easyui-combobox&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;region.id&quot;&lt;/span&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;data-options&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;valueField:'id',textField:'name',&lt;br/&gt;url:'${pageContext.request.contextPath}/regionAction_listajax1.action'&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TX2nO.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;第二步：在RegionAction中提供listajax()方法，查询所有的区域数据，返回json数据，并将该方法抽取至BaseAction中&lt;br/&gt;RegionAction.java
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String listajax() throws IOException {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Region&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; = regionService.findAll();&lt;br/&gt;String[] exclude = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;subareas&quot;&lt;/span&gt;}; &lt;br/&gt;this.writeList2Json(&lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;, exclude);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BaseAction.java&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs php&quot; readability=&quot;6&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; void writeList2Json(&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;, String[] exclude) throws IOException {&lt;br/&gt;JsonConfig jsonConfig = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonConfig();&lt;br/&gt;jsonConfig.setExcludes(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;});&lt;p&gt;JSONArray jsonObject = JSONArray.fromObject(&lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;, jsonConfig);&lt;br/&gt;String json = jsonObject.toString();&lt;/p&gt;&lt;p&gt;ServletActionContext.getResponse().setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/json;charset=UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;ServletActionContext.getResponse().getWriter().&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(json);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了使返回的json中含有name字段，需要在Region类中提供getName()方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; province + city + district;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器返回的json数据效果如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXnid.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;页面效果如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5Tm3NY.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h5&quot;&gt;&lt;span&gt;&lt;strong&gt;5、添加分区&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;第一步：页面位置：/bos19/WebContent/WEB-INF/pages/base/subarea.jsp&lt;br/&gt;为了便于处理，我们先将subarea.jsp中的&lt;code&gt;分拣编码&lt;/code&gt;选项框删掉，该编号我们让其自动生成。&lt;br/&gt;我们在Subarea.hbm.xml中更改主键生成策略，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java.lang.String&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;uuid&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二步：为添加窗口中的“保存按钮”绑定事件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;datagrid-toolbar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;save&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;icon&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;icon-save&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;easyui-linkbutton&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;plain&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;保存&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;br/&gt;$(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#save&quot;&lt;/span&gt;).click(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; v = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#addSubareaForm&quot;&lt;/span&gt;).form(&lt;span class=&quot;hljs-string&quot;&gt;&quot;validate&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (v) {&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#addSubareaForm&quot;&lt;/span&gt;).submit();&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;});&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第三步：创建SubareaAction类，提供add方法，处理分区添加动作&lt;br/&gt;SubareaAction.java&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;9&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.bos.web.action;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Scope;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Controller;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.domain.Subarea;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.web.action.base.BaseAction;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Scope&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;prototype&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SubareaAction&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseAction&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Subarea&lt;/span&gt;&amp;gt;&lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;subareaService.save(model);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;list&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在第三步之前，我们将所有的注入service，抽取至BaseAction中，将修饰符public改为protected，使其子类能够访问&lt;br/&gt;BaseAction.java&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; IUserService userServie;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; IStaffService staffService;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; IRegionService regionService;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; ISubareaService subareaService;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第四步：配置struts.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;subareaAction_*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;subareaAction&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{1}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;list&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;/WEB-INF/pages/base/subarea.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;action&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h6bug&quot;&gt;&lt;span&gt;&lt;strong&gt;6、解决区域分页查询的bug&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.String&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.apache&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.commons&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.exception&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.NestableRuntimeException&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.getMessage&lt;/span&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-selector-tag&quot;&gt;threw&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;invoked&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.sf&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.json&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.JSONException&lt;/span&gt;: &lt;span class=&quot;hljs-selector-tag&quot;&gt;There&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hierarchy&lt;/span&gt;!&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;延迟加载也称为懒加载，是Hibernate3关联关系对象默认的加载方式，所谓延迟加载就是当在真正需要数据的时候，才真正执行数据加载操作。简单理解为，只有在使用的时候，才会发出sql语句进行查询。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Hibernate中主要是通过代理（proxy）机制来实现延迟加载。我们在查询区域的时候，区域关联的分区没有立即查询，因为所有的关联查询默认都是延时加载（懒加载）。那么返回来的就是代理对象，而代理对象是不能被序列化的。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;如何解决呢？&lt;br/&gt;答：因为PageBean中的属性有集合list，此时的list集合中存放的是Region对象，而Region对象中又关联一个集合set，该set集合存放的Subareas对象，该Subareas对象默认是懒加载的，而此时我们没有用到Subareas对象的数据，所以我们就应该将其排除掉。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.writePageBean2Json(pageBean, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;subareas&quot;&lt;/span&gt;}); &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h7&quot;&gt;&lt;span&gt;&lt;strong&gt;7、实现分区分页查询（没有过滤条件）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;代码同区域的分页查询。&lt;br/&gt;小区别：当我们查询分区表的时候，需要立即去查询关联的区域表&lt;br/&gt;我们需要修改分区的Hibernate配置文件Subarea.hbm.xml中的加载时机，修改代码如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;many-to-one&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lazy&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;region&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.bos.domain.Region&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;fetch&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;select&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;region_id&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;many-to-one&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;many-to-one&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;decidedzone&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.bos.domain.Decidedzone&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;fetch&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;select&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;decidedzone_id&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;many-to-one&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h8&quot;&gt;&lt;span&gt;&lt;strong&gt;8、实现分区组合条件分页查询&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;EasyUI Datagrid 数据网格的load()方法：&lt;br/&gt;　　加载并显示第一页的行，如果指定 'param' 参数，它将替换 queryParams 属性。通常情况下，通过传递一些从参数进行查询，该方法被调用来从服务器加载新数据。&lt;br/&gt;查询分区页面如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXwZr.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;第一步：为“查询按钮”绑定事件，调用datagrid的load()方法，重新发起ajax请求，并提交输入框参数，这里我们使用一个工具方法：将指定的表单中的输入项序列化为json对象
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs javascript&quot; readability=&quot;4&quot;&gt;    &lt;br/&gt;$.fn.serializeJson = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; serializeObj = {};&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.serializeArray();&lt;br/&gt;$(array).each(&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name]) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($.isArray(serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name])) {&lt;br/&gt;serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name].push(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name] = [serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name], &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value];&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name] = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value;&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; serializeObj;&lt;br/&gt;};&lt;p&gt;&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#btn&quot;&lt;/span&gt;).click(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#searchForm&quot;&lt;/span&gt;).serializeJson(); &lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#grid&quot;&lt;/span&gt;).datagrid(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;, p);&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#searchWindow&quot;&lt;/span&gt;).window(&lt;span class=&quot;hljs-string&quot;&gt;&quot;close&quot;&lt;/span&gt;);&lt;br/&gt;});&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器的调试截图：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5Tm99i.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;第三步：修改SubareaAction中的分页查询方法，封装分页查询的条件
&lt;pre readability=&quot;16.5&quot;&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;27&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;pageQuery&lt;/span&gt;() throws IOException &lt;/span&gt;{&lt;br/&gt;DetachedCriteria detachedCriteria2 = pageBean.getDetachedCriteria();&lt;p&gt;&lt;br/&gt;String addresskey = model.getAddresskey();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(addresskey)) {&lt;br/&gt;detachedCriteria2.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Restrictions.like(&lt;span class=&quot;hljs-string&quot;&gt;&quot;addresskey&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; + addresskey + &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Region region = model.getRegion();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (region != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;detachedCriteria2.createAlias(&lt;span class=&quot;hljs-string&quot;&gt;&quot;region&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;String province = region.getProvince();&lt;br/&gt;String city = region.getCity();&lt;br/&gt;String district = region.getDistrict();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(province)) {&lt;br/&gt;detachedCriteria2.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Restrictions.like(&lt;span class=&quot;hljs-string&quot;&gt;&quot;r.province&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; + province + &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(city)) {&lt;br/&gt;detachedCriteria2.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Restrictions.like(&lt;span class=&quot;hljs-string&quot;&gt;&quot;r.city&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; + city + &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(district)) {&lt;br/&gt;detachedCriteria2.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Restrictions.like(&lt;span class=&quot;hljs-string&quot;&gt;&quot;r.district&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; + district + &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;subareaService.pageQuery(pageBean);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.writePageBean2Json(pageBean, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;decidedzone&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;subareas&quot;&lt;/span&gt;});&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h9&quot;&gt;&lt;span&gt;&lt;strong&gt;9、分区数据导出功能&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;导出Excel文件提供客户下载&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第一步：为“导出”按钮绑定事件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doExport&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location.href = &lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/subareaAction_exportXls.action&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二步：在SubareaAction中提供导出方法&lt;/p&gt;
&lt;pre readability=&quot;12&quot;&gt;
&lt;code class=&quot;hljs php&quot; readability=&quot;18&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String exportXls() throws IOException {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Subarea&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; = subareaService.findAll();&lt;p&gt;&lt;br/&gt;HSSFWorkbook workbook = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HSSFWorkbook();&lt;br/&gt;HSSFSheet sheet = workbook.createSheet(&lt;span class=&quot;hljs-string&quot;&gt;&quot;分区数据&quot;&lt;/span&gt;);&lt;br/&gt;HSSFRow headRow = sheet.createRow(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;headRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).setCellValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;分区编号&quot;&lt;/span&gt;);&lt;br/&gt;headRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).setCellValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;区域编号&quot;&lt;/span&gt;);&lt;br/&gt;headRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).setCellValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;地址关键字&quot;&lt;/span&gt;);&lt;br/&gt;headRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).setCellValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;省市区&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Subarea subarea : &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;) {&lt;br/&gt;HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;dataRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).setCellValue(subarea.getId());&lt;br/&gt;dataRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).setCellValue(subarea.getRegion().getId());&lt;br/&gt;dataRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).setCellValue(subarea.getAddresskey());&lt;/p&gt;&lt;p&gt;Region region = subarea.getRegion();&lt;br/&gt;dataRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).setCellValue(region.getProvince() + region.getCity() + region.getDistrict());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;String filename = &lt;span class=&quot;hljs-string&quot;&gt;&quot;分区数据.xls&quot;&lt;/span&gt;;&lt;br/&gt;String agent = ServletActionContext.getRequest().getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;); &lt;br/&gt;filename = FileUtils.encodeDownloadFilename(filename, agent);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;ServletOutputStream out = ServletActionContext.getResponse().getOutputStream();&lt;br/&gt;String contentType = ServletActionContext.getServletContext().getMimeType(filename);&lt;br/&gt;ServletActionContext.getResponse().setContentType(contentType);&lt;br/&gt;ServletActionContext.getResponse().setHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-disposition&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;attchment;filename=&quot;&lt;/span&gt; + filename);&lt;br/&gt;workbook.write(out);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器界面效果图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TmDby.png&quot; alt=&quot;&quot;/&gt;</description>
<pubDate>Sat, 06 Oct 2018 15:40:00 +0000</pubDate>
<dc:creator>黑泽明军</dc:creator>
<og:description>今天内容安排： 1、区域数据批量导入功能 jQuery OCUpload（一键上传插件） 使用apache POI解析Excel文件 使用Pinyin4J生成简码和城市编码 2、实现区域的分页查询 3</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/9749033.html</dc:identifier>
</item>
<item>
<title>九,ESP8266 判断是断电上电（强制硬件复位）之后运行的内部程序还是内部软件复位之后运行的程序(基于Lua脚本语言) - 杨奉武</title>
<link>http://www.cnblogs.com/yangfengwu/p/9749008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangfengwu/p/9749008.html</guid>
<description>&lt;p&gt;&lt;span&gt;现在我有一个需求，WIFI模块控制一个继电器，我要做的是如果内部程序跑乱了，造成了内部程序复位重启，那么控制继电器的状态不能改变&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果是设备断电了，然后又来电了，我需要的是继电器一定要是断开才好。不能加额外的电路，只能在程序中做判断&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实  内部程序跑乱了，造成了内部程序复位重启     和   设备断电了，然后又来电了     然后都是重新执行程序，不知道大家是如何做的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的思路是。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先说一下WIFI模块的一个很大的优点，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大家有没有注意WIFI模块的引脚，假设配置了一个引脚为高电平，无论内部如何的利用软件复位，这个引脚都会保持高电平&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有就是，WIFI模块如果是断电上电那么引脚一开始一定是低电平，但是必须是这样配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
local PowerResetPin = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
gpio.mode(PowerResetPin, gpio.OUTPUT)
local PowerReset &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;  gpio.read(PowerResetPin) == &lt;span&gt;1&lt;/span&gt;&lt;span&gt; then
    PowerReset &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PowerReset = false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    PowerReset &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PowerReset = true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/819239/201810/819239-20181006231518376-1855939632.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;最终我的方案是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先读取引脚是不是低电平，如果是，就是说是断电上电然后执行的程序，如果不是，就是说内部复位重启然后执行的程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实是自己人为设置的那个引脚输出的高电平，看下面的程序&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
local PowerResetPin = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
gpio.mode(PowerResetPin, gpio.OUTPUT)
local PowerReset &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;  gpio.read(PowerResetPin) == &lt;span&gt;1&lt;/span&gt;&lt;span&gt; then
    PowerReset &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PowerReset = false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    PowerReset &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PowerReset = true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
end

gpio.write(PowerResetPin, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;整个程序运行之前先运行上面的程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果 PowerReset = false  说明是内部程序复位重启然后执行的程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果 PowerReset = true   说明是断电上电然后执行的程序&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;好了就是这么简单，主要还是因为WIFI引脚有这个特点，软件复位可以保持住状态&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 06 Oct 2018 15:24:00 +0000</pubDate>
<dc:creator>杨奉武</dc:creator>
<og:description>现在我有一个需求，WIFI模块控制一个继电器，我要做的是如果内部程序跑乱了，造成了内部程序复位重启，那么控制继电器的状态不能改变 如果是设备断电了，然后又来电了，我需要的是继电器一定要是断开才好。不能</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangfengwu/p/9749008.html</dc:identifier>
</item>
<item>
<title>JDK中枚举的底层实现 - throwable</title>
<link>http://www.cnblogs.com/throwable/p/9748911.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/throwable/p/9748911.html</guid>
<description>&lt;p&gt;上一篇文章复习介绍了JDK中注解的底层实现，跟注解一样比较常用，但是底层实现比较神秘的还有枚举类型。趁着国庆假期的最后两天，把JDK中枚举的底层实现也进行一次探究。&lt;/p&gt;

&lt;p&gt;在探究JDK注解的底层实现的时候，因为预先参考了不少资料，所以整个过程有点&quot;未卜先知&quot;的意味，这里尝试用未知的角度去看注解的底层实现。先定义一个手机操作系统类型枚举PhoneOsEnum：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package club.throwable.enumeration;

public enum PhoneOsEnum {

    /**
     * 安卓
     */
    ANDROID(1, &quot;android&quot;),

    /**
     * ios
     */
    IOS(2, &quot;ios&quot;);


    private final Integer type;
    private final String typeName;

    PhoneOsEnum(Integer type, String typeName) {
        this.type = type;
        this.typeName = typeName;
    }

    public Integer getType() {
        return type;
    }

    public String getTypeName() {
        return typeName;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是一个很简单的枚举，接着使用JDK的反编译工具反编译出其字节码，执行下面的命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;javap -c -v D:\Projects\rxjava-seed\target\classes\club\throwable\enumeration\PhoneOsEnum.class&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后就得到了关于PhoneOsEnum.class的很长的字节码，这里全部贴出来：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Classfile /D:/Projects/rxjava-seed/target/classes/club/throwable/enumeration/PhoneOsEnum.class
  Last modified 2018-10-6; size 1561 bytes
  MD5 checksum 6d3186042f54233219000927a2f196aa
  Compiled from &quot;PhoneOsEnum.java&quot;
public final class club.throwable.enumeration.PhoneOsEnum extends java.lang.Enum&amp;lt;club.throwable.enumeration.PhoneOsEnum&amp;gt;
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_FINAL, ACC_SUPER, ACC_ENUM
Constant pool:
   #1 = Fieldref           #4.#49         // club/throwable/enumeration/PhoneOsEnum.$VALUES:[Lclub/throwable/enumeration/PhoneOsEnum;
   #2 = Methodref          #50.#51        // &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;.clone:()Ljava/lang/Object;
   #3 = Class              #26            // &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;
   #4 = Class              #52            // club/throwable/enumeration/PhoneOsEnum
   #5 = Methodref          #17.#53        // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
   #6 = Methodref          #17.#54        // java/lang/Enum.&quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;I)V
   #7 = Fieldref           #4.#55         // club/throwable/enumeration/PhoneOsEnum.type:Ljava/lang/Integer;
   #8 = Fieldref           #4.#56         // club/throwable/enumeration/PhoneOsEnum.typeName:Ljava/lang/String;
   #9 = String             #18            // ANDROID
  #10 = Methodref          #57.#58        // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
  #11 = String             #59            // android
  #12 = Methodref          #4.#60         // club/throwable/enumeration/PhoneOsEnum.&quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
  #13 = Fieldref           #4.#61         // club/throwable/enumeration/PhoneOsEnum.ANDROID:Lclub/throwable/enumeration/PhoneOsEnum;
  #14 = String             #20            // IOS
  #15 = String             #62            // ios
  #16 = Fieldref           #4.#63         // club/throwable/enumeration/PhoneOsEnum.IOS:Lclub/throwable/enumeration/PhoneOsEnum;
  #17 = Class              #64            // java/lang/Enum
  #18 = Utf8               ANDROID
  #19 = Utf8               Lclub/throwable/enumeration/PhoneOsEnum;
  #20 = Utf8               IOS
  #21 = Utf8               type
  #22 = Utf8               Ljava/lang/Integer;
  #23 = Utf8               typeName
  #24 = Utf8               Ljava/lang/String;
  #25 = Utf8               $VALUES
  #26 = Utf8               [Lclub/throwable/enumeration/PhoneOsEnum;
  #27 = Utf8               values
  #28 = Utf8               ()[Lclub/throwable/enumeration/PhoneOsEnum;
  #29 = Utf8               Code
  #30 = Utf8               LineNumberTable
  #31 = Utf8               valueOf
  #32 = Utf8               (Ljava/lang/String;)Lclub/throwable/enumeration/PhoneOsEnum;
  #33 = Utf8               LocalVariableTable
  #34 = Utf8               name
  #35 = Utf8               &amp;lt;init&amp;gt;
  #36 = Utf8               (Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
  #37 = Utf8               this
  #38 = Utf8               Signature
  #39 = Utf8               (Ljava/lang/Integer;Ljava/lang/String;)V
  #40 = Utf8               getType
  #41 = Utf8               ()Ljava/lang/Integer;
  #42 = Utf8               getTypeName
  #43 = Utf8               ()Ljava/lang/String;
  #44 = Utf8               &amp;lt;clinit&amp;gt;
  #45 = Utf8               ()V
  #46 = Utf8               Ljava/lang/Enum&amp;lt;Lclub/throwable/enumeration/PhoneOsEnum;&amp;gt;;
  #47 = Utf8               SourceFile
  #48 = Utf8               PhoneOsEnum.java
  #49 = NameAndType        #25:#26        // $VALUES:[Lclub/throwable/enumeration/PhoneOsEnum;
  #50 = Class              #26            // &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;
  #51 = NameAndType        #65:#66        // clone:()Ljava/lang/Object;
  #52 = Utf8               club/throwable/enumeration/PhoneOsEnum
  #53 = NameAndType        #31:#67        // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
  #54 = NameAndType        #35:#68        // &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;I)V
  #55 = NameAndType        #21:#22        // type:Ljava/lang/Integer;
  #56 = NameAndType        #23:#24        // typeName:Ljava/lang/String;
  #57 = Class              #69            // java/lang/Integer
  #58 = NameAndType        #31:#70        // valueOf:(I)Ljava/lang/Integer;
  #59 = Utf8               android
  #60 = NameAndType        #35:#36        // &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
  #61 = NameAndType        #18:#19        // ANDROID:Lclub/throwable/enumeration/PhoneOsEnum;
  #62 = Utf8               ios
  #63 = NameAndType        #20:#19        // IOS:Lclub/throwable/enumeration/PhoneOsEnum;
  #64 = Utf8               java/lang/Enum
  #65 = Utf8               clone
  #66 = Utf8               ()Ljava/lang/Object;
  #67 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
  #68 = Utf8               (Ljava/lang/String;I)V
  #69 = Utf8               java/lang/Integer
  #70 = Utf8               (I)Ljava/lang/Integer;
{
  public static final club.throwable.enumeration.PhoneOsEnum ANDROID;
    descriptor: Lclub/throwable/enumeration/PhoneOsEnum;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_ENUM

  public static final club.throwable.enumeration.PhoneOsEnum IOS;
    descriptor: Lclub/throwable/enumeration/PhoneOsEnum;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_ENUM

  public static club.throwable.enumeration.PhoneOsEnum[] values();
    descriptor: ()[Lclub/throwable/enumeration/PhoneOsEnum;
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #1                  // Field $VALUES:[Lclub/throwable/enumeration/PhoneOsEnum;
         3: invokevirtual #2                  // Method &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;.clone:()Ljava/lang/Object;
         6: checkcast     #3                  // class &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;
         9: areturn
      LineNumberTable:
        line 9: 0

  public static club.throwable.enumeration.PhoneOsEnum valueOf(java.lang.String);
    descriptor: (Ljava/lang/String;)Lclub/throwable/enumeration/PhoneOsEnum;
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: ldc           #4                  // class club/throwable/enumeration/PhoneOsEnum
         2: aload_0
         3: invokestatic  #5                  // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
         6: checkcast     #4                  // class club/throwable/enumeration/PhoneOsEnum
         9: areturn
      LineNumberTable:
        line 9: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  name   Ljava/lang/String;

  public java.lang.Integer getType();
    descriptor: ()Ljava/lang/Integer;
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #7                  // Field type:Ljava/lang/Integer;
         4: areturn
      LineNumberTable:
        line 31: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lclub/throwable/enumeration/PhoneOsEnum;

  public java.lang.String getTypeName();
    descriptor: ()Ljava/lang/String;
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #8                  // Field typeName:Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 35: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lclub/throwable/enumeration/PhoneOsEnum;

  static {};
    descriptor: ()V
    flags: ACC_STATIC
    Code:
      stack=6, locals=0, args_size=0
         0: new           #4                  // class club/throwable/enumeration/PhoneOsEnum
         3: dup
         4: ldc           #9                  // String ANDROID
         6: iconst_0
         7: iconst_1
         8: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        11: ldc           #11                 // String android
        13: invokespecial #12                 // Method &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
        16: putstatic     #13                 // Field ANDROID:Lclub/throwable/enumeration/PhoneOsEnum;
        19: new           #4                  // class club/throwable/enumeration/PhoneOsEnum
        22: dup
        23: ldc           #14                 // String IOS
        25: iconst_1
        26: iconst_2
        27: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        30: ldc           #15                 // String ios
        32: invokespecial #12                 // Method &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
        35: putstatic     #16                 // Field IOS:Lclub/throwable/enumeration/PhoneOsEnum;
        38: iconst_2
        39: anewarray     #4                  // class club/throwable/enumeration/PhoneOsEnum
        42: dup
        43: iconst_0
        44: getstatic     #13                 // Field ANDROID:Lclub/throwable/enumeration/PhoneOsEnum;
        47: aastore
        48: dup
        49: iconst_1
        50: getstatic     #16                 // Field IOS:Lclub/throwable/enumeration/PhoneOsEnum;
        53: aastore
        54: putstatic     #1                  // Field $VALUES:[Lclub/throwable/enumeration/PhoneOsEnum;
        57: return
      LineNumberTable:
        line 14: 0
        line 19: 19
        line 9: 38
}
Signature: #46                          // Ljava/lang/Enum&amp;lt;Lclub/throwable/enumeration/PhoneOsEnum;&amp;gt;;
SourceFile: &quot;PhoneOsEnum.java&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先看类的签名是&lt;code&gt;public final class club.throwable.enumeration.PhoneOsEnum extends java.lang.Enum&amp;lt;club.throwable.enumeration.PhoneOsEnum&amp;gt;&lt;/code&gt;，它的父类是java.lang.Enum，父类的泛型就是自身club.throwable.enumeration.PhoneOsEnum。上面的字节码的可读性相对比较低，直接翻译为Java代码(当然我们不能声明一个类直接继承java.lang.Enum，这里仅仅为了说明反编译后的枚举类的原型)如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public final class PhoneOsEnumeration extends Enum&amp;lt;PhoneOsEnumeration&amp;gt; {

    public PhoneOsEnumeration(String name, int ordinal, Integer type, String typeName) {
        super(name, ordinal);
        this.type = type;
        this.typeName = typeName;
    }

    public Integer getType() {
        return type;
    }

    public String getTypeName() {
        return typeName;
    }

    public static PhoneOsEnumeration[] values() {
        return $VALUES.clone();
    }

    public static PhoneOsEnumeration valueOf(String name) {
        return Enum.valueOf(PhoneOsEnumeration.class, name);
    }
    
    private final Integer type;
    private final String typeName;
    private static final PhoneOsEnumeration ANDROID;
    private static final PhoneOsEnumeration IOS;
    private static final PhoneOsEnumeration[] $VALUES;

    static {
        ANDROID = new PhoneOsEnumeration(&quot;ANDROID&quot;, 0, 1, &quot;android&quot;);
        IOS = new PhoneOsEnumeration(&quot;IOS&quot;, 1, 2, &quot;ios&quot;);
        $VALUES = new PhoneOsEnumeration[]{ANDROID, IOS};
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;概括来说就是成员变量都是通过静态代码块声明，这里注意一点父类Enum实例化的时候需要覆盖父类构造器&lt;code&gt;protected Enum(String name, int ordinal)&lt;/code&gt;，其他方法的实现都是十分简单。&lt;/p&gt;

&lt;p&gt;国际惯例，先看一下JavaSE-8的语言规范中&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.9&quot;&gt;JLS-8.9&lt;/a&gt;对枚举类型的定义和描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pazkqls86.bkt.clouddn.com/enum-1.png&quot; alt=&quot;enum-1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;感觉有点似曾相识，总结一下重要内容有以下几点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;枚举的声明格式是：&lt;code&gt;{ClassModifier} enum Identifier [Superinterfaces] EnumBody&lt;/code&gt;，ClassModifier是修饰符，Identifier是枚举的名称可以类比为类名，枚举类型可以实现接口。&lt;/li&gt;
&lt;li&gt;枚举类型不能使用abstract或者final修饰，否则会产生编译错误。&lt;/li&gt;
&lt;li&gt;枚举类型的直接超类是java.lang.Enum。&lt;/li&gt;
&lt;li&gt;枚举类型除了枚举常量定义之外没有其他实例，也就是枚举类型不能实例化。&lt;/li&gt;
&lt;li&gt;枚举类型禁用反射操作进行实例化(这个特性就是Effetive Java中推荐使用枚举实现单例的原因)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;枚举的公共父类java.lang.Enum的源码如下(已经去掉全部注释)：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public abstract class Enum&amp;lt;E extends Enum&amp;lt;E&amp;gt;&amp;gt;
        implements Comparable&amp;lt;E&amp;gt;, Serializable {

    private final String name; 

    public final String name() {
        return name;
    } 

    private final int ordinal;

    public final int ordinal() {
        return ordinal;
    }

    protected Enum(String name, int ordinal) {
        this.name = name;
        this.ordinal = ordinal;
    }

    public String toString() {
        return name;
    }

    public final boolean equals(Object other) {
        return this==other;
    }

    public final int hashCode() {
        return super.hashCode();
    } 

    protected final Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }  

    public final int compareTo(E o) {
        Enum&amp;lt;?&amp;gt; other = (Enum&amp;lt;?&amp;gt;)o;
        Enum&amp;lt;E&amp;gt; self = this;
        if (self.getClass() != other.getClass() &amp;amp;&amp;amp; // optimization
            self.getDeclaringClass() != other.getDeclaringClass())
            throw new ClassCastException();
        return self.ordinal - other.ordinal;
    }

    public final Class&amp;lt;E&amp;gt; getDeclaringClass() {
        Class&amp;lt;?&amp;gt; clazz = getClass();
        Class&amp;lt;?&amp;gt; zuper = clazz.getSuperclass();
        return (zuper == Enum.class) ? (Class&amp;lt;E&amp;gt;)clazz : (Class&amp;lt;E&amp;gt;)zuper;
    } 

    public static &amp;lt;T extends Enum&amp;lt;T&amp;gt;&amp;gt; T valueOf(Class&amp;lt;T&amp;gt; enumType,
                                                String name) {
        T result = enumType.enumConstantDirectory().get(name);
        if (result != null)
            return result;
        if (name == null)
            throw new NullPointerException(&quot;Name is null&quot;);
        throw new IllegalArgumentException(
            &quot;No enum constant &quot; + enumType.getCanonicalName() + &quot;.&quot; + name);
    }  

    protected final void finalize() { }

    private void readObject(ObjectInputStream in) throws IOException,
        ClassNotFoundException {
        throw new InvalidObjectException(&quot;can't deserialize enum&quot;);
    }

    private void readObjectNoData() throws ObjectStreamException {
        throw new InvalidObjectException(&quot;can't deserialize enum&quot;);
    }                              
}            &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大部分方法都比较简单，值得注意的几点是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、&lt;code&gt;valueOf&lt;/code&gt;方法依赖到的&lt;code&gt;Class&amp;lt;?&amp;gt;#enumConstantDirectory()&lt;/code&gt;，这个方法首次调用完成之后，结果会缓存在&lt;code&gt;Class&amp;lt;?&amp;gt;#enumConstantDirectory&lt;/code&gt;变量中。&lt;/li&gt;
&lt;li&gt;2、Enum实现了Serializable接口，但是&lt;code&gt;readObject&lt;/code&gt;和&lt;code&gt;readObjectNoData&lt;/code&gt;直接抛出了InvalidObjectException异常，注释说到是&quot;防止默认的反序列化&quot;，这一点有点不明不白，既然禁用反序列化为何要实现Serializable接口，这里可能考虑到是否实现Serializable接口应该交给开发者决定。&lt;/li&gt;
&lt;li&gt;3、Enum禁用克隆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JDK中枚举的底层实现就是使用了enum关键字声明的枚举类编译后最终会变成public final修饰同时实现了泛型接口java.lang.Enum并且指定泛型参数为自身的普通Java类，而成员属性和方法实现相关都是在编译完成后就已经成型的，枚举类型的成员变量都是通过静态代码块声明的。&lt;/p&gt;
&lt;p&gt;(本文完 c-1-d e-20181006)&lt;/p&gt;
</description>
<pubDate>Sat, 06 Oct 2018 14:45:00 +0000</pubDate>
<dc:creator>throwable</dc:creator>
<og:description>前提 上一篇文章复习介绍了JDK中注解的底层实现，跟注解一样比较常用，但是底层实现比较神秘的还有枚举类型。趁着国庆假期的最后两天，把JDK中枚举的底层实现也进行一次探究。 通过例子查找本质 在探究JD</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/throwable/p/9748911.html</dc:identifier>
</item>
<item>
<title>有 a - b &lt; c 引发的安全性思考 - 阿两君</title>
<link>http://www.cnblogs.com/fuguoliang/p/9748882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fuguoliang/p/9748882.html</guid>
<description>&lt;p&gt;　　软件工程中，不论使用哪种开发语言，安全性一直是一个非常棘手却又重要的问题。安全性是软件开发领域永远的主题之一，而且随着互联网的蜂拥发展而带动的新技术的兴起与革命（比如近几年火起来的node.js，python，go等，甚至微软也开源后的.net Core），软件工程中的安全性更加的凸显与重要了。&lt;/p&gt;
&lt;p&gt;　　那么，什么才是危险的呢？我的第一反应是注入攻击，比如SQL注入攻击。一个典型的场景是WEB应用中，用户登陆功能，根据用户输入的用户名密码获取相应的数据，那么SQL注入就应运而生，模拟用户名，密码加入特殊字符，加入恶意脚本等等手段，进而造成不了可挽回的后果。比如，正常脚本当如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; userInfo &lt;span&gt;where&lt;/span&gt; username&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_Name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; password&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_Pwd or&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　那么，如果是这样的呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; userInfo &lt;span&gt;where&lt;/span&gt; username&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_Name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; password&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_Pwdte&lt;/span&gt;&lt;span&gt;' or 1=1 or ''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　关于如何编写安全的Java代码，Sun官方给了一份指南，有兴趣的同学可以参考&lt;a href=&quot;https://blog.csdn.net/pragmatic/article/details/1490927&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;，大致为：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　　　• 静态字段&lt;br/&gt;　　　　• 缩小作用域&lt;br/&gt;　　　　• 公共方法和字段&lt;br/&gt;　　　　• 保护包&lt;br/&gt;　　　　• equals方法&lt;br/&gt;　　　　• 如果可能使对象不可改变&lt;br/&gt;　　　　• 不要返回指向包含敏感数据的内部数组的引用&lt;br/&gt;　　　　• 不要直接存储用户提供的数组&lt;br/&gt;　　　　• 序列化&lt;br/&gt;　　　　• 原生函数&lt;br/&gt;　　　　• 清除敏感信息&lt;/p&gt;
&lt;p&gt;　　比如，DoS是一种常见的网络攻击，有人戏称为“洪水攻击”。其惯用手法是通过某种手段，比如大量的机器发送请求，将目标网站宽带和其资源耗尽，导致用户无法正常访问，甚至服务器的宕机。&lt;/p&gt;
&lt;p&gt;　　而对于此类问题，如果单从服务器级别考虑，多少欠缺，我们或许需要考虑程序级别的攻击，比如Java，JVM，以及涉及到的线程方面的安全，应用程序的瑕疵等进行低成本的DoS攻击。&lt;/p&gt;
&lt;p&gt;　　而在面试中，我们都会被问到安全性的问题，却大多比较多泛泛，大而广，而大多数的安全性问题都与代码安全性有关。我们回顾下Java代码的运行过程：&lt;/p&gt;
&lt;p&gt;　　首先编译器把.java文件编程成.class字节码文件，然后由类加载器负责把.class文件加载到JVM，再由字节码校验进行校验，然后由Java解释器负责把该类文件解释为机器码执行。&lt;/p&gt;
&lt;p&gt;　　在类加载器加载.class文件到java虚拟机的过程中，类加载器通过区分本机文件系统的类和网络系统导入的类增加安全性（不允许网络上的应用程序修改本地的数据），本机的类先被加载，一旦所有的类加载完，执行文件的内存划分就固定了，然后字节码校验器开始校验.class字节码文件，字节码校验器不检查那些可信任的编译器所产生的类文件。通过之后，java解释器材负责把类文件解释成为机器码进行执行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//  a b c 都是int类型的数值
        if (a - b &amp;lt; c) { 
            // … 
    }
    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这段看似简单，没毛病的代码会引发下列问题：&lt;/p&gt;
&lt;p&gt;　　如果b&amp;lt;0，而造成的数据溢出，你能想象出多少问题？！而对于越界的处理虽然Java底层给出了很好的解决，但是数值而造成内存问题不容小觑。&lt;/p&gt;
&lt;p&gt;　　当然，过多的考虑安全性问题，势必会造成应用程序的冗余甚至疲软，这些需要视情况而定，而不可盖棺而论。&lt;/p&gt;
&lt;p&gt;　　再比如，对于一段可能出现问题的代码，常用手段 try … catch(){… },那么问题来了，catch的是什么？而一般情况下，我们程序需要抓取到catch，因为要做日志处理，那么日志中不可或缺的有类似代码位置，方法名，以及错误原因等，甚至包含了敏感信息。当然，不可避免，我的建议是，尽量使用内部标识的异常信息，而返回给客户端的类似异常消息尽量少的自动返回的异常消息。&lt;/p&gt;
&lt;p&gt;　　对于安全标准特别高的系统，甚至可能要求敏感信息被使用后，要立即明确再内存中销毁，以免被探测到；或者避免在发生core dump时，意外暴露。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;开发和测试阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　1. 尽量的规范化代码，可参考《阿里巴巴开发手册》&lt;/p&gt;
&lt;p&gt;　　　2. 尽量多的code review，避免不必要尴尬代码出现&lt;/p&gt;
&lt;p&gt;　　　3. 在代码check-in等环节，利用hook机制去调用规则检查工具，保证不合规范代码进入OpenJDK代码库&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;部署阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   　　可参考JDK在加密方法的&lt;a href=&quot;https://java.com/en/jre-jdk-cryptoroadmap.html&quot; target=&quot;_blank&quot;&gt;路线图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　以上皆为日常开发总结，也借鉴网上大神的文章，略略整理一二，权作学习使用，当然面试能帮到不慎感动了，以后有机会再做梳理。&lt;/p&gt;
&lt;p&gt;　　欢迎指点。&lt;/p&gt;

</description>
<pubDate>Sat, 06 Oct 2018 14:35:00 +0000</pubDate>
<dc:creator>阿两君</dc:creator>
<og:description>软件工程中，不论使用哪种开发语言，安全性一直是一个非常棘手却又重要的问题。安全性是软件开发领域永远的主题之一，而且随着互联网的蜂拥发展而带动的新技术的兴起与革命（比如近几年火起来的node.js，py</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fuguoliang/p/9748882.html</dc:identifier>
</item>
<item>
<title>《人件》读书笔记 - pokid</title>
<link>http://www.cnblogs.com/pokid/p/9748874.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pokid/p/9748874.html</guid>
<description>&lt;p&gt;&lt;span&gt;刚读完《人件》一书，我作为一个有过工作经历但没有管理经验的学生对此书是极为推崇的，“对美国软件业影响最大的一本书”是对《人件》的最高评价了。什么是“人件”，很多项目走向失败，不是因为技术问题，而是因为管理出现了问题，问题出现在“人”身上，包括管理者和被管理者。“人”是一切问题的根源，但也是解决问题的根本，对于与软件和硬件，“人件”一词由此而来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;管理人力资源&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;         本书开篇作者直接提出：也许软件系统的主要人问题不在于技术，而在于社会性因素。我相信有过工作经验的一定都会产生心理共鸣，虽然我只是一个有过短暂工作经历的学生，我看到这个提议时也深有感触。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       很多管理者用编程中的模块化思想来管理人，认为人是可随时替换的，殊不知人的社会性，不知我们工作的问题更多是属于社会学范畴而非技术范畴，人犯错在所难免。模块化方法对人并不适用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       同样，踢屁股式的管理对于脑力劳动者是无效的，因为这会阻断他们的创新丶创造及思考。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       管理者：要有足够的洞察力丶人性化，认识到员工的独特个性是使得项目团队产生的化学反应，是团队充满活力与高效的源泉，不能盲目尊崇生产世界的管理风格。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       管理者要谨记任何项目生命周期的最终目标就是结束自己，所以稳定的生产思维对项目工作尤为有害。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       采取的任何提高生产率方法：施压丶标准机械化丶牺牲产品质量丶标准化等，这些都可能造成人员流失。压力不会让人工作的更好，只是工作的更快，从而不得不牺牲产品质量以及自身的工作体验，做出不满意的产品会让员工变得不自信，而在工作环境中，情绪的主要导火线是最自信的威胁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       质量远远不只是最终用户的需求，而是达到高产能的一种方法。以日本为例，价格和质量的对立在日本并不存在，相反，高质量带来成本的下降却是被广泛接受的想法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       一个组织的工作如果都忙忙碌碌，就会膨胀以至于充满整个工作日，这并不是一件好事，帕金森定律被接受并不是因为它是真理，而是因为它有趣。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       列举软件管理的七个假象：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  有一个你不知道的新窍门可以让产能飙升&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  其他管理者正在收获100%丶200%甚至更多的成长&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  技术日新月异，你已经过时啦&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  改变程序语言会给你带来巨大的提升&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  因为库存的缘故，你需要马上让产能翻倍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  你自动化了其他所有东西，难道不是要你自动化掉你的软件开发人员吗&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  你的员工在巨大的压力下工作的更好&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;办公环境&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;         管理者的作用不是让大家去工作，而是创造环境，让大家可以顺利的开展工作。这一章节强调了办公环境对人的工作效率的影响之大，没人会在嘈杂拥挤的环境下还能带来高产出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       理想的工作状态：“流状态”，一种深度的近乎于冥想的融入情况。如果没有好的办公环境员工甚至一次都不能进入这种状态，更别谈工作效率和产出了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       作者给出了一些参考模式来设计办公环境：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  从工具箱里定制工作空间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  窗户&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  室内和室外空间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  公共空间（“亲密梯度”）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;正确的人&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;         人既是个体的人，又是群体的人。人的个体属性和集体倾向性都得到了认可，从而让人能够自由发挥。一个项目无论做出何种努力，最终结果更多的在于是谁来做而不是怎么做。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       所以项目取得成功的方式是：找到合适的人；让他们愉快工作不愿意离开；让他们自由发挥。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;高效团队养成&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;         及时是最好的团队，你也需要协调每个人的贡献从而形成一个集体，但那是管理中相对有章可循的部分。对大多数尝试者来说，成功还是失败在组建团队并形成最初方向的时候就已经设定了。一旦拥有一群才能超卓的成员，管理者就可以在开动后退居二线了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       管理热力学第二定律：组织里的熵总是增加的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       你所在的组织可能已经僵化了，但可以让你负责的部门幸免于难。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       作者对于组织中的领导力倾向于托洛茨基革命派的：领导力并不是从我们身上压榨出什么东西，而是一个服务：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  主动承担任务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  明显的胜任工作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  为任务提前做足功课&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  让每个人创造最大的价值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  实施过程中保持幽默和明显的善意&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种领导力是人们创新以及敢于突破行业限制的标志，组织里需要具有这种领导力的人。同时，一个健康组织里所必须的，是能够为员工经常提供独立的自我评价的机会。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       我们的行业决定了沟通的重要性，团队内部及与外部的沟通。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       一代人的科技成为了下一代人的环境。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;认可“流”状态的管理者需要对持续不断的注意力进行限制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“永恒之地”：最优秀的组织会有意识的去追去称为最佳；短期不是唯一重要的事情，重要的是我们要成为最好的，这是一个长期概念。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;工作中的挑战固然重要，但重要的不是它本身，而是他指引着我们共同努力的方向。挑战是我们成为整体的载体。整体大于部分之和，一个团队最重要的死有凝聚力。团队存在的目标不是达成目标，而是让目标一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;团队活动的愉悦以及互动产生的动力是我们建立互信的基础，要避免“团队自毁”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;造成“团队自毁”的可能因素有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  防御式管理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  官僚主义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  物理分隔&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  时间碎片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  牺牲产品质量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  伪造截止日期&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  团伙控制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  可恶的标记和纪念碑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  加班：一种额外的副作用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  年度薪酬评审&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  目标管理法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  表彰个别员工突出成就&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  绩效相关的证书丶奖励和奖金&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  任何形式的绩效考核&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正确的比喻是把团队类比为音乐组合而不是体育组合，在音乐组合中，整个组合的成功才算是成功，人们不会因为你一个人的表演而欢呼喝彩。团队亦是如此，个体的成功是完全建立在集体成功之上的。而成功会孕育成功，高产的和谐会带来更高产的和谐。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       最棒的成功是看不到任何明显的管理，团队是平等而友好的个体的聚合；最棒的老板是这样不断的管理却让团队感受不到被管理。作为老板，既然做到了唯才是举丶人尽其才，就要做到用人不疑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       臭鼬工程：项目在上层管理不知情的情况下悄然展开。当然这种不服从管理的行为非常冒险，可是谁能保证管理者不出错呢。臭鼬工程的存在不是鼓励我们这样做，而是鼓励我们敢于打破规则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       团队健康的元素包含：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  建立对质量的执着追求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  提供诸多满意的闭环&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  建立精英意识&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  允许和鼓励差异性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  维护和保护成功团队&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  提供战略而不是战术方向&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一流的管理者知道人们不能被任何合理方法控制。成功管理的核心是让大家齐心协力，然后助推大家到一个连管理者自己都无法让他们停止的点。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;       沃土&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;“沃土”，即企业文化的重要性。系统分为确定性和不确定性，让系统变为确定性会导致它失去治愈自身的能力。由人组成的团队也会丧失自我愈复的能力，到了一定程度就变得确定。企业应搭建一个能自我修复的系统，合理的控制风险，做到方法收敛。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方法收敛的途径包括：培训丶工具丶同行评审等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;风险管理的本质：不是让所有的风险消失，而是确保风险发生时有相应的措施。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;终极的管理罪恶是浪费大家的时间。企业需要的是开放空间会议，避免仪式性会议，避免垃圾邮件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例会的真正目的是状态的确认，并且不是针对工作状态，而是老板的状态；今天我们协调沟通的花销比以往任何时候都高，大部分邮件就是问题的一部分，而非解决方案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;人生短暂，如果你需要知道所有才能工作，你可能走不了多远。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也许你不能改变整个公司，但你能改变与你共事的同时及下属的工作方式。人们天性讨厌改变：所有受益于旧秩序的人都将成为他的敌人，而也许会受益于新秩序的人只可能成为他缺乏热情的保卫者，因为不确定性比起潜在获益更深入人心。需要认识到的是：拥护改变的真正盟友是“相信但保持质疑”的人，而敌人是“盲目尊崇”和“激烈反对”的人。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对改变的基本反应并非逻辑思考得来的，而是情绪化的，要用感恩旧方式的方式来帮助推动改变，这就强调了发起改变的“人”的重要性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;变化模型（萨提亚模式）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;外来元素       替换思想&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;旧标准  ——  》混乱  ——》  实践与整合——》新标准&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面所做的事情都是为了构建员工社区准备的，构建社区涉及到了哲学里的政治问题。创建一个社区需要天分丶勇气和创造力，同时你需要付出更多的时间。当然你不能单打独斗，最好能成为一种催化剂。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;       快乐的工作&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;       管理者应该使员工快乐的工作，而不是剥夺他们的快乐以一味地追求最大效率化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       建设性的重新引入少量无序从而给工作注入更多的能量，包括：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  试点项目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  战争游戏&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  头脑风暴：类比思考丶反其道行之丶身临其境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  激发性训练&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  培训丶旅行丶会议丶庆祝和撤退&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于产出远大于价值的员工，可提供“自由电子”式的职位。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 06 Oct 2018 14:31:00 +0000</pubDate>
<dc:creator>pokid</dc:creator>
<og:description>《人件》读书笔记 刚读完《人件》一书，我作为一个有过工作经历但没有管理经验的学生对此书是极为推崇的，“对美国软件业影响最大的一本书”是对《人件》的最高评价了。什么是“人件”，很多项目走向失败，不是因为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pokid/p/9748874.html</dc:identifier>
</item>
<item>
<title>一言难尽的js变量提升面试题 - 漫思</title>
<link>http://www.cnblogs.com/sexintercourse/p/9748827.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sexintercourse/p/9748827.html</guid>
<description>&lt;p&gt;&lt;strong&gt;在这个课题开始之前我们先做一些基础知识的讲解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、在顶级的区域内声明的变量为 window级别的变量。 也就是说var a=100 等价于 window.a=100;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、局部的重新声明变量没有意义。var a=100;var a;后面的将没有意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、在有参数函数的定义中 function abc(p1){} abc(1),在函数执行中，先构建，在执行，会有两个步骤，所以说当函数执行之前构建过程中，将临时生成代码 var p1=1;将来一切不赋值的声明将变得没有意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;var p1;//没有意义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;var p1=2;//有意义。&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;全局作用域和局部作用域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全局作用域：整个JS执行环境&lt;/p&gt;
&lt;p&gt;局部作用域：通过创建一个函数就开辟出了一个局部作用域&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全局变量和 局部变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全局变量：在全局作用域都可以访问的变量&lt;/p&gt;
&lt;p&gt;局部变量：只能在当前局部作用域访问的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变量声明提升：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果变量声明在函数里面，则将变量声明提升到函数的开头&lt;/p&gt;
&lt;p&gt;如果变量声明是一个全局变量，则将变量声明提升到全局作用域的开头&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变量运行（搜索）机制：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先看，有没有局部作用域&lt;/p&gt;
&lt;p&gt;如果有，查找是不是这个局部作用域定义的变量&lt;/p&gt;
&lt;p&gt;如果不是，寻找上一级作用域，直到找到全局作用域&lt;/p&gt;
&lt;p&gt;如果全局作用域也找不到这个变量，这个变量就是未定义的 undefined&lt;/p&gt;

&lt;p&gt;第一题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a=1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test(){
    console.log(a);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a=1&lt;span&gt;;
}
test();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据变量声明提升和变量搜索机制，函数test（）应为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; a;
    console.log(a);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时由于a并咩有被赋值，所以也就是undefined&lt;/span&gt;
        a=1&lt;span&gt;;
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; b=2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test2(){
    window.b&lt;/span&gt;=3&lt;span&gt;;
    console.log(b);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;值为3&lt;/span&gt;
&lt;span&gt;}
test2();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;任何通过附加在window上的变量都相当于声明一个全局变量，或者是给全局变量赋值&lt;/p&gt;

&lt;p&gt;第三题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
c=5&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test3(){
    window.c&lt;/span&gt;=3&lt;span&gt;;
    console.log(c);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; c;
    console.log(window.c);
}
test3();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据变量声明提升和变量搜索机制：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
c=5;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个全局变量c &lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test3(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; c;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变量声明提升，声明一个局部变量&lt;/span&gt;
    window.c=3;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变全局变量c的值&lt;/span&gt;
    console.log(c);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;由于此时的c是一个局部变量c，并且没有被赋值 c就是undefined    &lt;/span&gt;
    console.log(window.c);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时的c就是一个全局变量c，也就是值为3&lt;/span&gt;
&lt;span&gt;}
test3();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 06 Oct 2018 14:16:00 +0000</pubDate>
<dc:creator>漫思</dc:creator>
<og:description>基础知识 在这个课题开始之前我们先做一些基础知识的讲解 1、在顶级的区域内声明的变量为 window级别的变量。 也就是说var a=100 等价于 window.a=100; 2、局部的重新声明变量</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sexintercourse/p/9748827.html</dc:identifier>
</item>
<item>
<title>面向切面编程(AOP) - 从未太晚</title>
<link>http://www.cnblogs.com/kongsq/p/9748763.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kongsq/p/9748763.html</guid>
<description>&lt;p&gt;&lt;span&gt;结合设计模式,通过代码理解面向切面编程，有代码的很好理解的，5分钟可以看三遍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过,结构型设计模式，装饰器模式来实现AOP，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 装饰器模式实现静态代理
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; AOP 在方法前后增加自定义的方法
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DecoratorAOP
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Show()
        {
            User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eleven&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123123123123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接调用&lt;/span&gt;
            IUserProcessor processor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserProcessor();
            processor.RegUser(user);
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;***************&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过装饰器模式,在方法执行前后添加功能&lt;/span&gt;
            processor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserProcessorDecorator(processor);
            processor.RegUser(user);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProcessor : IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户已注册。Name:{0},PassWord:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, user.Name, user.Password);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 装饰器的模式去提供一个AOP功能
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProcessorDecorator : IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; IUserProcessor _UserProcessor { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserProcessorDecorator(IUserProcessor userprocessor)
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;._UserProcessor =&lt;span&gt; userprocessor;
            }

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user)
            {
                BeforeProceed(user);

                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._UserProcessor.RegUser(user);

                AfterProceed(user);
            }

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 业务逻辑之前
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;user&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; BeforeProceed(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行前&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 业务逻辑之后
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;user&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; AfterProceed(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行后&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过,结构型设计模式，代理模式来实现AOP，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 代理模式实现静态代理
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; AOP 在方法前后增加自定义的方法
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProxyAOP
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Show()
        {
            User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eleven&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123123123123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };
            IUserProcessor processor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserProcessor();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接调用方法&lt;/span&gt;
&lt;span&gt;            processor.RegUser(user);
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;***************&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现AOP,在执行前后加其他方法&lt;/span&gt;
            processor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProxyUserProcessor();
            processor.RegUser(user);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProcessor : IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户已注册。Name:{0},PassWord:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, user.Name, user.Password);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 代理模式去提供一个AOP功能
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProxyUserProcessor : IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; IUserProcessor _UserProcessor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserProcessor();

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user)
            {
                BeforeProceed(user);
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._UserProcessor.RegUser(user);
                AfterProceed(user);
            }

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 业务逻辑之前
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;user&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; BeforeProceed(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行前&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 业务逻辑之后
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;user&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; AfterProceed(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行后&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过Unity实现AOP,配置太复杂就不贴了。。。就一个实现类的代码,可以用于添加方法的日志,异常处理,不用修改方法本身,不用挨个方法+Log.Info()了,通过Unity(IOC)创建的对象都能用，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogBeforeBehavior : IInterceptionBehavior
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Type&amp;gt;&lt;span&gt; GetRequiredInterfaces()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Type.EmptyTypes;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IMethodReturn Invoke(IMethodInvocation input, GetNextInterceptionBehaviorDelegate getNext)
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogBeforeBehavior&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.WriteLine(input.MethodBase.Name);
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; input.Inputs)
            {
                Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(item));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;反射&amp;amp;序列化获取更多信息&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; getNext().Invoke(input, getNext);&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; WillExecute
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;; }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 再加一个Unity创建对象和调用的代码吧,NuGet添加Unity的引用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UnityConfigAOP
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Show()
        {
            User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eleven&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12345678934534643&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };
             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个是代码块,好神奇的呦&lt;/span&gt;
&lt;span&gt;            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置UnityContainer&lt;/span&gt;
                IUnityContainer container = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UnityContainer();
                ExeConfigurationFileMap fileMap &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExeConfigurationFileMap();
                fileMap.ExeConfigFilename &lt;/span&gt;= Path.Combine(AppDomain.CurrentDomain.BaseDirectory + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CfgFiles\\Unity.Config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                Configuration configuration &lt;/span&gt;=&lt;span&gt; ConfigurationManager.OpenMappedExeConfiguration(fileMap, ConfigurationUserLevel.None);
                UnityConfigurationSection configSection &lt;/span&gt;=&lt;span&gt; (UnityConfigurationSection)configuration.GetSection(UnityConfigurationSection.SectionName);
                configSection.Configure(container, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aopContainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

                IUserProcessor processor &lt;/span&gt;= container.Resolve&amp;lt;IUserProcessor&amp;gt;&lt;span&gt;();
                processor.RegUser(user);

            }
        }
    }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt; &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 06 Oct 2018 14:09:00 +0000</pubDate>
<dc:creator>从未太晚</dc:creator>
<og:description>结合设计模式,通过代码理解面向切面编程，有代码的很好理解的，5分钟可以看三遍 通过,结构型设计模式，装饰器模式来实现AOP，代码如下 通过,结构型设计模式，代理模式来实现AOP，代码如下 通过Unit</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kongsq/p/9748763.html</dc:identifier>
</item>
<item>
<title>一起学Hive——创建内部表、外部表、分区表和分桶表及导入数据 - summer哥</title>
<link>http://www.cnblogs.com/airnew/p/9748751.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/airnew/p/9748751.html</guid>
<description>&lt;p&gt;Hive本身并不存储数据，而是将数据存储在Hadoop的HDFS中，表名对应HDFS中的目录/文件。根据数据的不同存储方式，将Hive表分为外部表、内部表、分区表和分桶表四种数据模型。每种数据模型各有优缺点。通过create user命令创建user表时，会在HDFS中生成一个user目录/文件。&lt;/p&gt;
&lt;h3 id=&quot;外部表&quot;&gt;外部表&lt;/h3&gt;
&lt;p&gt;数据不由Hive管理，使用drop命令删除一个表时，只是把表的元数据给删除了，而表的数据不会删除。&lt;br/&gt;创建外部表的SQL语句：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create external table bigdata17_user(
userid int,
username string,
fullname string)  
row format delimited fields terminated by ','   
lines terminated by '\n';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在hive的命令行中执行&lt;code&gt;show tables;&lt;/code&gt;sql语句，会看到bigdata17_user的表。&lt;br/&gt;&lt;img src=&quot;http://www.bigdata17.com/assets/images/hivetable1.png&quot; title=&quot;hive table&quot; alt=&quot;hive table&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过执行&lt;code&gt;hadoop fs -ls /user/hive/warehouse/bigdata17.db/bigdata17_user&lt;/code&gt; 命令，可以看到在HDFS中有一个bigdata17_user的目录。这时候文件夹下面是没有数据的，因为还没有导入数据。bigdata17.db是数据库名，hive默认的数据库是default。&lt;br/&gt;&lt;img src=&quot;http://www.bigdata17.com/assets/images/hivetable2.png&quot; title=&quot;hive table&quot; alt=&quot;hive table&quot;/&gt;&lt;br/&gt;执行SQL语句：&lt;code&gt;load data inpath '/data/user.csv' overwrite into table bigdata17_user;&lt;/code&gt;导入数据到bigdata17_user表中。&lt;/p&gt;
&lt;p&gt;执行&lt;code&gt;hadoop fs -ls /user/hive/warehouse/bigdata17.db/bigdata17_user&lt;/code&gt;命令，就看到该目录下面有个user.csv的文件。&lt;br/&gt;&lt;img src=&quot;http://www.bigdata17.com/assets/images/hivetable3.png&quot; title=&quot;hive table&quot; alt=&quot;hive table&quot;/&gt;&lt;br/&gt;通过&lt;code&gt;drop table bigdata17_user&lt;/code&gt;;语句删除表。&lt;br/&gt;然后执行show tables语句，发现该表已经不存在。&lt;/p&gt;
&lt;p&gt;我们再次执行&lt;code&gt;hadoop fs -ls /user/hive/warehouse/bigdata17.db/bigdata17_user&lt;/code&gt;，发现bigdata17_user目录还存在，目录中还有user.csv文件。&lt;br/&gt;&lt;img src=&quot;http://www.bigdata17.com/assets/images/hivetable4.png&quot; title=&quot;hive table&quot; alt=&quot;hive table&quot;/&gt;&lt;br/&gt;通过上述的操作，验证了使用drop删除表时是不会删除外部表的数据。而我们要恢复外部表只需再次执行创建bigdat17_user表的SQL即可：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create external table bigdata17_user(
userid int,
username string,
fullname string)  
row format delimited fields terminated by ','   
lines terminated by '\n';&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;内部表&quot;&gt;内部表&lt;/h3&gt;
&lt;p&gt;内部表(有些人会翻译成管理表)的数据由hive管理，当使用drop删除表时，会把表的元数据和数据一起删除，数据无法恢复，因此一定要慎用drop删除内部表。&lt;/p&gt;
&lt;p&gt;创建内部表的sql语句：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create table bigdata17_user( userid int, username string, fullname string)
row format delimited fields terminated by ','
lines terminated by '\n';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;和外部表创建的语法基本一样，只是创建外部表需要使用external关键字。没有external关键字则是创建内部表。&lt;/p&gt;
&lt;h3 id=&quot;分区表&quot;&gt;分区表&lt;/h3&gt;
&lt;p&gt;内部表和外部表都可以使用分区的功能，使用分区的内部或外部表称为分区表。&lt;br/&gt;创建分区表的语句：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create external table bigdata17_user_partition(
username string,
fullname string)
partitioned by(userid string)
row format delimited fields terminated by ','   
lines terminated by '\n';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;往分区表导入数据分为静态分区导入和动态分区导入，静态分区是在导入语句中指定分区值，例如：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;insert overwrite table bigdata17-user_parttion
 partition(userid=1)
 select username ,fullname from bigdata17_user;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该语句的分区值默认是1，如果有多个分区值，必须写多个sql语句，效率低下。&lt;/p&gt;
&lt;p&gt;一般情况在我们都是使用动态分区导入数据，&lt;br/&gt;在导入数据之前必须执行下面的两条语句让hive支持动态分区功能，默认是不支持动态分区的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;动态分区导入数据的sql语句：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;insert overwrite table bigdata17_user_partition
 partition(userid)
 select username ,fullname,userid from bigdata17_user;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来看下分区表的数据在hdfs中是以何种形式组织存放的，执行&lt;code&gt;hadoop fs -ls /user/hive/warehouse/bigdata17.db/bigdata17_user_partition&lt;/code&gt;命令，会看到下图的内容：&lt;br/&gt;&lt;img src=&quot;http://www.bigdata17.com/assets/images/hivetable4.png&quot; title=&quot;hive table&quot; alt=&quot;hive table&quot;/&gt;&lt;br/&gt;因为bigdata17_user_partition表是按照userid字段进行分区的，bigdata17_user_partition一共有1、2和3的三个数值，因此有3个文件。由此可见，分区字段有多少个不同的值，就有几个文件。相同分区的数据存放在同一个文件中。&lt;/p&gt;
&lt;p&gt;注意：在使用insert overwrite table select方式导入数据到分区表时，有多个分区字段时，分区partition中的字段顺序必须和select字段的顺序一致。&lt;/p&gt;
&lt;h3 id=&quot;分桶表&quot;&gt;分桶表&lt;/h3&gt;
&lt;p&gt;分桶是将某个字段取哈希值，值相同的数据分发到一个桶中。在创建分桶表的时候必须指定分桶的字段，并且指定要分桶的数量。&lt;br/&gt;创建分桶表对SQL语句如下：&lt;/p&gt;
&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;create table bigdata17_user_bucket( userid int, username string, fullname string)
clustered by(userid) into 2 buckets  
row format delimited fields terminated by ','
lines terminated by '\n';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;导入数据到bigdata17_user_bucket分桶表中的步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;设置使用分桶属性：&lt;code&gt;set hive.enforce.bucketing = true。&lt;/code&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;执行SQL语句&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;sql&quot;&gt;
&lt;code&gt;insert overwrite table bigdata17_user_bucket
 select userid,username ,fullname from bigdata17_user;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行&lt;code&gt;hadoop fs -ls /user/hive/warehouse/bigdata17.db/bigdata17_user_bucket&lt;/code&gt;命令，会看到bigdata17_user_bucket目录中有两个文件。&lt;br/&gt;&lt;img src=&quot;http://www.bigdata17.com/assets/images/hivetable5.png&quot; title=&quot;hive table&quot; alt=&quot;hive table&quot;/&gt;&lt;br/&gt;其中userid为1和3的数据写入到000001_0文件中，userid为2的数据写入到000000_0的文件中。&lt;/p&gt;
&lt;p&gt;注意：分区和分桶都是按字段来组织数据的存放，分区是相同的字段值存放在一个文件中，而分桶是字段哈希值相同的数据存放在一个文件中。&lt;/p&gt;
</description>
<pubDate>Sat, 06 Oct 2018 14:04:00 +0000</pubDate>
<dc:creator>summer哥</dc:creator>
<og:description>Hive本身并不存储数据，而是将数据存储在Hadoop的HDFS中，表名对应HDFS中的目录/文件。根据数据的不同存储方式，将Hive表分为外部表、内部表、分区表和分桶表四种数据模型。每种数据模型各有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/airnew/p/9748751.html</dc:identifier>
</item>
<item>
<title>自定义标签 - ZYXS</title>
<link>http://www.cnblogs.com/zyxsblogs/p/9747750.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zyxsblogs/p/9747750.html</guid>
<description>&lt;p&gt;&lt;span&gt;一般我们说自定义标签是指&lt;a href=&quot;https://baike.baidu.com/item/JSP/141543&quot; target=&quot;_blank&quot; data-lemmaid=&quot;141543&quot;&gt;JSP&lt;/a&gt;自定义标签。自定义标签在功能上逻辑上与javaBean 类似,都封装Java 代码。自定义标签是可重用的组件代码，并且允许开发人员为复杂的操作提供逻辑名称。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;①使用Jsp自定义标签写一个HelloWorld.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先要写一个tld文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_bcceb9d3-2b44-4995-8ae3-49c5307fbfc7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bcceb9d3-2b44-4995-8ae3-49c5307fbfc7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bcceb9d3-2b44-4995-8ae3-49c5307fbfc7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;
&lt;span&gt; 3&lt;/span&gt;     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
&lt;span&gt; 4&lt;/span&gt;     xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd&quot;
&lt;span&gt; 5&lt;/span&gt;     version=&quot;2.1&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;tlib-version&amp;gt;1.0&amp;lt;/tlib-version&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;&lt;span&gt;short&lt;/span&gt;-name&amp;gt;java1234Tag&amp;lt;/&lt;span&gt;short&lt;/span&gt;-name&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;tag&amp;gt;
&lt;span&gt; 9&lt;/span&gt;         &amp;lt;name&amp;gt;helloWorld&amp;lt;/name&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;com.java1234.tag.HelloWorldTag&amp;lt;/tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt;11&lt;/span&gt;     &amp;lt;body-content&amp;gt;empty&amp;lt;/body-content&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;/tag&amp;gt;
&lt;span&gt;13&lt;/span&gt; &amp;lt;/taglib&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;java.tld&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_16c4394e-9ee2-477f-b6d9-835995a497ea&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_16c4394e-9ee2-477f-b6d9-835995a497ea&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_16c4394e-9ee2-477f-b6d9-835995a497ea&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.java1234.tag;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspWriter;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.TagSupport;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloWorldTag &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; TagSupport{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; doStartTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         JspWriter out=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pageContext.getOut();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             out.print(&quot;Jsp自定义标签HelloWorld&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; TagSupport.SKIP_BODY;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接跳出jsp标签（最简单的标签）&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;HelloWorldTag&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;页面：&lt;/p&gt;
&lt;p&gt;在HelloWorldTag.jsp文件的标头我们引入tld文件。&amp;lt;%@ taglib prefix=&quot;java1234&quot; uri=&quot;/WEB-INF/java1234.tld&quot; %&amp;gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_50769d7d-7baa-4d46-9554-51b5e2615a9d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_50769d7d-7baa-4d46-9554-51b5e2615a9d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_50769d7d-7baa-4d46-9554-51b5e2615a9d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;&lt;span&gt;
    pageEncoding&lt;/span&gt;=&quot;utf-8&quot;%&amp;gt;
&amp;lt;%@ taglib prefix=&quot;java1234&quot; uri=&quot;/WEB-INF/java1234.tld&quot; %&amp;gt; 
&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&amp;gt;
&amp;lt;title&amp;gt;helloWorldTag&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;java1234:helloWorld/&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;HelloWorldTag.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;②&lt;span&gt;自定义标签有属性的标签&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;传递一个参数name,需要在配置文件里面设置如下：(&amp;lt;required&amp;gt;yes&amp;lt;/required&amp;gt;&amp;lt;!-- 表示该属性，一定要使用 --&amp;gt; &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;&amp;lt;!-- 属性是否能用表达式 --&amp;gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;tag&amp;gt;
&lt;span&gt; 2&lt;/span&gt;         &amp;lt;name&amp;gt;helloWorld2&amp;lt;/name&amp;gt;
&lt;span&gt; 3&lt;/span&gt;         &amp;lt;tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;com.java1234.tag.HelloWorldTag2&amp;lt;/tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt; 4&lt;/span&gt;         &amp;lt;body-content&amp;gt;empty&amp;lt;/body-content&amp;gt;
&lt;span&gt; 5&lt;/span&gt;         &amp;lt;attribute&amp;gt;
&lt;span&gt; 6&lt;/span&gt;             &amp;lt;name&amp;gt;name&amp;lt;/name&amp;gt;//带有name
&lt;span&gt; 7&lt;/span&gt;             &amp;lt;required&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/required&amp;gt;//为了在页面
&lt;span&gt; 8&lt;/span&gt;             &amp;lt;rtexprvalue&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/rtexprvalue&amp;gt;
&lt;span&gt; 9&lt;/span&gt;         &amp;lt;/attribute&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;/tag&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.java1234.tag;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspWriter;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.TagSupport;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloWorldTag2 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; TagSupport{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;&lt;span&gt;//定义name属&lt;/span&gt;&lt;span&gt;性
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;    &lt;span&gt; // set &amp;amp; get 方法&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; doStartTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         JspWriter out=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pageContext.getOut();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             out.print(name+&quot;Jsp自定义标签&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; TagSupport.SKIP_BODY;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接跳出jsp标签（最简单的标签）&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 页面部分&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;
&lt;span&gt; 2&lt;/span&gt;     pageEncoding=&quot;utf-8&quot;%&amp;gt;
&lt;span&gt; 3&lt;strong&gt; &amp;lt;%@ taglib prefix=&quot;java1234&quot; uri=&quot;/WEB-INF/java1234.tld&quot; %&amp;gt; &lt;span&gt;//引入部分&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &amp;lt;title&amp;gt;helloWorldTag2&amp;lt;/title&amp;gt;
&lt;span&gt; 9&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;10&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;11&lt;/span&gt; &amp;lt;java1234:helloWorld2 name=&quot;带属性的jsp自定义标签屌爆了！&quot;/&amp;gt;
&lt;span&gt;12&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;13&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;③有标签体的自定义标签&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们在设置属性“集合”，“元素”，“遍历器”。操作如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.java1234.tag;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Iterator;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.TagSupport;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Iterate &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; TagSupport{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String var;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;集合中的每一个元素&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; String items;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;集合&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; Iterator iter;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历器用来放置数据的。&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getVar() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; var;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setVar(String var) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.var =&lt;span&gt; var;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getItems() {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; items;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setItems(String items) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.items =&lt;span&gt; items;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Iterator getIter() {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; iter;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setIter(Iterator iter) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.iter =&lt;span&gt; iter;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; doStartTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取集合数据items-----&amp;gt;监测数据是否存在   -----&amp;gt;存在并且是List  ---&amp;gt;搞成遍历器 调用方法  ----如果有值--&amp;gt;我进行遍历执行标签体&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         Object value=&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pageContext.getAttribute(items);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(value!=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value &lt;span&gt;instanceof&lt;/span&gt; List ){    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断value是不是List&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.iter=&lt;span&gt;((List)value).iterator();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(iter.hasNext()){
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pageContext.setAttribute(var, iter.next());
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; TagSupport.EVAL_BODY_INCLUDE;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳到标签体去执行操作。&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; TagSupport.SKIP_BODY;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接跳出标签体，结束任务&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; TagSupport.SKIP_BODY;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳出标签体，结束任务。&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果iter还没有执行完，我就在执行一次标签体！&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; doAfterBody() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(iter.hasNext()){
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;              &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.pageContext.setAttribute(var, iter.next());
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;              &lt;span&gt;return&lt;/span&gt; TagSupport.EVAL_BODY_AGAIN;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在执行一次标签体&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;          }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;              &lt;span&gt;return&lt;/span&gt; TagSupport.SKIP_BODY;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接跳出标签体&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     
&lt;span&gt;57&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置文件tld；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;
&lt;span&gt; 3&lt;/span&gt;     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
&lt;span&gt; 4&lt;/span&gt;     xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd&quot;
&lt;span&gt; 5&lt;/span&gt;     version=&quot;2.1&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;tlib-version&amp;gt;1.0&amp;lt;/tlib-version&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;&lt;span&gt;short&lt;/span&gt;-name&amp;gt;java1234Tag&amp;lt;/&lt;span&gt;short&lt;/span&gt;-name&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;tag&amp;gt;
&lt;span&gt; 9&lt;/span&gt;         &amp;lt;name&amp;gt;iterate&amp;lt;/name&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;com.java1234.tag.Iterate&amp;lt;/tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;body-content&amp;gt;JSP&amp;lt;/body-content&amp;gt;
&lt;span&gt;12&lt;/span&gt;         &amp;lt;attribute&amp;gt;
&lt;span&gt;13&lt;/span&gt;             &amp;lt;name&amp;gt;items&amp;lt;/name&amp;gt;
&lt;span&gt;14&lt;/span&gt;             &amp;lt;required&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/required&amp;gt;
&lt;span&gt;15&lt;/span&gt;             &amp;lt;rtexprvalue&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/rtexprvalue&amp;gt;
&lt;span&gt;16&lt;/span&gt;         &amp;lt;/attribute&amp;gt;
&lt;span&gt;17&lt;/span&gt;         &amp;lt;attribute&amp;gt;
&lt;span&gt;18&lt;/span&gt;             &amp;lt;name&amp;gt;var&amp;lt;/name&amp;gt;
&lt;span&gt;19&lt;/span&gt;             &amp;lt;required&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/required&amp;gt;
&lt;span&gt;20&lt;/span&gt;             &amp;lt;rtexprvalue&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/rtexprvalue&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;/attribute&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;/tag&amp;gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &amp;lt;/taglib&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;页面 iterate.jsp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;
&lt;span&gt; 2&lt;/span&gt;     pageEncoding=&quot;utf-8&quot;%&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;%@ page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.*&quot;%&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &amp;lt;%@ taglib prefix=&quot;java1234&quot; uri=&quot;/WEB-INF/java1234.tld&quot; %&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&amp;gt;
&lt;span&gt; 9&lt;/span&gt; &amp;lt;title&amp;gt;iterate&amp;lt;/title&amp;gt;
&lt;span&gt;10&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;11&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;%
&lt;span&gt;13&lt;/span&gt;     List people =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         people.add(&quot;张三丰2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         people.add(&quot;丝丝光2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         people.add(&quot;王二小2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         pageContext.setAttribute(&quot;people&quot;&lt;span&gt;, people);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     %&amp;gt;
&lt;span&gt;19&lt;/span&gt; &amp;lt;java1234:iterate2 var=&quot;p&quot; iteams=&quot;people&quot;&amp;gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;${p }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &amp;lt;/java1234:iterate2&amp;gt;    
&lt;span&gt;22&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;23&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;④简单标签&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置文件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;
&lt;span&gt; 3&lt;/span&gt;     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
&lt;span&gt; 4&lt;/span&gt;     xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd&quot;
&lt;span&gt; 5&lt;/span&gt;     version=&quot;2.1&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;tlib-version&amp;gt;1.0&amp;lt;/tlib-version&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;&lt;span&gt;short&lt;/span&gt;-name&amp;gt;java1234Tag&amp;lt;/&lt;span&gt;short&lt;/span&gt;-name&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;tag&amp;gt;
&lt;span&gt; 9&lt;/span&gt;         &amp;lt;name&amp;gt;iterate2&amp;lt;/name&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;com.java1234.tag.IterateSimple&amp;lt;/tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt;11&lt;/span&gt;         &amp;lt;body-content&amp;gt;scriptless&amp;lt;/body-content&amp;gt;
&lt;span&gt;12&lt;/span&gt;         &amp;lt;attribute&amp;gt;
&lt;span&gt;13&lt;/span&gt;             &amp;lt;name&amp;gt;var&amp;lt;/name&amp;gt;
&lt;span&gt;14&lt;/span&gt;             &amp;lt;required&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/required&amp;gt;
&lt;span&gt;15&lt;/span&gt;             &amp;lt;rtexprvalue&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/rtexprvalue&amp;gt;
&lt;span&gt;16&lt;/span&gt;         &amp;lt;/attribute&amp;gt;
&lt;span&gt;17&lt;/span&gt;         &amp;lt;attribute&amp;gt;
&lt;span&gt;18&lt;/span&gt;         &amp;lt;name&amp;gt;iteams&amp;lt;/name&amp;gt;
&lt;span&gt;19&lt;/span&gt;             &amp;lt;required&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/required&amp;gt;
&lt;span&gt;20&lt;/span&gt;             &amp;lt;rtexprvalue&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/rtexprvalue&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;/attribute&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;/tag&amp;gt;
&lt;span&gt;23&lt;/span&gt; &amp;lt;/taglib&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;处理部分：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.java1234.tag;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Iterator;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.SimpleTagSupport;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; IterateSimple &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SimpleTagSupport{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String var;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String iteams;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getVar() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; var;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setVar(String var) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.var =&lt;span&gt; var;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getIteams() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; iteams;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setIteams(String iteams) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.iteams =&lt;span&gt; iteams;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException, IOException {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         Object value=&lt;span&gt;this&lt;/span&gt;.getJspContext().getAttribute(&quot;iteams&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(value !=&lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; List){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;          Iterator iter=((List)value).iterator();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造遍历器&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(iter.hasNext()){
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getJspContext().setAttribute(var, iter.next());
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.getJspBody().invoke(&lt;span&gt;null&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;响应页面！&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;页面：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;
&lt;span&gt; 2&lt;/span&gt;     pageEncoding=&quot;utf-8&quot;%&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;%@ page &lt;span&gt;import&lt;/span&gt;=&quot;java.util.*&quot;%&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &amp;lt;%@ taglib prefix=&quot;java1234&quot; uri=&quot;/WEB-INF/java1234.tld&quot; %&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;html&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 8&lt;/span&gt; &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&amp;gt;
&lt;span&gt; 9&lt;/span&gt; &amp;lt;title&amp;gt;iterate&amp;lt;/title&amp;gt;
&lt;span&gt;10&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;11&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;%
&lt;span&gt;13&lt;/span&gt;     List people =&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         people.add(&quot;张三丰&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         people.add(&quot;丝丝光&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         people.add(&quot;王二小&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         pageContext.setAttribute(&quot;people&quot;&lt;span&gt;, people);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     %&amp;gt;
&lt;span&gt;19&lt;/span&gt; &amp;lt;java1234:iterate items=&quot;people&quot; var=&quot;p&quot;&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;h1&amp;gt;${p }&amp;lt;/h1&amp;gt;
&lt;span&gt;21&lt;/span&gt; &amp;lt;/java1234:iterate&amp;gt;    
&lt;span&gt;22&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;23&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;勤加练习！加油&lt;/p&gt;
</description>
<pubDate>Sat, 06 Oct 2018 14:02:00 +0000</pubDate>
<dc:creator>ZYXS</dc:creator>
<og:description>JSP自定义标签 一般我们说自定义标签是指JSP自定义标签。自定义标签在功能上逻辑上与javaBean 类似,都封装Java 代码。自定义标签是可重用的组件代码，并且允许开发人员为复杂的操作提供逻辑名</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zyxsblogs/p/9747750.html</dc:identifier>
</item>
<item>
<title>数据结构与算法----双向链表 - CMusketeer</title>
<link>http://www.cnblogs.com/cmusketeer/p/9748719.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmusketeer/p/9748719.html</guid>
<description>&lt;p&gt;PS：前面已经说过线性表的两种表现形式，一种是顺序，另一种是链式，链式的一种普通表现形式就是加入一个指针，前一个的指针指向后一个结点的地址，那么还有一种形式就是双向链表，里面又加上了一个指针变量，让前指针变量指向直接前驱，后指针变量指向直接后继。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://data.biancheng.net/uploads/allimg/170718/2-1FGQ62RJT.png&quot; alt=&quot;&quot; width=&quot;274&quot; height=&quot;57&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 创建结构体
 * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; DoubleLink {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; data;
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; DoubleLink *&lt;span&gt;prior;
    &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; DoubleLink *&lt;span&gt;next;
} DoubleLink, &lt;/span&gt;*DoubleLinkL;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;创建双向链表并初始化&lt;/h2&gt;
&lt;h3&gt;注：这里我们是只创建了一个空的链表，内部无数据，所以首结点的两个指针变量要为NULL。&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 初始化
 * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
DoubleLinkL initLink() {
    DoubleLinkL L &lt;/span&gt;= (DoubleLinkL) malloc(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(DoubleLink));
    L&lt;/span&gt;-&amp;gt;next =&lt;span&gt; NULL;
    L&lt;/span&gt;-&amp;gt;prior =&lt;span&gt; NULL;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; L;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;开始插入数据&lt;/h2&gt;
&lt;p&gt;在插入数据之前我们要考虑一个事情就是，链表中有数据和无数据的插入是否一样，也就是说指针改变是否一致，在左右都有值的时候平时要改变4条线，那么如果只有首结点的话移动几条呢。&lt;/p&gt;
&lt;p&gt;其实可以说是移动3条，但画图的话就看到两条。&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1258190/201810/1258190-20181006212559239-601714052.png&quot; alt=&quot;&quot; width=&quot;289&quot; height=&quot;107&quot;/&gt;：：|：：&lt;img src=&quot;https://img2018.cnblogs.com/blog/1258190/201810/1258190-20181006212636925-493170396.png&quot; alt=&quot;&quot; width=&quot;275&quot; height=&quot;134&quot;/&gt;&lt;/p&gt;

&lt;p&gt;首先当只要一个首结点或者在最后一个结点插入的情况下，如第一个图，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　　s-&amp;gt;next = p-&amp;gt;&lt;span&gt;next;
        s&lt;/span&gt;-&amp;gt;prior =&lt;span&gt; p;
        p&lt;/span&gt;-&amp;gt;next = s;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当前后都有结点的时候，如第二个图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　　s-&amp;gt;next = p-&amp;gt;&lt;span&gt;next;
        s&lt;/span&gt;-&amp;gt;prior =&lt;span&gt; p;
        p&lt;/span&gt;-&amp;gt;next =&lt;span&gt; s;
        s&lt;/span&gt;-&amp;gt;next-&amp;gt;prior = s;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整体插入代码就是&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; insertLink(DoubleLinkL &amp;amp;L, &lt;span&gt;int&lt;/span&gt; pos, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; e) {
    DoubleLinkL p &lt;/span&gt;=&lt;span&gt; L;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (p &amp;amp;&amp;amp; i &amp;lt; pos-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        p &lt;/span&gt;= p-&amp;gt;&lt;span&gt;next;
        i&lt;/span&gt;++&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!p || i &amp;gt; pos-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;插入失败，下标问题\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    DoubleLinkL s &lt;/span&gt;= (DoubleLinkL) malloc(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(DoubleLink));
    s&lt;/span&gt;-&amp;gt;data =&lt;span&gt; e;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (p-&amp;gt;next ==&lt;span&gt; NULL) {
        s&lt;/span&gt;-&amp;gt;next = p-&amp;gt;&lt;span&gt;next;
        s&lt;/span&gt;-&amp;gt;prior =&lt;span&gt; p;
        p&lt;/span&gt;-&amp;gt;next =&lt;span&gt; s;
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        s&lt;/span&gt;-&amp;gt;next = p-&amp;gt;&lt;span&gt;next;
        s&lt;/span&gt;-&amp;gt;prior =&lt;span&gt; p;
        p&lt;/span&gt;-&amp;gt;next =&lt;span&gt; s;
        s&lt;/span&gt;-&amp;gt;next-&amp;gt;prior =&lt;span&gt; s;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;删除图解&lt;/h2&gt;
&lt;p&gt;对于删除比较简单，在前后都有结点的情况下，如图一，如果本来只要一个结点，前面是首结点的情况下，直接把首结点的next指向NULL即可。（本人画图不怎么样不要在意）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1258190/201810/1258190-20181006214603374-1595974855.png&quot; alt=&quot;&quot; width=&quot;536&quot; height=&quot;122&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
p-&amp;gt;next-&amp;gt;next-&amp;gt;prior=p;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一定要写在该位置。&lt;/span&gt;
p-&amp;gt;next=p-&amp;gt;next-&amp;gt;next;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果首结点后只有一个结点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
p-&amp;gt;next=NULL;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除全部代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; deleteLink(DoubleLinkL &amp;amp;L,&lt;span&gt;int&lt;/span&gt; pos,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; e){
    DoubleLinkL p &lt;/span&gt;=&lt;span&gt; L;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (p &amp;amp;&amp;amp; i &amp;lt; pos-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        p &lt;/span&gt;= p-&amp;gt;&lt;span&gt;next;
        i&lt;/span&gt;++&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!p || i &amp;gt; pos-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;插入失败，下标问题\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(p-&amp;gt;next==&lt;span&gt;NULL){
        p&lt;/span&gt;-&amp;gt;next=&lt;span&gt;NULL;
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        p&lt;/span&gt;-&amp;gt;next-&amp;gt;next-&amp;gt;prior=p;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;一定要写在该位置。&lt;/span&gt;
        p-&amp;gt;next=p-&amp;gt;next-&amp;gt;&lt;span&gt;next;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;修改和查找&lt;/h2&gt;
&lt;p&gt;这个修改和查找是比较简单的，直接找到知道该结点修改就完事了，干就对了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;int&lt;/span&gt; getElem(DoubleLinkL L,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; pos){
     DoubleLinkL p &lt;/span&gt;=&lt;span&gt; L;
     &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
     &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (p &amp;amp;&amp;amp; i &amp;lt;&lt;span&gt; pos) {
         p &lt;/span&gt;= p-&amp;gt;&lt;span&gt;next;
         i&lt;/span&gt;++&lt;span&gt;;
     }
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!p || i &amp;gt;&lt;span&gt; pos) {
         printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查找失败，下标问题\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
     }
     printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查找的数据：%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,p-&amp;gt;&lt;span&gt;data);
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
 }
 &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; updataLink(DoubleLinkL &amp;amp;L,&lt;span&gt;int&lt;/span&gt; pos,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; e){
     DoubleLinkL p &lt;/span&gt;=&lt;span&gt; L;
     &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
     &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (p &amp;amp;&amp;amp; i &amp;lt;&lt;span&gt; pos) {
         p &lt;/span&gt;= p-&amp;gt;&lt;span&gt;next;
         i&lt;/span&gt;++&lt;span&gt;;
     }
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!p || i &amp;gt;&lt;span&gt; pos) {
         printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改失败，下标问题\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
     }
     p&lt;/span&gt;-&amp;gt;data=&lt;span&gt;e;
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;总结：双向链表主要是插入和删除复杂点，其他的和单链表都差不多，双向链表存在着4条指向线先后顺序，如果连接顺序不正确，断开后的数据就会丢失。&lt;/h3&gt;
&lt;h3&gt;完&lt;/h3&gt;

</description>
<pubDate>Sat, 06 Oct 2018 13:56:00 +0000</pubDate>
<dc:creator>CMusketeer</dc:creator>
<og:description>PS：前面已经说过线性表的两种表现形式，一种是顺序，另一种是链式，链式的一种普通表现形式就是加入一个指针，前一个的指针指向后一个结点的地址，那么还有一种形式就是双向链表，里面又加上了一个指针变量，让前</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmusketeer/p/9748719.html</dc:identifier>
</item>
</channel>
</rss>