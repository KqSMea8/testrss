<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>RxJava2 入门详细笔记 - 叶应是叶</title>
<link>http://www.cnblogs.com/leavesC/p/9749155.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leavesC/p/9749155.html</guid>
<description>&lt;h3 id=&quot;一概述&quot;&gt;一、概述&lt;/h3&gt;
&lt;p&gt;在 RxJava 中，一个实现了 &lt;code&gt;Observer&lt;/code&gt; 接口的对象可以订阅一个 &lt;code&gt;Observable&lt;/code&gt; 类的实例。订阅者对 &lt;code&gt;Observable&lt;/code&gt; 发射的任何数据或数据序列作出响应。这种模式简化了并发操作，因为它不需要阻塞等待 &lt;code&gt;Observable&lt;/code&gt; 发射数据，而是创建了一个处于待命状态的观察者哨兵，哨兵在未来某个时刻响应 &lt;code&gt;Observable&lt;/code&gt; 的通知。RxJava 提供了一套异步编程的 API，并且支持链式调用，所以使用 RxJava 编写的代码的逻辑会非常简洁&lt;/p&gt;
&lt;p&gt;RxJava 有以下三个最基本的元素：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;被观察者（Observable）&lt;/li&gt;
&lt;li&gt;观察者（Observer）&lt;/li&gt;
&lt;li&gt;订阅（subscribe）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;创建被观察者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable&amp;lt;Integer&amp;gt; observable = Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) {
                Log.e(TAG, &quot;subscribe&quot;);
                Log.e(TAG, &quot;currentThread name: &quot; + Thread.currentThread().getName());
                e.onNext(1);
                e.onNext(2);
                e.onNext(3);
                e.onComplete();
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建观察者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observer&amp;lt;Integer&amp;gt; observer = new Observer&amp;lt;Integer&amp;gt;() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext: &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError: &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        };&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完成观察者与被观察者之间的订阅关系&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;     observable.subscribe(observer);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以以链式调用的方式来完成订阅&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) {
                Log.e(TAG, &quot;subscribe&quot;);
                Log.e(TAG, &quot;currentThread name: &quot; + Thread.currentThread().getName());
                e.onNext(1);
                e.onNext(2);
                e.onNext(3);
                e.onComplete();
            }
        }).subscribe(new Observer&amp;lt;Integer&amp;gt;() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext: &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError: &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最终的输出结果是一样的&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    onSubscribe
    subscribe
    currentThread name: main
    onNext: 1
    onNext: 2
    onNext: 3
    onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;被观察者发送的事件类型有以下几种&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;onNext()&lt;/td&gt;
&lt;td&gt;发送该事件时，观察者会回调 onNext() 方法&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;onError()&lt;/td&gt;
&lt;td&gt;发送该事件时，观察者会回调 onError() 方法，当发送该事件之后，其他事件将不会继续发送&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;onComplete()&lt;/td&gt;
&lt;td&gt;发送该事件时，观察者会回调 onComplete() 方法，当发送该事件之后，其他事件将不会继续发送&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;下面来讲解 RxJava 中各种常见的操作符&lt;/p&gt;
&lt;h3 id=&quot;二创建操作符&quot;&gt;二、创建操作符&lt;/h3&gt;
&lt;h4 id=&quot;create&quot;&gt;2.1、create()&lt;/h4&gt;
&lt;p&gt;用于创建一个 &lt;code&gt;Observable&lt;/code&gt;。一个正确的 &lt;code&gt;Observable&lt;/code&gt; 必须尝试调用观察者的 &lt;code&gt;onCompleted&lt;/code&gt; 方法或者 &lt;code&gt;onError&lt;/code&gt; 方法&lt;strong&gt;有且仅有一次&lt;/strong&gt;，而且此后不能再调用&lt;code&gt;Observable&lt;/code&gt; 的任何其它方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable&amp;lt;Integer&amp;gt; observable = Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) {
                Log.e(TAG, &quot;subscribe&quot;);
                Log.e(TAG, &quot;currentThread name: &quot; + Thread.currentThread().getName());
                e.onNext(1);
                e.onNext(2);
                e.onNext(3);
                e.onComplete();
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;just&quot;&gt;2.2、just()&lt;/h4&gt;
&lt;p&gt;创建一个 &lt;code&gt;Observable&lt;/code&gt;并发送事件，发送的事件总数不可以超出十个&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3).subscribe(new Observer&amp;lt;Integer&amp;gt;() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext: &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError: &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    onSubscribe
    onNext: 1
    onNext: 2
    onNext: 3
    onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;fromarray&quot;&gt;2.3、fromArray&lt;/h4&gt;
&lt;p&gt;和 &lt;code&gt;just()&lt;/code&gt; 类似，但 &lt;code&gt;fromArray&lt;/code&gt; 可以传入多于十个的变量，并且可以传入一个数组&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Integer[] arrays = new Integer[]{1, 2, 3};
        Observable.fromArray(arrays).subscribe(new Observer&amp;lt;Integer&amp;gt;() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext: &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError: &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;fromcallable&quot;&gt;2.4、fromCallable&lt;/h4&gt;
&lt;p&gt;这里的 &lt;code&gt;Callable&lt;/code&gt; 是指 &lt;code&gt;java.util.concurrent&lt;/code&gt; 中的 &lt;code&gt;Callable&lt;/code&gt;，&lt;code&gt;Callable&lt;/code&gt; 和 &lt;code&gt;Runnable&lt;/code&gt; 的用法基本一致，只是它包含一个返回值，这个结果值就是发给观察者的&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.fromCallable(new Callable&amp;lt;Integer&amp;gt;() {
            @Override
            public Integer call() {
                return 100;
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;fromfuture&quot;&gt;2.5、fromFuture&lt;/h4&gt;
&lt;p&gt;这里的 &lt;code&gt;Future&lt;/code&gt; 是指 &lt;code&gt;java.util.concurrent&lt;/code&gt; 中的 &lt;code&gt;Future&lt;/code&gt;，&lt;code&gt;Future&lt;/code&gt; 的作用是增加了 &lt;code&gt;cancel()&lt;/code&gt; 等方法操作 &lt;code&gt;Callable&lt;/code&gt;，它可以通过 &lt;code&gt;get()&lt;/code&gt; 方法来获取 &lt;code&gt;Callable&lt;/code&gt; 返回的值&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        final FutureTask&amp;lt;Integer&amp;gt; futureTask = new FutureTask&amp;lt;&amp;gt;(new Callable&amp;lt;Integer&amp;gt;() {
            @Override
            public Integer call() {
                return 12;
            }
        });
        Observable.fromFuture(futureTask).doOnSubscribe(new Consumer&amp;lt;Disposable&amp;gt;() {
            @Override
            public void accept(Disposable disposable) {
                futureTask.run();
            }
        }).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) {
                Log.e(TAG, &quot;accept: &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;fromiterable&quot;&gt;2.6、fromIterable()&lt;/h4&gt;
&lt;p&gt;用于发送一个 &lt;code&gt;List&lt;/code&gt; 集合数据给观察者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        List&amp;lt;Integer&amp;gt; integerList = new ArrayList&amp;lt;&amp;gt;();
        integerList.add(1);
        integerList.add(2);
        integerList.add(3);
        Observable.fromIterable(integerList).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) {
                Log.e(TAG, &quot;accept: &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;defer&quot;&gt;2.7、defer()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; 操作符会一直等待直到有观察者订阅它，然后它使用 &lt;code&gt;Observable&lt;/code&gt; 工厂方法生成一个 &lt;code&gt;Observable&lt;/code&gt;。它对每个观察者都这样做，因此尽管每个订阅者都以为自己订阅的是同一个 &lt;code&gt;Observable&lt;/code&gt; ，实际上每个订阅者获取到的都是它们自己的单独的数据序列。在某些情况下，直到发生订阅时才生成 &lt;code&gt;Observable&lt;/code&gt; 可以确保 &lt;code&gt;Observable&lt;/code&gt; 包含最新的数据&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    //全局变量
    private Integer value = 100;

    Observable&amp;lt;Integer&amp;gt; observable = Observable.defer(new Callable&amp;lt;ObservableSource&amp;lt;? extends Integer&amp;gt;&amp;gt;() {
            @Override
            public ObservableSource&amp;lt;? extends Integer&amp;gt; call() {
                return Observable.just(value);
            }
        });
        value = 200;
        observable.subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) {
                Log.e(TAG, &quot;accept: &quot; + integer);
            }
        });
        value = 300;
        observable.subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) {
                Log.e(TAG, &quot;accept: &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    accept: 200
    accept: 300&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;defer()&lt;/code&gt; 操作符能使得每次订阅操作都创建被观察者，因此两次订阅操作会创建不同的被观察者对象，因此两次打印操作返回的值并不一样&lt;/p&gt;
&lt;h4 id=&quot;timer&quot;&gt;2.8、timer()&lt;/h4&gt;
&lt;p&gt;延迟指定时间后会发送一个大小为 &lt;code&gt;0L&lt;/code&gt; 的值给观察者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;       Observable.timer(2, TimeUnit.SECONDS)
           .subscribe(new Consumer&amp;lt;Long&amp;gt;() {
               @Override
               public void accept(Long aLong) {

               }
           });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;interval&quot;&gt;2.9、interval()&lt;/h4&gt;
&lt;p&gt;每隔一段时间就发送一个事件，传递的值从 0 开始并不断增 1&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    Observable.interval(2, TimeUnit.SECONDS)
        .subscribe(new Consumer&amp;lt;Long&amp;gt;() {
            @Override
            public void accept(Long aLong) {
                Log.e(TAG, &quot;value is: &quot; + aLong);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;intervalrange&quot;&gt;2.10、intervalRange()&lt;/h4&gt;
&lt;p&gt;可以指定发送事件的开始值和数量，其他与 &lt;code&gt;interval()&lt;/code&gt; 的功能一样&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;            Observable.intervalRange(2, 3, 4, 5, TimeUnit.SECONDS)
                .subscribe(new Observer&amp;lt;Long&amp;gt;() {
                    @Override
                    public void onSubscribe(Disposable d) {
                        Log.e(TAG, &quot;onSubscribe&quot;);
                    }

                    @Override
                    public void onNext(Long aLong) {
                        Log.e(TAG, &quot;onNext：&quot; + aLong);
                    }

                    @Override
                    public void onError(Throwable e) {
                        Log.e(TAG, &quot;onError: &quot; + e.getMessage());
                    }

                    @Override
                    public void onComplete() {
                        Log.e(TAG, &quot;onComplete&quot;);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;起始值从 2 开始递增，事件共传递三次，第一次事件在订阅后延迟 4 秒触发，之后每次延迟 5 秒&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 10:48:40.017 17976-17976/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 10:48:44.017 17976-17990/leavesc.hello.rxjavademo E/MainActivity: onNext：2
10-06 10:48:49.017 17976-17990/leavesc.hello.rxjavademo E/MainActivity: onNext：3
10-06 10:48:54.017 17976-17990/leavesc.hello.rxjavademo E/MainActivity: onNext：4
10-06 10:48:54.017 17976-17990/leavesc.hello.rxjavademo E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;range&quot;&gt;2.11、range()&lt;/h4&gt;
&lt;p&gt;发送指定范围的事件序列&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;            Observable.range(2, 5)
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer integer) {
                        Log.e(TAG, &quot;values is :&quot; + integer);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    values is :2
    values is :3
    values is :4
    values is :5
    values is :6&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;rangelong&quot;&gt;2.12、rangeLong()&lt;/h4&gt;
&lt;p&gt;作用与 &lt;code&gt;range()&lt;/code&gt; 一样，只是数据类型是 &lt;code&gt;Long&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;             Observable.rangeLong((2, 5)
                .subscribe(new Consumer&amp;lt;Long&amp;gt;() {
                    @Override
                    public void accept(Long aLong) {
                        Log.e(TAG, &quot;values is :&quot; + aLong);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;empty-never-error&quot;&gt;2.13、empty() &amp;amp; never() &amp;amp; error()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;empty()&lt;/code&gt; 直接发送 &lt;code&gt;onComplete()&lt;/code&gt; 事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.empty().subscribe(new Observer&amp;lt;Object&amp;gt;() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Object object) {
                Log.e(TAG, &quot;onNext: &quot; + object);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError: &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打印结果&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    onSubscribe
    onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;换成 &lt;code&gt;never()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;onSubscribe&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;换成 &lt;code&gt;error()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.error(new Throwable(&quot;Hello&quot;)).subscribe(new Observer&amp;lt;Object&amp;gt;() {
            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Object object) {
                Log.e(TAG, &quot;onNext: &quot; + object);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError: &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    onSubscribe
    onError: Hello&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;三转换操作符&quot;&gt;三、转换操作符&lt;/h3&gt;
&lt;h4 id=&quot;map&quot;&gt;3.1、map()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt; 用于将被观察者发送的数据类型转变成其他的类型&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    Observable.just(1, 2, 3)
        .map(new Function&amp;lt;Integer, String&amp;gt;() {
            @Override
            public String apply(Integer integer) {
                return &quot;I'm &quot; + integer;
            }
        })
        .subscribe(new Consumer&amp;lt;String&amp;gt;() {
            @Override
            public void accept(String s) {
                Log.e(TAG, s);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 10:53:16.364 18099-18099/leavesc.hello.rxjavademo E/MainActivity: I'm 1
10-06 10:53:16.364 18099-18099/leavesc.hello.rxjavademo E/MainActivity: I'm 2
10-06 10:53:16.364 18099-18099/leavesc.hello.rxjavademo E/MainActivity: I'm 3&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;flatmap&quot;&gt;3.2、flatMap()&lt;/h4&gt;
&lt;p&gt;用于将事件序列中的元素进行整合加工，返回一个新的被观察者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; listArrayList = new ArrayList&amp;lt;&amp;gt;();

        List&amp;lt;String&amp;gt; stringList = new ArrayList&amp;lt;&amp;gt;();
        for (int j = 0; j &amp;lt; 2; j++) {
            stringList.add(&quot;A_&quot; + j);
        }
        listArrayList.add(stringList);

        stringList = new ArrayList&amp;lt;&amp;gt;();
        for (int j = 0; j &amp;lt; 2; j++) {
            stringList.add(&quot;B_&quot; + j);
        }
        listArrayList.add(stringList);

        Observable.fromIterable(listArrayList).flatMap(new Function&amp;lt;List&amp;lt;String&amp;gt;, ObservableSource&amp;lt;String&amp;gt;&amp;gt;() {
            @Override
            public ObservableSource&amp;lt;String&amp;gt; apply(List&amp;lt;String&amp;gt; stringList1) throws Exception {
                return Observable.fromIterable(stringList1);
            }
        }).subscribe(new Consumer&amp;lt;String&amp;gt;() {
            @Override
            public void accept(String s) throws Exception {
                Log.e(TAG, &quot;value is: &quot; + s);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 11:02:47.246 18230-18230/leavesc.hello.rxjavademo E/MainActivity: value is: A_0
10-06 11:02:47.246 18230-18230/leavesc.hello.rxjavademo E/MainActivity: value is: A_1
10-06 11:02:47.246 18230-18230/leavesc.hello.rxjavademo E/MainActivity: value is: B_0
10-06 11:02:47.246 18230-18230/leavesc.hello.rxjavademo E/MainActivity: value is: B_1&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;concatmap&quot;&gt;3.3、concatMap()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;concatMap()&lt;/code&gt; 和 &lt;code&gt;flatMap()&lt;/code&gt; 基本一样，只不过 &lt;code&gt;concatMap()&lt;/code&gt; 转发出来的事件是有序的，而 &lt;code&gt;flatMap()&lt;/code&gt; 是无序的&lt;/p&gt;
&lt;p&gt;还是用 &lt;code&gt;flatMap()&lt;/code&gt;的例子来看&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.fromIterable(listArrayList).flatMap(new Function&amp;lt;List&amp;lt;String&amp;gt;, ObservableSource&amp;lt;String&amp;gt;&amp;gt;() {
            @Override
            public ObservableSource&amp;lt;String&amp;gt; apply(List&amp;lt;String&amp;gt; stringList1) throws Exception {
                if (stringList1.get(0).startsWith(&quot;A&quot;)) {
                    return Observable.fromIterable(stringList1).delay(200, TimeUnit.MILLISECONDS);
                }
                return Observable.fromIterable(stringList1);
            }
        }).subscribe(new Consumer&amp;lt;String&amp;gt;() {
            @Override
            public void accept(String s) throws Exception {
                Log.e(TAG, &quot;value is: &quot; + s);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;进行了一次延时操作，可以看到两次事件的发送顺序颠倒了&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 11:07:30.753 18702-18702/leavesc.hello.rxjavademo E/MainActivity: value is: B_0
10-06 11:07:30.753 18702-18702/leavesc.hello.rxjavademo E/MainActivity: value is: B_1
10-06 11:07:30.953 18702-18716/leavesc.hello.rxjavademo E/MainActivity: value is: A_0
10-06 11:07:30.953 18702-18716/leavesc.hello.rxjavademo E/MainActivity: value is: A_1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;concatMap()&lt;/code&gt; 则顺序将保持一致&lt;/p&gt;
&lt;h4 id=&quot;buffer&quot;&gt;3.4、buffer()&lt;/h4&gt;
&lt;p&gt;从需要发送的事件当中获取指定数量的事件，并将这些事件放到缓冲区当中一并发出。&lt;code&gt;buffer&lt;/code&gt; 有两个参数，参数一&lt;code&gt;count&lt;/code&gt;用于指点缓冲区大小，参数二 &lt;code&gt;skip&lt;/code&gt;用指定当缓冲区满了时，发送下一次事件序列的时候要跳过多少元素&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;            Observable.just(1, 2, 3, 4, 5, 6)
                .buffer(2, 2)
                .subscribe(new Observer&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;() {
                    @Override
                    public void onSubscribe(Disposable d) {
                        Log.e(TAG, &quot;onSubscribe&quot;);
                    }

                    @Override
                    public void onNext(List&amp;lt;Integer&amp;gt; integers) {
                        Log.e(TAG, &quot;缓冲区大小： &quot; + integers.size());
                        for (Integer i : integers) {
                            Log.e(TAG, &quot;元素： &quot; + i);
                        }
                    }

                    @Override
                    public void onError(Throwable e) {
                        Log.e(TAG, &quot;onError: &quot; + e.getMessage());
                    }

                    @Override
                    public void onComplete() {
                        Log.e(TAG, &quot;onComplete&quot;);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt; onSubscribe
 缓冲区大小： 2
 元素： 1
 元素： 2
 缓冲区大小： 2
 元素： 3
 元素： 4
 缓冲区大小： 2
 元素： 5
 元素： 6
 onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;groupby&quot;&gt;3.5、groupBy()&lt;/h4&gt;
&lt;p&gt;用于将数据进行分组，每个分组都会返回一个被观察者。&lt;code&gt;groupBy()&lt;/code&gt; 方法的返回值用于指定分组名，每返回一个新值就代表会创建一个分组&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;            Observable.just(1, 2, 3, 4, 5, 6, 7)
                .groupBy(new Function&amp;lt;Integer, String&amp;gt;() {
                    @Override
                    public String apply(Integer integer) {
                        if (integer &amp;lt; 4) {
                            return &quot;hello&quot;;
                        }
                        return &quot;hi&quot;;
                    }
                })
                .subscribe(new Observer&amp;lt;GroupedObservable&amp;lt;String, Integer&amp;gt;&amp;gt;() {
                    @Override
                    public void onSubscribe(Disposable d) {
                        Log.e(TAG, &quot;onSubscribe&quot;);
                    }

                    @Override
                    public void onNext(final GroupedObservable&amp;lt;String, Integer&amp;gt; observable) {
                        observable.subscribe(new Observer&amp;lt;Integer&amp;gt;() {
                            @Override
                            public void onSubscribe(Disposable d) {
                                Log.e(TAG, &quot;GroupedObservable onSubscribe&quot;);
                            }

                            @Override
                            public void onNext(Integer integer) {
                                Log.e(TAG, &quot;GroupedObservable onNext key :&quot; + observable.getKey());
                                Log.e(TAG, &quot;GroupedObservable onNext value :&quot; + integer);
                            }

                            @Override
                            public void onError(Throwable e) {
                                Log.e(TAG, &quot;GroupedObservable onError&quot;);
                            }

                            @Override
                            public void onComplete() {
                                Log.e(TAG, &quot;GroupedObservable onComplete&quot;);
                            }
                        });
                    }

                    @Override
                    public void onError(Throwable e) {
                        Log.e(TAG, &quot;onError&quot;);
                    }

                    @Override
                    public void onComplete() {
                        Log.e(TAG, &quot;onComplete&quot;);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 11:16:35.616 19015-19015/? E/MainActivity: onSubscribe
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onSubscribe
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext key :hello
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext value :1
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext key :hello
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext value :2
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext key :hello
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext value :3
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onSubscribe
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext key :hi
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext value :4
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext key :hi
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext value :5
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext key :hi
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext value :6
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext key :hi
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onNext value :7
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onComplete
10-06 11:16:35.616 19015-19015/? E/MainActivity: GroupedObservable onComplete
10-06 11:16:35.616 19015-19015/? E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;scan&quot;&gt;3.6、scan()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;scan()&lt;/code&gt; 操作符对原始 &lt;code&gt;Observable&lt;/code&gt; 发射的第一条数据应用一个函数，然后将那个函数的结果作为自己的第一项数据发射。它将函数的结果同第二项数据一起填充给这个函数来产生它自己的第二项数据。它持续进行这个过程来产生剩余的数据序列&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 5, 8, 12).scan(new BiFunction&amp;lt;Integer, Integer, Integer&amp;gt;() {
            @Override
            public Integer apply(Integer integer, Integer integer2) {
                Log.e(TAG, &quot;integer : &quot; + integer);
                Log.e(TAG, &quot;integer2 : &quot; + integer2);
                return integer + integer2;
            }
        }).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 11:25:19.389 19158-19158/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 11:25:19.389 19158-19158/leavesc.hello.rxjavademo E/MainActivity: integer : 1
10-06 11:25:19.389 19158-19158/leavesc.hello.rxjavademo E/MainActivity: integer2 : 5
10-06 11:25:19.399 19158-19158/leavesc.hello.rxjavademo E/MainActivity: accept : 6
10-06 11:25:19.399 19158-19158/leavesc.hello.rxjavademo E/MainActivity: integer : 6
10-06 11:25:19.399 19158-19158/leavesc.hello.rxjavademo E/MainActivity: integer2 : 8
10-06 11:25:19.399 19158-19158/leavesc.hello.rxjavademo E/MainActivity: accept : 14
10-06 11:25:19.399 19158-19158/leavesc.hello.rxjavademo E/MainActivity: integer : 14
10-06 11:25:19.409 19158-19158/leavesc.hello.rxjavademo E/MainActivity: integer2 : 12
10-06 11:25:19.409 19158-19158/leavesc.hello.rxjavademo E/MainActivity: accept : 26&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;四组合操作符&quot;&gt;四、组合操作符&lt;/h3&gt;
&lt;h4 id=&quot;concat-concatarray&quot;&gt;4.1、concat() &amp;amp; concatArray()&lt;/h4&gt;
&lt;p&gt;用于将多个观察者组合在一起，然后按照参数的传入顺序发送事件，&lt;code&gt;concat()&lt;/code&gt; 最多只可以发送4个事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.concat(Observable.just(1, 2),
                Observable.just(3, 4),
                Observable.just(5, 6),
                Observable.just(7, 8)).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept: &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;accept: 1
accept: 2
accept: 3
accept: 4
accept: 5
accept: 6
accept: 7
accept: 8&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;concatArray()&lt;/code&gt; 作用与 &lt;code&gt;concat()&lt;/code&gt; 作用一样，不过前者可以发送多于 4 个的被观察者&lt;/p&gt;
&lt;h4 id=&quot;merge-mergearray&quot;&gt;4.2、merge() &amp;amp; mergeArray()&lt;/h4&gt;
&lt;p&gt;这个方法与 &lt;code&gt;concat()&lt;/code&gt; 作用基本一样，只是 &lt;code&gt;concat()&lt;/code&gt; 是串行发送事件，而 &lt;code&gt;merge()&lt;/code&gt; 并行发送事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    Observable.merge(Observable.interval(1, TimeUnit.SECONDS).map(new Function&amp;lt;Long, String&amp;gt;() {
                    @Override
                    public String apply(Long aLong) {
                        return &quot;Test_A_&quot; + aLong;
                    }
                }),
                Observable.interval(1, TimeUnit.SECONDS).map(new Function&amp;lt;Long, String&amp;gt;() {
                    @Override
                    public String apply(Long aLong) {
                        return &quot;Test_B_&quot; + aLong;
                    }
                })).subscribe(new Consumer&amp;lt;String&amp;gt;() {
            @Override
            public void accept(String s) {
                Log.e(TAG, &quot;accept: &quot; + s);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Test_A_0
Test_B_0
Test_A_1
Test_B_1
Test_A_2
Test_B_2
Test_B_3
Test_A_3
Test_A_4
Test_B_4
Test_A_5
Test_B_5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mergeArray()&lt;/code&gt; 可以发送 4 个以上的被观察者&lt;/p&gt;
&lt;h4 id=&quot;concatarraydelayerror-mergearraydelayerror&quot;&gt;4.3、concatArrayDelayError() &amp;amp; mergeArrayDelayError()&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;concatArray()&lt;/code&gt; 和 &lt;code&gt;mergeArray()&lt;/code&gt; 两个方法当中，如果其中有一个被观察者发送了一个 &lt;code&gt;Error&lt;/code&gt; 事件，那么就会停止发送事件，如果想 &lt;code&gt;onError()&lt;/code&gt; 事件延迟到所有被观察者都发送完事件后再执行的话，可以使用 &lt;code&gt;concatArrayDelayError()&lt;/code&gt; 和 &lt;code&gt;mergeArrayDelayError()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先使用 &lt;code&gt;concatArray()&lt;/code&gt; 来验证其发送 &lt;code&gt;onError()&lt;/code&gt; 事件是否会中断其他被观察者的发送事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.concatArray(Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onError(new Exception(&quot;Normal Exception&quot;));
            }
        }), Observable.just(30, 40, 50)).subscribe(new Observer&amp;lt;Integer&amp;gt;() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext: &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError: &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {

            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;onNext: 1
onNext: 2
onError: Normal Exception&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从结果可以知道，确实中断了，现在换用 &lt;code&gt;concatArrayDelayError()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 04:00:04.935 6514-6514/? E/MainActivity: onNext: 1
10-06 04:00:04.935 6514-6514/? E/MainActivity: onNext: 2
10-06 04:00:04.935 6514-6514/? E/MainActivity: onNext: 30
10-06 04:00:04.935 6514-6514/? E/MainActivity: onNext: 40
10-06 04:00:04.935 6514-6514/? E/MainActivity: onNext: 50
10-06 04:00:04.935 6514-6514/? E/MainActivity: onError: Normal Exception&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从结果可以看到，&lt;code&gt;onError&lt;/code&gt; 事件是在所有被观察者发送完事件才发送的&lt;/p&gt;
&lt;h4 id=&quot;zip&quot;&gt;4.4、zip()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;zip()&lt;/code&gt; 操作符返回一个 &lt;code&gt;Obversable&lt;/code&gt;，它使用这个函数按顺序结合两个或多个 Observables 发射的数据项，然后它发射这个函数返回的结果。它按照严格的顺序应用这个函数。它只发射与发射数据项最少的那个 Observable 一样多的数据&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.zip(Observable.just(1, 2, 3, 4), Observable.just(5, 6, 7, 8, 9),
                new BiFunction&amp;lt;Integer, Integer, String&amp;gt;() {
                    @Override
                    public String apply(Integer integer, Integer integer2) throws Exception {
                        return String.valueOf(integer) + &quot;_&quot; + String.valueOf(integer2);
                    }
                })
                .subscribe(new Consumer&amp;lt;String&amp;gt;() {
                    @Override
                    public void accept(String s) throws Exception {
                        Log.e(TAG, &quot;accept: &quot; + s);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;accept: 1_5
accept: 2_6
accept: 3_7
accept: 4_8&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;combinelatest-combinelatestdelayerror&quot;&gt;4.5、combineLatest() &amp;amp; combineLatestDelayError()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;combineLatest()&lt;/code&gt; 的作用与 &lt;code&gt;zip()&lt;/code&gt; 类似，&lt;code&gt;combineLatest()&lt;/code&gt; 发送事件的序列是与发送的时间线有关的，当两个 &lt;code&gt;Observables&lt;/code&gt; 中的任何一个发射了一个数据时，通过一个指定的函数组合每个 &lt;code&gt;Observable&lt;/code&gt; 发射的最新数据，然后发射这个函数的结果&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.zip(
               Observable.intervalRange(1, 4, 1, 1, TimeUnit.SECONDS)
                        .map(new Function&amp;lt;Long, String&amp;gt;() {
                            @Override
                            public String apply(Long aLong) {
                                String s1 = &quot;A&quot; + aLong;
                                Log.e(TAG, &quot;A 发送的事件 &quot; + s1);
                                return s1;
                            }
                        }), Observable.intervalRange(1, 4, 2, 1, TimeUnit.SECONDS)
                        .map(new Function&amp;lt;Long, String&amp;gt;() {
                            @Override
                            public String apply(Long aLong) {
                                String s1 = &quot;B&quot; + aLong;
                                Log.e(TAG, &quot;B 发送的事件 &quot; + s1);
                                return s1;
                            }
                        }),
                new BiFunction&amp;lt;String, String, String&amp;gt;() {
                    @Override
                    public String apply(String value1, String value2) throws Exception {
                        return value1 + &quot;_&quot; + value2;
                    }
                })
                .subscribe(new Consumer&amp;lt;String&amp;gt;() {
                    @Override
                    public void accept(String s) throws Exception {
                        Log.e(TAG, &quot;accept: &quot; + s);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 05:17:06.337 7227-7241/leavesc.hello.rxjavademo E/MainActivity: A 发送的事件 A1
10-06 05:17:07.337 7227-7241/leavesc.hello.rxjavademo E/MainActivity: A 发送的事件 A2
10-06 05:17:07.337 7227-7242/leavesc.hello.rxjavademo E/MainActivity: B 发送的事件 B1
10-06 05:17:07.337 7227-7242/leavesc.hello.rxjavademo E/MainActivity: accept: A1_B1
10-06 05:17:08.337 7227-7241/leavesc.hello.rxjavademo E/MainActivity: A 发送的事件 A3
10-06 05:17:08.337 7227-7242/leavesc.hello.rxjavademo E/MainActivity: B 发送的事件 B2
10-06 05:17:08.337 7227-7242/leavesc.hello.rxjavademo E/MainActivity: accept: A2_B2
10-06 05:17:09.337 7227-7242/leavesc.hello.rxjavademo E/MainActivity: B 发送的事件 B3
10-06 05:17:09.337 7227-7242/leavesc.hello.rxjavademo E/MainActivity: accept: A3_B3
10-06 05:17:09.337 7227-7241/leavesc.hello.rxjavademo E/MainActivity: A 发送的事件 A4
10-06 05:17:10.337 7227-7242/leavesc.hello.rxjavademo E/MainActivity: B 发送的事件 B4
10-06 05:17:10.337 7227-7242/leavesc.hello.rxjavademo E/MainActivity: accept: A4_B4&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当发送 A1 和 A2 事件时，B 并没有发送任何事件，所以不会触发到 &lt;code&gt;accept&lt;/code&gt; 方法。当发送了 B1 事件之后，就会与 A 最新发送的事件 A2 结合成 A1_B2，之后的发射规则也以此类推&lt;/p&gt;
&lt;p&gt;&lt;code&gt;combineLatestDelayError()&lt;/code&gt; 多了延迟发送 &lt;code&gt;onError()&lt;/code&gt; 的功能&lt;/p&gt;
&lt;h4 id=&quot;reduce&quot;&gt;4.6、reduce()&lt;/h4&gt;
&lt;p&gt;与 &lt;code&gt;scan()&lt;/code&gt; 操作符的作用类似，也是将发送数据以一定逻辑聚合起来，区别在于 &lt;code&gt;scan()&lt;/code&gt; 每处理一次数据就会将事件发送给观察者，而 &lt;code&gt;reduce()&lt;/code&gt; 会将所有数据聚合在一起才会发送事件给观察者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.just(1, 3, 5, 7).reduce(new BiFunction&amp;lt;Integer, Integer, Integer&amp;gt;() {
            @Override
            public Integer apply(Integer integer, Integer integer2) throws Exception {
                Log.e(TAG, &quot;integer1 : &quot; + integer);
                Log.e(TAG, &quot;integer2 : &quot; + integer2);
                return integer + integer2;
            }
        }).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;integer1 : 1
integer2 : 3
integer1 : 4
integer2 : 5
integer1 : 9
integer2 : 7
accept : 16&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;collect&quot;&gt;4.7、collect()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;collect()&lt;/code&gt; 与 &lt;code&gt;reduce()&lt;/code&gt; 类似，但它的目的是收集原始 Observable 发射的所有数据到一个可变的数据结构&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.just(1, 2, 3, 4)
                .collect(new Callable&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt;() {
                    @Override
                    public ArrayList&amp;lt;Integer&amp;gt; call() throws Exception {
                        return new ArrayList&amp;lt;&amp;gt;();
                    }
                }, new BiConsumer&amp;lt;ArrayList&amp;lt;Integer&amp;gt;, Integer&amp;gt;() {
                    @Override
                    public void accept(ArrayList&amp;lt;Integer&amp;gt; integers, Integer integer) throws Exception {
                        integers.add(integer);
                    }
                })
                .subscribe(new Consumer&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt;() {
                    @Override
                    public void accept(ArrayList&amp;lt;Integer&amp;gt; integers) throws Exception {
                        Log.e(TAG, &quot;accept : &quot; + integers);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;accept : [1, 2, 3, 4]&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;startwith-startwitharray&quot;&gt;4.8、startWith() &amp;amp; startWithArray()&lt;/h4&gt;
&lt;p&gt;在发送事件之前追加事件，&lt;code&gt;startWith()&lt;/code&gt; 追加一个事件，&lt;code&gt;startWithArray()&lt;/code&gt; 可以追加多个事件，追加的事件会先发出&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(4, 5)
                .startWithArray(2, 3)
                .startWith(1)
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.e(TAG, &quot;accept : &quot; + integer);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 05:38:21.081 8033-8033/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 05:38:21.081 8033-8033/leavesc.hello.rxjavademo E/MainActivity: accept : 2
10-06 05:38:21.081 8033-8033/leavesc.hello.rxjavademo E/MainActivity: accept : 3
10-06 05:38:21.081 8033-8033/leavesc.hello.rxjavademo E/MainActivity: accept : 4
10-06 05:38:21.081 8033-8033/leavesc.hello.rxjavademo E/MainActivity: accept : 5&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;count&quot;&gt;4.9、count()&lt;/h4&gt;
&lt;p&gt;返回被观察者发送事件的数量&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3)
                .count()
                .subscribe(new Consumer&amp;lt;Long&amp;gt;() {
                    @Override
                    public void accept(Long aLong) throws Exception {
                        Log.e(TAG, &quot;aLong : &quot; + aLong);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;aLong : 3&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;五功能操作符&quot;&gt;五、功能操作符&lt;/h3&gt;
&lt;h4 id=&quot;delay&quot;&gt;5.1、delay()&lt;/h4&gt;
&lt;p&gt;延迟一段事件再发送事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3)
                .delay(3, TimeUnit.SECONDS)
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer value) throws Exception {
                        Log.e(TAG, &quot;value : &quot; + value);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;dooneach&quot;&gt;5.2、doOnEach()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; 发送一次事件之前都会回调这个方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.just(1, 2, 3)
                .doOnEach(new Consumer&amp;lt;Notification&amp;lt;Integer&amp;gt;&amp;gt;() {
                    @Override
                    public void accept(Notification&amp;lt;Integer&amp;gt; integerNotification) throws Exception {
                        Log.e(TAG, &quot;integerNotification value : &quot; + integerNotification.getValue());
                    }
                })
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer value) throws Exception {
                        Log.e(TAG, &quot;accept : &quot; + value);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 05:53:28.510 8645-8645/? E/MainActivity: integerNotification value : 1
10-06 05:53:28.510 8645-8645/? E/MainActivity: accept : 1
10-06 05:53:28.510 8645-8645/? E/MainActivity: integerNotification value : 2
10-06 05:53:28.510 8645-8645/? E/MainActivity: accept : 2
10-06 05:53:28.510 8645-8645/? E/MainActivity: integerNotification value : 3
10-06 05:53:28.510 8645-8645/? E/MainActivity: accept : 3
10-06 05:53:28.510 8645-8645/? E/MainActivity: integerNotification value : null&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;doonnext&quot;&gt;5.3、doOnNext()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; 发送 &lt;code&gt;onNext()&lt;/code&gt; 之前都会先回调这个方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.just(1, 2, 3)
                .doOnNext(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.e(TAG, &quot;doOnNext accept : &quot; + integer);
                    }
                })
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer value) throws Exception {
                        Log.e(TAG, &quot;accept : &quot; + value);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 05:55:25.618 8758-8758/leavesc.hello.rxjavademo E/MainActivity: doOnNext accept : 1
10-06 05:55:25.618 8758-8758/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 05:55:25.618 8758-8758/leavesc.hello.rxjavademo E/MainActivity: doOnNext accept : 2
10-06 05:55:25.618 8758-8758/leavesc.hello.rxjavademo E/MainActivity: accept : 2
10-06 05:55:25.618 8758-8758/leavesc.hello.rxjavademo E/MainActivity: doOnNext accept : 3
10-06 05:55:25.618 8758-8758/leavesc.hello.rxjavademo E/MainActivity: accept : 3&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;doafternext&quot;&gt;5.4、doAfterNext()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; 发送 &lt;code&gt;onNext()&lt;/code&gt; 之后都会回调这个方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.just(1, 2, 3)
                .doAfterNext(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.e(TAG, &quot;doOnNext accept : &quot; + integer);
                    }
                })
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer value) throws Exception {
                        Log.e(TAG, &quot;accept : &quot; + value);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 05:57:09.357 8872-8872/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 05:57:09.357 8872-8872/leavesc.hello.rxjavademo E/MainActivity: doOnNext accept : 1
10-06 05:57:09.357 8872-8872/leavesc.hello.rxjavademo E/MainActivity: accept : 2
10-06 05:57:09.357 8872-8872/leavesc.hello.rxjavademo E/MainActivity: doOnNext accept : 2
10-06 05:57:09.357 8872-8872/leavesc.hello.rxjavademo E/MainActivity: accept : 3
10-06 05:57:09.357 8872-8872/leavesc.hello.rxjavademo E/MainActivity: doOnNext accept : 3&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;dooncomplete&quot;&gt;5.5、doOnComplete()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; 调用 &lt;code&gt;onComplete()&lt;/code&gt; 之前都会回调这个方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.just(1, 2, 3)
                .doOnComplete(new Action() {
                    @Override
                    public void run() throws Exception {
                        Log.e(TAG, &quot;doOnComplete run()&quot;);
                    }
                })
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer value) throws Exception {
                        Log.e(TAG, &quot;accept : &quot; + value);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:08:43.688 8982-8982/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 06:08:43.688 8982-8982/leavesc.hello.rxjavademo E/MainActivity: accept : 2
10-06 06:08:43.688 8982-8982/leavesc.hello.rxjavademo E/MainActivity: accept : 3
10-06 06:08:43.688 8982-8982/leavesc.hello.rxjavademo E/MainActivity: doOnComplete run()&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;doonerror&quot;&gt;5.6、doOnError()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; 发送 &lt;code&gt;onError()&lt;/code&gt; 之前都会回调这个方法&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onError(new Exception(&quot;Normal Exception&quot;));
            }
        }).doOnError(new Consumer&amp;lt;Throwable&amp;gt;() {
            @Override
            public void accept(Throwable throwable) throws Exception {
                Log.e(TAG, &quot;doOnError accept() : &quot; + throwable.getMessage());
            }
        }).subscribe(new Observer&amp;lt;Integer&amp;gt;() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {

            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:14:17.894 9230-9230/? E/MainActivity: onNext : 1
10-06 06:14:17.894 9230-9230/? E/MainActivity: onNext : 2
10-06 06:14:17.894 9230-9230/? E/MainActivity: doOnError accept() : Normal Exception
10-06 06:14:17.894 9230-9230/? E/MainActivity: onError : Normal Exception&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;doonsubscribe&quot;&gt;5.7、doOnSubscribe()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; 发送 &lt;code&gt;onSubscribe()&lt;/code&gt; 之前会回调这个方法&lt;/p&gt;
&lt;h4 id=&quot;doondispose&quot;&gt;5.8、doOnDispose()&lt;/h4&gt;
&lt;p&gt;当调用 &lt;code&gt;Disposable&lt;/code&gt; 的 &lt;code&gt;dispose()&lt;/code&gt; 之后会回调该方法&lt;/p&gt;
&lt;h4 id=&quot;doonlifecycle&quot;&gt;5.9、doOnLifecycle()&lt;/h4&gt;
&lt;p&gt;在回调 &lt;code&gt;onSubscribe&lt;/code&gt; 之前回调该方法的第一个参数的回调方法，可以使用该回调方法决定是否取消订阅，&lt;code&gt;doOnLifecycle()&lt;/code&gt; 第二个参数的回调方法的作用与 &lt;code&gt;doOnDispose()&lt;/code&gt; 一样&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onComplete();
            }
        }).doOnLifecycle(new Consumer&amp;lt;Disposable&amp;gt;() {
            @Override
            public void accept(Disposable disposable) throws Exception {
                Log.e(TAG, &quot;doOnLifecycle accept&quot;);
            }
        }, new Action() {
            @Override
            public void run() throws Exception {
                Log.e(TAG, &quot;doOnLifecycle run&quot;);
            }
        }).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            private Disposable disposable;

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
                this.disposable = d;
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
                disposable.dispose();
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:31:45.011 9602-9602/leavesc.hello.rxjavademo E/MainActivity: doOnLifecycle accept
10-06 06:31:45.011 9602-9602/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 06:31:45.011 9602-9602/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 06:31:45.011 9602-9602/leavesc.hello.rxjavademo E/MainActivity: doOnLifecycle run&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;doonterminate-doafterterminate&quot;&gt;5.10、doOnTerminate() &amp;amp; doAfterTerminate()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;doOnTerminate&lt;/code&gt; 是在 &lt;code&gt;onError&lt;/code&gt; 或者 &lt;code&gt;onComplete&lt;/code&gt; 发送之前回调，而 &lt;code&gt;doAfterTerminate&lt;/code&gt; 则是 &lt;code&gt;onError&lt;/code&gt; 或者 &lt;code&gt;onComplete&lt;/code&gt; 发送之后回调&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onComplete();
            }
        }).doOnTerminate(new Action() {
            @Override
            public void run() throws Exception {
                Log.e(TAG, &quot;doOnTerminate run&quot;);
            }
        }).doAfterTerminate(new Action() {
            @Override
            public void run() throws Exception {
                Log.e(TAG, &quot;doAfterTerminate run&quot;);
            }
        }).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:34:55.968 9713-9713/? E/MainActivity: onSubscribe
10-06 06:34:55.968 9713-9713/? E/MainActivity: onNext : 1
10-06 06:34:55.968 9713-9713/? E/MainActivity: onNext : 2
10-06 06:34:55.968 9713-9713/? E/MainActivity: doOnTerminate run
10-06 06:34:55.968 9713-9713/? E/MainActivity: onComplete
10-06 06:34:55.968 9713-9713/? E/MainActivity: doAfterTerminate run&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;dofinally&quot;&gt;5.11、doFinally()&lt;/h4&gt;
&lt;p&gt;在所有事件发送完毕之后回调该方法。 &lt;code&gt;doFinally()&lt;/code&gt; 和 &lt;code&gt;doAfterTerminate()&lt;/code&gt; 的区别在于取消订阅时，如果取消订阅，之后 &lt;code&gt;doAfterTerminate()&lt;/code&gt; 就不会被回调，而 &lt;code&gt;doFinally()&lt;/code&gt; 无论怎么样都会被回调，且都会在事件序列的最后&lt;/p&gt;
&lt;h4 id=&quot;onerrorreturn&quot;&gt;5.12、onErrorReturn()&lt;/h4&gt;
&lt;p&gt;当接受到一个 &lt;code&gt;onError()&lt;/code&gt; 事件之后回调，返回的值会回调 &lt;code&gt;onNext()&lt;/code&gt; 方法，并正常结束该事件序列&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onError(new Exception(&quot;Normal Exception&quot;));
            }
        }).onErrorReturn(new Function&amp;lt;Throwable, Integer&amp;gt;() {
            @Override
            public Integer apply(Throwable throwable) throws Exception {
                return 7;
            }
        }).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:43:13.702 9946-9946/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 06:43:13.702 9946-9946/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 06:43:13.702 9946-9946/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 06:43:13.712 9946-9946/leavesc.hello.rxjavademo E/MainActivity: onNext : 7
10-06 06:43:13.712 9946-9946/leavesc.hello.rxjavademo E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;onerrorresumenext&quot;&gt;5.13、onErrorResumeNext()&lt;/h4&gt;
&lt;p&gt;当接收到 &lt;code&gt;onError()&lt;/code&gt; 事件时，返回一个新的 &lt;code&gt;Observable&lt;/code&gt;，并正常结束事件序列&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onError(new Exception(&quot;Normal Exception&quot;));
            }
        }).onErrorResumeNext(new Function&amp;lt;Throwable, ObservableSource&amp;lt;? extends Integer&amp;gt;&amp;gt;() {
            @Override
            public ObservableSource&amp;lt;? extends Integer&amp;gt; apply(Throwable throwable) throws Exception {
                Log.e(TAG, &quot;onErrorResumeNext apply: &quot; + throwable.getMessage());
                return Observable.just(4, 5, 6);
            }
        }).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:46:36.650 10243-10243/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 06:46:36.650 10243-10243/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 06:46:36.650 10243-10243/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 06:46:36.650 10243-10243/leavesc.hello.rxjavademo E/MainActivity: onErrorResumeNext apply: Normal Exception
10-06 06:46:36.650 10243-10243/leavesc.hello.rxjavademo E/MainActivity: onNext : 4
10-06 06:46:36.650 10243-10243/leavesc.hello.rxjavademo E/MainActivity: onNext : 5
10-06 06:46:36.650 10243-10243/leavesc.hello.rxjavademo E/MainActivity: onNext : 6
10-06 06:46:36.650 10243-10243/leavesc.hello.rxjavademo E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;onexceptionresumenext&quot;&gt;5.14、 onExceptionResumeNext()&lt;/h4&gt;
&lt;p&gt;与 &lt;code&gt;onErrorResumeNext()&lt;/code&gt; 作用基本一致，但是这个方法只能捕捉 &lt;code&gt;Exception&lt;/code&gt;，不能捕获 &lt;code&gt;Error&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
    @Override
    public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
        emitter.onNext(1);
        emitter.onNext(2);
        emitter.onError(new Exception(&quot;Normal Exception&quot;));
    }
}).onExceptionResumeNext(new Observable&amp;lt;Integer&amp;gt;() {
    @Override
    protected void subscribeActual(Observer&amp;lt;? super Integer&amp;gt; observer) {
        Log.e(TAG, &quot;onExceptionResumeNext subscribeActual&quot;);
        observer.onNext(3);
        observer.onComplete();
    }
}).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

    @Override
    public void onSubscribe(Disposable d) {
        Log.e(TAG, &quot;onSubscribe&quot;);
    }

    @Override
    public void onNext(Integer integer) {
        Log.e(TAG, &quot;onNext : &quot; + integer);
    }

    @Override
    public void onError(Throwable e) {
        Log.e(TAG, &quot;onError : &quot; + e.getMessage());
    }

    @Override
    public void onComplete() {
        Log.e(TAG, &quot;onComplete&quot;);
    }
});&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:51:49.396 10369-10369/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 06:51:49.396 10369-10369/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 06:51:49.396 10369-10369/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 06:51:49.396 10369-10369/leavesc.hello.rxjavademo E/MainActivity: onExceptionResumeNext subscribeActual
10-06 06:51:49.396 10369-10369/leavesc.hello.rxjavademo E/MainActivity: onNext : 3
10-06 06:51:49.396 10369-10369/leavesc.hello.rxjavademo E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将 &lt;code&gt;emitter.onError(new Exception(&quot;Normal Exception&quot;))&lt;/code&gt; 改为 &lt;code&gt;emitter.onError(new Error(&quot;Normal Exception&quot;));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;异常将不会被捕获&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:53:21.655 10479-10479/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 06:53:21.655 10479-10479/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 06:53:21.655 10479-10479/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 06:53:21.655 10479-10479/leavesc.hello.rxjavademo E/MainActivity: onError : Normal Exception&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;retry&quot;&gt;5.15、retry()&lt;/h4&gt;
&lt;p&gt;如果出现错误事件，则会重新发送所有事件序列指定次数&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onError(new Error(&quot;Normal Exception&quot;));
            }
        }).retry(2).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 06:55:17.273 10591-10591/? E/MainActivity: onSubscribe
10-06 06:55:17.273 10591-10591/? E/MainActivity: onNext : 1
10-06 06:55:17.273 10591-10591/? E/MainActivity: onNext : 2
10-06 06:55:17.273 10591-10591/? E/MainActivity: onNext : 1
10-06 06:55:17.273 10591-10591/? E/MainActivity: onNext : 2
10-06 06:55:17.273 10591-10591/? E/MainActivity: onNext : 1
10-06 06:55:17.273 10591-10591/? E/MainActivity: onNext : 2
10-06 06:55:17.273 10591-10591/? E/MainActivity: onError : Normal Exception&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;retryuntil&quot;&gt;5.16、retryUntil()&lt;/h4&gt;
&lt;p&gt;出现错误事件之后，可以通过此方法判断是否继续发送事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    private int index = 1;

Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onError(new Exception(&quot;Normal Exception&quot;));
            }
        }).retryUntil(new BooleanSupplier() {
            @Override
            public boolean getAsBoolean() throws Exception {
                Log.e(TAG, &quot;getAsBoolean&quot;);
                return index == 7;
            }
        }).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
                index++;
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: getAsBoolean
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: getAsBoolean
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: getAsBoolean
10-06 07:19:07.675 11433-11433/leavesc.hello.rxjavademo E/MainActivity: onError : Normal Exception&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;repeat&quot;&gt;5.17、repeat()&lt;/h4&gt;
&lt;p&gt;以指定次数重复发送被观察者的事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onComplete();
            }
        }).repeat(2).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 07:38:47.680 12155-12155/? E/MainActivity: onSubscribe
10-06 07:38:47.690 12155-12155/? E/MainActivity: onNext : 1
10-06 07:38:47.690 12155-12155/? E/MainActivity: onNext : 2
10-06 07:38:47.690 12155-12155/? E/MainActivity: onNext : 1
10-06 07:38:47.690 12155-12155/? E/MainActivity: onNext : 2
10-06 07:38:47.690 12155-12155/? E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;repeatwhen&quot;&gt;5.18、repeatWhen()&lt;/h4&gt;
&lt;p&gt;返回一个新的被观察者来决定是否重复发送事件。如果新的被观察者返回 &lt;code&gt;onComplete&lt;/code&gt; 或者 &lt;code&gt;onError&lt;/code&gt; 事件，则旧的被观察者不会发送事件。如果新的被观察者返回其他事件，则旧的观察者会发送事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; e) throws Exception {
                e.onNext(1);
                e.onNext(2);
                e.onNext(3);
                e.onComplete();
            }
        }).repeatWhen(new Function&amp;lt;Observable&amp;lt;Object&amp;gt;, ObservableSource&amp;lt;?&amp;gt;&amp;gt;() {
            @Override
            public ObservableSource&amp;lt;?&amp;gt; apply(Observable&amp;lt;Object&amp;gt; objectObservable) throws Exception {
//                return Observable.empty();
//                return Observable.error(new Exception(&quot;Normal Exception&quot;));
//                return Observable.just(1);
            }
        }).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上三种情况的输出结果分别是&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 14:29:05.641 20921-20921/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 14:29:05.641 20921-20921/leavesc.hello.rxjavademo E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 14:29:36.150 21027-21027/? E/MainActivity: onSubscribe
10-06 14:29:36.150 21027-21027/? E/MainActivity: onError : Normal Exception&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 14:30:33.220 21135-21135/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 14:30:33.220 21135-21135/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 14:30:33.220 21135-21135/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 14:30:33.220 21135-21135/leavesc.hello.rxjavademo E/MainActivity: onNext : 3
10-06 14:30:33.220 21135-21135/leavesc.hello.rxjavademo E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;subscribeon-observeon&quot;&gt;5.19、subscribeOn() &amp;amp; observeOn()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;subscribeOn()&lt;/code&gt; 用于指定被观察者的线程，要注意的时，如果多次调用此方法，只有第一次有效&lt;/p&gt;
&lt;p&gt;&lt;code&gt;observeOn()&lt;/code&gt; 用于指定观察者的线程，每指定一次就会生效一次&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                Log.e(TAG, &quot;Observable Thread Name:  &quot; + Thread.currentThread().getName());
                emitter.onNext(1);
                emitter.onNext(2);
                emitter.onComplete();
            }
        }).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer&amp;lt;Integer&amp;gt;() {

            @Override
            public void onSubscribe(Disposable d) {
                Log.e(TAG, &quot;onSubscribe&quot;);
                Log.e(TAG, &quot;Observer Thread Name:  &quot; + Thread.currentThread().getName());
            }

            @Override
            public void onNext(Integer integer) {
                Log.e(TAG, &quot;onNext : &quot; + integer);
            }

            @Override
            public void onError(Throwable e) {
                Log.e(TAG, &quot;onError : &quot; + e.getMessage());
            }

            @Override
            public void onComplete() {
                Log.e(TAG, &quot;onComplete&quot;);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 07:54:02.839 12629-12629/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 07:54:02.839 12629-12629/leavesc.hello.rxjavademo E/MainActivity: Observer Thread Name:  main
10-06 07:54:02.839 12629-12643/leavesc.hello.rxjavademo E/MainActivity: Observable Thread Name:  RxNewThreadScheduler-1
10-06 07:54:02.859 12629-12629/leavesc.hello.rxjavademo E/MainActivity: onNext : 1
10-06 07:54:02.869 12629-12629/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 07:54:02.869 12629-12629/leavesc.hello.rxjavademo E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Schedulers.computation( )&lt;/td&gt;
&lt;td&gt;用于使用计算任务，如事件循环和回调处理&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Schedulers.immediate( )&lt;/td&gt;
&lt;td&gt;当前线程&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Schedulers.io( )&lt;/td&gt;
&lt;td&gt;用于 IO 密集型任务，如果异步阻塞 IO 操作。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Schedulers.newThread( )&lt;/td&gt;
&lt;td&gt;创建一个新的线程&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;AndroidSchedulers.mainThread()&lt;/td&gt;
&lt;td&gt;Android 的 UI 线程，用于操作 UI。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;六过滤操作符&quot;&gt;六、过滤操作符&lt;/h3&gt;
&lt;h4 id=&quot;filter&quot;&gt;6.1、filter()&lt;/h4&gt;
&lt;p&gt;通过一定逻辑来过滤被观察者发送的事件，如果返回 &lt;code&gt;true&lt;/code&gt; 则会发送事件，否则不会发送&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3, 4).filter(new Predicate&amp;lt;Integer&amp;gt;() {
            @Override
            public boolean test(Integer integer) throws Exception {
                return integer % 2 == 0;
            }
        }).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 07:57:48.196 12753-12753/? E/MainActivity: accept : 2
10-06 07:57:48.196 12753-12753/? E/MainActivity: accept : 4&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;oftype&quot;&gt;6.2、ofType()&lt;/h4&gt;
&lt;p&gt;过滤不符合该类型的事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, &quot;Hi&quot;, 3, 4, &quot;Hello&quot;).ofType(Integer.class).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 07:59:41.265 12857-12857/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 07:59:41.265 12857-12857/leavesc.hello.rxjavademo E/MainActivity: accept : 2
10-06 07:59:41.265 12857-12857/leavesc.hello.rxjavademo E/MainActivity: accept : 3
10-06 07:59:41.265 12857-12857/leavesc.hello.rxjavademo E/MainActivity: accept : 4&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;skip&quot;&gt;6.3、skip()&lt;/h4&gt;
&lt;p&gt;以正序跳过指定数量的事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3, 4).skip(2).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:01:09.183 12971-12971/leavesc.hello.rxjavademo E/MainActivity: accept : 3
10-06 08:01:09.183 12971-12971/leavesc.hello.rxjavademo E/MainActivity: accept : 4&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;skiplast&quot;&gt;6.4、skipLast()&lt;/h4&gt;
&lt;p&gt;以反序跳过指定数量的事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3, 4).skipLast(2).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:02:00.753 13079-13079/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 08:02:00.753 13079-13079/leavesc.hello.rxjavademo E/MainActivity: accept : 2&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;distinct&quot;&gt;6.5、distinct()&lt;/h4&gt;
&lt;p&gt;过滤事件序列中的重复事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 1, 2, 3, 4, 3).distinct().subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:03:27.402 13189-13189/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 08:03:27.402 13189-13189/leavesc.hello.rxjavademo E/MainActivity: accept : 2
10-06 08:03:27.402 13189-13189/leavesc.hello.rxjavademo E/MainActivity: accept : 3
10-06 08:03:27.402 13189-13189/leavesc.hello.rxjavademo E/MainActivity: accept : 4&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;distinctuntilchanged&quot;&gt;6.6、distinctUntilChanged()&lt;/h4&gt;
&lt;p&gt;过滤掉连续重复的事件&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 2, 1, 3, 4, 3, 3).distinctUntilChanged().subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:04:44.531 13294-13294/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 08:04:44.541 13294-13294/leavesc.hello.rxjavademo E/MainActivity: accept : 2
10-06 08:04:44.541 13294-13294/leavesc.hello.rxjavademo E/MainActivity: accept : 1
10-06 08:04:44.541 13294-13294/leavesc.hello.rxjavademo E/MainActivity: accept : 3
10-06 08:04:44.541 13294-13294/leavesc.hello.rxjavademo E/MainActivity: accept : 4
10-06 08:04:44.541 13294-13294/leavesc.hello.rxjavademo E/MainActivity: accept : 3&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;take&quot;&gt;6.7、take()&lt;/h4&gt;
&lt;p&gt;控制观察者接收事件的数量&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 2, 1, 3, 4, 3, 3).take(3).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:05:43.520 13397-13397/? E/MainActivity: accept : 1
10-06 08:05:43.520 13397-13397/? E/MainActivity: accept : 2
10-06 08:05:43.520 13397-13397/? E/MainActivity: accept : 2&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;debounce&quot;&gt;6.8、debounce()&lt;/h4&gt;
&lt;p&gt;如果两个事件发送的时间间隔小于设定的时间间隔，则前一件事件不会发送给观察者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt; Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onNext(1);
                Thread.sleep(900);
                emitter.onNext(2);
            }
        }).debounce(1, TimeUnit.SECONDS).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:08:59.337 13509-13523/leavesc.hello.rxjavademo E/MainActivity: accept : 2&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;firstelement-lastelement&quot;&gt;6.9、firstElement() &amp;amp;&amp;amp; lastElement()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;firstElement()&lt;/code&gt; 取事件序列的第一个元素，&lt;code&gt;lastElement()&lt;/code&gt; 取事件序列的最后一个元素&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3, 4, 5).firstElement().subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;elementat-elementatorerror&quot;&gt;6.10、elementAt() &amp;amp; elementAtOrError()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;elementAt()&lt;/code&gt; 可以指定取出事件序列中事件，但是输入的 &lt;code&gt;index&lt;/code&gt; 超出事件序列的总数的话就不会触发任何调用，想触发异常信息的话就用 &lt;code&gt;elementAtOrError()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3, 4, 5).elementAt(5).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上代码不会触发任何&lt;/p&gt;
&lt;p&gt;改用为 &lt;code&gt;elementAtOrError()&lt;/code&gt;，则会抛出异常&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3, 4, 5).elementAtOrError(5).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept : &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Process: leavesc.hello.rxjavademo, PID: 13948
    io.reactivex.exceptions.OnErrorNotImplementedException: The exception was not handled due to missing onError handler in the subscribe() method call. Further reading: https://github.com/ReactiveX/RxJava/wiki/Error-Handling | null
        at io.reactivex.internal.functions.Functions$OnErrorMissingConsumer.accept(Functions.java:704)
        at io.reactivex.internal.functions.Functions$OnErrorMissingConsumer.accept(Functions.java:701)
        at io.reactivex.internal.observers.ConsumerSingleObserver.onError(ConsumerSingleObserver.java:46)
        at io.reactivex.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver.onComplete(ObservableElementAtSingle.java:115)
        at io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable.run(ObservableFromArray.java:111)
        at io.reactivex.internal.operators.observable.ObservableFromArray.subscribeActual(ObservableFromArray.java:37)
        at io.reactivex.Observable.subscribe(Observable.java:12090)
        at io.reactivex.internal.operators.observable.ObservableElementAtSingle.subscribeActual(ObservableElementAtSingle.java:37)
        at io.reactivex.Single.subscribe(Single.java:3438)
        at io.reactivex.Single.subscribe(Single.java:3424)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;七条件操作符&quot;&gt;七、条件操作符&lt;/h3&gt;
&lt;h4 id=&quot;all&quot;&gt;7.1、all()&lt;/h4&gt;
&lt;p&gt;判断事件序列是否全部满足某个事件，如果都满足则返回 &lt;code&gt;true&lt;/code&gt;，反之则返回 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3, 4, 5).all(new Predicate&amp;lt;Integer&amp;gt;() {
            @Override
            public boolean test(Integer integer) throws Exception {
                return integer % 2 == 0;
            }
        }).subscribe(new Consumer&amp;lt;Boolean&amp;gt;() {
            @Override
            public void accept(Boolean aBoolean) throws Exception {
                Log.e(TAG, &quot;accept: &quot; + aBoolean);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:16:10.212 14043-14043/leavesc.hello.rxjavademo E/MainActivity: accept: false&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;takewhile&quot;&gt;7.2、takeWhile()&lt;/h4&gt;
&lt;p&gt;发射原始 &lt;code&gt;Observable&lt;/code&gt;，直到指定的某个条件不成立的那一刻，它停止发射原始 &lt;code&gt;Observable&lt;/code&gt;，并终止自己的 &lt;code&gt;Observable&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.just(1, 2, 3, 4, 5, 1, 2).takeWhile(new Predicate&amp;lt;Integer&amp;gt;() {
            @Override
            public boolean test(Integer integer) throws Exception {
                return integer &amp;lt; 4;
            }
        }).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept: &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 14:03:42.110 20095-20095/leavesc.hello.rxjavademo E/MainActivity: accept: 1
10-06 14:03:42.110 20095-20095/leavesc.hello.rxjavademo E/MainActivity: accept: 2
10-06 14:03:42.110 20095-20095/leavesc.hello.rxjavademo E/MainActivity: accept: 3&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;skipwhile&quot;&gt;7.3、skipWhile()&lt;/h4&gt;
&lt;p&gt;订阅原始的 &lt;code&gt;Observable&lt;/code&gt;，但是忽略它的发射物，直到指定的某个条件变为 false 时才开始发射原始 Observable&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;            Observable.just(1, 2, 4, 1, 3, 4, 5, 1, 5)
                .skipWhile(new Predicate&amp;lt;Integer&amp;gt;() {
                    @Override
                    public boolean test(Integer integer) throws Exception {
                        return integer &amp;lt; 3;
                    }
                })
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.e(TAG, &quot;integer &quot; + integer);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 13:59:40.583 19764-19764/leavesc.hello.rxjavademo E/MainActivity: integer 4
10-06 13:59:40.593 19764-19764/leavesc.hello.rxjavademo E/MainActivity: integer 1
10-06 13:59:40.593 19764-19764/leavesc.hello.rxjavademo E/MainActivity: integer 3
10-06 13:59:40.593 19764-19764/leavesc.hello.rxjavademo E/MainActivity: integer 4
10-06 13:59:40.593 19764-19764/leavesc.hello.rxjavademo E/MainActivity: integer 5
10-06 13:59:40.593 19764-19764/leavesc.hello.rxjavademo E/MainActivity: integer 1
10-06 13:59:40.593 19764-19764/leavesc.hello.rxjavademo E/MainActivity: integer 5&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;takeuntil&quot;&gt;7.4、takeUntil()&lt;/h4&gt;
&lt;p&gt;用于设置一个条件，当事件满足此条件时，此事件会被发送，但之后的事件就不会被发送了&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.just(1, 2, 4, 1, 3, 4, 5, 1, 5)
                .takeUntil(new Predicate&amp;lt;Integer&amp;gt;() {
                    @Override
                    public boolean test(Integer integer) throws Exception {
                        return integer &amp;gt; 3;
                    }
                })
                .subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
                    @Override
                    public void accept(Integer integer) throws Exception {
                        Log.e(TAG, &quot;integer &quot; + integer);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:54:24.833 17208-17208/? E/MainActivity: integer 1
10-06 08:54:24.833 17208-17208/? E/MainActivity: integer 2
10-06 08:54:24.833 17208-17208/? E/MainActivity: integer 4&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;skipuntil&quot;&gt;7.5、skipUntil()&lt;/h4&gt;
&lt;p&gt;当 &lt;code&gt;skipUntil()&lt;/code&gt; 中的 &lt;code&gt;Observable&lt;/code&gt; 发送事件了，原始的 &lt;code&gt;Observable&lt;/code&gt; 才会发送事件给观察者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Observable.intervalRange(1, 6, 0, 1, TimeUnit.SECONDS)
                .skipUntil(Observable.intervalRange(10, 3, 1, 1, TimeUnit.SECONDS))
                .subscribe(new Observer&amp;lt;Long&amp;gt;() {
                    @Override
                    public void onSubscribe(Disposable d) {
                        Log.e(TAG, &quot;onSubscribe&quot;);
                    }

                    @Override
                    public void onNext(Long along) {
                        Log.e(TAG, &quot;onNext : &quot; + along);
                    }

                    @Override
                    public void onError(Throwable e) {
                        Log.e(TAG, &quot;onError&quot;);
                    }

                    @Override
                    public void onComplete() {
                        Log.e(TAG, &quot;onComplete&quot;);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:51:16.926 16877-16877/leavesc.hello.rxjavademo E/MainActivity: onSubscribe
10-06 08:51:17.946 16877-16892/leavesc.hello.rxjavademo E/MainActivity: onNext : 2
10-06 08:51:18.936 16877-16892/leavesc.hello.rxjavademo E/MainActivity: onNext : 3
10-06 08:51:19.946 16877-16892/leavesc.hello.rxjavademo E/MainActivity: onNext : 4
10-06 08:51:20.936 16877-16892/leavesc.hello.rxjavademo E/MainActivity: onNext : 5
10-06 08:51:21.946 16877-16892/leavesc.hello.rxjavademo E/MainActivity: onNext : 6
10-06 08:51:21.946 16877-16892/leavesc.hello.rxjavademo E/MainActivity: onComplete&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;sequenceequal&quot;&gt;7.6、sequenceEqual()&lt;/h4&gt;
&lt;p&gt;判断两个 &lt;code&gt;Observable&lt;/code&gt; 发送的事件是否相同，如果两个序列是相同的（相同的数据，相同的顺序，相同的终止状态），它就发射 true，否则发射 false&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.sequenceEqual(Observable.just(1, 2, 3), Observable.just(1, 2, 3))
                .subscribe(new Consumer&amp;lt;Boolean&amp;gt;() {
                    @Override
                    public void accept(Boolean aBoolean) throws Exception {
                        Log.e(TAG, &quot;accept aBoolean : &quot; + aBoolean);
                    }
                });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:46:59.369 16492-16492/leavesc.hello.rxjavademo E/MainActivity: accept aBoolean : true&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;contains&quot;&gt;7.7、contains()&lt;/h4&gt;
&lt;p&gt;判断事件序列中是否含有某个元素，如果有则返回 true，如果没有则返回 false&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.just(1, 2, 3, 4).contains(2).subscribe(new Consumer&amp;lt;Boolean&amp;gt;() {
            @Override
            public void accept(Boolean aBoolean) throws Exception {
                Log.e(TAG, &quot;accept aBoolean : &quot; + aBoolean);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:45:58.100 16386-16386/leavesc.hello.rxjavademo E/MainActivity: accept aBoolean : true&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;isempty&quot;&gt;7.8、isEmpty()&lt;/h4&gt;
&lt;p&gt;判断事件序列是否为空&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onComplete();
            }
        }).isEmpty().subscribe(new Consumer&amp;lt;Boolean&amp;gt;() {
            @Override
            public void accept(Boolean aBoolean) throws Exception {
                Log.e(TAG, &quot;accept aBoolean: &quot; + aBoolean);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:43:43.201 16278-16278/leavesc.hello.rxjavademo E/MainActivity: accept aBoolean: true&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;amb&quot;&gt;7.9、amb()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;amb()&lt;/code&gt; 接收一个 &lt;code&gt;Observable&lt;/code&gt; 集合，但是只会发送最先发送事件的 &lt;code&gt;Observable&lt;/code&gt; 中的事件，不管发射的是一项数据还是一个 &lt;code&gt;onError&lt;/code&gt; 或 &lt;code&gt;onCompleted&lt;/code&gt; 通知，其余 &lt;code&gt;Observable&lt;/code&gt; 将会被丢弃&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        List&amp;lt;Observable&amp;lt;Long&amp;gt;&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        list.add(Observable.intervalRange(1, 3, 2, 1, TimeUnit.SECONDS));
        list.add(Observable.intervalRange(10, 3, 0, 1, TimeUnit.SECONDS));
        Observable.amb(list).subscribe(new Consumer&amp;lt;Long&amp;gt;() {
            @Override
            public void accept(Long aLong) throws Exception {
                Log.e(TAG, &quot;accept: &quot; + aLong);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:41:45.783 16053-16068/leavesc.hello.rxjavademo E/MainActivity: accept: 10
10-06 08:41:46.783 16053-16068/leavesc.hello.rxjavademo E/MainActivity: accept: 11
10-06 08:41:47.783 16053-16068/leavesc.hello.rxjavademo E/MainActivity: accept: 12&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;defaultifempty&quot;&gt;7.10、defaultIfEmpty()&lt;/h4&gt;
&lt;p&gt;如果 Observable 没有发射任何值，则可以利用这个方法发送一个默认值&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;        Observable.create(new ObservableOnSubscribe&amp;lt;Integer&amp;gt;() {
            @Override
            public void subscribe(ObservableEmitter&amp;lt;Integer&amp;gt; emitter) throws Exception {
                emitter.onComplete();
            }
        }).defaultIfEmpty(100).subscribe(new Consumer&amp;lt;Integer&amp;gt;() {
            @Override
            public void accept(Integer integer) throws Exception {
                Log.e(TAG, &quot;accept: &quot; + integer);
            }
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;10-06 08:40:04.754 15945-15945/leavesc.hello.rxjavademo E/MainActivity: accept: 100&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;更多的学习笔记看这里java_android_learn&quot;&gt;更多的学习笔记看这里：&lt;a href=&quot;https://github.com/leavesC/Java_Android_Learn&quot;&gt;Java_Android_Learn&lt;/a&gt;&lt;/h3&gt;
</description>
<pubDate>Sat, 06 Oct 2018 17:03:00 +0000</pubDate>
<dc:creator>叶应是叶</dc:creator>
<og:description>一、概述 在 RxJava 中，一个实现了 接口的对象可以订阅一个 类的实例。订阅者对 发射的任何数据或数据序列作出响应。这种模式简化了并发操作，因为它不需要阻塞等待 发射数据，而是创建了一个处于待命</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leavesC/p/9749155.html</dc:identifier>
</item>
<item>
<title>Java中的设计模式（八）：建造者模式 - JaJian</title>
<link>http://www.cnblogs.com/jajian/p/9749138.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jajian/p/9749138.html</guid>
<description>&lt;p&gt;今天我们将研究java中的Builder模式。Builder 设计模式是一种创造性的设计模式，如工厂模式和抽象工厂模式。&lt;br/&gt;当Object包含许多属性时，引入了Builder模式来解决Factory和Abstract Factory设计模式的一些问题。&lt;br/&gt;当Object包含许多属性时，Factory和Abstract Factory设计模式存在三个主要问题。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;从客户端程序传递到Factory类的参数太多，可能容易出错，因为大多数情况下，参数的类型是相同的，而从客户端来说，很难维护参数的顺序。&lt;/li&gt;
&lt;li&gt;一些参数可能是可选的，但在Factory模式中，我们被迫发送所有需要发送为NULL的参数和可选参数。&lt;/li&gt;
&lt;li&gt;如果对象很重并且它的创建很复杂，那么所有这些复杂性都将成为Factory类的一部分，令人困惑。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;我们可以通过提供具有所需参数的构造函数然后使用不同的setter方法来设置可选参数来解决大量参数的问题。这种方法的问题是，除非明确设置所有属性，否则Object状态将不一致。&lt;/p&gt;
&lt;p&gt;Builder模式通过提供逐步构建对象的方法并提供实际返回最终Object的方法，解决了大量可选参数和不一致状态的问题。&lt;/p&gt;

&lt;p&gt;将复杂对象的构造与其表示分开，以便相同的构造过程可以创建不同的表示。&lt;/p&gt;

&lt;p&gt;现实世界的例子&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;想象一下角色扮演游戏的角色生成器。最简单的选择是让计算机为您创建角色。但是如果你想选择职业，性别，头发颜色等角色细节，那么角色生成将成为一个循序渐进的过程，在所有选择准备就绪时完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;允许您创建不同风格的对象，同时避免构造函数被污染。当有几种不同的构造函数时很有用。或者在创建对象时涉及很多步骤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;维基百科说&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;构建器模式是对象创建软件设计模式，其目的是找到伸缩构造器反模式的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;话虽如此，让我补充说一下伸缩构造器反模式是什么。某时某刻，我们都会看到如下构造函数：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public Hero(Profession profession, String name, HairType hairType, HairColor hairColor, Armor armor, Weapon weapon) {
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正如您所看到的，构造函数参数的数量很快就会失控，并且可能很难理解参数的排列。此外，如果您希望将来添加更多选项，此参数列表可能会继续增长。这就被称为&quot;the telescoping constructor anti-pattern&quot;(可伸缩构造器的反模式)。&lt;/p&gt;
&lt;p&gt;理智的替代方案是使用Builder模式。&lt;/p&gt;

&lt;p&gt;让我们看看如何在java中实现构建器设计模式。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先，您需要创建一个静态嵌套类，然后将所有参数从外部类复制到Builder类。我们应该遵循命名约定，如果类名是Computer那么构建器类应该命名为ComputerBuilder。&lt;/li&gt;
&lt;li&gt;Java Builder类应该有一个公共构造函数，其中包含所有必需的属性作为参数。&lt;/li&gt;
&lt;li&gt;Java Builder类应具有设置可选参数的方法，并且应在设置可选属性后返回相同的Builder对象。&lt;/li&gt;
&lt;li&gt;最后一步是build()在构建器类中提供一个方法，该方法将返回客户端程序所需的Object。为此，我们需要在Class中使用Builder类作为参数的私有构造函数。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面是示例构建器模式示例代码，首先，我们有我们想要创造的英雄&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public final class Hero {
  private final Profession profession;
  private final String name;
  private final HairType hairType;
  private final HairColor hairColor;
  private final Armor armor;
  private final Weapon weapon;

  private Hero(Builder builder) {
    this.profession = builder.profession;
    this.name = builder.name;
    this.hairColor = builder.hairColor;
    this.hairType = builder.hairType;
    this.weapon = builder.weapon;
    this.armor = builder.armor;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们有了建设者&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public static class HeroBuilder {
    private final Profession profession;
    private final String name;
    private HairType hairType;
    private HairColor hairColor;
    private Armor armor;
    private Weapon weapon;

    public Builder(Profession profession, String name) {
      if (profession == null || name == null) {
        throw new IllegalArgumentException(&quot;profession and name can not be null&quot;);
      }
      this.profession = profession;
      this.name = name;
    }

    public Builder withHairType(HairType hairType) {
      this.hairType = hairType;
      return this;
    }

    public Builder withHairColor(HairColor hairColor) {
      this.hairColor = hairColor;
      return this;
    }

    public Builder withArmor(Armor armor) {
      this.armor = armor;
      return this;
    }

    public Builder withWeapon(Weapon weapon) {
      this.weapon = weapon;
      return this;
    }

    public Hero build() {
      return new Hero(this);
    }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;请注意，Hero类只有getter方法，没有公共构造函数。因此，获取Hero对象的唯一方法是通过HeroBuilder类。&lt;/p&gt;
&lt;p&gt;然后它可以用作如下，显示如何使用Builder类来获取对象：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Hero mage = new Hero.HeroBuilder(Profession.MAGE, &quot;Riobard&quot;).withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build();&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;使用Builder模式时&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用于创建复杂对象的算法应该独立于构成对象的部分以及它们如何组装&lt;/li&gt;
&lt;li&gt;构造过程必须允许对构造的对象进行不同的表示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java类中的一些构建器模式示例是;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;java.lang.StringBuilder＃append（）（未同步）&lt;/li&gt;
&lt;li&gt;java.lang.StringBuffer＃append（）（synchronized）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点： 1、建造者独立，易扩展。 2、便于控制细节风险。&lt;br/&gt;缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。&lt;br/&gt;注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。&lt;/p&gt;
&lt;p&gt;这就是java中的构建器设计模式的全部内容。&lt;br/&gt;翻译于：&lt;a href=&quot;https://www.journaldev.com/1425/builder-design-pattern-in-java&quot;&gt;builder-design-pattern-in-java&lt;/a&gt;&lt;br/&gt;参考：&lt;a href=&quot;https://github.com/iluwatar/java-design-patterns/tree/master/builder&quot;&gt;java-design-patterns&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 06 Oct 2018 16:37:00 +0000</pubDate>
<dc:creator>JaJian</dc:creator>
<og:description>介绍 今天我们将研究java中的Builder模式。Builder 设计模式是一种创造性的设计模式，如工厂模式和抽象工厂模式。 当Object包含许多属性时，引入了Builder模式来解决Factor</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jajian/p/9749138.html</dc:identifier>
</item>
<item>
<title>django框架--底层架构 - zzzzou</title>
<link>http://www.cnblogs.com/zzzlw/p/9747872.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zzzlw/p/9747872.html</guid>
<description>&lt;p class=&quot;toc&quot;&gt;目录&lt;/p&gt;
&lt;h2 id=&quot;零参考&quot;&gt;零、参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/679dee0a4193&quot; class=&quot;uri&quot;&gt;https://www.jianshu.com/p/679dee0a4193&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.letiantian.me/2015-09-10-understand-python-wsgi/&quot; class=&quot;uri&quot;&gt;https://www.letiantian.me/2015-09-10-understand-python-wsgi/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一对于web服务的理解&quot;&gt;一、对于web服务的理解&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;web&lt;/code&gt;服务应该至少包含两个模块：&lt;code&gt;web&lt;/code&gt;服务器和&lt;code&gt;web&lt;/code&gt;应用程序，两个模块在功能和代码上解耦。&lt;br/&gt;&lt;code&gt;web&lt;/code&gt;服务器负责处理&lt;code&gt;socket&lt;/code&gt;调用、&lt;code&gt;http&lt;/code&gt;数据解析和封装等底层操作。&lt;br/&gt;&lt;code&gt;web&lt;/code&gt;应用程序负责业务处理、数据增删改查、页面渲染/生成等高层操作。&lt;br/&gt;&lt;code&gt;web&lt;/code&gt;服务器一旦接收到&lt;code&gt;http&lt;/code&gt;请求，经过自身的解析后就会调用&lt;code&gt;web&lt;/code&gt;应用程序来处理业务逻辑，并得到&lt;code&gt;web&lt;/code&gt;应用程序的返回值，再经过自身的封装发送给客户端。&lt;/p&gt;
&lt;h2 id=&quot;二对于wsgi协议的理解&quot;&gt;二、对于wsgi协议的理解&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;web&lt;/code&gt;服务器和&lt;code&gt;web&lt;/code&gt;应用程序之间需要定义一个接口规则，这也叫协议，用于明确两者之间以什么样的形式交互数据。即：&lt;strong&gt;&lt;code&gt;web&lt;/code&gt;服务器应该以什么样的形式调用web应用程序，而&lt;code&gt;web&lt;/code&gt;应用程序又应该定义成什么形式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python&lt;/code&gt;下规定的&lt;code&gt;web&lt;/code&gt;服务的接口规则叫做&lt;code&gt;wsgi&lt;/code&gt;，&lt;code&gt;wsgi&lt;/code&gt;协议对于&lt;code&gt;server&lt;/code&gt;和&lt;code&gt;application&lt;/code&gt;的接口定义如下：&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;server&lt;/code&gt;调用规则的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;response = application(environ, start_response) &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于&lt;code&gt;application&lt;/code&gt;接口编码的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def application(environ, start_response):
    status = '200 OK'
    response_headers = [('Content-Type', 'text/plain'),]
    start_response(status, response_headers)
    
    return [b'hello',]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只要是遵从如上形式进一步封装&lt;code&gt;server&lt;/code&gt;和&lt;code&gt;application&lt;/code&gt;的，均称为实现了&lt;code&gt;wsgi&lt;/code&gt;协议的&lt;code&gt;server/application&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python&lt;/code&gt;内置提供了一个&lt;code&gt;wsigref&lt;/code&gt;模块用于提供&lt;code&gt;server&lt;/code&gt;，但是只能用于开发测试，&lt;code&gt;django&lt;/code&gt;框架就是使用此模块作为它的&lt;code&gt;server&lt;/code&gt;部分，也就说，实际生产中的&lt;code&gt;server&lt;/code&gt;部分，还需要使用其他模块来实现。&lt;/p&gt;
&lt;p&gt;任何&lt;code&gt;web&lt;/code&gt;框架，可能没有实现&lt;code&gt;server&lt;/code&gt;部分或者只实现一个简单的&lt;code&gt;server&lt;/code&gt;，但是，&lt;code&gt;web&lt;/code&gt;框架肯定实现了&lt;code&gt;application&lt;/code&gt;部分。&lt;strong&gt;&lt;code&gt;application&lt;/code&gt;部分完成了对一次请求的全流程处理&lt;/strong&gt;，其中各环节都可以提供丰富的功能，比如请求和响应对象的封装、&lt;code&gt;model/template&lt;/code&gt;的实现、中间件的实现等，让我们可以更加细粒度的控制请求/响应的流程。&lt;/p&gt;
&lt;h2 id=&quot;三自定义一个简单的基于wsgi协议的web框架&quot;&gt;三、自定义一个简单的基于wsgi协议的web框架&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;django&lt;/code&gt;框架的&lt;code&gt;server&lt;/code&gt;部分由&lt;code&gt;python&lt;/code&gt;内置的&lt;code&gt;wsgiref&lt;/code&gt;模块提供，我们只需要编写&lt;code&gt;application&lt;/code&gt;应用程序部分。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from wsgiref.simple_server import make_server

def app(environ, start_response):  # wsgi协议规定的application部分的编码形式，可在此基础上扩展
    status = '200 OK'
    respones_headers = []
    
    start_response(status, response_headers)
    return [b'hello',]

if __name__ == '__main__':
    httpd = make_server('127.0.0.1', 8080, app)
    httpd.serve_forever()&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四django中的server实现&quot;&gt;四、django中的server实现&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;django&lt;/code&gt;使用的底层&lt;code&gt;server&lt;/code&gt;模块是基于&lt;code&gt;python&lt;/code&gt;内置的&lt;code&gt;wsgiref&lt;/code&gt;模块中的&lt;code&gt;simple_server&lt;/code&gt;，每次&lt;code&gt;django&lt;/code&gt;的启动都会执行如下&lt;code&gt;run&lt;/code&gt;函数。&lt;code&gt;run&lt;/code&gt;函数中会执行&lt;code&gt;serve_forever&lt;/code&gt;，此步骤将会启动&lt;code&gt;socket_server&lt;/code&gt;的无限循环，此时就可以循环提供请求服务，每次客户端请求到来，服务端就执行&lt;code&gt;django&lt;/code&gt;提供的&lt;code&gt;application&lt;/code&gt;模块。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;django&lt;/code&gt;中&lt;code&gt;server&lt;/code&gt;的启动----&lt;code&gt;django.core.servers.basehttp.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot;&quot;&quot;
HTTP server that implements the Python WSGI protocol (PEP 333, rev 1.21).

Based on wsgiref.simple_server which is part of the standard library since 2.5.

This is a simple server for use in testing or debugging Django apps. It hasn't
been reviewed for security issues. DON'T USE IT FOR PRODUCTION USE!
&quot;&quot;&quot;

def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer):
    server_address = (addr, port)
    if threading:
        httpd_cls = type('WSGIServer', (socketserver.ThreadingMixIn, server_cls), {})
    else:
        httpd_cls = server_cls
    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)
    if threading:
        # ThreadingMixIn.daemon_threads indicates how threads will behave on an
        # abrupt shutdown; like quitting the server by the user or restarting
        # by the auto-reloader. True means the server will not wait for thread
        # termination before it quits. This will make auto-reloader faster
        # and will prevent the need to kill the server manually if a thread
        # isn't terminating correctly.
        httpd.daemon_threads = True
    httpd.set_app(wsgi_handler)
    httpd.serve_forever()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;底层无限循环将作为&lt;code&gt;web&lt;/code&gt;服务的主要驱动----&lt;code&gt;socektserver.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def serve_forever(self, poll_interval=0.5):
    &quot;&quot;&quot;Handle one request at a time until shutdown.

    Polls for shutdown every poll_interval seconds. Ignores
    self.timeout. If you need to do periodic tasks, do them in
    another thread.
    &quot;&quot;&quot;
    self.__is_shut_down.clear()
    try:
        # XXX: Consider using another file descriptor or connecting to the
        # socket to wake this up instead of polling. Polling reduces our
        # responsiveness to a shutdown request and wastes cpu at all other
        # times.
        with _ServerSelector() as selector:
            selector.register(self, selectors.EVENT_READ)

            while not self.__shutdown_request:
                ready = selector.select(poll_interval)
                if ready:
                    self._handle_request_noblock()

                self.service_actions()
    finally:
        self.__shutdown_request = False
        self.__is_shut_down.set()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;server&lt;/code&gt;对于&lt;code&gt;application&lt;/code&gt;的调用----&lt;code&gt;wsgiref.handlers.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def run(self, application):
    &quot;&quot;&quot;Invoke the application&quot;&quot;&quot;
    # Note to self: don't move the close()!  Asynchronous servers shouldn't
    # call close() from finish_response(), so if you close() anywhere but
    # the double-error branch here, you'll break asynchronous servers by
    # prematurely closing.  Async servers must return from 'run()' without
    # closing if there might still be output to iterate over.
    try:
        self.setup_environ()
        self.result = application(self.environ, self.start_response)
        self.finish_response()
    except:
        try:
            self.handle_error()
        except:
            # If we get an error handling an error, just give up already!
            self.close()
            raise   # ...and let the actual server figure it out.&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;五django中的application实现&quot;&gt;五、django中的application实现&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;django&lt;/code&gt;的&lt;code&gt;application&lt;/code&gt;模块是通过&lt;code&gt;WSGIHandler&lt;/code&gt;的一个实例来提供的，此实例可以被&lt;code&gt;call&lt;/code&gt;，然后根据&lt;code&gt;wsgi&lt;/code&gt;的接口规则传入&lt;code&gt;environ&lt;/code&gt;和&lt;code&gt;start_response&lt;/code&gt;。所以本质上，&lt;code&gt;django&lt;/code&gt;就是使用的内置&lt;code&gt;python&lt;/code&gt;提供的&lt;code&gt;wsgiref.simple_server&lt;/code&gt;再对&lt;code&gt;application&lt;/code&gt;进行丰富的封装。大部分的&lt;code&gt;django&lt;/code&gt;编码工作都在&lt;code&gt;application&lt;/code&gt;部分。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;application&lt;/code&gt;的编码定义部分----&lt;code&gt;django.core.handlers.wsgi.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class WSGIHandler(base.BaseHandler):
    request_class = WSGIRequest

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.load_middleware()

    def __call__(self, environ, start_response):
        set_script_prefix(get_script_name(environ))
        signals.request_started.send(sender=self.__class__, environ=environ)
        request = self.request_class(environ)
        response = self.get_response(request)

        response._handler_class = self.__class__

        status = '%d %s' % (response.status_code, response.reason_phrase)
        response_headers = list(response.items())
        for c in response.cookies.values():
            response_headers.append(('Set-Cookie', c.output(header='')))
        start_response(status, response_headers)
        if getattr(response, 'file_to_stream', None) is not None and environ.get('wsgi.file_wrapper'):
            response = environ['wsgi.file_wrapper'](response.file_to_stream)
        return response&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;六django的底层调用链&quot;&gt;六、django的底层调用链&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1381809/201810/1381809-20181006175526955-1852462410.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;七总结&quot;&gt;七、总结&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;web&lt;/code&gt;服务是基于&lt;code&gt;socket&lt;/code&gt;的高层服务，所以&lt;code&gt;web&lt;/code&gt;服务必须含有&lt;code&gt;web&lt;/code&gt;服务器这一模块。&lt;br/&gt;&lt;code&gt;web&lt;/code&gt;服务需要动态渲染数据，需要中间件来丰富功能，需要封装和解析来处理数据，所以&lt;code&gt;web&lt;/code&gt;服务必须含有&lt;code&gt;web&lt;/code&gt;应用程序这一模块。&lt;br/&gt;&lt;code&gt;web&lt;/code&gt;框架是一种工具集，封装了各种功能的底层代码，提供给我们方便开发的接口。但不论是哪一种框架，它们的底层原理基本都是一致的。&lt;br/&gt;应该深入学习、研究一个&lt;code&gt;web&lt;/code&gt;框架，精通一门框架的实现原理和设计理念。&lt;/p&gt;
</description>
<pubDate>Sat, 06 Oct 2018 16:28:00 +0000</pubDate>
<dc:creator>zzzzou</dc:creator>
<og:description>[TOC] 零、参考 https://www.jianshu.com/p/679dee0a4193 https://www.letiantian.me/2015 09 10 understand py</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zzzlw/p/9747872.html</dc:identifier>
</item>
<item>
<title>day52_BOS项目_04 - 黑泽明军</title>
<link>http://www.cnblogs.com/chenmingjun/p/9749033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/9749033.html</guid>
<description>&lt;ul&gt;&lt;li&gt;今天内容安排：
&lt;ul&gt;&lt;li&gt;1、区域数据批量导入功能
&lt;ul&gt;&lt;li&gt;&lt;span&gt;jQuery OCUpload（一键上传插件）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用apache POI解析Excel文件&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用Pinyin4J生成简码和城市编码&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2、实现区域的分页查询&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3、对分页代码重构&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;4、添加分区（使用combobox下拉框）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;5、分区的组合条件分页查询&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;6、分区数据导出功能&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h1&quot;&gt;&lt;span&gt;&lt;strong&gt;1、区域数据批量导入功能&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h11jqueryocupload&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1、jQuery OCUpload（一键上传插件）&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ajax不能做文件上传。&lt;/code&gt;&lt;br/&gt;第一步：在jsp页面中引入插件的js文件&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath }/js/jquery.ocupload-1.1.2.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二步：在页面中提供任意一个元素&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs lua&quot;&gt;     &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;but1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;上传&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第三步：调用该插件提供的upload方法，动态修改页面html代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;br/&gt;$(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#but1&quot;&lt;/span&gt;).upload({&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'abc'&lt;/span&gt;,  &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'myFile'&lt;/span&gt;&lt;br/&gt;});&lt;br/&gt;});&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;动态修改页面html代码效果如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXqXR.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h12apachepoiexcel&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2、使用apache POI解析Excel文件&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。&lt;br/&gt;第一步：导入poi-3.9-20121203.jar包&lt;br/&gt;第二步：测试代码如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre readability=&quot;9&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;12&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.mytest;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.hssf.usermodel.HSSFSheet;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.hssf.usermodel.HSSFWorkbook;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.ss.usermodel.Row;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;POITest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; FileNotFoundException, IOException&lt;/span&gt;{&lt;br/&gt;HSSFWorkbook workbook = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HSSFWorkbook(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;E:\\test\\abc.xls&quot;&lt;/span&gt;)));&lt;br/&gt;HSSFSheet sheet = workbook.getSheetAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Row row : sheet) {&lt;br/&gt;String v1 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String v2 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String v3 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String v4 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String v5 = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).getStringCellValue();&lt;br/&gt;System.out.println(v1 + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + v2 + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + v3 + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + v4 + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + v5);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;控制台输出结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;区域编号 省份 城市 区域 邮编&lt;br/&gt;QY001 北京市 北京市 东城区 110101&lt;br/&gt;QY002 北京市 北京市 西城区 110102&lt;br/&gt;QY003 北京市 北京市 朝阳区 110105&lt;br/&gt;QY004 北京市 北京市 丰台区 110106&lt;br/&gt;QY005 北京市 北京市 石景山区 110107&lt;br/&gt;QY006 北京市 北京市 海淀区 110108&lt;br/&gt;QY007 北京市 北京市 门头沟区 110109&lt;br/&gt;QY008 北京市 北京市 房山区 110111&lt;br/&gt;QY009 北京市 北京市 通州区 110112&lt;br/&gt;QY010 北京市 北京市 顺义区 110113&lt;br/&gt;QY011 北京市 北京市 昌平区 110114&lt;br/&gt;QY012 北京市 北京市 大兴区 110115&lt;br/&gt;QY013 北京市 北京市 怀柔区 110116&lt;br/&gt;QY014 北京市 北京市 平谷区 110117&lt;br/&gt;QY015 北京市 北京市 密云县 110228&lt;br/&gt;QY016 北京市 北京市 延庆县 110229&lt;br/&gt;......&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第三步：在RegionAction中提供批量导入方法&lt;/p&gt;
&lt;pre readability=&quot;20&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;34&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.bos.web.action;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.hssf.usermodel.HSSFSheet;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.hssf.usermodel.HSSFWorkbook;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.poi.ss.usermodel.Row;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.struts2.ServletActionContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Scope;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Controller;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.domain.Region;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.service.IRegionService;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.web.action.base.BaseAction;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Scope&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;prototype&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;RegionAction&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseAction&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Region&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; IRegionService regionService;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; File myFile;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setMyFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(File myFile)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.myFile = myFile;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;importXls&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;String flag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;HSSFWorkbook workbook = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HSSFWorkbook(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FileInputStream(myFile));&lt;br/&gt;HSSFSheet sheet = workbook.getSheetAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;List&amp;lt;Region&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Region&amp;gt;();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Row row : sheet) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; rowNum = row.getRowNum();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rowNum == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;String id = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String province = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String city = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String district = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).getStringCellValue();&lt;br/&gt;String postcode = row.getCell(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).getStringCellValue();&lt;/p&gt;&lt;p&gt;Region region = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Region(id, province, city, district, postcode, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;);&lt;br/&gt;list.add(region);&lt;br/&gt;}&lt;br/&gt;regionService.saveBatch(list);          &lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;flag = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;ServletActionContext.getResponse().setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;ServletActionContext.getResponse().getWriter().print(flag);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第四步：浏览器根据服务器响应回来的状态码，进行判断并给出提示信息&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;br/&gt;$(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#button-import&quot;&lt;/span&gt;).upload({&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'${pageContext.request.contextPath}/regionAction_importXls.action'&lt;/span&gt;,  &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'myFile'&lt;/span&gt;,&lt;br/&gt;onComplete: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data == &lt;span class=&quot;hljs-string&quot;&gt;'1'&lt;/span&gt;) {&lt;br/&gt;$.messager.alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;提示信息&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;区域数据导入成功！&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;info&quot;&lt;/span&gt;);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;$.messager.alert(&lt;span class=&quot;hljs-string&quot;&gt;&quot;提示信息&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;区域数据导入失败！&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;warning&quot;&lt;/span&gt;);&lt;br/&gt;} &lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;});&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h13pinyin4j&quot;&gt;&lt;span&gt;&lt;strong&gt;1.3、使用Pinyin4J生成简码和城市编码&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;第一步：导入pinyin4j-2.5.0.jar包，拷贝PinYin4jUtils.java工具类至utils包中&lt;br/&gt;第二步：测试类代码如下：&lt;/p&gt;
&lt;pre readability=&quot;13&quot;&gt;
&lt;code class=&quot;hljs dart&quot; readability=&quot;20&quot;&gt;package com.itheima.mytest;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.lang3.StringUtils;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.utils.PinYin4jUtils;&lt;/p&gt;&lt;p&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Pinyin4JTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; test1(){&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; province = &lt;span class=&quot;hljs-string&quot;&gt;&quot;河北省&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; city = &lt;span class=&quot;hljs-string&quot;&gt;&quot;石家庄市&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; district = &lt;span class=&quot;hljs-string&quot;&gt;&quot;长安区&quot;&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;city  = city.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, city.length() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;[] stringToPinyin = PinYin4jUtils.stringToPinyin(city);&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; citycode = StringUtils.join(stringToPinyin, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(citycode);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;province  = province.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, province.length() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;district  = district.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, district.length() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; info = province + city + district; &lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;[] headByString = PinYin4jUtils.getHeadByString(info);&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; shortcode = StringUtils.join(headByString, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;System.out.println(shortcode);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h2&quot;&gt;&lt;span&gt;&lt;strong&gt;2、实现区域的分页查询&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;代码同取派员的分页查询。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h3&quot;&gt;&lt;span&gt;&lt;strong&gt;3、对分页代码重构&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在BaseAction中抽取PageBean对象，在BaseAction中提供setPage和setRows方法，并注入给PageBean对象&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; PageBean pageBean = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PageBean();&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setPage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; page)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;pageBean.setCurrentPage(page);&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setRows&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; rows)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;pageBean.setPageSize(rows);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在BaseAction中抽取条件查询对象&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;    &lt;br/&gt;DetachedCriteria detachedCriteria = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;在BaseAction的构造方法中创建条件查询对象，并注入给PageBean对象&lt;br/&gt;如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXgce.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;在BaseAction中抽取将PageBean对象转为json的方法&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;7&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;writePageBean2Json&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(PageBean pageBean, String[] excludes)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;JsonConfig jsonConfig = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonConfig();&lt;br/&gt;jsonConfig.setExcludes(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;});&lt;p&gt;JSONObject jsonObject = JSONObject.fromObject(pageBean, jsonConfig);&lt;br/&gt;String json = jsonObject.toString();&lt;/p&gt;&lt;p&gt;ServletActionContext.getResponse().setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/json;charset=UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;ServletActionContext.getResponse().getWriter().print(json);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在RegionAction中使用分页方法&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;pageBean&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;regionService.pageBean(pageBean); &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.writePageBean2Json(pageBean, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;}); &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h4jqueryeasyuicombobox&quot;&gt;&lt;span&gt;&lt;strong&gt;4、使用jQuery EasyUI 下拉框combobox&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXRQq.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;第一步：在subarea.jsp中使用&lt;code&gt;combobox下拉框&lt;/code&gt;展示区域数据到下拉框中
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;选择区域&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;easyui-combobox&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;region.id&quot;&lt;/span&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;data-options&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;valueField:'id',textField:'name',&lt;br/&gt;url:'${pageContext.request.contextPath}/regionAction_listajax1.action'&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;  &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TX2nO.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;第二步：在RegionAction中提供listajax()方法，查询所有的区域数据，返回json数据，并将该方法抽取至BaseAction中&lt;br/&gt;RegionAction.java
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String listajax() throws IOException {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Region&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; = regionService.findAll();&lt;br/&gt;String[] exclude = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;subareas&quot;&lt;/span&gt;}; &lt;br/&gt;this.writeList2Json(&lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;, exclude);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;BaseAction.java&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs php&quot; readability=&quot;6&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; void writeList2Json(&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;, String[] exclude) throws IOException {&lt;br/&gt;JsonConfig jsonConfig = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonConfig();&lt;br/&gt;jsonConfig.setExcludes(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;});&lt;p&gt;JSONArray jsonObject = JSONArray.fromObject(&lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;, jsonConfig);&lt;br/&gt;String json = jsonObject.toString();&lt;/p&gt;&lt;p&gt;ServletActionContext.getResponse().setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/json;charset=UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;ServletActionContext.getResponse().getWriter().&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(json);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了使返回的json中含有name字段，需要在Region类中提供getName()方法&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; province + city + district;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器返回的json数据效果如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXnid.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;页面效果如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5Tm3NY.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h5&quot;&gt;&lt;span&gt;&lt;strong&gt;5、添加分区&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;第一步：页面位置：/bos19/WebContent/WEB-INF/pages/base/subarea.jsp&lt;br/&gt;为了便于处理，我们先将subarea.jsp中的&lt;code&gt;分拣编码&lt;/code&gt;选项框删掉，该编号我们让其自动生成。&lt;br/&gt;我们在Subarea.hbm.xml中更改主键生成策略，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java.lang.String&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;uuid&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二步：为添加窗口中的“保存按钮”绑定事件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;datagrid-toolbar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;save&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;icon&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;icon-save&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;easyui-linkbutton&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;plain&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;保存&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;br/&gt;$(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#save&quot;&lt;/span&gt;).click(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; v = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#addSubareaForm&quot;&lt;/span&gt;).form(&lt;span class=&quot;hljs-string&quot;&gt;&quot;validate&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (v) {&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#addSubareaForm&quot;&lt;/span&gt;).submit();&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;});&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;           &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第三步：创建SubareaAction类，提供add方法，处理分区添加动作&lt;br/&gt;SubareaAction.java&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;9&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.bos.web.action;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Scope;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Controller;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.domain.Subarea;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.bos.web.action.base.BaseAction;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Scope&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;prototype&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SubareaAction&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseAction&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Subarea&lt;/span&gt;&amp;gt;&lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;subareaService.save(model);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;list&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在第三步之前，我们将所有的注入service，抽取至BaseAction中，将修饰符public改为protected，使其子类能够访问&lt;br/&gt;BaseAction.java&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; IUserService userServie;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; IStaffService staffService;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; IRegionService regionService;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; ISubareaService subareaService;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第四步：配置struts.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;subareaAction_*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;subareaAction&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{1}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;list&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;/WEB-INF/pages/base/subarea.jsp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;action&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h6bug&quot;&gt;&lt;span&gt;&lt;strong&gt;6、解决区域分页查询的bug&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.String&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.apache&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.commons&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.exception&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.NestableRuntimeException&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.getMessage&lt;/span&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-selector-tag&quot;&gt;threw&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;invoked&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.sf&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.json&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.JSONException&lt;/span&gt;: &lt;span class=&quot;hljs-selector-tag&quot;&gt;There&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hierarchy&lt;/span&gt;!&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;延迟加载也称为懒加载，是Hibernate3关联关系对象默认的加载方式，所谓延迟加载就是当在真正需要数据的时候，才真正执行数据加载操作。简单理解为，只有在使用的时候，才会发出sql语句进行查询。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Hibernate中主要是通过代理（proxy）机制来实现延迟加载。我们在查询区域的时候，区域关联的分区没有立即查询，因为所有的关联查询默认都是延时加载（懒加载）。那么返回来的就是代理对象，而代理对象是不能被序列化的。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;如何解决呢？&lt;br/&gt;答：因为PageBean中的属性有集合list，此时的list集合中存放的是Region对象，而Region对象中又关联一个集合set，该set集合存放的Subareas对象，该Subareas对象默认是懒加载的，而此时我们没有用到Subareas对象的数据，所以我们就应该将其排除掉。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.writePageBean2Json(pageBean, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;subareas&quot;&lt;/span&gt;}); &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h7&quot;&gt;&lt;span&gt;&lt;strong&gt;7、实现分区分页查询（没有过滤条件）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;代码同区域的分页查询。&lt;br/&gt;小区别：当我们查询分区表的时候，需要立即去查询关联的区域表&lt;br/&gt;我们需要修改分区的Hibernate配置文件Subarea.hbm.xml中的加载时机，修改代码如下：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;many-to-one&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lazy&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;region&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.bos.domain.Region&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;fetch&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;select&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;region_id&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;many-to-one&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;many-to-one&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;decidedzone&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.bos.domain.Decidedzone&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;fetch&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;select&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;decidedzone_id&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;32&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;many-to-one&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h8&quot;&gt;&lt;span&gt;&lt;strong&gt;8、实现分区组合条件分页查询&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;EasyUI Datagrid 数据网格的load()方法：&lt;br/&gt;　　加载并显示第一页的行，如果指定 'param' 参数，它将替换 queryParams 属性。通常情况下，通过传递一些从参数进行查询，该方法被调用来从服务器加载新数据。&lt;br/&gt;查询分区页面如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TXwZr.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;第一步：为“查询按钮”绑定事件，调用datagrid的load()方法，重新发起ajax请求，并提交输入框参数，这里我们使用一个工具方法：将指定的表单中的输入项序列化为json对象
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs javascript&quot; readability=&quot;4&quot;&gt;    &lt;br/&gt;$.fn.serializeJson = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; serializeObj = {};&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.serializeArray();&lt;br/&gt;$(array).each(&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name]) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($.isArray(serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name])) {&lt;br/&gt;serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name].push(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name] = [serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name], &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value];&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;serializeObj[&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.name] = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.value;&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; serializeObj;&lt;br/&gt;};&lt;p&gt;&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#btn&quot;&lt;/span&gt;).click(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#searchForm&quot;&lt;/span&gt;).serializeJson(); &lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#grid&quot;&lt;/span&gt;).datagrid(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;, p);&lt;br/&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#searchWindow&quot;&lt;/span&gt;).window(&lt;span class=&quot;hljs-string&quot;&gt;&quot;close&quot;&lt;/span&gt;);&lt;br/&gt;});&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器的调试截图：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5Tm99i.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;第三步：修改SubareaAction中的分页查询方法，封装分页查询的条件
&lt;pre readability=&quot;16.5&quot;&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;27&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;pageQuery&lt;/span&gt;() throws IOException &lt;/span&gt;{&lt;br/&gt;DetachedCriteria detachedCriteria2 = pageBean.getDetachedCriteria();&lt;p&gt;&lt;br/&gt;String addresskey = model.getAddresskey();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(addresskey)) {&lt;br/&gt;detachedCriteria2.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Restrictions.like(&lt;span class=&quot;hljs-string&quot;&gt;&quot;addresskey&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; + addresskey + &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Region region = model.getRegion();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (region != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;detachedCriteria2.createAlias(&lt;span class=&quot;hljs-string&quot;&gt;&quot;region&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;String province = region.getProvince();&lt;br/&gt;String city = region.getCity();&lt;br/&gt;String district = region.getDistrict();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(province)) {&lt;br/&gt;detachedCriteria2.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Restrictions.like(&lt;span class=&quot;hljs-string&quot;&gt;&quot;r.province&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; + province + &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(city)) {&lt;br/&gt;detachedCriteria2.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Restrictions.like(&lt;span class=&quot;hljs-string&quot;&gt;&quot;r.city&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; + city + &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(district)) {&lt;br/&gt;detachedCriteria2.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(Restrictions.like(&lt;span class=&quot;hljs-string&quot;&gt;&quot;r.district&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt; + district + &lt;span class=&quot;hljs-string&quot;&gt;&quot;%&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;subareaService.pageQuery(pageBean);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.writePageBean2Json(pageBean, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;currentPage&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;detachedCriteria&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;decidedzone&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;subareas&quot;&lt;/span&gt;});&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h9&quot;&gt;&lt;span&gt;&lt;strong&gt;9、分区数据导出功能&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;导出Excel文件提供客户下载&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第一步：为“导出”按钮绑定事件&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;doExport&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;.location.href = &lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/subareaAction_exportXls.action&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二步：在SubareaAction中提供导出方法&lt;/p&gt;
&lt;pre readability=&quot;12&quot;&gt;
&lt;code class=&quot;hljs php&quot; readability=&quot;18&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String exportXls() throws IOException {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Subarea&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; = subareaService.findAll();&lt;p&gt;&lt;br/&gt;HSSFWorkbook workbook = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HSSFWorkbook();&lt;br/&gt;HSSFSheet sheet = workbook.createSheet(&lt;span class=&quot;hljs-string&quot;&gt;&quot;分区数据&quot;&lt;/span&gt;);&lt;br/&gt;HSSFRow headRow = sheet.createRow(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;br/&gt;headRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).setCellValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;分区编号&quot;&lt;/span&gt;);&lt;br/&gt;headRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).setCellValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;区域编号&quot;&lt;/span&gt;);&lt;br/&gt;headRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).setCellValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;地址关键字&quot;&lt;/span&gt;);&lt;br/&gt;headRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).setCellValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;省市区&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Subarea subarea : &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;) {&lt;br/&gt;HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;br/&gt;dataRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).setCellValue(subarea.getId());&lt;br/&gt;dataRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).setCellValue(subarea.getRegion().getId());&lt;br/&gt;dataRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).setCellValue(subarea.getAddresskey());&lt;/p&gt;&lt;p&gt;Region region = subarea.getRegion();&lt;br/&gt;dataRow.createCell(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).setCellValue(region.getProvince() + region.getCity() + region.getDistrict());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;String filename = &lt;span class=&quot;hljs-string&quot;&gt;&quot;分区数据.xls&quot;&lt;/span&gt;;&lt;br/&gt;String agent = ServletActionContext.getRequest().getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;); &lt;br/&gt;filename = FileUtils.encodeDownloadFilename(filename, agent);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;ServletOutputStream out = ServletActionContext.getResponse().getOutputStream();&lt;br/&gt;String contentType = ServletActionContext.getServletContext().getMimeType(filename);&lt;br/&gt;ServletActionContext.getResponse().setContentType(contentType);&lt;br/&gt;ServletActionContext.getResponse().setHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-disposition&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;attchment;filename=&quot;&lt;/span&gt; + filename);&lt;br/&gt;workbook.write(out);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器界面效果图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/06/5TmDby.png&quot; alt=&quot;&quot;/&gt;</description>
<pubDate>Sat, 06 Oct 2018 15:40:00 +0000</pubDate>
<dc:creator>黑泽明军</dc:creator>
<og:description>今天内容安排： 1、区域数据批量导入功能 jQuery OCUpload（一键上传插件） 使用apache POI解析Excel文件 使用Pinyin4J生成简码和城市编码 2、实现区域的分页查询 3</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/9749033.html</dc:identifier>
</item>
<item>
<title>九,ESP8266 判断是断电上电（强制硬件复位）之后运行的内部程序还是内部软件复位之后运行的程序(基于Lua脚本语言) - 杨奉武</title>
<link>http://www.cnblogs.com/yangfengwu/p/9749008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangfengwu/p/9749008.html</guid>
<description>&lt;p&gt;&lt;span&gt;现在我有一个需求，WIFI模块控制一个继电器，我要做的是如果内部程序跑乱了，造成了内部程序复位重启，那么控制继电器的状态不能改变&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果是设备断电了，然后又来电了，我需要的是继电器一定要是断开才好。不能加额外的电路，只能在程序中做判断&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实  内部程序跑乱了，造成了内部程序复位重启     和   设备断电了，然后又来电了     然后都是重新执行程序，不知道大家是如何做的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的思路是。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先说一下WIFI模块的一个很大的优点，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大家有没有注意WIFI模块的引脚，假设配置了一个引脚为高电平，无论内部如何的利用软件复位，这个引脚都会保持高电平&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有就是，WIFI模块如果是断电上电那么引脚一开始一定是低电平，但是必须是这样配置&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
local PowerResetPin = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
gpio.mode(PowerResetPin, gpio.OUTPUT)
local PowerReset &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;  gpio.read(PowerResetPin) == &lt;span&gt;1&lt;/span&gt;&lt;span&gt; then
    PowerReset &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PowerReset = false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    PowerReset &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PowerReset = true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/819239/201810/819239-20181006231518376-1855939632.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;span&gt;最终我的方案是：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先读取引脚是不是低电平，如果是，就是说是断电上电然后执行的程序，如果不是，就是说内部复位重启然后执行的程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实是自己人为设置的那个引脚输出的高电平，看下面的程序&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
local PowerResetPin = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
gpio.mode(PowerResetPin, gpio.OUTPUT)
local PowerReset &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt;  gpio.read(PowerResetPin) == &lt;span&gt;1&lt;/span&gt;&lt;span&gt; then
    PowerReset &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PowerReset = false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    PowerReset &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    print(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PowerReset = true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
end

gpio.write(PowerResetPin, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;整个程序运行之前先运行上面的程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果 PowerReset = false  说明是内部程序复位重启然后执行的程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果 PowerReset = true   说明是断电上电然后执行的程序&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;好了就是这么简单，主要还是因为WIFI引脚有这个特点，软件复位可以保持住状态&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 06 Oct 2018 15:24:00 +0000</pubDate>
<dc:creator>杨奉武</dc:creator>
<og:description>现在我有一个需求，WIFI模块控制一个继电器，我要做的是如果内部程序跑乱了，造成了内部程序复位重启，那么控制继电器的状态不能改变 如果是设备断电了，然后又来电了，我需要的是继电器一定要是断开才好。不能</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangfengwu/p/9749008.html</dc:identifier>
</item>
<item>
<title>JDK中枚举的底层实现 - throwable</title>
<link>http://www.cnblogs.com/throwable/p/9748911.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/throwable/p/9748911.html</guid>
<description>&lt;p&gt;上一篇文章复习介绍了JDK中注解的底层实现，跟注解一样比较常用，但是底层实现比较神秘的还有枚举类型。趁着国庆假期的最后两天，把JDK中枚举的底层实现也进行一次探究。&lt;/p&gt;

&lt;p&gt;在探究JDK注解的底层实现的时候，因为预先参考了不少资料，所以整个过程有点&quot;未卜先知&quot;的意味，这里尝试用未知的角度去看注解的底层实现。先定义一个手机操作系统类型枚举PhoneOsEnum：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;package club.throwable.enumeration;

public enum PhoneOsEnum {

    /**
     * 安卓
     */
    ANDROID(1, &quot;android&quot;),

    /**
     * ios
     */
    IOS(2, &quot;ios&quot;);


    private final Integer type;
    private final String typeName;

    PhoneOsEnum(Integer type, String typeName) {
        this.type = type;
        this.typeName = typeName;
    }

    public Integer getType() {
        return type;
    }

    public String getTypeName() {
        return typeName;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是一个很简单的枚举，接着使用JDK的反编译工具反编译出其字节码，执行下面的命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;javap -c -v D:\Projects\rxjava-seed\target\classes\club\throwable\enumeration\PhoneOsEnum.class&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后就得到了关于PhoneOsEnum.class的很长的字节码，这里全部贴出来：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Classfile /D:/Projects/rxjava-seed/target/classes/club/throwable/enumeration/PhoneOsEnum.class
  Last modified 2018-10-6; size 1561 bytes
  MD5 checksum 6d3186042f54233219000927a2f196aa
  Compiled from &quot;PhoneOsEnum.java&quot;
public final class club.throwable.enumeration.PhoneOsEnum extends java.lang.Enum&amp;lt;club.throwable.enumeration.PhoneOsEnum&amp;gt;
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_FINAL, ACC_SUPER, ACC_ENUM
Constant pool:
   #1 = Fieldref           #4.#49         // club/throwable/enumeration/PhoneOsEnum.$VALUES:[Lclub/throwable/enumeration/PhoneOsEnum;
   #2 = Methodref          #50.#51        // &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;.clone:()Ljava/lang/Object;
   #3 = Class              #26            // &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;
   #4 = Class              #52            // club/throwable/enumeration/PhoneOsEnum
   #5 = Methodref          #17.#53        // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
   #6 = Methodref          #17.#54        // java/lang/Enum.&quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;I)V
   #7 = Fieldref           #4.#55         // club/throwable/enumeration/PhoneOsEnum.type:Ljava/lang/Integer;
   #8 = Fieldref           #4.#56         // club/throwable/enumeration/PhoneOsEnum.typeName:Ljava/lang/String;
   #9 = String             #18            // ANDROID
  #10 = Methodref          #57.#58        // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
  #11 = String             #59            // android
  #12 = Methodref          #4.#60         // club/throwable/enumeration/PhoneOsEnum.&quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
  #13 = Fieldref           #4.#61         // club/throwable/enumeration/PhoneOsEnum.ANDROID:Lclub/throwable/enumeration/PhoneOsEnum;
  #14 = String             #20            // IOS
  #15 = String             #62            // ios
  #16 = Fieldref           #4.#63         // club/throwable/enumeration/PhoneOsEnum.IOS:Lclub/throwable/enumeration/PhoneOsEnum;
  #17 = Class              #64            // java/lang/Enum
  #18 = Utf8               ANDROID
  #19 = Utf8               Lclub/throwable/enumeration/PhoneOsEnum;
  #20 = Utf8               IOS
  #21 = Utf8               type
  #22 = Utf8               Ljava/lang/Integer;
  #23 = Utf8               typeName
  #24 = Utf8               Ljava/lang/String;
  #25 = Utf8               $VALUES
  #26 = Utf8               [Lclub/throwable/enumeration/PhoneOsEnum;
  #27 = Utf8               values
  #28 = Utf8               ()[Lclub/throwable/enumeration/PhoneOsEnum;
  #29 = Utf8               Code
  #30 = Utf8               LineNumberTable
  #31 = Utf8               valueOf
  #32 = Utf8               (Ljava/lang/String;)Lclub/throwable/enumeration/PhoneOsEnum;
  #33 = Utf8               LocalVariableTable
  #34 = Utf8               name
  #35 = Utf8               &amp;lt;init&amp;gt;
  #36 = Utf8               (Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
  #37 = Utf8               this
  #38 = Utf8               Signature
  #39 = Utf8               (Ljava/lang/Integer;Ljava/lang/String;)V
  #40 = Utf8               getType
  #41 = Utf8               ()Ljava/lang/Integer;
  #42 = Utf8               getTypeName
  #43 = Utf8               ()Ljava/lang/String;
  #44 = Utf8               &amp;lt;clinit&amp;gt;
  #45 = Utf8               ()V
  #46 = Utf8               Ljava/lang/Enum&amp;lt;Lclub/throwable/enumeration/PhoneOsEnum;&amp;gt;;
  #47 = Utf8               SourceFile
  #48 = Utf8               PhoneOsEnum.java
  #49 = NameAndType        #25:#26        // $VALUES:[Lclub/throwable/enumeration/PhoneOsEnum;
  #50 = Class              #26            // &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;
  #51 = NameAndType        #65:#66        // clone:()Ljava/lang/Object;
  #52 = Utf8               club/throwable/enumeration/PhoneOsEnum
  #53 = NameAndType        #31:#67        // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
  #54 = NameAndType        #35:#68        // &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;I)V
  #55 = NameAndType        #21:#22        // type:Ljava/lang/Integer;
  #56 = NameAndType        #23:#24        // typeName:Ljava/lang/String;
  #57 = Class              #69            // java/lang/Integer
  #58 = NameAndType        #31:#70        // valueOf:(I)Ljava/lang/Integer;
  #59 = Utf8               android
  #60 = NameAndType        #35:#36        // &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
  #61 = NameAndType        #18:#19        // ANDROID:Lclub/throwable/enumeration/PhoneOsEnum;
  #62 = Utf8               ios
  #63 = NameAndType        #20:#19        // IOS:Lclub/throwable/enumeration/PhoneOsEnum;
  #64 = Utf8               java/lang/Enum
  #65 = Utf8               clone
  #66 = Utf8               ()Ljava/lang/Object;
  #67 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
  #68 = Utf8               (Ljava/lang/String;I)V
  #69 = Utf8               java/lang/Integer
  #70 = Utf8               (I)Ljava/lang/Integer;
{
  public static final club.throwable.enumeration.PhoneOsEnum ANDROID;
    descriptor: Lclub/throwable/enumeration/PhoneOsEnum;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_ENUM

  public static final club.throwable.enumeration.PhoneOsEnum IOS;
    descriptor: Lclub/throwable/enumeration/PhoneOsEnum;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_ENUM

  public static club.throwable.enumeration.PhoneOsEnum[] values();
    descriptor: ()[Lclub/throwable/enumeration/PhoneOsEnum;
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #1                  // Field $VALUES:[Lclub/throwable/enumeration/PhoneOsEnum;
         3: invokevirtual #2                  // Method &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;.clone:()Ljava/lang/Object;
         6: checkcast     #3                  // class &quot;[Lclub/throwable/enumeration/PhoneOsEnum;&quot;
         9: areturn
      LineNumberTable:
        line 9: 0

  public static club.throwable.enumeration.PhoneOsEnum valueOf(java.lang.String);
    descriptor: (Ljava/lang/String;)Lclub/throwable/enumeration/PhoneOsEnum;
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: ldc           #4                  // class club/throwable/enumeration/PhoneOsEnum
         2: aload_0
         3: invokestatic  #5                  // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
         6: checkcast     #4                  // class club/throwable/enumeration/PhoneOsEnum
         9: areturn
      LineNumberTable:
        line 9: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  name   Ljava/lang/String;

  public java.lang.Integer getType();
    descriptor: ()Ljava/lang/Integer;
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #7                  // Field type:Ljava/lang/Integer;
         4: areturn
      LineNumberTable:
        line 31: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lclub/throwable/enumeration/PhoneOsEnum;

  public java.lang.String getTypeName();
    descriptor: ()Ljava/lang/String;
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #8                  // Field typeName:Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 35: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lclub/throwable/enumeration/PhoneOsEnum;

  static {};
    descriptor: ()V
    flags: ACC_STATIC
    Code:
      stack=6, locals=0, args_size=0
         0: new           #4                  // class club/throwable/enumeration/PhoneOsEnum
         3: dup
         4: ldc           #9                  // String ANDROID
         6: iconst_0
         7: iconst_1
         8: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        11: ldc           #11                 // String android
        13: invokespecial #12                 // Method &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
        16: putstatic     #13                 // Field ANDROID:Lclub/throwable/enumeration/PhoneOsEnum;
        19: new           #4                  // class club/throwable/enumeration/PhoneOsEnum
        22: dup
        23: ldc           #14                 // String IOS
        25: iconst_1
        26: iconst_2
        27: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        30: ldc           #15                 // String ios
        32: invokespecial #12                 // Method &quot;&amp;lt;init&amp;gt;&quot;:(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/String;)V
        35: putstatic     #16                 // Field IOS:Lclub/throwable/enumeration/PhoneOsEnum;
        38: iconst_2
        39: anewarray     #4                  // class club/throwable/enumeration/PhoneOsEnum
        42: dup
        43: iconst_0
        44: getstatic     #13                 // Field ANDROID:Lclub/throwable/enumeration/PhoneOsEnum;
        47: aastore
        48: dup
        49: iconst_1
        50: getstatic     #16                 // Field IOS:Lclub/throwable/enumeration/PhoneOsEnum;
        53: aastore
        54: putstatic     #1                  // Field $VALUES:[Lclub/throwable/enumeration/PhoneOsEnum;
        57: return
      LineNumberTable:
        line 14: 0
        line 19: 19
        line 9: 38
}
Signature: #46                          // Ljava/lang/Enum&amp;lt;Lclub/throwable/enumeration/PhoneOsEnum;&amp;gt;;
SourceFile: &quot;PhoneOsEnum.java&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先看类的签名是&lt;code&gt;public final class club.throwable.enumeration.PhoneOsEnum extends java.lang.Enum&amp;lt;club.throwable.enumeration.PhoneOsEnum&amp;gt;&lt;/code&gt;，它的父类是java.lang.Enum，父类的泛型就是自身club.throwable.enumeration.PhoneOsEnum。上面的字节码的可读性相对比较低，直接翻译为Java代码(当然我们不能声明一个类直接继承java.lang.Enum，这里仅仅为了说明反编译后的枚举类的原型)如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public final class PhoneOsEnumeration extends Enum&amp;lt;PhoneOsEnumeration&amp;gt; {

    public PhoneOsEnumeration(String name, int ordinal, Integer type, String typeName) {
        super(name, ordinal);
        this.type = type;
        this.typeName = typeName;
    }

    public Integer getType() {
        return type;
    }

    public String getTypeName() {
        return typeName;
    }

    public static PhoneOsEnumeration[] values() {
        return $VALUES.clone();
    }

    public static PhoneOsEnumeration valueOf(String name) {
        return Enum.valueOf(PhoneOsEnumeration.class, name);
    }
    
    private final Integer type;
    private final String typeName;
    private static final PhoneOsEnumeration ANDROID;
    private static final PhoneOsEnumeration IOS;
    private static final PhoneOsEnumeration[] $VALUES;

    static {
        ANDROID = new PhoneOsEnumeration(&quot;ANDROID&quot;, 0, 1, &quot;android&quot;);
        IOS = new PhoneOsEnumeration(&quot;IOS&quot;, 1, 2, &quot;ios&quot;);
        $VALUES = new PhoneOsEnumeration[]{ANDROID, IOS};
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;概括来说就是成员变量都是通过静态代码块声明，这里注意一点父类Enum实例化的时候需要覆盖父类构造器&lt;code&gt;protected Enum(String name, int ordinal)&lt;/code&gt;，其他方法的实现都是十分简单。&lt;/p&gt;

&lt;p&gt;国际惯例，先看一下JavaSE-8的语言规范中&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.9&quot;&gt;JLS-8.9&lt;/a&gt;对枚举类型的定义和描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pazkqls86.bkt.clouddn.com/enum-1.png&quot; alt=&quot;enum-1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;感觉有点似曾相识，总结一下重要内容有以下几点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;枚举的声明格式是：&lt;code&gt;{ClassModifier} enum Identifier [Superinterfaces] EnumBody&lt;/code&gt;，ClassModifier是修饰符，Identifier是枚举的名称可以类比为类名，枚举类型可以实现接口。&lt;/li&gt;
&lt;li&gt;枚举类型不能使用abstract或者final修饰，否则会产生编译错误。&lt;/li&gt;
&lt;li&gt;枚举类型的直接超类是java.lang.Enum。&lt;/li&gt;
&lt;li&gt;枚举类型除了枚举常量定义之外没有其他实例，也就是枚举类型不能实例化。&lt;/li&gt;
&lt;li&gt;枚举类型禁用反射操作进行实例化(这个特性就是Effetive Java中推荐使用枚举实现单例的原因)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;枚举的公共父类java.lang.Enum的源码如下(已经去掉全部注释)：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public abstract class Enum&amp;lt;E extends Enum&amp;lt;E&amp;gt;&amp;gt;
        implements Comparable&amp;lt;E&amp;gt;, Serializable {

    private final String name; 

    public final String name() {
        return name;
    } 

    private final int ordinal;

    public final int ordinal() {
        return ordinal;
    }

    protected Enum(String name, int ordinal) {
        this.name = name;
        this.ordinal = ordinal;
    }

    public String toString() {
        return name;
    }

    public final boolean equals(Object other) {
        return this==other;
    }

    public final int hashCode() {
        return super.hashCode();
    } 

    protected final Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }  

    public final int compareTo(E o) {
        Enum&amp;lt;?&amp;gt; other = (Enum&amp;lt;?&amp;gt;)o;
        Enum&amp;lt;E&amp;gt; self = this;
        if (self.getClass() != other.getClass() &amp;amp;&amp;amp; // optimization
            self.getDeclaringClass() != other.getDeclaringClass())
            throw new ClassCastException();
        return self.ordinal - other.ordinal;
    }

    public final Class&amp;lt;E&amp;gt; getDeclaringClass() {
        Class&amp;lt;?&amp;gt; clazz = getClass();
        Class&amp;lt;?&amp;gt; zuper = clazz.getSuperclass();
        return (zuper == Enum.class) ? (Class&amp;lt;E&amp;gt;)clazz : (Class&amp;lt;E&amp;gt;)zuper;
    } 

    public static &amp;lt;T extends Enum&amp;lt;T&amp;gt;&amp;gt; T valueOf(Class&amp;lt;T&amp;gt; enumType,
                                                String name) {
        T result = enumType.enumConstantDirectory().get(name);
        if (result != null)
            return result;
        if (name == null)
            throw new NullPointerException(&quot;Name is null&quot;);
        throw new IllegalArgumentException(
            &quot;No enum constant &quot; + enumType.getCanonicalName() + &quot;.&quot; + name);
    }  

    protected final void finalize() { }

    private void readObject(ObjectInputStream in) throws IOException,
        ClassNotFoundException {
        throw new InvalidObjectException(&quot;can't deserialize enum&quot;);
    }

    private void readObjectNoData() throws ObjectStreamException {
        throw new InvalidObjectException(&quot;can't deserialize enum&quot;);
    }                              
}            &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大部分方法都比较简单，值得注意的几点是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、&lt;code&gt;valueOf&lt;/code&gt;方法依赖到的&lt;code&gt;Class&amp;lt;?&amp;gt;#enumConstantDirectory()&lt;/code&gt;，这个方法首次调用完成之后，结果会缓存在&lt;code&gt;Class&amp;lt;?&amp;gt;#enumConstantDirectory&lt;/code&gt;变量中。&lt;/li&gt;
&lt;li&gt;2、Enum实现了Serializable接口，但是&lt;code&gt;readObject&lt;/code&gt;和&lt;code&gt;readObjectNoData&lt;/code&gt;直接抛出了InvalidObjectException异常，注释说到是&quot;防止默认的反序列化&quot;，这一点有点不明不白，既然禁用反序列化为何要实现Serializable接口，这里可能考虑到是否实现Serializable接口应该交给开发者决定。&lt;/li&gt;
&lt;li&gt;3、Enum禁用克隆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JDK中枚举的底层实现就是使用了enum关键字声明的枚举类编译后最终会变成public final修饰同时实现了泛型接口java.lang.Enum并且指定泛型参数为自身的普通Java类，而成员属性和方法实现相关都是在编译完成后就已经成型的，枚举类型的成员变量都是通过静态代码块声明的。&lt;/p&gt;
&lt;p&gt;(本文完 c-1-d e-20181006)&lt;/p&gt;
</description>
<pubDate>Sat, 06 Oct 2018 14:45:00 +0000</pubDate>
<dc:creator>throwable</dc:creator>
<og:description>前提 上一篇文章复习介绍了JDK中注解的底层实现，跟注解一样比较常用，但是底层实现比较神秘的还有枚举类型。趁着国庆假期的最后两天，把JDK中枚举的底层实现也进行一次探究。 通过例子查找本质 在探究JD</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/throwable/p/9748911.html</dc:identifier>
</item>
<item>
<title>有 a - b &lt; c 引发的安全性思考 - 阿两君</title>
<link>http://www.cnblogs.com/fuguoliang/p/9748882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fuguoliang/p/9748882.html</guid>
<description>&lt;p&gt;　　软件工程中，不论使用哪种开发语言，安全性一直是一个非常棘手却又重要的问题。安全性是软件开发领域永远的主题之一，而且随着互联网的蜂拥发展而带动的新技术的兴起与革命（比如近几年火起来的node.js，python，go等，甚至微软也开源后的.net Core），软件工程中的安全性更加的凸显与重要了。&lt;/p&gt;
&lt;p&gt;　　那么，什么才是危险的呢？我的第一反应是注入攻击，比如SQL注入攻击。一个典型的场景是WEB应用中，用户登陆功能，根据用户输入的用户名密码获取相应的数据，那么SQL注入就应运而生，模拟用户名，密码加入特殊字符，加入恶意脚本等等手段，进而造成不了可挽回的后果。比如，正常脚本当如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; userInfo &lt;span&gt;where&lt;/span&gt; username&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_Name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; password&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_Pwd or&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　那么，如果是这样的呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; userInfo &lt;span&gt;where&lt;/span&gt; username&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_Name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; password&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_Pwdte&lt;/span&gt;&lt;span&gt;' or 1=1 or ''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　关于如何编写安全的Java代码，Sun官方给了一份指南，有兴趣的同学可以参考&lt;a href=&quot;https://blog.csdn.net/pragmatic/article/details/1490927&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;，大致为：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;　　　　• 静态字段&lt;br/&gt;　　　　• 缩小作用域&lt;br/&gt;　　　　• 公共方法和字段&lt;br/&gt;　　　　• 保护包&lt;br/&gt;　　　　• equals方法&lt;br/&gt;　　　　• 如果可能使对象不可改变&lt;br/&gt;　　　　• 不要返回指向包含敏感数据的内部数组的引用&lt;br/&gt;　　　　• 不要直接存储用户提供的数组&lt;br/&gt;　　　　• 序列化&lt;br/&gt;　　　　• 原生函数&lt;br/&gt;　　　　• 清除敏感信息&lt;/p&gt;
&lt;p&gt;　　比如，DoS是一种常见的网络攻击，有人戏称为“洪水攻击”。其惯用手法是通过某种手段，比如大量的机器发送请求，将目标网站宽带和其资源耗尽，导致用户无法正常访问，甚至服务器的宕机。&lt;/p&gt;
&lt;p&gt;　　而对于此类问题，如果单从服务器级别考虑，多少欠缺，我们或许需要考虑程序级别的攻击，比如Java，JVM，以及涉及到的线程方面的安全，应用程序的瑕疵等进行低成本的DoS攻击。&lt;/p&gt;
&lt;p&gt;　　而在面试中，我们都会被问到安全性的问题，却大多比较多泛泛，大而广，而大多数的安全性问题都与代码安全性有关。我们回顾下Java代码的运行过程：&lt;/p&gt;
&lt;p&gt;　　首先编译器把.java文件编程成.class字节码文件，然后由类加载器负责把.class文件加载到JVM，再由字节码校验进行校验，然后由Java解释器负责把该类文件解释为机器码执行。&lt;/p&gt;
&lt;p&gt;　　在类加载器加载.class文件到java虚拟机的过程中，类加载器通过区分本机文件系统的类和网络系统导入的类增加安全性（不允许网络上的应用程序修改本地的数据），本机的类先被加载，一旦所有的类加载完，执行文件的内存划分就固定了，然后字节码校验器开始校验.class字节码文件，字节码校验器不检查那些可信任的编译器所产生的类文件。通过之后，java解释器材负责把类文件解释成为机器码进行执行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//  a b c 都是int类型的数值
        if (a - b &amp;lt; c) { 
            // … 
    }
    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这段看似简单，没毛病的代码会引发下列问题：&lt;/p&gt;
&lt;p&gt;　　如果b&amp;lt;0，而造成的数据溢出，你能想象出多少问题？！而对于越界的处理虽然Java底层给出了很好的解决，但是数值而造成内存问题不容小觑。&lt;/p&gt;
&lt;p&gt;　　当然，过多的考虑安全性问题，势必会造成应用程序的冗余甚至疲软，这些需要视情况而定，而不可盖棺而论。&lt;/p&gt;
&lt;p&gt;　　再比如，对于一段可能出现问题的代码，常用手段 try … catch(){… },那么问题来了，catch的是什么？而一般情况下，我们程序需要抓取到catch，因为要做日志处理，那么日志中不可或缺的有类似代码位置，方法名，以及错误原因等，甚至包含了敏感信息。当然，不可避免，我的建议是，尽量使用内部标识的异常信息，而返回给客户端的类似异常消息尽量少的自动返回的异常消息。&lt;/p&gt;
&lt;p&gt;　　对于安全标准特别高的系统，甚至可能要求敏感信息被使用后，要立即明确再内存中销毁，以免被探测到；或者避免在发生core dump时，意外暴露。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;开发和测试阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　1. 尽量的规范化代码，可参考《阿里巴巴开发手册》&lt;/p&gt;
&lt;p&gt;　　　2. 尽量多的code review，避免不必要尴尬代码出现&lt;/p&gt;
&lt;p&gt;　　　3. 在代码check-in等环节，利用hook机制去调用规则检查工具，保证不合规范代码进入OpenJDK代码库&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;部署阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   　　可参考JDK在加密方法的&lt;a href=&quot;https://java.com/en/jre-jdk-cryptoroadmap.html&quot; target=&quot;_blank&quot;&gt;路线图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　以上皆为日常开发总结，也借鉴网上大神的文章，略略整理一二，权作学习使用，当然面试能帮到不慎感动了，以后有机会再做梳理。&lt;/p&gt;
&lt;p&gt;　　欢迎指点。&lt;/p&gt;

</description>
<pubDate>Sat, 06 Oct 2018 14:35:00 +0000</pubDate>
<dc:creator>阿两君</dc:creator>
<og:description>软件工程中，不论使用哪种开发语言，安全性一直是一个非常棘手却又重要的问题。安全性是软件开发领域永远的主题之一，而且随着互联网的蜂拥发展而带动的新技术的兴起与革命（比如近几年火起来的node.js，py</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fuguoliang/p/9748882.html</dc:identifier>
</item>
<item>
<title>《人件》读书笔记 - pokid</title>
<link>http://www.cnblogs.com/pokid/p/9748874.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pokid/p/9748874.html</guid>
<description>&lt;p&gt;&lt;span&gt;刚读完《人件》一书，我作为一个有过工作经历但没有管理经验的学生对此书是极为推崇的，“对美国软件业影响最大的一本书”是对《人件》的最高评价了。什么是“人件”，很多项目走向失败，不是因为技术问题，而是因为管理出现了问题，问题出现在“人”身上，包括管理者和被管理者。“人”是一切问题的根源，但也是解决问题的根本，对于与软件和硬件，“人件”一词由此而来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;管理人力资源&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;         本书开篇作者直接提出：也许软件系统的主要人问题不在于技术，而在于社会性因素。我相信有过工作经验的一定都会产生心理共鸣，虽然我只是一个有过短暂工作经历的学生，我看到这个提议时也深有感触。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       很多管理者用编程中的模块化思想来管理人，认为人是可随时替换的，殊不知人的社会性，不知我们工作的问题更多是属于社会学范畴而非技术范畴，人犯错在所难免。模块化方法对人并不适用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       同样，踢屁股式的管理对于脑力劳动者是无效的，因为这会阻断他们的创新丶创造及思考。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       管理者：要有足够的洞察力丶人性化，认识到员工的独特个性是使得项目团队产生的化学反应，是团队充满活力与高效的源泉，不能盲目尊崇生产世界的管理风格。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       管理者要谨记任何项目生命周期的最终目标就是结束自己，所以稳定的生产思维对项目工作尤为有害。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       采取的任何提高生产率方法：施压丶标准机械化丶牺牲产品质量丶标准化等，这些都可能造成人员流失。压力不会让人工作的更好，只是工作的更快，从而不得不牺牲产品质量以及自身的工作体验，做出不满意的产品会让员工变得不自信，而在工作环境中，情绪的主要导火线是最自信的威胁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       质量远远不只是最终用户的需求，而是达到高产能的一种方法。以日本为例，价格和质量的对立在日本并不存在，相反，高质量带来成本的下降却是被广泛接受的想法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       一个组织的工作如果都忙忙碌碌，就会膨胀以至于充满整个工作日，这并不是一件好事，帕金森定律被接受并不是因为它是真理，而是因为它有趣。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       列举软件管理的七个假象：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  有一个你不知道的新窍门可以让产能飙升&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  其他管理者正在收获100%丶200%甚至更多的成长&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  技术日新月异，你已经过时啦&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  改变程序语言会给你带来巨大的提升&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  因为库存的缘故，你需要马上让产能翻倍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  你自动化了其他所有东西，难道不是要你自动化掉你的软件开发人员吗&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  你的员工在巨大的压力下工作的更好&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;办公环境&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;         管理者的作用不是让大家去工作，而是创造环境，让大家可以顺利的开展工作。这一章节强调了办公环境对人的工作效率的影响之大，没人会在嘈杂拥挤的环境下还能带来高产出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       理想的工作状态：“流状态”，一种深度的近乎于冥想的融入情况。如果没有好的办公环境员工甚至一次都不能进入这种状态，更别谈工作效率和产出了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       作者给出了一些参考模式来设计办公环境：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  从工具箱里定制工作空间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  窗户&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  室内和室外空间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  公共空间（“亲密梯度”）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;正确的人&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;         人既是个体的人，又是群体的人。人的个体属性和集体倾向性都得到了认可，从而让人能够自由发挥。一个项目无论做出何种努力，最终结果更多的在于是谁来做而不是怎么做。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       所以项目取得成功的方式是：找到合适的人；让他们愉快工作不愿意离开；让他们自由发挥。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;高效团队养成&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;         及时是最好的团队，你也需要协调每个人的贡献从而形成一个集体，但那是管理中相对有章可循的部分。对大多数尝试者来说，成功还是失败在组建团队并形成最初方向的时候就已经设定了。一旦拥有一群才能超卓的成员，管理者就可以在开动后退居二线了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       管理热力学第二定律：组织里的熵总是增加的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       你所在的组织可能已经僵化了，但可以让你负责的部门幸免于难。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       作者对于组织中的领导力倾向于托洛茨基革命派的：领导力并不是从我们身上压榨出什么东西，而是一个服务：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  主动承担任务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  明显的胜任工作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  为任务提前做足功课&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  让每个人创造最大的价值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  实施过程中保持幽默和明显的善意&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种领导力是人们创新以及敢于突破行业限制的标志，组织里需要具有这种领导力的人。同时，一个健康组织里所必须的，是能够为员工经常提供独立的自我评价的机会。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       我们的行业决定了沟通的重要性，团队内部及与外部的沟通。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       一代人的科技成为了下一代人的环境。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;认可“流”状态的管理者需要对持续不断的注意力进行限制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“永恒之地”：最优秀的组织会有意识的去追去称为最佳；短期不是唯一重要的事情，重要的是我们要成为最好的，这是一个长期概念。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;工作中的挑战固然重要，但重要的不是它本身，而是他指引着我们共同努力的方向。挑战是我们成为整体的载体。整体大于部分之和，一个团队最重要的死有凝聚力。团队存在的目标不是达成目标，而是让目标一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;团队活动的愉悦以及互动产生的动力是我们建立互信的基础，要避免“团队自毁”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;造成“团队自毁”的可能因素有：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  防御式管理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  官僚主义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  物理分隔&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  时间碎片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  牺牲产品质量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  伪造截止日期&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  团伙控制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  可恶的标记和纪念碑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  加班：一种额外的副作用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  年度薪酬评审&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  目标管理法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  表彰个别员工突出成就&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  绩效相关的证书丶奖励和奖金&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  任何形式的绩效考核&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正确的比喻是把团队类比为音乐组合而不是体育组合，在音乐组合中，整个组合的成功才算是成功，人们不会因为你一个人的表演而欢呼喝彩。团队亦是如此，个体的成功是完全建立在集体成功之上的。而成功会孕育成功，高产的和谐会带来更高产的和谐。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       最棒的成功是看不到任何明显的管理，团队是平等而友好的个体的聚合；最棒的老板是这样不断的管理却让团队感受不到被管理。作为老板，既然做到了唯才是举丶人尽其才，就要做到用人不疑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       臭鼬工程：项目在上层管理不知情的情况下悄然展开。当然这种不服从管理的行为非常冒险，可是谁能保证管理者不出错呢。臭鼬工程的存在不是鼓励我们这样做，而是鼓励我们敢于打破规则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       团队健康的元素包含：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  建立对质量的执着追求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  提供诸多满意的闭环&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  建立精英意识&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  允许和鼓励差异性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  维护和保护成功团队&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  提供战略而不是战术方向&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一流的管理者知道人们不能被任何合理方法控制。成功管理的核心是让大家齐心协力，然后助推大家到一个连管理者自己都无法让他们停止的点。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;       沃土&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;“沃土”，即企业文化的重要性。系统分为确定性和不确定性，让系统变为确定性会导致它失去治愈自身的能力。由人组成的团队也会丧失自我愈复的能力，到了一定程度就变得确定。企业应搭建一个能自我修复的系统，合理的控制风险，做到方法收敛。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;方法收敛的途径包括：培训丶工具丶同行评审等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;风险管理的本质：不是让所有的风险消失，而是确保风险发生时有相应的措施。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;终极的管理罪恶是浪费大家的时间。企业需要的是开放空间会议，避免仪式性会议，避免垃圾邮件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例会的真正目的是状态的确认，并且不是针对工作状态，而是老板的状态；今天我们协调沟通的花销比以往任何时候都高，大部分邮件就是问题的一部分，而非解决方案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;人生短暂，如果你需要知道所有才能工作，你可能走不了多远。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也许你不能改变整个公司，但你能改变与你共事的同时及下属的工作方式。人们天性讨厌改变：所有受益于旧秩序的人都将成为他的敌人，而也许会受益于新秩序的人只可能成为他缺乏热情的保卫者，因为不确定性比起潜在获益更深入人心。需要认识到的是：拥护改变的真正盟友是“相信但保持质疑”的人，而敌人是“盲目尊崇”和“激烈反对”的人。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对改变的基本反应并非逻辑思考得来的，而是情绪化的，要用感恩旧方式的方式来帮助推动改变，这就强调了发起改变的“人”的重要性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;变化模型（萨提亚模式）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;外来元素       替换思想&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;旧标准  ——  》混乱  ——》  实践与整合——》新标准&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面所做的事情都是为了构建员工社区准备的，构建社区涉及到了哲学里的政治问题。创建一个社区需要天分丶勇气和创造力，同时你需要付出更多的时间。当然你不能单打独斗，最好能成为一种催化剂。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;       快乐的工作&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;       管理者应该使员工快乐的工作，而不是剥夺他们的快乐以一味地追求最大效率化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       建设性的重新引入少量无序从而给工作注入更多的能量，包括：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  试点项目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  战争游戏&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  头脑风暴：类比思考丶反其道行之丶身临其境&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  激发性训练&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;l  培训丶旅行丶会议丶庆祝和撤退&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于产出远大于价值的员工，可提供“自由电子”式的职位。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 06 Oct 2018 14:31:00 +0000</pubDate>
<dc:creator>pokid</dc:creator>
<og:description>《人件》读书笔记 刚读完《人件》一书，我作为一个有过工作经历但没有管理经验的学生对此书是极为推崇的，“对美国软件业影响最大的一本书”是对《人件》的最高评价了。什么是“人件”，很多项目走向失败，不是因为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pokid/p/9748874.html</dc:identifier>
</item>
<item>
<title>一言难尽的js变量提升面试题 - 漫思</title>
<link>http://www.cnblogs.com/sexintercourse/p/9748827.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sexintercourse/p/9748827.html</guid>
<description>&lt;p&gt;&lt;strong&gt;在这个课题开始之前我们先做一些基础知识的讲解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、在顶级的区域内声明的变量为 window级别的变量。 也就是说var a=100 等价于 window.a=100;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、局部的重新声明变量没有意义。var a=100;var a;后面的将没有意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、在有参数函数的定义中 function abc(p1){} abc(1),在函数执行中，先构建，在执行，会有两个步骤，所以说当函数执行之前构建过程中，将临时生成代码 var p1=1;将来一切不赋值的声明将变得没有意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;var p1;//没有意义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;var p1=2;//有意义。&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;全局作用域和局部作用域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全局作用域：整个JS执行环境&lt;/p&gt;
&lt;p&gt;局部作用域：通过创建一个函数就开辟出了一个局部作用域&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全局变量和 局部变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全局变量：在全局作用域都可以访问的变量&lt;/p&gt;
&lt;p&gt;局部变量：只能在当前局部作用域访问的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变量声明提升：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果变量声明在函数里面，则将变量声明提升到函数的开头&lt;/p&gt;
&lt;p&gt;如果变量声明是一个全局变量，则将变量声明提升到全局作用域的开头&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;变量运行（搜索）机制：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先看，有没有局部作用域&lt;/p&gt;
&lt;p&gt;如果有，查找是不是这个局部作用域定义的变量&lt;/p&gt;
&lt;p&gt;如果不是，寻找上一级作用域，直到找到全局作用域&lt;/p&gt;
&lt;p&gt;如果全局作用域也找不到这个变量，这个变量就是未定义的 undefined&lt;/p&gt;

&lt;p&gt;第一题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a=1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test(){
    console.log(a);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a=1&lt;span&gt;;
}
test();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据变量声明提升和变量搜索机制，函数test（）应为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; a;
    console.log(a);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时由于a并咩有被赋值，所以也就是undefined&lt;/span&gt;
        a=1&lt;span&gt;;
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; b=2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test2(){
    window.b&lt;/span&gt;=3&lt;span&gt;;
    console.log(b);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;值为3&lt;/span&gt;
&lt;span&gt;}
test2();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;任何通过附加在window上的变量都相当于声明一个全局变量，或者是给全局变量赋值&lt;/p&gt;

&lt;p&gt;第三题：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
c=5&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test3(){
    window.c&lt;/span&gt;=3&lt;span&gt;;
    console.log(c);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; c;
    console.log(window.c);
}
test3();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据变量声明提升和变量搜索机制：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
c=5;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个全局变量c &lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test3(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; c;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;变量声明提升，声明一个局部变量&lt;/span&gt;
    window.c=3;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变全局变量c的值&lt;/span&gt;
    console.log(c);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;由于此时的c是一个局部变量c，并且没有被赋值 c就是undefined    &lt;/span&gt;
    console.log(window.c);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时的c就是一个全局变量c，也就是值为3&lt;/span&gt;
&lt;span&gt;}
test3();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 06 Oct 2018 14:16:00 +0000</pubDate>
<dc:creator>漫思</dc:creator>
<og:description>基础知识 在这个课题开始之前我们先做一些基础知识的讲解 1、在顶级的区域内声明的变量为 window级别的变量。 也就是说var a=100 等价于 window.a=100; 2、局部的重新声明变量</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sexintercourse/p/9748827.html</dc:identifier>
</item>
<item>
<title>面向切面编程(AOP) - 从未太晚</title>
<link>http://www.cnblogs.com/kongsq/p/9748763.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kongsq/p/9748763.html</guid>
<description>&lt;p&gt;&lt;span&gt;结合设计模式,通过代码理解面向切面编程，有代码的很好理解的，5分钟可以看三遍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过,结构型设计模式，装饰器模式来实现AOP，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 装饰器模式实现静态代理
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; AOP 在方法前后增加自定义的方法
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DecoratorAOP
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Show()
        {
            User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eleven&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123123123123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接调用&lt;/span&gt;
            IUserProcessor processor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserProcessor();
            processor.RegUser(user);
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;***************&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过装饰器模式,在方法执行前后添加功能&lt;/span&gt;
            processor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserProcessorDecorator(processor);
            processor.RegUser(user);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProcessor : IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户已注册。Name:{0},PassWord:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, user.Name, user.Password);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 装饰器的模式去提供一个AOP功能
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProcessorDecorator : IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; IUserProcessor _UserProcessor { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserProcessorDecorator(IUserProcessor userprocessor)
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;._UserProcessor =&lt;span&gt; userprocessor;
            }

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user)
            {
                BeforeProceed(user);

                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._UserProcessor.RegUser(user);

                AfterProceed(user);
            }

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 业务逻辑之前
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;user&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; BeforeProceed(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行前&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 业务逻辑之后
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;user&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; AfterProceed(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行后&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过,结构型设计模式，代理模式来实现AOP，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
   &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 代理模式实现静态代理
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; AOP 在方法前后增加自定义的方法
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProxyAOP
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Show()
        {
            User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eleven&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123123123123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };
            IUserProcessor processor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserProcessor();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接调用方法&lt;/span&gt;
&lt;span&gt;            processor.RegUser(user);
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;***************&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现AOP,在执行前后加其他方法&lt;/span&gt;
            processor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProxyUserProcessor();
            processor.RegUser(user);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user);
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProcessor : IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户已注册。Name:{0},PassWord:{1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, user.Name, user.Password);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 代理模式去提供一个AOP功能
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProxyUserProcessor : IUserProcessor
        {
            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; IUserProcessor _UserProcessor = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserProcessor();

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegUser(User user)
            {
                BeforeProceed(user);
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;._UserProcessor.RegUser(user);
                AfterProceed(user);
            }

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 业务逻辑之前
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;user&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; BeforeProceed(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行前&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 业务逻辑之后
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;user&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; AfterProceed(User user)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;方法执行后&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过Unity实现AOP,配置太复杂就不贴了。。。就一个实现类的代码,可以用于添加方法的日志,异常处理,不用修改方法本身,不用挨个方法+Log.Info()了,通过Unity(IOC)创建的对象都能用，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogBeforeBehavior : IInterceptionBehavior
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Type&amp;gt;&lt;span&gt; GetRequiredInterfaces()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Type.EmptyTypes;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IMethodReturn Invoke(IMethodInvocation input, GetNextInterceptionBehaviorDelegate getNext)
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogBeforeBehavior&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.WriteLine(input.MethodBase.Name);
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; input.Inputs)
            {
                Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(item));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;反射&amp;amp;序列化获取更多信息&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; getNext().Invoke(input, getNext);&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; WillExecute
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;; }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 再加一个Unity创建对象和调用的代码吧,NuGet添加Unity的引用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UnityConfigAOP
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Show()
        {
            User user &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eleven&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Password &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;12345678934534643&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };
             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个是代码块,好神奇的呦&lt;/span&gt;
&lt;span&gt;            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置UnityContainer&lt;/span&gt;
                IUnityContainer container = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UnityContainer();
                ExeConfigurationFileMap fileMap &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExeConfigurationFileMap();
                fileMap.ExeConfigFilename &lt;/span&gt;= Path.Combine(AppDomain.CurrentDomain.BaseDirectory + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CfgFiles\\Unity.Config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                Configuration configuration &lt;/span&gt;=&lt;span&gt; ConfigurationManager.OpenMappedExeConfiguration(fileMap, ConfigurationUserLevel.None);
                UnityConfigurationSection configSection &lt;/span&gt;=&lt;span&gt; (UnityConfigurationSection)configuration.GetSection(UnityConfigurationSection.SectionName);
                configSection.Configure(container, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aopContainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

                IUserProcessor processor &lt;/span&gt;= container.Resolve&amp;lt;IUserProcessor&amp;gt;&lt;span&gt;();
                processor.RegUser(user);

            }
        }
    }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt; &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 06 Oct 2018 14:09:00 +0000</pubDate>
<dc:creator>从未太晚</dc:creator>
<og:description>结合设计模式,通过代码理解面向切面编程，有代码的很好理解的，5分钟可以看三遍 通过,结构型设计模式，装饰器模式来实现AOP，代码如下 通过,结构型设计模式，代理模式来实现AOP，代码如下 通过Unit</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kongsq/p/9748763.html</dc:identifier>
</item>
</channel>
</rss>