<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>我的第一个python web开发框架（40）——后台日志与异常处理 - AllEmpty</title>
<link>http://www.cnblogs.com/EmptyFS/p/9645798.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/EmptyFS/p/9645798.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　后台权限和底层框架的改造终于完成了，小白也终于可以放下紧悬着的心，可以轻松一下了。这不他为了感谢老菜，又找老菜聊了起来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;小白：&lt;/strong&gt;&lt;/span&gt;多谢老大的帮忙，系统终于改造完成了，可以好好放松一下了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;老菜：&lt;/strong&gt;&lt;/span&gt;呵呵，对于后台管理系统功能，你觉得已经完工了吗？没有什么遗漏的吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;小白：&lt;/strong&gt;&lt;/span&gt;啊......权限管理完成后不就完了吗？还有功能要弄的吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;老菜：&lt;/span&gt;&lt;/strong&gt;如果光从使用角度来说，也可能说完成了，但还有一些细节还需要处理的，比如说日志和异常。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;小白：&lt;/strong&gt;&lt;/span&gt;前面不是做过日志处理了，将所有的异常都自动写到日志中，方便开发人员分析查看，还能自动发送异常通知邮件，另外对于客户端提交的所有数据，在bottle勾子那里也做了处理，都写入到日志中了，还有什么要处理的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;老菜：&lt;/span&gt;&lt;/strong&gt;对于日志来说可以分为两块：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一是管理员的操作日志，因为后台管理操作涉及到数据安全，管理员的所有操作都需要记录下来，以便发生问题时可以找到关系人，同时有些业务系统交给相关人员使用以后，BOSS却不知道他们到底有没有登录使用，每天在系统做什么；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　二是系统的异常和关键数据的记录，这个属于系统底层的日志，将所有异常和与金钱相关的操作信息全部记录下来，有故障时开发人员可以根据日志快速定位，及时修复问题。这方面我们前面已经做一部分了，在前面底层很多地方都做了try...except...处理，这是很必要的，但你有没有发现，我们的代码在本地经常运行的好好的，而将代码更新上服务器后即经常爆500错误却不知道，想要排查异常时也很不方便，但查看uwsgi等多个系统日志才行，有些异常你查来查去都查不出来，非常浪费时间，你清楚这些异常主要是由什么引起的吗？有没有想过用什么方法也可以做到实时通过推送通知了解这些错误呢？当然对于异常的发生是很难避免的，但是我们可以通过一些手段，让这些异常发生后即时通过邮件或微信等方式，将异常详情通知我们，然后快速修复问题。如果你对系统非常熟悉的话，有可能用户还没反应过来，十几秒你就将故障修复了，做到人不知鬼不觉，哈哈。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;小白：&lt;/strong&gt;&lt;/span&gt;是啊，异常问题是我最大痛的事情，很多时候明明本地调试的好好的，一到服务就挂了，找到找去也找不出问题所在，浪费了大量的时间。那么我们要怎么来进行改造呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;老菜：&lt;/strong&gt;&lt;/span&gt;接下来你看我讲解就知道了，主要是对已有代码进行修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在前面的数据结构设计时，我们有一个管理员操作日志表，接下来的改造主要是对这个表进行相关的操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们需要创建这个日志表的逻辑类，由于我们的ORM是用字典来进行增改操作的，所以需要先组合字段字典，然后再执行对应的方法，为了让操作简化，我们需要在日志表逻辑类中添加一个方法，通过传参的方式来进行日志的添加操作，这样就可以免去我们组合字典的操作了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; logic &lt;span&gt;import&lt;/span&gt;&lt;span&gt; _logic_base
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; common.string_helper &lt;span&gt;import&lt;/span&gt;&lt;span&gt; string
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; config &lt;span&gt;import&lt;/span&gt;&lt;span&gt; db_config
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ManagerOperationLogLogic(_logic_base.LogicBase):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;管理员操作日志管理表逻辑类&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 表名称&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         self.&lt;span&gt;__table_name&lt;/span&gt; = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;manager_operation_log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         _logic_base.LogicBase.&lt;span&gt;__init__&lt;/span&gt;(self, db_config.DB, db_config.IS_OUTPUT_SQL, self.&lt;span&gt;__table_name&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_operation_log(self, manager_id, manager_name, ip, remark):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;记录用户登录日志&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 组合要更新的字段内容&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         fields = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;manager_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:manager_id, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;manager_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:string(manager_name), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:string(ip), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;remark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:string(remark)}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 新增记录&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         self.add_model(fields)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　从代码中可以看到，add_operation_log()方法，它其实就是将要更新到数据库的参数传进来，在方法里组合成字典，然后调用add_model()进行更新操作，调用时用下面代码就可以了&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;_manager_operation_log_logic.add_operation_log(manager_id, manager_name, ip, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;登陆成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　完成这个操作日志逻辑类和日志添加方法以后，要改造登录接口就简单多了，只需要在出错（密码错误、禁用）和成功时进行调用，记录到数据表就可以了，具体看代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　登录接口除了需要添加日志记录以外，还需要处理一个安全问题，我们没有对多次输出密码错误进行处理，如果有人想要登录系统写个密码劳举器，可能很容易后台就给人攻破了，所以我们需要对这个做一个限制，比如说同一ip在指定时间内只能出错多少次，每次出错时都记录一下出错次数，当出错次数超出限制时，则拒绝用户登录。具体自行查看代码，这里我就不再详细说明了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('85d60f48-5edc-4b3b-881b-7ac4ed567b17')&quot; readability=&quot;48.5&quot;&gt;&lt;img id=&quot;code_img_closed_85d60f48-5edc-4b3b-881b-7ac4ed567b17&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_85d60f48-5edc-4b3b-881b-7ac4ed567b17&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('85d60f48-5edc-4b3b-881b-7ac4ed567b17',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_85d60f48-5edc-4b3b-881b-7ac4ed567b17&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; bottle &lt;span&gt;import&lt;/span&gt;&lt;span&gt; put
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; common &lt;span&gt;import&lt;/span&gt;&lt;span&gt; web_helper, encrypt_helper, security_helper
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; common.string_helper &lt;span&gt;import&lt;/span&gt;&lt;span&gt; string
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; logic &lt;span&gt;import&lt;/span&gt;&lt;span&gt; manager_logic, manager_operation_log_logic
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; @put(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/api/login/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; post_login():
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;用户登陆验证&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取并验证客户端提交的参数&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;     username = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;帐号&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     password = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;密码&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;     verify = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;verify&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;验证码&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     ip =&lt;span&gt; web_helper.get_ip()
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从session中读取验证码信息&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;     s =&lt;span&gt; web_helper.get_session()
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     verify_code = s.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;verify_code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除session中的验证码（验证码每提交一次就失效）&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;verify_code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; s:
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;del&lt;/span&gt; s[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;verify_code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        s.save()
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断用户提交的验证码和存储在session中的验证码是否相同&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; verify.upper() !=&lt;span&gt; verify_code:
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;验证码错误&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 判断用户登录失败次数，超出次做登录限制 ###&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取管理员登录密码错误限制次数，0=无限制，x次/小时&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;     limit_login_count = 10
&lt;span&gt; 38&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取操作出错限制值&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;     is_ok, msg, operation_times_key, error_count = security_helper.check_operation_times(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_error_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, limit_login_count, False)
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断操作的出错次数是否已超出了限制&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; is_ok:
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1&lt;span&gt;, msg)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 获取登录用户记录，并进行登录验证 ###&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化操作日志记录类&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;     _manager_operation_log_logic =&lt;span&gt; manager_operation_log_logic.ManagerOperationLogLogic()
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化管理员逻辑类&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;     _manager_logic =&lt;span&gt; manager_logic.ManagerLogic()
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从数据库中读取用户信息&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;     manager_result = _manager_logic.get_model_for_cache_of_where(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_name=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; string(username))
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断用户记录是否存在&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; manager_result:
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;账户不存在&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取管理员id&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;     manager_id =  manager_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 0)
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取管理员姓名&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;     manager_name = manager_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 验证用户登录密码与状态 ###&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对客户端提交上来的验证进行md5加密将转为大写（为了密码的保密性，这里进行双重md5加密，加密时从第一次加密后的密串中提取一段字符串出来进行再次加密，提取的串大家可以自由设定）&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; pwd = encrypt_helper.md5(encrypt_helper.md5(password)[1:30]).upper()&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 对客户端提交上来的验证进行md5加密将转为大写（只加密一次）&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;     pwd =&lt;span&gt; encrypt_helper.md5(password).upper()
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 检查登录密码输入是否正确&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; pwd != manager_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).upper():
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录出错次数&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        security_helper.add_operation_times(operation_times_key)
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录日志&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         _manager_operation_log_logic.add_operation_log(manager_id, manager_name, ip, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;【&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + manager_name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;】输入的登录密码错误&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;密码错误&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 检查该账号虽否禁用了&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; manager_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_enabled&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录出错次数&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        security_helper.add_operation_times(operation_times_key)
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录日志&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         _manager_operation_log_logic.add_operation_log(manager_id, manager_name, ip, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;【&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + manager_name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;】账号已被禁用，不能登录系统&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;账号已被禁用&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 登录成功，清除登录错误记录&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    security_helper.del_operation_times(operation_times_key)
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; 
&lt;span&gt; 87&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 把用户信息保存到session中 ###&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;     manager_id = manager_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     s[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; manager_id
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     s[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; username
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     s[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = manager_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;     s[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;positions_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = manager_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;positions_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;    s.save()
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 更新用户信息到数据库 ###&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更新当前管理员最后登录时间、Ip与登录次数（字段说明，请看数据字典）&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;     fields =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_login_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;now()&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_login_ip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: string(ip),
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_count+1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写入数据库&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;    _manager_logic.edit_model(manager_id, fields)
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录日志&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     _manager_operation_log_logic.add_operation_log(manager_id, manager_name, ip, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;【&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + manager_name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;】登陆成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; 
&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;登录成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　security_helper.py代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0331153a-a147-4888-b085-c1aec39a6f28')&quot; readability=&quot;44.5&quot;&gt;&lt;img id=&quot;code_img_closed_0331153a-a147-4888-b085-c1aec39a6f28&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0331153a-a147-4888-b085-c1aec39a6f28&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0331153a-a147-4888-b085-c1aec39a6f28',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0331153a-a147-4888-b085-c1aec39a6f28&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; common &lt;span&gt;import&lt;/span&gt;&lt;span&gt; cache_helper, convert_helper, encrypt_helper
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; check_operation_times(operation_name, limiting_frequency, ip, is_add=&lt;span&gt;True):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    检查操作次数
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    参数：
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    operation_name      操作名称
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    limiting_frequency  限制次数
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    is_add              是否累加
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    返回参数：
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    True    不限制
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    False   限制操作
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; operation_name &lt;span&gt;or&lt;/span&gt; limiting_frequency &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; False, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;参数错误，错误码：-400-001，请与管理员联系&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;, 0
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果限制次数为0时，默认不限制操作&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; limiting_frequency &amp;lt;=&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; True, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;, 0
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#############################################################&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;## 判断用户操作次数，超出次数限制执行 ###&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当前用户已记录操作次数&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     operation_times_key = operation_name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + encrypt_helper.md5(operation_name +&lt;span&gt; ip)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     operation_times =&lt;span&gt; convert_helper.to_int0(cache_helper.get(operation_times_key))
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果系统限制了出错次数，且当前用户已超出限制，则返回错误&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; limiting_frequency &lt;span&gt;and&lt;/span&gt; operation_times &amp;gt;=&lt;span&gt; limiting_frequency:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; False, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;您在10分钟内连续操作次数达到&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(limiting_frequency) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;次，已超出限制，请稍候再试&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, operation_times_key, operation_times
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_add:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录操作次数，默认在缓存中存储10分钟&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         cache_helper.set(operation_times_key, operation_times + 1, 600&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; True, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;, operation_times_key, operation_times
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_operation_times(operation_times_key):
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    累加操作次数
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    参数：
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    operation_times_key 缓存key
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当前用户已记录操作次数&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     get_operation_times =&lt;span&gt; convert_helper.to_int0(cache_helper.get(operation_times_key))
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录获取次数&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     cache_helper.set(operation_times_key, get_operation_times + 1, 600&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; del_operation_times(operation_times_key):
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    清除操作次数
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    参数：
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    operation_times_key 缓存key
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录获取次数&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    cache_helper.delete(operation_times_key)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; check_login_power(id, k, t, sessionid):
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    检查拨号小信接口，验证用户是否有权限访问
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    :param id: 用户id
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    :param k:  32位长度的密钥串
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    :param t:  时间戳
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    :param sessionid: 当前用户的密钥
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    :return: False=验证失败，True=验证成功
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; sessionid:
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; encrypt_helper.md5(str(id) + sessionid + str(t) + sessionid + str(id)) == k
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　想要记录用户的每一个操作记录，有两种方法，一是在每个接口那里添加日志记录，这样可以更详细的编写自定义日志说明，不过这样做的话工作量会比较大，也容易在复制粘贴中出错；还有就是，每一个后台接口都会调用权限判断方法，我们也可以在这个方法中直接添加日志记录，缺点就是每个访问操作想要说明的很细致很难做到，这里我们通过各种判断与组合方式，来写入对应的接口日志访问记录，难免会出现记录重复或记录说明不正确的情况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下面是后台权限检查方法（_common_logic.py）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; bottle &lt;span&gt;import&lt;/span&gt;&lt;span&gt; request
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; common &lt;span&gt;import&lt;/span&gt;&lt;span&gt; web_helper, string_helper
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; logic &lt;span&gt;import&lt;/span&gt;&lt;span&gt; menu_info_logic, positions_logic, manager_operation_log_logic
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; check_user_power():
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;检查当前用户是否有访问当前接口的权限&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取session&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     session =&lt;span&gt; web_helper.get_session()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; session不存在则表示登录失效了&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; session:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         web_helper.return_raise(web_helper.return_msg(-404, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的登录已失效，请重新登录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当前页面原始路由&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     rule =&lt;span&gt; request.route.rule
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当前访问接口方式（get/post/put/delete）&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     method =&lt;span&gt; request.method.lower()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取当前访问的url地址&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     url = string_helper.filter_str(request.url, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;|&amp;gt;|%|\'&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化日志相关变量&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     _manager_operation_log_logic =&lt;span&gt; manager_operation_log_logic.ManagerOperationLogLogic()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     ip =&lt;span&gt; web_helper.get_ip()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     manager_id = session.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     manager_name = session.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置访问日志信息&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; method == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         method_name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;访问&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         method_name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;进行&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取来路url&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     http_referer = request.environ.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;HTTP_REFERER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; http_referer:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 提取页面url地址&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         index = http_referer.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; index == -1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             web_name = http_referer[http_referer.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 8) + 1&lt;span&gt;:]
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             web_name = http_referer[http_referer.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 8) + 1&lt;span&gt;: index]
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         web_name = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 组合当前接口访问的缓存key值&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     key = web_name + method + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + rule + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从菜单权限缓存中读取对应的菜单实体&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     _menu_info_logic =&lt;span&gt; menu_info_logic.MenuInfoLogic()
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     model =&lt;span&gt; _menu_info_logic.get_model_for_url(key)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; model:
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加访问失败日志&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;         _manager_operation_log_logic.add_operation_log(manager_id, manager_name, ip, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户访问[%s]接口地址时，检测没有操作权限&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (url))
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         web_helper.return_raise(web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您没有访问权限1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; key))
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化菜单名称&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;     menu_name = model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;parent_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;gt;&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取父级菜单实体&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;         parent_model = _menu_info_logic.get_model_for_cache(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;parent_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; parent_model:
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             menu_name = parent_model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;列表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;).replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;管理&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;) +&lt;span&gt; menu_name
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从session中获取当前用户登录时所存储的职位id&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;     positions =&lt;span&gt; positions_logic.PositionsLogic()
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;     page_power = positions.get_page_power(session.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;positions_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从菜单实体中提取菜单id，与职位权限进行比较，判断当前用户是否拥有访问该接口的权限&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; page_power.find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, -1)) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) == -1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加访问失败日志&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt;         _manager_operation_log_logic.add_operation_log(manager_id, manager_name, ip, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户%s[%s]操作检测没有权限&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (method_name, menu_name))
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;         web_helper.return_raise(web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您没有访问权限2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; (method == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;in&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;编辑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)):
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 添加访问日志&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;         _manager_operation_log_logic.add_operation_log(manager_id, manager_name, ip, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户%s[%s]操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % (method_name, menu_name))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这里记录的日志与菜单管理记录相关，如果菜单项的命名或树列表不规范，则记录的日志可能就会偏差比较大。当然如果你有强迫症追求完美的话，可自行对它进行改造。比如说在菜单管理中添加一个字段，用来编写日志说明的，访问这个页面时直接将说明更新到操作日志表中就可以了，简单方便。而如果对操作内容想要更细致的，也可以在日志表中添加一个字段，将客户端提交的参数全部写入到字段里记录，这样对用户的操作就会更清晰了，当然如果用户更新新闻或文章类内容时，字段值也会比较大。大家可以根据需要来进行对应改造。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下图为操作日志表记录内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/129385/201809/129385-20180914120621720-892167054.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　后台管理还需要做个日志查看的页面，接口代码很简单，具体直接看源码，这里也不详细说明了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/129385/201809/129385-20180914143304234-1087755942.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　对于异常处理，大家其实都知道使用try...except...进行捕捉，然后记录异常信息或作对应处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　而在接口发生500错误时，由于程序在服务器端执行，服务器环境与本地的开发环境有所不同，就很难直观的判断是什么原因引起的，可能是少上传了某个调用文件，也可能是新引用的包没有安装，又或者是代码中写错了代码，也有可能是变量为空引起的异常，反正可能情况非常之多，当接口非常多时，这些异常通过很隐蔽，只有等到该接口被调用时才能发现，如果处理不好，开发人员可能会花费不少时间在这上面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当然也有办法是，所有的接口代码都放在try...except...里面执行，这样发生500的情况会大大减少，但代码看起来层级多了也不美观。对于这种简单重复统一的代码，python有一个非常好用的工具，那就是装饰器，我们可以编写一个装饰器方法给接口使用，从而实现我们想要的目的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　装饰器实现的原理就是，通过在函数头部引用装饰器，从而使程序执行代码时，先执行装饰器里面的代码，然后再调用引用装饰器的函数，最后再返回装饰器执行剩下的代码。简单的理解就是，原有A函数和装饰器B函数，当A函数引用装饰器B函数以后，A函数其实就变成B函数中被调用的一个方法，即B函数在执行过程中会调用A函数，执行完成A函数后返回想要的结果再继续执行后面的代码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　先上代码，我们在异常操作包中（except_helper.py），添加下面方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; exception_handling(func):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;接口异常处理装饰器&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args, **&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 执行接口方法&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 捕捉异常，如果是中断无返回类型操作，则再执行一次&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(e, HTTPResponse):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 func(*args, **&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 否则写入异常日志，并返回错误提示&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                log_helper.error(str(e.args))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;操作失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; wrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　func就是注入到装饰器方法中的其他方法，由于我们的装饰器是给接口使用，所以执行过程中直接返回结果（见第6行代码），由于我们的代码在执行过程，有时会调用raise来中断代码执行，这样的话接口方法是没有返回值的，如果使用return来调用方法就会出现异常，所以在第9到10行，会调用方法重新执行一次接口方法，所以在开发时要注意，只有对那些出错时需要马上中断的地方，才使用raise这样保证重复执行接口方法不会造成数据错误。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当接口方法执行出现异常要抛出500时，这个装饰器就会捕捉到，然后通过调用log_helper.error()方法，将异常写入日志，并发送异常通知邮件通知开发人员。对于异常通知，如果你注册了微信企业号，你可以编写对应的代码与企业号进行对接，让你和相关人员在微信上可以实时接收到异常推送消息，方便即时发现问题然后处理问题。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　下面是调用方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/api/system/department/&amp;lt;id:int&amp;gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;@exception_handling
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(id):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    获取指定记录
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 检查用户权限&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    _common_logic.check_user_power()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     _department_logic =&lt;span&gt; department_logic.DepartmentLogic()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取记录&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     result =&lt;span&gt; _department_logic.get_model_for_cache(id)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, result)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查询失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　只需要在接口路由和接口方法之间，添加@exception_handling就可以实现接口500时，接收异常邮件推送了。非常方便好用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;https://pan.baidu.com/s/1PviWOteLUs0UY8gCcOhQ5g&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;本文对应的源码下载&lt;/span&gt;&lt;/a&gt; &lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;版权声明：本文原创发表于 &lt;a href=&quot;http://www.cnblogs.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;博客园&lt;/span&gt;&lt;/a&gt;，作者为 &lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/EmptyFS/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;AllEmpty&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt;本文欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则视为侵权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;python开发QQ群：669058475    作者博客：http://www.cnblogs.com/EmptyFS/&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 14 Sep 2018 07:16:00 +0000</pubDate>
<dc:creator>AllEmpty</dc:creator>
<og:description>后台权限和底层框架的改造终于完成了，小白也终于可以放下紧悬着的心，可以轻松一下了。这不他为了感谢老菜，又找老菜聊了起来。 小白：多谢老大的帮忙，系统终于改造完成了，可以好好放松一下了。 老菜：呵呵，对</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/EmptyFS/p/9645798.html</dc:identifier>
</item>
<item>
<title>在国企的日子(第三章下部 出差) - 心灵之火</title>
<link>http://www.cnblogs.com/dgcjiayou/p/9646732.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dgcjiayou/p/9646732.html</guid>
<description>&lt;p&gt;&lt;span&gt;梦既是过去，也是未来，它取材于生活，连接于当下，满足于欲望。它是一个时间搅拌机，它把过去，现在还有未来混在一起，让人活在一个更加有整体感的状态中。在遇见贾珍珍前，我的人生是静止的，是破碎的，我的生活没有颜色和声音，今晚的梦，我读懂了自己，找回了自我，每个人都有爱和被爱的渴望，我也不例外。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我做了这样一个梦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我在一个地方考试，那个地方我不认识，但是进去后里面很大，有很多人在座位上，都是考试的，我当时想我还没有复习好，肯定会考的不好，梦里我安慰自己，算了，能做多少是多少，这时我的试卷发下来，我准备答题，发现却是一张白纸，我看到别的人在哗哗的快速做题了，我很奇怪是不是发错试卷了，我抬头问监考官重新要一张，这个时候我发现监考考试的是贾珍珍，她穿了件紫色的上衣外加一件黑长款的裙子，打扮的很气质干练，她走了过来重新给了我一张试卷，我们互相对视，感觉她好像认出了我，我刚想和她打招呼，突然场景变了，好像考完试了，我出了考场，我发现贾珍珍和一个男的在吵架，这个时候的贾珍珍换了一件衣服，穿的是红色的羽绒服，另外还有2个女的在劝着什么，我想走过去看发生了什么事，我发现我的腿迈不动，我当时很急，就在远处喊着贾珍珍的名字，没人理我，场景这个时候再次变了，好像是发生了什么灾难，到处都是满目疮痍的景象，我掉到了一个长方形的冰洞里，里面到处是水，我在里面挣扎，慢慢的往下沉，我的手在外面使劲的想抓的一个东西，我很紧张，心跳的很快，我怕我就这样死去，然后我突然醒了，醒来的时候我看了下手机，是凌晨2点10分。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;醒来后，我觉得嗓子好干，下床喝了口水后再次回到床上，随着头脑的慢慢清晰，刚才梦中的记忆也随着时间在慢慢丢失，梦就是这样的，你上一秒好像还身临其境，下一秒可能就不太具体记得了，我在努力寻找，努力回忆，将丢失的片段一点点的收集，尽可能的修补完整。其实具体细节我也不清楚了，但是这个梦的三段故事大体内容我还是模糊的记得，弗洛伊德说过，所有的梦都是有意义的。反正现在继续睡觉那是骗人的鬼话，刚才将梦中所有的支离破碎的片段重新组合，我发现这个梦的确是想告诉我些什么，而且我发现信息量挺大的，说实话，解别人的梦是兴奋的，解自己的梦那是痛苦的，我需要在梦中面对自己的自卑，逃避，懦弱，同时也要给自己一个合适的理由来解释这一切。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一个片段梦见考试，往往代表着生活中面临一个考验。从梦的内容来看，我在考试，而且我的试题是一张白纸，说明我要面对的考验是什么都不清楚，我对这个考验是没有任何准备的，就想梦中所说自己没复习好，能写多少是多少，考官是贾珍珍，她居然在监考我，这个里面说明什么？说明我和她的位置不在同一档次，说白了我比她要低，想到这里，我心里在想的确也是如此，她是一个人事，我只是刚进来的员工，虽然平时打招呼交流什么的感觉不大，但是在工作上来讲，就好比是这个考场，角色一定会分析的清清楚楚。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二个片段梦见学生年代的她，她穿的红色羽绒服正式来自昨天她发的朋友圈里面的那张照片上穿的衣服，那张照片当时我保存到手机里面了，偶尔的时候会拿出来看看，反复成记忆，于是跑到潜意识里面来了，同样，那2个女同学也是那张照片上的，一切合情合理，至于她和一个男的在吵架，这个男的我看不清楚，事实上在那张照片上也没出现这个男的，但是梦不会说假话的，已经告诉我，贾珍珍现在应该有感情方面的困境，当时我在里面非常急，想走过去，但是迈不开腿，虽然我大声喊她的名字，根本没人理我，说明贾珍珍的事情我现在根本插不上手，也可能不愿意让我插手吧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三个片段梦见我掉冰洞里面慢慢往下沉，我很无助，感觉到死亡恐惧，这个里面比前面稍微难点，因为没有近期的人物事件在里面，我没有太多的把握去解释，但是根据前面的片段以及我这2个月的生活状态再结合精神分析理论，我大胆推测如下，冰洞水象征死亡或出生(重生)，人一旦离开母体，就有一种重回母体休息的渴望，因此当时梦见沉入水中时，这水就象征着母体中的羊水，这个里面可能长时间的孤独生活受到太多压力，所以才有想回到母体的渴望，这个梦的意境大概告诉我我最近应该在人生中有些事情有质的飞跃和改变。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析完自己的梦后，我久久不能入睡，在床上翻来覆去，对贾珍珍的那种欲望越来越强烈，我好想找她倾诉，我不要求来一场轰轰烈烈的爱情，甚至我都不求任何回报，我就只想把我一肚子的心里话讲给她听，仅此而已。我不知道我这种如痴如醉的意淫是不是病态，但是可以肯定的是我过去是多么的寂寞。我突然萌发一个奇怪的念头，我想把此时此刻这种感觉记录下来，将来如果有机会，我要把这些记录全部给她看，也算是一种追求女孩的杀手锏，退一万步，就算真没机会给，此时此刻我内心的欲望也需要得到释放，我只能通过文字来倾述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;于是，我把笔记本电脑拿到床上打开，在桌面新建了一个word文档，命名为写给贾珍珍的话，开始了一段此时此刻的心情记录。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;贾珍珍你好，今晚我失眠了，我做了个梦，梦见我在考试，你在监考，就好像那天你在面试我一样，不同的是，梦里一切太快，没有任何情感表露，也没有交流和沟通，我记得面试那天你说男人是应该以事业为重，说实话，很长一段时间里面,我一直认为我只要赚到更多的钱，我只要在我的工作上超越别人，我只要让父母引我为荣，让别人对我刮目相看，我觉得这个就是所谓的事业。但是最近，我的信仰开始动摇,人一旦没有了信仰，就很容易迷失自己的方向。我开始怀疑自己的事业，何为事业？我应该怎么进行我的事业？我不此一次的在问，在反思这个问题。我问了很多人，什么叫事业？大家的回答都不是我想要的。我直接搜索百度，它对事业的定义：&quot;人们所从事的，具有一定目标、规模和系统的对社会发展有影响的经常活动&quot;。《易经》里面也有对事业的解释，&quot;举而措之天下之民，谓之事业&quot;。简单地说，就是做了自己喜欢的事情，却又帮助了他人，这个就是事业。易经里面的解释我比较认同,只是太模糊，没法说清楚一个人应该怎样具体的进行自己的事业&quot;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;今天晚上我对事业有了我个人的看法，我想就此问题谈谈我的拙见，我觉得事业是人生中的一个过程，并不是结果，事业是让你一个人温饱，让你身边有了另一半时，也可以依靠你，一家人，一个人，二个人，三个人......都能温饱，可能很多人认为这个不是事业，这个只是一个没有抱负，没有远大目光，没有上进心的男人所为。他们认为事业应该是以钱，以权为重，通过不断&quot;努力&quot;,&quot;付出&quot;换来辉煌的成就，终于开创了&quot;很多人在我这里上班，领我的工资&quot;，这个才叫爷们的事业。看电视经常有些相亲节目，里面经常有些中年男子，四十多岁，说自己是某某大学毕业，现在某某大公司老总，某某企业家，某某多财产，但由于一直忙于工作，没时间。现在事业有成了，想找个女朋友或者老婆之类的，我觉得很奇怪，我只是替这些人可惜，四十年光阴换来今天的事业，但失去的是感情，失去的是生活中的乐趣，难道这个就是事业？。&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;我所认为的事业就是一种健康的生活方式，就是某个年龄阶段应该去做某事，事业是一种责任心，对自己，对他人，对家庭负责。事业也是一个强大的人格品质，敢爱敢恨，敢做敢当，你觉得呢？&quot;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“贾珍珍，你曾经问过我有没有女朋友，说实话我没有谈过恋爱，但是越到后面我就越怕谈恋爱，以前我觉得谈恋爱是一个危险的事情，过早的暴露自己的真实情感和过早的投入，只会让自己遍体鳞伤和更加难受，按照常规是需要斗智斗勇，审时多度，一有风吹草动，便立马隐藏，以前我也有个机会，但是我并没有抓住，主要是我没有准备好，现实中的爱往往伴随着痛苦。我们之所以痛苦，往往是由于我们对对方的期待落空，亦或是自己无法满足对方的要求，但是，最近我对爱有了新的理解，想和你说说”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“《爱的艺术》里面弗洛姆说过：天真的，孩童式的爱情遵循下列原则：&quot;我爱，因为我被人爱。“成熟的爱的原则是：“我被人爱，因为我爱人。”不成熟的，幼稚的爱是：“我爱你，因为我需要你。”而成熟的爱是：“我需要你，因为我爱你。“ 当我们准备去爱一个人的时候，我们是否知道爱情是一种积极的，主动的行为，而不是消极，被动，等待的行为。爱情首先是”给“，而不是”得“。当我们去爱一个人的时候，本身已经在付出了，然后才能期待有所回报。当然，不一定百分之百有所有回报，只有双方都懂得爱是在付出在前，回报在后的爱的艺术后，才能达到共赢的局面。假如付出了没有回报，这个也不要认为没有得到回报被欺骗。弗洛姆指出，爱是一个能力，只有有创造性的人才能主动去”给“，去爱。”给“是力量，能力的最高表现，恰恰通过”给“，自己才能体验到那种力量，才会体验到自己的”富裕“，自己的”活力“，体验到生命力的升华，从而让自己更加快乐，是自己生气勃勃，欣喜万分。而这种爱的能力与人的成熟度无关，而是一门需要学习和训练自己，耐心学习的一门艺术”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“当我们去恋爱，进入热恋的时候，双方开始慢慢的去了解对方，这个过程除了幸福快乐，还有焦虑甚至痛苦在里面，因为我们会发现对方从完美，到不怎么完美，对方的缺点开始慢慢暴露出来，我们在犹豫，在徘徊，我们是否真的准备好了足够的心理能量来迎接这场挑战，我们需要不断的调整策略，做出各种决定。当我们落荒而逃的时候要问问自己是否真的准备好了去了去了解一个人，包容一个人，发现对方的缺点，然后接纳对方。当我们永往直前，最后水到聚成，我们也要问问自己她（他）的优点是什么，缺点是什么，自己真的是否做到了接纳他（她），就接纳了他（她）的一切。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“贾珍珍，步入社会以来，我大部分时间在感叹，没有时间，没有经济能去发展爱，其实殊不知，我的问题不在于此，而是我的这种爱的能力已经在慢慢蜕化，在丧失，我现在需要挺起胸膛重新面对和学习怎么去爱一个人，最后，感谢你，写这些话我感觉就像面对面和你发牢骚一样，说完后，我内心获得了平静，再次感谢”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;长达1小时的洋洋洒洒，让我写的很过瘾，说实话，我此时的内心宁静的像一湾河，款款地流淌，写完后，我甚至有那么几秒钟的冲动，想立马通过微信发给贾珍珍，但是理性让我又嘎然而止，有人说爱情是感性的,婚姻是理性的，我的整个写给贾珍珍的话里面从头到尾都没有写到过我对她的爱，整个的就是一篇事业与爱情观嘛。当然我也不傻，这里面我有很多的担忧在里面，首先，我才认识贾珍珍不到一周，虽然贾珍珍是我想要的女人，她的出现无疑是将我压抑了很多年的对异性的情感全部激发出发，我需要把这些情感投入出去，但是我没有把握贾珍珍对于我是一种什么样的态度，我只能循环渐进，找合适时机去表达。再次，贾珍珍和我在公司里面毕竟工作岗位有差别，她是人事，在职场上和人事做朋友都是需要万分小心的，更何况我还想和她好。最后，贾珍珍现在应该还有一段感情在里面，我不知道她有没有释放完毕，这个事情出差回去后找个时间应该可以摸清。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;凌晨5点终于睡下了，一直睡到第二天下午，这一觉睡的好香。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;………&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下午我们在吃晚饭的时候微信群里面贾珍珍发来一段信息，标题是通宵熬夜须知，下面列了几项：1.晚饭吃清淡点，不要吃的太饱。2.如果可以，凌晨1点到3点这个时间段，挤出半个小时来休息下或者躺一会儿。3.熬夜通宵的时候不要吃太多零食，尽量多喝白开水，困了多做深长呼吸。4.通宵完后记得一定要吃早餐，清淡为主。5.早上睡觉前洗个热水澡，在床上精神放松，听些轻音乐。最后还写道：大家通宵上线辛苦了，要保持心情平静，切记郁闷烦恼，放松情绪，要不然对身体不好哦。看到信息后，我心里暖暖的，虽然信息不是发给我一个人的，但是我感觉到在国企的那种关怀感，我觉得这点企业文化做的真的很好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;常林一脸纳闷的问道人事怎么知道今天晚上项目上线，我也觉得奇怪，前天晚上都来不及聊这个事情，汪伟笑道，是他前天申请加班的时候把邮件抄送给了贾珍珍，原来如此。一会后，贾珍珍又在微信群里面发来一条信息，是高铁票购票信息，原来是贾珍珍帮我们买了周日下午3点20分的回程票，原本对上线有那么点焦虑不安的心立马豁然开朗，我突然立马感觉到我不是一个人在战斗，有常林，有汪伟，还有心中的那个她。我们三人在吃饭中说说笑笑中渡过。吃完饭后我们三人各自回房间休息了以后，好养足精神晚上战斗，约定晚上11点集合去移动大厦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;………&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于我们程序员来说，是讨厌晚上通宵项目上线的，简直就是噩梦。但是对于有的行业来说，晚上是她们一天的开始，正是出来谋生的时间，每当夜幕降临，整个城市一片灯火辉煌，她们就像像天上闪烁的星星，比天上的星星还要好看，还要富有吸引力。有穿包臀黑丝的，有穿牛仔短裙的，有制服诱惑的，也有职业套装的，红的，绿的，蓝的，黄的，应有尽有。我们走到移动大厦有条马路，马路对面有条巷子，白天那里是暗淡无光，一片萧凉的景象。但是一到晚上，一片祥和，简直生机勃勃啊。每次走这条路，我都是放慢脚步，我希望时间停留，我希望她们在我的脑海中的记忆稍微留长点，她们都是一群活泼可爱的人，也特别有礼貌，远远的我稍微瞄一眼，我就已经明显的看到她们对着我笑，笑的很甜，很诱人，甚至还有些主动向我招手，我有时候真有点不知所措。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当我们三人走到移动大厦，我在下面往上一瞧，嚯，真是白天不懂夜的黑啊，整个四楼依然灯火通明，我的心里突然传来一首歌《我们不一样》，&quot;我们不一样，每个人都有不同的境遇，我们在这里，在这里等你......&quot;，我心里掐着一算，心里默默道，今天是项目通宵上线的黄道吉日。晚上进移动大厦的程序和白天又不一样，我们进入大厅准备填表，穿包臀的大厅MM说我们需要局方的人填个电子工单，然后她们收到工单后才能放我们上去，真是麻烦的要死。没办法在人家的地盘上就得按人家的方式办事，我打电话陈工说明事情，然后就在大厅前台等。汪伟也不知道是啥时候又去外面了，和一个保安大叔蹲在那里抽着尼古丁，常林坐在大厅的凳子上，一只手飞快的在手机上点点点发着信息，看来大家对这次项目上线是非常淡定的，也可能明天下午要回去，心里非常放松吧。我一会看着电梯出口，一会望着大厅四周的角落，无聊透顶。我偷偷的瞄了一眼大厅MM，她正在电脑旁查着什么资料，曾她不注意，我偷偷的多看了几眼，此时我才看清楚面貌，洁白的面容，淡色的眉毛，挺秀的鼻梁，淡红的双唇，说实话挺漂亮的。我平时和陌生女的打交道或者连话都说不上的那种，我一般只看穿了什么衣服和裤子，看完腿基本就差不多了，平时也很少有这么近的距离和时间看的这么清楚的。整个大厅静悄悄的，陈工又没下来，于是我主动和大厅MM聊了起来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;我打了电话，怎么这么久还没下来呢&quot;，我假装抱怨道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;他们需要填电子工单，工单还需要上面审核，才能到我这里，要5，6分钟吧&quot;，客服MM耐心和我解释道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;哦，这样啊，那为什么白天不要填电子工单，只填表就行了&quot;，我问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;晚上一般是不允许有人在移动大厦里面的，但是特殊情况项目上线，需要填电子工单领导审批同意&quot;，客服MM依然很耐心。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;哦，哦，这样啊，了解了&quot;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;那你们晚上值班也要通宵吗&quot;，我好奇的问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;是的勒，我们要到第二天早上8点交班&quot;，客服MM说这话，我感觉特别可爱，尤其那个&quot;勒&quot;字稍微拖着长音，显得有那么调皮，同时我丝毫感觉不出她们对于熬夜通宵的那种痛楚，都说在移动公司上班待遇好，工作又安逸，果然不假的，从一个员工对待工作的态度就能大概感觉的出来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;嗯，你们平时这种晚上通宵值班多么&quot;，我问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;平时我们是不要晚上来这里，一般是这4楼有项目通宵上线，我们这边才来这里晚上值班的&quot;，客服MM说道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;啊，这样啊，那如果这里天天项目上线，你们岂不是天天陪着？&quot;，我非常好奇的问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;不会了，我们这里项目上线一般是每个月固定的几天，所有的项目组都集合在这几天项目上线&quot;，客服MM微笑的说道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;难怪了，难道四楼灯火通明，看来是很多项目组一起选这天上线啊&quot;，有意思，真的有意思。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们大概闲聊了5分钟不到，终于看到陈工从电梯口走出来了，然后客服MM看了下电脑说看到电子工单了，于是我们依然填了表，就一起坐电梯上了四楼。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;走出电梯后，我立刻就闻到一股刺鼻的方便面味，隔壁的开水房依稀的有几个人在排队打开水，每个人手里捧着打开的方便面盒子，各式各样的都有，有红烧牛肉面，酸辣牛肉面，香菇炖鸡面，西红柿打卤面都看到有，这个时候我看了一个熟悉的面孔，那个不是第一次早上来这里见到的通宵还没散场的软通那哥们，手里面端着已经泡好的统一方便面正在享受着，极富弹性的面条在他有点发黄的牙齿里面快速穿梭着，吃两口面，稍微停下，慢慢再喝一口汤，节奏掌握的非常好，空气中散发出面的美味，他的表情很丰富，略带浮夸，给我的感觉所有的方便面里面只有他的这一盒特别好吃。我们从他身边走过，他高高端起的方便面盒子上面的大大的统一两个字，好像在告诉我一个事情，&quot;项目上线，我们是统一的&quot;，我心里默默苦笑道，对，项目上线吃什么面，要吃就吃统一方便面。这个时候，那个哥们看到了我，我们微微一笑算是打了招呼了，毕竟大家同是天涯沦落人，相逢何必曾相识啊。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从电梯口走到我们的位置上，我粗略的算了下，今晚至少有三分之一的人在，也就是说有100多号人在通宵项目上线，场面很大，我真正感觉到了白天就是黑夜，黑夜就是白天，白加黑啊。刚到位置上，陈工就捧了一大堆方便面放桌子上，然后叫我们三人去选自己喜欢吃的，说实话，我没什么胃口，刚才闻到的那股刺鼻的味道现在还在我胃里面打转，常林随手拿了一个，汪伟在慢悠悠的选着，我看到他在麻辣牛肉面和香菇炖鸡味面中很难决策，看到此场景我很不忍心，我直接替他决策好了，每样都拿一桶，我的也给他了，今晚我不吃面，我只按贾珍珍在微信群里面发的，只喝点白开水。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;11点50分钟，离项目上线还有10分钟，我们三人，亚信宋工，局方陈工，还有几个酱油小弟，新出现的面孔也不知道是哪边的人，一起碰头开了个战前会议，会议最终将此次上线流程安排如下。1.12点到1点，汪伟再去机房一趟，将前置机到BOSS系统的IP切换到正式环境，并再次检查系统配置，确保万无一失，我这边不需要修改什么东西，只需要调通到前置机的网络即可。2.1点到3点常林这边和亚信以及移动这边开始在生产环境做联调，我这边协助。3.3点到6点是整体系统测试阶段，刚才那几个酱油小弟就是局方这边的测试工程师，负责这次的质量验收工作。大概工作就是这样，大家都知道自己的工作任务和每个时间节点的控制，然后废话不多说，直接干。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;汪伟这边去机房后，我们这边进入了短暂的休息时间，还是一样，玩手机的玩手机，发呆的发呆，每个人都有自己的事情做，也不知道汪伟这边要去多久，也许10分钟不到，我索性站起，伸展下筋骨，做做深长呼吸，放松放松。这个时候，隔壁软通那哥们吃完方便面回来了，他们那个区域离我们这里也就一个人行道，我看他也在躺在椅子上无聊，于是我走过去和他打招呼，随便闲聊了起来，其实程序员还是挺好打交道的，尤其是生活在底层的程序员，没有太多的废话，大家直接进入主题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;怎么，今天你们还要上线啊？&quot;，我问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;是的呢，苦逼程序员呗&quot;，他的声音有点粗哑，略显沧桑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;唉，没办法，谁叫我们是这行呢&quot;，我安慰他的同时也在安慰自己。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;我看你上次项目上线没多久啊，频率有这么高吗&quot;，我问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;唉，别说了，我们这个项目组每周一次通宵上线是正常，有时候2次甚至3次也不为过啊&quot;，他苦笑道，露出他有点发黄的牙齿(抽烟过多，老烟民)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;这强度也太大了吧，你来这里多久了啊&quot;，我有点好奇如此强度下是个什么样的人格品质的人能坚持下去的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;3个月&quot;，他回答道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;才来不久嘛&quot;，我应道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;不是，我们这个项目组3个月的都算老员工&quot;，他对我的应道好像表示不满。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;尼玛，我之前公司我待了3年我都不敢说自己是老员工，你才待了3个月凭什么说出这番豪言壮语。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;哦，怎么说&quot;，我问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;我们这个项目组你看到的所有人，除了我来了3个月，还有一个比我稍微久点是4个月的，其他的人都是1个月，半个月，甚至还有二周不到的&quot;，他解释道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;刚成立的项目组啊&quot;，我好像懂了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;不是，这个项目组的业务做了也有3年了，一般来的人都是做一段时间就走了，忍受不了这种工作强度&quot;，他摇着头说。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;那也是，这种强度下估计是没人长期抗的下去的，一周搞2次通宵，简直要人命啊&quot;，听他这么一说，我的头皮都有点发麻。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我又接着问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;你们是做什么项目的？一定要项目上线强度这么大这么频繁吗？&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;我们做增值服务这块的，主要做各种营销活动&quot;，他解释道，稍微停了1秒，然后又接着说道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;我们属于外派人力外包的，项目上的需求都是局方这边的产品经理提的，而且他们经常变需求，脑袋一拍，当天的需求功能恨不得当天就要开发完&quot;，我明显感觉他的怨气很重啊。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;你们是做什么项目的，怎么也来通宵上线啊&quot;，他这个时候反问道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我就耐心的和他解释我们做的业务，两个人在互吐苦水。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今天的汪伟回来的比上次要快，15分钟不到，就屁颠屁颠跑回来说他那边搞完了，然后就喊着饿死了饿死了，拿了2桶方便面去开水房泡面去了，我和软通那哥们打招呼说我先忙去了，有时间再聊。于是我回到自己位置上，远程连接到windows服务器，将准备好的demo直接运行跑了起来，一起正常，简直就秒通啊，瞬间感觉到今晚我也只是个酱油。汪伟端了2桶泡好的方便面回来问我要不要吃，我摇了摇头。他一个人吃了起来，我当时在想，是不是叫常林他们早点开搞，可以早点回去，我问了局方陈工，他叫我不急，先休息下，大家都继续做自己的事。汪伟不到1分钟一桶方便已经下肚，那喝汤的滋滋的声音感觉到半个大厅都能听的到，我叫他小声点，他放下又端起另外一桶方便面，这个时候他暂停了，我明显的感觉他有什么事情，他将端起来的方便放下又盖好，速度去了卫生间，回来后，又端起。我突然想起一句话是这么说的，吃完方便面，马上去方便，方便完以后，再吃方便面。想着想着，我在位置上闭目养神起来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;………….&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;半夜被一阵喧闹的吵杂声唤醒，睁开朦胧的双眼，在强烈的白色灯光照耀下至少过了4，5秒才看清楚，我看到常林不知道从哪里找来的毛毯，把自己裹在里面只露出头和手臂，在电脑屏幕前调试着代码，我问了他现在什么情况，他说才刚刚开始和亚信那边在联调，然后我又问他刚才是否睡了下，他说他也是躺了一下刚起来干活。我看到亚信那边的宋工和局方的陈工也是有条不紊的在联调着，可能凌晨这个时间都比较疲惫，也可能前天已经在测试环境联调过，所以大家没有太多的语言沟通，都自己在做自己的事情，一切看起来都很正常。局方那边的测试工程师在墙角落边上的折叠床上一个个都睡着了，其实他们必须养好精神，因为后面大半夜基本全是他们的事情了，有人说通宵上线程序员最苦逼，其实我倒不这么觉得，如果上线前自己做了充分的准备，上线无非就是环境的切换而已，但是这帮测试工程师确要花很多精力和时间将所有的场景从头测到尾了，要保证验收工作的质量。汪伟不知道从哪里找来了4，5把椅子，有些是没有扶手的，他将这些椅子一排拼在一起，把自己夹在里面，睡的倒挺香的。我感觉暂时没有我的什么事，我趴在位置上准备继续睡一会儿，喧闹的吵杂声又来了，我的耳朵很机灵，我明显的感觉到了有人在吵架，我站起来顺着声音一看，离我们这里大概10米左右的区域有个公司也在通宵达旦的上线，好像有个人不停的唠叨着什么，我也不知道为什么突然我这么喜欢爱管闲事，我站起来往那个方向假装散步慢慢走过去，在离那个区域还有5，6步路停下来，我看到有个女的和一个男的在吵着什么，我仔细一听。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;为什么每次上线问题这么多，你上线前自己没做好测试吗&quot;，那个女的在说道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;这个问题你自己为什么不早点测试出来，现在说我&quot;，那个男的回应。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;我在测试环境测试没有问题的，鬼知道上线就问题这么多，每次都是这样，半夜BUG一大堆，改完后，测试新的BUG又出来了，整个晚上在改BUG再测试&quot;，女的显得很愤怒。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;那你想怎么样，有BUG就要改，改完后就要测，我能控制的了啊&quot;，男的一点都不相让。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;每次都是这样，每次都是上线问题一大堆，你们爱怎么玩就怎么，老娘我懒的下次懒的陪你们玩了&quot;，女的发飙了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一听到老娘两个字，我差点笑了，我仔细瞧了下这个女的，黄焦焦的头发，黑皮肤又糙，一米五左右的个头。我估计他们再这样吵下去可能会打起来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个时候又走来一个男的，应该是这次上线负责人，上来打圆场，叫他们先做事，项目上线后再说。然后两个人稍微歇停了下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后我这边回到位置上，继续趴下来，闭目眼神起来，又小睡了一会。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;凌晨3点被汪伟叫醒，感觉整个头都是蒙的，我问他什么情况，他问我要不要吃方便面，我直接想打人，懒得鸟他，我看到那帮测试工程师已经起来干活了，常林正在吃方便面，我问情况，他说全部调通了，只等测试验收。整个周围都是方便面味道，我感觉有种特别恶心的味道，我站起来环顾一周，发现软通那边的人基本都睡着了，有1，2个人好像灵魂附体，继续在电脑前战斗着，估计也是测试，整个大厅估计现在还在电脑旁的人只有测试人员吧，除了刚才吵架那个项目组除外。3点醒来后，我想睡下，已经很难很难了，除了难闻的方便面味在刺激着我的胃，我的思维开始发散起来，我想了很多，想人生，想家，想父母，想她。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一直到无法入眠到早上7点半，测试工程师宣布验收完毕，局方陈工又组织大家开了个几分钟会议，最后大家互相握手宣布散场。反正我的脑袋一直是蒙的，包括后面回去我都觉得没什么可写的了。因为我觉得整个世界都是没有颜色的，我只想找个安静，没有电脑嗡嗡声，也没方便面味的空间钻进去，事了抚衣去，深藏身与名。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 14 Sep 2018 07:10:00 +0000</pubDate>
<dc:creator>心灵之火</dc:creator>
<og:description>梦既是过去，也是未来，它取材于生活，连接于当下，满足于欲望。它是一个时间搅拌机，它把过去，现在还有未来混在一起，让人活在一个更加有整体感的状态中。在遇见贾珍珍前，我的人生是静止的，是破碎的，我的生活没</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dgcjiayou/p/9646732.html</dc:identifier>
</item>
<item>
<title>程序员福音-- 常用idea 插件plugins   提高编码效率 - 房上的猫</title>
<link>http://www.cnblogs.com/lsy131479/p/9646444.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lsy131479/p/9646444.html</guid>
<description>
&lt;p&gt;&lt;span&gt;因为idea自带的插件下载可能连接不上服务器而导致插件下载失败，所以这里推荐使用引入外部插件的方式&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1.打开settings配置面板&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914143525355-1246682748.png&quot; alt=&quot;&quot; width=&quot;449&quot; height=&quot;283&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.选择plugins--》install pluginfrom disk  选择相应插件包==》点击ok&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914143535917-1439166147.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;368&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 常用插件：&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作用：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;检测代码中可能的bug及不规范的位置，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;写完代码后检测下 避免低级bug，&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;插件提供地址：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;a title=&quot;房上的猫findbugs&quot; href=&quot;https://plugins.jetbrains.com/plugin/3847-findbugs-idea&quot; target=&quot;_blank&quot;&gt;https://plugins.jetbrains.com/plugin/3847-findbugs-idea&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;成功标志：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;重启idea后如果插件加载成功左下角出现：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914144215113-1036139661.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;实际应用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914144256638-1647730926.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;h2&gt;&lt;strong&gt;&lt;span&gt;作用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;一键查看maven依赖，查看冲突的依赖，一键进行exclude依赖&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;对于大型项目 非常方便&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;插件提供地址：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;a title=&quot;房上的猫maven-helper&quot; href=&quot;https://plugins.jetbrains.com/plugin/7179-maven-helper&quot; target=&quot;_blank&quot;&gt;https://plugins.jetbrains.com/plugin/7179-maven-helper&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;成功标志：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;重启idea后如果插件加载成功 打开pom文件左下角出现：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914144443426-567175444.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;实际应用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;切换Dependency Analyzer试图即可进行相应操作：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1) Conflicts（查看冲突）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2) All Dependencies as List（列表形式查看所有依赖）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3) All Dependencies as Tree（树形式查看所有依赖）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914144904074-1108256587.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;选中右键就可以 Exclude 啦，想用1.2就把其他版本的Exclude掉，想用1.1.3就把其他版本的Exclude掉，很方便。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914144716692-570818848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;&lt;strong&gt;&lt;span&gt;作用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;运行java程序的时候启动visualvm，方便查看jvm的情况 比如堆内存大小的分配&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;某个对象占用了多大的内存，jvm调优必备工具&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;插件提供地址：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;a title=&quot;房上的猫visualvm-launcher&quot; href=&quot;https://plugins.jetbrains.com/plugin/7115-visualvm-launcher&quot;&gt;https://plugins.jetbrains.com/plugin/7115-visualvm-launcher&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;成功标志：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;重启idea后如果插件加载成功右上角出现：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914145107014-1519980062.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;实际应用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;暂时不知道咋用&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;作用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;一键调用一个对象的所有set方法并且赋予默认值 在对象字段多的时候非常方便&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;插件提供地址：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;a title=&quot;房上的猫generateallsetter&quot; href=&quot;https://plugins.jetbrains.com/plugin/9360-generateallsetter&quot; target=&quot;_blank&quot;&gt;https://plugins.jetbrains.com/plugin/9360-generateallsetter&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;成功标志：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;。。。。。。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;实际应用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;通过alt +enter生成一个类所有setter方法的默认值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当两个对象转换器具有相同的字段时，为它们生成一个set方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当returnType是List Set Map时生成默认值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914145307250-1579939293.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;作用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;彩虹颜色的括号  看着很舒服 敲代码效率变高。。清除分清括号个数，防止括号错乱&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;插件提供地址：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;a title=&quot;房上的猫rainbow-brackets&quot; href=&quot;https://plugins.jetbrains.com/plugin/10080-rainbow-brackets&quot; target=&quot;_blank&quot;&gt;https://plugins.jetbrains.com/plugin/10080-rainbow-brackets&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;成功标志：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;重启idea后如果插件加载成功右下角出现弹出框&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914145404550-946596396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;实际应用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;最近括号内容高亮效果：ctrl+鼠标右键单击  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最近括号内容外暗淡效果：alt+鼠标右键单击 &lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;&lt;strong&gt;&lt;span&gt;作用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;最好用的翻译插件，功能很强大，界面很漂亮&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;特征：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;多个翻译引擎。多种语言的互译。&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;谷歌翻译。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;有道翻译。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;百度翻译。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;文字转语音。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;自动选择字。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;自动分词。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;插件提供地址：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a title=&quot;房上的猫translation&quot; href=&quot;https://plugins.jetbrains.com/plugin/8579-translation&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://plugins.jetbrains.com/plugin/8579-translation&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;成功标志：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;重启&lt;/span&gt;idea&lt;span&gt;后如果插件加载成功右下角出现：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914145551433-296430949.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;多翻译引擎 （可切换）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　·&lt;/strong&gt;Google翻译&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　·&lt;/strong&gt; 有道翻译&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　· &lt;/strong&gt;百度翻译&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;实际应用：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;选择单词，右键：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914145730531-470761236.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;翻译加朗读：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1211814/201809/1211814-20180914145750260-859451450.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt; 　　　　　　　　　　　　　　　　　　　　&lt;span&gt;未完，待续。。。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 14 Sep 2018 07:00:00 +0000</pubDate>
<dc:creator>房上的猫</dc:creator>
<og:description>最近发现了几个非常好用 提高编码效率 的idea 插件 跟大家分享一下，，，不用谢我！！！！！！！！！！！！！ 因为idea自带的插件下载可能连接不上服务器而导致插件下载失败，所以这里推荐使用引入外部</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lsy131479/p/9646444.html</dc:identifier>
</item>
<item>
<title>论程序员的自学心态 - mozi_song</title>
<link>http://www.cnblogs.com/mozi-song/p/9646495.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mozi-song/p/9646495.html</guid>
<description>&lt;p&gt;最近半年因为项目清闲，做了很多自学计划，很多都是心血来潮，也并没有都坚持下来，比如学习C语言、学习Spring和web基础知识、学习操作系统等。在这个过程中，突然意识到“心态”是学习中一个很重要的部分。程序员大部分是独自学习的，很容易进入一个懒惰或焦虑的极端状态，当心态不稳定时，会发现时间眼睁睁地流过，而你却无法进步，这是一种很难受的状态。当心态健康时，不仅能保持稳定的学习速度，还能在学习中得到快乐，进入一个正向循环。&lt;/p&gt;
&lt;p&gt;楼主是一个凡人，资质平庸，学习的目的无非是提高竞争力，使自己不至于某天沦为公司裁员的牺牲品。如果你有更清晰的梦想和目标，说明你比楼主层次高很多，欢迎来指点楼主。&lt;/p&gt;
&lt;h2&gt;为学而学是不行的&lt;/h2&gt;
&lt;p&gt;一开始学习时，楼主看了许多帖子，里面的Java大神们都在说：要提高技术，就要不停地看源码，甚至自己造轮子……年轻的楼主深受这种理论影响，不屑于搞业务而日日研究如&lt;span&gt;HashMap源码这样枯燥的东西，甚至计划自己写一套collection framework，把大神们造过的轮子再造一遍，似乎只要写完这一套东西就能立地成佛，能搞定所有的业务和bug。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当我开始写HashMap的时候就发现，为了写而写是一种很蠢的行为。一个轮子内部的那些看似精巧繁杂的结构，存在的意义是为了让轮子更好更长久地运转，而不是工程师为了炫技而创造的。如果我们没有一个实用的目标，反而会浪费时间，迷失在一些看上去很神秘的细节中。其实，像HashMap这样的数据结构，只需了解它大致的工作原理就可以了，余下的代码细节可以在使用有疑惑或者出了问题时再去看。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再比如，楼主看面经中总是提到JVM调优，因此觉得这是Java程序员进阶所必备的知识，于是就买了书和教程去看，但是发现对于调优这个话题看书效率奇低，书上比较多的是一些描述性的内容，如JVM的内存分布和垃圾处理算法；还有一些实用性的内容，比如调优工具、&lt;span&gt;调优&lt;/span&gt;案例。有些内容反复看了又看，回想起来脑子里却不剩什么，远没有看完一个算法后的那种条理清晰的感觉。而花在这个问题上的时间却远远超过看算法的时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这几个周，同事要做一个自动化测试工具，问大家有什么好的建议。楼主想到自己一直学调优而无所得，灵机一动，提议在工具中加入调优功能，得到了同事认可。同事给楼主大概介绍了一些调优思路，推荐了一些资料去看。楼主希望争取到这个亲自实现调优功能的机会，于是幻想自己即将面临各种性能问题，为了解决这些问题开始储备知识，然后惊异地发现学习有了层次，楼主不再死板地按章节看书了，可以自动地筛选出重要和不重要的内容，甚至可以在脑中形成清晰的脉络了!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以&lt;strong&gt;计算机是一门实践科学&lt;/strong&gt;这句话一定要深刻理解。因为偏实践，所以不可能当王语嫣，因为许多理论是从实践中来的，好比数学公理，只能从实践中得到感性认识，无法从其他的理论推测得来，也无法死记硬背。楼主是一个学院派的人，在这方面吃了不少苦。从中总结出的方法论是：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;计算机科学的知识大多是偏实践的，学习这些知识不能只看理论，要依托于实践。实践和理论应该是两条互相缠绕的螺旋线，当实践无法继续进行时就去看理论，当理论看起来无法理解更深时就去实践。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;实践最好是一个项目，但大多数情况要自己提需求，寻找实践方法。可以是个人项目，也可以是自己的各种小demo等等，形式不限，学到就行。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;学习与任何事一样，都需要务实。技术只是人们为了解决问题而创造的，包括那些听起来很高大上的框架和名词。只要怀着负责任的信念去做事一定会接触到各种各样的问题，面临问题自然会去思考解决方法，在这个思考的过程中，你实际上就开始接触了设计模式、JVM原理、计算机组成、网络协议等等……所以，不可以鄙视平时在公司做的那些看似简单的业务。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;持续输出&lt;/h2&gt;
&lt;p&gt;长时间的学习很容易懈怠，陷入一种被动接受知识的状态。另外，一个人的思想永远不可能顾全所有方面。&lt;/p&gt;
&lt;p&gt;比如，楼主的朋友最近想学习Java，于是楼主自告奋勇，每天给他介绍二十分钟Java基础。当说到垃圾处理时，楼主自然地老生常谈：Java内存分为新生代和老年代，一般的GC只对新生代进行收集，而只有老年代也没有空间了才会进行Full GC……朋友眨着天真的眼睛问楼主：为什么要分两个区进行收集，而不是每次都对所有内存进行垃圾处理呢？楼主惊讶地发现自己答不出来，因为从未想过这个问题……&lt;/p&gt;
&lt;p&gt;今天楼主复习时无意中发现，书里其实有介绍这么做的原因，即大部分对象都是朝生夕死的，按年龄分代并频繁地收集新生区比较贴合这个模型，这样既能照顾到常用的内存，也能保证垃圾处理能在比较短的时间内结束。这一段楼主其实看过多遍了，但竟然从未将两者联系起来，也未思考过分区设计的原因……&lt;/p&gt;
&lt;p&gt;又比如，有一次面试时面试官问Java线程池中核心线程数和最大线程数的区别。楼主轻车熟路地说：核心线程数是线程池的初始线程数，最大线程数是线程池能扩展到的最大线程数，只有任务队列提交满时才会扩容。面试官接着问道：“那你想过为什么要这么设计吗？”楼主支吾半天也没答上来……事后一想，其实很简单，就是为了既能重用线程，减少线程开销，又能满足偶尔的大规模请求而已。这么简单，为何当时没想到呢？&lt;/p&gt;
&lt;p&gt;……因为平时看书的时候就缺乏思考啊……&lt;/p&gt;
&lt;p&gt;对于楼主这种口号上的巨人、思考上的矮子，除了经常给别人讲东西从而被别人挑战之外，还有一个好办法，就是坚持写博客。&lt;/p&gt;
&lt;p&gt;博客是一篇文章，需要有文章结构这种东西，为了使你的博客显得比较有逻辑性，你会被逼着去梳理知识点之间的逻辑，以及一门技术的由来、历史、产生背景等等。在梳理过程中，你会发现看书时遗漏的点被填满了。另外，把思路写出来能进一步强化你对知识的印象。而且，持续写博客会给你的学习造成一种健康的仪式感，即使一开始没有太多读者，你也会爱上这种输出的感觉，反过来督促自己为了写出更多博客而坚持学习。&lt;/p&gt;
&lt;h2&gt;行动紧张，但心情轻松&lt;/h2&gt;
&lt;p&gt;焦虑是自学最大的敌人。有一阵子看到朋友看书很快，自己也想加快脚步，可是却打乱了自己的一贯节奏。又有一阵子，像着了魔一样四处搜寻名人自传、大神博客，然后发现自己跟大神的差距要以数十年计，陷入一种无止境的焦虑。&lt;/p&gt;
&lt;p&gt;楼主愿意相信，焦虑并不是完全不好的状态，因为它证明一个人想要进步，想跟那些优秀的人比肩。但是，“认识自己”也是一门非常重要的学问。每个人都是不同的，现在跟大神差距很大并不意味着几年后还会差距很大；但是有一个坚持下去的秘笈，跟跑马拉松一样，就是不要看别人，不要看终点。要做到这一点，先要接受自己的平凡，这样才能平心静气地去吸收知识、抵御外界的影响，而持续的焦虑只能适得其反。&lt;/p&gt;
&lt;p&gt;如果每天都抱着一个远大的梦想，正襟危坐地努力学习，会发现很快就累了。之所以看电视剧不容易累，是因为潜意识就告诉自己在玩。如果学习的时候，也可以调整到一个好玩的心态，把问题当作小乐趣去解，会发现不知不觉就沉浸在解题的乐趣中，而感受不到时间的流逝，这种状态是学习的上乘状态。&lt;/p&gt;
&lt;h2&gt;一些啰嗦&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;楼主是个心高气傲的人，花了许多时间才接受自己是凡人这个事实。或许这个打击来得越早，就越容易踏实地走脚下的路。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;跟初高中就开始学算法、写游戏，大学拿到ACM金牌，毕业后几家大公司随便选的大神相比，&lt;span&gt;楼主&lt;/span&gt;实在是天资愚钝，大学时仅有的一门编程课——C语言学得异常痛苦，研究生时自学编程磕磕绊绊，做毕设时经常晚上十一点被导师的邮件揪起来——代码又出现了问题。楼主天资平庸，工作平凡，在写代码上没有任何具体的目标，比如&quot;要做出一款炫酷的RPG游戏&quot;这样的……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了这个事实，曾经非常焦虑。喜欢拿自己跟别人比，唯一的结论就是还差得太多，连别人初中的水平都不如，得赶快补上……于是买书做计划，每天都要完成计划的指定部分，比如读十页书等等，这样也坚持了一段时间，但是因为压力比较大，学习效率实在不高，很久之后感觉还在入门边缘徘徊。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;也不是说时间不重要，毕竟有著名的&quot;一万小时定律&quot;摆在那。但是看似努力学习超过一万小时而还没成为大牛的人也是有的。从我自身的经验，还是&quot;&lt;span&gt;进入状态&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;最靠谱。拿我自己来说，进入状态后两天学到的可能比没进入状态时几个周学到的都多，绝不夸张。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;所以，最近越来越相信方法论了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你看到这里，说：楼主说得都很有道理，但我缺乏学习的动力，怎么办？推荐你去看一下&lt;span&gt;阮一峰的&lt;a href=&quot;http://www.ruanyifeng.com/survivor/&quot;&gt;《未来世界的幸存者》&lt;/a&gt;&lt;/span&gt; 。&lt;span&gt;你会发现作者对未来人类文明坍塌的预言可能超出你最悲观的想象。作者认为，随着现代科技的爆发式发展，社会贫富分化将迅速加剧，中产阶级将逐渐消失。那些无法理解现代科技的人会沉到社会下层，沦为科技的奴隶；而由于AI技术的快速发展，大部分本属于中产阶级的程序员都将失业，失业后由于看不到希望，沉溺于虚拟游戏这样的“精神毒品”度过贫穷的一生。在这样的魔幻世界中，“终生学习”已经不是一句口号，而是一个人清醒地生存在世界上的必需……&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 14 Sep 2018 07:00:00 +0000</pubDate>
<dc:creator>mozi_song</dc:creator>
<og:description>最近半年因为项目清闲，做了很多自学计划，很多都是心血来潮，也并没有都坚持下来，比如学习C语言、学习Spring和web基础知识、学习操作系统等。在这个过程中，突然意识到“心态”是学习中一个很重要的部分</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mozi-song/p/9646495.html</dc:identifier>
</item>
<item>
<title>分布式存储系统Kudu与HBase的简要分析与对比 - 网易云</title>
<link>http://www.cnblogs.com/163yun/p/9646008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/163yun/p/9646008.html</guid>
<description>&lt;p&gt;本文来自&lt;a href=&quot;https://sq.163yun.com/blog?tag=M_tg_223_65&quot; target=&quot;_self&quot;&gt;网易云社区&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作者：闽涛&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cloudera在2016年发布了新型的分布式存储系统——kudu，kudu目前也是apache下面的开源项目。Hadoop生态圈中的技术繁多，HDFS作为底层数据存储的地位一直很牢固。而HBase作为Google BigTable的开源产品，一直也是Hadoop生态圈中的核心组件，其数据存储的底层采用了HDFS，主要解决的是在超大数据集场景下的随机读写和更新的问题。Kudu的设计有参考HBase的结构，也能够实现HBase擅长的快速的随机读写、更新功能。那么同为分布式存储系统，HBase和Kudu二者有何差异？两者的定位是否相同？我们通过分析HBase与Kudu整体结构和存储结构等方面对两者的差异进行比较。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;整体结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HBase的整体结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nos.netease.com/cloud-website-bucket/201809140941254ced65db-4cb9-4753-aa81-ba61ee37a65c.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;HBase的主要组件包括Master，zookeeper服务，RegionServer，HDFS。&lt;/p&gt;
&lt;p&gt;Master：用来管理与监控所有的HRegionServer，也是管理HBase元数据的模块。&lt;/p&gt;
&lt;p&gt;zookeeper：作为分布式协调服务，用于保存meta表的位置，master的位置，存储RS当前的工作状态。&lt;/p&gt;
&lt;p&gt;RegionServer：负责维护Master分配的region，region对应着表中一段区间内的内容，直接接受客户端传来的读写请求。&lt;/p&gt;
&lt;p&gt;HDFS：负责最终将写入的数据持久化，并通过多副本复制实现数据的高可靠性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kudu的整体结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nos.netease.com/cloud-website-bucket/201809140941497b85872e-c443-4c25-bf11-0a2084ee5f23.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Kudu集群中存在两种主要组件：&lt;/p&gt;
&lt;p&gt;（1）TServer，负责管理Tablet，tablet是负责一张表中某块内容的读写，接收其他TServer中leader tablet传来的同步信息。&lt;/p&gt;
&lt;p&gt;（2）Master，集群中的管理节点，用于管理tablet的基本信息，表的信息，并监听TServer的状态。多个Master之间通过Raft协议实现数据同步和高可用。&lt;/p&gt;
&lt;p&gt;主要区别  &lt;/p&gt;
&lt;p&gt;Kudu结构看上去跟HBase差别并不大，主要的区别包括：&lt;/p&gt;
&lt;p&gt;1、Kudu将HBase中zookeeper的功能放进了Master内，Kudu中Master的功能比HBase中的Master任务要多一些。&lt;/p&gt;
&lt;p&gt;2、Hbase将数据持久化这部分的功能交给了Hadoop中的HDFS，最终组织的数据存储在HDFS上。Kudu自己将存储模块集成在自己的结构中，内部的数据存储模块通过Raft协议来保证leader Tablet和replica Tablet内数据的强一致性，和数据的高可靠性。为什么不像HBase一样，利用HDFS来实现数据存储，猜测可能是因为HDFS读小文件时的时延太大，所以Kudu自己重新完成了底层的数据存储模块，并将其集成在TServer中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据存储方式  &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HBase  &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HBase是一款Nosql数据库，典型的KV系统，没有固定的schema模式，建表时只需指定一个或多个列族名即可，一个列族下面可以增加任意个列限定名。一个列限定名代表了实际中的一列，HBase将同一个列族下面的所有列存储在一起，所以HBase是一种面向列族式的数据库。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nos.netease.com/cloud-website-bucket/2018091409421860e26212-ecda-478f-a536-b0090bdb442d.png&quot; alt=&quot;&quot;/&gt;                    &lt;/p&gt;
&lt;p&gt; HBase将每个列族中的数据分别存储，一个列族中的每行数据中，将rowkey、列族名、列名、timestamp组成最终存取的key值，另外为了支持修改，删除，增加了一个表征该行数据是否删除的标记。在同一个列族中的所有数据，按照rowkey:columnfamily:columnQulifier:timestamp组成的key值大小进行升序排列，其中rowkey、columnfamily、columnQulifier采用的是字典顺序，其值越大，key越大，而timestamp是值越大，key越小。HBase通过按照列族分开存储，相对于行式存储能够实现更高的压缩比，这也是其比较重要的一个特性。&lt;/p&gt;
&lt;p&gt; HBase对一行数据进行更新时，HBase也是相当于插入一行新数据，在读数据时HBase按照timestamp的大小得到经过更新过的最新数据。&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://nos.netease.com/cloud-website-bucket/2018091409423645dc5dc2-fa8d-4e4c-9016-b81c16da41a9.png&quot; alt=&quot;&quot;/&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kudu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kudu是一种完全的列式存储引擎，表中的每一列数据都是存放在一起，列与列之间都是分开的。&lt;/p&gt;
&lt;p&gt;为了能够保存一部分历史数据，并实现MVCC，Kudu将数据分为三个部分。一个部分叫做base data，是当前的数据；第二个部分叫做UNDO records，存储的是从插入数据时到形成base data所进行的所有修改操作，修改操作以一定形式进行组织，实现快速查看历史数据；第三个部分是REDO records，存储的是还未merge到当前数据中的更新操作。下图中表示的是在Kudu中插入一条数据、更新数据两个操作的做法，当然做法不唯一，不唯一的原因是Kudu可以选择先不将更新操作合并到base data中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nos.netease.com/cloud-website-bucket/20180914094251712c2d1b-60d5-4dac-9a16-2155b11e74ff.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;差异分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）HBase是面向列族式的存储，每个列族都是分别存放的，HBase表设计时，很少使用设计多个列族，大多情况下是一个列族。这个时候的HBase的存储结构已经与行式存储无太大差别了。而Kudu，实现的是一个真正的面向列的存储方式，表中的每一列都是单独存放的；所以HBase与Kudu的差异主要在于类似于行式存储的列族式存储方式与典型的面向列式的存储方式的差异。&lt;/p&gt;
&lt;p&gt;（2）HBase是一款NoSQL类型的数据库，对表的设计主要在于rowkey与列族的设计，列的类型可以不指定，因为HBase在实际存储中都会将所有的value字段转换成二进制的字节流。因为不需要指定类型，所以在插入数据的时候可以任意指定列名（列限定名），这样相当于可以在建表之后动态改变表的结构。Kudu因为选择了列式存储，为了更好的提高列式存储的效果，Kudu要求在建表时指定每一列的类型，这样的做法是为了根据每一列的类型设置合适的编码方式，实现更高的数据压缩比，进而降低数据读入时的IO压力。&lt;/p&gt;
&lt;p&gt;（3）HBase对每一个cell数据中加入了timestamp字段，这样能够实现记录同一rowkey和列名的多版本数据，另外HBase将数据更新操作、删除操作也是作为一条数据写入，通过timestamp来标记更新时间，type来区分数据是插入、更新还是删除。HBase写入或者更新数据时可以指定timestamp，这样的设置可以完成某些特定的操作。&lt;/p&gt;
&lt;p&gt;Kudu也在数据存储中加入了timestamp这个字段，不像HBase可以直接在插入或者更新数据时设置特殊的timestamp值，Kudu的做法是由Kudu内部来控制timestamp的写入。不过Kudu允许在scan的时候设置timestamp参数，使得客户端可以scan到历史数据。&lt;/p&gt;
&lt;p&gt;（4）相对于HBase允许多版本的数据存在，Kudu为了提高批量读取数据时的效率，要求设计表时提供一列或者多列组成一个主键，主键唯一，不允许多个相同主键的数据存在。这样的设置下，Kudu不能像HBase一样将更新操作直接转换成插入一条新版本的数据，Kudu的选择是将写入的数据，更新操作分开存储。&lt;/p&gt;
&lt;p&gt;（5）当然还有一些其他的行式存储与列式存储之间在不同应用场景下的性能差异。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;写入和读取过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、HBase &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HBase作为一种非常典型的LSM结构的分布式存储系统，是Google bigtable的apache开源版本。经过近10年的发展，HBase已经成为了一个成熟的项目，在处理OLTP型的应用如消息日志，历史订单等应用较适用。在HBase中真正接受客户端读写请求的RegionServer的结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nos.netease.com/cloud-website-bucket/20180914094304db360d8a-f4f4-420f-b1b0-0fb101342a6d.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;关于HBase的几个关键点：&lt;/p&gt;
&lt;p&gt;（1）在HBase中，充当写入缓存的这个结构叫做Memstore，另外会将写入操作顺序写入HLOG（WAL）中以保证数据不丢失。&lt;/p&gt;
&lt;p&gt;（2）为了提高读的性能，HBase在内存中设置了blockcache，blockcache采用LRU策略将最近使用的数据块放在内存中。&lt;/p&gt;
&lt;p&gt;（3）作为分布式存储系统，为保证数据不因为集群中机器出现故障而导致数据丢失，HBase将实际数据存放在HDFS上，包括storefile与HLOG。HBase与HDFS低耦合，HBase作为HDFS的客户端，向HDFS读写数据。&lt;/p&gt;

&lt;p&gt;1、HBase写过程&lt;/p&gt;
&lt;p&gt;（1）客户端通过客户端上保存的RS信息缓存或者通过访问zk得到需要读写的region所在的RS信息；&lt;/p&gt;
&lt;p&gt;（2）RS接受客户端写入请求，先将写入的操作写入WAL，然后写入Memstore，这时HBase向客户端确认写入成功；&lt;/p&gt;
&lt;p&gt;（3）HBase在一定情况下将Memstore中的数据flush成storefile（可能是Memstore大小达到一定阈值或者region占用的内存超过一定阈值或者手动flush之类的），storefile以HFile的形式存放在HDFS上；&lt;/p&gt;
&lt;p&gt;（4）HBase会按照一定的合并策略对HDFS上的storefile进行合并操作，减少storefile的数量。&lt;/p&gt;
&lt;p&gt;2、HBase读过程&lt;/p&gt;
&lt;p&gt;HBase读数据的过程比较麻烦，原因包括：&lt;/p&gt;
&lt;p&gt;（1）HBase采用了LSM-tree的多组件算法作为数据组织方式，这种算法会导致一个region中有多个storefile；&lt;/p&gt;
&lt;p&gt;（2）HBase中采用了非原地更新的方式，将更新操作和删除操作转换成插入一条新数据的形式，虽然这样能够较快的实现更新与删除，但是将导致满足指定rowkey，列族、列名要求的数据有多个，并且可能分布在不同的storefile中；&lt;/p&gt;
&lt;p&gt;（3）HBase中允许设置插入和删除数据行的timestamp属性，这样导致按顺序落盘的storefile内数据的timestamp可能不是递增的。&lt;/p&gt;
&lt;p&gt;  下面介绍从HBase中读取一条指定（rowkey，column family，column）&lt;/p&gt;
&lt;p&gt;（1）读过程与HBase客户端写过程第一步一样，先尝试获取需要读的region所在的RS相关信息；&lt;/p&gt;
&lt;p&gt;（2）RS接收读请求，因为HBase中支持多版本数据（允许存在rowkey、列族名、列名相同的数据，不同版本的数据通过timestamp进行区分），另外更新与删除数据都是通过插入一条新数据实现的。所以要准确的读到数据，需要找到所有可能存储有该条数据的位置，包括在内存中未flush的memstore，已经flush到HDFS上的storefile，所以需要在1 memstore +N storefile中查找；&lt;/p&gt;
&lt;p&gt;（3）在找到的所有数据中通过判断timestamp值得到最终的数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、Kudu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nos.netease.com/cloud-website-bucket/20180914094320de9c6c44-3d01-4e0a-a26d-e7e2b2855255.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（1）Kudu中的Tablet是负责表中一块内容的读写工作，Tablet由一个或多个Rowset组成。其中有一个Rowset处于内存中，叫做Memrowset，Memrowset主要负责处理新的数据写入请求。DiskRowSet是MemRowset达到一定程序刷入磁盘后生成的，实质上是由一个CFile（Base Data）、多个DeltaFile（UNDO records &amp;amp;REDO records）和位于内存的DeltaMemStore组成。Base data、UNDO records、和REDO records都是不可修改的，DeltaMemStore达到一定大小后会将数据刷入磁盘生成新的REDO records。Kudu后台会有一个类似HBase的compaction线程按照一定的compaction 策略对tablet进行合并处理：&lt;/p&gt;
&lt;p&gt; a、将多个DeltaFile（REDO records）合并成一个大的DeltaFile；&lt;/p&gt;
&lt;p&gt; b、将多个REDO reccords文件与Base data进行合并，并生成新的UNDO records；&lt;/p&gt;
&lt;p&gt; c、将多个DiskRowset之间进行合并，减少DiskRowset的数量。&lt;/p&gt;
&lt;p&gt;（2）Kudu将最终的数据存储在本地磁盘上，为了保证数据可靠性，Kudu为一个tablet设置了多个副本（一般为3或5个）。所以一个tablet会由多个TServer负责维护，其中有个副本称为leader tablet，写入的请求只能通过leader tablet来处理，副本之间通过Raft协议保证其他副本与leader tablet的强一致性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、Kudu写过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kudu与HBase不同，Kudu将写入操作分为两种，一种是插入一条新数据，一种是对一条已插入数据的更新。&lt;/p&gt;
&lt;p&gt;1、Kudu插入一条新数据&lt;/p&gt;
&lt;p&gt;（1）客户端连接Master获取表的相关信息，包括分区信息，表中所有tablet的信息；&lt;/p&gt;
&lt;p&gt;（2）客户端找到负责处理读写请求的tablet所负责维护的TServer。Kudu接受客户端的请求，检查请求是否符合要求（表结构）；&lt;/p&gt;
&lt;p&gt;（3）Kudu在Tablet中的所有rowset（memrowset,diskrowset）中进行查找，看是否存在与待插入数据相同主键的数据，如果存在就返回错误，否则继续；&lt;/p&gt;
&lt;p&gt;（4）Kudu在MemRowset中写入一行新数据，在MemRowset数据达到一定大小时，MemRowset将数据落盘，并生成一个diskrowset用于持久化数据，还生成一个memrowset继续接收新数据的请求。&lt;/p&gt;
&lt;p&gt; 2、Kudu对原有数据的更新&lt;/p&gt;
&lt;p&gt;（1）客户端连接Master获取表的相关信息，包括分区信息，表中所有tablet的信息；&lt;/p&gt;
&lt;p&gt;（2）Kudu接受请求，检查请求是否符合要求；&lt;/p&gt;
&lt;p&gt;（3）因为待更新数据可能位于memrowset中，也可能已经flush到磁盘上，形成diskrowset。因此根据待更新数据所处位置不同，kudu有不同的做法：&lt;/p&gt;
&lt;p&gt;当待更新数据位于memrowset时&lt;/p&gt;
&lt;p&gt;a、找到待更新数据所在行，然后将更新操作记录在所在行中一个mutation链表中；在memrowset将数据落盘时，Kudu会将更新合并到base data，并生成UNDO records用于查看历史版本的数据和MVCC,UNDO records实际上也是以DeltaFile的形式存放；&lt;/p&gt;
&lt;p&gt;当待更新数据位于DiskRowset中&lt;/p&gt;
&lt;p&gt;b、找到待更新数据所在的DiskRowset，每个DiskRowset都会在内存中设置一个DeltaMemStore，将更新操作记录在DeltaMemStore中，在DeltaMemStore达到一定大小时，flush在磁盘，形成Delta并存在方DeltaFile中；&lt;/p&gt;
&lt;p&gt;实际上Kudu提交更新时会使用Raft协议将更新同步到其他replica上去，当然如果在memrowset和diskrowset中都没有找到这条数据，那么返回错误给客户端；另外当DiskRowset中的deltafile太多时，Kudu会采用一定的策略对一组deltafile进行合并。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、Kudu读过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、客户端连接Master获取表的相关信息，包括分区信息，表中所有tablet的信息；&lt;/p&gt;
&lt;p&gt;2、客户端找到需要读取的数据的tablet所在的TServer，Kudu接受读请求，并记录timestamp信息，如果没有显式指定，那么表示使用当前时间；&lt;/p&gt;
&lt;p&gt;3、Kudu找到待读数据的所有相关信息，当目标数据处于memrowset时，根据读取操作中包含的timestamp信息将该timestamp前提交的更新操作合并到base data中，这个更新操作记录在该行数据对应的mutation链表中；&lt;/p&gt;
&lt;p&gt;4、当读取的目标数据位于diskrowset中，在所有DeltaFile中找到所有目标数据相关的UNDO record和REDO records，REDO records可能位于多个DeltaFile中，根据读操作中包含的timestamp信息判断是否需要将base data进行回滚或者利用REDO records将base data进行合并更新。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、Kudu与HBase在读写上过程中的差异&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、写过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）HBase写的时候，不管是新插入一条数据还是更新数据，都当作插入一条新数据来进行；而Kudu将插入新数据与更新操作分别看待。&lt;/p&gt;
&lt;p&gt;（2）Kudu表结构中必须设置一个唯一键，插入数据的时候必须判断一些该数据的主键是否唯一，所以插入的时候其实有一个读的过程；而HBase没有太多限制，待插入数据将直接写进memstore。&lt;/p&gt;
&lt;p&gt;（3）HBase实现数据可靠性是通过将落盘的数据写入HDFS来实现，而Kudu是通过将数据写入和更新操作同步在其他副本上实现数据可靠性。&lt;/p&gt;
&lt;p&gt;结合以上几点，可以看出Kudu在写的性能上相对HBase有一定的劣势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、读过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）在HBase中，读取的数据可能有多个版本，所以需要结合多个storefile进行查询；Kudu数据只可能存在于一个DiskRowset或者MemRowset中，但是因为可能存在还未合并进原数据的更新，所以Kudu也需要结合多个DeltaFile进行查询。&lt;/p&gt;
&lt;p&gt;（2）HBase写入或者更新时可以指定timestamp，导致storefile之间timestamp范围的规律性降低，增加了实际查询storefile的数量；Kudu不允许人为指定写入或者更新时的timestamp值，DeltaFile之间timestamp连续，可以更快的找到需要的DeltaFile。&lt;/p&gt;
&lt;p&gt;（3）HBase通过timestamp值可以直接取出数据；而Kudu实现多版本是通过保留UNDO records（已经合并过的操作）和REDO records（未合并过的操作）完成的，在一些情况下Kudu需要将base data结合UNDO records进行回滚或者结合REDO records进行合并然后才能得到真正所需要的数据。&lt;/p&gt;
&lt;p&gt; 结合以上三点可以得出，不管是HBase还是Kudu，在读取一条数据时都需要从多个文件中搜寻相关信息。相对于HBase，Kudu选择将插入数据和更新操作分开，一条数据只可能存在于一个DiskRowset或者memRowset中，只需要搜寻到一个rowset中存在指定数据就不用继续往下找了，用户不能设置更新和插入时的timestamp值，减少了在rowset中DeltaFile的读取数量。这样在scan的情况下可以结合列式存储的优点实现较高的读性能，特别是在更新数量较少的情况下能够有效提高scan性能。&lt;/p&gt;
&lt;p&gt;另外，本文在描述HBase读写过程中没有考虑读写中使用的优化技术如Bloomfilter、timestamp range等。其实Kudu中也有使用类似的优化技术来提高读写性能，本文只是简单的分析，因此就不再详细讨论读写过程。如有需要了解HBase的详细读写过程，可以参考范欣欣的  &lt;a href=&quot;http://ks.netease.com/blog?id=3996&quot;&gt;  HBase - 数据写入流程解析&lt;/a&gt;等一系列HBase相关文章。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他差异&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HBase：使用的java，内存的释放通过GC来完成，在内存比较紧张时可能引发full GC进而导致服务不稳定；&lt;/p&gt;
&lt;p&gt;Kudu：核心模块用的C++来实现，没有full gc的风险。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 本文主要简单介绍了一下Kudu，并在整体结构，数据存储结构还有读写过程等方面上对HBase和Kudu这两款分布式存储系统进行大体上的比较。Kudu通过要求完整的表结构设置，主键的设定，以列式存储作为数据在磁盘上的组织方式，更新和数据分开等技巧，使得Kudu能够实现像HBase一样实现数据的随机读写之外，在HBase不太擅长的批量数据扫描（scan）具有较好的性能。而批量读数据正是olap型应用所关注的重点，正如Kudu官网主页上描述的，Kudu实现的是既可以实现数据的快速插入与实时更新，也可以实现数据的快速分析。Kudu的定位不是取代HBase，而是以降低写的性能为代价，提高了批量读的性能，使其能够实现快速在线分析。&lt;/p&gt;
&lt;p&gt;本文只是简单的分析一下Kudu的结构，并与HBase比较，若有什么不对的地方，可以一起探讨交流。&lt;/p&gt;

&lt;p&gt;本文来自网易云社区，经作者闵涛授权发布     &lt;/p&gt;

&lt;p&gt;相关文章：&lt;br/&gt;【推荐】 &lt;a href=&quot;https://www.cnblogs.com/zyfd/p/9578216.html&quot;&gt;消息推送平台高可用实践（下）&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 14 Sep 2018 05:25:00 +0000</pubDate>
<dc:creator>网易云</dc:creator>
<og:description>本文来自网易云社区 作者：闽涛 背景 Cloudera在2016年发布了新型的分布式存储系统——kudu，kudu目前也是apache下面的开源项目。Hadoop生态圈中的技术繁多，HDFS作为底层数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/163yun/p/9646008.html</dc:identifier>
</item>
<item>
<title>SpringCloud04 服务配置中心、消息总线、远程配置动态刷新 - 寻渝记</title>
<link>http://www.cnblogs.com/NeverCtrl-C/p/9645990.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeverCtrl-C/p/9645990.html</guid>
<description>
&lt;h2&gt;1 环境说明&lt;/h2&gt;
&lt;p&gt;　　JDK：1.8&lt;/p&gt;
&lt;p&gt;　　MAVENT：3.5&lt;/p&gt;
&lt;p&gt;　　SpringBoot：2.0.5.RELEASE&lt;/p&gt;
&lt;p&gt;　　SpringCloud：Finchley.SR1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914094902048-398106277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2 创建服务注册中心（Eureka服务端）&lt;/h2&gt;
&lt;p&gt;　　说明：本博文仅仅以一个单例的注册中心为例，&lt;a href=&quot;https://www.cnblogs.com/NeverCtrl-C/p/9535164.html&quot; target=&quot;_blank&quot;&gt;高可用的服务注册中心请参见&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;　　2.1 引入依赖&lt;/h3&gt;
&lt;p&gt;　　　　利用IDEA创建服务注册中心项目时&lt;span&gt;只需要引入&lt;/span&gt; spring-cloud-starter-netflix-eureka-server 一个依赖就可以啦&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-server&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d559e314-6c1f-4f98-bfec-c43eac23d38f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d559e314-6c1f-4f98-bfec-c43eac23d38f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d559e314-6c1f-4f98-bfec-c43eac23d38f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;eureka&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;eureka&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Finchley.SR1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-server&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　2.2 配置文件&lt;/h3&gt;
&lt;p&gt;　　　　配置服务注册中心端口以及服务服务注册中心的应用名&lt;/p&gt;
&lt;p&gt;　　　　技巧01：单例模式下的服务注册中心&lt;span&gt;需要&lt;/span&gt;关闭向其他服务注册中心注册本服务信息功能&lt;span&gt;和&lt;/span&gt;从其他服务注册中心拉取注册服务信息功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914095729726-1174444606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_21b2d46a-44b1-4b25-a5b6-9b040e162703&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_21b2d46a-44b1-4b25-a5b6-9b040e162703&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_21b2d46a-44b1-4b25-a5b6-9b040e162703&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8761

spring:
  application:
    name: eureka

eureka:
  client:
    fetch-registry: false # 关闭从其他服务注册中心拉取服务信息
    register-with-eureka: false # 不向其他服务注册中心注册本服务的信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;application.yml&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　2.3 引入服务注册中心配置&lt;/h3&gt;
&lt;p&gt;　　　　需要在启动类上&lt;span&gt;利用&lt;/span&gt;@EnableEurekaServer&lt;span&gt;将&lt;/span&gt;SpringBoot为我们提供的Eureka的相关配置&lt;span&gt;引入到&lt;/span&gt;系统应用中，否则Eureka服务注册中心不会生效&lt;/p&gt;
&lt;p&gt;　　　　技巧01：@EnableEurekaServer的作用就是将某个配置了Eureka相关配置的类引入到应用容器中&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914100134101-715586353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　2.4 启动服务注册中心&lt;/h3&gt;
&lt;p&gt;　　　　通过IP和端口访问的效果如果所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914100317314-2041317721.png&quot; alt=&quot;&quot; width=&quot;961&quot; height=&quot;556&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3 创建Eureka客户端&lt;/h2&gt;
&lt;h3&gt;　　3.1 引入依赖&lt;/h3&gt;
&lt;p&gt;　　　　利用IDEA创建SpringBoot项目时引入 spring-boot-starter-web、spring-cloud-starter-netflix-eureka-client即可，我这里同时引入了devtools、lombok只是为了开发方便而已&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914100655586-1606262567.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7f97c073-97a5-4a67-aba4-72656d6ca3e7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7f97c073-97a5-4a67-aba4-72656d6ca3e7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7f97c073-97a5-4a67-aba4-72656d6ca3e7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;consumer&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;consumer&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Finchley.SR1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt; 　　3.2 配置文件&lt;/h3&gt;
&lt;p&gt;　　　　需要配置应用名和应用端口、配置注册中心连接信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914101036798-1047893209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　3.4 启动Eureka客户端&lt;/h3&gt;
&lt;p&gt;　　　　&lt;span&gt;在&lt;/span&gt;启动类上&lt;span&gt;利用&lt;/span&gt;@EnableEurekaClient&lt;span&gt;将&lt;/span&gt;Eureka客户端的相关配置&lt;span&gt;引入到&lt;/span&gt;应用容器中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914101221010-1066591242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　3.5 启动Eureka客户端&lt;/h3&gt;
&lt;p&gt;　　　　Eureka客户端启动成功后就可以在Eureka服务端的控制页面看到注册成功的服务信息，例如&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914101422506-1991514366.png&quot; alt=&quot;&quot; width=&quot;898&quot; height=&quot;424&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4 创建ConfigServer&lt;/h2&gt;
&lt;p&gt;　　技巧01：ConfigServer也是一个Eureka客户端，同样需要向Eureka服务端进行注册；只不过这个服务专门负责管理一些配置文件&lt;/p&gt;
&lt;h3&gt;　　4.1 引入依赖&lt;/h3&gt;
&lt;p&gt;　　　　利用IDEA创建SpringBoot项目时引入 spring-cloud-starter-netflix-eureka-client 、spring-cloud-config-server 依赖&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914101758212-1000872442.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_a0da40d4-ee10-48dc-8fbe-11ef0d679253&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a0da40d4-ee10-48dc-8fbe-11ef0d679253&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a0da40d4-ee10-48dc-8fbe-11ef0d679253&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;config&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;config&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Finchley.SR1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring-cloud.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-config-server&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.projectlombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;lombok&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;optional&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring-cloud.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;import&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;pom.xml&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　4.2 配置文件&lt;/h3&gt;
&lt;p&gt;　　　　需要配置应用端口、应用名、服务注册中心、远程代码仓库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914102305028-221522275.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　4.3 引入默认配置&lt;/h3&gt;
&lt;p&gt;　　　　利用@EnableEurekaClient将Eureka客户端的默认配置引入到应用容器中，利用@EnableConfigServer将配置中心的的默认配置引入到应用容器中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914102551882-629401694.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　4.4 启动配置中心应用&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：启动成功后可以在Eureka的控制面板中查看到相关的服务注册信息，例如&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914102801470-416157573.png&quot; alt=&quot;&quot; width=&quot;837&quot; height=&quot;428&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　4.5 查看远程仓库中的配置信息&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：配置服务中心启动时会暴露一些URL，可以利用这些URL访问远程仓库中的配置文件信息，例如&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914103056426-5148280.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　4.5.1 访问规则说明&lt;/h4&gt;
&lt;p&gt;　　　　　　/{name}-{profiles}  -&amp;gt; /配置文件-环境&lt;/p&gt;
&lt;p&gt;　　　　　　/{label}/{name}-{profiles} -&amp;gt; /git分支/配置文件-环境&lt;/p&gt;
&lt;p&gt;　　　　　　技巧01：以上两种格式都同时支持 yml、json、properties三种数据格式&lt;/p&gt;
&lt;h4&gt;　　　　4.5.2 git仓库配置文件命名&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914103558021-1165586545.png&quot; alt=&quot;&quot; width=&quot;894&quot; height=&quot;247&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　4.5.3 通过配置中心访问指定的配置文件信息&lt;/h4&gt;
&lt;p&gt;　　　　　　技巧01：访问任何一个consumer-xxx.yml 的配置文件时都会和 consumer.yml 进行整合；可以将consumer.yml作为共有配置的存放文件&lt;/p&gt;
&lt;p&gt;　　　　　　技巧02：使用 /{name}-{profiles}  访问时默认访问master分支，可以在配置中心的配置文件中指定使用哪一个分支&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914103849576-1270571453.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914103931179-536295369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914104006313-579284747.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　4.6 配置本地仓库路径和远程仓库分支&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：配置中心服务从远程仓库获取到配置文件后会存放到本地的一个默认目录，可以在配置中心服务的配置文件中配置这个本地仓库地址&lt;/p&gt;
&lt;p&gt;　　　　技巧02：配置中心配置远程仓库地址信息时可以指定使用远程仓库的哪一个分支；如果配置了分支后再使用  /{name}-{profiles}  这种格式获取配置文件信息时就会返回配置分支中的配置文件信息；当然亦可以使用 /label/ /{name}-{profiles}  这种格式访问指定分支的配置文件信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914105333625-1740433275.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;5 配置中心客户端&lt;/h2&gt;
&lt;p&gt;　　技巧01：需要从配置中心服务获取配置信息的服务都可叫作配置中心客户端&lt;/p&gt;
&lt;h3&gt;　　5.1 引入依赖&lt;/h3&gt;
&lt;p&gt;　　　　修改第三节的Eureka客户端，只需要再引入  spring-cloud-config-client 即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-config-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　5.2 修改配置&lt;/h3&gt;
&lt;p&gt;　　　　将原有的配置全部剪切到远程仓库中对应的consumer.yml配置文件中，并将这个cnsumer.yml多复制几份并制定环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914110207602-1302974458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　5.3 配置启动配置文件&lt;/h3&gt;
&lt;p&gt;　　　　场景：config&lt;span&gt;是&lt;/span&gt;服务配置中心、consumer&lt;span&gt;是&lt;/span&gt;一个需要从config服务中获取配置信息的服务、eureka&lt;span&gt;是&lt;/span&gt;服务注册中心&lt;/p&gt;
&lt;p&gt;　　　　技巧01：config和consumer&lt;span&gt;都必须&lt;/span&gt;在eureka中心注册，consumer&lt;span&gt;是通过&lt;/span&gt;eureka从config中获取服务的；所以&lt;span&gt;不能&lt;/span&gt;直接将配置中心的连接信息配置到application.yml中，&lt;span&gt;而是需要&lt;/span&gt;新建一个启动配置文件bootsttap.yml，&lt;span&gt;需要将&lt;/span&gt;应用名、配置中心信息、注册中心信息中心&lt;span&gt;配置到&lt;/span&gt;bootstrap.yml中&lt;/p&gt;
&lt;p&gt;　　　　技巧02：在bootstrap.yml中配置的应用名必须和远程仓库中的配置文件保持一致，因为需要通过应用名到配置中心去获取该应用的配置信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914112328299-1031153125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　5.4 启动consumer服务&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：启动consumer服务时控制台会打印出配置中心的信息，例如&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914112632733-2082270989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　5.4 使用远程git中的配置文件　　&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：和使用在 application.yml 中配置的信息一样，例如&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914115909036-878259694.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914120432166-2075746848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　5.5 高可用配置中心搭建&lt;/h3&gt;
&lt;p&gt;　　　　将配置中心打包后分别部署就可以啦，版案例利用IDEA通过不同端口启动实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914120819101-1821022793.png&quot; alt=&quot;&quot; width=&quot;862&quot; height=&quot;164&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　启动了两个配置中心后，多次重启consumer服务时就会从不同的配置中心获取数据，例如&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914121011512-643684730.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;6 整合消息中线&lt;/h2&gt;
&lt;p&gt;　　说明：虽然consumer可以通过配置中心获取到远程仓库中的配置信息，但是我们修改远程仓库中的配置文件时并不能生效；想用时远程仓库的配置生效我们必须一起重启config服务和consumer服务；如果不想通过从前来实现的话就需要使用消息总线来实现。&lt;/p&gt;
&lt;h3&gt;　　6.1 集成消息总线&lt;/h3&gt;
&lt;h4&gt;　　　　6.1.1 安装RabbitMQ&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;a href=&quot;https://www.cnblogs.com/NeverCtrl-C/p/9563339.html&quot; target=&quot;_blank&quot;&gt;参考博文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　rabbitMQ控制台&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914122521955-995689632.png&quot; alt=&quot;&quot; width=&quot;934&quot; height=&quot;443&quot;/&gt;&lt;/p&gt;
&lt;h4&gt; 　　　　6.1.2 添加依赖&lt;/h4&gt;
&lt;p&gt;　　　　　　分别在consumer和config服务中添加依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-bus-amqp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　6.1.3 添加RabbitMQ配置&lt;/h4&gt;
&lt;p&gt;　　　　　　技巧01：consumer服务可以配置到远程服务的consumer.yml文件中&lt;/p&gt;
&lt;p&gt;　　　　　　技巧02：config服务必须在application.yml中进行配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914122558119-454073858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　6.1.4 配置config服务&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;span&gt;开启&lt;/span&gt;config服务的所有映射端口，想要让修改远程仓库中的仓库生效，在修改后必须向config服务发送一个post请求，请求路径为： &lt;span&gt;/actuator/bus-refresh&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914123300717-894192686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　6.1.5 添加@RefreshScope&lt;/h4&gt;
&lt;p&gt;　　　　　　在用到了远程配置的类级别添加@RefreshScope注解，否则修改远程仓库后及时向config的&lt;span&gt; /actuator/bus-refresh&lt;/span&gt; 发送了post请求也不会进行更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914124254993-735897208.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　6.1.6 启动config和consumer服务&lt;/h4&gt;
&lt;p&gt;　　　　　　启动服务后会自动在RabbitMQ中创建每个服务各自的queue，和一个springcloudbus对应exchange&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914122847706-2043836164.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914122917585-1943473321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　6.1.7 修改刷新&lt;/h4&gt;
&lt;p&gt;　　　　　　》修改远程仓库的配置信息，修改后通过config可以获取到最新的配置，但是其他服务不会拿到配置；这时ocnfig服务必须触发一个事件将配置更新放到总线队列中去&lt;/p&gt;
&lt;p&gt;　　　　　　》想config服务的 /actuator/bus-refresh 发送一个post请求就可以让consumer服务也获取到最新的配置信息&lt;/p&gt;
&lt;h4&gt;　　　　6.1.8 利用远程仓库向config服务的 /actuator/bus-refresh 发送POST请求&lt;/h4&gt;
&lt;p&gt;　　　　　　》利用natapp在远程仓库配置webhooks&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914130821662-1262304757.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　》在config服务中引入依赖（如果不引入这个依赖就不会自动刷新，必须手动向config服务发送post请求才能实现动态刷新）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;自己添加的依赖：解决了利用github+rabbitmq实现配置动态刷新的功能&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-cloud-config-monitor&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　　　　　》修改仓库配置信息并提交后config控制台会输出日志信息，同时rabbitMQ中也会出现消息的推送和订阅&lt;/p&gt;

&lt;h2&gt;7 本博文源代码&lt;/h2&gt;
&lt;p&gt;　　&lt;a href=&quot;https://gitee.com/wysfury/springcloud_config&quot; target=&quot;_blank&quot;&gt;点击获取&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1057762/201809/1057762-20180914131733280-627982656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




</description>
<pubDate>Fri, 14 Sep 2018 05:18:00 +0000</pubDate>
<dc:creator>寻渝记</dc:creator>
<og:description>1 环境说明 JDK：1.8 MAVENT：3.5 SpringBoot：2.0.5.RELEASE SpringCloud：Finchley.SR1 2 创建服务注册中心（Eureka服务端） 说明</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeverCtrl-C/p/9645990.html</dc:identifier>
</item>
<item>
<title>一次掌握 React 与 React Native 两个框架 - Parry</title>
<link>http://www.cnblogs.com/parry/p/intro_react_and_reactnative.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/parry/p/intro_react_and_reactnative.html</guid>
<description>&lt;p&gt;此系列文章将整合我的 React 视频教程与 React Native 书籍中的精华部分，给大家介绍 React 与 React Native 结合学习的方法。&lt;/p&gt;

&lt;p&gt;我们在开始系列文章的技术点内容前，花一点时间探讨一下软件开发语言以及框架的学习本质，相对于整个技术点的讲解，花这一点一起思考的时间是值得的。&lt;/p&gt;
&lt;p&gt;相信看此系列文章的朋友都已有了非常多的软件开发经验，而当我们回顾语言与框架的学习过程时，所有语言的基础语法都大同小异，无非基础数据类型、条件判断、分支判断、循环处理等等。而差别或者说最重要的是在框架的底层本质，也就是为什么会产生此框架、底层的优势是什么、为什么不用别的框架、框架的底层与设备之间是如何实现通信的等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqdjc.com1.z0.glb.clouddn.com/b_54bd95498a4c10badfa57e8a5157f4e9.png&quot; alt=&quot;截图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们在开发的过程中，遇到的一些基础语法问题、框架使用问题，基本上只要灵活使用一下搜索引擎都能找到答案，有句话说：你要相信你遇到的技术难题在这个世界上肯定有其他人也遇到了。&lt;/p&gt;
&lt;p&gt;而当我们需要抓住本质，对语言与框架有更加深入地了解、进行技术选型时、知道每一种技术的优劣、当框架的表现出现了一些诡异问题时会迅速定位问题、优化项目的性能，以及成为某一领域的专家时，最高效的学习方法就是直接去接触语言与框架的底层本质。&lt;/p&gt;
&lt;p&gt;如 JavaScript 中的深拷贝与浅拷贝，如果只是进行数据类型的深拷贝与浅拷贝，即使你忘记了处理逻辑，你只要通过搜索引擎搜索就可以找到很多的实现方法，而如果你想一次掌握好此知识点，那么就需要你直接去学习数据结构以及数据类型对应的值类型与引用类型的区别，只有在掌握此部分的知识点后，在遇到数据类型的「诡异」表现时你才能抓住问题本质。&lt;/p&gt;
&lt;p&gt;再如你在使用 React Native 框架提供的各种组件与 API，如访问移动设备的相册与摄像头、震动、GPS 定位、网络状态、消息推送以及整个 React Native 框架生态下提供的成千上万的第三方功能组件时，其实底层都是 React Native 框架与 iOS、Android 平台通信的实现。在原理章节掌握了原理后，后续的章节我们还会一起自己动手来实现一个与 iOS、Android 平台通信的自定义组件。&lt;/p&gt;
&lt;p&gt;学习、精通语言与框架最好的方法就是直接掌握其最本质的部分。&lt;/p&gt;

&lt;p&gt;React 框架最早孵化于 Facebook 内部，作为内部使用的框架，在 2011 年的时候 React 框架被用于 Facebook 的新闻流并于 2012 年使用在了 Instagram 项目上。在 2013 年五月美国的 JSConf 大会上，React 框架项目被宣布了开源。&lt;/p&gt;
&lt;p&gt;在移动开发方面，Facebook 曾致力于使用 HTML 5 进行移动端的开发，最终发现与原生的 App 相比，体验上还是有非常大的差距，并且这种差距越来越大，特别是性能方面的差距。&lt;br/&gt;最终，Facebook 放弃了 HTML 5 的技术方向，结合之前介绍的 React 框架的发展历史，2015 年 3 月，Facebook 正式发布了 React Native 框架，此框架专注于移动端 App 的开发。&lt;/p&gt;
&lt;p&gt;React 作为构建高性能 Web 应用的框架，React Native 作为构建跨 iOS 与 Android 平台 App 应用的框架，极其繁杂的开发生态造成了很多朋友对 React / React Native 框架产生了些许误解，认为框架太过庞杂混乱，造成了学习成本与开发成本的增加。&lt;/p&gt;
&lt;p&gt;此系列文章将带领大家深入探究 React 与 React Native 框架的本质，只有在掌握了框架本质后，才能快速地领略到这两个孪生框架的核心，不仅可以在这两个框架间灵活切换学习，还可以不被繁杂的框架生态所蒙蔽，最终达到以不变应万变的境界。&lt;/p&gt;

&lt;p&gt;从上面的 React 与 React Native 简介即可看到，两个框架算是孪生项目，而 React Native 的底层也就是 React 框架。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqdjc.com1.z0.glb.clouddn.com/b_533f6a0ca092419252a44eeeaed9d7a1.png&quot; alt=&quot;截图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;React 框架使用 JSX（JavaScript eXtension，可以理解为看起来像 HTML 的 JavaScript）指定 React 组件的输出定义，而逻辑函数的部分依然是采用 JavaScript ES6 来编写，所以对于前端开发人员来说上手非常地容易。&lt;/p&gt;
&lt;p&gt;编写的代码通过 React 框架渲染在 Web 浏览器中运行，所以 React 可以用来开发 Web 项目，当然借助第三方的组件还可以开发桌面项目，这些我们在后续会进行相关介绍。&lt;/p&gt;
&lt;p&gt;React Native 依然由 JSX 进行组件布局的开发，框架中组件开发的原理与思想与 React 框架一致，而且底层都由最重要的 state 进行驱动。&lt;/p&gt;
&lt;p&gt;React 与 React Native 除了在编码表现层都使用 JSX 语法外，在 React 与 React Native 的底层都有 Virtual DOM 与 DOM 之间的映射与转换，以实现了页面组件高效更新的前端表现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqdjc.com1.z0.glb.clouddn.com/b_8e5d85499a05f7ef6482fe32fd32b14f.png&quot; alt=&quot;截图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用户看到的表现层（Browser DOM）的更新，底层都是由 state 驱动了 Virtual DOM 进行变动前与变动后的比较，最终将需要重新渲染的 DOM 进行渲染展示。&lt;/p&gt;
&lt;p&gt;而这种通过只修改 state (Model) 值引起 HTML (DOM) 变化的框架设计模式就是我们熟悉的 MVVM (Model-View-ViewModel) 模式。&lt;/p&gt;
&lt;p&gt;以前我们可以通过直接操作 HTML 元素的形式进行页面的更新，如下面的这段 jQuery 代码。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;$('#container').text('Updated Content...')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当这样的代码在页面更新非常复杂的项目中使用时，你会疲于通过操作 DOM 元素更新，映射后台大量的数据更新。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqdjc.com1.z0.glb.clouddn.com/b_c25ce170036814a6fb0ed00b1cc9ea81.png&quot; alt=&quot;截图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而 MVVM 模式，如目前的前端框架 Vue、Angular 和我们介绍的 React 都是基于此设计模式，将页面呈现 View 与后台的数据模型 Model 进行了分离解耦，使得我们只需要专注于 Model 的处理，通过修改 Model 中的属性值，引起前端 View 的变化，不过 React 默认的数据绑定方式是单向绑定，这一部分的差异我们后续章节会展开讨论。&lt;/p&gt;
&lt;p&gt;对于 MVVM 模式的体验以及如何通过修改 Model 引起 View 的更新，大家可以查看下一小节，我会给大家具体的代码演示。&lt;/p&gt;
&lt;p&gt;而目前的移动端开发方面，「原生开发」是指 iOS 平台通过 Objective-C 或 Swift 语言开发并通过 Xcode 编译打包发布 iOS App，Android 平台通过 Java 语言开发并通过 Android Studio 编译打包发布 Android App。&lt;/p&gt;
&lt;p&gt;通过下图我们可以看到「原生开发」的学习成本以及后期 App 维护的成本，而 React Native 则是通过 JavaScript 开发，然后通过框架提供的与对应平台之间的 bridge 进行通信，实现了只用一套代码可以直接部署到 iOS 与 Android 平台并编译出对应平台的 App。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xqdjc.com1.z0.glb.clouddn.com/b_756b206451e46b6a653bc9d047379343.png&quot; alt=&quot;截图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;并且 React Native App 页面布局直接通过 HTML 和 CSS 的前端基础技术进行布局与开发，大大降低了学习成本。&lt;/p&gt;
&lt;p&gt;你如果早就在心里有开发一个自己 App 的想法，而刚好你有前端开发的技能，React Native 一定会是你孵化自己 App 最好的选择。&lt;/p&gt;

&lt;p&gt;本系列文章会从 React 的基本使用方法开始，并会讲解到 React 的底层原理，并从一些实际案例中探讨出 React 底层对于前台表现的原因。底层原理会结合独立的算法以及 React 框架的源码进行详细解释。&lt;/p&gt;
&lt;p&gt;之后会讲解演示 React Native 的基本使用，同时会解释 React Native 框架与 React 框架的关系、React Native 的性能问题、以及 React Native 与 iOS、Android 平台通信的原理，抛却 React Native 纷杂的各种类库，直达 React Native 的底层原理，掌握了原理后才能看懂所有表象的类库实现原理。并会动手自己实现 iOS 平台与 Android 平台的自定义组件，深入掌握各种第三方组件的实现原理。&lt;/p&gt;
&lt;blockquote readability=&quot;2.8977272727273&quot;&gt;
&lt;p&gt;我的「React.js 入门与实战」视频教程：&lt;a href=&quot;http://coding.imooc.com/class/83.html&quot; class=&quot;uri&quot;&gt;http://coding.imooc.com/class/83.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;3.4027777777778&quot;&gt;
&lt;p&gt;我的《React Native 精解与实战》书籍：&lt;a href=&quot;http://rn.parryqiu.com/&quot; class=&quot;uri&quot;&gt;http://rn.parryqiu.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一小节给大家描绘了整体安排以及学习的本质，接下来我们会先从 React 底层原理开始，掌握好这两个框架最本质的部分。&lt;/p&gt;
&lt;p&gt;任何知识的学习过程都不会是「舒服」的过程，只有跳离自己的舒适区，才能有进步，所以遇到任何疑问或想交流的问题，大家只需在文章下留言即可，我都会与大家交流。&lt;/p&gt;
</description>
<pubDate>Fri, 14 Sep 2018 04:34:00 +0000</pubDate>
<dc:creator>Parry</dc:creator>
<og:description>此系列文章将整合我的 React 视频教程与 React Native 书籍中的精华部分，给大家介绍 React 与 React Native 结合学习的方法。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/parry/p/intro_react_and_reactnative.html</dc:identifier>
</item>
<item>
<title>美团扫码付小程序的优化实践 - 美团技术团队</title>
<link>http://www.cnblogs.com/meituantech/p/9645625.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/meituantech/p/9645625.html</guid>
<description>&lt;p&gt;短短几年的时间，微信小程序已经从一颗小小的萌芽成长为参天大树，形成了较大规模的开发者生态系统，尤其是在支付、线下垂直领域潜力巨大。&lt;/p&gt;
&lt;p&gt;作为领先的生活服务平台，美团的技术团队在小程序领域也进行了很多的探索和实践。像mpvue就是一款使用Vue.js开发微信小程序的前端框架，而且已经在美团点评多个实际业务项目中得到了验证，详细介绍大家可以阅读《&lt;a href=&quot;https://tech.meituan.com/mt_mpvue_development_framework.html&quot;&gt;用Vue.js开发微信小程序：开源框架mpvue解析&lt;/a&gt;》一文。目前，mpvue已经开源，项目地址是：&lt;a href=&quot;https://github.com/Meituan-Dianping/mpvue%E3%80%82&quot;&gt;https://github.com/Meituan-Dianping/mpvue。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文将介绍扫码付小程序的实践，根据美团前端工程师陈瑶在美团&lt;a href=&quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxe730920d465a6732&amp;amp;redirect_uri=https%3A%2F%2Ftech.meituan.com%2Fsalon%2F%23%2F35673&amp;amp;response_type=code&amp;amp;scope=snsapi_userinfo&amp;amp;state=wx&amp;amp;connect_redirect=1#wechat_redirect&quot;&gt;第31期技术沙龙&lt;/a&gt;（点击可以查看这次沙龙四场演讲的Slides和视频）的演讲《金融扫码付H5迁移小程序拓荒之旅》整理而成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/saomafu_xiaochengxu/0.jpg&quot; alt=&quot;图片0&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;什么是扫码付小程序？&lt;/h2&gt;
&lt;p&gt;美团扫码付是一款面向C端消费者推出的线下收单业务，相信大家已经在线下很多餐馆和其他生活服务商家体验过了。这项业务主要就是通过小程序提供服务的，而在实际场景中，用户先使用微信“扫一扫”功能，扫描商家二维码，系统会自动调用扫码付小程序，进入支付页面，最后输入金额完成商品的支付。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/saomafu_xiaochengxu/1.png&quot; alt=&quot;图片1&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;目标及数据分析&lt;/h2&gt;
&lt;p&gt;支付服务最核心的指标，显然就是用户支付成功的占比，我们称之为支付转化率。对扫码付业务而言，支付转化率的百分比越高，扫码付业务的营业额也就越高，其带来的收益是正相关的。因此提升扫码付小程序的支付转化率，就成为我们技术团队的重要工作。经过数据分析，我们发现转化率流失主要存在于以下两个环节：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;扫码到进入小程序环节（外部环节）&lt;/li&gt;
&lt;li&gt;进入小程序到支付环节（内部环节）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;从扫码到进入小程序环节，微信会完成小程序基本信息获取、资源准备（代码下载或更新）等准备事项。在准备事项中，如果准备失败或等待时间过长，就会导致用户离开，这部分由微信控制的环节，我们称之为外部环节。&lt;/p&gt;
&lt;p&gt;在进入小程序到支付环节，页面会进行渲染、数据请求等，如果渲染时间长、数据请求时间长也容易导致用户离开，同样，如果数据请求失败也会造成用户使用过程的终止，这部分由我们美团扫码付技术团队控制的环节，称之为内部环节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/saomafu_xiaochengxu/2.png&quot; alt=&quot;图片2&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;如何提升外部环节转化率？&lt;/h2&gt;
&lt;p&gt;对于小程序开发者而言，扫码到小程序调起这个环节是黑盒的，我们无法得知其中的细节。而我们在扫码付小程序中尝试和微信的同学做了一次梳理，发现扫码付小程序在外部环节的丢失率较高，查询数据后，我们发现其中大部分用户手动点击了右上角的退出。&lt;/p&gt;
&lt;p&gt;从业务视角出发，用户使用扫码付小程序，可认为他们有强需求进行支付，而造成用户手动点击退出的部分原因可能是等待时间过长。而在这个环节对时间造成影响更多的是资源准备，即小程序代码下载或者更新的行为。根据经验，影响下载和更新时间可能的因素包括两个方面：一个是网络，另一个是代码包。&lt;/p&gt;
&lt;p&gt;因为用户的网络是我们无法控制的，只能尝试从代码包开始下手。而在当时未使用分包的情况下，我们的主包大小约为3M，这意味着新用户和无缓存小程序用户均需要在首次使用时等待下载3M左右的包。在这种情况下，虽然用户享受了小程序离线缓存包的福利，却丢失了大部分新用户的体验。于是我们尝试从包代码层面做一些优化：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;增加分包加载机制。用户在使用扫码付业务时会按需进行加载，优化小程序首次启动的下载时间。&lt;/li&gt;
&lt;li&gt;减小主包和分包大小。按照空主包的概念进行优化。在进行分包加载机制后，主包因为无法最小化而影响首次下载时间。一方面，原有的3M整包中，图片大小占用了50%大小，我们将所有的内含二进制和Base64图片分发到了CDN；另一方面，部分可移出的业务分发到了其他分包。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在做了这些事情后，扫码付分包从原先的整包3M缩减到了361K（主包300K+分包61K），而外部环节的转化率也提升了3%。虽然转化率提升了，但前置环节的转化率仍然有部分丢失，理论上继续缩减300K的主包能有效提升，但由于业务性质的原因无法再继续缩减，于是我们向微信小程序提出了独立分包的概念：用户在使用独立分包时无需下载主包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/saomafu_xiaochengxu/3.png&quot; alt=&quot;图片3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过独立分包加载，程序使用期间下载更新阶段，只需要加载61K的分包大小。目前这个功能还在灰度阶段，扫码付小程序团队也在作为第一批的内测用户进行体验，优化效果在之后的实践中，我们也会分享出来，大家可关注美团技术团队公众号，持续关注我们。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;如何提升内部环节转化率？&lt;/h2&gt;
&lt;p&gt;在进入小程序到支付这个环节，属于我们的业务流程。在这个环节中的转化率丢失虽然我们能够掌控，但是必须有所依据，才能对症下药。所以我们做了一些数据监控：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;业务核心流程监控。业务核心流程指用户进入小程序后所涉及的影响最终支付的中间流程，中间流程的丢失会直接影响业务整个转化率丢失，所以这里必须进行监控。而业务核心流程监控需要可监控的具体指标，我们对进入小程序和支付进行了关键动作拆解，从开始扫码到用户看到页面，再到点击支付、初始化订单、支付成功。拆解完这些关键动作，再针对每一步可控环节，进行技术指标的拆解。从入口到出口的每一步制定关键指标（扫码加载转化率、点击意愿等，见下图），形成一个至上而下的漏斗，产出多个可量化指标，来做业务流程的监控。对于这部分可量化指标，可以通过长期的观察分析来提升转化率。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/saomafu_xiaochengxu/4.png&quot; alt=&quot;图片4&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;异常监控。页面的任何异常都可能导致支付页面的渲染失败，从而无法正常支付。我们对页面的接口异常、微信API异常进行了监控。接口异常可在API（wx.request）的fail函数中直接捕获，从而上报监控；对于接口超时，则只能通过全局的app.json进行全局设置（默认60s，时间过长，对用户体验较差），此前我们曾尝试在小程序中设置全局的5s请求超时，但实际应用中并非所有场景需要设置统一的超时，最终我们单独封装了接口请求超时。微信API的异常通过微信的一些fail中进行监控即可。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://tech.meituan.com/img/saomafu_xiaochengxu/5.png&quot; alt=&quot;图片5&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;性能监控。小程序内部转化环节中关注进入小程序后的白屏时间和可交互时间。内部白屏时间从onLoad处打点，到页面onReady处结束；内部可交互时间从onLoad处打点，到页面数据请求结束后的可点击支付时间截止。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;日常监控中，我们也发现了一些问题，例如接口调用超时、接口调用失败，这些问题会导致页面流程终止。针对这些问题我们做了一些优化：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接口合并。支付页面的外网链路接口请求数量较多，任意一个接口的失败都会导致问题，合并接口则可以减少问题出现概率，提升中间流程的转化率。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;增加重试机制。在出现接口异常的情况下，会直接导致页面阻塞，如果通过重试能成功，则可以提升转化率。整个流程中可重试的有两类：自有的接口请求异常，小程序API调用异常。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;对于这两类异常，在接口超时、调用失败时采取重试。而为了避免在极端情况下服务端流量陡增、峰值倍数增加，页面的可重试次数会在前置获取全局配置时根据“可重试次数”进行控制，并且每次重试需要在一段时间后用户手动触发。超过重试次数时，则流程终止。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;如何监控内部和外部环节？&lt;/h2&gt;
&lt;p&gt;前面我们也提到，对于小程序开发者而言，扫码到小程序调起这个环节是黑盒的，我们开发者无法得知此处的细节，所以说在监控外部环节这方面我们开发者似乎可做的事情屈指可数。但是，不知道细心的同学有没有发现，微信在每次扫码后会给我们在query参数上附带一个scancode_time字段。其实这个字段表示的是用户在使用扫一扫时微信服务端记录的时间，所以基于这个字段的考量，我们做了如下尝试，针对以下两个参数值分别做了实时监控：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支付页面的白屏时间（用户看到首屏的客户端时间—用户微信扫一扫服务端时间+服务端客户端差额时间）。&lt;/li&gt;
&lt;li&gt;支付页面的用户可交互时间（页面Loading完毕时间—用户微信扫一扫服务端时间+服务端客户端差额时间）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由于客户端的时间戳是获取本地手机系统的时间，可能存在差异。所以为了保证上报的准确性，我们在每次onLoad的时候取了一次我们服务端的时间，记录了客户端的时间与服务端的一个时间差额，并且在后续所有涉及到服务端的时间都参照这个时间差额做计算（网络100-200ms级别的传输时延，暂可忽略）。&lt;/p&gt;
&lt;p&gt;但由于我们扫码付小程序的特殊应用场景就是为了保障用户进行快速可靠的支付，既然在外部环节可控度不高，那是不是可以考虑在内部的业务流程方面把监控统计做的细粒度一点，做到能对每一个可能影响到支付的环节有数据可循呢？我们针对这个方向，区别于传统的PV、UV统计，并对业务上报做了如下分类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;根据上报的场景划分：实时性监控部分与统计部分。&lt;/li&gt;
&lt;li&gt;根据上报的类型划分：Error类型、Event类型（普通生命周期事件）、Metric类型（自定义Event类型，维度可自定义）、自定义测速类型（延时趋势与分布）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;基于上述方案的探索，我们团队基本上做到了对可能影响支付环节的很多业务指标，进行了整体的把控。从而在下一步，针对每个潜在的可优化点做进一步思考与考量，然后作出及时的策略优化与更新。通过对扫码付小程序的探索，我们积累了很多优化经验。美团的价值观是追求卓越，对于能优化的方面，我们还会进一步去探索，也欢迎更多的同学跟我们一起讨论。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;作者简介&lt;/h2&gt;
&lt;p&gt;陈瑶，2015年校招入职美团，此前参与过美团平台移动端触屏版的前端开发工作，从0到1参与了智能支付应用层的前端建设工作，现负责美团收单业务扫码付小程序业务。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;招聘&lt;/h2&gt;
&lt;p&gt;如果对我们“智能支付大前端团队”感兴趣，可直接简历发送给（chenxuan03@meituan.com）。欢迎加入美团，跟我们一起探索未来。&lt;/p&gt;
&lt;div class=&quot;hidden-mobile&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;发现文章有错误、对内容有疑问，都可以关注美团技术团队微信公众号（meituantech），在后台给我们留言。我们每周会挑选出一位热心小伙伴，送上一份精美的小礼品。快来扫码关注我们吧！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;article__footer__img&quot;&gt;&lt;img src=&quot;https://tech.meituan.com/img/meituanjishutuandui.png&quot; alt=&quot;公众号二维码&quot; width=&quot;455&quot; align=&quot;center&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 14 Sep 2018 03:44:00 +0000</pubDate>
<dc:creator>美团技术团队</dc:creator>
<og:description>美团扫码付是一款面向C端消费者推出的线下收单业务，相信大家已经在线下很多餐馆和其他生活服务商家体验过了。这项业务主要就是通过小程序提供服务的，而在实际场景中，用户先使用微信“扫一扫”功能，扫描商家二维</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/meituantech/p/9645625.html</dc:identifier>
</item>
<item>
<title>大佬为你揭秘微信支付的系统架构，你想知道的都在这里了 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9645599.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9645599.html</guid>
<description>&lt;p&gt;&lt;strong&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer/?fromSource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;2.093023255814&quot;&gt;
&lt;p&gt;本文由&lt;a href=&quot;https://cloud.tencent.com/developer/user/946984?fromSource=waitui&quot;&gt;李跃森&lt;/a&gt;发表于&lt;a href=&quot;https://cloud.tencent.com/developer/column/1031?fromSource=waitui&quot;&gt;云+社区专栏&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6.501872659176&quot;&gt;
&lt;p&gt;李跃森，&lt;a href=&quot;https://www.qcloud.com/product/postgresql?fromSource=gwzcw.49215.49215.49215&quot;&gt;腾讯云PostgreSQL&lt;/a&gt;首席架构师，腾讯数据库团队架构师，负责微信支付商户系统核心数据库的架构设计和研发，PostgreSQL-x2社区核心成员，获多项国家发明专利。从事PG内核开发和架构设计超过10年。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2015年之前，微信支付业务快速发展，需要一款数据库能够安全高效的支撑微信支付商户系统核心业务，这个重任落在了腾讯数据库团队自研PostgreSQL上。&lt;/p&gt;
&lt;p&gt;2016年7月，腾讯云对外发布&lt;a href=&quot;https://www.qcloud.com/product/postgresql?fromSource=gwzcw.49215.49215.49215&quot;&gt;云数据库PostgreSQL&lt;/a&gt;，提供腾讯自研的内核优化版和社区版两个版本，以及提供分布式集群架构（分布式集群内部代号PostgreSQL-XZ）两种方案。目前云数据库PostgreSQL在腾讯大数据平台、广点通、腾讯视频等腾讯多个核心业务中稳定运行。&lt;/p&gt;
&lt;h2 id=&quot;腾讯自研postgresql分布式集群-postgresql-xz&quot;&gt;腾讯自研PostgreSQL分布式集群 PostgreSQL-XZ&lt;/h2&gt;
&lt;p&gt;腾讯PostgreSQL-XZ是由PostgreSQL-XC社区版本地化而来，能支撑水平扩展数据库集群。虽然PostgreSQL-XC很强大，但在性能、扩展性、安全、运维方面还是有明显的瓶颈，而腾讯PostgreSQL经过多年的积累，在这些方面都有较大提升和强化。由于是用于微信支付的核心数据库，腾讯PostgreSQL被定位为安全、高效，稳定，可靠的数据库集群。下面将以腾讯PostgreSQL-XZ为代表介绍腾讯自研PostgreSQL所做的优化和改进。&lt;/p&gt;
&lt;h3 id=&quot;一.事务管理系统的优化&quot;&gt;一.事务管理系统的优化&lt;/h3&gt;
&lt;p&gt;PostgreSQL-XC在事务管理系统方案本身有一个明显的缺点，那就是事务管理机制会成为系统的瓶颈，GTM（Global Transaction Manager全局事务管理器）会限制系统的扩展规模。如图1所示，是每个请求过来CN(Coordinator 协调节点)都会向GTM申请必需的gxid（全局事务ID）和gsnapshot（全局快照）信息，并把这些信息随着SQL语句本身一起发往DN（Datanode数据库节点）进行执行。另外，PostgreSQL-XC的管理机制，只有主DN才会获取的gxid，而备DN没有自己的gxid，因此无法提供只读服务，对系统也是不小的浪费。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/90398657ae7b5987faf19c49bbe87863/image.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图1&lt;/p&gt;
&lt;p&gt;而腾讯PostgreSQL-XZ改进了事务管理机制，改进后，CN不再从GTM获取gxid和gsnapshot，每个节点使用自己的本地xid（事务ID）和gsnapshot（快照），如此GTM便不会成为系统的瓶颈；并且，DN备机就还可以提供只读服务，充分利用系统闲置资源。如图2，优化后的事务管理系统架构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/eab9a209333bcb5d2ad11be6d79eb985/image.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图2&lt;/p&gt;
&lt;h3 id=&quot;二.备机只读实现与优化&quot;&gt;二.备机只读实现与优化&lt;/h3&gt;
&lt;p&gt;当然，事务管理系统的优化为进行备DN只读提供了基础，然而原始集群并没有负载、调度等能力。在这方面，我们也做了大量的创新，总结起来包括：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;正常CN和只读CN进行分离。&lt;/li&gt;
&lt;li&gt;正常CN存储主用DN的元数据信息&lt;/li&gt;
&lt;li&gt;只读CN存储备用DN的元数据信息&lt;/li&gt;
&lt;li&gt;DN之间使用hot standby（热备份保护）模式进行日志同步&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;通过这些方式，集群可以提供带有智能负载能力的备DN只读功能，充分利用系统资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/5b14a86f6c6c745c3342a2d5c830c952/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3&lt;/p&gt;
&lt;h3 id=&quot;三.业务最小中断的扩容方案&quot;&gt;三.业务最小中断的扩容方案&lt;/h3&gt;
&lt;p&gt;业务的快速增长不可避免的需要对资源进行扩容，社区版本的实现使得扩容成本高昂，需要对业务进行长时间的中断。因为，在社区版本PostgreSQL-XC中，通过 &lt;code&gt;DN=Hash(row) % nofdn&lt;/code&gt;的方式决定一条记录的存储节点：&lt;/p&gt;
&lt;p&gt;也就是说，先对分布列计算hash值，然后使用这个值对集群中的节点个数取模来决定记录去哪个节点（如图4）。&lt;/p&gt;
&lt;p&gt;这种方案简单，但实际应用中需要长时间停机扩容。这是因为，扩容后节点数会变多，数据无法按照原有的分布逻辑进行读写，需要重新分布节点数据。而再均衡数据需要停机并手工迁移再均衡到各个节点。对于规模较大的交易系统来说，由于原有节点存储的是海量数据，再均衡过程可能会持续好几天。相信这是业务完全无法忍受的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/1203dffd406aaaa2e80ad654abfbf70f/image.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图4&lt;/p&gt;
&lt;p&gt;因此我们引入了一种新的分表方法&lt;code&gt;—sharded table。Shardedtable&lt;/code&gt;的数据分布采用如下（图5）的方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;引入一个抽象的中间层--shard map。Shard map中每一项存储shardid和DN的映射关系。&lt;/li&gt;
&lt;li&gt;Sharded table中的每条记录通过&lt;code&gt;Hash(row) % #shardmap entry&lt;/code&gt;来决定记录存储到哪个shardid，通过查询shardmap的存储的DN。&lt;/li&gt;
&lt;li&gt;每个DN上存储分配到本节点shardid信息，进而进行可见性的判断。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;通过上面的方案，在扩容新加节点时，就只需要把一些shardmap中的shardid映射到新加的节点，并把对应的数据搬迁过去就可以了。扩容也仅仅需要切换shardmap中映射关系的，时间从几天缩短到几秒。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/dd4228786d94117b20f01686bae14f73/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图5&lt;/p&gt;
&lt;h3 id=&quot;四.数据倾斜解决方案&quot;&gt;四.数据倾斜解决方案&lt;/h3&gt;
&lt;p&gt;数据倾斜是指，在分布式数据库系统中会因为物理节点、hash或shard分布原因，导致某些DN物理空间不足，而另外的物理空间剩余较大。例如，如果以商户作为分布key，京东每天的数据量和一个普通电商的数据量肯定是天地差别。可能某个大商户一个月的数据就会把一个DN的物理空间塞满，这时系统只有停机扩容一条路。因此我们必须要有一个有效的手段来解决数据倾斜，保证在表数据分布不均匀时系统仍然能够高效稳定的运行。&lt;/p&gt;
&lt;p&gt;首先我们把系统的DN分为group（如下图6），每个group里面：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;包含一个或者多个DN&lt;/li&gt;
&lt;li&gt;每个group有一个shardmap&lt;/li&gt;
&lt;li&gt;在建sharded表时，可以指定存储的group，也就是要么存储在group1，要么group2&lt;/li&gt;
&lt;li&gt;CN可以访问所有的group，而且CN上也存储所有表的访问方式信息&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/dd71b41ca72c5846f1eeac7744699eff/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图6&lt;/p&gt;
&lt;p&gt;对于系统中数据量较大用户进行特别的识别，并为他们创建白名单，使用不同的数据分布逻辑（如下图7）：普通用户使用默认的数据分布逻辑，也就是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shardid = Hash(merchantid) % #shardmap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大商户使用定制的数据分布逻辑，也就是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shardid = Hash(merchantid) % #shardmap + fcreate_timedayoffset from 1970-01-01&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/60b89f74986bebc07a5b0a9ecfee735b/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图7&lt;/p&gt;
&lt;p&gt;通过在大商户group分布逻辑中加入日期偏移，来实现同一个用户的数据在group内部多个节点间均匀分布。从而有效的解决数据分布不均匀问题。&lt;/p&gt;
&lt;p&gt;下面是一个例子（如下图8）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/3eff1265eb866da1ba7c2301b70caa78/image.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图8&lt;/p&gt;
&lt;h3 id=&quot;五.9000w记录高效排序解决方案&quot;&gt;五.9000W记录高效排序解决方案&lt;/h3&gt;
&lt;p&gt;业务在列表查询场景下会收到如下的查询SQL：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/4b1ebb53fc7c7b505a5de34eee18c43c/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在微信支付的场景中，某个商户每天的数据有300W，一个月数据超过9000W条，也就是说PostgreSQL需要面向一个9000W数据级数据进行快速排序，而且业务逻辑要求需要秒级输出，快速获取排序结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/4e4d199cbfe69412b6191e3f10ba6489/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为此，我们提供表定义方案，即建立集群分区表。根据上述需求，可以采用按月分表，即每个月一张表，并对排序字段ffinish_time建立索引，这样每个分区进行扫描是可以使用索引。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/653bf99a176414906feccf60e0233d40/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们再通过一系列执行计划的优化，CN下推order by和limit offset子句到DN；DN上在执行对应的sql使用使用Merge Append算子对各个子表执行的结果进行汇总输出，这个算子本身会保证输出是有序的，也就是说对子表进行索引扫描，同时Merge Append又对各个子表的结果进行归并，进而保证节点本身的结果是排序的。CN对多个DN的结果同样使用Merge Append进行归并，保证整个输出结果是有序的，从而完成整个排序过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/ed7b5ffb079a7d90066fed6f0b284c6f/image.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是我们对排序进行的性能测试结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/d80fc13c378641ef7065273308e17cc5/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/64fad61c4508404752f1338d979448e0/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过在24核CPU，64G内存的机型上进行测试，9000W数据的排序在最短可以在25 ms内完成，QPS最高可达5400。&lt;/p&gt;
&lt;h3 id=&quot;六.并行优化&quot;&gt;六.并行优化&lt;/h3&gt;
&lt;p&gt;随着当前硬件的发展，系统资源越来越丰富，多CPU大内存成了系统标配，充分利用这些资源可以有效的提升的处理效率优化性能。腾讯在2014年底开始进行PostgreSQL多核执行优化。&lt;/p&gt;
&lt;p&gt;目前PostgreSQL9.6社区版也会包含部分并行化特性，但是没有我们这边这么丰富，下面介绍下腾讯PostgreSQL并行化的原理和效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/2960f5f2570d3d71815ce36e85e9766a/image.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;系统创建一个全局的共享内存管理器，使用bitmap管理算法进行管理&lt;/li&gt;
&lt;li&gt;系统启动时创建一定数据的Executor，这些Executor用来执行执行计划的碎片&lt;/li&gt;
&lt;li&gt;系统会创建一个计划队列，所有的Executor都会在任务队列上等待计划&lt;/li&gt;
&lt;li&gt;每个Executor对应一个任务结果队列，Executor在输出结果时就把结果的指针挂到结果队列中去&lt;/li&gt;
&lt;li&gt;计划队列，结果队列，计划分片执行结果都存放在共享内存管理器中，这样所有的进程都可以访问到这些结构&lt;/li&gt;
&lt;li&gt;Postgres会话进程在收到sql时，判断是否可以并行化，并进行任务的分发；在结果队列中有结果时就读出返回&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们完成优化的算子：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Seqscan&lt;/li&gt;
&lt;li&gt;Hash join&lt;/li&gt;
&lt;li&gt;Nestloop join&lt;/li&gt;
&lt;li&gt;Remote query&lt;/li&gt;
&lt;li&gt;Hash Agg&lt;/li&gt;
&lt;li&gt;Sort Agg&lt;/li&gt;
&lt;li&gt;Append&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过在24核CPU，64G内存的机型下测试，各个算子的优化结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/7297b83afd8ab12d65dbec73f11e7a25/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/b3750675a85926e9ad3e90b5e1e458a2/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/1d5006ebd52e4d697ab80bc5ca5e57f6/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/25e5df1e92955a60d95a4ce52284d53a/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/56b299d23e577241dfe0a59148a30d84/image.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;整体来说性能普遍是优化前的10-12倍，优化的效果比较明显。&lt;/p&gt;
&lt;h3 id=&quot;七.腾讯postgresql-xz的两地三中心容灾&quot;&gt;七.腾讯PostgreSQL-XZ的两地三中心容灾&lt;/h3&gt;
&lt;p&gt;两地三中心容灾是金融级数据库的必备能力，对于金融类业务数据安全是最基本也是最重要诉求，因此我们为了保障高效稳定的数据容灾能力，也为PostgreSQL-XZ建设了完善的两地三中心自动容灾能力。具体的两地三中心部署结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mc.qcloudimg.com/static/img/c35ca77fa31b8e364ff239931f71f85e/image.jpg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同城节点间采用强同步方式，保障数据强一致；异地采用专网异步同步。&lt;/p&gt;
&lt;p&gt;节点内，每台物理机上部署CAgent，agent收集机器状态并进行上报，并进行相应的告警和倒换执行功能。&lt;/p&gt;
&lt;p&gt;每个IDC至少部署一个JCenter，JCenter负责收集上报每个agent上报的状态到ZK集群。这么多个JCenter中只有一个是主用，主用的JCenter除了进行状态上报还进行故障裁决和倒换。在主用的JCenter异常后，系统通过ZK自动裁决挑选一个备用的JCenter升主。&lt;/p&gt;
&lt;p&gt;JCenter和CAgent是两地三中心的控制和裁决节点。&lt;/p&gt;
&lt;p&gt;对于数据库节点，CN在每个IDC至少部署一个。DN在每个中心部署一个，一个为主，另外两个并联作为备机放在主机上，一个为同步备机，另外一个为异步备机。&lt;/p&gt;
&lt;p&gt;在主机故障宕机时，JCenter优先选择同城的备机升主。&lt;/p&gt;
&lt;p&gt;目前，腾讯云已经提供&lt;a href=&quot;https://www.qcloud.com/product/postgresql?fromSource=gwzcw.49215.49215.49215&quot;&gt;云数据库PostgreSQL&lt;/a&gt;的内测使用，并将提供内核优化版和社区版两个版本来满足更多客户的要求。&lt;/p&gt;
&lt;blockquote readability=&quot;0.58878504672897&quot;&gt;
&lt;p&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/35862?fromSource=waitui&quot;&gt;如何记录PostgreSQL查询？&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1096105?fromSource=waitui&quot;&gt;PostgreSQL新手入门&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1030449?fromSource=waitui&quot;&gt;PostgreSQL配置优化&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1080322?fromSource=waitui&quot;&gt;PostgreSQL主备环境搭建&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/edu/course-1128?fromSource=waitui&quot;&gt;【每日课程推荐】机器学习实战！快速入门在线广告业务及CTR相应知识&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，更多原文请&lt;a href=&quot;https://cloud.tencent.com/developer/article/1004390?fromSource=waitui&quot;&gt;点击&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搜索关注公众号「云加社区」，第一时间获取技术干货，关注后回复1024 送你一份技术课程大礼包！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;海量技术实践经验，尽在&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot;&gt;云加社区&lt;/a&gt;！&lt;/p&gt;
</description>
<pubDate>Fri, 14 Sep 2018 03:40:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<og:description>欢迎大家前往</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9645599.html</dc:identifier>
</item>
<item>
<title>如何唯一确定一个 Java 类？ - 陈树义</title>
<link>http://www.cnblogs.com/chanshuyi/p/how_to_confirm_an_unique_class.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chanshuyi/p/how_to_confirm_an_unique_class.html</guid>
<description>&lt;p&gt;今天偶然想起之前和朋友讨论过的一个问题：如何唯一确定一个 Java 类？我相信大多数朋友遇到这个问题的回答都是：类的全路径呗。但事实上，唯一确定一个 Java 类，单单靠类路径是不够的，还要多加上一个东西：类加载器。也就是说，&lt;strong&gt;类加载器 + 类路径才唯一确定一个 Java 类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了证明我所说的，我们来做一个简单的实验。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//自定义一个类加载器
ClassLoader myLoader = new ClassLoader() {
    @Override
    public Class&amp;lt;?&amp;gt; loadClass(String name) throws ClassNotFoundException {
        try {
            String fileName=name.substring(name.lastIndexOf(&quot;.&quot;)+1)+&quot;.class&quot;;
            InputStream is=getClass().getResourceAsStream(fileName);
            if( is == null ){
                return super.loadClass(name);
            }
            byte[] bytes = new byte[is.available()];
            is.read(bytes); //通过自定义类加载器读取class文件的二进制流
            return defineClass(name, bytes, 0,bytes.length);
        } catch (IOException e) {
            e.printStackTrace();
            throw new ClassNotFoundException(name);
        }
    }
};
//比较类是否相同
Object obj = myLoader.loadClass(&quot;com.chenshuyi.UniqueClass&quot;).newInstance();
System.out.println(obj.getClass());
System.out.println(UniqueClass.class);
System.out.println(obj instanceof UniqueClass);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面这段代码中，我首先定义了一个自定义类加载器 myLoader，之后让其去加载&lt;code&gt;com.chenshuyi.UniqueClass&lt;/code&gt;类，之后调用&lt;code&gt;newInstance()&lt;/code&gt;获得该类的实例 obj。&lt;/p&gt;
&lt;p&gt;接着分别打印输出 obj 对象的类路径，以及 UniqueClass 类的类路径，最后使用 instanceof 符号判断 obj 对象是否是 UniqueClass 类的实例。最后的输出结果是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class com.chenshuyi.UniqueClass
class com.chenshuyi.UniqueClass
false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的结果显示：obj 对象和 UniqueClass 类的类路径完全相同，都是&lt;code&gt;com.chenshuyi.UniqueClass&lt;/code&gt;。但是 obj 对象却不是 UniqueClass 类的实例。&lt;strong&gt;这就验证了我的说法，即：类加载器 + 类路径才唯一确定一个 Java 类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实在 Java 语言中，还有一个与之非常类似的情况：&lt;strong&gt;如何唯一确定类中的一个方法？&lt;/strong&gt;按照我们一直以来的直觉，我们会回答：方法名、形参类型、形参个数。例如下面的两个方法虽然方法名相同，但是参数类型和个数不同，所以他们是不同的方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void Hello(String name)
public void Hello(String name, int age)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但下面两个方法虽然返回类型不同，但他们的方法名和参数类型是一致的，所以他们无法通过编译。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void Hello(String name)
public String Hello(String name)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是其实对于 JVM 来说，在同一个类中是可以存在方法名相同并且参数类型相同的方法名的。也就是说，&lt;strong&gt;在JVM 中判断一个方法的要素是：类名、方法名以及方法描述符。&lt;/strong&gt;与 Java 源码中的不同在于方法描述符这个概念。方法描述符由方法的参数类型和返回类型所构成。例如下面的这个方法，方法描述符就是 name 这个参数，以及 String 这个返回类型。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public String Hello(String name)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了证明我上面的观点，我们再做一个简单的实验。&lt;/p&gt;
&lt;p&gt;下面的代码声明了一个方法 a 和 方法 b，方法名不同，返回类型不同。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class UniqueMethod {
    public void a(){}
    public String b(){
        return &quot;b&quot;;
    }
    public static void main(String[] args) {
        System.out.println(&quot;Hello&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了证明在 JVM 对于方法唯一性判断，我将通过修改字节码的方式，让 UniqueMethod 字节码变成下面这样。即有两个相同的 a 方法，它们的方法名、形参类型、形参个数都相同，但是返回参数类型不同。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class UniqueMethod {
    public void a(){}
    public String a(){
        return &quot;b&quot;;
    }
    public static void main(String[] args) {
        System.out.println(&quot;Hello&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么实验开始了！&lt;/p&gt;
&lt;p&gt;首先我们用 javac 命令编译出字节码 class 文件，接着使用 asmtools 工具将 class 文件再转为 jasm 文件。我们打开 jasm 文件看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pamf85l72.bkt.clouddn.com/Fku_z7ZKwcn8gSE6oPs83aKvXsNI&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到里面有三个方法，分别是 a 方法、b 方法和 main 方法。此时我们将 b 方法名称直接修改成 a 方法，接着使用 asmtools 工具将 jasm 文件转为 class 文件。通过这种方式，我们就可以在一个类中拥有两个名为 a 的方法了。这两个 a 方法，它们的方法名、形参类型、形参个数都相同，但是返回参数类型不同。&lt;/p&gt;
&lt;p&gt;生成修改后的 class 文件之后，我们运行 &lt;code&gt;java UniqueMethod&lt;/code&gt;命令，顺利打印出字符：Hello。这说明 class 文件并没有任何错误，JVM 对于方法名、形参类型、形参个数都相同，但是返回参数类型不同的方法，是完全接受的。&lt;/p&gt;
&lt;p&gt;让我们再用 javap 命令来看看 class 文件的字节码结构，我们会发现确实是存在了两个名称为 a 的方法的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pamf85l72.bkt.clouddn.com/Fim0sUiMbCSob3amoL5gRBQ6ZvQj&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后让我们来总结一下：&lt;strong&gt;在 JVM 中，类路径和类加载器唯一确定一个 Java 类，方法名、形参类型、形参个数、返回参数类型唯一确定一个 Java 类中的方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实不仅仅是类与方法的唯一性，在很多方面 JVM 和 Java 语言规范真是有很大的差别。很多在 Java 中成立的东西，到了 JVM 其实就不一定成立了。例如：Java 的泛型、Java 的 lambla 表达式等等，其实只在 Java 语言层面存在，而在 JVM 中其实是不存在的。&lt;/p&gt;
&lt;p&gt;好了，今天的分享到此为止了。喜欢这篇文章的话，那就分享给朋友一起看吧！&lt;/p&gt;
</description>
<pubDate>Fri, 14 Sep 2018 03:37:00 +0000</pubDate>
<dc:creator>陈树义</dc:creator>
<og:description>今天偶然想起之前和朋友讨论过的一个问题：如何唯一确定一个 Java 类？我相信大多数朋友遇到这个问题的回答都是：类的全路径呗。但事实上，唯一确定一个 Java 类，单单靠类路径是不够的，还要多加上一个</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chanshuyi/p/how_to_confirm_an_unique_class.html</dc:identifier>
</item>
</channel>
</rss>