<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>关于个人密码安全管理的分析 - HateMath</title>
<link>http://www.cnblogs.com/hatemath/p/7636207.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hatemath/p/7636207.html</guid>
<description>&lt;p&gt;不管是否接受和喜欢，基于网络的数字化生活已经到来。&lt;/p&gt;
&lt;p&gt;在没人知道你是不是一条狗的网络上，密码极其重要。密码的安全也极其重要。&lt;/p&gt;
&lt;p&gt;不重视密码安全管理的人，早晚会交学费的。&lt;/p&gt;
&lt;p&gt;晚上嗑着瓜子分析了一下，并拟定了自己的密码安全管理方案。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;密码泄露的两大环境：&lt;/strong&gt;&lt;br/&gt; 　　 存储环境&lt;br/&gt; 　　 使用环境&lt;/p&gt;

&lt;p&gt;　　要想保证密码安全，必须同时保证上述两个环境的安全&lt;/p&gt;&lt;p&gt;&lt;strong&gt;密码泄露的几种途径：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;一次泄露&lt;br/&gt;　　电脑有木马，输入密码时被盗（键盘记录、截屏等）。&lt;br/&gt;　　电脑有木马，查看编辑密码文件时被盗（截屏））。&lt;br/&gt;　　电脑有木马，密码文件被上传并破解&lt;br/&gt;　　密码存手机，手机丢失并被解锁&lt;br/&gt;　　密码存专用手机或平板，手机或平板损坏&lt;br/&gt;　　密码太简单，被暴破&lt;br/&gt;　　手机密码泄露&lt;/p&gt;&lt;p&gt;二次泄露&lt;br/&gt;　　使用第三方密码管理软件或云平台。软件或平台有漏洞（还记得CSDN吗？害得我改了整整一个上午的密码，卧槽）。&lt;br/&gt;　　网站绑定了邮箱，邮箱被盗，密码被改&lt;br/&gt;　　绑定了手机号，手机丢失并被解锁&lt;br/&gt;　　绑定了手机号，手机卡被复制盗用&lt;br/&gt;　　不同网站共用一个密码，其中一个密码泄露，殃及其余&lt;/p&gt;&lt;p&gt;应对措施&lt;br/&gt;　　保证存储设备的安全&lt;br/&gt;　　保证密码使用环境的安全&lt;br/&gt;　　密码分级&lt;br/&gt;　　尽量不重复使用密码&lt;br/&gt;　　极重要的密码在输入时做人工转换&lt;br/&gt;　　定期更换密码&lt;br/&gt;　　密码找回（但要确保不引入新的隐患）&lt;/p&gt;&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;　　想知道我用的什么方案？&lt;/p&gt;










&lt;p&gt;　　嗯，打死我也不说。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 15:29:00 +0000</pubDate>
<dc:creator>HateMath</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hatemath/p/7636207.html</dc:identifier>
</item>
<item>
<title>.Neter玩转Linux系列之六：Linux下MySQL的安装、配置、使用 - 菠萝吹雪—Code</title>
<link>http://www.cnblogs.com/runningsmallguo/p/7634560.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/runningsmallguo/p/7634560.html</guid>
<description>

&lt;p&gt;（1）下载安装包：https://dev.mysql.com/downloads/mysql/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007172105349-73509698.png&quot; alt=&quot;&quot; width=&quot;662&quot; height=&quot;325&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）解压并安装&lt;/p&gt;
&lt;p&gt;命令：tar zxvf 文件名&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007220742927-1358075655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;解压完成之后，重名一下文件夹名字。&lt;/p&gt;
&lt;p&gt;命令：mv 文件名1  文件名2&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007191500646-28671019.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007191547646-175002847.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;由于MySQL运行需要libaio1库，所以需要运行以下命令进行安装：&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install libaio1
&lt;/pre&gt;

&lt;p&gt;（1）创建MySQL的组:mysql目的是方便管理MySQL数据库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007180928490-828429955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）创建mysql用户，并放入到mysql组&lt;/p&gt;
&lt;p&gt;命令：useradd   -g   mysql mysql&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007181042208-954093490.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; （3）命令：sudo mkdir mysql-files  （新建一个目录）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007191842990-1992184712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007191928068-356037409.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）修改文件夹的权限&lt;/p&gt;
&lt;ul&gt;&lt;li&gt; sudo chmod 750 mysql-files&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007192101818-153265310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;chown  -R   root .  (修改 文件的 所有者)  这样做的目的是为了安全，不是所有的人都能碰MySQL的文件的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007192608005-1874818435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;chgrp   -R  mysql .  (改变用户组)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007192702927-1687598947.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（5）安装初始化，注意：此部最后一行会有一个初始化密码，用于root账号的首次登录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007223710521-1709583549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 下面框主的就是生成的登录密码。&lt;/p&gt;
&lt;p&gt;（6）生成证书&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007193130927-375817104.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（7）把权限修改回来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007193554286-95918336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （8）启动MySQL数据库&lt;/p&gt;
&lt;p&gt;sudo bin/mysqld_safe --user=mysql &amp;amp;  [&amp;amp;表示以后台的方式启动]&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007193753396-534049098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007223028708-1004446667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（9）登录测试并修改root密码&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007223450552-1035856128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：在登录MySQL时，一定要切换到mysql的bin目录下面，然后再执行 ./mysql -u root -p&lt;/p&gt;
&lt;p&gt;提示输入密码，在输入上面自动生成的密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007224150786-361701502.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
增加一个'root'@'%'账号实现远程登录&lt;p&gt;mysql&amp;gt; grant all privileges on *.* to 'root'@'%' identified by '新密码' with grant option;
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007224456896-119112087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（10）配置服务自动启动&lt;/p&gt;
&lt;p&gt;#复制服务文件到/etc/init.d&lt;/p&gt;
&lt;p&gt;sudo cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql.server&lt;/p&gt;
&lt;p&gt;建议重开一个终端，不要关闭现有的终端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007224839833-1509406759.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装sysv-rc-conf&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install sysv-rc-conf
&lt;/pre&gt;
&lt;p&gt; 启动sysv-rc-conf&lt;/p&gt;
&lt;pre&gt;
sudo sysv-rc-conf
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007231358958-2085240567.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按空格键出现X，然后按Q退出。重启即可。&lt;/p&gt;
&lt;p&gt;服务的相关操作命令：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#服务状态&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;sudo service mysql.server status&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;#服务启动&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;sudo service mysql.server start&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;#服务停止&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;sudo service mysql.server stop&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; （11）配置环境变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007231905880-1320698010.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171007231959693-643821890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;br/&gt;&lt;span&gt;到此MySQL的安装和配置全部OK，好了，本系列文章到此结束，如果后续有补充，我不会不定时更新上去，希望对你有帮助。觉得可以的话，希望点下推荐哈~你们的推荐是我的动力。&lt;/span&gt;&lt;p&gt;参考文章：http://www.cnblogs.com/EasonJim/p/7147787.html&lt;br/&gt;https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html
&lt;/p&gt;&lt;/pre&gt;

&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;作者：郭峥&lt;/p&gt;
&lt;p&gt;出处：http://www.cnblogs.com/runningsmallguo/&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 07 Oct 2017 15:26:00 +0000</pubDate>
<dc:creator>菠萝吹雪—Code</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/runningsmallguo/p/7634560.html</dc:identifier>
</item>
<item>
<title>Easyui后台管理角色权限控制 - 柯一</title>
<link>http://www.cnblogs.com/lzx2509254166/p/7636168.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzx2509254166/p/7636168.html</guid>
<description>&lt;p&gt;最近需要做一个粗略的后台管理的权限，根据用户的等级来加载相应的菜单，控制到子菜单。使用的是Easyui这个框架。&lt;/p&gt;
&lt;p&gt;1.我使用的mysql数据库。在这里我就建立四张表，角色表(tb_users),菜单表(tb_menu),用户权限表(tb_role),权限菜单表(tb_user_role).表结构如下：数据是我随便插的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007223224911-2099333520.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007223238036-1638074550.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007223302036-459543557.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007223310568-162090878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为两张权限表相当于辅助作用，所以实体层中只对角色表及菜单表进行构造与封装。&lt;/p&gt;
&lt;p&gt;2.建立一个login.jsp页面，实现登录功能。&lt;/p&gt;
&lt;p&gt;注意登录时查询到角色的rid(等级)，（使用多表连接查询）,然后将查询到的rid保存到session中。登录方法如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007224324974-1383390426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.登录后跳转到index.jsp。&lt;/p&gt;
&lt;p&gt;该页面整体为easyui的laypout布局，左边部分使用accordion做菜单栏，动态创建父菜单，其中子菜单用tree(树)来加载。点击子菜单后加载其相应的路径在layout中间部分动态添加tab页。&lt;/p&gt;
&lt;p&gt;1.首先要根据登陆时保存角色的rid来多表连接查询出相应父菜单，然后用jaon格式返回给index.jsp页面中。再根据父菜单查询到该角色拥有的子菜单，代码如下&lt;/p&gt;
&lt;p&gt;     查询父菜单&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007225533380-1003924360.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   查询子菜单&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007225901724-559251069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;返回json数据给页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230029271-1574522073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;页面加载菜单&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230218740-770909698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230232599-658028448.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/script&amp;gt;&lt;/p&gt;
&lt;p&gt;权限到这里就完了，效果图如下&lt;/p&gt;
&lt;p&gt;管理员登录图  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230458271-1599315268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;另一个角色如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1087295/201710/1087295-20171007230633318-1133105666.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为主要说明的是权限，其他的就不多说了。&lt;/p&gt;
&lt;p&gt;可联系本人哦。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 15:10:00 +0000</pubDate>
<dc:creator>柯一</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzx2509254166/p/7636168.html</dc:identifier>
</item>
<item>
<title>【JAVA零基础入门系列】Day3 Java基本数据类型 - 弗兰克的猫</title>
<link>http://www.cnblogs.com/mfrank/p/7635658.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mfrank/p/7635658.html</guid>
<description>&lt;p&gt;　　前两篇已经将开发环境搭建完成，如果你已经按之前的教程按部就班的完成了部署，那么世界上最优秀的编程语言之一和世界上最优秀的IDE之一已经出现在你的电脑上（此处应有掌声），如果你还没入门，或者正在台阶上踱步，可能你还不能理解这个“最优秀”的含义，没有关系，这顿美味需要我们来细嚼慢咽才能品尝到它的独特之处。&lt;/p&gt;
&lt;p&gt;　　接下来，就让我们一起来正式揭开Java的面纱。&lt;/p&gt;
&lt;p&gt;　　Java是一门简单、面向对象、高性能、安全性高、健壮性强、移植性好的语言（一本正经的胡说八道中）。Java的语法跟C++很像，如果有过C++学习经验的人，学习Java上手会容易很多，Java一开始很多特性都跟C++相同，比如基本的程序结构、类、语法规则等等，但是删除了其中很多复杂的东西，比如头文件，结构，联合，操作符重载、虚基类等等，看到这里，学过C++的你可能会觉得很高兴，终于不用跟那些奇奇怪怪的东西打交道了。别高兴的太早，因为，还有让你更高兴的（手动滑稽），那最头疼的指针操作部分，也去掉了，可以说是一个纯净简化版的C++，但也添加了很多自己的特性，没有了多重继承，取而代之的是接口和内部类，由于不允许直接操作指针，所以就不会因为对指针的一顿瞎操作而出现神奇的bug，当然，也少了很多寻找bug的乐趣（尴尬），Java在安全性能上是可以信任的，因为永远不会存取一个坏的指针，而造成内存分配的错误，也不存在内存泄漏问题。所有那些因为指针引起的安全隐患，都不存在的。&lt;/p&gt;
&lt;p&gt;　　也许说了这么多，对于新手的你，看的云里雾里，不知所云，没关系，你只需要知道，Java上手并不难，只比绕操场跑上十来圈难那么一点点，但如果你只是想来散散步的话，那你可能没有机会享受到汗流浃背后的满足感了。&lt;/p&gt;
&lt;p&gt;　　言归正传，Java可以写桌面、可以写Android、可以写服务器、可以写企业级业务、可以写互联网业务。如果你以后想在安卓开发、服务器开发、网站后台开发和维护上有所发展，那Java将是你不错的选择。如果只是想来膜拜一下这门常年位居编程开发语言排行榜榜首的语言，那也可以来看看，俗话说的好，技多不压身嘛，以后见了不会编程的朋友，还可以装个X说我也是学过Java的人（憋笑）。&lt;/p&gt;
&lt;p&gt;　　简单介绍了Java的功能后，能坚持看到这说明你已经有点小心动，想要继续学下去，那就跟我一起来进行系统的学习吧。&lt;/p&gt;
&lt;p&gt;　　要学习Java，自然要从基本的数据类型说起，那么，什么是数据类型？顾名思义嘛，就是不同的数据有不同的类型，就像人按性别分男女，按年龄分老中少，按性情分攻受（咳咳，这里只是为了举个栗子），在java里，基本的数据类型有四种，整数型，浮点型，布尔型和字符型。下面来一一介绍。&lt;/p&gt;
&lt;p&gt;　　整型，自然就是用来存放整数的， 比如说：1,2,3,4,100，等等，一般的整数都可以用int型来存放和操作，整型还可以根据取值范围需求不同再细分成int型，short型，long型，byte型，这几个兄弟排个序，从大到小分别是long、int、short、byte。long型最大，占用8个字节（在java中，讨论最小的存储单元是bit，也就是位，byte是字节，跟位的换算是：1byte=8bit，1kb=1024bytes=2^10bytes），作为整型中的老大，占用8*8=64位，所以除去第一位用于储存符号位，其它63位可以用来表示数值大小，所以它的表示范围为：-2^63 — 2^63-1。大概是百亿亿的级别，所以要是用来存放你的银行卡余额的话，还是不要劳烦long型了（滑稽）。作为最常用的整数型老二，int型可谓是人尽皆知，几乎成了整型的代表人物，它只占用4个字节，取值范围为-2^31 — 2^31-1，比21亿稍微多一点。而老三short，顾名思义，比较“短”，不能跟18cm的long型相提并论，只占用2个字节，表示范围为-2^15 -- 2^15-1，也就是-32768 -- 32767，做小范围的加减乘除的话是够用的。最后介绍的老四，byte型，只占用一个字节，可谓是相当拮据，表示范围为 -128-127。所以存余额的话，byte，short型太短，long型太长，所以用int型最经济实惠。&lt;/p&gt;
&lt;p&gt;　　初学编程的人可能会问了，好好的整数型，还分那么细干嘛。这你就不懂了吧，举个栗子，因为用于存放数据的内存空间是以位为基本单位，可以理解为很多很多相同的小盒子，相同的数据类型需要用同样大小的空间，不然程序就不知道数据的开始和结束位置，用数据头部来存放大小长度信息显然有些浪费空间，那么现在的问题是，一个整数，用多大的空间合适？你可能会觉得，都用同样大小的空间不就好了，那都用8个字节来存储，用来存放大数值的时候很好用，但是用来存放你的年龄的时候，仿佛浪费的空间就有点多了，就好比现在你有一个篮球，一个网球，一个足球，一个乒乓球，都需要用同样大小的盒子来单独存放，那规格自然只能按最大的来算，当你往那个大盒子里放一个乒乓球的时候，不觉得很浪费空间吗。所以为了避免这样不必要的浪费，设计多种整数型是有必要的。当然，也没有必要对于内存太过斤斤计较，如果不是在搞算法研究，不是对时间跟空间效率要求很苛刻的条件下，基本上都用int型就好了。毕竟一般情况，运行效果比运行效率更重要。&lt;/p&gt;
&lt;p&gt;　　接下来说浮点类型，为什么叫浮点类型，自然是用来表示浮点数的（废话），那什么是浮点数，这。说来又要有一段文章了。在计算机中，表示小数有两种方法，一种叫定点，一种叫浮点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007214307146-1266782780.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　以32位程序为例，定点的意思是，小数点固定在 32 位中的某个位置，前面的是整数，后面的是小数。小数点具体固定在哪里，可以自己在程序中指定。例如上面的例子，小数点在 23 bit 处。无论你是124.25，是0.5， 还是100， 小数点都在 23 bit 的位置固定不变。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007214513115-868900610.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div readability=&quot;59&quot;&gt;
&lt;p&gt;　　浮点数是相对定点数而言的，浮点数的表示方法为：&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007214551115-1269636215.jpg&quot; alt=&quot;&quot;/&gt;最高的 1 位是符号位 s，接着的 8 位是指数E，剩下的 23 位为有效数字 M。例如：&lt;/p&gt;
&lt;p&gt;　　5 DEC = 101 BIN = 1.01 x 2^2&lt;/p&gt;
&lt;p&gt;　　100 DEC = ‭01100100‬ BIN = 1.100100 x 2^6&lt;/p&gt;
&lt;p&gt;　　0.125 DEC = 0.001 BIN = 1 x 2^-3&lt;/p&gt;
&lt;p&gt;　　现在，小数点的位置就漂浮不定了。如果想了解关于浮点数的存储问题，可以看看这篇文章，https://www.cnblogs.com/jillzhang/archive/2007/06/24/793901.html&lt;/p&gt;
&lt;p&gt;，当然，新手的话建议先别看了，免得被吓跑了，你只需要知道，浮点型就是用来存取带小数点的数就可以了。&lt;/p&gt;
&lt;p&gt;　　浮点数也分成两个类型，float和double，float占用四个字节，取值范围为-2^128 ~ +2^128，也即-3.40E+38 ~ +3.40E+38；double占用八个字节，取值范围为-2^1024 ~ +2^1024，也即-1.79E+308 ~ +1.79E+308。&lt;/p&gt;
&lt;p&gt;　　float：2^23 = 8388608，一共七位，这意味着最多能有7位有效数字，但绝对能保证的为6位，也即float的精度为6~7位有效数字；&lt;/p&gt;
&lt;p&gt;　　double：2^52 = 4503599627370496，一共16位，同理，double的精度为15~16位。&lt;/p&gt;
&lt;p&gt;　　你如果对于这两个类型傻傻分不清楚，那就只用double类型就好了，java里最常用的浮点类型就是double类型。&lt;/p&gt;
&lt;p&gt;　　扯的有点多了，布尔型都等不及了，别担心，布尔型（boolean）是最简单的，只有真（true）跟假（false）两种状态。&lt;/p&gt;
&lt;p&gt;　　最后就是字符型（char），用于存放字符的数据类型，占用2个字节，采用unicode编码，它的前128字节编码与ASCII兼容字符的存储范围在\u0000~\uFFFF，在定义字符型的数据时候要注意加' '，比如 '1'表示字符'1'而不是数值1。&lt;/p&gt;
&lt;p&gt;　　好了，基本数据类型就介绍这么多了，总的来说，整型用来存放整数，浮点型用来存放小数，布尔型用来存放真假，主要用于逻辑判断，字符型用来存放单个字符，比如：'a','b','c'等等。Java中整数默认为int型，小数默认为double型。&lt;/p&gt;
&lt;p&gt;　　最后再说一点，不同数据类型之间也是可以相互转换的。Java中也是有着弱肉强食的规则，谁占地多谁就大，一个整数型int跟一个浮点型double一起运算时，会自动转化为double型，这样就能无精度损失的进行数值运算了。下面是数据类型之间的合法转换：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1043143/201710/1043143-20171007223515021-1701699356.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那我非要进行“非法转换”怎么办，一个占用8字节的double型非要转换成占用4字节的int型该怎么办，那就只能用强制类型转换了，但这样可能会造成精度的丢失。具体情况暂时不多做介绍了，不然又要说半天才能说的完了。&lt;/p&gt;
&lt;p&gt;　　好了，今天的内容到此结束，基本数据类型都看了个遍，如果还是有些不明白，也没有关系，一回生二回熟嘛。来日方长，日后再说吧。（溜了溜了）&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 07 Oct 2017 14:40:00 +0000</pubDate>
<dc:creator>弗兰克的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mfrank/p/7635658.html</dc:identifier>
</item>
<item>
<title>一文为你详细讲解对象映射库【AutoMapper】所支持场景 - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/7635429.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/7635429.html</guid>
<description>&lt;p&gt;在AutoMapper未出世前，对象与对象之间的映射，我们只能通过手动为每个属性一一赋值，时间长了不仅是我们而且老外也觉得映射代码很无聊啊。这个时候老外的所写的强大映射库AutoMapper横空出世，AutoMapper是一个对象映射库， 它提供简单的类型配置，以及简单的映射测试。对象映射通过将一种类型的输入对象转换为不同类型的输出对象而起作用。项目之前有用过，但是对其了解不够透彻映射时有时候会抛异常，后来弃之，本节我们来详细了解下AutoMapper映射库。&lt;/p&gt;
&lt;h2&gt;AutoMapper基础版&lt;/h2&gt;
&lt;p&gt;在AutoMapper中创建映射配置有两种方式。一种是通过实例化MapperConfiguration类来配置，一种是通过类Mapper中的静态方法Initialize来配置，下面我们来看看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                Age &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; config = &lt;span&gt;new&lt;/span&gt; MapperConfiguration(cfg =&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者Mapper.Initialize(cfg =&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;());&lt;/span&gt;

            &lt;span&gt;var&lt;/span&gt; mapper =&lt;span&gt; config.CreateMapper();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者var mapper = new Mapper(config);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;最终调用Map方法进行映射&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; userDTO = mapper.Map&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;(user);
            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Map映射方法中有两个参数，我们通俗讲则是从一个映射到另一个对象，在AutoMapper中将其称为映射源和映射目标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007191256130-540147555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于本节映射都通过如下静态方法来实现，简单粗暴。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
            Mapper.Initialize(cfg =&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = Mapper.Map&amp;lt;User, UserDTO&amp;gt;(user);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们再来看若映射源为空，那么是否会进行映射，还是抛异常呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            User user &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = Mapper.Map&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;(user);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007191701615-955671182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到此我们总结出一点：&lt;span&gt;AutoMapper将映射源映射到目标时，AutoMapper将忽略空引用异常。 这是AutoMapper默认设计。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;是不是到此关于AutoMapper就讲完了呢？童鞋想想所有场景嘛，这个只是最简单的场景，或者天马行空想想其他问题看看AutoMapper支持不，比如我想想，AutoMapper对属性大小写是否敏感呢？想完就开干啊。我们将User对象属性全部改为小写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                age &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = Mapper.Map&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;(user);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007192424443-1048389209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里我们又可以总结出一点：&lt;span&gt;AutoMapper从映射源到映射目标时不区分大小写。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;AutoMapper中级版 &lt;/h2&gt;
&lt;p&gt;我们讲完基础版，接下来来进入中级版看看AutoMapper到底有多强，磕不屎你哟。是否支持继承映射哎。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Base
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime CreatedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ModifiedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User : Base
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime CreatedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ModifiedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime CreatedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DateTime ModifiedTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                Age &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                CreatedTime &lt;/span&gt;=&lt;span&gt; DateTime.Now,
                ModifiedTime &lt;/span&gt;=&lt;span&gt; DateTime.Now
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;User, UserDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; userDTO = Mapper.Map&amp;lt;User, UserDTO&amp;gt;(user);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007193410724-1357240570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，看来也是支持的，我们总结来一个：&lt;span&gt;AutoMapper从映射源到映射目标支持继承。&lt;/span&gt;讲完关于类的继承，我们来看看复杂对象，这下AutoMapper想必要有点挑战了吧。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Address
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; City { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Country { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AuthorModel
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FirstName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LastName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Address Address { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AuthorDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FirstName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; LastName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; City { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; State { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Country { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; author = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorModel()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                FirstName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                LastName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Address &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Address()
                {
                    City &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深圳&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    State &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Country &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中国&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;AuthorModel, AuthorDTO&amp;gt;&lt;span&gt;());

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; authorDTO = Mapper.Map&amp;lt;AuthorModel, AuthorDTO&amp;gt;&lt;span&gt;(author);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007194323161-119636576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;哇喔，我说AutoMapper还能有这么智能，那还要我们程序员干嘛，在AuthorDTO中我们将Address扁平化为简单属性，所以此时利用Map不再是万能的，我们需要手动在创建映射配置时通过ForMember方法来自定义指定映射属性来源，从映射源中的Address复杂对象属性到AuthorDTO中属性上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; author = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorModel()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                FirstName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                LastName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Address &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Address()
                {
                    City &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;深圳&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    State &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Country &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;中国&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;AuthorModel, AuthorDTO&amp;gt;&lt;span&gt;()
            .ForMember(d &lt;/span&gt;=&amp;gt; d.City, o =&amp;gt; o.MapFrom(s =&amp;gt;&lt;span&gt; s.Address.City))
            .ForMember(d &lt;/span&gt;=&amp;gt; d.State, o =&amp;gt; o.MapFrom(s =&amp;gt;&lt;span&gt; s.Address.State))
            .ForMember(d &lt;/span&gt;=&amp;gt; d.Country, o =&amp;gt; o.MapFrom(s =&amp;gt;&lt;span&gt; s.Address.Country))
            );
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; authorDTO = Mapper.Map&amp;lt;AuthorModel, AuthorDTO&amp;gt;(author);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上所给片段代码，对于AuthorDTO中的City属性，我们指定其值来源于映射源中复杂属性Address中的City，其余同理，同时对于其他在相同层次上的属性不会进行覆盖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007200308505-1970293655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认情况下AutoMapper会将同名且不区分大小写的属性进行映射，比如对于有些属性为了节省传输流量且完全不需要用到的属性，我们压根没必要进行映射，此时AutoMapper中有Ignore方法来忽略映射，如下代码片段将忽略对属性Id的映射。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  Mapper.Initialize(cfg =&amp;gt; cfg.CreateMap&amp;lt;AuthorModel, AuthorDTO&amp;gt;&lt;span&gt;()
            .ForMember(d &lt;/span&gt;=&amp;gt; d.Id, o =&amp;gt;&lt;span&gt; o.Ignore())
            );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到此我们又可以来一个总结：&lt;span&gt;AutoMapper支持从映射源到映射目标的扁平化&lt;/span&gt;。实际上AutoMapper支持扁平化映射，但是前提是遵守AutoMapper映射约定才行，我们走一个。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Company Company { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Company
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CompanyName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer()
            {
                Company &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Company()
                {
                    Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;腾讯&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;();
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customerDTO = Mapper.Map&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;(customer);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007204934193-1979803542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你看我们什么都没做，结果同样还是映射到了目标类中，不过是遵守了AutoMapper的映射约定罢了，看到这个想必大家就马上明白过来了。如果扁平化映射源类，若想AutoMapper依然能够自动映射，那么映射目标类中的属性必须是映射源中复杂属性名称加上复杂属性中的属性名称才行，因为AutoMapper会深度搜索目标类，直到找到匹配的属性为止。下面我们再来看看集合映射。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;Order&amp;gt; Orders { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Order
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TradeNo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TotalFee { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;OrderDTO&amp;gt; OrderDTOs { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TradeNo { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; TotalFee { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述Customer对象中有Order的集合属性，所以怕AutoMapper是映射不了，我们手动配置一下，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer()
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                Orders &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;Order&amp;gt;&lt;span&gt;()
                {
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Order()
                    {
                        Id &lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                        TotalFee &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                        TradeNo &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20172021690326&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                    }
                }
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt; cfg.CreateMap&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
            .ForMember(d &lt;/span&gt;=&amp;gt; d.OrderDTOs, o =&amp;gt; o.MapFrom(s =&amp;gt;&lt;span&gt; s.Orders))
            );
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customerDTO = Mapper.Map&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;(customer);

            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007202955693-148649630.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;喔，抛出异常了，哈哈，果然AutoMapper还有不支持的，果断弃之（我们项目当时就是一直出这样的问题于是乎弃用了）。慢着，老铁。利用AutoMapper映射大部分情况下都会遇到如上异常，所以我们来分析下，在AutoMapper中，当它偶遇一个接口的目标对象时，它会自动生成动态代理类，怎么感觉好像说到EntityFramework了。 当映射到不存在的映射目标时，这就是内部设计的行为了。 然而然而，我们映射目标类却存在啊，于是乎我修改了AutoMapper映射，将Order到OrderDTO也进行映射配置，然后在配置映射Customer对象再指定Order集合属性，我们试试。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
            Mapper.Initialize(cfg =&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Order, OrderDTO&amp;gt;&lt;span&gt;();
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
               .ForMember(d &lt;/span&gt;=&amp;gt; d.OrderDTOs, o =&amp;gt; o.MapFrom(s =&amp;gt; Mapper.Map&amp;lt;IList&amp;lt;Order&amp;gt;, IList&amp;lt;OrderDTO&amp;gt;&amp;gt;&lt;span&gt;(s.Orders)));
            });
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customerDTO = Mapper.Map&amp;lt;Customer, CustomerDTO&amp;gt;(customer);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007204047146-1516349979.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;老铁妥妥没毛病，通过此种方式即使嵌套多层依然也是能够解析，只不过我们得手动多几个配置罢了不是，这里我们又来一个结论：&lt;span&gt;在映射复杂对象中的集合属性时，我们需要配置集合属性的映射，然后在复杂对象中再次映射集合属性&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;AutoMapper高级版&lt;/h2&gt;
&lt;p&gt;AutoMapper太强大了，我给跪了，强大到这篇幅不够，得手动下拉滚动条继续磕。废话少说，我们再来看看AutoMapper使用高级版，自定义值解析，动态对象映射、类型转换等。&lt;/p&gt;
&lt;h3&gt;自定义值解析&lt;/h3&gt;
&lt;p&gt;AutoMapper支持自定义解析，只不过我们需要实现IValueResolver接口才行，下面我们来看看。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; VIP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerDTO
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; VIP { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现IValueResolver接口，对映射源加以判断返回映射目标中的字符串。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; VIPResolver : IValueResolver&amp;lt;Customer, CustomerDTO, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Resolve(Customer source, CustomerDTO destination, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; destMember, ResolutionContext context)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; source.VIP ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在映射配置时使用ResolveUsing来实现上述自定义解析，使用方式有如下两种。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; customer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer()
            {
                VIP &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            };

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
                .ForMember(cv &lt;/span&gt;=&amp;gt; cv.VIP, m =&amp;gt; m.ResolveUsing&amp;lt;VIPResolver&amp;gt;&lt;span&gt;());
            });

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Mapper.Initialize(cfg =&amp;gt;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    cfg.CreateMap&amp;lt;Customer, CustomerDTO&amp;gt;()
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    .ForMember(cv =&amp;gt; cv.VIP, m =&amp;gt; m.ResolveUsing(new VIPResolver()));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;});&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; customerDTO = Mapper.Map&amp;lt;Customer, CustomerDTO&amp;gt;(customer);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007211944802-1673707436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;动态对象映射 &lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;dynamic&lt;/span&gt; customer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExpandoObject();
            customer.Id &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
            customer.Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jeffcky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            Mapper.Initialize(cfg &lt;/span&gt;=&amp;gt;&lt;span&gt; { });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = Mapper.Map&amp;lt;Customer&amp;gt;&lt;span&gt;(customer);

            &lt;/span&gt;&lt;span&gt;dynamic&lt;/span&gt; foo2 = Mapper.Map&amp;lt;ExpandoObject&amp;gt;(result);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/589642/201710/589642-20171007214127896-589647692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;类型转换 &lt;/h3&gt;
&lt;p&gt;关于上述自定义值解析，我们同样可以用类型转换类实现，在AutoMapper中存在ConvertUsing方法，该方法类似于C#中的投影一样，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            Mapper.Initialize(cfg =&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
                .ConvertUsing(s &lt;/span&gt;=&amp;gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomerDTO()
                {
                    VIP &lt;/span&gt;= s.VIP ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                });
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomTypeConverter : ITypeConverter&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomerDTO Convert(Customer source, CustomerDTO destination, ResolutionContext context)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomerDTO
            {
                VIP &lt;/span&gt;= source.VIP ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;N&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            };
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            Mapper.Initialize(cfg =&amp;gt;&lt;span&gt;
            {
                cfg.CreateMap&lt;/span&gt;&amp;lt;Customer, CustomerDTO&amp;gt;&lt;span&gt;()
                .ConvertUsing(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomTypeConverter());
            });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AutoMapper太强大了，上述已经给出大部分我们基本上会用到的场景，AutoMapper还支持依赖注入，同时最爽的是有了AutoMapper.QueryableExtensions扩展方法，这针对使用EF的童鞋简直是福音啊。 通过ProjectTo方法即可映射从数据库查询出的IQueryable类型数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            IQueryable&amp;lt;Customer&amp;gt; customers = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customersDTO = customers.&lt;span&gt;ProjectTo&lt;/span&gt;&amp;lt;CustomerDTO&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;AutoMapper强大到给跪了，目前该项目已被.NET基金会所支持，看过的，路过的，没用过的，赶紧走起用起来啊，有时间还会更新AutoMapper其他用途，想必上述场景已经够我们用了吧，如果你觉得不够用，请私信我，我再加上啊。&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 14:05:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/7635429.html</dc:identifier>
</item>
<item>
<title>机器学习之概率与统计（二）- 多元随机变量及其分布 - tanv</title>
<link>http://www.cnblogs.com/tan-v/p/7635866.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tan-v/p/7635866.html</guid>
<description>&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;        目录&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span&gt;&lt;a&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;一、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;随机向量及其分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．多元向量的联合分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;1.1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;离散情况&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;1.2&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;连续情况&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;2&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．多元向量的边缘分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;2.1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;离散情况&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;2.2&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;连续情况&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．多元向量的条件分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．贝叶斯规则&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;5&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．多元向量独立&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;6&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．多元向量条件独立&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;7&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．协方差与相关系数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;8&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．方差&lt;/span&gt;&lt;/span&gt;-&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;协方差矩阵&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;9&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．信息论&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;9.1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;机器学习原则&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;9.2&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;熵&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;9.3 KL&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;散度（&lt;/span&gt;&lt;/span&gt;Kullback-Leibler divergenc&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;，&lt;/span&gt;&lt;/span&gt;KL divergence&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;9.4&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;互信息&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;9.5&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;最大信息系数（&lt;/span&gt;&lt;/span&gt;maximal information coefficient&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;，&lt;/span&gt;&lt;/span&gt;MIC&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;二、多元正态分布&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;多元正态分布（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;multivariate normal, MVN&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;协方差的特征值分解&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;MVN&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;的白化&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;高斯判别分析&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;（&lt;/span&gt;&lt;/span&gt;GDA&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;5.&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;决策边界&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;三、概率图模型&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．有向&lt;span lang=&quot;EN-US&quot;&gt;图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;2&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．无向图&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;．特殊的概率图模型&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.1&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;朴素贝叶斯分类器（&lt;/span&gt;&lt;/span&gt;Naive Bayes Classifier, NBC&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.2&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;链规则&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.3 Markov&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;链&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.4&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;转移矩阵&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.5&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;隐马尔科夫模型（&lt;/span&gt;&lt;/span&gt;HMM&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.6 Markov&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;随机场（&lt;/span&gt;&lt;/span&gt;MRF&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot; align=&quot;justify&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a&gt;&lt;span&gt;3.7 &lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;条件随机场（&lt;/span&gt;&lt;/span&gt;CRF&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;多元随机向量的分布：在多个随机变量组成的向量上定义的分布。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;多元向量的联合分布&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1.1&lt;/span&gt;&lt;span&gt;&lt;span&gt;离散情况&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;&lt;span&gt;维随机向量&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，其中&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;j&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为离散型随机变量，则定义联合概率质量函数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(pmf)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211312302-1576874626.png&quot;&gt;&lt;img title=&quot;clip_image001&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211312661-1459792030.png&quot; alt=&quot;clip_image001&quot; width=&quot;534&quot; height=&quot;48&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;联合概率分布函数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(CDF)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211312896-647444855.png&quot;&gt;&lt;img title=&quot;clip_image002&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211313146-932474543.png&quot; alt=&quot;clip_image002&quot; width=&quot;521&quot; height=&quot;63&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1.2&lt;/span&gt;&lt;span&gt;&lt;span&gt;连续情况&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;&lt;span&gt;维随机向量&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，其中&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;j&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为连续型随机变量，则定义联合概率密度函数&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(pdf)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211313365-2018098651.png&quot;&gt;&lt;img title=&quot;clip_image003&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211313599-600757752.png&quot; alt=&quot;clip_image003&quot; width=&quot;429&quot; height=&quot;61&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211313880-908312347.png&quot;&gt;&lt;img title=&quot;clip_image004&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211314083-329639845.png&quot; alt=&quot;clip_image004&quot; width=&quot;346&quot; height=&quot;49&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;联合概率分布函数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(CDF)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211314411-1549057640.png&quot;&gt;&lt;img title=&quot;clip_image005&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211314771-252254441.png&quot; alt=&quot;clip_image005&quot; width=&quot;488&quot; height=&quot;44&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;对任意集合：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211315177-1185090594.png&quot;&gt;&lt;img title=&quot;clip_image006&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211316615-1896949778.png&quot; alt=&quot;clip_image006&quot; width=&quot;681&quot; height=&quot;56&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;2．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;多元向量的边缘分布&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.1&lt;/span&gt;&lt;span&gt;&lt;span&gt;离散情况&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;&lt;span&gt;维离散型随机向量&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;有联合质量函数&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;p(X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则定义&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;j&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的边缘概率质量函数：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211317521-476568355.png&quot;&gt;&lt;img title=&quot;clip_image007&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211319240-222133655.png&quot; alt=&quot;clip_image007&quot; width=&quot;606&quot; height=&quot;63&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.2&lt;/span&gt;&lt;span&gt;&lt;span&gt;连续情况&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;假设&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D&lt;/span&gt;&lt;span&gt;维连续型随机向量&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;有联合质量函数&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;p(X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则定义&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;j&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的边缘概率质量函数：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211319693-476212480.png&quot;&gt;&lt;img title=&quot;clip_image008&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211320083-1769258856.png&quot; alt=&quot;clip_image008&quot; width=&quot;534&quot; height=&quot;64&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;3．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;多元向量的条件分布&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;例如，对二维随机变量&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(X,Y),&lt;/span&gt; &lt;span&gt;当&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;p(y)&lt;/span&gt; &lt;span&gt;＞&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;&lt;span&gt;时，给定&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y=y&lt;/span&gt;&lt;span&gt;时&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的条件分布为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211320411-1398937994.png&quot;&gt;&lt;img title=&quot;clip_image009&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211320911-1944887623.png&quot; alt=&quot;clip_image009&quot; width=&quot;222&quot; height=&quot;87&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;即：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;                    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211321115-1954769638.png&quot;&gt;&lt;img title=&quot;clip_image010&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211321380-1314615597.png&quot; alt=&quot;clip_image010&quot; width=&quot;371&quot; height=&quot;43&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;链规则（&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Chain Rule&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;例如有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;个随机变量时：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211321630-1692613067.png&quot;&gt;&lt;img title=&quot;clip_image011&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211321896-985492842.png&quot; alt=&quot;clip_image011&quot; width=&quot;531&quot; height=&quot;107&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;或者：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211322068-276487345.png&quot;&gt;&lt;img title=&quot;clip_image012&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211322286-1268890351.png&quot; alt=&quot;clip_image012&quot; width=&quot;500&quot; height=&quot;47&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;一般地，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211322630-999688492.png&quot;&gt;&lt;img title=&quot;clip_image013&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211322865-262721017.png&quot; alt=&quot;clip_image013&quot; width=&quot;641&quot; height=&quot;188&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;4．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;贝叶斯规则&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;　　　　&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;全概率公式&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;如果&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;span&gt;可以取值&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;y&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, y&lt;/span&gt;&lt;sub&gt;&lt;span&gt;K&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;&lt;span&gt;为&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的一个取值，则：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211323099-1528844105.png&quot;&gt;&lt;img title=&quot;clip_image014&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211323318-282341533.png&quot; alt=&quot;clip_image014&quot; width=&quot;337&quot; height=&quot;82&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;（2）&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;&lt;span&gt;贝叶斯规则：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211323802-1292769350.png&quot;&gt;&lt;img title=&quot;clip_image015&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211324083-476850414.png&quot; alt=&quot;clip_image015&quot; width=&quot;357&quot; height=&quot;117&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;5．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;多元向量独立&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;若对向量中&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中所有的&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;x, y&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211324302-417520116.png&quot;&gt;&lt;img title=&quot;clip_image016&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211324552-1885557109.png&quot; alt=&quot;clip_image016&quot; width=&quot;501&quot; height=&quot;60&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;或者：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211324771-1839753397.png&quot;&gt;&lt;img title=&quot;clip_image017&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211325052-1285843301.png&quot; alt=&quot;clip_image017&quot; width=&quot;254&quot; height=&quot;55&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则称&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;与&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;独立，记作：&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;JA&quot;&gt;⊥&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;6．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;多元向量条件独立&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;若对向量中&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Z&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中所有的&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;x, y, z&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211325286-2093580994.png&quot;&gt;&lt;img title=&quot;clip_image018&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211325583-1213374013.png&quot; alt=&quot;clip_image018&quot; width=&quot;808&quot; height=&quot;52&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;或者&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211325927-1708053119.png&quot;&gt;&lt;img title=&quot;clip_image019&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211326177-1379079576.png&quot; alt=&quot;clip_image019&quot; width=&quot;356&quot; height=&quot;53&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则称&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;与&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;条件独立&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(&lt;/span&gt;&lt;span&gt;即有条件的独立&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;span&gt;，记作：&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;JA&quot;&gt;⊥&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;Y | Z&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;7．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;协方差与相关系数&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;如果随机变量之间不独立，可用协方差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;相关系数来刻画两个随机变量之间关系强弱：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211326568-1916576168.png&quot;&gt;&lt;img title=&quot;clip_image020&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211326849-246764621.png&quot; alt=&quot;clip_image020&quot; width=&quot;378&quot; height=&quot;163&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;性质：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;协方差满足：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211327115-212653457.png&quot;&gt;&lt;img title=&quot;clip_image021&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211327536-939325243.png&quot; alt=&quot;clip_image021&quot; width=&quot;454&quot; height=&quot;47&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;相关系数满足：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211327786-1372936218.png&quot;&gt;&lt;img title=&quot;clip_image022&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211328099-1283161103.png&quot; alt=&quot;clip_image022&quot; width=&quot;231&quot; height=&quot;47&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;如果&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;独立，则：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211328349-1302060459.png&quot;&gt;&lt;img title=&quot;clip_image023&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211328677-587621418.png&quot; alt=&quot;clip_image023&quot; width=&quot;472&quot; height=&quot;44&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211329052-1022089913.png&quot;&gt;&lt;img title=&quot;clip_image024&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211329990-465263966.png&quot; alt=&quot;clip_image024&quot; width=&quot;292&quot; height=&quot;37&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;协方差：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;对任意两个随机变量&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，有：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211330240-2078692571.png&quot;&gt;&lt;img title=&quot;clip_image025&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211330630-1414323371.png&quot; alt=&quot;clip_image025&quot; width=&quot;321&quot; height=&quot;64&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;推广到多个随机变量：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211330943-1886486613.png&quot;&gt;&lt;img title=&quot;clip_image026&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211331224-1883909608.png&quot; alt=&quot;clip_image026&quot; width=&quot;594&quot; height=&quot;52&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;8．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;方差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;协方差矩阵&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;令随机向量&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的形式为：&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X =&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;(X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;sup&gt;&lt;span&gt;T&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则方差&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;协方差矩阵定义为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211331521-806072841.png&quot;&gt;&lt;img title=&quot;clip_image027&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211331849-2033797094.png&quot; alt=&quot;clip_image027&quot; width=&quot;525&quot; height=&quot;152&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;当各个成分变量独立时，协方差矩阵是一个对角矩阵。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;9．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;信息论&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;9.1  &lt;/span&gt;&lt;span&gt;&lt;span&gt;机器学习原则&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）选择最简单的、能表示数据产生规律的模型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）模型选择：最小描述长度准则&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）特征选择：选择与目标最相关的特征&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;9.2  &lt;/span&gt;&lt;span&gt;&lt;span&gt;熵&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）熵是一种不确定度的度量&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）定义：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;假设随机变量&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;span&gt;的分布为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则该随机变量的熵定义为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211332255-121964191.png&quot;&gt;&lt;img title=&quot;clip_image028&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211332552-808539155.png&quot; alt=&quot;clip_image028&quot; width=&quot;496&quot; height=&quot;96&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;9.3&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;KL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;散度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Kullback-Leibler divergenc&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;KL divergence&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt; KL&lt;/span&gt;&lt;span&gt;散度，又称相对熵（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;relative entropy&lt;/span&gt;&lt;span&gt;）：一种度量两个分布&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;p&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;q&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;之间的差异的方法：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211332896-2121971738.png&quot;&gt;&lt;img title=&quot;clip_image029&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211333333-187332957.png&quot; alt=&quot;clip_image029&quot; width=&quot;249&quot; height=&quot;74&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;或者：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;              &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211333693-1455319804.png&quot;&gt;&lt;img title=&quot;clip_image030&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211334036-1115939101.png&quot; alt=&quot;clip_image030&quot; width=&quot;586&quot; height=&quot;62&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;H(p, q)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;称为交叉熵：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211334365-1225298347.png&quot;&gt;&lt;img title=&quot;clip_image031&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211334661-1546940584.png&quot; alt=&quot;clip_image031&quot; width=&quot;262&quot; height=&quot;63&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;9.4&lt;/span&gt;&lt;span&gt;&lt;span&gt;互信息&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;互信息：度量联合分布&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;p(&lt;strong&gt;X&lt;/strong&gt;, &lt;strong&gt;Y&lt;/strong&gt;)&lt;/span&gt;&lt;span&gt;和因式分解形式&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;p(&lt;strong&gt;X&lt;/strong&gt;)P( &lt;strong&gt;Y&lt;/strong&gt;)&lt;/span&gt;&lt;span&gt;之间的相似度&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211335130-1561615866.png&quot;&gt;&lt;img title=&quot;clip_image032&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211335474-1383550831.png&quot; alt=&quot;clip_image032&quot; width=&quot;722&quot; height=&quot;77&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;或者&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211335755-1006551572.png&quot;&gt;&lt;img title=&quot;clip_image033&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211336240-704314196.png&quot; alt=&quot;clip_image033&quot; width=&quot;581&quot; height=&quot;43&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;其中&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;H(&lt;strong&gt;X&lt;/strong&gt;|&lt;strong&gt;Y&lt;/strong&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;或&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;H(&lt;strong&gt;Y&lt;/strong&gt;|&lt;strong&gt;X&lt;/strong&gt;)&lt;/span&gt;&lt;span&gt;称为条件熵（表示观测到&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;span&gt;后&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的不确定性减少）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211336490-1957573101.png&quot;&gt;&lt;img title=&quot;clip_image034&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211336771-485542363.png&quot; alt=&quot;clip_image034&quot; width=&quot;369&quot; height=&quot;38&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;性质：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;）互信息不小于&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;                           &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211337083-619342380.png&quot;&gt;&lt;img title=&quot;clip_image035&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211337427-1451412164.png&quot; alt=&quot;clip_image035&quot; width=&quot;145&quot; height=&quot;45&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;）当且仅当&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;p(X, Y)= p(&lt;strong&gt;X&lt;/strong&gt;)P( &lt;strong&gt;Y&lt;/strong&gt;)&lt;/span&gt;&lt;span&gt;，即&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;X&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;与&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Y&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;独立时，互信息为&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;0.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）在特征选择时，可以通过计算特征与目标之间的互信息，选择与目标互信息最大的那些特征，抛弃与目标关系不大的特征。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;9.5&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最大信息系数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;maximal information coefficient&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;MIC&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）连续变量的互信息，需先离散化，再计算互信息。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;）最大信息系数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(MIC)&lt;/span&gt;&lt;span&gt;：以最优的方式离散化，并将互信息取值转换成到&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;[0,1]&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt; &lt;span&gt;  &lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211337677-18251020.png&quot;&gt;&lt;img title=&quot;clip_image037&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211338130-2082809366.png&quot; alt=&quot;clip_image037&quot; width=&quot;546&quot; height=&quot;92&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211338411-1170495646.png&quot;&gt;&lt;img title=&quot;clip_image039&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211339005-1494166602.png&quot; alt=&quot;clip_image039&quot; width=&quot;338&quot; height=&quot;72&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt; &lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;I(X(G);Y(G))&lt;/span&gt;&lt;span&gt;为某种离散方式&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt; &lt;span&gt;箱子大小&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;B&lt;/span&gt;&lt;span&gt;建议为&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;sup&gt;&lt;span&gt;0.6&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为样本数目。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;多元正态分布（&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;multivariate normal, MVN&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;多元正太分布的一般形式&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;                 &lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211339302-1052496267.png&quot;&gt;&lt;img title=&quot;clip_image040&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211339536-1901086145.png&quot; alt=&quot;clip_image040&quot; width=&quot;537&quot; height=&quot;81&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;              &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211339786-825809142.png&quot;&gt;&lt;img title=&quot;clip_image041&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211339974-655152859.png&quot; alt=&quot;clip_image041&quot; width=&quot;211&quot; height=&quot;41&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;期望：&lt;strong&gt;μ&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;=E(&lt;strong&gt;x&lt;/strong&gt;)&lt;span&gt; &lt;/span&gt; , &lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;协方差矩阵：&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ʃ&lt;/span&gt;&lt;/strong&gt; &lt;span lang=&quot;EN-US&quot;&gt;=&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;E( (&lt;strong&gt;x&lt;/strong&gt;-&lt;/span&gt;&lt;span&gt;&lt;span&gt;μ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;sup&gt;&lt;span&gt;T&lt;/span&gt;&lt;/sup&gt;&lt;span&gt;(&lt;strong&gt;x&lt;/strong&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;μ&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;) )&lt;/span&gt;&lt;span&gt;，即可以写成方差&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;协方差矩阵的形式。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;　　协方差矩阵有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D x (D-1)/2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;个独立元素，是正定矩阵，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;　　协方差矩阵的逆&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;精度&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;协方差的特征值分解&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;协方差矩阵的特征值分解：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211340130-270313155.png&quot;&gt;&lt;img title=&quot;clip_image042&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211340396-1398792844.png&quot; alt=&quot;clip_image042&quot; width=&quot;434&quot; height=&quot;71&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Mahalanobis&lt;/span&gt; &lt;span&gt;距离&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(&lt;/span&gt;&lt;span&gt;等于在翻转坐标系中的欧氏距离&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211340630-239934163.png&quot;&gt;&lt;img title=&quot;clip_image043&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211340911-2014365555.png&quot; alt=&quot;clip_image043&quot; width=&quot;522&quot; height=&quot;154&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;=&lt;/span&gt; &lt;strong&gt;&lt;span&gt;u&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;sup&gt;&lt;span&gt;T&lt;/span&gt;&lt;/sup&gt;&lt;span&gt;(&lt;strong&gt;x&lt;/strong&gt; -&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;μ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;MVN&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;的白化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;假设&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;随机向量服从多元正态分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211341224-1071687410.png&quot;&gt;&lt;img title=&quot;clip_image044&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211341427-1311002573.png&quot; alt=&quot;clip_image044&quot; width=&quot;117&quot; height=&quot;48&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;则令&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的分布为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211341740-1040815468.png&quot;&gt;&lt;img title=&quot;clip_image045&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211341974-1783644982.png&quot; alt=&quot;clip_image045&quot; width=&quot;119&quot; height=&quot;53&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;称&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;已经被白化了，即已经服从了标准正态分布：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;N(&lt;strong&gt;0&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;I&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;高斯判别分析&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;GDA&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;在产生式分类器中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;         &lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211342240-685386658.png&quot;&gt;&lt;img title=&quot;clip_image046&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211342599-1606798125.png&quot; alt=&quot;clip_image046&quot; width=&quot;511&quot; height=&quot;61&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;使用高斯分布作为类条件分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211342786-830371500.png&quot;&gt;&lt;img title=&quot;clip_image047&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211342958-1553787550.png&quot; alt=&quot;clip_image047&quot; width=&quot;346&quot; height=&quot;51&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;通过分析这个高斯分布来确定最佳的分布的方法，叫高斯判别分析（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;GDA&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;例如，当协方差矩阵为对角阵时，为朴素贝叶斯分类器（各特征独立）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;5.&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;决策边界&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;当所有都相等时，判别边界为线性，称为线性判别分析（&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Linear Discriminant Analysis, LDA&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;一般情况下，判别边界为二次曲线&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;协方差决定了模型的复杂度（参数的数目）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;利用随机变量之间的条件独立关系，可以将随机向量的联合分布分解为一些因式的乘积，得到简洁的概率表示。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;1．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;有向图&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;有向图模型（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;directed graphical models&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;DGMs&lt;/span&gt;&lt;span&gt;）使用带有有向边的图，用条件概率分布来表示分解：每个随机变量&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;都包含着一个影响因子，这些影响因子被称为&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的父节点，记为&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;Pa (x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则有向图模型表示概率分解：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211343161-659343052.png&quot;&gt;&lt;img title=&quot;clip_image048&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211343349-269951870.png&quot; alt=&quot;clip_image048&quot; width=&quot;309&quot; height=&quot;64&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;2．&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;无向图&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;无向图模型（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;undirected graphical model&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;UGM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）：使用带有无向边的图，将联合概率分解成一组函数的乘积。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;图中任何满足两两之间有边连接的顶点的集合被称为团（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;clip&lt;/span&gt;&lt;span&gt;），每个团&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C&lt;/span&gt;&lt;sup&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;都伴随着一个因子&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;: &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;ɸ&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C&lt;/span&gt;&lt;sup&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt; &lt;span&gt;并且这些团必须满足：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）每个因子的输出都必须是非负的&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;）但不像概率分布中那样要求因子的和&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;/&lt;/span&gt;&lt;span&gt;积分为&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;    则随机向量的联合概率可以分解为：所有这些因子的乘积：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211343552-1542493572.png&quot;&gt;&lt;img title=&quot;clip_image049&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211343802-96750714.png&quot; alt=&quot;clip_image049&quot; width=&quot;233&quot; height=&quot;66&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中归一化常数&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Z&lt;/span&gt;&lt;span&gt;被定义为函数乘积的所有状态的求和或积分，使得这些乘积的求和为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;（即使得&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;p(x)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为一个合法的概率分布）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;．特殊的概率图模型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.1&lt;/span&gt; &lt;span&gt;&lt;span&gt;朴素贝叶斯分类器（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Naive Bayes Classifier, NBC&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）原理：假设各维特征在给定类别标签的情况下是条件独立的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;）假设要进行分类，共有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C&lt;/span&gt;&lt;span&gt;个类别&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;y∈&lt;/span&gt; &lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;…, C&lt;/span&gt;&lt;span&gt;），每个样本有特征&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;= (x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;, …, x&lt;/span&gt;&lt;sub&gt;&lt;span&gt;D&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则给定类别标签下的条件概率为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;                &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211344099-616556869.png&quot;&gt;&lt;img title=&quot;clip_image050&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211344349-383086690.png&quot; alt=&quot;clip_image050&quot; width=&quot;404&quot; height=&quot;88&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）进行分类（预测）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211344677-49515636.png&quot;&gt;&lt;img title=&quot;clip_image051&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211344865-126565219.png&quot; alt=&quot;clip_image051&quot; width=&quot;452&quot; height=&quot;51&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.2&lt;/span&gt;&lt;span&gt;&lt;span&gt;链规则&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;给定时间长度为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;T&lt;/span&gt; &lt;span&gt;的序列&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;…, X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;T&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，则链规则：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211345130-1522177529.png&quot;&gt;&lt;img title=&quot;clip_image052&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211345302-1361597048.png&quot; alt=&quot;clip_image052&quot; width=&quot;479&quot; height=&quot;106&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;即第&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;t&lt;/span&gt;&lt;span&gt;时刻的状态&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;t&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;只与前&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;t-1&lt;/span&gt;&lt;span&gt;个时刻的状态&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;1:t-1&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;相关。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.3 Markov&lt;/span&gt;&lt;span&gt;&lt;span&gt;链&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;假设第&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;t&lt;/span&gt;&lt;span&gt;时刻的状态&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;t&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;只与前一个时刻的状态&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;sub&gt;&lt;span&gt;t-1&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;相关，称为一阶&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Markov&lt;/span&gt;&lt;span&gt;假设，得到的联合分布为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Markov&lt;/span&gt;&lt;span&gt;链（或&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Markov&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;模型）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211345490-268059686.png&quot;&gt;&lt;img title=&quot;clip_image053&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211345677-389035539.png&quot; alt=&quot;clip_image053&quot; width=&quot;419&quot; height=&quot;81&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.4&lt;/span&gt;&lt;span&gt;&lt;span&gt;转移矩阵&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;当&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span lang=&quot;JA&quot;&gt;&lt;span&gt;∈&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(1,2,…,k)&lt;/span&gt;&lt;span&gt;为离散时，则条件分布&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;p(&lt;/span&gt;&lt;strong&gt;&lt;span&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span&gt;t&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;|&lt;/span&gt;&lt;strong&gt;&lt;span&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span&gt;t-1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;可表示为一个&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;K x K&lt;/span&gt;&lt;span&gt;的矩阵&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;|A&lt;/span&gt;&lt;sub&gt;&lt;span&gt;ij&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，称为转移矩阵，其中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211345865-430811169.png&quot;&gt;&lt;img title=&quot;clip_image054&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211346036-859575838.png&quot; alt=&quot;clip_image054&quot; width=&quot;334&quot; height=&quot;45&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;表示从状态&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;i&lt;/span&gt;&lt;span&gt;转移到状态&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的概率，也称为叫做随机矩阵。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.5&lt;/span&gt;&lt;span&gt;&lt;span&gt;隐马尔科夫模型（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;HMM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;如果系统的状态不可见，只能观测到由隐含状态驱动的观测变量，则可用隐马尔可夫模型（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Hidden Markov Model, HMM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）表示联合概率：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;              &lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211346333-1423688258.png&quot;&gt;&lt;img title=&quot;clip_image055&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211346661-168305720.png&quot; alt=&quot;clip_image055&quot; width=&quot;840&quot; height=&quot;88&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;其中：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;其中&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;z&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;表示第&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;时刻的隐含状态；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;p(&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Z&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span&gt;t&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;|&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Z&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span&gt;t-1&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;表示转移模型；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;p(&lt;/span&gt;&lt;strong&gt;&lt;span&gt;X&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span&gt;t&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;|&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Z&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span&gt;t&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;表示观测模型。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.6 Markov&lt;/span&gt;&lt;span&gt;&lt;span&gt;随机场（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;MRF&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）定义&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;随机场可以看成是一组随机变量的集合（这些随机变量之间可能有依赖关系）；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;             &lt;/span&gt; Markov&lt;/span&gt;&lt;span&gt;随机场：加了&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Markov&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;性质限制的随机场，可用无向图表示。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;MRF&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的参数化&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt; 1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;　　　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;无向图中节点之间的边没有方向，不能用链规则表示联合概率，而是用图中每个最大团&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;的因子的乘积表示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211346849-1881976907.png&quot;&gt;&lt;img title=&quot;clip_image056&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211347052-27416815.png&quot; alt=&quot;clip_image056&quot; width=&quot;329&quot; height=&quot;75&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      　　&lt;/span&gt;&lt;/span&gt; &lt;span&gt;其中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Z&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为归一化常数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;    　　  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;或者，使用能量函数表示为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211347271-287603103.png&quot;&gt;&lt;img title=&quot;clip_image057&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211347490-1807740441.png&quot; alt=&quot;clip_image057&quot; width=&quot;378&quot; height=&quot;69&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;       　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;其中&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;E(&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;y&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span&gt;c&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为团簇&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;中变量相关的能量函数。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt; 3&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;或者，将&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;势能函数表示为一些函数的线性组合：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;                    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211347693-1023752556.png&quot;&gt;&lt;img title=&quot;clip_image058&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211347849-220318043.png&quot; alt=&quot;clip_image058&quot; width=&quot;345&quot; height=&quot;45&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;其中，组合权重为&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Ɵ&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;ɸ&lt;/span&gt;&lt;sub&gt;&lt;span&gt;c&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为根据变量&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;sub&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;&lt;span&gt;得到的特征。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;则&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;联合分布表示为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;                    &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211348052-1299617468.png&quot;&gt;&lt;img title=&quot;clip_image059&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211348208-1632400186.png&quot; alt=&quot;clip_image059&quot; width=&quot;439&quot; height=&quot;71&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;称为最大熵模型或&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;log&lt;/span&gt;&lt;span&gt;线性模型，在条件随机场（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;CRF&lt;/span&gt;&lt;span&gt;）、（受限）&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Boltzmann&lt;/span&gt;&lt;span&gt;机（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;RBM&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）可用此形&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span&gt;式表示联合概率。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.7&lt;/span&gt; &lt;span&gt;&lt;span&gt;条件随机场（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;CRF&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;条件随机场&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(Conditional Random Field&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;CRF)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;             &lt;/span&gt;&lt;/span&gt; &lt;span&gt;给定&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;MRF&lt;/span&gt;&lt;span&gt;中的每个随机变量下面还有观测值，则给定观测条件下&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;MRF&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;的分布：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211348396-237595124.png&quot;&gt;&lt;img title=&quot;clip_image060&quot; src=&quot;http://images2017.cnblogs.com/blog/718363/201710/718363-20171007211348552-519299199.png&quot; alt=&quot;clip_image060&quot; width=&quot;624&quot; height=&quot;84&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; &lt;span&gt;其中，&lt;/span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;为观测集合。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;justify&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;      &lt;/span&gt; &lt;span&gt;- tany 2017&lt;/span&gt;&lt;/span&gt;&lt;span&gt;年&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;10&lt;/span&gt;&lt;span&gt;月&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;日于杭州&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 13:31:00 +0000</pubDate>
<dc:creator>tanv</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tan-v/p/7635866.html</dc:identifier>
</item>
<item>
<title>UWP 改变Button样式 - 5只猫</title>
<link>http://www.cnblogs.com/MzwCat/p/7635890.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MzwCat/p/7635890.html</guid>
<description>&lt;p&gt;-----some words------&lt;/p&gt;
&lt;p&gt;1.Control：控制 （我们理解成控件）&lt;/p&gt;
&lt;p&gt;2.Template：模板&lt;/p&gt;
&lt;p&gt;3.Ellipse 椭圆&lt;/p&gt;
&lt;p&gt;4.Content 内容&lt;/p&gt;
&lt;p&gt;5.Presenter 节目主持人，演播厅，推荐者&lt;/p&gt;
&lt;p&gt;6.ContentPresenter 内容提供者...&lt;/p&gt;
&lt;p&gt;------the  end ---------&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一：Control类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Control类是所有控件的父类，例如Button按钮控件，TextBlock文本框控件等都是继承于Control类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二：Ellipse类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UWP里画一个圆，没有圆这个类，用的是Ellipse椭圆类，给这个椭圆的长和框设置成一样就好了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 &amp;lt;Ellipse Width=&quot;50&quot;
          Height=&quot;50&quot;
          Fill=&quot;Blue&quot;&amp;gt;&amp;lt;/Ellipse&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;三：改变Button控件的样式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然我们可以简单的设置一些控件的样式，但是还是不够。例如下面是一个最简单的Button控件，我们可以改的是Width，Height，但如果你想做一个圆形的按钮，怎么做呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/961655/201710/961655-20171007202342411-1256516081.png&quot; alt=&quot;&quot; width=&quot;776&quot; height=&quot;496&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在设计器里找到你写的Button控件，右键-&amp;gt;编辑模板-&amp;gt;编辑副本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/961655/201710/961655-20171007202639161-913779957.png&quot; alt=&quot;&quot; width=&quot;778&quot; height=&quot;458&quot;/&gt;&lt;/p&gt;
&lt;p&gt;vs会帮你生成一个样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 &amp;lt;&amp;lt;Page.Resources&amp;gt;
        &amp;lt;Style x:Key=&quot;ButtonStyle1&quot; TargetType=&quot;Button&quot;&amp;gt;
            &amp;lt;Setter Property=&quot;Background&quot; Value=&quot;{ThemeResource ButtonBackground}&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;Foreground&quot; Value=&quot;{ThemeResource ButtonForeground}&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;BorderBrush&quot; Value=&quot;{ThemeResource ButtonBorderBrush}&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;BorderThickness&quot; Value=&quot;{ThemeResource ButtonBorderThemeThickness}&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;Padding&quot; Value=&quot;8,4,8,4&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;HorizontalAlignment&quot; Value=&quot;Left&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;VerticalAlignment&quot; Value=&quot;Center&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;FontFamily&quot; Value=&quot;{ThemeResource ContentControlThemeFontFamily}&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;FontWeight&quot; Value=&quot;Normal&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;FontSize&quot; Value=&quot;{ThemeResource ControlContentThemeFontSize}&quot;/&amp;gt;
            &amp;lt;Setter Property=&quot;UseSystemFocusVisuals&quot; Value=&quot;True&quot;/&amp;gt;
            &amp;lt;!--&amp;lt;Setter Property=&quot;FocusVisualMargin&quot; Value=&quot;-3&quot;/&amp;gt;--&amp;gt;
            &amp;lt;Setter Property=&quot;Template&quot;&amp;gt;
                &amp;lt;Setter.Value&amp;gt;
                    &amp;lt;ControlTemplate TargetType=&quot;Button&quot;&amp;gt;
                        &amp;lt;Grid x:Name=&quot;RootGrid&quot; Background=&quot;{TemplateBinding Background}&quot;&amp;gt;
                            &amp;lt;ContentPresenter x:Name=&quot;ContentPresenter&quot; AutomationProperties.AccessibilityView=&quot;Raw&quot; BorderBrush=&quot;{TemplateBinding BorderBrush}&quot; BorderThickness=&quot;{TemplateBinding BorderThickness}&quot; ContentTemplate=&quot;{TemplateBinding ContentTemplate}&quot; ContentTransitions=&quot;{TemplateBinding ContentTransitions}&quot; Content=&quot;{TemplateBinding Content}&quot; HorizontalContentAlignment=&quot;{TemplateBinding HorizontalContentAlignment}&quot; Padding=&quot;{TemplateBinding Padding}&quot; VerticalContentAlignment=&quot;{TemplateBinding VerticalContentAlignment}&quot;/&amp;gt;
                        &amp;lt;/Grid&amp;gt;
                    &amp;lt;/ControlTemplate&amp;gt;
                &amp;lt;/Setter.Value&amp;gt;
            &amp;lt;/Setter&amp;gt;
        &amp;lt;/Style&amp;gt;
    &amp;lt;/Page.Resources&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TargetType=&quot;Button&quot; 表示这是一个给Button类型设置的样式。&lt;/p&gt;
&lt;p&gt;控件有一个Template属性，该属性用来定义控件的模板，为什么你创建一个Button按钮，是方形的而不是圆形的，就是每个控件都有自己的默认模板，当你不去改Template时，他就是默认的，如果我们想让控件变的漂亮一点，就要改控件的模板。&lt;/p&gt;
&lt;p&gt;Template模板属性存的是ControlTemplate（控件模板）&lt;/p&gt;
&lt;p&gt;里面放的是一个Grid。&lt;/p&gt;
&lt;p&gt;说明这个Grid就是该Button的模板。Background=&quot;{TemplateBinding Background}&quot; 说明是将我们的在Xaml代码里写的Background绑定到了模板的最外层。简单来理解就是我们设置的样式，要么是通过继承或者绑定到了我们的模板上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四：ContentPresenter &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内容控件Button有一个Content属性，相应的模板里有一个ContentPresenter类用于单独的装内容。&lt;/p&gt;
&lt;p&gt;单独装的好处就是不管你的模板的样式怎么改变，我的内容都不会受到影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五：做一个圆形Button控件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然是圆形的按钮，那么我们在模板里加一个圆形。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;Setter Property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Template&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;Setter.Value&amp;gt;
                    &amp;lt;ControlTemplate TargetType=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Button&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        &amp;lt;Grid x:Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RootGrid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Background=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Transparent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                            &amp;lt;Ellipse Width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Width}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                                     Height&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Height}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                                     Fill&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Background}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/Ellipse&amp;gt;
                            &amp;lt;ContentPresenter x:Name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ContentPresenter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                                              AutomationProperties.AccessibilityView&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Raw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                                              BorderBrush&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding BorderBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                                              BorderThickness&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding BorderThickness}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                                              ContentTemplate&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding ContentTemplate}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                                              ContentTransitions&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding ContentTransitions}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                                              Content&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Content}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                                              HorizontalContentAlignment&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding HorizontalContentAlignment}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                                              Padding&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Padding}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 
                                              VerticalContentAlignment&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding VerticalContentAlignment}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
                        &amp;lt;/Grid&amp;gt;
                    &amp;lt;/ControlTemplate&amp;gt;
                &amp;lt;/Setter.Value&amp;gt;
&amp;lt;/Setter&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将根Grid的背景改成Transparent透明。在Grid里加上一个圆形，将圆形的背景颜色绑定一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/961655/201710/961655-20171007211356208-537829239.png&quot; alt=&quot;&quot; width=&quot;853&quot; height=&quot;418&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的例子是Button的Content是一个FontIcon，该content被装到了模板里的ContentPresenter里。&lt;/p&gt;
&lt;p&gt;background被绑定到了模板里的Ellipse的背景里，这样一个简单的按钮的样式就做好了。之后如果还要用这个样式，引用就好了。&lt;/p&gt;


&lt;p&gt;当然现在的按钮的其它状态样式比如Pressed，这类的状态样式我这里没写，下篇再见！&lt;/p&gt;

</description>
<pubDate>Sat, 07 Oct 2017 13:20:00 +0000</pubDate>
<dc:creator>5只猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MzwCat/p/7635890.html</dc:identifier>
</item>
<item>
<title>跳跃表原理和实现 - banananana</title>
<link>http://www.cnblogs.com/George1994/p/7635731.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/George1994/p/7635731.html</guid>
<description>&lt;section class=&quot;md_block_wrapper&quot; id=&quot;md_block_outer_0&quot;&gt;
&lt;/section&gt;
&lt;section class=&quot;md_block_wrapper&quot; id=&quot;md_block_outer_2&quot;&gt;&lt;h2 id=&quot;toc_1&quot;&gt;前提&lt;/h2&gt;
&lt;/section&gt;
&lt;p class=&quot;md_block md_has_block_below md_has_block_below_blockquote&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;有时候会被问到链表如果做到二分搜索，可能会有部分的人会去把链表中的值保存到数组来进行二分，但是如果知道跳跃表的话，那么这个数据结构就可以解决这个困惑，它允许快速查询一个有序连续元素的数据链表，它的效率可以做到和二分相同，都是O(logn)的平均时间复杂度，其空间复杂度为O(n)。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;跳跃列表是在很多应用中有可能替代平衡树而作为实现方法的一种数据结构。跳跃列表的算法有同平衡树一样的渐进的预期时间边界，并且更简单、更快速和使用更少的空间。----by 发明者&lt;/span&gt;&lt;span class=&quot;md_line&quot;&gt;像是redis中有序集合就使用到了跳跃表。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;section class=&quot;md_block_wrapper&quot; id=&quot;md_block_outer_9&quot;&gt;&lt;h2 id=&quot;toc_2&quot;&gt;原理&lt;/h2&gt;
&lt;/section&gt;
&lt;section class=&quot;md_block_wrapper&quot; id=&quot;md_block_outer_11&quot;&gt;&lt;h3 id=&quot;toc_3&quot;&gt;性质&lt;/h3&gt;
&lt;/section&gt;
&lt;p class=&quot;md_block md_has_block_below md_has_block_below_ol&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;首先，应该要了解跳跃表的性质；&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;由很多层结构组成；&lt;/li&gt;
&lt;li&gt;每一层都是一个有序的链表，排列顺序为由高层到底层，都至少包含两个链表节点，分别是前面的head节点和后面的nil节点；&lt;/li&gt;
&lt;li&gt;最底层的链表包含了所有的元素；&lt;/li&gt;
&lt;li&gt;如果一个元素出现在某一层的链表中，那么在该层之下的链表也全都会出现（上一层的元素是当前层的元素的子集）；&lt;/li&gt;
&lt;li&gt;链表中的每个节点都包含两个指针，一个指向同一层的下一个链表节点，另一个指向下一层的同一个链表节点；&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;&lt;img class=&quot;&quot; src=&quot;http://odwv9d2u8.bkt.clouddn.com/17-10-3/32571293.jpg&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;可以看到，这里一共有4层，最上面就是最高层（Level 3），最下面的层就是最底层（Level 0），然后每一列中的链表节点中的值都是相同的，用指针来连接着。跳跃表的层数跟结构中最高节点的高度相同。理想情况下，跳跃表结构中第一层中存在所有的节点，第二层只有一半的节点，而且是均匀间隔，第三层则存在1/4的节点，并且是均匀间隔的，以此类推，这样理想的层数就是logN。&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;md_block_wrapper&quot; id=&quot;md_block_outer_25&quot;&gt;&lt;h3 id=&quot;toc_4&quot;&gt;搜索&lt;/h3&gt;
&lt;/section&gt;
&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;其基本原理就是从&lt;strong&gt;最高层的链表节点&lt;/strong&gt;开始，如果比当前节点要大和比当前层的下一个节点要小，那么则往下找，也就是和当前层的下一层的节点的下一个节点进行比较，以此类推，一直找到最底层的最后一个节点，如果找到则返回，反之则返回空。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;&lt;img class=&quot;&quot; src=&quot;http://odwv9d2u8.bkt.clouddn.com/17-10-3/6620991.jpg&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;代码实现大致为：&lt;/span&gt;&lt;/p&gt;
&lt;section id=&quot;CqSfYMXpGMRUJJhG8g2JNTU&quot; readability=&quot;1.5&quot;&gt;&lt;div class=&quot;codehilite code_lang_cpp highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;md_block_wrapper&quot; id=&quot;md_block_outer_47&quot;&gt;&lt;h3 id=&quot;toc_5&quot;&gt;插入&lt;/h3&gt;
&lt;/section&gt;
&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;既然要插入，首先需要&lt;strong&gt;确定插入的层数&lt;/strong&gt;，这里有不一样的方法。1. 看到一些博客写的是抛硬币，只要是正面就累加，直到遇见反面才停止，最后记录正面的次数并将其作为要添加新元素的层；2. 还有就是一些博客里面写的统计概率，先给定一个概率p，产生一个0到1之间的随机数，如果这个随机数小于p，则将高度加1，直到产生的随机数大于概率p才停止，根据给出的结论，当概率为1/2或者是1/4的时候，整体的性能会比较好（其实当p为1/2的时候，也就是抛硬币的方法）。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;当确定好要插入的层数以后，则需要将元素都插入到从最底层到第k层。&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;md_block_wrapper&quot; id=&quot;md_block_outer_53&quot;&gt;&lt;h3 id=&quot;toc_6&quot;&gt;删除&lt;/h3&gt;
&lt;/section&gt;
&lt;p class=&quot;md_block&quot;&gt;&lt;span class=&quot;md_line&quot;&gt;在各个层中找到包含指定值的节点，然后将节点从链表中删除即可，如果删除以后只剩下头尾两个节点，则删除这一层。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 12:41:00 +0000</pubDate>
<dc:creator>banananana</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/George1994/p/7635731.html</dc:identifier>
</item>
<item>
<title>CentOS 搭建Graylog集群详解 - 走心的狗</title>
<link>http://www.cnblogs.com/wayneiscoming/p/7635357.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wayneiscoming/p/7635357.html</guid>
<description>&lt;h2&gt;1. Graylog2 简介&lt;/h2&gt;
&lt;p&gt;　　Graylog 是一个简单易用、功能较全面的日志管理工具，相比 ELK 组合， 优点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;部署维护简单，一体化解决方案，不像ELK三个独立系统集成。&lt;/li&gt;
&lt;li&gt;查相比ES json语法，搜索语法更加简单，如 source:mongo AND reponse_time_ms:&amp;gt;5000。&lt;/li&gt;
&lt;li&gt;内置简单的告警。&lt;/li&gt;
&lt;li&gt;可以将搜索条件导出为 &lt;span&gt;json&lt;/span&gt;格式文本，方便开发调用ES rest api搜索脚本。&lt;/li&gt;
&lt;li&gt;自己开发采集日志的脚本，并用curl/nc发送到Graylog Server，发送格式是自定义的GELF，Flunted和Logstash都有相应的输出GELF消息的插件。自己开发带来很大的自由度。实际上只需要用inotifywait监控日志的modify事件，并把日志的新增行用curl/netcat发送到Graylog Server就可。&lt;/li&gt;
&lt;li&gt;UI 比较友好，搜索结果高亮显示。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　当然，在拓展性上，graylog还是不如ELK。&lt;/p&gt;
&lt;p&gt;　　Graylog整体组成：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Graylog提供 graylog 对外接口， CPU 密集&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Elasticsearch &lt;/span&gt;日志文件的持久化存储和检索， IO 密集 &lt;/li&gt;
&lt;li&gt;MongoDB 存储一些 Graylog 的配置 &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Graylog架构&lt;/h2&gt;
&lt;h3&gt;　　单server架构 :&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1238468/201710/1238468-20171007165735115-234854251.png&quot; alt=&quot;&quot; width=&quot;437&quot; height=&quot;402&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;　　Graylog集群架构 :&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1238468/201710/1238468-20171007165827068-1256277697.png&quot; alt=&quot;&quot; width=&quot;832&quot; height=&quot;563&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3. Graylog安装&lt;/h2&gt;
&lt;p&gt;　　这里我搭建的是集群方案，但是将ES与Graylog和MongoDB部署在同一台server上。&lt;/p&gt;
&lt;h4&gt;　　① 前提条件：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
$ sudo yum install java-&lt;span&gt;1.8&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-openjdk-headless.x86_64&lt;br/&gt;$ sed -i 's/^SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config&lt;br/&gt;$ setenforce 0&lt;p&gt;#安装pwgen&lt;br/&gt;$ &lt;span class=&quot;pre&quot;&gt;sudo &lt;span class=&quot;pre&quot;&gt;yum &lt;span class=&quot;pre&quot;&gt;install &lt;span class=&quot;pre&quot;&gt;epel-release&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;$ sudo yum install pwgen
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　&lt;/h4&gt;
&lt;h4&gt;　　② MongoDB安装：&lt;/h4&gt;
&lt;p&gt;　　创建/etc/yum.repos.d/mongodb-org-3.2.repo文件，添加如下内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[mongodb-org-&lt;span&gt;3.2&lt;/span&gt;&lt;span&gt;]
name&lt;/span&gt;=&lt;span&gt;MongoDB Repository
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/&lt;/span&gt;
gpgcheck=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
enabled&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpgkey&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.mongodb.org/static/pgp/server-3.2.asc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　安装MongoDB：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; mongodb-org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　启动服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;sudo&lt;/span&gt; chkconfig --&lt;span&gt;add mongod
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; systemctl daemon-&lt;span&gt;reload
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt;&lt;span&gt; systemctl enable mongod.service
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; systemctl start mongod.service
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　&lt;/h4&gt;
&lt;h4&gt;　　③Elasticsearch安装：&lt;/h4&gt;
&lt;p&gt;　　Graylog 2.3.x 支持 Elasticsearch 5.x版本。&lt;/p&gt;
&lt;p&gt;　　首先安装Elastic GPG key以及repository文件，然后yum安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
$ rpm --import https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;artifacts.elastic.co/GPG-KEY-elasticsearch&lt;br/&gt;&lt;/span&gt;
$ &lt;span&gt;cat&lt;/span&gt; /etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/&lt;span&gt;elasticsearch.repo
[elasticsearch&lt;/span&gt;-&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.x]
name&lt;/span&gt;=Elasticsearch repository &lt;span&gt;for&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.x packages
baseurl&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;artifacts.elastic.co/packages/5.x/yum&lt;/span&gt;
gpgcheck=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
gpgkey&lt;/span&gt;=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;artifacts.elastic.co/GPG-KEY-elasticsearch&lt;/span&gt;
enabled=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
autorefresh&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
type&lt;/span&gt;=rpm-md&lt;p&gt;$ &lt;span class=&quot;pre&quot;&gt;sudo &lt;span class=&quot;pre&quot;&gt;yum &lt;span class=&quot;pre&quot;&gt;install &lt;span class=&quot;pre&quot;&gt;elasticsearch&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编辑Elasticsearch配置文件/etc/elasticsearch/elasticsearch.yml，添加cluster信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_b3f67450-e456-4f5e-9e18-9e6d231858e1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b3f67450-e456-4f5e-9e18-9e6d231858e1&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b3f67450-e456-4f5e-9e18-9e6d231858e1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;cat&lt;/span&gt; /etc/elasticsearch/&lt;span&gt;elasticsearch.yml 
# &lt;/span&gt;======================== Elasticsearch Configuration =========================&lt;span&gt;
#
# NOTE: Elasticsearch comes with reasonable defaults &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; most settings.
#       Before you set out to tweak and tune the configuration, &lt;/span&gt;&lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;. This template lists
# the most important settings you may want to configure &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; a production cluster.
#
# Please consult the documentation &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; further information on configuration options:
# https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.elastic.co/guide/en/elasticsearch/reference/index.html&lt;/span&gt;
&lt;span&gt;#
# &lt;/span&gt;---------------------------------- Cluster -----------------------------------&lt;span&gt;
#
# Use a descriptive name &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; your cluster:
#
cluster.name: graylog
#
# &lt;/span&gt;------------------------------------ Node ------------------------------------&lt;span&gt;
#
# Use a descriptive name &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; the node:
#
node.name: shop&lt;/span&gt;-log-&lt;span&gt;02&lt;/span&gt;&lt;span&gt;
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# &lt;/span&gt;----------------------------------- Paths ------------------------------------&lt;span&gt;
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: &lt;/span&gt;/data/elasticsearch/&lt;span&gt;db
#
# Path to log files:
#
path.logs: &lt;/span&gt;/data/elasticsearch/&lt;span&gt;logs
#
# &lt;/span&gt;----------------------------------- Memory -----------------------------------&lt;span&gt;
#
# Lock the memory on startup:
#
#bootstrap.memory_lock: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# &lt;/span&gt;---------------------------------- Network -----------------------------------&lt;span&gt;
#
# Set the bind address to a specific IP (IPv4 or IPv6):
#
network.host: &lt;/span&gt;&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;2.42&lt;/span&gt;&lt;span&gt;
#
# Set a custom port &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; HTTP:
#
http.port: &lt;/span&gt;&lt;span&gt;9200&lt;/span&gt;&lt;span&gt;
#
# For &lt;/span&gt;&lt;span&gt;more&lt;/span&gt;&lt;span&gt; information, consult the network module documentation.
#
# &lt;/span&gt;--------------------------------- Discovery ----------------------------------&lt;span&gt;
#
# Pass an initial list of hosts to perform discovery when new node is started:
# The default list of hosts is [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[::1]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
#
# 这里给其他两个节点的地址
discovery.zen.&lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;.unicast.hosts: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.2.41&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.2.43&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
#
# Prevent the &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;split brain&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; by configuring the majority of nodes (total number of master-eligible nodes / &lt;span&gt;2&lt;/span&gt; + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;):
#
discovery.zen.minimum_master_nodes: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
#
# For &lt;/span&gt;&lt;span&gt;more&lt;/span&gt;&lt;span&gt; information, consult the zen discovery module documentation.
#
# &lt;/span&gt;---------------------------------- Gateway -----------------------------------&lt;span&gt;
#
# Block initial recovery after a full cluster restart &lt;/span&gt;&lt;span&gt;until&lt;/span&gt;&lt;span&gt; N nodes are started:
#
#gateway.recover_after_nodes: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
#
# For &lt;/span&gt;&lt;span&gt;more&lt;/span&gt;&lt;span&gt; information, consult the gateway module documentation.
#
# &lt;/span&gt;---------------------------------- Various -----------------------------------&lt;span&gt;
#
# Require explicit names when deleting indices:
#
#action.destructive_requires_name: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
http.cors.enabled: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
http.cors.allow&lt;/span&gt;-origin: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;elasticsearch.yml&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　启动Elasticsearch服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;sudo&lt;/span&gt; chkconfig --&lt;span&gt;add elasticsearch
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; systemctl daemon-&lt;span&gt;reload
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt;&lt;span&gt; systemctl enable elasticsearch.service
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; systemctl restart elasticsearch.service
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　④Graylog安装&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;sudo&lt;/span&gt; rpm -Uvh https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;packages.graylog2.org/repo/packages/graylog-2.3-repository_latest.rpm&lt;/span&gt;
$ &lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; graylog-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编辑graylog配置文件 /etc/graylog/server/server.conf，添加 password_secret和 password_secret_sha2(必须)&lt;/p&gt;
&lt;p&gt;　　可以使用 &lt;span class=&quot;n&quot;&gt;echo &lt;span class=&quot;o&quot;&gt;-&lt;span class=&quot;n&quot;&gt;n &lt;span class=&quot;n&quot;&gt;yourpassword &lt;span class=&quot;o&quot;&gt;| &lt;span class=&quot;n&quot;&gt;sha256sum 命令来生成 password_secret_sha2。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;　　设置rest_listen_uri以及web_listen_uri为公共ip或公共hostname，以便连接graylog。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;78.5&quot;&gt;&lt;img id=&quot;code_img_closed_5b72d843-26bf-443c-88a4-b3306b041fba&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5b72d843-26bf-443c-88a4-b3306b041fba&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5b72d843-26bf-443c-88a4-b3306b041fba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;152&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; # &lt;span&gt;cat&lt;/span&gt; /etc/graylog/server/&lt;span&gt;server.conf
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;############################
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;# GRAYLOG CONFIGURATION FILE
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;############################
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; # This is the Graylog configuration &lt;span&gt;file&lt;/span&gt;. The &lt;span&gt;file&lt;/span&gt; has to use ISO &lt;span&gt;8859&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;/Latin-&lt;span&gt;1&lt;/span&gt;&lt;span&gt; character encoding.
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; # Characters that cannot be directly represented &lt;span&gt;in&lt;/span&gt;&lt;span&gt; this encoding can be written using Unicode escapes
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; # as defined &lt;span&gt;in&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.3, using the \u prefix.&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;# For example, \u002c.
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;# 
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; # *&lt;span&gt; Entries are generally expected to be a single line of the form, one of the following:
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; # propertyName=&lt;span&gt;propertyValue
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;# propertyName:propertyValue
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; # *&lt;span&gt; White space that appears between the property name and property value is ignored,
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;#   so the following are equivalent:
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;# 
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; # name=&lt;span&gt;Stephen
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; # name =&lt;span&gt; Stephen
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; # *&lt;span&gt; White space at the beginning of the line is also ignored.
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; # * Lines that start with the comment characters !&lt;span&gt; or # are ignored. Blank lines are also ignored.
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; # *&lt;span&gt; The property value is generally terminated by the end of the line. White space following the
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;#   property value is not ignored, and is treated as part of the property value.
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; # * A property value can span several lines &lt;span&gt;if&lt;/span&gt;&lt;span&gt; each line is terminated by a backslash (鈥榎鈥 character.
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;#   For example:
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; # targetCities=&lt;span&gt;\
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;#         Detroit,\
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;#         Chicago,\
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;#         Los Angeles
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; #   This is equivalent to targetCities=&lt;span&gt;Detroit,Chicago,Los Angeles (white space at the beginning of lines is ignored).
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;# 
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; # *&lt;span&gt; The characters newline, carriage return, and tab can be inserted with characters \n, \r, and \t, respectively.
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;# 
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; # * The backslash character must be escaped as a &lt;span&gt;double&lt;/span&gt;&lt;span&gt; backslash. For example:
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;# 
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; # path=&lt;span&gt;c:\\docs\\doc1
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt; # If you are running &lt;span&gt;more&lt;/span&gt; than one instances of Graylog server you have to &lt;span&gt;select&lt;/span&gt;&lt;span&gt; one of these
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; # instances as master. The master will perform some periodical tasks that non-masters won&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t perform.&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; is_master = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt; # The auto-generated node ID will be stored &lt;span&gt;in&lt;/span&gt; this &lt;span&gt;file&lt;/span&gt;&lt;span&gt; and read after restarts. It is a good idea
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; # to use an absolute &lt;span&gt;file&lt;/span&gt; path here &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you are starting Graylog server from init scripts or similar.
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; node_id_file = /etc/graylog/server/node-&lt;span&gt;id&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt; # You MUST set a secret to secure/pepper the stored user passwords here. Use at least &lt;span&gt;64&lt;/span&gt;&lt;span&gt; characters.
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; # Generate one by using &lt;span&gt;for&lt;/span&gt; example: pwgen -N &lt;span&gt;1&lt;/span&gt; -s &lt;span&gt;96&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; password_secret =&lt;span&gt; BjwAAuTEWDQNtAKhUL5lQ3TvW41saWseKpRdTSrecBFifsCJDXak4fudnACBcaMyl0I4yzJDF801Kyasdfsdfasdfasdfasd
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt; # The default root user is named &lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt; root_username =&lt;span&gt; admin
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt; # You MUST specify a hash password &lt;span&gt;for&lt;/span&gt; the root user (&lt;span&gt;which&lt;/span&gt;&lt;span&gt; you only need to initially set up the
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; # system and &lt;span&gt;in&lt;/span&gt; &lt;span&gt;case&lt;/span&gt;&lt;span&gt; you lose connectivity to your authentication backend)
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;# This password cannot be changed using the API or via the web interface. If you need to change it,
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; # modify it &lt;span&gt;in&lt;/span&gt; this &lt;span&gt;file&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; # Create one by using &lt;span&gt;for&lt;/span&gt; example: &lt;span&gt;echo&lt;/span&gt; -n yourpassword | shasum -a &lt;span&gt;256&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;# and put the resulting hash value into the following line
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; root_password_sha2 =&lt;span&gt; 926c00b3f65df24b65a9a7b58a989add920c81441dccd2
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;dsfasdfasdf
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;# The email address of the root user.
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;# Default is empty
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; #root_email = &lt;span&gt;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt; 
&lt;span&gt; 73&lt;/span&gt; # The &lt;span&gt;time&lt;/span&gt; zone setting of the root user. See http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.joda.org/joda-time/timezones.html for a list of valid time zones.&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;# Default is UTC
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; root_timezone = Asia/&lt;span&gt;Shanghai
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; 
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;# Set plugin directory here (relative or absolute)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; plugin_dir = /usr/share/graylog-server/&lt;span&gt;plugin
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt; # REST API listen URI. Must be reachable by other Graylog server nodes &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you run a cluster.
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; # When using Graylog Collectors, this URI will be used to receive heartbeat messages and must be accessible &lt;span&gt;for&lt;/span&gt;&lt;span&gt; all collectors.
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; rest_listen_uri = http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10.2.2.42:9000/api/&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;# REST API transport address. Defaults to the value of rest_listen_uri. Exception: If rest_listen_uri
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; # is set to a wildcard IP address (&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;) the first non-&lt;span&gt;loopback IPv4 system address is used.
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; # If set, this will be promoted &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the cluster discovery APIs, so other nodes may try to connect on
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; # this address and it is used to generate URLs addressing entities &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the REST API. (see rest_listen_uri)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; # You will need to define this, &lt;span&gt;if&lt;/span&gt;&lt;span&gt; your Graylog server is running behind a HTTP proxy that is rewriting
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;# the scheme, host name or URI.
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; # This must not contain a wildcard address (&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;).
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; rest_transport_uri = http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10.2.2.42:9000/api/&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt; # Enable CORS headers &lt;span&gt;for&lt;/span&gt; REST API. This is necessary &lt;span&gt;for&lt;/span&gt; JS-&lt;span&gt;clients accessing the server directly.
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;# If these are disabled, modern browsers will not be able to retrieve resources from the server.
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;# This is enabled by default. Uncomment the next line to disable it.
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; #rest_enable_cors = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt; # Enable GZIP support &lt;span&gt;for&lt;/span&gt;&lt;span&gt; REST API. This compresses API responses and therefore helps to reduce
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;# overall round trip times. This is enabled by default. Uncomment the next line to disable it.
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; #rest_enable_gzip = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt; # Enable HTTPS support &lt;span&gt;for&lt;/span&gt;&lt;span&gt; the REST API. This secures the communication with the REST API with
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;# TLS to prevent request forgery and eavesdropping. This is disabled by default. Uncomment the
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;# next line to enable it.
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; #rest_enable_tls = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; # The X.&lt;span&gt;509&lt;/span&gt; certificate chain &lt;span&gt;file&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; PEM format to use &lt;span&gt;for&lt;/span&gt;&lt;span&gt; securing the REST API.
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; #rest_tls_cert_file = /path/to/&lt;span&gt;graylog.crt
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt; # The PKCS#&lt;span&gt;8&lt;/span&gt; private key &lt;span&gt;file&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; PEM format to use &lt;span&gt;for&lt;/span&gt;&lt;span&gt; securing the REST API.
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; #rest_tls_key_file = /path/to/&lt;span&gt;graylog.key
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt; # The password to unlock the private key used &lt;span&gt;for&lt;/span&gt;&lt;span&gt; securing the REST API.
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; #rest_tls_key_password =&lt;span&gt; secret
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt; # The maximum size of the HTTP request headers &lt;span&gt;in&lt;/span&gt;&lt;span&gt; bytes.
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; #rest_max_header_size = &lt;span&gt;8192&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt; # The maximal length of the initial HTTP/&lt;span&gt;1.1&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; bytes.
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; #rest_max_initial_line_length = &lt;span&gt;4096&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; 
&lt;span&gt;122&lt;/span&gt; # The size of the thread pool used exclusively &lt;span&gt;for&lt;/span&gt;&lt;span&gt; serving the REST API.
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; #rest_thread_pool_size = &lt;span&gt;16&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt; # Comma separated list of trusted proxies that are allowed to set the client address with X-Forwarded-&lt;span&gt;For
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;# header. May be subnets, or hosts.
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; #trusted_proxies = &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;/&lt;span&gt;32&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;/&lt;span&gt;128&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;# Enable the embedded Graylog web interface.
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; # Default: &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; web_enable = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt; 
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;# Web interface listen URI.
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; # Configuring a path &lt;span&gt;for&lt;/span&gt; the URI here effectively prefixes all URIs &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the web interface. This is a replacement
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; # &lt;span&gt;for&lt;/span&gt; the application.context configuration parameter &lt;span&gt;in&lt;/span&gt; pre-&lt;span&gt;2.0&lt;/span&gt;&lt;span&gt; versions of the Graylog web interface.
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; web_listen_uri = http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10.2.2.42:9000/&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt; 
&lt;span&gt;138&lt;/span&gt; # Web interface endpoint URI. This setting can be overriden on a per-request basis with the X-Graylog-Server-&lt;span&gt;URL header.
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;# Default: $rest_transport_uri
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; web_endpoint_uri = http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;42.111.111.111:9000/api&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; 
&lt;span&gt;142&lt;/span&gt; # Enable CORS headers &lt;span&gt;for&lt;/span&gt; the web interface. This is necessary &lt;span&gt;for&lt;/span&gt; JS-&lt;span&gt;clients accessing the server directly.
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;# If these are disabled, modern browsers will not be able to retrieve resources from the server.
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; web_enable_cors = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt; # Enable/disable GZIP support &lt;span&gt;for&lt;/span&gt;&lt;span&gt; the web interface. This compresses HTTP responses and therefore helps to reduce
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;# overall round trip times. This is enabled by default. Uncomment the next line to disable it.
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; #web_enable_gzip = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt; 
&lt;span&gt;150&lt;/span&gt; # Enable HTTPS support &lt;span&gt;for&lt;/span&gt;&lt;span&gt; the web interface. This secures the communication of the web browser with the web interface
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;# using TLS to prevent request forgery and eavesdropping.
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;# This is disabled by default. Uncomment the next line to enable it and see the other related configuration settings.
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; #web_enable_tls = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt; 
&lt;span&gt;155&lt;/span&gt; # The X.&lt;span&gt;509&lt;/span&gt; certificate chain &lt;span&gt;file&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; PEM format to use &lt;span&gt;for&lt;/span&gt;&lt;span&gt; securing the web interface.
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; #web_tls_cert_file = /path/to/graylog-&lt;span&gt;web.crt
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; 
&lt;span&gt;158&lt;/span&gt; # The PKCS#&lt;span&gt;8&lt;/span&gt; private key &lt;span&gt;file&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; PEM format to use &lt;span&gt;for&lt;/span&gt;&lt;span&gt; securing the web interface.
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; #web_tls_key_file = /path/to/graylog-&lt;span&gt;web.key
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; 
&lt;span&gt;161&lt;/span&gt; # The password to unlock the private key used &lt;span&gt;for&lt;/span&gt;&lt;span&gt; securing the web interface.
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; #web_tls_key_password =&lt;span&gt; secret
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; 
&lt;span&gt;164&lt;/span&gt; # The maximum size of the HTTP request headers &lt;span&gt;in&lt;/span&gt;&lt;span&gt; bytes.
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; #web_max_header_size = &lt;span&gt;8192&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt; 
&lt;span&gt;167&lt;/span&gt; # The maximal length of the initial HTTP/&lt;span&gt;1.1&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; bytes.
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; #web_max_initial_line_length = &lt;span&gt;4096&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt; 
&lt;span&gt;170&lt;/span&gt; # The size of the thread pool used exclusively &lt;span&gt;for&lt;/span&gt;&lt;span&gt; serving the web interface.
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; #web_thread_pool_size = &lt;span&gt;16&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt; 
&lt;span&gt;173&lt;/span&gt; &lt;span&gt;# List of Elasticsearch hosts Graylog should connect to.
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; # Need to be specified as a comma-separated list of valid URIs &lt;span&gt;for&lt;/span&gt;&lt;span&gt; the http ports of your elasticsearch nodes.
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; # If one or &lt;span&gt;more&lt;/span&gt; of your elasticsearch hosts require authentication, include the credentials &lt;span&gt;in&lt;/span&gt;&lt;span&gt; each node URI that
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;# requires authentication.
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; # Default: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:9200&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt; elasticsearch_hosts = http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;grayloguser:3KKLg8294CE0@10.2.2.41:9200,&lt;/span&gt;&lt;span&gt;http://grayloguser&lt;/span&gt;&lt;span&gt;:3KKLg8294CE0@10.2.2.42:9200,&lt;/span&gt;&lt;span&gt;http://grayloguser&lt;/span&gt;&lt;span&gt;:3KKLg8294CE0@10.2.2.43:9200&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt; 
&lt;span&gt;181&lt;/span&gt; # Maximum amount of &lt;span&gt;time&lt;/span&gt; to &lt;span&gt;wait&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; successfull connection to Elasticsearch HTTP port.
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; # Default: &lt;span&gt;10&lt;/span&gt;&lt;span&gt; Seconds
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; #elasticsearch_connect_timeout =&lt;span&gt; 10s
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; 
&lt;span&gt;186&lt;/span&gt; # Maximum amount of &lt;span&gt;time&lt;/span&gt; to &lt;span&gt;wait&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; reading back a response from an Elasticsearch server.
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt; # Default: &lt;span&gt;60&lt;/span&gt;&lt;span&gt; seconds
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt; #elasticsearch_socket_timeout =&lt;span&gt; 60s
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; 
&lt;span&gt;191&lt;/span&gt; # Maximum idle &lt;span&gt;time&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; an Elasticsearch connection. If this is exceeded, this connection will
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;# be tore down.
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;# Default: inf
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; #elasticsearch_idle_timeout = -&lt;span&gt;1s
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; 
&lt;span&gt;197&lt;/span&gt; &lt;span&gt;# Maximum number of total connections to Elasticsearch.
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; # Default: &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;200&lt;/span&gt; #elasticsearch_max_total_connections = &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt; 
&lt;span&gt;202&lt;/span&gt; &lt;span&gt;# Maximum number of total connections per Elasticsearch route (normally this means per
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt; &lt;span&gt;# elasticsearch server).
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; # Default: &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt; #elasticsearch_max_total_connections_per_route = &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;207&lt;/span&gt; 
&lt;span&gt;208&lt;/span&gt; &lt;span&gt;# Maximum number of times Graylog will retry failed requests to Elasticsearch.
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; # Default: &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;211&lt;/span&gt; #elasticsearch_max_retries = &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;212&lt;/span&gt; 
&lt;span&gt;213&lt;/span&gt; &lt;span&gt;# Enable automatic Elasticsearch node discovery through Nodes Info,
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; # see https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster-nodes-info.html&lt;/span&gt;
&lt;span&gt;215&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; # WARNING: Automatic node discovery does not work &lt;span&gt;if&lt;/span&gt;&lt;span&gt; Elasticsearch requires authentication, e. g. with Shield.
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; # Default: &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;219&lt;/span&gt; #elasticsearch_discovery_enabled = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;220&lt;/span&gt; 
&lt;span&gt;221&lt;/span&gt; # Filter &lt;span&gt;for&lt;/span&gt; including/excluding Elasticsearch nodes &lt;span&gt;in&lt;/span&gt;&lt;span&gt; discovery according to their custom attributes,
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; # see https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.elastic.co/guide/en/elasticsearch/reference/5.4/cluster.html#cluster-nodes&lt;/span&gt;
&lt;span&gt;223&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt; &lt;span&gt;# Default: empty
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; #elasticsearch_discovery_filter = rack:&lt;span&gt;42&lt;/span&gt;
&lt;span&gt;226&lt;/span&gt; 
&lt;span&gt;227&lt;/span&gt; &lt;span&gt;# Frequency of the Elasticsearch node discovery.
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt; &lt;span&gt;# Default: 30s
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; # elasticsearch_discovery_frequency =&lt;span&gt; 30s
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; 
&lt;span&gt;232&lt;/span&gt; # Enable payload compression &lt;span&gt;for&lt;/span&gt;&lt;span&gt; Elasticsearch requests.
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; # Default: &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt; #elasticsearch_compression_enabled = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;236&lt;/span&gt; 
&lt;span&gt;237&lt;/span&gt; # Graylog will use multiple indices to store documents &lt;span&gt;in&lt;/span&gt;&lt;span&gt;. You can configured the strategy it uses to determine
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; # when to rotate the currently active &lt;span&gt;write&lt;/span&gt;&lt;span&gt; index.
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; &lt;span&gt;# It supports multiple rotation strategies:
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt; #   - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; of messages per index, use elasticsearch_max_docs_per_index below to configure
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; #   - &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; per index, use elasticsearch_max_size_per_index below to configure
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; # valid values are &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; and &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, default is &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;243&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; &lt;span&gt;2.0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; #            to your previous &lt;span&gt;1&lt;/span&gt;.x settings so they will be migrated to the database!
&lt;span&gt;246&lt;/span&gt; rotation_strategy =&lt;span&gt; count
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt; 
&lt;span&gt;248&lt;/span&gt; # (Approximate) maximum number of documents &lt;span&gt;in&lt;/span&gt;&lt;span&gt; an Elasticsearch index before a new index
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt; &lt;span&gt;# is being created, also see no_retention and elasticsearch_max_number_of_indices.
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; # Configure this &lt;span&gt;if&lt;/span&gt; you used &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rotation_strategy = count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; above.
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; &lt;span&gt;2.0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt; #            to your previous &lt;span&gt;1&lt;/span&gt;.x settings so they will be migrated to the database!
&lt;span&gt;254&lt;/span&gt; elasticsearch_max_docs_per_index = &lt;span&gt;20000000&lt;/span&gt;
&lt;span&gt;255&lt;/span&gt; 
&lt;span&gt;256&lt;/span&gt; # (Approximate) maximum size &lt;span&gt;in&lt;/span&gt;&lt;span&gt; bytes per Elasticsearch index on disk before a new index is being created, also see
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; &lt;span&gt;# no_retention and elasticsearch_max_number_of_indices. Default is 1GB.
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt; # Configure this &lt;span&gt;if&lt;/span&gt; you used &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rotation_strategy = size&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; above.
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; &lt;span&gt;2.0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; #            to your previous &lt;span&gt;1&lt;/span&gt;.x settings so they will be migrated to the database!
&lt;span&gt;262&lt;/span&gt; #elasticsearch_max_size_per_index = &lt;span&gt;1073741824&lt;/span&gt;
&lt;span&gt;263&lt;/span&gt; 
&lt;span&gt;264&lt;/span&gt; # (Approximate) maximum &lt;span&gt;time&lt;/span&gt;&lt;span&gt; before a new Elasticsearch index is being created, also see
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt; # no_retention and elasticsearch_max_number_of_indices. Default is &lt;span&gt;1&lt;/span&gt;&lt;span&gt; day.
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt; # Configure this &lt;span&gt;if&lt;/span&gt; you used &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rotation_strategy = time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; above.
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt; # Please note that this rotation period does not look at the &lt;span&gt;time&lt;/span&gt; specified &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the received messages, but is
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt; # using the real clock value to decide when to rotate the index!
&lt;span&gt;269&lt;/span&gt; # Specify the &lt;span&gt;time&lt;/span&gt; using a duration and a suffix indicating &lt;span&gt;which&lt;/span&gt;&lt;span&gt; unit you want:
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt; #  1&lt;span&gt;w&lt;/span&gt;  = &lt;span&gt;1&lt;/span&gt;&lt;span&gt; week
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt; #  1d  = &lt;span&gt;1&lt;/span&gt;&lt;span&gt; day
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt; #  12h = &lt;span&gt;12&lt;/span&gt;&lt;span&gt; hours
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt; # Permitted suffixes are: d &lt;span&gt;for&lt;/span&gt; day, h &lt;span&gt;for&lt;/span&gt; hour, m &lt;span&gt;for&lt;/span&gt; minute, s &lt;span&gt;for&lt;/span&gt;&lt;span&gt; second.
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; &lt;span&gt;2.0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt; #            to your previous &lt;span&gt;1&lt;/span&gt;.x settings so they will be migrated to the database!
&lt;span&gt;277&lt;/span&gt; #elasticsearch_max_time_per_index =&lt;span&gt; 1d
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt; 
&lt;span&gt;279&lt;/span&gt; # Disable checking the version of Elasticsearch &lt;span&gt;for&lt;/span&gt;&lt;span&gt; being compatible with this Graylog release.
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt; # WARNING: Using Graylog with unsupported and untested versions of Elasticsearch may lead to data loss!
&lt;span&gt;281&lt;/span&gt; #elasticsearch_disable_version_check = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;282&lt;/span&gt; 
&lt;span&gt;283&lt;/span&gt; &lt;span&gt;# Disable message retention on this node, i. e. disable Elasticsearch index rotation.
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt; #no_retention = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;285&lt;/span&gt; 
&lt;span&gt;286&lt;/span&gt; # How many indices &lt;span&gt;do&lt;/span&gt; you want to keep?
&lt;span&gt;287&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; &lt;span&gt;2.0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;289&lt;/span&gt; #            to your previous &lt;span&gt;1&lt;/span&gt;.x settings so they will be migrated to the database!
&lt;span&gt;290&lt;/span&gt; elasticsearch_max_number_of_indices = &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;291&lt;/span&gt; 
&lt;span&gt;292&lt;/span&gt; &lt;span&gt;# Decide what happens with the oldest indices when the maximum number of indices is reached.
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt; &lt;span&gt;# The following strategies are availble:
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt; #   -&lt;span&gt; delete # Deletes the index completely (Default)
&lt;/span&gt;&lt;span&gt;295&lt;/span&gt; #   - close # Closes the index and hides it from the system. Can be re-&lt;span&gt;opened later.
&lt;/span&gt;&lt;span&gt;296&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; &lt;span&gt;2.0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt; #            to your previous &lt;span&gt;1&lt;/span&gt;.x settings so they will be migrated to the database!
&lt;span&gt;299&lt;/span&gt; retention_strategy =&lt;span&gt; delete
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt; 
&lt;span&gt;301&lt;/span&gt; # How many Elasticsearch shards and replicas should be used per index?&lt;span&gt; Note that this only applies to newly created indices.
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; Graylog &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt; #            to your previous settings so they will be migrated to the database!
&lt;span&gt;304&lt;/span&gt; elasticsearch_shards = &lt;span&gt;3&lt;/span&gt;
&lt;span&gt;305&lt;/span&gt; elasticsearch_replicas = &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;306&lt;/span&gt; 
&lt;span&gt;307&lt;/span&gt; # Prefix &lt;span&gt;for&lt;/span&gt;&lt;span&gt; all Elasticsearch indices and index aliases managed by Graylog.
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;309&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; Graylog &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt; #            to your previous settings so they will be migrated to the database!
&lt;span&gt;311&lt;/span&gt; elasticsearch_index_prefix =&lt;span&gt; graylog
&lt;/span&gt;&lt;span&gt;312&lt;/span&gt; 
&lt;span&gt;313&lt;/span&gt; &lt;span&gt;# Name of the Elasticsearch index template used by Graylog to apply the mandatory index mapping.
&lt;/span&gt;&lt;span&gt;314&lt;/span&gt; # Default: graylog-&lt;span&gt;internal
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;316&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; Graylog &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt; #            to your previous settings so they will be migrated to the database!
&lt;span&gt;318&lt;/span&gt; #elasticsearch_template_name = graylog-&lt;span&gt;internal
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt; 
&lt;span&gt;320&lt;/span&gt; # Do you want to allow searches with leading wildcards?&lt;span&gt; This can be extremely resource hungry and should only
&lt;/span&gt;&lt;span&gt;321&lt;/span&gt; # be enabled with care. See also: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;docs.graylog.org/en/2.1/pages/queries.html&lt;/span&gt;
&lt;span&gt;322&lt;/span&gt; allow_leading_wildcard_searches = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;323&lt;/span&gt; 
&lt;span&gt;324&lt;/span&gt; # Do you want to allow searches to be highlighted?&lt;span&gt; Depending on the size of your messages this can be memory hungry and
&lt;/span&gt;&lt;span&gt;325&lt;/span&gt; &lt;span&gt;# should only be enabled after making sure your Elasticsearch cluster has enough memory.
&lt;/span&gt;&lt;span&gt;326&lt;/span&gt; allow_highlighting = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;327&lt;/span&gt; 
&lt;span&gt;328&lt;/span&gt; # Analyzer (tokenizer) to use &lt;span&gt;for&lt;/span&gt; message and full_message field. The &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; filter usually is a good idea.
&lt;/span&gt;&lt;span&gt;329&lt;/span&gt; &lt;span&gt;# All supported analyzers are: standard, simple, whitespace, stop, keyword, pattern, language, snowball, custom
&lt;/span&gt;&lt;span&gt;330&lt;/span&gt; # Elasticsearch documentation: https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.elastic.co/guide/en/elasticsearch/reference/2.3/analysis.html&lt;/span&gt;
&lt;span&gt;331&lt;/span&gt; &lt;span&gt;# Note that this setting only takes effect on newly created indices.
&lt;/span&gt;&lt;span&gt;332&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;333&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; Graylog &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;334&lt;/span&gt; #            to your previous settings so they will be migrated to the database!
&lt;span&gt;335&lt;/span&gt; elasticsearch_analyzer =&lt;span&gt; standard
&lt;/span&gt;&lt;span&gt;336&lt;/span&gt; 
&lt;span&gt;337&lt;/span&gt; # Global request timeout &lt;span&gt;for&lt;/span&gt; Elasticsearch requests (e. g. during search, index creation, or index &lt;span&gt;time&lt;/span&gt;-&lt;span&gt;range
&lt;/span&gt;&lt;span&gt;338&lt;/span&gt; # calculations) based on a best-&lt;span&gt;effort to restrict the runtime of Elasticsearch operations.
&lt;/span&gt;&lt;span&gt;339&lt;/span&gt; &lt;span&gt;# Default: 1m
&lt;/span&gt;&lt;span&gt;340&lt;/span&gt; #elasticsearch_request_timeout =&lt;span&gt; 1m
&lt;/span&gt;&lt;span&gt;341&lt;/span&gt; 
&lt;span&gt;342&lt;/span&gt; # Global timeout &lt;span&gt;for&lt;/span&gt;&lt;span&gt; index optimization (force merge) requests.
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt; &lt;span&gt;# Default: 1h
&lt;/span&gt;&lt;span&gt;344&lt;/span&gt; #elasticsearch_index_optimization_timeout =&lt;span&gt; 1h
&lt;/span&gt;&lt;span&gt;345&lt;/span&gt; 
&lt;span&gt;346&lt;/span&gt; &lt;span&gt;# Maximum number of concurrently running index optimization (force merge) jobs.
&lt;/span&gt;&lt;span&gt;347&lt;/span&gt; &lt;span&gt;# If you are using lots of different index sets, you might want to increase that number.
&lt;/span&gt;&lt;span&gt;348&lt;/span&gt; # Default: &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;349&lt;/span&gt; #elasticsearch_index_optimization_jobs = &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;350&lt;/span&gt; 
&lt;span&gt;351&lt;/span&gt; # Time interval &lt;span&gt;for&lt;/span&gt;&lt;span&gt; index range information cleanups. This setting defines how often stale index range information
&lt;/span&gt;&lt;span&gt;352&lt;/span&gt; &lt;span&gt;# is being purged from the database.
&lt;/span&gt;&lt;span&gt;353&lt;/span&gt; &lt;span&gt;# Default: 1h
&lt;/span&gt;&lt;span&gt;354&lt;/span&gt; #index_ranges_cleanup_interval =&lt;span&gt; 1h
&lt;/span&gt;&lt;span&gt;355&lt;/span&gt; 
&lt;span&gt;356&lt;/span&gt; # Batch size &lt;span&gt;for&lt;/span&gt; the Elasticsearch output. This is the maximum (!&lt;span&gt;) number of messages the Elasticsearch output
&lt;/span&gt;&lt;span&gt;357&lt;/span&gt; # module will get at once and &lt;span&gt;write&lt;/span&gt; to Elasticsearch &lt;span&gt;in&lt;/span&gt;&lt;span&gt; a batch call. If the configured batch size has not been
&lt;/span&gt;&lt;span&gt;358&lt;/span&gt; &lt;span&gt;# reached within output_flush_interval seconds, everything that is available will be flushed at once. Remember
&lt;/span&gt;&lt;span&gt;359&lt;/span&gt; # that every outputbuffer processor manages its own batch and performs its own batch &lt;span&gt;write&lt;/span&gt;&lt;span&gt; calls.
&lt;/span&gt;&lt;span&gt;360&lt;/span&gt; # (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outputbuffer_processors&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; variable)
&lt;/span&gt;&lt;span&gt;361&lt;/span&gt; output_batch_size = &lt;span&gt;500&lt;/span&gt;
&lt;span&gt;362&lt;/span&gt; 
&lt;span&gt;363&lt;/span&gt; # Flush interval (&lt;span&gt;in&lt;/span&gt; seconds) &lt;span&gt;for&lt;/span&gt; the Elasticsearch output. This is the maximum amount of &lt;span&gt;time&lt;/span&gt;&lt;span&gt; between two
&lt;/span&gt;&lt;span&gt;364&lt;/span&gt; # batches of messages written to Elasticsearch. It is only effective at all &lt;span&gt;if&lt;/span&gt;&lt;span&gt; your minimum number of messages
&lt;/span&gt;&lt;span&gt;365&lt;/span&gt; # &lt;span&gt;for&lt;/span&gt; this &lt;span&gt;time&lt;/span&gt; period is &lt;span&gt;less&lt;/span&gt; than output_batch_size *&lt;span&gt; outputbuffer_processors.
&lt;/span&gt;&lt;span&gt;366&lt;/span&gt; output_flush_interval = &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;367&lt;/span&gt; 
&lt;span&gt;368&lt;/span&gt; # As stream outputs are loaded only on demand, an output &lt;span&gt;which&lt;/span&gt;&lt;span&gt; is failing to initialize will be tried over and
&lt;/span&gt;&lt;span&gt;369&lt;/span&gt; &lt;span&gt;# over again. To prevent this, the following configuration options define after how many faults an output will
&lt;/span&gt;&lt;span&gt;370&lt;/span&gt; # not be tried again &lt;span&gt;for&lt;/span&gt;&lt;span&gt; an also configurable amount of seconds.
&lt;/span&gt;&lt;span&gt;371&lt;/span&gt; output_fault_count_threshold = &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;372&lt;/span&gt; output_fault_penalty_seconds = &lt;span&gt;30&lt;/span&gt;
&lt;span&gt;373&lt;/span&gt; 
&lt;span&gt;374&lt;/span&gt; &lt;span&gt;# The number of parallel running processors.
&lt;/span&gt;&lt;span&gt;375&lt;/span&gt; # Raise this number &lt;span&gt;if&lt;/span&gt;&lt;span&gt; your buffers are filling up.
&lt;/span&gt;&lt;span&gt;376&lt;/span&gt; processbuffer_processors = &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;377&lt;/span&gt; outputbuffer_processors = &lt;span&gt;3&lt;/span&gt;
&lt;span&gt;378&lt;/span&gt; 
&lt;span&gt;379&lt;/span&gt; #outputbuffer_processor_keep_alive_time = &lt;span&gt;5000&lt;/span&gt;
&lt;span&gt;380&lt;/span&gt; #outputbuffer_processor_threads_core_pool_size = &lt;span&gt;3&lt;/span&gt;
&lt;span&gt;381&lt;/span&gt; #outputbuffer_processor_threads_max_pool_size = &lt;span&gt;30&lt;/span&gt;
&lt;span&gt;382&lt;/span&gt; 
&lt;span&gt;383&lt;/span&gt; # UDP receive buffer size &lt;span&gt;for&lt;/span&gt;&lt;span&gt; all message inputs (e. g. SyslogUDPInput).
&lt;/span&gt;&lt;span&gt;384&lt;/span&gt; #udp_recvbuffer_sizes = &lt;span&gt;1048576&lt;/span&gt;
&lt;span&gt;385&lt;/span&gt; 
&lt;span&gt;386&lt;/span&gt; # Wait strategy describing how buffer processors &lt;span&gt;wait&lt;/span&gt;&lt;span&gt; on a cursor sequence. (default: sleeping)
&lt;/span&gt;&lt;span&gt;387&lt;/span&gt; &lt;span&gt;# Possible types:
&lt;/span&gt;&lt;span&gt;388&lt;/span&gt; #  -&lt;span&gt; yielding
&lt;/span&gt;&lt;span&gt;389&lt;/span&gt; &lt;span&gt;#     Compromise between performance and CPU usage.
&lt;/span&gt;&lt;span&gt;390&lt;/span&gt; #  -&lt;span&gt; sleeping
&lt;/span&gt;&lt;span&gt;391&lt;/span&gt; &lt;span&gt;#     Compromise between performance and CPU usage. Latency spikes can occur after quiet periods.
&lt;/span&gt;&lt;span&gt;392&lt;/span&gt; #  -&lt;span&gt; blocking
&lt;/span&gt;&lt;span&gt;393&lt;/span&gt; &lt;span&gt;#     High throughput, low latency, higher CPU usage.
&lt;/span&gt;&lt;span&gt;394&lt;/span&gt; #  -&lt;span&gt; busy_spinning
&lt;/span&gt;&lt;span&gt;395&lt;/span&gt; #     Avoids syscalls &lt;span&gt;which&lt;/span&gt;&lt;span&gt; could introduce latency jitter. Best when threads can be bound to specific CPU cores.
&lt;/span&gt;&lt;span&gt;396&lt;/span&gt; processor_wait_strategy =&lt;span&gt; blocking
&lt;/span&gt;&lt;span&gt;397&lt;/span&gt; 
&lt;span&gt;398&lt;/span&gt; # Size of internal ring buffers. Raise this &lt;span&gt;if&lt;/span&gt;&lt;span&gt; raising outputbuffer_processors does not help anymore.
&lt;/span&gt;&lt;span&gt;399&lt;/span&gt; # For optimum performance your LogMessage objects &lt;span&gt;in&lt;/span&gt; the ring buffer should fit &lt;span&gt;in&lt;/span&gt;&lt;span&gt; your CPU L3 cache.
&lt;/span&gt;&lt;span&gt;400&lt;/span&gt; # Must be a power of &lt;span&gt;2&lt;/span&gt;. (&lt;span&gt;512&lt;/span&gt;, &lt;span&gt;1024&lt;/span&gt;, &lt;span&gt;2048&lt;/span&gt;&lt;span&gt;, ...)
&lt;/span&gt;&lt;span&gt;401&lt;/span&gt; ring_size = &lt;span&gt;65536&lt;/span&gt;
&lt;span&gt;402&lt;/span&gt; 
&lt;span&gt;403&lt;/span&gt; inputbuffer_ring_size = &lt;span&gt;65536&lt;/span&gt;
&lt;span&gt;404&lt;/span&gt; inputbuffer_processors = &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;405&lt;/span&gt; inputbuffer_wait_strategy =&lt;span&gt; blocking
&lt;/span&gt;&lt;span&gt;406&lt;/span&gt; 
&lt;span&gt;407&lt;/span&gt; &lt;span&gt;# Enable the disk based message journal.
&lt;/span&gt;&lt;span&gt;408&lt;/span&gt; message_journal_enabled = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;409&lt;/span&gt; 
&lt;span&gt;410&lt;/span&gt; # The directory &lt;span&gt;which&lt;/span&gt;&lt;span&gt; will be used to store the message journal. The directory must me exclusively used by Graylog and
&lt;/span&gt;&lt;span&gt;411&lt;/span&gt; &lt;span&gt;# must not contain any other files than the ones created by Graylog itself.
&lt;/span&gt;&lt;span&gt;412&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;413&lt;/span&gt; &lt;span&gt;# ATTENTION:
&lt;/span&gt;&lt;span&gt;414&lt;/span&gt; #   If you create a seperate partition &lt;span&gt;for&lt;/span&gt; the journal files and use a &lt;span&gt;file&lt;/span&gt; system creating directories like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lost+found&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;415&lt;/span&gt; #   &lt;span&gt;in&lt;/span&gt; the root directory, you need to create a sub directory &lt;span&gt;for&lt;/span&gt;&lt;span&gt; your journal.
&lt;/span&gt;&lt;span&gt;416&lt;/span&gt; &lt;span&gt;#   Otherwise Graylog will log an error message that the journal is corrupt and Graylog will not start.
&lt;/span&gt;&lt;span&gt;417&lt;/span&gt; message_journal_dir = /var/lib/graylog-server/&lt;span&gt;journal
&lt;/span&gt;&lt;span&gt;418&lt;/span&gt; 
&lt;span&gt;419&lt;/span&gt; &lt;span&gt;# Journal hold messages before they could be written to Elasticsearch.
&lt;/span&gt;&lt;span&gt;420&lt;/span&gt; # For a maximum of &lt;span&gt;12&lt;/span&gt; hours or &lt;span&gt;5&lt;/span&gt;&lt;span&gt; GB whichever happens first.
&lt;/span&gt;&lt;span&gt;421&lt;/span&gt; &lt;span&gt;# During normal operation the journal will be smaller.
&lt;/span&gt;&lt;span&gt;422&lt;/span&gt; #message_journal_max_age =&lt;span&gt; 12h
&lt;/span&gt;&lt;span&gt;423&lt;/span&gt; #message_journal_max_size =&lt;span&gt; 5gb
&lt;/span&gt;&lt;span&gt;424&lt;/span&gt; 
&lt;span&gt;425&lt;/span&gt; #message_journal_flush_age =&lt;span&gt; 1m
&lt;/span&gt;&lt;span&gt;426&lt;/span&gt; #message_journal_flush_interval = &lt;span&gt;1000000&lt;/span&gt;
&lt;span&gt;427&lt;/span&gt; #message_journal_segment_age =&lt;span&gt; 1h
&lt;/span&gt;&lt;span&gt;428&lt;/span&gt; #message_journal_segment_size =&lt;span&gt; 100mb
&lt;/span&gt;&lt;span&gt;429&lt;/span&gt; 
&lt;span&gt;430&lt;/span&gt; # Number of threads used exclusively &lt;span&gt;for&lt;/span&gt; dispatching internal events. Default is &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&lt;span&gt;431&lt;/span&gt; #async_eventbus_processors = &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;432&lt;/span&gt; 
&lt;span&gt;433&lt;/span&gt; # How many seconds to &lt;span&gt;wait&lt;/span&gt; between marking node as DEAD &lt;span&gt;for&lt;/span&gt;&lt;span&gt; possible load balancers and starting the actual
&lt;/span&gt;&lt;span&gt;434&lt;/span&gt; # shutdown process. Set to &lt;span&gt;0&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; you have no status checking load balancers &lt;span&gt;in&lt;/span&gt;&lt;span&gt; front.
&lt;/span&gt;&lt;span&gt;435&lt;/span&gt; lb_recognition_period_seconds = &lt;span&gt;3&lt;/span&gt;
&lt;span&gt;436&lt;/span&gt; 
&lt;span&gt;437&lt;/span&gt; # Journal usage percentage that triggers requesting throttling &lt;span&gt;for&lt;/span&gt;&lt;span&gt; this server node from load balancers. The feature is
&lt;/span&gt;&lt;span&gt;438&lt;/span&gt; # disabled &lt;span&gt;if&lt;/span&gt;&lt;span&gt; not set.
&lt;/span&gt;&lt;span&gt;439&lt;/span&gt; #lb_throttle_threshold_percentage = &lt;span&gt;95&lt;/span&gt;
&lt;span&gt;440&lt;/span&gt; 
&lt;span&gt;441&lt;/span&gt; # Every message is matched against the configured streams and it can happen that a stream contains rules &lt;span&gt;which&lt;/span&gt;
&lt;span&gt;442&lt;/span&gt; # take an unusual amount of &lt;span&gt;time&lt;/span&gt; to run, &lt;span&gt;for&lt;/span&gt; example &lt;span&gt;if&lt;/span&gt;&lt;span&gt; its using regular expressions that perform excessive backtracking.
&lt;/span&gt;&lt;span&gt;443&lt;/span&gt; &lt;span&gt;# This will impact the processing of the entire server. To keep such misbehaving stream rules from impacting other
&lt;/span&gt;&lt;span&gt;444&lt;/span&gt; # streams, Graylog limits the execution &lt;span&gt;time&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; each stream.
&lt;/span&gt;&lt;span&gt;445&lt;/span&gt; # The default values are noted below, the timeout is &lt;span&gt;in&lt;/span&gt;&lt;span&gt; milliseconds.
&lt;/span&gt;&lt;span&gt;446&lt;/span&gt; # If the stream matching &lt;span&gt;for&lt;/span&gt; one stream took longer than the timeout value, and this happened &lt;span&gt;more&lt;/span&gt; than &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;max_faults&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; times
&lt;/span&gt;&lt;span&gt;447&lt;/span&gt; # that stream is disabled and a notification is shown &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the web interface.
&lt;/span&gt;&lt;span&gt;448&lt;/span&gt; #stream_processing_timeout = &lt;span&gt;2000&lt;/span&gt;
&lt;span&gt;449&lt;/span&gt; #stream_processing_max_faults = &lt;span&gt;3&lt;/span&gt;
&lt;span&gt;450&lt;/span&gt; 
&lt;span&gt;451&lt;/span&gt; # Length of the interval &lt;span&gt;in&lt;/span&gt; seconds &lt;span&gt;in&lt;/span&gt; &lt;span&gt;which&lt;/span&gt; the alert conditions &lt;span&gt;for&lt;/span&gt;&lt;span&gt; all streams should be checked
&lt;/span&gt;&lt;span&gt;452&lt;/span&gt; &lt;span&gt;# and alarms are being sent.
&lt;/span&gt;&lt;span&gt;453&lt;/span&gt; #alert_check_interval = &lt;span&gt;60&lt;/span&gt;
&lt;span&gt;454&lt;/span&gt; 
&lt;span&gt;455&lt;/span&gt; # Since &lt;span&gt;0.21&lt;/span&gt;&lt;span&gt; the Graylog server supports pluggable output modules. This means a single message can be written to multiple
&lt;/span&gt;&lt;span&gt;456&lt;/span&gt; # outputs. The next setting defines the timeout &lt;span&gt;for&lt;/span&gt;&lt;span&gt; a single output module, including the default output module where all
&lt;/span&gt;&lt;span&gt;457&lt;/span&gt; &lt;span&gt;# messages end up.
&lt;/span&gt;&lt;span&gt;458&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;459&lt;/span&gt; # Time &lt;span&gt;in&lt;/span&gt; milliseconds to &lt;span&gt;wait&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; all message outputs to finish writing a single message.
&lt;/span&gt;&lt;span&gt;460&lt;/span&gt; #output_module_timeout = &lt;span&gt;10000&lt;/span&gt;
&lt;span&gt;461&lt;/span&gt; 
&lt;span&gt;462&lt;/span&gt; # Time &lt;span&gt;in&lt;/span&gt; milliseconds after &lt;span&gt;which&lt;/span&gt;&lt;span&gt; a detected stale master node is being rechecked on startup.
&lt;/span&gt;&lt;span&gt;463&lt;/span&gt; #stale_master_timeout = &lt;span&gt;2000&lt;/span&gt;
&lt;span&gt;464&lt;/span&gt; 
&lt;span&gt;465&lt;/span&gt; # Time &lt;span&gt;in&lt;/span&gt; milliseconds &lt;span&gt;which&lt;/span&gt; Graylog is waiting &lt;span&gt;for&lt;/span&gt;&lt;span&gt; all threads to stop on shutdown.
&lt;/span&gt;&lt;span&gt;466&lt;/span&gt; #shutdown_timeout = &lt;span&gt;30000&lt;/span&gt;
&lt;span&gt;467&lt;/span&gt; 
&lt;span&gt;468&lt;/span&gt; # MongoDB connection &lt;span&gt;string&lt;/span&gt;
&lt;span&gt;469&lt;/span&gt; # See https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;docs.mongodb.com/manual/reference/connection-string/ for details&lt;/span&gt;
&lt;span&gt;470&lt;/span&gt; mongodb_uri = mongodb:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;graylog:75PN76Db66En@10.2.2.41:27017,10.2.2.42:27017,10.2.2.43:27017/graylog?replicaSet=rs0&lt;/span&gt;
&lt;span&gt;471&lt;/span&gt; 
&lt;span&gt;472&lt;/span&gt; &lt;span&gt;# Authenticate against the MongoDB server
&lt;/span&gt;&lt;span&gt;473&lt;/span&gt; #mongodb_uri = mongodb:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;grayloguser:secret@localhost:27017/graylog&lt;/span&gt;
&lt;span&gt;474&lt;/span&gt; 
&lt;span&gt;475&lt;/span&gt; &lt;span&gt;# Use a replica set instead of a single host
&lt;/span&gt;&lt;span&gt;476&lt;/span&gt; #mongodb_uri = mongodb:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;grayloguser:secret@localhost:27017,localhost:27018,localhost:27019/graylog&lt;/span&gt;
&lt;span&gt;477&lt;/span&gt; 
&lt;span&gt;478&lt;/span&gt; &lt;span&gt;# Increase this value according to the maximum connections your MongoDB server can handle from a single client
&lt;/span&gt;&lt;span&gt;479&lt;/span&gt; # &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you encounter MongoDB connection problems.
&lt;/span&gt;&lt;span&gt;480&lt;/span&gt; mongodb_max_connections = &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;481&lt;/span&gt; 
&lt;span&gt;482&lt;/span&gt; # Number of threads allowed to be blocked by MongoDB connections multiplier. Default: &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;483&lt;/span&gt; # If mongodb_max_connections is &lt;span&gt;100&lt;/span&gt;, and mongodb_threads_allowed_to_block_multiplier is &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;484&lt;/span&gt; # &lt;span&gt;then&lt;/span&gt; &lt;span&gt;500&lt;/span&gt;&lt;span&gt; threads can block. More than that and an exception will be thrown.
&lt;/span&gt;&lt;span&gt;485&lt;/span&gt; # http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;api.mongodb.com/java/current/com/mongodb/MongoOptions.html#threadsAllowedToBlockForConnectionMultiplier&lt;/span&gt;
&lt;span&gt;486&lt;/span&gt; mongodb_threads_allowed_to_block_multiplier = &lt;span&gt;5&lt;/span&gt;
&lt;span&gt;487&lt;/span&gt; 
&lt;span&gt;488&lt;/span&gt; &lt;span&gt;# Drools Rule File (Use to rewrite incoming log messages)
&lt;/span&gt;&lt;span&gt;489&lt;/span&gt; # See: http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;docs.graylog.org/en/2.1/pages/drools.html&lt;/span&gt;
&lt;span&gt;490&lt;/span&gt; #rules_file = /etc/graylog/server/&lt;span&gt;rules.drl
&lt;/span&gt;&lt;span&gt;491&lt;/span&gt; 
&lt;span&gt;492&lt;/span&gt; &lt;span&gt;# Email transport
&lt;/span&gt;&lt;span&gt;493&lt;/span&gt; #transport_email_enabled = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;494&lt;/span&gt; #transport_email_hostname =&lt;span&gt; mail.example.com
&lt;/span&gt;&lt;span&gt;495&lt;/span&gt; #transport_email_port = &lt;span&gt;587&lt;/span&gt;
&lt;span&gt;496&lt;/span&gt; #transport_email_use_auth = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;497&lt;/span&gt; #transport_email_use_tls = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;498&lt;/span&gt; #transport_email_use_ssl = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;499&lt;/span&gt; #transport_email_auth_username =&lt;span&gt; you@example.com
&lt;/span&gt;&lt;span&gt;500&lt;/span&gt; #transport_email_auth_password =&lt;span&gt; secret
&lt;/span&gt;&lt;span&gt;501&lt;/span&gt; #transport_email_subject_prefix =&lt;span&gt; [graylog]
&lt;/span&gt;&lt;span&gt;502&lt;/span&gt; #transport_email_from_email =&lt;span&gt; graylog@example.com
&lt;/span&gt;&lt;span&gt;503&lt;/span&gt; 
&lt;span&gt;504&lt;/span&gt; # Specify and uncomment this &lt;span&gt;if&lt;/span&gt; you want to include links to the stream &lt;span&gt;in&lt;/span&gt;&lt;span&gt; your stream alert mails.
&lt;/span&gt;&lt;span&gt;505&lt;/span&gt; &lt;span&gt;# This should define the fully qualified base url to your web interface exactly the same way as it is accessed by your users.
&lt;/span&gt;&lt;span&gt;506&lt;/span&gt; #transport_email_web_interface_url = https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;graylog.example.com&lt;/span&gt;
&lt;span&gt;507&lt;/span&gt; 
&lt;span&gt;508&lt;/span&gt; # The default connect timeout &lt;span&gt;for&lt;/span&gt;&lt;span&gt; outgoing HTTP connections.
&lt;/span&gt;&lt;span&gt;509&lt;/span&gt; # Values must be a positive duration (and between &lt;span&gt;1&lt;/span&gt; and &lt;span&gt;2147483647&lt;/span&gt;&lt;span&gt; when converted to milliseconds).
&lt;/span&gt;&lt;span&gt;510&lt;/span&gt; &lt;span&gt;# Default: 5s
&lt;/span&gt;&lt;span&gt;511&lt;/span&gt; #http_connect_timeout =&lt;span&gt; 5s
&lt;/span&gt;&lt;span&gt;512&lt;/span&gt; 
&lt;span&gt;513&lt;/span&gt; # The default read timeout &lt;span&gt;for&lt;/span&gt;&lt;span&gt; outgoing HTTP connections.
&lt;/span&gt;&lt;span&gt;514&lt;/span&gt; # Values must be a positive duration (and between &lt;span&gt;1&lt;/span&gt; and &lt;span&gt;2147483647&lt;/span&gt;&lt;span&gt; when converted to milliseconds).
&lt;/span&gt;&lt;span&gt;515&lt;/span&gt; &lt;span&gt;# Default: 10s
&lt;/span&gt;&lt;span&gt;516&lt;/span&gt; #http_read_timeout =&lt;span&gt; 10s
&lt;/span&gt;&lt;span&gt;517&lt;/span&gt; 
&lt;span&gt;518&lt;/span&gt; # The default &lt;span&gt;write&lt;/span&gt; timeout &lt;span&gt;for&lt;/span&gt;&lt;span&gt; outgoing HTTP connections.
&lt;/span&gt;&lt;span&gt;519&lt;/span&gt; # Values must be a positive duration (and between &lt;span&gt;1&lt;/span&gt; and &lt;span&gt;2147483647&lt;/span&gt;&lt;span&gt; when converted to milliseconds).
&lt;/span&gt;&lt;span&gt;520&lt;/span&gt; &lt;span&gt;# Default: 10s
&lt;/span&gt;&lt;span&gt;521&lt;/span&gt; #http_write_timeout =&lt;span&gt; 10s
&lt;/span&gt;&lt;span&gt;522&lt;/span&gt; 
&lt;span&gt;523&lt;/span&gt; # HTTP proxy &lt;span&gt;for&lt;/span&gt;&lt;span&gt; outgoing HTTP connections
&lt;/span&gt;&lt;span&gt;524&lt;/span&gt; #http_proxy_uri =
&lt;span&gt;525&lt;/span&gt; 
&lt;span&gt;526&lt;/span&gt; &lt;span&gt;# Disable the optimization of Elasticsearch indices after index cycling. This may take some load from Elasticsearch
&lt;/span&gt;&lt;span&gt;527&lt;/span&gt; &lt;span&gt;# on heavily used systems with large indices, but it will decrease search performance. The default is to optimize
&lt;/span&gt;&lt;span&gt;528&lt;/span&gt; &lt;span&gt;# cycled indices.
&lt;/span&gt;&lt;span&gt;529&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;530&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; Graylog &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;531&lt;/span&gt; #            to your previous settings so they will be migrated to the database!
&lt;span&gt;532&lt;/span&gt; #disable_index_optimization = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;533&lt;/span&gt; 
&lt;span&gt;534&lt;/span&gt; # Optimize the index down to &amp;lt;=&lt;span&gt; index_optimization_max_num_segments. A higher number may take some load from Elasticsearch
&lt;/span&gt;&lt;span&gt;535&lt;/span&gt; # on heavily used systems with large indices, but it will decrease search performance. The default is &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&lt;span&gt;536&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;537&lt;/span&gt; # ATTENTION: These settings have been moved to the database &lt;span&gt;in&lt;/span&gt; Graylog &lt;span&gt;2.2&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;. When you upgrade, &lt;span&gt;make&lt;/span&gt;&lt;span&gt; sure to set these
&lt;/span&gt;&lt;span&gt;538&lt;/span&gt; #            to your previous settings so they will be migrated to the database!
&lt;span&gt;539&lt;/span&gt; #index_optimization_max_num_segments = &lt;span&gt;1&lt;/span&gt;
&lt;span&gt;540&lt;/span&gt; 
&lt;span&gt;541&lt;/span&gt; &lt;span&gt;# The threshold of the garbage collection runs. If GC runs take longer than this threshold, a system notification
&lt;/span&gt;&lt;span&gt;542&lt;/span&gt; # will be generated to warn the administrator about possible problems with the system. Default is &lt;span&gt;1&lt;/span&gt;&lt;span&gt; second.
&lt;/span&gt;&lt;span&gt;543&lt;/span&gt; #gc_warning_threshold =&lt;span&gt; 1s
&lt;/span&gt;&lt;span&gt;544&lt;/span&gt; 
&lt;span&gt;545&lt;/span&gt; # Connection timeout &lt;span&gt;for&lt;/span&gt; a configured LDAP server (e. g. ActiveDirectory) &lt;span&gt;in&lt;/span&gt;&lt;span&gt; milliseconds.
&lt;/span&gt;&lt;span&gt;546&lt;/span&gt; #ldap_connection_timeout = &lt;span&gt;2000&lt;/span&gt;
&lt;span&gt;547&lt;/span&gt; 
&lt;span&gt;548&lt;/span&gt; # Disable the use of SIGAR &lt;span&gt;for&lt;/span&gt;&lt;span&gt; collecting system stats
&lt;/span&gt;&lt;span&gt;549&lt;/span&gt; #disable_sigar = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;550&lt;/span&gt; 
&lt;span&gt;551&lt;/span&gt; # The default cache &lt;span&gt;time&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; dashboard widgets. (Default: &lt;span&gt;10&lt;/span&gt; seconds, minimum: &lt;span&gt;1&lt;/span&gt;&lt;span&gt; second)
&lt;/span&gt;&lt;span&gt;552&lt;/span&gt; #dashboard_widget_default_cache_time =&lt;span&gt; 10s
&lt;/span&gt;&lt;span&gt;553&lt;/span&gt; 
&lt;span&gt;554&lt;/span&gt; # Automatically load content packs &lt;span&gt;in&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content_packs_dir&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; on the first start of Graylog.
&lt;/span&gt;&lt;span&gt;555&lt;/span&gt; #content_packs_loader_enabled = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;556&lt;/span&gt; 
&lt;span&gt;557&lt;/span&gt; # The directory &lt;span&gt;which&lt;/span&gt; contains content packs &lt;span&gt;which&lt;/span&gt;&lt;span&gt; should be loaded on the first start of Graylog.
&lt;/span&gt;&lt;span&gt;558&lt;/span&gt; content_packs_dir = /usr/share/graylog-server/&lt;span&gt;contentpacks
&lt;/span&gt;&lt;span&gt;559&lt;/span&gt; 
&lt;span&gt;560&lt;/span&gt; # A comma-separated list of content packs (files &lt;span&gt;in&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content_packs_dir&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;which&lt;/span&gt;&lt;span&gt; should be applied on
&lt;/span&gt;&lt;span&gt;561&lt;/span&gt; &lt;span&gt;# the first start of Graylog.
&lt;/span&gt;&lt;span&gt;562&lt;/span&gt; &lt;span&gt;# Default: empty
&lt;/span&gt;&lt;span&gt;563&lt;/span&gt; content_packs_auto_load = grok-&lt;span&gt;patterns.json
&lt;/span&gt;&lt;span&gt;564&lt;/span&gt; 
&lt;span&gt;565&lt;/span&gt; # For some cluster-related REST requests, the node must query all other nodes &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the cluster. This is the maximum number
&lt;/span&gt;&lt;span&gt;566&lt;/span&gt; # of threads available &lt;span&gt;for&lt;/span&gt; this. Increase it, &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/cluster/*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; requests take &lt;span&gt;long&lt;/span&gt;&lt;span&gt; to complete.
&lt;/span&gt;&lt;span&gt;567&lt;/span&gt; # Should be rest_thread_pool_size * average_cluster_size &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you have a high number of concurrent users.
&lt;/span&gt;&lt;span&gt;568&lt;/span&gt; proxied_requests_thread_pool_size = &lt;span&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;server.conf&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　启动graylog服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;sudo&lt;/span&gt; chkconfig --add graylog-&lt;span&gt;server
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; systemctl daemon-&lt;span&gt;reload
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; systemctl enable graylog-&lt;span&gt;server.service
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; systemctl start graylog-server.service
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 4. 多节点集群配置安装&lt;/h2&gt;
&lt;h4&gt;　　① MongoDB集群配置：&lt;/h4&gt;
&lt;p&gt;　　修改所有mongdb节点的配置文件/etc/mongod.conf，添加集群replication信息replSetName: rs0，并重启服务。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_0975deef-9c5f-456c-9fd8-69fa02fd367a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0975deef-9c5f-456c-9fd8-69fa02fd367a&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0975deef-9c5f-456c-9fd8-69fa02fd367a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;cat&lt;/span&gt; /etc/&lt;span&gt;mongod.conf 
# mongod.conf

# &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; documentation of all options, see:
#   http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;docs.mongodb.org/manual/reference/configuration-options/&lt;/span&gt;
&lt;span&gt;
# where to &lt;/span&gt;&lt;span&gt;write&lt;/span&gt;&lt;span&gt; logging data.
systemLog:
  destination: &lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;
  logAppend: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  path: &lt;/span&gt;/var/log/mongodb/&lt;span&gt;mongod.log

# Where and how to store data.
storage:
  dbPath: &lt;/span&gt;/var/lib/&lt;span&gt;mongo
  journal:
    enabled: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
#  engine:
#  mmapv1:
#  wiredTiger:

# how the process runs
processManagement:
  fork: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;  # fork and run &lt;span&gt;in&lt;/span&gt;&lt;span&gt; background
  pidFilePath: &lt;/span&gt;/var/run/mongodb/&lt;span&gt;mongod.pid  # location of pidfile

# network interfaces
net:
  port: &lt;/span&gt;&lt;span&gt;27017&lt;/span&gt;&lt;span&gt;
#  bindIp: &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;  # Listen to local interface only, comment to listen on all interfaces.


#security:

#operationProfiling:

replication:
  replSetName: rs0
#sharding:

## Enterprise&lt;/span&gt;-&lt;span&gt;Only Options

#auditLog:

#snmp:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;mongod.conf&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;sudo&lt;/span&gt; systemctl restart mongod.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在集群其中一个节点，启动mongo命令行：&lt;/p&gt;

&lt;p&gt;　　初始化mongodb集群，使用本机hostname或IP加端口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$ rs.initiate( {
   _id : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rs0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
   members: [ { _id : &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, host : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb0.example.net:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; } ]
})&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　验证集群配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42.5&quot;&gt;&lt;img id=&quot;code_img_closed_778ec499-fe54-4ad3-bb0e-8c5a7dbd3db6&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_778ec499-fe54-4ad3-bb0e-8c5a7dbd3db6&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_778ec499-fe54-4ad3-bb0e-8c5a7dbd3db6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$ rs.conf()

{
   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rs0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;protocolVersion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : NumberLong(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;),
   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : [
      {
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;host&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb0.example.net:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;arbiterOnly&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;buildIndexes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hidden&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;priority&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tags&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : {

         },
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;slaveDelay&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : NumberLong(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;),
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;votes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
      }
   ],
   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chainingAllowed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;heartbeatIntervalMillis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;heartbeatTimeoutSecs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;electionTimeoutMillis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;catchUpTimeoutMillis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getLastErrorModes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : {

      },
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getLastErrorDefaults&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : {
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wtimeout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
      },
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;replicaSetId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : ObjectId(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;585ab9df685f726db2c6a840&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;rs.conf()&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　将其他节点加入集群，并查看集群配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
rs0:PRIMARY&amp;gt; rs.add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb1.example.net&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
rs0:PRIMARY&amp;gt; rs.add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb2.example.net&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span class=&quot;nx&quot;&gt;rs0:PRIMARY&amp;gt; rs&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;nx&quot;&gt;status&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　创建graylog数据库，并添加graylog用户，赋予readWrite和dbAdmin权限：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
rs0:PRIMARY&amp;gt;&lt;span&gt; use graylog
switched to db graylog
rs0:PRIMARY&lt;/span&gt;&amp;gt;&lt;span&gt; db.createUser( {
    user: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graylog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
     &lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;75PN76Db66En&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
     roles: [ { role: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;readWrite&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, db: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graylog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; } ]
   });
rs0:PRIMARY&lt;/span&gt;&amp;gt; db.grantRolesToUser( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graylog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; , [ { role: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dbAdmin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, db: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graylog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; } ])
rs0:PRIMARY&lt;/span&gt;&amp;gt;&lt;span&gt; show users
rs0:PRIMARY&lt;/span&gt;&amp;gt; db.auth(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graylog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;75sdfsdsdfn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　② Elasticsearch 集群配置：&lt;/h4&gt;
&lt;p&gt;　　修改elasticsearch配置文件并重启服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;cat&lt;/span&gt; /etc/elasticsearch/elasticsearch.yml | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; cluster.name
cluster.name: graylog
# &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt; /etc/elasticsearch/elasticsearch.yml | &lt;span&gt;grep&lt;/span&gt; discovery.zen.&lt;span&gt;ping&lt;/span&gt;&lt;span&gt;
discovery.zen.&lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;.unicast.hosts: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.2.41&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10.2.2.43&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
# &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt; /etc/elasticsearch/elasticsearch.yml | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; network.host
network.host: &lt;/span&gt;&lt;span&gt;10.2&lt;/span&gt;.&lt;span&gt;2.42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　③ graylog集群配置&lt;/h4&gt;
&lt;p&gt;　　graylog master节点修改配置server.conf 中 i&lt;span class=&quot;pre&quot;&gt;s_master &lt;span class=&quot;pre&quot;&gt;= &lt;span class=&quot;pre&quot;&gt;true，其他节点为false，同时rest_listen_uri以及rest_transport_uri必须可以被集群中的其他节点连通。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&lt;span class=&quot;pre&quot;&gt;　　修改mongodb连接配置：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;cat&lt;/span&gt; /etc/graylog/server/server.conf|&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; mongodb_uri
mongodb_uri &lt;/span&gt;= mongodb:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;graylog:75PN76Db66En@10.2.2.41:27017,10.2.2.42:27017,10.2.2.43:27017/graylog?replicaSet=rs0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　修改elasticsearch连接配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
# &lt;span&gt;cat&lt;/span&gt; /etc/graylog/server/server.conf|&lt;span&gt;grep&lt;/span&gt;&lt;span&gt; elasticsearch_hosts
elasticsearch_hosts &lt;/span&gt;= http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;grayloguser:3KKLg8294CE0@10.2.2.41:9200,&lt;/span&gt;&lt;span&gt;http://grayloguser&lt;/span&gt;&lt;span&gt;:3KKLg8294CE0@10.2.2.42:9200,&lt;/span&gt;&lt;span&gt;http://grayloguser&lt;/span&gt;&lt;span&gt;:3KKLg8294CE0@10.2.2.43:9200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　开启web界面：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;　# cat /etc/graylog/server/server.conf|grep web_enable&lt;br/&gt;　web_enable = true&lt;/p&gt;
&lt;/div&gt;

&lt;h4&gt;　　④ 创建负载均衡器，对graylog配置负载均衡，我使用的是微软云负载均衡，这里不再说明。&lt;/h4&gt;
&lt;p&gt;　　此时可以通过 负载均衡器IP:9000 对graylog进行访问。&lt;/p&gt;

&lt;h2&gt;5. 日志接入&lt;/h2&gt;
&lt;h2 id=&quot;接入-syslog&quot;&gt;接入 syslog&lt;/h2&gt;
&lt;p&gt;首先在 webui 创建 input：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.2.png&quot; alt=&quot;图 11.2&quot; width=&quot;349&quot; height=&quot;417&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以 rsyslog 为例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/etc/rsyslog.d/&lt;span&gt;graylog.conf:

&lt;/span&gt;*.* @@x.x.x.x:&lt;span&gt;514&lt;/span&gt;;RSYSLOG_SyslogProtocol23Format&lt;p&gt;service rsyslog restart
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;即可查看该 input 的 message：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.3.png&quot; alt=&quot;图 11.3&quot; width=&quot;772&quot; height=&quot;348&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;gelf-http-为例&quot;&gt;GELF (http 为例)&lt;/h2&gt;
&lt;p&gt;GELF (Graylog Extended Log Format) 可以接收结构化的事件， 支持压缩(GZIP’d or ZLIB’d)和分块。&lt;/p&gt;
&lt;p&gt;GELF message：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;version &lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;host &lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;short_message &lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;full_message &lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;timestamp &lt;code&gt;number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;level &lt;code&gt;number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;facility &lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;line &lt;code&gt;number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;file &lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;_[additional field] &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt;, 通过 &lt;code&gt;_&lt;/code&gt; 前缀添加自定义的字段&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;新建一个 &lt;code&gt;GELF HTTP&lt;/code&gt; input:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.6.png&quot; alt=&quot;图 11.6&quot; width=&quot;343&quot; height=&quot;347&quot;/&gt;&lt;/p&gt;
&lt;p&gt;推送日志：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
curl -XPOST http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;106.75.62.142:12201/gelf -p0 -d '{&quot;message&quot;:&quot;这是一条消息&quot;, &quot;host&quot;:&quot;172.3.3.3&quot;, &quot;facility&quot;:&quot;test&quot;, &quot;topic&quot;: &quot;meme&quot;}'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看推送的日志：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.7.png&quot; alt=&quot;图 11.7&quot; width=&quot;781&quot; height=&quot;277&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;收集服务日志-nodejs-为例&quot;&gt;收集服务日志( nodejs 为例)&lt;/h2&gt;
&lt;p&gt;log4js, bunyan， winston 等等 nodejs 日志框架都可以， 这里我们以 bunyan 为例， 因为 bunyan 可以将日志以 json 的形式打印。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
const express = require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;express&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
const bodyParser &lt;/span&gt;= require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body-parser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
const bunyan &lt;/span&gt;= require(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bunyan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

const log &lt;/span&gt;=&lt;span&gt; bunyan.createLogger({
    name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;server-bunyan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    level: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    streams: [{
        type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rotating-file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        path: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/data/logs/server-bunyan.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        period: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        count: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    }]
});


const app &lt;/span&gt;=&lt;span&gt; express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; }));

app.get(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, (req, res) =&amp;gt;&lt;span&gt; {
    log.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;({                                           
        query: req.query
    }, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    res.send(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
});

app.listen(&lt;/span&gt;&lt;span&gt;5004&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0.0.0.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, () =&amp;gt;&lt;span&gt; {
    log.&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app listening on 5004&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;rsyslog:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
module(load=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; PollingInterval=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

# input&lt;br/&gt;input(type&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; File=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/data/logs/server.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Tag=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ruleset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;push_remote&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
input(type&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; File=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/data/logs/detail.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Tag=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;detail&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ruleset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;push_remote&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
input(type&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; File=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/data/logs/server-bunyan.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Tag=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bunyan_server&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ruleset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;push_remote&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

# template
template(name&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mytpl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;node1 %programname% %msg%\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; )                          
# output
ruleset(name&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;push_remote&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
  action(
    type&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;omfwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    protocol&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tcp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    target&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x.x.x.x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    port&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;515&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    template&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mytpl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    action.resumeRetryCount&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    action.resumeInterval&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    queue.filename&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;push-remote&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    queue.size&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    queue.highwatermark&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;60000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    queue.lowwatermark&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    queue.maxdiskspace&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100g&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    queue.saveonshutdown&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    queue.type&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LinkedList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    queue.maxfilesize&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;128m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  )
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新建 input， 监听 515 端口，这里我们体验一下 graylog 的 Extractor，给改 input 添加一个 Extractor：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.5.png&quot; alt=&quot;图 11.5&quot; width=&quot;745&quot; height=&quot;215&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们加了一个抓取器，来提取 &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;topic&lt;/code&gt; 两个字段。&lt;/p&gt;
&lt;p&gt;在 webui 查看该 input 的 message：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.4.png&quot; alt=&quot;图 11.4&quot; width=&quot;820&quot; height=&quot;291&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;alerts&quot;&gt;Alerts&lt;/h2&gt;
&lt;p&gt;Graylog 内置的告警条件：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;消息数量&lt;/li&gt;
&lt;li&gt;字段值(number)&lt;/li&gt;
&lt;li&gt;字段内容&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;内置告警方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;HTTP 回调&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;体验一下 HTTP 回调。&lt;/p&gt;
&lt;p&gt;新建一个 Stream， 进入 &lt;code&gt;manager alerts&lt;/code&gt;, 新建一个告警条件：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.8.png&quot; alt=&quot;图 11.8&quot; width=&quot;678&quot; height=&quot;344&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建一个 HTTP 回调：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.9.png&quot; alt=&quot;图 11.9&quot; width=&quot;524&quot; height=&quot;168&quot;/&gt;&lt;/p&gt;
&lt;p&gt;告警以 post 方式请求回调, 请求的 body 内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;check_result&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result_description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Stream had 0 messages in the last 1 minutes with trigger condition less than 10 messages. (Current grace time: 1 minutes)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;triggered_condition&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6bacc1c1-1eac-49f9-9ac8-998ea851f101&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-01-17T05:25:13.592Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;creator_user_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;日志一分钟内少于10条&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;parameters&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;threshold_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;less&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;threshold&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;backlog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
            }
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;triggered_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-01-17T05:44:11.921Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;triggered&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;matching_messages&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: []
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;creator_user_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outputs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alert_receivers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;emails&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongsoso@hotmail.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ],
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dongsoso@hotmail.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            ]
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;matching_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AND&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alert&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-01-17T05:21:58.852Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;disabled&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rules&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alert_conditions&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
            {
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;creator_user_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;created_at&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-01-17T05:25:13.592Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6bacc1c1-1eac-49f9-9ac8-998ea851f101&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;日志一分钟内少于10条&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;parameters&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;threshold_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;less&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;threshold&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;backlog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
                }
            }
        ],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;587da9f62ab79c0001352b7a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content_pack&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看告警历史:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://raw.githubusercontent.com/Dongss/dogs/master/posts/images/11.10.png&quot; alt=&quot;图 11.10&quot; width=&quot;875&quot; height=&quot;193&quot;/&gt;&lt;/p&gt;
&lt;p&gt;更多更好用的功能等待发现…&lt;/p&gt;


&lt;p&gt;官方文档 ： http://docs.graylog.org/en/2.3/index.html&lt;/p&gt;

</description>
<pubDate>Sat, 07 Oct 2017 11:37:00 +0000</pubDate>
<dc:creator>走心的狗</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wayneiscoming/p/7635357.html</dc:identifier>
</item>
<item>
<title>JDFS:一款分布式文件管理系统，第五篇(整体架构描述) - cs小学生</title>
<link>http://www.cnblogs.com/junhuster/p/JDFS5.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/junhuster/p/JDFS5.html</guid>
<description>&lt;p&gt;　　截止到目前为止，虽然并不完美，但是JDFS已经初步具备了完整的分布式文件管理功能了，包括：文件的冗余存储、文件元信息的查询、文件的下载、文件的删除等。本文将对JDFS做一个总体的介绍，主要是介绍JDFS的整体架构，流程图等，另外还会介绍如何安装部署运行JDFS.当然正如前面几篇博客里笔者提到的，JDFS并不完美，有一些潜在的难以发现的bug偶尔会出现，这个有赖于后续的不断测试、调试来解决。如果你是第一次阅读JDFS系列博客，笔者建议先读一下该系列的另外几篇博客，其链接如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JDFS:一款分布式文件管理实用程序第一篇(线程池、epoll、上传、下载)  &lt;a href=&quot;http://www.cnblogs.com/junhuster/p/JDFS1.html&quot; target=&quot;_blank&quot;&gt;点击我&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JDFS:一款分布式文件管理实用程序第二篇(更新升级、解决一些bug)       &lt;a href=&quot;http://www.cnblogs.com/junhuster/p/JDFS2.html&quot; target=&quot;_blank&quot;&gt;点击我&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JDFS:一款分布式文件管理系统，第三篇(流式云存储)　　                       &lt;a href=&quot;http://www.cnblogs.com/junhuster/p/JDFS3.html&quot; target=&quot;_blank&quot;&gt;点击我&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JDFS:一款分布式文件管理系统，第四篇(流式云存储续篇)                       &lt;a href=&quot;http://www.cnblogs.com/junhuster/p/JDFS4.html&quot; target=&quot;_blank&quot;&gt;点击我&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　JDFS代码已经上传到github,地址请&lt;a href=&quot;https://github.com/junhuster/JDFS&quot; target=&quot;_blank&quot;&gt;点击我&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: 本篇博客是博客园用户“cs小学生”的原创作品，转载请注明原作者和原文链接，谢谢。&lt;/p&gt;

&lt;p&gt;　　在前四篇博客中，笔者以文字、代码片段的方式叙述了JDFS的技术细节，每一篇都是针对某个特定功能的。而现在JDFS已经作为一个整体初步完成了，所以在这里我们将从总体上看一下JDFS长什么样，由哪些component组成，从客户端提交任务到任务完成走了一个怎样的路径。接下来将用3个小节来分别介绍一下：JDFS服务端的架构、文件流式冗余存储的流程图、文件下载的执行流。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1 JDFS服务端的架构&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　我们先来看一张JDFS server端的架构示意图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1095958/201710/1095958-20171007152119880-1080583180.png&quot; alt=&quot;&quot; width=&quot;884&quot; height=&quot;363&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　如上图所示，即为Server端的架构示意图，在JDFS中，name node和data node上面跑的server均是采用的图中的架构。从图中可以看出，server端主要包括两个大的部分：监听客户端事件的模块(图左)，线程池&amp;amp;作业队列(图右)。监听模块监听客户端的事件，如果是连接事件，则服务端接受之，不需要线程池的参与，而如果epoll监听到读事件(也即客户端发送数据过来)，则把该事件打包成一个task,加入到作业队列中，线程池中的线程会时时刻刻盯着作业队列，有task则试图从队列中取出task来执行。在这里不管是server端把task加入到作业队列还是线程池里的线程从task队列中取出task都需要在同步锁的保护下互斥地执行，以保证数据的正确访问。&lt;/p&gt;
&lt;p&gt;　　上一段描述了server端执行的大致过程，现在我们分别介绍下server-epoll端、线程池都有哪些函数来支撑的，然后结合着图中的执行流以及实现的函数，详细描述一下服务端的执行细节。&lt;/p&gt;
&lt;p&gt;　　server-epoll端实现的函数如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Http_server_bind_and_listen(&lt;span&gt;char&lt;/span&gt; *ip, &lt;span&gt;int&lt;/span&gt; port, &lt;span&gt;int&lt;/span&gt; *&lt;span&gt;server_listen_fd);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Http_server_body(&lt;span&gt;char&lt;/span&gt; *ip, &lt;span&gt;int&lt;/span&gt; port, &lt;span&gt;int&lt;/span&gt; *server_listen_fd, threadpool *&lt;span&gt;pool);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback(&lt;span&gt;void&lt;/span&gt; *arg);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　线程池&amp;amp;作业队列端实现的函数如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; threadpool_create(threadpool *pool, &lt;span&gt;int&lt;/span&gt; num_of_thread, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max_num_of_jobs_of_one_task_queue);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; threadpool_add_jobs_to_taskqueue(threadpool *pool, &lt;span&gt;void&lt;/span&gt; * (*call_back_func)(&lt;span&gt;void&lt;/span&gt; *arg), &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; threadpool_fetch_jobs_from_taskqueue(threadpool *pool, job **&lt;span&gt;job_fetched);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *thread_func(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; destory_threadpool(threadpool *pool);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中threadpool_add_jobs_to_taskqueue()是线程池暴露给server-epoll端的接口，用来向作业队列加入task用的。下面我们结合函数接口来详细介绍一下服务端启动的过程。&lt;/p&gt;
&lt;p&gt;　　在c语言里，显然我们需要写一个main()函数来启动server，我们需要先创建线程池，然后启动服务端，可能的启动代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; threadpool *pool=(threadpool *)&lt;span&gt;malloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(threadpool));
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; threadpool_create(pool, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; Http_server_body(ip_str,port,&amp;amp;&lt;span&gt;server_listen_fd,pool);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; destory_threadpool(pool);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　首先我们用threadpool_create()函数创建了一个线程池，该线程池中有6个线程，作业队列中最大容纳20个task，在图中我们可以看到，矩形框代表着线程池，框的右边有一个while(1)，意为线程池是一个无限循环，循环里不断从task队列中取task，执行之，执行完毕后，继续在while循环里互斥地取下一个task.当然截止目前，作业队列里面还没有任何task，此时线程池里面所有的线程都卡在pthread_cond_t类型的变量上，后续一旦有task被加入队列中，被卡住的线程会被唤醒并同时竞争队列里的task. &lt;/p&gt;
&lt;p&gt;　　现在让我们把目光从线程池移到server-epoll端。上图左边最上边带“server-epoll”字样的矩形框标志着Http_server_body()被调用，服务端已经启动了。Http_server_body()会先调用Http_server_bind_and_listen()来监听server端的&amp;lt;ip,port&amp;gt;,后续客户端的请求都发送到这个ip-端口所代表的服务端上。监听端口搞定后，接下来我们需要创建一个epoll,并且把监听的socket fd加入到epoll中，接下来我们就需要在一个无限循环中while(1)来不断调用epoll_wait()检测是否有事件发生。上图中server-epoll矩形框下面有三条红色虚线箭头，旁边有一个while(1)也即代表了我们所说的：在无限循环中监测事件的发生。从图中红虚线箭头所指向的逻辑可以看出来，客户端发过来的请求有两种：其一是客户端的连接请求，其二是某个socket fd上监测到读事件(客户端发送数据过来)。&lt;/p&gt;
&lt;p&gt;　　对于客户端的连接请求，将由服务端“亲自”处理，从图中我们可以看出：服务端主线程需要首先调用accept()函数接受客户端的连接请求，接受成功则会得到一个socket-fd代表着某个客户端与服务端的socket连接。紧接着我们会把该socket-fd设置为非阻塞、边缘触发、epolloneshot、epollin. 其中之所以会用到边缘触发和epolloneshot的原因在之前的博客里面有详细介绍，读者可以到前言里面找到这些连接自行阅读，此处不再赘述，epollin的意思是监听该socket-fd上的读事件。这些属性都设置好后，需要把该socket-fd再次加入到之前创建的epoll中，使用接口epoll_ctl()可以达到这个目的。这些都做完后，如果客户端发送数据过来，epoll就会监测并报告，正如图中我们画了三个小矩形框代表着监测到的3个读事件，这个时候server端主线程需要把读事件包装成一个task，并调用线程池提供的接口threadpool_add_jobs_to_taskqueue()把该作业加入到task队列中，当然该函数在此处的实现是线程安全的。我们说了task，task包括回调函数的地址、对应读事件的socket-fd、epollfd，所谓回调函数以本文为例，是这样的：回调函数逻辑上是和server-epoll端是一体的，但是调用回调函数的caller并不是server端，而是线程池端通过指针来调用的，简言之，A处的函数，B处通过函数指针来调用。&lt;/p&gt;
&lt;p&gt;　　现在让我们把目光再次转移到线程池里，前文说过线程池刚创建的时候所有的线程都卡在pthread_cond_t类型的变量上，如图所示，运行一段时间后，server端主线程已经将5个task加入到作业队列里面了，再加入task的过程中，如果当前task队列为空，则作业加入后会使用pthread_cond_broadcast()来唤醒所有卡住的线程，此时如图所示，我们假设线程T2成功竞争获得task1,于是线程T2从task1中拿到回调函数的地址，和参数，然后调用之。此刻回调函数开始执行，图中带“server call back function”字样的矩形框代表了这一执行过程，callback函数会首先使用recv()函数接收一个头部(代码里自定义的头部，长度是已知的)，接收完头部后，callback()函数会解析头部看看是哪种类型的请求，并调用具体的接口函数来执行该请求，如图所示对于data node来说有查询、上传、下载等不同的功能接口函数。&lt;/p&gt;
&lt;p&gt;　　以上便是server端的一个完整执行流的过程描述，在JDFS中有两种计算结点，一个是data node一个是name node，上面跑的server均是按照本小节描述的过程来工作的。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;2 流式冗余存储执行流&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　先来看一下对应的执行流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1095958/201710/1095958-20171007163055005-111778881.png&quot; alt=&quot;&quot; width=&quot;922&quot; height=&quot;422&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　上面这张图描述了我们把算法导论CLRS-en.pdf流式冗余地存储到三个data node的全过程。图中的数字标志了执行的先后顺序，有些线条用同一种特殊的颜色比如黑色虚线，意为这几个步骤逻辑上连接比较紧密。现在我们就顺着数字1,2,3....10来详细看一看具体的过程。在数字1处，用户User1向Client发出存储CLRS-en.pdf的请求，client是提供了若干面向用户的接口，用户可以直接调用该接口来完成相应的功能，从图中我们可以看到用户把CLRS-en.pdf作为参数传递给了Client。然后入数字2标志的箭头所示，Client首先会向Name node发送一个http请求，查询当前虚拟集群里面还活跃着的data node。顺着数字3我们看到name node首先会读取本地的配置文件(里面记录了所有data node的ip地址、监听端口、串号等信息)，对于配置文件里面列出的所有&amp;lt;ip,port&amp;gt;对，name node会向&amp;lt;ip,port&amp;gt;标志的服务发送一个查询是否活跃的请求，这个过程用数字4标志的黄色虚线表示，该虚线是个双向箭头，活跃着的data node在接收到name node发过来的查询请求后，会沿着同一个socket-fd(如图中的黄色虚线)发送数据给name node告诉它我目前处于活跃状态，可以提供相应的服务。&lt;/p&gt;
&lt;p&gt;　　接下来的逻辑我们聚焦于数字5,6,7,8标志的黑色虚线，数字5标志的虚线表示name node会把上一步查询到的活跃的data node的ip地址，端口等发送给Client，接着两个数字6标志的绿色虚线表示Client按照一定的策略把CLRS-en.pdf分割为3个block,然后基于&amp;lt;活跃的结点列表、本地文件的分块信息&amp;gt;, Client端会按照一定的策略为每一个block选取若干个data node结点来冗余地存储该block. 然后Client会把这些信息沿着8标志的黑色虚线发送给name node，告诉name node“我打算把CRLS-en.pdf”分成3个block冗余地存储于虚拟集群里。Name node会在本地创建一个同名的文件来存储该文件的元信息。如图所示，元信息记录了如下信息：文件名，文件的状态(0表示打算存储，但是还没有完成)，文件的block数目，接下来是每一个block对应的具体信息：该block存储于哪个结点上，标志为0的表示不打算存储在对应的数据结点上，标志为1的表示应该存储到对应的数据结点上但是还没有存储成功。在JDFS的实现当中，10010010表示第3个block应当冗余存储到第1,4,7个结点上面。&lt;/p&gt;
&lt;p&gt;　　接下来如图中9所标志的4条虚线箭头代表了流式冗余存储的过程。如图所示每一个block在传输前又继续被分成了6个pieces(此处简化了，实际代码中被分成了100多片)，client会挨个遍历每个block的每一个pieces,并且把它传输给datanode3，这个过程是串行的，也即成功传递一个piece后才会传递下一个piece. datanode3每成功接收一个piece都会给Client发送一个确认信息，这样Client就知道该piece成功传递，否则需要重新传输。&lt;/p&gt;
&lt;p&gt;　　接下来的情况比较复杂，也是潜在bug容易出现的地方：流式传递。所谓流式传递，以上图为例，每一个data node再接收上一个data node传输过来的piece后，需要把这个piece传递给下一个data node，同时继续接收上一个data node发送过来的下一个piece,这个过程就像是字节流一样，所以被称之为流式传递。笔者曾将在网上找到一篇介绍HDFS的博客，里面介绍HDFS就是采用的流式传递的方式来传输数据分片，本文就是借鉴HDFS的这个处理方式来实现的，在此感谢HDFS。刚才说了这个过程是比较复杂的，原因在于此时数据的传递已经不向Client-datanode3之间那样是串行传输，从datanode3---&amp;gt;datanode2---&amp;gt;datanode1的传输过程不再是串行的，对于datanode2来说，很可能第一个block的第2个piece比第1个piece先到达，此时接收顺序已经是乱序、并行的了。所以此时面临的问题是datanodex里的所有线程同时接收block的piece，文件由谁来创建是一个问题，另外在最初笔者经过很多的bug调试后决定使用边缘触发、epolloneshot的，这些问题的原因读者都可以在前几篇博客里面找到，此处不再赘述。&lt;/p&gt;
&lt;p&gt;　　对于Client来说，在把所有数据分片成功传输给datanode3后，剩下的事情就是数字11标志的“wait file to be completed”的过程，注意此时Client的数据虽然成功发送完毕了，但是datanode3-datanode2-datanode1之间的流式传递很可能还没有完成，所以此处需要等待数据传输完毕。Client会间歇式地给name node发送请求查询文件是否存储完毕，Name node会读取对应文件的元信息，检测每一个block对应的元信息，如果所有先前标志为1的数字都变成了2，则说明该文件已经存完毕，name node会把该文件标志为已经完成存储，然后告诉Client，此时Client收到存储成功的消息后就会返回。&lt;/p&gt;
&lt;p&gt;　　那么这些原先标志为1的数字怎么变成2了呢？让我们把目光移动到图中数字10标志的黑色实线处，每一个data node在成功接收完毕一个完整的block后，就会发送消息给name node，name node此时就会更新该block对应的元信息，也即把相应的1该为2，表示该block成功存储到对应的datanode上了。前面我们说过，对于data node2，3来说，接收到的数据分片是乱序的，很可能接收到某个block的最后一个分片后，实际上该block的其他分片还没有被成功传输，那么这个问题怎么解决呢？在JDFS中我们让接收某个block的最后一个分片的线程负责这件事，该线程会等待其他所有分片到达完毕后，发消息给name node告知该block已经接收完毕。具体的实现可以参见github里面的代码。&lt;/p&gt;
&lt;p&gt;　　以上就是CLRS-en.pdf被分割后，流式冗余存储到虚拟集群里的全过程，下面我们罗列一下name node, data node, client分别实现的函数接口：&lt;/p&gt;
&lt;p&gt;　　name node的实现代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_query_nodelist(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_query_ip_from_node_serial(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback__cloudstr_meta(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_update_meta_info(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_wait_meta_complete(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_delete_meta_file(&lt;span&gt;void&lt;/span&gt; *arg);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　data node的实现代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_query(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_upload(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_download(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_query_node_alive(&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;arg);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;   Http_stream_transform_file(callback_arg_upload *cb_arg_upload,  &lt;span&gt;char&lt;/span&gt; *namenode_ip, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; namenode_port);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; *Http_server_callback_delete_file(&lt;span&gt;void&lt;/span&gt; *arg);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　client端的实现代码，包括了后续将要介绍的下载、删除、显示等功能的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_query_node_list( &lt;span&gt;char&lt;/span&gt; *server_ip,  &lt;span&gt;int&lt;/span&gt; server_port, node_list *&lt;span&gt;nli);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_store_file(&lt;span&gt;char&lt;/span&gt; *file_name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; flag);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_store_one_block(&lt;span&gt;char&lt;/span&gt; *file_name, &lt;span&gt;int&lt;/span&gt; block_num,&lt;span&gt;char&lt;/span&gt; nodes_8_bits, node_list *nli, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; total_num_of_blocks);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Split_file_into_several_parts(&lt;span&gt;char&lt;/span&gt; *file_name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; part_size);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Extract_part_file_and_store(FILE *fp,&lt;span&gt;char&lt;/span&gt; *new_file_name,&lt;span&gt;int&lt;/span&gt; range_begin,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; range_end);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_wait_file_transform_completed(&lt;span&gt;char&lt;/span&gt; *file_name,  &lt;span&gt;char&lt;/span&gt; *ip_str,  &lt;span&gt;int&lt;/span&gt;&lt;span&gt; port);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_query_file(&lt;span&gt;char&lt;/span&gt; *file_name, JDFS_file_info *jfi,&lt;span&gt;int&lt;/span&gt; flag);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;flag, 0: query for reading ,1 :query for deleting&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_query_ip_from_node_serial(&lt;span&gt;int&lt;/span&gt; serial_num, &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;ip_str);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_fetch_file(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;file_name);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_merge_file(&lt;span&gt;char&lt;/span&gt; *file_name, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num_of_blocks);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_delete_file(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;file_name);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_delete_file_internal(&lt;span&gt;char&lt;/span&gt; *file_name, &lt;span&gt;char&lt;/span&gt; *ip_str, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; port);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_delete_meta_file(&lt;span&gt;char&lt;/span&gt; *file_name, &lt;span&gt;char&lt;/span&gt; *ip_str, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; port);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_display_file_info(&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;file_name);&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_select_optimal_node_for_one_block(each_block_info *ebi);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;return the optimal node num&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; JDFS_cloud_fetch_one_block(&lt;span&gt;char&lt;/span&gt; *file_name, &lt;span&gt;int&lt;/span&gt; block_num,&lt;span&gt;int&lt;/span&gt; node_num, &lt;span&gt;char&lt;/span&gt; *destination_file_path);
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;3   从云端下载文件到本地&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1095958/201710/1095958-20171007190415396-578151481.png&quot; alt=&quot;&quot; width=&quot;863&quot; height=&quot;397&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　如上图所示，CLRS-en.pdf已经被分成若干个block，每一个block冗余地存储在不同的data node里。这里我们要从云端把组成文件的所有block下载到本地，然后合并还原原始文件。在数字1标志的箭头处，用户user1向Client发出fetch file的请求，并且把文件名CLRS-en.pdf传给了Client. 如数字2，3标志的箭头所示，Client先向Name node发出查询文件CLRS-en.pdf元信息的请求，然后name node在本地的配置文件里找到CLRS-en.pdf的元信息文件，读取后把相关信息发送给Client. 在数字5标志的箭头处我们可以看到Client先解析name node发送过来的数据，解析的结果是CLRS-en.pdf有3个block组成，block 1冗余地存储在data node 2，5上，block2 冗余地存储于data node 3,4,6,7,8上，block3 冗余地存储于data node 1,4上。(因为篇幅有限，图中只列出了data node 1,2,3)。为了获得CLRS-en.pdf，客户端需要把组成该文件的3个block都下载下来。客户端通过特定的策略决定从data node 2下载block1, data node 3下载block2, data node 1 下载block3. 此时Client还不知道data node 1,2,3的ip地址，于是数字6,7，处客户端向name node查询data node 1,2,3的ip地址。接下来数字8,9,10处表示客户端分别从不同的data node下载相应的block, 在11处，Client将3个block合并成原始文件，返回给用户。至此文件获取的过程就全部结束了。&lt;/p&gt;
&lt;p&gt;　　另外关于文件的显示、删除等逻辑比较直观，本文将不再对此进行介绍，读者可以自行阅读github上的代码或者参见前言列出的博客。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　到此JDFS的整体结束就结束了，原本打算在本篇博客里面介绍下如何安装、部署运行JDFS的，但是写到这里，感觉有点累了，又加上篇幅太长阅读起来容易疲劳，我想还是放在下一篇博客里面介绍吧，在此期间笔者正好可以继续测试JDFS，解决一下潜在的bug之类的。联系方式：https://github.com/junhuster/&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 11:25:00 +0000</pubDate>
<dc:creator>cs小学生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/junhuster/p/JDFS5.html</dc:identifier>
</item>
</channel>
</rss>