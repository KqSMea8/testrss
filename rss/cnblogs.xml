<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>iOS 动画篇 （二） CAShapeLayer与CoreAnimation结合使用 - pretty guy</title>
<link>http://www.cnblogs.com/pretty-guy/p/8268745.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pretty-guy/p/8268745.html</guid>
<description>&lt;p&gt;　　接上一篇博客 &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/pretty-guy/p/8259657.html&quot;&gt;iOS 动画篇（一） Core Animation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　CAShapeLayer是CALayer的一个子类，使用这个类能够很轻易实现曲线的动画。&lt;/p&gt;
&lt;p&gt;　　先来一个折线动画效果：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/552616/201801/552616-20180111150106019-1426259812.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.生成path&lt;/span&gt;
    UIBezierPath *path =&lt;span&gt; [UIBezierPath bezierPath];
    [path moveToPoint:CGPointMake(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)];
    [path addLineToPoint:CGPointMake(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;&lt;span&gt;)];
    [path addLineToPoint:CGPointMake(&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;&lt;span&gt;)];
    [path addLineToPoint:CGPointMake(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;&lt;span&gt;)];
    [path addLineToPoint:CGPointMake(&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;&lt;span&gt;)];
    [path addLineToPoint:CGPointMake(&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;&lt;span&gt;)];
    
    self.shapeLayer.path &lt;/span&gt;=&lt;span&gt; path.CGPath;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置animation&lt;/span&gt;
    CABasicAnimation *strokeAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;strokeEnd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    strokeAnimation.fromValue &lt;/span&gt;= @&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    strokeAnimation.toValue &lt;/span&gt;= @&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    strokeAnimation.duration &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
    
    
    CABasicAnimation &lt;/span&gt;*lineWidthAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;lineWidth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    lineWidthAnimation.fromValue &lt;/span&gt;= @&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    lineWidthAnimation.toValue &lt;/span&gt;= @&lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
    lineWidthAnimation.duration &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
    
    
    CABasicAnimation &lt;/span&gt;*strokeColorAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;strokeColor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    strokeColorAnimation.fromValue &lt;/span&gt;= (&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)([UIColor redColor].CGColor);
    strokeColorAnimation.toValue &lt;/span&gt;= (&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)([UIColor magentaColor].CGColor);
    strokeColorAnimation.duration &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
    
    CAAnimationGroup &lt;/span&gt;*group =&lt;span&gt; [CAAnimationGroup animation];
    group.animations &lt;/span&gt;=&lt;span&gt; @[strokeAnimation, lineWidthAnimation, strokeColorAnimation];
    group.duration &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
    group.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    group.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    [self.shapeLayer addAnimation:group forKey:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;groupAnimation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在介绍CAShapeLayer，CAShapeLayer几乎所有的属性都可以用来做动画，比如说path、strokeEnd、strokeStart、lineWidth等等，利用这些属性可以实现多种曲线动画。&lt;/p&gt;
&lt;p&gt;　　接下来，介绍一个CAShapeLayer与贝塞尔曲线结合的曲线动画，效果图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/552616/201801/552616-20180111150956004-1636702037.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;二次贝塞尔曲线&lt;/span&gt;
    UIBezierPath *path =&lt;span&gt; [UIBezierPath bezierPath];
    [path moveToPoint:CGPointMake(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, self.shapeLayer.bounds.size.height / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)];
    [path addCurveToPoint:CGPointMake(self.shapeLayer.bounds.size.width, &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;) controlPoint1:CGPointMake(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;) controlPoint2:CGPointMake(&lt;span&gt;150&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;&lt;span&gt;)];
    self.shapeLayer.path &lt;/span&gt;=&lt;span&gt; path.CGPath;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制动画&lt;/span&gt;
    CABasicAnimation *strokeEndAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;strokeEnd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    strokeEndAnimation.fromValue &lt;/span&gt;= @&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;;
    strokeEndAnimation.toValue &lt;/span&gt;= @&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    strokeEndAnimation.duration &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
    
    [self.shapeLayer addAnimation:strokeEndAnimation forKey:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;strokeAnimation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    
    CABasicAnimation &lt;/span&gt;*strokeStartAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;strokeStart&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    strokeStartAnimation.fromValue &lt;/span&gt;= @&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;;
    strokeStartAnimation.toValue &lt;/span&gt;= @&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    strokeStartAnimation.duration &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
    
    [self.shapeLayer addAnimation:strokeStartAnimation forKey:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;strokeStartAnimation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再来一个看着酷一点的loading动画，效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/552616/201801/552616-20180111151952941-367287412.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
self.shapeLayer.backgroundColor =&lt;span&gt; [UIColor clearColor].CGColor;
    self.shapeLayer.strokeColor &lt;/span&gt;=&lt;span&gt; [UIColor redColor].CGColor;
    self.shapeLayer.fillColor &lt;/span&gt;=&lt;span&gt; [UIColor clearColor].CGColor;
    self.shapeLayer.lineWidth &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
    UIBezierPath &lt;/span&gt;*storkePath =&lt;span&gt; [UIBezierPath bezierPathWithOvalInRect:self.shapeLayer.bounds];
    self.shapeLayer.path &lt;/span&gt;=&lt;span&gt; storkePath.CGPath;
    self.shapeLayer.strokeStart &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    self.shapeLayer.strokeEnd &lt;/span&gt;= &lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;旋转动画&lt;/span&gt;
    CABasicAnimation *rotateAnimaiton = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;transform.rotation.z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    rotateAnimaiton.duration &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.f;
    rotateAnimaiton.repeatCount &lt;/span&gt;=&lt;span&gt; CGFLOAT_MAX;
    rotateAnimaiton.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    rotateAnimaiton.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    rotateAnimaiton.toValue &lt;/span&gt;= @(M_PI * &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;stroke动画&lt;/span&gt;
    CABasicAnimation *storkeAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;strokeEnd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    storkeAnimation.duration &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.f;
    storkeAnimation.repeatCount &lt;/span&gt;=&lt;span&gt; CGFLOAT_MAX;
    storkeAnimation.fillMode &lt;/span&gt;=&lt;span&gt;  kCAFillModeForwards;
    storkeAnimation.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    storkeAnimation.toValue &lt;/span&gt;= @(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    
    CAAnimationGroup &lt;/span&gt;*animationGroup =&lt;span&gt; [CAAnimationGroup animation];
    animationGroup.duration &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.f;
    animationGroup.repeatCount &lt;/span&gt;=&lt;span&gt;CGFLOAT_MAX;
    animationGroup.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    animationGroup.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    animationGroup.animations &lt;/span&gt;=&lt;span&gt; @[rotateAnimaiton, storkeAnimation];
    animationGroup.timingFunction &lt;/span&gt;=&lt;span&gt; [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionDefault];
    
    [self.shapeLayer addAnimation:animationGroup forKey:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;indicatorAnimation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在我们来看一个CAShapeLayer与mask结合的动画&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/552616/201801/552616-20180111152708019-1968105698.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
CAShapeLayer *shapeLayer =&lt;span&gt; [CAShapeLayer layer];
    self.shapeLayer.mask &lt;/span&gt;=&lt;span&gt; shapeLayer;
    
    UIBezierPath &lt;/span&gt;*fromPath = [UIBezierPath bezierPathWithRect:CGRectMake(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)];
    UIBezierPath &lt;/span&gt;*toPath = [UIBezierPath bezierPathWithRect:CGRectMake(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;&lt;span&gt;)];
    shapeLayer.path &lt;/span&gt;=&lt;span&gt; fromPath.CGPath;
    
    CABasicAnimation &lt;/span&gt;*animation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    animation.fromValue &lt;/span&gt;= (&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)fromPath.CGPath;
    animation.toValue &lt;/span&gt;= (&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)toPath.CGPath;
    animation.duration &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
    animation.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    animation.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    
    [shapeLayer addAnimation:animation forKey:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;animation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后再介绍一个登录动画：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/552616/201801/552616-20180111153033769-1641736660.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　分析：这个登录动画一共分为三步&lt;/p&gt;
&lt;p&gt;　　1. 在button上添加一个shapeLayer，用path属性实现layer的展开动画&lt;/p&gt;
&lt;p&gt;　　2. 在展开动画结束后，为button设置一个shapeLayer的mask，利用layer的path和opacity属性实现收起按钮动画&lt;/p&gt;
&lt;p&gt;　　3. 添加一个loading动画到view上&lt;/p&gt;
&lt;p&gt;详情见代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)viewDidLoad {
    [super viewDidLoad];
    
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;一个复杂一点的登录动画&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    [self.shapeLayer removeFromSuperlayer];
    
    UIButton &lt;/span&gt;*startButton =&lt;span&gt; ({
        UIButton &lt;/span&gt;*btn =&lt;span&gt; [UIButton buttonWithType:UIButtonTypeSystem];
        btn.backgroundColor &lt;/span&gt;=&lt;span&gt; [UIColor purpleColor];
        [btn setTitle:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; forState:UIControlStateNormal];
        btn.frame &lt;/span&gt;= (CGRect){{&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;}, {&lt;span&gt;200&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;&lt;span&gt;}};
        btn.center &lt;/span&gt;=&lt;span&gt; self.view.center;
        
        [btn addTarget:self action:@selector(startAction:) forControlEvents:UIControlEventTouchUpInside];
        btn;
    });
    
    [self.view addSubview:startButton];
    
    self.startButton &lt;/span&gt;=&lt;span&gt; startButton;
    
    
}

&lt;/span&gt;- (IBAction)startAction:(UIButton *&lt;span&gt;)sender {
    [self addMaskAnimation];
}

&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)addMaskAnimation
{
    CAShapeLayer &lt;/span&gt;*shapeLayer = [CAShapeLayer &lt;span&gt;new&lt;/span&gt;&lt;span&gt;];
    shapeLayer.frame &lt;/span&gt;=&lt;span&gt; self.startButton.bounds;
    shapeLayer.fillColor &lt;/span&gt;=&lt;span&gt; [UIColor whiteColor].CGColor;
    shapeLayer.strokeColor &lt;/span&gt;=&lt;span&gt; [UIColor whiteColor].CGColor;
    shapeLayer.opacity &lt;/span&gt;=&lt;span&gt; .3f;
    shapeLayer.path &lt;/span&gt;= [UIBezierPath bezierPathWithRect:CGRectMake(self.startButton.bounds.size.width / &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, self.startButton.bounds.size.height)].CGPath;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不初始化则无动画效果&lt;/span&gt;
&lt;span&gt;    
    [self.startButton.layer addSublayer:shapeLayer];
    
    
    CABasicAnimation &lt;/span&gt;*animation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    animation.duration &lt;/span&gt;= &lt;span&gt;0.5f&lt;/span&gt;&lt;span&gt;;
    animation.toValue &lt;/span&gt;= (__bridge &lt;span&gt;id&lt;/span&gt;&lt;span&gt;)[UIBezierPath bezierPathWithRect:self.startButton.bounds].CGPath;
    animation.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    animation.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    
    [shapeLayer addAnimation:animation forKey:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;shapeAnimation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;/span&gt;&lt;span&gt;0.5f&lt;/span&gt; * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&lt;span&gt;{
        [self addPackupAnimation];
    });
}

&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)addPackupAnimation
{
    CAShapeLayer &lt;/span&gt;*maskLayer =&lt;span&gt; [CAShapeLayer layer];
    maskLayer.frame &lt;/span&gt;=&lt;span&gt; self.startButton.bounds;
    self.startButton.layer.mask &lt;/span&gt;=&lt;span&gt; maskLayer;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;path动画&lt;/span&gt;
    CABasicAnimation *pathAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    pathAnimation.duration &lt;/span&gt;= &lt;span&gt;0.3f&lt;/span&gt;&lt;span&gt;;
    pathAnimation.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    pathAnimation.toValue &lt;/span&gt;= (__bridge &lt;span&gt;id&lt;/span&gt;)[UIBezierPath bezierPathWithArcCenter:CGPointMake(self.startButton.bounds.size.width / &lt;span&gt;2&lt;/span&gt;, self.startButton.bounds.size.height / &lt;span&gt;2&lt;/span&gt;) radius:&lt;span&gt;1&lt;/span&gt; startAngle:&lt;span&gt;0&lt;/span&gt; endAngle:M_PI * &lt;span&gt;2&lt;/span&gt;&lt;span&gt; clockwise:YES].CGPath;
    pathAnimation.fromValue &lt;/span&gt;= (__bridge &lt;span&gt;id&lt;/span&gt;)[UIBezierPath bezierPathWithArcCenter:CGPointMake(self.startButton.bounds.size.width / &lt;span&gt;2&lt;/span&gt;, self.startButton.bounds.size.height / &lt;span&gt;2&lt;/span&gt;) radius:self.startButton.bounds.size.width / &lt;span&gt;2&lt;/span&gt; startAngle:&lt;span&gt;0&lt;/span&gt; endAngle:M_PI * &lt;span&gt;2&lt;/span&gt;&lt;span&gt; clockwise:YES].CGPath;
    pathAnimation.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;透明度动画&lt;/span&gt;
    CABasicAnimation *opacityAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;opacity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    opacityAnimation.duration &lt;/span&gt;= &lt;span&gt;0.3f&lt;/span&gt;&lt;span&gt;;
    opacityAnimation.toValue &lt;/span&gt;= @(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    opacityAnimation.fromValue &lt;/span&gt;= @(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    opacityAnimation.removedOnCompletion &lt;/span&gt;=&lt;span&gt; YES;
    opacityAnimation.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    
    CAAnimationGroup &lt;/span&gt;*group = [CAAnimationGroup &lt;span&gt;new&lt;/span&gt;&lt;span&gt;];
    group.animations &lt;/span&gt;=&lt;span&gt; @[pathAnimation];
    group.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    group.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    group.duration &lt;/span&gt;=&lt;span&gt; pathAnimation.duration;
    
    [maskLayer addAnimation:group forKey:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;packupAnimation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;/span&gt;&lt;span&gt;0.3&lt;/span&gt; * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&lt;span&gt;{
        self.startButton.hidden &lt;/span&gt;=&lt;span&gt; YES;
        [self addLoadingAnimation];
        
    });
}

&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)addLoadingAnimation
{
    CAShapeLayer &lt;/span&gt;*shapeLayer =&lt;span&gt;  ({
        CAShapeLayer &lt;/span&gt;*layer =&lt;span&gt; [CAShapeLayer layer];
        layer.position &lt;/span&gt;=&lt;span&gt; self.view.center;
        layer.bounds &lt;/span&gt;= CGRectMake(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;&lt;span&gt;);
        layer.backgroundColor &lt;/span&gt;=&lt;span&gt; [UIColor clearColor].CGColor;
        layer.strokeColor &lt;/span&gt;=&lt;span&gt; [UIColor redColor].CGColor;
        layer.fillColor &lt;/span&gt;=&lt;span&gt; [UIColor clearColor].CGColor;
        layer.lineWidth &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.f;
        UIBezierPath &lt;/span&gt;*storkePath =&lt;span&gt; [UIBezierPath bezierPathWithOvalInRect:layer.bounds];
        layer.path &lt;/span&gt;=&lt;span&gt; storkePath.CGPath;
        layer.strokeStart &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        layer.strokeEnd &lt;/span&gt;= &lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;;
        
        layer;
    });
    
    [self.view.layer addSublayer:shapeLayer];
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;旋转动画&lt;/span&gt;
    CABasicAnimation *rotateAnimaiton = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;transform.rotation.z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    rotateAnimaiton.duration &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.f;
    rotateAnimaiton.repeatCount &lt;/span&gt;=&lt;span&gt; CGFLOAT_MAX;
    rotateAnimaiton.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    rotateAnimaiton.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    rotateAnimaiton.toValue &lt;/span&gt;= @(M_PI * &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;stroke动画&lt;/span&gt;
    CABasicAnimation *storkeAnimation = [CABasicAnimation animationWithKeyPath:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;strokeEnd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    storkeAnimation.duration &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.f;
    storkeAnimation.repeatCount &lt;/span&gt;=&lt;span&gt; CGFLOAT_MAX;
    storkeAnimation.fillMode &lt;/span&gt;=&lt;span&gt;  kCAFillModeForwards;
    storkeAnimation.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    storkeAnimation.toValue &lt;/span&gt;= @(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    
    CAAnimationGroup &lt;/span&gt;*animationGroup =&lt;span&gt; [CAAnimationGroup animation];
    animationGroup.duration &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.f;
    animationGroup.repeatCount &lt;/span&gt;=&lt;span&gt;CGFLOAT_MAX;
    animationGroup.fillMode &lt;/span&gt;=&lt;span&gt; kCAFillModeForwards;
    animationGroup.removedOnCompletion &lt;/span&gt;=&lt;span&gt; NO;
    animationGroup.animations &lt;/span&gt;=&lt;span&gt; @[rotateAnimaiton, storkeAnimation];
    animationGroup.timingFunction &lt;/span&gt;=&lt;span&gt; [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionDefault];
    
    [shapeLayer addAnimation:animationGroup forKey:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;indicatorAnimation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　核心动画就介绍到这，你可以在&lt;a href=&quot;https://github.com/WuKongCoo1/Demo_CAShapeLayer-CoreAnimation&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;查看demo。&lt;/p&gt;
&lt;p&gt;　　个人原创，转载请注明出处 http://www.cnblogs.com/pretty-guy/p/8268745.html&lt;/p&gt;
&lt;p&gt;　　下一篇博客打算介绍利用CADisplayLink与QuartzCore结合实现动画&lt;/p&gt;
</description>
<pubDate>Thu, 11 Jan 2018 07:39:00 +0000</pubDate>
<dc:creator>pretty guy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pretty-guy/p/8268745.html</dc:identifier>
</item>
<item>
<title>使用腾讯云无服务器云函数（SCF）分析天气数据 - 云加社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8268678.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8268678.html</guid>
<description>&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;6rhra&quot; data-offset-key=&quot;88oi3-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;88oi3-0-0&quot;&gt;&lt;span data-offset-key=&quot;88oi3-0-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;欢迎大家前往&lt;a class=&quot;Link&quot; href=&quot;https://cloud.tencent.com/developer&quot; target=&quot;_blank&quot; data-offset-key=&quot;88oi3-1-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;88oi3-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;云+社区&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;88oi3-2-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;，获取更多腾讯海量技术实践干货哦~&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;Editable-styled&quot; data-block=&quot;true&quot; data-editor=&quot;6rhra&quot; data-offset-key=&quot;b3r01-0-0&quot;&gt;

&lt;/blockquote&gt;
&lt;p&gt;无服务器云函数（SCF）是腾讯云提供的Serverless执行环境，也是国内首款FaaS(Function as a Service，函数即服务) 产品。其核心理念是让用户将重心放在业务的逻辑实现上，而不用关心底层的运维包括服务器、存储、网络、自动扩缩容、负载均衡、代码部署等问题。&lt;/p&gt;
&lt;p&gt;云函数既然以函数这两个字来命名，其应用场景也是跟函数是极为相似的，即对一段数据执行函数计算然后进行输出。腾讯云云函数提供了各类触发器来控制函数的执行条件，代码完全由事件触发，平台根据请求自动平行调整服务资源，所以SCF特别适合需要在某些情景下需要进行数据处理的场合。例如用户上传文件之后过滤是否有违规字段，或者用户上传视频文件之后进行转码等。&lt;/p&gt;
&lt;p&gt;腾讯云的SCF底层也是基于容器进行构建，用户的代码会加载到容器内进行执行，所以效率和性能方面能够得到保证。同时使用VPC和Unix Socket来隔离用户环境与管理环境，保证了SCF使用的安全性。函数可自动在每个地域中随机地选择可用区来运行，免除单可用区运行的故障风险。根据事件请求数量，云函数将自动横向扩容/缩容，无需用户自行配置扩缩容条件，扩容数量理论上没有上限。&lt;/p&gt;
&lt;p&gt;提到云函数SCF也顺便提一下腾讯云将要推出的另外一个产品--批量计算。从本质上来讲批量计算和云函数都是将业务逻辑代码进行抽象而提供统一的入口供用户使用，但是两者在使用场景上也有一些区别。批量计算主要是为了处理大数据而设计的，其最关键的技术是可以对原始数据进行分片而将分片的数据分配到不同的节点进行处理，而云函数本身尽管可以并发执行，但是其处理的一般为流数据，数据量相对较小，耗时也相对较短。举个例子，如果我们需要对用户上传的文件进行实时处理，建议使用云函数SCF，而如果需要将硬盘上现有的比如几个T的用户数据进行处理，建议使用批量计算进行分批处理。&lt;/p&gt;
&lt;p&gt;我们就以一个真实的数据来把玩一下腾讯云无服务器云函数，让大家能更好的理解云函数。数据来源于美国NCDC的天气数据：ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-lite/&lt;/p&gt;
&lt;p&gt;里面记录了从1900年至今所有监控点每天的监控数据，我们以2017年的数据为例（ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-lite/2017/），里面的每一个.gz文件代表一个监控点全年的监控数据。&lt;/p&gt;
&lt;p&gt;010010-99999-2017.gz 解压之后的文件内容如下：&lt;/p&gt;
&lt;blockquote readability=&quot;25&quot;&gt;
&lt;p&gt;2017 01 01 22 -48 -97 10205 340 60 -9999 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 01 23 -47 -99 10202 346 55 -9999 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 02 00 -49 -93 10190 330 90 6 -9999 4&lt;/p&gt;
&lt;p&gt;2017 01 02 01 -47 -96 10190 346 72 -9999 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 02 02 -50 -98 10189 320 40 -9999 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 02 03 -47 -95 10185 328 30 -9999 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 02 04 -52 -95 10176 320 20 -9999 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 02 05 -62 -97 10163 310 20 -9999 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 02 06 -57 -91 10150 260 20 8 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 02 07 -46 -86 10141 230 30 -9999 -9999 -9999&lt;/p&gt;
&lt;p&gt;2017 01 02 08 -37 -72 10131 206 45 -9999 -9999 -9999 .....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NCDC官方也给出了文件格式说明，1-13位记录的是观测时间，14-19位记录了观测的温度（以10倍的摄氏度进行记录）。&lt;/p&gt;
&lt;blockquote readability=&quot;33&quot;&gt;
&lt;p&gt;Field 1: Pos 1-4, Length 4: Observation Year Year of observation,&lt;/p&gt;
&lt;p&gt;rounded to nearest whole hourField 2: Pos 6-7, Length 2: Observation Month Month of observation,&lt;/p&gt;
&lt;p&gt;rounded to nearest whole hourField 3: Pos 9-11, Length 2: Observation Day Day of observation,&lt;/p&gt;
&lt;p&gt;rounded to nearest whole hourField 4: Pos 12-13, Length 2: Observation Hour Hour of observation,&lt;/p&gt;
&lt;p&gt;rounded to nearest whole hourField 5: Pos 14-19, Length 6: Air Temperature The temperature of the&lt;/p&gt;
&lt;p&gt;air UNITS: Degrees Celsius SCALING FACTOR: 10 MISSING VALUE: -9999Field&lt;/p&gt;
&lt;p&gt;6: Pos 20-24, Length 6: Dew Point Temperature The temperature to&lt;/p&gt;
&lt;p&gt;which a given parcel of air must be cooled at constant pressure and&lt;/p&gt;
&lt;p&gt;water vapor content in order for saturation to occur. UNITS: Degrees&lt;/p&gt;
&lt;p&gt;Celsius SCALING FACTOR: 10 MISSING VALUE: -9999&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设我们有这样一个需求：每当我们上传一个观测点的数据gz文件，我们需要统计出该观测点的最高温度，并且在输出中要同时记录该观测点的站点代码（从文件名获取）。&lt;/p&gt;
&lt;p&gt;首先我们在腾讯云COS对象存储上新建两个bucket，fredtest bucket用来上传源数据文件，output bucket用来生成输出文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1187393/bby7c4bhun.png&quot; alt=&quot;&quot;/&gt;存储桶列表&lt;/p&gt;
&lt;p&gt;如果需要模拟批量上传，可以参考下面的Python脚本，其本质就是通过FTP拉取数据然后上传到COS。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/xianl/SCF/blob/master/download.py&quot; target=&quot;_blank&quot;&gt;https://github.com/xianl/SCF/blob/master/download.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面来编写具体的实现函数，主要需要完成下面几件事情。&lt;/p&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;1.上传文件后函数触发，获取上传文件的路径&lt;/li&gt;
&lt;li&gt;2.调用COS SDK下载该文件，保存到/tmp目录&lt;/li&gt;
&lt;li&gt;3.解压文件，读出数据内容&lt;/li&gt;
&lt;li&gt;4.处理数据，计算出温度最大值&lt;/li&gt;
&lt;li&gt;5.将监控点代号以及计算出来的温度最大值除以10保存到/tmp目录&lt;/li&gt;
&lt;li&gt;6.将最终结果上传到COS output bucket。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;核心部分的代码实现如下，完整代码可参考&lt;a href=&quot;https://github.com/xianl/SCF/blob/master/action.py&quot; target=&quot;_blank&quot;&gt;https://github.com/xianl/SCF/blob/master/action.py&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;需要了解的是，main_handler的event参数将传入所上传文件的信息，其本质是一个json文件，例如event'Records''cos''name'可以拿到bucket信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
def action_handler(&lt;span&gt;event&lt;/span&gt;&lt;span&gt;, context):

    #Create CosClient to upload&lt;/span&gt;/&lt;span&gt;download COS file
    appid &lt;/span&gt;= &lt;span&gt;1253142785&lt;/span&gt;      # change to user&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s appid&lt;/span&gt;
    secret_id = u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;   # change to user&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s secret_id&lt;/span&gt;
    secret_key = u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  # change to user&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s secret_key&lt;/span&gt;
    region = u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;          # change to user&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s region&lt;/span&gt;
    cos_client =&lt;span&gt; CosClient(appid, secret_id, secret_key, region)

    #specify the source and destination bucket location
    source_bucket &lt;/span&gt;= &lt;span&gt;event&lt;/span&gt;[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;0&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosBucket&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    source_bucket_file_key &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;event&lt;/span&gt;[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Records&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;0&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cos&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cosObject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;].split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]
    source_file_name &lt;/span&gt;= source_bucket_file_key.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[-&lt;span&gt;1&lt;/span&gt;].split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]
    dest_bucket &lt;/span&gt;= u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    dest_bucket_file_key &lt;/span&gt;= u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/max_temperature_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+&lt;span&gt; source_file_name

    #specify the temp file location
    source_file_tmp_path &lt;/span&gt;= u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; source_file_name
    dest_file_temp_path &lt;/span&gt;= u&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/max_temperature_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; source_file_name

    #download the source file &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; cos bucket and take actions
    download_ret &lt;/span&gt;=&lt;span&gt; download_file(cos_client,source_bucket,source_bucket_file_key,source_file_tmp_path)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; download_ret == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;:
        dest_file_temp &lt;/span&gt;= open(dest_file_temp_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        max_temp &lt;/span&gt;= -&lt;span&gt;999.9&lt;/span&gt;&lt;span&gt;

        #find the maximum temperature
        with gzip.open(source_file_tmp_path) &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; inputfile:
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; inputfile:
                temp &lt;/span&gt;= &lt;span&gt;int&lt;/span&gt;(line[&lt;span&gt;14&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;]) / &lt;span&gt;10.0&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; temp &amp;gt;&lt;span&gt; max_temp:
                    max_temp &lt;/span&gt;=&lt;span&gt; temp

        #write the result to the temp file and upload to the cos bucket
        dest_file_temp.write(source_file_name &lt;/span&gt;+ &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(max_temp))
        dest_file_temp.close()
        upload_ret &lt;/span&gt;=&lt;span&gt; upload_file(cos_client, dest_bucket, dest_bucket_file_key, dest_file_temp_path)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; upload_ret
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在COS的同一个区域建立SCF云函数，执行方法为SCF的函数入口，设置为index.main_handler, 同时在代码框内贴入代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1187393/4g3srs6art.png&quot; alt=&quot;&quot;/&gt;无服务器函数代码&lt;/p&gt;
&lt;p&gt;第三步需要选择触发方式为COS触发，并选择COS bucket为fredtest。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1187393/0h0od1y8f2.png&quot; alt=&quot;&quot;/&gt;设置触发方式&lt;/p&gt;
&lt;p&gt;在fredtest bucket上传010010-99999-2017.gz文件之后，查看SCF的日志可以看到函数被正常触发了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1187393/2hucdbzdj6.png&quot; alt=&quot;&quot;/&gt;无服务器函数日志&lt;/p&gt;
&lt;p&gt;output bucket同时会按照代码逻辑生成max_temperature_010010-99999-2017 文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1187393/m1559xuo83.png&quot; alt=&quot;&quot;/&gt;输出文件&lt;/p&gt;
&lt;p&gt;文件内容为站点代码以及最后计算出的最大温度14.3℃，满足预期需求。至此，一个简单的SCF实际数据应用场景的demo就跑完了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1187393/5tvvohbq6u.png&quot; alt=&quot;&quot;/&gt;计算结果&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;可以看到腾讯云SCF非常适用这种单入单出的数据处理场景，业务人员只需编写代码并在界面上进行简单的配置即可实现业务逻辑，而其所需接触的对象仅仅是例如对象存储，Message Queue，数据库等应用层对象而完全不需关心服务器，网络等基础资源，简化了很大一部分人为操作。如果能够再结合API Gateway等产品，也能够做到各个系统的业务解耦以及迭代开发。&lt;/p&gt;
&lt;p&gt;另外，至于前文提到的批量计算，目前腾讯云还处于内测阶段，等公测之后我还会写一篇文章利用2017年的上万各监测点的数据使用批量计算来计算出2017年整年的最高温度，尽请期待。&lt;/p&gt;

&lt;h2&gt;相关阅读&lt;/h2&gt;


</description>
<pubDate>Thu, 11 Jan 2018 07:30:00 +0000</pubDate>
<dc:creator>云加社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8268678.html</dc:identifier>
</item>
<item>
<title>docker：（4）利用WebHook实现持续集成 - 肖哥哥</title>
<link>http://www.cnblogs.com/xiaochangwei/p/8268509.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaochangwei/p/8268509.html</guid>
<description>&lt;p&gt;研发小伙伴可能对下列操作步骤会深有体会&lt;/p&gt;
&lt;p&gt;写代码--》提交代码--》打包--》发布&lt;/p&gt;
&lt;p&gt;在项目调试测试阶段，可能经常需要重复上面的步骤，以便将最新代码部署到特定环境供测试人员或其他人员使用&lt;/p&gt;
&lt;p&gt;CI即持续集成的提出及各种解决方案，减轻了很多最初简单但繁琐的工作&lt;/p&gt;
&lt;p&gt;本文将通过提交代码到git，然后通过webHook触发jenkins打包并发布到相应容器中，开发人员只需提交代码，后续打包发布都自动实现&lt;/p&gt;
&lt;p&gt;git　　：我使用的码云   我的主页为： &lt;a href=&quot;https://gitee.com/xiaochangwei&quot; target=&quot;_blank&quot;&gt;https://gitee.com/xiaochangwei&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;jenkins：&lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins ver. 2.89.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tomcat 8 jdk8 maven3.5&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
[root@iZnz7e74o4ag3oZ webapps]# java -&lt;span&gt;version
java version &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;1.8.0_121&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
Java(TM) SE Runtime Environment (build &lt;/span&gt;&lt;span&gt;1.8&lt;/span&gt;.0_121-&lt;span&gt;b13)
Java HotSpot(TM) &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;-Bit Server VM (build &lt;span&gt;25.121&lt;/span&gt;-&lt;span&gt;b13, mixed mode)
[root@iZnz7e74o4ag3oZ webapps]# mvn &lt;/span&gt;-&lt;span&gt;version
&lt;strong&gt;Apache Maven &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;3.5&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;/strong&gt; (ff8f5e7444045639af65f6095c62210b5713f426; &lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-04T03:&lt;span&gt;39&lt;/span&gt;:&lt;span&gt;06&lt;/span&gt;+&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;)
Maven home: &lt;/span&gt;/usr/local/src/&lt;span&gt;maven
Java version: &lt;/span&gt;&lt;span&gt;1.8&lt;/span&gt;&lt;span&gt;.0_121, vendor: Oracle Corporation
Java home: &lt;/span&gt;/usr/local/src/jdk/&lt;span&gt;jre
Default locale: en_US, platform encoding: UTF&lt;/span&gt;-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
OS name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, version: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.10.0-693.2.2.el7.x86_64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, arch: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;amd64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, family: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
[root@iZnz7e74o4ag3oZ webapps]# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置好环境后，在tomcat中运行jenkins，并设置好用户名密码确保能正常登录使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111135441301-1835506626.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;操作步骤：&lt;/p&gt;
&lt;p&gt;1.安装插件   Generic Webhook Trigger Plugin、Deploy to container Plugin、Git plugin 由于这里暂时未发布到docker中，通过Deploy to container Plugin发布到tomcat中的&lt;/p&gt;
&lt;p&gt;2.上传maven项目到https://gitee.com&lt;/p&gt;
&lt;p&gt;3.jenkins中新建项目ci&lt;/p&gt;
&lt;p&gt;　　3.1 配置提交的代码地址，Add有权限的用户名和密码（我的是私有项目），指定分支&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111140333972-1127932355.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3.2：配置maven命令以及发布到的tomcat&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111140612613-867344615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：发布项目的tomcat需要设置用户信息，即修改conf下的user.xml  具体可以参考我很早之前写的 &lt;a href=&quot;http://www.cnblogs.com/xiaochangwei/p/4952644.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/xiaochangwei/p/4952644.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;       这样就可以&lt;strong&gt;&lt;span&gt;手动&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;构建项目了，请确保手动构建能成功后再进行下列操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　遇见的问题及解决方案：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果构建时提示权限不对&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　生成公钥：  ssh-keygen -t rsa  一直回车直结束&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　cat ~/.ssh/id_rsa.pub   将内容增加到码云上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111141428238-1096786952.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果还提示没权限&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　手动先在jenkins运行的机器上clone一次代码  如 git clone git@gitee.com:xiaochangwei/ci-demo.git  注意输入yes&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111141910238-770251847.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　然后再看.ssh目录，多了一个known_hosts 里面有码云了，然后再手动构建，应该就能成功了&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111142158066-789167303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　至此，手动打包并部署就已经实现了&lt;/p&gt;
&lt;p&gt;　　------------------------------自动部署 --------------------------------------------------&lt;/p&gt;
&lt;p&gt;　　1. 安装上述插件后勾选Generic Webhook Trigger 增加post参数 ref  expression值为 $.ref   注意有个点&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111143730566-1454464369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　增加optional filter&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111143910879-1032462815.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　其实上面这部分不用设置也行，尤其是只会在jenkins中部署一个项目的一个分支时，只需要勾选上Generic Webhook Trigger就可以的&lt;/p&gt;
&lt;p&gt;　　2. 在码云中增加hook：http://jenkins登录账号:jenkins登录密码@jenkins部署的地址:端口号/jenkins/&lt;span&gt;&lt;em&gt;&lt;strong&gt;generic-webhook-trigger/invoke&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; （红色这部分不要变）&lt;/p&gt;
&lt;p&gt;　　　　同时勾选push或者其他你认为需要触发部署的事件&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111144215754-675303911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　提交后点击测试，如果返回ok，则表示成功，切换到jenkins，查看项目是否能够自动部署&lt;/p&gt;
&lt;p&gt;　　我自己写了一个接口用来获取点击测试后，到底请求了些什么　　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111144825207-1616401420.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　格式化下内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hook_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;push_hooks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;total_commits_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;before&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0000000000000000000000000000000000000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;肖哥哥&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;git_svn_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;svn://gitee.com/xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path_with_namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiaochangwei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default_branch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;master&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;git_http_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo.git&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name_with_namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;肖哥哥/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;git_ssh_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;git@gitee.com:xiaochangwei/ci-demo.git&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo.git&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;homepage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commits_more_than_ten&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;refs/heads/master&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [{
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;肖哥哥&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2015-11-06T13:21:07+08:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;317409898@qq.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ec7159240a346fa5988913aa3057b902a4acb126&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A Test For WebHooks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo/commit/ec7159240a346fa5988913aa3057b902a4acb126&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2015-11-06T13:21:07+08:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }],
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;after&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ec7159240a346fa5988913aa3057b902a4acb126&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;肖哥哥&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;372286&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-11T12:38:38+08:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiaochangwei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;317409898@qq.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其实多建立几个项目然后获取信息后会发现，不同项目间存在差异的就是project.git_ssh_url 和分支 ref&lt;/p&gt;
&lt;p&gt;　　至此，单个项目的自动部署就完了&lt;/p&gt;

&lt;p&gt;　　如果你在jenkins中有多个项目，你触发其中的一个webHook你就会发现，所有的项目都在构建？&lt;/p&gt;
&lt;p&gt;　　这就有点不科学了，本来只想构建A项目，结果Abc项目都构建了？  要解决这个就需要用到上面提到的post param 和 filer 了&lt;/p&gt;

&lt;p&gt;　　解析触发自动构建的请求参数，ref和project.git_ssh_url是差异性的东西，那就根据两个来区分项目&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111145648144-785345573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　有这上面的两个post参数还不行，因为只是获取到了对应的参数值&lt;/p&gt;
&lt;p&gt;　　其实要想区分不同的项目也简单，只要获取到的ref还有url 和需要构建的项目分支和 git地址相同就构建，否则就不构建&lt;/p&gt;
&lt;p&gt;　　optional filter提供的方式就是最简单的正则匹配&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111145903972-1212407421.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Expression设置为  ^(refs/heads/master)_(git@gitee.com:xiaochangwei/ci-demo.git)$  注意修改为自己的项目地址&lt;/p&gt;
&lt;p&gt;　　Text 设置为　　　$ref_$project.git_ssh_url&lt;/p&gt;
&lt;p&gt;　　保存，再次构建，是不是只触发了一个项目了，而不是所有项目了&lt;/p&gt;

&lt;p&gt;　　测试：&lt;/p&gt;
&lt;p&gt;　　　　1.提交代码， 提交代码后看到jenkins就自动编译打包了&lt;/p&gt;
&lt;p&gt;　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111150336832-790832656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　2.查看编译日志：jenkins收到了webhook请求，并且拉取了代码，提交信息和我们提交代码时输入信息一致　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/658609/201801/658609-20180111150546597-1185156821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　有同学质疑我这里为啥失败了，是不是自动构建不可用，不是哈， 我这里是用的阿里服务器，内存不够导致了自动发布失败&lt;/p&gt;
&lt;p&gt;　　　　完整编译日志如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Generic Cause
Building &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; workspace /root/.jenkins/workspace/&lt;span&gt;ci
GenericWebhookEnvironmentContributor Received:

{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;before&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;49e44600daf4dfc84a65486682adb26cbc1ebbc5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;after&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2eca30803759e021f658c92c136aa72dc026c3be&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;refs/heads/master&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;372286&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\u8096\u54e5\u54e5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\u8096\u54e5\u54e5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiaochangwei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;homepage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2eca30803759e021f658c92c136aa72dc026c3be&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test auto package and deploy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-11T15:02:08+08:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo/commit/2eca30803759e021f658c92c136aa72dc026c3be&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;author&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiaochangwei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;changw.xiao@qq.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-01-11T15:02:08+08:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}}],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;total_commits_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commits_more_than_ten&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;git_ssh_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;git@gitee.com:xiaochangwei/ci-demo.git&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;git_http_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://gitee.com/xiaochangwei/ci-demo.git&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;git_svn_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;svn://gitee.com/xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiaochangwei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name_with_namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\u8096\u54e5\u54e5/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path_with_namespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xiaochangwei/ci-demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default_branch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;master&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;enterprise&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hook_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;push_hooks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;}


Contributing variables:

    &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt; = refs/heads/&lt;span&gt;master
    project.git_ssh_url &lt;/span&gt;= git@gitee.com:xiaochangwei/ci-&lt;span&gt;demo.git


 &lt;/span&gt;&amp;gt; git rev-parse --&lt;span&gt;is&lt;/span&gt;-inside-work-tree # timeout=&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
Fetching changes &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the remote Git repository
 &lt;/span&gt;&amp;gt; git config remote.origin.url git@gitee.com:xiaochangwei/ci-demo.git # timeout=&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
Fetching upstream changes &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; git@gitee.com:xiaochangwei/ci-&lt;span&gt;demo.git
 &lt;/span&gt;&amp;gt; git --version # timeout=&lt;span&gt;10&lt;/span&gt;
&lt;span&gt;using&lt;/span&gt; GIT_ASKPASS to &lt;span&gt;set&lt;/span&gt;&lt;span&gt; credentials 
 &lt;/span&gt;&amp;gt; git fetch --tags --progress git@gitee.com:xiaochangwei/ci-demo.git +refs/heads&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;:refs/remotes/origin/*
 &amp;gt; git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 &amp;gt; git rev-parse refs/remotes/origin/origin/master^{commit} # timeout=10
Checking out Revision 2eca30803759e021f658c92c136aa72dc026c3be (refs/remotes/origin/master)
 &amp;gt; git config core.sparsecheckout # timeout=10
 &amp;gt; git checkout -f 2eca30803759e021f658c92c136aa72dc026c3be
Commit message: &quot;test auto package and deploy&quot;
 &amp;gt; git rev-list --no-walk 49e44600daf4dfc84a65486682adb26cbc1ebbc5 # timeout=10
Parsing POMs
Established TCP socket on 44312
[ci] $ /usr/local/src/jdk/bin/java -cp /root/.jenkins/plugins/maven-plugin/WEB-INF/lib/maven35-agent-1.12-alpha-1.jar:/usr/local/src/maven/boot/plexus-classworlds-2.5.2.jar:/usr/local/src/maven/conf/logging jenkins.maven3.agent.Maven35Main /usr/local/src/maven /usr/local/src/tomcat/webapps/jenkins/WEB-INF/lib/remoting-3.14.jar /root/.jenkins/plugins/maven-plugin/WEB-INF/lib/maven35-interceptor-1.12-alpha-1.jar /root/.jenkins/plugins/maven-plugin/WEB-INF/lib/maven3-interceptor-commons-1.12-alpha-1.jar 44312
&amp;lt;===[JENKINS REMOTING CAPACITY]===&amp;gt;channel started
Executing Maven:  -B -f /root/.jenkins/workspace/ci/pom.xml clean package -Dmaven.test.skip=true
[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building docker-demo 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ ci-demo ---
[INFO] Deleting /root/.jenkins/workspace/ci/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ci-demo ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ci-demo ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 6 source files to /root/.jenkins/workspace/ci/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ci-demo ---
[INFO] Not copying test resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ci-demo ---
[INFO] Not compiling test sources
[INFO] 
[INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ ci-demo ---
[INFO] Tests are skipped.
[INFO] 
[INFO] --- maven-war-plugin:2.6:war (default-war) @ ci-demo ---
[INFO] Packaging webapp
[INFO] Assembling webapp [ci-demo] in [/root/.jenkins/workspace/ci/target/ci-demo]
[INFO] Processing war project
[INFO] Webapp assembled in [439 msecs]
[INFO] Building war: /root/.jenkins/workspace/ci/target/ci-demo.war
[INFO] 
[INFO] --- spring-boot-maven-plugin:1.5.9.RELEASE:repackage (default) @ ci-demo ---
ERROR: Maven JVM terminated unexpectedly with exit code 137
Finished: FAILURE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　end&lt;/p&gt;
</description>
<pubDate>Thu, 11 Jan 2018 07:09:00 +0000</pubDate>
<dc:creator>肖哥哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaochangwei/p/8268509.html</dc:identifier>
</item>
<item>
<title>一种基于http协议的敏感数据传输方案 - 四度空间的平面</title>
<link>http://www.cnblogs.com/cfyrwang/p/8215512.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cfyrwang/p/8215512.html</guid>
<description>&lt;p&gt;最近公司需要通过公网与其它平台完成接口对接，但是基于开发时间和其它因素的考虑，本次对接无法采用https协议实现。既然不能用https协议，那就退而求其次采用http协议吧！&lt;/p&gt;
&lt;p&gt;那么问题来了！在对接的过程中我们需要对如下问题进行相关的考虑：&lt;/p&gt;
&lt;h3&gt;1、敏感信息的不可见性&lt;/h3&gt;
&lt;p&gt;　　使用http协议传输数据很容易被抓包监听传输内容，如果这些数据中存在敏感信息的话，风险太大了。因此我们需要对我们的传输数据进行一定的加密处理，即使数据被预期接收方之外的其它不法分子拦截，也无法轻易的破译此次请求的传输内容！最简单的方案就是对传输数据使用Base64方法转码，使得数据具备一定的不可读性。当然啦，这种方案实际上是不可取的，因为Base64方案太容易被识别然后解密了。比较常见的做法是，发送方和接收方彼此约定密钥，发送方发送时用密钥对数据加密，接收方用密钥对数据解密。比如AES128加密算法？但是AES128加密也存在局限性，需要定期维护。就算你认为你这方的内部人员是可信的，你也无法无法保证对方的密钥不会泄漏吧。当然聪明的你可能会说，那我就使用非对称加密算法，比如RSA好了。好像是没啥问题？但是如果数据量比较大的话，RSA加密方法对服务器的压力也是很大的。。所以本次结合了AES和RSA来实现我们的数据传输。&lt;/p&gt;
&lt;h3&gt;2、防止数据被篡改&lt;/h3&gt;
&lt;p&gt;　　用签名！用签名！用签名！重要的事情说三遍？例如：当数据被封装好后，我们可以用md5算法计算出待传输数据的摘要字符串作为签名。当服务器接受到数据后，同样使用md5对数据做摘要，同请求报文中的签名作比较，若不一致则说明该http请求数据已被篡改。但仅仅使用md5对数据作摘要就够了吗？万一攻击方发现了数据签名是用md5做的，攻击方只需要对已篡改的数据再做一次md5，同时更新请求中的签名即可。因此如何生成可靠的签名也需要我们仔细的斟酌。有几点我觉得是需要注意的：1、无法轻易的根据签名推反推出当前签名所采用的算法；2、签名算法的复杂性、可靠性；3、不要直接对传输数据作签名，可以先对请求数据作摘要，再使用加密算法生成签名，既可以提升效率也在一定程度上提高了安全性。&lt;/p&gt;
&lt;h3&gt;3、http请求的真实性&lt;/h3&gt;
&lt;p&gt;　　有很多方案可以保证http请求的真实性。比如使用token来进行身份验证，可以借鉴微信的身份验证方案或者jwt实现。本次我们只做了简单的处理，在http请求头中设置了一个时间戳，当服务器接收到数据后，会取出http请求中的时间戳，同时与服务器当前时间作比较。若时间间隔过大，则认为该请求是不真实的，直接拒绝并返回！&lt;/p&gt;

&lt;p&gt;上面简单的介绍了http传输敏感数据需要注意的地方，本方案具体实现思路如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/400990/201801/400990-20180106220407018-2134135630.png&quot; alt=&quot;&quot; width=&quot;1005&quot; height=&quot;769&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;发送方需要干的事&lt;/h3&gt;
&lt;h3&gt;1、生成签名&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;构造传输对象，并将传输对象转换成json字符串&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　　　   本次接口传输采用rest模式作为标准，先构造待传输对象。构造完成后借用Google的Gson包来将对象转换成json字符串。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用md5算法生成json字符串摘要&lt;/li&gt;
&lt;li&gt;使用RSA公钥对摘要字符串作加密处理，生成签名&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2、加密请求报文&lt;/h3&gt;
&lt;p&gt;　　发送方创建一个http请求时，需要动态的生成一个AESKey，同时使用该AESKey对请求数据作加密处理。为什么每次请求都需要生成一个新的AESKey呢？主要还是为了防止数据泄漏。如果固定使用相同的Key，万一Key被发送方内部人员泄漏了，其实也对发送数据的加密也就没有意义了。&lt;/p&gt;
&lt;h3&gt;3、加密AES密钥&lt;/h3&gt;
&lt;p&gt;　　在http请求传递数据时，AES密钥也会被同样传递过去。为了保证AES密钥的安全性，我们采用RSA公钥对AES密钥作加密处理。处理完后会放到Http请求头的Authencation字段中。&lt;/p&gt;
&lt;h3&gt;4、构造http请求&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;将第一步生成的签名放到http请求头中的Authencation字段中&lt;/li&gt;
&lt;li&gt;将加密后的AES密钥放到http请求头中的SecurityKey字段中&lt;/li&gt;
&lt;li&gt;将该请求创建时间放到http请求头中的TimesTamp字段中&lt;/li&gt;
&lt;li&gt;将第二步生成的加密报文放到http body中&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;5、处理http请求结果&lt;/h3&gt;
&lt;p&gt;　　在此之前，请求方和发送方需要约定返回结果的加密方式。发送方接收到http请求返回结果后，通过约定的方式对返回结果进行处理，以供后续使用。这里我们仅简单的约定接收方使用接收到的AES密钥对返回数据作加密后返回即可。&lt;/p&gt;
&lt;h3&gt;接收方需要干的事&lt;/h3&gt;
&lt;h3&gt;1、请求的真实性校验&lt;/h3&gt;
&lt;p&gt;　　获取http请求头中的TimesTamp字段，同时与系统时间作比较。如果请求时间与当前系统时间间隔在五分钟之内，则认为请求是真实的，反之则认为请求是非法的。&lt;/p&gt;
&lt;h3&gt;2、获取AES密钥&lt;/h3&gt;
&lt;p&gt;　　从http请求中的SecurtiyKey获取被加密的AES密钥，使用RSA密钥对其解密，获取可供使用的AES密钥&lt;/p&gt;
&lt;h3&gt;3、获取请求报文&lt;/h3&gt;
&lt;p&gt;　　从httpbody中获取请求报文，使用上面第二步生成的AES密钥解密请求报文&lt;/p&gt;
&lt;h3&gt;4、验签&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;对第三步生成的请求报文作md5摘要生成md5Str&lt;/li&gt;
&lt;li&gt;获取http请求头中的Authencation字符串，接着使用接收方保存的RSA密钥对其作解密处理获取rsaDecryptStr&lt;/li&gt;
&lt;li&gt;比较md5Str和rsaDecryptStr是否一致，若一致则验签通过&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;5、业务处理&lt;/h3&gt;
&lt;p&gt;　　使用第三步得到的请求报文进行业务处理&lt;/p&gt;
&lt;h3&gt;6、返回处理结果&lt;/h3&gt;
&lt;p&gt;　　使用第二步获取到的AES密钥对返回结果作加密处理并返回&lt;/p&gt;

&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;　　本次http请求传输敏感数据方案的实现，上面做了详细的介绍。另外多提一下。在接收方进行验签的时候，我们可以定义一个过滤器来过滤指定http请求。在过滤器中完成验签的工作，以避免在业务处理代码中掺杂验签代码！同时使用过滤器也可以对请求返回结果进行加工处理，在这里就是用AES密钥加密返回结果啦！&lt;/p&gt;
</description>
<pubDate>Thu, 11 Jan 2018 06:13:00 +0000</pubDate>
<dc:creator>四度空间的平面</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cfyrwang/p/8215512.html</dc:identifier>
</item>
<item>
<title>文字太多？控件太小？试试 TextView 的新特性 Autosizeing 吧！ - 承香墨影</title>
<link>http://www.cnblogs.com/plokmju/p/8268005.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/plokmju/p/8268005.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b5006615e2c?w=900&amp;amp;h=500&amp;amp;f=jpeg&amp;amp;s=112109&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Hi，大家好，我是承香墨影！&lt;/p&gt;
&lt;p&gt;Android 8.0 已经发布了有一阵子了，如果你有在关注它，你应该会知道它新增了一个对于 TextView 字体大小变动的新特性：&lt;strong&gt;Autosizing&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本身这个新特性，如果只是在 Android 8.0 才有效，对于开发者而言，就显得有点鸡肋了，可能还需要一段时间才能普及使用。不过呢，在 Android Support v26 之上，也对 Autosizeing 提供了兼容支持，最低可以支持到 Android Level 14。&lt;/p&gt;
&lt;p&gt;这样，我们就有了研究的必要了，接下来本文就来讲解一下，Autosizeing 属性，你在使用过程中的所有细节。&lt;/p&gt;
&lt;h2 id=&quot;一什么是-autosizeing&quot;&gt;一、什么是 Autosizeing？&lt;/h2&gt;
&lt;p&gt;Autosizeing 允许 TextView 根据其内部文本的显示大小，动态的调整其 TextSize 属性值得大小，通过此设置，开发者可以很轻松的在具有动态内容的情况下，对不同的屏幕中，文本大小进行优化。&lt;/p&gt;
&lt;p&gt;简单来说，一个 100dp 长度的 TextView ，正常来说只能显示 10 个 10dp 的文字，而如果它的内容超出了 10 个字，以前的通用做法，是通过属性设置，让它在末尾显示 &quot;…&quot; 。而采用了 Autosizeing 这个新特性，它的方案是将字体的尺寸缩小，例如缩小到 8dp，让 TextView 可以容纳下更多的文字，显示完全。而这一切，使用 Autosizeing 我们只需要设置一些属性就可以做到，非常的简单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b5c431829d5?w=386&amp;amp;h=160&amp;amp;f=gif&amp;amp;s=567336&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面这个 Gif 应该可以很直观的描述 Autosizeing 的特性，而它也反映出，触发 Autosizeing 重新计算 TextSize 的时机有两个：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;TextView 中的文字增多到无法容纳的地步。&lt;/li&gt;
&lt;li&gt;TextView 本身的尺寸被放大或缩小了。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Autosizeing 的核心设计思想，就是为了让 文本 尽可能的完全显示在既定大小的 TextView 中，哪怕是修改它的文字大小。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;二使用-autosizeing&quot;&gt;二、使用 Autosizeing&lt;/h2&gt;
&lt;h3 id=&quot;autosizeing-不同使用方式&quot;&gt;2.1 Autosizeing 不同使用方式&lt;/h3&gt;
&lt;p&gt;前面也提到，使用 Autosizeing 其实是区分使用 Android Api Level 26（8.0） 和 使用 Support Library v26 两种。它们的使用方式，会略微有点区别。&lt;/p&gt;
&lt;p&gt;下面，我们先来了解一下它们之间的区别。&lt;/p&gt;
&lt;p&gt;Autosizeing 的带来的效果很简单，就是根据文字的内容，动态修改 TextSize ，而想要使用它，可以通过动态编码和静态的 layout-xml 布局属性的方式使用。&lt;/p&gt;
&lt;p&gt;对于 Android 8.0 Api：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;动态编码是直接操作的 TextView 上的方法。&lt;/li&gt;
&lt;li&gt;layout-xml 布局属性，是使用的 &lt;code&gt;android:&lt;/code&gt; 命名空间下的属性进行设置。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;TextView&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200dp&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:autoSizeTextType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;uniform&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而在低于 Android 8.0 的设备上，只能使用 Support v26 了。此时，TextView 上并没有对应的方法能让我们调用，所以我们需要绕一层。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;动态编码，使用 TextViewCompat 中提供的方法。&lt;/li&gt;
&lt;li&gt;layout-xml 布局属性，需要使用 &lt;code&gt;app:&lt;/code&gt; 命名空间下的属性，记住要添加 &lt;code&gt;xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/code&gt; 这个命名空间。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:android=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:app=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextView&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200dp&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      app:autoSizeTextType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;uniform&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用标准的 8.0 Api 的使用场景，在现阶段会非常的少，所以我们这里只是简单了解一下区别就好了，下面的文章内容会主要以 Support v26 的方式进行讲解。&lt;/p&gt;
&lt;h3 id=&quot;autosizeing-基础&quot;&gt;2.2 Autosizeing 基础&lt;/h3&gt;
&lt;p&gt;到这里，你应该对 Autosizeing 有了基本的概念，知道它是干什么的。&lt;/p&gt;
&lt;p&gt;那么，如果让你来设计一个这样的功能，你会想要做到哪些点？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;有开关限制，只在我们需要的 TextView 上，才开启这个特性。&lt;/li&gt;
&lt;li&gt;允许设置边界值，最大缩放和最小缩放。&lt;/li&gt;
&lt;li&gt;能配置每次缩放的最小尺寸，例如：10sp 为粒度进行缩放。&lt;/li&gt;
&lt;li&gt;能预设一些缩放的定位尺寸，例如预设一组尺寸，只让它在这个范围内的值中选一个。&lt;/li&gt;
&lt;li&gt;方便的 Api ，可以通过 layout-xml 属性和动态编码的方式操作它。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;嗯，功能上大概就是这些了，已经满足我的需要了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你看了 Autosizeing 的文档，你会发现，它全部都支持！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;1.7058823529412&quot;&gt;
&lt;p&gt;Autosizeinging TextView Doc:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.google.cn/guide/topics/ui/look-and-feel/autosizing-textview.html&quot; class=&quot;uri&quot;&gt;https://developer.android.google.cn/guide/topics/ui/look-and-feel/autosizing-textview.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;autosizeing-开关&quot;&gt;2.3 Autosizeing 开关&lt;/h3&gt;
&lt;p&gt;Autosizeing 是直接作用在 TextView 上的，对于它的开启和关闭，我们可以直接操作 autoSizeTextType 属性。&lt;/p&gt;
&lt;p&gt;对于动态编码，可以使用 TextViewCompat 的 &lt;code&gt;setAutosizeingTextTypeWithDefaults()&lt;/code&gt; 方法，下面是它的方法签名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b500426853d?w=761&amp;amp;h=257&amp;amp;f=jpeg&amp;amp;s=56075&quot; alt=&quot;setAutosizeingType&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参数中的 &lt;code&gt;textView&lt;/code&gt; 是我们要操作的 TextView，而 &lt;code&gt;autoSizeTextType&lt;/code&gt;，就是我们关心的 Autosizeing 的开关属性了，它接受两个参数。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AUTO_SIZE_TEXT_TYPE_NONE：关闭自动调整功能。&lt;/li&gt;
&lt;li&gt;AUTO_SIZE_TEXT_TYPE_UNIFORM：开启统一缩放碎片轴和垂直轴。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们也可以通过 layout-xml 属性的方式，来设置 autoSizeTextType，因为是 Support ，所以使用的 &lt;code&gt;app：&lt;/code&gt; 命名空间下的属性。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:android=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:app=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextView&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200dp&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      app:autoSizeTextType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;uniform&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app:autoSizeTextType&lt;/code&gt; 同样接收两个参数 uniform 和 none，含义和上面代码中设置的参数一致。&lt;/p&gt;
&lt;h3 id=&quot;操作-autosizeing-的粒度&quot;&gt;2.4 操作 Autosizeing 的粒度&lt;/h3&gt;
&lt;p&gt;粒度的含义其实就是 Autosizeing 每次变动的最小单位，当然在设置粒度的同时，你还需要为其设置一个缩放的范围，最大值和最小值。&lt;/p&gt;
&lt;p&gt;这样，在 Autosizeing 生效的时候，它会在这个范围内，按照我们设定的粒度，去动态的调整文字的大小。&lt;/p&gt;
&lt;p&gt;想要操作这些属性，动态编码的方式你需要调用 TextViewCompat 的 &lt;code&gt;setAutosizeingTextTypeUniformWithConfiguration()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b5004151ae8?w=777&amp;amp;h=589&amp;amp;f=jpeg&amp;amp;s=128118&quot; alt=&quot;setConfiguration&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参数很直观，没什么好解释的，一个最小值、一个最大值、变动的粒度、前面设置的尺寸的单位。&lt;/p&gt;
&lt;p&gt;我们可以通过 unit 参数，通过 TypedValue 来设置前面设置的几个参数的单位，例如：sp 、dp、px，都可以。&lt;/p&gt;
&lt;p&gt;这里操作的参数，在 layout-xml 中，都提供了对应的属性可供我们使用。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:android=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:app=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextView&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200dp&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      app:autoSizeTextType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;uniform&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      app:autoSizeMinTextSize=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;12sp&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      app:autoSizeMaxTextSize=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100sp&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      app:autoSizeStepGranularity=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;2sp&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们举两个例子看看，就清晰了。&lt;/p&gt;
&lt;p&gt;在默认情况下，如果你没有设置这三个属性，Autosizeing 会根据当前 TextView 控件的大小，估算出一个最大值和最小值，并且将粒度设置为 1sp 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b608f27c2a4?w=720&amp;amp;h=1280&amp;amp;f=gif&amp;amp;s=1084439&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，它设置的尺寸是跳动的，非常的不可控，我们很难知道下一次缩放，会将 文本 尺寸，设置成多大，所以才需要使用 &lt;strong&gt;粒度&lt;/strong&gt; 的概念来限制它缩放的大小。&lt;/p&gt;
&lt;p&gt;例如，现在我们修改上面的例子，将（minSize,maxSize），限制在 （10sp,80sp）之间，粒度（Granularity）设置为 10sp，此时再来看它的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b653c035a96?w=720&amp;amp;h=1280&amp;amp;f=gif&amp;amp;s=1437996&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里可以看到，它每次放大或者缩小，粒度都是以 10sp 为基准。&lt;/p&gt;
&lt;p&gt;所以，如果你需要使用 Autosizeing ，强烈建议你使用 &lt;strong&gt;粒度&lt;/strong&gt; 来控制它缩放的大小，让它在可控的范围内使用。需要注意的是，这里介绍的三个属性，一定要设置在一个合理的范围内，否则 TextView 会认为这是一个无效的设置，将它忽略掉。&lt;/p&gt;
&lt;h3 id=&quot;预设尺寸范围&quot;&gt;2.5 预设尺寸范围&lt;/h3&gt;
&lt;p&gt;如果你按上一小节，介绍的属性，设置了 Autosizeing 的粒度，就可以在这个范围内，根据我们设置的粒度进行缩放。通常，使用粒度来控制基本上可以达到我们的要求，但是如果对缩放有更精准的要求，例如：[10.15,40,60,100] 这样的缩放，使用粒度就达不到我们的要求了。&lt;/p&gt;
&lt;p&gt;针对这样的操作，Autosizeing 也提供了对应的属性来设置，那就是 预设尺寸（Preset Size）。&lt;/p&gt;
&lt;p&gt;如果想要使用预设尺寸，动态编码的方式，你需要操作 TextViewCompat 的 &lt;code&gt;setAutosizeingTextTypeUniformWithPresetSizes()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b5034e8f55e?w=776&amp;amp;h=345&amp;amp;f=jpeg&amp;amp;s=79650&quot; alt=&quot;preset_size_method&quot;/&gt;&lt;/p&gt;
&lt;p&gt;预设尺寸可以接受一个尺寸数组，Autosizeing 就会从我们设定的尺寸数组中，取一个尺寸进行设置。同时你可以为这些尺寸设置一个统一的尺寸单位。&lt;/p&gt;
&lt;p&gt;如果想要在 layout-xml 使用属性的形式使用预设尺寸，你首先需要一个 array 的资源，然后通过 &lt;code&gt;autoSizePresetSizes&lt;/code&gt; 属性进行设置即可。&lt;/p&gt;
&lt;p&gt;array 资源的格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;array&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;autosize_text_sizes&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;10sp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;12sp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;20sp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;40sp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;100sp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义好 array 的尺寸资源之后，就可以在 layout-xml 中使用它。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:android=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    xmlns:app=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;    android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;&amp;lt;TextView&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      android:layout_width=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      android:layout_height=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200dp&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      app:autoSizeTextType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;uniform&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;      app:autoSizePresetSizes=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;@array/autosize_text_sizes&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预设尺寸非常简单，这里就不再给运行效果了。&lt;/p&gt;
&lt;h2 id=&quot;三查缺补漏&quot;&gt;三、查缺补漏&lt;/h2&gt;
&lt;p&gt;到这里，我们就把 Autosizeing 的基本使用细节，都讲解清楚了。但是，依然还有一些概念，是在文档上没有反应出来的，下面我们就来讲讲这些 “经验”。&lt;/p&gt;
&lt;h3 id=&quot;textview-必须限定尺寸&quot;&gt;3.1 TextView 必须限定尺寸&lt;/h3&gt;
&lt;p&gt;如果你想要使用 Autosizeing，就必须对 TextView 这个控件，限定大小，不能使用 &lt;code&gt;wrap_content&lt;/code&gt; 来作为限定符。&lt;/p&gt;
&lt;p&gt;用官方文档话来说，使用 &lt;code&gt;wrap_content&lt;/code&gt; 可能出现不可预料的效果。其实这也非常好理解，如果 TextView 的尺寸不是固定的，那就不存在 TextView 重新计算尺寸的依据了，同比放大 TextView 就可以达到容纳文字的效果了。&lt;/p&gt;
&lt;p&gt;我在实际使用过程中会发现，它会阻止放大效果。例如一个 TextView 中使用了 Autosizeing，一直增加文本内容，是可以正常缩小的，但是当你删除文本的时候，它并不会随之放大文字尺寸。&lt;/p&gt;
&lt;p&gt;但是不确定还有没有其它的问题，这里建议按照官方文档的建议来操作，限定 TextView 的尺寸。&lt;/p&gt;
&lt;h3 id=&quot;autosizeing-不能作用在-edittext-中&quot;&gt;3.2 Autosizeing 不能作用在 EditText 中&lt;/h3&gt;
&lt;p&gt;虽然通常作用在 TextView 上的新属性，对于同样用于显示文本的控件，例如：Button、EditText 等，都是同样适用的。&lt;/p&gt;
&lt;p&gt;但是 Autosizeing 就是这么特殊，它只对单纯只能显示 文本 的控件有效，例如 Button，而对于 EditText 这种可以输入 文本 的控件，是无效的。&lt;/p&gt;
&lt;p&gt;这个，你可以在 AppCompatTextViewAutosizeingHelper 这个类的 &lt;code&gt;supportsAutosizeingText()&lt;/code&gt; 方法中找到答案，它是一个兼容类，用于向下兼容 Autosizeing 特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b5034323887?w=782&amp;amp;h=146&amp;amp;f=jpeg&amp;amp;s=25434&quot; alt=&quot;not_support_edittext&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里可以看到，只要不是 AppCompatEditText 就返回 true，注释也说明了这一点。&lt;/p&gt;
&lt;p&gt;暂时没有想到这样设计的原因，可能是因为输入文本的控件，本身长度就是在经常变化的，是一个极端不可控的情况，所以应该为输入的控件，限定一个固定的尺寸。&lt;/p&gt;
&lt;h3 id=&quot;预设尺寸不一定都命中&quot;&gt;3.3 预设尺寸不一定都命中&lt;/h3&gt;
&lt;p&gt;如果想要控制文字的缩放尺寸为限定的范围内，例如使用 粒度 限定它在一个 10sp 的精度下缩放；或者使用预设尺寸，限定一些尺寸，让它只能使用我们预定的一些尺寸。&lt;/p&gt;
&lt;p&gt;但是这些，并不是一定的。&lt;/p&gt;
&lt;p&gt;例如，我们使用预设尺寸，预设了一组[10sp,20sp,25sp,40sp]，这样一组尺寸，其中，可能某个尺寸就永远不会被命中，例如 25sp。&lt;/p&gt;
&lt;p&gt;这是因为，Autosizeing 在起作用的时候，会去计算尺寸是否合适，假如到 20sp 之后，再减少文字，这个时候先获取 25sp ，通过计算发现 25sp 也放不下这些文字，就会直接跳到 40sp 这个尺寸上去。&lt;/p&gt;
&lt;p&gt;所以，并不是我们设定的尺寸，它就是以线性的方式去获取尺寸。&lt;/p&gt;
&lt;h3 id=&quot;和-singleline-冲突&quot;&gt;3.4 和 singleLine 冲突&lt;/h3&gt;
&lt;p&gt;如果你想在 TextView 中，只显示一行文字，在之前你可以使用 &lt;code&gt;android:singleLine&lt;/code&gt; 这个属性，对其标记。而如果你 同事使用 Autosizeing，你会发现 AutoSizeing 就不再生效，它会在末尾显示 “…”。&lt;/p&gt;
&lt;p&gt;所幸的是，&lt;code&gt;android:singleLine&lt;/code&gt; 已经被标记为废弃，所以本身我们就不建议使用它，如果你想让 TextView 只显示单行文字，可以使用 &lt;code&gt;android:maxLines=&quot;1&quot;&lt;/code&gt; 属性，它是可以正常和 Autosizeing 兼容的。&lt;/p&gt;
&lt;h2 id=&quot;四使用场景&quot;&gt;四、使用场景&lt;/h2&gt;
&lt;p&gt;Autosizeing 说起来非常的简单，但是它能有哪些适用场景呢？简单说说我能想到的一些适用场景吧，大家可以开放思维。&lt;/p&gt;
&lt;h3 id=&quot;限定条目的-ui&quot;&gt;4.1 限定条目的 UI&lt;/h3&gt;
&lt;p&gt;这个，其实很常见，例如一些选择题的 UI，当你有多个需要选择答案的 UI ，并列的显示出来。如果它们的文字长度是可变的（通常都是可变的），你除了放大某一行的高度之外，现在还可以使用 Autosizeing 来控制它的大小。&lt;/p&gt;
&lt;p&gt;例如最近比较火的冲顶大会类 App，就是一个标准的选择题的 UI 布局。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/1/11/160e3b50368dfc0e?w=900&amp;amp;h=1600&amp;amp;f=jpeg&amp;amp;s=141693&quot; alt=&quot;cddh&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以在答案文字过多的时候，使用 Autosizeing 将它缩小，就能正好放在这个既定大小的选项 UI 中。&lt;/p&gt;
&lt;h3 id=&quot;多语言&quot;&gt;4.2 多语言&lt;/h3&gt;
&lt;p&gt;Autosizeing 在 App 的多语言适配中，也可以大放异彩。&lt;/p&gt;
&lt;p&gt;首先你要考虑到，当你想让 App 适配多语言的话，一个很严重的问题，就是不同的语言，描述同一个词的时候，长度是不一致的。&lt;/p&gt;
&lt;p&gt;例如中文下简单的一句：我是 Android 开发者，翻译成不同的语言，长度是不一致的。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;英语：I am an Android developer&lt;/li&gt;
&lt;li&gt;阿拉伯语：أنا مطور الروبوت&lt;/li&gt;
&lt;li&gt;意大利语：Sono uno sviluppatore Android&lt;/li&gt;
&lt;li&gt;德语：Ich bin ein Android-Entwickler&lt;/li&gt;
&lt;li&gt;法语：Je suis un développeur Android&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在这样的情况下，我们如果有 Autosizeing 就非常的好解决这个问题了。&lt;/p&gt;
&lt;h2 id=&quot;五小结&quot;&gt;五、小结&lt;/h2&gt;
&lt;p&gt;本文到这里，就已经完成了 Autosizeing 的所有细节，从基本使用到注意事项，应该算是解释的很详细了。&lt;/p&gt;
&lt;p&gt;不知道你觉得 Autosizeing 在实际使用中，还有什么使用场景？可以在评论中留言，分享给大家！&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;今天在&lt;strong&gt;承香墨影&lt;/strong&gt;公众号的后台，回复『&lt;strong&gt;成长&lt;/strong&gt;』。我会送你一些我整理的学习资料，包含：Android反编译、算法、设计模式、虚拟机、Linux、Kotlin、Python、爬虫、Web项目源码。&lt;/p&gt;
&lt;p&gt;我另外还维护了一个技术交流群，有兴趣可以在公众号后台回复：&quot;加群&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推荐阅读：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/13/15fb3c95b1f1f263?w=600&amp;amp;h=600&amp;amp;f=jpeg&amp;amp;s=54770&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 11 Jan 2018 05:42:00 +0000</pubDate>
<dc:creator>承香墨影</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/plokmju/p/8268005.html</dc:identifier>
</item>
<item>
<title>面试系列（一）如何做好自我介绍 - 资深Tester_王豆豆</title>
<link>http://www.cnblogs.com/evangline/p/8267940.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/evangline/p/8267940.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     在面试过程中最让面试者头痛之一的就是自我介绍，但是又是不得不提的一个话题，那应该如何将自己完美地介绍出去呢？&lt;/p&gt;


&lt;p&gt;自我介绍不仅仅是出现找工作面试的时候，我们在生活中经常都会碰到，第一次去见朋友的朋友，第一次见小伙伴，第一次去见某个亲戚.....等等，举不胜数，只要是人与人之间第一次见面都免不了要做个自我介绍，彼此认识一下，但面试过程中的自我介绍相对特殊，一般以面试者的自我介绍为主。&lt;/p&gt;

&lt;p&gt;同时根据处于的场景不同，自我介绍也会不同，比如去参加一个兴趣小组，这样的自我介绍就会以喜欢做什么为主来介绍。比如去见一个朋友的小伙伴，可以只介绍姓名即可。在工作面试过程中，自我介绍内容就更不一样，应该以工作内容为主。&lt;/p&gt;

&lt;h2&gt;第一  知己知彼&lt;/h2&gt;
&lt;p&gt;首先分析面试者需要面对的面试官有哪些，在同一个公司最少会面临两类面试官，一方面是技术面试，一般由1-2名招聘方的技术部门的骨干员工和部门管理层进行，一方面是人事面试，一般是由招聘专员进行。&lt;/p&gt;
&lt;p&gt;根据不同的面试官的职责不同，面试官关心的问题也不一样。&lt;/p&gt;
&lt;p&gt;1.技术面试官&lt;/p&gt;
&lt;p&gt;技术面试官最关注的应该是面试者会做什么，有些什么特长，做过哪些相关的项目，进入公司之后能否快速上手等问题。&lt;/p&gt;
&lt;p&gt;2.人事面试官&lt;/p&gt;
&lt;p&gt;人事面试官最关注的是面试者是否稳定，毕业学校，从事多长相关行业以及初步的判断应聘者的职业素养等情况。&lt;/p&gt;

&lt;h2&gt;第二  了解面试官让面试者做自我介绍的目的&lt;/h2&gt;
&lt;p&gt;1.认识你&lt;/p&gt;
&lt;p&gt;2.谈吐&lt;/p&gt;
&lt;p&gt;3.争取时间浏览你的简历&lt;/p&gt;
&lt;p&gt;很多面试官都是接到面试通知的时候才知道有面试，这时他需要一些时间来看面试者的简历。&lt;/p&gt;

&lt;h2&gt;第三  自我介绍内容&lt;/h2&gt;
&lt;p&gt;不管面试官出于怎样的目的，面试过程中的自我介绍应从以下几点展开：&lt;/p&gt;
&lt;h3&gt;1.自我资料&lt;/h3&gt;
&lt;p&gt;姓啥名谁，工作几年，什么时候从事这一行的&lt;/p&gt;
&lt;h3&gt;2.工作经验&lt;/h3&gt;
&lt;p&gt;根据面试公司的业务，主要介绍面试者与之相关的工作经验，在此段经验中原就职公司业务，主要做什么，怎么做的等。&lt;/p&gt;
&lt;p&gt;如果没有相关的经验，就从最近一份工作开始说起，可以简单介绍公司做的业务，主要讲在公司具体做什么事，怎么做等。&lt;/p&gt;
&lt;h3&gt;3．取得成绩&lt;/h3&gt;
&lt;p&gt;这里的取得的成绩不一定指的获得过什么奖项（如项目奖项、公司级别的奖项甚至更高级别的政府级奖项，当然如果有则更好），也可以是在工作中发现了技术痛点/系统优化/业务流程等方面存在的问题然后自己是怎么改进（或者推动改进）的。出于时间的关系，这里不能做详细阐述，可以采用“&lt;strong&gt;曾发现公司XX系统上有一个XXXX设计问题，经过跟XX方、XX方的同事的协商，合作处理，改成了XXXX情况，优化了系统的性能，提高了其稳定性/响应速度&lt;/strong&gt;”等类似的语句结构，重点要包括“&lt;strong&gt;问题点、中间的处理、改善后的提升&lt;/strong&gt;”三方面。&lt;/p&gt;
&lt;p&gt;如果刚好能贴合到面试官的兴趣点，在自我介绍之后，他肯定会再要求你再详细说一遍具体情况，这时候就可以不再自我介绍的2-3分钟的时间限制之内了。&lt;/p&gt;
&lt;p&gt;这个是面试的加分项，从面试官的角度看，如果求职者的千篇一律的只能表达“我以前做了哪些工作”会让他觉得“就是一个普通求职者”。而如果能展示出自己更突出一层的成绩优势，面试官会考虑“招你进来以后能给我们公司现有的问题起到怎么样的改善作用”。&lt;/p&gt;

&lt;h2&gt;第四 时间把握&lt;/h2&gt;
&lt;p&gt;自我介绍的时间长短也是需要把握的，如果介绍的时间太短，会给面试官留下“这么快就完了，是不知道介绍还是没什么介绍”的印象，如果介绍太长，提到的技能就有可能是埋下的不定时炸弹。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自我介绍的时间一般控制在2-3分钟左右。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果是技术主管面试，可以是姓名+从事相关行业时长+做过的主要项目业务+在项目中主要从承担哪些工作，由这几个方面组成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果是人事面试，可以是姓名+毕业学校+从事相关行业时长+在项目中主要做什么+在上家做了多长时间+为什么离职，由这几个方面组成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般来说，个人情况介绍“姓名、年龄、目前住所、参加工作年限/本行业工作年限”这些基本条件控制在半分钟的时间，因为这个是基本情况，无论是面对技术面试还是人事面试都可以说的，应该让自己做到非常流利，不能拖泥带水或者语句停顿犹豫。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在进行过往工作经验介绍的时候，时长控制在2分钟上下。要注意先说最近的工作经验，如果出于某些特殊情况，最近的工作经验毫无亮点可说，则只需将其一语带过，按工作年份的倒序（即从近往远）选择重点的工作经验进行介绍。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;自我介绍的宗旨是介绍自己的优势，尽量不要提到任何负面的信息&lt;/strong&gt;，比如毕业学校不咋的，除非面试官问起可以不用说；离职原因如果是“跟以前上级关系不好”、“前单位企业文化不好”、“前单位经常加班压力太大”等情况，要斟酌用词，委婉表达，不能让面试官感觉到你对前单位是有强烈的抱怨和不满的。然后在自我介绍中提到做过的技术知识，一定要选自己的拿手的说，不要提不熟悉的技能，比如对Linux命令不熟悉，就不要说以前测试环境是由你搭建测试环境之类的话题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自我介绍是面试的前战，一定要在正式面试前做好充分的准备，必要时可以先在家里准备好发言稿件，在脑子里记熟，面试现场沉着冷静的应对。前战一定要打好，胜利才会在望。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎关注微信公众号：资深Tester(zishentester)，了解更多好文，和王豆豆一起成长&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 11 Jan 2018 05:31:00 +0000</pubDate>
<dc:creator>资深Tester_王豆豆</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/evangline/p/8267940.html</dc:identifier>
</item>
<item>
<title>15.5 自学Zabbix之路15.5 Zabbix数据库表结构简单解析-其他 表 - CARLOS_CHIANG</title>
<link>http://www.cnblogs.com/yaoyaojcy/p/8267945.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaoyaojcy/p/8267945.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/yaoyaojcy/p/8072122.html&quot; target=&quot;_blank&quot;&gt;点击返回：自学Zabbix之路&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; 1. Actions表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   actions表记录了当触发器触发时，需要采用的动作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111133936269-2134359159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.Alerts 表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; alerts 表保存了历史的告警事件，可以从这个表里面去做一些统计分析，例如某个部门、某人、某类时间的告警统计，以及更深入的故障发生、恢复时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 3. Config表&lt;/strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134019816-1563738418.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; config表保存了全局的参数，前端包括后端也是，很多情况下会查询改表的参数的，例如用户的自定义主题、登陆认证类型等，非常重要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134137910-1612348041.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134151847-1109635655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. Functions 表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 记录了trigger中使用的表达式，例如max、last、nodata等函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. graphs_items 表&lt;/strong&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134316426-2139332813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;reader-word-layer reader-word-s7-3&quot;&gt;  graphs_items保存了属于某个图表的所有的监控项信息。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134408457-1935005082.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.profiles 表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; profiles 表保存了用户的一些配置项。 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134454535-1254182271.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.sessions 表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; sessions 表很重要，保存了每个用户的sessions,在登陆、注销的时候均会操作该张表的。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134540207-88737849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.History&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt; History表用于存储监控所得的原始数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134708941-1300219598.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;itemid对应与监控项&lt;/li&gt;
&lt;li&gt;clock为数据的获取时间，用时间戳表示&lt;/li&gt;
&lt;li&gt;value为获取的原始数据&lt;/li&gt;
&lt;li&gt;ns表示采集到该数据所用的时间&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; 9.History_str表 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   history_str表用于存储采集到的数据中需要用字符串记录的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111134918754-1542812950.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;temid对应与监控项&lt;/li&gt;
&lt;li&gt;clock为数据的获取时间，用时间戳表示&lt;/li&gt;
&lt;li&gt;value为获取的原始数据&lt;/li&gt;
&lt;li&gt;ns表示采集到该数据所用的时间&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; 10.Trends 表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   Trends表用于储存监控的趋势性数据，若将所有历史数据保留将占用大量存储空间，单用户可能仍需要查看监控对像的趋势状态，因此需要用到trends表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111135025472-475496022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 11.Users 表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  部分用户配置会在该表中，例如auotlogin、autologout、url、theme等信息。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1217531/201801/1217531-20180111135102832-1096408259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 11 Jan 2018 05:30:00 +0000</pubDate>
<dc:creator>CARLOS_CHIANG</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaoyaojcy/p/8267945.html</dc:identifier>
</item>
<item>
<title>云计算之路-阿里云上： RDS实例CPU跑满引发的故障 - 博客园团队</title>
<link>http://www.cnblogs.com/cmt/p/8267799.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmt/p/8267799.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/35695/201801/35695-20180111115731082-103209596.png&quot; alt=&quot;&quot; width=&quot;380&quot; height=&quot;362&quot;/&gt;&lt;/p&gt;
&lt;p&gt;今天上午 10: 40 左右，我们所使用的阿里云 RDS 实例的 CPU 突然飙高到近 100% ，造成大量数据库查询操作缓慢、超时，在这个恶劣条件下大量 memcached 缓存无法建立，这样的雪上加霜让 Web 服务器的 CPU 跟着不堪重负，于是要么访问缓慢，要么直接 503 。。。造成网站无法正常访问，由此给您带来了很大的麻烦，请您谅解。&lt;/p&gt;
&lt;p&gt;问题非常奇怪，昨天同样的时间段，RDS CPU 占用却少很多，平时 RDS CPU 的占用通常都在 60% 以下，而今天我们网站的访问量并没有明显的突增。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/35695/201801/35695-20180111120048379-926154914.png&quot; alt=&quot;&quot; width=&quot;380&quot; height=&quot;356&quot;/&gt;&lt;/p&gt;
&lt;p&gt;面对这个突发故障，我们实在找不出可能的线索。在前几年使用阿里云 RDS 曾经遇到过很少几次类似数据库访问突发缓慢的问题，当时都通过主备切换神奇地解决了。这次，我们最终还是采用了主备切换的方法，在 11:20 左右启动了主备切换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/35695/201801/35695-20180111123515113-17864181.png&quot; alt=&quot;&quot; width=&quot;698&quot; height=&quot;99&quot;/&gt;&lt;/p&gt;
&lt;p&gt;主备切换后，CPU 很快就降了下来，但由于 SQL Server 预热需要一定的时间（建立缓存），所以在切换后的一段时间，访问网站依然缓慢，直到 11:40 左右才恢复正常。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/35695/201801/35695-20180111123846785-954561784.png&quot; alt=&quot;&quot; width=&quot;355&quot; height=&quot;330&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们所使用的 RDS 实例规格是 SQL Server 2008 R2 ，20&lt;span data-spm-anchor-id=&quot;5176.2020520104.200.i2.5ab88fdc5EobYz&quot;&gt;核&lt;/span&gt;CPU ，12G内存，6000 IOPS ，一直没有升级到 Server Server 2012 或 2016 ，就是因为阿里云只有 2008 R2 才提供了高可用版（支持主备切换），而 2012 与 2016 只有基础版。而使用高可用版，在出现突发故障进行主备切换是一个简单有效的方式。&lt;/p&gt;
</description>
<pubDate>Thu, 11 Jan 2018 04:56:00 +0000</pubDate>
<dc:creator>博客园团队</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmt/p/8267799.html</dc:identifier>
</item>
<item>
<title>linux系统编程：IO读写过程的原子性操作实验 - ghostwu</title>
<link>http://www.cnblogs.com/ghostwu/p/8267634.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ghostwu/p/8267634.html</guid>
<description>&lt;p&gt;所谓原子性操作指的是：内核保证某系统调用中的所有步骤（操作）作为独立操作而一次性加以执行，其间不会被其他进程或线程所中断。&lt;/p&gt;
&lt;p&gt;举个通俗点的例子：你和女朋友OOXX的时候，突然来了个电话，势必会打断你们高潮的兴致，最好的办法就是，你们做这事的时候，把通讯设备关机，就能确保，这次的事情很圆满的完成，这就是一次原子性操作。&lt;/p&gt;
&lt;p&gt;在多进程IO过程中，如果操作不具有原子性，就可能会导致数据混乱，相互覆盖等情况。这种现象也叫竞争状态。&lt;/p&gt;
&lt;p&gt;所谓竞争状态指的是：操作共享资源的两个进程（或线程），其结果取决于一个无法预期的顺序，因为进程获取的cpu执行时间是不确定的。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1,假想的，以独占方式创建一个文件&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;下面这段代码，用open和O_CREAT标志演示一个独占方式创建文件， 什么叫独占方式创建文件？  就是该进程始终认为这个文件是他打开的，或者是他创建的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d4cd76ec-71ca-4a5e-8276-1d8796212226')&quot; readability=&quot;42.5&quot;&gt;&lt;img id=&quot;code_img_closed_d4cd76ec-71ca-4a5e-8276-1d8796212226&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d4cd76ec-71ca-4a5e-8276-1d8796212226&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d4cd76ec-71ca-4a5e-8276-1d8796212226',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d4cd76ec-71ca-4a5e-8276-1d8796212226&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;================================================================
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*   Copyright (C) 2018 . All rights reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*   
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*   文件名称：bad_exclusive_open.c
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*   创 建 者：ghostwu(吴华)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*   创建日期：2018年01月11日
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*   描    述：
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;================================================================&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;12&lt;/span&gt; #include &amp;lt;sys/types.h&amp;gt;
&lt;span&gt;13&lt;/span&gt; #include &amp;lt;sys/stat.h&amp;gt;
&lt;span&gt;14&lt;/span&gt; #include &amp;lt;fcntl.h&amp;gt;
&lt;span&gt;15&lt;/span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;span&gt;16&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;17&lt;/span&gt; #include &amp;lt;sys/types.h&amp;gt;
&lt;span&gt;18&lt;/span&gt; #include &amp;lt;unistd.h&amp;gt;
&lt;span&gt;19&lt;/span&gt; #include &amp;lt;errno.h&amp;gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;argv[])
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;( argc &amp;lt; &lt;span&gt;2&lt;/span&gt; || strcmp( argv[&lt;span&gt;1&lt;/span&gt;], &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--help&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;usage:%s filename\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argv[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] );
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         exit( -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pid=%d, %s文件不存在\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, getpid(), argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] );
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; fd = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     fd = open( argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;], O_WRONLY );
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;( fd &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         sleep( &lt;span&gt;5&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pid=%d, 结束睡眠\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, getpid() );
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他错误原因，导致文件打开失败&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;( errno !=&lt;span&gt; ENOENT ) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             perror( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;open&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             exit( -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件不存在　导致文件打开失败&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;             fd = open( argv[&lt;span&gt;1&lt;/span&gt;], O_WRONLY | O_CREAT, S_IRUSR |&lt;span&gt; S_IWUSR );    
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;( fd &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                 printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件%s创建失败\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] );
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 exit( -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件%s,创建并打开成功:fd=%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;], fd );
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进程id=%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, getpid() );
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            close( fd );
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件%s,打开成功:fd=%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;], fd );
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;进程id=%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, getpid() );
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        close( fd );
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; 
&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;假如，我们要创建一个不存在的test.txt文件。&lt;/p&gt;
&lt;p&gt;为了演示方便，在程序第一次判断文件不存在的情况下，让进程挂起( sleep 5 )交出cpu的执行时间，这个时候，我们可以这样测试，两种方法：&lt;/p&gt;
&lt;p&gt;1，在另一个终端，登录另一个账户(如root账户)，创建test.txt文件&lt;/p&gt;
&lt;p&gt;2，在另一个终端，再开启一个进程&lt;/p&gt;
&lt;h4&gt;方法一：用shell脚本创建一个test.txt，并赋予其他组的权限为rw&lt;/h4&gt;
&lt;p&gt;createfile.sh&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; #!/bin/&lt;span&gt;bash
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#创建文件,并改变权限配合测试
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;touch&lt;/span&gt;&lt;span&gt; test.txt
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;chmod&lt;/span&gt; a+rw test.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/253192/201801/253192-20180111114516222-2036928410.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实验结果：左边的进程依然认为这个文件是他创建并打开的!&lt;/p&gt;
&lt;h4&gt;方法二，在另一个终端，再开一个进程测试 &lt;/h4&gt;
&lt;p&gt;两个进程都认为，test.txt是他们自己创建并打开的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/253192/201801/253192-20180111115916816-755110515.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;2，如何保证独占方式创建一个文件?&lt;/h4&gt;
&lt;p&gt; 非常简单，只需要把加一个标志O_EXCL，结合O_CREAT&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
fd = open( argv[&lt;span&gt;1&lt;/span&gt;], O_WRONLY | O_CREAT | O_EXCL, S_IRUSR | S_IWUSR );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次按照上面的2种方式测试，得到的结果就是：&lt;/p&gt;
&lt;p&gt;如果在sleep期间，别的进程创建了文件，那么该进程会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/253192/201801/253192-20180111120550269-1143781116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;3，seek与write结合，产生相互覆盖&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f2faf2d3-dacc-426c-af56-f104f7c5c84a')&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_f2faf2d3-dacc-426c-af56-f104f7c5c84a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f2faf2d3-dacc-426c-af56-f104f7c5c84a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f2faf2d3-dacc-426c-af56-f104f7c5c84a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f2faf2d3-dacc-426c-af56-f104f7c5c84a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;================================================================
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;*   Copyright (C) 2018 . All rights reserved.
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;*   
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;*   文件名称：seek_file.c
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*   创 建 者：ghostwu(吴华)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;*   创建日期：2018年01月11日
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*   描    述：
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;================================================================&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;12&lt;/span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;span&gt;13&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;14&lt;/span&gt; #include &amp;lt;sys/types.h&amp;gt;
&lt;span&gt;15&lt;/span&gt; #include &amp;lt;sys/stat.h&amp;gt;
&lt;span&gt;16&lt;/span&gt; #include &amp;lt;fcntl.h&amp;gt;
&lt;span&gt;17&lt;/span&gt; #include &amp;lt;sys/types.h&amp;gt;
&lt;span&gt;18&lt;/span&gt; #include &amp;lt;unistd.h&amp;gt;
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#ifndef BUFSIZE
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; BUFSIZE 50
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt; *&lt;span&gt;argv[])
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;( argc &amp;lt; &lt;span&gt;3&lt;/span&gt; || strcmp( argv[&lt;span&gt;1&lt;/span&gt;], &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--help&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;usage:%s filename w&amp;lt;string&amp;gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] );
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         exit( -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;( argv[&lt;span&gt;2&lt;/span&gt;][&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;必须以w开头\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         exit( -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; fd = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     fd = open( argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;], O_RDWR );
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;( fd &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件%s打开失败\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] );
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         exit( -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ( -&lt;span&gt;1&lt;/span&gt; == lseek( fd, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SEEK_END ) ) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;指针移动到尾部失败\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         exit( -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;     sleep( &lt;span&gt;5&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt;&lt;span&gt; buf[BUFSIZE];
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    ssize_t nwrite;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;     strcpy( buf, &amp;amp;argv[&lt;span&gt;2&lt;/span&gt;][&lt;span&gt;1&lt;/span&gt;&lt;span&gt;] );
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt;     nwrite =&lt;span&gt; write( fd, buf, strlen( buf ) );
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;( -&lt;span&gt;1&lt;/span&gt; ==&lt;span&gt; nwrite ) {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文件写入失败\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         exit( -&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     printf( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pid=%d,向文件%s写入了%ld个字节\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, getpid(), argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;], nwrite );
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;如果第一个进程执行到seek与write之间，交出 cpu, 被执行相同代码的第二个进程中断，那么这两个进程在写入数据前都把指针移动到相同的位置，如果一个进程先完成，那么后一个进程会覆盖前面进程写入的数据&lt;/p&gt;
&lt;p&gt;试验结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/253192/201801/253192-20180111123304722-1279104676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二个进程后结束： 第一个进程写入的123被第二个进程的4567覆盖，产生结果 4567&lt;/p&gt;
&lt;p&gt;第一个进程后结束：第一个进程写入的4567被第二个进程的123覆盖，产生结果 1237&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/253192/201801/253192-20180111123553426-1184944955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如何避免数据覆盖？打开文件时候，加入O_APPEND标志&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
fd = open( argv[&lt;span&gt;1&lt;/span&gt;], O_RDWR | O_APPEND );
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/253192/201801/253192-20180111123852535-37121577.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;总结：&lt;/h4&gt;
&lt;p&gt;1）理解原子性操作&lt;/p&gt;
&lt;p&gt;2）理解标志O_CREAT与O_EXCL结合的意义&lt;/p&gt;
&lt;p&gt;3）理解O_APPEND标志&lt;/p&gt;
&lt;p&gt;4）理解竞争状态&lt;/p&gt;

</description>
<pubDate>Thu, 11 Jan 2018 04:42:00 +0000</pubDate>
<dc:creator>ghostwu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ghostwu/p/8267634.html</dc:identifier>
</item>
<item>
<title>前端MVC Vue2学习总结（七）——ES6与Module模块化、Vue-cli脚手架搭建、开发、发布项目与综合示例 - 张果</title>
<link>http://www.cnblogs.com/best/p/8267787.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/best/p/8267787.html</guid>
<description>&lt;p&gt;使用vue-cli可以规范项目，提高开发效率，但是使用vue-cli时需要一些ECMAScript6的知识，特别是ES6中的模块管理内容，本章先介绍ES6中的基础与模块化的内容再使用vue-cli开发vue项目。&lt;/p&gt;

&lt;p&gt;ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。&lt;/p&gt;
&lt;p&gt;2015年6月17日，ECMAScript 6发布正式版本，即ECMAScript 2015。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180105151744846-285860311.png&quot; alt=&quot;&quot; width=&quot;420&quot; height=&quot;236&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ES6是继ES5之后的一次重大改进，语言规范由ES5.1时代的245页扩充至600页。ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。&lt;/p&gt;
&lt;p&gt;简单说ES就是JavaScript语言的实现标准，ES6是一较新的版本，使JavaScript更加规范与强大。&lt;/p&gt;
&lt;h2&gt;1.0.学习资源&lt;/h2&gt;
&lt;p&gt;我推荐的ES6学习资料是开源书籍&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot;&gt;《ECMAScript 6 入门》&lt;/a&gt;，全面介绍 ECMAScript 6 新引入的语法特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180108100235457-1949701711.png&quot; alt=&quot;&quot; width=&quot;279&quot; height=&quot;371&quot;/&gt;&lt;/p&gt;
&lt;p&gt;URL：&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot;&gt;http://es6.ruanyifeng.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://github.com/ruanyf/es6tutorial/&quot; target=&quot;_blank&quot;&gt;https://github.com/ruanyf/es6tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1.1. let、const 和块级作用域&lt;/h2&gt;
&lt;p&gt;let 允许创建块级作用域，ES6 推荐在函数中使用 let 定义变量，而非 var：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
{
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;
  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(a); 
}
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(a); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样在块级作用域有效的另一个变量声明方式是 const，它可以声明一个常量。ES6 中，const 声明的常量类似于指针，它指向某个引用，也就是说这个「常量」并非一成不变的，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  const ARR &lt;/span&gt;= [5,6&lt;span&gt;];
  ARR.push(&lt;/span&gt;7&lt;span&gt;);
  console.log(ARR); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; [5,6,7]&lt;/span&gt;
  ARR = 10; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TypeError&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有几个点需要注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;let 关键词声明的变量不具备变量提升（hoisting）特性&lt;/li&gt;
&lt;li&gt;let 和 const 声明只在最靠近的一个块中（花括号内）有效&lt;/li&gt;
&lt;li&gt;当使用常量 const 声明时，请使用大写变量，如：CAPITAL_CASING&lt;/li&gt;
&lt;li&gt;const 在声明时必须被赋值&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;默认情况下javascript中并没有块级(block)作用域：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; i = 100&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; i=200&lt;span&gt;;
                console.log(i);
            }
            console.log(i);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180108152732019-696424599.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用let定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            let i = 100&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;var i=200;  //Identifier 'i' has already been declared  变量定义&lt;/span&gt;
                let i=200&lt;span&gt;;
                console.log(i);
            }
            console.log(i);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180108153017394-829008512.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 默认情况javascript中定义的变量都是弱类型的，可以动态变化：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            let i = 100&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                i&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                console.log(i);
            }
            console.log(i);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180108154859676-1780908431.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果使用const定义，则必须赋值且不允许修改。&lt;/p&gt;
&lt;h2&gt;1.2. 箭头函数（Arrow Functions）&lt;/h2&gt;
&lt;p&gt;ES6 中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 =&amp;gt;，紧接着是函数体：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; getPrice = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 4.55&lt;span&gt;;
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Implementation with Arrow Function&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; getPrice = () =&amp;gt; 4.55;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是，上面例子中的 getPrice 箭头函数采用了简洁函数体，它不需要 reture 语句，下面这个例子使用的是正常函数体：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;hljs-string&quot;&gt;'apple'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'banana'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'orange'&lt;/span&gt;];

&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; breakfast = arr.map(fruit =&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fruit + &lt;span class=&quot;hljs-string&quot;&gt;'s'&lt;/span&gt;;
});
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(breakfast); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，箭头函数不仅仅是让代码变得简洁，&lt;span&gt;函数中 this 总是绑定总是指向对象自身&lt;/span&gt;。具体可以看看下面几个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;() &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;

  setInterval(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;growUp&lt;/span&gt;() &lt;/span&gt;{
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age++;
  }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);
}
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们经常需要使用一个变量来保存 this，然后在 growUp 函数中引用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; Person() {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; self = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
  self.age &lt;/span&gt;= 0&lt;span&gt;;

  setInterval(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; growUp() {
    self.age&lt;/span&gt;++&lt;span&gt;;
  }, &lt;/span&gt;1000&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而使用箭头函数可以省却这个麻烦：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;()&lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;

  setInterval(() =&amp;gt; {
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.age++;
  }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ES6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; add1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(a, b) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; b;
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; add2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (a, b) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; b;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; f1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(n) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; n &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; f2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; n &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; n &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; counter1() { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;普通情况&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; self &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
                (&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(i) {
                    self.n &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt;&lt;span&gt; i;
                    console.log(self.n);
                })(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; c1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; counter1();

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; counter2() {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误，this指向window&lt;/span&gt;
&lt;span&gt;                    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt; &lt;span&gt;50&lt;/span&gt;&lt;span&gt;;
                    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n);
                }, &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; c2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; counter2();

            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; counter3() {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                setTimeout(() &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;箭头函数，this指向当前对象&lt;/span&gt;
&lt;span&gt;                    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n &lt;/span&gt;&lt;span&gt;+=&lt;/span&gt; &lt;span&gt;50&lt;/span&gt;&lt;span&gt;;
                    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.n);
                }, &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; c3 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; counter3();
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180108161917863-1179691937.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.3. 函数参数默认值&lt;/h2&gt;
&lt;p&gt;ES6 中允许你对函数参数设置默认值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let getFinalPrice = (price, tax=0.7) =&amp;gt; price + price *&lt;span&gt; tax;
getFinalPrice(&lt;/span&gt;500); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 850&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;function&lt;/span&gt; add(n1=100,n2=200&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; n1+&lt;span&gt;n2;
            }
            
            console.log(add());
            console.log(add(&lt;/span&gt;1&lt;span&gt;));
            console.log(add(&lt;/span&gt;1,1));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109085226332-1771206644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.4. Spread / Rest 操作符&lt;/h2&gt;
&lt;p&gt;Spread / Rest 操作符指的是 ...，具体是 Spread 还是 Rest 需要看上下文语境。&lt;/p&gt;
&lt;p&gt;当被用于迭代器中时，它是一个 Spread 操作符：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y,z&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(x,y,z);
}

&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];
foo(...arr); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
        &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; show(n1,n2,n3){
                console.log(n1,n2,n3);
            }
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; arr=[5,7,9,1,6,7&lt;span&gt;];
            show(&lt;/span&gt;1,2,3&lt;span&gt;);
            show(arr);
            
            show(...arr);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数组中的前3位取出作为3个参数的值&lt;/span&gt;
        &amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109085754863-803431011.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当被用于函数传参时，是一个 Rest 操作符：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo(...args) {
  console.log(args);
}
foo( &lt;/span&gt;1, 2, 3, 4, 5); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
        &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
            &lt;span&gt;function&lt;/span&gt; show(...args){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可变参数，args是一个数组&lt;/span&gt;
&lt;span&gt;                console.log(args);
            }
            
            show(&lt;/span&gt;1,2,3,&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;false&lt;/span&gt;,'Hello'&lt;span&gt;); 
        &lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109090109957-791931702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.5. 对象词法扩展&lt;/h2&gt;
&lt;p&gt;ES6 允许声明在对象字面量时使用简写语法，来初始化属性变量和函数的定义方法，并且允许在对象属性中进行计算操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getCar(make, model, value) {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 简写变量&lt;/span&gt;
    make,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等同于 make: make&lt;/span&gt;
    model, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等同于 model: model&lt;/span&gt;
    value, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 等同于 value: value&lt;/span&gt;

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 属性可以使用表达式计算值&lt;/span&gt;
    ['make' + make]: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 忽略 `function` 关键词简写对象函数&lt;/span&gt;
&lt;span&gt;    depreciate() {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value -= 2500&lt;span&gt;;
    }
  };
}

let car &lt;/span&gt;= getCar('Barret', 'Lee', 40000&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; output: {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     make: 'Barret',&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     model:'Lee',&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     value: 40000,&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     makeBarret: true,&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     depreciate: function()&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; createProduct(name,price){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&quot;name&quot;&lt;span&gt;:name,
                    &lt;/span&gt;&quot;price&quot;&lt;span&gt;:price,
                    &lt;/span&gt;&quot;iphone8Desc&quot;:name+&quot;_&quot;+&lt;span&gt;price,
                    &lt;/span&gt;&quot;show&quot;:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                        console.log(&lt;/span&gt;&quot;名称：&quot;+&lt;span&gt;this&lt;/span&gt;.name+&quot; 价格：&quot;+&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.price);
                    }
                }
            }
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; phone1=createProduct(&quot;iphone8&quot;,5898.5&lt;span&gt;);
            phone1.show();
            console.log(JSON.stringify(phone1));
            console.log(phone1);
            
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ES6中定义对象的语法糖&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; createPdt(name,price){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                    name,
                    price,
                    [name&lt;/span&gt;+&quot;Desc&quot;]:name+&quot;_&quot;+&lt;span&gt;price,
                    show(){
                        console.log(&lt;/span&gt;&quot;名称：&quot;+&lt;span&gt;this&lt;/span&gt;.name+&quot; 价格：&quot;+&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.price);
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; phone2=createPdt(&quot;iphone8&quot;,5898.5&lt;span&gt;);
            phone2.show();
            console.log(JSON.stringify(phone2));
            console.log(phone2);
        &lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109091550551-523227717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.6. 二进制和八进制字面量&lt;/h2&gt;
&lt;p&gt;ES6 支持二进制和八进制的字面量，通过在数字前面添加 0o 或者 0O 即可将其转换为二进制值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; oValue = &lt;span class=&quot;hljs-number&quot;&gt;0o10&lt;/span&gt;;
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(oValue); 

&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bValue = &lt;span class=&quot;hljs-number&quot;&gt;0b10&lt;/span&gt;; 
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(bValue); 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.7. 对象和数组解构&lt;/h2&gt;
&lt;p&gt;解构可以避免在对象赋值时产生中间变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;() &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];
}
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = foo(); 

&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [a, b, c] = foo();
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(a, b, c); 

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;() &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    x: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,
    y: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,
    z: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;
  };
}
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; {x: x, y: y, z: z} = bar();
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(x, y, z); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getArray(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; [1,3,5&lt;span&gt;];
            }
            let [n1,n2,n3,n4]&lt;/span&gt;=getArray();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用函数，将数组值分别给n1,n2,n3&lt;/span&gt;
&lt;span&gt;            console.log(n1,n2,n3,n4);
            
            &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getObj(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; {name:&quot;tom&quot;,age:18&lt;span&gt;};
            }
            let {name:nickname,age:myage}&lt;/span&gt;=getObj();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将对象的name与age给定义的变量赋值&lt;/span&gt;
            console.log(nickname,myage);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109094201426-765440137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.8. 对象超类&lt;/h2&gt;
&lt;p&gt;ES6 允许在对象中使用 super 方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parent = {
  foo() {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello from the Parent&quot;&lt;/span&gt;);
  }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; child = {
  foo() {
    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.foo();
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello from the Child&quot;&lt;/span&gt;);
  }
}

&lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;.setPrototypeOf(child, parent);
child.foo(); 
             
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; car=&lt;span&gt;{
                voice(){
                    console.log(&lt;/span&gt;&quot;车在叫...&quot;&lt;span&gt;);
                }
            };
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bus=&lt;span&gt;{
                voice(){
                    super.voice();
                    console.log(&lt;/span&gt;&quot;大巴车在叫...&quot;&lt;span&gt;);
                }
            }
            Object.setPrototypeOf(bus,car);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将bus的原型指向car&lt;/span&gt;
            bus.voice();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109100315691-612151879.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 class=&quot;postTitle&quot;&gt;1.8.1、Object.setPrototypeOf 方法的使用&lt;/h3&gt;
&lt;div class=&quot;postBody&quot; readability=&quot;32.500945179584&quot;&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot; readability=&quot;63.03213610586&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/575868/201611/575868-20161116210748873-338831197.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将一个指定的对象的原型设置为另一个对象或者&lt;a title=&quot;值 null 是一个 JavaScript 字面量，表示空值（null or an &amp;quot;empty&amp;quot; value），即没有对象被呈现（no object value is present）。它是 JavaScript 原始值 之一。&quot; href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;(既对象的&lt;code&gt;[[Prototype]]&lt;/code&gt;内部属性).&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
            &lt;span&gt;var&lt;/span&gt; Car=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name=&quot;车&quot;&lt;span&gt;;
            }
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; benz=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Car();
            console.log(benz.name);
            
            Object.setPrototypeOf(benz,{name:&lt;/span&gt;&quot;小轿车&quot;,price:&quot;23456&quot;&lt;span&gt;});
            console.log(benz.name);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;未重写&lt;/span&gt;
&lt;span&gt;            console.log(benz.price);
        &lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109095343832-1930666005.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;Syntax&quot;&gt;语法&lt;/h2&gt;
&lt;pre class=&quot;syntaxbox&quot;&gt;
&lt;code&gt;Object.setPrototypeOf(&lt;em&gt;obj, prototype&lt;/em&gt;)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;Parameters&quot;&gt;参数&lt;/h3&gt;
&lt;dl&gt;&lt;dt&gt;obj&lt;/dt&gt;
&lt;dd&gt;将被设置原型的对象.&lt;/dd&gt;
&lt;dt&gt;prototype&lt;/dt&gt;
&lt;dd&gt;该对象新的原型(可以是一个对象或者&lt;a title=&quot;值 null 是一个 JavaScript 字面量，表示空值（null or an &amp;quot;empty&amp;quot; value），即没有对象被呈现（no object value is present）。它是 JavaScript 原始值 之一。&quot; href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;).&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;1.8.2、Object.defineProperty&lt;/h3&gt;
&lt;p&gt;Object.defineProperty(被扩展的对象名，属性名，{属性的值}) 可以用于扩展对象的属性&lt;/p&gt;
&lt;p&gt;不过可以指定只读属性&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
        &amp;lt;title&amp;gt;Object.defineProperty()&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;

    &amp;lt;body&amp;gt;
        &amp;lt;script&amp;gt;
            &lt;span&gt;var&lt;/span&gt; tom =&lt;span&gt; {
                name: &lt;/span&gt;&quot;tom&quot;&lt;span&gt;
            };
            tom.age &lt;/span&gt;= 90&lt;span&gt;;
            tom[&lt;/span&gt;&quot;age&quot;] = 88&lt;span&gt;;
            console.log(&lt;/span&gt;&quot;tom.age=&quot; +&lt;span&gt; tom.age);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rose =&lt;span&gt; {
                name: &lt;/span&gt;&quot;rose&quot;&lt;span&gt;
            };
            Object.defineProperty(rose, &lt;/span&gt;&quot;age&quot;&lt;span&gt;, {
                value: &lt;/span&gt;98&lt;span&gt;,
                writable:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只读&lt;/span&gt;
&lt;span&gt;            });
            rose.age&lt;/span&gt;=18;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改无效&lt;/span&gt;
            console.log(&quot;rose.age=&quot; +&lt;span&gt; rose.age);
        &lt;/span&gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111085714566-314847535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;1.9. 模板语法和分隔符&lt;/h2&gt;
&lt;p&gt;ES6 中有一种十分简洁的方法组装一堆字符串和变量。&lt;/p&gt;
&lt;p&gt;${ ... } 用来渲染一个变量&lt;br/&gt;` 作为分隔符&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; user = &lt;span class=&quot;hljs-string&quot;&gt;'Barret'&lt;/span&gt;;
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;`Hi &lt;span class=&quot;hljs-subst&quot;&gt;${user}&lt;/span&gt;!`&lt;/span&gt;); 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.10. for...of VS for...in&lt;/h2&gt;
&lt;p&gt;for...of 用于遍历一个迭代器，如数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nicknames = [&lt;span class=&quot;hljs-string&quot;&gt;'di'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'boo'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'punkeye'&lt;/span&gt;];
nicknames.size = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nickname &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; nicknames) {
  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(nickname);
}
Result: di, boo, punkeye
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;...in 用来遍历对象中的属性：

&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nicknames = [&lt;span class=&quot;hljs-string&quot;&gt;'di'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'boo'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'punkeye'&lt;/span&gt;];
nicknames.size = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nickname &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nicknames) {
  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(nickname);
}
Result: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, size
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.11. Map 和 WeakMap&lt;/h2&gt;
&lt;p&gt;ES6 中两种新的数据结构集：Map 和 WeakMap。事实上每个对象都可以看作是一个 Map。&lt;/p&gt;
&lt;p&gt;一个对象由多个 key-val 对构成，在 Map 中，任何类型都可以作为对象的 key，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; myMap = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Map();

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; keyString = &quot;a string&quot;&lt;span&gt;,
    keyObj &lt;/span&gt;=&lt;span&gt; {},
    keyFunc &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置值&lt;/span&gt;
myMap.set(keyString, &quot;value 与 'a string' 关联&quot;&lt;span&gt;);
myMap.set(keyObj, &lt;/span&gt;&quot;value 与 keyObj 关联&quot;&lt;span&gt;);
myMap.set(keyFunc, &lt;/span&gt;&quot;value 与 keyFunc 关联&quot;&lt;span&gt;);

myMap.size; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取值&lt;/span&gt;
myMap.get(keyString);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;value 与 'a string' 关联&quot;&lt;/span&gt;
myMap.get(keyObj);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;value 与 keyObj 关联&quot;&lt;/span&gt;
myMap.get(keyFunc);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;value 与 keyFunc 关联&quot;&lt;/span&gt;
WeakMap
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WeakMap 就是一个 Map，只不过它的所有 key 都是弱引用，意思就是 WeakMap 中的东西垃圾回收时不考虑，使用它不用担心内存泄漏问题。&lt;/p&gt;
&lt;p&gt;另一个需要注意的点是，WeakMap 的所有 key 必须是对象。它只有四个方法 delete(key),has(key),get(key) 和 set(key, val)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; w = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;WeakMap&lt;/span&gt;();
w.set(&lt;span class=&quot;hljs-string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;); 


&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o1 = {},
    o2 = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;()&lt;/span&gt;{},
    o3 = &lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;;

w.set(o1, &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;);
w.set(o2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;azerty&quot;&lt;/span&gt;);
w.set(o3, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;);

w.get(o3); 

w.has(o1); 
w.delete(o1);
w.has(o1); 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.12. Set 和 WeakSet&lt;/h2&gt;
&lt;p&gt;Set 对象是一组不重复的值，重复的值将被忽略，值类型可以是原始类型和引用类型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; mySet = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Set&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]);
mySet.size; 
mySet.has(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); 
mySet.add(&lt;span class=&quot;hljs-string&quot;&gt;'strings'&lt;/span&gt;);
mySet.add({ a: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, b:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; });
可以通过 forEach 和 &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;...of 来遍历 &lt;span class=&quot;hljs-built_in&quot;&gt;Set&lt;/span&gt; 对象：

mySet.forEach((item) =&amp;gt; {
  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(item);
    
    
    
    
    
});

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; mySet) {
  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(value);
    
    
    
    
    
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set 同样有 delete() 和 clear() 方法。&lt;/p&gt;
&lt;h5 id=&quot;weakset&quot;&gt;WeakSet&lt;/h5&gt;
&lt;p&gt;类似于 WeakMap，WeakSet 对象可以让你在一个集合中保存对象的弱引用，在 WeakSet 中的对象只允许出现一次：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ws = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;WeakSet&lt;/span&gt;();
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {};
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {};

ws.add(&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;);
ws.add(obj);

ws.has(&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;); 
ws.has(foo);    

ws.delete(&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;); 
ws.has(&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;);    
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.13. 类&lt;/h2&gt;
&lt;p&gt;ES6 中有 class 语法。值得注意是，这里的 class 不是新的对象继承模型，它只是原型链的语法糖表现形式。&lt;/p&gt;
&lt;p&gt;函数中使用 static 关键词定义构造函数的的方法和属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Task&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;constructor&lt;/span&gt;() {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;task instantiated!&quot;&lt;/span&gt;);
  }

  showId() {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;);
  }

  static loadAll() {
    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Loading all tasks..&quot;&lt;/span&gt;);
  }
}

&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; Task); 
&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Task(); 
task.showId(); 
Task.loadAll(); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;            class Animal{
                constructor(){  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造方法，可无&lt;/span&gt;
                    console.log(&quot;正在构造一只动物&quot;&lt;span&gt;);
                }
                
                bark(){
                    console.log(&lt;/span&gt;&quot;动物在叫...&quot;&lt;span&gt;);
                }
                
                static eat(){
                    console.log(&lt;/span&gt;&quot;动物在吃东西...&quot;&lt;span&gt;);
                }
            }
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pig=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Animal();
            pig.bark();
            Animal.eat();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109101701113-516227482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;类中的继承和超集：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class Car {
  constructor() {
    console.log(&lt;/span&gt;&quot;Creating a new car&quot;&lt;span&gt;);
  }
}

class Porsche extends Car {
  constructor() {
    super();
    console.log(&lt;/span&gt;&quot;Creating Porsche&quot;&lt;span&gt;);
  }
}

let c &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Porsche();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Creating a new car&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; Creating Porsche&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;extends 允许一个子类继承父类，需要注意的是，子类的 constructor 函数中需要执行 super() 函数。&lt;/p&gt;
&lt;p&gt;当然，你也可以在子类方法中调用父类的方法，如 super.parentMethodName()。&lt;/p&gt;
&lt;p&gt;在 这里 阅读更多关于类的介绍。&lt;/p&gt;
&lt;p&gt;有几点值得注意的是：&lt;/p&gt;
&lt;p&gt;类的声明不会提升（hoisting)，如果你要使用某个 Class，那你必须在使用之前定义它，否则会抛出一个 ReferenceError 的错误&lt;br/&gt;在类中定义函数不需要使用 function 关键词&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
            class Animal{
                constructor(){  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造方法，可无&lt;/span&gt;
                    console.log(&quot;正在构造一只动物&quot;&lt;span&gt;);
                }
                
                bark(){
                    console.log(&lt;/span&gt;&quot;动物在叫...&quot;&lt;span&gt;);
                }
                
                static eat(){
                    console.log(&lt;/span&gt;&quot;动物在吃东西...&quot;&lt;span&gt;);
                }
            }
            
            class Dog extends Animal{
                constructor(){ 
                    super();   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用父类的构造方法&lt;/span&gt;
                    console.log(&quot;正在构造一只狗&quot;&lt;span&gt;);
                }
                bark(){   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重写&lt;/span&gt;
                    console.log(&quot;汪汪汪...&quot;&lt;span&gt;);
                }
            }
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dog=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dog();
            dog.bark();
            Dog.eat();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109102133832-1508860476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.14. Symbol&lt;/h2&gt;
&lt;p&gt;Symbol 是一种新的数据类型，它的值是唯一的，不可变的。ES6 中提出 symbol 的目的是为了生成一个唯一的标识符，不过你访问不到这个标识符：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sym = &lt;span class=&quot;hljs-built_in&quot;&gt;Symbol&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;some optional description&quot;&lt;/span&gt; );
&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; sym); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，这里 Symbol 前面不能使用 new 操作符。&lt;/p&gt;
&lt;p&gt;如果它被用作一个对象的属性，那么这个属性会是不可枚举的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {
    val: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,
    [ &lt;span class=&quot;hljs-built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;random&quot;&lt;/span&gt;) ]: &lt;span class=&quot;hljs-string&quot;&gt;&quot;I'm a symbol&quot;&lt;/span&gt;,
};

&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(o)); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要获取对象 symbol 属性，需要使用 Object.getOwnPropertySymbols(o)。&lt;/p&gt;
&lt;h2&gt;1.15. 迭代器（Iterators）&lt;/h2&gt;
&lt;p&gt;迭代器允许每次访问数据集合的一个元素，当指针指向数据集合最后一个元素是，迭代器便会退出。它提供了 next() 函数来遍历一个序列，这个方法返回一个包含 done 和 value 属性的对象。&lt;/p&gt;
&lt;p&gt;ES6 中可以通过 Symbol.iterator 给对象设置默认的遍历器，无论什么时候对象需要被遍历，执行它的 @@iterator 方法便可以返回一个用于获取值的迭代器。&lt;/p&gt;
&lt;p&gt;数组默认就是一个迭代器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; arr = [11,12,13&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; itr =&lt;span&gt; arr[Symbol.iterator]();

itr.next(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; { value: 11, done: false }&lt;/span&gt;
itr.next(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; { value: 12, done: false }&lt;/span&gt;
itr.next(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; { value: 13, done: false }&lt;/span&gt;
&lt;span&gt;
itr.next(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; { value: undefined, done: true }&lt;/span&gt;
你可以通过 [Symbol.iterator]() 自定义一个对象的迭代器。
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.16. Generators&lt;/h2&gt;
&lt;p&gt;Generator 函数是 ES6 的新特性，它允许一个函数返回的可遍历对象生成多个值。&lt;/p&gt;
&lt;p&gt;在使用中你会看到 * 语法和一个新的关键词 yield:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;infiniteNumbers&lt;/span&gt;() &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;){
    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; n++;
  }
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numbers = infiniteNumbers(); 

numbers.next(); 
numbers.next(); 
numbers.next(); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每次执行 yield 时，返回的值变为迭代器的下一个值。&lt;/p&gt;
&lt;h2&gt;1.17. Promises&lt;/h2&gt;
&lt;p&gt;ES6 对 Promise 有了原生的支持，一个 Promise 是一个等待被异步执行的对象，当它执行完成后，其状态会变成 resolved 或者 rejected。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;{  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; () {
    
    resolve();  
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    
    reject();  
  }
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每一个 Promise 都有一个 .then 方法，这个方法接受两个参数，第一个是处理 resolved 状态的回调，一个是处理 rejected 状态的回调：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
p.then((val) =&amp;gt; console.log(&quot;Promise Resolved&quot;&lt;span&gt;, val),
       (err) &lt;/span&gt;=&amp;gt; console.log(&quot;Promise Rejected&quot;, err));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ES6之前使用RequireJS或者seaJS实现模块化， requireJS是基于AMD规范的模块化库， 而像seaJS是基于CMD规范的模块化库， 两者都是为了为了推广前端模块化的工具。&lt;/p&gt;
&lt;p&gt;现在ES6自带了模块化， 也是JS第一次支持module， 在很久以后 ，我们可以直接作用import和export在浏览器中导入和导出各个模块了， 一个js文件代表一个js模块；&lt;/p&gt;
&lt;p&gt;现代浏览器对模块(module)支持程度不同， 目前都是使用babelJS， 或者Traceur把ES6代码转化为兼容ES5版本的js代码;&lt;/p&gt;
&lt;h2&gt;2.1、ES6模块化特点&lt;/h2&gt;
&lt;p&gt;1、每一个模块只加载一次， 每一个JS只执行一次， 如果下次再去加载同目录下同文件，直接从内存中读取。 一个模块就是一个单例，或者说就是一个对象；&lt;/p&gt;
&lt;p&gt;2、每一个模块内声明的变量都是局部变量， 不会污染全局作用域；&lt;/p&gt;
&lt;p&gt;3、模块内部的变量或者函数可以通过export导出；&lt;/p&gt;
&lt;p&gt;4、一个模块可以导入别的模块&lt;/p&gt;
&lt;h2&gt;2.1、在Chrome浏览器使用Module&lt;/h2&gt;
&lt;p&gt;Chrome 61就提供了对ES2015 import语句的支持，实现模块加载&lt;/p&gt;
&lt;p&gt;查看版本的办法是：在chrome浏览器中输入chrome://version/&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109135840722-2033817153.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;谷歌浏览器(Canary 60) – 需要在chrome:flags里开启”实验性网络平台功能(Experimental Web Platform)”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109140119457-1187190867.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例：lib.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 *定义模块
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出&lt;/span&gt;
export let msg=&quot;求和：&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum(n){
    let total&lt;/span&gt;=0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=1;i&amp;lt;=n;i++&lt;span&gt;){
        total&lt;/span&gt;+=&lt;span&gt;i;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; total;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;html:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Module模块&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
       &lt;span&gt;&lt;strong&gt; &amp;lt;script type=&quot;module&quot;&amp;gt;&lt;/strong&gt;&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入&lt;/span&gt;
&lt;span&gt;            import {sum,msg} from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./lib.js&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            let result&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;sum(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
            console.log(msg&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;result);
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109141253582-889350680.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.2、在Node.js中使用Module&lt;/h2&gt;
&lt;p&gt;升级node 8.5 使用 experimental-modules参数，且要求所有文件名后缀都要修改为mjs&lt;br/&gt;node --experimental-modules index.mjs&lt;br/&gt;定义模块lib.mjs:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 *定义模块
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出&lt;/span&gt;
export let msg=&quot;求和：&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum(n){
    let total&lt;/span&gt;=0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=1;i&amp;lt;=n;i++&lt;span&gt;){
        total&lt;/span&gt;+=&lt;span&gt;i;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; total;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义main.mjs文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 使用模块
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入&lt;/span&gt;
import { sum, msg } from './lib.mjs'&lt;span&gt;;
let result &lt;/span&gt;= sum(100&lt;span&gt;);
console.log(msg &lt;/span&gt;+ &quot;&quot; + result);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在命令行下转换到当前目录，使用node加参数experimental-modules执行，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109142234238-1284799056.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.3、Babel&lt;/h2&gt;
&lt;p&gt;Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109123456519-972958795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.3.1、配置环境&lt;/h3&gt;
&lt;p&gt;安装babel命令行工具：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm &lt;span&gt;install&lt;/span&gt; --global babel-cli
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109123855160-1509282356.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装成功后可以使用babel -V查看版本，可以使用babel -help 查看帮助&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109151217269-563943955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建项目，在当前项目中依赖babel-core&lt;/p&gt;
&lt;p&gt;假定当前项目的目录为：E:\Desktop-temp\xww\FastResponse\Mobile\Hybird\vue2_01\vue07_03_babel&lt;/p&gt;
&lt;p&gt;使用npm init可以初始化当前项目为node项目&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm &lt;span&gt;install&lt;/span&gt; babel-core --save
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依赖插件babel-preset-es2015&lt;/p&gt;
&lt;p&gt;如果想使用es6语法，必须安装一个插件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm &lt;span&gt;install&lt;/span&gt; babel-preset-es2015
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在文件夹下面创建一个叫.babelrc的文件，并写入如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
&lt;/span&gt;&quot;presets&quot;: [&quot;es2015&quot;&lt;span&gt;]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;windows不支持直接命令为.babelrc，可以在DOS下使用@echo结合&amp;gt;实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109152348894-812752102.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.babelrc文件以rc结尾的文件通常代表运行时自动加载的文件，配置等等的，类似bashrc,zshrc。同样babelrc在这里也是有同样的作用的，而且在babel6中，这个文件必不可少。&lt;br/&gt;在babel6中，预设了6种，分别是：es2015、stage-0、stage-1、stage-2、stage-3、react&lt;/p&gt;
&lt;h3&gt;2.3.2、转换ES6为ES5&lt;/h3&gt;
&lt;p&gt;当环境准备好了，就可以编写一个es6风格的文件如：es6.js，内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let add=(x,y)=&amp;gt;x+&lt;span&gt;y;
const n1&lt;/span&gt;=100,n2=200&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result=&lt;span&gt;add(n1,n2);
console.log(result);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在当前目录执行命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
babel es6.js -o es5.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109153854566-2066677435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;转换后的结果es5.js：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&quot;use strict&quot;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; add = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; add(x, y) {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x +&lt;span&gt; y;
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; n1 = 100&lt;span&gt;,
    n2 &lt;/span&gt;= 200&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; add(n1, n2);
console.log(result);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从转换后的结果可以看出es6已变成es5了，箭头函数不见了。 &lt;/p&gt;
&lt;h3&gt;2.3.3、使用babel-node运行ES6模块化代码&lt;/h3&gt;
&lt;p&gt;babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境。它支持Node的REPL（交互式解释器环境）环境的所有功能，而且可以直接运行ES6代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109154451129-1193770269.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在当前目录下创建lib.js文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 *定义模块
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出&lt;/span&gt;
export let msg=&quot;求和：&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum(n){
    let total&lt;/span&gt;=0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=1;i&amp;lt;=n;i++&lt;span&gt;){
        total&lt;/span&gt;+=&lt;span&gt;i;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; total;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建main.js文件调用定义好的模块：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 使用模块
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入&lt;/span&gt;
import { sum, msg } from './lib.js'&lt;span&gt;;
let result &lt;/span&gt;= sum(100&lt;span&gt;);
console.log(msg &lt;/span&gt;+ &quot;&quot; + result);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在命令行执行：babel-node main.js 结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180109154721801-964643018.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里共讲解了3种可以运行ES6模块化的环境，任选一种可以用于学习。&lt;/p&gt;
&lt;h2&gt;2.4、模块(Modules)&lt;/h2&gt;
&lt;p&gt;ES6从语言层面对模块进行了支持。编写方式借鉴了流行的JavaScript模块加载器（AMD, CommonJS）。由宿主环境的默认加载器定义模块运行时的行为，采取隐式异步模式——在模块可以被获取和加载前不会有代码执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义模块：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;// lib/math.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
export &lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum(x, y) {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x +&lt;span&gt; y;
}
export &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pi = 3.141593;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;导入模块：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;全部导入  &lt;/span&gt;
import people from './example'  
  
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有一种特殊情况，即允许你将整个模块当作单一对象进行导入  &lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;该模块的所有导出都会作为对象的属性存在  &lt;/span&gt;
import * as example from &quot;./example.js&quot;&lt;span&gt;  
console.log(example.name)  
console.log(example.age)  
console.log(example.getName())  
  
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入部分  &lt;/span&gt;
import {name, age} from './example'  
  
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出默认, 有且只有一个默认  &lt;/span&gt;
export &lt;span&gt;default&lt;/span&gt;&lt;span&gt; App  
  
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 部分导出  &lt;/span&gt;
export class App extend Component {};  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;*表示所有，as取别名&lt;/p&gt;
&lt;p&gt;// app.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import * as math from &quot;lib/math&quot;&lt;span&gt;;
console.log(&lt;/span&gt;&quot;2π = &quot; + math.sum(math.pi, math.pi));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;// otherApp.js&lt;/p&gt;
&lt;p&gt;导入部分内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import {sum, pi} from &quot;lib/math&quot;&lt;span&gt;;
console.log(&lt;/span&gt;&quot;2π = &quot; + sum(pi, pi));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有的功能包括：export default and export *:&lt;/p&gt;
&lt;p&gt;// lib/mathplusplus.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
export * from &quot;lib/math&quot;&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; e = 2.71828182846&lt;span&gt;;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(x) {
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Math.exp(x);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;// app.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import exp, {pi, e} from &quot;lib/mathplusplus&quot;&lt;span&gt;;
console.log(&lt;/span&gt;&quot;e^π = &quot; + exp(pi));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入的时候有没有大括号的区别：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.当用export default people导出时，就用 import people 导入（不带大括号）&lt;/li&gt;
&lt;li&gt;2.一个文件里，有且只能有一个export default。但可以有多个export。&lt;/li&gt;
&lt;li&gt;3.当用export name 时，就用import { name }导入（记得带上大括号）&lt;/li&gt;
&lt;li&gt;4.当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age }&lt;/li&gt;
&lt;li&gt;5.当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;模块的格式：&lt;/p&gt;
&lt;p&gt;Babel可以将ES2015的模块转换为一下几种格式：Common.js，AMD，System，以及UMD。你甚至可以创建你自己的方式。&lt;/p&gt;
&lt;h3&gt;2.4.1、导出方式一&lt;/h3&gt;
&lt;p&gt;使用 export{接口} 导出接口， 大括号中的接口名字为上面定义的变量， import和export是对应的；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lib.js 文件&lt;/span&gt;
let bar = &quot;stringBar&quot;&lt;span&gt;;
let foo &lt;/span&gt;= &quot;stringFoo&quot;&lt;span&gt;;
let fn0 &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
    console.log(&lt;/span&gt;&quot;fn0&quot;&lt;span&gt;);
};
let fn1 &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
    console.log(&lt;/span&gt;&quot;fn1&quot;&lt;span&gt;);
};
export{ bar , foo, fn0, fn1}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;main.js文件&lt;/span&gt;
import {bar,foo, fn0, fn1} from &quot;./lib&quot;&lt;span&gt;;
console.log(bar&lt;/span&gt;+&quot;_&quot;+&lt;span&gt;foo);
fn0();
fn1();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;先配置babel的运行环境，创建util.js文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
let PI=3.14&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getArea(r){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; PI*r*&lt;span&gt;r;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;集中导出对象&lt;/span&gt;
export {PI,getArea}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入模块main.js：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import {PI,getArea} from './util'&lt;span&gt;

console.log(&lt;/span&gt;&quot;R=5时面积为：&quot;+getArea(5));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111091944035-802183271.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111092124316-1450068584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.4.2、导出方式二&lt;/h3&gt;
&lt;p&gt;在export接口的时候， 我们可以使用 XX as YY， 把导出的接口名字改了， 比如： closureFn as sayingFn， 把这些接口名字改成不看文档就知道干什么的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lib.js文件&lt;/span&gt;
let fn0 = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
    console.log(&lt;/span&gt;&quot;fn0&quot;&lt;span&gt;);
};
let obj0 &lt;/span&gt;=&lt;span&gt; {}
export { fn0 as foo, obj0 as bar};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;main.js文件&lt;/span&gt;
import {foo, bar} from &quot;./lib&quot;&lt;span&gt;;
foo();
console.log(bar);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.4.3、导出方式三&lt;/h3&gt;
&lt;p&gt;这种方式是直接在export的地方定义导出的函数，或者变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lib.js文件&lt;/span&gt;
export let foo = ()=&amp;gt; {console.log(&quot;fnFoo&quot;) ;&lt;span&gt;return&lt;/span&gt; &quot;foo&quot;},bar = &quot;stringBar&quot;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;main.js文件&lt;/span&gt;
import {foo, bar} from &quot;./lib&quot;&lt;span&gt;;
console.log(foo());
console.log(bar);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.4.4、导出方式四&lt;/h3&gt;
&lt;p&gt;这种导出的方式不需要知道变量的名字， 相当于是匿名的， 直接把开发的接口给export；&lt;br/&gt;如果一个js模块文件就只有一个功能， 那么就可以使用export default导出；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lib.js&lt;/span&gt;
export &lt;span&gt;default&lt;/span&gt; &quot;string&quot;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;main.js&lt;/span&gt;
import defaultString from &quot;./lib&quot;&lt;span&gt;;
console.log(defaultString);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.4.5、导出方式五&lt;/h3&gt;
&lt;p&gt;export也能默认导出函数， 在import的时候， 名字随便写， 因为每一个模块的默认接口就一个&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lib.js&lt;/span&gt;
let fn = () =&amp;gt; &quot;string&quot;&lt;span&gt;;
export {fn as &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;main.js&lt;/span&gt;
import defaultFn from &quot;./lib&quot;&lt;span&gt;;
console.log(defaultFn());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.4.6、导出方式六&lt;/h3&gt;
&lt;p&gt;使用通配符* ,重新导出其他模块的接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;lib.js&lt;/span&gt;
export * from &quot;./other&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果只想导出部分接口， 只要把接口名字列出来&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;export {foo,fnFoo} from &quot;./other&quot;;&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;other.js&lt;/span&gt;
export let foo = &quot;stringFoo&quot;, fnFoo = &lt;span&gt;function&lt;/span&gt;() {console.log(&quot;fnFoo&quot;&lt;span&gt;)};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;main.js&lt;/span&gt;
import {foo, fnFoo} from &quot;./lib&quot;&lt;span&gt;;
console.log(foo);
console.log(fnFoo());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在import的时候可以使用通配符*导入外部的模块：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import * as obj from &quot;./lib&quot;&lt;span&gt;;
console.log(obj);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;2.5、模块加载器(Module Loaders)&lt;/h2&gt;
&lt;p&gt;这并不是ES2015的一部分：这部分ECMAScript 2015规范是由实现定义（implementation-defined）的。最终的标准将在WHATWG的Loader 规范中确定，目前这项工作正在进行中，下面的内容来自于之前的ES2015草稿。&lt;/p&gt;
&lt;p&gt;模块加载器支持以下功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;动态加载（Dynamic loading）&lt;/li&gt;
&lt;li&gt;状态一致性（State isolation）&lt;/li&gt;
&lt;li&gt;全局空间一致性（Global namespace isolation）&lt;/li&gt;
&lt;li&gt;编译钩子（Compilation hooks）&lt;/li&gt;
&lt;li&gt;嵌套虚拟化（Nested virtualization）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;你可以对默认的加载器进行配置，构建出新的加载器，可以被加载于独立或受限的执行环境。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 动态加载 – ‘System’ 是默认的加载器&lt;/span&gt;
System.import(&quot;lib/math&quot;).then(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(m) {
alert(&lt;/span&gt;&quot;2π = &quot; +&lt;span&gt; m.sum(m.pi, m.pi));
});

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建执行沙箱 – new Loaders&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; loader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Loader({
global: fixup(window) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; replace ‘console.log’&lt;/span&gt;
&lt;span&gt;});
loader.eval(&lt;/span&gt;&quot;console.log(\&quot;hello world!\&quot;);&quot;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接操作模块的缓存&lt;/span&gt;
System.get(&quot;jquery&quot;&lt;span&gt;);
System.set(&lt;/span&gt;&quot;jquery&quot;, Module({$: $})); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; WARNING: not yet finalized&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要额外的polyfill&lt;br/&gt;由于Babel默认使用common.js的模块，你需要一个polyfill来使用加载器API。&lt;/p&gt;
&lt;p&gt;使用模块加载器&lt;br/&gt;为了使用此功能，你需要告诉Babel使用system模块格式化工具。&lt;/p&gt;

&lt;p&gt;单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。&lt;/p&gt;
&lt;p&gt;提供一个官方命令行工具，可用于快速搭建大型单页应用（SPA）。该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
# 全局安装 vue-&lt;span&gt;cli
＄ npm &lt;/span&gt;&lt;span&gt;install&lt;/span&gt; --global vue-&lt;span&gt;cli
# 创建一个基于 webpack 模板的新项目
＄ vue init webpack my&lt;/span&gt;-&lt;span&gt;project
# 安装依赖，走你
＄ cd my&lt;/span&gt;-&lt;span&gt;project
＄ npm &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt;
＄ npm run dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：CLI 工具假定用户对 Node.js 和相关构建工具有一定程度的了解。如果你是新手，我们强烈建议先在不用构建工具的情况下通读指南，在熟悉 Vue 本身之后再使用 CLI。&lt;/p&gt;
&lt;h2&gt;3.1、环境搭建&lt;/h2&gt;
&lt;h3&gt;3.1.1、安装node.js&lt;/h3&gt;
&lt;p&gt;从n&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot;&gt;ode.js官网&lt;/a&gt;下载并安装node，安装过程很简单，一路“下一步”就可以了。安装完成之后，打开命令行工具(win+r，然后输入cmd)，输入 node -v，如下图，如果出现相应的版本号，则说明安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227090911526-34144813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果安装不成功，可以直接把安装包修改成压缩包，解压后配置环境变量也可以，就成了绿色版。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227090709541-1804525284.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里需要说明下，因为在官网下载安装node.js后，就已经自带npm（包管理工具）了，另需要注意的是npm的版本最好是3.x.x以上，以免对后续产生影响。&lt;/p&gt;
&lt;p&gt;注意版本不能太低，如果您已经安装了低版本的node可以使用npm直接更新。&lt;/p&gt;
&lt;h3&gt;3.1.2、修改npm为淘宝镜像（非必要）&lt;/h3&gt;
&lt;p&gt;因为npm的仓库有许多在国外，访问的速度较慢，建议修改成cnpm，换成taobao的镜像。&lt;/p&gt;
&lt;p&gt;打开命令行工具，复制如下配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm &lt;span&gt;install&lt;/span&gt; -g cnpm --registry=https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;registry.npm.taobao.org&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装这里是因为我们用的npm的服务器是外国，有的时候我们安装“依赖”的时候很很慢很慢超级慢，所以就用这个cnpm来安装我们说需要的“依赖”。安装完成之后输入 cnpm -v，如下图，如果出现相应的版本号，则说明安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227091708635-2018470631.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;版本号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227091817916-479955516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.1.3、安装webpack&lt;/h3&gt;
&lt;p&gt;安装webpack，打开命令行工具输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm &lt;span&gt;install&lt;/span&gt; webpack -g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227092111557-2133066784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装完成之后输入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
webpack -v
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如下图，如果出现相应的版本号，则说明安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227092155854-468013152.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.1.4、安装vue-cli脚手架构建工具&lt;/h3&gt;
&lt;p&gt;打开命令行工具输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
cnpm &lt;span&gt;install&lt;/span&gt; vue-cli -g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完成之后输入 vue -V（注意这里是大写的“V”），如下图，如果出现相应的版本号，则说明安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227093502729-1372950933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2、构建项目&lt;/h2&gt;
&lt;p&gt;1)、在硬盘上找一个文件夹放工程用的。这里有两种方式指定到相关目录：&lt;/p&gt;
&lt;p&gt;①cd 目录路径&lt;/p&gt;
&lt;p&gt;②如果以安装git的，在相关目录右键选择Git Bash Here&lt;/p&gt;
&lt;p&gt;2)、安装vue脚手架输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
vue init webpack projectName
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这里的“projectName” 是项目的名称可以说是随便的起名，但是“&lt;span&gt;不能用中文&lt;/span&gt;”，要求全部小写。&lt;/p&gt;
&lt;p&gt;提示选择项：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f5519d63-1c76-48f0-b187-f7f27a28b28a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f5519d63-1c76-48f0-b187-f7f27a28b28a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f5519d63-1c76-48f0-b187-f7f27a28b28a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f5519d63-1c76-48f0-b187-f7f27a28b28a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f5519d63-1c76-48f0-b187-f7f27a28b28a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
$ vue init webpack exprice ---------------------&lt;span&gt; 这个是那个安装vue脚手架的命令
This will &lt;/span&gt;&lt;span&gt;install&lt;/span&gt; Vue &lt;span&gt;2&lt;/span&gt;.x version of the template. ---------------------这里说明将要创建一个vue &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.x版本的项目
For Vue &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;.x use: vue init webpack#&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt; exprice
&lt;/span&gt;? Project name (exprice) ---------------------&lt;span&gt;项目名称
&lt;/span&gt;?&lt;span&gt; Project name exprice
&lt;/span&gt;? Project description (A Vue.js project) ---------------------&lt;span&gt;项目描述
&lt;/span&gt;?&lt;span&gt; Project description A Vue.js project
&lt;/span&gt;? Author Datura ---------------------&lt;span&gt; 项目创建者
&lt;/span&gt;?&lt;span&gt; Author Datura
&lt;/span&gt;?&lt;span&gt; Vue build (Use arrow keys)
&lt;/span&gt;?&lt;span&gt; Vue build standalone
&lt;/span&gt;? Install vue-router? (Y/n) ---------------------&lt;span&gt; 是否安装Vue路由，也就是以后是spa（但页面应用需要的模块）
&lt;/span&gt;? Install vue-router?&lt;span&gt; Yes
&lt;/span&gt;? Use ESLint to lint your code? (Y/n) n ---------------------&lt;span&gt;是否启用eslint检测规则，这里个人建议选no
&lt;/span&gt;? Use ESLint to lint your code?&lt;span&gt; No
&lt;/span&gt;? Setup unit tests with Karma + Mocha? (Y/&lt;span&gt;n)
&lt;/span&gt;? Setup unit tests with Karma + Mocha?&lt;span&gt; Yes
&lt;/span&gt;? Setup e2e tests with Nightwatch? (Y/&lt;span&gt;n)
&lt;/span&gt;? Setup e2e tests with Nightwatch?&lt;span&gt; Yes
vue&lt;/span&gt;-cli · Generated &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exprice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.
To get started: &lt;/span&gt;---------------------&lt;span&gt; 这里说明如何启动这个服务
cd exprice
npm &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt;
npm run dev
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227094909057-1168210976.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3）、cd 命令进入创建的工程目录，首先cd projectName；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/63651/201712/63651-20171225202633697-49547651.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
|-- build                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 项目构建(webpack)相关代码&lt;/span&gt;
|   |-- build.js                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生产环境构建代码&lt;/span&gt;
|   |-- check-version.js             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查node、npm等版本&lt;/span&gt;
|   |-- dev-client.js                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 热重载相关&lt;/span&gt;
|   |-- dev-server.js                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构建本地服务器&lt;/span&gt;
|   |-- utils.js                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 构建工具相关&lt;/span&gt;
|   |-- webpack.base.conf.js         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpack基础配置&lt;/span&gt;
|   |-- webpack.dev.conf.js          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpack开发环境配置&lt;/span&gt;
|   |-- webpack.prod.conf.js         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpack生产环境配置&lt;/span&gt;
|-- config                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 项目开发环境配置&lt;/span&gt;
|   |-- dev.env.js                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开发环境变量&lt;/span&gt;
|   |-- index.js                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 项目一些配置变量&lt;/span&gt;
|   |-- prod.env.js                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生产环境变量&lt;/span&gt;
|   |-- test.env.js                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 测试环境变量&lt;/span&gt;
|-- src                              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 源码目录&lt;/span&gt;
|   |-- components                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; vue公共组件&lt;/span&gt;
|   |-- store                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; vuex的状态管理&lt;/span&gt;
|   |-- App.vue                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 页面入口文件&lt;/span&gt;
|   |-- main.js                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 程序入口文件，加载各种公共组件&lt;/span&gt;
|-- static                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 静态文件，比如一些图片，json数据等&lt;/span&gt;
|   |-- data                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 群聊分析得到的数据用于数据可视化&lt;/span&gt;
|-- .babelrc                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ES6语法编译配置&lt;/span&gt;
|-- .editorconfig                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义代码格式&lt;/span&gt;
|-- .gitignore                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; git上传需要忽略的文件格式&lt;/span&gt;
|-- README.md                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 项目说明&lt;/span&gt;
|--&lt;span&gt; favicon.ico 
&lt;/span&gt;|-- index.html                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 入口页面&lt;/span&gt;
|-- package.json                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 项目基本信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.3、运行项目&lt;/h2&gt;
&lt;p&gt;6）、启动项目，输入：npm run dev。服务启动成功后浏览器会默认打开一个“欢迎页面”，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227095057073-1165044851.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;编译成功后可以直接在浏览器中查看项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227095249948-1785617410.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.4、Vue-cli HelloWorld&lt;/h2&gt;
&lt;p&gt;了解了默认的模板内容，我们可以开始定义自己的vue程序了，这里写一个简单的HelloWorld，在src目录下创建一个Hi.vue文件，内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;msg&quot;&lt;/span&gt;&lt;span&gt; v-on:click&lt;/span&gt;&lt;span&gt;=&quot;sayhi&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{msg}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
        name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        data() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                msg: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;My First vue-cli app!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            }
        },
        methods:{
            sayhi:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.msg);
            }
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    #app1 &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        font-family&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;microsoft yahei&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; dodgerblue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改main.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The Vue build version to load with the `import` command&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; (runtime-only or standalone) has been set in webpack.base.conf with an alias.&lt;/span&gt;
import Vue from 'vue'&lt;span&gt;
import App from &lt;/span&gt;'./Hi'&lt;span&gt;

Vue.config.productionTip &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; eslint-disable no-new &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#app'&lt;span&gt;,
  template: &lt;/span&gt;'&amp;lt;App/&amp;gt;'&lt;span&gt;,
  components: { App }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201712/63651-20171227110816182-719448401.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.5、打包发布&lt;/h2&gt;
&lt;p&gt;自己的项目文件都需要放到 src 文件夹下&lt;/p&gt;
&lt;p&gt;项目开发完成之后，可以输入 npm run build 来进行打包工作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm run build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看&lt;/p&gt;
&lt;p&gt;项目上线时，只需要将 dist 文件夹放到服务器就行了。&lt;/p&gt;

&lt;h2&gt;4.1、创建项目&lt;/h2&gt;
&lt;p&gt;在磁盘中新建一个空文件夹作为项目的根目录，如c:\todolist&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111100053785-2030315207.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用webpack的模板初始化一个项目：vue init webpack todolist&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111100702441-1595059029.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.2、运行默认项目&lt;/h2&gt;
&lt;p&gt;当看到如下结果时创建项目就完成了，可以运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111100951894-1982243565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 当所有的依赖加载完成后就可以使用指令：npm run dev 运行默认项目了&lt;/p&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111101111879-2019458567.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中运行：localhost:8080&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111101218035-239545598.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目的分析可以看视频，这里直接就创建todolist模块：&lt;/p&gt;
&lt;h2&gt;4.3、创建组件&lt;/h2&gt;
&lt;p&gt;工作基本原理在视频中已讲解，请查看视频，在页面尾部。&lt;/p&gt;
&lt;h3&gt;4.3.1、创建子组件TodoItem&lt;/h3&gt;
&lt;p&gt;将项目导入到开发工具中，如HBuilder，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111105037394-1775149509.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在：todolist\src\components创建TodoItem.vue组件&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{title}} &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;del&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;x&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
        props: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
        methods: {
            del: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$emit(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通知父组件执行事件delete&lt;/span&gt;
&lt;span&gt;            }
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    .item &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
    
    .item button &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4.3.2、创建父组件Todo&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;任务：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;newtask&quot;&lt;/span&gt;&lt;span&gt; @keypress.enter&lt;/span&gt;&lt;span&gt;=&quot;addNew&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;=&quot;TodoItem&quot;&lt;/span&gt;&lt;span&gt; v-for&lt;/span&gt;&lt;span&gt;=&quot;(task,index) in tasks&quot;&lt;/span&gt;&lt;span&gt; :title&lt;/span&gt;&lt;span&gt;=&quot;task&quot;&lt;/span&gt;&lt;span&gt; @delete&lt;/span&gt;&lt;span&gt;=&quot;remove(index)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    import TodoItem from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./TodoItem&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
        data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                tasks: [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;买一本书&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;给爸妈打电话&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;整理自己的硬盘&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
                newtask:&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;
            }
        },
        components: {
            TodoItem
        },
        methods: {
            remove: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(index) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(confirm(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您真的要删除吗？&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)) {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tasks.splice(index, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                }
            },
            addNew:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tasks.unshift(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.newtask);
            }
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.4、在App.Vue根组件中调用Todo组件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./assets/logo.png&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TodoItem &lt;/span&gt;&lt;span&gt;:title&lt;/span&gt;&lt;span&gt;=&quot;'任务项'&quot;&lt;/span&gt;&lt;span&gt; @delete&lt;/span&gt;&lt;span&gt;='remove'&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TodoItem&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Todo&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    import HelloWorld from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./components/HelloWorld&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    import TodoItem from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./components/TodoItem&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    import Todo from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./components/Todo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
        name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        components: {
            HelloWorld,
            TodoItem,
            Todo
        },
        methods: {
            remove: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除事件&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    #app &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
        font-family&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 'Avenir', Helvetica, Arial, sans-serif&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        -webkit-font-smoothing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; antialiased&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        -moz-osx-font-smoothing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; grayscale&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2c3e50&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
        margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.5、测试结果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111111316535-407034125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.6、发布项目&lt;/h2&gt;
&lt;p&gt;进入项目的当前目录，在dos下执行npm run build&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111111756691-799819384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 当发布成功时会生成一个dist的目录，这就是最终运行的项目，代码经过了转换，压缩，混淆。&lt;/p&gt;
&lt;h2&gt;4.7、运行发布的项目&lt;/h2&gt;
&lt;p&gt;将dist目录放到运行环境下，这里就直接拖动到HBuilder的项目目录中，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111112553863-1348488793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将index.html文件中的绝对路径修改为相对路径，注意static之前的斜线：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=utf-8&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=viewport &lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width,initial-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;todolist&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=static/css/app.b4bf92d7b44dab6d09d7150561ccda45.css &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=stylesheet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=app&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=text/javascript &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=static/js/manifest.c7e501867173ed73c464.js&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=text/javascript &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=static/js/vendor.8226f675e046df334018.js&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=text/javascript &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=static/js/app.96fcd6038a3373ac14ee.js&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在浏览器中查看的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111112835457-673380019.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5.1、熟悉ES6的语法，写一个箭头函数，使用Babel转换成ES5的脚本。&lt;/p&gt;
&lt;p&gt;5.2、创建一个模块定义一个用于计算最大值的方法，引用该模块并调用计算最大值的方法输出结果。分别使用三种不同的环境执行。&lt;/p&gt;
&lt;p&gt;5.3、创建一个vue-cli下的项目，实现TodoList功能，如第四节所示。&lt;/p&gt;
&lt;p&gt;5.4、在Vue-cli环境下定义一个分页组件，调用并发布项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/63651/201801/63651-20180111123354254-782337044.png&quot; alt=&quot;&quot; width=&quot;314&quot; height=&quot;35&quot;/&gt;&lt;/p&gt;
&lt;p&gt;要求：在第一页时，禁用上一页，以及首页按钮；在最后一页时，禁用下一页，以及尾页按钮；超出范围的页码以...来代替&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av17503637/&quot; target=&quot;_blank&quot;&gt;https://www.bilibili.com/video/av17503637/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git.coding.net/zhangguo5/vue2.git&quot; target=&quot;_blank&quot;&gt;https://git.coding.net/zhangguo5/vue2.git&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 11 Jan 2018 04:37:00 +0000</pubDate>
<dc:creator>张果</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/best/p/8267787.html</dc:identifier>
</item>
</channel>
</rss>