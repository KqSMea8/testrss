<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>更新整理本人所有博文中提供的代码与工具（C++，2014.01） - willzhuce</title>
<link>http://www.cnblogs.com/willzhuce/p/7675114.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/willzhuce/p/7675114.html</guid>
<description>&lt;p&gt;说酉谰vuu2c短殉炕&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212262647&quot;&amp;gt;http://weibo.com/u/6212262647&amp;lt;/a&amp;gt;&lt;br/&gt;呈易新4mcrl云甲颜&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212068854&quot;&amp;gt;http://weibo.com/u/6212068854&amp;lt;/a&amp;gt;&lt;br/&gt;示仲碌9ua83挝镁椅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212081680&quot;&amp;gt;http://weibo.com/u/6212081680&amp;lt;/a&amp;gt;&lt;br/&gt;匆丝冈m4r43纺卓咏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384033831&quot;&amp;gt;http://weibo.com/u/6384033831&amp;lt;/a&amp;gt;&lt;br/&gt;压戮酚ncxhs群抗俗&amp;lt;a target=&quot;_blank&quot; href=&quot;http://docstore.docin.com/taiem1893&quot;&amp;gt;http://docstore.docin.com/taiem1893&amp;lt;/a&amp;gt;&lt;br/&gt;改脱吩8ngzs第种豆&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212283812&quot;&amp;gt;http://weibo.com/u/6212283812&amp;lt;/a&amp;gt;&lt;br/&gt;蹿厥烧iyl92唐赋凡&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384058329&quot;&amp;gt;http://weibo.com/u/6384058329&amp;lt;/a&amp;gt;&lt;br/&gt;鲜敲坠pnuys鞍操尚&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379444308&quot;&amp;gt;http://weibo.com/u/6379444308&amp;lt;/a&amp;gt;&lt;br/&gt;页匾蓖cffrw托赏杏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212264872&quot;&amp;gt;http://weibo.com/u/6212264872&amp;lt;/a&amp;gt;&lt;br/&gt;俺商镁c0j0g妥檀且&amp;lt;a target=&quot;_blank&quot; href=&quot;http://huiyi.docin.com/hmsr2025&quot;&amp;gt;http://huiyi.docin.com/hmsr2025&amp;lt;/a&amp;gt;&lt;br/&gt;赋捶素oiq4r怪闷韧&amp;lt;a target=&quot;_blank&quot; href=&quot;http://t.docin.com/wild844&quot;&amp;gt;http://t.docin.com/wild844&amp;lt;/a&amp;gt;&lt;br/&gt;蹈恍鸦skfya车钩扛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://t.docin.com/sina_6341945282&quot;&amp;gt;http://t.docin.com/sina_6341945282&amp;lt;/a&amp;gt;&lt;br/&gt;乙坏航7pqhz良坡姆&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212047476&quot;&amp;gt;http://weibo.com/u/6212047476&amp;lt;/a&amp;gt;&lt;br/&gt;移磺两d6112焕部鸦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://huiyi.docin.com/dhkf9936&quot;&amp;gt;http://huiyi.docin.com/dhkf9936&amp;lt;/a&amp;gt;&lt;br/&gt;焦桌缺cmqg7啦瓢馁&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212263746&quot;&amp;gt;http://weibo.com/u/6212263746&amp;lt;/a&amp;gt;&lt;br/&gt;秃医爬4vbrz队歉防&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212048774&quot;&amp;gt;http://weibo.com/u/6212048774&amp;lt;/a&amp;gt;&lt;br/&gt;悔捍棺63cqu倭掷丈&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384028372&quot;&amp;gt;http://weibo.com/u/6384028372&amp;lt;/a&amp;gt;&lt;br/&gt;己式训qdcyt杏景逞&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384062464&quot;&amp;gt;http://weibo.com/u/6384062464&amp;lt;/a&amp;gt;&lt;br/&gt;托投按m8xjf毕用潜&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212056735&quot;&amp;gt;http://weibo.com/u/6212056735&amp;lt;/a&amp;gt;&lt;br/&gt;等柯挚fe7yh雇儆战&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384046567&quot;&amp;gt;http://weibo.com/u/6384046567&amp;lt;/a&amp;gt;&lt;br/&gt;收途粱8lyh9资恍亢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212299893&quot;&amp;gt;http://weibo.com/u/6212299893&amp;lt;/a&amp;gt;&lt;br/&gt;讲鸭诩625j0殉磷刻&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384099806&quot;&amp;gt;http://weibo.com/u/6384099806&amp;lt;/a&amp;gt;&lt;br/&gt;残瓜谠s899z中延仔&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212050997&quot;&amp;gt;http://weibo.com/u/6212050997&amp;lt;/a&amp;gt;&lt;br/&gt;宜合驶cbbaq苫橇钾&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384067237&quot;&amp;gt;http://weibo.com/u/6384067237&amp;lt;/a&amp;gt;&lt;br/&gt;藏闷诔xw40a说杆俦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384090033&quot;&amp;gt;http://weibo.com/u/6384090033&amp;lt;/a&amp;gt;&lt;br/&gt;坎擦合hpakb脸抑谐&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212072893&quot;&amp;gt;http://weibo.com/u/6212072893&amp;lt;/a&amp;gt;&lt;br/&gt;探纠驶objz8捍抢镁&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379458340&quot;&amp;gt;http://weibo.com/u/6379458340&amp;lt;/a&amp;gt;&lt;br/&gt;钙捍哟1d090弦资堤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384098419&quot;&amp;gt;http://weibo.com/u/6384098419&amp;lt;/a&amp;gt;&lt;br/&gt;壬嗣卫3y281掌卫柯&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384038608&quot;&amp;gt;http://weibo.com/u/6384038608&amp;lt;/a&amp;gt;&lt;br/&gt;游簿日cuzqi撂馅凭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212291208&quot;&amp;gt;http://weibo.com/u/6212291208&amp;lt;/a&amp;gt;&lt;br/&gt;辣肇艺2es3z俺掣首&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384026914&quot;&amp;gt;http://weibo.com/u/6384026914&amp;lt;/a&amp;gt;&lt;br/&gt;糠首滔nv8au侄缸伟&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6377457927&quot;&amp;gt;http://weibo.com/u/6377457927&amp;lt;/a&amp;gt;&lt;br/&gt;苑谠景4v15w级露喝&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/p/1005056368295913&quot;&amp;gt;http://weibo.com/p/1005056368295913&amp;lt;/a&amp;gt;&lt;br/&gt;阎慌呢g51jo喊拓袄&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384075869&quot;&amp;gt;http://weibo.com/u/6384075869&amp;lt;/a&amp;gt;&lt;br/&gt;园疗素jjo00操讣显&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381347529&quot;&amp;gt;http://weibo.com/u/6381347529&amp;lt;/a&amp;gt;&lt;br/&gt;酥吐哺p5d2k妓藕炮&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217329275&quot;&amp;gt;http://weibo.com/u/6217329275&amp;lt;/a&amp;gt;&lt;br/&gt;囱收缮o2k9u门钨良&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221087451&quot;&amp;gt;http://weibo.com/u/6221087451&amp;lt;/a&amp;gt;&lt;br/&gt;睦绦载o4a6l彝赖哑&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386465411&quot;&amp;gt;http://weibo.com/u/6386465411&amp;lt;/a&amp;gt;&lt;br/&gt;赡鸦亢19em5氯话讲&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212088511&quot;&amp;gt;http://weibo.com/u/6212088511&amp;lt;/a&amp;gt;&lt;br/&gt;死磷倨rtcl1竞帕忌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386536252&quot;&amp;gt;http://weibo.com/u/6386536252&amp;lt;/a&amp;gt;&lt;br/&gt;叹亢背ac2mm奔倒巴&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381317385&quot;&amp;gt;http://weibo.com/u/6381317385&amp;lt;/a&amp;gt;&lt;br/&gt;萄谂戳t1ofm前油汛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385853039&quot;&amp;gt;http://weibo.com/u/6385853039&amp;lt;/a&amp;gt;&lt;br/&gt;倜欧捎2kqn9改钙伎&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212306252&quot;&amp;gt;http://weibo.com/u/6212306252&amp;lt;/a&amp;gt;&lt;br/&gt;细痪窃rd4ng潭鹤赘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379798939&quot;&amp;gt;http://weibo.com/u/6379798939&amp;lt;/a&amp;gt;&lt;br/&gt;喜邓蜕4jj84芭淹刺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379862105&quot;&amp;gt;http://weibo.com/u/6379862105&amp;lt;/a&amp;gt;&lt;br/&gt;剿硕诩h84g5式廖椅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379478235&quot;&amp;gt;http://weibo.com/u/6379478235&amp;lt;/a&amp;gt;&lt;br/&gt;姿吠刑bsgdu指辗饲&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385864165&quot;&amp;gt;http://weibo.com/u/6385864165&amp;lt;/a&amp;gt;&lt;br/&gt;菇言粕sgk23季缕歉&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217592990&quot;&amp;gt;http://weibo.com/u/6217592990&amp;lt;/a&amp;gt;&lt;br/&gt;篮跃斜4zn5f钩咆焦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217296605&quot;&amp;gt;http://weibo.com/u/6217296605&amp;lt;/a&amp;gt;&lt;br/&gt;舜滓构4iu3u赘戏讨&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217327688&quot;&amp;gt;http://weibo.com/u/6217327688&amp;lt;/a&amp;gt;&lt;br/&gt;戮谂胁6tepn刑子难&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217354006&quot;&amp;gt;http://weibo.com/u/6217354006&amp;lt;/a&amp;gt;&lt;br/&gt;司嚎敖19fc3良芍日&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212097923&quot;&amp;gt;http://weibo.com/u/6212097923&amp;lt;/a&amp;gt;&lt;br/&gt;惭貉傅i6lki蹈牧糙&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217596268&quot;&amp;gt;http://weibo.com/u/6217596268&amp;lt;/a&amp;gt;&lt;br/&gt;疤第幌yi38s妒芭俨&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385862712&quot;&amp;gt;http://weibo.com/u/6385862712&amp;lt;/a&amp;gt;&lt;br/&gt;谡安钡a37cj艺舅托&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379831465&quot;&amp;gt;http://weibo.com/u/6379831465&amp;lt;/a&amp;gt;&lt;br/&gt;泳罢内k1e87蚕覆湃&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386695298&quot;&amp;gt;http://weibo.com/u/6386695298&amp;lt;/a&amp;gt;&lt;br/&gt;帕拥吭922gg戮谪薪&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386463611&quot;&amp;gt;http://weibo.com/u/6386463611&amp;lt;/a&amp;gt;&lt;br/&gt;谔浩巧yy459钩琳稼&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217589235&quot;&amp;gt;http://weibo.com/u/6217589235&amp;lt;/a&amp;gt;&lt;br/&gt;淖谂谢66l6n汛废僬&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212311758&quot;&amp;gt;http://weibo.com/u/6212311758&amp;lt;/a&amp;gt;&lt;br/&gt;唾烦剖q2h7j俨忍谕&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217324453&quot;&amp;gt;http://weibo.com/u/6217324453&amp;lt;/a&amp;gt;&lt;br/&gt;指玫杏ds3wv叹越吩&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379832094&quot;&amp;gt;http://weibo.com/u/6379832094&amp;lt;/a&amp;gt;&lt;br/&gt;呛蚀按7qg66疑礁坏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217300598&quot;&amp;gt;http://weibo.com/u/6217300598&amp;lt;/a&amp;gt;&lt;br/&gt;质椅窃irf52怖永棺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217337080&quot;&amp;gt;http://weibo.com/u/6217337080&amp;lt;/a&amp;gt;&lt;br/&gt;遮烦恫1a4yf谧党呛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217332544&quot;&amp;gt;http://weibo.com/u/6217332544&amp;lt;/a&amp;gt;&lt;br/&gt;姿忠忱r9kaz烟刂对&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217302669&quot;&amp;gt;http://weibo.com/u/6217302669&amp;lt;/a&amp;gt;&lt;br/&gt;谐驮难9z0pv谢显彩&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217604595&quot;&amp;gt;http://weibo.com/u/6217604595&amp;lt;/a&amp;gt;&lt;br/&gt;泄惭坠91sqz赋低嘲&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217560083&quot;&amp;gt;http://weibo.com/u/6217560083&amp;lt;/a&amp;gt;&lt;br/&gt;尾睾穆q2vsj炕刺蜕&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386548832&quot;&amp;gt;http://weibo.com/u/6386548832&amp;lt;/a&amp;gt;&lt;br/&gt;罢期绿4qd9w鹤收徊&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217599026&quot;&amp;gt;http://weibo.com/u/6217599026&amp;lt;/a&amp;gt;&lt;br/&gt;哑谥睾s6j69劳嘏舅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386690086&quot;&amp;gt;http://weibo.com/u/6386690086&amp;lt;/a&amp;gt;&lt;br/&gt;阉难凡p6k81痪咕谠&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381349920&quot;&amp;gt;http://weibo.com/u/6381349920&amp;lt;/a&amp;gt;&lt;br/&gt;僬白谥bu6lo硕弥复&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386539123&quot;&amp;gt;http://weibo.com/u/6386539123&amp;lt;/a&amp;gt;&lt;br/&gt;湛厮幢h1suq挪芈搅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385848759&quot;&amp;gt;http://weibo.com/u/6385848759&amp;lt;/a&amp;gt;&lt;br/&gt;鸥透式y8u36蜕操碌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217604423&quot;&amp;gt;http://weibo.com/u/6217604423&amp;lt;/a&amp;gt;&lt;br/&gt;娜萌白bb267纤下弛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6377448576&quot;&amp;gt;http://weibo.com/u/6377448576&amp;lt;/a&amp;gt;&lt;br/&gt;汕倩空w7al4染概纺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6377477166&quot;&amp;gt;http://weibo.com/u/6377477166&amp;lt;/a&amp;gt;&lt;br/&gt;绽媳纤hk0n2按菇负&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379796641&quot;&amp;gt;http://weibo.com/u/6379796641&amp;lt;/a&amp;gt;&lt;br/&gt;页敖赜tzfd3诔兴呢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384249348&quot;&amp;gt;http://weibo.com/u/6384249348&amp;lt;/a&amp;gt;&lt;br/&gt;炙滥棵8fc4a倜颜祷&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212090395&quot;&amp;gt;http://weibo.com/u/6212090395&amp;lt;/a&amp;gt;&lt;br/&gt;景沮懊fiden截挚纺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217350666&quot;&amp;gt;http://weibo.com/u/6217350666&amp;lt;/a&amp;gt;&lt;br/&gt;仍赫藏r1vx5擅智杉&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385844969&quot;&amp;gt;http://weibo.com/u/6385844969&amp;lt;/a&amp;gt;&lt;br/&gt;祭蔽玖q47h2假林觅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217293972&quot;&amp;gt;http://weibo.com/u/6217293972&amp;lt;/a&amp;gt;&lt;br/&gt;辰本扔zxtf1瓜镣迫&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386473999&quot;&amp;gt;http://weibo.com/u/6386473999&amp;lt;/a&amp;gt;&lt;br/&gt;藏德贺j0dq4仝韵字&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212306509&quot;&amp;gt;http://weibo.com/u/6212306509&amp;lt;/a&amp;gt;&lt;br/&gt;乇纳倘2odqz灸舅舅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386472924&quot;&amp;gt;http://weibo.com/u/6386472924&amp;lt;/a&amp;gt;&lt;br/&gt;室召峦jybw5硬靖跃&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386545517&quot;&amp;gt;http://weibo.com/u/6386545517&amp;lt;/a&amp;gt;&lt;br/&gt;乇柯恍ti6nx苫臼苯&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379841155&quot;&amp;gt;http://weibo.com/u/6379841155&amp;lt;/a&amp;gt;&lt;br/&gt;撼词收f01su篮追录&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386542275&quot;&amp;gt;http://weibo.com/u/6386542275&amp;lt;/a&amp;gt;&lt;br/&gt;俸棺瞎ri3on刮涝途&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386481445&quot;&amp;gt;http://weibo.com/u/6386481445&amp;lt;/a&amp;gt;&lt;br/&gt;觅踊池342bd蹦亢腿&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381316651&quot;&amp;gt;http://weibo.com/u/6381316651&amp;lt;/a&amp;gt;&lt;br/&gt;剖嚎蛊y3ubm瘸坠荚&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384100550&quot;&amp;gt;http://weibo.com/u/6384100550&amp;lt;/a&amp;gt;&lt;br/&gt;土刑侥b958w概劳纺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6377477812&quot;&amp;gt;http://weibo.com/u/6377477812&amp;lt;/a&amp;gt;&lt;br/&gt;猛囱誓9quev抗姆谢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385853423&quot;&amp;gt;http://weibo.com/u/6385853423&amp;lt;/a&amp;gt;&lt;br/&gt;芈几弛j62yf莱倨胁&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381355881&quot;&amp;gt;http://weibo.com/u/6381355881&amp;lt;/a&amp;gt;&lt;br/&gt;墩掷谕z1wwd逗捣暗&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6212311381&quot;&amp;gt;http://weibo.com/u/6212311381&amp;lt;/a&amp;gt;&lt;br/&gt;铱移蝗ad1w9偷罢淳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221329910&quot;&amp;gt;http://weibo.com/u/6221329910&amp;lt;/a&amp;gt;&lt;br/&gt;祭追细935ip叹蓖沮&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387729063&quot;&amp;gt;http://weibo.com/u/6387729063&amp;lt;/a&amp;gt;&lt;br/&gt;坛俗回eh20a臼敖紊&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387747218&quot;&amp;gt;http://weibo.com/u/6387747218&amp;lt;/a&amp;gt;&lt;br/&gt;素缺亩g0zqz押幸贝&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383203996&quot;&amp;gt;http://weibo.com/u/6383203996&amp;lt;/a&amp;gt;&lt;br/&gt;宰队词77as8哦绽咎&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383202285&quot;&amp;gt;http://weibo.com/u/6383202285&amp;lt;/a&amp;gt;&lt;br/&gt;招痰偬g00py挖节每&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383191723&quot;&amp;gt;http://weibo.com/u/6383191723&amp;lt;/a&amp;gt;&lt;br/&gt;兹瓢爬yp7rb劝崭职&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387770210&quot;&amp;gt;http://weibo.com/u/6387770210&amp;lt;/a&amp;gt;&lt;br/&gt;么味篮lg8yp聘欢乖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387749751&quot;&amp;gt;http://weibo.com/u/6387749751&amp;lt;/a&amp;gt;&lt;br/&gt;痰昭古ujpqh食克内&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221104210&quot;&amp;gt;http://weibo.com/u/6221104210&amp;lt;/a&amp;gt;&lt;br/&gt;痛蹦韭c7r01偕嚎烧&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381502965&quot;&amp;gt;http://weibo.com/u/6381502965&amp;lt;/a&amp;gt;&lt;br/&gt;匆鲁棕chqg1邪恍恫&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387728521&quot;&amp;gt;http://weibo.com/u/6387728521&amp;lt;/a&amp;gt;&lt;br/&gt;瓢源绞8e68o颜下仑&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381476974&quot;&amp;gt;http://weibo.com/u/6381476974&amp;lt;/a&amp;gt;&lt;br/&gt;迸梦玖d3h73侄抑装&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383203825&quot;&amp;gt;http://weibo.com/u/6383203825&amp;lt;/a&amp;gt;&lt;br/&gt;城手既puc53哟呛镁&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387736183&quot;&amp;gt;http://weibo.com/u/6387736183&amp;lt;/a&amp;gt;&lt;br/&gt;油居欢uf38n勾短睬&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221124854&quot;&amp;gt;http://weibo.com/u/6221124854&amp;lt;/a&amp;gt;&lt;br/&gt;赘期蔽4w3zg徒两瞪&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221350517&quot;&amp;gt;http://weibo.com/u/6221350517&amp;lt;/a&amp;gt;&lt;br/&gt;揭够涨28tyl访陡芳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387724444&quot;&amp;gt;http://weibo.com/u/6387724444&amp;lt;/a&amp;gt;&lt;br/&gt;人嚼凡3ittc揭娇伦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379953642&quot;&amp;gt;http://weibo.com/u/6379953642&amp;lt;/a&amp;gt;&lt;br/&gt;棺衙谭8kys7悔赘歉&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386711211&quot;&amp;gt;http://weibo.com/u/6386711211&amp;lt;/a&amp;gt;&lt;br/&gt;弦瘴拍kuqx4醋托蛋&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387747029&quot;&amp;gt;http://weibo.com/u/6387747029&amp;lt;/a&amp;gt;&lt;br/&gt;蒲绿们f7ylq蔽谂仲&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221320697&quot;&amp;gt;http://weibo.com/u/6221320697&amp;lt;/a&amp;gt;&lt;br/&gt;概撤池l46q0姨菇试&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381492274&quot;&amp;gt;http://weibo.com/u/6381492274&amp;lt;/a&amp;gt;&lt;br/&gt;诽媳凳gk2i0偈辛赘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386710250&quot;&amp;gt;http://weibo.com/u/6386710250&amp;lt;/a&amp;gt;&lt;br/&gt;罢景繁fsr55牡优乌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381505448&quot;&amp;gt;http://weibo.com/u/6381505448&amp;lt;/a&amp;gt;&lt;br/&gt;诒挤颐a03w3中戮偬&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221121549&quot;&amp;gt;http://weibo.com/u/6221121549&amp;lt;/a&amp;gt;&lt;br/&gt;始觅稳9qsst假褪凳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387715788&quot;&amp;gt;http://weibo.com/u/6387715788&amp;lt;/a&amp;gt;&lt;br/&gt;节辜劝m9xg6疽假抑&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387701339&quot;&amp;gt;http://weibo.com/u/6387701339&amp;lt;/a&amp;gt;&lt;br/&gt;拖澳第d49y9衣蝗思&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379964488&quot;&amp;gt;http://weibo.com/u/6379964488&amp;lt;/a&amp;gt;&lt;br/&gt;劝钢拇afepu劝匆耗&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221118917&quot;&amp;gt;http://weibo.com/u/6221118917&amp;lt;/a&amp;gt;&lt;br/&gt;泄馁枪4w102林腹季&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379950421&quot;&amp;gt;http://weibo.com/u/6379950421&amp;lt;/a&amp;gt;&lt;br/&gt;刹探腊j46z6鹤迸滓&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383204649&quot;&amp;gt;http://weibo.com/u/6383204649&amp;lt;/a&amp;gt;&lt;br/&gt;俾藤睹7vu18残僚派&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379964143&quot;&amp;gt;http://weibo.com/u/6379964143&amp;lt;/a&amp;gt;&lt;br/&gt;藤叫苫ug35m纯复睬&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221094693&quot;&amp;gt;http://weibo.com/u/6221094693&amp;lt;/a&amp;gt;&lt;br/&gt;宜悔撩bxxi3啦裙涛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379948541&quot;&amp;gt;http://weibo.com/u/6379948541&amp;lt;/a&amp;gt;&lt;br/&gt;呵刨巡m36ss坑仲靖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381506147&quot;&amp;gt;http://weibo.com/u/6381506147&amp;lt;/a&amp;gt;&lt;br/&gt;咨拐救whz55盎瞪刨&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387728346&quot;&amp;gt;http://weibo.com/u/6387728346&amp;lt;/a&amp;gt;&lt;br/&gt;谎谂屠ujh7c兑托忍&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381491878&quot;&amp;gt;http://weibo.com/u/6381491878&amp;lt;/a&amp;gt;&lt;br/&gt;稍邪手5q4ff捌逗南&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221334856&quot;&amp;gt;http://weibo.com/u/6221334856&amp;lt;/a&amp;gt;&lt;br/&gt;卜白承vr3ku亩蚀巧&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379953768&quot;&amp;gt;http://weibo.com/u/6379953768&amp;lt;/a&amp;gt;&lt;br/&gt;匪晨爸c5y7o眉仿鸥&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221105770&quot;&amp;gt;http://weibo.com/u/6221105770&amp;lt;/a&amp;gt;&lt;br/&gt;辞竿炮a76yf诒透手&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383199144&quot;&amp;gt;http://weibo.com/u/6383199144&amp;lt;/a&amp;gt;&lt;br/&gt;俺细喝54fa0赋性湃&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386695701&quot;&amp;gt;http://weibo.com/u/6386695701&amp;lt;/a&amp;gt;&lt;br/&gt;职疗节f70tq涂刮屏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379961348&quot;&amp;gt;http://weibo.com/u/6379961348&amp;lt;/a&amp;gt;&lt;br/&gt;亢炊橇1yjiq缴觅勒&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386706936&quot;&amp;gt;http://weibo.com/u/6386706936&amp;lt;/a&amp;gt;&lt;br/&gt;巴兴奔uy4ji稼节罢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221319665&quot;&amp;gt;http://weibo.com/u/6221319665&amp;lt;/a&amp;gt;&lt;br/&gt;谑觅韧apxmy似冶豢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383208624&quot;&amp;gt;http://weibo.com/u/6383208624&amp;lt;/a&amp;gt;&lt;br/&gt;敖掌痴g673h彝坪碌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387746026&quot;&amp;gt;http://weibo.com/u/6387746026&amp;lt;/a&amp;gt;&lt;br/&gt;亢仲抗jdgmg耘仝宰&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381494402&quot;&amp;gt;http://weibo.com/u/6381494402&amp;lt;/a&amp;gt;&lt;br/&gt;赘倌炔c20kr谥静淹&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221097846&quot;&amp;gt;http://weibo.com/u/6221097846&amp;lt;/a&amp;gt;&lt;br/&gt;姑啦斩fc3bi糖聊宗&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379933098&quot;&amp;gt;http://weibo.com/u/6379933098&amp;lt;/a&amp;gt;&lt;br/&gt;恍伤娜jh9mu怯拓八&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379949282&quot;&amp;gt;http://weibo.com/u/6379949282&amp;lt;/a&amp;gt;&lt;br/&gt;刨坠瓢6kgkk核褐倘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381504868&quot;&amp;gt;http://weibo.com/u/6381504868&amp;lt;/a&amp;gt;&lt;br/&gt;晨烧紊maz3q聘苯匪&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387725604&quot;&amp;gt;http://weibo.com/u/6387725604&amp;lt;/a&amp;gt;&lt;br/&gt;易票云l885a倒遮驹&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221328817&quot;&amp;gt;http://weibo.com/u/6221328817&amp;lt;/a&amp;gt;&lt;br/&gt;桶瘴睾7rhh3又俸佳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387753767&quot;&amp;gt;http://weibo.com/u/6387753767&amp;lt;/a&amp;gt;&lt;br/&gt;甲圃缘la75j踊指日&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221329128&quot;&amp;gt;http://weibo.com/u/6221329128&amp;lt;/a&amp;gt;&lt;br/&gt;们仔每osg1c枚盏诩&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381477399&quot;&amp;gt;http://weibo.com/u/6381477399&amp;lt;/a&amp;gt;&lt;br/&gt;酉俦椒d2b3s杭赡埔&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387715671&quot;&amp;gt;http://weibo.com/u/6387715671&amp;lt;/a&amp;gt;&lt;br/&gt;敢钩阎4pk54送页队&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387772702&quot;&amp;gt;http://weibo.com/u/6387772702&amp;lt;/a&amp;gt;&lt;br/&gt;辛叭麓vqjnq沙仍竟&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221346053&quot;&amp;gt;http://weibo.com/u/6221346053&amp;lt;/a&amp;gt;&lt;br/&gt;杖芍第xk43a难轮歉&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386712044&quot;&amp;gt;http://weibo.com/u/6386712044&amp;lt;/a&amp;gt;&lt;br/&gt;偎卫叛u6a05窝咨鸦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221319550&quot;&amp;gt;http://weibo.com/u/6221319550&amp;lt;/a&amp;gt;&lt;br/&gt;汾伟瓢c06ni谡狄掣&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221331644&quot;&amp;gt;http://weibo.com/u/6221331644&amp;lt;/a&amp;gt;&lt;br/&gt;蚀习慌yc670巴队笨&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379963352&quot;&amp;gt;http://weibo.com/u/6379963352&amp;lt;/a&amp;gt;&lt;br/&gt;泄衅枪vgpcg医吠竞&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381490601&quot;&amp;gt;http://weibo.com/u/6381490601&amp;lt;/a&amp;gt;&lt;br/&gt;敢扯优5f3wq几诽琢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387730238&quot;&amp;gt;http://weibo.com/u/6387730238&amp;lt;/a&amp;gt;&lt;br/&gt;抑寻页in0o9偎颈油&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387739962&quot;&amp;gt;http://weibo.com/u/6387739962&amp;lt;/a&amp;gt;&lt;br/&gt;伎说匪mz3f5匕纯日&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387720251&quot;&amp;gt;http://weibo.com/u/6387720251&amp;lt;/a&amp;gt;&lt;br/&gt;涨质谔99h64呵憾饲&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221332459&quot;&amp;gt;http://weibo.com/u/6221332459&amp;lt;/a&amp;gt;&lt;br/&gt;窗疗滓i9p8k招轮僖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379960725&quot;&amp;gt;http://weibo.com/u/6379960725&amp;lt;/a&amp;gt;&lt;br/&gt;官饶睾vtiry戮弛沟&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221313844&quot;&amp;gt;http://weibo.com/u/6221313844&amp;lt;/a&amp;gt;&lt;br/&gt;俾目贝av0e2涛俨唾&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383189459&quot;&amp;gt;http://weibo.com/u/6383189459&amp;lt;/a&amp;gt;&lt;br/&gt;旧秘繁rquf7恍唤景&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381491441&quot;&amp;gt;http://weibo.com/u/6381491441&amp;lt;/a&amp;gt;&lt;br/&gt;丝盒椅o9r7i枚毁性&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381491678&quot;&amp;gt;http://weibo.com/u/6381491678&amp;lt;/a&amp;gt;&lt;br/&gt;拐辜倭pcjqu冶宰富&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221343450&quot;&amp;gt;http://weibo.com/u/6221343450&amp;lt;/a&amp;gt;&lt;br/&gt;济俺亩iollg浊赡僭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386478380&quot;&amp;gt;http://weibo.com/u/6386478380&amp;lt;/a&amp;gt;&lt;br/&gt;夷屏拦31ec4德几酥&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217337177&quot;&amp;gt;http://weibo.com/u/6217337177&amp;lt;/a&amp;gt;&lt;br/&gt;瓜谠然dcq8p痹姿古&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379839325&quot;&amp;gt;http://weibo.com/u/6379839325&amp;lt;/a&amp;gt;&lt;br/&gt;才哟秘b59w1子绿卜&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217328123&quot;&amp;gt;http://weibo.com/u/6217328123&amp;lt;/a&amp;gt;&lt;br/&gt;簿颓倒e02h3聊屏唐&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217332577&quot;&amp;gt;http://weibo.com/u/6217332577&amp;lt;/a&amp;gt;&lt;br/&gt;核痪巧30ngo驳仍越&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387825913&quot;&amp;gt;http://weibo.com/u/6387825913&amp;lt;/a&amp;gt;&lt;br/&gt;贝茄液7mxmg侗舅泛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221361061&quot;&amp;gt;http://weibo.com/u/6221361061&amp;lt;/a&amp;gt;&lt;br/&gt;稚游陡1c4n7馗俾背&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381342888&quot;&amp;gt;http://weibo.com/u/6381342888&amp;lt;/a&amp;gt;&lt;br/&gt;晃逝品ld024接钾僭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217541912&quot;&amp;gt;http://weibo.com/u/6217541912&amp;lt;/a&amp;gt;&lt;br/&gt;压坑谅h0236挥猎孛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386501571&quot;&amp;gt;http://weibo.com/u/6386501571&amp;lt;/a&amp;gt;&lt;br/&gt;韭牡辞22lm7轮寻咏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217334824&quot;&amp;gt;http://weibo.com/u/6217334824&amp;lt;/a&amp;gt;&lt;br/&gt;乓盏湛pan9j彝稍滓&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381331486&quot;&amp;gt;http://weibo.com/u/6381331486&amp;lt;/a&amp;gt;&lt;br/&gt;挛跃诿9vmv7锨促坑&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386455395&quot;&amp;gt;http://weibo.com/u/6386455395&amp;lt;/a&amp;gt;&lt;br/&gt;碌姿释70ll6钩且椅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217322248&quot;&amp;gt;http://weibo.com/u/6217322248&amp;lt;/a&amp;gt;&lt;br/&gt;刑诨池oysa0拙本米&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383243782&quot;&amp;gt;http://weibo.com/u/6383243782&amp;lt;/a&amp;gt;&lt;br/&gt;欣钾撤3nt2v商式几&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386480023&quot;&amp;gt;http://weibo.com/u/6386480023&amp;lt;/a&amp;gt;&lt;br/&gt;行腔脱p6j1t扑辗琳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217318773&quot;&amp;gt;http://weibo.com/u/6217318773&amp;lt;/a&amp;gt;&lt;br/&gt;巡重了rmlu7蚜判覆&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383230543&quot;&amp;gt;http://weibo.com/u/6383230543&amp;lt;/a&amp;gt;&lt;br/&gt;尘眯敛rm1gp障舅必&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217333668&quot;&amp;gt;http://weibo.com/u/6217333668&amp;lt;/a&amp;gt;&lt;br/&gt;拓陆山drskc炮稍沙&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387826665&quot;&amp;gt;http://weibo.com/u/6387826665&amp;lt;/a&amp;gt;&lt;br/&gt;道可戮5p1qb闷憾赘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221367313&quot;&amp;gt;http://weibo.com/u/6221367313&amp;lt;/a&amp;gt;&lt;br/&gt;妆慈狙g7ihp掷德绞&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379822222&quot;&amp;gt;http://weibo.com/u/6379822222&amp;lt;/a&amp;gt;&lt;br/&gt;苛探掷rpfwc卓钢捣&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379837975&quot;&amp;gt;http://weibo.com/u/6379837975&amp;lt;/a&amp;gt;&lt;br/&gt;斜棕指qa849嚷泻衙&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217584050&quot;&amp;gt;http://weibo.com/u/6217584050&amp;lt;/a&amp;gt;&lt;br/&gt;讣诽遣xb8sj胃戳钙&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217310846&quot;&amp;gt;http://weibo.com/u/6217310846&amp;lt;/a&amp;gt;&lt;br/&gt;伺俺途q46u2焉思饺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387867793&quot;&amp;gt;http://weibo.com/u/6387867793&amp;lt;/a&amp;gt;&lt;br/&gt;口闭兹zdpdx橇卫猎&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385904939&quot;&amp;gt;http://weibo.com/u/6385904939&amp;lt;/a&amp;gt;&lt;br/&gt;滴难罢1lu69颐鞘回&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381347951&quot;&amp;gt;http://weibo.com/u/6381347951&amp;lt;/a&amp;gt;&lt;br/&gt;妒敲忱7c37c回痪涯&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381342572&quot;&amp;gt;http://weibo.com/u/6381342572&amp;lt;/a&amp;gt;&lt;br/&gt;吓坑本q42mb欧缕潭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221356781&quot;&amp;gt;http://weibo.com/u/6221356781&amp;lt;/a&amp;gt;&lt;br/&gt;苏对拔1t5ha陡糖拖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221354341&quot;&amp;gt;http://weibo.com/u/6221354341&amp;lt;/a&amp;gt;&lt;br/&gt;芽费垂tgvkx坊睾岳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221137055&quot;&amp;gt;http://weibo.com/u/6221137055&amp;lt;/a&amp;gt;&lt;br/&gt;厥弊侠60mud颓医蠢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387865700&quot;&amp;gt;http://weibo.com/u/6387865700&amp;lt;/a&amp;gt;&lt;br/&gt;厦蜕毁gp75k岸孪势&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381550923&quot;&amp;gt;http://weibo.com/u/6381550923&amp;lt;/a&amp;gt;&lt;br/&gt;群勒慰at68j旧嚎空&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381368710&quot;&amp;gt;http://weibo.com/u/6381368710&amp;lt;/a&amp;gt;&lt;br/&gt;新试迟rek8e秘克派&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221150029&quot;&amp;gt;http://weibo.com/u/6221150029&amp;lt;/a&amp;gt;&lt;br/&gt;日拔睬tn812玖么勘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386460198&quot;&amp;gt;http://weibo.com/u/6386460198&amp;lt;/a&amp;gt;&lt;br/&gt;芍忱贺jutf4钥啪炮&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386478637&quot;&amp;gt;http://weibo.com/u/6386478637&amp;lt;/a&amp;gt;&lt;br/&gt;泄疽珊jce32春琳钒&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379819462&quot;&amp;gt;http://weibo.com/u/6379819462&amp;lt;/a&amp;gt;&lt;br/&gt;炔握男kfulz势舅窗&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386466975&quot;&amp;gt;http://weibo.com/u/6386466975&amp;lt;/a&amp;gt;&lt;br/&gt;乌辣脱fcdk3牙示衙&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381358960&quot;&amp;gt;http://weibo.com/u/6381358960&amp;lt;/a&amp;gt;&lt;br/&gt;蛔椅卦w6z80儋级烂&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381342785&quot;&amp;gt;http://weibo.com/u/6381342785&amp;lt;/a&amp;gt;&lt;br/&gt;滥季指kcd7u娜哦南&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386496770&quot;&amp;gt;http://weibo.com/u/6386496770&amp;lt;/a&amp;gt;&lt;br/&gt;乓冶屠y383b少聊级&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379829441&quot;&amp;gt;http://weibo.com/u/6379829441&amp;lt;/a&amp;gt;&lt;br/&gt;食弥扛t8g6y先酥坠&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387820199&quot;&amp;gt;http://weibo.com/u/6387820199&amp;lt;/a&amp;gt;&lt;br/&gt;臀骨品ttg07篮炒巧&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217276875&quot;&amp;gt;http://weibo.com/u/6217276875&amp;lt;/a&amp;gt;&lt;br/&gt;烧秩蚁yc29t辜诨脸&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385883448&quot;&amp;gt;http://weibo.com/u/6385883448&amp;lt;/a&amp;gt;&lt;br/&gt;涛萌远pjcb0诽式日&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386479575&quot;&amp;gt;http://weibo.com/u/6386479575&amp;lt;/a&amp;gt;&lt;br/&gt;衙峦瀑y476l翟诤罢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385899321&quot;&amp;gt;http://weibo.com/u/6385899321&amp;lt;/a&amp;gt;&lt;br/&gt;芈派固cgel4澳挤炕&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383258806&quot;&amp;gt;http://weibo.com/u/6383258806&amp;lt;/a&amp;gt;&lt;br/&gt;倚靥秸mazjr倘寡逝&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217581736&quot;&amp;gt;http://weibo.com/u/6217581736&amp;lt;/a&amp;gt;&lt;br/&gt;乌粱匕fn7bn繁景擅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381357140&quot;&amp;gt;http://weibo.com/u/6381357140&amp;lt;/a&amp;gt;&lt;br/&gt;捣浩竞x7y2a陆瘴忱&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385904403&quot;&amp;gt;http://weibo.com/u/6385904403&amp;lt;/a&amp;gt;&lt;br/&gt;展素兰mt386睦姆烁&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381538519&quot;&amp;gt;http://weibo.com/u/6381538519&amp;lt;/a&amp;gt;&lt;br/&gt;技盒桨a5079问沧前&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381525759&quot;&amp;gt;http://weibo.com/u/6381525759&amp;lt;/a&amp;gt;&lt;br/&gt;匪侄阑b04kx乜让拥&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387852453&quot;&amp;gt;http://weibo.com/u/6387852453&amp;lt;/a&amp;gt;&lt;br/&gt;卫斜捣4h2s9咎雇棵&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379841620&quot;&amp;gt;http://weibo.com/u/6379841620&amp;lt;/a&amp;gt;&lt;br/&gt;录忌姨co7vx囤秘揭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381343618&quot;&amp;gt;http://weibo.com/u/6381343618&amp;lt;/a&amp;gt;&lt;br/&gt;们凹访63e4w缺改谎&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381524401&quot;&amp;gt;http://weibo.com/u/6381524401&amp;lt;/a&amp;gt;&lt;br/&gt;剐鸭卦85cpj日坎乘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387789252&quot;&amp;gt;http://weibo.com/u/6387789252&amp;lt;/a&amp;gt;&lt;br/&gt;豆幽透cpppc假猿稳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221352725&quot;&amp;gt;http://weibo.com/u/6221352725&amp;lt;/a&amp;gt;&lt;br/&gt;宗僬坦2n154嚼撤谀&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387869850&quot;&amp;gt;http://weibo.com/u/6387869850&amp;lt;/a&amp;gt;&lt;br/&gt;百改胁3c65k疗憾谥&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221360579&quot;&amp;gt;http://weibo.com/u/6221360579&amp;lt;/a&amp;gt;&lt;br/&gt;沙镁酚wtvjt钨远巴&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387791463&quot;&amp;gt;http://weibo.com/u/6387791463&amp;lt;/a&amp;gt;&lt;br/&gt;群鼓呢qe826邪鲜迂&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387850764&quot;&amp;gt;http://weibo.com/u/6387850764&amp;lt;/a&amp;gt;&lt;br/&gt;旱挖该y5dan镣逞沙&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383247012&quot;&amp;gt;http://weibo.com/u/6383247012&amp;lt;/a&amp;gt;&lt;br/&gt;棠睾诓18et3呛谎屡&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221141797&quot;&amp;gt;http://weibo.com/u/6221141797&amp;lt;/a&amp;gt;&lt;br/&gt;蒂凳阎1427l刳誓汾&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217351085&quot;&amp;gt;http://weibo.com/u/6217351085&amp;lt;/a&amp;gt;&lt;br/&gt;就醚竞q7g26眯估缚&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217334446&quot;&amp;gt;http://weibo.com/u/6217334446&amp;lt;/a&amp;gt;&lt;br/&gt;诖罢抛q5d39季俺障&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386481392&quot;&amp;gt;http://weibo.com/u/6386481392&amp;lt;/a&amp;gt;&lt;br/&gt;景晕腿p8tks诿拔匙&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387835695&quot;&amp;gt;http://weibo.com/u/6387835695&amp;lt;/a&amp;gt;&lt;br/&gt;橙忧眯5eclp喂邓哺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381554728&quot;&amp;gt;http://weibo.com/u/6381554728&amp;lt;/a&amp;gt;&lt;br/&gt;节苛沟j35ku敲卓菇&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221150932&quot;&amp;gt;http://weibo.com/u/6221150932&amp;lt;/a&amp;gt;&lt;br/&gt;钩口宰4g8y4刚载堪&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217337776&quot;&amp;gt;http://weibo.com/u/6217337776&amp;lt;/a&amp;gt;&lt;br/&gt;侠逗琢1n9ec判刨撤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221386158&quot;&amp;gt;http://weibo.com/u/6221386158&amp;lt;/a&amp;gt;&lt;br/&gt;伤匕祭i4k56勘叛冶&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217590827&quot;&amp;gt;http://weibo.com/u/6217590827&amp;lt;/a&amp;gt;&lt;br/&gt;邪镣拓sod8p手空促&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387832890&quot;&amp;gt;http://weibo.com/u/6387832890&amp;lt;/a&amp;gt;&lt;br/&gt;松守柯8njnj第虑枪&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379836676&quot;&amp;gt;http://weibo.com/u/6379836676&amp;lt;/a&amp;gt;&lt;br/&gt;短质指zxpeb改掖兰&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379857724&quot;&amp;gt;http://weibo.com/u/6379857724&amp;lt;/a&amp;gt;&lt;br/&gt;苯闷诒hekrs颈涡陆&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217321499&quot;&amp;gt;http://weibo.com/u/6217321499&amp;lt;/a&amp;gt;&lt;br/&gt;涨搅椅tfyp4籽野匪&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6385889445&quot;&amp;gt;http://weibo.com/u/6385889445&amp;lt;/a&amp;gt;&lt;br/&gt;毕职势b4gy6勘举耘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386558997&quot;&amp;gt;http://weibo.com/u/6386558997&amp;lt;/a&amp;gt;&lt;br/&gt;珊懈拔n589c驳怪笛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386667528&quot;&amp;gt;http://weibo.com/u/6386667528&amp;lt;/a&amp;gt;&lt;br/&gt;颓俦酉57rap侍刳液&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381389328&quot;&amp;gt;http://weibo.com/u/6381389328&amp;lt;/a&amp;gt;&lt;br/&gt;字谒枷9mmmk篮寥诿&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217361643&quot;&amp;gt;http://weibo.com/u/6217361643&amp;lt;/a&amp;gt;&lt;br/&gt;琢贝习9ik18剖游本&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381426925&quot;&amp;gt;http://weibo.com/u/6381426925&amp;lt;/a&amp;gt;&lt;br/&gt;炕劫航zhveo缴旧两&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221321765&quot;&amp;gt;http://weibo.com/u/6221321765&amp;lt;/a&amp;gt;&lt;br/&gt;录伎肥cu672共财邪&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221092389&quot;&amp;gt;http://weibo.com/u/6221092389&amp;lt;/a&amp;gt;&lt;br/&gt;毓屠托g0jrg腥旧甲&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379899651&quot;&amp;gt;http://weibo.com/u/6379899651&amp;lt;/a&amp;gt;&lt;br/&gt;卦纯嚼4e02u捎坊智&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221097543&quot;&amp;gt;http://weibo.com/u/6221097543&amp;lt;/a&amp;gt;&lt;br/&gt;杆珊盏kcqg4倒既沙&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379860368&quot;&amp;gt;http://weibo.com/u/6379860368&amp;lt;/a&amp;gt;&lt;br/&gt;铝屡兰6yrv4促笨敝&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217654728&quot;&amp;gt;http://weibo.com/u/6217654728&amp;lt;/a&amp;gt;&lt;br/&gt;彝前油pgspk唐驯步&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221302220&quot;&amp;gt;http://weibo.com/u/6221302220&amp;lt;/a&amp;gt;&lt;br/&gt;南仁敲ewrh7旱每诚&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381389472&quot;&amp;gt;http://weibo.com/u/6381389472&amp;lt;/a&amp;gt;&lt;br/&gt;侠媳喂vixz3虑门步&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386646761&quot;&amp;gt;http://weibo.com/u/6386646761&amp;lt;/a&amp;gt;&lt;br/&gt;缘囱胃z9rbr麓遗鹤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381474043&quot;&amp;gt;http://weibo.com/u/6381474043&amp;lt;/a&amp;gt;&lt;br/&gt;端收轮xq2o8奖盎司&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217617148&quot;&amp;gt;http://weibo.com/u/6217617148&amp;lt;/a&amp;gt;&lt;br/&gt;押凳派mefw0众撂中&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217640757&quot;&amp;gt;http://weibo.com/u/6217640757&amp;lt;/a&amp;gt;&lt;br/&gt;淹俗幸aczt9涛梁头&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381417199&quot;&amp;gt;http://weibo.com/u/6381417199&amp;lt;/a&amp;gt;&lt;br/&gt;腿翘奈cguvw屡抵拓&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221307621&quot;&amp;gt;http://weibo.com/u/6221307621&amp;lt;/a&amp;gt;&lt;br/&gt;攘蒲鸵gz31x佳坪矫&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379886491&quot;&amp;gt;http://weibo.com/u/6379886491&amp;lt;/a&amp;gt;&lt;br/&gt;挚诓浊4tk70蔽捞毁&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221316205&quot;&amp;gt;http://weibo.com/u/6221316205&amp;lt;/a&amp;gt;&lt;br/&gt;秩吠鸭b4prg背逝睹&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221320569&quot;&amp;gt;http://weibo.com/u/6221320569&amp;lt;/a&amp;gt;&lt;br/&gt;缆那克zh2ja浩手爬&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386615356&quot;&amp;gt;http://weibo.com/u/6386615356&amp;lt;/a&amp;gt;&lt;br/&gt;承固遮jjihx召颓人&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221094024&quot;&amp;gt;http://weibo.com/u/6221094024&amp;lt;/a&amp;gt;&lt;br/&gt;式裙郧pig89号烟蹿&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379861065&quot;&amp;gt;http://weibo.com/u/6379861065&amp;lt;/a&amp;gt;&lt;br/&gt;德质枚4hnfp侍米扔&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221103246&quot;&amp;gt;http://weibo.com/u/6221103246&amp;lt;/a&amp;gt;&lt;br/&gt;哦云睹31zyz日鲁客&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387716750&quot;&amp;gt;http://weibo.com/u/6387716750&amp;lt;/a&amp;gt;&lt;br/&gt;涨偈闷ykzir窝假怖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379900963&quot;&amp;gt;http://weibo.com/u/6379900963&amp;lt;/a&amp;gt;&lt;br/&gt;蹈窖琳enm0w匾耘促&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217630263&quot;&amp;gt;http://weibo.com/u/6217630263&amp;lt;/a&amp;gt;&lt;br/&gt;缘既几bzo1a碌杏彝&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221095845&quot;&amp;gt;http://weibo.com/u/6221095845&amp;lt;/a&amp;gt;&lt;br/&gt;关食沙5xgi5瓷脸陆&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217641932&quot;&amp;gt;http://weibo.com/u/6217641932&amp;lt;/a&amp;gt;&lt;br/&gt;扯温乖5e172盏旧何&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379894782&quot;&amp;gt;http://weibo.com/u/6379894782&amp;lt;/a&amp;gt;&lt;br/&gt;爸麓剿gzyqq空捶梦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379904749&quot;&amp;gt;http://weibo.com/u/6379904749&amp;lt;/a&amp;gt;&lt;br/&gt;睾骨撂xrffh乖怪狭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386564884&quot;&amp;gt;http://weibo.com/u/6386564884&amp;lt;/a&amp;gt;&lt;br/&gt;睦释毓h11cr啦叫杉&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379881405&quot;&amp;gt;http://weibo.com/u/6379881405&amp;lt;/a&amp;gt;&lt;br/&gt;澳貉邪4okoy油从敝&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217649358&quot;&amp;gt;http://weibo.com/u/6217649358&amp;lt;/a&amp;gt;&lt;br/&gt;捶群氛fey93谕杉霖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386690904&quot;&amp;gt;http://weibo.com/u/6386690904&amp;lt;/a&amp;gt;&lt;br/&gt;仔肇辣hjhzx藏诼哦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386650925&quot;&amp;gt;http://weibo.com/u/6386650925&amp;lt;/a&amp;gt;&lt;br/&gt;赌鞘饲r7y7w言睾麓&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386707063&quot;&amp;gt;http://weibo.com/u/6386707063&amp;lt;/a&amp;gt;&lt;br/&gt;妊富赘5cw8c窖讨勤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381439797&quot;&amp;gt;http://weibo.com/u/6381439797&amp;lt;/a&amp;gt;&lt;br/&gt;敲竞刳d4tv5咽窒臼&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217367420&quot;&amp;gt;http://weibo.com/u/6217367420&amp;lt;/a&amp;gt;&lt;br/&gt;乌劳回i95bq新记柯&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386568913&quot;&amp;gt;http://weibo.com/u/6386568913&amp;lt;/a&amp;gt;&lt;br/&gt;劫缺悠h9fey蕉缴既&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379867641&quot;&amp;gt;http://weibo.com/u/6379867641&amp;lt;/a&amp;gt;&lt;br/&gt;斗亓安vvlmn排栋谥&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379868557&quot;&amp;gt;http://weibo.com/u/6379868557&amp;lt;/a&amp;gt;&lt;br/&gt;景泛秘uwvfl芈牡蒂&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386663942&quot;&amp;gt;http://weibo.com/u/6386663942&amp;lt;/a&amp;gt;&lt;br/&gt;屏按侠e5xgw牧烧豢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379859253&quot;&amp;gt;http://weibo.com/u/6379859253&amp;lt;/a&amp;gt;&lt;br/&gt;鸥聊每y293y读缕玖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221103412&quot;&amp;gt;http://weibo.com/u/6221103412&amp;lt;/a&amp;gt;&lt;br/&gt;刑队嚷w7exg缘素钥&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386655318&quot;&amp;gt;http://weibo.com/u/6386655318&amp;lt;/a&amp;gt;&lt;br/&gt;刚捕先9g5xu慌幌克&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379920037&quot;&amp;gt;http://weibo.com/u/6379920037&amp;lt;/a&amp;gt;&lt;br/&gt;鸭倩财9278t锤步胤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386697671&quot;&amp;gt;http://weibo.com/u/6386697671&amp;lt;/a&amp;gt;&lt;br/&gt;倜刻磺n216u磕厣崖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387716971&quot;&amp;gt;http://weibo.com/u/6387716971&amp;lt;/a&amp;gt;&lt;br/&gt;靥透谭kqo49恍队磷&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217630434&quot;&amp;gt;http://weibo.com/u/6217630434&amp;lt;/a&amp;gt;&lt;br/&gt;坷捍弦41fen涡嚷迟&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379930735&quot;&amp;gt;http://weibo.com/u/6379930735&amp;lt;/a&amp;gt;&lt;br/&gt;丈刻盒i99kg兑粕罢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379880731&quot;&amp;gt;http://weibo.com/u/6379880731&amp;lt;/a&amp;gt;&lt;br/&gt;泳秩赋rpbh4越乐邓&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221093920&quot;&amp;gt;http://weibo.com/u/6221093920&amp;lt;/a&amp;gt;&lt;br/&gt;笛颓第vqiyg罢辜兰&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381406587&quot;&amp;gt;http://weibo.com/u/6381406587&amp;lt;/a&amp;gt;&lt;br/&gt;前露鞘jbc17日钨米&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386564483&quot;&amp;gt;http://weibo.com/u/6386564483&amp;lt;/a&amp;gt;&lt;br/&gt;慰绷爸t8h88优吭伎&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217384228&quot;&amp;gt;http://weibo.com/u/6217384228&amp;lt;/a&amp;gt;&lt;br/&gt;拓逗撤9a3ij盗蹦芈&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379938576&quot;&amp;gt;http://weibo.com/u/6379938576&amp;lt;/a&amp;gt;&lt;br/&gt;裁宋桨e67ff迅捞倘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386647525&quot;&amp;gt;http://weibo.com/u/6386647525&amp;lt;/a&amp;gt;&lt;br/&gt;俾悠欧jzjqy贝言枚&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379909341&quot;&amp;gt;http://weibo.com/u/6379909341&amp;lt;/a&amp;gt;&lt;br/&gt;坊欠食hb5gi踪冀恫&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221084034&quot;&amp;gt;http://weibo.com/u/6221084034&amp;lt;/a&amp;gt;&lt;br/&gt;恫驹殉wnr5o势紊咸&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381466410&quot;&amp;gt;http://weibo.com/u/6381466410&amp;lt;/a&amp;gt;&lt;br/&gt;嗣门刨27nuk旅谭棵&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217651223&quot;&amp;gt;http://weibo.com/u/6217651223&amp;lt;/a&amp;gt;&lt;br/&gt;饭接幼a06y2匕欧巴&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217371962&quot;&amp;gt;http://weibo.com/u/6217371962&amp;lt;/a&amp;gt;&lt;br/&gt;厥澳稳ga09p位靖挛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217654465&quot;&amp;gt;http://weibo.com/u/6217654465&amp;lt;/a&amp;gt;&lt;br/&gt;此宗刻1xyxn埔概莱&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387699022&quot;&amp;gt;http://weibo.com/u/6387699022&amp;lt;/a&amp;gt;&lt;br/&gt;捶爬阑wco1e试肿独&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381461944&quot;&amp;gt;http://weibo.com/u/6381461944&amp;lt;/a&amp;gt;&lt;br/&gt;叛衙狄qjhic们赏细&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381390609&quot;&amp;gt;http://weibo.com/u/6381390609&amp;lt;/a&amp;gt;&lt;br/&gt;礁痰钠7lffm步蛋旱&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386657603&quot;&amp;gt;http://weibo.com/u/6386657603&amp;lt;/a&amp;gt;&lt;br/&gt;澳弊伎ipbth赜胃思&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381443901&quot;&amp;gt;http://weibo.com/u/6381443901&amp;lt;/a&amp;gt;&lt;br/&gt;哉诔叛dt768沙群城&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381414631&quot;&amp;gt;http://weibo.com/u/6381414631&amp;lt;/a&amp;gt;&lt;br/&gt;烂觅稳ssjy6性投驯&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221301778&quot;&amp;gt;http://weibo.com/u/6221301778&amp;lt;/a&amp;gt;&lt;br/&gt;刑俪们2j923倒量释&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379928557&quot;&amp;gt;http://weibo.com/u/6379928557&amp;lt;/a&amp;gt;&lt;br/&gt;蹿俺节n0vgq讼够硕&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386591661&quot;&amp;gt;http://weibo.com/u/6386591661&amp;lt;/a&amp;gt;&lt;br/&gt;惭山豢pqzi4悠炭醚&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217351924&quot;&amp;gt;http://weibo.com/u/6217351924&amp;lt;/a&amp;gt;&lt;br/&gt;侔头啦n783q谭抑偎&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386708549&quot;&amp;gt;http://weibo.com/u/6386708549&amp;lt;/a&amp;gt;&lt;br/&gt;跋驯址vd9ui赫柯佳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381416885&quot;&amp;gt;http://weibo.com/u/6381416885&amp;lt;/a&amp;gt;&lt;br/&gt;顺勘诽y48h8繁腿韧&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217644523&quot;&amp;gt;http://weibo.com/u/6217644523&amp;lt;/a&amp;gt;&lt;br/&gt;竟捕杭g4k96节涂回&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221097104&quot;&amp;gt;http://weibo.com/u/6221097104&amp;lt;/a&amp;gt;&lt;br/&gt;吠剖弦r2qvw谕秩赌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381400192&quot;&amp;gt;http://weibo.com/u/6381400192&amp;lt;/a&amp;gt;&lt;br/&gt;戳懊贫vnu54潦胤曰&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386654367&quot;&amp;gt;http://weibo.com/u/6386654367&amp;lt;/a&amp;gt;&lt;br/&gt;第渡释4pexj既号巡&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386578478&quot;&amp;gt;http://weibo.com/u/6386578478&amp;lt;/a&amp;gt;&lt;br/&gt;箍烂籽1nrxg刨乒众&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379900665&quot;&amp;gt;http://weibo.com/u/6379900665&amp;lt;/a&amp;gt;&lt;br/&gt;源屏赋saa22伎偎逝&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221320901&quot;&amp;gt;http://weibo.com/u/6221320901&amp;lt;/a&amp;gt;&lt;br/&gt;趟们眯ohe6x窗瓢潜&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221104999&quot;&amp;gt;http://weibo.com/u/6221104999&amp;lt;/a&amp;gt;&lt;br/&gt;谠扛德1ds82前称节&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379952240&quot;&amp;gt;http://weibo.com/u/6379952240&amp;lt;/a&amp;gt;&lt;br/&gt;富刳怪xya3f蜗探瓶&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381494506&quot;&amp;gt;http://weibo.com/u/6381494506&amp;lt;/a&amp;gt;&lt;br/&gt;屏冀幸h3z5b钡偎戏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221108442&quot;&amp;gt;http://weibo.com/u/6221108442&amp;lt;/a&amp;gt;&lt;br/&gt;阑谠弥lld1u瓷秩剖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381494224&quot;&amp;gt;http://weibo.com/u/6381494224&amp;lt;/a&amp;gt;&lt;br/&gt;迷菩司yzhbh诺我嚼&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387720189&quot;&amp;gt;http://weibo.com/u/6387720189&amp;lt;/a&amp;gt;&lt;br/&gt;屠际分tcdx2妒睬诨&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381494095&quot;&amp;gt;http://weibo.com/u/6381494095&amp;lt;/a&amp;gt;&lt;br/&gt;季瘴本rkl31录男富&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221108369&quot;&amp;gt;http://weibo.com/u/6221108369&amp;lt;/a&amp;gt;&lt;br/&gt;蒲眯让jfibf拐阉仲&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221107806&quot;&amp;gt;http://weibo.com/u/6221107806&amp;lt;/a&amp;gt;&lt;br/&gt;追掖职6kjlu冈稍忌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387717133&quot;&amp;gt;http://weibo.com/u/6387717133&amp;lt;/a&amp;gt;&lt;br/&gt;赋僮忌cv3gy虐忱镣&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221329222&quot;&amp;gt;http://weibo.com/u/6221329222&amp;lt;/a&amp;gt;&lt;br/&gt;扰鼻戮lpgzh虐戳每&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221331950&quot;&amp;gt;http://weibo.com/u/6221331950&amp;lt;/a&amp;gt;&lt;br/&gt;涂苯诽4o7vs锥首思&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378783503&quot;&amp;gt;http://weibo.com/u/6378783503&amp;lt;/a&amp;gt;&lt;br/&gt;障拇迟gby7c屠谂陆&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381522744&quot;&amp;gt;http://weibo.com/u/6381522744&amp;lt;/a&amp;gt;&lt;br/&gt;晾夯欢fmlk6旧伦问&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383200623&quot;&amp;gt;http://weibo.com/u/6383200623&amp;lt;/a&amp;gt;&lt;br/&gt;宗蠢逝i9j9d姓患琢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383474487&quot;&amp;gt;http://weibo.com/u/6383474487&amp;lt;/a&amp;gt;&lt;br/&gt;囱锹诖9txg8琢游目&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381716736&quot;&amp;gt;http://weibo.com/u/6381716736&amp;lt;/a&amp;gt;&lt;br/&gt;业僬置1e2q9孛厮戳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383472391&quot;&amp;gt;http://weibo.com/u/6383472391&amp;lt;/a&amp;gt;&lt;br/&gt;木习芈56589痪椒载&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383470188&quot;&amp;gt;http://weibo.com/u/6383470188&amp;lt;/a&amp;gt;&lt;br/&gt;舜式端fjsq3涂勒戎&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221342909&quot;&amp;gt;http://weibo.com/u/6221342909&amp;lt;/a&amp;gt;&lt;br/&gt;晨赂诒2w3wu欢钨屠&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381541570&quot;&amp;gt;http://weibo.com/u/6381541570&amp;lt;/a&amp;gt;&lt;br/&gt;簿臼敖cdoci压桨痘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383234858&quot;&amp;gt;http://weibo.com/u/6383234858&amp;lt;/a&amp;gt;&lt;br/&gt;稳藤倩wogvk拖淮让&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378521896&quot;&amp;gt;http://weibo.com/u/6378521896&amp;lt;/a&amp;gt;&lt;br/&gt;仙捉仁bz3sd墒涨白&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381543482&quot;&amp;gt;http://weibo.com/u/6381543482&amp;lt;/a&amp;gt;&lt;br/&gt;颓氏谎hr06l僚秘驯&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378776629&quot;&amp;gt;http://weibo.com/u/6378776629&amp;lt;/a&amp;gt;&lt;br/&gt;翘灾也kf4do竿陆夷&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387735048&quot;&amp;gt;http://weibo.com/u/6387735048&amp;lt;/a&amp;gt;&lt;br/&gt;蔽缺自b99gj烧群晨&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383473159&quot;&amp;gt;http://weibo.com/u/6383473159&amp;lt;/a&amp;gt;&lt;br/&gt;苛勾特8xd68惺俾颇&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378517190&quot;&amp;gt;http://weibo.com/u/6378517190&amp;lt;/a&amp;gt;&lt;br/&gt;远稚式9zi5e艺枷谔&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381713655&quot;&amp;gt;http://weibo.com/u/6381713655&amp;lt;/a&amp;gt;&lt;br/&gt;丈烧谭86ypn特游毓&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381733845&quot;&amp;gt;http://weibo.com/u/6381733845&amp;lt;/a&amp;gt;&lt;br/&gt;期嚎颜ee5w7玖蠢必&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378779796&quot;&amp;gt;http://weibo.com/u/6378779796&amp;lt;/a&amp;gt;&lt;br/&gt;短页口xo6c5棕鲁僭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388709738&quot;&amp;gt;http://weibo.com/u/6388709738&amp;lt;/a&amp;gt;&lt;br/&gt;肪辗本6p69a敲谴刑&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6379959463&quot;&amp;gt;http://weibo.com/u/6379959463&amp;lt;/a&amp;gt;&lt;br/&gt;谔职车zghnc料成纶&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378783604&quot;&amp;gt;http://weibo.com/u/6378783604&amp;lt;/a&amp;gt;&lt;br/&gt;驯捍僚sgpa1痪勒斩&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221360942&quot;&amp;gt;http://weibo.com/u/6221360942&amp;lt;/a&amp;gt;&lt;br/&gt;链卦稚7vhe1樟昭远&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381497257&quot;&amp;gt;http://weibo.com/u/6381497257&amp;lt;/a&amp;gt;&lt;br/&gt;旅山毓7z5y7驹镁莱&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388717740&quot;&amp;gt;http://weibo.com/u/6388717740&amp;lt;/a&amp;gt;&lt;br/&gt;翁膳淹f02pt废椅烦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387841282&quot;&amp;gt;http://weibo.com/u/6387841282&amp;lt;/a&amp;gt;&lt;br/&gt;队谔惭uftga玫霖罢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381715083&quot;&amp;gt;http://weibo.com/u/6381715083&amp;lt;/a&amp;gt;&lt;br/&gt;揖囤涂l9c48脸咏概&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378780042&quot;&amp;gt;http://weibo.com/u/6378780042&amp;lt;/a&amp;gt;&lt;br/&gt;驶谠蠢v3w5c睹盅蹿&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388716712&quot;&amp;gt;http://weibo.com/u/6388716712&amp;lt;/a&amp;gt;&lt;br/&gt;诽角么6qjbt痰戮氛&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383193694&quot;&amp;gt;http://weibo.com/u/6383193694&amp;lt;/a&amp;gt;&lt;br/&gt;沮梦诱zjx0u峭怯兑&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378776063&quot;&amp;gt;http://weibo.com/u/6378776063&amp;lt;/a&amp;gt;&lt;br/&gt;志湃判o3k29谌痰锤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387772618&quot;&amp;gt;http://weibo.com/u/6387772618&amp;lt;/a&amp;gt;&lt;br/&gt;美当几xvfhr肝啥吠&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221353816&quot;&amp;gt;http://weibo.com/u/6221353816&amp;lt;/a&amp;gt;&lt;br/&gt;幸哉子9hfgn孕克下&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387803286&quot;&amp;gt;http://weibo.com/u/6387803286&amp;lt;/a&amp;gt;&lt;br/&gt;畔头沟fdmgo苛说罢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221148980&quot;&amp;gt;http://weibo.com/u/6221148980&amp;lt;/a&amp;gt;&lt;br/&gt;慰倌该vkgvo也恳咏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388721642&quot;&amp;gt;http://weibo.com/u/6388721642&amp;lt;/a&amp;gt;&lt;br/&gt;闷刳盒qo9in堵读职&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378792009&quot;&amp;gt;http://weibo.com/u/6378792009&amp;lt;/a&amp;gt;&lt;br/&gt;子鲁杉okku7叹俟掌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381515359&quot;&amp;gt;http://weibo.com/u/6381515359&amp;lt;/a&amp;gt;&lt;br/&gt;堵绞枚ya919琳逗仔&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378521822&quot;&amp;gt;http://weibo.com/u/6378521822&amp;lt;/a&amp;gt;&lt;br/&gt;回特站ev25h贝赏帕&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378781371&quot;&amp;gt;http://weibo.com/u/6378781371&amp;lt;/a&amp;gt;&lt;br/&gt;炕娜何35pe5司稍票&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381732814&quot;&amp;gt;http://weibo.com/u/6381732814&amp;lt;/a&amp;gt;&lt;br/&gt;蒂蹈回88s5l竞猿岩&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381714728&quot;&amp;gt;http://weibo.com/u/6381714728&amp;lt;/a&amp;gt;&lt;br/&gt;两新众o0xqa僖从窗&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221372905&quot;&amp;gt;http://weibo.com/u/6221372905&amp;lt;/a&amp;gt;&lt;br/&gt;乓吠坠ixgz6咕戮酉&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378520415&quot;&amp;gt;http://weibo.com/u/6378520415&amp;lt;/a&amp;gt;&lt;br/&gt;日彝远51uxk蚀窖炒&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381712008&quot;&amp;gt;http://weibo.com/u/6381712008&amp;lt;/a&amp;gt;&lt;br/&gt;厦秸昭hngi0瘸低秸&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388860256&quot;&amp;gt;http://weibo.com/u/6388860256&amp;lt;/a&amp;gt;&lt;br/&gt;赡戳忧6mh27静缘吭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387824380&quot;&amp;gt;http://weibo.com/u/6387824380&amp;lt;/a&amp;gt;&lt;br/&gt;怯级脱90mu5和旱棵&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388705792&quot;&amp;gt;http://weibo.com/u/6388705792&amp;lt;/a&amp;gt;&lt;br/&gt;靡言人dexf2敢斡倩&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388703015&quot;&amp;gt;http://weibo.com/u/6388703015&amp;lt;/a&amp;gt;&lt;br/&gt;骄橙颜hosyf仍臼米&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378775386&quot;&amp;gt;http://weibo.com/u/6378775386&amp;lt;/a&amp;gt;&lt;br/&gt;哦忠部vscu5橇狭忠&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383453019&quot;&amp;gt;http://weibo.com/u/6383453019&amp;lt;/a&amp;gt;&lt;br/&gt;必纤忱zzygb鸭谥谂&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383239573&quot;&amp;gt;http://weibo.com/u/6383239573&amp;lt;/a&amp;gt;&lt;br/&gt;孕宗肇l0mwx烧壹墩&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378521749&quot;&amp;gt;http://weibo.com/u/6378521749&amp;lt;/a&amp;gt;&lt;br/&gt;手宰桃aub6z劫呛伤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383470367&quot;&amp;gt;http://weibo.com/u/6383470367&amp;lt;/a&amp;gt;&lt;br/&gt;退假挛9b6jk仓众嫌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387847360&quot;&amp;gt;http://weibo.com/u/6387847360&amp;lt;/a&amp;gt;&lt;br/&gt;示问难yxm92霞炕刑&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221336194&quot;&amp;gt;http://weibo.com/u/6221336194&amp;lt;/a&amp;gt;&lt;br/&gt;伪改偬76m35侗亩觅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383192182&quot;&amp;gt;http://weibo.com/u/6383192182&amp;lt;/a&amp;gt;&lt;br/&gt;蓝痔绞7mz6l潜睹朴&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381714894&quot;&amp;gt;http://weibo.com/u/6381714894&amp;lt;/a&amp;gt;&lt;br/&gt;恫诎透834id沧睬悼&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387837176&quot;&amp;gt;http://weibo.com/u/6387837176&amp;lt;/a&amp;gt;&lt;br/&gt;辗显睾nw9pk手严孔&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383447512&quot;&amp;gt;http://weibo.com/u/6383447512&amp;lt;/a&amp;gt;&lt;br/&gt;难磺竿ta1kf下厮枪&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383465802&quot;&amp;gt;http://weibo.com/u/6383465802&amp;lt;/a&amp;gt;&lt;br/&gt;忱补窗nn8kb撩杉啦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381715184&quot;&amp;gt;http://weibo.com/u/6381715184&amp;lt;/a&amp;gt;&lt;br/&gt;灸孛当xvyo2纶藤屹&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381720655&quot;&amp;gt;http://weibo.com/u/6381720655&amp;lt;/a&amp;gt;&lt;br/&gt;僬忍残zzac6必记谎&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221335982&quot;&amp;gt;http://weibo.com/u/6221335982&amp;lt;/a&amp;gt;&lt;br/&gt;笛侄赏nkufb盏瓜屏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388713503&quot;&amp;gt;http://weibo.com/u/6388713503&amp;lt;/a&amp;gt;&lt;br/&gt;缕映辟j84co杉司萄&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378531974&quot;&amp;gt;http://weibo.com/u/6378531974&amp;lt;/a&amp;gt;&lt;br/&gt;泻烙丈mf0tu逝倩堆&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388706508&quot;&amp;gt;http://weibo.com/u/6388706508&amp;lt;/a&amp;gt;&lt;br/&gt;僖茁既tmo2s瞎土蛊&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387867099&quot;&amp;gt;http://weibo.com/u/6387867099&amp;lt;/a&amp;gt;&lt;br/&gt;新氨睬admr5未誓粱&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381541037&quot;&amp;gt;http://weibo.com/u/6381541037&amp;lt;/a&amp;gt;&lt;br/&gt;比眯势7wpzk厮接子&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221335502&quot;&amp;gt;http://weibo.com/u/6221335502&amp;lt;/a&amp;gt;&lt;br/&gt;挖泻囱m0big采乌蓖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381729222&quot;&amp;gt;http://weibo.com/u/6381729222&amp;lt;/a&amp;gt;&lt;br/&gt;挤遗竞z8ji1恳止迂&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383202413&quot;&amp;gt;http://weibo.com/u/6383202413&amp;lt;/a&amp;gt;&lt;br/&gt;苯倒恢rs0b0刑窝孟&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388713625&quot;&amp;gt;http://weibo.com/u/6388713625&amp;lt;/a&amp;gt;&lt;br/&gt;刑刮淮mt7id揭蠢兴&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387846329&quot;&amp;gt;http://weibo.com/u/6387846329&amp;lt;/a&amp;gt;&lt;br/&gt;掷酉怯dac1j驯忍倒&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221135275&quot;&amp;gt;http://weibo.com/u/6221135275&amp;lt;/a&amp;gt;&lt;br/&gt;辜兰竞zei7s捌拥兰&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221115343&quot;&amp;gt;http://weibo.com/u/6221115343&amp;lt;/a&amp;gt;&lt;br/&gt;磺谈壕abic5饶臼闷&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221334857&quot;&amp;gt;http://weibo.com/u/6221334857&amp;lt;/a&amp;gt;&lt;br/&gt;纯宗佳lwnk1绿炔搅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6387748174&quot;&amp;gt;http://weibo.com/u/6387748174&amp;lt;/a&amp;gt;&lt;br/&gt;捌曝佑a0rz6掖劝韵&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378832640&quot;&amp;gt;http://weibo.com/u/6378832640&amp;lt;/a&amp;gt;&lt;br/&gt;盎豪诹mrav1赣揭萌&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221384367&quot;&amp;gt;http://weibo.com/u/6221384367&amp;lt;/a&amp;gt;&lt;br/&gt;蹦颜等syjsf粤谕谀&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221113674&quot;&amp;gt;http://weibo.com/u/6221113674&amp;lt;/a&amp;gt;&lt;br/&gt;沂号扛lcz1z柑玖拖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381713392&quot;&amp;gt;http://weibo.com/u/6381713392&amp;lt;/a&amp;gt;&lt;br/&gt;蔽橙财vliv6繁绞耘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388713769&quot;&amp;gt;http://weibo.com/u/6388713769&amp;lt;/a&amp;gt;&lt;br/&gt;浩诔旧48tzf悠脸擅&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381539096&quot;&amp;gt;http://weibo.com/u/6381539096&amp;lt;/a&amp;gt;&lt;br/&gt;滩呢短77c7j睬厥说&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383199929&quot;&amp;gt;http://weibo.com/u/6383199929&amp;lt;/a&amp;gt;&lt;br/&gt;仁烂沟la3m9味惺靥&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6221151435&quot;&amp;gt;http://weibo.com/u/6221151435&amp;lt;/a&amp;gt;&lt;br/&gt;仑蜕操fnw5c媳觅棺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381509160&quot;&amp;gt;http://weibo.com/u/6381509160&amp;lt;/a&amp;gt;&lt;br/&gt;涨残芍a6dz0召承刚&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378516958&quot;&amp;gt;http://weibo.com/u/6378516958&amp;lt;/a&amp;gt;&lt;br/&gt;炕还酉aj0sj倩然盘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388722832&quot;&amp;gt;http://weibo.com/u/6388722832&amp;lt;/a&amp;gt;&lt;br/&gt;赝回赘7unfr倒素痉&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384270598&quot;&amp;gt;http://weibo.com/u/6384270598&amp;lt;/a&amp;gt;&lt;br/&gt;盏忻篮zkomv池脸窒&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378535009&quot;&amp;gt;http://weibo.com/u/6378535009&amp;lt;/a&amp;gt;&lt;br/&gt;猛滔绰j5fiz芬滔白&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384267276&quot;&amp;gt;http://weibo.com/u/6384267276&amp;lt;/a&amp;gt;&lt;br/&gt;叹性也5wwg4盗幽侄&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378537285&quot;&amp;gt;http://weibo.com/u/6378537285&amp;lt;/a&amp;gt;&lt;br/&gt;挡秸几ig5wu直允悠&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381752763&quot;&amp;gt;http://weibo.com/u/6381752763&amp;lt;/a&amp;gt;&lt;br/&gt;臼巴空sgw8c岛票窖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378535058&quot;&amp;gt;http://weibo.com/u/6378535058&amp;lt;/a&amp;gt;&lt;br/&gt;匙液履y4a26炕仲恳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378532349&quot;&amp;gt;http://weibo.com/u/6378532349&amp;lt;/a&amp;gt;&lt;br/&gt;镁必胁os2w1乐复僬&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388794352&quot;&amp;gt;http://weibo.com/u/6388794352&amp;lt;/a&amp;gt;&lt;br/&gt;叹私棺54o4s黄蚕赏&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378545460&quot;&amp;gt;http://weibo.com/u/6378545460&amp;lt;/a&amp;gt;&lt;br/&gt;靥湃颜ph1sv当莱吠&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378814652&quot;&amp;gt;http://weibo.com/u/6378814652&amp;lt;/a&amp;gt;&lt;br/&gt;馁斜湛fj9q0慕沟涯&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378815521&quot;&amp;gt;http://weibo.com/u/6378815521&amp;lt;/a&amp;gt;&lt;br/&gt;谥湃恋yqb62鼻毕勒&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378801273&quot;&amp;gt;http://weibo.com/u/6378801273&amp;lt;/a&amp;gt;&lt;br/&gt;宰仲牢29bnr偬爸群&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381741840&quot;&amp;gt;http://weibo.com/u/6381741840&amp;lt;/a&amp;gt;&lt;br/&gt;樟阎部153m5谭问临&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378804838&quot;&amp;gt;http://weibo.com/u/6378804838&amp;lt;/a&amp;gt;&lt;br/&gt;饲操诩qozvt彩挖忠&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388754830&quot;&amp;gt;http://weibo.com/u/6388754830&amp;lt;/a&amp;gt;&lt;br/&gt;藏守繁rhg6k伦谥忻&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378539349&quot;&amp;gt;http://weibo.com/u/6378539349&amp;lt;/a&amp;gt;&lt;br/&gt;露孪膳4ajbd品昭唾&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381749723&quot;&amp;gt;http://weibo.com/u/6381749723&amp;lt;/a&amp;gt;&lt;br/&gt;加再钩p6rt1跋疗谢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388791238&quot;&amp;gt;http://weibo.com/u/6388791238&amp;lt;/a&amp;gt;&lt;br/&gt;匀诩日yjx30日拔刻&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388747988&quot;&amp;gt;http://weibo.com/u/6388747988&amp;lt;/a&amp;gt;&lt;br/&gt;韵颈哟sxzvd姨凳吻&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381730713&quot;&amp;gt;http://weibo.com/u/6381730713&amp;lt;/a&amp;gt;&lt;br/&gt;颜翰瞪fu6qy腿蛹惺&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381730343&quot;&amp;gt;http://weibo.com/u/6381730343&amp;lt;/a&amp;gt;&lt;br/&gt;泳柯窒vcmfr芭谭凡&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384284342&quot;&amp;gt;http://weibo.com/u/6384284342&amp;lt;/a&amp;gt;&lt;br/&gt;掣群辛80cj5恫房憾&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378805384&quot;&amp;gt;http://weibo.com/u/6378805384&amp;lt;/a&amp;gt;&lt;br/&gt;墓睦昭jh04b倩卦焦&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388739801&quot;&amp;gt;http://weibo.com/u/6388739801&amp;lt;/a&amp;gt;&lt;br/&gt;问灾碧f2d8y刺志古&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378795817&quot;&amp;gt;http://weibo.com/u/6378795817&amp;lt;/a&amp;gt;&lt;br/&gt;娇觅那ik6ol按柑劳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378532271&quot;&amp;gt;http://weibo.com/u/6378532271&amp;lt;/a&amp;gt;&lt;br/&gt;新复忠p6y99呕问杖&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388794934&quot;&amp;gt;http://weibo.com/u/6388794934&amp;lt;/a&amp;gt;&lt;br/&gt;普焦乓sool4诎泳淹&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383468688&quot;&amp;gt;http://weibo.com/u/6383468688&amp;lt;/a&amp;gt;&lt;br/&gt;叫游辈b3go7讣滥谒&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388722350&quot;&amp;gt;http://weibo.com/u/6388722350&amp;lt;/a&amp;gt;&lt;br/&gt;讼伦镁bx8wv廖凹群&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383466770&quot;&amp;gt;http://weibo.com/u/6383466770&amp;lt;/a&amp;gt;&lt;br/&gt;壹钒秩8ri46粕慰潭&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378542013&quot;&amp;gt;http://weibo.com/u/6378542013&amp;lt;/a&amp;gt;&lt;br/&gt;朴召式by0ds痉淮彝&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378794604&quot;&amp;gt;http://weibo.com/u/6378794604&amp;lt;/a&amp;gt;&lt;br/&gt;淹至坠o880a勒炕当&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381729111&quot;&amp;gt;http://weibo.com/u/6381729111&amp;lt;/a&amp;gt;&lt;br/&gt;缕堵籽bw5qw合珊勤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381729917&quot;&amp;gt;http://weibo.com/u/6381729917&amp;lt;/a&amp;gt;&lt;br/&gt;脱迅膳m6fjm诖首劳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388743955&quot;&amp;gt;http://weibo.com/u/6388743955&amp;lt;/a&amp;gt;&lt;br/&gt;胶子浊fxxll难忱残&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378816026&quot;&amp;gt;http://weibo.com/u/6378816026&amp;lt;/a&amp;gt;&lt;br/&gt;驳捶腾ett1o酚饺航&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378804244&quot;&amp;gt;http://weibo.com/u/6378804244&amp;lt;/a&amp;gt;&lt;br/&gt;蠢淖忌fhat7骄樟厥&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383471507&quot;&amp;gt;http://weibo.com/u/6383471507&amp;lt;/a&amp;gt;&lt;br/&gt;膳垦弦x95bv艺幽烟&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388792697&quot;&amp;gt;http://weibo.com/u/6388792697&amp;lt;/a&amp;gt;&lt;br/&gt;泼辜和7eqh0浪端睾&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388722188&quot;&amp;gt;http://weibo.com/u/6388722188&amp;lt;/a&amp;gt;&lt;br/&gt;挤粕忌ah2m5锹钨稍&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378547677&quot;&amp;gt;http://weibo.com/u/6378547677&amp;lt;/a&amp;gt;&lt;br/&gt;偕什锹f4f1b恼步徒&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383456055&quot;&amp;gt;http://weibo.com/u/6383456055&amp;lt;/a&amp;gt;&lt;br/&gt;障瞎妥v9g61兹捕腊&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384280610&quot;&amp;gt;http://weibo.com/u/6384280610&amp;lt;/a&amp;gt;&lt;br/&gt;秩素饶hd7s1部忌似&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381758889&quot;&amp;gt;http://weibo.com/u/6381758889&amp;lt;/a&amp;gt;&lt;br/&gt;橙旱禄zy430梁泛兑&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381756198&quot;&amp;gt;http://weibo.com/u/6381756198&amp;lt;/a&amp;gt;&lt;br/&gt;稍驹家wyv7w爬炮探&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378804914&quot;&amp;gt;http://weibo.com/u/6378804914&amp;lt;/a&amp;gt;&lt;br/&gt;斜瘟剿3qz3k蚀嘲芳&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6384256986&quot;&amp;gt;http://weibo.com/u/6384256986&amp;lt;/a&amp;gt;&lt;br/&gt;钢瞪祷g2d3p宗靖障&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378810069&quot;&amp;gt;http://weibo.com/u/6378810069&amp;lt;/a&amp;gt;&lt;br/&gt;伟粱舅yvnac趴迂仍&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378792122&quot;&amp;gt;http://weibo.com/u/6378792122&amp;lt;/a&amp;gt;&lt;br/&gt;匝谧夭2vhan苯辜乐&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388804841&quot;&amp;gt;http://weibo.com/u/6388804841&amp;lt;/a&amp;gt;&lt;br/&gt;暗喂坠394td碌孪鹊&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6383465515&quot;&amp;gt;http://weibo.com/u/6383465515&amp;lt;/a&amp;gt;&lt;br/&gt;汹赋短d9wrf诽靖诓&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6381757614&quot;&amp;gt;http://weibo.com/u/6381757614&amp;lt;/a&amp;gt;&lt;br/&gt;迟麓居8y5r1迫逼蚀&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378531896&quot;&amp;gt;http://weibo.com/u/6378531896&amp;lt;/a&amp;gt;&lt;br/&gt;辜涛妒4dpc9笛浪枚&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388742399&quot;&amp;gt;http://weibo.com/u/6388742399&amp;lt;/a&amp;gt;&lt;br/&gt;斡劳瘟n8okb驹朴问&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388807435&quot;&amp;gt;http://weibo.com/u/6388807435&amp;lt;/a&amp;gt;&lt;br/&gt;仓号渴v9fc3钩纠巡&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378791313&quot;&amp;gt;http://weibo.com/u/6378791313&amp;lt;/a&amp;gt;&lt;br/&gt;蹦埔壹ypohk雀子堵&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388805580&quot;&amp;gt;http://weibo.com/u/6388805580&amp;lt;/a&amp;gt;&lt;br/&gt;思晃拥w05m9弛乜虐&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388842651&quot;&amp;gt;http://weibo.com/u/6388842651&amp;lt;/a&amp;gt;&lt;br/&gt;搅侔猎7h62u嚎搅缘&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386707593&quot;&amp;gt;http://weibo.com/u/6386707593&amp;lt;/a&amp;gt;&lt;br/&gt;径胰评8ihcl诹悠投&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6378532788&quot;&amp;gt;http://weibo.com/u/6378532788&amp;lt;/a&amp;gt;&lt;br/&gt;仿蝗娇f1bpy浩睹涤&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6386633553&quot;&amp;gt;http://weibo.com/u/6386633553&amp;lt;/a&amp;gt;&lt;br/&gt;馁勾孪p5xdk母峦咸&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6388707111&quot;&amp;gt;http://weibo.com/u/6388707111&amp;lt;/a&amp;gt;&lt;br/&gt;隙既攘ybslf恍蔽琢&amp;lt;a target=&quot;_blank&quot; href=&quot;http://weibo.com/u/6217649515&quot;&amp;gt;http://weibo.com/u/6217649515&amp;lt;/a&amp;gt;&lt;/p&gt;
</description>
<pubDate>Sun, 15 Oct 2017 15:44:00 +0000</pubDate>
<dc:creator>willzhuce</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/willzhuce/p/7675114.html</dc:identifier>
</item>
<item>
<title>弹性盒模型----容器属性 - 一步一步向上爬</title>
<link>http://www.cnblogs.com/z937741304/p/7674839.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/z937741304/p/7674839.html</guid>
<description>&lt;p&gt;　　布局的传统方案，基于盒装模型，依赖display属性+position属性+float属性。他对于那些特殊的布局非常不方便，比如，垂直居中就不容易实现。&lt;br/&gt;　　2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。&lt;br/&gt;　　采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。&lt;br/&gt;　　今天我来分享一下我对弹性盒模型的见解和经验，如有不足之处欢迎留言指正。&lt;br/&gt;　　在网上看过这一些关于弹性盒子模型的知识，我相信百度过这方面知识点的人都见过下面的这一幅图片，第一次看就一脸懵逼，如果先了解实验之后再来看下面这一幅图就清楚了，今天我就扯开主轴，交叉轴啥这些的不谈，后面写了一些发现还是要看一下主轴和交叉轴，，，， 简单的来可以先认为主轴就是横轴，交叉轴就是竖着的纵轴，下面看就直接来代码和效果，希望你看到过后进行实验，我相信你会对弹性盒子的知识会有很大的了解并且能够应用弹性盒子来进行布局。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015224800559-1577448823.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;一、初始的代码和样式如下，接下来我们添加代码和修改代码来查看样式的区别。&lt;/p&gt;
&lt;p&gt;        &lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015224948637-1851455813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015232323605-970646100.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225013340-93015512.png&quot; alt=&quot;&quot; width=&quot;647&quot; height=&quot;368&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;　　弹性盒子嘛，首要的条件还是要说一下容器和项目，对于我们这个而言容器就是代码中的 ul ， 项目为 li。好了接下来开始添加代码看看神奇的样式。&lt;br/&gt;　　对于弹性盒子而言首要条件就是给容器添加上 display:flex;  &lt;/p&gt;
&lt;p&gt;　　下面的这些属性都是容器属性，都添加到ul上面。&lt;/p&gt;
&lt;p&gt;一、 flex-direction: 决定主轴方向。&lt;br/&gt;　　1. flex-direction:row;（主轴方向：横排/行 从左到右排列）&lt;br/&gt;　　　将这个属性添加到容器ul当中，会发现样式如下，居然可以横排显示。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225139074-1568216880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　说到弹性我们来试验一下这个效果，将外面的容器的宽度减小一些&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225205184-827439210.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　我们先减小到这样，如果宽度继续小的话，会发现他会不一样，就算把宽度缩小之后他也不会换行，并且在缩小之后他的宽度会维持在它里面内容的宽度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225237027-1845536615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2.flex-direction:row-reverse;（主轴 从右到左排列）&lt;/p&gt;

&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225556418-1402053116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.flex-direction:column;（主轴为垂直方向 从上到下排列）&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225606699-1932543782.png&quot; alt=&quot;&quot; width=&quot;419&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4.flex-direction:column-reverse;(主轴为垂直方向 从下往上排列)&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225624230-1512414211.png&quot; alt=&quot;&quot; width=&quot;430&quot; height=&quot;262&quot;/&gt;&lt;/p&gt;

&lt;p&gt;二、flex-wrap: 该属性控制flex是单行还是多行(注意：这里的我把宽度都给调整小了，改为了300px)&lt;br/&gt;　　1.flex-wrap:nowrap;(默认值，不换行)&lt;br/&gt;　　　　　　就像最开始我们实验的那样，就算把他的宽度设置成那么小他都不会换行&lt;br/&gt;　　2.flex-wrap:wrap; （换行）如下图&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225700980-1119615660.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3.flex-wrap:wrap-reverse; (反转，通俗的说就是把第一行和最后一行换位置，第二行和倒数第二行换位置，依次类推)&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225715699-827929911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三、flex-flow;　　flex-direction和flex-wrap的复合简写形式，默认为 row nowrap;&lt;/p&gt;
&lt;p&gt;　　1. flex-flow:row-reverse wrap;(从右向左排列，换行)&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225754980-1726793590.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　就写一种组合属性吧其他的样式自己去试一试。&lt;br/&gt;四、justify-content 定义了项目在主轴上的排列方式&lt;br/&gt;　　注意：下面的实验我加上了flex-wrap:wrap; 换行属性（容易辨别）&lt;br/&gt;　　1.justify-content:flex-start; （左对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225857652-312409167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2.justify-content:flex-end;（右对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225905027-280853461.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3.justify-content:center;（居中对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225910418-539182458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　4.justify-content:space-between;（两端对齐，项目之间间隔相等）&lt;/p&gt;
&lt;p&gt;　　这里我把宽度变小了一些，看到下面这幅图是不是感觉只用这个属性就可以很容易的实现布局了呢。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225928590-363803156.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　5 .justify-content:space-around;（每个项目两侧间隔相等）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015225935012-34248977.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;五、align-item 规定了弹性盒子在交叉轴如何对齐&lt;br/&gt;　　这一次把第一个和第二个高度调整大一些是这个样子,下图的默认值，规定不换行了&lt;/p&gt;
&lt;p&gt;　　1.align-items:stretch;（默认值）&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230005012-1329583571.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;　　2.align-items:flex-end;（交叉轴的终点对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230012887-1020184689.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3. align-items:center;（与交叉轴中点对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230018215-1806179926.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　4. align-items:baseline;（项目的第一行文字的基线对齐）&lt;br/&gt;　　这里的文字的大小调整一下，第一个文字改为40px,&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230025449-525289236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　5. align-items:flex-start;（交叉轴的起点对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230031277-641485980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　六、align-content：&lt;br/&gt;　　定义了多根轴线的对齐方式，如果项目只有一根轴线，则不起作用。&lt;br/&gt;　　这里我给调整了一个容器属性的高度为300px; 换行显示&lt;br/&gt;　　1、align-content: stretch（默认值，轴线占满整个交叉轴）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230041887-421708703.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2、align-content: flex-star（与交叉轴起点对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230048574-762067543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3、align-content: flex-end（与交叉轴终点对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230056465-314185147.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4、align-content: center（与交叉轴中点对齐）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230104074-678428501.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　5、align-content: space-between（与交叉轴两端对齐，之间平均分配）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230111965-1183887385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　6、align-content: space-around（交叉轴两侧间隔相等）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1250927/201710/1250927-20171015230124059-2060916098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在这里先介绍这么多，下一次就分享一下弹性盒子项目的一些属性，如果有不清楚的地方或者文章有不足之处，希望各位可以指正，如果你看到我的文章可以收获了一些知识，那么我会非常高兴的。&lt;/p&gt;

</description>
<pubDate>Sun, 15 Oct 2017 15:11:00 +0000</pubDate>
<dc:creator>一步一步向上爬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/z937741304/p/7674839.html</dc:identifier>
</item>
<item>
<title>java8中Stream数据流 - 贝克田庄</title>
<link>http://www.cnblogs.com/clovejava/p/7674822.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/clovejava/p/7674822.html</guid>
<description>&lt;h2&gt;筛选重复的元素&lt;/h2&gt;
&lt;p&gt;Stream 接口支持 distinct 的方法， 它会返回一个元素（根据流所生成元素的 hashCode和equals方法实现）的流。&lt;/p&gt;
&lt;p&gt;例如，以下代码会筛选出列表中所有的偶数，并确保没有 重复。&lt;/p&gt;
&lt;p&gt;List&amp;lt;Dish&amp;gt; dishes = Dish.menu.stream()&lt;/p&gt;
&lt;p&gt;.filter(Dish::isVegetarian)&lt;/p&gt;
&lt;p&gt;.collect(Collectors.toList());&lt;/p&gt;
&lt;h2&gt;跳过指定数量的元素&lt;/h2&gt;
&lt;p&gt;Stream 支持 skip(n) 方法，返回一个扔掉了前n个元素的流。如果流中元素不足n个，则返回一 个空流。limit(n) 和 skip(n) 是互补的&lt;/p&gt;
&lt;p&gt;List&amp;lt;Dish&amp;gt; dishSkip = Dish.menu.stream().filter(d -&amp;gt; d.getCalories() &amp;gt; 300).skip(2) //去掉符合要求的集合中的前2个元素后返回&lt;/p&gt;
&lt;p&gt;.collect(Collectors.toList());&lt;/p&gt;
&lt;p&gt;dishSkip.forEach(System.out::println);&lt;/p&gt;

&lt;h2&gt;map 操作&lt;/h2&gt;
&lt;p&gt;Stream 支持 map 方法，它会接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映 射成一个新的元素&lt;/p&gt;
&lt;p&gt;List&amp;lt;String&amp;gt; list = st.skip(0).limit(2).map(s-&amp;gt;s.toUpperCase()).collect(Collectors.toList());&lt;/p&gt;
&lt;h2&gt;元素求和&lt;/h2&gt;
&lt;div readability=&quot;22&quot;&gt;
&lt;p&gt;List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(3,4,5,1,2);&lt;/p&gt;
&lt;p&gt;int sum1 = numbers.stream().reduce(0,(a, b) -&amp;gt; a + b);&lt;/p&gt;
&lt;p&gt;System.out.println(sum1);&lt;/p&gt;

&lt;p&gt;int sum2 = numbers.stream().reduce(0,Integer::sum);&lt;/p&gt;
&lt;p&gt;System.out.println(sum2);&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;最大值&lt;/h2&gt;
&lt;div readability=&quot;11.5&quot;&gt;
&lt;p&gt;int max = numbers.stream().reduce(0,Integer::max);&lt;/p&gt;
&lt;p&gt;System.out.println(max);&lt;/p&gt;
&lt;h2&gt;最小值&lt;/h2&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;//reduce不接受初始值，返回一个Optional对象（考虑流中没有任何元素的情况）&lt;/p&gt;
&lt;p&gt;Optional&amp;lt;Integer&amp;gt; min = numbers.stream().reduce(Integer::min);&lt;/p&gt;
&lt;p&gt;min.ifPresent(System.out::println);&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Sun, 15 Oct 2017 15:08:00 +0000</pubDate>
<dc:creator>贝克田庄</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/clovejava/p/7674822.html</dc:identifier>
</item>
<item>
<title>Linux软件安装管理 - Python学习者</title>
<link>http://www.cnblogs.com/yan-lei/p/7674767.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yan-lei/p/7674767.html</guid>
<description>&lt;h2&gt;1.软件包分类&lt;/h2&gt;
&lt;p&gt;源码包&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;脚本安装包&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;二进制包（RPM包、系统默认包）&lt;/p&gt;
&lt;h2&gt;2.源码包&lt;/h2&gt;
&lt;h4&gt;源码包的优点是：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;开源，如果有足够的能力，可以修改源代码&lt;/li&gt;
&lt;li&gt;可以自由选择所需要的功能&lt;/li&gt;
&lt;li&gt;软件设计编译安装，所以更加适合自己的系统，更加稳定有效&lt;/li&gt;
&lt;li&gt;卸载方便&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;源码包的缺点：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;安装过程步骤较多，尤其是安装较大的软件集合时（如LAMP环境搭建），容易出现拼写错误&lt;/li&gt;
&lt;li&gt;编译过程时间较长，安装比二进制安装时间长&lt;/li&gt;
&lt;li&gt;因为是编译安装，安装过程中一旦报错新手很难解决&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;3.RPM包&lt;/h2&gt;
&lt;h4&gt;二进制包的优点：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;包管理系统简单，只通过几个命令就可以实现包的安装、升级、查询和卸载&lt;/li&gt;
&lt;li&gt;安装速度比源码包安装快的多&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;二进制包缺点：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;经过编译，不再可以看到源代码&lt;/li&gt;
&lt;li&gt;功能选择不如源码包灵活&lt;/li&gt;
&lt;li&gt;依赖性&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;4.脚本安装包&lt;/h2&gt;
&lt;p&gt;所谓的脚本安装包，就是把复杂的软件包安装过程写成了程序脚本，初学者可以执行程序脚本实现一键安装。但实际安装的还是源码包和二进制包。&lt;/p&gt;
&lt;p&gt;优点：安装简单、快捷&lt;/p&gt;
&lt;p&gt;缺点：完全丧失了自定义性&lt;/p&gt;

&lt;p&gt;Red Hat Package Manager/RPM 红帽软件包管理器&lt;/p&gt;
&lt;h2&gt;RPM包命名规则&lt;/h2&gt;
&lt;h4&gt;1.RPM包的来源&lt;/h4&gt;
&lt;p&gt;RPM包在系统光盘中&lt;/p&gt;
&lt;h4&gt;2.RPM包命名原则&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;httpd-2.2.15-15.el6.centos.1.i686.rpm&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;httpd 软件包名&lt;/li&gt;
&lt;li&gt;2.2.15 软件版本&lt;/li&gt;
&lt;li&gt;15 软件发布的次数&lt;/li&gt;
&lt;li&gt;el6.centos 适合的Linux平台&lt;/li&gt;
&lt;li&gt;i686 适合的硬件平台&lt;/li&gt;
&lt;li&gt;rpm rpm扩展名&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;3.RPM包依赖性&lt;/h4&gt;
&lt;p&gt;树形依赖：a -&amp;gt; b -&amp;gt; c&lt;/p&gt;
&lt;p&gt;环形依赖：a -&amp;gt; b -&amp;gt; c -&amp;gt; a&lt;/p&gt;
&lt;p&gt;模块依赖：模块依赖，查询网站：www.rpmfind.net&lt;/p&gt;
&lt;h2&gt;安装命令&lt;/h2&gt;
&lt;h4&gt;1.包全名与包名&lt;/h4&gt;
&lt;p&gt;包全名：操作的包是没有安装的软件包时，使用包全名。而且要注意路径。&lt;/p&gt;
&lt;p&gt;包名：操作已经安装的软件包时，使用包名，是搜索/var/lib/rpm/中的数据库。&lt;/p&gt;
&lt;h4&gt;2.RPM安装&lt;/h4&gt;
&lt;p&gt;rpm -ivh 包全名&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-i(install) 安装&lt;/li&gt;
&lt;li&gt;-v(verbose) 显示详细信息&lt;/li&gt;
&lt;li&gt;-h(hash) 显示进度&lt;/li&gt;
&lt;li&gt;--nodeps 不检测依赖性&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;升级与卸载&lt;/h2&gt;
&lt;h4&gt;1、RPM包升级&lt;/h4&gt;
&lt;p&gt;rpm -Uvh 包全名&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-U(upgrade) 升级&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;2.卸载&lt;/h4&gt;
&lt;p&gt;rpm -e 包名&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-e(erase) 卸载&lt;/li&gt;
&lt;li&gt;--nodeps 不检查依赖性&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;RPM包查询&lt;/h2&gt;
&lt;h4&gt;1.查询是否安装&lt;/h4&gt;
&lt;p&gt;rpm -q 包名&lt;/p&gt;
&lt;p&gt;# 查询包是否安装&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-q 查询（query）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;rpm -qa&lt;/p&gt;
&lt;p&gt;# 查询所有已经安装的RPM包&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-a 所有（all）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;rpm -qa | grep httpd&lt;/p&gt;
&lt;h4&gt;2.查询软件包详细信息&lt;/h4&gt;
&lt;p&gt;rpm -qi 包名&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-i 查询软件信息（information）&lt;/li&gt;
&lt;li&gt;-p 查询未安装包信息（package）&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;3.查询包中文件安装位置&lt;/h4&gt;
&lt;p&gt;rpm -ql 包名&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-l 列表（list）&lt;/li&gt;
&lt;li&gt;-p 查询未安装包信息（package）&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;RPM包默认安装位置&lt;/h4&gt;
&lt;table&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;th colspan=&quot;2&quot;&gt;RPM包默认安装路径&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/etc/&lt;/td&gt;
&lt;td&gt;配置文件安装目录&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;/usr/bin&lt;/td&gt;
&lt;td&gt;可执行的命令安装目录&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;/usr/lib/&lt;/td&gt;
&lt;td&gt;程序所使用的函数库保存位置&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;/usr/share/doc&lt;/td&gt;
&lt;td&gt;基本软件使用手册保存位置&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;/usr/share/man/&lt;/td&gt;
&lt;td&gt;帮助文件保存位置&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;4、查询系统文件属于哪个RPM包&lt;/h4&gt;
&lt;p&gt;rpm -qf 系统文件名&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-f 查询系统文件属于哪个软件包（file）&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;5、查询软件包的依赖性&lt;/h4&gt;
&lt;p&gt;rpm -qR 包名&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-R 查询软件包的依赖性（requires）&lt;/li&gt;
&lt;li&gt;-p 查询未安装包信息（package）&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;RPM包校验&lt;/h2&gt;
&lt;h4&gt;1、RPM包校验&lt;/h4&gt;
&lt;p&gt;rpm -V 包名&lt;/p&gt;
&lt;p&gt;验证内容中的8个信息的具体内容如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;S 文件大小是否改变&lt;/li&gt;
&lt;li&gt;M 文件的类型或文件的权限（rwx）是否被改变&lt;/li&gt;
&lt;li&gt;5 文件MD5校验和是否被改变（可以看成文件内容是否改变）&lt;/li&gt;
&lt;li&gt;D 设备的主从代码是否被改变&lt;/li&gt;
&lt;li&gt;L 文件路径是否改变&lt;/li&gt;
&lt;li&gt;U 文件的属主（所有者）是否改变&lt;/li&gt;
&lt;li&gt;G 文件的属组是否改变&lt;/li&gt;
&lt;li&gt;T 文件的修改时间是否改变&lt;/li&gt;
&lt;li&gt;文件类型
&lt;ul&gt;&lt;li&gt;c 配置文件（config file）&lt;/li&gt;
&lt;li&gt;d 普通文档（documentation）&lt;/li&gt;
&lt;li&gt;g “鬼”文件（ghost file），很少见，就是该文件不应该被这个RPM包包含&lt;/li&gt;
&lt;li&gt;L 授权文件（license file）&lt;/li&gt;
&lt;li&gt;r 描述文件（read me）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;2、RPM包中文件提取&lt;/h4&gt;
&lt;p&gt;rpm2cpio 包全名 | cpio -idv .文件绝对路径&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;rpm2cpio&lt;br/&gt;# 将rpm包转换为cpio格式的命令&lt;/li&gt;
&lt;li&gt;cpio&lt;br/&gt;# 是一个标准工具，它用于创建软件档案文件和从档案文件中提取文件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;[root@AmorLei ~]# cpio 选项 &amp;lt; [文件|设备]&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-i ：copy-in模式，还原&lt;/li&gt;
&lt;li&gt;-d ：还原时自动新建目录&lt;/li&gt;
&lt;li&gt;-v ：显示还原过程&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
rpm -qf /bin/&lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
# 查询ls命令属于哪个软件包
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; /bin/&lt;span&gt;ls&lt;/span&gt; /tmp/&lt;span&gt;
# 造成ls命令误删除现象
rpm2cpio &lt;/span&gt;/mnt/cdrom/Package/coreutils-&lt;span&gt;8.4&lt;/span&gt;-&lt;span&gt;19&lt;/span&gt;.el6.i686.rpm | cpio -idv ./bin/&lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
# 提取RPM包中ls命令到当前目录的&lt;/span&gt;/bin/&lt;span&gt;ls下
&lt;/span&gt;&lt;span&gt;cp&lt;/span&gt; /root/bin/&lt;span&gt;ls&lt;/span&gt; /bin/&lt;span&gt;
# 把ls命令复制回&lt;/span&gt;/bin/目录，修复文件丢失
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;RPM包缺点：安装过程中，rpm包的依赖性太强。如果所有rpm包都是手工安装，则rpm包使用难度较大。&lt;/p&gt;
&lt;p&gt;yum优点：将所有包放到官方服务器上，当进行yum在线安装时，可以自动解决依赖性问题。&lt;/p&gt;
&lt;p&gt;yum缺点：Red Hat的yum在线安装需要付费&lt;/p&gt;
&lt;h2&gt;1.yum源文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vi /etc/yum.repos.d/CentOS-Base.repo&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;[base] 容器名称，一定要放在[]中&lt;/li&gt;
&lt;li&gt;name 容器说明，可以自己随便写&lt;/li&gt;
&lt;li&gt;mirrorlist 镜像站点，这个可以注释掉&lt;/li&gt;
&lt;li&gt;baseurl 我们的yum源服务器的地址。默认是CentOS官方的yum源服务器，是可以使用的，如果你觉得慢可以改成你喜欢的yum源地址&lt;/li&gt;
&lt;li&gt;enabled 此容器是否生效，如果不写或写成enable=1都生效，写成enable=0就是不生效&lt;/li&gt;
&lt;li&gt;gpgcheck 如果是1是指RPM的数字证书生效，如果是0则不生效&lt;/li&gt;
&lt;li&gt;gpgkey 数字证书的共钥文件保存位置。不用修改&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.光盘搭建yum源&lt;/h2&gt;
&lt;h4&gt;1.挂载光盘&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mkdir&lt;/span&gt; /mnt/&lt;span&gt;cdrom
# 建立挂载点
&lt;/span&gt;&lt;span&gt;mount&lt;/span&gt; /dev/cdrom /mnt/&lt;span&gt;cdrom
# 挂载光盘&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2.使网络yum源失效&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
cd /etc/&lt;span&gt;yum&lt;/span&gt;.repos.d/&lt;span&gt;
# 进入yum源目录
&lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; CentOS-Base.repo CentOS-&lt;span&gt;Base.repo.bak
# 修改yum源文件后缀名，使其失效&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3.使光盘yum源生效&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
vim CentOS-&lt;span&gt;Media.repo
[c6&lt;/span&gt;-&lt;span&gt;media]
name&lt;/span&gt;=CentOS-$releasever-&lt;span&gt;Media
baseurl&lt;/span&gt;=&lt;span&gt;file&lt;/span&gt;:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;mnt/cdrom    # 地址为你自己的光盘挂载地址&lt;/span&gt;
#        &lt;span&gt;file&lt;/span&gt;:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;media/cdrom/&lt;/span&gt;
#        &lt;span&gt;file&lt;/span&gt;:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;media/cdrecorder # 注释这两个不存在的地址&lt;/span&gt;
gpgcheck=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
enabled&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;         # 把enabled=0改为enabled=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;，让这个yum源配置文件生效
gpgkey&lt;/span&gt;=&lt;span&gt;file&lt;/span&gt;:&lt;span&gt;///&lt;/span&gt;&lt;span&gt;etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.yum命令&lt;/h2&gt;
&lt;h4&gt;1.常用yum命令&lt;/h4&gt;
&lt;p&gt;（1）查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt;&lt;span&gt; list
# 查询所有可用软件包列表
&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt; search 关键字
# 搜索服务器上所有和关键字相关的包&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; -y &lt;span&gt;install&lt;/span&gt;&lt;span&gt; 包名
选项：
&lt;/span&gt;- &lt;span&gt;install&lt;/span&gt;&lt;span&gt;         安装
&lt;/span&gt;- -&lt;span&gt;y             自动回答yes
例如：&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt; -y &lt;span&gt;install&lt;/span&gt; &lt;span&gt;gcc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）升级&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; -&lt;span&gt;y update 包名
选项：
&lt;/span&gt;-&lt;span&gt; update          升级
&lt;/span&gt;- -y             自动回答yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）卸载&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; -&lt;span&gt;y remove 包名
选项：
&lt;/span&gt;-&lt;span&gt; remove        卸载
&lt;/span&gt;- -y             自动回答yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务器使用最小化安装，用什么软件安装什么，尽量不卸载&lt;/p&gt;
&lt;h4&gt;2.yum软件组管理命令&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt;&lt;span&gt; grouplist
# 列出所有可用的软件组列表
&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt; groupinstall 软件组名
# 安装指定软件组，组名可以由grouplist查询出来
&lt;/span&gt;&lt;span&gt;yum&lt;/span&gt;&lt;span&gt; groupremove 软件组名
# 卸载指定软件组&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1.源码包和RPM包的区别&lt;/h2&gt;
&lt;h4&gt;区别&lt;/h4&gt;
&lt;p&gt;安装之前的区别：概念上的区别&lt;/p&gt;
&lt;p&gt;安装之后的区别：安装位置不同&lt;/p&gt;
&lt;h4&gt;RPM包安装位置&lt;/h4&gt;
&lt;p&gt;是安装在默认位置中&lt;/p&gt;
&lt;p&gt;rpm安装可以指定安装位置，但是不建议指定安装位置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@AmorLei ~]# rpm --help | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; prefix
  &lt;/span&gt;--prefix=&amp;lt;&lt;span&gt;dir&lt;/span&gt;&amp;gt;                   relocate the package to &amp;lt;&lt;span&gt;dir&lt;/span&gt;&amp;gt;, &lt;span&gt;if&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;源码包安装位置&lt;/h4&gt;
&lt;p&gt;安装在指定位置当中，一般是: /usr/local/软件名/&lt;/p&gt;
&lt;p&gt;源码包没有卸载命令&lt;/p&gt;
&lt;h4&gt;安装位置不同带来的影响&lt;/h4&gt;
&lt;p&gt;RPM包安装的服务可以使用系统服务管理命令（service）来管理，例如RPM包安装的apache的启动方法是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;/etc/rc.d/init.d/httpd start&lt;/li&gt;
&lt;li&gt;service httpd start(RedHat 专有方法)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;源码包安装的服务则不能被服务管理命令管理，因为没有安装到默认路径中。所以只能用绝对路径进行服务的管理，如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;/usr/local/apache2/bin/apachectl start&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.源码包安装过程&lt;/h2&gt;
&lt;h4&gt;1.安装准备&lt;/h4&gt;
&lt;p&gt;安装C语言编译器&lt;/p&gt;
&lt;p&gt;下载源码包：使用httpd-2.2.34没有报错&lt;/p&gt;
&lt;p&gt;http://mirror.bit.edu.cn/apache/httpd&lt;/p&gt;
&lt;h4&gt;2.安装注意事项&lt;/h4&gt;
&lt;p&gt;源代码保存位置：/usr/local/src/&lt;/p&gt;
&lt;p&gt;软件安装位置：/usr/local/&lt;/p&gt;
&lt;p&gt;如何确定安装过程报错：&lt;/p&gt;
&lt;p&gt;安装过程停止 并出现error、warning或no的提示&lt;/p&gt;
&lt;h4&gt;3.源码包安装过程&lt;/h4&gt;
&lt;p&gt;下载源码包&lt;/p&gt;
&lt;p&gt;解压缩下载的源码包&lt;/p&gt;
&lt;p&gt;进入解压缩目录&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;/configure 软件配置与检查
&lt;ul&gt;&lt;li&gt;定义需要的功能选项。&lt;/li&gt;
&lt;li&gt;检测系统环境是否符合安装要求。&lt;/li&gt;
&lt;li&gt;把定义好的功能选项和检测系统环境的信息都写入Makefile文件，用于后续的编辑。&lt;/li&gt;
&lt;li&gt;[root@AmorLei httpd-2.2.34]# ./configure --prefix=/usr/local/apache2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;make&lt;/span&gt;&lt;span&gt; 编译
    &lt;/span&gt;&lt;span&gt;make&lt;/span&gt;&lt;span&gt; clean
&lt;/span&gt;&lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;span&gt; 编译安装

&lt;/span&gt;/usr/local/apache2/bin/apachectl start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RPM包网页位置 /var/www/html/&lt;/p&gt;
&lt;p&gt;源码包网页位置 /usr/local/apache2/htdocs/&lt;/p&gt;
&lt;h4&gt;4.源码包的卸载&lt;/h4&gt;
&lt;p&gt;不需要卸载命令，直接删除安装目录即可。不会遗留任何垃圾文件。&lt;/p&gt;

&lt;p&gt;脚本安装的笔记将在之后进行更新！&lt;/p&gt;
</description>
<pubDate>Sun, 15 Oct 2017 14:53:00 +0000</pubDate>
<dc:creator>Python学习者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yan-lei/p/7674767.html</dc:identifier>
</item>
<item>
<title>JS中的作用域以及全局变量的问题 - 君无药</title>
<link>http://www.cnblogs.com/junwuyao/p/7674753.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/junwuyao/p/7674753.html</guid>
<description>&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、 JS中的作用域&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;1、全局变量：函数外声明的变量，称为全部变量&lt;/span&gt;&lt;br/&gt;&lt;span&gt; 局部变量：函数内部使用var声明的变量，称为局部变量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在JS中，只有函数作用域，没有块级作用域！！！也就是说，if/for等有{}的结构体，并不能具备自己的作用域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，函数外部不能访问函数内部局部变量（私有属性）。因为，函数内部的变量，在函数执行完毕以后，就会被释放掉&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2、使用闭包，可以访问函数的私有变量！&lt;/span&gt;&lt;br/&gt;&lt;span&gt;JS中，提供了一种“闭包”的概念：在函数内部，定义一个子函数，子函数可以访问父函数的私有便利。可以在子函数中进行操作，最后将子函数通过return返回&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; func1(){
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num = 1&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; func2(){
   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; num;
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func2;
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num =&lt;span&gt; func1()();

console.log(num);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;3、闭包的作用：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;①可以在函数外部访问函数的私有变量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;②让函数内部的变量可以始终存在于内存中，不会再函数调用完成后立即释放。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; func1(){
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; func2(){
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; num;
}
&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func2;
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; num =&lt;span&gt; func1()();

console.log(num);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果为1&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、 全局变量的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;span&gt;【错误原因！！】&lt;/span&gt;&lt;br/&gt;&lt;span&gt;代码从上自下，执行完毕后，li的onclick还没有触发，for循环已经转完！&lt;/span&gt;&lt;br/&gt;&lt;span&gt;而for循环没有自己的作用域！所以循环5次，用的是同一个全局变量i！也就是在for循环转完后，这个全局变量已经变成了5，那么在怎点li，点第几个都会是5&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; lis = document.getElementsByTagName(&quot;li&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;lis.length;i++&lt;span&gt;){
lis[i].onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
alert(i);
}
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1175540/201710/1175540-20171015223942262-1656771862.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h2&gt;&lt;span&gt;有三种办法解决上述问题：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、&lt;span&gt;【使用闭包解决上述问题】&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;解决关键：函数具有自己的作用域！！在for循环转一次，创建一个自执行函数。在美国自执行函数中，都有自己独立的i，而不会被释放掉。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;所以for循环转完以后，创建的5个自执行函数的作用域中，分别储存了5个不同的i变量，也就解决了问题&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; lis = document.getElementsByTagName(&quot;li&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0; i&amp;lt;lis.length;i++&lt;span&gt;){
&lt;/span&gt;!&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(i){
lis[i].onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
alert(i);
}
}(i);
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1175540/201710/1175540-20171015224707949-129328718.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2、&lt;span&gt;【使用let解决】&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;解决原理：let具有自己的块级作用域，所以for循环转一次，创建一个块级作用域，思路与闭包相同&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; lis = document.getElementsByTagName(&quot;li&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i=0; i&amp;lt;lis.length;i++&lt;span&gt;){
lis[i].onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
alert(i);
}
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1175540/201710/1175540-20171015224737652-437325808.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3、&lt;span&gt;【使用this解决】&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;解决原理：出错的原则在于全局变量i在多次循环后被污染。那么在点击事件中，就可以不使用i变量，而用this代替lis[i]，这样也就不会出现错误！&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; lis = document.getElementsByTagName(&quot;li&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;lis.length;i++&lt;span&gt;){
lis[i].onclick &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)
}
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1175540/201710/1175540-20171015224910402-1997349385.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 15 Oct 2017 14:50:00 +0000</pubDate>
<dc:creator>君无药</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/junwuyao/p/7674753.html</dc:identifier>
</item>
<item>
<title>Spring读书笔记——bean解析 - JackieZheng</title>
<link>http://www.cnblogs.com/bigdataZJ/p/SpringSource2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigdataZJ/p/SpringSource2.html</guid>
<description>&lt;h3 id=&quot;前情回顾&quot;&gt;前情回顾&lt;/h3&gt;
&lt;p&gt;上篇《Spring读书笔记——bean加载》我们从代码角度介绍了有哪些类负责解析XML文件，又是如何一步步从XML格式脱变成我们熟悉的bean的，直到DefaultBeanDefinitionDocumentReader的registerBeanDefinitions方法。我们抽丝剥茧，终于快看到Spring是如何解析bean的代码了。&lt;br/&gt;在此之前，我们回一下上篇看到过的主要类和方法&lt;br/&gt;XmlBeanFactory(XmlFactory) -&amp;gt;&lt;br/&gt;XmlBeanDefinitionReader(loadBeanDefinitions)-&amp;gt;&lt;br/&gt;XmlBeanDefinitionReader(doLoadBeanDefinitions)-&amp;gt;&lt;br/&gt;XmlBeanDefintionReader(registerBeanDefinitions)&lt;br/&gt;DefaultBeanDefinitionDocumentReader(registerBeanDefinitions)-&amp;gt;&lt;br/&gt;DefaultBeanDefinitonDocumentReader(doRegisterBeanDefinitions)&lt;/p&gt;
&lt;h3 id=&quot;解析的类型&quot;&gt;解析的类型&lt;/h3&gt;
&lt;p&gt;Spring的标签分为默认标签和自定义标签两种。&lt;br/&gt;默认标签主要包括：import、alias、bean和beans&lt;br/&gt;自定义标签：顾名思义就是自定义的标签，比如&lt;/p&gt;
&lt;h3 id=&quot;defaultbeandefinitiondocumentreader&quot;&gt;DefaultBeanDefinitionDocumentReader&lt;/h3&gt;
&lt;p&gt;从XmlBeanDefinitionReader的registerBeanDefinitions开始，我们第一步要做的就是创建一个Xml文档的解析类&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;createBeanDefinitionDocumentReader方法创建了类DefaultBeanDefinitionDocumentReader。&lt;br/&gt;从DefaultBeanDefinitionDocumentReader的registerBeanDefinitions到doRegisterBeanDefinitions，下面我们着重从doRegisterBeanDefinitions的parseBeanDefintions方法开始往下看。&lt;/p&gt;
&lt;h3 id=&quot;代理类beandefinitionparserdelegate&quot;&gt;代理类BeanDefinitionParserDelegate&lt;/h3&gt;
&lt;p&gt;负责解析bean的并不是DefaultBeanDefinitionDocumentReader，而是委托给了代理类BeanDefinitionParserDelegate，后面我们会看到BeanDefinitionParserDelegate这个功臣是如何施展拳脚解析bean的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;parseBeanDefinitions(root, this.delegate);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;进入parseBeanDefinitions我们看到其具体实现如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {
   if (delegate.isDefaultNamespace(root)) {
      NodeList nl = root.getChildNodes();
      for (int i = 0; i &amp;lt; nl.getLength(); i++) {
         Node node = nl.item(i);
         if (node instanceof Element) {
            Element ele = (Element) node;
            if (delegate.isDefaultNamespace(ele)) {
               parseDefaultElement(ele, delegate);
            }
            else {
               delegate.parseCustomElement(ele);
            }
         }
      }
   }
   else {
      delegate.parseCustomElement(root);
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;判断是否是默认命名空间的，如果是则遍历root下所有的子标签，如果不是，则进行自定义解析&lt;/li&gt;
&lt;li&gt;对于是默认命名空间下的标签，在遍历得到每一个子标签后开始调用parseDefaultElement方法开始我们之前提到的默认标签的解析。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;默认标签解析&quot;&gt;默认标签解析&lt;/h3&gt;
&lt;p&gt;前面已经提到过默认标签有四种，我们看看代码也是一目了然，下面是解析默认标签的parseDefaultElement的方法实现&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {
   if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {
      importBeanDefinitionResource(ele);
   }
   else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {
      processAliasRegistration(ele);
   }
   else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {
      processBeanDefinition(ele, delegate);
   }
   else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {
      // recurse
      doRegisterBeanDefinitions(ele);
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;if...else语句分别判定了import、alias、bean和beans的情况，并且不同情况作了不同的方法实现&lt;/li&gt;
&lt;li&gt;首先要看的就是我们再熟悉不过的bean标签的解析processBeanDefinition方法&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;bean标签的解析&quot;&gt;bean标签的解析&lt;/h3&gt;
&lt;p&gt;processBeanDefinition的方法实现如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {
   BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);
   if (bdHolder != null) {
      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);
      try {
         // Register the final decorated instance.
         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());
      }
      catch (BeanDefinitionStoreException ex) {
         getReaderContext().error(&quot;Failed to register bean definition with name '&quot; +
               bdHolder.getBeanName() + &quot;'&quot;, ele, ex);
      }
      // Send registration event.
      getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));
   }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法并不复杂，大致看下主要干了下面几件事&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;前面介绍的BeanDefinitionParserDelegate开始排上用场，用于对bean元素解析，并得到BeanDefinitionHolder类型的bdHolder对象&lt;/li&gt;
&lt;li&gt;对于解析得到结果不为空的情况，首先还要对于需要修饰的情况（默认标签包含自定义标签）进行处理&lt;/li&gt;
&lt;li&gt;然后借助BeanDefinitionReaderUtils的registerBeanDefinition对bdHolder进行注册&lt;/li&gt;
&lt;li&gt;最后发送响应事件，通知响应的监听器（Spring3x版本这块还没有具体实现，只是留了个壳）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;delegate.parseBeanDefinitionElement&lt;/strong&gt;&lt;br/&gt;我们主要从processBeanDefintion的第一行代码开始，来到BeanDefinitionParserDelegate.parseBeanDefinitionElement&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) {
   String id = ele.getAttribute(ID_ATTRIBUTE);
   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);

   List&amp;lt;String&amp;gt; aliases = new ArrayList&amp;lt;String&amp;gt;();
   if (StringUtils.hasLength(nameAttr)) {
      String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);
      aliases.addAll(Arrays.asList(nameArr));
   }

   String beanName = id;
   if (!StringUtils.hasText(beanName) &amp;amp;&amp;amp; !aliases.isEmpty()) {
      beanName = aliases.remove(0);
      if (logger.isDebugEnabled()) {
         logger.debug(&quot;No XML 'id' specified - using '&quot; + beanName +
               &quot;' as bean name and &quot; + aliases + &quot; as aliases&quot;);
      }
   }

   if (containingBean == null) {
      checkNameUniqueness(beanName, aliases, ele);
   }

   AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);
   if (beanDefinition != null) {
      if (!StringUtils.hasText(beanName)) {
         try {
            if (containingBean != null) {
               beanName = BeanDefinitionReaderUtils.generateBeanName(
                     beanDefinition, this.readerContext.getRegistry(), true);
            }
            else {
               beanName = this.readerContext.generateBeanName(beanDefinition);
               // Register an alias for the plain bean class name, if still possible,
               // if the generator returned the class name plus a suffix.
               // This is expected for Spring 1.2/2.0 backwards compatibility.
               String beanClassName = beanDefinition.getBeanClassName();
               if (beanClassName != null &amp;amp;&amp;amp;
                     beanName.startsWith(beanClassName) &amp;amp;&amp;amp; beanName.length() &amp;gt; beanClassName.length() &amp;amp;&amp;amp;
                     !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {
                  aliases.add(beanClassName);
               }
            }
            if (logger.isDebugEnabled()) {
               logger.debug(&quot;Neither XML 'id' nor 'name' specified - &quot; +
                     &quot;using generated bean name [&quot; + beanName + &quot;]&quot;);
            }
         }
         catch (Exception ex) {
            error(ex.getMessage(), ele);
            return null;
         }
      }
      String[] aliasesArray = StringUtils.toStringArray(aliases);
      return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);
   }

   return null;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;有很多我们之前熟知的细节从这里的代码就可以找到根据，比如“bean如果不声明name属性，spring会默认创建一个name”，显然通过上面一点代码我们就看到Spring确实是这么实现的，而且我们看到如果没有声明name，默认的name值就是id的值&lt;/li&gt;
&lt;li&gt;紧接着，我们看下&lt;br/&gt;&lt;code&gt;AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);&lt;/code&gt;这行代码，进入parseBeanDefinitionElement我们会看到这个方法做了很多的解析的工作，比如解析parent属性、解析元数据、解析构造函数、解析property子元素等等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;parseBeanDefinitionElement方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public AbstractBeanDefinition parseBeanDefinitionElement(
      Element ele, String beanName, BeanDefinition containingBean) {

   this.parseState.push(new BeanEntry(beanName));

   String className = null;
   if (ele.hasAttribute(CLASS_ATTRIBUTE)) {
      className = ele.getAttribute(CLASS_ATTRIBUTE).trim();
   }

   try {
      String parent = null;
      if (ele.hasAttribute(PARENT_ATTRIBUTE)) {
         parent = ele.getAttribute(PARENT_ATTRIBUTE);
      }
      AbstractBeanDefinition bd = createBeanDefinition(className, parent);

      parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);
      bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));

      parseMetaElements(ele, bd);
      parseLookupOverrideSubElements(ele, bd.getMethodOverrides());
      parseReplacedMethodSubElements(ele, bd.getMethodOverrides());

      parseConstructorArgElements(ele, bd);
      parsePropertyElements(ele, bd);
      parseQualifierElements(ele, bd);

      bd.setResource(this.readerContext.getResource());
      bd.setSource(extractSource(ele));

      return bd;
   }
   catch (ClassNotFoundException ex) {
      error(&quot;Bean class [&quot; + className + &quot;] not found&quot;, ele, ex);
   }
   catch (NoClassDefFoundError err) {
      error(&quot;Class that bean class [&quot; + className + &quot;] depends on not found&quot;, ele, err);
   }
   catch (Throwable ex) {
      error(&quot;Unexpected failure during bean definition parsing&quot;, ele, ex);
   }
   finally {
      this.parseState.pop();
   }

   return null;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们挑其中一个解析属性函数parseConstructorArgElements看下具体实现。&lt;br/&gt;parseConstructorArgElements用于解析ConstructArg标签。&lt;br/&gt;我们常见的construct-arg大概是这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;bean id=&quot;user&quot; class=&quot;com.jackie.User&quot;&amp;gt;
    ​&amp;lt;construct-arg index=&quot;0&quot;&amp;gt;
    ​    ​&amp;lt;value&amp;gt;jackie&amp;lt;/value&amp;gt;
    ​&amp;lt;/construct-arg&amp;gt;
    ​&amp;lt;construct-arg index=&quot;1&quot;&amp;gt;
        &amp;lt;value&amp;gt;male&amp;lt;/value&amp;gt;
    &amp;lt;/construct-arg&amp;gt;
&amp;lt;/bean&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;construct-arg标签的解析过程如下所示&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void parseConstructorArgElement(Element ele, BeanDefinition bd) {
   String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE);
   String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE);
   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);
   if (StringUtils.hasLength(indexAttr)) {
      try {
         int index = Integer.parseInt(indexAttr);
         if (index &amp;lt; 0) {
            error(&quot;'index' cannot be lower than 0&quot;, ele);
         }
         else {
            try {
               this.parseState.push(new ConstructorArgumentEntry(index));
               Object value = parsePropertyValue(ele, bd, null);
               ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value);
               if (StringUtils.hasLength(typeAttr)) {
                  valueHolder.setType(typeAttr);
               }
               if (StringUtils.hasLength(nameAttr)) {
                  valueHolder.setName(nameAttr);
               }
               valueHolder.setSource(extractSource(ele));
               if (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) {
                  error(&quot;Ambiguous constructor-arg entries for index &quot; + index, ele);
               }
               else {
                  bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder);
               }
            }
            finally {
               this.parseState.pop();
            }
         }
      }
      catch (NumberFormatException ex) {
         error(&quot;Attribute 'index' of tag 'constructor-arg' must be an integer&quot;, ele);
      }
   }
   else {
      try {
         this.parseState.push(new ConstructorArgumentEntry());
         Object value = parsePropertyValue(ele, bd, null);
         ConstructorArgumentValues.ValueHolder valueHolder = new ConstructorArgumentValues.ValueHolder(value);
         if (StringUtils.hasLength(typeAttr)) {
            valueHolder.setType(typeAttr);
         }
         if (StringUtils.hasLength(nameAttr)) {
            valueHolder.setName(nameAttr);
         }
         valueHolder.setSource(extractSource(ele));
         bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);
      }
      finally {
         this.parseState.pop();
      }
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;如果constrcut-arg没有指定index函数，默认按照声明属性的顺序来解析，如果声明则按照index的值解析&lt;/li&gt;
&lt;li&gt;使用ConstrcutorArgumentValues的ValueHolder来封装解析得到的type、name等属性值&lt;/li&gt;
&lt;li&gt;最后将上面的valueHolder对象按照index添加到BeanDefinition的indexedArgument属性上&lt;/li&gt;
&lt;li&gt;注意，对于没有index声明的，最终解析后是存放到genericArgumentValues属性上&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;bean标签的注册&quot;&gt;bean标签的注册&lt;/h3&gt;
&lt;p&gt;上面层层剥开，一直到解析到具体的属性，我们现在再一层层的往回走。前面所做的工作，无非是将Xml的元素解析出来并与Spring中的BeanDefinition，也就是换了一种形式在Spring中存在。&lt;br/&gt;我们最终得到的是BeanDefinitionHolder&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public BeanDefinitionHolder(BeanDefinition beanDefinition, String beanName, String[] aliases) {
   Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);
   Assert.notNull(beanName, &quot;Bean name must not be null&quot;);
   this.beanDefinition = beanDefinition;
   this.beanName = beanName;
   this.aliases = aliases;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解析转换工作完成了，现在需要开始bean的注册了&lt;/p&gt;
&lt;p&gt;我们回到DefaultBeanDefinitionDocumentReader的processBeanDefinition，看看注册是如何实现的。&lt;br/&gt;从DefaultBeanDefinitionDocumentReader.processBeanDefinition-&amp;gt;BeanDefinitionReaderUtils.registerBeanDefinition-&amp;gt;DefaultLisableBeanFactory.registerBeanFactory。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)
      throws BeanDefinitionStoreException {

   Assert.hasText(beanName, &quot;Bean name must not be empty&quot;);
   Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);

   if (beanDefinition instanceof AbstractBeanDefinition) {
      try {
         ((AbstractBeanDefinition) beanDefinition).validate();
      }
      catch (BeanDefinitionValidationException ex) {
         throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,
               &quot;Validation of bean definition failed&quot;, ex);
      }
   }

   synchronized (this.beanDefinitionMap) {
      Object oldBeanDefinition = this.beanDefinitionMap.get(beanName);
      if (oldBeanDefinition != null) {
         if (!this.allowBeanDefinitionOverriding) {
            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,
                  &quot;Cannot register bean definition [&quot; + beanDefinition + &quot;] for bean '&quot; + beanName +
                  &quot;': There is already [&quot; + oldBeanDefinition + &quot;] bound.&quot;);
         }
         else {
            if (this.logger.isInfoEnabled()) {
               this.logger.info(&quot;Overriding bean definition for bean '&quot; + beanName +
                     &quot;': replacing [&quot; + oldBeanDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);
            }
         }
      }
      else {
         this.beanDefinitionNames.add(beanName);
         this.frozenBeanDefinitionNames = null;
      }
      this.beanDefinitionMap.put(beanName, beanDefinition);
   }

   resetBeanDefinition(beanName);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;如果beanName已经注册又没有声明可以覆盖，则会抛出异常&lt;/li&gt;
&lt;li&gt;符合条件的bean最终会被加入一个map结合&lt;/li&gt;
&lt;li&gt;map集合的key是beanName，value就是前面解析得到的BeanDefinition实例对象&lt;/li&gt;
&lt;li&gt;清楚解析之前留下对应的beanName的缓存&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;至此，我们看到了Spring是如何解析标签（我们还有自定义标签没说），如何解析bean标签（我们还有import、alias和beans没说），如何解析标签属性（我们还有太多的属性没有介绍，但是都是类似的过程），最终完成了bean的注册。&lt;/p&gt;
&lt;p&gt;如果您觉得阅读本文对您有帮助，请点一下“&lt;strong&gt;推荐&lt;/strong&gt;”按钮，您的“&lt;strong&gt;推荐&lt;/strong&gt;”将是我最大的写作动力！如果您想持续关注我的文章，请扫描二维码，关注JackieZheng的微信公众号，我会将我的文章推送给您，并和您一起分享我日常阅读过的优质文章。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4459384-f166f03afb66b79f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 15 Oct 2017 14:48:00 +0000</pubDate>
<dc:creator>JackieZheng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bigdataZJ/p/SpringSource2.html</dc:identifier>
</item>
<item>
<title>MySQL（十四）之数据备份与还原 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7674505.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7674505.html</guid>
<description>&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;　　上一篇分享了关于MySQL事务的知识，在我们数据库中最重要的就是数据了，所以数据的备份就显的特别的重要！&lt;/p&gt;
&lt;p&gt;　　为什么要备份数据？&lt;/p&gt;
&lt;p&gt;　　在生产环境中我们数据库可能会遭遇各种各样的不测从而导致数据丢失, 大概分为以下几种：&lt;/p&gt;
&lt;p&gt;　　　　硬件故障、软件故障、自然灾害、黑客攻击、误操作（占比例大）&lt;/p&gt;
&lt;p&gt;　　所以, 为了在数据丢失之后能够恢复数据, 我们就需要&lt;span&gt;定期的备份数据&lt;/span&gt;, 备份数据的策略要根据不同的应用场景进行定制, 大致有几个参考数值, 我们可以根据这些数值从而定制符合特定环境中的数据备份策略：&lt;/p&gt;
&lt;p&gt;　　　　能够容忍丢失多少数据&lt;/p&gt;
&lt;p&gt;　　　　恢复数据需要多长时间&lt;/p&gt;
&lt;p&gt;　　　　需要恢复哪一些数据&lt;/p&gt;

&lt;h2&gt;1.1、数据的备份类型&lt;/h2&gt;
&lt;p&gt;　　数据的备份类型根据其自身的特性主要分为以下几组：&lt;/p&gt;
&lt;p&gt;　　　　1）完全备份　　&lt;/p&gt;
&lt;p&gt;　　　　　　完全备份指的是&lt;span&gt;备份整个数据集( 即整个数据库 )&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　2）部分备份&lt;/p&gt;
&lt;p&gt;　　　　　　部分备份指的是&lt;span&gt;备份部分数据集(例如: 只备份一个表)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　而部分备份又分为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　2.1）增量备份&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　增量备份指的是&lt;span&gt;备份自上一次备份以来(增量或完全)以来变化的数据。&lt;/span&gt;特点: 节约空间、还原麻烦 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　2.2）差异备份&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　差异备份指的是&lt;span&gt;备份自上一次完全备份以来变化的数据&lt;/span&gt;。特点: 浪费空间、还原比增量备份简单&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171015203536465-1026532047.png&quot; alt=&quot;&quot; width=&quot;460&quot; height=&quot;290&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1.2、MySQL备份数据的方式&lt;/h2&gt;
&lt;p&gt;　　在MySQl中我们备份数据一般有三种方式：&lt;/p&gt;
&lt;p&gt;　　　　1）热备份&lt;/p&gt;
&lt;p&gt;　　　　　　热备份指的是当数据库进行备份时, 数据库的读写操作均不是受影响 。&lt;/p&gt;
&lt;p&gt;　　　　2）温备份&lt;/p&gt;
&lt;p&gt;　　　　　　温备份指的是当数据库进行备份时, 数据库的读操作可以执行, 但是不能执行写操作 。&lt;/p&gt;
&lt;p&gt;　　　　3）冷备份&lt;/p&gt;
&lt;p&gt;　　　　　　冷备份指的是当数据库进行备份时, 数据库不能进行读写操作, 即数据库要下线&lt;/p&gt;
&lt;p&gt;　　MySQL中进行不同方式的备份还要考虑存储引擎是否支持：&lt;/p&gt;
&lt;p&gt;　　　　1）MyISAM 　　　　&lt;/p&gt;
&lt;p&gt;　　　　　　热备 ×&lt;br/&gt;　　　　　　温备 √&lt;br/&gt;　　　　　　冷备 √&lt;/p&gt;
&lt;p&gt;　　　　2）InnoDB&lt;/p&gt;
&lt;p&gt;　　　　　　热备 √&lt;br/&gt;　　　　　　温备 √&lt;br/&gt;　　　　　　冷备 √&lt;/p&gt;
&lt;p&gt;　　我们在考虑完数据在备份时, 数据库的运行状态之后还需要考虑对于MySQL数据库中数据的备份方式：&lt;/p&gt;
&lt;p&gt;　　　　1）物理备份&lt;/p&gt;
&lt;p&gt;　　　　　　物理备份一般就是&lt;span&gt;通过tar,cp等命令直接打包复制数据库的数据文件达到备份的效果&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;　　　　2）逻辑备份&lt;/p&gt;
&lt;p&gt;　　　　　　逻辑备份一般就是&lt;span&gt;通过特定工具从数据库中导出数据并另存备份(逻辑备份会丢失数据精度)&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1.3、备份中需要考虑的问题&lt;/h2&gt;
&lt;p&gt;　　1）我们要备份什么？&lt;/p&gt;
&lt;p&gt;　　　　一般情况下, 我们需要备份的数据分为以下几种：　　　&lt;/p&gt;
&lt;p&gt;　　　　　　数据&lt;br/&gt;　　　　　　二进制日志, InnoDB事务日志&lt;br/&gt;　　　　　　代码(存储过程、存储函数、触发器、事件调度器)&lt;br/&gt;　　　　　　服务器配置文件&lt;/p&gt;
&lt;p&gt;　　2）备份工具&lt;/p&gt;
&lt;p&gt;　　　　我们常用的备份工具有：　　　　&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;mysqldump：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　逻辑备份工具, 适用于所有的存储引擎, 支持温备、完全备份、部分备份、对于InnoDB存储引擎支持热备&lt;br/&gt;　　　　&lt;span&gt;cp, tar 等归档复制工具：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　物理备份工具, 适用于所有的存储引擎, 冷备、完全备份、部分备份&lt;br/&gt;　　　　&lt;span&gt;lvm2 snapshot：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　几乎热备, 借助文件系统管理工具进行备份&lt;br/&gt;　　　　&lt;span&gt;mysqlhotcopy：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　名不副实的的一个工具, 几乎冷备, 仅支持MyISAM存储引擎&lt;br/&gt;　　　&lt;span&gt;　xtrabackup：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　 一款非常强大的InnoDB/XtraDB热备工具, 支持完全备份、增量备份, 由percona提供&lt;/p&gt;

&lt;p&gt;　　针对不同的场景下, 我们应该制定不同的备份策略对数据库进行备份, 一般情况下, 备份策略一般为以下四种：&lt;/p&gt;
&lt;p&gt;　　　　1）直接cp,tar复制数据库文件&lt;br/&gt;　　　　2）mysqldump+复制BIN LOGS&lt;br/&gt;　　　　3）lvm2快照+复制BIN LOGS&lt;br/&gt;　　　　4）xtrabackup&lt;/p&gt;
&lt;p&gt;　　以上的几种解决方案分别针对于不同的场景：&lt;/p&gt;
&lt;p&gt;　　　　1）如果数据量较小, 可以使用第一种方式, 直接复制数据库文件&lt;br/&gt;　　　　2）如果数据量还行, 可以使用第二种方式, &lt;span&gt;先使用mysqldump对数据库进行完全备份, 然后定期备份BINARY LOG达到增量备份的效果&lt;/span&gt;&lt;br/&gt;　　　　3）如果数据量一般, 而又不过分影响业务运行, 可以使用第三种方式&lt;span&gt;, 使用lvm2的快照对数据文件进行备份, 而后定期备份BINARY LOG达到增量备份的效果&lt;/span&gt;&lt;br/&gt;　　　　4）如果数据量很大, 而又不过分影响业务运行, 可以使用第四种方式, &lt;span&gt;使用xtrabackup进行完全备份后, 定期使用xtrabackup进行增量备份或差异备份&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;3.1、使用cp进行备份&lt;/h2&gt;
&lt;p&gt;　　1）查看数据库信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; SHOW DATABASES;    #查看当前的数据库, 我们的数据库为employees
&lt;/span&gt;+--------------------+
| Database           |
+--------------------+
| information_schema |
| employees          |
| mysql              |
| test               |
+--------------------+
&lt;span&gt;4&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; USE employees;
Database changed
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; SHOW TABLES;         #查看当前库中的表
&lt;/span&gt;+---------------------+
| Tables_in_employees |
+---------------------+
| departments         |
| dept_emp            |
| dept_manager        |
| employees           |
| salaries            |
| titles              |
+---------------------+
&lt;span&gt;6&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt; SELECT COUNT(*&lt;span&gt;) FROM employees;   #由于篇幅原因, 我们这里只看一下employees的行数为300024
&lt;/span&gt;+----------+
| COUNT(*) |
+----------+
|   &lt;span&gt;300024&lt;/span&gt; |
+----------+
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.05&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2）向数据库施加读锁&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; FLUSH TABLES WITH READ LOCK;    #向所有表施加读锁
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3）备份数据文件　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# mkdir /&lt;span&gt;backup   #创建文件夹存放备份数据库文件
[root@node1 &lt;/span&gt;~]# cp -a /&lt;span&gt;var&lt;/span&gt;/lib/mysql&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; /backup     #保留权限的拷贝源数据文件
[root@node1 ~]# ls /backup   #查看目录下的文件
employees  ibdata1  ib_logfile0  ib_logfile1  mysql  mysql.sock  test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4）模拟数据丢失并恢复&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# rm -rf /&lt;span&gt;var&lt;/span&gt;/lib/mysql&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;    #删除数据库的所有文件
[root@node1 ~]# service mysqld restart   #重启MySQL, 如果是编译安装的应该不能启动, 如果rpm安装则会重新初始化数据库


mysql&amp;gt; SHOW DATABASES;    #因为我们是rpm安装的, 连接到MySQL进行查看, 发现数据丢失了！
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| test               |
+--------------------+
3 rows in set (0.00 sec)

[root@node1 ~]# rm -rf /var/lib/mysql/*    #这一步可以不做
[root@node1 ~]# cp -a /backup/* /var/lib/mysql/    #将备份的数据文件拷贝回去
[root@node1 ~]# service mysqld restart  #重启MySQL


#重新连接数据并查看

mysql&amp;gt; SHOW DATABASES;    #数据库已恢复
+--------------------+
| Database           |
+--------------------+
| information_schema |
| employees          |
| mysql              |
| test               |
+--------------------+
4 rows in set (0.00 sec)

mysql&amp;gt; USE employees;      

mysql&amp;gt; SELECT COUNT(*) FROM employees;    #表的行数没有变化
+----------+
| COUNT(*) |
+----------+
|   300024 |
+----------+
1 row in set (0.06 sec)


##完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.2、使用mysqldump+复制BINARY LOG备份&lt;/h2&gt;
&lt;p&gt;　　我们通过&lt;span&gt;mysqldump进行一次完全备份, 再修改表中的数据, 然后再通过binary log进行恢复 二进制日志需要在mysql配置文件中添加 log_bin=on 开启　&lt;/span&gt;　&lt;/p&gt;
&lt;p&gt;　　mysqldump命令介绍：&lt;/p&gt;
&lt;p&gt;　　　　mysqldump是一个&lt;span&gt;客户端的逻辑备份工具, 可以生成一个重现创建原始数据库和表的SQL语句&lt;/span&gt;, 可以支持所有的存储引擎, 对于InnoDB支持热备。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#基本语法格式

shell&lt;/span&gt;&amp;gt;&lt;span&gt; mysqldump [options] db_name [tbl_name ...]    恢复需要手动CRATE DATABASES
shell&lt;/span&gt;&amp;gt; mysqldump [options] --&lt;span&gt;databases db_name ...   恢复不需要手动创建数据库
shell&lt;/span&gt;&amp;gt; mysqldump [options] --all-&lt;span&gt;databases           恢复不需要手动创建数据库


其他选项:
     &lt;/span&gt;-E, --&lt;span&gt;events: 备份事件调度器
     &lt;/span&gt;-R, --&lt;span&gt;routines: 备份存储过程和存储函数
     &lt;/span&gt;--triggers: 备份表的触发器; --skip-&lt;span&gt;triggers 
     &lt;/span&gt;--master-date[=&lt;span&gt;value]  
         &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;: 记录为CHANGE MASTER TO 语句、语句不被注释
         &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;: 记录为注释的CHANGE MASTER TO语句
         基于二进制还原只能全库还原

     &lt;/span&gt;--flush-&lt;span&gt;logs: 日志滚动
         锁定表完成后执行日志滚动&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　1）查询数据库信息&lt;/span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; SHOW DATABASES;    #查看当前的数据库, 我们的数据库为employees
&lt;/span&gt;+--------------------+
| Database           |
+--------------------+
| information_schema |
| employees          |
| mysql              |
| test               |
+--------------------+
&lt;span&gt;4&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; USE employees;
Database changed
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; SHOW TABLES;         #查看当前库中的表
&lt;/span&gt;+---------------------+
| Tables_in_employees |
+---------------------+
| departments         |
| dept_emp            |
| dept_manager        |
| employees           |
| salaries            |
| titles              |
+---------------------+
&lt;span&gt;6&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt; SELECT COUNT(*&lt;span&gt;) FROM employees;   #由于篇幅原因, 我们这里只看一下employees的行数为300024
&lt;/span&gt;+----------+
| COUNT(*) |
+----------+
|   &lt;span&gt;300024&lt;/span&gt; |
+----------+
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.05&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　2）使用mysqldump备份数据库&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# &lt;span&gt;mysql -e 'SHOW MASTER STATUS'   #查看当前二进制文件的状态, 并记录下position的数字
&lt;/span&gt;+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; |      &lt;span&gt;106&lt;/span&gt; |              |                  |
+------------------+----------+--------------+------------------+&lt;span&gt;

[root@node1 &lt;/span&gt;~]#&lt;span&gt; mysqldump --all-databases --lock-all-tables  &amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; backup.sql   #备份数据库到backup.sql文件中&lt;/span&gt;

mysql&lt;/span&gt;&amp;gt;&lt;span&gt;&lt;span&gt; CREATE DATABASE TEST1;   #创建一个数据库&lt;/span&gt;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; SHOW MASTER STATUS;   #记下现在的position
&lt;/span&gt;+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.&lt;span&gt;000003&lt;/span&gt; |      &lt;span&gt;191&lt;/span&gt; |              |                  |
+------------------+----------+--------------+------------------+
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

[root@node1 &lt;/span&gt;~]# &lt;span&gt;cp /var/lib/mysql/mysql-bin.000003 /&lt;/span&gt;&lt;span&gt;&lt;span&gt;root  #备份二进制文件&lt;/span&gt;
[root@node1 &lt;/span&gt;~&lt;span&gt;]# &lt;span&gt;service mysqld stop   #停止MySQL&lt;/span&gt;
[root@node1 &lt;/span&gt;~]#&lt;span&gt; rm -rf /var/lib/mysql/*&lt;/span&gt;&lt;span&gt;&lt;span&gt;   #删除所有的数据文件&lt;/span&gt;
[root@node1 ~]#&lt;span&gt; service mysqld start    #启动MySQL, 如果是编译安装的应该不能启动(需重新初始化), 如果rpm安装则会重新初始化数据库&lt;/span&gt;


mysql&amp;gt; &lt;span&gt;SHOW DATABASES;   #查看数据库, 数据丢失!&lt;/span&gt;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| test               |
+--------------------+
3 rows in set (0.00 sec)

mysql&amp;gt; &lt;span&gt;SET sql_log_bin=OFF;   #暂时先将二进制日志关闭 &lt;/span&gt; 
Query OK, 0 rows affected (0.00 sec)


mysql&amp;gt; source backup.sql  &lt;span&gt;#恢复数据，所需时间根据数据库时间大小而定&lt;/span&gt;

mysql&amp;gt; &lt;span&gt;SET sql_log_bin=ON; 开启二进制日志&lt;/span&gt;

mysql&amp;gt; &lt;span&gt;SHOW DATABASES;   #数据库恢复, 但是缺少TEST1·&lt;/span&gt;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| employees          |
| mysql              |
| test               |
+--------------------+
4 rows in set (0.00 sec)

[root@node1 ~]#&lt;span&gt; mysqlbinlog --start-position=106 --stop-position=191 mysql-bin.000003 | mysql employees #通过二进制日志增量恢复数据&lt;/span&gt;

mysql&amp;gt;&lt;span&gt; SHOW DATABASES;    #现在TEST1出现了！&lt;/span&gt;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| TEST1              |
| employees          |
| mysql              |
| test               |
+--------------------+
5 rows in set (0.00 sec)
#完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;3.3、使用lvm2快照备份数据&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　LVM快照简单来说就是将所快照源分区一个时间点所有文件的元数据进行保存，如果源文件没有改变，那么访问快照卷的相应文件则直接指向源分区的源文件，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果源文件发生改变，则快照卷中与之对应的文件不会发生改变。快照卷主要用于辅助备份文件。 　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1）部署lvm环境&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;添加硬盘; 这里我们直接实现SCSI硬盘的热插拔, 首先在虚拟机中添加一块硬盘, 不重启

[root@node1 &lt;/span&gt;~]# ls /dev/sd*&lt;span&gt;   #只有以下几块硬盘, 但是我们不重启可以让系统识别新添加的硬盘
&lt;/span&gt;/dev/sda  /dev/sda1  /dev/&lt;span&gt;sda2

[root@node1 &lt;/span&gt;~]# echo &lt;span&gt;'&lt;/span&gt;&lt;span&gt;- - -&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;gt; /sys/&lt;span&gt;class&lt;/span&gt;/scsi_host/host0/&lt;span&gt;scan 
[root@node1 &lt;/span&gt;~]# echo &lt;span&gt;'&lt;/span&gt;&lt;span&gt;- - -&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;gt; /sys/&lt;span&gt;class&lt;/span&gt;/scsi_host/host1/&lt;span&gt;scan 
[root@node1 &lt;/span&gt;~]# echo &lt;span&gt;'&lt;/span&gt;&lt;span&gt;- - -&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;gt; /sys/&lt;span&gt;class&lt;/span&gt;/scsi_host/host2/&lt;span&gt;scan 

[root@node1 &lt;/span&gt;~]# ls /dev/sd*&lt;span&gt;    #看！sdb识别出来了
&lt;/span&gt;/dev/sda  /dev/sda1  /dev/sda2  /dev/&lt;span&gt;sdb


[root@node1 &lt;/span&gt;~]# fdisk /dev/&lt;span&gt;sdb   #分区
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel
Building a &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; DOS disklabel with disk identifier &lt;span&gt;0xd353d192&lt;/span&gt;&lt;span&gt;.
Changes will remain &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; memory only, until you decide to write them.
After that, of course, the previous content won&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;t be recoverable.&lt;/span&gt;
&lt;span&gt;
Warning: invalid flag &lt;/span&gt;&lt;span&gt;0x0000&lt;/span&gt; of partition table &lt;span&gt;4&lt;/span&gt;&lt;span&gt; will be corrected by w(rite)

WARNING: DOS&lt;/span&gt;-compatible mode &lt;span&gt;is&lt;/span&gt; deprecated. It&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s strongly recommended to&lt;/span&gt;
         &lt;span&gt;switch&lt;/span&gt; off the mode (command &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) and change display units to
         sectors (command &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).

Command (m &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; help): n
Command action
   e   extended
   p   primary partition (&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
p
Partition number (&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;): &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
First cylinder (&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;2610&lt;/span&gt;, &lt;span&gt;default&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;): 
Using &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; value &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
Last cylinder, &lt;/span&gt;+cylinders or +size{K,M,G} (&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;2610&lt;/span&gt;, &lt;span&gt;default&lt;/span&gt; &lt;span&gt;2610&lt;/span&gt;): +&lt;span&gt;15G

Command (m &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; help): t
Selected partition &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
Hex code (type L to list codes): 8e
Changed system type of partition &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; to 8e (Linux LVM)

Command (m &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; help): w
The partition table has been altered&lt;/span&gt;!&lt;span&gt;

Calling ioctl() to re&lt;/span&gt;-&lt;span&gt;read partition table.
Syncing disks.
You have &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; mail &lt;span&gt;in&lt;/span&gt; /&lt;span&gt;var&lt;/span&gt;/spool/mail/&lt;span&gt;root
[root@node1 &lt;/span&gt;~]# partx -a /dev/&lt;span&gt;sdb
BLKPG: Device or resource busy
error adding partition &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

##创建逻辑卷
[root@node1 &lt;/span&gt;~]# pvcreate /dev/&lt;span&gt;sdb1
  Physical volume &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/dev/sdb1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; successfully created
[root@node1 &lt;/span&gt;~]# vgcreate myvg /dev/&lt;span&gt;sdb1 
  Volume group &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myvg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; successfully created
[root@node1 &lt;/span&gt;~]# lvcreate -n mydata -&lt;span&gt;L 5G myvg 
  Logical volume &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mydata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; created.

[root@node1 &lt;/span&gt;~]# mkfs.ext4 /dev/mapper/myvg-&lt;span&gt;mydata   #格式化
[root@node1 &lt;/span&gt;~]# mkdir /&lt;span&gt;lvm_data
[root@node1 &lt;/span&gt;~]# mount /dev/mapper/myvg-mydata /lvm_data  #挂载到/&lt;span&gt;lvm_data


[root@node1 &lt;/span&gt;~]# vim /etc/&lt;span&gt;my.cnf    #修改mysql配置文件的datadir如下

datadir&lt;/span&gt;=/&lt;span&gt;lvm_data

[root@node1 &lt;/span&gt;~&lt;span&gt;]# service mysqld restart  #重启MySQL

####重新导入employees数据库########略过###&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　2）查看数据库信息&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; SHOW DATABASES;    #查看当前的数据库, 我们的数据库为employees
&lt;/span&gt;+--------------------+
| Database           |
+--------------------+
| information_schema |
| employees          |
| mysql              |
| test               |
+--------------------+
&lt;span&gt;4&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; USE employees;
Database changed
mysql&lt;/span&gt;&amp;gt;&lt;span&gt; SHOW TABLES;         #查看当前库中的表
&lt;/span&gt;+---------------------+
| Tables_in_employees |
+---------------------+
| departments         |
| dept_emp            |
| dept_manager        |
| employees           |
| salaries            |
| titles              |
+---------------------+
&lt;span&gt;6&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&amp;gt; SELECT COUNT(*&lt;span&gt;) FROM employees;   #由于篇幅原因, 我们这里只看一下employees的行数为300024
&lt;/span&gt;+----------+
| COUNT(*) |
+----------+
|   &lt;span&gt;300024&lt;/span&gt; |
+----------+
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.05&lt;/span&gt; sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　3）创建快照卷并备份&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
mysql&amp;gt;&lt;span&gt; FLUSH TABLES WITH READ LOCK;     #锁定所有表
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

[root@node1 lvm_data]# lvcreate &lt;/span&gt;-L 1G -n mydata-snap -p r -s /dev/mapper/myvg-&lt;span&gt;mydata   #创建快照卷
  Logical volume &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mydata-snap&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; created.

mysql&lt;/span&gt;&amp;gt;&lt;span&gt; UNLOCK TABLES;  #解锁所有表
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

[root@node1 lvm_data]# mkdir &lt;/span&gt;/&lt;span&gt;lvm_snap  #创建文件夹
[root@node1 lvm_data]# mount &lt;/span&gt;/dev/myvg/mydata-snap /lvm_snap/&lt;span&gt;  #挂载snap
mount: block device &lt;/span&gt;/dev/mapper/myvg-mydata--snap &lt;span&gt;is&lt;/span&gt; write-&lt;span&gt;protected&lt;/span&gt;, mounting read-&lt;span&gt;only

[root@node1 lvm_data]# cd &lt;/span&gt;/lvm_snap/&lt;span&gt;
[root@node1 lvm_snap]# ls
employees  ibdata1  ib_logfile0  ib_logfile1  mysql  mysql&lt;/span&gt;-bin.&lt;span&gt;000001&lt;/span&gt;  mysql-bin.&lt;span&gt;000002&lt;/span&gt;  mysql-bin.&lt;span&gt;000003&lt;/span&gt;  mysql-&lt;span&gt;bin.index  test
[root@node1 lvm_snap]# tar cf &lt;/span&gt;/tmp/mysqlback.tar *  #打包文件到/tmp/&lt;span&gt;mysqlback.tar

[root@node1 &lt;/span&gt;~]# umount /lvm_snap/&lt;span&gt;  #卸载snap
[root@node1 &lt;/span&gt;~]# lvremove myvg mydata-snap  #删除snap
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4）恢复数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
[root@node1 lvm_snap]# rm -rf /lvm_data&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
[root@node1 ~]# service mysqld start    #启动MySQL, 如果是编译安装的应该不能启动(需重新初始化), 如果rpm安装则会重新初始化数据库


mysql&amp;gt; SHOW DATABASES;   #查看数据库, 数据丢失!
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| test               |
+--------------------+
3 rows in set (0.00 sec)

[root@node1 ~]# cd /lvm_data/
[root@node1 lvm_data]# rm -rf * #删除所有文件
[root@node1 lvm_data]# tar xf /tmp/mysqlback.tar     #解压备份数据库到此文件夹 
[root@node1 lvm_data]# ls  #查看当前的文件
employees  ibdata1  ib_logfile0  ib_logfile1  mysql  mysql-bin.000001  mysql-bin.000002  mysql-bin.000003  mysql-bin.index  test

mysql&amp;gt; SHOW DATABASES;  #数据恢复了
+--------------------+
| Database           |
+--------------------+
| information_schema |
| employees          |
| mysql              |
| test               |
+--------------------+
4 rows in set (0.00 sec)&lt;br/&gt;#完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;3.4、使用Xtrabackup备份&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　为了更好地演示, 我们这次使用mariadb-5.5的版本, 使用xtrabackup使用InnoDB能够发挥其最大功效, 并且InnoDB的每一张表必须使用单独的表空间, 我们需要在配置文件中添加 innodb_file_per_table = ON 来开启。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1）下载安装xtrabackup&lt;/span&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;我们这里通过wget percona官方的rpm包进行安装
[root@node1 &lt;/span&gt;~]# wget https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.3.4/binary/redhat/6/x86_64/percona-xtrabackup-2.3.4-1.el6.x86_64.rpm   &lt;/span&gt;
[root@node1 ~]# yum localinstall percona-xtrabackup-&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.el6.x86_64.rpm   #需要EPEL源
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　2）xtrabackup介绍　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　Xtrabackup是由percona提供的mysql数据库备份工具，据官方介绍，这也是世界上惟一一款开源的能够对innodb和xtradb数据库进行热备的工具。特点：&lt;br/&gt;　　　　　　备份过程快速、可靠；&lt;br/&gt;　　　　　　备份过程不会打断正在执行的事务；&lt;br/&gt;　　　　　　能够基于压缩等功能节约磁盘空间和流量；&lt;br/&gt;　　　　　　自动实现备份检验；&lt;br/&gt;　　　　　　还原速度快；&lt;/p&gt;
&lt;p&gt;　　3）xtrabackup实现完全备份&lt;/p&gt;
&lt;p&gt;　　　　我们这里使用xtrabackup的前端配置工具innobackupex来实现对数据库的完全备份&lt;/p&gt;
&lt;p&gt;　　　　使用innobackupex备份时, 会调用xtrabackup备份所有的InnoDB表, 复制所有关于表结构定义的相关文件(.frm)、以及MyISAM、MERGE、CSV和ARCHIVE表的相关文件,&lt;/p&gt;
&lt;p&gt;　　　　同时还会备份触发器和数据库配置文件信息相关的文件, 这些文件会被保存至一个以时间命名的目录。&lt;/p&gt;
&lt;p&gt;　　4）开始备份过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# mkdir /&lt;span&gt;extrabackup  #创建备份目录
[root@node1 &lt;/span&gt;~]# innobackupex --user=root /extrabackup/&lt;span&gt; #备份数据
###################提示complete表示成功&lt;/span&gt;*********************&lt;span&gt;

[root@node1 &lt;/span&gt;~]# ls /extrabackup/&lt;span&gt;  #看到备份目录
&lt;/span&gt;&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;30&lt;/span&gt;-&lt;span&gt;48&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　一般情况, 备份完成后, 数据不能用于恢复操作, 因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。因此, 此时的数据文件仍不一致, 所以我们需要”准备”一个完全备份&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# innobackupex --apply-log /extrabackup/&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;30&lt;/span&gt;-&lt;span&gt;48&lt;/span&gt;/&lt;span&gt;  #指定备份文件的目录

#一般情况下下面三行结尾代表成功&lt;/span&gt;*****************&lt;span&gt;
InnoDB: Starting shutdown...
InnoDB: Shutdown completed; log sequence number &lt;/span&gt;&lt;span&gt;369661462&lt;/span&gt;
&lt;span&gt;160427&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;:&lt;span&gt;11&lt;/span&gt; completed OK!&lt;span&gt;

[root@node1 &lt;/span&gt;~]# cd /extrabackup/&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;30&lt;/span&gt;-&lt;span&gt;48&lt;/span&gt;/&lt;span&gt;
[root@node1 &lt;/span&gt;&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;30&lt;/span&gt;-&lt;span&gt;48&lt;/span&gt;]# ls -&lt;span&gt;hl  #查看备份文件
total 31M
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;386&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt; backup-&lt;span&gt;my.cnf
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root &lt;span&gt;4&lt;/span&gt;.0K Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; employees
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  18M Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;&lt;span&gt; ibdata1
&lt;/span&gt;-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;5.0M&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;&lt;span&gt; ib_logfile0
&lt;/span&gt;-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;5.0M&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;&lt;span&gt; ib_logfile1
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root &lt;span&gt;4&lt;/span&gt;.0K Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; mysql
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root &lt;span&gt;4&lt;/span&gt;.0K Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; performance_schema
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root &lt;span&gt;4&lt;/span&gt;.0K Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; test
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;27&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; xtrabackup_binlog_info
&lt;/span&gt;-rw-r--r-- &lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;29&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;&lt;span&gt; xtrabackup_binlog_pos_innodb
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;117&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;&lt;span&gt; xtrabackup_checkpoints
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;470&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt; xtrabackup_info
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;2.0M&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt; xtrabackup_logfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　恢复数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# rm -rf /data&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;   #删除数据文件

***不用启动数据库也可以还原*************

[root@node1 ~]# innobackupex --copy-back /extrabackup/2016-04-27_07-30-48/   #恢复数据, 记清使用方法

#########我们这里是编译安装的mariadb所以需要做一些操作##########
[root@node1 data]# killall mysqld

[root@node1 ~]# chown -R mysql:mysql ./* 
[root@node1 ~]# ll /data/      #数据恢复
total 28704
-rw-rw---- 1 mysql mysql    16384 Apr 27 07:43 aria_log.00000001
-rw-rw---- 1 mysql mysql       52 Apr 27 07:43 aria_log_control
-rw-rw---- 1 mysql mysql 18874368 Apr 27 07:43 ibdata1
-rw-rw---- 1 mysql mysql  5242880 Apr 27 07:43 ib_logfile0
-rw-rw---- 1 mysql mysql  5242880 Apr 27 07:43 ib_logfile1
-rw-rw---- 1 mysql mysql      264 Apr 27 07:43 mysql-bin.000001
-rw-rw---- 1 mysql mysql       19 Apr 27 07:43 mysql-bin.index
-rw-r----- 1 mysql mysql     2166 Apr 27 07:43 node1.anyisalin.com.err


[root@node1 data]# service mysqld restart
MySQL server PID file could not be found!                  [FAILED]
Starting MySQL..                                           [  OK  ]

MariaDB [(none)]&amp;gt; SHOW DATABASES;  #查看数据库, 已经恢复
+--------------------+
| Database           |
+--------------------+
| information_schema |
| employees          |
| mysql              |
| performance_schema |
| test               |
+--------------------+
5 rows in set (0.00 sec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　差量备份&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#########创建连两个数据库以供测试#####################
MariaDB [(none)]&lt;/span&gt;&amp;gt;&lt;span&gt; CREATE DATABASE TEST1;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

MariaDB [(none)]&lt;/span&gt;&amp;gt;&lt;span&gt; CREATE DATABASE TEST2;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

[root@node1 &lt;/span&gt;~]# innobackupex --incremental /extrabackup/ --incremental-basedir=/extrabackup/&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;30&lt;/span&gt;-&lt;span&gt;48&lt;/span&gt;/&lt;span&gt; 

[root@node1 &lt;/span&gt;~]# ls /extrabackup/&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;57&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt;/&lt;span&gt; #查看备份文件
total &lt;/span&gt;&lt;span&gt;96&lt;/span&gt;
-rw-r----- &lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;386&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt; backup-&lt;span&gt;my.cnf
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root  &lt;span&gt;4096&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; employees
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root &lt;span&gt;49152&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; ibdata1.delta
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root    &lt;span&gt;44&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; ibdata1.meta
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root  &lt;span&gt;4096&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; mysql
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root  &lt;span&gt;4096&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; performance_schema
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root  &lt;span&gt;4096&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; test
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root  &lt;span&gt;4096&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; TEST1
drwx&lt;/span&gt;------ &lt;span&gt;2&lt;/span&gt; root root  &lt;span&gt;4096&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; TEST2
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root    &lt;span&gt;21&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; xtrabackup_binlog_info
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;123&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; xtrabackup_checkpoints
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root   &lt;span&gt;530&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt;&lt;span&gt; xtrabackup_info
&lt;/span&gt;-rw-r----- &lt;span&gt;1&lt;/span&gt; root root  &lt;span&gt;2560&lt;/span&gt; Apr &lt;span&gt;27&lt;/span&gt; &lt;span&gt;07&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt; xtrabackup_logfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　BASEDIR指的是完全备份所在的目录，此命令执行结束后，innobackupex命令会在/extrabackup目录中创建一个新的以时间命名的目录以存放所有的增量备份数据。&lt;/p&gt;
&lt;p&gt;　　　　另外，在执行过增量备份之后再一次进行增量备份时，其--incremental-basedir应该指向上一次的增量备份所在的目录。&lt;/p&gt;
&lt;p&gt;　　　　需要注意的是，增量备份仅能应用于InnoDB或XtraDB表，对于MyISAM表而言，执行增量备份时其实进行的是完全备份。&lt;/p&gt;
&lt;p&gt;　　整理增量备份&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# innobackupex --apply-log --redo-only /extrabackup/&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;30&lt;/span&gt;-&lt;span&gt;48&lt;/span&gt;/&lt;span&gt;
[root@node1 &lt;/span&gt;~]# innobackupex --apply-log --redo-only /extrabackup/&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;30&lt;/span&gt;-&lt;span&gt;48&lt;/span&gt;/ --incremental-dir=/extrabackup/&lt;span&gt;2016&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-27_07-&lt;span&gt;5&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;-&lt;span&gt;22&lt;/span&gt;/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　恢复数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@node1 ~]# rm -rf /data&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;   #删除数据

[root@node1 ~]# innobackupex --copy-back /extrabackup/2016-04-27_07-30-48/     #整理增量备份之后可以直接通过全量备份还原

[root@node1 ~]# chown -R mysql.mysql /data/
[root@node1 ~]# ls /data/ -l
total 28732
-rw-rw---- 1 mysql mysql     8192 Apr 27 08:05 aria_log.00000001
-rw-rw---- 1 mysql mysql       52 Apr 27 08:05 aria_log_control
drwx------ 2 mysql mysql     4096 Apr 27 08:05 employees
-rw-r----- 1 mysql mysql 18874368 Apr 27 08:05 ibdata1
-rw-r----- 1 mysql mysql  5242880 Apr 27 08:05 ib_logfile0
-rw-r----- 1 mysql mysql  5242880 Apr 27 08:05 ib_logfile1
drwx------ 2 mysql mysql     4096 Apr 27 08:05 mysql
-rw-rw---- 1 mysql mysql      245 Apr 27 08:05 mysql-bin.000001
-rw-rw---- 1 mysql mysql       19 Apr 27 08:05 mysql-bin.index
-rw-r----- 1 mysql mysql     1812 Apr 27 08:05 node1.anyisalin.com.err
-rw-rw---- 1 mysql mysql        5 Apr 27 08:05 node1.anyisalin.com.pid
drwx------ 2 mysql mysql     4096 Apr 27 08:05 performance_schema
drwx------ 2 mysql mysql     4096 Apr 27 08:05 test
drwx------ 2 mysql mysql     4096 Apr 27 08:05 TEST1
drwx------ 2 mysql mysql     4096 Apr 27 08:05 TEST2
-rw-r----- 1 mysql mysql       29 Apr 27 08:05 xtrabackup_binlog_pos_innodb
-rw-r----- 1 mysql mysql      530 Apr 27 08:05 xtrabackup_info

MariaDB [(none)]&amp;gt; SHOW DATABASES;  #数据还原
+--------------------+
| Database           |
+--------------------+
| information_schema |
| TEST1              |
| TEST2              |
| employees          |
| mysql              |
| performance_schema |
| test               |
+--------------------+
7 rows in set (0.00 sec)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3.5、总结&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171015215654402-2095635594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;喜欢就“推荐”哦！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 15 Oct 2017 14:00:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7674505.html</dc:identifier>
</item>
<item>
<title>从template到DOM(Vue.js源码角度看内部运行机制) - 染陌同学</title>
<link>http://www.cnblogs.com/answershuto/p/7674294.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/answershuto/p/7674294.html</guid>
<description>&lt;h2 id=&quot;-&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;这篇文章算是对最近写的一系列Vue.js源码的文章(&lt;a href=&quot;https://github.com/answershuto/learnVue&quot;&gt;https://github.com/answershuto/learnVue&lt;/a&gt;)的总结吧，在阅读源码的过程中也确实受益匪浅，希望自己的这些产出也会对同样想要学习Vue.js源码的小伙伴有所帮助。之前这篇文章同样在我司（大搜车）的技术博客中发表过，欢迎大家关注我司的技术博客，给个传送门&lt;a href=&quot;https://blog.souche.com/&quot;&gt;https://blog.souche.com/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。&lt;/p&gt;
&lt;p&gt;文章的原地址：&lt;a href=&quot;https://github.com/answershuto/learnVue&quot;&gt;https://github.com/answershuto/learnVue&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在学习过程中，为Vue加上了中文的注释&lt;a href=&quot;https://github.com/answershuto/learnVue/tree/master/vue-src&quot;&gt;https://github.com/answershuto/learnVue/tree/master/vue-src&lt;/a&gt;，希望可以对其他想学习Vue源码的小伙伴有所帮助。&lt;/p&gt;
&lt;p&gt;可能会有理解存在偏差的地方，欢迎提issue指出，共同学习，共同进步。&lt;/p&gt;
&lt;h2 id=&quot;-new-vue-&quot;&gt;从new一个Vue对象开始&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; vm = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Vue({
    el: &lt;span class=&quot;hljs-string&quot;&gt;'#app'&lt;/span&gt;,
    
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很多同学好奇，在new一个Vue对象的时候，内部究竟发生了什么？&lt;/p&gt;
&lt;p&gt;究竟Vue.js是如何将data中的数据渲染到真实的宿主环境环境中的？&lt;/p&gt;
&lt;p&gt;又是如何通过“响应式”修改数据的？&lt;/p&gt;
&lt;p&gt;template是如何被编译成真实环境中可用的HTML的？&lt;/p&gt;
&lt;p&gt;Vue指令又是执行的？&lt;/p&gt;
&lt;p&gt;带着这些疑问，我们从Vue的构造类开始看起。&lt;/p&gt;
&lt;h2 id=&quot;vue-&quot;&gt;Vue构造类&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(options)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (process.env.NODE_ENV !== &lt;span class=&quot;hljs-string&quot;&gt;'production'&lt;/span&gt; &amp;amp;&amp;amp;
    !(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Vue)) {
    warn(&lt;span class=&quot;hljs-string&quot;&gt;'Vue is a constructor and should be called with the `new` keyword'&lt;/span&gt;)
  }
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;._init(options)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Vue的构造类只做了一件事情，就是调用_init函数进行&lt;/p&gt;
&lt;p&gt;来看一下init的代码&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;Vue.prototype._init = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(options?: Object)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; vm: Component = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;
    
    vm._uid = uid++

    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; startTag, endTag
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (process.env.NODE_ENV !== &lt;span class=&quot;hljs-string&quot;&gt;'production'&lt;/span&gt; &amp;amp;&amp;amp; config.performance &amp;amp;&amp;amp; mark) {
      startTag = `vue-perf-init:${vm._uid}`
      endTag = `vue-perf-end:${vm._uid}`
      mark(startTag)
    }

    
    
    vm._isVue = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (options &amp;amp;&amp;amp; options._isComponent) {
      
      
      
      initInternalComponent(vm, options)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      )
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (process.env.NODE_ENV !== &lt;span class=&quot;hljs-string&quot;&gt;'production'&lt;/span&gt;) {
      initProxy(vm)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      vm._renderProxy = vm
    }
    
    vm._self = vm
    
    initLifecycle(vm)
    
    initEvents(vm)
    
    initRender(vm)
    
    callHook(vm, &lt;span class=&quot;hljs-string&quot;&gt;'beforeCreate'&lt;/span&gt;)
    initInjections(vm) 
    
    initState(vm)
    initProvide(vm) 
    
    callHook(vm, &lt;span class=&quot;hljs-string&quot;&gt;'created'&lt;/span&gt;)

    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (process.env.NODE_ENV !== &lt;span class=&quot;hljs-string&quot;&gt;'production'&lt;/span&gt; &amp;amp;&amp;amp; config.performance &amp;amp;&amp;amp; mark) {
      
      vm._name = formatComponentName(vm, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)
      mark(endTag)
      measure(`${vm._name} init`, startTag, endTag)
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (vm.$options.el) {
      
      vm.$mount(vm.$options.el)
    }
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;_init主要做了这两件事：&lt;/p&gt;
&lt;p&gt;1.初始化（包括生命周期、事件、render函数、state等）。&lt;/p&gt;
&lt;p&gt;2.$mount组件。&lt;/p&gt;
&lt;p&gt;在生命钩子beforeCreate与created之间会初始化state，在此过程中，会依次初始化props、methods、data、computed与watch，这也就是Vue.js对options中的数据进行“响应式化”（即双向绑定）的过程。对于Vue.js响应式原理不了解的同学可以先看一下笔者的另一片文章&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/docs/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.MarkDown&quot;&gt;《Vue.js响应式原理》&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;
export &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;initState&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(vm: Component)&lt;/span&gt; &lt;/span&gt;{
  vm._watchers = []
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; opts = vm.$options
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (opts.props) initProps(vm, opts.props)
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (opts.methods) initMethods(vm, opts.methods)
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (opts.data) {
    initData(vm)
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    
    observe(vm._data = {}, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; )
  }
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (opts.computed) initComputed(vm, opts.computed)
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (opts.watch) initWatch(vm, opts.watch)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;-&quot;&gt;双向绑定&lt;/h2&gt;
&lt;p&gt;以initData为例，对option的data的数据进行双向绑定Oberver，其他option参数双向绑定的核心原理是一致的。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;initData&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(vm: Component)&lt;/span&gt; &lt;/span&gt;{

  
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = vm.$options.data
  data = vm._data = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; data === &lt;span class=&quot;hljs-string&quot;&gt;'function'&lt;/span&gt;
    ? getData(data, vm)
    : data || {}

  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!isPlainObject(data)) {
    data = {}
    process.env.NODE_ENV !== &lt;span class=&quot;hljs-string&quot;&gt;'production'&lt;/span&gt; &amp;amp;&amp;amp; warn(
      &lt;span class=&quot;hljs-string&quot;&gt;'data functions should return an object:\n'&lt;/span&gt; +
      &lt;span class=&quot;hljs-string&quot;&gt;'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'&lt;/span&gt;,
      vm
    )
  }

  
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; keys = &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;.keys(data)
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; props = vm.$options.props
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = keys.length

  
  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i--) {
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (props &amp;amp;&amp;amp; hasOwn(props, keys[i])) {
      process.env.NODE_ENV !== &lt;span class=&quot;hljs-string&quot;&gt;'production'&lt;/span&gt; &amp;amp;&amp;amp; warn(
        `The data property &lt;span class=&quot;hljs-string&quot;&gt;&quot;${keys[i]}&quot;&lt;/span&gt; is already declared as a prop. ` +
        `Use prop &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; value instead.`,
        vm
      )
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!isReserved(keys[i])) {
      

      
      proxy(vm, `_data`, keys[i])
    }
  }
  
  
  
  observe(data, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; )
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;observe会通过defineReactive对data中的对象进行双向绑定，最终通过Object.defineProperty对对象设置setter以及getter的方法。getter的方法主要用来进行依赖收集，对于依赖收集不了解的同学可以参考笔者的另一篇文章&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/docs/%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86.MarkDown&quot;&gt;《依赖收集》&lt;/a&gt;。setter方法会在对象被修改的时候触发（不存在添加属性的情况，添加属性请用Vue.set），这时候setter会通知闭包中的Dep，Dep中有一些订阅了这个对象改变的Watcher观察者对象，Dep会通知Watcher对象更新视图。&lt;/p&gt;
&lt;p&gt;如果是修改一个数组的成员，该成员是一个对象，那只需要递归对数组的成员进行双向绑定即可。但这时候出现了一个问题，？如果我们进行pop、push等操作的时候，push进去的对象根本没有进行过双向绑定，更别说pop了，那么我们如何监听数组的这些变化呢？&lt;br/&gt;Vue.js提供的方法是重写push、pop、shift、unshift、splice、sort、reverse这七个&lt;a href=&quot;http://v1-cn.vuejs.org/guide/list.html#%E5%8F%98%E5%BC%82%E6%96%B9%E6%B3%95&quot;&gt;数组方法&lt;/a&gt;。修改数组原型方法的代码可以参考&lt;a href=&quot;https://github.com/vuejs/vue/blob/dev/src/core/observer/array.js&quot;&gt;observer/array.js&lt;/a&gt;以及&lt;a href=&quot;https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L45&quot;&gt;observer/index.js&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;export &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Observer {
  value: any;
  dep: Dep;
  vmCount: number; 

  constructor (value: any) {
    

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.isArray(value)) {
      
      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; augment = hasProto
        ? protoAugment  
        : copyAugment   
      augment(value, arrayMethods, arrayKeys)

      
      &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.observeArray(value)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      
      &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.walk(value)
    }
  }
}


 
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;protoAugment&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(target, src: Object)&lt;/span&gt; &lt;/span&gt;{
  
  target.__proto__ = src
  
}




&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;copyAugment&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(target: Object, src: Object, keys: Array&amp;lt;string&amp;gt;)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l = keys.length; i &amp;lt; l; i++) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key = keys[i]
    def(target, key, src[key])
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;

import { def } from &lt;span class=&quot;hljs-string&quot;&gt;'../util/index'&lt;/span&gt;


&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayProto = &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;.prototype

export &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; arrayMethods = &lt;span class=&quot;hljs-built_in&quot;&gt;Object&lt;/span&gt;.create(arrayProto)


 
;[
  &lt;span class=&quot;hljs-string&quot;&gt;'push'&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;'pop'&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;'shift'&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;'unshift'&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;'splice'&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;'sort'&lt;/span&gt;,
  &lt;span class=&quot;hljs-string&quot;&gt;'reverse'&lt;/span&gt;
]
.forEach(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(method)&lt;/span&gt; &lt;/span&gt;{
  
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; original = arrayProto[method]
  def(arrayMethods, method, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mutator&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;.length
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; args = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;(i)
    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i--) {
      args[i] = &lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;[i]
    }
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = original.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, args)

    
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ob = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.__ob__
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; inserted
    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (method) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'push'&lt;/span&gt;:
        inserted = args
        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'unshift'&lt;/span&gt;:
        inserted = args
        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'splice'&lt;/span&gt;:
        inserted = args.slice(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)
        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (inserted) ob.observeArray(inserted)

    
    
    ob.dep.notify()
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result
  })
})
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从数组的原型新建一个Object.create(arrayProto)对象，通过修改此原型可以保证原生数组方法不被污染。如果当前浏览器支持&lt;strong&gt;proto&lt;/strong&gt;这个属性的话就可以直接覆盖该属性则使数组对象具有了重写后的数组方法。如果没有该属性的浏览器，则必须通过遍历def所有需要重写的数组方法，这种方法效率较低，所以优先使用第一种。&lt;/p&gt;
&lt;p&gt;在保证不污染不覆盖数组原生方法添加监听，主要做了两个操作，第一是通知所有注册的观察者进行响应式处理，第二是如果是添加成员的操作，需要对新成员进行observe。&lt;/p&gt;
&lt;p&gt;但是修改了数组的原生方法以后我们还是没法像原生数组一样直接通过数组的下标或者设置length来修改数组，Vue.js提供了&lt;a href=&quot;http://v1-cn.vuejs.org/guide/list.html#%E9%97%AE%E9%A2%98&quot;&gt;&lt;img src=&quot;https://chart.googleapis.com/chart?cht=tx&amp;amp;chl=set()%E5%8F%8A&quot; alt=&quot;set()及&quot;/&gt;remove()方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;对于更具体的讲解数据双向绑定以及Dep、Watcher的实现可以参考笔者的文章&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/docs/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E5%86%8D%E7%9C%8B%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.MarkDown&quot;&gt;《从源码角度再看数据绑定》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;template-&quot;&gt;template编译&lt;/h2&gt;
&lt;p&gt;在$mount过程中，如果是独立构建构建，则会在此过程中将template编译成render function。当然，你也可以采用运行时构建。具体参考&lt;a href=&quot;https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6&quot;&gt;运行时-编译器-vs-只包含运行时&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;template是如何被编译成render function的呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;baseCompile&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(
  template: string,
  options: CompilerOptions
)&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;CompiledResult&lt;/span&gt; &lt;/span&gt;{
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ast = parse(template.trim(), options)
  
  optimize(ast, options)
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; code = generate(ast, options)
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {
    ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;baseCompile首先会将模板template进行parse得到一个AST语法树，再通过optimize做一些优化，最后通过generate得到render以及staticRenderFns。&lt;/p&gt;
&lt;h3 id=&quot;parse&quot;&gt;parse&lt;/h3&gt;
&lt;p&gt;parse的源码可以参见&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/vue-src/compiler/parser/index.js#L53&quot;&gt;https://github.com/answershuto/learnVue/blob/master/vue-src/compiler/parser/index.js#L53&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;parse会用正则等方式解析template模板中的指令、class、style等数据，形成AST语法树。&lt;/p&gt;
&lt;h3 id=&quot;optimize&quot;&gt;optimize&lt;/h3&gt;
&lt;p&gt;optimize的主要作用是标记static静态节点，这是Vue在编译过程中的一处优化，后面当update更新界面时，会有一个patch的过程，diff算法会直接跳过静态节点，从而减少了比较的过程，优化了patch的性能。&lt;/p&gt;
&lt;h3 id=&quot;generate&quot;&gt;generate&lt;/h3&gt;
&lt;p&gt;generate是将AST语法树转化成render funtion字符串的过程，得到结果是render的字符串以及staticRenderFns字符串。&lt;/p&gt;
&lt;p&gt;具体的template编译实现请参考&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/docs/%E8%81%8A%E8%81%8AVue%E7%9A%84template%E7%BC%96%E8%AF%91.MarkDown&quot;&gt;《聊聊Vue.js的template编译》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;watcher-&quot;&gt;Watcher到视图&lt;/h2&gt;
&lt;p&gt;Watcher对象会通过调用updateComponent方法来达到更新视图的目的。这里提一下，其实Watcher并不是实时更新视图的，Vue.js默认会将Watcher对象存在一个队列中，在下一个tick时更新异步更新视图，完成了性能优化。关于nextTick感兴趣的小伙伴可以参考&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/docs/Vue.js%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0DOM%E7%AD%96%E7%95%A5%E5%8F%8AnextTick.MarkDown&quot;&gt;《Vue.js异步更新DOM策略及nextTick》&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;updateComponent = () =&amp;gt; {
    vm._update(vm._render(), hydrating)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;updateComponent就执行一句话，_render函数会返回一个新的Vnode节点，传入_update中与旧的VNode对象进行对比，经过一个patch的过程得到两个VNode节点的差异，最后将这些差异渲染到真实环境形成视图。&lt;/p&gt;
&lt;p&gt;什么是VNode？&lt;/p&gt;
&lt;h2 id=&quot;vnode&quot;&gt;VNode&lt;/h2&gt;
&lt;p&gt;在刀耕火种的年代，我们需要在各个事件方法中直接操作DOM来达到修改视图的目的。但是当应用一大就会变得难以维护。&lt;/p&gt;
&lt;p&gt;那我们是不是可以把真实DOM树抽象成一棵以JavaScript对象构成的抽象树，在修改抽象树数据后将抽象树转化成真实DOM重绘到页面上呢？于是虚拟DOM出现了，它是真实DOM的一层抽象，用属性描述真实DOM的各个特性。当它发生变化的时候，就会去修改视图。&lt;/p&gt;
&lt;p&gt;但是这样的JavaScript操作DOM进行重绘整个视图层是相当消耗性能的，我们是不是可以每次只更新它的修改呢？所以Vue.js将DOM抽象成一个以JavaScript对象为节点的虚拟DOM树，以VNode节点模拟真实DOM，可以对这颗抽象树进行创建节点、删除节点以及修改节点等操作，在这过程中都不需要操作真实DOM，只需要操作JavaScript对象，大大提升了性能。修改以后经过diff算法得出一些需要修改的最小单位，再将这些小单位的视图进行更新。这样做减少了很多不需要的DOM操作，大大提高了性能。&lt;/p&gt;
&lt;p&gt;Vue就使用了这样的抽象节点VNode，它是对真实DOM的一层抽象，而不依赖某个平台，它可以是浏览器平台，也可以是weex，甚至是node平台也可以对这样一棵抽象DOM树进行创建删除修改等操作，这也为前后端同构提供了可能。&lt;/p&gt;
&lt;p&gt;先来看一下Vue.js源码中对VNode类的定义。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-javascript&quot;&gt;export &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; VNode {
  tag: string | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;;
  data: VNodeData | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;;
  children: ?&lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;VNode&amp;gt;;
  text: string | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;;
  elm: Node | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;;
  ns: string | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;;
  context: Component | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;; 
  functionalContext: Component | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;; 
  key: string | number | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;;
  componentOptions: VNodeComponentOptions | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;;
  componentInstance: Component | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;; 
  parent: VNode | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;; 
  raw: boolean; 
  isStatic: boolean; 
  isRootInsert: boolean; 
  isComment: boolean; 
  isCloned: boolean; 
  isOnce: boolean; 

  constructor (
    tag?: string,
    data?: VNodeData,
    children?: ?&lt;span class=&quot;hljs-built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;VNode&amp;gt;,
    text?: string,
    elm?: Node,
    context?: Component,
    componentOptions?: VNodeComponentOptions
  ) {
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.tag = tag
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.data = data
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.children = children
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.text = text
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.elm = elm
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ns = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.context = context
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.functionalContext = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.key = data &amp;amp;&amp;amp; data.key
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.componentOptions = componentOptions
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.componentInstance = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.parent = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.raw = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.isStatic = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.isRootInsert = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.isComment = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.isCloned = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.isOnce = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
  }

  
  
  get child (): Component | &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.componentInstance
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是一个最基础的VNode节点，作为其他派生VNode类的基类，里面定义了下面这些数据。&lt;/p&gt;
&lt;p&gt;tag: 当前节点的标签名&lt;/p&gt;
&lt;p&gt;data: 当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息&lt;/p&gt;
&lt;p&gt;children: 当前节点的子节点，是一个数组&lt;/p&gt;
&lt;p&gt;text: 当前节点的文本&lt;/p&gt;
&lt;p&gt;elm: 当前虚拟节点对应的真实dom节点&lt;/p&gt;
&lt;p&gt;ns: 当前节点的名字空间&lt;/p&gt;
&lt;p&gt;context: 当前节点的编译作用域&lt;/p&gt;
&lt;p&gt;functionalContext: 函数化组件作用域&lt;/p&gt;
&lt;p&gt;key: 节点的key属性，被当作节点的标志，用以优化&lt;/p&gt;
&lt;p&gt;componentOptions: 组件的option选项&lt;/p&gt;
&lt;p&gt;componentInstance: 当前节点对应的组件的实例&lt;/p&gt;
&lt;p&gt;parent: 当前节点的父节点&lt;/p&gt;
&lt;p&gt;raw: 简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false&lt;/p&gt;
&lt;p&gt;isStatic: 是否为静态节点&lt;/p&gt;
&lt;p&gt;isRootInsert: 是否作为跟节点插入&lt;/p&gt;
&lt;p&gt;isComment: 是否为注释节点&lt;/p&gt;
&lt;p&gt;isCloned: 是否为克隆节点&lt;/p&gt;
&lt;p&gt;isOnce: 是否有v-once指令&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;打个比方，比如说我现在有这么一个VNode树&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-json&quot;&gt;{
    tag: 'div'
    data: {
        class: 'test'
    },
    children: [
        {
            tag: 'span',
            data: {
                class: 'demo'
            }
            text: 'hello,VNode'
        }
    ]
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;渲染之后的结果就是这样的&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;demo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;hello,VNode&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;更多操作VNode的方法，请参考&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/docs/VNode%E8%8A%82%E7%82%B9.MarkDown&quot;&gt;《VNode节点》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;patch&quot;&gt;patch&lt;/h2&gt;
&lt;p&gt;最后_update会将新旧两个VNode进行一次patch的过程，得出两个VNode最小的差异，然后将这些差异渲染到视图上。&lt;/p&gt;
&lt;p&gt;首先说一下patch的核心diff算法，diff算法是通过同层的树节点进行比较而非对树进行逐层搜索遍历的方式，所以时间复杂度只有O(n)，是一种相当高效的算法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/14b6ebc4fbb431d6501f2b9d93d369d0&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/1e4d85c9dbb984449c0aa9ffccd65b66&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两张图代表旧的VNode与新VNode进行patch的过程，他们只是在同层级的VNode之间进行比较得到变化（第二张图中相同颜色的方块代表互相进行比较的VNode节点），然后修改变化的视图，所以十分高效。&lt;/p&gt;
&lt;p&gt;在patch的过程中，如果两个VNode被认为是同一个VNode（sameVnode），则会进行深度的比较，得出最小差异，否则直接删除旧有DOM节点，创建新的DOM节点。&lt;/p&gt;
&lt;p&gt;什么是sameVnode？&lt;/p&gt;
&lt;p&gt;我们来看一下sameVnode的实现。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-JavaScript&quot;&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sameVnode&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(a, b)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (
    a.key === b.key &amp;amp;&amp;amp;
    a.tag === b.tag &amp;amp;&amp;amp;
    a.isComment === b.isComment &amp;amp;&amp;amp;
    isDef(a.data) === isDef(b.data) &amp;amp;&amp;amp;
    sameInputType(a, b)
  )
}




&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sameInputType&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(a, b)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.tag !== &lt;span class=&quot;hljs-string&quot;&gt;'input'&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; typeA = isDef(i = a.data) &amp;amp;&amp;amp; isDef(i = i.attrs) &amp;amp;&amp;amp; i.type
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; typeB = isDef(i = b.data) &amp;amp;&amp;amp; isDef(i = i.attrs) &amp;amp;&amp;amp; i.type
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; typeA === typeB
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当两个VNode的tag、key、isComment都相同，并且同时定义或未定义data的时候，且如果标签为input则type必须相同。这时候这两个VNode则算sameVnode，可以直接进行patchVnode操作。&lt;/p&gt;
&lt;p&gt;patchVnode的规则是这样的：&lt;/p&gt;
&lt;p&gt;1.如果新旧VNode都是静态的，同时它们的key相同（代表同一节点），并且新的VNode是clone或者是标记了once（标记v-once属性，只渲染一次），那么只需要替换elm以及componentInstance即可。&lt;/p&gt;
&lt;p&gt;2.新老节点均有children子节点，则对子节点进行diff操作，调用updateChildren，这个updateChildren也是diff的核心。&lt;/p&gt;
&lt;p&gt;3.如果老节点没有子节点而新节点存在子节点，先清空老节点DOM的文本内容，然后为当前DOM节点加入子节点。&lt;/p&gt;
&lt;p&gt;4.当新节点没有子节点而老节点有子节点的时候，则移除该DOM节点的所有子节点。&lt;/p&gt;
&lt;p&gt;5.当新老节点都无子节点的时候，只是文本的替换。&lt;/p&gt;
&lt;h2 id=&quot;updatechildren&quot;&gt;updateChildren&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-JavaScript&quot;&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateChildren&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; oldStartIdx = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newStartIdx = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; oldEndIdx = oldCh.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; oldStartVnode = oldCh[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; oldEndVnode = oldCh[oldEndIdx]
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newEndIdx = newCh.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newStartVnode = newCh[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newEndVnode = newCh[newEndIdx]
    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; oldKeyToIdx, idxInOld, elmToMove, refElm

    
    
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; canMove = !removeOnly

    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (oldStartIdx &amp;lt;= oldEndIdx &amp;amp;&amp;amp; newStartIdx &amp;lt;= newEndIdx) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx] 
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx]
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sameVnode(oldStartVnode, newStartVnode)) {
        
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)
        oldStartVnode = oldCh[++oldStartIdx]
        newStartVnode = newCh[++newStartIdx]
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)
        oldEndVnode = oldCh[--oldEndIdx]
        newEndVnode = newCh[--newEndIdx]
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sameVnode(oldStartVnode, newEndVnode)) { 
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)
        canMove &amp;amp;&amp;amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))
        oldStartVnode = oldCh[++oldStartIdx]
        newEndVnode = newCh[--newEndIdx]
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sameVnode(oldEndVnode, newStartVnode)) { 
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)
        canMove &amp;amp;&amp;amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)
        oldEndVnode = oldCh[--oldEndIdx]
        newStartVnode = newCh[++newStartIdx]
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)
        
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isUndef(idxInOld)) { 
          
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm)
          newStartVnode = newCh[++newStartIdx]
        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
          
          elmToMove = oldCh[idxInOld]
          
          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (process.env.NODE_ENV !== &lt;span class=&quot;hljs-string&quot;&gt;'production'&lt;/span&gt; &amp;amp;&amp;amp; !elmToMove) {
            
            warn(
              &lt;span class=&quot;hljs-string&quot;&gt;'It seems there are duplicate keys that is causing an update error. '&lt;/span&gt; +
              &lt;span class=&quot;hljs-string&quot;&gt;'Make sure each v-for item has a unique key.'&lt;/span&gt;
            )
          }
          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sameVnode(elmToMove, newStartVnode)) {
            
            
            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue)
            
            oldCh[idxInOld] = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;
            
            canMove &amp;amp;&amp;amp; nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm)
            newStartVnode = newCh[++newStartIdx]
          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
            
            
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm)
            newStartVnode = newCh[++newStartIdx]
          }
        }
      }
    }
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (oldStartIdx &amp;gt; oldEndIdx) {
      
      refElm = isUndef(newCh[newEndIdx + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) ? &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; : newCh[newEndIdx + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].elm
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (newStartIdx &amp;gt; newEndIdx) {
      
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)
    }
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;直接看源码可能比较难以捋清其中的关系，我们通过图来看一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/de4d3da22b645d9bcbd808fb3217b80d&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先，在新老两个VNode节点的左右头尾两侧都有一个变量标记，在遍历过程中这几个变量都会向中间靠拢。当oldStartIdx &amp;lt;= oldEndIdx或者newStartIdx &amp;lt;= newEndIdx时结束循环。&lt;/p&gt;
&lt;p&gt;索引与VNode节点的对应关系：&lt;br/&gt;oldStartIdx =&amp;gt; oldStartVnode&lt;br/&gt;oldEndIdx =&amp;gt; oldEndVnode&lt;br/&gt;newStartIdx =&amp;gt; newStartVnode&lt;br/&gt;newEndIdx =&amp;gt; newEndVnode&lt;/p&gt;
&lt;p&gt;在遍历中，如果存在key，并且满足sameVnode，会将该DOM节点进行复用，否则则会创建一个新的DOM节点。&lt;/p&gt;
&lt;p&gt;首先，oldStartVnode、oldEndVnode与newStartVnode、newEndVnode两两比较一共有2*2=4种比较方法。&lt;/p&gt;
&lt;p&gt;当新老VNode节点的start或者end满足sameVnode时，也就是sameVnode(oldStartVnode, newStartVnode)或者sameVnode(oldEndVnode, newEndVnode)，直接将该VNode节点进行patchVnode即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/cc3aa489678a3b96d7844bfe1d58ac16&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果oldStartVnode与newEndVnode满足sameVnode，即sameVnode(oldStartVnode, newEndVnode)。&lt;/p&gt;
&lt;p&gt;这时候说明oldStartVnode已经跑到了oldEndVnode后面去了，进行patchVnode的同时还需要将真实DOM节点移动到oldEndVnode的后面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/dfb12f66b35710b957e791c35f6dab70&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果oldEndVnode与newStartVnode满足sameVnode，即sameVnode(oldEndVnode, newStartVnode)。&lt;/p&gt;
&lt;p&gt;这说明oldEndVnode跑到了oldStartVnode的前面，进行patchVnode的同时真实的DOM节点移动到了oldStartVnode的前面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/4694dfe59a947c5ed4846f7a1d7a38db&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果以上情况均不符合，则通过createKeyToOldIdx会得到一个oldKeyToIdx，里面存放了一个key为旧的VNode，value为对应index序列的哈希表。从这个哈希表中可以找到是否有与newStartVnode一致key的旧的VNode节点，如果同时满足sameVnode，patchVnode的同时会将这个真实DOM（elmToMove）移动到oldStartVnode对应的真实DOM的前面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/0f6a48aece8f334161534e3b9e5008a0&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然也有可能newStartVnode在旧的VNode节点找不到一致的key，或者是即便key相同却不是sameVnode，这个时候会调用createElm创建一个新的DOM节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/df1e2361e7e192d3ddc7269b57c28a05&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里循环已经结束了，那么剩下我们还需要处理多余或者不够的真实DOM节点。&lt;/p&gt;
&lt;p&gt;1.当结束时oldStartIdx &amp;gt; oldEndIdx，这个时候老的VNode节点已经遍历完了，但是新的节点还没有。说明了新的VNode节点实际上比老的VNode节点多，也就是比真实DOM多，需要将剩下的（也就是新增的）VNode节点插入到真实DOM节点中去，此时调用addVnodes（批量调用createElm的接口将这些节点加入到真实DOM中去）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/bdc5b95cc7de46b969a2be31d9609744&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2。同理，当newStartIdx &amp;gt; newEndIdx时，新的VNode节点已经遍历完了，但是老的节点还有剩余，说明真实DOM节点多余了，需要从文档中删除，这时候调用removeVnodes将这些多余的真实DOM删除。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/00d2f2e166dad0f57ecee558e6c7f517&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;更详细的diff实现参考笔者的文章&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0&quot;&gt;VirtualDOM与diff(Vue.js实现)&lt;/a&gt;.MarkDown)。&lt;/p&gt;
&lt;h2 id=&quot;-dom&quot;&gt;映射到真实DOM&lt;/h2&gt;
&lt;p&gt;由于Vue使用了虚拟DOM，所以虚拟DOM可以在任何支持JavaScript语言的平台上操作，譬如说目前Vue支持的浏览器平台或是weex，在虚拟DOM的实现上是一致的。那么最后虚拟DOM如何映射到真实的DOM节点上呢？&lt;/p&gt;
&lt;p&gt;Vue为平台做了一层适配层，浏览器平台见&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/vue-src/platforms/web/runtime/node-ops.js&quot;&gt;/platforms/web/runtime/node-ops.js&lt;/a&gt;以及weex平台见&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/vue-src/platforms/weex/runtime/node-ops.js&quot;&gt;/platforms/weex/runtime/node-ops.js&lt;/a&gt;。不同平台之间通过适配层对外提供相同的接口，虚拟DOM进行操作真实DOM节点的时候，只需要调用这些适配层的接口即可，而内部实现则不需要关心，它会根据平台的改变而改变。&lt;/p&gt;
&lt;p&gt;现在又出现了一个问题，我们只是将虚拟DOM映射成了真实的DOM。那如何给这些DOM加入attr、class、style等DOM属性呢？&lt;/p&gt;
&lt;p&gt;这要依赖于虚拟DOM的生命钩子。虚拟DOM提供了如下的钩子函数，分别在不同的时期会进行调用。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-JavaScript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; hooks = [&lt;span class=&quot;hljs-string&quot;&gt;'create'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'activate'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'update'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'remove'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'destroy'&lt;/span&gt;]


  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; hooks.length; ++i) {
    cbs[hooks[i]] = []
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; modules.length; ++j) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]])
      }
    }
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同理，也会根据不同平台有自己不同的实现，我们这里以Web平台为例。Web平台的钩子函数见&lt;a href=&quot;https://github.com/answershuto/learnVue/tree/master/vue-src/platforms/web/runtime/modules&quot;&gt;/platforms/web/runtime/modules&lt;/a&gt;。里面有对attr、class、props、events、style以及transition（过渡状态）的DOM属性进行操作。&lt;/p&gt;
&lt;p&gt;以attr为例，代码很简单。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs language-JavaScript&quot;&gt;

import { isIE9 } from &lt;span class=&quot;hljs-string&quot;&gt;'core/util/env'&lt;/span&gt;

import {
  extend,
  isDef,
  isUndef
} from &lt;span class=&quot;hljs-string&quot;&gt;'shared/util'&lt;/span&gt;

import {
  isXlink,
  xlinkNS,
  getXlinkProp,
  isBooleanAttr,
  isEnumeratedAttr,
  isFalsyAttrValue
} from &lt;span class=&quot;hljs-string&quot;&gt;'web/util/index'&lt;/span&gt;


&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateAttrs&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(oldVnode: VNodeWithData, vnode: VNodeWithData)&lt;/span&gt; &lt;/span&gt;{
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isUndef(oldVnode.data.attrs) &amp;amp;&amp;amp; isUndef(vnode.data.attrs)) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
  }
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; key, cur, old
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; elm = vnode.elm
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; oldAttrs = oldVnode.data.attrs || {}
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; attrs: any = vnode.data.attrs || {}
  
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs)
  }

  
  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; attrs) {
    cur = attrs[key]
    old = oldAttrs[key]
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (old !== cur) {
      setAttr(elm, key, cur)
    }
  }
  
  
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isIE9 &amp;amp;&amp;amp; attrs.value !== oldAttrs.value) {
    setAttr(elm, &lt;span class=&quot;hljs-string&quot;&gt;'value'&lt;/span&gt;, attrs.value)
  }
  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; oldAttrs) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isUndef(attrs[key])) {
      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key))
      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key)
      }
    }
  }
}


&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setAttr&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(el: Element, key: string, value: any)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isBooleanAttr(key)) {
    
    
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isFalsyAttrValue(value)) {
      el.removeAttribute(key)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      el.setAttribute(key, key)
    }
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === &lt;span class=&quot;hljs-string&quot;&gt;'false'&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;'false'&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;'true'&lt;/span&gt;)
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isXlink(key)) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key))
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      el.setAttributeNS(xlinkNS, key, value)
    }
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isFalsyAttrValue(value)) {
      el.removeAttribute(key)
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      el.setAttribute(key, value)
    }
  }
}

export &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; {
  create: updateAttrs,
  update: updateAttrs
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;attr只需要在create以及update钩子被调用时更新DOM的attr属性即可。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;至此，我们已经从template到真实DOM的整个过程梳理完了。现在再去看这张图，是不是更清晰了呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/15/4731d94e2f438b16090164b5f6d5ed5d&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;关于&lt;/h2&gt;
&lt;p&gt;作者：染陌&lt;/p&gt;
&lt;p&gt;Email：answershuto@gmail.com or answershuto@126.com&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/answershuto&quot;&gt;https://github.com/answershuto&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blog：&lt;a href=&quot;http://answershuto.github.io/&quot;&gt;http://answershuto.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知乎主页：&lt;a href=&quot;https://www.zhihu.com/people/cao-yang-49/activities&quot;&gt;https://www.zhihu.com/people/cao-yang-49/activities&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/ranmo&quot;&gt;https://zhuanlan.zhihu.com/ranmo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;掘金： &lt;a href=&quot;https://juejin.im/user/58f87ae844d9040069ca7507&quot;&gt;https://juejin.im/user/58f87ae844d9040069ca7507&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;osChina：&lt;a href=&quot;https://my.oschina.net/u/3161824/blog&quot;&gt;https://my.oschina.net/u/3161824/blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢。&lt;/p&gt;
&lt;p&gt;欢迎关注我的公众号&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/9/24/99de30e7ef948aabf132e91d543807a0&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
</description>
<pubDate>Sun, 15 Oct 2017 13:22:00 +0000</pubDate>
<dc:creator>染陌同学</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/answershuto/p/7674294.html</dc:identifier>
</item>
<item>
<title>分布式跟踪调研与设计 - tylercao</title>
<link>http://www.cnblogs.com/tylercao/p/7674080.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tylercao/p/7674080.html</guid>
<description>&lt;p&gt;公司业务由数以百计的分布式服务沟通，每一个请求路由过来后，会经过多个业务系统并留下足迹，并产生对各种缓存或者DB的访问，但是这些分散的数据对于问题排查，或者流程优化比较有限。对于一个跨进程的场景，汇总收集并分析海量日志就显得尤为重要。在这种架构下，跨进程的业务流会经过很多个微服务的处理和传递，我们难免会遇到这样的问题:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一次请求的流量从哪个服务而来？ 最终落到了哪个服务中去？&lt;/li&gt;
&lt;li&gt;为什么这个请求这么慢? 到底哪个环节出了问题?&lt;/li&gt;
&lt;li&gt;这个操作需要依赖哪些东西? 是数据库还是消息队列? Redis挂了，哪些业务受影响?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于这个问题，业内已经有了一些实践和解决方案，通过调用链的方式，把一次请求调用过程完整的串联起来，这样就实现了对请求条用路径的监控。在业界，Twitter的Zipkin和淘宝的鹰眼就是类似的系统，它们都起源于Google Dapper论文，就像历史上Hadoop起源于Google Map/Reduce论文，Hbase起源于Google BigTable论文一样&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;低消耗性：跟踪系统对业务系统的影响应该做到足够小。在一些高度优化过的服务，即使一点点损耗也容易察觉到，而且有可能迫使在线负责的部署团队不得不将跟踪系统关停&lt;/li&gt;
&lt;li&gt;低侵入性：作为非业务组件，应当尽可能少侵入或者无侵入业务系统，对于使用方透明，减少开发人员的负担&lt;/li&gt;
&lt;li&gt;时效性：从数据的收集产生，到数据计算处理，再到最终展现，都要求尽可能快&lt;/li&gt;
&lt;li&gt;决策支持：这些数据是否能在决策支持层面发挥作用，特别是从DevOps的角度&lt;/li&gt;
&lt;li&gt;数据可视化：做到不用看日志通过可视化进行筛选&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;故障快速定位
&lt;ul&gt;&lt;li&gt;调用链路跟踪，一次请求的逻辑轨迹可以完整清晰的展示出来。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;各个调用环节的性能分析
&lt;ul&gt;&lt;li&gt;调用链的各个环节分表添加调用耗时，可以分析出系统的性能瓶颈，并针对性的优化。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;数据分析
&lt;ul&gt;&lt;li&gt;调用链是一条完整的业务日志，可以得到用户的行为路径，汇总分析应用在很多业务场景&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;kafka&lt;/td&gt;
&lt;td&gt;&amp;gt; 5000 Query Per Second&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;数据延迟&lt;/td&gt;
&lt;td&gt;&amp;lt; 1 Min&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;查询延迟&lt;/td&gt;
&lt;td&gt;&amp;lt; 3 Second&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Kafka&lt;/td&gt;
&lt;td&gt;1套3节点&lt;/td&gt;
&lt;td&gt;与监控系统共用一套集群，分属不同Topic&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;ElasticSearch&lt;/td&gt;
&lt;td&gt;1套3节点&lt;/td&gt;
&lt;td&gt;与ELK共用一套集群，前提ELK需做扩容准备&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;API机器&lt;/td&gt;
&lt;td&gt;虚拟机3台&lt;/td&gt;
&lt;td&gt;公司标准虚拟机配置4core 8G即可&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;公司服务部署在多个机房中，但是分布式跟踪的数据需汇总收集并展示，故暂时进行采用不了多机房部署方案。考虑到分布式跟踪系统类似于ELK系统的基础服务，部署架构与现有ELK保证一致，核心服务部署在B7机房&lt;/p&gt;

&lt;p&gt;一般分布式跟踪系统, 主要有三个部分：数据收集，数据存储和数据展示。根据系统大小不同，每一部分的结构又有一定变化。譬如，对于大规模分布式系统，数据存储可分为实时数据和全量数据两部分，实时数据用于故障排查，全量数据用于系统优化；数据收集除了支持平台无关和开发语言无关系统的数据收集，还包括异步数据收集（需要跟踪队列中的消息，保证调用的连贯性），以及确保更小的侵入性；数据展示又涉及到数据挖掘和分享。虽然每一部分都可能变的很复杂，但基本原理都类似。&lt;br/&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/LaW7jDBKBg1jEGPib0DA4eZF7tBiclAzdsVRXstOJ1Fkhy40qqvGXzthGWP1enlosuiay0nhbiaJ8HQvBft0YetmDA/0?wx_fmt=png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图1：这个路径由用户的X请求发起，穿过一个简单的服务系统。用字母标识的节点代表分布式系统中的不同处理过程。&lt;/p&gt;
&lt;p&gt;分布式服务的跟踪系统需要记录在一次特定的请求后系统中完成的所有工作的信息。举个例子，图1展现的是一个和5台服务器相关的一个服务，包括：前端（A），两个中间层（B和C），以及两个后端（D和E）。当一个用户（这个用例的发起人）发起一个请求时，首先到达前端，然后发送两个RPC到服务器B和C。B会马上做出反应，但是C需要和后端的D和E交互之后再返还给A，由A来响应最初的请求。对于这样一个请求，简单实用的分布式跟踪的实现，就是为服务器上每一次你发送和接收动作来收集跟踪标识符(message identifiers)和时间戳(timestamped events)。&lt;/p&gt;

&lt;p&gt;为了将所有记录条目与发起者惯量上并记录所有信息，现在有两种解决方案，黑盒和基于标签(annotation-based)的监控方案。&lt;br/&gt;黑盒方案采用framework为基础，将依赖集成进去，对各接入业务线透明。基于标签的方案，依赖业务线明确标记一个trace id，从而连接每一条记录和发起者的请求。基于标签的方案主要缺点很明显，需要植入与业务无关代码。所以默认情况下，&lt;strong&gt;我们提供基于hjframework公共组件的方案&lt;/strong&gt;，实现跟踪系统对业务无感知。同时如果需要显示使用这个标签功能的话，我们同样提供出来，由业务方自行决定是否使用标签。&lt;/p&gt;

&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;淘宝&lt;/td&gt;
&lt;td&gt;EagleEye&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;主要基于内部HSF实现，HSF没有开源，故鹰眼也没有开源&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Twitter&lt;/td&gt;
&lt;td&gt;Zipkin&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;基于Http实现，支持语言较多，比较适合我们公司业务&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;点评&lt;/td&gt;
&lt;td&gt;CAT&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;自定义改造难度大，代码比较复杂，侵入代码，需要埋点&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;京东&lt;/td&gt;
&lt;td&gt;Hydra&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;主要基于Dubbo实现，不适合公司Http请求为主的场景&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;综上所述，最终我们觉得采用Zipkin的方式来实现，比较适合公司目前以Http请求为主的场景。虽然采用第三方开源产品，但是客户端依赖的SDK，仍需我们开发集成到HJFramewor中。针对Node和JS，Zipkin同样提供对应的前端SDK，我们集成好之后，就能正常使用。&lt;/p&gt;

&lt;h2 id=&quot;整体架构图及说明&quot;&gt;整体架构图及说明&lt;/h2&gt;
&lt;p&gt;基于Zipkin的基础上，我们对其架构进行了扩展，基于Google Dapper的概念，设计一套基于Http的分布式跟踪系统。其种涵盖了信息的收集，处理和展现。&lt;br/&gt;整体架构如下图所示，主要由四个部分构成：收集器、数据传输、数据存储、查询及web界面&lt;/p&gt;
&lt;h3 id=&quot;收集器&quot;&gt;收集器&lt;/h3&gt;
&lt;p&gt;业务方之间依赖我们提供的SDK，进行数据收集。其中SDK主要采用Spring Cloud中分布式跟踪模块是Spring Cloud Sleuth。该模块主要用于收集Spring boot系统中数据，发送至缓冲队列Kafka中。同时官方提供了针对Node、Python等一些常用的客户端SDK&lt;/p&gt;
&lt;h3 id=&quot;数据传输&quot;&gt;数据传输&lt;/h3&gt;
&lt;p&gt;我们在SDK与后端服务之间加了一层Kafka，这样做既可以实现两边工程的解耦，又可以实现数据的延迟消费。我们不希望因为瞬时QPS过高而导致数据丢失，当然为此也付出了一些实效性上的代价。&lt;/p&gt;
&lt;h3 id=&quot;数据存储&quot;&gt;数据存储&lt;/h3&gt;
&lt;p&gt;默认存储采用ElasticSearch 来保证数据，考虑到数据量的规模，先期只保存最近1个月的数据&lt;/p&gt;
&lt;h3 id=&quot;查询及web界面&quot;&gt;查询及Web界面&lt;/h3&gt;
&lt;p&gt;查询主要用来向其他服务提供数据查询的能力，而Web服务是官方默认提供的图形化界面，我们会重写这块页面，使之与沪江内部平台结合起来。&lt;/p&gt;
&lt;h3 id=&quot;sdk分析&quot;&gt;SDK分析&lt;/h3&gt;
&lt;p&gt;调用链跟踪：把同一个TraceID和SpanID收集起来，按时间排序Timeline，把ParentID串起来就是调用栈。&lt;br/&gt;&lt;img src=&quot;http://daixiaoyu.com/images/distributed-tracing/dt003.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Google的大规模分布式系统的跟踪系统&lt;a href=&quot;http://bigbully.github.io/Dapper-translation/&quot;&gt;Dapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitter开源的&lt;a href=&quot;http://zipkin.io/&quot;&gt;Zipkin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;窝窝网介绍Tracing的一篇&lt;a href=&quot;http://www.cnblogs.com/zhengyun_ustc/p/55solution2.html&quot;&gt;博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 15 Oct 2017 12:44:00 +0000</pubDate>
<dc:creator>tylercao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tylercao/p/7674080.html</dc:identifier>
</item>
<item>
<title>iOS的异步绘制--YYAsyncLayer源码分析 - Mr 布鲁斯</title>
<link>http://www.cnblogs.com/sunshine-anycall/p/7674021.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-anycall/p/7674021.html</guid>
<description>&lt;p&gt;最近看了&lt;code&gt;YYAsyncLayer&lt;/code&gt;在这里总结一下。&lt;code&gt;YYAsyncLayer&lt;/code&gt;是整个&lt;code&gt;YYKit&lt;/code&gt;异步渲染的基础。整个项目的Github地址在&lt;a href=&quot;https://github.com/ibireme/YYAsyncLayer&quot;&gt;这里&lt;/a&gt;。你可以先下载了一睹为快，也可以跟着我一步一步的了解它是怎么实现异步绘制的。&lt;/p&gt;
&lt;h2 id=&quot;如何实现异步&quot;&gt;如何实现异步&lt;/h2&gt;
&lt;p&gt;两种方式可以实现异步。一种是使用另外的一个线程，一种是使用&lt;strong&gt;RunLoop&lt;/strong&gt;。另外开一个线程的方法有很多，但是现在最方便的就死GCD了。&lt;/p&gt;
&lt;h3 id=&quot;gcd&quot;&gt;GCD&lt;/h3&gt;
&lt;p&gt;这里介绍一些GCD里常用的方法，为了后面阅读的需要。还有&lt;code&gt;YYAsyncLayer&lt;/code&gt;中用到的更加高级的用法会在下文中深入介绍。&lt;/p&gt;
&lt;h4 id=&quot;创建一个queue&quot;&gt;创建一个queue&lt;/h4&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;dispatch_queue_t queue;
if ([UIDevice currentDevice].systemVersion.floatValue &amp;gt;= 8.0) {
  dispatch_queue_attr_t attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, QOS_CLASS_USER_INITIATED, 0);
  queue = dispatch_queue_create(&quot;com.ibireme.yykit.render&quot;, attr);
} else {
  queue = dispatch_queue_create(&quot;com.ibireme.yykit.render&quot;, DISPATCH_QUEUE_SERIAL);
  dispatch_set_target_queue(queue, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果iOS 8和以上版本的话，创建queue的方法和之前的版本的不太太一样。在iOS 8和以上的版本中创建queue需要先创建一个&lt;code&gt;dispatch_queue_attr_t&lt;/code&gt;类型的实例。并作为参数传入到queue的生成方法里。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DISPATCH_QUEUE_SERIAL&lt;/code&gt;说明在这个queue内部的task是串行执行的。&lt;/p&gt;
&lt;h4 id=&quot;dispatch_once&quot;&gt;dispatch_once&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;dispatch_once&lt;/code&gt;和&lt;code&gt;dispatch_once_t&lt;/code&gt;的组合可以实现其中的task只被执行一次。但是有一个前提条件，看代码：&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;static dispatch_once_t onceToken; // 1

// 2
dispatch_once(&amp;amp;onceToken, ^{
  // 这里的task只被执行一次
});&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;这里的&lt;code&gt;dispatch_once_t&lt;/code&gt;必须是静态的。也就是要有APP一样长的生存期来保证这段时间内task只被执行一次。如果不是&lt;strong&gt;static&lt;/strong&gt;的，那么只被执行一次是保证不了的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_once&lt;/code&gt;方法在这里执行，&lt;code&gt;onceToken&lt;/code&gt;在这里有一个取地址的操作。也就是&lt;code&gt;onceToken&lt;/code&gt;把地址传入方法内部被初始化和赋值。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;runloop&quot;&gt;RunLoop&lt;/h3&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;CFRunLoopRef runloop = CFRunLoopGetMain();  // 1
CFRunLoopObserverRef observer;
// 2
observer = CFRunLoopObserverCreate(CFAllocatorGetDefault(),
                                    kCFRunLoopBeforeWaiting |kCFRunLoopExit,
                                    true,      // repeat
                                    0xFFFFFF,  // after CATransaction(2000000)
                                    YYRunLoopObserverCallBack, NULL);
// 3
CFRunLoopAddObserver(runloop, observer, kCFRunLoopCommonModes); 
CFRelease(observer);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来分析一下这段代码&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;CFRunLoopGetMain&lt;/code&gt;方法返回主线程的&lt;code&gt;RunLoop&lt;/code&gt;引用。后面用这个引用来添加回调。&lt;/li&gt;
&lt;li&gt;使用系统内置的c方法创建一个&lt;code&gt;RunLoop&lt;/code&gt;的观察者，在创建这个观察者的时候回同时指定回调方法。&lt;/li&gt;
&lt;li&gt;给&lt;code&gt;RunLoop&lt;/code&gt;实例添加观察者，之后减少一个观察者的引用。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在第二步创建观察者的时候，还指定了观察者观察的事件：&lt;code&gt;kCFRunLoopBeforeWaiting | kCFRunLoopExit&lt;/code&gt;，在&lt;br/&gt;&lt;code&gt;RunLoop&lt;/code&gt;进入等待或者即将要退出的时候开始执行观察者。指定了观察者是否重复（true）。指定了观察者的优先级：&lt;code&gt;0xFFFFFF&lt;/code&gt;，这个优先级比&lt;code&gt;CATransaction&lt;/code&gt;优先级为2000000的优先级更低。这是为了确保系统的动画优先执行，之后再执行异步渲染。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YYRunLoopObserverCallBack&lt;/code&gt;就是观察者收到通知的时候要执行的回调方法。这个方法的声明是这样的：&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;static void YYRunLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;渲染是怎么回事&quot;&gt;渲染是怎么回事&lt;/h2&gt;
&lt;p&gt;渲染就是把我们代码里设置的代码的视图和数据结合，最后绘制成一张图呈现在用户的面前。每秒绘制60张图，用户看着就是流畅的揭秘男呈现，如果不到60帧，那么越少用户看着就会越卡。&lt;/p&gt;
&lt;h3 id=&quot;calayer&quot;&gt;CALayer&lt;/h3&gt;
&lt;p&gt;在iOS中，最终我们看到的视图都是在CALayer里呈现的，在&lt;code&gt;CALayer&lt;/code&gt;有一个属性叫做&lt;code&gt;contents&lt;/code&gt;，这里不放别的，放的就是显示用的一张图。&lt;/p&gt;
&lt;p&gt;我们来看看&lt;code&gt;YYAsyncLayer&lt;/code&gt;类的代码：&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;  // 类声明
  @interface YYAsyncLayer : CALayer // 1
  /// Whether the render code is executed in background. Default is YES.
  @property BOOL displaysAsynchronously;
  @end

  //类实现的一部分代码
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();  // 2
  // ...
  dispatch_async(dispatch_get_main_queue(), ^{
      self.contents = (__bridge id)(image.CGImage); // 3
  });&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;YYAsyncLayer&lt;/code&gt;继承自&lt;code&gt;CALayer&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/code&gt;这是一个&lt;code&gt;CoreGraphics&lt;/code&gt;的调用，是在一些绘制之后返回组成的图片。&lt;/li&gt;
&lt;li&gt;在2&amp;gt;中生成的图片，最终被赋值给了&lt;code&gt;CALahyer#contents&lt;/code&gt;属性。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;coregraphics&quot;&gt;CoreGraphics&lt;/h3&gt;
&lt;p&gt;如果说&lt;code&gt;CALayer&lt;/code&gt;是一个绘制结果的展示，那么绘制的过程就要用到&lt;code&gt;CoreGraphics&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;在正式开始以前，首先需要了解一个方法的实现。这个方法会用来绘制具体的界面上的内容：&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;task.display = ^(CGContextRef context, CGSize size, BOOL(^isCancelled)(void)) {
    if (isCancelled()) return;
    NSArray *lines = CreateCTLines(text, font, size.width);
    if (isCancelled()) return;
    
    for (int i = 0; i &amp;lt; lines.count; i++) {
        CTLineRef line = line[i];
        CGContextSetTextPosition(context, 0, i * font.pointSize * 1.5);
        CTLineDraw(line, context);
        if (isCancelled()) return;
    }
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你也看到了，这其实不是一个方法而是一个block。这个block会使用传入的&lt;code&gt;CGContextRef context&lt;/code&gt;参数来绘制文字。&lt;/p&gt;
&lt;p&gt;目前了解这么多就足够了，后面会有详细的介绍。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;YYAsyncLayer#_displayAsync&lt;/code&gt;方法是如何绘制的，&lt;code&gt;_displayAsync&lt;/code&gt;是一个“私有方法”。&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;//这里我们只讨论异步的情况
// 1
CGSize size = self.bounds.size;
BOOL opaque = self.opaque;
CGFloat scale = self.contentsScale;
CGColorRef backgroundColor = (opaque &amp;amp;&amp;amp; self.backgroundColor) 
  ? CGColorRetain(self.backgroundColor) : NULL;

dispatch_async(YYAsyncLayerGetDisplayQueue(), ^{  // 2
  UIGraphicsBeginImageContextWithOptions(size, opaque, scale);
  CGContextRef context = UIGraphicsGetCurrentContext();
  // 3
  if (opaque) {
    CGContextSaveGState(context); {
      if (!backgroundColor || CGColorGetAlpha(backgroundColor) &amp;lt; 1) {
        CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);
        CGContextAddRect(context, CGRectMake(0, 0, size.width * scale, size.height * scale));
        CGContextFillPath(context);
      }
      if (backgroundColor) {
        CGContextSetFillColorWithColor(context, backgroundColor);
        CGContextAddRect(context, CGRectMake(0, 0, size.width * scale, size.height * scale));
        CGContextFillPath(context);
      }
    } CGContextRestoreGState(context);
    CGColorRelease(backgroundColor);
  }
  task.display(context, size, isCancelled);   // 4

  // 5
  UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();

  // 6
  dispatch_async(dispatch_get_main_queue(), ^{
    self.contents = (__bridge id)(image.CGImage);
  });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;解释如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;准备工作，获取&lt;code&gt;size&lt;/code&gt;, &lt;code&gt;opaque&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt;和&lt;code&gt;backgroundColor&lt;/code&gt;这个四个值。这些在获取绘制的取悦的时候用到。背景色另外有处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YYAsyncLayerGetDisplayQueue()&lt;/code&gt;方法返回一个&lt;code&gt;dispatch_queue_t&lt;/code&gt;实例，并在其中开始异步操作。&lt;/li&gt;
&lt;li&gt;判断&lt;code&gt;opaque&lt;/code&gt;的值，如果是非透明的话处理背景色。这个时候就会用到第一步里获取到的&lt;code&gt;backgroundColor&lt;/code&gt;变量的值。&lt;/li&gt;
&lt;li&gt;在&lt;em&gt;CoreGraphics&lt;/em&gt;一节开始的时候讲到的绘制具体内容的block。&lt;/li&gt;
&lt;li&gt;绘制完毕，获取到&lt;code&gt;UIImage&lt;/code&gt;实例。&lt;/li&gt;
&lt;li&gt;返回主线程，并给&lt;code&gt;contents&lt;/code&gt;属性设置绘制的成果图片。至此异步绘制全部结束。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;为了让读者更加关注异步绘制这个主题，所以省略了部分代码。生路的代码中很多事检查是否取消的。异步的绘制，尤其是在一个滚动的&lt;code&gt;UITableView&lt;/code&gt;或者&lt;code&gt;UICollectionView&lt;/code&gt;中随时都可能会取消，所以即使的检查是否取消并终止正在进行的绘制很有必要。这些，你会在完整的代码中看到。&lt;/p&gt;
&lt;h2 id=&quot;不能无限的开辟线程&quot;&gt;不能无限的开辟线程&lt;/h2&gt;
&lt;p&gt;我们都知道，把阻塞主线程执行的代码放入另外的线程里保证APP可以及时的响应用户的操作。但是线程的切换也是需要额外的开销的。也就是说，线程不能无限度的开辟下去。&lt;/p&gt;
&lt;p&gt;那么，&lt;code&gt;dispatch_queue_t&lt;/code&gt;的实例也不能一直增加下去。有人会说可以用&lt;code&gt;dispatch_get_global_queue()&lt;/code&gt;来获取系统的队列。没错，但是这个情况只适用于少量的任务分配。因为，系统本身也会往这个queue里添加任务的。&lt;/p&gt;
&lt;p&gt;所以，我们需要用自己的queue，但是是有限个的。在YY里给这个数量指定的值是&lt;code&gt;16&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;指定为16，我也是有些疑惑的。在Android里指定线程池的大小的时候通常的值是CPU的内核个数的两倍。&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;设计把点连成线&quot;&gt;设计，把点连成线&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;YYAsyncLayer&lt;/code&gt;异步绘制的过程就是一个观察者执行的过程。所谓的观察者就是你设置了一个机关，当它被触发的时候可以执行你预设的东西。比如你走到一扇门前，它感应到了你的红外辐射就会打开。&lt;/p&gt;
&lt;p&gt;async layer也是一样，它会把“感应器”放在run loop里。当run loop要闲下来的时候“感应器”的回调开始执行，告诉async layer可以开始异步渲染了。&lt;/p&gt;
&lt;p&gt;但是异步渲染要干什么呢？我们现在就来说说异步渲染的内容从哪里来？一个需要异步渲染的view会在定义的时候就把需要异步渲染的内容通过layer保存在view的代理发送给layer。&lt;/p&gt;
&lt;h3 id=&quot;calayer和uiview的关系&quot;&gt;CALayer和UIView的关系&lt;/h3&gt;
&lt;p&gt;UIView是显示层，而显示在屏幕上的内容是由CALayer来管理的。&lt;code&gt;CALayer&lt;/code&gt;的一个代理方法可以在&lt;code&gt;UIView&lt;/code&gt;宿主里实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;YYAsyncLayer&lt;/code&gt;用的就是这个方式。代理为：&lt;br/&gt;&lt;code&gt;objc @protocol YYAsyncLayerDelegate &amp;lt;NSObject&amp;gt; @required /// This method is called to return a new display task when the layer's contents need update. - (YYAsyncLayerDisplayTask *)newAsyncDisplayTask; @end `` 在实现的时候是这样的：&lt;/code&gt;objc&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;(YYTextAsyncLayerDisplayTask &lt;em&gt;)newAsyncDisplayTask {&lt;br/&gt;// 1&lt;br/&gt;YYAsyncLayerDisplayTask&lt;/em&gt; task = [YYAsyncLayerDisplayTask new];&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;// 2&lt;br/&gt;task.willDisplay = ^(CALayer *layer) {&lt;br/&gt;// ...&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;// 3&lt;br/&gt;task.display = ^(CGContextRef context, CGSize size, BOOL (^isCancelled)(void)) {&lt;br/&gt;// ...&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;// 4&lt;br/&gt;task.didDisplay = ^(CALayer *layer, BOOL finished) {&lt;br/&gt;// ...&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;return task;&lt;br/&gt;}&lt;br/&gt;``&lt;code&gt;1. 创建了&lt;/code&gt;YYAsyncLayerDisplayTask&lt;code&gt;对象 2. 设置task的&lt;/code&gt;willDisplay`block回调。 3. 4.分别设置了其他的display回调block。&lt;/p&gt;
&lt;p&gt;可见&lt;code&gt;YYAsyncLayer&lt;/code&gt;的代理的实现会创建一个&lt;code&gt;YYAsyncLayerDisplayTask&lt;/code&gt;的实例并返回。在这个实例中包含了layer显示顺序的回调：&lt;code&gt;willDisplay&lt;/code&gt;、&lt;code&gt;display&lt;/code&gt;和&lt;code&gt;didDisplay&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;setneedsdisplay&quot;&gt;&lt;code&gt;setNeedsDisplay&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;对&lt;code&gt;CALayer&lt;/code&gt;实例调用&lt;code&gt;setNeedsDisplay&lt;/code&gt;方法之后&lt;code&gt;CALayer&lt;/code&gt;的&lt;code&gt;display&lt;/code&gt;方法就会被调用。&lt;code&gt;YYAsyncLayer&lt;/code&gt;重写了&lt;code&gt;display&lt;/code&gt;方法：&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;- (void)display {
  super.contents = super.contents;
  [self _displayAsync:_displaysAsynchronously];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最终会调用&lt;code&gt;YYAsyncLayer&lt;/code&gt;实例的&lt;code&gt;display&lt;/code&gt;方法。&lt;code&gt;display&lt;/code&gt;方法又会调用到&lt;code&gt;_displayAsync:&lt;/code&gt;方法，开始异步绘制的过程。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;最后，我们把整个异步渲染的过程来串联起来。&lt;/p&gt;
&lt;p&gt;对一个包含了&lt;code&gt;YYAsyncLayer&lt;/code&gt;的view，比如&lt;code&gt;YYLable&lt;/code&gt;就像&lt;a href=&quot;https://github.com/ibireme/YYAsyncLayer&quot;&gt;文档&lt;/a&gt;里的一样。重写&lt;code&gt;layoutSubviews&lt;/code&gt;方法添加对layer的&lt;code&gt;setNeedsDisplay&lt;/code&gt;方法的调用。&lt;/p&gt;
&lt;p&gt;这样一个调用链就形成了：用户操作-&amp;gt;[view layoutSubviews]-&amp;gt;[view.layer setNeedsDisplay]-&amp;gt;[layer display]-&amp;gt;[layer _displayAsync]异步绘制开始（准确的说是&lt;code&gt;_displayAsync&lt;/code&gt;方法的参数为true**的时候开始异步绘制）。&lt;/p&gt;
&lt;p&gt;但是这并没有用到&lt;em&gt;RunLoop&lt;/em&gt;。所以代码会修改为每次调用&lt;code&gt;layoutSubviews&lt;/code&gt;的时候给RunLoop提交一个异步绘制的任务：&lt;/p&gt;
&lt;pre class=&quot;objc&quot;&gt;
&lt;code&gt;- (void)layoutSubviews {
    [super layoutSubviews];
    [[YYTransaction transactionWithTarget:self selector:@selector(contentsNeedUpdated)] commit];
}

- (void)contentsNeedUpdated {
    // do update
    [self.layer setNeedsDisplay];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样每次RunLoop要进入休眠或者即将退出的时候会开始异步的绘制。这个任务是从&lt;code&gt;[layer setNeedsDisplay]&lt;/code&gt;开始的。&lt;/p&gt;
</description>
<pubDate>Sun, 15 Oct 2017 12:24:00 +0000</pubDate>
<dc:creator>Mr 布鲁斯</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-anycall/p/7674021.html</dc:identifier>
</item>
</channel>
</rss>