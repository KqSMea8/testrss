<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>ASP.NET Core RSA加密或解密 - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/9853736.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/9853736.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;这两天主要是公司同事用到了RSA加密，事后也看了下，以为很简单，最终利用RSACryptoServiceProvider来实现RSA加密，然后大致了解到RSACryptoServiceProvider不支持跨平台，此类原先存在于.NET Framework中，本文我讲讲利用RSA.Create来实现各种加密模式统一封装。&lt;/p&gt;
&lt;h2&gt;RSA加密或解密&lt;/h2&gt;
&lt;p&gt;主要是在查找资料时看到了dudu老大写的有关RSA加密的文章（&lt;a title=&quot;.net core中使用openssl的公钥私钥进行加解密&quot; href=&quot;http://www.cnblogs.com/dudu/p/dotnet-core-rsa-openssl.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/dudu/p/dotnet-core-rsa-openssl.html&lt;/a&gt;），刚好找到了我们项目中需要用到的openssl加密模式对应.NET Core中的Pkcs1，这里实现代码实在有点多，然后自己也遇到如评论中所说加密长度超出的情况，这个时候只能采取分段加密的方式。接下来我们来看看。首先看看如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; privateKey = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;RSAKeyValue&amp;gt;&amp;lt;Modulus&amp;gt;0wE26IHp4U9OLtPhJ+fT8ej6aWORFP8pd++MjUuhkQQm/zhcImbxQbjxtSAftz+kkDwGDFJpSldQPyigOGcUx7PofTc6VhiFik9E9SsxV9n0iEEtqUndDfmBJfPAWt+4UDMwKakgZqFoapDuwjKlTErFvKCyKCs+qN9OZvZwKWk=&amp;lt;/Modulus&amp;gt;&amp;lt;Exponent&amp;gt;AQAB&amp;lt;/Exponent&amp;gt;&amp;lt;P&amp;gt;8Ei6NIsZtgV3DQjuGHfGLS6o1O+IUXxzjqLxdMm77yhEPUxR9YPIxODJ2VVTddXSAHxViJJt30yJ7JhVz6cpQw==&amp;lt;/P&amp;gt;&amp;lt;Q&amp;gt;4M49NrmalgVQFMsea2RMB1qN8fAPfIw5G9q9hzsLcWSCmkeRRIQlvPYflVEKAYKiDVVzENETbnnduFXWBABx4w==&amp;lt;/Q&amp;gt;&amp;lt;DP&amp;gt;t+JQbemN0Zi5FQaif6MZzHYKynpNTl75aE0Wj5Pa+RlNr8N6bXNe8Bw/HM2Jw4HQ5oJASvYUk3DVlHS4JuP8VQ==&amp;lt;/DP&amp;gt;&amp;lt;DQ&amp;gt;lT62iv9brp9mU/epgVh71SH8PJPIZEJfo6tryjyb0zMMNcqvmZI1z6aCv0mm3+vPFBUXqCF1yhFj7n4l8FAvSw==&amp;lt;/DQ&amp;gt;&amp;lt;InverseQ&amp;gt;flrvgxHvf4l+fdymEVDgKjsfGqshOpppoNgZj9kpeWBto3o8z++Ki6eSLQT3nVnpx2QCZeTWkxTED4nhSLKscw==&amp;lt;/InverseQ&amp;gt;&amp;lt;D&amp;gt;cQTCg1Eqk7sltmFYxUYgOP/AOPjSufteG9acYwYymPkvZh6rAuY+rSRBmvGE62NUYskzuB/gM6iG2/2HrA5SixfNgCvZ+nsK+kX5pzQRsYdD71ViQW0hOanXwj45I2zHRgBiuTtCUP0fs5pISmQkaeJkDL5pO2l+wvlgl+wunj0=&amp;lt;/D&amp;gt;&amp;lt;/RSAKeyValue&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; publicKey = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;RSAKeyValue&amp;gt;&amp;lt;Modulus&amp;gt;0wE26IHp4U9OLtPhJ+fT8ej6aWORFP8pd++MjUuhkQQm/zhcImbxQbjxtSAftz+kkDwGDFJpSldQPyigOGcUx7PofTc6VhiFik9E9SsxV9n0iEEtqUndDfmBJfPAWt+4UDMwKakgZqFoapDuwjKlTErFvKCyKCs+qN9OZvZwKWk=&amp;lt;/Modulus&amp;gt;&amp;lt;Exponent&amp;gt;AQAB&amp;lt;/Exponent&amp;gt;&amp;lt;/RSAKeyValue&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; rsa =&lt;span&gt; RSA.Create())
            {
                rsa.FromXmlString(publicKey);
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/589642/201810/589642-20181026022604968-1701687008.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;经到github上查找解决方案，我们需要手动设置值，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; FromXmlString(RSA rsa, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; xmlString)
        {
            RSAParameters parameters &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RSAParameters();

            XmlDocument xmlDoc &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XmlDocument();
            xmlDoc.LoadXml(xmlString);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (xmlDoc.DocumentElement.Name.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RSAKeyValue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (XmlNode node &lt;span&gt;in&lt;/span&gt;&lt;span&gt; xmlDoc.DocumentElement.ChildNodes)
                {
                    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (node.Name)
                    {
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Modulus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.Modulus = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exponent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.Exponent = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.P = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.Q = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DP&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.DP = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DQ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.DQ = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;InverseQ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.InverseQ = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.D = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Invalid XML RSA key.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            rsa.ImportParameters(parameters);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中经过很多尝试，要么是Base64格式不正确，要么是待解密的数据长度和Key Size无效，我第一次尝试是返回的加密字符串，然后进行解密，就是有问题，最后还是返回字节数组来进行加密和解密，直接看代码，这里解决了加密数据长度超出问题以及各种加密模式的统一，如下RSAHelper。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RSAHelper
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; privateKey = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;RSAKeyValue&amp;gt;&amp;lt;Modulus&amp;gt;0wE26IHp4U9OLtPhJ+fT8ej6aWORFP8pd++MjUuhkQQm/zhcImbxQbjxtSAftz+kkDwGDFJpSldQPyigOGcUx7PofTc6VhiFik9E9SsxV9n0iEEtqUndDfmBJfPAWt+4UDMwKakgZqFoapDuwjKlTErFvKCyKCs+qN9OZvZwKWk=&amp;lt;/Modulus&amp;gt;&amp;lt;Exponent&amp;gt;AQAB&amp;lt;/Exponent&amp;gt;&amp;lt;P&amp;gt;8Ei6NIsZtgV3DQjuGHfGLS6o1O+IUXxzjqLxdMm77yhEPUxR9YPIxODJ2VVTddXSAHxViJJt30yJ7JhVz6cpQw==&amp;lt;/P&amp;gt;&amp;lt;Q&amp;gt;4M49NrmalgVQFMsea2RMB1qN8fAPfIw5G9q9hzsLcWSCmkeRRIQlvPYflVEKAYKiDVVzENETbnnduFXWBABx4w==&amp;lt;/Q&amp;gt;&amp;lt;DP&amp;gt;t+JQbemN0Zi5FQaif6MZzHYKynpNTl75aE0Wj5Pa+RlNr8N6bXNe8Bw/HM2Jw4HQ5oJASvYUk3DVlHS4JuP8VQ==&amp;lt;/DP&amp;gt;&amp;lt;DQ&amp;gt;lT62iv9brp9mU/epgVh71SH8PJPIZEJfo6tryjyb0zMMNcqvmZI1z6aCv0mm3+vPFBUXqCF1yhFj7n4l8FAvSw==&amp;lt;/DQ&amp;gt;&amp;lt;InverseQ&amp;gt;flrvgxHvf4l+fdymEVDgKjsfGqshOpppoNgZj9kpeWBto3o8z++Ki6eSLQT3nVnpx2QCZeTWkxTED4nhSLKscw==&amp;lt;/InverseQ&amp;gt;&amp;lt;D&amp;gt;cQTCg1Eqk7sltmFYxUYgOP/AOPjSufteG9acYwYymPkvZh6rAuY+rSRBmvGE62NUYskzuB/gM6iG2/2HrA5SixfNgCvZ+nsK+kX5pzQRsYdD71ViQW0hOanXwj45I2zHRgBiuTtCUP0fs5pISmQkaeJkDL5pO2l+wvlgl+wunj0=&amp;lt;/D&amp;gt;&amp;lt;/RSAKeyValue&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; publicKey = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;RSAKeyValue&amp;gt;&amp;lt;Modulus&amp;gt;0wE26IHp4U9OLtPhJ+fT8ej6aWORFP8pd++MjUuhkQQm/zhcImbxQbjxtSAftz+kkDwGDFJpSldQPyigOGcUx7PofTc6VhiFik9E9SsxV9n0iEEtqUndDfmBJfPAWt+4UDMwKakgZqFoapDuwjKlTErFvKCyKCs+qN9OZvZwKWk=&amp;lt;/Modulus&amp;gt;&amp;lt;Exponent&amp;gt;AQAB&amp;lt;/Exponent&amp;gt;&amp;lt;/RSAKeyValue&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] Encrypt(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] encryptBytes, RSAEncryptionPadding padding)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; rsa =&lt;span&gt; RSA.Create())
            {

                FromXmlString(rsa, publicKey);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxBlockSize =&lt;span&gt; GetMaxBlockSize(rsa, padding);

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (encryptBytes.Length &amp;lt;=&lt;span&gt; maxBlockSize)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; @bytes =&lt;span&gt; rsa.Encrypt(encryptBytes, padding);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; @bytes;
                }

                &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; memoryStream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream(encryptBytes))
                {
                    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; readStream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream())
                    {
                        &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] buffer = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[maxBlockSize];

                        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; blockSize = memoryStream.Read(buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, maxBlockSize);

                        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (blockSize &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blockByte = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[blockSize];

                            Array.Copy(buffer, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, blockByte, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, blockSize);

                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; encrypts =&lt;span&gt; rsa.Encrypt(blockByte, padding);

                            readStream.Write(encrypts, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, encrypts.Length);

                            blockSize &lt;/span&gt;= memoryStream.Read(buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, maxBlockSize);
                        }

                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; readStream.ToArray();
                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] Decrypt(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] decryptBytes, RSAEncryptionPadding padding)
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; rsa =&lt;span&gt; RSA.Create())
            {
                FromXmlString(rsa, privateKey);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxBlockSize = rsa.KeySize / &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (decryptBytes.Length &amp;lt;=&lt;span&gt; maxBlockSize)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; @bytes =&lt;span&gt; rsa.Decrypt(decryptBytes, padding);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; @bytes;
                }

                &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; memoryStream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream(decryptBytes))
                {
                    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; readStream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream())
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[maxBlockSize];

                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blockSize = memoryStream.Read(buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, maxBlockSize);

                        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (blockSize &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; blockByte = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[blockSize];

                            Array.Copy(buffer, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, blockByte, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, blockSize);

                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; decrypts =&lt;span&gt; rsa.Decrypt(blockByte, padding);

                            readStream.Write(decrypts, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, decrypts.Length);

                            blockSize &lt;/span&gt;= memoryStream.Read(buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, maxBlockSize);
                        }

                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; readStream.ToArray();
                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; FromXmlString(RSA rsa, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; xmlString)
        {
            RSAParameters parameters &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RSAParameters();

            XmlDocument xmlDoc &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XmlDocument();
            xmlDoc.LoadXml(xmlString);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (xmlDoc.DocumentElement.Name.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RSAKeyValue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (XmlNode node &lt;span&gt;in&lt;/span&gt;&lt;span&gt; xmlDoc.DocumentElement.ChildNodes)
                {
                    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (node.Name)
                    {
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Modulus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.Modulus = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exponent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.Exponent = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.P = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Q&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.Q = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DP&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.DP = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DQ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.DQ = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;InverseQ&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.InverseQ = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: parameters.D = (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(node.InnerText) ? &lt;span&gt;null&lt;/span&gt; : Convert.FromBase64String(node.InnerText)); &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Invalid XML RSA key.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            rsa.ImportParameters(parameters);
        }

        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; GetMaxBlockSize(RSA rsa, RSAEncryptionPadding padding)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; offset = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (padding.Mode ==&lt;span&gt; RSAEncryptionPaddingMode.Pkcs1)
            {
                offset &lt;/span&gt;= &lt;span&gt;11&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (padding.Equals(RSAEncryptionPadding.OaepSHA1))
                {
                    offset &lt;/span&gt;= &lt;span&gt;42&lt;/span&gt;&lt;span&gt;;
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (padding.Equals(RSAEncryptionPadding.OaepSHA256))
                {
                    offset &lt;/span&gt;= &lt;span&gt;66&lt;/span&gt;&lt;span&gt;;
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (padding.Equals(RSAEncryptionPadding.OaepSHA384))
                {
                    offset &lt;/span&gt;= &lt;span&gt;98&lt;/span&gt;&lt;span&gt;;
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (padding.Equals(RSAEncryptionPadding.OaepSHA512))
                {
                    offset &lt;/span&gt;= &lt;span&gt;130&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; rsa.KeySize / &lt;span&gt;8&lt;/span&gt; -&lt;span&gt; offset;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们开始进行如下测试，加密数据长度为6890，如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; encryptString = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;2000&lt;/span&gt;; i++&lt;span&gt;)
            {
                encryptString &lt;/span&gt;+=&lt;span&gt; i;
            }

            Console.WriteLine(encryptString.Length);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; encryptBytes =&lt;span&gt; Encoding.UTF8.GetBytes(encryptString);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加密后字节数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; resultBytes =&lt;span&gt; RSAHelper.Encrypt(encryptBytes, RSAEncryptionPadding.Pkcs1);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密后字节数组&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; decryptBytes =&lt;span&gt; RSAHelper.Decrypt(resultBytes, RSAEncryptionPadding.Pkcs1);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解密结果&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; Encoding.UTF8.GetString(decryptBytes);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较加密字符串和解密结果是否相等&lt;/span&gt;
            Console.WriteLine(encryptString ==&lt;span&gt; result);
            Console.ReadKey();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/589642/201810/589642-20181026024307313-1009472854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本文通过实现RSA加密和解密，同时也对加密数据超出采取分段加密的方式，测试在windows上通过，由于没有linux和mac环境未经测试，不知是否好使，一试见分晓。 &lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 23:44:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<og:description>前言 这两天主要是公司同事用到了RSA加密，事后也看了下，以为很简单，最终利用RSACryptoServiceProvider来实现RSA加密，然后大致了解到RSACryptoServiceProvi</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/9853736.html</dc:identifier>
</item>
<item>
<title>什么是量子计算机？用一个简单例子来解释 - Liam Wang</title>
<link>http://www.cnblogs.com/willick/p/what-is-a-quantum-computer.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/willick/p/what-is-a-quantum-computer.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191097/201810/191097-20181026025014481-31808050.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;译者：王亮 &lt;br/&gt;作者：YK Sugi &lt;br/&gt;原文：http://t.cn/EZAElk0&lt;/p&gt;
&lt;p&gt;Hi，大家好！&lt;/p&gt;
&lt;p&gt;不久前，我参观了加拿大温哥华的D-Wave Systems公司，这是一家制造前沿量子计算机的公司。&lt;/p&gt;
&lt;p&gt;我在那里学到了很多关于量子计算机的知识，所以我写这篇文章来和大家分享我在那里所学到的一些知识。&lt;/p&gt;
&lt;p&gt;本文的目的是通过一个简单的例子让你清楚地了解什么是量子计算机。&lt;/p&gt;
&lt;p&gt;本文所讲的内容很容易理解，不要求你具备量子物理或计算机科学的知识。&lt;/p&gt;
&lt;p&gt;好了，我们开始吧。&lt;/p&gt;
&lt;h2&gt;什么是量子计算机？&lt;/h2&gt;
&lt;p&gt;下面用一句话来概括什么是量子计算机：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;量子计算机是一种使用量子力学的计算机，它能比普通计算机更高效地执行某些特定的计算。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话有很多东西需要解释，所以让我用一个简单的例子来告诉你它到底是什么。&lt;/p&gt;
&lt;p&gt;为了解释什么是量子计算机，我首先需要解释一下普通（非量子）计算机。&lt;/p&gt;
&lt;h2&gt;普通计算机如何存储信息&lt;/h2&gt;
&lt;p&gt;目前一台普通的计算机是用一系列的0和1来存储信息的。&lt;/p&gt;
&lt;p&gt;不同类型的信息，比如数字、文本和图像都可能用这种方式来表示。&lt;/p&gt;
&lt;p&gt;0和1系列中的每个单位被称为比特（bit，中文也叫位），因此一比特可以被设置为0或1。&lt;/p&gt;
&lt;h3&gt;那么量子计算机呢？&lt;/h3&gt;
&lt;p&gt;量子计算机并不是用比特来存储信息的，而是用一种叫量子比特(qubit，quantum bit的简写，中文也叫量子位)的东西。&lt;/p&gt;
&lt;p&gt;每个量子比特不仅能设置为1或0，还可以设置为1和0。但，这究竟是什么意思呢？&lt;/p&gt;
&lt;p&gt;让我来用一个简单的例子来解释一下。这是一个拟人的例子，但它依然可以帮助理解量子机算机如何工作。&lt;/p&gt;
&lt;h2&gt;一个用来理解量子计算机的例子&lt;/h2&gt;
&lt;p&gt;现在，假设你现在经营一家旅行社，你需要把一群人从一个地方运送到另一个地方。&lt;/p&gt;
&lt;p&gt;为了简单起见，不妨假设你现在需要运送的只有3人——Alice，Becky和Chris。&lt;/p&gt;
&lt;p&gt;并且假设你为此预定了2辆出租车，你得分清楚谁乘坐哪一辆出租车。&lt;/p&gt;
&lt;p&gt;另外，你知道谁和谁是朋友关系，谁和谁是敌人关系。&lt;/p&gt;
&lt;p&gt;这里，我们认为她们的关系是这样的：&lt;/p&gt;
&lt;p&gt;◇ Alice和Becky是朋友&lt;br/&gt;◇ Alice和Chris是敌人&lt;br/&gt;◇ Becky和Chris是敌人&lt;/p&gt;
&lt;p&gt;现在你要将这3个人分配到2辆出租车，并要达到下面的目标：&lt;/p&gt;
&lt;p&gt;◇ 最大化共用一辆车的&lt;span&gt;朋友对数&lt;/span&gt;&lt;br/&gt;◇ 最小化共用一辆车的&lt;span&gt;敌人对数&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;译注：朋友/敌人的对数，这里的“对”是单位，不是指数学中的对数。比如“一对”就是两人的意思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好了，这是这个问题的基本前提。让我们先来思考一下如何用普通计算机解决这个问题。&lt;/p&gt;
&lt;h2&gt;用普通计算机解决这个问题&lt;/h2&gt;
&lt;p&gt;为了用普通的非量子计算机来解决这个问题，你首先需要弄清楚如何用比特存储相关的信息。&lt;/p&gt;
&lt;p&gt;我们先标识这两辆出租车为出租车#1和出租车#0。&lt;/p&gt;
&lt;p&gt;然后，你可以用3个比特表示谁进入哪辆车。&lt;/p&gt;
&lt;p&gt;例如，我们可用0和1来表示：&lt;/p&gt;
&lt;p&gt;◇ Alice乘坐出租车#0&lt;br/&gt;◇ Becky乘坐出租车#0&lt;br/&gt;◇ Chris乘坐出租车#1&lt;/p&gt;
&lt;p&gt;由于每个人都有两个选择，因此有2*2*2=8种组合来把她们分配给两辆车。下面是所有可能的组合：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;A | B | C&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你可以用3个比特来表示这些组合中的任意一个。&lt;/p&gt;
&lt;h3&gt;计算每个组合的分数&lt;/h3&gt;
&lt;p&gt;现在，用普通计算机我们如何来判断哪一个组合是最佳组合呢？为此，让我们来定义如何计算每个组合的得分。这个得分将代表每个组合达到前面提到的两个目标的程度：&lt;/p&gt;
&lt;p&gt;◇ 最大化共用一辆车的&lt;span&gt;朋友对数&lt;/span&gt;&lt;br/&gt;◇ 最小化共用一辆车的&lt;span&gt;敌人对数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;让我们简单地这样定义我们的分数：&lt;/p&gt;
&lt;p&gt;(给定组合的得分)=(#共用一辆车的朋友对数)-(#共用一辆车的敌人对数)&lt;/p&gt;
&lt;p&gt;例如，假设Alice，Becky和Chris都乘坐出租车#0，可以用3个比特表示为&lt;span&gt;111&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;在这种情况下，只有&lt;span&gt;一对朋友&lt;/span&gt;共用一辆车——Alice和Becky。&lt;/p&gt;
&lt;p&gt;然而，有&lt;span&gt;两对敌人&lt;/span&gt;共用一辆车——Alice和Chris，Becky和Chris。&lt;/p&gt;
&lt;p&gt;所以，这个组合的总分是1-2 = -1。&lt;/p&gt;
&lt;h3&gt;解决这个问题&lt;/h3&gt;
&lt;p&gt;有了所有这些预设，我们终于可以着手解决这个问题了。&lt;/p&gt;
&lt;p&gt;对于一台普通的计算机，要找到最好的组合，你基本上需要遍历所有的组合，看看哪个得分最高。&lt;/p&gt;
&lt;p&gt;你可以构建这样一个表格：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;A | B | C | Score&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; |  &lt;span&gt;1&lt;/span&gt; &amp;lt;- 最佳组合之一&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; |  &lt;span&gt;1&lt;/span&gt; &amp;lt;- 最佳组合之一&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如你所见，这里有两个正确的组合——001和110，都达到了1分。&lt;/p&gt;
&lt;p&gt;这是个相当简单的问题。然而随着越来越多的人参与到这个问题中来，用一台普通计算机就很难解决这个问题。&lt;/p&gt;
&lt;p&gt;我们看到，3个人需要遍历8种可能的组合。&lt;/p&gt;
&lt;p&gt;如果有4个人呢？在这种情况下，我们需要遍历2*2*2*2 = 16个组合。&lt;/p&gt;
&lt;p&gt;对于n个人，我们需要通过2的n次方个组合来找到最佳组合。&lt;/p&gt;
&lt;p&gt;所以，如果有100个人，我们需要遍历：&lt;/p&gt;
&lt;p&gt;2¹⁰⁰ ~= 10³⁰ = 一百万百万百万百万百万个组合。&lt;/p&gt;
&lt;p&gt;要遍历这么多的组合，对普通计算机来说是不现实的。&lt;/p&gt;
&lt;h2&gt;用量子计算机解决这个问题&lt;/h2&gt;
&lt;p&gt;我们如何用量子计算机来解决这个问题呢？&lt;/p&gt;
&lt;p&gt;让我们回到把3个人分配给2辆出租车的例子。&lt;/p&gt;
&lt;p&gt;正如我们前面看到的，这个问题有8种可能的组合：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;A | B | C&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;用一台普通计算机，用3个比特，我们一次只能表示其中一个组合——例如001。&lt;/p&gt;
&lt;p&gt;然而，使用量子计算机，3个&lt;span&gt;量子比特&lt;/span&gt;可以&lt;span&gt;同时表示所有8个组合&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;关于量子比特这个词的确切含义存在争议，但我的看法是这样的。&lt;/p&gt;
&lt;p&gt;首先，检查这3个量子比特中的第一个量子比特。当你同时将它设置为0和1时，就像是创建了两个平行世界。（是的，很奇怪，但随我看下去。）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;译注：一个世界相当于一个普通计算机，理解这点很重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在平行世界中，其中一个的量子比特被设置为0，另一个的量子比特被设置为1。&lt;/p&gt;
&lt;p&gt;现在，如果你把第二个量子比特也设为0和1呢？然后，这就有点像创造了4个平行世界了。&lt;/p&gt;
&lt;p&gt;在第一世界中，两个量子比特被设置为00，第二个是01，第三个是10，第四个是11。&lt;/p&gt;
&lt;p&gt;类似地，如果你将这三个量子比特都设置为0和1，你就创建了8个平行世界——000，001，010，011，100，101，110和111。&lt;/p&gt;
&lt;p&gt;这是一种奇怪的思考方式，但它是解释量子比特在现实世界中的行为的正确方式之一。&lt;/p&gt;
&lt;p&gt;现在，当你对这三个量子比特进行某种计算时，你实际上是在同时对这8个平行世界进行同样的计算。&lt;/p&gt;
&lt;p&gt;因此，我们可以同时计算所有组合的分数，而不是按顺序遍历所有这些可能的组合。&lt;/p&gt;
&lt;p&gt;有了这个特殊的例子，理论上，你的量子计算机可以在几毫秒内找到最好的组合， 即我们之前看到的001或110：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;A | B | C | Score&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; |  &lt;span&gt;1&lt;/span&gt; &amp;lt;- 最佳组合之一&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;0&lt;/span&gt; |  &lt;span&gt;1&lt;/span&gt; &amp;lt;- 最佳组合之一&lt;br/&gt;&lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;1&lt;/span&gt; | &lt;span&gt;-1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上，要解决这个问题，你需要让你的量子计算机做两件事情：&lt;/p&gt;
&lt;p&gt;◇ 所有可能的组合都用量子比特表示。&lt;br/&gt;◇ 将每个可能的组合转换成分数的函数。在本例中，这个函数计算共用一辆车的朋友对数和敌人对数。&lt;/p&gt;
&lt;p&gt;能做这两件事，你的量子计算机将在几毫秒内得出最好的组合。在本例中，最好的组合是分数为1的001或110。&lt;/p&gt;
&lt;p&gt;现在，从理论上讲，量子计算机每次运行都能找到最好的解。&lt;/p&gt;
&lt;p&gt;然而，实际上，在运行量子计算机时会存在错误。所以，它可能会找到次优解，第三优解，等等。&lt;/p&gt;
&lt;p&gt;随着问题变得越来越复杂，这些错误会变得越来越突出。&lt;/p&gt;
&lt;p&gt;因此，在实践中，你可能希望在量子计算机上数十次甚至数百次地运行相同的操作，然后从你得到的结果中选出最好的。&lt;/p&gt;
&lt;h2&gt;量子计算机的计算规模如何&lt;/h2&gt;
&lt;p&gt;即使有我提到的错误，量子计算机也没有和普通计算机那样的计算规模问题。&lt;/p&gt;
&lt;p&gt;当有3个人需要分配给2辆车时，我们需要在量子计算机上执行的操作次数是1。这是因为量子计算机会同时计算所有组合的分数。&lt;/p&gt;
&lt;p&gt;当有4个人的时候，操作次数仍然是1。&lt;/p&gt;
&lt;p&gt;当有100人的时候，操作次数仍然是1。量子计算机在同一时间计算所有2¹⁰⁰ ~= 10³⁰ = 一百万百万百万百万百万个组合的分数只需一次操作。&lt;/p&gt;
&lt;p&gt;正如我之前提到的，在实践中，最好是运行量子计算机几十次或几百次，然后从得到的结果中选出最好的结果。&lt;/p&gt;
&lt;p&gt;然而，它仍然比在普通计算机上运行同样的问题并且必须重复同样类型的计算一百万百万百万百万百万次要好得多。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;特别感谢D-Wave Systems公司的每个人耐心地向我解释这一切。&lt;/p&gt;
&lt;p&gt;D-Wave最近推出了一个与量子计算机交互的云环境。&lt;/p&gt;
&lt;p&gt;如果你是一名开发人员，并且想尝试使用量子计算机，使用云环境可能是最简单的方法。&lt;/p&gt;
&lt;p&gt;它叫Leap，网址是：&lt;/p&gt;
&lt;p&gt;https://cloud.dwavesys.com/leap&lt;/p&gt;
&lt;p&gt;你可以免费用它来解决成千上万的问题，而且一旦你注册了量子计算机，他们还提供了手把手的教程。&lt;/p&gt;
&lt;h4&gt;补充说明：&lt;/h4&gt;
&lt;p&gt;在本文中，我使用术语“普通计算机”来指代非量子计算机。然而，在量子计算领域，非量子计算机通常被称为经典计算机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/191097/201810/191097-20181026024130378-2048099019.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 18:51:00 +0000</pubDate>
<dc:creator>Liam Wang</dc:creator>
<og:description>译者：王亮 作者：YK Sugi 原文：http://t.cn/EZAElk0 Hi，大家好！ 不久前，我参观了加拿大温哥华的D-Wave Systems公司，这是一家制造前沿量子</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/willick/p/what-is-a-quantum-computer.html</dc:identifier>
</item>
<item>
<title>奖品列表组件【仿swiper】 - DevinBy201611</title>
<link>http://www.cnblogs.com/zdf-xue/p/9854102.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zdf-xue/p/9854102.html</guid>
<description>&lt;p&gt;　　最近lz在做项目的一些优化，发现我的项目里有个奖品列表的功能；我们之前是引入swiper这个库去做的；swiper库的滑动效果确实比较好看，但是js文件以及css文件相对是比较大的；考虑到这个小小的需求而去引入如此大的库，感觉太不值得了；所以自己去封装了一下;&lt;/p&gt;
&lt;p&gt;　　项目原需求如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1003440/201810/1003440-20181025233945489-1829350365.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;      &lt;strong&gt; 封装思路：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1.我想的是swiper在布局是不是隐藏掉了滚动条？因为在进行左右滑动时候首先想到的是css属性“overflow-x:scroll或者overflow-x:auto”;但是我审查了下元素发现swiper并没有使用这个css属性；经过查看原来使用了translate3d去让其滑动的；于是解决了滑动问题；&lt;/p&gt;
&lt;p&gt;　　2.思考可视展示问题；我的做法是将整个大的容器除以页面可视容器所要展示的个数得到每个子元素的宽度；然后进行排列；这样布局问题就搞定了；&lt;/p&gt;
&lt;p&gt;　　3.就是滑动问题，监听容器的touchStart、touchMove、touchEnd事件；先要计算出两边的临界值；左边很好理解就是0，右边稍微计算下把整个子容器宽度和-父级容器宽度=最大滑动距离；这样再做下滑动临界值的处理就好了；&lt;/p&gt;
&lt;p&gt;　　4.联动问题，滚动条的滑动跟容器内容滑动原理是一样的，稍微动脑下的是联动的一个逻辑。这里有个等式就是&lt;strong&gt;容器滑动距离/容器最大滑动距离 = 滚动条滑动距离/滚动条最大滑动距离；&lt;/strong&gt;这样就能做好相应的联动效果；对于边界值，我们再稍微的优化下；整个功能就差不多实现了；&lt;/p&gt;
&lt;p&gt;　　封装代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;118&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
/**
 * 我们在各个活动工具中要用到swiper去做奖品列表的渲染，由于swiper.js和swiper.css文件较大；所以仿照swiper封装了此组件
 * @param {Object} config 
 * @param {String} containerId:选择器
 * @param {Number} slidesPerView:一屏要展示数
 * @param {Number} spaceBetween:奖品间距 
 * @param {Boolean} scrollbarHide:是否显示滚动条         
 */
import './index.scss';
    class CSlide {
        init(config) {
            let { containerId, slidesPerView, spaceBetween = 20, scrollbarHide } = config;
            this.container = document.querySelector(containerId);
            this.wrapper = this.container.children[0];
            this.store = {
                containerId,
                containerWidth: this.wrapper.offsetWidth,
                children: this.wrapper.children,
                slidesPerView,
                spaceBetween,
                calculateSlideX: 0,
                scrollbarHide
            };
            this.state = {
                startX: 0,
                diffX: 0,
                touchStart: false,
                touchEnd: false,
                touchMove: false,
                translateX: 0,
                transitionDuring: 300,
                ifanimateEnd: false
            };
            this.buildSwiper();
        }
        bind() {
            let events = ['touchstart', 'touchmove', 'touchend'];
            this.addEvent(this.container, events[0], this.touchStart);
            this.addEvent(this.container, events[1], this.touchMove);
            this.addEvent(this.container, events[2], this.touchEnd);
        }
        //初始化内容
        buildSwiper() {
            let {
                containerWidth,
                children,
                slidesPerView,
                spaceBetween
            } = this.store;
            let slideWidth = Math.round(containerWidth / slidesPerView);
            for (let i = 0; i &amp;lt; children.length; i++) {
                children[i].style.width = slideWidth + 'px';
                children[i].style.marginRight = spaceBetween + 'px';
            }
            //是否有滚动条
            if (this.store.scrollbarHide) {
                $(this.store.containerId).append(` &amp;lt;div class=&quot;swiper-scrollbar&quot;&amp;gt;
                &amp;lt;div class=&quot;swiper-scrollbar-drag&quot;&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;`);
                this.srollbarContainer = document.querySelector('.swiper-scrollbar-drag');
                this.scrollbar = document.querySelector('.swiper-scrollbar');
                this.store.scrollbarWidth = this.scrollbar.offsetWidth;
                this.store.scrollbarDragWidth = this.srollbarContainer.offsetWidth;
                setTimeout(() =&amp;gt; {
                    this.store.ableslideX = Number(this.scrollbar.offsetWidth - this.srollbarContainer.offsetWidth);
                }, 10);
            }
            this.bind();
        }
        //监听touchStart事件
        touchStart(e, that) {
            if (that.state.touchStart) return;
            that.state.startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
            that.state.touchEnd = that.state.touchMove = false;
            that.state.touchStart = true;
            that.state.diffX = 0;
        }
        //监听touchMove事件
        touchMove(e, that) {
            let { startX } = that.state;
            if (!that.state.touchStart) return;
            that.state.touchMove = true;
            let currentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
            if (!that.state.ifanimateEnd) {
                that.state.diffX = Math.round(currentX - startX);
                that.targetMaxmove();
                if(that.store.scrollbarHide){
                    that.scrollbarMove();
                }
                
            }
        }
        //监听touchEnd事件
        touchEnd(e, that) {
            let {
                touchStart,
                touchMove,
                touchEnd,
            } = that.state;
            if (!touchStart || !touchMove || touchEnd) return;
            that.state.touchEnd = true;
            that.state.touchStart = false;
            that.state.ifanimateEnd = false;
            that.ifdeadLine();
            if(that.store.scrollbarHide){
                that.scrollbarInit();
            }
            setTimeout(() =&amp;gt; {
                that.transitionDurationEndFn();
            }, that.state.transitionDuring);
        }
        //返回滑动区域的最大值
        calculateSlide() {
            let {
                children,
                spaceBetween,
                containerWidth
            } = this.store;
            let slide_max = 0,
                totalWidth = 0;
            for (let i = 0; i &amp;lt; children.length; i++) {
                totalWidth += children[0].offsetWidth + spaceBetween;
            }
            slide_max = containerWidth + spaceBetween - totalWidth;
            return slide_max;
        }
        //滑动的临界值判断
        targetMaxmove() {
            let {
                diffX
            } = this.state;
            let currentSlide = this.state.diffX + this.getTranslate(this.wrapper).x;
            let rightLine = this.calculateSlide();
            if (diffX &amp;gt; 0 &amp;amp;&amp;amp; currentSlide &amp;gt; this.store.containerWidth / 2) {
                this.state.ifanimateEnd = true;
                this.state.translateX = this.store.containerWidth / 2;
            } else if (diffX &amp;lt; 0 &amp;amp;&amp;amp; currentSlide &amp;lt;= rightLine - this.store.containerWidth / 2) {
                this.state.ifanimateEnd = true;
                this.state.translateX = rightLine - this.store.containerWidth / 2;
            } else {
                this.state.translateX = currentSlide;
            }
            this.recover(this.wrapper, Number(this.state.translateX), 0, 0);
        }
        //结束时临界值处理
        ifdeadLine() {
            let {
                diffX,
                translateX
            } = this.state;
            let rightLine = this.calculateSlide();
            if (diffX &amp;gt; 0) {
                this.recover(this.wrapper, 0, 0, 0);
            }
            if (diffX &amp;lt; 0 &amp;amp;&amp;amp; translateX &amp;lt;= rightLine) {
                this.recover(this.wrapper, rightLine, 0, 0);
            }
        }
        //滚动条滑动处理
        scrollbarMove() {
            let { diffX } = this.state;
            let { ableslideX } = this.store;
            let rightLine = this.calculateSlide();
            let radio = Math.abs(diffX) / Math.abs(rightLine);
            let scrollX = diffX &amp;gt; 0 ? -radio * ableslideX : radio * ableslideX;
            scrollX += this.getTranslate(this.srollbarContainer).x;
            this.recover(this.srollbarContainer, scrollX, 0, 0);
        }
        //结束滚动条处理
        scrollbarInit() {
            let { ableslideX } = this.store;
            let { diffX } = this.state;
            let scrollX = this.getTranslate(this.srollbarContainer).x;
            if (diffX &amp;gt; 0) {
                this.recover(this.srollbarContainer, 0, 0, 0);
            }
            if (diffX &amp;lt; 0 &amp;amp;&amp;amp; scrollX &amp;gt; ableslideX) {
                this.recover(this.srollbarContainer, ableslideX, 0, 0);
            }
        }
        recover(container, x, y, z) {
            this.transitionDuration(container, this.state.transitionDuring);
            this.translate(container, x, y, z);
        }
        translate(ele, x, y, z) {
            this.transform(ele, 'translate3d(' + x + 'px, ' + y + 'px, ' + z + 'px)');
        }

        transform(ele, transform) {
            let elStyle = ele.style;
            elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;
        }

        transitionDuration(ele, time) {
            let elStyle = ele.style;
            elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = time + 'ms';
        }

        transitionDurationEndFn() {
            this.transitionDuration(this.wrapper, 0);
        }
        getTranslate(el) {
            let curStyle = window.getComputedStyle(el);
            let curTransform = curStyle.transform || curStyle.webkitTransform;
            let x, y;
            x = y = 0;
            curTransform = curTransform.split(', ');
            if (curTransform.length === 6) {
                x = parseInt(curTransform[4], 10);
                y = parseInt(curTransform[5], 10);
            }
            return {
                x,
                y
            };
        }
        addEvent(target, type, fn) {
            $(document).on(type, target, event =&amp;gt; {
                if (typeof fn !== 'function') return;
                fn(event, this);
            }).bind(this);
        }
    };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　css代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.bxm-container &lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; auto&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    list-style&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
    .bxm-wrapper {
        position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
        width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
        height&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
        z-index&lt;/span&gt;:&lt;span&gt; 1&lt;/span&gt;;&lt;span&gt;
        display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;&lt;span&gt;
        transition-property&lt;/span&gt;:&lt;span&gt; transform&lt;/span&gt;;&lt;span&gt;
        box-sizing&lt;/span&gt;:&lt;span&gt; content-box&lt;/span&gt;;&lt;span&gt;
        .bxm-slide {
            text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
            font-size&lt;/span&gt;:&lt;span&gt; 18px&lt;/span&gt;;&lt;span&gt;
            background&lt;/span&gt;:&lt;span&gt; #fff&lt;/span&gt;;&lt;span&gt;
            display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;&lt;span&gt;
            justify-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
            align-items&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
            flex-shrink&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
            width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
            height&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
            box-sizing&lt;/span&gt;:&lt;span&gt; border-box&lt;/span&gt;;&lt;span&gt;
            transition-property&lt;/span&gt;:&lt;span&gt; transform&lt;/span&gt;;&lt;span&gt;
            -webkit-flex-shrink&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
            -ms-flex-negative&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
            flex-shrink&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;
        }&lt;span&gt;
    }
    .swiper-scrollbar &lt;/span&gt;{&lt;span&gt;
        position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
        left&lt;/span&gt;:&lt;span&gt; 1%&lt;/span&gt;;&lt;span&gt;
        bottom&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;&lt;span&gt;
        z-index&lt;/span&gt;:&lt;span&gt; 50&lt;/span&gt;;&lt;span&gt;
        height&lt;/span&gt;:&lt;span&gt; 5px&lt;/span&gt;;&lt;span&gt;
        width&lt;/span&gt;:&lt;span&gt; 98%&lt;/span&gt;;&lt;span&gt;
        border-radius&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;&lt;span&gt;
        -ms-touch-action&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;;&lt;span&gt;
        background&lt;/span&gt;:&lt;span&gt; rgba(0, 0, 0, .1)&lt;/span&gt;;&lt;span&gt;
        margin-top&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;&lt;span&gt;
        overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
        .swiper-scrollbar-drag {
            height&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
            width&lt;/span&gt;:&lt;span&gt; 60%&lt;/span&gt;;&lt;span&gt;
            position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
            background&lt;/span&gt;:&lt;span&gt; rgba(0, 0, 0, .5)&lt;/span&gt;;&lt;span&gt;
            border-radius&lt;/span&gt;:&lt;span&gt; 10px&lt;/span&gt;;&lt;span&gt;
            left&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;&lt;span&gt;
            top&lt;/span&gt;:&lt;span&gt; 0
        &lt;/span&gt;}&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　具体调用该组件类似于&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;bxm-container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;bxm-wrapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;bxm-slide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;awardImg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://buyimg.bianxianmao.com/dist/ACTIVITY/certificate/2018/10/24/04c32df6-13f2-464d-b298-b712e14daa2e&quot;&lt;/span&gt;&lt;span&gt;
                    alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;bxm-slide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;awardImg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://buyimg.bianxianmao.com/dist/ACTIVITY/certificate/2018/10/24/04c32df6-13f2-464d-b298-b712e14daa2e&quot;&lt;/span&gt;&lt;span&gt;
                    alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;bxm-slide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;awardImg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://buyimg.bianxianmao.com/dist/ACTIVITY/certificate/2018/10/24/04c32df6-13f2-464d-b298-b712e14daa2e&quot;&lt;/span&gt;&lt;span&gt;
                    alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;bxm-slide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;awardImg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://buyimg.bianxianmao.com/dist/ACTIVITY/certificate/2018/10/24/04c32df6-13f2-464d-b298-b712e14daa2e&quot;&lt;/span&gt;&lt;span&gt;
                    alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;bxm-slide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;awardImg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://buyimg.bianxianmao.com/dist/ACTIVITY/certificate/2018/10/24/04c32df6-13f2-464d-b298-b712e14daa2e&quot;&lt;/span&gt;&lt;span&gt;
                    alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;bxm-slide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;awardImg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://buyimg.bianxianmao.com/dist/ACTIVITY/certificate/2018/10/24/04c32df6-13f2-464d-b298-b712e14daa2e&quot;&lt;/span&gt;&lt;span&gt;
                    alt&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&amp;lt;script&amp;gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;　　var config = {&lt;br/&gt;　　　　containerId: '.bxm-container',&lt;br/&gt;　　　　slidesPerView: 2.4,&lt;br/&gt;　　　　spaceBetween: 20,&lt;br/&gt;　　　　scrollbarHide: true,&lt;br/&gt;　　};&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;　　new CSlide().init(config, temp);&lt;br/&gt;&amp;lt;/script&amp;gt;　　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;LZ刚写到快结尾时候被叫到公司去做一个紧急需求，心里一万匹草泥马在奔腾。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　如有不妥，请大佬指正；&lt;/p&gt;

</description>
<pubDate>Thu, 25 Oct 2018 18:22:00 +0000</pubDate>
<dc:creator>DevinBy201611</dc:creator>
<og:description>最近lz在做项目的一些优化，发现我的项目里有个奖品列表的功能；我们之前是引入swiper这个库去做的；swiper库的滑动效果确实比较好看，但是js文件以及css文件相对是比较大的；考虑到这个小小的需</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zdf-xue/p/9854102.html</dc:identifier>
</item>
<item>
<title>React的入门知识与概念【1】 - Peer1029</title>
<link>http://www.cnblogs.com/peerless1029/p/9853823.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/peerless1029/p/9853823.html</guid>
<description>&lt;p&gt;&amp;#13;
                                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;&amp;#13;
                                    &lt;h4 class=&quot;modal-title&quot;&gt;&amp;#13;
                                        请完成人机识别验证&amp;#13;
                                    &lt;/h4&gt;&amp;#13;
                                &lt;/p&gt;
                                &lt;div class=&quot;modal-body&quot; readability=&quot;33&quot;&gt;
                                    
                                    &lt;p&gt;&amp;#13;
                                        &lt;span id=&quot;geetestLoading&quot;&gt; 验证码组件加载中,请稍后...&lt;/span&gt;&amp;#13;
                                    &lt;/p&gt;
                                &lt;/div&gt;
                            </description>
<pubDate>Thu, 25 Oct 2018 17:37:00 +0000</pubDate>
<dc:creator>Peer1029</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://passport.cnblogs.com/user/signin?ReturnUrl=https%3A%2F%2Fwww.cnblogs.com%2Fpeerless1029%2Fp%2F9853823.html&amp;AspxAutoDetectCookieSupport=1</dc:identifier>
</item>
<item>
<title>Python 装饰器入门 - 丁壮</title>
<link>http://www.cnblogs.com/flashBoxer/p/9847521.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flashBoxer/p/9847521.html</guid>
<description>&lt;p&gt;翻译前想说的话:&lt;/p&gt;
&lt;p&gt;　　这是一篇介绍python装饰器的文章，对比之前看到的类似介绍装饰器的文章，个人认为无人可出其右，文章由浅到深，由函数介绍到装饰器的高级应用，每个介绍必有例子说明。文章太长，看完原文后我计划按照文章作者的划分，将分为两章翻出来和大家分享,如果你觉得干的还不错，就点个赞吧.&lt;/p&gt;

&lt;p class=&quot;h3 mb-2 text-muted&quot;&gt;目录:&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;函数
&lt;ul&gt;&lt;li&gt;一等对象&lt;/li&gt;
&lt;li&gt;内部函数&lt;/li&gt;
&lt;li&gt;从函数中返回函数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;简单装饰器&lt;br/&gt;&lt;ul&gt;&lt;li&gt;语法糖&lt;/li&gt;
&lt;li&gt;复用装饰器&lt;/li&gt;
&lt;li&gt;装饰器传参&lt;/li&gt;
&lt;li&gt;从装饰器返回值&lt;/li&gt;
&lt;li&gt;你是谁?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一些现实中的例子&lt;br/&gt;&lt;ul&gt;&lt;li&gt;时间函数&lt;/li&gt;
&lt;li&gt;调试代码&lt;/li&gt;
&lt;li&gt;给代码降速&lt;/li&gt;
&lt;li&gt;注册插件&lt;/li&gt;
&lt;li&gt;用户是否登录?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有想象力的装饰器&lt;br/&gt;&lt;ul&gt;&lt;li&gt;装饰类&lt;/li&gt;
&lt;li&gt;嵌套的装饰器&lt;/li&gt;
&lt;li&gt;带参数的装饰器&lt;/li&gt;
&lt;li&gt;Both Please, But Never Mind the Bread 这句话开始我不知道怎么翻，直到我看到了维尼熊......,请在这里www.google.com检索Winnie the Pooh  Both Please, But Never Mind the Bread&lt;/li&gt;
&lt;li&gt;有状态的装饰器&lt;/li&gt;
&lt;li&gt;类装饰器&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;更多现实中的例子&lt;br/&gt;&lt;ul&gt;&lt;li&gt;代码降速,重新访问&lt;/li&gt;
&lt;li&gt;创建单例模式&lt;/li&gt;
&lt;li&gt;缓存返回值&lt;/li&gt;
&lt;li&gt;添加单元信息&lt;/li&gt;
&lt;li&gt;验证JSON&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt; 正文开始:&lt;/p&gt;
&lt;p&gt;在本次的装饰器教程中，将介绍何为装饰器以及如何创建和使用它们,装饰器提供了简单的语法来调用高阶函数。&lt;/p&gt;&lt;p&gt;从定义上讲，装饰器是一个函数，它接收另一个函数作为参数并且扩展它的功能，但不会显式的去修改它&lt;/p&gt;&lt;p&gt;说起来可能会让人觉得难理解，但它(装饰器)确实不会这么做，特别是一会你会看到一些装饰器如何工作的例子&lt;/p&gt;

&lt;p&gt;在理解装饰器之前，你首先需要理解函数如何工作。函数会基于给定的参数返回值。这里有一个非常简单的例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_one(number):
...     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; number + 1

&amp;gt;&amp;gt;&amp;gt; add_one(2&lt;span&gt;)
&lt;/span&gt;3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通常情况下，函数在python中也会有其它功效而不是仅仅接收输入并返回输出。print()函数是一个例子。在控制台输出的时候它会返回None(1)，然而，为了理解装饰器，&lt;br/&gt;将函数认为是接收参数并返回值就足够了&lt;/p&gt;
&lt;p&gt;注意:在面向函数编程,你几乎只会使用纯函数，不会有其它功能，然而python不是一个纯函数式语言，python支持许多函数式编程概念，包括一等对象&lt;/p&gt;
&lt;h3&gt; 一等对象&lt;/h3&gt;
&lt;p&gt;在python中，函数是一等对象，意思是函数可以作为参数被传递，就像其它的对象(string，int，fload，list和其它)，思考下面的三个函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; say_hello(name):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello {name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; be_awesome(name):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yo {name}, together we are the awesomest!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; greet_bob(greeter_func):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; greeter_func(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里,say_hello()和be_awsone()是常规函数，接收一个name参数返回一个字符串，然而greet_bob()函数，接收一个函数作为他的参数，我们可以将say_hello()或者be_awesome()函数传递给它&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; greet_bob(say_hello)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello Bob&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; greet_bob(be_awesome)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Yo Bob, together we are the awesomest!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意greet_bob(say_hello) 涉及到两个函数，但是不同的是:greet_bob()和say_hello,say_hello函数并没有使用()，代表只传递了对函数的引用，函数没有运行，greet_bob()函数，是使用了括号，所以它会被正常调用&lt;/p&gt;
&lt;h3&gt; 内部函数&lt;/h3&gt;
&lt;p&gt;在函数内定义函数是被允许的。这类函数被称为内部函数，这里有一个函数和两个内函数的例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; parent():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Printing from the parent() function&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; first_child():
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Printing from the first_child() function&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; second_child():
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Printing from the second_child() function&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    second_child()
    first_child()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你调用parent()的时候会发生什么? 请考虑一分钟。会出现下面的输出结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; parent()
Printing &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the parent() function
Printing &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the second_child() function
Printing &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; the first_child() function
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意内部函数定义的顺序无关紧要，和其它的函数一样，打印只会发生在内部函数运行的时候&lt;/p&gt;
&lt;p&gt;而且，内部函数在父函数被调用之前不会生效，它们的局部作用域是父()，它们只作为局部变量存在在父()函数的内部，尝试调用first_child()，你会得到下面的错误&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Traceback (most recent call last):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;stdin&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 1, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;span&gt;
NameError: name &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first_child&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; defined
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不管你何时调用parent()，内部函数first_child()和second_child()都会被调用，因为它们的局部作用域，它们无法再parent()函数外使用&lt;/p&gt;
&lt;h3&gt;从函数中返回函数&lt;/h3&gt;
&lt;p&gt;python允许使用函数来作为返回值，下面的例子从外部的父函数parent()返回了一个内部函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; parent(num):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; first_child():
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hi, I am Emma&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; second_child():
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Call me Liam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; num == 1&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; first_child
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; second_chil
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这里返回的first_child是没有括号的，也就是返回了对函数first_child的引用， 带括号的first_child() 指的是对函数求值的结果，这个可以在下面的实例中看到&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; first = parent(1&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; second = parent(2&lt;span&gt;)

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; first
&lt;/span&gt;&amp;lt;function parent.&amp;lt;locals&amp;gt;.first_child at 0x7f599f1e2e18&amp;gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; second
&lt;/span&gt;&amp;lt;function parent.&amp;lt;locals&amp;gt;.second_child at 0x7f599dad5268&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个输出代表first变量引用了在parent()中的本地函数first_child()，second则指向了second_child()&lt;/p&gt;&lt;p&gt;你现在可以像常规函数一样使用first和second，虽然他们指向的函数无法被直接访问&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; first()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hi, I am Emma&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; second()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Call me Liam&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请注意，在前面的例子中我们在父函数中运行内部函数，例如first_child()，然后在最后的例子中，返回的时候没有给内部函数first_child添加括号。这样，就获取了将来可以调用的函数的引用。这样有意义吗?&lt;/p&gt;

&lt;p&gt;现在你已经看到函数和python中的其它对象一样，你已经准备好前进来认识python装饰器，让我们以一个例子开始:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; my_decorator(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Something is happening before the function is called.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        func()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Something is happening after the function is called.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; say_whee():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Whee!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

say_whee &lt;/span&gt;= my_decorator(say_whee)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你能猜到当你调用say_whee()的时候回发生什么么？试一下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; say_whee()
Something &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; happening before the function &lt;span&gt;is&lt;/span&gt;&lt;span&gt; called.
Whee!
Something &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; happening after the function &lt;span&gt;is&lt;/span&gt; called.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要理解这里发生了什么，需要回看下之前的例子，我们只是应用了你到目前为止学到的所有东西&lt;/p&gt;&lt;p&gt;所谓的装饰器发生在下面这行:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
say_whee = my_decorator(say_whee)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;事实上，say_whee现在指向了内部函数wrapper()，当你调用my_decorator(say_whee)的时候会将wrapper作为函数返回&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; say_whee
&lt;/span&gt;&amp;lt;function my_decorator.&amp;lt;locals&amp;gt;.wrapper at 0x7f3c5dfd42f0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wrapper()引用原始的say_whee()作为func，在两个print()之间调用这个函数&lt;/p&gt;
&lt;p&gt;简而言之:装饰器包裹一个函数，并改变它的行为&lt;/p&gt;
&lt;p&gt;在继续之前，让我们看下第二个例子。因为wrapper()是一个常规的函数，装饰器可以以一种动态的方式来修改函数。为了不打扰你的邻居，下面的示例演示只会在白天运行的装饰器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; not_during_the_night(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; 7 &amp;lt;= datetime.now().hour &amp;lt; 22&lt;span&gt;:
            func()
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Hush, the neighbors are asleep&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; say_whee():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Whee!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

say_whee &lt;/span&gt;= not_during_the_night(say_whee)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你在睡觉的时间调用say_whee()，不会发生任何事情&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; say_whee()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;语法糖&lt;/h3&gt;
&lt;p&gt;上面的装饰器say_whee()用起来有一点笨拙。首先，你键入了三次say_whee，另外，装饰器隐藏在了函数的定义之下&lt;/p&gt;
&lt;p&gt;作为替代，python允许你使用@symbol的方式使用装饰器，有时被称为&quot;pie&quot;语法，下面的例子和之前第一个装饰器做了同样的事情&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; my_decorator(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Something is happening before the function is called.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        func()
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Something is happening after the function is called.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@my_decorator
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; say_whee():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Whee!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，@my_decorator 只是say_whee = my_decorator(say_whee)的一种快捷方式，这就是如何将装饰器应用到函数上&lt;/p&gt;
&lt;h3&gt;复用装饰器&lt;/h3&gt;
&lt;p&gt;回想一下，装饰器只是一个普通的函数。所有常用的工具都是方便重复利用的，让我们将装饰器移动到他自己的模型上以便于在其它的函数上使用&lt;/p&gt;
&lt;p&gt;下面创建了一个decorators.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_twice(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper_do_twice():
        func()
        func()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; wrapper_do_twice
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意:你可以随意定义内部函数的名称，通常像wrapper()用起来是没问题的。你在这篇文章中会遇到许多装饰器。为了区别开它们，我们将使用decorator名称来命名内部函数，但会加上wrapper_前缀。&lt;/p&gt;&lt;p&gt;你可以使用常规导入来使用一个新的装饰器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; decorators &lt;span&gt;import&lt;/span&gt;&lt;span&gt; do_twice

@do_twice
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; say_whee():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Whee!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你运行这个例子，你会看到原始韩式say_whee()执行两次&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; say_whee()
Whee!
Whee!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;装饰器传参&lt;/h3&gt;
&lt;p&gt;如果你有一个函数需要接收一些参数，这时候还可以再使用装饰器么，然我们试试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; decorators &lt;span&gt;import&lt;/span&gt;&lt;span&gt; do_twice

@do_twice
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; greet(name):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello {name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不幸的是，运行代码抛出了错误&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; greet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Traceback (most recent call last):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;stdin&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line 1, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;span&gt;
TypeError: wrapper_do_twice() takes 0 positional arguments but &lt;/span&gt;1 was given
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;问题在于内部函数wrapper_do_twice()没有接收任何参数，但是name=&quot;World&quot;却传给了它。你可以让wrapper_do_twice()接收一个参数来修补这个问题，但是这样前面的say_whee()函数就无法工作了&lt;/p&gt;&lt;p&gt;解决方案是在内部函数使用*args和**kwargs ，这样它会允许接收任意个关键参数，下面重写了decorators.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_twice(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper_do_twice(*args, **&lt;span&gt;kwargs):
        func(&lt;/span&gt;*args, **&lt;span&gt;kwargs)
        func(&lt;/span&gt;*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; wrapper_do_twice
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内部函数wrapper_do_twice()现在接收任意数量的参数并会传递给装饰的函数，目前say_whee()和greet()都会正常工作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; say_whee()
Whee!
Whee!

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; greet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;World&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Hello World
Hello World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;从装饰器返回值&lt;/h3&gt;
&lt;p&gt;被装饰的函数返回值会发生什么？这会由装饰器来决定，我们下面有一个简单的装饰器函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; decorators &lt;span&gt;import&lt;/span&gt;&lt;span&gt; do_twice

@do_twice
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; return_greeting(name):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Creating greeting&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hi {name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尝试运行它:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; hi_adam = return_greeting(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Adam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Creating greeting
Creating greeting
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hi_adam)
None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装饰器吃掉了从函数返回的值&lt;/p&gt;
&lt;p&gt;因为do_twice_wrapper()没有返回值，调用 return_greeting(&quot;Adam&quot;) 最后返回了None&lt;/p&gt;
&lt;p&gt;修复的方式是,需要确认装饰器返回它装饰的函数的值，改变decorators.py文件:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_twice(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper_do_twice(*args, **&lt;span&gt;kwargs):
        func(&lt;/span&gt;*args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; wrapper_do_twice
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行这个函数返回的值:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; return_greeting(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Adam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Creating greeting
Creating greeting
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hi Adam&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;你是谁?&lt;/h3&gt;
&lt;p&gt;在使用Python(尤其是在交互式shell中)时，强大的内省是非常方便的功能。内省是对象在运行时了解其自身属性的能力。例如，函数知道自己的名称和文档:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;
&amp;lt;built-&lt;span&gt;in&lt;/span&gt; function &lt;span&gt;print&lt;/span&gt;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;.&lt;span&gt;__name__&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; help(&lt;span&gt;print&lt;/span&gt;&lt;span&gt;)
Help on built&lt;/span&gt;-&lt;span&gt;in&lt;/span&gt; function &lt;span&gt;print&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module builtins:

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(...)
    &lt;/span&gt;&amp;lt;full help message&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内省同样适用于你自定义的函数:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; say_whee
&lt;/span&gt;&amp;lt;function do_twice.&amp;lt;locals&amp;gt;.wrapper_do_twice at 0x7f43700e52f0&amp;gt;

&amp;gt;&amp;gt;&amp;gt; say_whee.&lt;span&gt;__name__&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wrapper_do_twice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help(say_whee)
Help on function wrapper_do_twice &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; module decorators:

wrapper_do_twice()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;然而在被装饰后，say_whee()会对自身感到疑惑。它现在显示为 do_twice()装饰器的内部函数 wrapper_do_twice()&lt;br/&gt;    &lt;br/&gt;为了修复这个，装饰器需要使用@functools.wraps装饰器，它会保留原始函数的信息，再次更新下decorators.py:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; functools

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; do_twice(func):
    @functools.wraps(func)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper_do_twice(*args, **&lt;span&gt;kwargs):
        func(&lt;/span&gt;*args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; wrapper_do_twice
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不需要对被装饰的say_whee()函数做任何更改:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; say_whee
&lt;/span&gt;&amp;lt;function say_whee at 0x7ff79a60f2f0&amp;gt;

&amp;gt;&amp;gt;&amp;gt; say_whee.&lt;span&gt;__name__&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;say_whee&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; help(say_whee)
Help on function say_whee &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; module whee:

say_whee()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;非常好，现在say_whee()在被装饰后可以保持自己&lt;/p&gt;&lt;p&gt;技术细节:@funtools.wraps 装饰器使用函数functools.update_wrapper()来更新指定的属性，像__name__和__doc__来用于自省&lt;/p&gt;

&lt;p&gt;让我们看一些用处更大的装饰器例子。你会注意到他们主要的模式和你现在所学的都是一样的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; functools

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorator(func):
    @functools.wraps(func)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper_decorator(*args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Do something before&lt;/span&gt;
        value = func(*args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Do something after&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; wrapper_decorator
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于构建更复杂的装饰器，这个是一个很好的模板&lt;/p&gt;
&lt;h3&gt;时间函数&lt;/h3&gt;
&lt;p&gt;让我们从@timer装饰器开始，它会测量函数运行的时间并且打印持续时间到控制台，这是代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; functools
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; timer(func):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Print the runtime of the decorated function&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    @functools.wraps(func)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper_timer(*args, **&lt;span&gt;kwargs):
        start_time &lt;/span&gt;= time.perf_counter()    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
        value = func(*args, **&lt;span&gt;kwargs)
        end_time &lt;/span&gt;= time.perf_counter()      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;
        run_time = end_time - start_time    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Finished {func.__name__!r} in {run_time:.4f} secs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper_timer

@timer
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; waste_some_time(num_times):
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(num_times):
        sum([i&lt;/span&gt;**2 &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000)])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数是在函数运行之前获取时间(#1行)，并且在函数运行结束之后获取时间(#2行)，我们使用 time.perf_counter() 函数，这个函数可以非常好的计算时间间隔。下面是一个示例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; waste_some_time(1&lt;span&gt;)
Finished &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;waste_some_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; 0.0010&lt;span&gt; secs

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; waste_some_time(999&lt;span&gt;)
Finished &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;waste_some_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; 0.3260 secs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;自己运行测试下，手敲下这里的代码，确保你理解它的工作原理。如果不明白，也不要担心。装饰器是高级方法，试着思考下或者画下流程图&lt;/p&gt;&lt;p&gt;注意: 如果你只是想获取函数的运行时间，@timer 装饰器可以满足。如果你想获取到更精确的数据，你应该考虑使用timeit 模块来替代它。它临时禁用了垃圾收集并且运行多次以避免函数快速调用带来的噪音数据&lt;/p&gt;
&lt;h3&gt;调试代码&lt;/h3&gt;
&lt;p&gt;下面的@debug函数会在每次调用的时候打印函数被调用的参数和它的返回结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; functools

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; debug(func):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Print the function signature and return value&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    @functools.wraps(func)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper_debug(*args, **&lt;span&gt;kwargs):
        args_repr &lt;/span&gt;= [repr(a) &lt;span&gt;for&lt;/span&gt; a &lt;span&gt;in&lt;/span&gt; args]                      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
        kwargs_repr = [f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{k}={v!r}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; k, v &lt;span&gt;in&lt;/span&gt; kwargs.items()]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;
        signature = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.join(args_repr + kwargs_repr)           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Calling {func.__name__}({signature})&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        value &lt;/span&gt;= func(*args, **&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{func.__name__!r} returned {value!r}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)           &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; wrapper_debug
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;signature 变量是通过 字符串表示方法 来创建所有的输入参数。下面的数字对应了代码中的注释&lt;br/&gt;    1、将args创建为列表，使用repr修饰&lt;br/&gt;    2、将kwargs创建为列表，使用f-string格式化参数为key=value，!r表示使用repr()表示值&lt;br/&gt;    3、args和kwargs转换后会合并在signature变量中，使用逗号分隔每个变量&lt;br/&gt;    4、函数运行结束后会返回值&lt;/p&gt;
&lt;p&gt;让我们在一个简单的函数中使用装饰器被观察它是如何运行的，被装饰的函数只有一个位置参数和一个关键字参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@debug
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; make_greeting(name, age=&lt;span&gt;None):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; age &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Howdy {name}!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Whoa {name}! {age} already, you are growing up!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意@debug装饰器如何打印make_greeting()函数的signature 和返回值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; make_greeting(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Benjamin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Calling make_greeting(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Benjamin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;make_greeting&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; returned &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Howdy Benjamin!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Howdy Benjamin!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; make_greeting(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Richard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, age=112&lt;span&gt;)
Calling make_greeting(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Richard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=112&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;make_greeting&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; returned &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Whoa Richard! 112 already, you are growing up!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Whoa Richard! 112 already, you are growing up!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; make_greeting(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Dorrisile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, age=116&lt;span&gt;)
Calling make_greeting(name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dorrisile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, age=116&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;make_greeting&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; returned &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Whoa Dorrisile! 116 already, you are growing up!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Whoa Dorrisile! 116 already, you are growing up!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@debug修饰符看起来只是重复了我们刚才写的内容 ，并不是非常有用。 但当应用到不能直接修改的其它函数时，它会更加强大。&lt;/p&gt;
&lt;p&gt;下面的例子计算了一个数学常数E的近似值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; math
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; decorators &lt;span&gt;import&lt;/span&gt;&lt;span&gt; debug

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Apply a decorator to a standard library function&lt;/span&gt;
math.factorial =&lt;span&gt; debug(math.factorial)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; approximate_e(terms=18&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sum(1 / math.factorial(n) &lt;span&gt;for&lt;/span&gt; n &lt;span&gt;in&lt;/span&gt; range(terms))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子还演示了如何将装饰器应用到已经定义了的函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1448826/201810/1448826-20181026004322010-1491716632.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当调用approximate_e()函数，你可以看到@debug函数在工作:&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; approximate_e(5&lt;span&gt;)
Calling factorial(0)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;factorial&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; returned 1&lt;span&gt;
Calling factorial(&lt;/span&gt;1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;factorial&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; returned 1&lt;span&gt;
Calling factorial(&lt;/span&gt;2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;factorial&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; returned 2&lt;span&gt;
Calling factorial(&lt;/span&gt;3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;factorial&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; returned 6&lt;span&gt;
Calling factorial(&lt;/span&gt;4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;factorial&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; returned 24
2.708333333333333
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个例子中，可以得到一个真实值的近似值e = 2.718281828&lt;/p&gt;
&lt;h3&gt;给代码降速&lt;/h3&gt;
&lt;p&gt;下面的例子看起来可能不是很有用。可能最常见的用例是，您希望对一个不断检查资源是否存在的函数进行速率限制 。 @slow_down decorator在调用被修饰的函数之前会暂停一秒钟&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; functools
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; slow_down(func):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Sleep 1 second before calling the function&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    @functools.wraps(func)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper_slow_down(*args, **&lt;span&gt;kwargs):
        time.sleep(&lt;/span&gt;1&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper_slow_down

@slow_down
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; countdown(from_number):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; from_number &amp;lt; 1&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Liftoff!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(from_number)
        countdown(from_number &lt;/span&gt;- 1)       
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来看下@slow_down装饰器的效果，你需要自己运行跑下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; countdown(3&lt;span&gt;)
&lt;/span&gt;3
2
1&lt;span&gt;
Liftoff!   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;countdown()是一个递归函数。也就是说，它是一个调用自身的函数 。     &lt;/p&gt;
&lt;h3&gt;注册插件&lt;/h3&gt;
&lt;p&gt;装饰器不是必须要修饰被装饰的函数(这句话不太好翻译，看下面的例子理解起来很容易)，它还可以简单地注册一个函数，并将其解包返回，例如，可以使用它来创建一个轻量级插件体系结构:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
PLUGINS &lt;/span&gt;=&lt;span&gt; dict()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; register(func):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Register a function as a plug-in&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    PLUGINS[func.&lt;/span&gt;&lt;span&gt;__name__&lt;/span&gt;] =&lt;span&gt; func
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func

@register
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; say_hello(name):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello {name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

@register
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; be_awesome(name):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yo {name}, together we are the awesomest!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; randomly_greet(name):
    greeter, greeter_func &lt;/span&gt;=&lt;span&gt; random.choice(list(PLUGINS.items()))
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(f&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Using {greeter!r}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; greeter_func(name) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@register装饰器只是在全局PLUGINS 字典中储存了被装饰函数的引用。注意你不需要在例子中写内部函数或者使用@functools.wraps ，因为返回的是一个未经过修改的初始函数&lt;/p&gt;
&lt;p&gt;randomly_greet()函数在注册函数中随机选择一个使用。注意PLUGINS字典已经包含了对注册为插件的每个函数对象的引用:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; PLUGINS
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;say_hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &amp;lt;function say_hello at 0x7f768eae6730&amp;gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;be_awesome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &amp;lt;function be_awesome at 0x7f768eae67b8&amp;gt;&lt;span&gt;}

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; randomly_greet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Alice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
Using &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;say_hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello Alice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个插件的主要用处在于不需要再单独维护一个插件列表。这个列表在插件注册时自动创建，使得添加一个新插件变得很简单，只需定义函数并用@register装饰即可。&lt;/p&gt;&lt;p&gt;如果你对python中的globals()函数熟悉，你可能会看到一些和我们的插件结构相似之处。globals()可以访问当前作用于的所有全局变量&lt;/p&gt;&lt;p&gt;包括我们的插件:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; globals()
{..., &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Lots of variables not shown here.&lt;/span&gt;
 &lt;span&gt;'&lt;/span&gt;&lt;span&gt;say_hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &amp;lt;function say_hello at 0x7f768eae6730&amp;gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;be_awesome&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &amp;lt;function be_awesome at 0x7f768eae67b8&amp;gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;randomly_greet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &amp;lt;function randomly_greet at 0x7f768eae6840&amp;gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用@register 装饰器，可以创建感兴趣的变量管理列表，有效地从globals()中筛选出一些函数&lt;/p&gt;
&lt;h3&gt;用户是否登录?&lt;/h3&gt;
&lt;p&gt;在继续讨论一些更有趣的装饰器之前，让我们在最后一个示例中演示通常在处理web框架时使用的装饰器。在这个例子中，我们使用Flask去设置一个/secret web页面，这个页面只对登录用户或者其他有权限的用户展示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; flask &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Flask, g, request, redirect, url_for
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; functools
app &lt;/span&gt;= Flask(&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; login_required(func):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;Make sure user is logged in before proceeding&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    @functools.wraps(func)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper_login_required(*args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; g.user &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; redirect(url_for(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, next=&lt;span&gt;request.url))
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper_login_required

@app.route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/secret&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
@login_required
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; secret():
    ...    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然这里演示了如何对web框架添加身份验证吗，但通常不应该自己编写这些类型的装饰器。对于Flask可以使用Flask-login扩展，这里的功能更丰富也更加安全&lt;/p&gt;&lt;p&gt;有想象力的装饰器&lt;br/&gt;到目前为止，你已经看到了如何创建简单的装饰器并且非常了解什么是装饰器以及它们是如何工作的。请从这篇文章中休息一下，练习学到的一切。&lt;/p&gt;&lt;p&gt;在本教程的第二部分中，我们将探索更高级的特性，包括如何使用以下特性:&lt;br/&gt;    1、在类上使用装饰器(装饰类)&lt;br/&gt;    2、在一个函数上应用多个装饰器&lt;br/&gt;    3、带参数的装饰器&lt;br/&gt;    4、可以选择是否接收参数的装饰器&lt;br/&gt;    5、带状态的装饰器&lt;br/&gt;    6、类装饰器&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 16:47:00 +0000</pubDate>
<dc:creator>丁壮</dc:creator>
<og:description>翻译前想说的话: 这是一篇介绍python装饰器的文章，对比之前看到的类似介绍装饰器的文章，个人认为无人可出其右，文章由浅到深，由函数介绍到装饰器的高级应用，每个介绍必有例子说明。文章太长，看完原文后</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/flashBoxer/p/9847521.html</dc:identifier>
</item>
<item>
<title>Docker之初识（一） - 那一叶随风</title>
<link>http://www.cnblogs.com/phpstudy2015-6/p/9840610.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/phpstudy2015-6/p/9840610.html</guid>
<description>&lt;h4&gt;1、简介&lt;/h4&gt;
&lt;p&gt;　　今年四月份公司逐步改用docker容器来部署应用，当时自己刚踏出学校大门，平时开发都是环境都是早已安装好，因此一直没怎么了解Docker这玩意。公司里各位开发大佬说这是个好东西，可以很方便的部署迁移一个应用，当时自己一脸懵逼。通过这几个月的学习与使用，自己也逐步了解了Docker，因此抽出空余时间来写一写docker的知识总结与大家分享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker的官方简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　Docker 是一个开源的应用容器引擎，基于 &lt;a href=&quot;http://www.runoob.com/go/go-tutorial.html&quot; target=&quot;_blank&quot;&gt;Go 语言&lt;/a&gt; 并遵从Apache2.0协议开源。&lt;/p&gt;
&lt;p&gt;　　Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p&gt;
&lt;p&gt;　　容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的个人理解就是：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　每一个Docker容器相当于一个完全封闭的（虚拟）盒子，默认状态下的盒子与盒子之间是不能够进行通讯，并且都寄存在宿主机上面。若要使盒子与盒子、盒子与宿主机之间进行通讯需要人为去设置，给他开辟一条通信通道。&lt;/p&gt;

&lt;p&gt;　　Doker的应用场景有很多，最常见的就是Web应用的自动化打包和发布、自动化测试和持续集成发布、方便部署分布式应用等，而我司的Web应用就是结合Docker进行自动化打包和发布。&lt;/p&gt;

&lt;h4&gt;2、Docker使用&lt;/h4&gt;
&lt;h4&gt;　　2.1、docker安装　　&lt;/h4&gt;
&lt;p&gt;　　docker支持Windows、MacOS、Linux等系统，安装过程我这里就不介绍了，在网上有很多资源。&lt;/p&gt;
&lt;p&gt;　　安装后进入命令行执行docker命令来判断docker是安装成功。&lt;/p&gt;
&lt;p&gt;　　看到有Options输出则表示安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/789055/201810/789055-20181023234151808-1726353018.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;　　2.2、我们平时安装软件的第一步是做什么咧？&lt;/h4&gt;
&lt;p&gt;　　每当我们安装软件的第一步是做什么呢？毫无疑问，那就是search查找安装包啦！&lt;/p&gt;
&lt;p&gt;　　那么docker中的查找&quot;安装包&quot;的命令是什么呢？&lt;/p&gt;
&lt;p&gt;　　很简单，那就是docker search 软件名;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker search nginx;    // 查找nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　执行该命令后，将会出现一系列的搜索结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/789055/201810/789055-20181023234845804-400734755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　2.3、找到软件后那就下载软件啦&lt;/h4&gt;
&lt;p&gt;　　docker中与我们平常下载软件这一动作相对应的命令就是：docker pull 软件名;（但平时我们把这一动作叫做拉取镜像）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker pull nginx;　　// 拉取nginx的镜像
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行命令后将会开始拉取nginx镜像&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/789055/201810/789055-20181023235634464-1081971494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;拉取成功我们使用docker images;命令可以查看已经拉取的镜像列表。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker images;    // 查看已拉取的镜像列表
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/789055/201810/789055-20181023235940866-740262576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　2.4、软件已经下载好了下一步又是做什么咧&lt;/h4&gt;
&lt;p&gt;　　docker中于普通软件安装相对应的命令是docker run 软件名;（我们把这一动作称为：从该镜像中创建容器）&lt;/p&gt;
&lt;p&gt;　　在创建容器的时候，我们一般还会添加一些其他参数，以便更好的管理使用应用。&lt;/p&gt;
&lt;p&gt;　　在此之前我们需要先建立两个文件目录，www和nginx/conf.d，并在nginx中新建一个defalut.conf配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mkdir www;&lt;br/&gt;mkdir -p nginx/conf.d&lt;br/&gt;vi nginx/conf.d/default.conf　　　　// default.conf文件内容在下面&lt;br/&gt;docker run -p 8080:80&lt;span&gt; -d -v $PWD/www:/usr/share/nginx/html -v $PWD/nginx/conf.d:/etc/nginx/conf.d  --name mynginx  nginx&lt;br/&gt;# -p 指定绑定端口（端口映射，将容器中的80端口绑定到主机中的8080端口）&lt;br/&gt;# -v 将主机中的当前www目录挂载到容器中的&lt;/span&gt;/usr/share/nginx/html目录中&lt;br/&gt;# -d 让容器在后台运行
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#defalut.conf文件&lt;br/&gt;server {
listen  &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt; default_server;
server_name _;
  root   &lt;/span&gt;/usr/share/nginx/&lt;span&gt;html;
  location &lt;/span&gt;/&lt;span&gt; {   index index.html index.htm index.php;
  autoindex off;
  }
          location &lt;/span&gt;~ \.php(.*&lt;span&gt;)$ {
          root   &lt;/span&gt;/&lt;span&gt;var&lt;/span&gt;/www/html/&lt;span&gt;;
          fastcgi_pass &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;0.2&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;;
          fastcgi_index index.php;
          fastcgi_split_path_info &lt;/span&gt;^((?U).+\.php)(/?.+&lt;span&gt;)$;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param PATH_INFO $fastcgi_path_info;
          fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
          include  fastcgi_params;
  }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建容器后我们可以通过docker ps查看正在运行的容器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/789055/201810/789055-20181026000405928-238438483.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　2.5、检测运行的容器应用是否能够正常工作&lt;/h4&gt;
&lt;p&gt; 　　因为我们在创建容器的时候已经将当前目录下的www目录映射到容器中nginx的/usr/share/nginx/html工作根目录，因此我们在当前www目录下新增一个index.html文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在www目录下新建index.html文件,并任意写一些字符串&lt;/span&gt;
vi index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　由于Windows系统中的docker是通过一个VM虚拟机为桥梁搭建的，我们在docker中创建容器时所映射出来的ip端口是指向虚拟机的，因此我们需要通过虚拟机的ip和端口进行访问容器。（注：Windows系统相对比较特殊需要借助VM实现，而MacOS和Linux则不需要，因此容器所关联的端口是宿主机127.0.0.1的）&lt;/p&gt;
&lt;p&gt;查看该VM的ip：&lt;/p&gt;
&lt;p&gt;在ip在运行docker的时候所展示出来的ip&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/789055/201810/789055-20181026002029226-1705654509.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中访问192.168.99.100:8080&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/789055/201810/789055-20181026002219297-1983512895.png&quot; alt=&quot;&quot;/&gt;= &lt;/p&gt;
&lt;h4&gt;3、总结&lt;/h4&gt;
&lt;p&gt; 　　使用docker搭建一个小demo还比较简单的，只需要几个命令即可，但是我们还是需要好好了解镜像、容器、宿主机他们三者的关系，思考他们是如何通信，如何使用docker构建一个完整的应用环境等。&lt;/p&gt;
&lt;p&gt;在这篇博客中主要涉及到的一些命令有：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker search **&lt;span&gt;
docker pull &lt;/span&gt;**&lt;span&gt;
docker run &lt;/span&gt;-p 8080:80 -d -v &lt;span&gt;$PWD&lt;/span&gt;/www:/usr/share/nginx/html -v &lt;span&gt;$PWD&lt;/span&gt;/nginx/conf.d:/etc/nginx/conf.d  --&lt;span&gt;name mynginx  nginx
docker ps&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（以上是自己的一些见解，若有不足或者错误的地方请各位指出）&lt;/p&gt;
&lt;p&gt; 作者：&lt;a href=&quot;http://www.cnblogs.com/phpstudy2015-6/&quot; target=&quot;_blank&quot;&gt;那一叶随风&lt;/a&gt;   &lt;a href=&quot;http://www.cnblogs.com/phpstudy2015-6/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/phpstudy2015-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 原文地址：  &lt;a href=&quot;https://www.cnblogs.com/phpstudy2015-6/p/9840610.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/phpstudy2015-6/p/9840610.html&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/phpstudy2015-6/p/%20https://www.cnblogs.com/phpstudy2015-6/p/6732784.html&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 声明：本博客文章为原创，只代表本人在工作学习中某一时间内总结的观点或结论。转载时请在文章页面明显位置给出原文链接&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 16:40:00 +0000</pubDate>
<dc:creator>那一叶随风</dc:creator>
<og:description>1、简介 今年四月份公司逐步改用docker容器来部署应用，当时自己刚踏出学校大门，平时开发都是环境都是早已安装好，因此一直没怎么了解Docker这玩意。公司里各位开发大佬说这是个好东西，可以很方便的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/phpstudy2015-6/p/9840610.html</dc:identifier>
</item>
<item>
<title>layoutInflater参数解析与源码分析 - 荒郊野岭一根葱</title>
<link>http://www.cnblogs.com/shu94/p/9850233.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shu94/p/9850233.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　关于LayoutInflater方法，无论是在listview的适配器中，还是在动态添加view的时候，都会出现它的身影，最开始我在看《第一行代码》时，不知道这个方法实际的参数到底指的是什么意思，后来看了一些博客以及查看了源代码，对它参数的理解加深了不少。今天更大家分享一下它的常用写法以及容易出错的地方，再分析原因。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　先从最常见的listview中看看使用这个方法的情况，这是填充listview的item布局代码，待会用的上：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025202314271-135252323.png&quot; alt=&quot;&quot; width=&quot;619&quot; height=&quot;290&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这是MainActivity代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MainActivity &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AppCompatActivity {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ListView listView;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; MainActivity context = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MyAdapter adapter;

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        list.add(&lt;/span&gt;&quot;张三&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;李四&quot;&lt;span&gt;);
        list.add(&lt;/span&gt;&quot;王五&quot;&lt;span&gt;);
        listView &lt;/span&gt;=&lt;span&gt; findViewById(R.id.listview);
        adapter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyAdapter();
        listView.setAdapter(adapter);
    }

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt; MyAdapter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; BaseAdapter{

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getCount() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list.size();
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object getItem(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; position) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list.get(position);
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; getItemId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; position) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; position;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; View getView(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; position, View convertView, ViewGroup parent) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (convertView == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;parent 指的是listview&lt;/span&gt;
                convertView = LayoutInflater.from(context).inflate(R.layout.list_item, parent,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            }
            TextView tv &lt;/span&gt;=&lt;span&gt; convertView.findViewById(R.id.text);
            String name &lt;/span&gt;=&lt;span&gt; list.get(position);
            tv.setText(name);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; convertView;
        }
    }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　在内部类MyAdaper中getView（）方法中，LayoutInflater.inflate()方法传了3个参数，第一个参数是你想填充成view的xml文件id，第二个参数类型是ViewGroup，&lt;span&gt;它的作用是在你第一个xml生成的view的根布局上再加上一个父布局&lt;/span&gt;。这句话很重要，等会看例子会更明白。第3个参数是布尔型，表示绿色的那句话是否执行；方法返回的是第一个xml生成的view的最顶层根布局。好解释完3个参数，先看看以上代码的运行结果截图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025203954165-2004023522.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　此时每个item的高度为80dp,也就是item_list中的layout_height属性生效.现在我们把 &lt;/span&gt;inflate(R.layout.list_item, parent,false);中的&lt;strong&gt;&lt;span&gt;false&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;改为&lt;span&gt;&lt;strong&gt;true&lt;/strong&gt;&lt;span&gt;.重新运行程序，结果。。。。程序崩溃。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　log日志中出现这样的一行信息：&lt;span&gt;addView(View, LayoutParams) is not supported in AdapterView &lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;原因是：listview继承自AdapterView,当第3个参数为true，表示将执行viewgroup.addView(第一个xml生成的view)；这里的viewGroup实际指的是listview,而listview.addView()这个方法在父类AdapterView中已经声明了，调用它就会抛出异常。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025210437000-2094362318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;再次修改参数，inflate(R.layout.list_item,null,false);运行程序结果如图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025211548506-1102113587.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　程序没崩，谢天谢地！不过高度好像变短了啊！我设置的80dp,怎么变得只是包裹了内容。我把80dp改成给180dp，结果还是没变化。这是怎么搞的？原来当第二个参数为null时，此时最外层节点的layout属性全部失效了。就选你把false改为true也无济于事。我们在改改方法参数看看：inflate(R.layout.list_item,parent).这次只传两个参数，且第二个参数不为null，运行看看，结果程序再次&lt;span&gt;addView(View, LayoutParams) is not supported in AdapterView   &lt;/span&gt;&lt;/span&gt;  &lt;span&gt;这种情况等同于inflate(R.layout.list_item, parent,true).  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　再将参数改为 inflate(R.layout.list_item,null)结果等同于inflate(R.layout.list_item,null,false) or inflate(R.layout.list_item,null,true).天啊！参数不同又是崩溃又是layout属性失效，难怪这个inflate方法就是要3个都写对，才会出现预期的结果！看来前辈的写法让我们少走了很多弯路啊！为了理清这个方法不同参数带来的不同问题，只能从源代码中取寻找原因。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;铺垫了这么多，就是为了和大家一起分析源代码。底下的内容来源用一句歌词来概括：&lt;/span&gt;&lt;span&gt;（我哪里 碍到你 硬说跟我 有默契      是编程 让我们 东拼西凑在一起）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025214339728-338241725.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;不管是3个参数，还是2个参数，都会走进上面这个方法，提一点：我们的xml已经在方法中转化成了解析器对象，也就是说这个parsr对象带有xml文件的全部信息，进入了下一个inflate方法，我们继续跟进：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt; &lt;span&gt;public&lt;/span&gt; View inflate(XmlPullParser parser, @Nullable ViewGroup root, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; attachToRoot) {
        &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (mConstructorArgs) {
            Trace.traceBegin(Trace.TRACE_TAG_VIEW, &lt;/span&gt;&quot;inflate&quot;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Context inflaterContext =&lt;span&gt; mContext;
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; AttributeSet attrs =&lt;span&gt; Xml.asAttributeSet(parser);
            Context lastContext &lt;/span&gt;= (Context) mConstructorArgs[0&lt;span&gt;];
            mConstructorArgs[&lt;/span&gt;0] =&lt;span&gt; inflaterContext;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的result就是最终该方法要返回的view，初始时设为第二个参数root&lt;/span&gt;
            View result =&lt;span&gt; root;

            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Look for the root node.&lt;/span&gt;
                &lt;span&gt;int&lt;/span&gt;&lt;span&gt; type;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在while中找到了parser的根节点。寻找方法既不是起始标志，也不是结束标志，它就是最开始的根节点。
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后面的节点都是它的子节点。这个节点对应的是xml布局中最外层的布局。&lt;/span&gt;
                &lt;span&gt;while&lt;/span&gt; ((type = parser.next()) != XmlPullParser.START_TAG &amp;amp;&amp;amp;&lt;span&gt;
                        type &lt;/span&gt;!=&lt;span&gt; XmlPullParser.END_DOCUMENT) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Empty&lt;/span&gt;
&lt;span&gt;                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (type !=&lt;span&gt; XmlPullParser.START_TAG) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InflateException(parser.getPositionDescription()
                            &lt;/span&gt;+ &quot;: No start tag found!&quot;&lt;span&gt;);
                }

                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; String name =&lt;span&gt; parser.getName();

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (DEBUG) {
                    System.out.println(&lt;/span&gt;&quot;**************************&quot;&lt;span&gt;);
                    System.out.println(&lt;/span&gt;&quot;Creating root view: &quot;
                            +&lt;span&gt; name);
                    System.out.println(&lt;/span&gt;&quot;**************************&quot;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;你的布局最外层是否merge标签，不是的话，不用看里面的&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (TAG_MERGE.equals(name)) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (root == &lt;span&gt;null&lt;/span&gt; || !&lt;span&gt;attachToRoot) {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InflateException(&quot;&amp;lt;merge /&amp;gt; can be used only with a valid &quot;
                                + &quot;ViewGroup root and attachToRoot=true&quot;&lt;span&gt;);
                    }

                    rInflate(parser, root, inflaterContext, attrs, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Temp is the root view that was found in the xml
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里返回的是xml布局根节点的对应的view。其中createViewFromTag（）是通过name找到类加载器，然后利用反射
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建name对应的view。如&amp;lt;TextView&amp;gt;就会创建TextView对象。&lt;/span&gt;
                    &lt;span&gt;final&lt;/span&gt; View temp =&lt;span&gt; createViewFromTag(root, name, inflaterContext, attrs);
                    ViewGroup.LayoutParams params &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (root != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (DEBUG) {
                            System.out.println(&lt;/span&gt;&quot;Creating params from root: &quot; +&lt;span&gt;
                                    root);
                        }
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create layout params that match root, if supplied
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的root经常让人理解为xml生成view的根节点，上面的temp才是那个根节点，这里的root你是传进来的第二个
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数viewGroup，它更第一个参数没半毛钱关系。这里创建root的布局参数。&lt;/span&gt;
                        params =&lt;span&gt; root.generateLayoutParams(attrs);
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;attachToRoot) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set the layout params for temp if we are not
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; attaching. (If we are, we use addView, below)
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里的情况对应的是第二个参数不为null，且第3个参数为false，这是getView里的最常用的写法。
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;temp与root的区别解释上面说了，之所以为temp设置布局参数需要传root的params,你因为你想要temp的layout属性
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生效，就必须给他的外层加个容器，这里指root，只有存在这个容器，它的layout属性才有意义。&lt;/span&gt;
&lt;span&gt;
                            temp.setLayoutParams(params);
                        }
                    }

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (DEBUG) {
                        System.out.println(&lt;/span&gt;&quot;-----&amp;gt; start inflating children&quot;&lt;span&gt;);
                    }

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Inflate all children under temp against its context.
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个方法的任务就是将xml里的所有子节点全部填充成view，并调用addView添加到temp里面。
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现的逻辑根据当前xml标签名生成对应的view和viewGroup，如果是view就直接添加到temp里，如果是viewGroup
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继续调用rInflateChildren，直至解析完它的子view。&lt;/span&gt;
                    rInflateChildren(parser, temp, attrs, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (DEBUG) {
                        System.out.println(&lt;/span&gt;&quot;-----&amp;gt; done inflating children&quot;&lt;span&gt;);
                    }

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We are supposed to attach all the views we found (int temp)
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; to root. Do that now.
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面提到过 listview（也就是这里的root）.addView会报错，当我们getView第二个参数不为null，且第3个参数为true，
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;就是触发了这里的条件&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (root != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; attachToRoot) {
                        root.addView(temp, params);
                    }

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Decide whether to return the root that was passed in or the
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; top view found in xml.
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;官方的注释说的很明白：决定是返回root还是我们xml的顶级view（temp）。
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果满足以下条件，就返回顶级view--temp。在上面的例子中，只要root为null,不管第3个参数为true还是false，这个if都会成立，
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;结果返回没有外层容器的顶级view。因此它的layout属性就失效了。&lt;/span&gt;
                    &lt;span&gt;if&lt;/span&gt; (root == &lt;span&gt;null&lt;/span&gt; || !&lt;span&gt;attachToRoot) {
                        result &lt;/span&gt;=&lt;span&gt; temp;
                    }
                }

            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (XmlPullParserException e) {
                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; InflateException ie = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InflateException(e.getMessage(), e);
                ie.setStackTrace(EMPTY_STACK_TRACE);
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ie;
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; InflateException ie = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InflateException(parser.getPositionDescription()
                        &lt;/span&gt;+ &quot;: &quot; +&lt;span&gt; e.getMessage(), e);
                ie.setStackTrace(EMPTY_STACK_TRACE);
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ie;
            } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Don't retain static reference on context.&lt;/span&gt;
                mConstructorArgs[0] =&lt;span&gt; lastContext;
                mConstructorArgs[&lt;/span&gt;1] = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

                Trace.traceEnd(Trace.TRACE_TAG_VIEW);
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　理清楚参数是否为null，以及是否为true，false，都在注释中写的很明白了。不保证百分之百正确，但大体上不会错的很离谱。另外2个参数是怎么关联到3个参数的代码如下：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025230926739-803012380.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从代码很清晰的看出，第二个参数是否为null，直接导致了第三个参数是否为true还是false。因此看懂了超长版，这一行代码简直不要再简单。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　走笔至此，关于这个方法还有一个很有趣的用法（从Toast的API中看到的），很巧妙。它的用处是主布局设置好的layout参数，要添加进来的子view的layout属性不管怎么设置都无效：先看看代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这是主界面：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025234921652-371311374.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt; 　　这是要&lt;/span&gt;&lt;span&gt;将要添加的子界面布局：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025235113174-1982732060.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt; 　　&lt;span&gt;现在我们让子界面的layout不管设置什么参数，它的属性都不会生效：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1467941/201810/1467941-20181025235944971-1219918763.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　这个方法中，inflate（）方法的第一个xml布局的顶级view temp，和第二个viewGroup对应的root可以说是同一个view。这个view没有父容器，所以不管子界面的layout属性怎么设置，最终都受到主界面layout的限制。这种写法的巧妙在于从xml中找到顶级节点的id，生成了两个一样的顶级view，而且第3个参数不管是true还是false，执行root.addView(temp)还是temp.setLayoutParams(root.params)，同样也是无法影响先前的结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 16:20:00 +0000</pubDate>
<dc:creator>荒郊野岭一根葱</dc:creator>
<og:description>LayoutInlater 安卓</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shu94/p/9850233.html</dc:identifier>
</item>
<item>
<title>springboot学习之构建简单项目搭建 - 厨房小码农</title>
<link>http://www.cnblogs.com/xiaobaobei/p/9853712.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaobaobei/p/9853712.html</guid>
<description>&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;　　相信对于Java开发者而言，spring和springMvc两个框架一定不陌生，这两个框架需要我们手动配置的地方非常多，各种的xml文件，properties文件，构建一个项目还是挺复杂的，在这种情况下，springboot应运而生，他能够快速的构建spring项目，而且让项目正常运行起来的配置文件非常少，甚至只需要几个注解就可以运行整个项目。&lt;/p&gt;
&lt;p&gt;　　总的说来，springboot项目可以打成jar包独立运行部署，因为它内嵌servlet容器，之前spring，springMvc需要的大量依赖，可以通过starter来帮助我们简化配置，当然还有其他好多优点，这里就不一一赘述，小伙伴们可以自行搜索解答。&lt;/p&gt;

&lt;h2&gt;简单项目构建&lt;/h2&gt;
&lt;p&gt;　　工具&lt;/p&gt;
&lt;p&gt;　　　　eclipse maven&lt;/p&gt;
&lt;p&gt;　　首先，我们新建一个maven项目，在eclipse左侧右击选择new----》other,选择新建Maven project&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1489058/201810/1489058-20181025230751017-1397738428.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入group Id，artifact Id，点击完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1489058/201810/1489058-20181025230812371-1160303029.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样一个简单的项目架子就完成了，但是啥都没有，项目结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1489058/201810/1489058-20181025230825122-1703847838.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们就开始配置搭建springboot项目。&lt;/p&gt;
&lt;h3&gt;1.添加依赖&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1489058/201810/1489058-20181025232245513-262965359.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整porm代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_43dbab6a-c895-433d-a8b9-b685b5cd3c16&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_43dbab6a-c895-433d-a8b9-b685b5cd3c16&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_43dbab6a-c895-433d-a8b9-b685b5cd3c16&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
&lt;span&gt; 2&lt;/span&gt;     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
&lt;span&gt; 3&lt;/span&gt;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;groupId&amp;gt;com.cfxmn.springboot&amp;lt;/groupId&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;artifactId&amp;gt;springbootDemo&amp;lt;/artifactId&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &amp;lt;!-- 通过继承spring-boot-starter-parent项目来获得一些合理的默认配置 --&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;parent&amp;gt;
&lt;span&gt;13&lt;/span&gt;         &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt;14&lt;/span&gt;         &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
&lt;span&gt;15&lt;/span&gt;         &amp;lt;version&amp;gt;1.5.6.RELEASE&amp;lt;/version&amp;gt;
&lt;span&gt;16&lt;/span&gt;     &amp;lt;/parent&amp;gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &amp;lt;properties&amp;gt;
&lt;span&gt;19&lt;/span&gt;         &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;/properties&amp;gt;
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &amp;lt;dependencies&amp;gt;
&lt;span&gt;23&lt;/span&gt;         &amp;lt;!-- Spring Boot Web 依赖 --&amp;gt;
&lt;span&gt;24&lt;/span&gt;         &amp;lt;dependency&amp;gt;
&lt;span&gt;25&lt;/span&gt;             &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt;26&lt;/span&gt;             &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&lt;span&gt;27&lt;/span&gt;         &amp;lt;/dependency&amp;gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         &amp;lt;!-- Spring Boot Test 依赖 --&amp;gt;
&lt;span&gt;30&lt;/span&gt;         &amp;lt;dependency&amp;gt;
&lt;span&gt;31&lt;/span&gt;             &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt;32&lt;/span&gt;             &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
&lt;span&gt;33&lt;/span&gt;             &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&lt;span&gt;34&lt;/span&gt;         &amp;lt;/dependency&amp;gt;
&lt;span&gt;35&lt;/span&gt;         &amp;lt;!-- 使用Lombok可以减少很多重复代码的书写。比如说getter/setter/toString等方法的编写 --&amp;gt;
&lt;span&gt;36&lt;/span&gt;         &amp;lt;dependency&amp;gt;
&lt;span&gt;37&lt;/span&gt;             &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
&lt;span&gt;38&lt;/span&gt;             &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
&lt;span&gt;39&lt;/span&gt;         &amp;lt;/dependency&amp;gt;
&lt;span&gt;40&lt;/span&gt;     &amp;lt;/dependencies&amp;gt;
&lt;span&gt;41&lt;/span&gt; &amp;lt;/project&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　下面我们新建一些包和添加项目的启动类，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1489058/201810/1489058-20181025233730694-1354368440.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，控制器DemoController的内容非常简单，内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package com.cfxmn.springboot.springbootDemo.controller;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
public class DemoController {
        
        @PostMapping(&quot;/demo&quot;)
        public void demoTest() {
                // 这边简单起见，打印一下日志
                log.info(&quot;success call&quot;);
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可能有些同学对其中的几个注解有些疑问，我这边简单说明下，&lt;/p&gt;
&lt;p&gt;1.RestController&lt;/p&gt;
&lt;p&gt;　　这个注解其实就是@ResponseBody ＋ @Controller&lt;/p&gt;
&lt;p&gt;2.PostMapping&lt;/p&gt;
&lt;p&gt;　　这个注解其实就是@RequestMapping(&quot;xxxxxx&quot;, Method=RequestMethod.POST)&lt;/p&gt;
&lt;p&gt;这两个其实都是组合注解，简化使用&lt;/p&gt;
&lt;p&gt;我们再来看看，项目的启动类SpringbootDemoApplication的内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package com.cfxmn.springboot.springbootDemo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringbootDemoApplication {

        public static void main(String[] args) {
                SpringApplication.run(SpringbootDemoApplication.class, args);
        }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是的，你没看错，只要运行这个main方法，就能启动这个spring项目，具体是怎么启动的容器，我们之后再分析，其实主要就是在注解SpringBootApplication上。&lt;/p&gt;
&lt;p&gt;下面我们就来运行下，看下启动日志：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.5.6.RELEASE)

2018-10-25 23:52:41.985  INFO 1700 --- [           main] c.c.s.s.SpringbootDemoApplication        : Starting SpringbootDemoApplication on DESKTOP-KB78HJK with PID 1700 (E:\workspace\springbootDemo\target\classes started by gepengfa in E:\workspace\springbootDemo)
2018-10-25 23:52:41.990  INFO 1700 --- [           main] c.c.s.s.SpringbootDemoApplication        : No active profile set, falling back to default profiles: default
2018-10-25 23:52:42.088  INFO 1700 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7f416310: startup date [Thu Oct 25 23:52:42 CST 2018]; root of context hierarchy
2018-10-25 23:52:44.561  INFO 1700 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)
2018-10-25 23:52:44.584  INFO 1700 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2018-10-25 23:52:44.588  INFO 1700 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.16
2018-10-25 23:52:44.813  INFO 1700 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2018-10-25 23:52:44.813  INFO 1700 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2733 ms
2018-10-25 23:52:45.074  INFO 1700 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: 'dispatcherServlet' to [/]
2018-10-25 23:52:45.083  INFO 1700 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'characterEncodingFilter' to: [/*]
2018-10-25 23:52:45.083  INFO 1700 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2018-10-25 23:52:45.083  INFO 1700 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'httpPutFormContentFilter' to: [/*]
2018-10-25 23:52:45.085  INFO 1700 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'requestContextFilter' to: [/*]
2018-10-25 23:52:45.582  INFO 1700 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7f416310: startup date [Thu Oct 25 23:52:42 CST 2018]; root of context hierarchy
2018-10-25 23:52:45.705  INFO 1700 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/demo],methods=[POST]}&quot; onto public void com.cfxmn.springboot.springbootDemo.controller.DemoController.demoTest()
2018-10-25 23:52:45.710  INFO 1700 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/error]}&quot; onto public org.springframework.http.ResponseEntity&amp;lt;java.util.Map&amp;lt;java.lang.String, java.lang.Object&amp;gt;&amp;gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2018-10-25 23:52:45.711  INFO 1700 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/error],produces=[text/html]}&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-10-25 23:52:45.759  INFO 1700 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-10-25 23:52:45.759  INFO 1700 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-10-25 23:52:45.817  INFO 1700 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-10-25 23:52:46.321  INFO 1700 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2018-10-25 23:52:46.529  INFO 1700 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer :&lt;span&gt; Tomcat started on port(s): 8080 (http)&lt;/span&gt;
2018-10-25 23:52:46.599  INFO 1700 --- [           main] c.c.s.s.SpringbootDemoApplication        : Started SpringbootDemoApplication in 5.092 seconds (JVM running for 5.764)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 从启动日志标黄的部分可以看出，项目启动成功了，访问端口默认是8080（这个端口是可以改动的）&lt;/p&gt;
&lt;p&gt; 下面我们通过postMan请求下，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1489058/201810/1489058-20181025235947931-1196955508.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看控制台&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
2018-10-25 23:59:26.385  INFO 1700 --- [nio-8080-exec-2] c.c.s.s.controller.DemoController        : &lt;span&gt;success call&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 说明调用成功。&lt;/p&gt;
&lt;p&gt;到此，一个简单的springboot项目就构建完成了，但这只是一个空的架子，内容还可载丰富。&lt;/p&gt;
&lt;p&gt;下一篇文章我们主要来分析下，springboot启动的相关源码，敬请期待。&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 16:04:00 +0000</pubDate>
<dc:creator>厨房小码农</dc:creator>
<og:description>概述 相信对于Java开发者而言，spring和springMvc两个框架一定不陌生，这两个框架需要我们手动配置的地方非常多，各种的xml文件，properties文件，构建一个项目还是挺复杂的，在这</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaobaobei/p/9853712.html</dc:identifier>
</item>
<item>
<title>快速解决 GRADLE 项目下载 gradle-*-all.zip 慢的问题 - 哎呦喂，我的小祖宗╰つ</title>
<link>http://www.cnblogs.com/duwenlei/p/9853705.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/duwenlei/p/9853705.html</guid>
<description>

&lt;p&gt;1、首先根据项目中 gradle\wrapper\gradle-wrapper.properties 文件的 distributionUrl 属性的值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
#Tue Feb 06 12:27:20 CET 2018&lt;span&gt;
distributionBase&lt;/span&gt;=&lt;span&gt;GRADLE_USER_HOME
distributionPath&lt;/span&gt;=wrapper/&lt;span&gt;dists
zipStoreBase&lt;/span&gt;=&lt;span&gt;GRADLE_USER_HOME
zipStorePath&lt;/span&gt;=wrapper/&lt;span&gt;dists
distributionUrl&lt;/span&gt;=https\:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;services.gradle.org/distributions/gradle-4.8.1-bin.zip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、根据  distributionUrl  对应的 gradle 的版本好，去下载相应的版本，可以通过 迅雷 或者其他国内网站下载，下载后先保存在本地，等待后续使用&lt;/p&gt;
&lt;p&gt;3、运行 gradle build 命令进行构建&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Windows 下使用 
gradlew.bat build 

# Linux mac 下使用 
gradlew build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行以后，提示下载时，终止掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/551047/201810/551047-20181025235338538-723170264.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;终止掉后，打开此文件夹 $GRADLE_USER_HOME/wrapper/dists/gradle-4.8.1-bin/&lt;span&gt;e8p42vx1m7a3mz9ydmjagn6wn &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;橙色字体可能会和我不一样，无所谓&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;提示：这个文件夹大多数都在用户主目录下 .gradle//wrapper/dists/... 下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、在进入上一步说的文件夹以后先删除所有文件，然后把第二步下载好的 zip 文件复制到此文件夹下 $GRADLE_USER_HOME/wrapper/dists/gradle-4.8.1-bin/e8p42vx1m7a3mz9ydmjagn6wn 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、再次执行 gradle build (注意 Windows 和 linux的命令不同)，会变成如下，不需要再下载这个文件了，编译会很快通过&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;C:\Users\duwenlei\IdeaProjects\spring_boot_demo
λ gradlew.bat build
Unzipping C:\Users\duwenlei\.gradle\wrapper\dists\gradle&lt;/span&gt;-4.8.1-bin\e8p42vx1m7a3mz9ydmjagn6wn\gradle-4.8.1-bin.zip to C:\Users\duwenlei\.gradle\wrapper\dists\gradle-4.8.1-&lt;span&gt;bin\e8p42vx1m7a3mz9ydmjagn6wn

Welcome to Gradle &lt;/span&gt;4.8.1!&lt;span&gt;

Here are the highlights of &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; release:
 &lt;/span&gt;-&lt;span&gt; Dependency locking
 &lt;/span&gt;-&lt;span&gt; Maven Publish and Ivy Publish plugins improved and marked stable
 &lt;/span&gt;-&lt;span&gt; Incremental annotation processing enhancements
 &lt;/span&gt;-&lt;span&gt; APIs to configure tasks at creation time

For more details see https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;docs.gradle.org/4.8.1/release-notes.html&lt;/span&gt;
&lt;span&gt;
Starting a Gradle Daemon (subsequent builds will be faster)

...

Download http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;maven.aliyun.com/nexus/content/repositories/central/org/springframework/boot/spring-boot-starter-test/2.0.6.RELEASE/spring-boot-starter-test-2.0.6.RELEASE.jar&lt;/span&gt;

&amp;gt;&lt;span&gt; Task :test
&lt;/span&gt;2018-10-25 23:34:55.551  INFO 588 --- [       Thread-5] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@413698fe: startup date [Thu Oct 25 23:34:52 CST 2018&lt;span&gt;]; root of context hierarchy

BUILD SUCCESSFUL in 1m 5s
&lt;/span&gt;5 actionable tasks: 5 executed
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;6、完结，可以在通过 IDEA 或者其他编码工具打开工程，跳过了慢悠悠的下载过程。&lt;/p&gt;

</description>
<pubDate>Thu, 25 Oct 2018 16:00:00 +0000</pubDate>
<dc:creator>哎呦喂，我的小祖宗╰つ</dc:creator>
<og:description>1、首先根据项目中 gradle\wrapper\gradle-wrapper.properties 文件的 distributionUrl 属性的值 2、根据 distributionUrl 对应的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/duwenlei/p/9853705.html</dc:identifier>
</item>
<item>
<title>【Unity Shader】（七） ------ 复杂的光照（下） - 爱喝柠檬的二哈</title>
<link>http://www.cnblogs.com/BFXYMY/p/9839424.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/BFXYMY/p/9839424.html</guid>
<description>&lt;p&gt;笔者使用的是 Unity 2018.2.0f2 + VS2017，建议读者使用与 Unity 2018 相近的版本，避免一些因为版本不一致而出现的问题。&lt;/p&gt;

&lt;p id=&quot;main-toc&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;%E5%89%8D%E8%A8%80-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#前言&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;前言&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;%E4%B8%80.%20%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#一.%20光照衰减&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#%E4%B8%80.%20%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F&quot;&gt;一. 光照衰减&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;1.1%20%E4%BD%BF%E7%94%A8%20LUT-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#1.1%20使用%20LUT&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#1.1%20%E4%BD%BF%E7%94%A8%20LUT&quot;&gt;1.1 使用 LUT&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;1.2%20%E5%85%B3%E4%BA%8E%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F%E7%BA%B9%E7%90%86-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#1.2%20关于光照衰减纹理&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#1.2%20%E5%85%B3%E4%BA%8E%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F%E7%BA%B9%E7%90%86&quot;&gt;1.2 关于光照衰减纹理&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;1.3%20%E5%85%B3%E4%BA%8E%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F%E7%9A%84%E6%80%BB%E7%BB%93-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#1.3%20关于光照衰减的总结&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#1.3%20%E5%85%B3%E4%BA%8E%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F%E7%9A%84%E6%80%BB%E7%BB%93&quot;&gt;1.3 关于光照衰减的总结&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;%E4%BA%8C.%20%E9%98%B4%E5%BD%B1-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#二.%20阴影&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#%E4%BA%8C.%20%E9%98%B4%E5%BD%B1&quot;&gt;二. 阴影&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;2.1%20%E9%98%B4%E5%BD%B1%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%87%BA%E6%9D%A5%E7%9A%84-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#2.1%20阴影是如何实现出来的&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#2.1%20%E9%98%B4%E5%BD%B1%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%87%BA%E6%9D%A5%E7%9A%84&quot;&gt;2.1 阴影是如何实现出来的&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;Algorithm%20overview-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#Algorithm%20overview&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#Algorithm%20overview&quot;&gt;Algorithm overview&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;2.2%C2%A0%20%E6%99%AE%E9%80%9A%E9%9D%9E%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E9%98%B4%E5%BD%B1%E7%9A%84%E5%AE%9E%E7%8E%B0-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#2.2 %20普通非透明物体阴影的实现&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#2.2%C2%A0%20%E6%99%AE%E9%80%9A%E9%9D%9E%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E9%98%B4%E5%BD%B1%E7%9A%84%E5%AE%9E%E7%8E%B0&quot;&gt;2.2  普通非透明物体阴影的实现&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;2.2.1%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#2.2.1%20准备工作&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#2.2.1%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C&quot;&gt;2.2.1 准备工作&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;2.2.2%20%E6%8E%A5%E6%94%B6%E9%98%B4%E5%BD%B1-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#2.2.2%20接收阴影&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#2.2.2%20%E6%8E%A5%E6%94%B6%E9%98%B4%E5%BD%B1&quot;&gt;2.2.2 接收阴影&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;2.2.3%20%E5%AE%8C%E5%96%84%E7%9A%84%E7%9A%84%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F%E5%92%8C%E9%98%B4%E5%BD%B1%E7%AE%A1%E7%90%86-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#2.2.3%20完善的的光照衰减和阴影管理&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#2.2.3%20%E5%AE%8C%E5%96%84%E7%9A%84%E7%9A%84%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F%E5%92%8C%E9%98%B4%E5%BD%B1%E7%AE%A1%E7%90%86&quot;&gt;2.2.3 完善的的光照衰减和阴影管理&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;2.3%20%E6%99%AE%E9%80%9A%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E7%9A%84%E9%98%B4%E5%BD%B1-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#2.3%20普通透明物体的阴影&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#2.3%20%E6%99%AE%E9%80%9A%E9%80%8F%E6%98%8E%E7%89%A9%E4%BD%93%E7%9A%84%E9%98%B4%E5%BD%B1&quot;&gt;2.3 普通透明物体的阴影&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;%E4%B8%89.%20%E5%AE%8C%E6%95%B4%E7%9A%84%E5%85%89%E7%85%A7%20shader-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#三.%20完整的光照%20shader&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#%E4%B8%89.%20%E5%AE%8C%E6%95%B4%E7%9A%84%E5%85%89%E7%85%A7%20shader&quot;&gt;三. 完整的光照 shader&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;%E5%9B%9B.%20%E6%80%BB%E7%BB%93-toc&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/BFXYMY/p/9839424.html#四.%20总结&quot; target=&quot;_self&quot; data-cke-saved-href=&quot;#%E5%9B%9B.%20%E6%80%BB%E7%BB%93&quot;&gt;四. 总结&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;本文承接上文&lt;a href=&quot;https://www.cnblogs.com/BFXYMY/p/9786098.html&quot; data-cke-saved-href=&quot;https://mp.csdn.net/postedit/83045948&quot;&gt;【Unity Shader】（六） ------ 复杂的光照（上）&lt;/a&gt;，介绍剩下的光照衰减和阴影部分，最后实现包含了对不同光照类型进行光照计算，光照衰减，阴影产生等部分的真正意义上的标准光照 shader 。因为本文会上文有所联系，所以个人建议读者阅读上文，以免在本文某些地方出现思路上的突兀。&lt;/p&gt;




&lt;h2&gt;1.1 使用 LUT&lt;/h2&gt;
&lt;p&gt;前面说过，我们使用 &lt;strong&gt;LUT&lt;/strong&gt; 来计算衰减，这种做法的优劣点如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;优点：因为直接计算光照衰减会涉及大量且复杂的数学运算，使用 LUT 可以不依赖数学表达式的复杂性，只需一个参数去采样即可。&lt;/li&gt;
&lt;li&gt;缺点 : ① 需要预处理得到纹理，纹理大小影响衰减的精度。② 不直观，且使用 LUT 后就无法使用其它数学公式来计算。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然，Unity 默认这种方法也是因为其在一定程度上提升了性能且大部分情况下，得到的效果是良好的。&lt;/p&gt;


&lt;h2&gt;1.2 关于光照衰减纹理&lt;/h2&gt;
&lt;p&gt;Unity 内使用 &lt;strong&gt;_LightTexture0&lt;/strong&gt; 的纹理来计算光照衰减，在之前的代码中，我们已经使用过了。通常情况下，我们只关心 _LightTexture0 对角线上的纹理颜色值，其代表了在光源空间下不同位置的点的衰减值。（0,0）表示与光源重合的点的衰减值，（1,1）表示距离最远的点的光照衰减值。&lt;/p&gt;
&lt;p&gt;上面说过，需要用一个点对纹理采样，那么就要先知道该点在光源空间下位置信息。同样是空间转换，我们在这里需要用到的转换矩阵为 _LightMatrix0 。在 Unity 5.4 之后，这个矩阵更换为 unity_WorldToLight 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/01.png&quot; alt=&quot;&quot; width=&quot;646&quot; height=&quot;154&quot;/&gt;&lt;/p&gt;

&lt;p&gt;所以这里转换语句应该为&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;1&lt;/span&gt; float3 lightCoord = mul(unity_WorldToLight, float4(i.worldPos, &lt;span&gt;1&lt;/span&gt;)).xyz;&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; 然后使用这个坐标的摸的平方进行采样。当然，如果用距离值来计算就需要开方操作了，为了，避免这个繁琐的步骤，我们使用顶点距离的平方来采样&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;fixed&lt;/span&gt; atten = tex2D(_LightTexture0, dot(lightCoord, lightCoord).rr).UNITY_ATTEN_CHANNEL;&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; 其中宏 UNITY_ATTEN_CHANNEL 可以得到衰减值所在的分量。&lt;/p&gt;

&lt;h2&gt;1.3 关于光照衰减的总结&lt;/h2&gt;
&lt;p&gt;上述所说的知识足够读者应付大部分的光照计算中的光照衰减部分，如果读者着实不希望采用 LUT 的方法来计算衰减，也可以使用数学公式，只是这样需要对公式有更深入的理解。很遗憾的是，笔者并没有找到关于计算衰减的公式的资料，对于衰减方面的资料，着实所寻不多，日后如果我能找到相关知识，我会补充到这篇文章中。&lt;/p&gt;



&lt;p&gt;在许多游戏制作中，为了追求真实，光影效果是必不可少的。光我们之前介绍了，现在来介绍阴影。&lt;/p&gt;

&lt;h2&gt;2.1 阴影是如何实现出来的&lt;/h2&gt;
&lt;p&gt;想象一下，一条光线从远方射过来，当它遇到了第一个不透明的物体时，那么理所当然的是，这条射线就无法再去照亮别的物体了。同时，挡住这条光线的物体会向附近的物体投射阴影。也就是说，&lt;strong&gt;阴影是光线无法到达的区域&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在 Unity 的实时渲染中，我们采用的是 &lt;strong&gt;Shadow Map&lt;/strong&gt; 技术。关于 Shadow Map，我们可以 WIKI 上看到它的解释。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/02.png&quot; alt=&quot;&quot; width=&quot;1100&quot; height=&quot;243&quot;/&gt;&lt;/p&gt;

&lt;p&gt;大意为：Shadow Map 是 Lance Williams 先生在 1978 年提出的技术，从此之后，它常用于预渲染和实时场景中。在 Unity 中，就是先把摄像机的位置与光源重合，然后摄像机看不到的区域就是阴影。这样理解是不是很简单？&lt;/p&gt;

&lt;p&gt;我们先来看看 Shadow Map 是如何定义其工作原理的：&lt;/p&gt;

&lt;h2&gt;Algorithm overview&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Rendering a shadowed scene involves two major drawing steps. The first produces the shadow map itself, and the second applies it to the scene. Depending on the implementation (and number of lights), this may require two or more drawing passes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;简单地说就是 ： ① 生成阴影纹理  ② 在场景中使用阴影纹理&lt;/p&gt;
&lt;p&gt;比如：在前向渲染中，如果平行光开启了阴影（要注意需要手动开启，创建了一个新光源，默认是没有阴影的）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/03.png&quot; alt=&quot;&quot; width=&quot;521&quot; height=&quot;265&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Unity 就会为这个平行光计算阴影映射纹理。&lt;strong&gt;这张阴影映射纹理实质就是一张深度纹理，记录着从光源出发，距离光源最近的表面信息&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;通常情况下，是通过调用 Base Pass 和 Additional Pass 来更新深度信息，但我们之前也说过，这两个 Pass 中包含了各种光照计算。为了避免多余的光照计算所造成的性能损耗，Unity 选择使用另外一个特别的 Pass 来管理光源的映射纹理。&lt;strong&gt;这个 Pass 就是 LightMode 标签中设置为 Shadow Caster 的那个 Pass&lt;/strong&gt;。这个 Pass 的渲染目标是深度纹理。所以当一个光源开启了阴影效果之后，引擎就会在当前渲染物体的 shader 中寻找这个 Pass ，如果找不到，就去 Fallback 里面找；还找不到，就去 Fallback 的 Fallback 里面找。&lt;strong&gt;如果这样都找不到，那么该物体就无法向其它物体投射阴影，但是可以接收来自其它物体的阴影。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/04.png&quot; alt=&quot;&quot; width=&quot;549&quot; height=&quot;259&quot;/&gt; &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/05.png&quot; alt=&quot;&quot; width=&quot;537&quot; height=&quot;236&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;文字有点多，总结一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果想要一个物体接收其它的物体的阴影，就要在 shader 中对阴影映射纹理进行采样，把采样结果和光照结果相乘得到阴影效果。&lt;/li&gt;
&lt;li&gt;如果想要一个物体向其它物体投射阴影，就要把该物体加入到阴影映射纹理之中，这一步骤是在 Shadow Pass 中实现的。&lt;/li&gt;
&lt;li&gt;如果想要一个光源产生阴影效果，则需要手动选择阴影类型：&lt;strong&gt;No Shadows , Hard Shadows , Soft Shadows&lt;/strong&gt;。Hard Shadows 相对于 Soft Shadows 计算量少一些，能满足大部分场景，边缘不平滑，锯齿明显。

&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;2.2  普通非透明物体阴影的实现&lt;/h2&gt;
&lt;p&gt;这一节我们来实现对一个不透明的物体的阴影处理，包括让它投射阴影和接收阴影。&lt;/p&gt;

&lt;h3&gt;2.2.1 准备工作&lt;/h3&gt;
&lt;p&gt;创建场景，去掉默认的天空盒子；新建一个 Material 和 一个 shader，命名为 Shadow；创建一个 Cube 和两个 plane，位置摆放如下；开启平行光的阴影；新建的 shader 中使用我上一篇最后给出的前向渲染的代码。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/06.png&quot; alt=&quot;&quot; width=&quot;812&quot; height=&quot;490&quot;/&gt;&lt;/p&gt;

&lt;p&gt;看到上面的图，不知道读者有没有一种细思极恐的感觉，因为上图有两处诡异的地方。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;前文说过，需要一个 ShadowCaster 的 Pass 来处理阴影，但是在上一篇中实现的前向渲染的代码中，我们并没有定义这样的一个 Pass，也没有做出对阴影处理的操作，那么为什么正方体会有阴影呢？&lt;/li&gt;
&lt;li&gt;可以确定的是两个 plane 都开启了投射阴影和接收阴影，图中就可以看到地面上的 plane 接收了正方体的阴影，那么，为什么右边的 plane 没有投影呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实这是两个需要注意的地方&lt;/p&gt;

&lt;p&gt;这样就看到阴影了。不过还是有一个奇怪的地方，那就是正方体为什么没有接收右边平面的阴影？因为 ForwardRendering 里面没有对接收的阴影做出处理。我们接下来就要完善这一步了。&lt;/p&gt;

&lt;h3&gt;2.2.2 接收阴影&lt;/h3&gt;
&lt;p&gt;我们开始对 Shadow 改造&lt;/p&gt;

&lt;p&gt;I. 添加一个头文件，我们计算阴影所需要的宏都是在这个文件中声明的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/10.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;64&quot;/&gt;&lt;/p&gt;

&lt;p&gt;II. 在输出结构体添加一个内置宏&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/16.png&quot; alt=&quot;&quot; width=&quot;362&quot; height=&quot;149&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个宏用于声明对阴影纹理采样的坐标，参数为下一个可用的插值寄存器的索引，在上面，我们在 worldNormal 和 worldPos 都使用了一个，所以此时这个宏的参数应该为2&lt;/p&gt;

&lt;p&gt;III. 在顶点着色器中添加一个宏&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/13.png&quot; alt=&quot;&quot; width=&quot;532&quot; height=&quot;242&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRANSFER_SHADOW&lt;/strong&gt; 这个宏会计算上一步定义的阴影纹理坐标。我们可以在 AutoLight 中看到它的定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/12.png&quot; alt=&quot;&quot; width=&quot;1020&quot; height=&quot;30&quot;/&gt;&lt;/p&gt;

&lt;p&gt;IV. 在片元着色器中计算阴影，同样使用一个内置宏&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/14.png&quot; alt=&quot;&quot; width=&quot;372&quot; height=&quot;46&quot;/&gt;&lt;/p&gt;

&lt;p&gt;V. 将得到的阴影值与漫反射颜色，高光反射颜色相乘&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/15.png&quot; alt=&quot;&quot; width=&quot;1001&quot; height=&quot;156&quot;/&gt;&lt;/p&gt;

&lt;p&gt;VI. 保存，查看效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/17.png&quot; alt=&quot;&quot; width=&quot;735&quot; height=&quot;489&quot;/&gt;&lt;/p&gt;

&lt;p&gt;可以看到，正方体已经接收到了右边平面的阴影。&lt;/p&gt;

&lt;p&gt;此时，读者可能会有疑惑，上面步骤中那些代码应该添加在哪里，因为前向渲染中我们定义了两个 Pass，Base Pass 和 Additional Pass。事实上，两个 Pass 对阴影处理的原理是一样的，上面的步骤，我只对 Base Pass 做了修改，但这是不够完善的，所以接下来，我们来介绍完整的阴影管理。&lt;/p&gt;

&lt;p&gt;在这里，还需注意的是 &lt;strong&gt;SHADOW_COORDS，TRANSFER_SHADOW，SHADOW_ATTENUATION&lt;/strong&gt; 这三个宏会根据不同的情况有不同的定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ---- Screen space direction light shadows helpers (any version)&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#if&lt;/span&gt; defined (SHADOWS_SCREEN)
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;#if&lt;/span&gt; defined(UNITY_NO_SCREENSPACE_SHADOWS)
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        UNITY_DECLARE_SHADOWMAP(_ShadowMapTexture);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;#define&lt;/span&gt; TRANSFER_SHADOW(a) a._ShadowCoord = mul( unity_WorldToShadow[0], mul( unity_ObjectToWorld, v.vertex ) );
&lt;span&gt; 7&lt;/span&gt;         inline &lt;span&gt;fixed&lt;/span&gt;&lt;span&gt; unitySampleShadow (unityShadowCoord4 shadowCoord)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;#if&lt;/span&gt; defined(SHADOWS_NATIVE)
&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;fixed&lt;/span&gt; shadow =&lt;span&gt; UNITY_SAMPLE_SHADOW(_ShadowMapTexture, shadowCoord.xyz);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 shadow = _LightShadowData.r + shadow * (&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;_LightShadowData.r);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; shadow;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                 unityShadowCoord dist =&lt;span&gt; SAMPLE_DEPTH_TEXTURE(_ShadowMapTexture, shadowCoord.xy);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; tegra is confused if we use _LightShadowData.x directly
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; with &quot;ambiguous overloaded function reference max(mediump float, float)&quot;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                 unityShadowCoord lightShadowDataX =&lt;span&gt; _LightShadowData.x;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 unityShadowCoord threshold =&lt;span&gt; shadowCoord.z;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; max(dist &amp;gt;&lt;span&gt; threshold, lightShadowDataX);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;#else&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; UNITY_NO_SCREENSPACE_SHADOWS&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        UNITY_DECLARE_SCREENSPACE_SHADOWMAP(_ShadowMapTexture);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;#define&lt;/span&gt; TRANSFER_SHADOW(a) a._ShadowCoord = ComputeScreenPos(a.pos);
&lt;span&gt;26&lt;/span&gt;         inline &lt;span&gt;fixed&lt;/span&gt;&lt;span&gt; unitySampleShadow (unityShadowCoord4 shadowCoord)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;fixed&lt;/span&gt; shadow =&lt;span&gt; UNITY_SAMPLE_SCREEN_SHADOW(_ShadowMapTexture, shadowCoord);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; shadow;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;#define&lt;/span&gt; SHADOW_COORDS(idx1) unityShadowCoord4 _ShadowCoord : TEXCOORD##idx1;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;#define&lt;/span&gt; SHADOW_ATTENUATION(a) unitySampleShadow(a._ShadowCoord)
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当然，你可以不必过于深究，但需要注意的是，这三个宏是天生的三个好基友，如果关闭了阴影，那么 &lt;strong&gt;SHADOW_COORDS，TRANSFER_SHADOW 会不起作用，而 SHADOW_ATTENUATION 的值为 1 。那么漫反射颜色和高光反射颜色不受 shadow 影响。而且这些宏会使用 v.vertex 和 a.pos 等变量来计算，所以 a2v 顶点坐标变量必须为 vertex，输入结构体 a2v 必须命名为 v ，且 v2f 中顶点位置坐标为 pos。&lt;/strong&gt;&lt;/p&gt;


&lt;h3&gt;2.2.3 完善的的光照衰减和阴影管理&lt;/h3&gt;
&lt;p&gt;在之前实现前向渲染的时候，我们为了得到光照衰减值，对不同光源做了判断，然后将得到的结果与反射颜色相乘，在这一点上，阴影的计算过程类似。而幸运的是，Unity 为我们提供了一个内置宏 &lt;strong&gt;UNITY_LIGHT_ATTENUATION&lt;/strong&gt; 来同时得到光照衰减因子和阴影值。我们可以在 AutoLight 中找到它的定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; UNITY_LIGHT_ATTENUATION(destName, input, worldPos) \
&lt;span&gt;2&lt;/span&gt;         unityShadowCoord3 lightCoord = mul(unity_WorldToLight, unityShadowCoord4(worldPos, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)).xyz; \
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;fixed&lt;/span&gt; shadow =&lt;span&gt; UNITY_SHADOW_ATTENUATION(input, worldPos); \
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;fixed&lt;/span&gt; destName = tex2D(_LightTexture0, dot(lightCoord, lightCoord).rr).r *&lt;span&gt; shadow;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来，我们用它替换 Base Pass 和 Additional Pass 中对光照衰减和阴影的计算。代码和之前大部分都是一样的，所以这里就不分步讲解，给出完整代码。读者可以自行实现一下。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; Shader &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unity/01-Shadow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;    Properties
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;         _Diffuse (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Diffuse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Color) = (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;         _Specular (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Specular&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Color) = (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         _Gloss (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Gloss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Range(&lt;span&gt;8.0&lt;/span&gt;, &lt;span&gt;256&lt;/span&gt;)) = &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;    SubShader
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         Tags { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RenderType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Opaque&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;        Pass {
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt;             Tags { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LightMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ForwardBase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;         
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;            CGPROGRAM
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;             
&lt;span&gt; 19&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; multi_compile_fwdbase    
&lt;span&gt; 20&lt;/span&gt;             
&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; vertex vert
&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; fragment frag
&lt;span&gt; 23&lt;/span&gt;             
&lt;span&gt; 24&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lighting.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AutoLight.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;             
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;            fixed4 _Diffuse;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;            fixed4 _Specular;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt; _Gloss;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             
&lt;span&gt; 31&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; a2v {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;                float4 vertex : POSITION;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;                float3 normal : NORMAL;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;             
&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; v2f {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;                float4 pos : SV_POSITION;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;                float3 worldNormal : TEXCOORD0;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;                float3 worldPos : TEXCOORD1;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;                 SHADOW_COORDS(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             
&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;            v2f vert(a2v v) {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;                v2f o;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                 o.pos =&lt;span&gt; UnityObjectToClipPos(v.vertex);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;                 
&lt;span&gt; 47&lt;/span&gt;                 o.worldNormal =&lt;span&gt; UnityObjectToWorldNormal(v.normal);
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;                 
&lt;span&gt; 49&lt;/span&gt;                 o.worldPos =&lt;span&gt; mul(unity_ObjectToWorld, v.vertex).xyz;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                 
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;                TRANSFER_SHADOW(o);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; o;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;            fixed4 frag(v2f i) : SV_Target {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;                 fixed3 worldNormal =&lt;span&gt; normalize(i.worldNormal);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                 fixed3 worldLightDir =&lt;span&gt; normalize(_WorldSpaceLightPos0.xyz);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 
&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;                UNITY_LIGHT_ATTENUATION(atten,i,i.worldPos);
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;                 fixed3 ambient =&lt;span&gt; UNITY_LIGHTMODEL_AMBIENT.xyz;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;                 
&lt;span&gt; 63&lt;/span&gt;                  fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dot(worldNormal, worldLightDir));
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; 
&lt;span&gt; 65&lt;/span&gt;                  fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz -&lt;span&gt; i.worldPos.xyz);
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                  fixed3 halfDir = normalize(worldLightDir +&lt;span&gt; viewDir);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                  fixed3 specular = _LightColor0.rgb * _Specular.rgb  * pow(max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dot(worldNormal, halfDir)), _Gloss);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;                 
&lt;span&gt; 71&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; fixed4(ambient + (diffuse + specular) * atten, &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             
&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;            ENDCG
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        Pass {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt;             Tags { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LightMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ForwardAdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;            Blend One One
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;            CGPROGRAM
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             
&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; multi_compile_fwdadd
&lt;span&gt; 86&lt;/span&gt;             
&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; vertex vert
&lt;span&gt; 88&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; fragment frag
&lt;span&gt; 89&lt;/span&gt;             
&lt;span&gt; 90&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lighting.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AutoLight.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;             
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;            fixed4 _Diffuse;
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;            fixed4 _Specular;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt; _Gloss;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             
&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; a2v {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;                float4 vertex : POSITION;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;                float3 normal : NORMAL;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             
&lt;span&gt;102&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; v2f {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;                float4 pos : SV_POSITION;
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;                float3 worldNormal : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;                float3 worldPos : TEXCOORD1;
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;                 SHADOW_COORDS(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;            v2f vert(a2v v) {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;                v2f o;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                 o.pos =&lt;span&gt; UnityObjectToClipPos(v.vertex);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;                 
&lt;span&gt;114&lt;/span&gt;                 o.worldNormal =&lt;span&gt; UnityObjectToWorldNormal(v.normal);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;                 
&lt;span&gt;116&lt;/span&gt;                 o.worldPos =&lt;span&gt; mul(unity_ObjectToWorld, v.vertex).xyz;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;                TRANSFER_SHADOW(o);
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; o;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;             
&lt;span&gt;121&lt;/span&gt; &lt;span&gt;            fixed4 frag(v2f i) : SV_Target {
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                 fixed3 worldNormal =&lt;span&gt; normalize(i.worldNormal);
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;                #ifdef USING_DIRECTIONAL_LIGHT
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                     fixed3 worldLightDir =&lt;span&gt; normalize(_WorldSpaceLightPos0.xyz);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                 &lt;span&gt;#else&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;                     fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz -&lt;span&gt; i.worldPos.xyz);
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;                 
&lt;span&gt;129&lt;/span&gt;                 fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dot(worldNormal, worldLightDir));
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;                 
&lt;span&gt;131&lt;/span&gt;                 fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz -&lt;span&gt; i.worldPos.xyz);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                 fixed3 halfDir = normalize(worldLightDir +&lt;span&gt; viewDir);
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                 fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dot(worldNormal, halfDir)), _Gloss);
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;                 
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                UNITY_LIGHT_ATTENUATION(atten,i,i.worldPos);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                 
&lt;span&gt;137&lt;/span&gt; 
&lt;span&gt;138&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; fixed4((diffuse + specular) * atten, &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;             
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;            ENDCG
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;     FallBack &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Specular&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2.3 普通透明物体的阴影&lt;/h2&gt;
&lt;p&gt;光源效果体现于实物，如果一个物体是透明的，那么它肯定是没有影子，那在 shader 中，这是如何实现呢？ 用回我们在 &lt;a id=&quot;post_title_link_9717734&quot; href=&quot;https://www.cnblogs.com/BFXYMY/p/9717734.html&quot;&gt;【Unity Shader】（五） ------ 透明效果之半透明效果的实现及原理&lt;/a&gt; 实现的透明度测试并结合上面的代码，并把 Fallback 改为 VertexLit。看一下效果&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/18.png&quot; alt=&quot;&quot; width=&quot;697&quot; height=&quot;469&quot;/&gt;&lt;/p&gt;

&lt;p&gt;可以看到阴影部分其实是相当于整个正方体的阴影，但事实上，镂空区域不应该有阴影。这是因为 VertexLit 中处理阴影的 Pass 并没有做透明度测试的计算。所以为了提供这样的一个 Pass ，我们可以更改 Fallback 为 &quot;Transparent/Cutout/VertexLit&quot; 。&lt;strong&gt;要注意的是，需要提供一个 _CutOff 的属性和 SHADOW_COORDS 的索引值&lt;/strong&gt;。现在看一下效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/BFXYMY/ShaderPictureForBlog/master/%E5%A4%8D%E6%9D%82%E5%85%89%E7%85%A7%EF%BC%88%E4%B8%8B%EF%BC%89/20.png&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;440&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是属于正常的结果。另外关于透明度混合的物体添加阴影会更加的复杂麻烦，有兴趣的读者可以自行思考与实现一下，这里就不再赘述了。&lt;/p&gt;


&lt;p&gt;emmm，在之前就提到过会给出完整的一个光照 shader ，现在我们给出一个包含了纹理计算，光照计算，阴影计算，基于 Blinn-Phong 的高光发射 shader。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;105&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; Shader &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unity/BumpedSpecular&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;    Properties {
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;         _Color (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Color Tint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Color) = (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;         _MainTex (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main Tex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 2D) = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;         _BumpMap (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Normal Map&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 2D) = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bump&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;         _Specular (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Specular Color&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Color) = (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         _Gloss (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Gloss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Range(&lt;span&gt;8.0&lt;/span&gt;, &lt;span&gt;256&lt;/span&gt;)) = &lt;span&gt;20&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;    SubShader {
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         Tags { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RenderType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Opaque&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Queue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;        Pass { 
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;             Tags { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LightMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ForwardBase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;            CGPROGRAM
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;             
&lt;span&gt; 17&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; multi_compile_fwdbase    
&lt;span&gt; 18&lt;/span&gt;             
&lt;span&gt; 19&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; vertex vert
&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; fragment frag
&lt;span&gt; 21&lt;/span&gt;             
&lt;span&gt; 22&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UnityCG.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lighting.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AutoLight.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;             
&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;            fixed4 _Color;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;            sampler2D _MainTex;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;            float4 _MainTex_ST;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;            sampler2D _BumpMap;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;            float4 _BumpMap_ST;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;            fixed4 _Specular;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt; _Gloss;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;             
&lt;span&gt; 34&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; a2v {
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;                float4 vertex : POSITION;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;                float3 normal : NORMAL;
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;                float4 tangent : TANGENT;
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;                float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;             
&lt;span&gt; 41&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; v2f {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;                float4 pos : SV_POSITION;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;                float4 uv : TEXCOORD0;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;                float4 TtoW0 : TEXCOORD1;  
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;                                float4 TtoW1 : TEXCOORD2;  
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;                                float4 TtoW2 : TEXCOORD3; 
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;                 SHADOW_COORDS(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;            v2f vert(a2v v) {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;                 v2f o;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                  o.pos =&lt;span&gt; mul(UNITY_MATRIX_MVP, v.vertex);
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;              
&lt;span&gt; 54&lt;/span&gt;                  o.uv.xy = v.texcoord.xy * _MainTex_ST.xy +&lt;span&gt; _MainTex_ST.zw;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                  o.uv.zw = v.texcoord.xy * _BumpMap_ST.xy +&lt;span&gt; _BumpMap_ST.zw;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;                TANGENT_SPACE_ROTATION;
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 
&lt;span&gt; 59&lt;/span&gt;                 float3 worldPos =&lt;span&gt; mul(_Object2World, v.vertex).xyz;  
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;                                 fixed3 worldNormal =&lt;span&gt; UnityObjectToWorldNormal(v.normal);  
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;                                 fixed3 worldTangent =&lt;span&gt; UnityObjectToWorldDir(v.tangent.xyz);  
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;                                 fixed3 worldBinormal = cross(worldNormal, worldTangent) *&lt;span&gt; v.tangent.w; 
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                 
&lt;span&gt; 64&lt;/span&gt;                                 o.TtoW0 =&lt;span&gt; float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);  
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;                                 o.TtoW1 =&lt;span&gt; float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);  
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                                 o.TtoW2 =&lt;span&gt; float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);  
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                   
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;                  TRANSFER_SHADOW(o);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;                  
&lt;span&gt; 70&lt;/span&gt;                  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; o;
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;             
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;            fixed4 frag(v2f i) : SV_Target {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                 float3 worldPos =&lt;span&gt; float3(i.TtoW0.w, i.TtoW1.w, i.TtoW2.w);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                 fixed3 lightDir =&lt;span&gt; normalize(UnityWorldSpaceLightDir(worldPos));
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                 fixed3 viewDir =&lt;span&gt; normalize(UnityWorldSpaceViewDir(worldPos));
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                 
&lt;span&gt; 78&lt;/span&gt;                 fixed3 bump =&lt;span&gt; UnpackNormal(tex2D(_BumpMap, i.uv.zw));
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                 bump =&lt;span&gt; normalize(half3(dot(i.TtoW0.xyz, bump), dot(i.TtoW1.xyz, bump), dot(i.TtoW2.xyz, bump)));
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;                 fixed3 albedo = tex2D(_MainTex, i.uv.xy).rgb *&lt;span&gt; _Color.rgb;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 
&lt;span&gt; 83&lt;/span&gt;                 fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz *&lt;span&gt; albedo;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;                 
&lt;span&gt; 85&lt;/span&gt;                  fixed3 diffuse = _LightColor0.rgb * albedo * max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dot(bump, lightDir));
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;                  
&lt;span&gt; 87&lt;/span&gt;                  fixed3 halfDir = normalize(lightDir +&lt;span&gt; viewDir);
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                  fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dot(bump, halfDir)), _Gloss);
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;                UNITY_LIGHT_ATTENUATION(atten, i, worldPos);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; fixed4(ambient + (diffuse + specular) * atten, &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;            ENDCG
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        Pass { 
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             Tags { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LightMode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ForwardAdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;            Blend One One
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;            CGPROGRAM
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             
&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; multi_compile_fwdadd
&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use the line below to add shadows for point and spot lights
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            #pragma multi_compile_fwdadd_fullshadows&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;             
&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; vertex vert
&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;#pragma&lt;/span&gt; fragment frag
&lt;span&gt;111&lt;/span&gt;             
&lt;span&gt;112&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Lighting.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;             #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AutoLight.cginc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;             
&lt;span&gt;115&lt;/span&gt; &lt;span&gt;            fixed4 _Color;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;            sampler2D _MainTex;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;            float4 _MainTex_ST;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;            sampler2D _BumpMap;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;            float4 _BumpMap_ST;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt; _BumpScale;
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;            fixed4 _Specular;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;             &lt;span&gt;float&lt;/span&gt;&lt;span&gt; _Gloss;
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;             
&lt;span&gt;124&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; a2v {
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;                float4 vertex : POSITION;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;                float3 normal : NORMAL;
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;                float4 tangent : TANGENT;
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;                float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;             
&lt;span&gt;131&lt;/span&gt;             &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; v2f {
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;                float4 pos : SV_POSITION;
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;                float4 uv : TEXCOORD0;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;                float4 TtoW0 : TEXCOORD1;  
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                                float4 TtoW1 : TEXCOORD2;  
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;                                float4 TtoW2 : TEXCOORD3;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;                 SHADOW_COORDS(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;             
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;            v2f vert(a2v v) {
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;                 v2f o;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                  o.pos =&lt;span&gt; mul(UNITY_MATRIX_MVP, v.vertex);
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;              
&lt;span&gt;144&lt;/span&gt;                  o.uv.xy = v.texcoord.xy * _MainTex_ST.xy +&lt;span&gt; _MainTex_ST.zw;
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;                  o.uv.zw = v.texcoord.xy * _BumpMap_ST.xy +&lt;span&gt; _BumpMap_ST.zw;
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; 
&lt;span&gt;147&lt;/span&gt;                 float3 worldPos =&lt;span&gt; mul(_Object2World, v.vertex).xyz;  
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                                 fixed3 worldNormal =&lt;span&gt; UnityObjectToWorldNormal(v.normal);  
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;                                 fixed3 worldTangent =&lt;span&gt; UnityObjectToWorldDir(v.tangent.xyz);  
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;                                 fixed3 worldBinormal = cross(worldNormal, worldTangent) *&lt;span&gt; v.tangent.w; 
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;     
&lt;span&gt;152&lt;/span&gt;                   o.TtoW0 =&lt;span&gt; float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;                   o.TtoW1 =&lt;span&gt; float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;                   o.TtoW2 =&lt;span&gt; float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);  
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;                  
&lt;span&gt;156&lt;/span&gt; &lt;span&gt;                 TRANSFER_SHADOW(o);
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;                  
&lt;span&gt;158&lt;/span&gt;                  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; o;
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             
&lt;span&gt;161&lt;/span&gt; &lt;span&gt;            fixed4 frag(v2f i) : SV_Target {
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;                 float3 worldPos =&lt;span&gt; float3(i.TtoW0.w, i.TtoW1.w, i.TtoW2.w);
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;                 fixed3 lightDir =&lt;span&gt; normalize(UnityWorldSpaceLightDir(worldPos));
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;                 fixed3 viewDir =&lt;span&gt; normalize(UnityWorldSpaceViewDir(worldPos));
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;                 
&lt;span&gt;166&lt;/span&gt;                 fixed3 bump =&lt;span&gt; UnpackNormal(tex2D(_BumpMap, i.uv.zw));
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;                 bump =&lt;span&gt; normalize(half3(dot(i.TtoW0.xyz, bump), dot(i.TtoW1.xyz, bump), dot(i.TtoW2.xyz, bump)));
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;                 
&lt;span&gt;169&lt;/span&gt;                 fixed3 albedo = tex2D(_MainTex, i.uv.xy).rgb *&lt;span&gt; _Color.rgb;
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;                 
&lt;span&gt;171&lt;/span&gt;                  fixed3 diffuse = _LightColor0.rgb * albedo * max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dot(bump, lightDir));
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;                  
&lt;span&gt;173&lt;/span&gt;                  fixed3 halfDir = normalize(lightDir +&lt;span&gt; viewDir);
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;                  fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, dot(bump, halfDir)), _Gloss);
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;             
&lt;span&gt;176&lt;/span&gt; &lt;span&gt;                UNITY_LIGHT_ATTENUATION(atten, i, worldPos);
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; 
&lt;span&gt;178&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; fixed4((diffuse + specular) * atten, &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;             
&lt;span&gt;181&lt;/span&gt; &lt;span&gt;            ENDCG
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;    } 
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;     FallBack &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Specular&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关于光照衰减我们通常是&lt;strong&gt;使用 LUT 来得到衰减值&lt;/strong&gt;，这样在大部分情况下都能得到良好的效果且能提升性能。当然，如果是为了保持灵活性，我们也可以使用最原始的数学公式。&lt;/p&gt;
&lt;p&gt;关于阴影，我们需要知道的是，&lt;strong&gt;光源需要开启阴影效果；物体的要开启 CasterShadow，让自身加入阴影映射纹理的计算，这样周围的物体才可以接收到自身投射的阴影&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;阴影映射纹理本质上是一张深度图，这个技术原本是延迟渲染产生阴影的方法，也正好解释了我们之前所说的延迟渲染不依赖于场景的复杂度，而依赖于屏幕空间大小。需要注意的是这个技术是在 Unity 5.0 之后才有的，它&lt;strong&gt;要求显卡支持 MRT，即表明这个技术对硬件有要求&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;最后，本文和上一篇 &lt;a id=&quot;post_title_link_9786098&quot; href=&quot;https://www.cnblogs.com/BFXYMY/p/9786098.html&quot;&gt;【Unity Shader】（六） ------ 复杂的光照（上）&lt;/a&gt;都介绍了许多理论知识，看起来十分的枯燥，但我还是衷心地希望本文能对你有所帮助。&lt;/p&gt;
</description>
<pubDate>Thu, 25 Oct 2018 16:00:00 +0000</pubDate>
<dc:creator>爱喝柠檬的二哈</dc:creator>
<og:description>笔者使用的是 Unity 2018.2.0f2 + VS2017，建议读者使用与 Unity 2018 相近的版本，避免一些因为版本不一致而出现的问题。 目录 前言 一. 光照衰减 1.1 使用 LU</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/BFXYMY/p/9839424.html</dc:identifier>
</item>
</channel>
</rss>