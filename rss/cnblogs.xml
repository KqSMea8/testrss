<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Laravel-错误调试与记录日志 - 凑阿屎</title>
<link>http://www.cnblogs.com/yanweifeng/p/9505424.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yanweifeng/p/9505424.html</guid>
<description>&lt;p&gt;标签（空格分隔）： php&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;错误调试&quot;&gt;错误调试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;修改/config/app.php

'debug' =&amp;gt; env('APP_DEBUG', true),

开启debug为true 当代码有错误时会有提示，不然的话 [Whoops, looks like something went wrong.] 一头雾水不知道什么意思&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1458583/201808/1458583-20180820144953728-2086667513.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;记录日志&quot;&gt;记录日志&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;修改/config/app.php

/*
|--------------------------------------------------------------------------
| Logging Configuration
|--------------------------------------------------------------------------
|
| Here you may configure the log settings for your application. Out of
| the box, Laravel uses the Monolog PHP logging library. This gives
| you a variety of powerful log handlers / formatters to utilize.
|
| Available Settings: &quot;single&quot;, &quot;daily&quot;, &quot;syslog&quot;, &quot;errorlog&quot;
|
*/

'log' =&amp;gt; env('APP_LOG', 'single'),

'log_level' =&amp;gt; env('APP_LOG_LEVEL', 'debug'),

有 Available Settings: &quot;single&quot;, &quot;daily&quot;, &quot;syslog&quot;, &quot;errorlog&quot; 这几个选项&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;操作&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;该日志记录器提供了RFC 5424中定义的八种日志级别：emergency、alert、critical、error、warning、notice、info 和 debug

Log::emergency($error);
Log::alert($error);
Log::critical($error);
Log::error($error);
Log::warning($error);
Log::notice($error);
Log::info($error);
Log::debug($error);

----------------------------

也可以通过辅助函数
info($error) info级别
logger($error) debug级别&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 21 Aug 2018 07:45:00 +0000</pubDate>
<dc:creator>凑阿屎</dc:creator>
<og:description>Laravel 错误调试与记录日志 标签（空格分隔）： php 错误调试 配置 修改/config/app.php 'debug' = env('APP_DEBUG', true), 开启debug为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yanweifeng/p/9505424.html</dc:identifier>
</item>
<item>
<title>C++ 方格取数 - FXY_ssf</title>
<link>http://www.cnblogs.com/FXY-180/p/9511755.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/FXY-180/p/9511755.html</guid>
<description>&lt;p&gt;试题描述：&lt;/p&gt;
&lt;p&gt;设有N×N的方格图，我们在其中的某些方格中填入正整数，而其它的方格中则放入数字0。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://10.91.117.81/oj/upfile/1517973422117.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;某人从图中的左上角的A出发，可以向下行走，也可以向右行走，直到达右下角的B点。在走过的路上，他可以取走方格中的数(取走后的方格中将变为数字0)。&lt;/p&gt;
&lt;p&gt;此人从A点到B点共走了两次，试找出两条这样的路径，使得取得的数字和为最大。&lt;/p&gt;

&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;输入第一行为一个整数N（N≤10），表示N×N的方格图。&lt;br/&gt;接下来的每行有三个整数，第一个为行号数，第二个为列号数，第三个为在该行、该列上所放的数。一行0 0 0表示结束。&lt;/p&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;输出包含一个整数，表示两条路径上取得的最大的和。&lt;/p&gt;

&lt;p&gt;输入示例：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;blueBg&quot;&gt;8&lt;br/&gt;2 3 13&lt;br/&gt;2 6 6&lt;br/&gt;3 5 7&lt;br/&gt;4 4 14&lt;br/&gt;5 2 21&lt;br/&gt;5 6 4&lt;br/&gt;6 3 15&lt;br/&gt;7 2 14&lt;br/&gt;0 0 0&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;blueBg&quot;&gt;输出示例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;blueBg&quot;&gt;67&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;blueBg&quot;&gt;代码：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;19.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cmath&amp;gt;
#include&amp;lt;cstring&amp;gt;
#include&amp;lt;cstdio&amp;gt;
using namespace std;
const int xx[2]={0,-1},yy[2]={-1,0};
int f[20][20][20][20],a[20][20];
int x,y,z,nx1,ny1,nx2,ny2,n;
int main()
{
        cin&amp;gt;&amp;gt;n;
        cin&amp;gt;&amp;gt;x&amp;gt;&amp;gt;y&amp;gt;&amp;gt;z;
        while(x)
        {
                a[x][y]=z;
                cin&amp;gt;&amp;gt;x&amp;gt;&amp;gt;y&amp;gt;&amp;gt;z;
        }
        for(int x1=1;x1&amp;lt;=n;++x1)
        for(int y1=1;y1&amp;lt;=n;++y1)
        for(int x2=1;x2&amp;lt;=n;++x2)
    for(int y2=1;y2&amp;lt;=n;++y2){
        for(int i=0;i&amp;lt;2;++i)
        for(int j=0;j&amp;lt;2;++j){
                nx1=x1+xx[i];
                ny1=y1+yy[i];
                nx2=x2+xx[j];
                ny2=y2+yy[j];
                f[x1][y1][x2][y2]=max(f[x1][y1][x2][y2],f[nx1][ny1][nx2][ny2]);
                }
                f[x1][y1][x2][y2]=f[x1][y1][x2][y2]+a[x1][y1]+a[x2][y2];
                if(x1==x2&amp;amp;&amp;amp;y1==y2)f[x1][y1][x2][y2]-=a[x2][y2];
        }
        cout&amp;lt;&amp;lt;f[n][n][n][n];
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 四维数组，二维数组有一些麻烦。&lt;/p&gt;
&lt;p&gt;xx和yy用于向两个方向dfs。&lt;/p&gt;
&lt;p&gt;最后再进行一次max。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 21 Aug 2018 07:44:00 +0000</pubDate>
<dc:creator>FXY_ssf</dc:creator>
<og:description>试题描述： 设有N×N的方格图，我们在其中的某些方格中填入正整数，而其它的方格中则放入数字0。如下图所示： 某人从图中的左上角的A出发，可以向下行走，也可以向右行走，直到达右下角的B点。在走</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/FXY-180/p/9511755.html</dc:identifier>
</item>
<item>
<title>日志打入kafka改造历程-我们到底能走多远系列49 - 每当变幻时</title>
<link>http://www.cnblogs.com/killbug/p/9506808.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/killbug/p/9506808.html</guid>
<description>&lt;h3 id=&quot;方案&quot;&gt;方案&lt;/h3&gt;
&lt;p&gt;日志收集的方案有很多，包括各种日志过滤清洗，分析，统计，而且看起来都很高大上。本文只描述一个打入kafka的功能。&lt;br/&gt;流程：app-&amp;gt;kafka-&amp;gt;logstash-&amp;gt;es-&amp;gt;kibana&lt;br/&gt;业务应用直接将日志打入kafka，然后由logstash消费，数据进入es。&lt;br/&gt;另一方面，应用在服务器上会打日志文件。&lt;/p&gt;
&lt;h6 id=&quot;如图&quot;&gt;如图：&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/367180/201808/367180-20180821093514913-1815476354.jpg&quot; width=&quot;320&quot; hegiht=&quot;200&quot; align=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;详细&quot;&gt;详细&lt;/h3&gt;
&lt;h4 id=&quot;初步实现&quot;&gt;初步实现&lt;/h4&gt;
&lt;p&gt;首先，我们来初步实现这个方案，搭建elk略去不谈，其中特别注意各个版本的兼容。这里主要在代码层面讲解如何实现的历程。&lt;br/&gt;要将日志数据写入kafka，我们想只要依赖官方提供的kafka client就可以了，翻看github，有现成的：&lt;a href=&quot;https://github.com/danielwegener/logback-kafka-appender&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没多少代码，通看一遍，在此基础上进行修改即可。&lt;br/&gt;以下代码在spring boot框架基础。&lt;br/&gt;核心appender代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class KafkaAppender&amp;lt;E&amp;gt; extends KafkaAppenderConfig&amp;lt;E&amp;gt; {

    /**
     * Kafka clients uses this prefix for its slf4j logging.
     * This appender defers appends of any Kafka logs since it could cause harmful infinite recursion/self feeding effects.
     */
    private static final String KAFKA_LOGGER_PREFIX = &quot;org.apache.kafka.clients&quot;;

    public static final Logger logger = LoggerFactory.getLogger(KafkaAppender.class);

    private LazyProducer lazyProducer = null;
    private final AppenderAttachableImpl&amp;lt;E&amp;gt; aai = new AppenderAttachableImpl&amp;lt;E&amp;gt;();
    private final ConcurrentLinkedQueue&amp;lt;E&amp;gt; queue = new ConcurrentLinkedQueue&amp;lt;E&amp;gt;();
    private final FailedDeliveryCallback&amp;lt;E&amp;gt; failedDeliveryCallback = new FailedDeliveryCallback&amp;lt;E&amp;gt;() {
        @Override
        public void onFailedDelivery(E evt, Throwable throwable) {
            aai.appendLoopOnAppenders(evt);
        }
    };

    public KafkaAppender() {
        // setting these as config values sidesteps an unnecessary warning (minor bug in KafkaProducer)
        addProducerConfigValue(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());
        addProducerConfigValue(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());
    }

    @Override
    public void doAppend(E e) {
        ensureDeferredAppends();
        if (e instanceof ILoggingEvent &amp;amp;&amp;amp; ((ILoggingEvent)e).getLoggerName().startsWith(KAFKA_LOGGER_PREFIX)) {
            deferAppend(e);
        } else {
            super.doAppend(e);
        }
    }

    @Override
    public void start() {
        // only error free appenders should be activated
        if (!checkPrerequisites()) return;

        lazyProducer = new LazyProducer();
        super.start();
    }

    @Override
    public void stop() {
        super.stop();
        if (lazyProducer != null &amp;amp;&amp;amp; lazyProducer.isInitialized()) {
            try {
                lazyProducer.get().close();
            } catch (KafkaException e) {
                this.addWarn(&quot;Failed to shut down kafka producer: &quot; + e.getMessage(), e);
            }
            lazyProducer = null;
        }
    }

    @Override
    public void addAppender(Appender&amp;lt;E&amp;gt; newAppender) {
        aai.addAppender(newAppender);
    }

    @Override
    public Iterator&amp;lt;Appender&amp;lt;E&amp;gt;&amp;gt; iteratorForAppenders() {
        return aai.iteratorForAppenders();
    }

    @Override
    public Appender&amp;lt;E&amp;gt; getAppender(String name) {
        return aai.getAppender(name);
    }

    @Override
    public boolean isAttached(Appender&amp;lt;E&amp;gt; appender) {
        return aai.isAttached(appender);
    }

    @Override
    public void detachAndStopAllAppenders() {
        aai.detachAndStopAllAppenders();
    }

    @Override
    public boolean detachAppender(Appender&amp;lt;E&amp;gt; appender) {
        return aai.detachAppender(appender);
    }

    @Override
    public boolean detachAppender(String name) {
        return aai.detachAppender(name);
    }

    @Override
    protected void append(E e) {
        // encode 逻辑
        final byte[] payload = encoder.doEncode(e);
        final byte[] key = keyingStrategy.createKey(e);
        final ProducerRecord&amp;lt;byte[], byte[]&amp;gt; record = new ProducerRecord&amp;lt;byte[],byte[]&amp;gt;(topic, key, payload);
        Producer producer = lazyProducer.get();
        if(producer == null){
            logger.error(&quot;kafka producer is null&quot;);
            return;
        }
        // 核心发送方法
        deliveryStrategy.send(lazyProducer.get(), record, e, failedDeliveryCallback);
    }

    protected Producer&amp;lt;byte[], byte[]&amp;gt; createProducer() {
        return new KafkaProducer&amp;lt;byte[], byte[]&amp;gt;(new HashMap&amp;lt;String, Object&amp;gt;(producerConfig));
    }

    private void deferAppend(E event) {
        queue.add(event);
    }

    // drains queue events to super
    private void ensureDeferredAppends() {
        E event;

        while ((event = queue.poll()) != null) {
            super.doAppend(event);
        }
    }

    /**
     * Lazy initializer for producer, patterned after commons-lang.
     *
     * @see &amp;lt;a href=&quot;https://commons.apache.org/proper/commons-lang/javadocs/api-3.4/org/apache/commons/lang3/concurrent/LazyInitializer.html&quot;&amp;gt;LazyInitializer&amp;lt;/a&amp;gt;
     */
    private class LazyProducer {

        private volatile Producer&amp;lt;byte[], byte[]&amp;gt; producer;

        private boolean initialized;
        public Producer&amp;lt;byte[], byte[]&amp;gt; get() {
            Producer&amp;lt;byte[], byte[]&amp;gt; result = this.producer;
            if (result == null) {
                synchronized(this) {
                    if(!initialized){
                        result = this.producer;
                        if(result == null) {
                            // 注意 这里initialize可能失败，比如传入servers为非法字符，返回producer为空，所以只用initialized标记来确保不进行重复初始化，而避免不断出错的初始化
                            this.producer = result = this.initialize();
                            initialized = true;
                        }
                    }
                }
            }

            return result;
        }

        protected Producer&amp;lt;byte[], byte[]&amp;gt; initialize() {
            Producer&amp;lt;byte[], byte[]&amp;gt; producer = null;
            try {
                producer = createProducer();
            } catch (Exception e) {
                addError(&quot;error creating producer&quot;, e);
            }
            return producer;
        }

        public boolean isInitialized() { return producer != null; }
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上代码对&lt;code&gt;producer&lt;/code&gt;生产时进行initialized标记，确保在异常场景时只生产一次。&lt;br/&gt;在实际场景中比如我们的servers配置非ip的字符，initialize方法会返回null，因为判断是否进行initialize()方法是判断&lt;code&gt;producer&lt;/code&gt;是否为空，所以进入不断失败的情况，从而导致应用启动失败。&lt;br/&gt;配置logback-spring.xml:&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;springProperty scope=&quot;context&quot; name=&quot;LOG_KAFKA_SERVERS&quot; source=&quot;application.log.kafka.bootstrap.servers&quot;/&amp;gt;
&amp;lt;springProperty scope=&quot;context&quot; name=&quot;LOG_KAFKA_TOPIC&quot; source=&quot;application.log.kafka.topic&quot;/&amp;gt;
&amp;lt;appender name=&quot;KafkaAppender&quot; class=&quot;com.framework.common.log.kafka.KafkaAppender&quot;&amp;gt;
    &amp;lt;topic&amp;gt;${LOG_KAFKA_TOPIC}&amp;lt;/topic&amp;gt;
    &amp;lt;producerConfig&amp;gt;bootstrap.servers=${LOG_KAFKA_SERVERS}&amp;lt;/producerConfig&amp;gt;
&amp;lt;/appender&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;bootstrap.properties配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;application.log.kafka.bootstrap.servers=10.0.11.55:9092
application.log.kafka.topic=prod-java&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在打入kafka的json进行自定义，上面的encoder.doEncode(e)进行扩展：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class FormatKafkaMessageEncoder&amp;lt;E&amp;gt; extends KafkaMessageEncoderBase&amp;lt;E&amp;gt; {

    protected static final int BUILDER_CAPACITY = 2048;
    protected static final int LENGTH_OPTION  = 2048;
    public static final String CAUSED_BY = &quot;Caused by: &quot;;
    public static final String SUPPRESSED = &quot;Suppressed: &quot;;
    public static final char TAB = '\t';

    public byte[] encode(ILoggingEvent event) {
        Map&amp;lt;String, String&amp;gt; formatMap = new HashMap&amp;lt;&amp;gt;();
        formatMap.put(&quot;timestamp&quot;, event.getTimeStamp()!=0?String.valueOf(new Date(event.getTimeStamp())):&quot;&quot;);
        formatMap.put(&quot;span&quot;, event.getMDCPropertyMap()!=null?event.getMDCPropertyMap().get(&quot;X-B3-SpanId&quot;):&quot;&quot;);
        formatMap.put(&quot;trace&quot;, event.getMDCPropertyMap()!=null?event.getMDCPropertyMap().get(&quot;X-B3-TraceId&quot;):&quot;&quot;);
        formatMap.put(&quot;class&quot;, event.getLoggerName());
        formatMap.put(&quot;level&quot;, event.getLevel() != null?event.getLevel().toString():&quot;&quot;);
        formatMap.put(&quot;message&quot;, event.getMessage());
        formatMap.put(&quot;stacktrace&quot;, event.getThrowableProxy()!=null?convertStackTrace(event.getThrowableProxy()):&quot;&quot;);
        formatMap.put(&quot;thread&quot;, event.getThreadName());
        formatMap.put(&quot;ip&quot;, IpUtil.getLocalIP());
        formatMap.put(&quot;application&quot;, event.getLoggerContextVO()!=null&amp;amp;&amp;amp;event.getLoggerContextVO().getPropertyMap()!=null?
                event.getLoggerContextVO().getPropertyMap().get(&quot;springAppName&quot;):&quot;&quot;);

        String formatJson = JSONObject.toJSONString(formatMap);

        return formatJson.getBytes();
    }

    @Override
    public byte[] doEncode(E event) {
        return encode((ILoggingEvent) event);
    }


    public String convertStackTrace(IThrowableProxy tp){
        StringBuilder sb = new StringBuilder(BUILDER_CAPACITY);

        recursiveAppend(sb, tp, null);

        return sb.toString();
    }

    private void recursiveAppend(StringBuilder sb, IThrowableProxy tp, String prefix) {
        if(tp == null){
            return;
        }
        if (prefix != null) {
            sb.append(prefix);
        }
        sb.append(tp.getClassName()).append(&quot;: &quot;).append(tp.getMessage());
        sb.append(CoreConstants.LINE_SEPARATOR);
        StackTraceElementProxy[] stepArray = tp.getStackTraceElementProxyArray();
        boolean unrestrictedPrinting = LENGTH_OPTION &amp;gt; stepArray.length;
        int maxIndex = (unrestrictedPrinting) ? stepArray.length : LENGTH_OPTION;

        for (int i = 0; i &amp;lt; maxIndex; i++) {
            sb.append(TAB);
            StackTraceElementProxy element = stepArray[i];
            sb.append(element);
            sb.append(CoreConstants.LINE_SEPARATOR);
        }

        IThrowableProxy[] suppressed = tp.getSuppressed();
        if (suppressed != null) {
            for (IThrowableProxy current : suppressed) {
                recursiveAppend(sb, current, SUPPRESSED);
            }
        }

        recursiveAppend(sb, tp.getCause(), CAUSED_BY);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中recursiveAppend方法是模仿&lt;code&gt;ch.qos.logback.classic.spi.ThrowableProxyUtil&lt;/code&gt;,用来答应异常的全部堆栈。&lt;br/&gt;还有这个ip的获取问题，&lt;code&gt;InetAddress.getLocalHost().getHostAddress()&lt;/code&gt;解决不了。&lt;br/&gt;以下是详细代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class IpUtil {

    public static final String DEFAULT_IP = &quot;127.0.0.1&quot;;

    public static String cacheLocalIp = null;

    private static Logger logger = LoggerFactory.getLogger(IpUtil.class);

    /**
     * 直接根据第一个网卡地址作为其内网ipv4地址，避免返回 127.0.0.1
     *
     * @return
     */
    private static String getLocalIpByNetworkCard() {
        String ip = null;
        try {
            for (Enumeration&amp;lt;NetworkInterface&amp;gt; e = NetworkInterface.getNetworkInterfaces(); e.hasMoreElements(); ) {
                NetworkInterface item = e.nextElement();
                for (InterfaceAddress address : item.getInterfaceAddresses()) {
                    if (item.isLoopback() || !item.isUp()) {
                        continue;
                    }
                    if (address.getAddress() instanceof Inet4Address) {
                        Inet4Address inet4Address = (Inet4Address) address.getAddress();
                        ip = inet4Address.getHostAddress();
                    }
                }
            }
        } catch (Exception e) {
            logger.error(&quot;getLocalIpByNetworkCard error&quot;, e);
            try {
                ip = InetAddress.getLocalHost().getHostAddress();
            } catch (Exception e1) {
                logger.error(&quot;InetAddress.getLocalHost().getHostAddress() error&quot;, e1);
                ip = DEFAULT_IP;
            }
        }

        return ip == null ? DEFAULT_IP : ip;
    }

    public synchronized static String getLocalIP() {
        if(cacheLocalIp == null){
            cacheLocalIp = getLocalIpByNetworkCard();
            return cacheLocalIp;
        }else{
            return cacheLocalIp;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;另外在logback-spring.xml中配置了本地日志appender：&lt;/p&gt;
&lt;pre class=&quot;xml&quot;&gt;
&lt;code&gt;&amp;lt;!-- 按照每天生成日志文件 --&amp;gt;
   &amp;lt;appender name=&quot;filelog&quot;  class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&amp;gt;
       &amp;lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&amp;gt;
           &amp;lt;!-- rollover daily --&amp;gt;
           &amp;lt;fileNamePattern&amp;gt;${LOG_FOLDER}/${springAppName}.%d{yyyy-MM-dd}.%i.log&amp;lt;/fileNamePattern&amp;gt;
           &amp;lt;!-- each file should be at most 100MB, keep 6 days worth of history--&amp;gt;
           &amp;lt;maxFileSize&amp;gt;300MB&amp;lt;/maxFileSize&amp;gt;
           &amp;lt;!--历史文件保留个数--&amp;gt;
           &amp;lt;maxHistory&amp;gt;5&amp;lt;/maxHistory&amp;gt;
       &amp;lt;/rollingPolicy&amp;gt;
       &amp;lt;encoder&amp;gt;
           &amp;lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&amp;gt;
           &amp;lt;pattern&amp;gt;${CONSOLE_LOG_PATTERN}&amp;lt;/pattern&amp;gt;
       &amp;lt;/encoder&amp;gt;
   &amp;lt;/appender&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意这里使用SizeAndTimeBasedRollingPolicy而不是使用TimeBasedRollingPolicy+SizeBasedTriggeringPolicy。&lt;br/&gt;后者是按文件大小优先级最高不会自动按日期生成新的log文件。&lt;/p&gt;
&lt;p&gt;至此，一个打入kafka日志的代码就算完结了，功能完全，执行正确。&lt;/p&gt;
&lt;h4 id=&quot;异常场景&quot;&gt;异常场景&lt;/h4&gt;
&lt;p&gt;思考下，在启动应用或在应用运行时，kafka无法正确接收信息，比如挂掉了。那么这个打日志的功能会怎么表现呢？&lt;br/&gt;当然是每次写日志都会尝试去连kafka，但是失败，必然影响应用状态。&lt;br/&gt;所以想到熔断的思路，假设kafka挂掉，可以通过熔断的方式降低对应用的影响。&lt;br/&gt;这里就实现了一下熔断器的逻辑。&lt;/p&gt;
&lt;h6 id=&quot;状态流转图&quot;&gt;状态流转图：&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/367180/201808/367180-20180821092744386-105258929.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;熔断器：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
*   @desc    熔断器
 *          1，使用failureCount和consecutiveSuccessCount控制断路器状态的流转，两者都使用了AtomicInteger以确保并发场数量的精准
 *          2，successCount 没有使用AtomicInteger 不确保准确性
 *          3，failureThreshold,consecutiveSuccessThreshold,timeout参数非法赋默认值
*/
public class CircuitBreaker {

    private static final Logger logger = LoggerFactory.getLogger(CircuitBreaker.class);

    private String name;

    /**
     * 熔断器状态
     */
    private CircuitBreakerState state;

    /**
     * 失败次数阀值
     */
    private int failureThreshold;

    /**
     * 熔断状态时间窗口
     */
    private long timeout;

    /**
     * 失败次数
     */
    private AtomicInteger failureCount;

    /**
     * 成功次数 （并发不准确）
     */
    private int successCount;

    /**
     * 半开时间窗口里连续成功的次数
     */
    private AtomicInteger consecutiveSuccessCount;

    /**
     * 半开时间窗口里连续成功的次数阀值
     */
    private int consecutiveSuccessThreshold;

    public CircuitBreaker(String name, int failureThreshold, int consecutiveSuccessThreshold, long timeout) {
        if(failureThreshold &amp;lt;= 0){
            failureThreshold = 1;
        }
        if(consecutiveSuccessThreshold &amp;lt;= 0){
            consecutiveSuccessThreshold = 1;
        }
        if(timeout &amp;lt;= 0){
            timeout = 10000;
        }
        this.name = name;
        this.failureThreshold = failureThreshold;
        this.consecutiveSuccessThreshold = consecutiveSuccessThreshold;
        this.timeout = timeout;
        this.failureCount = new AtomicInteger(0);
        this.consecutiveSuccessCount = new AtomicInteger(0);
        state = new CloseCircuitBreakerState(this);
    }

    public void increaseFailureCount(){
        failureCount.addAndGet(1);
    }

    public void increaseSuccessCount(){
        successCount++;
    }

    public void increaseConsecutiveSuccessCount(){
        consecutiveSuccessCount.addAndGet(1);
    }

    public boolean increaseFailureCountAndThresholdReached(){
        return failureCount.addAndGet(1) &amp;gt;= failureThreshold;
    }
    public boolean increaseConsecutiveSuccessCountAndThresholdReached(){
        return consecutiveSuccessCount.addAndGet(1) &amp;gt;= consecutiveSuccessThreshold;
    }

    public boolean isNotOpen(){
        return !isOpen();
    }

    /**
     * 熔断开启 关闭保护方法的调用
     * @return
     */
    public boolean isOpen(){
        return state instanceof OpenCircuitBreakerState;
    }

    /**
     * 熔断关闭 保护方法正常执行
     * @return
     */
    public boolean isClose(){
        return state instanceof CloseCircuitBreakerState;
    }

    /**
     * 熔断半开 保护方法允许测试调用
     * @return
     */
    public boolean isHalfClose(){
        return state instanceof HalfOpenCircuitBreakerState;
    }

    public void transformToCloseState(){
        state = new CloseCircuitBreakerState(this);
    }

    public void transformToHalfOpenState(){
        state = new HalfOpenCircuitBreakerState(this);
    }

    public void transformToOpenState(){
        state = new OpenCircuitBreakerState(this);
    }

    /**
     * 重置失败次数
     */
    public void resetFailureCount() {
        failureCount.set(0);
    }

    /**
     * 重置连续成功次数
     */
    public void resetConsecutiveSuccessCount() {
        consecutiveSuccessCount.set(0);
    }


    public long getTimeout() {
        return timeout;
    }

    /**
     * 判断是否到达失败阀值
     * @return
     */
    protected boolean failureThresholdReached() {
        return failureCount.get() &amp;gt;= failureThreshold;
    }

    /**
     * 判断连续成功次数是否达到阀值
     * @return
     */
    protected boolean consecutiveSuccessThresholdReached(){
        return consecutiveSuccessCount.get() &amp;gt;= consecutiveSuccessThreshold;
    }

    /**
     * 保护方法失败后操作
     */
    public void actFailed(){
        state.actFailed();
    }

    /**
     * 保护方法成功后操作
     */
    public void actSuccess(){
        state.actSuccess();
    }

    public static interface Executor {
        /**
         * 任务执行接口
         *
         */
        void execute();
    }

    public void execute(Executor executor){
        if(!isOpen()){
            try{
                executor.execute();
                this.actSuccess();
            }catch (Exception e){
                this.actFailed();
                logger.error(&quot;CircuitBreaker executor error&quot;, e);
            }
        }else{
            logger.error(&quot;CircuitBreaker named {} is open&quot;, this.name);
        }
    }

    public String show(){
        Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        map.put(&quot;name:&quot;,name);
        map.put(&quot;state&quot;, isClose());
        map.put(&quot;failureThreshold:&quot;,failureThreshold);
        map.put(&quot;failureCount:&quot;,failureCount);
        map.put(&quot;consecutiveSuccessThreshold:&quot;,consecutiveSuccessThreshold);
        map.put(&quot;consecutiveSuccessCount:&quot;,consecutiveSuccessCount);
        map.put(&quot;successCount:&quot;,successCount);
        map.put(&quot;timeout:&quot;,timeout);
        map.put(&quot;state class&quot;,state.getClass());
        return JSONObject.toJSONString(map);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;状态机：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public interface CircuitBreakerState {

    /**
     * 保护方法失败后操作
     */
    void actFailed();

    /**
     * 保护方法成功后操作
     */
    void actSuccess();
}
public abstract class AbstractCircuitBreakerState implements CircuitBreakerState{

    protected CircuitBreaker circuitBreaker;

    public AbstractCircuitBreakerState(CircuitBreaker circuitBreaker) {
        this.circuitBreaker = circuitBreaker;
    }

    @Override
    public void actFailed() {
        circuitBreaker.increaseFailureCount();
    }

    @Override
    public void actSuccess() {
        circuitBreaker.increaseSuccessCount();
    }
}
public class CloseCircuitBreakerState extends AbstractCircuitBreakerState{

    public CloseCircuitBreakerState(CircuitBreaker circuitBreaker) {
        super(circuitBreaker);
        circuitBreaker.resetFailureCount();
        circuitBreaker.resetConsecutiveSuccessCount();
    }

    @Override
    public void actFailed() {

        // 进入开启状态
        if (circuitBreaker.increaseFailureCountAndThresholdReached()) {
            circuitBreaker.transformToOpenState();
        }
    }
}

public class HalfOpenCircuitBreakerState extends AbstractCircuitBreakerState{

    public HalfOpenCircuitBreakerState(CircuitBreaker circuitBreaker) {
        super(circuitBreaker);
        circuitBreaker.resetConsecutiveSuccessCount();
    }

    @Override
    public void actFailed() {
        super.actFailed();
        circuitBreaker.transformToOpenState();
    }

    @Override
    public void actSuccess() {
        super.actSuccess();
        // 达到成功次数的阀值 关闭熔断
        if(circuitBreaker.increaseFailureCountAndThresholdReached()){
            circuitBreaker.transformToCloseState();
        }
    }
}
public class OpenCircuitBreakerState extends AbstractCircuitBreakerState{

    public OpenCircuitBreakerState(CircuitBreaker circuitBreaker) {
        super(circuitBreaker);

        final Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                circuitBreaker.transformToHalfOpenState();
                timer.cancel();
            }
        }, circuitBreaker.getTimeout());
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
/*   @desc    熔断器工厂 集中应用中的CircuitBreaker
 *          注意：这里一个熔断器一旦生产，生命周期和应用一样，不会被清除
*/
public class CircuitBreakerFactory {

    private static ConcurrentHashMap&amp;lt;String, CircuitBreaker&amp;gt; circuitBreakerMap = new ConcurrentHashMap();

    public CircuitBreaker getCircuitBreaker(String name){
        CircuitBreaker circuitBreaker = circuitBreakerMap.get(name);
        return circuitBreaker;
    }

    /**
     *
     * @param name 唯一名称
     * @param failureThreshold 失败次数阀值
     * @param consecutiveSuccessThreshold 时间窗内成功次数阀值
     * @param timeout 时间窗
     *          1，close状态时 失败次数&amp;gt;=failureThreshold，进入open状态
     *          2，open状态时每隔timeout时间会进入halfOpen状态
     *          3，halfOpen状态里需要连续成功次数达到consecutiveSuccessThreshold，
     *                即可进入close状态，出现失败则继续进入open状态
     * @return
     */
    public static CircuitBreaker buildCircuitBreaker(String name, int failureThreshold, int consecutiveSuccessThreshold, long timeout){
        CircuitBreaker circuitBreaker = new CircuitBreaker(name, failureThreshold, consecutiveSuccessThreshold, timeout);
        circuitBreakerMap.put(name, circuitBreaker);
        return circuitBreaker;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发送kafka消息时使用熔断器：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
    * 因日志为非业务应用核心服务，防止kafka不稳定导致影响应用状态，这里使用使用熔断机制 失败3次开启熔断，每隔20秒半开熔断，连续成功两次关闭熔断。
    */
   CircuitBreaker circuitBreaker = CircuitBreakerFactory.buildCircuitBreaker(&quot;KafkaAppender-c&quot;, 3, 2, 20000);

   public &amp;lt;K, V, E&amp;gt; boolean send(Producer&amp;lt;K, V&amp;gt; producer, ProducerRecord&amp;lt;K, V&amp;gt; record, final E event,
                                 final FailedDeliveryCallback&amp;lt;E&amp;gt; failedDeliveryCallback) {
       if(circuitBreaker.isNotOpen()){
           try {
               producer.send(record, (metadata, exception) -&amp;gt; {
                   if (exception != null) {
                       circuitBreaker.actFailed();
                       failedDeliveryCallback.onFailedDelivery(event, exception);
                       logger.error(&quot;kafka producer send log error&quot;,exception);
                   }else{
                       circuitBreaker.actSuccess();
                   }
               });
               return true;
           } catch (KafkaException e) {
               circuitBreaker.actFailed();
               failedDeliveryCallback.onFailedDelivery(event, e);
               logger.error(&quot;kafka send log error&quot;,e);
               return false;
           }
       }else{
           logger.error(&quot;kafka log circuitBreaker open&quot;);
           return false;
       }
   }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;1，elk搭建时需特别注意各个版本的兼容，kafka client的版本需和kafka版本保持一致&lt;br/&gt;2，方案容许kafka日志失败，而本地日志更加可靠，所以用熔断器方案，以应对万一。也可用于对其他第三方请求时使用。&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 07:40:00 +0000</pubDate>
<dc:creator>每当变幻时</dc:creator>
<og:description>方案 日志收集的方案有很多，包括各种日志过滤清洗，分析，统计，而且看起来都很高大上。本文只描述一个打入kafka的功能。 流程：app kafka logstash es kibana 业务应用直接将</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/killbug/p/9506808.html</dc:identifier>
</item>
<item>
<title>Android MVP模式简单介绍：以一个登陆流程为例 - slma</title>
<link>http://www.cnblogs.com/slma/p/9510741.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/slma/p/9510741.html</guid>
<description>&lt;p&gt;老的项目用的MVC的模式，最近完成了全部重构成MVP模式的工作，虽然比较麻烦，好处是代码逻辑更加清楚、简洁，流程更加清晰，对于后续版本迭代维护都挺方便。&lt;br/&gt;对于一些想要学习MVP模式的同学来讲，百度搜出来的好多都没法直接转化为项目里可以直接用的东西，所以这里正好拿出自己项目里已经用了的，你们可以直接用到自己的项目里。当然，不可能把所有项目代码在这里放出来，所以就拿登陆的流程出来，这个比较合适也比较常用。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、先看下包结构：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;model:放一些bean类，以及网络处理类RetrofitManager，ServiceHelper(封装的网络请求类)等&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;view：放UI层需要实现的逻辑&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;presenter:放一些业务逻辑相关的接口及实现类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1386549/201808/1386549-20180821125956300-1830045398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 2、进入正题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先，以登陆流程为例，简单画下流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1386549/201808/1386549-20180821145028679-99890851.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后开始划分对应三个层的逻辑：&lt;/p&gt;
&lt;p&gt;presenter：作为登录页面，涉及的业务逻辑有：&lt;span&gt;记住密码，登录，保存登录之后获取的Token&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ILoginPresenter {
   &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; rememberPassword(String account,String pwd);
   &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; login(String phoneNum,String pwd);
   &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; saveToken(String token);
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LoginPresenterImpl：&lt;span&gt;负责具体登陆逻辑及view层业务的调用，持有view层对象引用：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;iLoginView&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginPresenterImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ILoginPresenter {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String TAG = &quot;LoginPresenterImpl&quot;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String mMd5Pwd;
    ILoginView mILoginView;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Context mContext;


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LoginPresenterImpl(ILoginView iLoginView, Context context) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.mILoginView =&lt;span&gt; iLoginView;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.mContext =&lt;span&gt; context;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rememberPassword(String account, String pwd) {
        SPUtils.put(mContext, &lt;/span&gt;&quot;remember_password&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        SPUtils.put(mContext, &lt;/span&gt;&quot;phoneNum&quot;&lt;span&gt;, account);
        SPUtils.put(mContext, &lt;/span&gt;&quot;password&quot;&lt;span&gt;, pwd);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; login(String phoneNum, String pwd) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (TextUtils.isEmpty(phoneNum)) {
            mILoginView.loginResult(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, Constant.PHONENUM_NULL);&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Utils.isMobileNO(phoneNum)) {
            mILoginView.loginResult(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, Constant.PHONENUM_FALSE);&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (TextUtils.isEmpty(pwd)) {
            mILoginView.loginResult(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, Constant.PWD_NULL);&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        mMd5Pwd &lt;/span&gt;=&lt;span&gt; Utils.encrypt(pwd);
        LogUtils.d(TAG, &lt;/span&gt;&quot;pwd:&quot; + pwd + &quot;------------ mMd5Pwd:&quot; +&lt;span&gt; mMd5Pwd);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断网络是否可用&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;Utils.isNetAvail()) {
            mILoginView.loginResult(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, Constant.INTERNET_FAILED);
            LogUtils.d(TAG, &lt;/span&gt;&quot;网络不可用&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发起网络请求，查看手机号和密码是否正确&lt;/span&gt;&lt;span&gt;
        ServiceHelper.callEntity(RetrofitManager.getInstance().createReq(Login.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;).getLoginData(phoneNum, mMd5Pwd), LoginBean.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; OnResponseLisner&amp;lt;LoginBean&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onSuccess(LoginBean info) {
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; mUid =&lt;span&gt; info.getData().getUID();      &lt;/span&gt;&lt;span&gt;
                String token &lt;/span&gt;=&lt;span&gt; info.getData().getToken();
                saveToken(token);

                mILoginView.loginResult(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, String.valueOf(mUid));
            }

            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onError(String errorMsg) {
                mILoginView.loginResult(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, errorMsg);
            }
        });
    }&lt;/span&gt;&lt;span&gt;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; saveToken(String token) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;TextUtils.isEmpty(token)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储String值&lt;/span&gt;
            SPUtils.put(mContext, &quot;Token&quot;&lt;span&gt;, token);
        }&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;view：&lt;span&gt;登陆结果的处理展示（由具体实现类MainActivity实现对应的方法）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; ILoginView {
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; loginResult(Boolean result, String msg);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;model：&lt;span&gt;服务器返回的数据bean类&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LoginBean {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; Success;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Code;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String ErrorMsg_zh;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String ErrorMsg_en;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DataBean Data;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ServerTime;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String LogId;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DataBean {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; UID;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String Name;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String Phone;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String Email;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String FacePic;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String Token;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后，看下完整的登陆页面MainActivity(&lt;span&gt;ILoginView实现类&lt;/span&gt;)的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginActivity &lt;span&gt;extends&lt;/span&gt; BaseActivity &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; ILoginView {

    @BindView(R.id.et_phoneNum)
    EditText mEtPhoneNum;

    @BindView(R.id.et_pwd)
    EditText mEtPwd;

    @BindView(R.id.iv_phoneNumClear)
    ImageView mPhoneNumClear;

    @BindView(R.id.iv_pwdClear)
    ImageView mPwdClear;

    @BindView(R.id.cb_checkbox)
    CheckBox mCheckBox;

    @BindView(R.id.btn_login)
    Button mBtnLogin;

    @BindView(R.id.avi_loading)
    AVLoadingIndicatorView mAviLoading;


    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String TAG = &quot;LoginActivity&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String mPhoneNum;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String mPwd;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ILoginPresenter mILoginPresenter;


    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getLayoutResId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; R.layout.activity_login;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init() {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.init();

        mILoginPresenter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; LoginPresenterImpl(&lt;span&gt;this&lt;/span&gt;, LoginActivity.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; isRemenber = (&lt;span&gt;boolean&lt;/span&gt;) SPUtils.get(&lt;span&gt;this&lt;/span&gt;, &quot;remember_password&quot;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        LogUtils.d(TAG, &lt;/span&gt;&quot;isRemenber:&quot; +&lt;span&gt; isRemenber);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isRemenber) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将账号和密码都设置到文本中&lt;/span&gt;
            String account = (String) SPUtils.get(&lt;span&gt;this&lt;/span&gt;, &quot;phoneNum&quot;, &quot;&quot;&lt;span&gt;);
            String password &lt;/span&gt;= (String) SPUtils.get(&lt;span&gt;this&lt;/span&gt;, &quot;password&quot;, &quot;&quot;&lt;span&gt;);

            mEtPhoneNum.setText(account);
            mEtPwd.setText(password);
            mCheckBox.setChecked(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

        }

        mBtnLogin.setOnClickListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; View.OnClickListener() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onClick(View view) {

                mAviLoading.setVisibility(View.VISIBLE);

                mPhoneNum &lt;/span&gt;=&lt;span&gt; mEtPhoneNum.getText().toString().trim();
                mPwd &lt;/span&gt;=&lt;span&gt; mEtPwd.getText().toString().trim();

                mILoginPresenter.login(mPhoneNum, mPwd);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mCheckBox.isChecked()) {
                    mILoginPresenter.rememberPassword(mPhoneNum, mPwd);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    SPUtils.remove(LoginActivity.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, &quot;remember_password&quot;&lt;span&gt;);
                    SPUtils.remove(LoginActivity.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, &quot;phoneNum&quot;&lt;span&gt;);
                    SPUtils.remove(LoginActivity.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, &quot;password&quot;&lt;span&gt;);
                }
            }
        });
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; loginResult(Boolean result, String msg) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (result) {
            LogUtils.d(TAG, &lt;/span&gt;&quot;uid:&quot; +&lt;span&gt; msg);
            Intent intent &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Intent(&lt;span&gt;this&lt;/span&gt;, MainActivity.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
            intent.putExtra(&lt;/span&gt;&quot;uid&quot;&lt;span&gt;, msg);
            startActivity(intent);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            CustomToast.show(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;, msg + &quot; 请稍后再试！&quot;&lt;span&gt;);
        }
        mAviLoading.setVisibility(View.INVISIBLE);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、总结，MVP结构图:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;view层和Presenter层互相持有对方的引用，model只会被presenter层使用。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1386549/201808/1386549-20180821151240072-1641444205.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;PS：觉得看了还是不太明白或是好像明白的同学可以自己亲自动手写一写，应该写完就完全可以明白了。&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 07:39:00 +0000</pubDate>
<dc:creator>slma</dc:creator>
<og:description>老的项目用的MVC的模式，最近完成了全部重构成MVP模式的工作，虽然比较麻烦，好处是代码逻辑更加清楚、简洁，流程更加清晰，对于后续版本迭代维护都挺方便。对于一些想要学习MVP模式的同学来讲，百度搜出来</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/slma/p/9510741.html</dc:identifier>
</item>
<item>
<title>IE浏览器关于ajax的缓存机制 - 张少凯</title>
<link>http://www.cnblogs.com/shaokai7878/p/9511685.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shaokai7878/p/9511685.html</guid>
<description>&lt;p&gt;　　IE浏览器对于同一个URL只返回相同结果。因为，在默认情况下，IE会缓存ajax的请求结果。对于同一个URL地址，在缓存过期之前，只有第一次请求会真正发送到服务端。大多数情况下，我们使用ajax是希望实现局部刷新的，所以这就牵扯到一个改进的问题。&lt;/p&gt;
&lt;p&gt;　　如果想每次都获取到最新数据，我们只需保证每次传入的URL不一样。最简单的方法就是通过给url拼接参数。利用math函数的random（）方法生成随机数。&lt;/p&gt;
&lt;p&gt;　　比如访问百度www.baidu.com，我们就可以把地址写成www.baidu.com?t=Math.random();或者?t=new Date().getTime();&lt;/p&gt;


&lt;p&gt;　　********************************分割线**********************************&lt;/p&gt;
&lt;p&gt;　　说到这里，不妨复习一下ajax的基本用法。&lt;/p&gt;
&lt;h2&gt;*Ajax创建对象：　　　&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　var&lt;/span&gt;&lt;span&gt; xmlhttp;
　&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (window.XMLHttpRequest){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IE7+, Firefox, Chrome, Opera, Safari&lt;/span&gt;
        xmlhttp = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XMLHttpRequest();
    }  &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IE6, IE5&lt;/span&gt;
        xmlhttp=&lt;span&gt;new&lt;/span&gt; ActiveXObject(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Microsoft.XMLHTTP&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }                  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;*Ajax请求：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;GET请求：&lt;/span&gt;
xmlhttp.open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test1.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
xmlhttp.send();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;POST请求：&lt;/span&gt;
xmlhttp.open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;demo_post.asp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
xmlhttp.send();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;GET 还是 POST？&lt;/h2&gt;
&lt;p&gt;与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。&lt;/p&gt;
&lt;p&gt;然而，在以下情况中，请使用 POST 请求：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无法使用缓存文件（更新服务器上的文件或数据库）&lt;/li&gt;
&lt;li&gt;向服务器发送大量数据（POST 没有数据量限制）&lt;/li&gt;
&lt;li&gt;发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;*Ajax响应：&lt;/h2&gt;
&lt;p&gt;要获得服务器的响应，需要使用XMLHttpRequest 对象的 responseText 或 responseXML 属性。&lt;/p&gt;
&lt;p&gt;ResponseText：获得字符串形式的响应数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
document.getElementById(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myDiv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).innerHTML=xmlhttp.responseText;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ResponseXML：获得XML形式的响应数据。&lt;/p&gt;
&lt;p&gt;如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析。&lt;/p&gt;
&lt;h2&gt;*Ajax - onreadystatechange ：　&lt;/h2&gt;
&lt;p&gt;当请求被发送到服务器时，我们需要执行一些基于响应的任务。&lt;/p&gt;
&lt;p&gt;每当 readyState 改变时，就会触发 onreadystatechange 事件。&lt;/p&gt;
&lt;p&gt;在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。&lt;/p&gt;
&lt;p&gt;当 readyState 等于 4 且状态为 200 时，表示响应已就绪：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
xmlhttp.onreadystatechange=&lt;span&gt;function()
  {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (xmlhttp.readyState==&lt;span&gt;4&lt;/span&gt; &amp;amp;&amp;amp; xmlhttp.status==&lt;span&gt;200&lt;/span&gt;&lt;span&gt;)
    {
    document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myDiv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).innerHTML=&lt;span&gt;xmlhttp.responseText;
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 21 Aug 2018 07:37:00 +0000</pubDate>
<dc:creator>张少凯</dc:creator>
<og:description>IE浏览器对于同一个URL只返回相同结果。因为，在默认情况下，IE会缓存ajax的请求结果。对于同一个URL地址，在缓存过期之前，只有第一次请求会真正发送到服务端。大多数情况下，我们使用ajax是希望</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shaokai7878/p/9511685.html</dc:identifier>
</item>
<item>
<title>技术说明 路由器是如何工作的呢? 一个简单的解释 - 教程大咖</title>
<link>http://www.cnblogs.com/xjshipin/p/9511543.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xjshipin/p/9511543.html</guid>
<description>&lt;p&gt;《简介》&lt;/p&gt;
&lt;p&gt;路由器是一个重要的技术,我们中的大多数人在我们的家庭,但我们中的许多人并不真正了解他们。 事实上,大多数人甚至还没有意识到什么是路由器技术和它是如何不同于调制解调器。&lt;/p&gt;
&lt;p&gt;幸运的是,我们是来阐明一个路由器的基本功能,这样您就可以更好地理解你的网络设备。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;路由器是做什么的?&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;简而言之,&lt;strong&gt;一个路由器连接设备在网络之间转发数据包&lt;/strong&gt;。 可以将这些数据发送设备之间,或从设备到互联网。 路由器通过当地的一个IP地址分配给每一个网络上的设备。 这确保了数据包在正确的地方,而不是迷失在网络中。&lt;/p&gt;
&lt;p&gt;想象这个数据作为快递包装需要一个送货地址,以便它在正确的收件人。 您的本地计算机网络就像一个郊区的道路上知道这个位置在世界(即万维网)是不够的。&lt;/p&gt;
&lt;p&gt;包很可能最终在错误的房子只有有限的信息。 因此,路由器确保每个位置(设备)都有一个唯一的号码,这样包是正确的地址。&lt;/p&gt;
&lt;p&gt;如果你需要返回数据发送方,或者发送你自己的包,你的路由器做这份工作。 虽然单独处理每个数据包,它速度很快,感觉instantaneous-even当多个设备发送数据。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;路由器是如何不同于调制解调器吗?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;因为现代调制解调器通常都配备了一个内置的路由器,区分这两种类型的硬件通常是模糊的。 但那些记得的早期互联网知道他们有不同的功能。&lt;/p&gt;
&lt;p&gt;你需要通过你的ISP调制解调器连接到互联网,当你需要一个路由器连接多个设备包括你的调制解调器。 因此,路由器允许您的调制解调器和多个设备传输数据从一个位置到另一个地方。 现代的管道发送数据与互联网。&lt;/p&gt;


&lt;p&gt;你需要一个现代由于所使用的不同类型的信号计算机与互联网。 计算机和移动设备使用一个数字信号,而互联网是一个模拟信号。&lt;/p&gt;
&lt;p&gt;调制解调器将这些信号转换为正确的格式。 这就是设备得名:调制解调器是a&lt;strong&gt;莫&lt;/strong&gt;dulator和&lt;strong&gt;民主党&lt;/strong&gt;odulator。 你会经常得到你的ISP的调制解调器当注册一个网络包。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;路由器是用来做什么的?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt; 从前,在同一台pc家庭,你只需要一个调制解调器连接到互联网。 从技术上讲,如果你只想一个设备连接,你仍然可以只使用调制解调器。 尽管出于安全原因和未来的灵活性,最好使用路由器只有一个设备在你的网络。&lt;/p&gt;
&lt;p&gt;但是现在房子通常有多个设备,路由器是至关重要的。 回想一条路的名字和你的房子的号码。 如果只有一个回家的道路上,你不会需要门牌号,因为它是唯一的位置。 但有很多房子在路上时,你需要一个本地地址。&lt;/p&gt;
&lt;p&gt;你需要一个路由器不仅当你想多个设备连接到互联网,而且如果你想连接多个设备。 没有互联网,您仍然可以创建一个本地网络的计算机和其他设备。 这使您能够转移和共享文件与特定设备在一个网络,包括打印机、扫描仪和游戏机。&lt;/p&gt;

&lt;p&gt;没有路由器,最终的数据不会在正确的设备。 一个命令打印一个文档是无用的,如果它最终在你的智能手机或谷歌演讲者这需要去您的打印机。&lt;/p&gt;
&lt;p&gt;说到谷歌的家,路由器更为重要时连接你的智能家居。 由于智能家居也是一个本地网络的设备,没有路由器他们不能相互交谈。 根据设备不同,你可能仍然需要一个网络连接如果云服务。 但最终,路由器坐标这些数据包。&lt;/p&gt;
&lt;p&gt;一个本地网络没有互联网或调制解调器可以存在,但它没有一个路由器就不能生存。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;有线和无线路由器之间的区别&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;有线和无线路由器的区别是什么类型的每个设备允许的连接。 有线路由器只有局域网电缆端口,而无线路由器(也称为wi - fi路由器)包括天线和无线适配器允许设备连接电缆。&lt;/p&gt;
&lt;p&gt;大多数路由器和调制解调器现在包括局域网端口和天线。 有几点你应该记住在你选择之前wi - fi路由器买哪一个确保你选择正确的一个情况。&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 07:20:00 +0000</pubDate>
<dc:creator>教程大咖</dc:creator>
<og:description>《简介》 路由器是一个重要的技术,我们中的大多数人在我们的家庭,但我们中的许多人并不真正了解他们。 事实上,大多数人甚至还没有意识到什么是路由器技术和它是如何不同于调制解调器。 幸运的是,我们是来阐明</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xjshipin/p/9511543.html</dc:identifier>
</item>
<item>
<title>微信小程序有旋转动画效果的音乐组件 - 大众美男典范</title>
<link>http://www.cnblogs.com/best-xiaoqiang/p/9511435.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/best-xiaoqiang/p/9511435.html</guid>
<description>&lt;p&gt;在微信开发中，写过的一个简单的音乐播放组件，记录下。&lt;/p&gt;
&lt;h2&gt;music&lt;/h2&gt;
&lt;p&gt;音乐播放组件。&lt;/p&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;music&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;传入的音乐资源地址&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;musicStyle&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;(随便写了个)&lt;/td&gt;
&lt;td&gt;音乐组件的样式&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;rotate&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;播放时是否有旋转效果&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;iconOn&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;(随便写了个)&lt;/td&gt;
&lt;td&gt;音乐播放时的icon地址&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;iconOff&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;(随便写了个)&lt;/td&gt;
&lt;td&gt;音乐暂停时的icon地址&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码&lt;/h4&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
properties: {
    // 音乐路径
    music: {
      type: String,
      value: '',
      observer: function (newVal) {
        this._initMusic(newVal)
      }
    },
    // 样式
    musicStyle: {
      type: String,
      value: 'position: absolute; right: 20rpx; top: 20rpx; width: 100rpx; height: 100rpx;'
    },
    // 播放时是否有旋转效果
    rotate: {
      type: Boolean,
      value: true
    },
    // 播放时的icon路径
    iconOn: {
      type: String,
      value: '/resources/img/music-on.png' // 请填写默认的图片地址
    },
    // 暂停时的icon路径
    iconOff: {
      type: String,
      value: '/resources/img/music-off.png' // 请填写默认的图片地址
    }
  }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;初始化音乐&lt;/h3&gt;
&lt;p&gt;首先，在&lt;code&gt;properties&lt;/code&gt;中接收页面传来的音乐文件地址，&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
music: {
  type: String,
  value: '',
  observer: function (newVal) {
    this._initMusic(newVal)
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里的处理是，一旦接收到页面传来的 &lt;span class=&quot;cnblogs_code&quot;&gt;music&lt;/span&gt; 地址，就初始化音乐：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
_initMusic: function (newVal) {
  // 当页面传来新的music时，先销毁之前的audioCtx，否则页面会很嗨
  if (this.data.audioCtx) {
    this.data.audioCtx.destroy()
  }
  if (newVal) {
    var audioCtx = wx.createInnerAudioContext()
    this.setData({
        audioCtx: audioCtx
    })
    if (this.data.audioStatus == '1') {
        audioCtx.autoplay = true
    }
    audioCtx.loop = true
    audioCtx.src = newVal
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;audioStatus&lt;/span&gt; 用来记录音乐播放状态，在&lt;code&gt;data&lt;/code&gt;中默认设置为1：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
data: {
    icon: '',
    audioStatus: 1,
    audioCtx: '',
    musicClass: 'music-on'
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;wxml文件里，只用一个 &lt;span class=&quot;cnblogs_code&quot;&gt;&amp;lt;image&amp;gt;&lt;/span&gt; 标签：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;31.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;image class='music {{ rotate &amp;amp;&amp;amp; musicClass }}'  
        style=&quot;{{ musicStyle }}&quot;  
        src=&quot;{{ icon }}&quot;  
        bindtap='_switch'  
        wx:if=&quot;{{ music }}&quot;&amp;gt;&amp;lt;/image&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;其中， &lt;span class=&quot;cnblogs_code&quot;&gt;icon&lt;/span&gt; 在组件&lt;code&gt;ready()&lt;/code&gt;时赋值成播放状态的icon：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
ready() {
    this.setData({
      icon: this.data.iconOn
    })
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;音乐旋转效果&lt;/h3&gt;
&lt;p&gt;音乐播放时的旋转效果，是用css动画实现的，wxss文件如下：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-css&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.music {
  position: absolute;
  z-index: 99;
  -webkit-animation-iteration-count: infinite;
}
/* 旋转class */
.music-on {
  animation: music-rotate 4s linear infinite;
}
/* 旋转动画 */
@keyframes music-rotate {
  0% {
    transform: rotateZ(0deg);
  }

  100% {
    transform: rotateZ(360deg);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;当 &lt;span class=&quot;cnblogs_code&quot;&gt;rotate&lt;/span&gt; 为&lt;code&gt;true&lt;/code&gt;时，使 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;this&lt;/span&gt;.data.musicClass = 'music-on'&lt;/span&gt; ，就能实现旋转了。&lt;/p&gt;
&lt;p&gt;爆丑照：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1448602/201808/1448602-20180821155743709-172212922.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;音乐控制&lt;/h3&gt;
&lt;h4&gt;手动切换&lt;/h4&gt;
&lt;p&gt;手动点击时，用取反的逻辑控制音乐的播放和暂停：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
_switch: function () {
  // 如果是播放就停止   
  if (this.data.audioStatus) {
    this.setData({
      audioStatus: 0,
      icon: this.data.iconOff,
      musicClass: ''
    })
    this.data.audioCtx.pause()
  // 如果是停止就播放 
  } else {
    this.setData({
      audioStatus: 1,
      icon: this.data.iconOn,
      musicClass: 'music-on'
    })
    this.data.audioCtx.play()
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;其它情况&lt;/h4&gt;
&lt;p&gt;同时，还要对下列情况做处理：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;分享时，进入选好友界面、音乐停止，分享回来后，音乐没有继续播放&lt;/li&gt;
&lt;li&gt;从此页面跳转到下一个页面时，音乐还在继续&lt;/li&gt;
&lt;li&gt;从此页面撤回到上一个页面时，音乐还在继续&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;解决的方法，是在组件的methods中又写了两个方法：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// 写在组件的methods中：

// 在引用组件页面的onShow()中调用
//  否则，如果当发生分享页面行为并返回时，音乐不会自动播放
onShow: function () {
  if (this.data.music &amp;amp;&amp;amp; this.data.audioStatus) {
    this.data.audioCtx.play()
  }
},

// 在引用组件页面的onHide()中调用
//  否则，在跳转到下一个页面后，音乐还在继续
onHide: function () {
  if (this.data.music &amp;amp;&amp;amp; this.data.audioStatus) {
    this.data.audioCtx.pause()
  }
  this.setData({
    animationData: {}
  })
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这两个方法分别在页面中的 &lt;span class=&quot;cnblogs_code&quot;&gt;onShow&lt;/span&gt; 和 &lt;span class=&quot;cnblogs_code&quot;&gt;onHide&lt;/span&gt; 中调用，调用方式就是父组件获取到子组件实例对象：&lt;/p&gt;
&lt;p&gt;例如，给&lt;code&gt;&amp;lt;music&amp;gt;&lt;/code&gt;组件加id为&quot;music-componet&quot;，调用时就是：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// 写在调用页面中

onShow: function () {
    this.selectComponent('#music-component').onShow()
},

onHide: function () {
    this.selectComponent('#music-component').onHide()
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;最后，在组件的&lt;code&gt;detached&lt;/code&gt;中也调用一下 &lt;span class=&quot;cnblogs_code&quot;&gt;onHide&lt;/span&gt; 方法：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// 页面关闭时销毁音乐
detached() {
    this.onHide()
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;你可以&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过阅读本文，根据自身实际情况写一个&lt;/li&gt;
&lt;li&gt;或者，直接&lt;a href=&quot;https://github.com/best-xiaoqiang/note-sm/blob/master/source/music&quot;&gt;凑合用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Tue, 21 Aug 2018 07:06:00 +0000</pubDate>
<dc:creator>大众美男典范</dc:creator>
<og:description>在微信开发中，写过的一个简单的音乐播放组件，记录下。 music 音乐播放组件。 属性 代码 properties: { // 音乐路径 music: { type: String, value: &amp;</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/best-xiaoqiang/p/9511435.html</dc:identifier>
</item>
<item>
<title>Kibana安全特性之权限控制 - 不要乱摸</title>
<link>http://www.cnblogs.com/cjsblog/p/9501858.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjsblog/p/9501858.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.  前言&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;在之前的例子中，我们都是直接输入地址访问的，系统也没有提示我们要输入用户名密码。但是，在实际使用过程中不大可能所有人都是超级管理员可以做任何操作，一定是有权限控制的，这里我们借助X-Pack插件来实现（PS：X-Pack是收费的，可以申请试用30天。）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;2.  安装X-Pack&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;用下列命令安装插件：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
bin/kibana-plugin install &amp;lt;package name or URL&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
bin/kibana-plugin install x-pack
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;事实上，我们无需再次安装X-Pack插件，因为在安装Kibana的时候默认已经安装了。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;By default, when you install Elasticsearch, X-Pack is installed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;By default, when you install Kibana, X-Pack is installed.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;3.  在Elasticsearch中配置Security&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;X-Pack安全性使你能够轻松地保护集群。通过X-Pack安全性，你可以对数据进行密码保护，并实现更高级的安全措施，如加密通信、基于角色的访问控制、IP过滤和审计。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第1步&lt;/strong&gt;：检查你的license中是否包含X-Pack安全特性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你想尝试所有的X-Pack特性，你可以开始一个30天的试用。在试用期结束时，你可以购买以继续使用X-Pack组件的全部功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里，我们先试用30天再说&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819160024887-352984034.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819160045600-1944980496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819160057641-1138955157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819160108206-1453191511.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;可以看到，试用以后我们的license从“&lt;strong&gt;Basic&lt;/strong&gt;”变成“&lt;strong&gt;Trial&lt;/strong&gt;”。而且，从控制台日志中我们可以看到这个变化：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
log   [03:49:03.965] [info][license][xpack] Imported license information from Elasticsearch for the [monitoring] cluster: mode: basic | status: active
log   [03:55:25.049] [info][license][xpack] Imported changed license information from Elasticsearch for the [data] cluster: mode: trial | status: active | expiry date: 2018-09-18T11:55:25+08:00
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第2步&lt;/strong&gt;：检查你的集群中的每个节点配置中xpack.security.enabled是否设置为true。如果你用的是一个trail license，这个配置项默认是false。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
xpack.security.enabled: true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;配置项&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;xpack.security.enabled&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置为true则在节点上启用X-Pack安全特性，false表示禁用X-Pack安全特性。（PS：推荐明确设置这个值）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;xpack.security.authc.accept_default_password&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在elasticsearch.yml中，将其设置为false，以禁用默认密码。默认密码是“changeme”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;xpack.security.authc.anonymous.username&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;配置匿名用户&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;xpack.security.authc.anonymous.roles&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;匿名用户关联的角色&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
xpack.security.authc:
  anonymous:
    username: anonymous_user 
    roles: role1, role2 
    authz_exception: true 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;xpack.security.dls_fls.enabled&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置为false表示阻止文档和字段级别的访问控制。默认是true。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;xpack.security.authc.token.enabled&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置为false表示禁用token服务。默认true。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;xpack.security.authc.realms&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置realms，例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
xpack.security.authc.realms:

    realm1:
        type: native
        order: 0
        ...

    realm2:
        type: ldap
        order: 1
        ...

    realm3:
        type: active_directory
        order: 2
        ...
    ...
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;type：可选值有native, ldap, active_directory, pki,  file&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;order：realm在realm链中的优先级，数值越小，优先级越高&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;enabled：默认true，表示启用这个realm&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第3步&lt;/strong&gt;：为内部节点通信配置TSL/SSL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这需要你的集群中至少有两个节点。如果你的集群中只有一个节点，那么可以忽略这一步。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;更多参见  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.3/configuring-tls.html#node-certificates&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/6.3/configuring-tls.html#node-certificates&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.3/configuring-tls.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/6.3/configuring-tls.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第4步&lt;/strong&gt;：启动Elasticsearch&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第5步&lt;/strong&gt;：为所有内置用户设置密码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;X-Pack安全性提供了内置的用户来帮助你启动和运行。elasticsearch-setup-password命令是首次设置内置用户密码的最简单方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;内置用户有4个，如下：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;elastic　　超级用户&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Kibana　　用于连接并且和Elasticsearch通信的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;logstash_system     用于在Elasticsearch中存储监控信息&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;beats_system    用于在Elasticsearch中存储监控信息&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;例如，你可以以交互模式运行命令，依次为这些用户设置新密码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
bin/elasticsearch-setup-passwords interactive
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819164009205-1746023303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（画外音：elasticsearch-setup-passwords命令只能运行一次，不能再运行第二次。此后如果你想修改密码的话，可以在Kibana UI界面中通Management --&amp;gt; Users 或者通过API的方式来修改密码）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第6步&lt;/strong&gt;：选择你想要用来认证用户的realms类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/6.3/configuring-native-realm.html&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/6.3/configuring-native-realm.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第7步&lt;/strong&gt;：设置用于访问Elasticsearch的角色和用户。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
curl -XPOST -u elastic &lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/role/events_admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -H &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type: application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -d &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;indices&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : [
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;names&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;events*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ],
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;privileges&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
    },
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;names&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.kibana*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ],
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;privileges&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;manage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;read&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
    }
  ]
}&lt;/span&gt;&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;
curl &lt;/span&gt;-XPOST -u elastic &lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/user/johndoe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -H &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type: application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -d &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userpassword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;full_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;John Doe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;john.doe@anony.mous&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;roles&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;events_admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第8步&lt;/strong&gt;：启用审计&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
xpack.security.audit.enabled: true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.1.  用户管理API&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1.1.  查看用户&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 查看所有用户
curl &lt;/span&gt;-X GET -u elastic &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
# 查看指定用户
curl &lt;/span&gt;-X GET -u elastic &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/user/jacknich&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819170446778-172743268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1.2.  创建用户&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
curl -X POST -u elastic &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/user/jacknich&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -H &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type: application/json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j@rV1s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;roles&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;other_role1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ],
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;full_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jack Nicholson&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jacknich@example.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;intelligence&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;7&lt;/span&gt;&lt;span&gt;
  }
}
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在这些参数中，password 和 roles 是必须的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（画外音：加上“&lt;strong&gt;-u elastic&lt;/strong&gt;”是因为只有elastic用户有管理用户权限，另外，请求参数后面可以带上?pretty，这样返回的格式会好看一点儿）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.1.3.  修改密码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
curl -X POST &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/user/jacknich/_password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -H &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type: application/json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;s3cr3t&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.1.4.  禁用/启用/删除用户&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
curl -X PUT &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/user/jacknich/_disable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
curl &lt;/span&gt;-X PUT &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/user/jacknich/_enable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
curl &lt;/span&gt;-X DELETE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/user/jacknich&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.2.  角色管理API&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
curl -X GET &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/role&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
curl &lt;/span&gt;-X GET &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/role/my_admin_role&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
curl &lt;/span&gt;-X DELETE &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/role/my_admin_role&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
curl &lt;/span&gt;-X POST &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:9200/_xpack/security/role/my_admin_role&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -H &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type: application/json&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -d&lt;span&gt;'
&lt;/span&gt;&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cluster&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;indices&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
    {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;names&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ],
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;privileges&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;],
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;field_security&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可选&lt;/span&gt;
        &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grant&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
      },
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{\&quot;match\&quot;: {\&quot;title\&quot;: \&quot;foo\&quot;}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可选&lt;/span&gt;
&lt;span&gt;    }
  ],
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;run_as&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;other_user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ], &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可选&lt;/span&gt;
  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可选&lt;/span&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
  }
}
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3.3.  基于角色的访问控制（RBAC）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;X-Pack安全性提供了一种基于角色的访问控制(RBAC)机制，它使你能够通过向角色分配特权和向用户或组分配角色来授权用户。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819172121429-1969332434.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4.  在Kibana中配置Security&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;当在你的集群上启用X-Pack时，Kibana用户必须登录成功后才可以访问。你可以为Kibana用户配置X-Pack安全角色，以控制用户可以访问哪些数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过Kibana向Elasticsearch发出的大多数请求都通过登录用户的凭证进行认证的。然而，Kibana服务器需要向Elasticsearch集群发出一些内部请求。因此，你必须为Kibana服务器配置用于这些请求的凭证。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;启用了X-Pack安全性之后，如果你加载一个Kibana指示板，该指示板访问你没有权限查看的索引中的数据，那么你将得到一个索引不存在的错误。X-Pack安全性目前还没有提供一种方法来控制哪些用户可以加载哪些仪表板。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了在Kibana中应用X-Pack安全特性：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第1步&lt;/strong&gt;：在Elasticsearch中配置security&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第2步&lt;/strong&gt;：配置Kibana使用内置账户，例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819173006393-574629253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第3步&lt;/strong&gt;：在kibana.yml配置文件中指定xpack.security.encryptionKey，例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819173302377-865937744.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第4步&lt;/strong&gt;：可选的：更改默认的session过期时间，例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
xpack.security.sessionTimeout: 600000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第5步&lt;/strong&gt;：可选的：配置Kibana加密通信&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第6步&lt;/strong&gt;：重启Kibana&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第7步&lt;/strong&gt;：现在一个用户身份认证机制，并授予用户所需的权限&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你可以在Kibana中管理权限（&lt;strong&gt;Management / Security / Roles&lt;/strong&gt; 页面）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你用&lt;strong&gt;native realm with Basic Authentication&lt;/strong&gt;，你可以在&lt;strong&gt;Management / Security / Users&lt;/strong&gt; 页面指定角色或者用APIs。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第8步&lt;/strong&gt;：授权用户用Kibana工作的时候可以访问哪些索引&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（画外音：你可以根据需要为Kibana用户定义许多不同的角色）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;第9步&lt;/strong&gt;：检查用户是否可以正常登录 http://localhost:5601&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.1.  配置项&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;xpack.security.enabled&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置为true（默认）以启用X-Pack安全特性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;xpack.security.cookieName&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cookie的名字。默认是“sid”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;xpack.security.encryptionKey&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用于加密cookie中的凭证的32个或更多字符的任意字符串。关键是这个密钥不向Kibana的用户公开。默认情况下，在内存中会自动生成一个值。如果使用这种默认行为，当Kibana重新启动时，所有会话都将失效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;xpack.security.sessionTimeout&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置会话持续时间（以毫秒为单位）。默认情况下，会话保持活动状态，直到浏览器关闭。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.2.  Kibana用户身份认证&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Kibana支持两种认证机制：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Basic Authentication&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;SAML Single Sign-On&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;4.2.1.  Basic Authentication&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Basic Authentication在登录Kibana时需要一个用户名和密码。&lt;strong&gt;默认它是启用的，并且是基于Elasticsearch提供的 native realm&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.2.2.  SAML Single Sign-On&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SAML身份验证允许用户使用外部身份提供者（如Okta或Auth0）登录Kibana。在Kibana中设置SAML之前，请确保在Elasticsearch中启用和配置SAML。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;更多参见  &lt;a href=&quot;https://www.elastic.co/guide/en/kibana/current/kibana-authentication.html&quot; target=&quot;_blank&quot;&gt;https://www.elastic.co/guide/en/kibana/current/kibana-authentication.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.3.  User authentication（用户认证）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了访问受保护的资源，一个用户必须通过密码、凭证、或者其它方式（通常是token）来证明他们的身份标识。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;认证过程由一个或多个被称为“realms”的认证服务来处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你可以用本机支持管理和认证用户，或者集成外部的用户管理系统（比如：LDAP 和 Active Directory）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;X-Pack安全特性提供了内置的realms，比如：native，ldap，active_directory，pki，file 和 saml。如果没有一个内置realms满足你的需求，你还可以构建自己的realm。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当启用X-Pack安全特性时，根据你配置的realms，你必须将用户凭证附加到发送到Elasticsearch的请求中。例如，当使用支持用户名和密码的realms时，你可以简单的将basic auth头信息添加到请求中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.4.  在Kibana管理后台界面中取管理用户&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819180018890-923818341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819180032206-1401985482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819180041685-1332679537.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819180053052-651142064.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;5.  演示&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;5.1.  kibana.yml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
server.port: 5601

server.host: &quot;192.168.101.5&quot;

elasticsearch.url: &quot;http://localhost:9200&quot;

elasticsearch.username: &quot;kibana&quot;
elasticsearch.password: &quot;123456&quot;

xpack.security.enabled: true
xpack.security.encryptionKey: &quot;4297f44b13955235245b2497399d7a93&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;5.2.  elasticsearch.yml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
xpack.security.enabled: true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;5.3.  登录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201808/874963-20180819181855479-1169798489.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6.  其它相关链接&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;《&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9439331.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Elasticsearch&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9459781.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Logstash&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9445792.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Filebeat&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9476813.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Kibana&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9495024.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Filebeat模块与配置&lt;/span&gt;&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 21 Aug 2018 06:20:00 +0000</pubDate>
<dc:creator>不要乱摸</dc:creator>
<og:description>1. 前言 在之前的例子中，我们都是直接输入地址访问的，系统也没有提示我们要输入用户名密码。但是，在实际使用过程中不大可能所有人都是超级管理员可以做任何操作，一定是有权限控制的，这里我们借助X-Pac</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjsblog/p/9501858.html</dc:identifier>
</item>
<item>
<title>系统优化怎么做-JVM优化之开篇 - 昌松</title>
<link>http://www.cnblogs.com/changsong/p/9511084.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/changsong/p/9511084.html</guid>
<description>&lt;p&gt;大家好，这里是「聊聊系统优化 」，并在下列地址同步更新&lt;/p&gt;
&lt;p&gt;在这里我会从基于J2EE系统及互联网架构方面,来谈谈系统优化的各个方面,干货满满,欢迎订阅及关注!&lt;/p&gt;
&lt;h2 id=&quot;articleHeader0&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上一期Tomcat优化中，针对JVM相关主要参数做过一定说明，这一期主要介绍进行一些概念及经验。后面分章节去讲述相关工具的基本使用。&lt;/p&gt;
&lt;h2 id=&quot;articleHeader1&quot;&gt;优化优先级&lt;/h2&gt;
&lt;p&gt;整体来讲，系统优化应先优化架构及代码，来解决具体功能点效率问题。最后通过JVM监控工具来发现一些隐藏较为深入的问题。&lt;/p&gt;
&lt;h2 id=&quot;articleHeader2&quot;&gt;相关情形&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;内存占用并不断增加, 系统压力大情况下Full GC频繁，系统出现卡顿&lt;/li&gt;
&lt;li&gt;线程出现大量等待及死锁, CPU使用率过高, 系统响应慢&lt;/li&gt;
&lt;li&gt;堆（heap）内存不足或类加载导致JVM Crash,系统宕机&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;出现以上情况，就得使用工具分析JVM来确定问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;articleHeader3&quot;&gt;JVM内存模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1442433/201808/1442433-20180821141657590-249379470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;JDK1.7及以下&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;JDK1.8下，PermGen替换成Vm MetaSpace&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;articleHeader4&quot;&gt;Heap域&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;全局被所有线程分享&lt;/li&gt;
&lt;li&gt;存所有对象及集合对象&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;articleHeader5&quot;&gt;方法域&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;全局被所有线程分享&lt;/li&gt;
&lt;li&gt;存所有类的结构定义包含属性，方法及构造函数等&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;articleHeader6&quot;&gt;Thread1.N&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;本地私有栈，一个线程一个栈&lt;/li&gt;
&lt;li&gt;保持着所有在Heap域的对象引用（4byte长度）&lt;/li&gt;
&lt;li&gt;存储本地局部变量的存储（基础数据类型)，程序运行状态，方法返回值&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;articleHeader7&quot;&gt;内存泄漏的分类&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;堆内存泄漏 - 比较常见&lt;/li&gt;
&lt;li&gt;持久代内存泄漏&lt;/li&gt;
&lt;li&gt;栈内存泄漏&lt;/li&gt;
&lt;li&gt;系统资源内存泄漏 -比较常见&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;articleHeader8&quot;&gt;线程相关知识&lt;/h2&gt;
&lt;p&gt;JVM线程状态迁移&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1442433/201808/1442433-20180821141719602-1408445397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;articleHeader9&quot;&gt;线程状态&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;初始化（New）：初期创建,启动后则进入可执行状态&lt;/li&gt;
&lt;li&gt;可执行状态（Runnable）: 只要获取CPU时间，则开始执行&lt;/li&gt;
&lt;li&gt;运行状态（Running）: 正在使用CPU执行&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阻塞状态（Bloked）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;等待阻塞(wait)&lt;/li&gt;
&lt;li&gt;同步阻塞(synchronized)&lt;/li&gt;
&lt;li&gt;睡眠阻塞(sleep)&lt;/li&gt;
&lt;li&gt;Join阻塞: 等待join子线程结束后，主线程才能执行，将异步执行的线程合并为同步的线程&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;结束状态： 线程执行完毕或者异常退出&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;articleHeader10&quot;&gt;&lt;strong&gt;性能监控关注点&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;系统线程总数&lt;/li&gt;
&lt;li&gt;死锁线程 &lt;strong&gt;需要优先解决&lt;/strong&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;线程Bloked总数数量&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;线程Bloked多的情况下，考虑对待处理数据进行分片,进行多通道,多线程处理提高系统性能&lt;br/&gt;如果系统处理慢，但CPU占用一直很低，就需要梳理系统处理流程，串行处理该并行处理，并行处理流程提高并发来解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;articleHeader11&quot;&gt;线程死锁&lt;/h2&gt;
&lt;p&gt;当两个或者多个线程尝试获取其他资源的锁，而每个线程又陷入无限等待其他资源锁的释放（相互等待），除非一个用户的进程被终止。&lt;/p&gt;
&lt;h2 id=&quot;articleHeader12&quot;&gt;几个死锁场景&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;两个线程相互调用Thread.join(), 导致互相等待同步结束。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1442433/201808/1442433-20180821141747458-672763492.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;慎用线程join操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;当两个线程使用嵌套的同步块时，一个线程占用了另一个线程的必需的锁，互相等待时被阻塞，就有可能出现死锁。 也可能多个线程形成环状锁，比如线程A等待线程B，线程B等待线程C，线程C等待线程A。线程A为了检测死锁，它需要递进地检测所有被B请求的锁。从线程B所请求的锁开始，线程A找到了线程C，发现线程C请求的锁被线程A自己持有着。这是它就知道发生了死锁。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1442433/201808/1442433-20180821141759576-936358375.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MySql死锁&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1442433/201808/1442433-20180821141813491-1077282183.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;MySql中两个线程同时对两条记录做先读后写操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;articleHeader13&quot;&gt;避免死锁&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;安全状态&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;找到一个分配资源的序列能让所有进程都顺利完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;银行家算法&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;采用预分配策略检查分配完成时系统是否处在安全状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;articleHeader14&quot;&gt;检测死锁&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;VisualVM（或其他工具）&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;监控线程状态，如果出现死锁得到相关代码位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;死锁定理化间资源分配图&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;4.3304347826087&quot;&gt;
&lt;p&gt;利用死锁定理化间资源分配图来分析死锁的存在&lt;br/&gt;参见以下资料:&lt;br/&gt;&lt;a href=&quot;https://www.coursera.org/lecture/os-pku/zi-yuan-fen-pei-tu-JvKcU&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;https://www.coursera.org/lect...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;articleHeader15&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本章主要讲了一些核心知识，主要为了让大家了解系统优化到底优化和解决什么问题，什么是优化的目标。后续章节会讲到tomcat的JMX配置，VisualVM，Tprofile等工具的使用。&lt;/p&gt;
&lt;h2 id=&quot;articleHeader16&quot;&gt;思考题&lt;/h2&gt;
&lt;p&gt;JVM线程有哪些状态,这些线程大多处于什么样的状态分布, 我们可以称系统运行是健康的。&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 06:20:00 +0000</pubDate>
<dc:creator>昌松</dc:creator>
<og:description>大家好，这里是「聊聊系统优化 」，并在下列地址同步更新 博客园：http://www.cnblogs.com/changsong/ 知乎专栏：https://zhuanlan.zhihu.com/yo</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/changsong/p/9511084.html</dc:identifier>
</item>
<item>
<title>SpringCloud教程 | 第六篇: 分布式配置中心(Spring Cloud Config)(Finchley版本) - 华丽D转身</title>
<link>http://www.cnblogs.com/snake23/p/9511075.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/snake23/p/9511075.html</guid>
<description>&lt;p&gt;在上一篇文章讲述zuul的时候，已经提到过，使用配置服务来保存各个服务的配置文件。它就是Spring Cloud Config。&lt;/p&gt;
&lt;h3 id=&quot;一简介&quot;&gt;一、简介&lt;/h3&gt;
&lt;p&gt;在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。&lt;/p&gt;
&lt;h3 id=&quot;二构建config-server&quot;&gt;二、构建Config Server&lt;/h3&gt;
&lt;p&gt;父maven工程省略，父pom文件：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs xml has-numbering&quot;&gt;&lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;project &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;
         &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         &lt;span class=&quot;hljs-attribute&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;4.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;com.forezp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;sc-f-chapter6&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;0.0.1-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;pom&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;modules&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;module&amp;gt;config-server&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;module&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;module&amp;gt;config-client&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;module&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;modules&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;name&amp;gt;sc-f-chapter6&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;name&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;description&amp;gt;Demo project for Spring Boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;description&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-boot-starter-parent&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;2.0.3.RELEASE&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;relativePath/&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;parent&amp;gt;


    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;properties&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;project.build.sourceEncoding&amp;gt;UTF-8&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;project.build.sourceEncoding&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;project.reporting.outputEncoding&amp;gt;UTF-8&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;project.reporting.outputEncoding&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;java.version&amp;gt;1.8&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;java.version&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;spring-cloud.version&amp;gt;Finchley.RELEASE&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;spring-cloud.version&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;properties&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-boot-starter-test&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;scope&amp;gt;test&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;scope&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependencyManagement&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.cloud&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-cloud-dependencies&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;${spring-cloud.version}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;type&amp;gt;pom&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;type&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;scope&amp;gt;import&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;scope&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependencyManagement&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;build&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;plugins&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-boot-maven-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugins&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;build&amp;gt;


&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;project&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建一个spring-boot项目，取名为config-server,其pom.xml如下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs xml has-numbering&quot;&gt;&lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;project &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot; &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    &lt;span class=&quot;hljs-attribute&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;4.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;com.forezp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;config-server&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;0.0.1-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;jar&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;name&amp;gt;config-server&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;name&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;description&amp;gt;Demo project for Spring Boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;description&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;com.forezp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;sc-f-chapter6&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;0.0.1-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;parent&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-boot-starter-web&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.cloud&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-cloud-config-server&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;build&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;plugins&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-boot-maven-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugins&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;build&amp;gt;


&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;project&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在程序的入口Application类加上@EnableConfigServer注解开启配置服务器的功能，代码如下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs java has-numbering&quot;&gt;
&lt;span class=&quot;hljs-annotation&quot;&gt;@SpringBootApplication
&lt;span class=&quot;hljs-annotation&quot;&gt;@EnableConfigServer
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;ConfigServerApplication {

    &lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main(String[] args) {
        SpringApplication.run(ConfigServerApplication.class, args);
    }
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要在程序的配置文件application.properties文件配置以下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs avrasm has-numbering&quot;&gt;spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.application&lt;span class=&quot;hljs-preprocessor&quot;&gt;.name=config-server
server&lt;span class=&quot;hljs-preprocessor&quot;&gt;.port=&lt;span class=&quot;hljs-number&quot;&gt;8888

spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cloud&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;span class=&quot;hljs-preprocessor&quot;&gt;.server&lt;span class=&quot;hljs-preprocessor&quot;&gt;.git&lt;span class=&quot;hljs-preprocessor&quot;&gt;.uri=https://github&lt;span class=&quot;hljs-preprocessor&quot;&gt;.com/forezp/SpringcloudConfig/
spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cloud&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;span class=&quot;hljs-preprocessor&quot;&gt;.server&lt;span class=&quot;hljs-preprocessor&quot;&gt;.git&lt;span class=&quot;hljs-preprocessor&quot;&gt;.searchPaths=respo
spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cloud&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;span class=&quot;hljs-preprocessor&quot;&gt;.label=master
spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cloud&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;span class=&quot;hljs-preprocessor&quot;&gt;.server&lt;span class=&quot;hljs-preprocessor&quot;&gt;.git&lt;span class=&quot;hljs-preprocessor&quot;&gt;.username=
spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cloud&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;span class=&quot;hljs-preprocessor&quot;&gt;.server&lt;span class=&quot;hljs-preprocessor&quot;&gt;.git&lt;span class=&quot;hljs-preprocessor&quot;&gt;.password=


&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;spring.cloud.config.server.git.uri：配置git仓库地址&lt;/li&gt;
&lt;li&gt;spring.cloud.config.server.git.searchPaths：配置仓库路径&lt;/li&gt;
&lt;li&gt;spring.cloud.config.label：配置仓库的分支&lt;/li&gt;
&lt;li&gt;spring.cloud.config.server.git.username：访问git仓库的用户名&lt;/li&gt;
&lt;li&gt;spring.cloud.config.server.git.password：访问git仓库的用户密码&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果Git仓库为公开仓库，可以不填写用户名和密码，如果是私有仓库需要填写，本例子是公开仓库，放心使用。&lt;/p&gt;
&lt;p&gt;远程仓库&lt;a href=&quot;https://github.com/forezp/SpringcloudConfig/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/forezp/SpringcloudConfig/&lt;/a&gt; 中有个文件config-client-dev.properties文件中有一个属性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;foo = foo version 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;启动程序：访问&lt;a href=&quot;http://localhost:8888/foo/dev&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://localhost:8888/foo/dev&lt;/a&gt;&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs json has-numbering&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;profiles&quot;:&lt;span class=&quot;hljs-value&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;dev&quot;],&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;label&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;master&quot;,
&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;version&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;792ffc77c03f4b138d28e89b576900ac5e01a44b&quot;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;state&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;null,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;propertySources&quot;:&lt;span class=&quot;hljs-value&quot;&gt;[]}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;证明配置服务中心可以从远程程序获取配置信息。&lt;/p&gt;
&lt;p&gt;http请求地址和资源文件映射如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;/{application}/{profile}[/{label}]&lt;/li&gt;
&lt;li&gt;/{application}-{profile}.yml&lt;/li&gt;
&lt;li&gt;/{label}/{application}-{profile}.yml&lt;/li&gt;
&lt;li&gt;/{application}-{profile}.properties&lt;/li&gt;
&lt;li&gt;/{label}/{application}-{profile}.properties&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;三构建一个config-client&quot;&gt;三、构建一个config client&lt;/h3&gt;
&lt;p&gt;重新创建一个springboot项目，取名为config-client,其pom文件：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs xml has-numbering&quot;&gt;&lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;project &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot; &lt;span class=&quot;hljs-attribute&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    &lt;span class=&quot;hljs-attribute&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;4.0.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;modelVersion&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;com.forezp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;config-client&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;0.0.1-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;jar&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;packaging&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;name&amp;gt;config-client&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;name&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;description&amp;gt;Demo project for Spring Boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;description&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;parent&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;com.forezp&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;sc-f-chapter6&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;0.0.1-SNAPSHOT&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;version&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;parent&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-boot-starter-web&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.cloud&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-cloud-starter-config&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependency&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;dependencies&amp;gt;

    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;build&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;plugins&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;plugin&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;org.springframework.boot&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;groupId&amp;gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;spring-boot-maven-plugin&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;artifactId&amp;gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugin&amp;gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;plugins&amp;gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;build&amp;gt;


&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;project&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其配置文件&lt;strong&gt;bootstrap.properties&lt;/strong&gt;：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs avrasm has-numbering&quot;&gt;spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.application&lt;span class=&quot;hljs-preprocessor&quot;&gt;.name=config-client
spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cloud&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;span class=&quot;hljs-preprocessor&quot;&gt;.label=master
spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cloud&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;span class=&quot;hljs-preprocessor&quot;&gt;.profile=dev
spring&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cloud&lt;span class=&quot;hljs-preprocessor&quot;&gt;.config&lt;span class=&quot;hljs-preprocessor&quot;&gt;.uri= http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;8888/
server&lt;span class=&quot;hljs-preprocessor&quot;&gt;.port=&lt;span class=&quot;hljs-number&quot;&gt;8881
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;-0.90308370044053&quot;&gt;&lt;li&gt;spring.cloud.config.label 指明远程仓库的分支&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;spring.cloud.config.profile&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;dev开发环境配置文件&lt;/li&gt;
&lt;li&gt;test测试环境&lt;/li&gt;
&lt;li&gt;pro正式环境&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-0.73809523809524&quot;&gt;
&lt;p&gt;spring.cloud.config.uri= &lt;a href=&quot;http://localhost:8888/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://localhost:8888/&lt;/a&gt; 指明配置服务中心的网址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;程序的入口类，写一个API接口“／hi”，返回从配置中心读取的foo变量的值，代码如下：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs java has-numbering&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@SpringBootApplication
&lt;span class=&quot;hljs-annotation&quot;&gt;@RestController
&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;ConfigClientApplication {

    &lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;static &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;main(String[] args) {
        SpringApplication.run(ConfigClientApplication.class, args);
    }

    &lt;span class=&quot;hljs-annotation&quot;&gt;@Value(&lt;span class=&quot;hljs-string&quot;&gt;&quot;${foo}&quot;)
    String foo;
    &lt;span class=&quot;hljs-annotation&quot;&gt;@RequestMapping(value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/hi&quot;)
    &lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;hi(){
        &lt;span class=&quot;hljs-keyword&quot;&gt;return foo;
    }
}

&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打开网址访问：&lt;a href=&quot;http://localhost:8881/hi&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://localhost:8881/hi&lt;/a&gt;，网页显示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;foo version 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就说明，config-client从config-server获取了foo的属性，而config-server是从git仓库读取的,如图：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://upload-images.jianshu.io/upload_images/2279594-40ecbed6d38573d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot; alt=&quot;Azure (2).png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本文源码下载：&lt;br/&gt;&lt;a href=&quot;https://github.com/forezp/SpringCloudLearning/tree/master/sc-f-chapter6&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://github.com/forezp/SpringCloudLearning/tree/master/sc-f-chapter6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;四参考资料&quot;&gt;四、参考资料&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/forezp/article/details/70037291&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/forezp/article/details/70037291&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://cloud.spring.io/spring-cloud-static/Finchley.RELEASE/single/spring-cloud.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文地址：http://blog.csdn.net/forezp。 https://blog.csdn.net/forezp/article/details/81041028&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 06:19:00 +0000</pubDate>
<dc:creator>华丽D转身</dc:creator>
<og:description>在上一篇文章讲述zuul的时候，已经提到过，使用配置服务来保存各个服务的配置文件。它就是Spring Cloud Config。 一、简介 在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/snake23/p/9511075.html</dc:identifier>
</item>
</channel>
</rss>