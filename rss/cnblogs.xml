<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>算法--有序数组的不同绝对值个数 - SilentKnight</title>
<link>http://www.cnblogs.com/littlepanpc/p/7750237.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/littlepanpc/p/7750237.html</guid>
<description>&lt;p&gt;题目:&lt;/p&gt;
&lt;p&gt;给定一个有序数组, 求它的元素的绝对值个数. 如数组[-3, -1, 0, 0, 2, 3, 5], 返回5.&lt;/p&gt;
&lt;p&gt;分析:&lt;/p&gt;
&lt;p&gt;第一种思路. 数组遍历一遍, 将每一个元素的绝对值放入一个Set里面, 最后求Set的大小. 这种方法虽然很简单, 但是空间复杂度不小, 为O(n). 那么能不能同样只遍历一遍, 空间复杂度为O(1)呢. 好吧, 下面来分析一下时间复杂度为O(n), 空间复杂度为O(1)的方法. 假设一下, 如果数组里面每一个元素的绝对值都不相同, 那么在遍历到第个元素的时候都令计数count加1, 那么最后的结果也是绝对值个数, 对吧? 如果有相邻两个相同的元素呢? 那么可以跳过这个元素不进行计数. 如果有正负两个元素绝对值相对呢? 那么这两个元素的和为0对吧, 然后令遍历的两个index, 小的加1, 大的减1, 同时count只计算一个数就可以了. 对吧?&lt;/p&gt;

&lt;p&gt;接下来我们来看一下具体的Java代码吧:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; countDistinctAbs(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] nums) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (nums == &lt;span&gt;null&lt;/span&gt; || nums.length == 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, j, count;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     i = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     j = nums.length - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     count = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(i &amp;lt;&lt;span&gt; j) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (i &amp;lt; nums.length - 1 &amp;amp;&amp;amp; nums[i] == nums[i+1&lt;span&gt;]) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (j &amp;gt; 0 &amp;amp;&amp;amp; nums[j] == nums[j-1&lt;span&gt;]) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (nums[i]+nums[j] == 0){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;正负两个数的绝对值相同, 如果数组只存在正数或者负数, 则不存在这种情况, if分支会走到下面两种情况&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             j--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (nums[i] + nums[j] &amp;gt; 0) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 说明正数的绝对值较大, 或者全是正数时, 只走该分支&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             j--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (nums[i] + nums[j] &amp;lt; 0) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 说明负数的绝对值较大, 或者命题负数时, 只走该分支&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         count++
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;又解决了一道题目!!! 哈哈&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 07:52:00 +0000</pubDate>
<dc:creator>SilentKnight</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/littlepanpc/p/7750237.html</dc:identifier>
</item>
<item>
<title>关于 Swift 4 中内存安全访问 - tingxins</title>
<link>http://www.cnblogs.com/tingxins/p/7750026.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tingxins/p/7750026.html</guid>
<description>&lt;p&gt;本文主要翻译今年 The Swift Programming Language (Swift 4) 中新出的章节 -《Memory Safety》。在 Swift 4 中，内存安全访问进行很大的优化(&lt;a href=&quot;http://www.jianshu.com/p/1bed14f1fe2a&quot;&gt;《What's New in Swift 4 ?》&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;默认情况下，Swift 会克服代码层面上的一些不安全的行为，如：确保一个变量被初始化完后才能被访问、确保变量在销毁后不会被访问等等安全操作。&lt;/p&gt;
&lt;p&gt;Swift 也会确保在多路访问内存中同一区域时不会冲突（独占访问该区域）。通常情况下，我们完全无需考虑内存访问冲突的问题，因为 Swift 是自动管理内存的。然而，在码代码的时候，了解那些地方可能发生内存访问冲突是非常重要的。通常情况下，如果你的代码有内存访问冲突，那么 Xcode 会提示编译错误或者运行时错误。&lt;/p&gt;
&lt;blockquote readability=&quot;7.8640226628895&quot;&gt;
&lt;p&gt;本文不会介绍什么是内存访问冲突。详见 The Swift Programming Language (Swift 4)。如果你写的是并发或者多线程的程序，内存冲突访问与单线程是非常相似的一个问题。本文主要讨论单线程上的内存冲突访问。如果想检测多线程是否存在内存访问冲突，你可以看看这篇&lt;a href=&quot;https://developer.apple.com/documentation/code_diagnostics/thread_sanitizer&quot;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以把访问分为两种：即时和长期（instantaneous &amp;amp; long-term）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;即时访问：即在访问开始至结束前都不可能有其他代码来访问同一区域。&lt;/li&gt;
&lt;li&gt;长期访问：即在访问开始至结束前可能有其他代码来访问同一区域。长期访问可能和其他即时访问或者长期访问重叠。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;重叠访问主要带有 &lt;strong&gt;in-out&lt;/strong&gt; 参数的函数（或方法）以及结构体中带有 &lt;strong&gt;mutating&lt;/strong&gt; 关键字的方法。我们下面来看看例子。&lt;/p&gt;
&lt;h2 id=&quot;in-out-参数的访问冲突&quot;&gt;In-Out 参数的访问冲突&lt;/h2&gt;
&lt;p&gt;一个函数对其 &lt;strong&gt;in-out&lt;/strong&gt; 参数具有长期的访问权限，如下代码：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Excerpt From: Apple Inc. &quot;The Swift Programming Language (Swift 4).” iBooks&quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;
var stepSize = 1
 
func increment(_ number: inout Int) {
    number += stepSize
}
 
increment(&amp;amp;stepSize)
// Error: conflicting accesses to stepSize
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上述代码中，&lt;code&gt;stepSize&lt;/code&gt; 是一个全局变量，而且被作为一个 &lt;strong&gt;in-out&lt;/strong&gt; 参数传给 &lt;code&gt;increment(_:)&lt;/code&gt; 方法。冲突的原因在于 &lt;code&gt;number&lt;/code&gt; 和 &lt;code&gt;stepSize&lt;/code&gt; 引用的是内存中同一区域，并且同时进行读写访问，因此导致访问冲突。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.tingxins.cn/blog/memory_increment_2x.png&quot; alt=&quot;memory_increment_2x&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以采用复制 &lt;code&gt;stepSize&lt;/code&gt; 的方式解决该问题：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
// Make an explicit copy.
var copyOfStepSize = stepSize
increment(&amp;amp;copyOfStepSize)
 
// Update the original.
stepSize = copyOfStepSize
// stepSize is now 2
// stepSize is now 2
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;self-的访问冲突&quot;&gt;self 的访问冲突&lt;/h2&gt;
&lt;p&gt;在结构体中，带有 &lt;strong&gt;mutating&lt;/strong&gt; 关键字的方法调用期间对 self 具有写入权限。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
extension Player {
    mutating func shareHealth(with teammate: inout Player) {
        balance(&amp;amp;teammate.health, &amp;amp;health)
    }
}
 
var oscar = Player(name: &quot;Oscar&quot;, health: 10, energy: 10)

var maria = Player(name: &quot;Maria&quot;, health: 5, energy: 10)

oscar.shareHealth(with: &amp;amp;maria)  // OK
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码是 Ok 的，即时写入权限在时间上是重叠的，但是是分别访问 &lt;code&gt;oscar&lt;/code&gt; 的 health 和 &lt;code&gt;maria&lt;/code&gt; 的 health，因此在 &lt;code&gt;shareHealth(with:)&lt;/code&gt; 方法中并没有发生内存访问冲突。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.tingxins.cn/blog/memory_share_health_maria_2x.png&quot; alt=&quot;memory_share_health_maria_2x&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然而，如果你把 &lt;code&gt;oscar&lt;/code&gt; 作为参数传给 &lt;code&gt;shareHealth(with:)&lt;/code&gt;，那么就会产生内存访问冲突：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
oscar.shareHealth(with: &amp;amp;oscar)
// Error: conflicting accesses to oscar
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很显然，&lt;code&gt;shareHealth(with:)&lt;/code&gt; 方法中的 &lt;code&gt;self&lt;/code&gt; 和 &lt;code&gt;teammate&lt;/code&gt; 同时指向内存中同一区域，即同时对 &lt;code&gt;oscar&lt;/code&gt; 的 &lt;code&gt;health&lt;/code&gt; 进行读写访问，因此导致访问冲突。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.tingxins.cn/blog/memory_share_health_oscar_2x.png&quot; alt=&quot;memory_share_health_oscar_2x&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;属性的访问冲突&quot;&gt;属性的访问冲突&lt;/h2&gt;
&lt;p&gt;像结构体、元组、枚举这些类型都是由各个值组成的，如：结构体的各种属性、元组的各种元素等等。因为它们都是值类型，这意味着对其中一个属性的读写访问就是对整个值进行读写访问。代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var playerInformation = (health: 10, energy: 20)

balance(&amp;amp;playerInformation.health, &amp;amp;playerInformation.energy)

// Error: conflicting access to properties of playerInformation
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码不难理解，因为元祖是值类型，上述 &lt;code&gt;balance(_:_:)&lt;/code&gt; 发生内存访问冲突，即同时访问 &lt;code&gt;playerInformation。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下面我们再看一下结构体，其中 &lt;code&gt;holly&lt;/code&gt; 是一个全局变量&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var holly = Player(name: &quot;Holly&quot;, health: 10, energy: 10)
balance(&amp;amp;holly.health, &amp;amp;holly.energy)  // Error
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码会报这样一个错误：Simultaneous accesses to 0x10****580, but modification requires exclusive access。其实就是内存访问冲突了，Swift 4 中也针对这块做了优化处理，感兴趣的同学可以查阅我之前写的一篇文章&lt;a href=&quot;http://www.jianshu.com/p/1bed14f1fe2a&quot;&gt;《[WWDC17] What's New in Swift 4 ?》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在实践中，上述代码中的 &lt;code&gt;holly&lt;/code&gt; 一般是个局部变量而非全局变量，编译器可以保证对结构体的存储属性进行重叠访问是安全的，代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
func someFunction() {
    var oscar = Player(name: &quot;Oscar&quot;, health: 10, energy: 10)
    balance(&amp;amp;oscar.health, &amp;amp;oscar.energy)  // OK
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码运行是 Ok 的，有时候，限制结构体的各属性进行重叠访问是没有必要的，这也就是为什么 &lt;code&gt;someFunction()&lt;/code&gt; 没有发生冲突访问的原因。内存访问安全虽应当得到保证，但是独占访问比内存安全访问要求更加严格，从上述代码可看出，即时违背了独占访问的原则，内存安全也能得到保证。一般情况下，编译器会在如下条件下保证对结构体的存储属性进行安全的重叠访问：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;只访问某个实例的存储属性，而不是计算属性或类属性&lt;/li&gt;
&lt;li&gt;访问的是局部的结构体变量，而不是全局变量&lt;/li&gt;
&lt;li&gt;结构体没有被任何闭包所捕获，或者仅被非逃逸闭包捕获。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;感兴趣的同学可以查阅这里 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/MemorySafety.html#//apple_ref/doc/uid/TP40014097-CH46-ID567&quot;&gt;The Swift Programming Language (Swift 4)&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 06:38:00 +0000</pubDate>
<dc:creator>tingxins</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tingxins/p/7750026.html</dc:identifier>
</item>
<item>
<title>新技术学习思路——工作一年的总结 - SonoFelice</title>
<link>http://www.cnblogs.com/sonofelice/p/7749938.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sonofelice/p/7749938.html</guid>
<description>&lt;p&gt;在狼长正式工作一年有余，对于接触到的新技术的学习已经不再有那么多的畏惧感了，总结一下我对新技术的学习思路，希望能给大家提供一个参考。&lt;/p&gt;
&lt;p&gt;工作一年接触的新技术：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;bigpipe&lt;/li&gt;
&lt;li&gt;AMQ&lt;/li&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;k8s&lt;/li&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;go&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;新技术学习思路：&lt;/p&gt;
&lt;p&gt;1、语言类：&lt;/p&gt;
&lt;p&gt;接触任何语言，首先就是在本机配置好相关的运行环境，选择一个好的ide。写个helloworld。&lt;/p&gt;
&lt;p&gt;再去熟悉基本的语法即可。&lt;/p&gt;
&lt;p&gt;2、技术类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;百度or谷歌，搜索入门指南&lt;/li&gt;
&lt;li&gt;找台机器or本机安装后，run起来&lt;/li&gt;
&lt;li&gt;先跑几个简单的小例子，结合入门指南，有一个简单的认识&lt;/li&gt;
&lt;li&gt;应用：结合官网api，能够在自己的项目中调用起来（用是第一位的）&lt;/li&gt;
&lt;li&gt;深入——权威指南相关，or源码&lt;/li&gt;
&lt;li&gt;遇到问题，overflow会有很多问题和解决方案，可以参考&lt;/li&gt;
&lt;li&gt;技术周边：某项新技术涉及到的相关概念可以多去了解，集中注意力之后，再去发散思维&lt;/li&gt;
&lt;li&gt;加入该技术的相关圈子：微信圈、qq圈，会有大牛指导的，可能不会多，但真的可能会碰到的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以我接触Elasticsearch为例：&lt;/p&gt;
&lt;p&gt;做的项目要用Elasticsearch实现全文检索，可是刚开始我连这是个什么东西都不知道，那我就依次做了下面的事情：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;百度Elasticsearch是干嘛的&lt;/li&gt;
&lt;li&gt;刚好认识的圈子里面有个做搜索引擎相关的，请教一番，有了一个大致的了解（最后发现其实如果不自己动手去做，别人讲再多，你都听不懂）&lt;/li&gt;
&lt;li&gt;找了台机器，安装Elasticsearch，并安装了Elasticsearch的相关插件（kibana，ik等），反正就慢慢折腾吧，其中曲折在前面的博客里面有介绍&lt;/li&gt;
&lt;li&gt;参考官网文档，尝试各种curl请求，熟悉其基本的用法&lt;/li&gt;
&lt;li&gt;项目中实际应用的就是进行全文检索，那么确定好自己的关注点：存储、查询。存储的话需要搞懂es是怎么存放内容的，查询的话，去查es提供的各种查询接口，看怎么调用即可&lt;/li&gt;
&lt;li&gt;项目中实际应用（看官网api足够了）&lt;/li&gt;
&lt;li&gt;技术深入：查询优化、安全防护、各种插件（这就需要深入到书里面有目的性的去找你需要的内容，甚至需要看源码）&lt;/li&gt;
&lt;li&gt;在现有的技术圈子里面咨询是否有用过es的，果然，像滚雪球一样，会加入新的es圈，特别是联系到了《Elasticsearch技术解析与实战》的作者朱琳，给了一些指导和建议，非常感激。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;目前能够做到cover住es相关的一些问题处理。&lt;/p&gt;

&lt;p&gt;以前，总会对新的技术有一点畏惧感，特别是遇到问题之后找了很久都没有解决方案，很有挫败感。但是突破了层层难关，总会守得云开见月明。各位共勉。&lt;/p&gt;

</description>
<pubDate>Sun, 29 Oct 2017 05:56:00 +0000</pubDate>
<dc:creator>SonoFelice</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sonofelice/p/7749938.html</dc:identifier>
</item>
<item>
<title>ASP.NET没有魔法——Identity与Owin - 7m鱼</title>
<link>http://www.cnblogs.com/selimsong/p/7743112.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/selimsong/p/7743112.html</guid>
<description>&lt;p&gt; 　　上篇文章介绍了如何在ASP.NET MVC项目中引入Identity组件来实现用户注册、登录及身份验证功能，并且也提到了Identity是集成到Owin中的，本章就来介绍一下什么是Owin以及如何使用Owin来增强Identity的功能。&lt;/p&gt;
&lt;p&gt;　　本章的主要内容有：&lt;/p&gt;
&lt;p&gt;　　● 什么是Owin&lt;br/&gt;　　● 关于Katana&lt;br/&gt;　　● Owin与宿主IIS&lt;br/&gt;　　● Owin与Identity的集成&lt;br/&gt;　　● Identity在Owin中的特殊用法&lt;/p&gt;
&lt;h2&gt;什么是Owin&lt;/h2&gt;
&lt;p&gt;　　Owin(Open Web Server Interface)它是一个.NET Web服务器和Web程序之间的接口标准，其目的是为了应用程序与服务器解耦。为什么需要解耦？因为ASP.NET应用(不包含ASP.NET Core和mono)都需要部署在IIS服务器上，而通过实现Owin的接口，可以将一个控制台程序作为Web应用程序的宿主。&lt;/p&gt;
&lt;p&gt;　　Owin实质上是提供了一个名称为环境字典的IDictionary&amp;lt;string, object&amp;gt;类型来存储所有数据，包括请求和响应数据。在这个字典中Owin定义了一系列的核心键值对：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027145209508-1354827027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　另外还有一个重要的核心类型是一个参数为IDictionary&amp;lt;string, object&amp;gt;(即上面分析用于存储数据的类型)的代理：Func&amp;lt;IDictionary&amp;lt;string, object&amp;gt;, Task&amp;gt;，&lt;span&gt;每一个委托&lt;/span&gt;都是用于&lt;span&gt;处理请求的一个独立单元&lt;/span&gt;，将&lt;span&gt;多个独立单元&lt;/span&gt;集合到一起就&lt;span&gt;形成&lt;/span&gt;了&lt;span&gt;Owin的处理管道&lt;/span&gt;，另外返回值是一个Task，换句话说所有的处理单元或者说中间件都需要设计成异步的，可以提高系统的吞吐量。&lt;br/&gt;　　更多信息可参考文档：&lt;a href=&quot;http://owin.org/html/owin.html&quot; target=&quot;_blank&quot;&gt;http://owin.org/html/owin.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;关于Katana&lt;/h2&gt;
&lt;p&gt;　　Owin既然是一个接口标准，那么就一定有实现，微软对Owin的实现是一个名为Katana的项目(&lt;a href=&quot;https://github.com/aspnet/AspNetKatana&quot; target=&quot;_blank&quot;&gt;https://github.com/aspnet/AspNetKatana&lt;/a&gt;)，该项目中的组件大部分以Microsoft.Owin作为前缀，一下是github上部分组件目录：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027145722992-1654921049.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Katana主要有4个部分组成，分别是宿主、服务器、中间件和应用，如下图整个结构是分层次的，由下到上：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027145837070-1246516477.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　● Host：也就是宿主，使用Katana可选Owin的宿主有&lt;span&gt;IIS&lt;/span&gt;、&lt;span&gt;自定义宿主(如console程序)&lt;/span&gt;以及&lt;span&gt;OwinHost.exe&lt;/span&gt;。前面两个比较好理解，对于OwinHost.exe其实是Katana项目的一个用于启动Owin应用的程序，通过命令行的方式就可以运行指定的Owin应用（注：所有的宿主都可以通过Nuget管理器安装）。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171029120242133-946680779.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;　　● Server：服务器，就是用来接收、响应请求的组件。&lt;br/&gt;　　　　○ 在IIS下，通过安装Microsoft.Owin.Host.SystemWeb，将&lt;span&gt;Owin的HttpModule“动态”注册到IIS处理管道中接收处理HTTP请求&lt;/span&gt;。&lt;br/&gt;　　　　○ 在自定义的宿主中，通过安装Microsoft.Owin.Host.HttpListener，以代码的形式显式的根据地址和端口打开一个Soket来监听请求。OwinHost.exe也是使用该组件来监听请求。&lt;br/&gt;　　● Middleware：中间件，实质上就是一个实现了Func&amp;lt;IDictionary&amp;lt;string, object&amp;gt;, Task&amp;gt;的委托，也可以简单通过继承OwinMiddleware类型来创建。创建完成后在Owin的Startup类型中通过IAppBuilder类型Use方法将其添加到管道中。&lt;br/&gt;　　● Application：应用层，Owin以及Katana都没有考虑一种新的开发应用的方式，换句话说可以沿用之前的mvc、webapi、Signalr或者是静态页面等方式来开发应用。&lt;/p&gt;
&lt;h2&gt;Owin与宿主IIS&lt;/h2&gt;
&lt;p&gt;　　Owin在IIS的宿主(Microsoft.Owin.Host.SystemWeb)其实是一个IHttpModule的实现：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027151751961-276628486.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　而使用HttpModule对IIS的请求处理管理进行拓展的一般方法都是使用配置的方式在Web.config文件中添加。但是引入Owin后其实没有在配置文件里面加入任何配置，而是通过以下代码在程序运行时注册的：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027155754445-1637109536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Owin在使用IIS作为宿主时就是通过HttpModule的形式对原有的ASP.NET HTTP请求通道进行了拓展，请求在ASP.NET的管道处理过程中通过HttpModule拓展的形式将整个请求转移到Owin管道处理。&lt;/p&gt;
&lt;h2&gt;Owin与Identity的集成&lt;/h2&gt;
&lt;p&gt;　　Identity就是通过Owin中间件的方式集成到处理管道中的，如下图代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027161603258-188005158.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　另外在安装Identity的同时还在Web.config文件中加入了以下配置：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027162231351-597260136.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　删除了Form验证的HttpModule，这里的原因也是identity的验证可以代替Form验证，所以对这个功能进行了删除。&lt;/p&gt;
&lt;p&gt;　　运行时的HttpModule列表：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027162352117-1120745889.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Identity在Owin中的特殊用法&lt;/h2&gt;
&lt;p&gt;　　(注：以下代码可以参考ASP.NET MVC默认带有身份验证的项目模板，部分代码有改动DbContext名称、命名空间以及省略了部分配置，如双因子验证等)&lt;/p&gt;
&lt;p&gt;　　说是特殊用法，实际上是在&lt;span&gt;每一次请求&lt;/span&gt;时都会&lt;span&gt;创建&lt;/span&gt;一个DbContext、UserManager以及SignInManage&lt;span&gt;&lt;span&gt;r&lt;/span&gt;放在Owin的环境字典中&lt;/span&gt;，那么意味着&lt;span&gt;整个请求过程&lt;/span&gt;中都可以&lt;span&gt;通过Owin&lt;/span&gt;来&lt;span&gt;获取这些实例&lt;/span&gt;对用户进行操作。&lt;/p&gt;
&lt;p&gt;　　1. 使用前准备，封装DbContext的创建过程：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170213195-562986520.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2. 封装UserManager创建过程(注：UserManager的创建中还包含了对用户名、密码的验证配置以及一些验证配置信息)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027164651101-1096948098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3. 封装SignInManager：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027164914258-261328769.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　SignInManager中依赖的UserManager来自Owin的上下文对象。&lt;/p&gt;
&lt;p&gt;　　另外这里还对通过用户信息生成身份信息做了封装：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027165235258-1610974971.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4. 在Owin的Startup文件中加入以下代码，确保在请求时创建这些对象：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027165403992-575253880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　需要注意的是CreatePerOwinContext来自Identity的Owin拓展：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027165459414-78709613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　而CreatePerOwinContext方法实际上是为Owin管道添加了一个名称为IdentityFactoryMiddleware的Owin中间件，意思就是上面的三个方法就在Owin管道中插入了三个相同的中间件(但参数不同)，以下是IdentityFactoryMiddleware调用的代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170300133-213392857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　5. 修改Controller代码，在实现用户注册、登录功能时，从Owin的Context中获取UserManager及SignInManager来实现：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170453461-214777402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注册方法，代码来自默认模板(相比之前的代码加入了对创建结果的判断)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170525633-86802379.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　登录方法，代码来自默认模板(相比之前的代码加入了对创建结果的判断)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170609914-1908104625.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　6. 运行效果：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170655320-2144831521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170706461-1433233153.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　7. 安装Identity的汉化包：&lt;/p&gt;
&lt;p&gt;　　从上面的错误提示中可以看到英文的提示，它们是通过在Controller中对ModelState信息添加错误信息，然后在View中通过Html.ValidationSummary方法显示出来的(更多与Model相关的内容后续介绍)。&lt;/p&gt;
&lt;p&gt;　　但是由于创建用户返回的结果信息是英文的，所以显示也是英文，如果要把它替换成中文，那么需要安装汉化包：Microsoft.AspNet.Identity.Core.zh-Hans：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170832305-831040034.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　安装完成运行效果：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170852726-224189188.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注：用户名密码的验证是在创建UserManager的时候配置的：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/640251/201710/640251-20171027170953805-1528946901.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;　　本文介绍了Owin以及ASP.NET MVC中是如何将Identity集成到Owin中并使用的，另外借鉴ASP.NET MVC模板的代码改进了之前文章中的用户注册、登录的实现。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://owin.org/html/spec/owin-1.0.html#1-overview&quot; target=&quot;_blank&quot;&gt;http://owin.org/html/spec/owin-1.0.html#1-overview&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb470252.aspx&quot; target=&quot;_blank&quot;&gt;https://msdn.microsoft.com/en-us/library/bb470252.aspx&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/aspnet/overview/owin-and-katana/owin-middleware-in-the-iis-integrated-pipeline&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/aspnet/aspnet/overview/owin-and-katana/owin-middleware-in-the-iis-integrated-pipeline&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin.Host.SystemWeb/PreApplicationStart.cs&quot; target=&quot;_blank&quot;&gt;http://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin.Host.SystemWeb/PreApplicationStart.cs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: ASP.NET没有魔法——Identity与Owin&quot; href=&quot;http://www.cnblogs.com/selimsong/p/7743112.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/selimsong/p/7743112.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/selimsong/p/7641799.html&quot;&gt;ASP.NET没有魔法——目录&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 04:10:00 +0000</pubDate>
<dc:creator>7m鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/selimsong/p/7743112.html</dc:identifier>
</item>
<item>
<title>Fastify 系列教程三 （验证、序列化和生命周期） - lavyun</title>
<link>http://www.cnblogs.com/smartXiang/p/7749737.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smartXiang/p/7749737.html</guid>
<description>&lt;p&gt;&lt;strong&gt;Fastify 系列教程：&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;验证&quot;&gt;验证&lt;/h2&gt;
&lt;p&gt;Fastify 可以验证请求信息，只有符合验证规则的请求才会被处理。&lt;/p&gt;
&lt;h3 id=&quot;json-schema&quot;&gt;JSON Schema&lt;/h3&gt;
&lt;p&gt;什么是 JSON Schema ，通俗来讲，JSON Schema 就是“描述 JSON 数据格式的一段 JSON”。&lt;/p&gt;
&lt;p&gt;首先，JSON Schema 也是一个 JSON 字符串，下面来看一个简单的 JSON Schema：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;$schema&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;http://json-schema.org/draft-04/schema#&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Product&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;A product from Acme's catalog&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;The unique identifier for a product&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;integer&quot;&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Name of the product&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;string&quot;&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;minimum&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;exclusiveMinimum&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;required&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段规则描述了这样一个JSON：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;code&gt;type&lt;/code&gt; 表示该 JSON 的类型是一个 &quot;object&quot;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;type 的参数可以是：&lt;code&gt;number&lt;/code&gt;, &lt;code&gt;integer&lt;/code&gt;(整型), &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt; 或者 &lt;code&gt;null&lt;/code&gt;。也可以是一个包含上述类型的数组。&lt;/p&gt;
&lt;ol readability=&quot;13&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;em&gt;schema&lt;/em&gt;: &lt;code&gt;{ &quot;type&quot;: &quot;number&quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;valid&lt;/em&gt;: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;1.5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;invalid&lt;/em&gt;: &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, &lt;code&gt;&quot;1&quot;&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;em&gt;schema&lt;/em&gt;: &lt;code&gt;{ &quot;type&quot;: &quot;integer&quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;valid&lt;/em&gt;: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;invalid&lt;/em&gt;: &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, &lt;code&gt;&quot;1&quot;&lt;/code&gt;, &lt;code&gt;1.5&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;em&gt;schema&lt;/em&gt;: &lt;code&gt;{ &quot;type&quot;: [&quot;number&quot;, &quot;string&quot;] }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;valid&lt;/em&gt;: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;1.5&lt;/code&gt;, &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, &lt;code&gt;&quot;1&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;invalid&lt;/em&gt;: &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;2、&lt;code&gt;properties&lt;/code&gt; 定义了 JSON 的字段规则。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、&lt;code&gt;requirede&lt;/code&gt; 定义了必须存在的属性列表。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们来看一下可以用于这一模式中的各种重要关键字：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;$schema&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;$schema 关键字状态，表示这个模式与 v4 规范草案书写一致。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;title&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;用它给我们的模式提供了标题。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;description&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;关于模式的描述。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;type&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;type 关键字在我们的 JSON 数据上定义了第一个约束：必须是一个 JSON 对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;properties&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;定义各种键和他们的值类型，以及用于 JSON 文件中的最小值和最大值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;required&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;存放必要属性列表。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;minimum&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;给值设置的约束条件，表示可以接受的最小值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;exclusiveMinimum&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;如果存在 &quot;exclusiveMinimum&quot; 并且具有布尔值 true，如果它严格意义上大于 &quot;minimum&quot; 的值则实例有效。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;maximum&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;给值设置的约束条件，表示可以接受的最大值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;exclusiveMaximum&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;如果存在 &quot;exclusiveMinimum&quot; 并且具有布尔值 true，如果它严格意义上小于 &quot;maximum&quot; 的值则实例有效。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;multipleOf&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;如果通过这个关键字的值分割实例的结果是一个数字则表示紧靠 &quot;multipleOf&quot; 的数字实例是有效的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;maxLength&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;字符串实例字符的最大长度数值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;minLength&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;字符串实例字符的最小长度数值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;pattern&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;如果正则表达式匹配实例成功则字符串实例被认为是有效的。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;通过上面的配置，我们就可以验证某个 JSON 是否符合要求了：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;validate&lt;/span&gt;(JSONSchema&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; myJson)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有同学肯定会问，这个验证函数 &lt;code&gt;validate&lt;/code&gt; 从哪来？github 上有各种第三方验证器：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;C&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;WJElement (LGPLv3)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Java&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;json-schema-validator (LGPLv3)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;.NET&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Json.NET (MIT)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;ActionScript 3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Frigga (MIT)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Haskell&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;aeson-schema (MIT)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Python&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Jsonschema&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Ruby&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;autoparse (ASL 2.0); ruby-jsonschema (MIT)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;PHP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;php-json-schema (MIT). json-schema (Berkeley)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;JavaScript&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Orderly (BSD); JSV; json-schema; Matic (MIT); Dojo; Persevere (modified BSD or AFL 2.0); schema.js.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;而 Fastify 所使用的 &lt;a href=&quot;https://www.npmjs.com/package/ajv&quot;&gt;ajv&lt;/a&gt; 也是一个 JSON Schema 验证器，号称：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;The&lt;/span&gt; fastest JSON Schema validator for Node.js and browser with draft 6 support.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了上面的介绍，我们就来看一下 Fastify 是怎么验证请求信息的吧：&lt;/p&gt;
&lt;p&gt;非常简单，只需要添加需要验证的字段即可。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;body&lt;/code&gt;:验证请求体，必须是 POST 或者 PUT 请求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querystring&lt;/code&gt;: 验证查询字符串。可以是一个完成的 JSON Schema 对象（符合 &lt;code&gt;{type: &quot;object&quot;, properties: {...}}&lt;/code&gt; 的格式）或者没有 &lt;code&gt;type&lt;/code&gt; 和 &lt;code&gt;properties&lt;/code&gt; 属性，而只有查询字符串列表。（查看下面的例子）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt;: 验证路由参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headers&lt;/code&gt;: 验证请求头。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;fastify&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/add'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'string'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'number'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'id'&lt;/span&gt;]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(request&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; reply)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;reply&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'validate successful'&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当发送一个body为&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;lavyun&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;的 &lt;code&gt;post&lt;/code&gt; 请求时，会得到错误：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Bad Request&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;[{&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;dataPath&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;.id&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;schemaPath&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;#/properties/id/type&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;should be number&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;}]&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;400&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为 id 不符合 &lt;code&gt;number&lt;/code&gt; 类型，把 id 改成 &lt;code&gt;1&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：Fastify 配置了 avj 默认会自动把不符合类型的值强制转换成规则中定义的类型，如果仍然不符合类型，则返回错误：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也会验证通过，因为被强转成：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;  &lt;span class=&quot;er&quot;&gt;&quot;name&quot;:&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;&quot;null&quot;,&lt;/span&gt;
  &lt;span class=&quot;er&quot;&gt;&quot;id&quot;:&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果不想被强制转换，可以通过配置 avj 关闭该功能：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; fastify &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fastify'&lt;/span&gt;)(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;ajv&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;coerceTypes&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;schema-compiler&quot;&gt;Schema Compiler&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;schemaCompiler&lt;/code&gt; 是一个指定 schema 编译器的方法。（用来验证 body, params, headers, querystring）。默认的 &lt;code&gt;schemaCompiler&lt;/code&gt; 返回一个实现 &lt;code&gt;ajv&lt;/code&gt; 接口的编译器。&lt;/p&gt;
&lt;p&gt;如果你想更改默认的 &lt;code&gt;ajv&lt;/code&gt; 实例，可以传入 &lt;code&gt;ajv&lt;/code&gt; 配置项， 查看 &lt;a href=&quot;https://github.com/epoberezkin/ajv#options&quot;&gt;Ajv documentation&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;p&gt;或许想直接更换验证的库，比如使用 Joi：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; Joi &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'joi'&lt;/span&gt;)

&lt;span class=&quot;va&quot;&gt;fastify&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/the/url'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Joi&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;object&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Joi&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;string&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;required&lt;/span&gt;()
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;required&lt;/span&gt;()
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;schemaCompiler&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; schema &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; data &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Joi&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;validate&lt;/span&gt;(data&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; schema)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;序列化&quot;&gt;序列化&lt;/h2&gt;
&lt;p&gt;通常，我们会通过 JSON 将数据发送给客户端， Fastify 提供了一个强大的工具： &lt;a href=&quot;https://www.npmjs.com/package/fast-json-stringify&quot;&gt;fast-json-stringify&lt;/a&gt;，这是一个比原生 &lt;code&gt;JSON.stringify()&lt;/code&gt; 还快的 JSON 格式化器，其原理就是通过配合 JSON Schema，快速定位字段的类型，省去了原生 &lt;code&gt;JSON.stringify()&lt;/code&gt; 内部判断字段类型的步骤，实现了 &lt;code&gt;two times faster than JSON.stringify().&lt;/code&gt; 的效果。&lt;/p&gt;
&lt;p&gt;在路由选项中传入了 output schema，fastify 就会使用它。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'string'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;otherValue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'boolean'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;response schema 是基于状态码的，如果想应用相同的 schema 给多个同级状态码， 可以使用 &lt;code&gt;2xx&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'2xx'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'string'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;otherValue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'boolean'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dv&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'string'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;patternProperties&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fast-json-stringify&lt;/code&gt; 支持属性匹配，符合属性正则的字段都会被验证：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; stringify &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;fastJson&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Example Schema'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'string'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;patternProperties&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'num'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'number'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'.*foo$'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'string'&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
 
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'nick'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;matchfoo&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;otherfoo&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'str'&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;matchnum&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;stringify&lt;/span&gt;(obj)) &lt;span class=&quot;co&quot;&gt;// '{&quot;matchfoo&quot;:&quot;42&quot;,&quot;otherfoo&quot;:&quot;str&quot;,&quot;matchnum&quot;:3,&quot;nickname&quot;:&quot;nick&quot;}'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多 &lt;code&gt;fast-json-stringify&lt;/code&gt; 的使用可以查看&lt;a href=&quot;https://www.npmjs.com/package/fast-json-stringify&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;生命周期&quot;&gt;生命周期&lt;/h2&gt;
&lt;p&gt;Fastify 严格遵循内部生命周期的架构。在每个部分的右侧分支上都有生命周期的下一个阶段，左侧的分支上有相应的错误状态码，如果父代引发错误，则会生成相应的错误状态码（&lt;em&gt;注意，所有错误都由Fastify自动处理&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;Fastify 生命周期图示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Incoming Request (请求到达)
  │
  └─▶ Instance Logger (实例化 Logger)
        │
        └─▶ Routing （路由匹配）
             │
       404 ◀─┴─▶ onRequest Hook (onRequest钩子)
                  │
        4**/5** ◀─┴─▶ run Middlewares （执行中间件）
                        │
              4**/5** ◀─┴─▶ Parsing （解析请求对象）
                             │
                       415 ◀─┴─▶ Validation (验证)
                                   │
                             400 ◀─┴─▶ preHandler Hook (preHandler钩子)
                                         │
                               4**/5** ◀─┴─▶ beforeHandler
                                               │
                                     4**/5** ◀─┴─▶ User Handler
                                                     │
                                                     └─▶ Reply （响应）
                                                          │ │
                                                          │ └─▶ Outgoing Response （发出响应）
                                                          │
                                                          └─▶ onResponse Hook （onResponese钩子&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fastify 的更多使用将在接下来的博客中说明。&lt;/p&gt;
&lt;p&gt;参考文档：&lt;br/&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/json/schema.html&quot;&gt;JSON 模式 / http://wiki.jikexueyuan.com/project/json/schema.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tips：访问 &lt;a href=&quot;https://lavyun.gitbooks.io/fastify/content/&quot; class=&quot;uri&quot;&gt;https://lavyun.gitbooks.io/fastify/content/&lt;/a&gt; 查看我翻译的 Fastify 中文文档。&lt;/p&gt;
&lt;p&gt;访问&lt;a href=&quot;http://lavyun.cn/&quot;&gt;lavyun.cn&lt;/a&gt; 查看我的个人博客&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 04:01:00 +0000</pubDate>
<dc:creator>lavyun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smartXiang/p/7749737.html</dc:identifier>
</item>
<item>
<title>谨慎对待人工智能 - 窗户</title>
<link>http://www.cnblogs.com/Colin-Cai/p/7749031.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Colin-Cai/p/7749031.html</guid>
<description>&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:sql;gutter:true;&quot;&gt;
　　版权申明：本文为博主窗户(Colin Cai)原创，欢迎转帖。如要转贴，必须注明原文网址

　　http://www.cnblogs.com/Colin-Cai/p/7749031.html 

　　作者：窗户

　　QQ：&lt;span&gt;6679072&lt;/span&gt;

　　E-mail：&lt;span&gt;6679072@qq.com
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这几天，沙特阿拉伯接纳了一个新公民——人工智能机器人索菲娅，挺轰动的一个新闻，有史以来人类第一次认同人工智能为公民，而且关键，这不是一次作秀。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　OMG，我真不知道人类到底在干什么，到底想干什么。我一向觉得，人类研究人工智能可以，但一定一定要把人工智能装进笼子，否则这或许是有史以来人类干的最危险的事情，霍金的担忧可能真不是杞人忧天。出于各种需求，甚至包括军事，人类在一步一步的逼近底线。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上个世纪末前，深蓝第一次向全世界人类展示了机器的强悍，深蓝以2胜1负3平的成绩打败了国际象棋世界冠军卡斯帕罗夫。深蓝最基本框架只是基于价值函数做启发式搜索，比起现在的人工智能模型简直弱爆了。那个时候，很多人认为，虽然国际象棋已经战胜人类，但围棋永远搞不定，因为围棋有太多“虚”的东西，量化起来过于困难，从而强智能才有可能在围棋上打败人。而那个年代下，强智能完全是科幻小说里的玩意，而甚至对于人工智能研究者他们本人，都觉得这简直是天方夜谭。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然而，我们看到了，Alphago出现了，它把我们的世界冠军完虐了。围棋第一人柯洁不服，说Alphago下不过他。JOKE!不知天高地厚啊，Alphago Master教会他重新看待人工智能。 人们惊呼，人工智能好厉害，深度学习居然如此厉害，把人类智力上最后一点荣耀给抹掉了。甚至于，Google的一篇《Mastering the game of Go with deep neural networks and tree search》论文发出，使得模仿者也可以把智能围棋训练到一定高度。甚至有段时间哥也蠢蠢欲动，想照着论文里的手段，自己也考虑搞个东西玩玩。不过，好在Alphago的训练中还有人类下的棋谱，给人类保留了一点尊严。我们可以阿Q式的YY，要不是祖宗们下了几千年围棋，研究了这么多的理论，哪有Alphago的现在。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　可是，Alphago zero的出现，分分钟叫人重新做人啊。这是一个从出身开始，就只懂围棋规则，从未学习过任何人类的围棋研究，仅靠自己和自己对弈来提升围棋水平。完全自我学习的结果，令之前称霸围棋界的Alphago Master早已不是其对手。Alphago zero完全靠左右互搏就在短短几个月超越人类几千年的积累。太恐怖了！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我从小就相信机械唯物者的认为，生命只是机器的一种形式，而意识这个东西本身没有任何玄妙的地方，一个人此时此刻也完全无法自己真正决定抬左手还是抬右手，眨眼睛还是摇脖子，我今天写这篇文章，你今天看这篇文章也不过都是机器运作的结果，而意识不过就如同我们程序的中间数据一样罢了。否则，如果你真的想从人的角度去解释意识，并认为自己可以真正决定点什么，那么你就开始陷入了一种超自然的怪圈中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然而新的问题产生了，一堆杂质的布朗运动，局部永远都会那么混乱。然后生命的繁殖，却使得局部的负熵变为了常态，这曾经让我一度觉得不可思议。可是当冬天到来，黄河的水也会结冰，非生物界也已昂存在无生命的局部负熵，自然界并不处处都只是布朗运动。而我们使用遗传算法（Genetic Algorithm），都可以让一堆初始的时候杂乱无章的数据在不断进化中越来越优秀，而过程却一直是在程序之中，生命机器的进化也一样遵循，可以不断筛选出优秀的生命。我们可以用bagging、boosting的手段来组合各个分类器，其手段和自然界的筛选本质上来看都是过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如同生物学界曾经争论过病毒是否属于生命，最终的结果是认同了生命和非生命其实也没有严格界限。一样的道理，智能和非智能真的有严格界限吗？人和狗，狗和蚂蚱之间的智能真的有本质区别吗？ 我倾向于人类可能只不过是大愚若智。人工智能和其他程序就如同病毒和生物之间一样，其实没有明显清晰的界限。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　目前人工智能解决封闭性问题越来越厉害，深度学习(Deep Learning)已经成为AI界的标配，不搞n个隐藏层搞DL，就跟不上时代。封闭性的问题永远只在某一个规则限定好的领域里，比如医学上通过图像分析某种疾病，再比如Alphago等。可还有一类是开放性问题，这是未来AI研究的关键性方向，这类问题目的不明确，或者在变动，或者根本谈不上一个绝对的目的。开放性问题的研究是通往强智能的必经之路。潘多拉的盒子也会在途中打开。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　既然自然界塑造了人这样一个接近完美的机器，那么人工智能也应该能塑造另外一个人造机器，殊途同归，只要不断去研究人工智能，相信一切只不是时间问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　《三体》这部小说，我认为有很多值得我们深思的地方：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　1.如果外星人侵略过来，人类和蚂蚁没有合作的必要。强人工智能诞生之后，人类在强人工智能眼里就是蝼蚁，即便强敌侵入，也不可能有合作的必要，只能算是拖后腿的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2.不同的智能物种之间没有信任，对方的存在就是对自己的威胁。强人工智能诞生之后，人类肯定意识到强人工智能的可怕，而强人工智能自然知道人类的担忧，从而最终矛盾不可调和。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　于是，昨天，我和一朋友争论，我说，一群蠢家伙(人类)想造一些比自己聪明一万倍的东西，却还想控制它们，这简直是天方夜谭。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从而，我觉得，人类要控制好人工智能这个东西，否则演化为史上最大危机真未必是拍电影。只是，但愿这一切从来不会发生，我也不过是在杞人忧天，痴人说梦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 03:53:00 +0000</pubDate>
<dc:creator>窗户</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Colin-Cai/p/7749031.html</dc:identifier>
</item>
<item>
<title>微信和支付宝支付模式详解及实现二 - KevinCC</title>
<link>http://www.cnblogs.com/osscoder/p/7747860.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/osscoder/p/7747860.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　继上篇&lt;a href=&quot;http://www.cnblogs.com/osscoder/p/6708222.html&quot; target=&quot;_blank&quot;&gt;《微信和支付宝支付模式详解及实现》&lt;/a&gt;到现在已经有半年时间了，这期间不少朋友在公号留言支付相关的问题，最近正好也在处理公司支付相关的对接，打算写这篇来做一个更进一步的介绍，同时根据主要的几个支付方式提供实现案例。希望能够帮助有需要的同学，内容主要分为两个模块：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;14.295774647887&quot;&gt;
&lt;p&gt;&lt;span&gt;1. 微信和支付宝支付方式细分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1） 支付方式的对比&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       2）接口实现形式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 案列实现（&lt;a href=&quot;https://github.com/KevinWG/OSS.PaySdk&quot; target=&quot;_blank&quot;&gt;OSS.PaySdk&lt;/a&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1） 多方式配置支持&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2） 不同支付方式接口实现&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一. 微信和支付宝支付方式细分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在最近半年时间微信新增了 H5支付 和 小程序支付 接口。支付宝的接口没有什么太大变化，但是文档中对接口的描述做了新的调整和归类（依然比较乱）。所以这里我会对在&lt;a href=&quot;http://www.cnblogs.com/osscoder/p/6708222.html&quot; target=&quot;_blank&quot;&gt;《微信和支付宝支付模式详解及实现》&lt;/a&gt;文章中提到的支付方式再次进行细化分类和对比。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　1. 支付方式的对比&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1).  扫码支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　在支付宝文档中现在归类为当面付（下单接口名称：交易预创建-alipay.trade.precreate）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　这里再介绍下微信的扫码的两种模式，第一种：商家先按照规则生成产品相关二维码，用户扫码后，微信发起对商家指定地址的请求，在这个请求中商家系统完成下单，获取预支付信息返回，用户端完成支付。第二种：用户下单后，商家系统获取预支付信息，生成二维码给用户完成支付。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2). H5支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　微信的这个接口为新增，并且商家需要申请才能开通。在支付宝中归类为手机网站支付（下单接口名称：手机网页支付-alipay.trade.wap.pay）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3). APP支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　客户端发起支付，支付宝下单接口名称：App支付-alipay.trade.app.pay&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4). 公众号支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　手机端平台内浏览器直接唤起支付。在微信内则是 公众号支付。支付宝则主要是生活号，接口文档并没有分类（下单接口名称：交易创建-alipay.trade.create）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　5). 小程序支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　内部小程序支付，支付宝下单接口名称：App支付-alipay.trade.app.pay&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　6). 电脑端支付（收银台）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　因为历史原因，支付宝在PC端同时还在提供这种支付方式，直接跳转到支付宝的收银台界面，用户可以直接通过支付宝密码支付，或者在收银台页面进行扫码，个人不再建议这个方式，流程上多了一步。下单接口名称：支付页面接口-alipay.trade.page.pay&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　7). 刷卡支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　这个主要是商家发起，扫描用户条形码/二维码/声波信息。为了不和上边的扫码支付产生歧义，并且这个操作类似商家刷用户银行卡，叫做刷卡支付。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　微信也叫刷卡支付，接口名称：提交刷卡支付。支付宝则归为当面付中的条码支付，接口名称：交易支付-alipay.trade.pay&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前六种支付方式，是一般用在线上支付，用户和商户无需直接接触，我将其归类为线上支付。第七种则主要集中在超市，商场等，我一般归类为线下支付。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 　　2.接口实现形式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上边的支付方式中，除了前五种微信支付接口名称都是【统一下单】我没有列出来之外。支付宝基本都不相同，且名称歧义较大，给人相对杂乱的感觉。微信则相对有序很多，且下单接口基本都走统一下单接口，除了参数属性上有些变化。这里我在接口的实现层面上也做一个简单的分解，方便大家理解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1） 微信实现形式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　微信的接口处理逻辑相对简单，除刷卡支付，其余在唤起支付前需要通过统一下单接口请求微信支付系统获取预支付信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果是公号、小程序、APP支付，需要服务端再进一步签名，交给前端JS调用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果是扫码支付，预支付信息中会返回二维码链接，商户通过服务端或者前端生成对应的图片即可&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果是H5支付，预支付会返回链接地址，浏览器跳转即可&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果是刷卡支付，读取附带条码上的token信息后，直接请求微信系统完成支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2） 支付宝实现形式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　支付宝则相对减少了请求次数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果是H5、公号、电脑端支付，则将各自的参数组装签名之后，生成一个含有form表单的HTML，其中还附加了form.submit()方法，使得在页面附加这段html后自动提交并唤起支付。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果是APP、小程序支付，都是使用的APP支付接口，依然组装签名，但生成的是form内容，类似：k1=v1&amp;amp;k2=v2的内容，交由前端客户端sdk方法唤起支付。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　如果是扫码支付，则会请求支付宝系统获取预支付信息（含二维码），生成图片&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　   如果是刷卡支付，和微信相同，读取附带条码、声波上的token信息后，直接请求支付宝系统完成支付&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因为查询，退款等相关接口就是简单的调用，这里就不做介绍了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二. 案例实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上边的实现形式介绍完，基本上思路上就没什么障碍了，剩下就是功能代码，以及接口交互时的加解密实现。两个平台在服务端也都提供了相应的SDK，不过两者都是在.net framework框架下，同时微信端SDK功能相对简单，支付宝则封装过于臃肿，具体参数需要调用方生成对应json串的形式传入。所以在年初我个人把两个平台的接口分别进行了封装，也就是这里要介绍的&lt;a href=&quot;https://github.com/KevinWG/OSS.PaySdk&quot; target=&quot;_blank&quot;&gt;OSS.PaySdk&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当前这个项目是在.Net Standard框架下，也就是同时支持Framework(4.6.1)和Core，基本覆盖全部支付相关接口，并且提供多租户的支持。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下边主要是针对这个项目下两个sdk的使用结合上边的支付方式，做一个示例，所有代码都在&lt;a href=&quot;https://github.com/KevinWG/OSS.PaySdk&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;可以下载。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　1.  多方式配置支持&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　&lt;/strong&gt;　在SDK在实现的过程中，除了接口的功能的实现，考虑到调用方的各种情况，每个SDK在底层我都会提供三种配置的实现方式，并且每个SDK中都提供了一个后缀为ConfigProvider的类：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1）上下文配置设置方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个方式适用于多租户的形式，在当前请求上下文中根据请求信息的不同使用不同的商户号，可以在构造函数中调用ConfigProvider下的SetContextConfig方法，例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;微信：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/154246/201710/154246-20171028222527773-1407388850.png&quot; alt=&quot;&quot; width=&quot;751&quot; height=&quot;64&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;支付宝：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/154246/201710/154246-20171028222445430-329826919.png&quot; alt=&quot;&quot; width=&quot;750&quot; height=&quot;75&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　2） 声明指定的方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这种方式主要是适应某些定制模块下，不对主系统产生影响，支付至特定的商户号，可以在接口声明时通过构造函数传入，如果在当前请求上下文中没有找到配置信息，系统会优先使用这个配置信息，以微信举例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/154246/201710/154246-20171028223447976-1793391222.png&quot; alt=&quot;&quot; width=&quot;742&quot; height=&quot;62&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3） 默认配置设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果你是单一商户的系统，则只需要在程序入口处设置这个值即可，如果系统未发现上下文和实例声明的配置，则会使用当前配置。依然以微信举例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/154246/201710/154246-20171028224516398-323528119.png&quot; alt=&quot;&quot; width=&quot;741&quot; height=&quot;109&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以上配置优先级依次递减。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 　　2. 不同支付方式接口实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　设置完配置之后，我对以上几种支付方式的下单接口调用做一个演示，至于退款等接口，比较简单，这里就不在特殊演示，源代码中每个文件都有详细的注释可供查找&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;微信：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/154246/201710/154246-20171028230309414-1659111423.png&quot; alt=&quot;&quot; width=&quot;724&quot; height=&quot;854&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;支付宝：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/154246/201710/154246-20171028231348586-895467850.png&quot; alt=&quot;&quot; width=&quot;708&quot; height=&quot;537&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/154246/201710/154246-20171028231435289-1988806266.png&quot; alt=&quot;&quot; width=&quot;706&quot; height=&quot;550&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体的代码可以下载源码查看sample项目，在Startup中设置一个默认配置即可，前端代码请查看相应的cshtml文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你还有其他问题，欢迎关注公众号（OSSCoder）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/154246/201704/154246-20170414193454705-141428126.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 03:41:00 +0000</pubDate>
<dc:creator>KevinCC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/osscoder/p/7747860.html</dc:identifier>
</item>
<item>
<title>微软Tech Summit 2017，等你来打Call - 张善友</title>
<link>http://www.cnblogs.com/shanyou/p/7746066.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shanyou/p/7746066.html</guid>
<description>&lt;p&gt;2017年10月31至11月3日，由微软举办的Tech Summit 2017技术暨生态大会将在北京盛大举办，要在北京连开四天。今年的技术大会看头十足，不仅有大咖级人物带来十二大主题课程，更有三天四场的主题之夜。微软技术大会最早是由微软技术教育大会TechED演变而来。从今年“智 · 远”的主题、百余场主题课程以及四场主题之夜来看，今年的技术大会看头十足，不仅有大咖级人物带来十二大主题课程，更有三天四场的主题之夜。微软每一次技术更迭也被视为下一次技术革命的风向标，无论炫目的AR技术，还是前沿的认知技术和人工智能，微软都时常让人耳目一新，眼前一亮。&lt;/p&gt;
&lt;p&gt;微软Visual Studio掌门人、微软全球资源副总裁潘正磊将亲自在2017微软技术暨生态大会上分享云时代微软研发的秘密，微软最热门的云服务、容器服务、大数据分析、DevOps、开发平台、编程语言、物联网、人工智能等拳头产品技术的首席开发经理与架构师们也将悉数到场。&lt;/p&gt;
&lt;p&gt;10.31-11.3 一共四天时间，我也在以下几个地方出现，欢迎大家过来交流，特别是.NET Core应用相关，你对.NET Core应用的困惑我们可以一起探讨。&lt;/p&gt;
&lt;p&gt;2016年在大会上分享过《.NET应用迁移到.NET Core》，今年给大家分享使用.NET Core打造企业级的API网关，重点是介绍开源项目&lt;a href=&quot;https://github.com/TomPallister/Ocelot&quot;&gt;Ocelot&lt;/a&gt;，最近正在进行.NET Core 2.0的升级，11.2 会完成2.0的升级， 课程内容剖析Ocelot的实现原理，和你分享.NET Core优雅的架构设计所带来的高扩展性、高性能。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/510/201710/510-20171028101245055-1327373597.jpg&quot;&gt;&lt;img title=&quot;clip_image002&quot; src=&quot;http://images2017.cnblogs.com/blog/510/201710/510-20171028101245523-1735819558.jpg&quot; alt=&quot;clip_image002&quot; width=&quot;425&quot; height=&quot;146&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/510/201710/510-20171028101245898-654711637.jpg&quot;&gt;&lt;img title=&quot;clip_image004&quot; src=&quot;http://images2017.cnblogs.com/blog/510/201710/510-20171028101246180-1401116912.jpg&quot; alt=&quot;clip_image004&quot; width=&quot;436&quot; height=&quot;175&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开源和跨平台开发是Microsoft 的当前和将来至关重要的策略。.NET Core已开源，同时开发了其他项来使用和支持新的跨平台策略。.NET Core 2.0 目前已经正式发布，是适用于针对 Web 和云构建跨平台应用程序的最新开源技术，可在 Linux、Mac OS X 和 Windows 上运行。&lt;/p&gt;
&lt;p&gt;.NET Core使用各种命令行工具来生成基架、构建和运行应用程序，同时可以使用 Visual Studio Code 进行编辑。 Visual Studio Code 是微软为广大开发人员提供的免费开源的跨平台代码编辑器，和其它流行的代码编辑器，如：Sublime, Atom一样，它非常小，运行速度快，同时通过各种插件支持不同开发语言的编写。不同的地方在于，VSC的插件不仅仅提供静态的语言高亮，自动语法检测和完成功能外；还提供更加高级的编译器服务支持，这使得VSC可以在一定程度上替代IDE的功能，进行代码的编译，调试和发布操作。&lt;/p&gt;
&lt;p&gt;11.3 号有2个实验Visual Studio Code + .NET Code的实验，欢迎过来体验使用VS Code来做开发.NET Core.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/510/201710/510-20171028101246492-2074352957.jpg&quot;&gt;&lt;img title=&quot;clip_image006&quot; src=&quot;http://images2017.cnblogs.com/blog/510/201710/510-20171028101246851-199770088.jpg&quot; alt=&quot;clip_image006&quot; width=&quot;438&quot; height=&quot;201&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;专家面对面&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/510/201710/510-20171028101247086-1050118688.jpg&quot;&gt;&lt;img title=&quot;clip_image008&quot; src=&quot;http://images2017.cnblogs.com/blog/510/201710/510-20171028101247336-2054677423.jpg&quot; alt=&quot;clip_image008&quot; width=&quot;447&quot; height=&quot;65&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 03:17:00 +0000</pubDate>
<dc:creator>张善友</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shanyou/p/7746066.html</dc:identifier>
</item>
<item>
<title>微软Tech Summit 2017，微软携手Unity打造MR之夜 - 慕容小匹夫</title>
<link>http://www.cnblogs.com/murongxiaopifu/p/7749515.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/murongxiaopifu/p/7749515.html</guid>
<description>&lt;p&gt;2017年10月31日至11月3日，微软将在北京举办Tech Summit 2017技术暨生态大会。今年的大会不仅有大咖级人物带来的十二大主题、百余场课程，而且还会迎来最特别的一位嘉宾——微软公司首席执行官Satya Nadella。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/686199/201710/686199-20171029111451664-1966483607.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/686199/201710/686199-20171029111500945-903451465.jpg&quot;/&gt;&lt;br/&gt;他将带来人工智能、混合现实和量子计算等在内的前沿科技的分享。&lt;/p&gt;
&lt;p&gt;除此之外，更有三天四场的主题之夜值得我们期待。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/686199/201710/686199-20171029111528039-1158702605.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/686199/201710/686199-20171029111535914-1362662240.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/686199/201710/686199-20171029111542633-103855575.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/686199/201710/686199-20171029111549211-1690603862.png&quot;/&gt;&lt;br/&gt;当然，我相信各位从事游戏开发或者是使用Unity作为开发工具的小伙伴们更关注微软和Unity在这次大会上的合作。本次在大会的第三天（11月2日）微软和Unity将联合举办“混合现实之夜”，可以看出Unity在混合现实领域已经成为了微软生态链的关键一环。&lt;/p&gt;
&lt;p&gt;此次主题夜活动由微软和Unity独家联合举办，由MR领域的专家大咖领衔，带你领略别样的行业领域知识和最实际的经验；趣味体验环节，花样体会技术魅力和多样的前沿产品。让您紧跟技术产业风向，拥抱时代浪潮，分享、学习、体验、成长。&lt;/p&gt;
&lt;p&gt;届时，将有来自微软和 Unity 的技术大咖，与大家分享实战中如何利用新工具优化 MR 产品体验。同时也将邀请社区中来自 MR 领域的神秘嘉宾，与您近距离分享他们在 MR 技术平台的实践与心得，探讨新技术在不同行业内的发展。&lt;/p&gt;
&lt;p&gt;下面是MR主题之夜的活动日程：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;活动日程&lt;br/&gt;18:30-19:00&lt;br/&gt;来宾入场以及 MR 产品体验&lt;br/&gt;19:00-19:40&lt;br/&gt;主办方微软与 Unity 分享：优化 MR 产品体验&lt;br/&gt;19:40-20:40&lt;br/&gt;MR 行业大咖分享及圆桌论坛&lt;br/&gt;20:40-21:00&lt;br/&gt;自由交流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;时间&lt;br/&gt;2017年11月2日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;地点&lt;br/&gt;北京国际饭店会议中心 一层 多功能厅2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于活动是凭票入场，因此需要门票的童靴可以通过&lt;a href=&quot;https://connect.unity.com/p/unity-connectsong-wei-ruan-hun-he-xian-shi-zhi-ye-men-piao-la&quot;&gt;Unity Connect&lt;/a&gt;来抢票。&lt;br/&gt;当然，如果无法到现场参与大会，各位还可以通过以下链接观看在线直播：&lt;br/&gt;&lt;a href=&quot;https://www.microsoft.com/china/techsummit/2017/&quot; class=&quot;uri&quot;&gt;https://www.microsoft.com/china/techsummit/2017/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 02:49:00 +0000</pubDate>
<dc:creator>慕容小匹夫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/murongxiaopifu/p/7749515.html</dc:identifier>
</item>
<item>
<title>一次从0到1的java项目实践清单 - 等你归去来</title>
<link>http://www.cnblogs.com/yougewe/p/7749444.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yougewe/p/7749444.html</guid>
<description>&lt;p&gt;　　虽说工作就是简单的事情重复做，但不是所有简单的事你都能有机会做的。&lt;/p&gt;
&lt;p&gt;　　我们平日工作里，大部分时候都是在做修修补补的工作，而这也是非常重要的。做好修补工作，做好优化工作，足够让你升职加薪！&lt;/p&gt;
&lt;p&gt;　　但是如果有机会，去尝试些自己平日里少做的事，我觉得是一件值得庆幸的事。&lt;/p&gt;
&lt;p&gt;　　前段时间，接了个新项目。只有一些idea在业务需求方脑海里，然后就开始需求讨论，然后就开始做事了。项目不复杂，但是由于是用JAVA语言实现（这相对来说是我的薄弱点），对我个人显得比较有意义。&lt;/p&gt;
&lt;p&gt;　　总结下来，其实也就是一个项目清单。个人觉得还是有点意义吧，给没有一定全面实践的同学参考吧！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1. 项目规划&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　&lt;strong&gt;1.1 首先，你得彻底明白到底要做什么？&lt;/strong&gt;&lt;br/&gt;　　　　这个过程，可能是你要读需求一遍、两遍、三遍。。。 然后假设，你已经在使用这个产品了。&lt;br/&gt;　　&lt;strong&gt;1.2 其次，明白需求后，就要进行整体框架的构思！&lt;/strong&gt;&lt;br/&gt;　　　　比如用什么呈现给用户，用什么来存储数据，需要些什么样的系统等。&lt;br/&gt;　　　　在这个层次上，一般都会遵循公司的规定，然后再根据项目本身需求，做些相应的调整。&lt;br/&gt;　　　　我们在这个项目里的整体框架为：前端使用 APP(ios&amp;amp;android)、H5进行用户界面呈现 ===&amp;gt;&amp;gt; 接入网关进行数据加解密，流控转发等 ===&amp;gt;&amp;gt; 第一层API服务，接受客户端请求，做简单业务检验组装 ===&amp;gt;&amp;gt; 第二层核心业务SERVICE服务，进行核心业务处理，如写库、调用第三方接口等 ===&amp;gt;&amp;gt; 最下层基础服务，提供单一的功能服务，如消息服务，订单服务。&lt;br/&gt;　　　　前期只提供APP，因此不存在单独H5调用API服务的情况，但是H5的应用场景仍然存在，此时的H5地址，由服务接口提供地址返回到APP进行webview加载。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;span&gt;1.3 人员规划&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　　　项目整体框架出来后，得要有人去实施才行。&lt;br/&gt;　　　　这里一般需要遵循一个最小原则，即划分出的人员，尽量做到能够独立完成自有的模块，而不是一定要依赖于另一方的实现才能进一步。比如 android,ios各一人，API与SERVICE可以多个人，但是都要让其有全部权限，因为API与SERVICE有强依赖，脱离一方，将无法独立完成。基础服务各自安排相关人员实现。最后进行联调即可。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　1.4 时间规划&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　有了人员之后，也不能无限时间的去做事。肯定是要规划的，否则没有压力也没有动力。项目不知何时才能结束。订时间计划一定要去询问当事人，要多少时间，尽量站在专业的脚本给出合理的建议和评估。促进项目的完成。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2. 框架规划及搭建&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　&lt;strong&gt;2.1 有了整体框架的构思后，就要细节到每个层次的实践了&lt;/strong&gt;&lt;br/&gt;　　　　因为都是应用的分层，所以，不可能有统一的描述，只能是针对每个应用层。做自己该做的事。如&lt;br/&gt;　　　　 android/ios 有自己的开发框架；&lt;br/&gt;　　　　h5有自己的开发框架(因为很多应用场景可能涉及到h5与app原生的交互，所以即使功能简单，也尽量利用一些已有的框架进行开发)。&lt;br/&gt;　　　　而服务端，虽分为多层应用，但是应尽量使用同一门语言，利用同一套开发框架，自己公司有研发框架自然最好，没有也尽量利用统一的开源框架。这样做的好处是，当有人员变动时，可以立即熟悉其代码及应用场景，从而增加适应性和管理性。&lt;br/&gt;　　　　针对服务端的框架，我觉得有必要多说点。因为整个应用运行的流畅性，可靠性，准确性，都是由服务端来决定的。虽然用户看到的是APP或者H5，但是可以说，服务端才是应用的核心。所以，服务端要做的事情自然很多了。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;2.2 怎样搭建好一些服务端的框架呢？&lt;/strong&gt;&lt;br/&gt;　　　　首先，框架类的东西，自然是要提前学习的。但是，就目前市场行情来说，要想利用框架应该都是比较简单的，尤其是公司内部提供的框架，一定要有demo。这样，照着demo，一步步调试，直接整个应用接通；&lt;br/&gt;　　　　删除不需要的模块，添加特别需要的模块，保证在具体开发过程中，能够想利用啥就有啥可利用；&lt;br/&gt;　　　　充分了解框架需要的一些配置参数，知道事务从哪里来，到哪里去？这里，应有一个配置中心与之对应，但是自己得清楚。&lt;br/&gt;　　　　使用一个顺手的IDE工具，不是说你技术不够牛逼，而是一个好的工具，能够让你事半功倍。（其实能够多背点套路，也不一定非要体现在正式项目上）&lt;br/&gt;　　　　写出第一个可供使用的接口服务，可以说，第一个永远是比较重要的。因为，第一个的思路，就是你后续所有功能的方向，因此，写好第一个&quot;hello, world.&quot;；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 开发环境的搭建(服务端)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;　　&lt;strong&gt;3.1 其实这项工作是及其重要的&lt;/strong&gt;，之所以把它放在第三点，是因为，没有代码作铺垫，开发环境搭了也没用。&lt;br/&gt;　&lt;strong&gt;　3.2 开发环境的搭建，主要也是服从于整体框架的构思。&lt;/strong&gt;&lt;br/&gt;　　　　主要包括，需要多少个服务，需要多少服务器，需要多少基础应用，需要多少基础配置等等。&lt;br/&gt;　　　　当然，开发环境本身就是一个很大的难题，一般还是交给专业运维几十年的老司机来完成了。自己就当作了解得了。&lt;br/&gt;　　　　目前的项目开发，除一些小规模公司还在利用一套服务端代码，干完所有的事外，大部分应该都是多个应用的配合完成。而测试环境，不太可能利用多个服务器提供服务。因此，使用docker进行测试环境搭建尤佳。建立多个docker进行多个服务器模拟，也算是和线上环境保持一致了。&lt;br/&gt;　　　　目前的主流技术得用上（当然关键还得看你的框架规划），zookeeper, dubbo, redis, mongo, mq, ...&lt;br/&gt;　&lt;strong&gt;　3.3 只有开发环境搭建好了，才能让后面的流程无忧。&lt;/strong&gt;搭建的过程一定是，又搭建，又改代码，又排错...&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 进度的同步&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;　　&lt;strong&gt;4.1 及时向领导同步项目进度&lt;/strong&gt;&lt;br/&gt;　　　　对于一个新项目，有些地方行动缓慢是很正常的。而部分开发同学（比如我自己），就喜欢沉浸在自己的小世界里纠结，走不出来，从而忘却向领导汇报工作。而作为一个有点同理心的领导来说，他又不愿意实时都来盯着你做事，因为也怕你遇到困难，想多给你点时间解决。但是，这种情况，开发同学自己其实是要吃亏的，因为，给外人的感觉就是，你啥都没做。所以，解决问题的同时，也不忘向领导汇报。&lt;br/&gt;　　&lt;strong&gt;4.2 有处理不了的问题，及时向大牛们或者领导请教&lt;/strong&gt;&lt;br/&gt;　　　　独立解决问题是好事，但是千万别过了头，实在解决不了，就要及时请教。否则，浪费的是时间。进步最快的方式，莫过于向比自己牛逼的人请教。知之为知之，不知为不知！&lt;br/&gt;　　&lt;strong&gt;4.3 尽量将问题分摊下去&lt;/strong&gt;&lt;br/&gt;　　　　问题肯定是有的，而且会很多。千万不要把所有的事情都压在自己这儿，那样自己会累死的，而且项目进度也会因此变得缓慢。要多利用小组成员的各自优点，适当多让其搞点事情。&lt;br/&gt;　　　　工作永远都不是单一的一件事，肯定还会有其他的事情插入进来，观察事情的重要性解决。如果能够让其他同学解决的，尽量让其他同学处理，这点也得与领导同步。否则分心过于利害，受阻的只有项目进度，延期可不是自己一人的事情了。&lt;br/&gt;　　　　需求也不可能一下就是完善的，在做的过程中，才可能发现一些潜在的问题，这时及时与需求方沟通，保持高效的状态。当然，后期的跟进，也是尽量做到不要一人大包大揽，而是相应的人就去负责相应事情的跟进。其他人只要知道结果就行。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5. 功能模块的完成&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　&lt;strong&gt;5.1 说到具体的业务实现，个人觉得，已经不那么难了。&lt;/strong&gt;不过就是，先尽力提出的一个初稿，然后发现问题解决问题，发现问题，解决问题的过程。&lt;br/&gt;&lt;strong&gt;　　5.2 各自系统能做的事情完成后，就是联调各系统间的调用关系，保持高效的沟通&lt;/strong&gt;，让问题在短时间内解决，尤为重要。在这种时候，我觉得，一个小黑屋也许也是个不错的选择。&lt;br/&gt;&lt;strong&gt;　　5.3 联调的过程，其实就是一个自测的过程，应把尽可能多情况给考虑到位。&lt;/strong&gt;&lt;br/&gt;　　&lt;strong&gt;5.4 代码检查，自己开发的代码，基本上很难发现其中的问题，即时找到相应人帮忙检查代码，是比较好的解决代码问题的方案。&lt;/strong&gt;其实，在给别人检查的时候，也是自己检查的时候，相当于自己再一次的开发，也能及时发现问题。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6. 多轮的测试验证&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　&lt;strong&gt;&lt;span&gt;　6.1 测试同学，其实在开发快结束的时候，已经把测试用例给到大家。&lt;/span&gt;&lt;/strong&gt;这也是另一个角度的开发，因此，参考测试用例进行相应开发修改也是很有必要的。&lt;br/&gt;　&lt;strong&gt;　6.2 第一轮测试，可能主要是大功能的验证，小功能的检查&lt;/strong&gt;，挡板环境即可，无需真实环境。&lt;br/&gt;　&lt;strong&gt;　6.3 第二轮测试，则是要把之前的测试及各种配置，全部清空，以一个全新的项目来对待，重新进行相应环境搭建，代码部署，然后再进行测试，确保问题解决后，做好了相应的处理方案备份&lt;/strong&gt;。这时，就需要用到真实的应用环境了。对之前一些暂未解决的问题进行重新测试。确保无问题。&lt;br/&gt;　&lt;strong&gt;　6.4 第三轮测试，应该是一个灰度发布的环境，也可以认为是预上线。&lt;/strong&gt;将所有环境当作是线上来处理，如果运行ok,即可准备发布上线了。&lt;br/&gt;　　&lt;strong&gt;6.5 在测试过程中，因测试人员只是人工的处理，有时不一定能捕获所有的问题，开发在这时，也应站在测试的角度，发现问题，即时监控，即时处理。&lt;/strong&gt;&lt;br/&gt;　　&lt;strong&gt;6.6 自动化测试&lt;/strong&gt;，这个其实应该是靠后的处理，但是如果能做到这些的话，也能够快速的重现问题。&lt;br/&gt;　　&lt;strong&gt;6.7 压力测试&lt;/strong&gt;，应对线上环境，需有一定的能力评估，不然，只瞎猜，恐怕也不是好事。随时准备横向扩展，也只是出现问题后的解决方案。做好压测，发现代码中存在的问题，即时处理掉。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;7. 外围处理(上线前)&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　&lt;strong&gt;7.1 上线前，肯定是有很多事务要处理的。&lt;/strong&gt;&lt;br/&gt;　　　&lt;strong&gt;　测试环境中的各种基础数据，随时导出备份，到线上时，直接插入使用；&lt;/strong&gt;&lt;br/&gt;　　　　&lt;strong&gt;服务器&lt;/strong&gt;，在架构评审过程中进行数量评估；&lt;br/&gt;　　　　&lt;strong&gt;域名&lt;/strong&gt;，对外网提供服务一定是要域名的；&lt;br/&gt;　　　　&lt;strong&gt;权限&lt;/strong&gt;，比如上线后，出现了问题，谁有权限来处理问题，一定提前给到；&lt;br/&gt;　　　　&lt;strong&gt;验收&lt;/strong&gt;，这是关键的一点，功能完成后，及时验收，如果上线有些小问题，尽量协商，不要在线上频繁改动。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如此！&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;　　整个项目就完工了。&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;　　其实发现，一个项目真正的功能实现，并没有占多大的比例，而是一些前期的准备及后续的处理，反而占了更多的时间。&lt;br/&gt;　　第一个版本上线后，可能接着就是迅速迭代了。（如果运营还可以的话！）&lt;/p&gt;&lt;p&gt;　　以上，就是一整个项目的流程清单，以一步一个脚印的经历总结，不涉及具体语言代码，但是思路都是相通的，希望对你有帮助！&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;　　（标题虽为JAVA项目清单，但其实想想也没必要提JAVA了，毕竟只是语法而已）&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Oct 2017 02:10:00 +0000</pubDate>
<dc:creator>等你归去来</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yougewe/p/7749444.html</dc:identifier>
</item>
</channel>
</rss>