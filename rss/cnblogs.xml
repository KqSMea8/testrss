<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>ide phpStorm更换主题 - 多多明明</title>
<link>http://www.cnblogs.com/lzs-888/p/9922896.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzs-888/p/9922896.html</guid>
<description>
&lt;p&gt;#主题下载地址&lt;/p&gt;
&lt;p&gt;http://www.phpstorm-themes.com&lt;/p&gt;&lt;p&gt;#更换方式&lt;/p&gt;
&lt;p&gt;1.将主题配置保存在 xxx.icls（如果是xml也保存成.icls）&lt;/p&gt;
&lt;p&gt;2.打开phpStorm设置(中上方导航栏 File - Settings)&lt;/p&gt;
&lt;p&gt;3.Editor - Color Scheme - 右侧界面点击齿轮 - Import Scheme - 选中刚刚的xxx.icls文件 - Apply&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/934350/201811/934350-20181107153744045-1021617664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;#主题字体更换方式&lt;/p&gt;
&lt;p&gt;如果发现字体不太习惯，可以更换&lt;/p&gt;
&lt;p&gt;1.打开phpStorm设置(中上方导航栏 File - Settings)&lt;/p&gt;
&lt;p&gt;2.Editor - Color Scheme - Color Scheme Font - 右侧Font中选中更换 - Apply&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/934350/201811/934350-20181107153724736-1694544611.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下方有我比较喜欢的salar_vim主题配置，可以使用；&lt;br/&gt;注：如果不习惯主题字体可以根据上方教程将主题字体再更改一下&lt;/p&gt;
&lt;p&gt;声明：salar_vim主题下载自http://www.phpstorm-themes.com，侵删&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;scheme name=&quot;salar-vim&quot; version=&quot;141&quot; parent_scheme=&quot;Default&quot;&amp;gt;
  &amp;lt;option name=&quot;LINE_SPACING&quot; value=&quot;1.0&quot; /&amp;gt;
  &amp;lt;option name=&quot;EDITOR_FONT_SIZE&quot; value=&quot;14&quot; /&amp;gt;
  &amp;lt;option name=&quot;CONSOLE_FONT_NAME&quot; value=&quot;Consolas&quot; /&amp;gt;
  &amp;lt;option name=&quot;EDITOR_FONT_NAME&quot; value=&quot;Segoe Print&quot; /&amp;gt;
  &amp;lt;colors&amp;gt;
    &amp;lt;option name=&quot;ADDED_LINES_COLOR&quot; value=&quot;295622&quot; /&amp;gt;
    &amp;lt;option name=&quot;CARET_COLOR&quot; value=&quot;bbbbbb&quot; /&amp;gt;
    &amp;lt;option name=&quot;CARET_ROW_COLOR&quot; value=&quot;3c3c3c&quot; /&amp;gt;
    &amp;lt;option name=&quot;CONSOLE_BACKGROUND_KEY&quot; value=&quot;262626&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_ADDED&quot; value=&quot;629755&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_DELETED&quot; value=&quot;6c6c6c&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_IDEA_FILESTATUS_DELETED_FROM_FILE_SYSTEM&quot; value=&quot;6c6c6c&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_IDEA_FILESTATUS_IGNORED&quot; value=&quot;848504&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_IDEA_FILESTATUS_MERGED_WITH_BOTH_CONFLICTS&quot; value=&quot;d5756c&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_IDEA_FILESTATUS_MERGED_WITH_CONFLICTS&quot; value=&quot;d5756c&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_IDEA_FILESTATUS_MERGED_WITH_PROPERTY_CONFLICTS&quot; value=&quot;d5756c&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_MERGED&quot; value=&quot;9876aa&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_MODIFIED&quot; value=&quot;6897bb&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_NOT_CHANGED_IMMEDIATE&quot; value=&quot;6897bb&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_NOT_CHANGED_RECURSIVE&quot; value=&quot;6897bb&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_UNKNOWN&quot; value=&quot;d1675a&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_addedOutside&quot; value=&quot;629755&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_changelistConflict&quot; value=&quot;d5756c&quot; /&amp;gt;
    &amp;lt;option name=&quot;FILESTATUS_modifiedOutside&quot; value=&quot;6897bb&quot; /&amp;gt;
    &amp;lt;option name=&quot;GUTTER_BACKGROUND&quot; value=&quot;262626&quot; /&amp;gt;
    &amp;lt;option name=&quot;INDENT_GUIDE&quot; value=&quot;587b18&quot; /&amp;gt;
    &amp;lt;option name=&quot;LINE_NUMBERS_COLOR&quot; value=&quot;a4f3ff&quot; /&amp;gt;
    &amp;lt;option name=&quot;METHOD_SEPARATORS_COLOR&quot; value=&quot;3c3c3c&quot; /&amp;gt;
    &amp;lt;option name=&quot;MODIFIED_LINES_COLOR&quot; value=&quot;415f69&quot; /&amp;gt;
    &amp;lt;option name=&quot;RECURSIVE_CALL_ATTRIBUTES&quot; value=&quot;574300&quot; /&amp;gt;
    &amp;lt;option name=&quot;RIGHT_MARGIN_COLOR&quot; value=&quot;323232&quot; /&amp;gt;
    &amp;lt;option name=&quot;SELECTED_INDENT_GUIDE&quot; value=&quot;f6e06b&quot; /&amp;gt;
    &amp;lt;option name=&quot;SELECTED_TEARLINE_COLOR&quot; value=&quot;587b18&quot; /&amp;gt;
    &amp;lt;option name=&quot;SELECTION_BACKGROUND&quot; value=&quot;587b18&quot; /&amp;gt;
    &amp;lt;option name=&quot;SELECTION_FOREGROUND&quot; value=&quot;f6e06b&quot; /&amp;gt;
    &amp;lt;option name=&quot;TEARLINE_COLOR&quot; value=&quot;3c3c3c&quot; /&amp;gt;
    &amp;lt;option name=&quot;WHITESPACES&quot; value=&quot;505050&quot; /&amp;gt;
  &amp;lt;/colors&amp;gt;
  &amp;lt;attributes&amp;gt;
    &amp;lt;option name=&quot;ABSTRACT_CLASS_NAME_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;ANNOTATION_NAME_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;997dc4&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;ANONYMOUS_CLASS_NAME_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;BAD_CHARACTER&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;BREAKPOINT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;3a2323&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;Block comment&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;67c3e7&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CLASS_NAME_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CONSOLE_BLUE_OUTPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;5394ec&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CONSOLE_ERROR_OUTPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ff8e8d&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CONSOLE_MAGENTA_OUTPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;983498&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CONSOLE_NORMAL_OUTPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;262626&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CONSOLE_RED_OUTPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ff6b68&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CONSOLE_SYSTEM_OUTPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;c64947&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CONSOLE_USER_INPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;67c3e7&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_INVALID_STRING_ESCAPE_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_KEYWORD1_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;f6e06b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_KEYWORD2_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;f6e06b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_KEYWORD3_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;f6e06b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_KEYWORD4_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;f6e06b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_LINE_COMMENT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;67c3e7&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_MULTI_LINE_COMMENT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;67c3e7&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_NUMBER_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;c64947&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_STRING_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ff8e8d&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;CUSTOM_VALID_STRING_ESCAPE_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;c64947&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DBNavigator.TextAttributes.SQL.Chameleon&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;-1&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_ATTRIBUTE&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffd493&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_BRACES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_BRACKETS&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_CLASS_NAME&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_CLASS_REFERENCE&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_COMMA&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_CONSTANT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;b5a94b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_DOC_COMMENT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;67c3e7&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_DOC_COMMENT_TAG&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;997dc4&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_DOC_MARKUP&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;997dc4&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_DOT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_ENTITY&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;c64947&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_FUNCTION_CALL&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_FUNCTION_DECLARATION&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_GLOBAL_VARIABLE&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;b6b193&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_IDENTIFIER&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;1&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_INSTANCE_FIELD&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;b5a94b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_INSTANCE_METHOD&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_INTERFACE_NAME&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_INVALID_STRING_ESCAPE&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_KEYWORD&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;f6e06b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_LABEL&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffd493&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_LINE_COMMENT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;67c3e7&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_LOCAL_VARIABLE&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;b6b193&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_METADATA&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;6c6c6c&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_NUMBER&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;c64947&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_OPERATION_SIGN&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;7ffb9&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_PARAMETER&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffd493&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_PARENTHS&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_SEMICOLON&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_STATIC_FIELD&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_STATIC_METHOD&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_STRING&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ff8e8d&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_TAG&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_TEMPLATE_LANGUAGE_COLOR&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEFAULT_VALID_STRING_ESCAPE&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;c64947&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DELETED_TEXT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;262626&quot; /&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DEPRECATED_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DIFF_CONFLICT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;45302b&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;8f5247&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DIFF_DELETED&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;484a4a&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;656e76&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DIFF_INSERTED&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;294436&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;447152&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DIFF_MODIFIED&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;385570&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;43698d&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DOC_COMMENT_TAG_VALUE&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;997dc4&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;DUPLICATE_FROM_SERVER&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;5e5339&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;ENUM_NAME_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;ERRORS_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;EFFECT_COLOR&quot; value=&quot;bc3f3c&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;bc3f3c&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;2&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;EXECUTIONPOINT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;2d6099&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;FOLDED_TEXT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;f6e06b&quot; /&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;587b18&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;FOLLOWED_HYPERLINK_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;287bde&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_COLOR&quot; value=&quot;287bde&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;1&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;GENERIC_SERVER_ERROR_OR_WARNING&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;EFFECT_COLOR&quot; value=&quot;f49810&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;f49810&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;1&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;HYPERLINK_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;287bde&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_COLOR&quot; value=&quot;287bde&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;1&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;IDENTIFIER_UNDER_CARET_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;535353&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;535353&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;IMPLICIT_ANONYMOUS_CLASS_PARAMETER_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;INFO_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;EFFECT_COLOR&quot; value=&quot;aeae80&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;aeae80&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;2&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;INJECTED_LANGUAGE_FRAGMENT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;INSTANCE_FIELD_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;b5a94b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;INTERFACE_NAME_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;82f985&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;LOG_ERROR_OUTPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;f6e06b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;LOG_EXPIRED_ENTRY&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;67c3e7&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;LOG_WARNING_OUTPUT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;b6b193&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;MATCHED_BRACE_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ff8647&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;METHOD_DECLARATION_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;NOT_USED_ELEMENT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;808080&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_COLOR&quot; value=&quot;808080&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;2&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;PARAMETER_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffd493&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;PHP_VAR&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;896c1d&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;SASS_MIXIN&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;8080&quot; /&amp;gt;
        &amp;lt;option name=&quot;FONT_TYPE&quot; value=&quot;1&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;SEARCH_RESULT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;535353&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;535353&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;STATIC_FIELD_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;STATIC_METHOD_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;997dc4&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;TEMPLATE_VARIABLE_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;TEXT&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffffff&quot; /&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;262626&quot; /&amp;gt;
        &amp;lt;option name=&quot;FONT_TYPE&quot; value=&quot;1&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;TEXT_SEARCH_RESULT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;6c6c6c&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;6c6c6c&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;TODO_DEFAULT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;a8c023&quot; /&amp;gt;
        &amp;lt;option name=&quot;FONT_TYPE&quot; value=&quot;2&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;a74c0&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;TYPE_PARAMETER_NAME_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;ffd493&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;TYPO&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;EFFECT_COLOR&quot; value=&quot;867f27&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;2&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;UNMATCHED_BRACE_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;d1243b&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;WARNING_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;BACKGROUND&quot; value=&quot;52503a&quot; /&amp;gt;
        &amp;lt;option name=&quot;ERROR_STRIPE_COLOR&quot; value=&quot;8c8c00&quot; /&amp;gt;
        &amp;lt;option name=&quot;EFFECT_TYPE&quot; value=&quot;2&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;WRITE_IDENTIFIER_UNDER_CARET_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value /&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;WRITE_SEARCH_RESULT_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value /&amp;gt;
    &amp;lt;/option&amp;gt;
    &amp;lt;option name=&quot;WRONG_REFERENCES_ATTRIBUTES&quot;&amp;gt;
      &amp;lt;value&amp;gt;
        &amp;lt;option name=&quot;FOREGROUND&quot; value=&quot;bc3f3c&quot; /&amp;gt;
      &amp;lt;/value&amp;gt;
    &amp;lt;/option&amp;gt;
  &amp;lt;/attributes&amp;gt;
&amp;lt;/scheme&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


</description>
<pubDate>Wed, 07 Nov 2018 07:42:00 +0000</pubDate>
<dc:creator>多多明明</dc:creator>
<og:description>#主题下载地址 http://www.phpstorm-themes.com#更换方式 1.将主题配置保存在 xxx.icls（如果是xml也保存成.icls） 2.打开phpStorm设置</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzs-888/p/9922896.html</dc:identifier>
</item>
<item>
<title>解读 IoC 框架 InversifyJS - 牧云云</title>
<link>http://www.cnblogs.com/MuYunyun/p/9922888.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MuYunyun/p/9922888.html</guid>
<description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MuYunyun/blog/blob/master/BasicSkill/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%AF%87/%E8%A7%A3%E8%AF%BBIoC%E6%A1%86%E6%9E%B6InversifyJS.md&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;InversityJS 是一个 IoC 框架。IoC(Inversion of Control) 包括依赖注入(Dependency Injection) 和依赖查询(Dependency Lookup)。&lt;/p&gt;
&lt;p&gt;相比于类继承的方式，控制反转解耦了父类和子类的联系。&lt;/p&gt;
&lt;h3 id=&quot;案例解析&quot;&gt;案例解析&lt;/h3&gt;
&lt;pre class=&quot;ts&quot;&gt;
&lt;code&gt;import 'reflect-metadata'
import { inject, injectable, Container } from 'inversify'

const container = new Container()

@injectable()
class PopMusic {
  getName() {
    return '流行音乐'
  }
}
container.bind('request1').to(PopMusic)

@injectable()
class ClassicalMusic {
  getName() {
    return '古典音乐'
  }
}
container.bind('request2').to(ClassicalMusic)

@injectable()
class Music {
  pm: any
  cm: any
  constructor(
    @inject('request1') popMusic: any,
    @inject('request2') classicalMusic: any) {
    this.pm = popMusic
    this.cm = classicalMusic
  }

  getName() {
    const result = this.pm.getName() + this.cm.getName()
    return result
  }
}
container.bind('Plan').to(Music)

const music: any = container.get('Plan')
console.log(music.getName()) // 流行音乐古典音乐&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述案例可以抽象为下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/7/166ed13818c5ec46?w=598&amp;amp;h=400&amp;amp;f=jpeg&amp;amp;s=19291&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;虚线表示可以注入，但在代码中没有表现出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码流程可概括如下：&lt;/p&gt;
&lt;p&gt;1.将所有相关类(这里指 Music、popMusic、classicMusic) 通过 &lt;code&gt;@injectable&lt;/code&gt; 声明进 &lt;code&gt;container&lt;/code&gt; 容器;&lt;/p&gt;
&lt;p&gt;2.通过 &lt;code&gt;container.get()&lt;/code&gt; 获取 &lt;code&gt;container.bind().to(target)&lt;/code&gt; 中的目标对象(这里指 Music);&lt;/p&gt;
&lt;p&gt;3.如果目标对象中的 constructor() 里有 &lt;code&gt;@inject()&lt;/code&gt;, 则将相应的实例(这里指 PopMusic 与 classicalMusic 的实例)当作构造函数的参数'注入';&lt;/p&gt;
&lt;h3 id=&quot;injectinjectable-相关源码&quot;&gt;inject/injectable 相关源码&lt;/h3&gt;
&lt;p&gt;inject 源码简化如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 这是一个属性装饰器
function inject(serviceIdentifier) {
  return function (target, targetKey) {
    const metadataValue = { [targetKey]: [Metadata { key: 'inject', value: serviceIdentifier })] }
    Reflect.defineMetadata('inversify:tagged_props', metadataValue, target.constructor);
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;injectable 源码简化如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 这是一个类装饰器
function injectable() {
  return function (target) {
    const metadataValue = []
    Reflect.defineMetadata('inversify:paramtypes', metadataValue, target)
    return target
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从简化版源码中可以看到 inject/injectable 最终是对 &lt;code&gt;Reflect.defineMetadata()&lt;/code&gt; 的一个使用。可以将 metadata 看成是一种相对高效的数据结构。&lt;/p&gt;
&lt;h4 id=&quot;reflect-metadata&quot;&gt;reflect-metadata&lt;/h4&gt;
&lt;p&gt;InversityJS 深度结合了 &lt;a href=&quot;https://github.com/rbuckton/reflect-metadata&quot;&gt;reflect-metadata&lt;/a&gt;, reflect-metadata 在 Reflect 基础上对其 api 进行了扩展。&lt;/p&gt;
&lt;blockquote readability=&quot;3.4177215189873&quot;&gt;
&lt;p&gt;metadata 本质上是一个 &lt;code&gt;WeakMap&lt;/code&gt; 对象。扩展：&lt;a href=&quot;https://github.com/MuYunyun/blog/blob/master/BasicSkill/algorithm/%E5%AD%97%E5%85%B8.md#map-%E5%92%8C-weakmap-%E7%9A%84%E5%8C%BA%E5%88%AB&quot;&gt;Map 和 WeakMap 的区别&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Reflect.defineMetadata(metadataKey, metadataValue, target[, propertyKey])&lt;/code&gt; 简化版实现如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;const Metadata = new WeakMap()

function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
  metadataMap = new Map()
  metadataMap.set(metadataKey, metadataValue)
  targetMetadata = new Map()
  targetMetadata.set(propertyKey, metadataMap)
  Metadata.set(target, targetMetadata)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Reflect.getOwnMetadata(metadataKey, target[, propertyKey])&lt;/code&gt; 简化版实现如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function getOwnMetadata(metadataKey, target, propertyKey) {
  var targetMetadata = Metadata.get(target)
  var metadataMap = targetMetadata.get(propertyKey)
  return metadataMap.get(metadataKey)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其数据结构可表示如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;WeakMap {
  target: Map {
    propertyKey: Map {
      metadataKey: metadataValue
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;相关链接&quot;&gt;相关链接&lt;/h3&gt;
</description>
<pubDate>Wed, 07 Nov 2018 07:41:00 +0000</pubDate>
<dc:creator>牧云云</dc:creator>
<og:description></og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MuYunyun/p/9922888.html</dc:identifier>
</item>
<item>
<title>Linux学习历程——Centos 7  uptime 、free命令 - 鬼谷赵四</title>
<link>http://www.cnblogs.com/joe-four/p/cnblogs_joe_four_05.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/joe-four/p/cnblogs_joe_four_05.html</guid>
<description>&lt;h2&gt;一、命令介绍&lt;/h2&gt;
&lt;h3&gt;uptime命令&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;uptime命令用于查看系统负载信息以及系统运行时间等。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;free命令&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;free命令用于查看当前系统中内存使用量信息。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、实例&lt;/h2&gt;
&lt;h3&gt;uptime命令实例&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;直接运行 uptime命令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1493931/201811/1493931-20181107144550710-1383070144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;左面第一条信息14:45:40 ， 是当前系统时间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二条信息  up 24min ，指系统已经运行了24分钟。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三条信息 1 user ， 指当前1个用户登录系统&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后 load average : 0.00   0.01   0.05 分别指 过去1分钟 5分钟 15分钟系统平均负载量。负载量越低越好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; -----------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;h3&gt;free命令实例&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;直接输入free&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1493931/201811/1493931-20181107145916385-1631379746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt;内存总量&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt;内存使用量&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt;内存可用量&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt;进程共享的内存量&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;buffer和 cache使用的物理内存大小。&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;可以被应用程序使用的物理内存大小&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt;mem:物理内存&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;79&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;Swap:虚拟内存/内存交换空间 &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;79&quot;&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;free 命令默认输出以KB为单位，所以看着并不友好&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们尝试输入 free -m&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1493931/201811/1493931-20181107150041301-1122289752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样输出的值就以MB为单位了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我蛮再试着输入 free -g&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1493931/201811/1493931-20181107150131380-150317902.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样输出的值就是以GB为单位的，有余我的内存总量不足1G，所以这里显示0&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;free  -h 这个应该是最实用的了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1493931/201811/1493931-20181107150325593-638806210.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个输出值就友好太多了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果我们需要持续观察内存使用情况  可以加上参数  -s ，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们指定输出间隔时间为2s。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;free -h -s  2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1493931/201811/1493931-20181107150556543-2062323129.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样每隔2s 就会输出一次，非常方便。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;三、总结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;    uptime , free 命令在日常应用中的频率非常的高，用好这两个命令可以让我们运维工作变得轻松不少。刚刚接触Linux，文章不当之处，望大家指正。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 07 Nov 2018 07:32:00 +0000</pubDate>
<dc:creator>鬼谷赵四</dc:creator>
<og:description>一、命令介绍 uptime命令 uptime命令用于查看系统负载信息以及系统运行时间等。 free命令 free命令用于查看当前系统中内存使用量信息。 二、实例 uptime命令实例 直接运行 upt</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/joe-four/p/cnblogs_joe_four_05.html</dc:identifier>
</item>
<item>
<title>数据库事务 - 成天</title>
<link>http://www.cnblogs.com/chengtian/p/9922736.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chengtian/p/9922736.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;&lt;span&gt;事务是由几个读取和修改数据的&lt;/span&gt;sql&lt;span&gt;命令组成的，但是知道&lt;/span&gt;&lt;span&gt;commit&lt;/span&gt;&lt;span&gt;命令被执行之后，修改操作才被认为是正常的完成。显式事务常以&lt;/span&gt;&lt;span&gt;Begin tran&lt;/span&gt;&lt;span&gt;语句开头，以&lt;/span&gt;&lt;span&gt;commit tran&lt;/span&gt;&lt;span&gt;或者&lt;/span&gt;&lt;span&gt;rollback tran&lt;/span&gt;&lt;span&gt;语句结尾的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事务具有&lt;/span&gt;acid&lt;span&gt;属性&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;原子性（&lt;/span&gt;atomicity&lt;span&gt;）：原子性指的是每个事务要不提交（&lt;/span&gt;&lt;span&gt;commit&lt;/span&gt;&lt;span&gt;）要不终止（&lt;/span&gt;&lt;span&gt;rollback&lt;/span&gt;&lt;span&gt;）。比如现实中的转账&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;一致性（&lt;/span&gt;consistency&lt;span&gt;）：一致性属性确保事务不允许系统到达一个不准确的逻辑状态&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;数据必须总是保持逻辑上的正确。及时在发生系统故障时，约束和规则也必须得到承兑。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;隔离性（&lt;/span&gt;isolation&lt;span&gt;）：隔离性会将并发事务与其他未完成事务的更新操作分离开。隔离性主要是解决并发事务出现的 脏读、不可重复读、幻读现象，根据自己的业务场景选择对应的隔离级别；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;持久性（&lt;/span&gt;durability&lt;span&gt;）：当事务提交以后，数据库的持久性属性就会确保事务的作用持续存在。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;span&gt;事务总是全部支持这四种&lt;/span&gt;acid&lt;span&gt;属性的。但是可能会初选一些另外的行为，常叫做‘一致性问题’。他们仅仅可能存在的行为，而用户对于隔离级别的选择决定下列这些行为哪种是被允许的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Case1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事务&lt;/span&gt;A&lt;span&gt;，先执行，处于未提交的状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107145134628-1115149528.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事务&lt;/span&gt;B&lt;span&gt;，后执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107145144343-1342383675.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;如果事务&lt;/span&gt;B能够读取到(name为lisi)&lt;span&gt;这条记录，事务&lt;/span&gt;A就对事务B产生了影响，这个影响叫做“&lt;span&gt;读脏&lt;/span&gt;”，读到了未提交事务操作的记录。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Case2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事务&lt;/span&gt;A先执行&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107151217484-1729555705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;事务&lt;/span&gt;B&lt;span&gt;，后执行，并且提交&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107151240503-1613706043.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;事务&lt;/span&gt;A&lt;span&gt;，在此执行相同的查询，结果&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;zhaosi&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107151247504-1746430855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这次是已提交事务&lt;/span&gt;B对事务A产生的影响，这个影响叫做“&lt;span&gt;不可重复读&lt;/span&gt;”(重点为update)，一个事务内相同的查询，得到了不同的结果。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; Case3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事务&lt;/span&gt;A，先执行，1条结果：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107151337338-1428457270.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事务&lt;/span&gt;B&lt;span&gt;，后执行，并且提交；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107151350040-855908203.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事务&lt;/span&gt;A&lt;span&gt;，在此查询为两条，莫名其妙多出了一条&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107151359255-1060724900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这次是已提交事务&lt;/span&gt;B&lt;span&gt;对事务&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;产生的影响，这个影响叫做&lt;/span&gt;“&lt;span&gt;幻读&lt;/span&gt;”。&lt;span&gt;（&lt;/span&gt;&lt;span&gt;重点在&lt;/span&gt;insert，delete&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p&quot;&gt;&lt;span&gt;为了解决多个事务并发会引发的问题，进行并发控制。数据库提供了四种事务隔离级别供用户选择。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Read Uncommitted &lt;span&gt;读未提交&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Read Committed &lt;span&gt;读已提交&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Repeatable Read&lt;/span&gt; &lt;span&gt;可重复读&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Serializable&lt;/span&gt; &lt;span&gt;串行化&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/449569/201811/449569-20181107151809448-645201719.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Nov 2018 07:22:00 +0000</pubDate>
<dc:creator>成天</dc:creator>
<og:description>事务是由几个读取和修改数据的sql命令组成的，但是知道commit命令被执行之后，修改操作才被认为是正常的完成。显式事务常以Begin tran语句开头，以commit tran或者rollback</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chengtian/p/9922736.html</dc:identifier>
</item>
<item>
<title>哎呀，我老大写Bug啦——记一次MessageQueen的优化 - 山治先生</title>
<link>http://www.cnblogs.com/EminemJK/p/9921800.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/EminemJK/p/9921800.html</guid>
<description>&lt;p&gt;　　MessageQueen，顾名思义消息队列，在系统开发中也是用的比较多的一个中间件吧。我们这里主要用它来做日志管理和订单管理的，记得老老大（恩，是的，就是老老大，因为他已经跳槽了）还在的时候，当时也是为了赶项目进度，他也参与开发了，那时候我才刚刚入职，他负责写后端这块，我来了就把他手上的任务接过来了，（接着接着……就辞职了）。&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107113916008-68279650.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后我们的开发仍然有条不紊的开发着，直到今年的一月份吧，才上线开始运行，然后就出现了常规状态，上线之后就开始爆炸，&lt;/p&gt;
&lt;p&gt;                                                                                     &lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107114332549-658546895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个页面打不开呀，那个内容没东西呀，第三方登录问题呀，支付问题呀，临时再改需求呀……（该来的都来了），加班、debug、测试、再debug……，然后经过几天的修复，终于完成了跟自己电脑一样稳定的运行，组员们都美滋滋的，今晚加个鸡腿才行。&lt;/p&gt;
&lt;p&gt;                                                                                    &lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107114913762-1750872398.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;都说祸不单行，古人是不会骗我们的，Bug怎么会修得完呢？天真，要是Bug能修得完还要我们来干啥，好景不长，果然，过了一周之后，组员突然群里叫喳喳，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107115241252-577297774.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107115326953-1371014567.png&quot; alt=&quot;&quot; width=&quot;565&quot; height=&quot;375&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;what is it ? &lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107115514071-1139007608.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;来了，今天的主角登场了，我也要开始加班了。&lt;/p&gt;

&lt;p&gt;　　这个是今天要说的东西，基础概念什么的不是今天要说的重点，重点是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107115926633-1982445845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;RabbitMQ&lt;strong&gt;内存&lt;span&gt;&lt;span&gt;暴&lt;/span&gt;&lt;span&gt;涨&lt;/span&gt;&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;/strong&gt;使得整个服务器濒临瘫痪，远程登录服务器都差点挤不进去的状态，别看截图目前才1.3G，吃个午饭回来，就2.3G了，可怕不可怕？咋回事？&lt;/p&gt;
&lt;h2&gt;老板喊你回来加班啦&lt;/h2&gt;
&lt;p&gt;　　先不管了，线上优先解决，手动先Reset回收资源以释放空间，这个只是临时的办法，然后检查一下rabbitMQ的配置有没有问题，路径在&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;p&gt; C:\Users\Administrator\AppData\Roaming\RabbitMQ &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107135621167-2061460127.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完全是默认的配置，完全ojbk啊，那到底咋回事？继续检查，想想不如从项目开始吧，然后查看项目中的代码，都是从来自【MessageLib】的组件调用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107134810038-905637654.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107134835662-121170616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，叫我老老大要这个组件的代码，他把git的地址就发给我，我把项目down下来，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107135738261-1950099692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个封装的组件内容不多，主要的文件一目了然，其实就是用到这个两个组件来进行的二次封装来调用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107135950461-2137091191.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;主要的代码是在【MessageQueue.cs】文件里，展示一下当时的代码情况：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('622b66e2-e2dd-417e-80e7-6c502e909143')&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_622b66e2-e2dd-417e-80e7-6c502e909143&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_622b66e2-e2dd-417e-80e7-6c502e909143&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('622b66e2-e2dd-417e-80e7-6c502e909143',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_622b66e2-e2dd-417e-80e7-6c502e909143&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; MessageLib.ClassBean;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; EasyNetQ;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; MessageLib
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MessageQueue
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IBus bus =&lt;span&gt; MQBusBuilder.CreateMessageBus();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息队列&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Queue&amp;lt;Item&amp;gt; NoticQueue = &lt;span&gt;new&lt;/span&gt; Queue&amp;lt;Item&amp;gt;(&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;日志队列&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Queue&amp;lt;Item&amp;gt; LogQueue = &lt;span&gt;new&lt;/span&gt; Queue&amp;lt;Item&amp;gt;(&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列数目发布数量&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; max_count_to_pulish = &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 可供外部使用的消息入列操作
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; push(Item item)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item.type ==&lt;span&gt; ItemType.notic)
            {
                NoticQueue.Enqueue(item);
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item.type ==&lt;span&gt; ItemType.log)
            {
                LogQueue.Enqueue(item);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 监听后需要调用的发布接口
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Pulish(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; source, System.Timers.ElapsedEventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (NoticQueue.Count &amp;gt; &lt;span&gt;0&lt;/span&gt; || LogQueue.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bus == &lt;span&gt;null&lt;/span&gt; || !&lt;span&gt;bus.IsConnected)
                {
                    bus &lt;/span&gt;=&lt;span&gt; MQBusBuilder.CreateMessageBus();
                }

                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (bus.IsConnected)
                {
                    Send(ItemType.notic);
                    Send(ItemType.log);
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 程序自运行并开始监听
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Run()
        {
            System.Timers.Timer timer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.Timers.Timer();
            timer.Interval &lt;/span&gt;= &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;
            timer.Elapsed &lt;/span&gt;+= &lt;span&gt;new&lt;/span&gt; System.Timers.ElapsedEventHandler(Pulish);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;到达时间的时候执行事件；    &lt;/span&gt;
            timer.AutoReset = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置是执行一次（false）还是一直执行(true)；    &lt;/span&gt;
            timer.Enabled = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否执行System.Timers.Timer.Elapsed事件；    &lt;/span&gt;
&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 启动线程异步调用
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;channelType&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Send(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; channelType)
        {
            Thread thread &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ParameterizedThreadStart(PublishAction));
            thread.IsBackground &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            thread.Start(channelType);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 调用发布日志及提醒两个接口
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;channel&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; PublishAction(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; channel)
        {
            PublisLog();
            PublisNotic();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志消息发送至RabbitMQ指定exchange、Queue
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PublisLog()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; channelName =&lt;span&gt; ItemType.log;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routingKey =&lt;span&gt; channelName;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mqqueue = bus.Advanced.QueueDeclare(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Queue.{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channelName));
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exchange = bus.Advanced.ExchangeDeclare(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exchange.{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,channelName), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;direct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; binding =&lt;span&gt; bus.Advanced.Bind(exchange, mqqueue, routingKey);
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (LogQueue.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    Item item &lt;/span&gt;=&lt;span&gt; LogQueue.Dequeue();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; properties = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessageProperties();
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Message = &lt;span&gt;new&lt;/span&gt; Message&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;(Newtonsoft.Json.JsonConvert.SerializeObject(item));
                        Message.Properties.AppId &lt;/span&gt;=&lt;span&gt; item.appid;
                        bus.Advanced.Publish(exchange, routingKey, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, Message);
                    }

                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 提醒消息发送至RabbitMQ指定exchange、Queue
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PublisNotic()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; channelName =&lt;span&gt; ItemType.notic;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routingKey =&lt;span&gt; channelName;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mqqueue = bus.Advanced.QueueDeclare(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Queue.{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channelName));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exchange = bus.Advanced.ExchangeDeclare(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exchange.{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, channelName), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;direct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; binding =&lt;span&gt; bus.Advanced.Bind(exchange, mqqueue, routingKey);
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(NoticQueue.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                Item item &lt;/span&gt;=&lt;span&gt; NoticQueue.Dequeue();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; properties = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessageProperties();
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Message = &lt;span&gt;new&lt;/span&gt; Message&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;(Newtonsoft.Json.JsonConvert.SerializeObject(item));
                    Message.Properties.AppId &lt;/span&gt;=&lt;span&gt; item.appid;
                    bus.Advanced.Publish(exchange, routingKey, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, Message);
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;然后我就发现了这一段代码！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 程序自运行并开始监听
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Run()
        {
            System.Timers.Timer timer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.Timers.Timer();
            timer.Interval &lt;/span&gt;= &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;
            timer.Elapsed &lt;/span&gt;+= &lt;span&gt;new&lt;/span&gt; System.Timers.ElapsedEventHandler(Pulish);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;到达时间的时候执行事件；    &lt;/span&gt;
            timer.AutoReset = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置是执行一次（false）还是一直执行(true)；    &lt;/span&gt;
            timer.Enabled = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否执行System.Timers.Timer.Elapsed事件；    &lt;/span&gt;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 启动线程异步调用
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;channelType&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Send(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; channelType)
        {
            Thread thread &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ParameterizedThreadStart(PublishAction));
            thread.IsBackground &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            thread.Start(channelType);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107140229782-2006936867.png&quot; alt=&quot;&quot; width=&quot;172&quot; height=&quot;158&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　老老大写Bug了，当Run()起来之后，队列中【NoticQueue】有内容，就开始推送消息，发送消息Send()，每来一次推送new一个线程并设置为后台线程，然后发送消息。好了，明白了，这里的线程很混乱，因为&lt;span class=&quot;keyword&quot;&gt;线程操作不当，new了N多个频道，并且没有主动回收，这也难怪内存暴涨呢。并且要是Run()调用多次，后果更加不堪设想。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;keyword&quot;&gt;加班改起来&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　开始动手吧，业务主要推送有普通消息、错误消息和通知消息，那么将队列与线程组装一起，新增一个类QueueTask.cs：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueueTask
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Queue&amp;lt;Item&amp;gt; NoticQueue = &lt;span&gt;new&lt;/span&gt; Queue&amp;lt;Item&amp;gt;(&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列数目发布数量&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; max_count_to_pulish = &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;  &lt;span&gt;bool&lt;/span&gt; isRunning = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; itemType =&lt;span&gt; ItemType.info;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; MessageRouter =&lt;span&gt; ItemType.info;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; QueueTask(&lt;span&gt;string&lt;/span&gt; itemType,&lt;span&gt;string&lt;/span&gt;&lt;span&gt; MessageRouter)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.itemType =&lt;span&gt; itemType;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.MessageRouter =&lt;span&gt; MessageRouter;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 可供外部使用的消息入列操作
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Push(Item item, IBus IBus)
        {
            NoticQueue.Enqueue(item);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isRunning)
                Run(IBus);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Run(IBus IBus)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isRunning)
            {
                Timer timerNotic &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Timer(PulishMsg, IBus, &lt;span&gt;1000&lt;/span&gt;, &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
                isRunning &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; PulishMsg(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; state)
        {
            IBus IBus &lt;/span&gt;= state &lt;span&gt;as&lt;/span&gt;&lt;span&gt; IBus;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (NoticQueue.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                PublisMsg(itemType, IBus);
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; PublisMsg(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; channel, IBus BusInstance)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; channelName = channel &lt;span&gt;as&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (NoticQueue.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routingKey =&lt;span&gt; MessageRouter;
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mqqueue = BusInstance.Advanced.QueueDeclare(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Queue.{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channelName));
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exchange = BusInstance.Advanced.ExchangeDeclare(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exchange.{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, channelName), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;direct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; binding =&lt;span&gt; BusInstance.Advanced.Bind(exchange, mqqueue, routingKey);

                    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (NoticQueue.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        Item item &lt;/span&gt;=&lt;span&gt; NoticQueue.Dequeue();
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; properties = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessageProperties();
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Message = &lt;span&gt;new&lt;/span&gt; EasyNetQ.Message&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;(Newtonsoft.Json.JsonConvert.SerializeObject(item));
                            Message.Properties.AppId &lt;/span&gt;=&lt;span&gt; item.appid;
                            BusInstance.Advanced.Publish(exchange, routingKey, &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, Message);
                        }
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PublisMsg error：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ex.Message);
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Read&amp;lt;T&amp;gt;(IBus BusInstance,Action&amp;lt;Item&amp;gt; dealAction) &lt;span&gt;where&lt;/span&gt;&lt;span&gt; T : Item
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; channelName =&lt;span&gt; itemType;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routingKey =&lt;span&gt; MessageRouter;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mqqueue = BusInstance.Advanced.QueueDeclare(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Queue.{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, channelName));
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; exchange = BusInstance.Advanced.ExchangeDeclare(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Exchange.{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, channelName), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;direct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; binding =&lt;span&gt; BusInstance.Advanced.Bind(exchange, mqqueue, routingKey);

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Consume = BusInstance.Advanced.Consume(mqqueue, registration =&amp;gt;&lt;span&gt;
                {
                    registration.Add&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;((message, info) =&amp;gt;&lt;span&gt;
                    {
                        Item data &lt;/span&gt;= Newtonsoft.Json.JsonConvert.DeserializeObject&amp;lt;T&amp;gt;&lt;span&gt;(message.Body);
                        dealAction(data);
                    });
                });
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Read error：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; ex.Message);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，在MessageQueue.cs修改为单例模式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('44efd431-f1b6-44b3-a43f-25cc392f6768')&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_44efd431-f1b6-44b3-a43f-25cc392f6768&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_44efd431-f1b6-44b3-a43f-25cc392f6768&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('44efd431-f1b6-44b3-a43f-25cc392f6768',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_44efd431-f1b6-44b3-a43f-25cc392f6768&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MessageQueue
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;Install-Package EasyNetQ-dotnet-core -Version 2.0.2-radicalgeek-netc0001 -Pre&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IBus bus = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; isRunning = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;消息队列&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; QueueTask NoticQueue = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;日志队列&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; QueueTask LogQueue = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定义&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; QueueTask InfoQueue = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 同步锁
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; obj = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Init(&lt;span&gt;string&lt;/span&gt; Connection, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; routeKey)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (NoticQueue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                NoticQueue &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QueueTask(ItemType.notic, ItemType.notic);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (LogQueue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                LogQueue &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QueueTask(ItemType.error, ItemType.error);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (InfoQueue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                InfoQueue &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QueueTask(ItemType.info, routeKey);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(MQBusBuilder.Connnection))
                MQBusBuilder.Connnection &lt;/span&gt;=&lt;span&gt; Connection;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; IBus BusInstance
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bus == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (obj)
                    {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bus == &lt;span&gt;null&lt;/span&gt;|| !&lt;span&gt;bus.IsConnected)
                        {
                            bus &lt;/span&gt;=&lt;span&gt; MQBusBuilder.CreateMessageBus();
                        }
                    }
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bus;
            }
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 可供外部使用的消息入列操作
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PushAndRun(Item item)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrWhiteSpace(MQBusBuilder.Connnection) || BusInstance == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item.type ==&lt;span&gt; ItemType.notic)
            {
                NoticQueue.Push(item, BusInstance);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item.type ==&lt;span&gt; ItemType.error)
            {
                LogQueue.Push(item, BusInstance);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item.type ==&lt;span&gt; ItemType.info)
            {
                InfoQueue.Push(item, BusInstance);
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Read(&lt;span&gt;string&lt;/span&gt; itemType, Action&amp;lt;Item&amp;gt;&lt;span&gt; dealAction)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (itemType ==&lt;span&gt; ItemType.notic)
            {
                NoticQueue.Read&lt;/span&gt;&amp;lt;NoticItem&amp;gt;&lt;span&gt;(BusInstance, dealAction);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (itemType ==&lt;span&gt; ItemType.error)
            {
                LogQueue.Read&lt;/span&gt;&amp;lt;ErrorItem&amp;gt;&lt;span&gt;(BusInstance, dealAction);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (itemType ==&lt;span&gt; ItemType.info)
            {
                InfoQueue.Read&lt;/span&gt;&amp;lt;Message&amp;gt;&lt;span&gt;(BusInstance, dealAction);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;每次推送消息的时候，每个QueueTask就自己维护自己的线程和队列了，当调用推送之后，就开始运作起来。恩，应该没问题了。然后就发布nuget，再更新项目，然后发布。观察一段时间，恩，完美。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107142224481-713523389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107142327086-871876392.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;事件二&lt;/h2&gt;
&lt;p&gt;　　事情过后，B端开始搞起来了，然后涉及到订单系统，跟老大（不是老老大，老老大那时候已经跑了）商量之后确定使用消息队列来做订单的事件的拓展，然后就直接美滋滋的调用好之前写的了，没想到啊，这次是&lt;strong&gt;线程&lt;span&gt;暴&lt;/span&gt;&lt;span&gt;涨！&lt;/span&gt;&lt;/strong&gt;因为订单是从B端推送过来的，B端肯定没事，订单后台订阅消息之后，读取过程中出现的线程增多，然后看看之前写的Read()方法，感觉没啥问题啊，每运行完一次，就多了一个线程，这个神奇了啊，那么源代码撸起来。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/EasyNetQ/EasyNetQ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107143543532-1597391030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;翻来覆去，看到这个Consume方法，继承的是IDisposable接口，得勒，知道咋回事了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107143712008-1794710614.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Consume.Dispose(); 用完请记得主动释放啊。&lt;/p&gt;
&lt;p&gt;这回真的可以浪了。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107143940888-2073975150.gif&quot; alt=&quot;&quot; width=&quot;171&quot; height=&quot;171&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;　　遇到问题，冷静下来，耐得了寂寞才行。线上的问题优先解决，然后再慢慢Debug，解决不了，看源码，再解决不了，降级处理，欢迎共同探讨。同时也感谢一下技术群里的兄弟给的一些建议，并帮忙查找资料，还好EasyNetQ是开源了，不然也打算说先不用了，毕竟一开始没什么用户量，所以没必要整那么麻烦，加班加点的弄这个问题。不过最终都完美的解决了，心里还是挺美滋滋的，程序猿随之而来的成就感。&lt;/p&gt;
&lt;p&gt;　　别看我们在工位上默不作声，我们可能在拯救世界呢！老板，该加工资啦！&lt;/p&gt;
&lt;p&gt;                                                                                             &lt;img src=&quot;https://img2018.cnblogs.com/blog/720686/201811/720686-20181107145638823-1438538719.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 07 Nov 2018 07:05:00 +0000</pubDate>
<dc:creator>山治先生</dc:creator>
<og:description>MessageQueen，顾名思义消息队列，在系统开发中也是用的比较多的一个中间件吧。我们这里主要用它来做日志管理和订单管理的，记得老老大（恩，是的，就是老老大，因为他已经跳槽了）还在的时候，当时也是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/EminemJK/p/9921800.html</dc:identifier>
</item>
<item>
<title>Go语言中结构体的使用-第2部分OOP - 小韩说课</title>
<link>http://www.cnblogs.com/hanzk/p/9922587.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hanzk/p/9922587.html</guid>
<description>&lt;div class=&quot;markdown-here-wrapper&quot; data-md-url=&quot;https://i.cnblogs.com/EditPosts.aspx?opt=1&quot; readability=&quot;90.794414607948&quot;&gt;
&lt;h2 id=&quot;1-&quot;&gt;1 概述&lt;/h2&gt;
&lt;p&gt;结构体的基本语法请参见：&lt;a href=&quot;http://www.hellokang.net/go/go-struct-i/&quot;&gt;Go语言中结构体的使用-第1部分结构体&lt;/a&gt;。&lt;br/&gt;结构体除了是一个复合数据之外，还用来做面向对象编程。Go 语言使用结构体和结构体成员来描述真实世界的实体和实体对应的各种属性。也就意味着结构体类型可以类比为其他语言中的“类class”, 而结构体数据可以类比为其他语言中的 “对象”。&lt;br/&gt;本文就说说结构体中，面向对象的部分。&lt;/p&gt;
&lt;h2 id=&quot;2-&quot;&gt;2 构造工厂函数&lt;/h2&gt;
&lt;p&gt;在面向对象编程中，实例化对象时往往需要完成很多业务逻辑，例如初始数据合理性，获取需要的资源等。在经典的OOP程序中，都会提供构造方法，用于在实例化对象时完成特定功能。&lt;br/&gt;Go语言中，没有class，因此没有典型意义的构造方法。但我们可以定义一个函数，用来实例化结构体对象，在函数内完成特定功能，实现构造函数的功能，这就是构造工厂函数。演示如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;type Product struct {
    Name  string
    Price float64
}
func NewProduct(name string, price float64) *Product {
    // 此处完成初始化业务逻辑

    // 得到Product对象
    return &amp;amp;Product{
        Name: name,
        Price: price,
    }
}

// 需要 Product 对象时：
p := NewProduct(&quot;ThinkPad T480&quot;, 8008)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，在OOP编程中，通常认为对象是引用用传递，因此我们的构造函数返回的是 &lt;code&gt;*Product&lt;/code&gt; 同时函数内使用 &lt;code&gt;&amp;amp;Product&lt;/code&gt; ，这样得到的对象为引用传递（Go语言对结构体类型自动解析引用）。&lt;/p&gt;
&lt;h2 id=&quot;3-&quot;&gt;3 成员方法（接收器）&lt;/h2&gt;
&lt;p&gt;若要为成员增加方法，需要在函数上定义接收器，用来接收调用该方法的成员对象。接收器定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func (p *Product) Sale() {
  fmt.Println(&quot;Product: &quot;, p.name, &quot; is on Sale&quot;)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;语法中，&lt;code&gt;(p *Product)&lt;/code&gt; 就是接收器。通过定义可知，该接收器可以让函数接受一个 &lt;code&gt;*Product&lt;/code&gt; 类型的参数，也就是调用该函数的对象。调用方法为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pro := &amp;amp;Product{
  name: &quot;ThinkPad T480&quot;
}
// 当作成员去调用
// 调用时，将调用函数的 pro，作为参数传递给函数 Run 的接收器 m。这样就可以访问 pro 对象了。
pro.Sale()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样，面向对象中对象通常为引用类型，因此接收器的定义也是 &lt;code&gt;*Product&lt;/code&gt; 的引用类型。&lt;/p&gt;
&lt;h2 id=&quot;4-&quot;&gt;4 继承，内嵌结构体&lt;/h2&gt;
&lt;p&gt;Go语言中结构体对象间的继承，通过内嵌结构体语法实现。演示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;type Product struct {
    Name  string
    Price float64
}
func (p *Product) Sale() {
  fmt.Println(&quot;Product: &quot;, p.name, &quot; is on Sale&quot;)
}
type Book struct {
  // 嵌入Product结构体
  Product
  Author string
  Publish string
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;定义 Book 时，内嵌了 Product 结构体。其中 Book 称为子结构体（派生，扩展），Product成为父结构体（基础）。实例化的 Book 结构体对象，可以直接访问 Product 结构体中定义的成员包括属性和方法。演示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;v := &amp;amp;Book{}
// 访问内嵌结构体属性
v.Name = &quot;笑傲江湖&quot;
v.Author = &quot;金庸&quot;
// 调用内嵌结构体方法
v.Sale()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;内嵌还支持：&lt;br/&gt;&lt;em&gt;多继承&lt;/em&gt;，可以同时内嵌多个结构体，称之为多继承。但要保证所继承的结构体间没有同名成员，否则出错。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;间接访问&lt;/em&gt;，字结构体对象支持通过父结构体对象访问继承的成员，语法为 &lt;code&gt;v.Product.Name&lt;/code&gt;，效果与 &lt;code&gt;v.Name&lt;/code&gt; 一致。可以理解为是一种快捷语法。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;直接初始化&lt;/em&gt;，可以直接为内嵌结构体提供初始化操作。演示为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;p := &amp;amp;Book{
  Product: &amp;amp;Product{
    Name: &quot;天龙八部&quot;
    Price: 42.8
  }
  Author: &quot;金庸&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;5-override&quot;&gt;5 重写，override&lt;/h2&gt;
&lt;p&gt;在内嵌继承中，若子与父结构体存在同名成员，实例化的子结构体成员，访问到的是字结构体定义的成员。这个现象称之为重写override。演示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;type Product struct {
    Name  string
    Price float64
}
func (p *Product) Sale() {
  fmt.Println(&quot;Product: &quot;, p.name, &quot; is on Sale&quot;)
}
type Book struct {
  // 嵌入Product结构体
  Product
  Author string
  Publish string
  Price float64
}
v := &amp;amp;Book{}
// 访问内嵌结构体属性
// 以下代码访问的是 Book 中定义的 Price 属性
v.Price = 42.8
// 测试：
fmt.Println(v.Product.Price) // 结果为 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意，继承是一个&lt;em&gt;查找&lt;/em&gt; 过程。先在当前结构体对象中查找，如果没有向内嵌结构体中查找，直到最内层内嵌结构体。重写就是由于在当前结构体对象中查找到了，就不需要再去嵌入结构体对象中查找了，不是一个成员替换过程。&lt;/p&gt;
&lt;p&gt;结构体，实例化，继承，重写示意图如下：&lt;br/&gt;&lt;img src=&quot;http://www.hellokang.net/images/posts/go/go-object.png&quot; alt=&quot;OOP&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上就是结构体提供的关于OOP中的语法。OOP编程还会涉及到接口，反射等技术。&lt;/p&gt;
&lt;p&gt;结构体第二部分完！&lt;br/&gt;原文出自：&lt;a href=&quot;http://www.hellokang.net/go/go-struct-ii/&quot;&gt;小韩说课&lt;/a&gt;&lt;br/&gt;微信关注：小韩说课&lt;br/&gt;&lt;img src=&quot;http://www.hellokang.net/images/wechat_subscription.jpg&quot; alt=&quot;小韩说课&quot;/&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 07 Nov 2018 07:03:00 +0000</pubDate>
<dc:creator>小韩说课</dc:creator>
<og:description>1 概述 结构体的基本语法请参见：Go语言中结构体的使用-第1部分结构体。结构体除了是一个复合数据之外，还用来做面向对象编程。Go 语言使用结构体和结构体成员来描述真实世界的实体和实体对应的各种属性。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hanzk/p/9922587.html</dc:identifier>
</item>
<item>
<title>跳跃表 - Luffyjiang</title>
<link>http://www.cnblogs.com/zhuning/p/9922506.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhuning/p/9922506.html</guid>
<description>&lt;p&gt;最近在看redis方面的书籍，碰到了跳跃表这个数据结构。常规的单向链表在进行增删改查时，只能从头结点开始遍历，时间复杂度O(N)，而跳跃表采用了二分法的思想，平均时间复杂度可以做到O(logN)，最坏时间复杂度O(N)。另外，跳跃表是一种基于概率的数据结构（见下文添加元素操作）。&lt;/p&gt;
&lt;h2 id=&quot;基本结构&quot;&gt;基本结构&lt;/h2&gt;
&lt;p&gt;下图是跳跃表理想情况下的结构示意图。从图中可以看出，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;每个节点包含两个指针：指向水平方向的下一个节点和指向竖直方向的下一个节点（实际结构并非如此，后面会说）。&lt;/li&gt;
&lt;li&gt;跳跃表中包含多条链表。图中包含4条链表，也就是有4层。每层的头结点head只存放指向下个节点的指针，不存放元素。可以看出，从下向上，链表的数量成倍减少：level0的结构与普通的单向链表相同，存放所有元素；level1存放总数的1/2的数据元素；level2存放总数的1/4的数据元素；level3存放总数的1/8的数据元素。&lt;/li&gt;
&lt;li&gt;底层的元素总是比上层元素多，并且如果上层存在某一个元素，那么在同一索引位置的下面几层也都存在该元素。比如level2层存在元素4，那么level0和level1也必定存在元素4。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/UnKRPWf.png&quot; alt=&quot;跳跃表直观图&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本操作&quot;&gt;基本操作&lt;/h2&gt;
&lt;h4 id=&quot;查找操作&quot;&gt;查找操作&lt;/h4&gt;
&lt;p&gt;跳跃表按照自顶向下的顺序进行查找，也就是从head3开始查找。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;假设要查找8，head3.next=8，ok！&lt;/li&gt;
&lt;li&gt;假设要查找7，head3.next=8&amp;gt;7，则指针向下移动到head2，head2.next=4&amp;lt;8，则指针向右移动到4节点，4.next=8&amp;gt;7，指针向下移动到level1层的4节点，4.next=6&amp;lt;7，指针向右移到6节点，6.next=8&amp;gt;7，指针向下移动到level0所在的6节点,6.next=7，ok！（查找轨迹见下图）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以看出，跳跃表查找操作的思路与二分法较为类似，相比于单向链表逐个遍历要更快些。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7GAJwdw.png&quot; alt=&quot;查找路线&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;删除操作&quot;&gt;删除操作&lt;/h4&gt;
&lt;p&gt;在查找操作的基础上，只需要找到待删除节点，然后逐个调整每一层待删除节点前一个节点的next指针即可。&lt;/p&gt;
&lt;h4 id=&quot;添加操作&quot;&gt;添加操作&lt;/h4&gt;
&lt;p&gt;添加操作相对复杂一些。首先要将元素添加到level0层相应的位置，而level1、level2和level3层是否添加该元素，我们采用基于概率的方法进行判断。首先level0层肯定要添加元素，因为它要包含所有元素。规定添加到每层的概率是1/2。也就是说添加到level1层的概率是1/2，添加到level2层的概率是1/4，添加到level3层的概率是1/8......但是需要记住，如果在第n层没有添加元素，那么在这之上的所有层都不再添加元素。&lt;/p&gt;
&lt;p&gt;既然是基于概率，我们可以用随机数进行模拟。跳跃表一共有4层，2的4次方是16，利用随机函数生成一个[0,15)之间的随机整数，如果该随机数在[0,8)之间，在将元素添加到level1；如果该随机数在[0,4)之间，在将元素添加到level1、level2；如果该随机数在[0,1)之间，在将元素添加到level1、level2、level3。&lt;/p&gt;
&lt;h2 id=&quot;代码实现java&quot;&gt;代码实现（Java）&lt;/h2&gt;
&lt;p&gt;跳跃表的实际结构如下图所示。与上面的结构相比，每个元素并非在每一层都有一个节点，而是将元素所在索引位置的所有层封装成一个节点。&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/LVsqpXS.png&quot; alt=&quot;SkipList实际结构&quot;/&gt;&lt;br/&gt;首先需要定义跳跃表节点SkipListNode&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class SkipListNode {
    private int value;
    private SkipListNode[] next;
    // getters setters
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后定义跳跃表SkipList&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class SkipList {

    private SkipListNode head;
    private int levelNum;
    private Random random;
    private Integer randomLimit;

    public SkipList(int levelNum) { // levelNum=4 : 0 1 2 3
        this.head = new SkipListNode(null, levelNum); // head只存放指向下个节点的指针，不存放元素
        this.levelNum = levelNum;
        this.random = new Random();
        this.randomLimit = (int)Math.pow(2, levelNum - 1);
    }
    /** 
     * 查找元素
     */
    public boolean find(Integer value) throws Exception {
        if(value == null) throw new Exception(&quot;The value is null&quot;);
        if(getNode(value) == null) return false;
        else return true;
    }
    /**
     * 添加元素
     */
    public void insert(Integer value) throws Exception {
        if(value == null) throw new Exception(&quot;The value is null&quot;);
        if(find(value)) throw new Exception(&quot;The value already exists&quot;);
        
        // 计算level1、level2...是否添加该元素
        int level = levelNum - 1;
        int rand = random.nextInt(randomLimit);
        int powNum = 0;
        while(level &amp;gt; 0) {
            if(rand &amp;lt; Math.pow(2, powNum)) {
                break;
            }
            level--;
            powNum++;
        }
        
        SkipListNode newNode = new SkipListNode(value, levelNum);
        SkipListNode preNode = null;
        SkipListNode curNode = null;
        SkipListNode tmpNode = null;
        while(level &amp;gt;= 0) {
            preNode = head;
            curNode = head.getNext(level);
            while(curNode != null) {
                if(value &amp;lt; curNode.getValue()) {
                    break;
                }
                preNode = curNode;
                curNode = curNode.getNext(level);
            }
            tmpNode = preNode.getNext(level);
            preNode.setNext(level, newNode);
            newNode.setNext(level, tmpNode);
            level--;
        }
    }
    // 删除元素
    public void delete(Integer value) throws Exception {
        if(value == null) throw new Exception(&quot;The value is null&quot;);
        if(!find(value)) throw new Exception(&quot;The value doesn't exist&quot;);
        int level = levelNum - 1;
        SkipListNode preNode = head;
        SkipListNode curNode = head;
        Integer curValue = null;
        while(level &amp;gt;= 0) {
            curNode = curNode.getNext(level);
            if(curNode != null) {
                curValue = curNode.getValue();
                if(curValue == value) {
                    break;
                } else if(curValue &amp;lt; value) {
                    preNode = curNode;
                } else {
                    curNode = preNode;
                    level--;
                }
            } else {
                curNode = preNode;
                level--;
            }
        }
        while(level &amp;gt;= 0) {
            curNode = head.getNext(level);
            preNode = head;
            while(curNode.getValue() != value) {
                preNode = curNode;
                curNode = curNode.getNext(level);
            }
            preNode.setNext(level, curNode.getNext(level));
            level--;
        }
    }
    
    // 打印跳跃表
    public void printList() {
        int level = levelNum - 1;
        SkipListNode curNode = null;
        while(level &amp;gt;= 0) {
            curNode = head.getNext(level);
            System.out.print(level + &quot; level: &quot;);
            while(curNode != null) {
                System.out.print(curNode.getValue() + &quot;--&amp;gt;&quot;);
                curNode = curNode.getNext(level);
            }
            System.out.println(&quot;null&quot;);
            level--;
        }
    }
    
    private SkipListNode getNode(Integer value) throws Exception {
        if(value == null) throw new Exception(&quot;The value is null&quot;);
        int level = levelNum - 1;
        SkipListNode preNode = head;
        SkipListNode curNode = head;
        Integer curValue = null;
        while(level &amp;gt;= 0) {
            curNode = curNode.getNext(level);
            if(curNode != null) {
                curValue = curNode.getValue();
                if(curValue == value) {
                    return curNode;
                } else if(curValue &amp;lt; value) {
                    preNode = curNode;
                } else {
                    curNode = preNode;
                    level--;
                }
            } else {
                curNode = preNode;
                level--;
            }
        }
        return null;
    }
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Wed, 07 Nov 2018 06:54:00 +0000</pubDate>
<dc:creator>Luffyjiang</dc:creator>
<og:description>最近在看redis方面的书籍，碰到了跳跃表这个数据结构。常规的单向链表在进行增删改查时，只能从头结点开始遍历，时间复杂度O(N)，而跳跃表采用了二分法的思想，平均时间复杂度可以做到O(logN)，最坏</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhuning/p/9922506.html</dc:identifier>
</item>
<item>
<title>动态规划——线性DP.1 - 小笨笨的世界</title>
<link>http://www.cnblogs.com/sillyben/p/9915268.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sillyben/p/9915268.html</guid>
<description>&lt;p&gt;动态规划算法通常用于求解具有某种最优性质的问题。&lt;/p&gt;
&lt;p&gt;那它和贪心有区别吗？&lt;/p&gt;
&lt;p&gt;当然有。不然叫动态规划干啥？&lt;/p&gt;
&lt;p&gt;幼儿园英语老师：DP是啥？&lt;/p&gt;
&lt;p&gt;小盆友：Dog&amp;amp;Peppa pig&lt;/p&gt;
&lt;p&gt;英语老斯：恩恩！真聪明！&lt;/p&gt;
&lt;p&gt;然而，你是小盆友吗？&lt;/p&gt;
&lt;p&gt;如果是&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1496934/201811/1496934-20181106145824903-2089072898.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果不是，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1496934/201811/1496934-20181106145927044-2082415098.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;DP是D****** P*******的缩写。&lt;/p&gt;
&lt;p&gt;意思是动态规划。&lt;/p&gt;
&lt;p&gt;聪明的bolt告诉你：是Dynamic Programming的缩写！！！&lt;/p&gt;

&lt;p&gt;动态规划注重     &lt;strong&gt;表示状态，转移状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; so&lt;/p&gt;
&lt;p&gt;讲一个栗子：&lt;/p&gt;
&lt;p&gt;LIS：&lt;/p&gt;
&lt;p&gt;最长上升子序列&lt;/p&gt;

&lt;p&gt;这是线性动态规划中最经典的栗子之一。&lt;/p&gt;
&lt;p&gt;最长上升子序列（Longest Increasing Subsequence，LIS），指一个序列中最长的单调递增的子序列。&lt;/p&gt;
&lt;p&gt;注意不是子串，所以可以不相邻。&lt;/p&gt;
&lt;p&gt;比如说：&lt;/p&gt;
&lt;p&gt;序列：3   2   1   4   6   8   7   9&lt;/p&gt;
&lt;p&gt;它的LIS是5&lt;/p&gt;
&lt;p&gt;3   4   6   8   9&lt;/p&gt;
&lt;p&gt;或3   4   6   7   9&lt;/p&gt;
&lt;p&gt;或2   4   6   8   9&lt;/p&gt;
&lt;p&gt;······&lt;/p&gt;
&lt;p&gt;还有很多种情况。&lt;/p&gt;
&lt;p&gt;于是我们珂以得出：&lt;/p&gt;
&lt;p&gt;动态规划的最优解，有不同的组合情况，但答案只有一个。&lt;/p&gt;
&lt;p&gt;所以，如果NOIP出了动态规划的题目时，一般会叫你求值，而不是求情况。&lt;/p&gt;

&lt;p&gt;这是好处！&lt;/p&gt;
&lt;p&gt;BUT，有的老师不会好心，会给更多限制条件，使Ans只有一种情况，那就更有难度了。&lt;/p&gt;

&lt;p&gt;LIS问题要用动态规划做。&lt;/p&gt;
&lt;p&gt;方法一：&lt;/p&gt;
&lt;p&gt;这是一个好理解的方法。&lt;/p&gt;
&lt;p&gt;但是更&lt;span&gt;好使&lt;/span&gt;耗时&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1496934/201811/1496934-20181107134740599-366962255.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;不难看出，dp [ i ]就是第 i 个数的LIS&lt;/p&gt;
&lt;p&gt;那代码怎么实现的呢？&lt;/p&gt;
&lt;p&gt;先别急，我们在举个生活中的栗子。&lt;/p&gt;

&lt;p&gt;老师要你算1+2+3+4+5+6+7+8+9=？时，你会算得45，&lt;/p&gt;
&lt;p&gt;老师再问你1+2+3+4+5+6+7+8+9+10=？时，你是会用1+···+10，还是用之前算的45+10？&lt;/p&gt;
&lt;p&gt;聪明人会用后面一种。&lt;/p&gt;

&lt;p&gt;所以，我们根据这个方便的原理，发现我每次计算dp [ i ] 时，如果用到了前面的 dp 值，则会减少一定的计算量。&lt;/p&gt;

&lt;p&gt;在我们每次枚举一个数的dp值时，只要扫描在它前面比它小的数，那些比他小的数的dp值的最大值+1就是所求数的dp值&lt;/p&gt;
&lt;p&gt;因为比所求数小的数的dp值表示它的LIS，再来一个比它大的数，大树数的LIS就等于小数的LIS+1.&lt;/p&gt;
&lt;p&gt;但由于小数的LIS有大有小，我们又要求最长子序列，我们就要取最大值。&lt;/p&gt;

&lt;p&gt;一番思考后，我们找到了状态转移方程，也就是动态规划中最重要的东西：&lt;/p&gt;
&lt;p&gt;对于每一个 i ，我们枚举它前面的数 j，if (i &amp;gt; 它前面的数 j )   dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) ;&lt;/p&gt;

&lt;p&gt;这个算法的时间复杂度是O(n^2)的，慎用。&lt;/p&gt;

&lt;p&gt;code:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; n,a[&lt;span&gt;1001&lt;/span&gt;]&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;用来存序列&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;,dp[&lt;span&gt;1001&lt;/span&gt;]&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;dp值&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组大小根据题目而定。&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; cin&amp;gt;&amp;gt;&lt;span&gt;n;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; dp[&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;;                                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1的dp值为1&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     cin&amp;gt;&amp;gt;&lt;span&gt;a[i];
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=&lt;span&gt;1&lt;/span&gt;;j&amp;lt;i;j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(a[i]&amp;gt;&lt;span&gt;a[j])
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             dp[i]=max(dp[i],dp[j]+&lt;span&gt;1&lt;/span&gt;);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;状态转移&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; cout&amp;lt;&amp;lt;dp[n]&amp;lt;&amp;lt;endl;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 注意要初始化dp [ 1 ] = 1.剩下的为 0.&lt;/p&gt;
&lt;p&gt;还有另一种时间复杂度为 n log n 的LIS算法&lt;/p&gt;

&lt;p&gt;看，栗子！&lt;/p&gt;
&lt;p&gt;2   1   5   3   6   4   6   3 &lt;/p&gt;
&lt;p&gt;在 dp 值相同的情况下，保留较小的数显然更好。因为后面的数若能跟较大的数构成上升子序列，也一定能能较小的数构成上升子序列，反之则不一定。例如 a_3=5 与 a_4=3 的 dp 均为 2，但 a_6=4 不能与 a_3=5 构成上升子序列，而可以和 a_4=3 构成上升子序列。 因此，不同的 dp 值只需要存一个对应的最小值，将这个最小值顺序排列，他们一定是升序（严格来说是不下降）的。 于是，借助二分查找的方式，就可以很快查到更新的值，整体时间复杂度 O(nlogn)。&lt;/p&gt;
&lt;p&gt;这个就是上面的一个优化，也没有太多可讲的，自己打一遍代码也就熟了。&lt;/p&gt;
&lt;p&gt;code：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxn=1e5+&lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; a[maxn];
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; dp[maxn];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ans=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; find(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; l=&lt;span&gt;1&lt;/span&gt;,r=&lt;span&gt;ans,m;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(l&amp;lt;&lt;span&gt;r){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         m=l+(r-l)/&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(dp[m]&amp;gt;=&lt;span&gt;a[x]){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             r=&lt;span&gt;m;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        } 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             l=m+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; l;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;二分查找 &lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;a[i]);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     dp[&lt;span&gt;1&lt;/span&gt;]=a[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(a[i]&amp;gt;&lt;span&gt;dp[ans]){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             dp[++ans]=&lt;span&gt;a[i];
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; pos=&lt;span&gt;find(i);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             dp[pos]=&lt;span&gt;a[i];
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是LIS问题，希望大家好好理解这个问题，因为他真的狠重要！&lt;/p&gt;

&lt;p&gt;今天的分享就到这里，我们下次见。&lt;/p&gt;

</description>
<pubDate>Wed, 07 Nov 2018 06:19:00 +0000</pubDate>
<dc:creator>小笨笨的世界</dc:creator>
<og:description>动态规划算法通常用于求解具有某种最优性质的问题。 那它和贪心有区别吗？ 当然有。不然叫动态规划干啥？ 幼儿园英语老师：DP是啥？ 小盆友：Dog&amp;Peppa pig 英语老斯：恩恩！真聪明！</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sillyben/p/9915268.html</dc:identifier>
</item>
<item>
<title>几种常用的排序算法 - 和牛</title>
<link>http://www.cnblogs.com/heniu/p/9922039.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/heniu/p/9922039.html</guid>
<description>&lt;div class=&quot;markdown-here-wrapper&quot; data-md-url=&quot;https://i.cnblogs.com/EditPosts.aspx?opt=1&quot; readability=&quot;79&quot;&gt;
&lt;h4 id=&quot;-&quot;&gt;什么是算法&lt;/h4&gt;
&lt;p&gt;我想很多程序员恐怕误解了「算法」的意义，一想到算法就是动态规划，机器学习之类的高大名词。算法其实就是数学中的「解题过程」，解题过程要求精确，考虑各种情况，需要人看得懂。算法不需要你在键盘上选择什么编程语言实现，只需要在本子上详细的写出每一个步骤就可以了。&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;算法真的很重要吗？&lt;/h4&gt;
&lt;p&gt;我经常在社区里看到有人说初级开发不需要懂算法，这是非常真切的，很多的业务构建都是很常规的套路，查个数据库返回，没有太多复杂的计算，哪需要什么解题过程。&lt;/p&gt;
&lt;p&gt;但是我想遇到稍微复杂一点的业务，或者想要系统运行得更流畅、更有性能的时候，我们就会构思采取什么样的方法能让系统跑得更快、更稳定，于是有了「分布式算法」等架构方面的算法。有时候我们发现某个响应很慢，可能就是某个算法的执行效率过慢，只是我们不知道这也能称为算法？最常见的恐怕是多层遍历，很容易导致效率很低的问题。所以在编程的时候要养成思考算法复杂度的习惯。&lt;/p&gt;
&lt;p&gt;算法对于提高代码的执行效率，对问题的抽象有非常大的帮助。算法学好了，在遇到同一类问题的时候再也不用挤破脑袋来想了，能够更加容易的联想到相关的算法解决问题。程序员要想编程更容易，不怕各种场景没遇到过，学好算法是很有必要的。&lt;/p&gt;
&lt;p&gt;排序算法的运用非常广泛。各种语言都有自己内置的排序函数，在面试过程中也经常会有排序算法的考题。总结几种排序算法的实现。&lt;/p&gt;
&lt;p&gt;这个问题的显示表示是：请详细描述如何将一组数字按从小到大的顺序排列。&lt;/p&gt;
&lt;p&gt;我首先想到的是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;找出数组中最小的一个；&lt;/li&gt;
&lt;li&gt;把这个数放到另一数组的最后面；&lt;/li&gt;
&lt;li&gt;把这个数从原来的数组中剔除；&lt;/li&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;重复的过程通常涉及到遍历和递归，上面这个解法叫「选择排序」，用 Python 实现如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def select_sort(arr):
    new_arr = []
     # 重复
    for i in range(len(arr)):
        small_index = find_smallest(arr)
         # 把这个数从原来的数组中剔除；
        smallest = arr.pop(small_index)
         # 把这个数放到另一数组的最后面；
        new_arr.append(smallest)
    return new_arr

def find_smallest(arr):
     &quot;&quot;&quot;找出数组中最小的一个；&quot;&quot;&quot;
    smallest = arr[0]
    index = 0
    for e in range(1,len(arr)):
        if arr[e] &amp;lt; smallest:
            smallest = arr[e]
            index = e
    return index
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出来，代码实现基本上就是用编程语言写出解题思路。所以很多编程进阶书都提到一个解决问题的办法就是离开键盘，去上个厕所，在纸上画一画。只要是解题思路很详细，基本上是可以用来当伪代码使用的，可以全部放入代码的注释当中。&lt;/p&gt;
&lt;h4 id=&quot;-bubble-sort-&quot;&gt;冒泡排序（Bubble Sort）&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;比较前一个数和后一个数，如果前比后大，对换他们的位置；&lt;/li&gt;
&lt;li&gt;循环执行&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;def bubble_sort(arr):
    for i in range(len(arr) - 1):
        for j in range(len(arr) - i - 1):
            if arr[j] &amp;gt; arr[j + 1]:
                tmp = arr[j + 1]
                arr[j + 1] = arr[j]
                arr[j] = tmp
    return arr
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;-&quot;&gt;快速排序&lt;/h4&gt;
&lt;p&gt;上面两种算法要操作的步骤很多，当数组太多时就会造成性能过低，我们可以想办法减少要操作的步骤，从而降低算法的复杂度，提高执行效率。减少步骤的很多算法都是将数据分成几部分来处理，也就是通常说的「分治」，从而不断减少没部分需要处理的步骤，选择排序就是这样一种算法：&lt;br/&gt;1.选出第一个元素&lt;br/&gt;2.遍历每个元素，也就是从第二个开始拿，如果比第一个元素小，放到一个新数组里；如果比它大，放到另一个数组；&lt;br/&gt;3.对两个新数组执行同样的操作；&lt;br/&gt;那什么时候不需要执行这样的操作了呢？当数组的元素个数小于2的时候，不需要比较了，分治策略就结束。&lt;/p&gt;
&lt;p&gt;「分治」是一种非常常见的解题思路。因为它能不断的将问题变成更简单的问题，最后变成一个显而易见的事。也就是说它有两个条件：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基准条件。也就是没有办法再分了，足够简单了。&lt;/li&gt;
&lt;li&gt;分治条件或者叫递归条件。能够进一步缩小需要解决的问题的规模。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;分治法在算法中非常普遍，不是因为他能降低算法的复杂度，而是他能一步步将复杂的问题变得越来越简单，规模越来越小，最后变成一个超级简单的问题，如果能进一步抽象这种过程，就能考执行同样的抽象步骤解出来来。分治法经常和递归用在一起，这就衍生了一种变成方式——函数式编程，如果能多接触一些递归的案例，对于函数式变成和抽象是非常有帮助的。软件设计就是讲一个非常复杂的问题抽象的过程，所以掌握函数式编程和递归概念对于抽象能力和软件设计应该是很有帮助的。&lt;/p&gt;
&lt;p&gt;下面实现快速排序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def quick(arr):
    if len(arr) &amp;lt; 2:
        return arr
    else:
        base = arr[0]
        less = [i for i in arr[1:] if i &amp;lt; base]
        greater = [i for i in arr[1:] if i &amp;gt;= base]
        return quick(less) + [base] + quick(greater)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;-&quot;&gt;归并排序&lt;/h4&gt;
&lt;p&gt;归并排序和选择排序一样是一种分治递归策略：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;从中间分成两组&lt;/li&gt;
&lt;li&gt;将两个已经排序好的列表进行合并，合并成的列表就是排序好的&lt;br/&gt;那怎么对上述两个列表排序呢？对两个列表再执行分组策略&lt;br/&gt;什么时候不能继续了呢？当元素个数小于 2 的时候&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;具体实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def merge_sort(arr):
    # divide to two
    if len(arr) &amp;lt; 2:
        return arr
    mid = int(len(arr)/2)
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    j = 0
    i = 0
    while i &amp;lt; len(left) and j &amp;lt; len(right):
        if left[i] &amp;lt; right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    # add the larger part both left and right
    result += left[i:]
    result += right[j:]
    return result
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;-&quot;&gt;总结&lt;/h4&gt;
&lt;p&gt;这篇文章总结了 4 个常用的排序算法的实现，这几个算法经常在面试中可以用到，需要牢牢掌握。掌握基础算法能让程序员知道一些常用的设计套路，在真遇到这些算法的应用场景的那一天，不至于挠头不知所措。常用的算法的复杂度能让我们把握程序设计的性能，在软件出现性能瓶颈的时候能通过改善软件的算法来优化。在文章中，我还说明了递归和函数式编程的重要性，软件设计是一个抽象的过程，面向流程的编程很难让人养成抽象性思维，而函数式编程往往通过递归能将具体的问题进一步抽象，有助于培养我们的软件设计能力，这恐怕是以前的大牛和黑客都特别崇尚 Lisp 的原因。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 07 Nov 2018 05:29:00 +0000</pubDate>
<dc:creator>和牛</dc:creator>
<og:description>什么是算法 我想很多程序员恐怕误解了「算法」的意义，一想到算法就是动态规划，机器学习之类的高大名词。算法其实就是数学中的「解题过程」，解题过程要求精确，考虑各种情况，需要人看得懂。算法不需要你在键盘上</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/heniu/p/9922039.html</dc:identifier>
</item>
<item>
<title>Mybatis框架简介、搭建及核心元素讲解 - DearLoser</title>
<link>http://www.cnblogs.com/MagicLoser/p/9922029.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MagicLoser/p/9922029.html</guid>
<description>&lt;p&gt;大家都知道当前比较流行的框架，如Spring、SpringMVC、Hibernate、Mybatis等框架，那今天咱们来讲讲当前比较流行的企业框架Mybatis。&lt;br/&gt;首先先来介绍一下Mybatis这个框架：Mybatis是一个开源的数据持久化层框架，它内部封装了通过JDBC访问数据库的操作，支持普通的SQL查询，存储过程和高级映射，几乎消除了所有的JDBC代码和参数设置及结果集的检索。&lt;br/&gt;接下来说说Mybatis的优缺点：&lt;br/&gt;优点：与JDBC相比，减少了50%以上的代码量，最简单的持久化框架，小巧简单易学，SQL代码从程序中彻底分离，可重用。提供了XML标签，支持编写动态SQL，提供映射标签，支持对象与数据库的ORM字段映射。那么什么是ORM呢？&lt;/p&gt;
&lt;p&gt;ORM（Object RelationMapping）即对象关系映射，是一种数据持久化技术，它在对象模型和关系型数据库之间建立对应关系。&lt;br/&gt;接下来说说Mybatis的缺点：&lt;br/&gt;SQL语句编写量大，对于开发人员有一定的要求，数据库移植性差&lt;/p&gt;
&lt;h4 id=&quot;mybatis的环境搭建&quot;&gt;Mybatis的环境搭建&lt;/h4&gt;
&lt;p&gt;首先我们的去Mybatis的官方网站(&lt;a class=&quot;uri&quot;&gt;http://mybatis.org)下载最新Release版本的Mybatis&lt;/a&gt;&lt;br/&gt;压缩包解压后可以看到一下的目录结构&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;lib&lt;/li&gt;
&lt;li&gt;LICENSE&lt;/li&gt;
&lt;li&gt;mybatis-3.2.2.jar&lt;/li&gt;
&lt;li&gt;mybatis-3.2.2.pdf&lt;/li&gt;
&lt;li&gt;NOTICE&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在根目录下存放着mybatis-3.2.2.jar，为Mybatis的jar文件，Mybatis-3.2.2.pdf为Mybatis官方使用文档&lt;br/&gt;lib目录下存放着编译依赖包，接下来来介绍一下Mybatis编译的依赖包&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;asm-3.3.1.jar：操作Java字节码的类库&lt;/li&gt;
&lt;li&gt;cglib-2.2.2.jar：用来动态集成Java类或实现接口&lt;/li&gt;
&lt;li&gt;commons-logging-1.1.1.jar：用于通用日志处理&lt;/li&gt;
&lt;li&gt;javassist-3.17.1-GA。jar：分析、编辑和创建java字节码的类库、&lt;/li&gt;
&lt;li&gt;log4j-1.2.17.jar：日志系统&lt;/li&gt;
&lt;li&gt;slf4j-api-1.7.5.jar：日志系统的封装，对外提供统一的API接口&lt;/li&gt;
&lt;li&gt;slf4j-log4j12-1.7.5.jar：slf4j对log4j的相应驱动，完成slf4j绑定log4j&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其次是mybatis-3-mybatis-3.2.2.zip（Mybatis源码包）：里面是Mybatis的所有源代码&lt;br/&gt;目录结构就讲到这，至于具体创建Mybatis项目在这我就不多说了&lt;/p&gt;
&lt;p&gt;接下来再介绍一下Mybatis的核心配置文件configuration.xml&lt;br/&gt;Mybatis核心配置文件主要用于配置数据库连接和Mybatis运行时所需要的各种特性，包含了设置和影响Mybatis行为的属性&lt;br/&gt;接下来说说配置文件中的基本要素&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
    &amp;lt;!DOCTYPE configuration
    PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
    &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;!-- 引入database.properties --&amp;gt;
        &amp;lt;properties resource=&quot;database.properties&quot;/&amp;gt;
        &amp;lt;!-- 配置mybatis的log实现LOG4J --&amp;gt;
        &amp;lt;settings&amp;gt;
            &amp;lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&amp;gt;
        &amp;lt;/settings&amp;gt;
        &amp;lt;!-- 配置mybatis多套运行环境 --&amp;gt;
        &amp;lt;environments default=&quot;development&quot;&amp;gt;
            &amp;lt;environment id=&quot;development&quot;&amp;gt;
                &amp;lt;!-- 配置事务管理，采用JDBC的事务管理 --&amp;gt;
                &amp;lt;transactionManager type=&quot;JDBC&quot;&amp;gt;&amp;lt;/transactionManager&amp;gt;
                &amp;lt;!-- POOLED:mybatis自带的数据源，JNDI：基于Tomcat的数据源 --&amp;gt;
                &amp;lt;dataSource type=&quot;POOLED&quot;&amp;gt;
                    &amp;lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&amp;gt;
                    &amp;lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&amp;gt;
                    &amp;lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&amp;gt;
                    &amp;lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&amp;gt;
                &amp;lt;/dataSource&amp;gt;
            &amp;lt;/environment&amp;gt;
        &amp;lt;/environments&amp;gt;
        &amp;lt;!-- 将mapper文件加入到配置文件中 --&amp;gt;
        &amp;lt;mappers&amp;gt;
            &amp;lt;mapper resource=&quot;POJO/UserMapper.xml&quot;/&amp;gt;
        &amp;lt;/mappers&amp;gt;
    &amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;mybatis-config.xml文件的几个常用元素的作用如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;configuration：配置文件的根元素节点&lt;/li&gt;
&lt;li&gt;properties：通过resource属性从外部指定properties属性文件（database.properties）,该属性文件描述数据库连接的相关配置（数据库驱动、连接数据库的url、数据库用户名、数据库密码），位置也是在/resource目录下。&lt;/li&gt;
&lt;li&gt;settings：设置Mybatis运行中的一些行为，比如此处设置Mybatis的log日志实现为LOG4J，即使用log4j实现日志功能。&lt;/li&gt;
&lt;li&gt;environments：配置Mybatis的多套运行环境，将SQL映射到多个不同的数据库上，该元素节点下可以配置多个environment子元素节点，但是必须指定其中一个默认运行环境（通过default指定）。&lt;/li&gt;
&lt;li&gt;environment：配置Mybatis的一套运行环境，需指定ID、事务管理器、数据源配置等相关信息。&lt;/li&gt;
&lt;li&gt;mappers：作用是告诉Mybatis去哪里找到SQL映射文件（该文件内容是开发者定义的映射SQL语句），整个项目可以有1个或者多个SQL映射文件&lt;/li&gt;
&lt;li&gt;mapper：mappers的子元素节点，具体指定SQL映射文件的路径，其中resource属性的值表述了SQL映射文件的路径（类资源路径）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在这里我稍微提一下注意事项：mybatis-config.xml文件的元素节点是有一定的顺序，节点位置若不按照顺序排位的话，那么XML文件会报错，至于元素的排列顺序是：&lt;br/&gt;1.properties&lt;/p&gt;
&lt;p&gt;2.settings&lt;/p&gt;
&lt;p&gt;3.typeAliases&lt;/p&gt;
&lt;p&gt;4.typeHandlers&lt;/p&gt;
&lt;p&gt;5.objectFactory&lt;/p&gt;
&lt;p&gt;6.objectWrapperFactory&lt;/p&gt;
&lt;p&gt;7.plugins&lt;/p&gt;
&lt;p&gt;8.environments?&lt;/p&gt;
&lt;p&gt;9.databaseIdProvider&lt;/p&gt;
&lt;p&gt;10.mappers&lt;/p&gt;
&lt;h5 id=&quot;常用元素&quot;&gt;常用元素&lt;/h5&gt;
&lt;p&gt;常用元素的顺序大致就是这样的，大家可以参考一下&lt;/p&gt;
&lt;p&gt;有了Mybatis的核心配置文件后，接下来就要准备持久化类和SQL映射文件&lt;br/&gt;那么什么是持久化类呢？持久化类是指其实例状态需要被Mybatis持久化到数据库中的类，在应用的设计中，持久化类通常对应业务中的业务实体，Mybatis一般采用POJO编程模型来实现持久化类，与POJO类配合完成持久化工作是Mybatis最常见的工作模式&lt;br/&gt;既然都讲到这了，我就再讲讲什么是POJO吧！&lt;br/&gt;POJO（Plain Ordinary Java Object）：从字面上来说就是普通的Java对象，POJO类可以简单地理解为符合JavaBean规范的实体类，它不需要继承和实现任何特殊的Java基类或者接口，JavaBean对象的状态保存咋属性中，访问属性必须通过对应的getter和setter方法&lt;/p&gt;
&lt;h4 id=&quot;pojo实体类&quot;&gt;POJO实体类&lt;/h4&gt;
&lt;p&gt;接下里我用实例来向大家演示一下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class User {
    private Integer id; //id 
    private String userCode; //用户编码
    private String userName; //用户名称
    private String userPassword; //用户密码
    private Integer gender;  //性别
    private Date birthday;  //出生日期
    private String phone;   //电话
    private String address; //地址
    private Integer userRole;    //用户角色
    private Integer createdBy;   //创建者
    private Date creationDate; //创建时间
    private Integer modifyBy;     //更新者
    private Date modifyDate;   //更新时间
    //省略getter,setter方法&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;sql映射文件&quot;&gt;SQL映射文件&lt;/h4&gt;
&lt;p&gt;接下来，继续进行SQL映射文件的创建，完成与POJO（实体类）的映射，该文件也是一个XML文件，命名为UserMapper.xml，示例如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
    &amp;lt;!DOCTYPE mapper
    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt;
    &amp;lt;mapper namespace=&quot;POJO.UserMapper&quot;&amp;gt;
        &amp;lt;!-- 查询用户列表记录数 --&amp;gt;
        &amp;lt;select id=&quot;count&quot; resultType=&quot;int&quot;&amp;gt;
            select count(1) as count from smbms_user
        &amp;lt;/select&amp;gt;
    &amp;lt;/mapper&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码就是所定义的SQL语句，其中元素的含义是&lt;br/&gt;1.mapper：映射文件的根元素节点，只有一个属性namespace&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;namespace：用于区分不同的mapper，全局唯一&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2.select：表示查询语句，是Mybatis最常用的元素之一，常用属性如下&lt;/p&gt;
&lt;p&gt;SQl映射文件也弄好了，接下来就是创建测试类了，具体的实现步骤：&lt;br/&gt;1.读取全局配置文件：mybatis-config.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    String resource=&quot;mybatis-config.xml&quot;;
    //获取mybatis-config.xml文件的输入流
    InputStream is=Resource.getResourceAsStream(resource);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.创建SQLSessionFactory对象，此对象可以完成对配置文件的读写&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    SQLSessionFactory factory=new SqlSessionFactoryBuilder().build(is);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.创建SQLSession对象，此对象的作用是调用mapper文件进行数据操作，需要注意的是必须先将mapper文件引入到mybatis-config.xml中才能起效&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    int count=0;
    SqlSession sqlSession=null;
    sqlSession=factory.openSession();
    //Mybatis通过mapper文件的namespace和子元素的id来找到对应的SQL，从而执行查询操作
    count=sqlSession.selectOne(&quot;cn.smbms.dao.user.UserMapper.count&quot;);
    logger.debug(&quot;UserMapperTest count------&amp;gt;&quot;+count);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4.关闭SqlSession对象&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    sqlSession.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面咱们已经成功地将Mybatis搭建出来了，下面再来说说Mybatis的核心要素&lt;/p&gt;
&lt;h3 id=&quot;核心要素&quot;&gt;核心要素&lt;/h3&gt;
&lt;p&gt;首先介绍一下Mybatis的核心接口和类&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;每个Mybatis的应用程序都以一个SQLSessionFactory对象的实例为核心&lt;/li&gt;
&lt;li&gt;首先获取SqlSessionFactoryBuilder对象，可以根据XML配置文件或Configuration类的实例构建对象&lt;/li&gt;
&lt;li&gt;然后获取SQLSessionFactory对象，该对象实例可以通过SqlSessionFactoryBuilder对象来获得&lt;/li&gt;
&lt;li&gt;有了SQLSessionFactory对象之后，就可以进而获取SqlSession实例，SqlSession对象中完全包含以数据库为背景的所有执行SQL操作方法，可以用该实例来直接执行已映射的SQL语句&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;sqlsessionfactorybuilder&quot;&gt;SqlSessionFactoryBuilder&lt;/h3&gt;
&lt;p&gt;SqlSessionFactoryBuilder负责构建SQLSessionFactory，并且提供了多个build()方法的重载，分别是&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;InputStream(字节流)&lt;/li&gt;
&lt;li&gt;Reader(字符流)&lt;/li&gt;
&lt;li&gt;Configuration(类)&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;sqlsessionfactorybuilder的生命周期和作用域&quot;&gt;SqlSessionFactoryBuilder的生命周期和作用域&lt;/h3&gt;
&lt;p&gt;SqlSessionFactoryBuilder的最大特点就是：用过即丢。一旦创建了SQLSessionFactory对象之后，这个类就不再需要存在了，因此SqlSessionFactoryBuilder的最佳范围就是存在于方法体内，也就是局部变量而已。&lt;/p&gt;
&lt;h3 id=&quot;sqlsessionfactory&quot;&gt;SqlSessionFactory&lt;/h3&gt;
&lt;p&gt;SqlSessionFactory简单的理解就是创建SqlSession实例的工厂。所有的Mybatis应用都是以SQLSessionFactory实例为中心，SQLSessionFactory的实例可以通过SqlSessionFactoryBuilder对象来获取&lt;/p&gt;
&lt;h3 id=&quot;sqlsessionfactory的生命周期和作用域&quot;&gt;SqlSessionFactory的生命周期和作用域&lt;/h3&gt;
&lt;p&gt;SqlSessionFactory对象一旦创建，就会在整个应用程序中始终存在。没有理由去销毁或再创建它，并且在应用程序运行中也不建议多次创建SQLSessionFactory，怎么说呢，你可以吧SqlSessionFactoryBuilder当做创建工厂的工人，而SQLSessionFactory就是创建好的工厂，一般来说工厂创建好了之后，工人就不需要了，而工厂会被保留下来，这就是它们的生命周期吧！&lt;/p&gt;
&lt;p&gt;以上就是本文所介绍Mybatis的内容了，大致的核心都介绍完了，接下来你可以自己去消化一下，加油！&lt;/p&gt;
</description>
<pubDate>Wed, 07 Nov 2018 05:26:00 +0000</pubDate>
<dc:creator>DearLoser</dc:creator>
<og:description>大家都知道当前比较流行的框架，如Spring、SpringMVC、Hibernate、Mybatis等框架，那今天咱们来讲讲当前比较流行的企业框架Mybatis。 首先先来介绍一下Mybatis这个框</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MagicLoser/p/9922029.html</dc:identifier>
</item>
</channel>
</rss>