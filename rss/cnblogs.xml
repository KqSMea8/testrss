<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>C#设计模式之十八中介者模式（Mediator Pattern）【行为型】 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/7966240.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/7966240.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   今天我们开始讲“行为型”设计模式的第五个模式，该模式是【中介者模式】，英文名称是：Mediator Pattern。还是老套路，先从名字上来看看。“中介者模式”我第一次看到这个名称，我的理解是，在两个对象中间增加一个“中间对象”，“中间对象”协调两个对象的关系，但是随着理解的深入，“中间对象”处理关系的对象可能不只是两个对象，可能是三个对象，或者更多对象。中介者模式在现实生活中的例子很多，比如：A对象和B对象做生意，如果A对象和B对象是一次性买卖，没有讨价还价的过程，A对象和B对象直接见面更好。但是A对象或者B对象的想法经常变，每次想法的改变都通知对方，就会使对方很反感，而且也不利于生意的顺利进行。如果在A对象和B对象之间增加一个C对象，在最终确定之前不要告诉C对象，对方也就不知道（隔离了耦合，对方可以更具需求变化），等一方最终确定想法后，把最后决定告诉C对象，C对象再转告对方，这样就简化了A对象和B对象的交易过程，而且双方都很满意。在软件构建过程中，因为有了变化，才有增加中介者的需要，如果没有变化，可以一次搞定，直接硬编码也没关系，所以说“变化”是模式的前提，无论是什么模式，就因为有变化，我们需要抵御变化，才要使用相应的模式来解决问题。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;二、中介者模式的详细介绍&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.1、动机（Motivate）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常会维持一种复杂的引用关系，如果遇到一些需求的更改，这种直接的引用关系将面临不断地变化。&lt;/p&gt;&lt;p&gt;　 在这种情况下，我们可使用一个“中介对象”来管理对象间的关联关系，避免相互交互的对象之间的紧耦合引用关系，从而更好地抵御变化。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2、意图（Intent）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   定义了一个中介对象来封装一系列对象之间的交互关系。中介者使各个对象之间不需要显式地相互引用，从而使耦合性降低，而且可以独立地改变它们之间的交互行为。　　　　　　                                ——《设计模式》GoF&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.3、结构图（Structure）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;      &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201712/1048776-20171203153755569-2040623824.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.4、模式的组成&lt;/strong&gt;&lt;br/&gt;    &lt;br/&gt;    可以看出，在中介者模式的结构图有以下角色：&lt;/p&gt;&lt;p&gt;    （1）、抽象中介者角色（Mediator）：在里面定义各个同事之间交互需要的方法，可以是公共的通信方法，也可以是小范围的交互方法。&lt;/p&gt;&lt;p&gt;    （2）、具体中介者角色（ConcreteMediator）：它需要了解并维护各个同事对象，并负责具体的协调各同事对象的交互关系。&lt;/p&gt;&lt;p&gt;    （3）、抽象同事类（Colleague）：通常为抽象类，主要约束同事对象的类型，并实现一些具体同事类之间的公共功能，比如，每个具体同事类都应该知道中介者对象，也就是具体同事类都会持有中介者对象，都可以到这个类里面。&lt;/p&gt;&lt;p&gt;    （4）、具体同事类（ConcreteColleague）：实现自己的业务，需要与其他同事通信时候，就与持有的中介者通信，中介者会负责与其他同事类交互。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.5、中介者模式的代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    中介者模式在显示生活中也有类似的例子，不论是QQ群或者是微信群，或者手提电话，它们都是充当一个中间平台，QQ用户可以登录这个中间平台与其他QQ用户进行交流，如果没有这些中间平台，我们如果想与朋友进行聊天的话，可能就需要当面才可以了。比如：在公司管理过程中，就会涉及到各个部门之间的协调和合作，如何各个部门直接来沟通，看着好像直接高效，其实不然。各个部门之间为了完成一个工作，沟通协调就需要一个人来做这个工作，谁呢？总经理，我们这里就把总经理定义为成总的管理者，各个部门需要向他汇报和发起工作请求。我们看代码吧，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; 中介者模式的实现
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;抽象中介者角色&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Mediator
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;        &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Command(Department department);
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;总经理--相当于具体中介者角色&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; President:Mediator
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;总经理有各个部门的管理权限&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Financial financial;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Market market;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Development development;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetFinancial(financial)
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;          &lt;span&gt;this&lt;/span&gt;.financial=&lt;span&gt;financial;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetDevelopment(development)
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;           &lt;span&gt;this&lt;/span&gt;.development=&lt;span&gt;development;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SetMarket(market)
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;          &lt;span&gt;this&lt;/span&gt;.market=&lt;span&gt;market;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Command(Department department)
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (department.GetType()==&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(Market))
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;          {
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;             financial.Process();
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;           }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; 
&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同事类的接口&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Department
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;持有中介者(总经理)的引用&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mediator mediator;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt;        &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Department(Mediator mediator)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;           &lt;span&gt;this&lt;/span&gt;.mediator =&lt;span&gt; mediator;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Mediator GetMediator
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;           &lt;span&gt;get&lt;/span&gt;{ &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mediator;}
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;           &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;{&lt;span&gt;this&lt;/span&gt;.mediator=&lt;span&gt;value;}
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;做本部门的事情&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Process();
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向总经理发出申请&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Apply();
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开发部门&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Development:Department
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Development(Mediator m):&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(m){}
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Process()
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;            System.Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我们是开发部门，要进行项目开发，没钱了，需要资金支持！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; 
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Apply()
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             System.Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;专心科研，开发项目！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;财务部门&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Financial:Department
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; Financial(Mediator m):&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(m){}
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Process()
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;            System.Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;汇报工作！没钱了，钱太多了！怎么花?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; 
&lt;span&gt; 89&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Apply()
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;            System.Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数钱！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;市场部门&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Market:Department
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;          &lt;span&gt;public&lt;/span&gt; Market(Mediator mediator):&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(mediator){}
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; 
&lt;span&gt;100&lt;/span&gt;          &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Process()
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;         {
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;             System.Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;汇报工作！项目承接的进度，需要资金支持！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;             GetMediator().Command(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt;          &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Apply()
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;         {
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;              System.Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;跑去接项目！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; 
&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;       {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args)
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;           {
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;                President mediator = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; President();
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;                Market   market = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Market(mediator);
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;                Development development = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Development(mediator);
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                Financial financial = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Financial(mediator);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; 
&lt;span&gt;122&lt;/span&gt; &lt;span&gt;               mediator.SetFinancial(financial);
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;               mediator.SetDevelopment(development);
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;               mediator.SetMarket(market);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; 
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;               market.Process();
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;               market.Apply();
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt; &lt;span&gt;               Console.WriteLine();
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;           }
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;   }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;三、中介者模式的实现要点：&lt;/strong&gt;&lt;br/&gt;    &lt;br/&gt;    将多个对象间复杂的关联关系解耦，Mediator模式将多个对象间的控制逻辑进行集中管理，变“多个对象互相关联”为“多个对象和一个中介者关联”，简化了系统的维护，抵御了可能的变化。随着控制逻辑的复杂化，Mediator具体对象的实现可能相当复杂。这时候可以对Mediator对象进行分解处理。&lt;/p&gt;&lt;p&gt;　　&lt;span&gt;Facade模式是解耦系统外到系统内（单向）的对相关联关系&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　&lt;span&gt;Mediator模式是解耦系统内各个对象之间（双向）的关联关系&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;strong&gt;&lt;span&gt;模式的优点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;      &lt;strong&gt;（1）、松散耦合&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;         中介者模式通过把多个同事对象之间的交互封装到中介对象里面，从而使得对象之间松散耦合，基本上可以做到互不依赖。这样一来，同时对象就可以独立的变化和复用，不再“牵一发动全身”&lt;/p&gt;&lt;p&gt;      &lt;strong&gt;（2）、集中控制交互&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;         多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者就可以了。&lt;/p&gt;&lt;p&gt;      &lt;strong&gt;（3）、多对多变为一对多&lt;/strong&gt;&lt;br/&gt; &lt;br/&gt;         没有中介者模式的时候，同事对象之间的关系通常是多对多，引入中介者对象后，中介者和同事对象的关系通常变为双向的一对多，这会让对象的关系更容易理解和实现。&lt;/p&gt;&lt;p&gt;     &lt;strong&gt;&lt;span&gt;模式的缺点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;      &lt;strong&gt;（1）、过多集中化&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;         如果同事对象之间的交互非常多，而且比较复杂，当这些复杂性全都集中到中介者的时候，会导致中介者对象变的十分复杂，而且难于维护和管理。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;四、.NET 中介者模式的实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;     根据我个人的理解，微软的ASP.NET MVC开发模式就是一个中介者模式的很好的实现，其中C就是Controller，也就是中文所说的控制器，控制器就是一个中介者，M和V和它打交道，具体的情况大家可以去查看相关资料，这方面的资料还是很多的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;五、总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    这个模式终于写完了，我们总结一下，为什么要使用中介者模式呢？如果不使用中介者模式的话，各个同事对象将会相互进行引用，如果每个对象都与多个对象进行交互时，将会形成如下图所示的网状结构。&lt;/p&gt;&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201712/1048776-20171203153551241-2069772968.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;从上图可以发现，如果不使用中介者模式的话，每个对象之间过度耦合，这样的既不利于类的复用也不利于扩展。如果引入了中介者模式，那么对象之间的关系将变成星型结构，采用中介者模式之后会形成如下图所示的结构：&lt;/p&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1048776/201712/1048776-20171203153601476-1624663318.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;从上图可以发现，使用中介者模式之后，任何一个类的变化，只会影响中介者和类本身，不像之前的设计，任何一个类的变化都会引起其关联所有类的变化。这样的设计大大减少了系统的耦合度。&lt;/p&gt;
</description>
<pubDate>Sun, 03 Dec 2017 07:39:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/7966240.html</dc:identifier>
</item>
<item>
<title>Qt---Xml文件解析 - lgxZJ</title>
<link>http://www.cnblogs.com/lgxZJ/p/7966091.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lgxZJ/p/7966091.html</guid>
<description>&lt;p&gt;本文我们通过一个读取Xml文件的小例子来学习QXmlStreamReader。&lt;/p&gt;
&lt;h2 id=&quot;xml-简介&quot;&gt;Xml 简介&lt;/h2&gt;
&lt;p&gt;Xml的全称是可扩展标记语言（&lt;strong&gt;EX&lt;/strong&gt;tensible &lt;strong&gt;M&lt;/strong&gt;arkup &lt;strong&gt;L&lt;/strong&gt;anguage），同HTML一样是一种标记语言。但是与HTML不同，XML：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;被设计为具有&lt;strong&gt;自我描述性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;它&lt;strong&gt;没有预定义标签&lt;/strong&gt;，需要使用者自行定义。&lt;/li&gt;
&lt;li&gt;设计宗旨是&lt;strong&gt;传输数据&lt;/strong&gt;，而非显示数据（HTML）。大多数Android App开发都用Xml文件作为界面开发的数据载体。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;qxmlstreamreader-简介&quot;&gt;QXmlStreamReader 简介&lt;/h2&gt;
&lt;blockquote readability=&quot;4.5&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;QXmlStreamReader is a faster and more convenient replacement for Qt's own SAX parser (see QXmlSimpleReader).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方宣称这是一个比Qt的SAX（Simple API for XML）解析器更快、更方便的替代，也就是说建议你优先使用它来解析Xml文件。&lt;/p&gt;
&lt;p&gt;QXmlStreamReader和SAX的工作原理类似，都是以Token为单位对Xml文件进行读取解析。使用QXmlStreamReader基本上有两种模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/12/03/5a236da431e46.png&quot; alt=&quot;mode-pic&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两种方法的区别就是处理单位的不同，分别以Token、Element为单位：前者粒度更细，把控可以更精准，但相对的需要花更多的功夫在细节处理上；后者只关注元素，对于简单的处理使用起来很方便。在QXmlStreamReader中，读取Token需要调用&lt;code&gt;QXmlStreamReader::readNext()&lt;/code&gt;函数，该函数返回读取到的Token，&lt;strong&gt;不同的Token类型需要调用不同的函数来获取相关的内容&lt;/strong&gt;，详细内容参见Qt官方&lt;a href=&quot;http://doc.qt.io/qt-5/qxmlstreamreader.html#TokenType-enum&quot;&gt;链接&lt;/a&gt;；而读取元素则是调用&lt;code&gt;QXmlStreamReader::readNextStartElement()&lt;/code&gt;函数，注意此函数简单地&lt;strong&gt;区别头元素和尾元素&lt;/strong&gt;，如果是头元素则返回true，否则（尾元素或出错）返回false。&lt;/p&gt;
&lt;h2 id=&quot;解析xml-元素&quot;&gt;解析Xml 元素&lt;/h2&gt;
&lt;p&gt;Xml中的元素与HTML一样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;title&amp;gt;Colombia Earthquake&amp;lt;/title&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这就是一个title元素，包含一些文本内容。我们通过调用&lt;code&gt;QXmlStreamReader::readNextStartElement()&lt;/code&gt;来读取它，当读取的是一个元素的时候，&lt;code&gt;QXmlStreamReader::name()&lt;/code&gt;函数返回元素的名字，&lt;code&gt;QXmlStreamReader::readElementText()&lt;/code&gt;返回元素内的文本。&lt;/p&gt;
&lt;h2 id=&quot;解析xml-文档元素&quot;&gt;解析Xml 文档元素&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Xml文档元素包含常见的xml版本、编码、独立文档（standalone）等元数据，这些属性分别对应QXmlStreamReader的&lt;code&gt;documentVersion()&lt;/code&gt;、&lt;code&gt;documentEncoding()&lt;/code&gt;、&lt;code&gt;isStandaloneDocument()&lt;/code&gt;等函数，但是在调用这些函数前我们需要先调用&lt;code&gt;readNext()&lt;/code&gt;函数让解析器先去读取这个特殊元素。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void MainWindow::readDocumentElement()
{
    m_xmlReader.readNext();
    if (m_xmlReader.isStartDocument()) {
        auto item = new QTreeWidgetItem(
                    QStringList(&quot;Document Element&quot;));
        item-&amp;gt;setText(1, &quot;xml version:&quot; + m_xmlReader.documentVersion().toString() +
                    &quot;    encoding:&quot; + m_xmlReader.documentEncoding().toString() +
                    &quot;    is standalone:&quot; + (m_xmlReader.isStandaloneDocument() ? QString(&quot;true&quot;) : QString(&quot;false&quot;)));
        item-&amp;gt;setBackgroundColor(1, QColor(Qt::green));
        m_treeWidget.addTopLevelItem(item);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;解析xml-cdata&quot;&gt;解析Xml CDATA&lt;/h2&gt;
&lt;p&gt;CDATA(Character Data) 代表字符数据，这个区段中的文本不会被Xml 解析器解析，而是原样保留输出。CDATA区段以&lt;code&gt;&amp;lt;![CDATA[&lt;/code&gt;开始，以&lt;code&gt;]]&amp;gt;&lt;/code&gt;结束，这两个标记符号中间的文本可以是&lt;code&gt;]]&amp;gt;&lt;/code&gt;以外的任何字符。CDATA经常被用来存储那些包含特殊字符（Xml关键字或者保留字符）的文本，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;![CDATA[ This is a &amp;lt;CDATA&amp;gt; section text! ]]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;在Xml是特殊字符，用来标识元素的开始，如果上面这段文字不写在CDATA区段中，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void MainWindow::readCDATA()
{
    while (!m_xmlReader.isCDATA()) {
        m_xmlReader.readNext();
    }
    auto item = new QTreeWidgetItem(QStringList(&quot;[CDATA]&quot;));
    item-&amp;gt;setText(1, m_xmlReader.text().toString());
    item-&amp;gt;setBackgroundColor(1, QColor(Qt::cyan));
    m_treeWidget.addTopLevelItem(item);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为CDATA区段不是元素，因此我们需要调用&lt;code&gt;QXmlStreamReader::readNext()&lt;/code&gt;函数。&lt;/p&gt;
&lt;h2 id=&quot;解析xml-dtd&quot;&gt;解析Xml DTD&lt;/h2&gt;
&lt;blockquote readability=&quot;4.5&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，DTD是用来描述Xml文档的结构的，语法如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE 根元素 [元素声明]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如下面这个DTD：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE note [
    &amp;lt;!ELEMENT note (to,from,heading,body)&amp;gt;
    &amp;lt;!ELEMENT to      (#PCDATA)&amp;gt;
    &amp;lt;!ELEMENT from    (#PCDATA)&amp;gt;
    &amp;lt;!ELEMENT heading (#PCDATA)&amp;gt;
    &amp;lt;!ELEMENT body    (#PCDATA)&amp;gt;
]&amp;gt;
&amp;lt;note&amp;gt;
&amp;lt;to&amp;gt;George&amp;lt;/to&amp;gt;
&amp;lt;from&amp;gt;John&amp;lt;/from&amp;gt;
&amp;lt;heading&amp;gt;Reminder&amp;lt;/heading&amp;gt;
&amp;lt;body&amp;gt;Don't forget the meeting!&amp;lt;/body&amp;gt;
&amp;lt;/note&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该DTD 解释如下：&lt;/p&gt;
&lt;p&gt;!DOCTYPE note (第1行)定义此文档是 note 类型的文档。&lt;br/&gt;!ELEMENT note (第2行)定义 note 元素有四个元素：&quot;to、from、heading,、body&quot;&lt;br/&gt;!ELEMENT to (第3行)定义 to 元素为 &quot;#PCDATA&quot; 类型&lt;br/&gt;!ELEMENT from (第4行)定义 from 元素为 &quot;#PCDATA&quot; 类型&lt;br/&gt;!ELEMENT heading (第5行)定义 heading 元素为 &quot;#PCDATA&quot; 类型&lt;br/&gt;!ELEMENT body (第6行)定义 body 元素为 &quot;#PCDATA&quot; 类型&lt;/p&gt;
&lt;p&gt;用QXmlStreamReader解析DTD也非常方便，方法与解析CDATA一样，只是换了个判断函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;while (!m_xmlReader.isDTD()) {
    m_xmlReader.readNext();
}
auto item = new QTreeWidgetItem(QStringList(&quot;[DTD]&quot;));
item-&amp;gt;setText(1, m_xmlReader.text().toString());
item-&amp;gt;setBackgroundColor(1, QColor(Qt::darkMagenta));
m_treeWidget.addTopLevelItem(item);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;解析xml-注释&quot;&gt;解析Xml 注释&lt;/h2&gt;
&lt;p&gt;Xml 的注释也与HTML相同，&lt;code&gt;&amp;lt;!-- XXXXXXXXXXXXXXXXXXX --&amp;gt;&lt;/code&gt;，代码与上一小节基本一样，只是判断处改用了&lt;code&gt;QXmlStreamReader::isComment()&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;while (!m_xmlReader.isComment()) {
    m_xmlReader.readNext();
}
...&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;解析xml-processing-instruction&quot;&gt;解析Xml Processing Instruction&lt;/h2&gt;
&lt;p&gt;XMl PI(Processing Instruction) 处理指令使用这种格式&lt;code&gt;&amp;lt;?PITarget PIContent?&amp;gt;&lt;/code&gt;，前一部分是Target，后一部分是Content。Processing Instruction用来告诉Xml应用程序进行一些Xml以外的操作，例如在有一些应用中，Xml文件需要包含一些CSS文件用以应用样式来渲染自身：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;tutorials.css&quot;?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在QXmlStreamReader中，好像紧贴&lt;code&gt;&amp;lt;?&lt;/code&gt;的被识别位Target，后面的内容都被认为是Content：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;while (!m_xmlReader.isProcessingInstruction()) {
    m_xmlReader.readNext();
}
auto item = new QTreeWidgetItem(QStringList(&quot;[ProcessingInstruction]&quot;));
item-&amp;gt;setText(1, &quot;target: &quot; + m_xmlReader.processingInstructionTarget().toString() +
                 &quot;    content: &quot; + m_xmlReader.processingInstructionData().toString());
item-&amp;gt;setBackgroundColor(1, QColor(Qt::yellow));
m_treeWidget.addTopLevelItem(item);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;获取PI相关内容需要分别调用&lt;code&gt;QXmlStreamReader::processingInstructionTarget()&lt;/code&gt;，&lt;code&gt;QXmlStreamReader::processingInstructionData()&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;示例运行结果&quot;&gt;示例运行结果&lt;/h2&gt;
&lt;p&gt;因为Xml的元素是自定义的，这就意味着往往不同的Xml内部的元素结构都不一样，&lt;strong&gt;不同的约定格式需要编写不同的逻辑代码处理&lt;/strong&gt;。这个示例我们用QTreeWidget来展示解析出来的结构和内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/12/03/5a23997da34ae.png&quot; alt=&quot;result-link&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整代码见&lt;a href=&quot;https://github.com/lgxZJ/Miscellaneous/tree/master/Qt/XmlStream&quot;&gt;链接&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Sun, 03 Dec 2017 06:37:00 +0000</pubDate>
<dc:creator>lgxZJ</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lgxZJ/p/7966091.html</dc:identifier>
</item>
<item>
<title>系统的稳定性建设 - 静儿1986</title>
<link>http://www.cnblogs.com/xiexj/p/7899555.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiexj/p/7899555.html</guid>
<description>&lt;p&gt;　　静儿来面试新美大这个部门的时候，HR跟我说我们是最核心的部门，没有之一。我以为这是句夸张的招人用的玩笑。结果来了发现，额，这句话是很公正客观的。现在上上下下组成了一支牛人团队，请来了其他部门很多资深高手进行封闭开发，确保我们系统的稳定性。&lt;/p&gt;
&lt;p&gt;　　选择一份工作，必然要考虑的是：我们是做基础设施的，还是做平台的，还是做核心链路的。业务方面讲究领域驱动，各个领域目标也不同。&lt;/p&gt;
&lt;p&gt;　　基础设施最重要的指标是稳定性、性能、扩展性。平台讲究多业务，通用性，人效。所谓人效就是我这个平台有些自动化的东西不能满足需求，需要靠手工来完成，这样开发人员的人效就低。如果一个平台需要输入的东西很多，而且还需要多步骤审核，审核不够自动，那么输入人效低，运营的人效也低。如果平台的用户是外部用户，他们输入繁琐，这个用漏斗分析法来分析，得出来的流失率会高。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;checklist:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　核心链路最重要的是稳定性。如果拿到一手烂代码，到了非重构不可的程度。那么重构之前要弄明白几个问题：原系统TOP5的主要问题是哪些？我重构了就能解决这些问题吗？重构之后怎样保证很长一段时间内不需要再次大规模重构？&lt;/p&gt;
&lt;p&gt;　　对于任何一个系统，都要设计一个checklist。比如比较重要的：&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;16.5&quot;&gt;&lt;tr&gt;&lt;td&gt;大分类&lt;/td&gt;
&lt;td&gt; 小分类&lt;/td&gt;
&lt;td&gt; check项目&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 基础组件依赖&lt;/td&gt;
&lt;td&gt; 缓存&lt;/td&gt;
&lt;td&gt; 挂了是否可用、跟其他系统共用？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; MYSQL&lt;/td&gt;
&lt;td&gt;跟其他系统共用、慢查询、大事务、连接池监控状况、大表、读写分离、主从延时敏感？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; MQ&lt;/td&gt;
&lt;td&gt; 挂了是否可用、依赖消息的发送顺序？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 日志&lt;/td&gt;
&lt;td&gt; 建议应用日志不超过磁盘的30%,使用日志组件的性能和稳定性？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 其他组件，如databus&lt;/td&gt;
&lt;td&gt; 是否有监控？是否单点？自动fail over?&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 依赖内外部系统&lt;/td&gt;
&lt;td&gt; 下游系统1&lt;/td&gt;
&lt;td&gt; timeout配置？重试次数？满足幂等性？TP99?挂掉后是否稳定？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 下游系统2&lt;/td&gt;
&lt;td&gt; timeout配置？重试次数？满足幂等性？TP99?挂掉后是否稳定？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt; 被依赖内外部系统&lt;/td&gt;
&lt;td&gt; 上游系统1&lt;/td&gt;
&lt;td&gt; 是否限流？timeout配置？重试次数？满足幂等性？TP99?挂掉后是否稳定？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 上游系统2&lt;/td&gt;
&lt;td&gt;是否限流？ timeout配置？重试次数？满足幂等性？TP99?挂掉后是否稳定？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; 核心接口性能&lt;/td&gt;
&lt;td&gt;核心接口1&lt;/td&gt;
&lt;td&gt; QPS、TP99、可用性？&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;核心接口2&lt;/td&gt;
&lt;td&gt; QPS、TP99、可用性?&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt; JVM&lt;/td&gt;
&lt;td&gt; 基本配置&lt;/td&gt;
&lt;td&gt; 堆栈配置、线程使用的监控报警、fullgc异常、无界队列、批量更新cache?&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; 容量预估&lt;/td&gt;
&lt;td&gt; 高峰期CPU load、高峰期内存、高峰期磁盘IO、高峰期网卡、是否有两到三倍冗余？&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;组件和版本：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　维护系统稳定性要注意选择合适组件和版本。&lt;/p&gt;
&lt;p&gt;　　比如Apache Tomcat被纰漏有高危漏洞。当在应用配置文件web.xml中显式的配置DefaultServlet的readonly属性值为false时，恶意用户能够通过PUT请求方法上传文件，如果上传的是可执行文件，将会导致远程命令被执行。&lt;/p&gt;
&lt;p&gt;　　jackson-databind2.9版本前有反序列化漏洞，它可能语序未经身份验证的用户通过将而已制作的输入发送到ObjectMapper的readValue方法来执行代码。如果服务器反序列化了不安全的数据，能造成服务器执行恶意代码。建议升级到2.9.2以上。&lt;/p&gt;
&lt;p&gt;　　比如Apache Struts发布S2-054和S2-055安全公告，两个漏洞皆是因为调用了有问题的组件而产生的漏洞。&lt;/p&gt;
&lt;p&gt;　　S2-054漏洞由于Apache Struts REST插件使用了过时的JSON-lib库，这个库很容易受到攻击，攻击者可以构造特制的JSON恶意请求造成DOS攻击。&lt;/p&gt;
&lt;p&gt;　　由于Apache Struts调用了存在反序列化漏洞的Jackson JSON库，导致了反序列化漏洞。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 外部依赖：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　外部依赖，比如我们的下游系统、或者缓存，MQ等等。都需要在系统里处理好它们出问题的情况。测试方法是：将这些依赖的端口禁用，流量打过来后观察系统。系统线程数有没有飙升，超时是否合理，有没有异步化，有没有熔断？最重要的是：事务里不允许有外部依赖。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;跑题时间：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　幸福是件很简单的事情：幸福是可以轻快的又跑又跳，可以边走路边跳起来够到路边的树叶；幸福是无论小鲜肉受了伤还是熟睡中，只要我拥抱他，他就会紧紧的搂住我。幸福是下班很晚，回家发现男神还在客厅等我。&lt;/p&gt;
&lt;p&gt;　　周四男神发消息祝我生日快乐，说给我准备了棒棒糖。我抬头对周围的同事说：“爷爷的，我的生日是昨天。”同事说：“能想起来就不错，别管哪天想起来。”回家才发现棒棒糖是小鲜肉在幼儿园得到的礼物，拿回来送给妈妈的。我笑着说男神真无耻。&lt;/p&gt;
&lt;p&gt;　　二十几岁的时候，安逸到过段时间上班会换一条远的路线，看到不同的风景会欣喜。年轻是用来挥霍的，愿意去接受无法预估和掌控的无限可能。现在每走一步要做好规划，沿着设定的道路来走。就像二十几岁的时候想穿什么衣服都可以，而再大一点就需要讲究衣品。什么阶段做什么事情。&lt;/p&gt;
&lt;p&gt;　　做程序媛其实本身就是是很幸福的。记得大学的时候有个男孩表白，静儿没有同意。后来听别人说有他们宿舍那几个男孩子都很喜欢静儿。本来也没放在心上，后来毕业聚会的时候，其中一个男孩喝醉了拉着静儿不放。静儿才开始想这件奇怪的事情，因为静儿和他们很少接触的。后来想明白了：他们喜欢的不是静儿本人，是那个男孩子口中的静儿。不论在什么情况下，都把别人说的非常好，这不是静儿有多好，而只能说明那个男孩子的人品非常好。&lt;/p&gt;
&lt;p&gt;　　所以静儿最大的幸福是周围都是这样一群单纯善良的程序员。可能当初和谁在一起，结果都会不错。只是爱是一种天时地利的迷信。一起经历过的回忆和青春，别人是代替不了的。我问男神我在他心中长得到底是什么样子。男神只是说：一直就是当初第一次见到我的样子。终于明白为什么一些人可以接受一起变老，而不能接受第一次见面对方就不再年轻。对于我和男神，时间永远定格在了20岁我们的初见。选对人最重要的两方面而已：健康和人品。身怀感恩之心，一起创造岁月的童话。&lt;/p&gt;
</description>
<pubDate>Sun, 03 Dec 2017 06:16:00 +0000</pubDate>
<dc:creator>静儿1986</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiexj/p/7899555.html</dc:identifier>
</item>
<item>
<title>Ali OSS 服务端签名并设置回调，客户端上传文件 - 苏铭客</title>
<link>http://www.cnblogs.com/sumingk/p/7966016.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sumingk/p/7966016.html</guid>
<description>&lt;p&gt;一.最近做阿里云oss文件上传开发，一点收获分享给大家，帮助大家绕过一些坑。关于阿里云oss服务的介绍，我这里不做赘述了，可以查看阿里云OSS开发api文档。&lt;/p&gt;
&lt;p&gt;     在这里我主要介绍下，文件上传流程比较复杂的服务器设置回调功能。整个流程图是这样的：&lt;/p&gt;
&lt;p&gt;     &lt;img src=&quot;https://images2018.cnblogs.com/blog/722027/201712/722027-20171203125537851-1543689938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;        大家可以参考阿里api文档介绍的工作流程说明：&lt;a href=&quot;https://help.aliyun.com/document_detail/31927.html?spm=5176.doc31988.6.633.OTY557&quot; target=&quot;_blank&quot;&gt;https://help.aliyun.com/document_detail/31927.html?spm=5176.doc31988.6.633.OTY557&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二. 客户端请求policy，签名，key以及回调地址等&lt;/p&gt;
&lt;p&gt;     1.首先定义我们的业务类型biz_type，主要是将文件按业务类型目录存储。这里我要着重强调一下，阿里oss回调请求的自定义参数：&lt;/p&gt;
&lt;pre&gt;
 ${x:biz_type}，不要使用驼峰法命名，在开发的工程中，发现驼峰法命名bizType 取不到值。建议需要命名时 用&quot;_&quot;取代。&lt;br/&gt;2.accessId ，accesskey 定义在properties文件中，这些定值从文件中读取，这里我要说明下：定义的end 和 endPoint 
&lt;/pre&gt;
&lt;p&gt;     endpoint = http://oss-cn-shanghai.aliyuncs.com&lt;br/&gt;     end = oss-cn-shanghai.aliyuncs.com&lt;/p&gt;
&lt;p&gt;     bucket 是定义的桶名称就类似于文件目录名称。&lt;/p&gt;
&lt;p&gt;     2. callbackurl 定义自己的回调方法&lt;/p&gt;
&lt;p&gt;     3.签名，失效时间，policy，这些是根据阿里云官网提供的案例代码写的。&lt;/p&gt;
&lt;p&gt;     4.在定义callback字符串时，遇到一个大坑，这也是我写整篇文章的原因。&lt;/p&gt;
&lt;p&gt;       定义callback 时，阿里支持两种方式，一个是callbackBody字符串直接拼接 用&amp;amp;符连接。&lt;/p&gt;
&lt;p&gt;       这里我使用的是第二种方式，callbackBody 采用json字符串。但是这跟以往的字符串不一样，中间有阿里自带的字符bucket,object,size等以及自定义的字符，ali oss 需要解析自定义字符，这里可以理解成&lt;/p&gt;
&lt;p&gt;      变量的一个占位符，那么json串是如何拼接一个占位符变量呢？？？带着这个问题，我就一遍一遍的拼串，尝试了大概有两小时，看了官网的一篇错误排查文章：&lt;a href=&quot;https://yq.aliyun.com/articles/68863/&quot; target=&quot;_blank&quot;&gt;https://yq.aliyun.com/articles/68863/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;      定义的回调字符串是这样的：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nix&quot;&gt;  {
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;callbackUrl&quot; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://abc.com/test.php&quot;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;callbackHost&quot; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;oss-cn-hangzhou.aliyuncs.com&quot;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;callbackBody&quot; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;{\&quot;bucket\&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&lt;span class=&quot;hljs-subst&quot;&gt;${mimeType}, \&quot;object\&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&lt;span class=&quot;hljs-subst&quot;&gt;${object},\&quot;size\&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&lt;span class=&quot;hljs-subst&quot;&gt;${size},\&quot;mimeType\&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&lt;span class=&quot;hljs-subst&quot;&gt;${mimeType},\&quot;my_var\&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&lt;span class=&quot;hljs-subst&quot;&gt;${x:my_var}}&quot;,
    &lt;span class=&quot;hljs-string&quot;&gt;&quot;callbackBodyType&quot; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;
  } &lt;br/&gt;顿时眼睛亮了，&lt;span&gt;callbackBody 定义的原来是一个字符串的jsonobject,一直以为需要定义一个占位符类型的jsonobject对象。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs nix&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;  然后继续拼串，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code class=&quot;hljs nix&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-subst&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;定义的callbackBody就是这样： &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&quot;{\'bucket\':${bucket}, \'object\':${object},\'size\':${size},\'mimeType\':${mimeType},\'uid\':${x:uid},\'biz_type\':${x:biz_type}}&quot;&lt;br/&gt;最终将 resMap 转成json 字符返回。
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;96&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; String reqOssServer() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;           
&lt;span&gt; 3&lt;/span&gt;         String[] bizArray = &lt;span&gt;new&lt;/span&gt; String[]{&quot;&quot;,&quot;user-dir/&quot;,&quot;advise-dir/&quot;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;           
&lt;span&gt; 5&lt;/span&gt;         String biz_type = getRequest().getParameter(&quot;biz_type&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;           
&lt;span&gt; 7&lt;/span&gt;         String sysCurrtime = System.currentTimeMillis()+&quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         
&lt;span&gt; 9&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;15位随机码&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         String randStr = sysCurrtime.substring(5,sysCurrtime.length())+CommonUtil.getRamdon(15&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;目录&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         String dir =&lt;span&gt; bizArray[Integer.valueOf(biz_type)];
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         
&lt;span&gt;14&lt;/span&gt;         PropertiesUtil pro = &lt;span&gt;new&lt;/span&gt; PropertiesUtil(&quot;oss.properties&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         String end = pro.readValue(&quot;end&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         String endpoint = pro.readValue(&quot;endpoint&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         String accessId = pro.readValue(&quot;accessKeyId&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         String accessKey = pro.readValue(&quot;accessKeySecret&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         String bucket = pro.readValue(&quot;bucketName&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             
&lt;span&gt;21&lt;/span&gt;         String host = &quot;https://&quot; + bucket + &quot;.&quot; +&lt;span&gt; end;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;oss 回调地址&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         String callbackurl = Cont.TEST_DOMAIN_NAME+&quot;/osscallback&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         
&lt;span&gt;27&lt;/span&gt;         OSSClient client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OSSClient(endpoint, accessId, accessKey);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {     
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; expireTime = 3000&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; expireEndTime = System.currentTimeMillis() + expireTime * 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             Date expiration = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(expireEndTime);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             PolicyConditions policyConds = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PolicyConditions();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, 0, 1048576000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;             String postPolicy =&lt;span&gt; client.generatePostPolicy(expiration, policyConds);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] binaryData = postPolicy.getBytes(&quot;utf-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             String encodedPolicy =&lt;span&gt; BinaryUtil.toBase64String(binaryData);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             String postSignature =&lt;span&gt; client.calculatePostSignature(postPolicy);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             
&lt;span&gt;41&lt;/span&gt;             
&lt;span&gt;42&lt;/span&gt;             Map&amp;lt;String, String&amp;gt; respMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;String, String&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             URL url =&lt;span&gt; client.generatePresignedUrl(bucket, accessKey, expiration);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             respMap.put(&quot;accessid&quot;&lt;span&gt;, accessId);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             respMap.put(&quot;policy&quot;&lt;span&gt;, encodedPolicy);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             respMap.put(&quot;signature&quot;&lt;span&gt;, postSignature);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;respMap.put(&quot;expire&quot;, formatISO8601Date(expiration));&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;             respMap.put(&quot;dir&quot;&lt;span&gt;, dir);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             respMap.put(&quot;host&quot;&lt;span&gt;, host);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             respMap.put(&quot;expire&quot;, String.valueOf(expireEndTime / 1000&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             respMap.put(&quot;url&quot;&lt;span&gt;, url.toString());
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             respMap.put(&quot;key&quot;&lt;span&gt;, randStr);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;bucket=${bucket}&amp;amp;object=${object}&amp;amp;etag=${etag}&amp;amp;size=${size}&amp;amp;mimeType=${mimeType}&amp;amp;my_var=${x:my_var}&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; String callback = &quot;{\&quot;callbackUrl\&quot;:\&quot;&quot; + callbackurl + &quot;\&quot;,\&quot;callbackBody\&quot;:\&quot;filename=${object}&amp;amp;size=${size}&amp;amp;mimeType=${mimeType}&amp;amp;&quot;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                    + &quot;orderid=&quot; + orderid + &quot;&amp;amp;calbackright=&quot; + calbackright + &quot;\&quot;,\&quot;callbackBodyType\&quot;:\&quot;application/x-www-form-urlencoded\&quot;}&quot;;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先传入一个固定值测试
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; String callback = &quot;{\&quot;callbackUrl\&quot;:\&quot;&quot; + callbackurl + &quot;\&quot;,\&quot;callbackBody\&quot;:\&quot;filename=${object}&amp;amp;size=${size}&amp;amp;mimeType=${mimeType}&amp;amp;orderid=123\&quot;,\&quot;callbackBodyType\&quot;:\&quot;application/x-www-form-urlencoded\&quot;}&quot;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             
&lt;span&gt;59&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;String callback = &quot;{\&quot;callbackUrl\&quot;:\&quot;&quot;+callbackurl+&quot;\&quot;,\&quot;callbackBody\&quot;:\&quot;{\'bucket\':${bucket}, \'object\':${object},\'size\':${size},\'mimeType\':${mimeType},\'uid\':${x:uid}}\&quot;,\&quot;callbackBodyType\&quot;:\&quot;application/json\&quot;}&quot;;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;             
&lt;span&gt;61&lt;/span&gt;             String callbackbody = &quot;{\'bucket\':${bucket}, \'object\':${object},\'size\':${size},\'mimeType\':${mimeType},\'uid\':${x:uid},\'biz_type\':${x:biz_type}}&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&quot;1&quot;.equals(biz_type)){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户头像，banner修改&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;                 callbackbody = &quot;{\'bucket\':${bucket}, \'object\':${object},\'size\':${size},\'mimeType\':${mimeType},\'uid\':${x:uid},\'biz_type\':${x:biz_type},\'portrait\':${x:portrait},\'banner\':${x:banner}}&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&quot;2&quot;.equals(biz_type)){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;投诉建议&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;                 callbackbody = &quot;{\'bucket\':${bucket}, \'object\':${object},\'size\':${size},\'mimeType\':${mimeType},\'uid\':${x:uid},\'biz_type\':${x:biz_type},\'path\':${x:path},\'guideid\':${x:guideid}}&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;             
&lt;span&gt;68&lt;/span&gt;             String callback = &quot;{\&quot;callbackUrl\&quot;:\&quot;&quot;+callbackurl+&quot;\&quot;,\&quot;callbackBody\&quot;:\&quot;&quot;+callbackbody+&quot;\&quot;,\&quot;callbackBodyType\&quot;:\&quot;application/json\&quot;}&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;             
&lt;span&gt;70&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] bytes = Base64.encodeBase64(callback.getBytes(&quot;UTF-8&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             respMap.put(&quot;callback&quot;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(bytes));
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;respMap.put(&quot;callback_str&quot;, callback);&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt;             JSONObject ja1 =&lt;span&gt; JSONObject.fromObject(respMap);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;             System.out.println(&quot;=====respMap:===== &quot;+&lt;span&gt;ja1.toString());
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;             getResponse().setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;             getResponse().setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, POST&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;             
&lt;span&gt;78&lt;/span&gt;             setJsonString(AppJSON.succReq(&quot;请求成功&quot;&lt;span&gt;, ja1.toString()));
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;            Assert.fail(e.getMessage());
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;           
&lt;span&gt;83&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;ajax&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;       }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 三. 回调方法处理业务逻辑&lt;/p&gt;
&lt;p&gt;      该回调方法是一个servlet，需要在web.xml中配置 访问的路径地址。在servlet中，主要进行业务处理，这里就不在贴出我的业务处理了，大家根据自己的实际需要进行编码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.zd.servlet;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.BufferedReader;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStream;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.InputStreamReader;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.URI;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.URL;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.KeyFactory;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.PublicKey;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.spec.X509EncodedKeySpec;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.ParseException;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.ServletException;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.annotation.WebServlet;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServlet;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; net.sf.json.JSONObject;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.lang.StringUtils;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.http.HttpResponse;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.http.client.methods.HttpGet;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.http.impl.client.DefaultHttpClient;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.aliyun.oss.common.utils.BinaryUtil;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zd.aliyun.oss.HttpMethod;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zd.aliyun.oss.OSSClient;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zd.aliyun.oss.common.utils.DateUtil;
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zd.aliyun.oss.model.GeneratePresignedUrlRequest;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zd.util.Cont;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zd.util.FileUtil;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zd.util.StringUtil;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.zd.util.codeBuild.PropertiesUtil;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; @SuppressWarnings(&quot;deprecation&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; @WebServlet(asyncSupported = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OssCallBackService &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; HttpServlet {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doGet(HttpServletRequest req, HttpServletResponse resp)
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.doPost(req, resp);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         response(req, resp, &quot;input get &quot;, 200&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;    }&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;     
&lt;span&gt; 45&lt;/span&gt;     @SuppressWarnings({ &quot;finally&quot;&lt;span&gt; })
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String executeGet(String url) {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         BufferedReader in = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         String content = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义HttpClient&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;             @SuppressWarnings(&quot;resource&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;             DefaultHttpClient client = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DefaultHttpClient();
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实例化HTTP方法&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;             HttpGet request = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpGet();
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             request.setURI(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; URI(url));
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;             HttpResponse response =&lt;span&gt; client.execute(request);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt;             in = &lt;span&gt;new&lt;/span&gt; BufferedReader(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; InputStreamReader(response.getEntity().getContent()));
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             StringBuffer sb = &lt;span&gt;new&lt;/span&gt; StringBuffer(&quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             String line = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             String NL = System.getProperty(&quot;line.separator&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; ((line = in.readLine()) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                 sb.append(line +&lt;span&gt; NL);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;            in.close();
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             content =&lt;span&gt; sb.toString();
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (in != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                     in.close();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最后要关闭BufferedReader&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                    e.printStackTrace();
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; content;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; String GetPostBody(InputStream is, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; contentLen) {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (contentLen &amp;gt; 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; readLen = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; readLengthThisTime = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] message = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[contentLen];
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (readLen !=&lt;span&gt; contentLen) {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                     readLengthThisTime = is.read(message, readLen, contentLen -&lt;span&gt; readLen);
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (readLengthThisTime == -1) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Should not happen.&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                     readLen +=&lt;span&gt; readLengthThisTime;
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(message);
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt; 　　 //oss回调请求
&lt;span&gt;102&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; VerifyOSSCallbackRequest(HttpServletRequest request, String ossCallbackBody) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; NumberFormatException, IOException
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; ret = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;    
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         String autorizationInput = &lt;span&gt;new&lt;/span&gt; String(request.getHeader(&quot;Authorization&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         String pubKeyInput = request.getHeader(&quot;x-oss-pub-key-url&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;byte&lt;/span&gt;[] authorization =&lt;span&gt; BinaryUtil.fromBase64String(autorizationInput);
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;byte&lt;/span&gt;[] pubKey =&lt;span&gt; BinaryUtil.fromBase64String(pubKeyInput);
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         String pubKeyAddr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(pubKey);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!pubKeyAddr.startsWith(&quot;http://gosspublic.alicdn.com/&quot;) &amp;amp;&amp;amp; !pubKeyAddr.startsWith(&quot;https://gosspublic.alicdn.com/&quot;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             System.out.println(&quot;pub key addr must be oss addrss&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         String retString =&lt;span&gt; executeGet(pubKeyAddr);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         retString = retString.replace(&quot;-----BEGIN PUBLIC KEY-----&quot;, &quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;         retString = retString.replace(&quot;-----END PUBLIC KEY-----&quot;, &quot;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         String queryString =&lt;span&gt; request.getQueryString();
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         String uri =&lt;span&gt; request.getRequestURI();
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         String decodeUri = java.net.URLDecoder.decode(uri, &quot;UTF-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;         String authStr =&lt;span&gt; decodeUri;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (queryString != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !queryString.equals(&quot;&quot;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;             authStr += &quot;?&quot; +&lt;span&gt; queryString;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         authStr += &quot;\n&quot; +&lt;span&gt; ossCallbackBody;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;         ret =&lt;span&gt; doCheck(authStr, authorization, retString);
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt;     
&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doPost(HttpServletRequest request, HttpServletResponse response)
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ServletException, IOException {
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;HttpServletRequest&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         String ossCallbackBody = GetPostBody(request.getInputStream(), Integer.parseInt((request).getHeader(&quot;content-length&quot;&lt;span&gt;)));
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         System.out.println(&quot;ossCallbackBody == &quot;+&lt;span&gt;ossCallbackBody);
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;         
&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; ret =&lt;span&gt; VerifyOSSCallbackRequest(request, ossCallbackBody);
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;         System.out.println(&quot;verify result:&quot; +&lt;span&gt; ret);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         
&lt;span&gt;140&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; String aaa  =&quot;{\&quot;bucket\&quot;:\&quot;picture-zoomdu\&quot;,\&quot;object\&quot;:\&quot;2017072131713.jpg\&quot;,\&quot;size\&quot;:\&quot;12345\&quot;,&quot;gid&quot;:&quot;86&quot;,&quot;uid&quot;:&quot;121&quot;,&quot;type&quot;:&quot;1&quot;}&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;         JSONObject obj =&lt;span&gt; JSONObject.fromObject(ossCallbackBody);
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;         PropertiesUtil pro = &lt;span&gt;new&lt;/span&gt; PropertiesUtil(&quot;oss.properties&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;         String endpoint = pro.readValue(&quot;endpoint&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;         String accessKeyId = pro.readValue(&quot;accessKeyId&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;         String accessKeySecret = pro.readValue(&quot;accessKeySecret&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;         
&lt;span&gt;147&lt;/span&gt;         String bucketName = obj.get(&quot;bucket&quot;&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;         String bucketkey = obj.get(&quot;object&quot;&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         
&lt;span&gt;150&lt;/span&gt;         OSSClient ossClient = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; OSSClient(endpoint, accessKeyId, accessKeySecret);
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;         Date expirations = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             expirations = DateUtil.parseRfc822Date(&quot;Wed, 18 Mar 2019 14:20:00 GMT&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ParseException e) {
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;         GeneratePresignedUrlRequest requestGenerate = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GeneratePresignedUrlRequest(bucketName, bucketkey, HttpMethod.GET);
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;        requestGenerate.setExpiration(expirations);
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;         
&lt;span&gt;160&lt;/span&gt;         URL signedUrl =&lt;span&gt; ossClient.generatePresignedUrl(requestGenerate);
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;         String path =&lt;span&gt;signedUrl.toString();
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(signedUrl.toString().indexOf(&quot;?&quot;)&amp;gt;-1&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;             path = path.substring(0,signedUrl.toString().indexOf(&quot;?&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 图片压缩配置的字符串&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt;         path += &quot;?x-oss-process=style/zd_list_image&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;         String ossurl = &quot;{\&quot;ossurl\&quot;:\&quot;&quot;+signedUrl.toString()+&quot;\&quot;}&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (ret){&lt;span&gt;//&lt;/span&gt;&lt;span&gt;签名验证通过，业务处理
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端 在回调中需要 传入的字段&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt;             
&lt;span&gt;172&lt;/span&gt;             response(request, response, &quot;{\&quot;Status\&quot;:\&quot;OK\&quot;}&quot;&lt;span&gt;, HttpServletResponse.SC_OK);
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;             //业务处理..... 此处省略
&lt;span&gt;174&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(obj.containsKey(&quot;uid&quot;) &amp;amp;&amp;amp; StringUtils.isNotEmpty(obj.get(&quot;uid&quot;)+&quot;&quot;&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;                 String uid  = obj.get(&quot;uid&quot;&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;biz_type : 1:用户头像、banner ,2:投诉建议图片上传&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;             response(request, response, &quot;{\&quot;Status\&quot;:\&quot;verdify not ok\&quot;}&quot;&lt;span&gt;, HttpServletResponse.SC_BAD_REQUEST);
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt; &lt;span&gt;        }&lt;/span&gt;
&lt;span&gt;226&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;     
&lt;span&gt;229&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; doCheck(String content, &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] sign, String publicKey) {
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt;             KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt;             &lt;span&gt;byte&lt;/span&gt;[] encodedKey =&lt;span&gt; BinaryUtil.fromBase64String(publicKey);
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;             PublicKey pubKey = keyFactory.generatePublic(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; X509EncodedKeySpec(encodedKey));
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;             java.security.Signature signature = java.security.Signature.getInstance(&quot;MD5withRSA&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt; &lt;span&gt;            signature.initVerify(pubKey);
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt; &lt;span&gt;            signature.update(content.getBytes());
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt;             &lt;span&gt;boolean&lt;/span&gt; bverify =&lt;span&gt; signature.verify(sign);
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; bverify;
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; 
&lt;span&gt;240&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt; 
&lt;span&gt;244&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt; 
&lt;span&gt;247&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; response(HttpServletRequest request, HttpServletResponse response, String results, &lt;span&gt;int&lt;/span&gt; status) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt;         String callbackFunName = request.getParameter(&quot;callback&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;         System.out.println(&quot;callbackFunName:&quot;+&lt;span&gt;callbackFunName);
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;         response.addHeader(&quot;Content-Length&quot;&lt;span&gt;, String.valueOf(results.length()));
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (callbackFunName == &lt;span&gt;null&lt;/span&gt; || callbackFunName.equalsIgnoreCase(&quot;&quot;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; &lt;span&gt;            response.getWriter().println(results);
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;254&lt;/span&gt;             response.getWriter().println(callbackFunName + &quot;( &quot; + results + &quot; )&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;        response.setStatus(status);
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt; &lt;span&gt;        response.flushBuffer();
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;     
&lt;span&gt;259&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 四.关于oss 上传，并设置回调就介绍到这里，本篇文章没有介绍，oss服务配置，主要是讲技术坑。如有什么问题，请留言联系我，很乐意解决大家的问题。&lt;/p&gt;
&lt;p&gt;       另外郑重说明，本篇文章是本人原创，如需转载 请标注转载原文地址。&lt;/p&gt;

</description>
<pubDate>Sun, 03 Dec 2017 06:06:00 +0000</pubDate>
<dc:creator>苏铭客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sumingk/p/7966016.html</dc:identifier>
</item>
<item>
<title>c#游戏进程杀手 - 昆明--菜鸟入门</title>
<link>http://www.cnblogs.com/kunming97/p/7965441.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kunming97/p/7965441.html</guid>
<description>&lt;p&gt;我认为写博客还是比较重要的，特别是短时间写出一个含有新知识点的软件。这样总结下这次编程经验和再捋顺一下这次编程思路。首先来谈谈为什么想做这个小程序，一是感觉自己太贪玩想控制一下，二是也锻炼下自己的编程。好，话不多说进入正题吧。&lt;/p&gt;
&lt;p&gt;文件源代码在这个&lt;a href=&quot;https://i.cnblogs.com/Files.aspx?order=1&quot; target=&quot;_blank&quot;&gt;https://i.cnblogs.com/Files.aspx?order=1&lt;/a&gt;下面。名字是ApplicationControl。不过使用的时候你还是要到子窗体中设置你的游戏库，我这里只有WeGame、LOL登陆程序的进程名称。源码有点乱，见谅。如需改进，请多指教。&lt;/p&gt;
&lt;p&gt;首先给大家展示一下程序结果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1124164/201712/1124164-20171203094047210-2059759413.png&quot; alt=&quot;&quot; width=&quot;379&quot; height=&quot;245&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里的原理很简单，就是写一个监视进程的函数如果发现进程列表中有相同名字的进程则调用process类中的kill方法杀死进程，再设置一个计时器来循环调用该函数即可。&lt;/p&gt;
&lt;p&gt;首先我们窗体加载函数中调用一个初始化函数。&lt;/p&gt;
&lt;p&gt;Initial函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Initial()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             timer1.Enabled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;24&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 Hour.Items.Add(i); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;combox控件名称&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             Hour.SelectedIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;60&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                Minute.Items.Add(i);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                Sceond.Items.Add(i);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             Minute.SelectedIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             Sceond.SelectedIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             LoadTime();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;后面解释说明&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; fileName = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;\gamelist.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;后面解释说明 首次加载程序&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; dirpath =&lt;span&gt; System.Environment.CurrentDirectory;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; path = dirpath +&lt;span&gt; fileName;&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (File.Exists(path))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     StreamReader sr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(path, Encoding.UTF8);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt;&lt;span&gt; line;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     &lt;span&gt;while&lt;/span&gt; ((line = sr.ReadLine()) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                        gamename.Add(line);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                         textBox1.AppendText(line + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    sr.Dispose();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; { };
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;           
&lt;span&gt;36&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中Hour、Minute、sceond（秒翻译错了，应该是second，哈哈）分别是Combox控件的名称。计时器控件则是Timer1。&lt;/p&gt;
&lt;p&gt;之后就可以为启动button写函数了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; button3_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             flag = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             timer1.Enabled = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;                    
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             timer1.Interval = &lt;span&gt;500&lt;/span&gt;&lt;span&gt;;                   
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             h = Convert.ToInt32(Hour.SelectedItem);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户选择的时间&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             m =&lt;span&gt; Convert.ToInt32(Minute.SelectedItem);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             s =&lt;span&gt; Convert.ToInt32(Sceond.SelectedItem);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             TS = &lt;span&gt;new&lt;/span&gt; TimeSpan(h, m, s);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置一个TimeSpan对象来存放时间&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击按钮，告诉计时器开始工作，并把用户选择的时间存储起来。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计时器函数。&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; timer1_Tick(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (timer1.Enabled == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 GameControl();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用进程检查函数，如果存在则查杀&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; str1 = TS.Hours.ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + TS.Minutes.ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; TS.Seconds.ToString();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 time.Text = str1;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置时间标签&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; str2 = TSsum.Hours.ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + TSsum.Minutes.ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; TSsum.Seconds.ToString();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 label8.Text = str2; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;总时间显示标签&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                 TS = TS.Subtract(&lt;span&gt;new&lt;/span&gt; TimeSpan(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TS 每隔一秒设置时间减一倒计时效果&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 TSsum = TSsum.Add(&lt;span&gt;new&lt;/span&gt; TimeSpan(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TSsum 每隔一秒总时间加一&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (TS.TotalSeconds &amp;lt; &lt;span&gt;0.0&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;倒计时完毕&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     timer1.Enabled = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     MessageBox.Show(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你离成功又进了一步&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     flag = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     flagtime = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     LoadTime();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;另外说明&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每次调用GameControl去查杀进程。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; GameControl()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             List&amp;lt;Process[]&amp;gt; pro = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Process[]&amp;gt;(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;进程的泛型集合 因为可能对多个进程进行监视 可以理解为装箱&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             Process[] gameProcess =Process.GetProcessesByName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Taskmgr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;防止用任务管理器关闭这个程序&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            pro.Add(gameProcess);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;gamename是所有游戏进程名字的泛型集合。&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; gamename.Count; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 gameProcess = Process.GetProcessesByName(gamename[i].Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;).Trim());
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                pro.Add(gameProcess);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            }           
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; pro.Count;i++&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         Process[] game = pro[i]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以理解为拆箱 &lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                         &lt;span&gt;foreach&lt;/span&gt; (Process p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; game)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                            p.Kill();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用一个trycatch防止程序抛异常。&lt;/p&gt;
&lt;p&gt;这样连任务管理器都关不了的程序，怎么办呢，我们还是比较人性化设置一个结束button来提前结束这个程序。只是有很多弹出框。~嘿嘿！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;结束按钮&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; shutdown_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             Thread th = &lt;span&gt;new&lt;/span&gt; Thread(ShutDown); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开启一个新线程运行&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            th.Start();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ShutDown()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (flag == &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;flag 标识程序是否跑起来了 0--否 1--是 跑起来才有作用&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 DialogResult re = MessageBox.Show(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;能不能再坚持一会儿？&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, MessageBoxButtons.YesNo);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (re ==&lt;span&gt; DialogResult.No)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     Thread.Sleep(&lt;span&gt;5000&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择一次否，休眠5s（给你时间冷静下冲动的大脑）&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                     re = MessageBox.Show(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;坚持就是胜利，不要放弃！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, MessageBoxButtons.YesNo);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (re ==&lt;span&gt; DialogResult.No)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         Thread.Sleep(&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                         re = MessageBox.Show(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你离成功就差一步了！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, MessageBoxButtons.YesNo);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (re ==&lt;span&gt; DialogResult.No)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                             Thread.Sleep(&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                             re = MessageBox.Show(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;想一想自己还有没有其他更重要的事做没做！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, MessageBoxButtons.YesNo);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                             &lt;span&gt;if&lt;/span&gt; (re ==&lt;span&gt; DialogResult.No)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                                 Thread.Sleep(&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                                 re = MessageBox.Show(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;比你牛逼的人还在努力！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, MessageBoxButtons.YesNo);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                                 timer1.Enabled = &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭计时器&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;                                 flagtime = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                                 flag = &lt;span&gt;0&lt;/span&gt;;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置程序状态--关闭&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                                 LoadTime();       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将这段时间加到总时间上&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            }        
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里开启一个新线程运行这个函数是为了防止我们我们主线程休眠。如果不开，就整个程序休眠5s。开了就相当于这个函数休眠5s。&lt;/p&gt;
&lt;p&gt;当然呢，任务管理器关不掉那我们可以点击窗口关闭按钮啦（不过NO way~）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;窗体关闭时发生&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ApplicationControl_FormClosing(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, FormClosingEventArgs e)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (flag != &lt;span&gt;0&lt;/span&gt;)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断程序是否运行&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                 e.Cancel = &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取消这个动作&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里我们基本已经将这个程序的主要功能做出来了。那我们再做点东西来润色、润色。别看看它只是修饰功能，它的难度一点都不比我们主要功能小。&lt;/p&gt;
&lt;p&gt;首先我们不是有个叫“控制总时长”的标签吗：这个是记录我们每次设置时间到结束的总时长。它的原理就是本次程序结束后，生成一个txt文件将这个时间记录时间，如果存在这个文件则覆盖上去，就实现了时间的刷新。当然了，我们每次首先需要在程序加载时，把这个时间读取出来。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载、更新总时间&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; LoadTime()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; fileName = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;\sumtime.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成一个名字为sumtime的文本文件&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; str = System.Environment.CurrentDirectory; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;程序所在路径&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; path = str + fileName;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;路径拼接&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            FileStream fs;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!File.Exists(path)) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果不存在此文件（首次运行该程序）&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 fs = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileStream(path, FileMode.Create);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (flagtime == &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取时间 窗体加载时完成&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     StreamReader sr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(path, Encoding.UTF8);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    DateTime line;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     line =&lt;span&gt; Convert.ToDateTime(sr.ReadLine());
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     hsum =&lt;span&gt; line.Hour;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     msum =&lt;span&gt; line.Minute;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     ssum =&lt;span&gt; line.Second;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     TSsum = &lt;span&gt;new&lt;/span&gt; TimeSpan(hsum, msum, ssum); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;记录读取的总时间&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                     label8.Text = line.Hour.ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + line.Minute.ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; line.Second.ToString();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                    sr.Dispose();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; { };
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你能看到这个函数有两个功能，一个读取时间、一个写入时间，所以这个函数有两个地方被调用到。&lt;/p&gt;
&lt;p&gt;读取：初始化程序时调用了（Initial()）;&lt;/p&gt;
&lt;p&gt;写入：当计时器为0时调用（timer）；&lt;/p&gt;
&lt;p&gt;　　　当点击结束按钮时，设置时间并未到0（相当于强制关闭）用到了。&lt;/p&gt;
&lt;p&gt;好了，这个功能做了。那么我们还有一个功能没做，那就是添加游戏名称到我们gamename泛型集合中，当然你可以手动gamename.add(&quot;游戏名称&quot;)；但是我们能不能更人性化、智能化一点呢，答案肯定是可以的。&lt;/p&gt;
&lt;p&gt;那我们要做的就是点击“扫描全盘按钮”。它的原理是点击后开启一个新窗体（子窗体）选择要搜索的分区，如果找到了与我们游戏库（这也是一个泛型集合）中名称相同的就记录返回到我们主窗体中的gamename集合中。&lt;/p&gt;
&lt;p&gt;先上图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1124164/201712/1124164-20171203112644866-185839265.png&quot; alt=&quot;&quot; width=&quot;274&quot; height=&quot;176&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3个checkbox根据选择状态，返回一个值（C、D、E），点击确定开始搜索。搜索完毕，返回找到的游戏名称。&lt;/p&gt;
&lt;p&gt;这里特别说一下checkbox的size要重新设置下，我原来以为它的大小就是那个小方框。其实它要大的多，如果间距设小了，其他的checkbox就被挡住了（效果就是只有一个），我当时做的时候卡在这里半天，我还以为出现了灵异事件，最后问了下老师才知道。&lt;/p&gt;
&lt;p&gt;那么有人要问了为什么会是C、D、E，我有F盘呢？别急。我们首先在初始化窗体时遍历一遍盘符、统计。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; gameBase = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;我们的游戏库
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;窗体加载&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; ChooseArea_Load(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; drivesCount = System.IO.Directory.GetLogicalDrives().Length;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取盘符数&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             CheckBox[] box=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CheckBox[drivesCount];         
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;110&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; drivesCount;i++&lt;span&gt; )
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 box[i] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CheckBox();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;char&lt;/span&gt; abc =Convert.ToChar(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+i); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从C开始+1，转成（D、E...）&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 box[i].Text = abc+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;盘&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;checkbox空间名称 生成&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;                 box[i].Name=&lt;span&gt;abc.ToString();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 box[i].Size = &lt;span&gt;new&lt;/span&gt; Size(&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 box[i].Location = &lt;span&gt;new&lt;/span&gt; Point(x,&lt;span&gt;80&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                groupBox1.Controls.Add(box[i]);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 x += &lt;span&gt;55&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3个box的横轴间距&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             gameBase.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tgp_daemon.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); //添加游戏进程名称
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             gameBase.Add(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Client.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就能生成相应的checkbox数量了。&lt;/p&gt;
&lt;p&gt;然后点击确定button，返回有哪些盘被选中再构建路径去磁盘里搜索。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;确定按钮&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; button1_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; check = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储选中状态下的checkbox值（C盘、D盘、...）&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (Control c &lt;span&gt;in&lt;/span&gt; groupBox1.Controls)&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历groupbox容器里的控件&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (c &lt;span&gt;is&lt;/span&gt; CheckBox) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果类型为Checkbox&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (((CheckBox)c).Checked == &lt;span&gt;true&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否为选中状态&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                        check.Add(((CheckBox)c).Text);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; check.Count; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;构建寻找路径(C:\\、D:\\...)&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; path = check[&lt;span&gt;0&lt;/span&gt;].Substring(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;)+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:\\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 FindFiles(path); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始搜索&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.Close();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;搜索完毕后，自动关闭子窗口&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中最重要的一环就是FindFiles(path)函数了。我们怎样将子窗口的搜索到的值返回给我们主窗体呢，那么委托和事件就登场了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;delegate&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GameListDelegate(&lt;span&gt;string&lt;/span&gt; str);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明委托&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;event&lt;/span&gt; GameListDelegate GameNameUpdate;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明事件 &lt;/span&gt;
   &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; FindFiles(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; subpath)
        {
            FindFile ff &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FindFile(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个FindFile类&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; gameBase.Count; i++&lt;span&gt;)
            {
                ff.getFile(subpath, gameBase[i]); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用getFile函数，结果会存储在lis集合里。&lt;/span&gt;
                textBox1.AppendText(ff.lst[i].ToString() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示  &lt;/span&gt;
&lt;span&gt;            }           
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (GameNameUpdate != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断事件是否被注册&lt;/span&gt;
&lt;span&gt;            {
                GameNameUpdate(textBox1.Text.ToString());
            }
        
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后GameNameUpdate这个事件在主窗体‘扫描全盘游戏’按钮点击事件里被注册上LoadGame;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; addGame_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             chooseArea ca = &lt;span&gt;new&lt;/span&gt; chooseArea();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化子窗体&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             ca.GameNameUpdate += LoadGame; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册LoadGame事件
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ca.GameNameUpdate+=new chooseArea.GameListDelegate(LoadGame);&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;           ca.Show();            
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;LoadGame函数&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; LoadGame(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; str)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; fileName = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;\gamelist.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; dirpath =&lt;span&gt; System.Environment.CurrentDirectory;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; path = dirpath +&lt;span&gt; fileName;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            FileStream fs;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;File.Exists(path))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     textBox1.Text =&lt;span&gt; str;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     Regex regex = &lt;span&gt;new&lt;/span&gt; Regex(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为子窗体传过来的值有换行符&quot;\r\n&quot;;这里实例化一个正则表达式 regex类的对象来以字符串&quot;\r\n&quot;的形式进行分割&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt;[] name =&lt;span&gt; regex.Split(str);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; name.Length-&lt;span&gt;1&lt;/span&gt;; i++)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为分割后或多出一个&quot;&quot;变量；所以长度-1&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                         gamename.Add(name[i]); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导入gamename集合中 去查杀&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         fs = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileStream(path, FileMode.Create);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     StreamWriter sw = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamWriter(fs);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; gamename.Count; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                        sw.WriteLine(gamename[i]);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    sw.Flush();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                    sw.Close();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; { };
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     StreamReader sr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(path, Encoding.UTF8);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt;&lt;span&gt; line;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     &lt;span&gt;while&lt;/span&gt; ((line=sr.ReadLine()) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                        gamename.Add(line);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                         textBox1.AppendText(line + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                    sr.Dispose();
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; { };
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的生成一个文本文件,下次进入程序如果有就不用再扫描全盘了。&lt;/p&gt;
&lt;p&gt;再返回我们的子窗体中的FindFiles函数中的FindFile类，它是我们搜索文件的关键。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ChooseArea
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FindFile
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;           &lt;span&gt;public&lt;/span&gt; List&amp;lt;FileInfo&amp;gt; lst = &lt;span&gt;new&lt;/span&gt; List&amp;lt;FileInfo&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;           &lt;span&gt;public&lt;/span&gt; List&amp;lt;FileInfo&amp;gt; getFile(&lt;span&gt;string&lt;/span&gt; path, &lt;span&gt;string&lt;/span&gt; extName)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个List&amp;lt;FileInfo&amp;gt;类型的函数 &lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;         { 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             getdir(path, extName);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传入路径、文件名 &lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lst; 
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;         } 
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;   
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; getdir(&lt;span&gt;string&lt;/span&gt; path, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; extName)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;          {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;               &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;              {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取文件夹列表&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                   &lt;span&gt;string&lt;/span&gt;[] dirs =&lt;span&gt; Directory.GetDirectories(path);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                   DirectoryInfo fdir = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DirectoryInfo(path);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                   FileInfo[] file =&lt;span&gt; fdir.GetFiles();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前目录文件或目录不为空&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                   &lt;span&gt;if&lt;/span&gt; (file.Length != &lt;span&gt;0&lt;/span&gt; || dirs.Length != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                  {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                       &lt;span&gt;foreach&lt;/span&gt; (FileInfo f &lt;span&gt;in&lt;/span&gt;&lt;span&gt; file)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                      {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                           &lt;span&gt;if&lt;/span&gt; (extName.ToLower().IndexOf(f.Name.ToLower()) &amp;gt;= &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;匹配上&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                          {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                              lst.Add(f);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                          }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                      }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                       &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt; d &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dirs)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                      {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                           getdir(d, extName);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归   &lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                      }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                  }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;              }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;               &lt;span&gt;catch&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;              {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;              }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好，这样一个程序就做成功了。呱唧，呱唧。&lt;/p&gt;

</description>
<pubDate>Sun, 03 Dec 2017 05:25:00 +0000</pubDate>
<dc:creator>昆明--菜鸟入门</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kunming97/p/7965441.html</dc:identifier>
</item>
<item>
<title>技术管理 - tylercao</title>
<link>http://www.cnblogs.com/tylercao/p/7965781.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tylercao/p/7965781.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/524680/201712/524680-20171203121712241-710769970.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最近一直在思考技术转管理过程中需要注意到的一些事情，现在就总结下分享给大家看看&lt;/p&gt;
&lt;p&gt;在转变过程中，需要注意到一下三个方面&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;业务管理&lt;/li&gt;
&lt;li&gt;团队管理&lt;/li&gt;
&lt;li&gt;技术管理&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;业务管理&quot;&gt;业务管理&lt;/h2&gt;
&lt;p&gt;业务管理，主要就是管理我们需要处理的业务需求。其实我们可分为这几大块&lt;/p&gt;
&lt;h3 id=&quot;内容&quot;&gt;内容&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;每天的任务分配与分解&lt;/li&gt;
&lt;li&gt;制定大致的开发排期&lt;/li&gt;
&lt;li&gt;每天了解开发进度&lt;/li&gt;
&lt;li&gt;讨论与跟进各种具体的技术问题&lt;/li&gt;
&lt;li&gt;协调一些产品需求变更&lt;/li&gt;
&lt;li&gt;响应一些市场同事的需求&lt;/li&gt;
&lt;li&gt;跟进功能上线&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;敏捷&quot;&gt;敏捷&lt;/h3&gt;
&lt;p&gt;关于敏捷开发，针对不一样的团队、不同的产品，具体实践方式是不同的。不过重要的是每过段时间，需要做总结，来反思过去的一段时间中，是否出现变坏的趋势，然后在针对性的改进。&lt;/p&gt;
&lt;p&gt;总结下「&lt;strong&gt;敏捷是态度而不是流程，是氛围而不是方法&lt;/strong&gt;」。&lt;/p&gt;
&lt;p&gt;具体实践有下面 4 个部分组成&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;计划会议&lt;/li&gt;
&lt;li&gt;每日站会&lt;/li&gt;
&lt;li&gt;评审会议&lt;/li&gt;
&lt;li&gt;回顾会议&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;困难&quot;&gt;困难&lt;/h3&gt;
&lt;p&gt;困难的地方很多，或者说当坐上管理岗位后，承担的责任就变重很多，体现在以下 5 个方面&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;需求变更&lt;/li&gt;
&lt;li&gt;线上紧急事故处理&lt;/li&gt;
&lt;li&gt;业务临时需求&lt;/li&gt;
&lt;li&gt;跨部门沟通&lt;/li&gt;
&lt;li&gt;开发进度风险&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;心得&quot;&gt;心得&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;及时试用产品&lt;/li&gt;
&lt;li&gt;观察燃尽图&lt;/li&gt;
&lt;li&gt;多沟通&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;花费时间&quot;&gt;花费时间&lt;/h3&gt;
&lt;h2 id=&quot;团队管理&quot;&gt;团队管理&lt;/h2&gt;
&lt;h3 id=&quot;招人&quot;&gt;招人&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;前同事&lt;/li&gt;
&lt;li&gt;内部推荐&lt;/li&gt;
&lt;li&gt;技术分享&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;带人&quot;&gt;带人&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;指导新人
&lt;ul&gt;&lt;li&gt;工作上指导&lt;/li&gt;
&lt;li&gt;技术细节讲解&lt;/li&gt;
&lt;li&gt;code review&lt;/li&gt;
&lt;li&gt;工作方式与态度&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;非工作上的帮助
&lt;ul&gt;&lt;li&gt;mentor要与新人成为朋友&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果一件事情你熟悉了，不要做，交给新人做
&lt;ul&gt;&lt;li&gt;鼓励新人提问&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一对一沟通&lt;/li&gt;
&lt;li&gt;建立舒适的沟通环境&lt;/li&gt;
&lt;li&gt;保持真诚&lt;/li&gt;
&lt;li&gt;让对方主动说，适当引导&lt;/li&gt;
&lt;li&gt;沟通频率&lt;/li&gt;
&lt;li&gt;沟通时长&lt;/li&gt;
&lt;li&gt;构建私密，轻松，真诚，有效的环境，两个人一起讨论问题与互相学习&lt;/li&gt;
&lt;li&gt;团队活动&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;花费时间-1&quot;&gt;花费时间&lt;/h3&gt;
&lt;h2 id=&quot;技术管理&quot;&gt;技术管理&lt;/h2&gt;
&lt;h3 id=&quot;内容-1&quot;&gt;内容&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;技术架构是否合理？&lt;/li&gt;
&lt;li&gt;流量增长，现在架构能否胜任&lt;/li&gt;
&lt;li&gt;活动期间，突发流量多少，能否承受压力&lt;/li&gt;
&lt;li&gt;未来架构如何变化&lt;/li&gt;
&lt;li&gt;客户端投入哪些技术方案&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;建立有技术追求的团队&quot;&gt;建立有技术追求的团队&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;推进技术wiki的使用&lt;/li&gt;
&lt;li&gt;推进技术分享&lt;/li&gt;
&lt;li&gt;推进code review&lt;/li&gt;
&lt;li&gt;推进追求代码质量&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;思考技术上的挑战提前做准备&quot;&gt;思考技术上的挑战，提前做准备&lt;/h3&gt;
&lt;h3 id=&quot;花费时间-2&quot;&gt;花费时间&lt;/h3&gt;
</description>
<pubDate>Sun, 03 Dec 2017 04:18:00 +0000</pubDate>
<dc:creator>tylercao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tylercao/p/7965781.html</dc:identifier>
</item>
<item>
<title>C/C++中如何接收return返回来的数组元素 - 詹韦</title>
<link>http://www.cnblogs.com/Wade-James/p/7965775.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wade-James/p/7965775.html</guid>
<description>&lt;p&gt;　　我们知道return语句作为被调用函数的结束，返回给调用者函数值。一般来说，是返回一个函数值，像一个int， double，char等类型的数据，当然也可以是他们的指针。但是当我们遇到要返回很多数怎么办呢？通常想到的是以数组的形式返回，下面就让我们来看看：&lt;/p&gt;
&lt;p&gt;　　通常来说有两种方式：1.通过返回传入数组指针的方式；2.以指针变量作为函数参数，来实现数组的返回。&lt;/p&gt;
&lt;p&gt;　　一、返回传入数组指针的方式&lt;/p&gt;
&lt;p&gt;　　首先我们来看看这种方法所涉及的知识：（1）指针函数。C语言中允许一个函数返回值是一个指针（地址）基本格式是： 基类型 * 函数名（参数列表）（2）静态变量与局部变量。我们知道C语言程序在运行时，操作系统会给其分配内存空间。这段空间主要分为四个区域，分别是栈取，堆区，数据区，代码区。那么静态变量是存放在数据区，作用范围是全局的，在内存中只存储一份。局部变量通常放在栈中，随着被调用的函数的退出内存空间自动释放。 要接收被调函数返回的指针，那么可以使用一个指针变量。关键是被调函数用什么去返回数组的首地址，正如前面所说，被调函数在执行完之后内存空间就被释放。这里提供两种方法解决这一问题:1)通过传入一个空的数组头地址，返回这个变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过返回传入数组的指针的方式&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stdio.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义指针函数&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *copy(&lt;span&gt;int&lt;/span&gt; array[], &lt;span&gt;int&lt;/span&gt; a[], &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; size = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; a2[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; a1[&lt;span&gt;4&lt;/span&gt;] = {&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt; ,&lt;span&gt;8&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; *&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     p =&lt;span&gt; copy(a1, a2, size);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     cout &amp;lt;&amp;lt; p[&lt;span&gt;0&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; p[&lt;span&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;p[&lt;span&gt;2&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; p[&lt;span&gt;3&lt;/span&gt;] &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *copy(&lt;span&gt;int&lt;/span&gt; array[], &lt;span&gt;int&lt;/span&gt; a[], &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         a[i] =&lt;span&gt; array[i];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 代码中我们可以看到通过返回main函数中的a数组的首地址，将其付给指针变量p，从而达到数组传递的作用。程序允许结果是如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1249716/201712/1249716-20171203113942132-1235892325.jpg&quot; alt=&quot;&quot; width=&quot;1308&quot; height=&quot;373&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 2) 我们知道静态变量能够在整函数作用有效那么，我们可以定义一个静态的局部变量的数组来达到返回的效果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用静态变量进行返回 &lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;stdio.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义产生数组的函数 &lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *&lt;span&gt;TestFuction();  
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; *&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     p =&lt;span&gt; TestFuction();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(*p != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;&lt;span&gt;p); 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         p++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    } 
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;} 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; *&lt;span&gt;TestFuction(){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;  test[&lt;span&gt;5&lt;/span&gt;] = {&lt;span&gt;8&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; test;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面代码可知test数组是一个静态变量，在被调函数执行完成之后不会被释放，执行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1249716/201712/1249716-20171203114646272-1532755461.png&quot; alt=&quot;&quot; width=&quot;1293&quot; height=&quot;270&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 二、以指针变量作为函数参数，实现数组的返回&lt;/p&gt;
&lt;p&gt;　　指针变量变量需要动态分配内存，通常放在堆区中，该区域内通常又程序员分配或释放。将要处理的数组的首地址以实参的形式传递给函数处理，处理完后的指针适合实参的数组同一块地址，达到返回数组的效果。示例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用指针变量作为函数参数，来实现数组的返回&lt;/span&gt;
#include&amp;lt;iostream&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义一个以指针变量作为形参的函数,n作为循环次数&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; SumTest(&lt;span&gt;int&lt;/span&gt; *p, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n);
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main2(){
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; a[&lt;span&gt;5&lt;/span&gt;] = {&lt;span&gt;8&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;&lt;span&gt;};
    SumTest(a, &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(i &amp;lt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;){
        cout &lt;/span&gt;&amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        i&lt;/span&gt;++&lt;span&gt;;
    }
    cout &lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt; endl;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; SumTest(&lt;span&gt;int&lt;/span&gt; *p, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n){
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(i &amp;lt;&lt;span&gt; n){
        &lt;/span&gt;*p = *p + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        p&lt;/span&gt;++&lt;span&gt;;
        i&lt;/span&gt;++&lt;span&gt;;
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 如代码所示，指针变量作为参数传入函数中，进行数据处理，之后返回的就是处理后的数据。执行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1249716/201712/1249716-20171203120707116-1229597275.jpg&quot; alt=&quot;&quot; width=&quot;1181&quot; height=&quot;313&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上几种方法就能够实现，数组的返回。&lt;/p&gt;
</description>
<pubDate>Sun, 03 Dec 2017 04:11:00 +0000</pubDate>
<dc:creator>詹韦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wade-James/p/7965775.html</dc:identifier>
</item>
<item>
<title>【译】10个机器学习的JavaScript示例 - 雪飞鸿</title>
<link>http://www.cnblogs.com/Cwj-XFH/p/7965765.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Cwj-XFH/p/7965765.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;原文地址：&lt;a href=&quot;https://link.jianshu.com/?t=https://tutorialzine.com/2017/04/10-machine-learning-examples-in-javascript&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;10 Machine Learning Examples in JavaScript&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在过去的每一年，用于机器学习（Machine Learning）的库在变得越来越快和易用。一直以来Python都是机器学习的首选语言，但现在几乎可将所有语言用于神经网络（neural networks），这里当然也包括JavaScript！&lt;/p&gt;
&lt;p&gt;近几年，Web生态系统取得了很大进步，虽然JavaScript和Node.js的性能比Python和Java略差，但它们已足够处理许多机器学习问题。Web语言具有被广泛且易于使用的优势——你只需一个Web浏览器就可以运行一个JavaScript语言编写的机器学习项目。&lt;/p&gt;
&lt;p&gt;虽然许多JavaScript语言编写的机器学习库是刚刚诞生并且还在持续开发中，但还是值得去尝试使用它们。这篇文章会介绍几个JavaScript语言编写的机器学习库以及一些很酷的AI Web应用示例，它们可以很好的帮助你开始AI之旅。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-3b29d01c304f66c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-3b29d01c304f66c0.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;53110&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;使用Brain 可以轻松的创建神经网络，并且可通过输入/输出数据对它进行训练。因为训练神经网络会消耗比较多的资源，所以推荐在Node.js环境中而不是直接使用浏览器来训练神经网络。在官网上有个可以识别颜色（recognize color contrast）的小&lt;a href=&quot;https://link.jianshu.com/?t=http://brainjs.com/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;demo&lt;/a&gt; （PS:试了下，这个demo现在是404页面）。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-808722f67502032d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-808722f67502032d.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;215972&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这是一个寓教于乐的Web应用，可以让你以游戏的方式来探索神经网络的不同部分。它有一个友好的界面用于让你控制数据的输入，算法所用的神经元数量以及其它一些会影响输出结果的权值因素。这是一个开源项目，它是使用TypeScript编写的&lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/tensorflow/playground/blob/master/src/nn.ts&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;机器学习库&lt;/a&gt;并且有完善的文档，从中我们可以许多东西。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-bba69ad0155e9c1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-bba69ad0155e9c1b.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;84774&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;FlappyLearning 项目大约800行代码，这个项目包含一个机器学习库并且实现了一个很有趣的&lt;a href=&quot;https://link.jianshu.com/?t=https://xviniette.github.io/FlappyLearning/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;demo&lt;/a&gt;——学习玩 &lt;a href=&quot;https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Flappy_Bird&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Flappy Bird&lt;/a&gt; 游戏。它使用了一种叫做 &lt;a href=&quot;https://link.jianshu.com/?t=http://www.scholarpedia.org/article/Neuroevolution&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Neuroevolution&lt;/a&gt; 的AI技术，使用了受自然神经系统激发而产生的算法，可以从每次成功或失败的迭代中进行动态进行学习。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-9a5dbaa2bbf991bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-9a5dbaa2bbf991bd.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;205778&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;.png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Synaptic是一个架构无关（architecture-agnostic）且得到积极维护的Node.js和浏览器库，它允许开发者构建任何类型的神经网络。它有几个内置的架构，使得可以快速测试和比较不同机器学习算法间的异同。它还提供了介绍神经网络的文档及几个实用demo和其它可以帮助我们学习机器学习的教程。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-ed35879ca8f5d6f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-ed35879ca8f5d6f2.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;523596&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Land Lines 是一个有趣的用于搜寻地球卫星图片的Chrome网络实验（web experiment）。这个应用无需服务调用：它完全运行在浏览器环境中，得益于机器学习的使用，WebGL也可以在移动设备中有很好的表现。你可以在&lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/ofZach/landlines&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; 上浏览源码或者在&lt;a href=&quot;https://link.jianshu.com/?t=https://developers.google.com/web/showcase/2016/land-lines&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;阅读完整的示例。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;902&quot; data-height=&quot;154&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-833628b9803f00d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-833628b9803f00d6.png&quot; data-original-width=&quot;902&quot; data-original-height=&quot;154&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;26866&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;尽管已不再被积极的维护，但ConvNetJS依然是JavaScriptp中最为先进的深度学习库之一。这个库最初由斯坦福大学开发，然后ConvNetJS开始在GitHub上流行，社区为它添加了许多特性和教程。ConvNetJS直接运行在浏览器环境中，支持多种学习技术，并且它接近底层原理使得它更适有较多神经网络方面经验的人。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-d3201c5435cf3d59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-d3201c5435cf3d59.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;254753&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Thing Translator是一个网络实验，它可以让你的手机识别真是的物体并用不同的语言标注物体的名称。这个应用完全建立在web技术之上并且利用了Google提供的两种机器学习APIs——用于图像识别的&lt;a href=&quot;https://link.jianshu.com/?t=https://cloud.google.com/vision/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Cloud Vision&lt;/a&gt; 和用于自然语言翻译的&lt;a href=&quot;https://link.jianshu.com/?t=https://cloud.google.com/translate/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Translate API&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-5f3b07fec4a8ff89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-5f3b07fec4a8ff89.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;132117&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nerojs用于建立基于增强学习（reinforcement learning）的AI系统框架。不幸的是这个开源项目除了一个自动驾驶实验的demo外并没有完善的文档，这个demo对组成神经网络的不同部分有着很好的描述。这个库借助如现代化工具如：&lt;a href=&quot;https://link.jianshu.com/?t=https://webpack.github.io/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt; 和&lt;a href=&quot;https://link.jianshu.com/?t=https://babeljs.io/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;babel&lt;/a&gt;，使用纯JavaScript进行开发。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-12c4356b9cb25fd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-12c4356b9cb25fd2.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;22084&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这也是一个允许我们仅使用JavaScript创建并训练神经网络的库。它很容易就可以安装到Node.js和客户端环境，并且拥有对开发人员十分友好的的API。这个库提供了许多&lt;a href=&quot;https://link.jianshu.com/?t=http://joonku.com/project/machine_learning&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;示例&lt;/a&gt;，可以帮助你理解机器学习的核心原理。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-7655d98691405886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-7655d98691405886.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;151267&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;DeepForge是一个用于深度学习且易于使用的开发环境。它允许你使用简单的图形接口创建神经网络，支持在远程机器上训练模型，并且内置版本控制系统。这个项目基于Node.js和MongoDB且运行在浏览器环境中。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;785&quot; data-height=&quot;370&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1458860-b1f8249c7145fdfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/1458860-b1f8249c7145fdfb.png&quot; data-original-width=&quot;785&quot; data-original-height=&quot;370&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;25183&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Burak Kanber 发布的一些列优秀博文中讲述了机器学习的基本原理。这些教程写的很好且专门面向JavaScript开发者。如果你想深入理解机器学习，这些博文是很好的学习资源。&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;尽管JavaScript的机器学习生态尚未成熟，但仍然建议使用上述资源来开启你的机器学习之路并对一些核心技术建立感性认识。正如文章中展示的一些实验，你也可以仅使用浏览器和少量JavaScript代码来创建许多有趣的东西。&lt;/p&gt;
&lt;h2&gt;推荐阅读&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https://www.microsoft.com/net/learn/apps/machine-learning-and-ai&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Machine Learning and AI&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https://www.tensorflow.org/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Tensorflow&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 03 Dec 2017 04:07:00 +0000</pubDate>
<dc:creator>雪飞鸿</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Cwj-XFH/p/7965765.html</dc:identifier>
</item>
<item>
<title>契约测试的必要性 - 不负春光，努力生长</title>
<link>http://www.cnblogs.com/Wolfmanlq/p/7965621.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Wolfmanlq/p/7965621.html</guid>
<description>&lt;h2&gt;测试金字塔模型&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;测试是软件流程中非常重要，不可或缺的一个环节。一般的测试分为单元测试，集成测试，端到端的手工测试，这也是构成测试金字塔的三个层级。我们今天将要讨论的话题是契约测试，它是处于单元测试和集成测试中间的一个环节。这三个层级分别测试的场景如下：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;单元测试：测试单个service&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;集成测试：测试由多个services组成的系统&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;端到端测试：测试从用户到各个外部系统的整个场景&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/423536/201712/423536-20171203103110538-1112918539.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;什么是契约测试？&lt;/h2&gt;
&lt;p&gt;&lt;span&gt; 契约测试最开始的概念由Martin Fowler 提出，请参见&lt;a href=&quot;https://martinfowler.com/articles/consumerDrivenContracts.html&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;， 它又被称之为：消费者驱动的契约测试（Consumer Driven Contracts）。这里的契约是指软件系统中各个服务间交互的数据标准格式，更多的指消费端（client）和提供端（server）之间交互的数据接口的格式。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;为什么要存在契约测试？&lt;/h2&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;系统工程中存在这样的理论：&lt;strong&gt;&lt;span&gt;线性系统（即复杂性随规模线性增长的系统）的可靠性等于组成它的各个组件的可靠性之乘积&lt;/span&gt;&lt;/strong&gt;。这容易理解，因为整个系统正常工作的条件是必须每个组件都同时正常工作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/423536/201712/423536-20171203104629616-1148535358.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如上图所述，三个组件共同支撑的系统，如果每个组件的可靠性是90%，那么整个系统的可靠性就是 90%×90%×90%=72.9%，我们可以看到系统整体的可靠度是低于任一组件的可靠性的。如果一个系统由100个组件组成，每个组件即使能达到99%的可靠性，那么整个系统的可靠性也会降到36.6%左右。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　我们常说复杂性是软件工程的最重要的特性，一个完善的软件系统必然是靠很多的子系统，组件共同撑起来的。根据上面的理论，如果是一个复杂的软件系统那么每一个组件的可靠性都对系统整体的可靠性有着非常重要的影响，排除组件本身的可靠性的因素，各个组件之间的相互依赖和调用关系也将会对系统的稳定性有着决定性的影响。随着业务的复杂度越来越高，整个系统也变得越来越庞大和错综复杂，在今天的软件工程开发中微服务已经不是一个新名词，在微服务的架构下通常一个client会与多个service相互交互，可以想象一下如果某一个服务的接口发生变化将会影响整个系统的运行。如下图展示的传统的大服务与微服务的区别&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/423536/201712/423536-20171203105845147-1611117182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么在微服务模式下如果保证各个服务端与消费端之间以及服务与服务之间能够可靠的交互呢？这就回到了到我们要聊的契约测试的话题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图，在服务端接口发生变化的情况下通过契约测试可以很容易的测试出契约不匹配，可以在集成测试之前就能发现问题，尽早解决。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/423536/201712/423536-20171203113742085-897455000.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;契约测试和单元测试，集成测试，端到端测试区别是什么？&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;单元测试：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;通常是测试单个类，方法的可靠性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;它的价值在于快速的反馈某一个很小的功能点是否能准确的工作&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;通过单元测试能够更明确的剖析你的实现逻辑&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果用TDD的开发模式，能够做代码重构以及改善代码整洁度&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;集成测试：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;关注的是各个服务之间交互&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;测试接口连通性和流程的可用性&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;端到端测试：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;从用户的角度验证整个功能的准确性和可用性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;测试的是端到端的流程，会加入用户数据验证功能是否可用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;不会关注在某一细小的功能点的实现&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;关注的是整个业务流程，产生的业务价值大&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;契约测试：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;测试接口和接口之间的正确性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;验证服务层提供的数据是否是消费端所需要的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;将本来需要在集成测试中体现的问题前移，更早的发现问题&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;更快速的验证消费端和提供端之间交互的基本正确性&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;契约测试解决能解决什么问题？&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;可以使得消费端和提供端之间测试解耦，不再需要客户端和服务端联调才能发现问题&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;完全由消费者驱动的方式，消费者需要什么数据，服务端就给什么样的数据，数据契约也是由消费者来定的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;测试前移，越早的发现问题，保证后续测试的完整性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;通过契约测试，团队能以一种离线的方式(不需要消费者、提供者同时在线)，通过契约作为中间的标准，验证提供者提供的内容是否满足消费者的期望。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;一般契约测试是在单元测试之后，集成测试之前要进行的，首先在保证各自功能正确的前提下测试消费者和提供者的契约是否相匹配，然后再进一步的测试功能的完备性和整个业务流的正确性。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;写在最后&lt;/h2&gt;
&lt;p&gt;本文主要浅显的介绍了契约测试是什么以及它的重要性，后续将会继续介绍契约测试的框架以及相关实践。&lt;/p&gt;

</description>
<pubDate>Sun, 03 Dec 2017 03:44:00 +0000</pubDate>
<dc:creator>不负春光，努力生长</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Wolfmanlq/p/7965621.html</dc:identifier>
</item>
<item>
<title>用echartsjs 实现散点图与table表格双向交互，以及实现echarts取自于table数据，和自定义echarts提示内容 - 猎八哥FLY</title>
<link>http://www.cnblogs.com/liebagefly/p/7961734.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liebagefly/p/7961734.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;js/echarts.js&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;information&quot;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;width: 400px;float: left;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;日期&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;产量&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;100&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;300&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;700&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;800&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;700&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;200&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;main&quot;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;width: 600px;height:400px;float: left;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            cccc
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; information &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [];        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 数据的源头，取自于表格&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt;&lt;span&gt; info &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.getElementById(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;information&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; table &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; info.getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; tr &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; table[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; myChart &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; echarts.init(document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; chosex,chosey;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;被选择的x、y&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化echarts实例  information&lt;/span&gt;
&lt;span&gt;            gainData();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取数据源&lt;/span&gt;
&lt;span&gt;            operationEcharts();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;运行echarts&lt;/span&gt;
&lt;span&gt;            trclick();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击table的数据时右边进行标亮&lt;/span&gt;
&lt;span&gt;            interleavecolor();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隔行变色&lt;/span&gt;
            &lt;span&gt;function&lt;/span&gt;&lt;span&gt; gainData() {&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将table中的数据赋给information&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;&lt;span&gt; td &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; info.getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;i&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;td.length &lt;/span&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;,i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;){
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; td[i].innerText&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; x轴&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt;&lt;span&gt; y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; td[i&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;].innerText&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; y轴&lt;/span&gt;
&lt;span&gt;                    information.push([&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取所有散点数据&lt;/span&gt;
&lt;span&gt;                        x,
                        y
                    ]);
                }
            }
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画echarts&lt;/span&gt;
               &lt;span&gt;function&lt;/span&gt;&lt;span&gt; operationEcharts(){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; option &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
                    title: {
                        text: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table与ECharts交互模式&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                    },
                    tooltip: {
                                padding: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                                backgroundColor: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#222&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                                borderColor: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#777&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                                borderWidth: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                                formatter: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (param) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                                    return '&amp;lt;div style=&quot;border-bottom: 1px solid rgba(255,255,255,.3); font-size: 18px;padding-bottom: 7px;margin-bottom: 7px&quot;&amp;gt;'&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                                        + 'table与ECharts交互模式'                                    &lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                                        + '&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                                        + '日期：' + param.data[0]&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                                        + &quot;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                                        + '产量：' + param.data[1];&lt;/span&gt;
&lt;span&gt;                                     console.log(param);
                                }
                    },
                    legend: {
                       
                    },
                    xAxis: {
                        splitLine: {show: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;},
                        axisLine: {
                            lineStyle : {
                                color: {
                                    type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;linear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                                    x: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                                    y: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                                    x2: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                                    y2: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                                    colorStops: [{
                                        offset: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, color: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0% 处的颜色&lt;/span&gt;
&lt;span&gt;                                    }, {
                                        offset: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, color: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 100% 处的颜色&lt;/span&gt;
&lt;span&gt;                                    }],
                                    globalCoord: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 缺省为 false&lt;/span&gt;
&lt;span&gt;                                },
                                    width: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
                            }
                        },
                    },
                    yAxis: {
                        splitLine: {show: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
                    },
                    series: [{
                        name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;销量&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                        data: information,
                    },
                    {
                            name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CHOSE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                            type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;effectScatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                            coordinateSystem: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cartesian2d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                            data: choseData(),
                            symbolSize: &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;,
                            showEffectOn: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;render&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                            rippleEffect: {
                                brushType: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;stroke&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                            },
                            hoverAnimation: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                            itemStyle: {
                                normal: {
                                    shadowBlur: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;,
                                    shadowColor: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rgba(25, 100, 150, 0.5)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                                    shadowOffsetY: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
                                    color: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; echarts.graphic.RadialGradient(&lt;/span&gt;&lt;span&gt;0.4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0.3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, [{
                                        offset: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                                        color: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#FF4500&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                                    }, {
                                        offset: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                                        color: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#FFFF00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                                    }])
                                }
                            },
                            zlevel: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                            label: {
                                emphasis: {
                                    show: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                                    formatter: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (param) {
                                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; param.data[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
                                    },
                                    position: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;top&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,    
                                    textStyle: {
                                        color : &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#FF4500&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                                    }                                
                                }
                            }
                        }
                    ]
               };
                myChart.setOption(option);
               }
               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标亮数据&lt;/span&gt;
               &lt;span&gt;function&lt;/span&gt;&lt;span&gt; choseData(){
                   &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; chose &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [];
                   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;chosex&lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;chosey){
                       chosex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                       chosey &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                   }
                   chose.push([chosex,chosey]);
                   &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; chose;
               }
               &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; trclick() {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; tr.length; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {
                    tr[i].onclick &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; clicktr() {
                        interleavecolor();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新加载一次隔行变色&lt;/span&gt;
                        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.style.background &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#FFFF00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;被点击的变为黄色&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; td &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getElementsByTagName(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                        chosex  &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; td[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].innerText&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                        chosey  &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; td[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;].innerText&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                        operationEcharts();    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新运行Echarts        &lt;/span&gt;
&lt;span&gt;                    }
                }    
            }
               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隔行变色&lt;/span&gt;
               &lt;span&gt;function&lt;/span&gt;&lt;span&gt; interleavecolor(){
                   &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (j &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;; j &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; tr.length; j&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {
                       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt;&lt;span&gt; j&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;){
                           tr[j].style.background &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#F0FFF0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                       }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                           tr[j].style.background &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#FFFAFA&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                       }
                }
               }
               &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果点击echarts图&lt;/span&gt;
&lt;span&gt;              myChart.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (params) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(params.componentType &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;series&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; k &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;; k &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; tr.length; k&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {    
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; tablex &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(tr[k].children[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].innerHTML); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 表格中的x轴&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; tabley &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(tr[k].children[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;].innerHTML); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 表格中的y轴&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; chartx &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(params.data[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 散点中的x轴&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt;&lt;span&gt; charty &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; String(params.data[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 散点中的y轴&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(tablex &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;  chartx &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; tabley &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; charty) {
                            interleavecolor();
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 控制页面滚动到指定位置&lt;/span&gt;
&lt;span&gt;                            tr[k].scrollIntoView();
                            tr[k].style.background &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#FFFF00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                            对应行变为黄色&lt;/span&gt;
&lt;span&gt;                            chosex  &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; params.data[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
                            chosey  &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; params.data[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
                            operationEcharts();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新加载echarts视图&lt;/span&gt;
&lt;span&gt;                            trclick();    
                            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                        }
                    } 
                }                
            });
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 03 Dec 2017 02:42:00 +0000</pubDate>
<dc:creator>猎八哥FLY</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liebagefly/p/7961734.html</dc:identifier>
</item>
</channel>
</rss>